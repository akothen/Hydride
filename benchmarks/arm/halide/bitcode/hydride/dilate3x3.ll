; ModuleID = 'dilate3x3'
source_filename = "/home/muchenx2/Hydride/frontends/halide/src/runtime/posix_allocator.cpp"
target datalayout = "e-m:o-i64:64-i128:128-n32:64-S128"
target triple = "arm64-apple-macosx"

%struct.mach_timebase_info = type { i32, i32 }
%"struct.Halide::Runtime::Internal::Synchronization::hash_table" = type { [1024 x %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"] }
%"struct.Halide::Runtime::Internal::Synchronization::hash_bucket" = type { %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* }
%"class.Halide::Runtime::Internal::Synchronization::word_lock" = type { i64 }
%"struct.Halide::Runtime::Internal::Synchronization::queue_data" = type { %"struct.Halide::Runtime::Internal::Synchronization::thread_parker", i64, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, i64 }
%"struct.Halide::Runtime::Internal::Synchronization::thread_parker" = type <{ %struct.pthread_mutex_t, %struct.pthread_mutex_t, i8, [7 x i8] }>
%struct.pthread_mutex_t = type { [8 x i64] }
%"struct.Halide::Runtime::Internal::work_queue_t" = type { %struct.halide_mutex, i32, i32, %"struct.Halide::Runtime::Internal::work"*, i32, i32, i32, [4 x i8], %struct.halide_mutex, %struct.halide_mutex, %struct.halide_mutex, i32, i32, [256 x %struct.halide_thread*], i8, i8, i32 }
%"struct.Halide::Runtime::Internal::work" = type { %struct.halide_parallel_task_t, i32 (i8*, i32, i8*)*, %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"*, i32, %"struct.Halide::Runtime::Internal::work"*, i32, i8*, i32, i32, i32, i8 }
%struct.halide_parallel_task_t = type { i32 (i8*, i32, i32, i8*, i8*)*, i8*, i8*, %struct.halide_semaphore_acquire_t*, i32, i32, i32, i32, i8, [7 x i8] }
%struct.halide_semaphore_acquire_t = type { %struct.halide_semaphore_t*, i32, [4 x i8] }
%struct.halide_semaphore_t = type { [2 x i64] }
%struct.halide_mutex = type { [1 x i64] }
%struct.halide_thread = type opaque
%"class.Halide::Runtime::Internal::TraceBuffer" = type { %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock", i32, i32, [1048576 x i8] }
%"class.Halide::Runtime::Internal::SharedExclusiveSpinLock" = type { i32 }
%struct.halide_trace_event_t = type <{ i8*, i8*, i32*, i8*, %struct.halide_type_t, i32, i32, i32, i32, [4 x i8] }>
%struct.halide_type_t = type { i8, i8, i16 }
%"struct.Halide::Runtime::Internal::CacheEntry" = type { %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"*, i8*, i64, i8*, i32, i32, i32, i32, %struct.halide_dimension_t*, %struct.halide_buffer_t*, i64, i8, [7 x i8] }
%struct.halide_dimension_t = type { i32, i32, i32, i32 }
%struct.halide_buffer_t = type { i64, %struct.halide_device_interface_t*, i8*, i64, %struct.halide_type_t, i32, %struct.halide_dimension_t*, i8* }
%struct.halide_device_interface_t = type { i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, void (i8*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i64, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, i32*, i32*)*, %struct.halide_device_interface_impl_t* }
%struct.halide_device_interface_impl_t = type { void ()*, void ()*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i64)*, i32 (i8*, %struct.halide_buffer_t*)* }
%struct.halide_device_allocation_pool = type { i32 (i8*)*, %struct.halide_device_allocation_pool* }
%struct.halide_profiler_state = type { %struct.halide_mutex, i32, i32, i32, i32, %struct.halide_profiler_pipeline_stats*, void (i32*, i32*)*, %struct.halide_thread* }
%struct.halide_profiler_pipeline_stats = type { i64, i64, i64, i64, i64, i64, i8*, %struct.halide_profiler_func_stats*, i8*, i32, i32, i32, i32, i32, [4 x i8] }
%struct.halide_profiler_func_stats = type { i64, i64, i64, i64, i64, i64, i64, i8*, i32, [4 x i8] }
%struct.halide_filter_argument_t = type { i8*, i32, i32, %struct.halide_type_t, %struct.halide_scalar_value_t*, %struct.halide_scalar_value_t*, %struct.halide_scalar_value_t*, %struct.halide_scalar_value_t*, i64** }
%struct.halide_scalar_value_t = type { %union.anon.28 }
%union.anon.28 = type { double }
%struct.halide_filter_metadata_t = type { i32, i32, %struct.halide_filter_argument_t*, i8*, i8* }
%"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control" = type { %"struct.Halide::Runtime::Internal::Synchronization::parking_control", i64* }
%"struct.Halide::Runtime::Internal::Synchronization::parking_control" = type { i32 (...)** }
%"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data" = type { %"struct.Halide::Runtime::Internal::Synchronization::thread_parker", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* }
%"struct.Halide::Runtime::Internal::Synchronization::validate_action" = type { i8, [7 x i8], i64 }
%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control" = type { %"struct.Halide::Runtime::Internal::Synchronization::parking_control", i64*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"* }
%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair" = type { %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* }
%"struct.Halide::Runtime::Internal::spawned_thread" = type { void (i8*)*, i8*, i64 }
%struct.halide_mutex_array = type { %struct.halide_mutex* }
%"struct.Halide::Runtime::Internal::halide_tiff_header" = type <{ i16, i16, i32, i16, [15 x %"struct.Halide::Runtime::Internal::tiff_tag"], i32, [2 x i32], [2 x i32] }>
%"struct.Halide::Runtime::Internal::tiff_tag" = type { i16, i16, i32, %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock" }
%"struct.Halide::Runtime::Internal::CacheBlockHeader" = type { %"struct.Halide::Runtime::Internal::CacheEntry"*, i32, [4 x i8] }
%"struct.Halide::Runtime::Internal::device_copy" = type { i64, i64, i64, [16 x i64], [16 x i64], [16 x i64], i64 }
%"struct.Halide::Runtime::Internal::CpuFeatures" = type { [2 x i64], [2 x i64] }

@_ZN6Halide7Runtime8Internal13custom_mallocE = linkonce local_unnamed_addr global i8* (i8*, i64)* @halide_default_malloc, align 8
@_ZN6Halide7Runtime8Internal11custom_freeE = linkonce local_unnamed_addr global void (i8*, i8*)* @halide_default_free, align 8
@_ZN6Halide7Runtime8Internal13error_handlerE = linkonce local_unnamed_addr global void (i8*, i8*)* @halide_default_error, align 8
@.str = private unnamed_addr constant [8 x i8] c"Error: \00", align 1
@_ZN6Halide7Runtime8Internal12custom_printE = linkonce local_unnamed_addr global void (i8*, i8*)* @halide_default_print, align 8
@_ZN6Halide7Runtime8Internal29halide_reference_clock_initedE = linkonce local_unnamed_addr global i8 0, align 1
@_ZN6Halide7Runtime8Internal22halide_reference_clockE = linkonce local_unnamed_addr global i64 0, align 8
@_ZN6Halide7Runtime8Internal20halide_timebase_infoE = linkonce global %struct.mach_timebase_info zeroinitializer, align 4
@_ZN6Halide7Runtime8Internal15Synchronization5tableE = linkonce global %"struct.Halide::Runtime::Internal::Synchronization::hash_table" zeroinitializer, align 8
@_ZN6Halide7Runtime8Internal10work_queueE = linkonce global %"struct.Halide::Runtime::Internal::work_queue_t" { %struct.halide_mutex zeroinitializer, i32 0, i32 0, %"struct.Halide::Runtime::Internal::work"* null, i32 0, i32 0, i32 0, [4 x i8] undef, %struct.halide_mutex zeroinitializer, %struct.halide_mutex zeroinitializer, %struct.halide_mutex zeroinitializer, i32 0, i32 0, [256 x %struct.halide_thread*] zeroinitializer, i8 0, i8 0, i32 0 }, align 8
@_ZN6Halide7Runtime8Internal14custom_do_taskE = linkonce local_unnamed_addr global i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* @halide_default_do_task, align 8
@_ZN6Halide7Runtime8Internal19custom_do_loop_taskE = linkonce local_unnamed_addr global i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* @halide_default_do_loop_task, align 8
@_ZN6Halide7Runtime8Internal17custom_do_par_forE = linkonce local_unnamed_addr global i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* @halide_default_do_par_for, align 8
@_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE = linkonce_odr unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (i1 (%"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)* @_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control8validateERNS2_15validate_actionE to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control12before_sleepEv to i8*), i8* bitcast (i64 (%"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"*, i32, i1)* @_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control6unparkEib to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control16requeue_callbackERKNS2_15validate_actionEbb to i8*)] }, align 8
@.str.5 = private unnamed_addr constant [130 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/synchronization_common.h:386 halide_abort_if_false() failed: next != nullptr\0A\00", align 1
@_ZTVN6Halide7Runtime8Internal15Synchronization20wait_parking_controlE = linkonce_odr unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (i1 (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)* @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control8validateERNS2_15validate_actionE to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*)* @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control12before_sleepEv to i8*), i8* bitcast (i64 (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*, i32, i1)* @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control6unparkEib to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control16requeue_callbackERKNS2_15validate_actionEbb to i8*)] }, align 8
@.str.5.6 = private unnamed_addr constant [124 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/synchronization_common.h:994 halide_abort_if_false() failed: val & 0x1\0A\00", align 1
@_ZTVN6Halide7Runtime8Internal15Synchronization25broadcast_parking_controlE = linkonce_odr unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (i1 (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)* @_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control8validateERNS2_15validate_actionE to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control12before_sleepEv to i8*), i8* bitcast (i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control6unparkEib to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)* @_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control16requeue_callbackERKNS2_15validate_actionEbb to i8*)] }, align 8
@.str.6 = private unnamed_addr constant [186 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/thread_pool_common.h:155 halide_abort_if_false() failed: bytes == limit && \22Logic error in thread pool work queue initialization.\\n\22\0A\00", align 1
@.str.3 = private unnamed_addr constant [263 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/thread_pool_common.h:527 halide_abort_if_false() failed: (min_threads <= ((task_parent->task.min_threads * task_parent->active_workers) - task_parent->threads_reserved)) && \22Logic error: thread over commit.\\n\22\0A\00", align 1
@.str.1 = private unnamed_addr constant [15 x i8] c"HL_NUM_THREADS\00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"HL_NUMTHREADS\00", align 1
@_ZN6Halide7Runtime8Internal24custom_do_parallel_tasksE = linkonce local_unnamed_addr global i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)* @halide_default_do_parallel_tasks, align 8
@_ZN6Halide7Runtime8Internal21custom_semaphore_initE = linkonce local_unnamed_addr global i32 (%struct.halide_semaphore_t*, i32)* @halide_default_semaphore_init, align 8
@_ZN6Halide7Runtime8Internal28custom_semaphore_try_acquireE = linkonce local_unnamed_addr global i1 (%struct.halide_semaphore_t*, i32)* @halide_default_semaphore_try_acquire, align 8
@_ZN6Halide7Runtime8Internal24custom_semaphore_releaseE = linkonce local_unnamed_addr global i32 (%struct.halide_semaphore_t*, i32)* @halide_default_semaphore_release, align 8
@llvm.global_dtors = appending global [4 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @halide_thread_pool_cleanup, i8* null }, { i32, void ()*, i8* } { i32 65535, void ()* @halide_trace_cleanup, i8* null }, { i32, void ()*, i8* } { i32 65535, void ()* @halide_cache_cleanup, i8* null }, { i32, void ()*, i8* } { i32 65535, void ()* @halide_profiler_shutdown, i8* null }]
@_ZTVN6Halide7Runtime8Internal15Synchronization22signal_parking_controlE = linkonce_odr unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control8validateERNS2_15validate_actionE to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control12before_sleepEv to i8*), i8* bitcast (i64 (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*, i32, i1)* @_ZN6Halide7Runtime8Internal15Synchronization22signal_parking_control6unparkEib to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control16requeue_callbackERKNS2_15validate_actionEbb to i8*)] }, align 8
@.str.4 = private unnamed_addr constant [38 x i8] c"halide_set_num_threads: must be >= 0.\00", align 1
@_ZN6Halide7Runtime8Internal17custom_get_symbolE = linkonce local_unnamed_addr global i8* (i8*)* @halide_default_get_symbol, align 8
@_ZN6Halide7Runtime8Internal19custom_load_libraryE = linkonce local_unnamed_addr global i8* (i8*)* @halide_default_load_library, align 8
@_ZN6Halide7Runtime8Internal25custom_get_library_symbolE = linkonce local_unnamed_addr global i8* (i8*, i8*)* @halide_default_get_library_symbol, align 8
@_ZN6Halide7Runtime8Internal17halide_gpu_deviceE = linkonce local_unnamed_addr global i32 0, align 4
@_ZN6Halide7Runtime8Internal22halide_gpu_device_lockE = linkonce global i8 0, align 1
@_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE = linkonce local_unnamed_addr global i8 0, align 1
@.str.8 = private unnamed_addr constant [14 x i8] c"HL_GPU_DEVICE\00", align 1
@_ZN6Halide7Runtime8Internal19halide_trace_bufferE = linkonce local_unnamed_addr global %"class.Halide::Runtime::Internal::TraceBuffer"* null, align 8
@_ZN6Halide7Runtime8Internal17halide_trace_fileE = linkonce local_unnamed_addr global i32 -1, align 4
@_ZN6Halide7Runtime8Internal22halide_trace_file_lockE = linkonce global i8 0, align 1
@_ZN6Halide7Runtime8Internal29halide_trace_file_initializedE = linkonce local_unnamed_addr global i8 0, align 1
@_ZN6Halide7Runtime8Internal35halide_trace_file_internally_openedE = linkonce local_unnamed_addr global i8* null, align 8
@_ZN6Halide7Runtime8Internal19halide_custom_traceE = linkonce local_unnamed_addr global i32 (i8*, %struct.halide_trace_event_t*)* @halide_default_trace, align 8
@_ZZ20halide_default_traceE3ids = internal global i32 1, align 4
@.str.32 = private unnamed_addr constant [144 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/tracing.cpp:115 halide_abort_if_false() failed: success && \22Could not write to trace file\22\0A\00", align 1
@.str.31 = private unnamed_addr constant [120 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/tracing.cpp:87 halide_abort_if_false() failed: size <= buffer_size\0A\00", align 1
@.str.1.10 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.2.11 = private unnamed_addr constant [140 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/tracing.cpp:218 halide_abort_if_false() failed: print_bits <= 64 && \22Tracing bad type\22\0A\00", align 1
@__const.halide_default_trace.event_types = private unnamed_addr constant [11 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3.12, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4.13, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.5.14, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.6.15, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.8.16, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.9.17, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i32 0, i32 0)], align 8
@.str.17 = private unnamed_addr constant [2 x i8] c"<\00", align 1
@.str.20 = private unnamed_addr constant [3 x i8] c">)\00", align 1
@.str.18 = private unnamed_addr constant [5 x i8] c">, <\00", align 1
@.str.22 = private unnamed_addr constant [5 x i8] c" = <\00", align 1
@.str.23 = private unnamed_addr constant [4 x i8] c" = \00", align 1
@.str.24 = private unnamed_addr constant [142 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/tracing.cpp:287 halide_abort_if_false() failed: print_bits >= 16 && \22Tracing a bad type\22\0A\00", align 1
@.str.25 = private unnamed_addr constant [2 x i8] c">\00", align 1
@.str.26 = private unnamed_addr constant [9 x i8] c" tag = \22\00", align 1
@.str.27 = private unnamed_addr constant [2 x i8] c"\22\00", align 1
@.str.3.12 = private unnamed_addr constant [5 x i8] c"Load\00", align 1
@.str.4.13 = private unnamed_addr constant [6 x i8] c"Store\00", align 1
@.str.5.14 = private unnamed_addr constant [18 x i8] c"Begin realization\00", align 1
@.str.6.15 = private unnamed_addr constant [16 x i8] c"End realization\00", align 1
@.str.7 = private unnamed_addr constant [8 x i8] c"Produce\00", align 1
@.str.8.16 = private unnamed_addr constant [12 x i8] c"End produce\00", align 1
@.str.9.17 = private unnamed_addr constant [8 x i8] c"Consume\00", align 1
@.str.10 = private unnamed_addr constant [12 x i8] c"End consume\00", align 1
@.str.11 = private unnamed_addr constant [15 x i8] c"Begin pipeline\00", align 1
@.str.12 = private unnamed_addr constant [13 x i8] c"End pipeline\00", align 1
@.str.13 = private unnamed_addr constant [4 x i8] c"Tag\00", align 1
@.str.28 = private unnamed_addr constant [14 x i8] c"HL_TRACE_FILE\00", align 1
@.str.29 = private unnamed_addr constant [3 x i8] c"ab\00", align 1
@.str.30 = private unnamed_addr constant [139 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/tracing.cpp:351 halide_abort_if_false() failed: file && \22Failed to open trace file\\n\22\0A\00", align 1
@_ZN6Halide7Runtime8Internal30pixel_type_to_tiff_sample_typeE = linkonce local_unnamed_addr global [10 x i16] [i16 3, i16 3, i16 1, i16 2, i16 1, i16 2, i16 1, i16 2, i16 1, i16 2], align 2
@_ZN6Halide7Runtime8Internal31pixel_type_to_matlab_class_codeE = linkonce local_unnamed_addr global [10 x i8] c"\07\06\09\08\0B\0A\0D\0C\0F\0E", align 1
@_ZN6Halide7Runtime8Internal30pixel_type_to_matlab_type_codeE = linkonce local_unnamed_addr global [10 x i8] c"\07\09\02\01\04\03\06\05\0D\0C", align 1
@.str.34 = private unnamed_addr constant [51 x i8] c"Bounds query buffer passed to halide_debug_to_file\00", align 1
@.str.1.35 = private unnamed_addr constant [59 x i8] c"Can't debug_to_file a Func with more than four dimensions\0A\00", align 1
@.str.2.36 = private unnamed_addr constant [3 x i8] c"wb\00", align 1
@.str.3.37 = private unnamed_addr constant [6 x i8] c".tiff\00", align 1
@.str.4.38 = private unnamed_addr constant [5 x i8] c".tif\00", align 1
@.str.5.39 = private unnamed_addr constant [5 x i8] c".mat\00", align 1
@__const.halide_debug_to_file.header = private unnamed_addr constant [129 x i8] c"MATLAB 5.0 MAT-file, produced by Halide                                                                                     \00\01IM\00", align 1
@.str.6.40 = private unnamed_addr constant [53 x i8] c"Can't debug_to_file to a .mat file greater than 4GB\0A\00", align 1
@_ZN6Halide7Runtime8Internal16memoization_lockE = linkonce global %struct.halide_mutex zeroinitializer, align 8
@_ZN6Halide7Runtime8Internal13cache_entriesE = linkonce global [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*] zeroinitializer, align 8
@_ZN6Halide7Runtime8Internal18most_recently_usedE = linkonce local_unnamed_addr global %"struct.Halide::Runtime::Internal::CacheEntry"* null, align 8
@_ZN6Halide7Runtime8Internal19least_recently_usedE = linkonce local_unnamed_addr global %"struct.Halide::Runtime::Internal::CacheEntry"* null, align 8
@_ZN6Halide7Runtime8Internal14max_cache_sizeE = linkonce local_unnamed_addr global i64 1048576, align 8
@_ZN6Halide7Runtime8Internal18current_cache_sizeE = linkonce local_unnamed_addr global i64 0, align 8
@.str.2.42 = private unnamed_addr constant [126 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/cache.cpp:284 halide_abort_if_false() failed: prev_hash_entry != nullptr\0A\00", align 1
@.str.3.43 = private unnamed_addr constant [129 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/cache.cpp:373 halide_abort_if_false() failed: entry->more_recent != nullptr\0A\00", align 1
@.str.4.44 = private unnamed_addr constant [128 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/cache.cpp:377 halide_abort_if_false() failed: least_recently_used == entry\0A\00", align 1
@.str.5.45 = private unnamed_addr constant [129 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/cache.cpp:380 halide_abort_if_false() failed: entry->more_recent != nullptr\0A\00", align 1
@.str.9.46 = private unnamed_addr constant [122 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/cache.cpp:472 halide_abort_if_false() failed: no_host_pointers_equal\0A\00", align 1
@.str.12.47 = private unnamed_addr constant [123 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/cache.cpp:550 halide_abort_if_false() failed: entry->in_use_count > 0\0A\00", align 1
@.str.50 = private unnamed_addr constant [10 x i8] c"<nullptr>\00", align 1
@.str.1.57 = private unnamed_addr constant [5 x i8] c"-nan\00", align 1
@.str.2.58 = private unnamed_addr constant [4 x i8] c"nan\00", align 1
@.str.3.59 = private unnamed_addr constant [5 x i8] c"-inf\00", align 1
@.str.4.60 = private unnamed_addr constant [4 x i8] c"inf\00", align 1
@.str.5.61 = private unnamed_addr constant [14 x i8] c"-0.000000e+00\00", align 1
@.str.6.62 = private unnamed_addr constant [13 x i8] c"0.000000e+00\00", align 1
@.str.7.63 = private unnamed_addr constant [10 x i8] c"-0.000000\00", align 1
@.str.8.64 = private unnamed_addr constant [9 x i8] c"0.000000\00", align 1
@.str.9.65 = private unnamed_addr constant [2 x i8] c"-\00", align 1
@.str.11.67 = private unnamed_addr constant [3 x i8] c"e+\00", align 1
@.str.12.68 = private unnamed_addr constant [3 x i8] c"e-\00", align 1
@.str.13.71 = private unnamed_addr constant [17 x i8] c"0123456789abcdef\00", align 1
@.str.18.72 = private unnamed_addr constant [14 x i8] c"bad_type_code\00", align 1
@.str.17.73 = private unnamed_addr constant [7 x i8] c"handle\00", align 1
@.str.16.74 = private unnamed_addr constant [6 x i8] c"float\00", align 1
@.str.15.75 = private unnamed_addr constant [5 x i8] c"uint\00", align 1
@.str.14.76 = private unnamed_addr constant [4 x i8] c"int\00", align 1
@.str.19.77 = private unnamed_addr constant [2 x i8] c"x\00", align 1
@.str.20.78 = private unnamed_addr constant [8 x i8] c"nullptr\00", align 1
@.str.21.79 = private unnamed_addr constant [8 x i8] c"buffer(\00", align 1
@.str.23.82 = private unnamed_addr constant [4 x i8] c", {\00", align 1
@.str.24.83 = private unnamed_addr constant [2 x i8] c"}\00", align 1
@_ZN6Halide7Runtime8Internal36halide_reuse_device_allocations_flagE = linkonce local_unnamed_addr global i8 1, align 1
@_ZN6Halide7Runtime8Internal21allocation_pools_lockE = linkonce global %struct.halide_mutex zeroinitializer, align 8
@_ZN6Halide7Runtime8Internal23device_allocation_poolsE = linkonce local_unnamed_addr global %struct.halide_device_allocation_pool* null, align 8
@_ZN6Halide7Runtime8Internal17device_copy_mutexE = linkonce global %struct.halide_mutex zeroinitializer, align 8
@.str.6.88 = private unnamed_addr constant [20 x i8] c"halide_copy_to_host\00", align 1
@.str.7.89 = private unnamed_addr constant [22 x i8] c"halide_copy_to_device\00", align 1
@.str.9.90 = private unnamed_addr constant [61 x i8] c"halide_copy_to_device does not support switching interfaces\0A\00", align 1
@.str.17.91 = private unnamed_addr constant [21 x i8] c"halide_device_malloc\00", align 1
@.str.20.92 = private unnamed_addr constant [59 x i8] c"halide_device_malloc doesn't support switching interfaces\0A\00", align 1
@.str.16.93 = private unnamed_addr constant [19 x i8] c"halide_device_sync\00", align 1
@.str.21.96 = private unnamed_addr constant [19 x i8] c"halide_device_free\00", align 1
@.str.22.97 = private unnamed_addr constant [127 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/device_interface.cpp:252 halide_abort_if_false() failed: buf->device == 0\0A\00", align 1
@.str.23.98 = private unnamed_addr constant [30 x i8] c"halide_device_and_host_malloc\00", align 1
@.str.25.99 = private unnamed_addr constant [68 x i8] c"halide_device_and_host_malloc doesn't support switching interfaces\0A\00", align 1
@.str.26.100 = private unnamed_addr constant [42 x i8] c"allocating host and device memory failed\0A\00", align 1
@.str.27.101 = private unnamed_addr constant [28 x i8] c"halide_device_and_host_free\00", align 1
@.str.28.102 = private unnamed_addr constant [127 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/device_interface.cpp:317 halide_abort_if_false() failed: buf->device == 0\0A\00", align 1
@.str.29.103 = private unnamed_addr constant [38 x i8] c"halide_default_device_and_host_malloc\00", align 1
@.str.30.104 = private unnamed_addr constant [36 x i8] c"halide_default_device_and_host_free\00", align 1
@.str.31.105 = private unnamed_addr constant [26 x i8] c"halide_device_wrap_native\00", align 1
@.str.32.106 = private unnamed_addr constant [64 x i8] c"halide_device_wrap_native doesn't support switching interfaces\0A\00", align 1
@.str.33.107 = private unnamed_addr constant [28 x i8] c"halide_device_detach_native\00", align 1
@.str.34.108 = private unnamed_addr constant [127 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/device_interface.cpp:403 halide_abort_if_false() failed: buf->device == 0\0A\00", align 1
@.str.35 = private unnamed_addr constant [36 x i8] c"halide_default_device_detach_native\00", align 1
@.str.41 = private unnamed_addr constant [64 x i8] c"halide_buffer_copy does not support switching device interfaces\00", align 1
@.str.58 = private unnamed_addr constant [44 x i8] c"device_interface does not support cropping\0A\00", align 1
@.str.59 = private unnamed_addr constant [43 x i8] c"device_interface does not support slicing\0A\00", align 1
@.str.60 = private unnamed_addr constant [52 x i8] c"destination buffer already has a device allocation\0A\00", align 1
@.str.61 = private unnamed_addr constant [48 x i8] c"src and dst must have identical dimensionality\0A\00", align 1
@.str.64 = private unnamed_addr constant [52 x i8] c"dst must have exactly one fewer dimension than src\0A\00", align 1
@.str.111 = private unnamed_addr constant [41 x i8] c"Bounds inference call to external stage \00", align 1
@.str.1.112 = private unnamed_addr constant [27 x i8] c" returned non-zero value: \00", align 1
@.str.2.113 = private unnamed_addr constant [24 x i8] c"Call to external stage \00", align 1
@.str.3.114 = private unnamed_addr constant [18 x i8] c"Bounds given for \00", align 1
@.str.4.115 = private unnamed_addr constant [5 x i8] c" in \00", align 1
@.str.5.116 = private unnamed_addr constant [8 x i8] c" (from \00", align 1
@.str.6.117 = private unnamed_addr constant [5 x i8] c" to \00", align 1
@.str.7.118 = private unnamed_addr constant [38 x i8] c") do not cover required region (from \00", align 1
@.str.8.119 = private unnamed_addr constant [2 x i8] c")\00", align 1
@.str.9.120 = private unnamed_addr constant [11 x i8] c" has type \00", align 1
@.str.10.121 = private unnamed_addr constant [38 x i8] c" but type of the buffer passed in is \00", align 1
@.str.11.122 = private unnamed_addr constant [31 x i8] c" requires a buffer of exactly \00", align 1
@.str.12.123 = private unnamed_addr constant [43 x i8] c" dimensions, but the buffer passed in has \00", align 1
@.str.13.124 = private unnamed_addr constant [12 x i8] c" dimensions\00", align 1
@.str.14.125 = private unnamed_addr constant [17 x i8] c" is accessed at \00", align 1
@.str.15.126 = private unnamed_addr constant [28 x i8] c", which is before the min (\00", align 1
@.str.16.127 = private unnamed_addr constant [16 x i8] c") in dimension \00", align 1
@.str.17.128 = private unnamed_addr constant [28 x i8] c", which is beyond the max (\00", align 1
@.str.18.129 = private unnamed_addr constant [29 x i8] c"Total allocation for buffer \00", align 1
@.str.19.130 = private unnamed_addr constant [5 x i8] c" is \00", align 1
@.str.20.131 = private unnamed_addr constant [37 x i8] c", which exceeds the maximum size of \00", align 1
@.str.21.132 = private unnamed_addr constant [24 x i8] c"The extents for buffer \00", align 1
@.str.22.133 = private unnamed_addr constant [12 x i8] c" dimension \00", align 1
@.str.23.134 = private unnamed_addr constant [15 x i8] c" is negative (\00", align 1
@.str.24.135 = private unnamed_addr constant [31 x i8] c"Product of extents for buffer \00", align 1
@.str.25.136 = private unnamed_addr constant [29 x i8] c"Applying the constraints on \00", align 1
@.str.26.137 = private unnamed_addr constant [54 x i8] c" to the required region made it smaller in dimension \00", align 1
@.str.27.138 = private unnamed_addr constant [3 x i8] c". \00", align 1
@.str.28.139 = private unnamed_addr constant [16 x i8] c"Required size: \00", align 1
@.str.29.140 = private unnamed_addr constant [19 x i8] c"Constrained size: \00", align 1
@.str.30.141 = private unnamed_addr constant [2 x i8] c".\00", align 1
@.str.31.142 = private unnamed_addr constant [22 x i8] c"Constraint violated: \00", align 1
@.str.32.143 = private unnamed_addr constant [3 x i8] c" (\00", align 1
@.str.33.144 = private unnamed_addr constant [6 x i8] c") == \00", align 1
@.str.34.145 = private unnamed_addr constant [11 x i8] c"Parameter \00", align 1
@.str.35.146 = private unnamed_addr constant [23 x i8] c" but must be at least \00", align 1
@.str.36 = private unnamed_addr constant [22 x i8] c" but must be at most \00", align 1
@.str.37 = private unnamed_addr constant [47 x i8] c"Out of memory (halide_malloc returned nullptr)\00", align 1
@.str.38 = private unnamed_addr constant [17 x i8] c"Buffer argument \00", align 1
@.str.39 = private unnamed_addr constant [12 x i8] c" is nullptr\00", align 1
@.str.40 = private unnamed_addr constant [25 x i8] c"Failed to dump function \00", align 1
@.str.41.147 = private unnamed_addr constant [10 x i8] c" to file \00", align 1
@.str.42 = private unnamed_addr constant [13 x i8] c" with error \00", align 1
@.str.43 = private unnamed_addr constant [21 x i8] c"The host pointer of \00", align 1
@.str.44 = private unnamed_addr constant [22 x i8] c" is not aligned to a \00", align 1
@.str.45 = private unnamed_addr constant [17 x i8] c" bytes boundary.\00", align 1
@.str.46 = private unnamed_addr constant [12 x i8] c"The buffer \00", align 1
@.str.47 = private unnamed_addr constant [53 x i8] c" is dirty on device, but this pipeline was compiled \00", align 1
@.str.48 = private unnamed_addr constant [43 x i8] c"with no support for device to host copies.\00", align 1
@.str.49 = private unnamed_addr constant [55 x i8] c" is null, but the pipeline will access it on the host.\00", align 1
@.str.50.148 = private unnamed_addr constant [30 x i8] c"The folded storage dimension \00", align 1
@.str.51 = private unnamed_addr constant [5 x i8] c" of \00", align 1
@.str.52 = private unnamed_addr constant [36 x i8] c" was accessed out of order by loop \00", align 1
@.str.53 = private unnamed_addr constant [23 x i8] c"Cannot fold dimension \00", align 1
@.str.54 = private unnamed_addr constant [36 x i8] c" because an extern stage accesses [\00", align 1
@.str.55 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.56 = private unnamed_addr constant [3 x i8] c"],\00", align 1
@.str.57 = private unnamed_addr constant [47 x i8] c" which is outside the range currently valid: [\00", align 1
@.str.58.149 = private unnamed_addr constant [3 x i8] c"].\00", align 1
@.str.59.150 = private unnamed_addr constant [47 x i8] c" which wraps around the boundary of the fold, \00", align 1
@.str.60.151 = private unnamed_addr constant [30 x i8] c"which occurs at multiples of \00", align 1
@.str.61.152 = private unnamed_addr constant [18 x i8] c"The fold factor (\00", align 1
@.str.62 = private unnamed_addr constant [16 x i8] c") of dimension \00", align 1
@.str.63 = private unnamed_addr constant [61 x i8] c" is too small to store the required region accessed by loop \00", align 1
@.str.64.153 = private unnamed_addr constant [3 x i8] c").\00", align 1
@.str.65 = private unnamed_addr constant [22 x i8] c"Requirement Failed: (\00", align 1
@.str.66 = private unnamed_addr constant [3 x i8] c") \00", align 1
@.str.67 = private unnamed_addr constant [59 x i8] c"A schedule specialized with specialize_fail() was chosen: \00", align 1
@.str.68 = private unnamed_addr constant [55 x i8] c"Buffer has a non-zero device but no device interface.\0A\00", align 1
@.str.69 = private unnamed_addr constant [57 x i8] c"Buffer has a non-null device_interface but device is 0.\0A\00", align 1
@.str.70 = private unnamed_addr constant [49 x i8] c"Buffer has both host and device dirty bits set.\0A\00", align 1
@.str.71 = private unnamed_addr constant [26 x i8] c"Buffer pointer passed to \00", align 1
@.str.72 = private unnamed_addr constant [11 x i8] c" is null.\0A\00", align 1
@.str.73 = private unnamed_addr constant [32 x i8] c"The explicit allocation bound (\00", align 1
@.str.74 = private unnamed_addr constant [45 x i8] c" is too small to store the required region (\00", align 1
@.str.75 = private unnamed_addr constant [77 x i8] c"Buffer could not be cropped (runtime error or unimplemented device option).\0A\00", align 1
@.str.29.163 = private unnamed_addr constant [35 x i8] c"Printer buffer allocation failed.\0A\00", align 1
@.str.7.164 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.8.165 = private unnamed_addr constant [14 x i8] c" total time: \00", align 1
@.str.9.166 = private unnamed_addr constant [4 x i8] c" ms\00", align 1
@.str.10.167 = private unnamed_addr constant [12 x i8] c"  samples: \00", align 1
@.str.11.168 = private unnamed_addr constant [9 x i8] c"  runs: \00", align 1
@.str.12.169 = private unnamed_addr constant [13 x i8] c"  time/run: \00", align 1
@.str.13.170 = private unnamed_addr constant [5 x i8] c" ms\0A\00", align 1
@.str.14.171 = private unnamed_addr constant [24 x i8] c" average threads used: \00", align 1
@.str.15.172 = private unnamed_addr constant [20 x i8] c" heap allocations: \00", align 1
@.str.16.173 = private unnamed_addr constant [20 x i8] c"  peak heap usage: \00", align 1
@.str.17.174 = private unnamed_addr constant [8 x i8] c" bytes\0A\00", align 1
@.str.18.175 = private unnamed_addr constant [3 x i8] c"  \00", align 1
@.str.19.176 = private unnamed_addr constant [3 x i8] c": \00", align 1
@.str.20.177 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.21.178 = private unnamed_addr constant [3 x i8] c"ms\00", align 1
@.str.22.179 = private unnamed_addr constant [2 x i8] c"(\00", align 1
@.str.23.180 = private unnamed_addr constant [3 x i8] c"%)\00", align 1
@.str.24.181 = private unnamed_addr constant [10 x i8] c"threads: \00", align 1
@.str.25.182 = private unnamed_addr constant [8 x i8] c" peak: \00", align 1
@.str.26.183 = private unnamed_addr constant [7 x i8] c" num: \00", align 1
@.str.27.184 = private unnamed_addr constant [7 x i8] c" avg: \00", align 1
@.str.28.185 = private unnamed_addr constant [9 x i8] c" stack: \00", align 1
@_ZZ25halide_profiler_get_stateE1s = internal global %struct.halide_profiler_state { %struct.halide_mutex zeroinitializer, i32 1, i32 0, i32 0, i32 0, %struct.halide_profiler_pipeline_stats* null, void (i32*, i32*)* null, %struct.halide_thread* null }, align 8
@.str.186 = private unnamed_addr constant [128 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:246 halide_abort_if_false() failed: p_stats != nullptr\0A\00", align 1
@.str.1.187 = private unnamed_addr constant [128 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:273 halide_abort_if_false() failed: p_stats != nullptr\0A\00", align 1
@.str.2.188 = private unnamed_addr constant [122 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:274 halide_abort_if_false() failed: func_id >= 0\0A\00", align 1
@.str.3.189 = private unnamed_addr constant [138 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:275 halide_abort_if_false() failed: func_id < p_stats->num_funcs\0A\00", align 1
@.str.4.190 = private unnamed_addr constant [128 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:309 halide_abort_if_false() failed: p_stats != nullptr\0A\00", align 1
@.str.5.191 = private unnamed_addr constant [122 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:310 halide_abort_if_false() failed: func_id >= 0\0A\00", align 1
@.str.6.192 = private unnamed_addr constant [138 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:311 halide_abort_if_false() failed: func_id < p_stats->num_funcs\0A\00", align 1
@_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE = linkonce local_unnamed_addr global i32 (i32, i64*)* @halide_default_can_use_target_features, align 8
@_ZN6Halide7Runtime8Internal36halide_cpu_features_initialized_lockE = linkonce global %struct.halide_mutex zeroinitializer, align 8
@_ZN6Halide7Runtime8Internal31halide_cpu_features_initializedE = linkonce local_unnamed_addr global i8 0, align 1
@_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE = linkonce global [4 x i64] zeroinitializer, align 8
@.str.197 = private unnamed_addr constant [81 x i8] c"Internal error: wrong structure size passed to halide_can_use_target_features()\0A\00", align 1
@0 = private constant i64 0
@1 = private constant i64 0
@2 = private constant [4 x i64*] [i64* @0, i64* null, i64* @1, i64* null]
@str = private constant [6 x i8] c"input\00", align 32
@3 = private constant i64 0
@4 = private constant i64 0
@5 = private constant [4 x i64*] [i64* @3, i64* null, i64* @4, i64* null]
@str.200 = private constant [7 x i8] c"output\00", align 32
@6 = private constant [2 x %struct.halide_filter_argument_t] [%struct.halide_filter_argument_t { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str, i32 0, i32 0), i32 1, i32 2, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** getelementptr inbounds ([4 x i64*], [4 x i64*]* @2, i32 0, i32 0) }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str.200, i32 0, i32 0), i32 2, i32 2, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** getelementptr inbounds ([4 x i64*], [4 x i64*]* @5, i32 0, i32 0) }]
@str.201 = private constant [38 x i8] c"arm-64-osx-no_asserts-no_bounds_query\00", align 32
@str.202 = private constant [10 x i8] c"dilate3x3\00", align 32
@dilate3x3_metadata_storage = private constant %struct.halide_filter_metadata_t { i32 1, i32 2, %struct.halide_filter_argument_t* getelementptr inbounds ([2 x %struct.halide_filter_argument_t], [2 x %struct.halide_filter_argument_t]* @6, i32 0, i32 0), i8* getelementptr inbounds ([38 x i8], [38 x i8]* @str.201, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @str.202, i32 0, i32 0) }
@switch.table.halide_type_to_string = private unnamed_addr constant [4 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14.76, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.15.75, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.16.74, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.17.73, i64 0, i64 0)], align 8

; Function Attrs: nounwind mustprogress
define weak i8* @halide_default_malloc(i8* %user_context, i64 %x) #0 {
entry:
  %add = add i64 %x, 32
  %call1 = tail call i8* @malloc(i64 %add) #14
  %cmp = icmp eq i8* %call1, null
  br i1 %cmp, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %0 = ptrtoint i8* %call1 to i64
  %sub = add i64 %0, 39
  %and = and i64 %sub, -32
  %1 = inttoptr i64 %and to i8*
  %2 = inttoptr i64 %and to i8**
  %arrayidx = getelementptr inbounds i8*, i8** %2, i64 -1
  store i8* %call1, i8** %arrayidx, align 8, !tbaa !14
  br label %cleanup

cleanup:                                          ; preds = %if.end, %entry
  %retval.0 = phi i8* [ %1, %if.end ], [ null, %entry ]
  ret i8* %retval.0
}

declare i8* @malloc(i64) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_default_free(i8* %user_context, i8* %ptr) #0 {
entry:
  %arrayidx = getelementptr inbounds i8, i8* %ptr, i64 -8
  %0 = bitcast i8* %arrayidx to i8**
  %1 = load i8*, i8** %0, align 8, !tbaa !14
  tail call void @free(i8* %1) #14
  ret void
}

declare void @free(i8*) local_unnamed_addr #1

; Function Attrs: nounwind willreturn mustprogress
define weak i8* (i8*, i64)* @halide_set_custom_malloc(i8* (i8*, i64)* %user_malloc) local_unnamed_addr #2 {
entry:
  %0 = load i8* (i8*, i64)*, i8* (i8*, i64)** @_ZN6Halide7Runtime8Internal13custom_mallocE, align 8, !tbaa !14
  store i8* (i8*, i64)* %user_malloc, i8* (i8*, i64)** @_ZN6Halide7Runtime8Internal13custom_mallocE, align 8, !tbaa !14
  ret i8* (i8*, i64)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak void (i8*, i8*)* @halide_set_custom_free(void (i8*, i8*)* %user_free) local_unnamed_addr #2 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal11custom_freeE, align 8, !tbaa !14
  store void (i8*, i8*)* %user_free, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal11custom_freeE, align 8, !tbaa !14
  ret void (i8*, i8*)* %0
}

; Function Attrs: nounwind mustprogress
define weak noalias i8* @halide_malloc(i8* %user_context, i64 %x) local_unnamed_addr #0 {
entry:
  %0 = load i8* (i8*, i64)*, i8* (i8*, i64)** @_ZN6Halide7Runtime8Internal13custom_mallocE, align 8, !tbaa !14
  %call = tail call i8* %0(i8* %user_context, i64 %x) #14
  ret i8* %call
}

; Function Attrs: nounwind mustprogress
define weak void @halide_free(i8* %user_context, i8* %ptr) local_unnamed_addr #0 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal11custom_freeE, align 8, !tbaa !14
  tail call void %0(i8* %user_context, i8* %ptr) #14
  ret void
}

; Function Attrs: nounwind mustprogress
define weak void @halide_default_error(i8* %user_context, i8* %msg) #0 {
entry:
  %buf = alloca [4096 x i8], align 1
  %0 = getelementptr inbounds [4096 x i8], [4096 x i8]* %buf, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %0) #11
  %add.ptr = getelementptr inbounds [4096 x i8], [4096 x i8]* %buf, i64 0, i64 4094
  %call = call i8* @halide_string_to_string(i8* nonnull %0, i8* nonnull %add.ptr, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0)) #14
  %add.ptr2 = getelementptr inbounds i8, i8* %call, i64 4094
  %call3 = call i8* @halide_string_to_string(i8* %call, i8* nonnull %add.ptr2, i8* %msg) #14
  %arrayidx = getelementptr inbounds i8, i8* %call3, i64 -1
  %1 = load i8, i8* %arrayidx, align 1, !tbaa !18
  %cmp.not = icmp eq i8 %1, 10
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i8 10, i8* %call3, align 1, !tbaa !18
  %arrayidx5 = getelementptr inbounds i8, i8* %call3, i64 1
  store i8 0, i8* %arrayidx5, align 1, !tbaa !18
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %dst.0 = phi i8* [ %arrayidx5, %if.then ], [ %call3, %entry ]
  %sub.ptr.lhs.cast = ptrtoint i8* %dst.0 to i64
  %sub.ptr.rhs.cast = ptrtoint [4096 x i8]* %buf to i64
  %sub.ptr.sub = sub i64 1, %sub.ptr.rhs.cast
  %add = add i64 %sub.ptr.sub, %sub.ptr.lhs.cast
  %call9 = call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %0, i64 %add) #14
  call void @halide_print(i8* %user_context, i8* nonnull %0) #14
  call void @abort() #14
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %0) #11
  ret void
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

declare void @abort() local_unnamed_addr #1

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind mustprogress
define weak void @halide_error(i8* %user_context, i8* %msg) local_unnamed_addr #0 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal13error_handlerE, align 8, !tbaa !14
  tail call void %0(i8* %user_context, i8* %msg) #14
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void (i8*, i8*)* @halide_set_error_handler(void (i8*, i8*)* %handler) local_unnamed_addr #2 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal13error_handlerE, align 8, !tbaa !14
  store void (i8*, i8*)* %handler, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal13error_handlerE, align 8, !tbaa !14
  ret void (i8*, i8*)* %0
}

; Function Attrs: nounwind mustprogress
define weak void @halide_print(i8* %user_context, i8* %msg) local_unnamed_addr #0 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal12custom_printE, align 8, !tbaa !14
  tail call void %0(i8* %user_context, i8* %msg) #14
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void (i8*, i8*)* @halide_set_custom_print(void (i8*, i8*)* %print) local_unnamed_addr #2 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal12custom_printE, align 8, !tbaa !14
  store void (i8*, i8*)* %print, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal12custom_printE, align 8, !tbaa !14
  ret void (i8*, i8*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_start_clock(i8* %user_context) local_unnamed_addr #0 {
entry:
  %0 = load i8, i8* @_ZN6Halide7Runtime8Internal29halide_reference_clock_initedE, align 1, !tbaa !19, !range !21
  %tobool.not = icmp eq i8 %0, 0
  br i1 %tobool.not, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = tail call i32 @mach_timebase_info(%struct.mach_timebase_info* nonnull @_ZN6Halide7Runtime8Internal20halide_timebase_infoE) #14
  %call1 = tail call i64 @mach_absolute_time() #14
  store i64 %call1, i64* @_ZN6Halide7Runtime8Internal22halide_reference_clockE, align 8, !tbaa !22
  store i8 1, i8* @_ZN6Halide7Runtime8Internal29halide_reference_clock_initedE, align 1, !tbaa !19
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i32 0
}

declare i32 @mach_timebase_info(%struct.mach_timebase_info*) local_unnamed_addr #1

declare i64 @mach_absolute_time() local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i64 @halide_current_time_ns(i8* %user_context) local_unnamed_addr #0 {
entry:
  %call = tail call i64 @mach_absolute_time() #14
  %0 = load i64, i64* @_ZN6Halide7Runtime8Internal22halide_reference_clockE, align 8, !tbaa !22
  %sub = sub i64 %call, %0
  %1 = load i32, i32* getelementptr inbounds (%struct.mach_timebase_info, %struct.mach_timebase_info* @_ZN6Halide7Runtime8Internal20halide_timebase_infoE, i64 0, i32 0), align 4, !tbaa !24
  %conv = zext i32 %1 to i64
  %mul = mul i64 %sub, %conv
  %2 = load i32, i32* getelementptr inbounds (%struct.mach_timebase_info, %struct.mach_timebase_info* @_ZN6Halide7Runtime8Internal20halide_timebase_infoE, i64 0, i32 1), align 4, !tbaa !27
  %conv1 = zext i32 %2 to i64
  %div = udiv i64 %mul, %conv1
  ret i64 %div
}

; Function Attrs: nounwind mustprogress
define weak void @halide_sleep_ms(i8* %user_context, i32 %ms) local_unnamed_addr #0 {
entry:
  %mul = mul nsw i32 %ms, 1000
  %call = tail call i32 @usleep(i32 %mul) #14
  ret void
}

declare i32 @usleep(i32) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_default_print(i8* %user_context, i8* %str) #0 {
entry:
  %call = tail call i64 @strlen(i8* %str) #14
  %call1 = tail call i64 @write(i32 1, i8* %str, i64 %call) #14
  ret void
}

declare i64 @strlen(i8*) local_unnamed_addr #1

declare i64 @write(i32, i8*, i64) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i32 @halide_host_cpu_count() local_unnamed_addr #0 {
entry:
  %call = tail call i64 @sysconf(i32 58) #14
  %conv = trunc i64 %call to i32
  ret i32 %conv
}

declare i64 @sysconf(i32) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_thread_yield() local_unnamed_addr #0 {
entry:
  %call = tail call i32 @swtch_pri(i32 0) #14
  ret void
}

declare i32 @swtch_pri(i32) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_task(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %idx, i8* %closure) #0 {
entry:
  %call = tail call i32 %f(i8* %user_context, i32 %idx, i8* %closure) #14
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_loop_task(i8* %user_context, i32 (i8*, i32, i32, i8*, i8*)* %f, i32 %min, i32 %extent, i8* %closure, i8* %task_parent) #0 {
entry:
  %call = tail call i32 %f(i8* %user_context, i32 %min, i32 %extent, i8* %closure, i8* %task_parent) #14
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_par_for(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %min, i32 %size, i8* %closure) #0 {
entry:
  %job = alloca %"struct.Halide::Runtime::Internal::work", align 8
  %cmp = icmp slt i32 %size, 1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %0 = bitcast %"struct.Halide::Runtime::Internal::work"* %job to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %0) #11
  %fn = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 0
  store i32 (i8*, i32, i32, i8*, i8*)* null, i32 (i8*, i32, i32, i8*, i8*)** %fn, align 8, !tbaa !28
  %min2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 5
  store i32 %min, i32* %min2, align 4, !tbaa !31
  %extent = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 6
  store i32 %size, i32* %extent, align 8, !tbaa !32
  %serial = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 8
  store i8 0, i8* %serial, align 8, !tbaa !33
  %semaphores = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 3
  store %struct.halide_semaphore_acquire_t* null, %struct.halide_semaphore_acquire_t** %semaphores, align 8, !tbaa !34
  %num_semaphores = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 4
  store i32 0, i32* %num_semaphores, align 8, !tbaa !35
  %closure8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 1
  store i8* %closure, i8** %closure8, align 8, !tbaa !36
  %min_threads = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 7
  store i32 0, i32* %min_threads, align 4, !tbaa !37
  %name = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 2
  store i8* null, i8** %name, align 8, !tbaa !38
  %task_fn = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 1
  store i32 (i8*, i32, i8*)* %f, i32 (i8*, i32, i8*)** %task_fn, align 8, !tbaa !39
  %user_context11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 7
  store i8* %user_context, i8** %user_context11, align 8, !tbaa !40
  %exit_status = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 9
  %active_workers = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 8
  %1 = bitcast i32* %active_workers to <2 x i32>*
  store <2 x i32> zeroinitializer, <2 x i32>* %1, align 8, !tbaa !41
  %next_semaphore = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 10
  store i32 0, i32* %next_semaphore, align 8, !tbaa !42
  %owner_is_sleeping = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 11
  store i8 0, i8* %owner_is_sleeping, align 4, !tbaa !43
  %siblings = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 3
  store %"struct.Halide::Runtime::Internal::work"* %job, %"struct.Halide::Runtime::Internal::work"** %siblings, align 8, !tbaa !44
  %sibling_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 4
  store i32 0, i32* %sibling_count, align 8, !tbaa !45
  %parent_job = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 5
  store %"struct.Halide::Runtime::Internal::work"* null, %"struct.Halide::Runtime::Internal::work"** %parent_job, align 8, !tbaa !46
  call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #15
  call void @_ZN6Halide7Runtime8Internal27enqueue_work_already_lockedEiPNS1_4workES3_(i32 1, %"struct.Halide::Runtime::Internal::work"* nonnull %job, %"struct.Halide::Runtime::Internal::work"* null) #15
  call void @_ZN6Halide7Runtime8Internal28worker_thread_already_lockedEPNS1_4workE(%"struct.Halide::Runtime::Internal::work"* nonnull %job) #15
  call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #15
  %2 = load i32, i32* %exit_status, align 4, !tbaa !47
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %0) #11
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i32 [ %2, %if.end ], [ 0, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind
define weak void @halide_mutex_lock(%struct.halide_mutex* %mutex) local_unnamed_addr #4 {
entry:
  %control.i.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", align 8
  %state.i = getelementptr %struct.halide_mutex, %struct.halide_mutex* %mutex, i64 0, i32 0, i64 0
  %0 = cmpxchg weak i64* %state.i, i64 0, i64 1 acquire monotonic
  %1 = extractvalue { i64, i1 } %0, 1
  br i1 %1, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex4lockEv.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %2 = load atomic i64, i64* %state.i monotonic, align 8
  %3 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i to i8*
  %4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0, i32 0
  %lock_state2.i.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 1
  %5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0
  %6 = ptrtoint %struct.halide_mutex* %mutex to i64
  br label %while.cond.outer.i.i

while.cond.outer.i.i:                             ; preds = %while.cond.outer.i.i.backedge, %if.then.i
  %expected.0.ph.i.i = phi i64 [ %2, %if.then.i ], [ %expected.0.ph.i.i.be, %while.cond.outer.i.i.backedge ]
  %spinner.sroa.0.0.ph.i.i = phi i32 [ 40, %if.then.i ], [ %spinner.sroa.0.0.ph.i.i.be, %while.cond.outer.i.i.backedge ]
  %and55.i.i = and i64 %expected.0.ph.i.i, 1
  %tobool.not56.i.i = icmp eq i64 %and55.i.i, 0
  br i1 %tobool.not56.i.i, label %if.then.i.i, label %if.end4.i.i

if.then.i.i:                                      ; preds = %while.cond.outer.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i
  %expected.057.i.i = phi i64 [ %9, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i ], [ %expected.0.ph.i.i, %while.cond.outer.i.i ]
  %or.i.i = or i64 %expected.057.i.i, 1
  %7 = cmpxchg weak i64* %state.i, i64 %expected.057.i.i, i64 %or.i.i acquire monotonic
  %8 = extractvalue { i64, i1 } %7, 1
  br i1 %8, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex4lockEv.exit, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i: ; preds = %if.then.i.i
  %9 = extractvalue { i64, i1 } %7, 0
  %and.i.i = and i64 %9, 1
  %tobool.not.i.i = icmp eq i64 %and.i.i, 0
  br i1 %tobool.not.i.i, label %if.then.i.i, label %if.end4.i.i.loopexit

if.end4.i.i.loopexit:                             ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i
  %10 = extractvalue { i64, i1 } %7, 0
  br label %if.end4.i.i

if.end4.i.i:                                      ; preds = %if.end4.i.i.loopexit, %while.cond.outer.i.i
  %expected.0.lcssa.i.i = phi i64 [ %expected.0.ph.i.i, %while.cond.outer.i.i ], [ %10, %if.end4.i.i.loopexit ]
  %cmp.i.i.i = icmp sgt i32 %spinner.sroa.0.0.ph.i.i, 0
  br i1 %cmp.i.i.i, label %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i, label %if.end8.i.i

_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i: ; preds = %if.end4.i.i
  %cmp4.i.not.i.i = icmp eq i32 %spinner.sroa.0.0.ph.i.i, 1
  br i1 %cmp4.i.not.i.i, label %if.end8.i.i, label %if.then6.i.i

if.then6.i.i:                                     ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i
  %dec.i.i.i = add nsw i32 %spinner.sroa.0.0.ph.i.i, -1
  call void @halide_thread_yield() #14
  %11 = load atomic i64, i64* %state.i monotonic, align 8
  br label %while.cond.outer.i.i.backedge

if.end8.i.i:                                      ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i, %if.end4.i.i
  %spinner.sroa.0.152.i.i = phi i32 [ 0, %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i ], [ %spinner.sroa.0.0.ph.i.i, %if.end4.i.i ]
  %and9.i.i = and i64 %expected.0.lcssa.i.i, 2
  %cmp.i.i = icmp eq i64 %and9.i.i, 0
  br i1 %cmp.i.i, label %if.then10.i.i, label %if.end19.i.i

if.then10.i.i:                                    ; preds = %if.end8.i.i
  %or12.i.i = or i64 %expected.0.lcssa.i.i, 2
  %12 = cmpxchg weak i64* %state.i, i64 %expected.0.lcssa.i.i, i64 %or12.i.i monotonic monotonic
  %13 = extractvalue { i64, i1 } %12, 1
  br i1 %13, label %if.end19.i.i, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i: ; preds = %if.then10.i.i
  %14 = extractvalue { i64, i1 } %12, 0
  br label %while.cond.outer.i.i.backedge

if.end19.i.i:                                     ; preds = %if.then10.i.i, %if.end8.i.i
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %3) #11
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8, !tbaa !48
  store i64* %state.i, i64** %lock_state2.i.i.i, align 8, !tbaa !50
  %call21.i.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control4parkEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %5, i64 %6) #14
  %cmp22.i.i = icmp eq i64 %call21.i.i, %6
  br i1 %cmp22.i.i, label %cleanup30.critedge.i.i, label %if.end24.i.i

if.end24.i.i:                                     ; preds = %if.end19.i.i
  %15 = load atomic i64, i64* %state.i monotonic, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %3) #11
  br label %while.cond.outer.i.i.backedge

while.cond.outer.i.i.backedge:                    ; preds = %if.end24.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i, %if.then6.i.i
  %expected.0.ph.i.i.be = phi i64 [ %14, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i ], [ %15, %if.end24.i.i ], [ %11, %if.then6.i.i ]
  %spinner.sroa.0.0.ph.i.i.be = phi i32 [ %spinner.sroa.0.152.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i ], [ 40, %if.end24.i.i ], [ %dec.i.i.i, %if.then6.i.i ]
  br label %while.cond.outer.i.i

cleanup30.critedge.i.i:                           ; preds = %if.end19.i.i
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %3) #11
  br label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex4lockEv.exit

_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex4lockEv.exit: ; preds = %if.then.i.i, %cleanup30.critedge.i.i, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal27enqueue_work_already_lockedEiPNS1_4workES3_(i32 %num_jobs, %"struct.Halide::Runtime::Internal::work"* %jobs, %"struct.Halide::Runtime::Internal::work"* %task_parent) local_unnamed_addr #0 {
entry:
  %0 = load i8, i8* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 15), align 1, !tbaa !52, !range !21
  %tobool.not = icmp eq i8 %0, 0
  br i1 %tobool.not, label %land.rhs.i, label %if.end4

land.rhs.i:                                       ; preds = %entry, %while.body.i
  %bytes.011.i = phi i8* [ %incdec.ptr.i, %while.body.i ], [ bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), %entry ]
  %1 = load i8, i8* %bytes.011.i, align 1, !tbaa !18
  %cmp2.i = icmp eq i8 %1, 0
  br i1 %cmp2.i, label %while.body.i, label %do.body.i

while.body.i:                                     ; preds = %land.rhs.i
  %incdec.ptr.i = getelementptr inbounds i8, i8* %bytes.011.i, i64 1
  %exitcond.not.i = icmp eq i8* %incdec.ptr.i, bitcast (%"struct.Halide::Runtime::Internal::work_queue_t"* select (i1 icmp ugt (i8* bitcast (%"struct.Halide::Runtime::Internal::work_queue_t"* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 1) to i8*), i8* getelementptr (i8, i8* bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), i64 1)), %"struct.Halide::Runtime::Internal::work_queue_t"* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 1), %"struct.Halide::Runtime::Internal::work_queue_t"* bitcast (i8* getelementptr (i8, i8* bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), i64 1) to %"struct.Halide::Runtime::Internal::work_queue_t"*)) to i8*)
  br i1 %exitcond.not.i, label %do.body.i, label %land.rhs.i, !llvm.loop !56

do.body.i:                                        ; preds = %while.body.i, %land.rhs.i
  %bytes.0.lcssa.i = phi i8* [ %bytes.011.i, %land.rhs.i ], [ bitcast (%"struct.Halide::Runtime::Internal::work_queue_t"* select (i1 icmp ugt (i8* bitcast (%"struct.Halide::Runtime::Internal::work_queue_t"* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 1) to i8*), i8* getelementptr (i8, i8* bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), i64 1)), %"struct.Halide::Runtime::Internal::work_queue_t"* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 1), %"struct.Halide::Runtime::Internal::work_queue_t"* bitcast (i8* getelementptr (i8, i8* bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), i64 1) to %"struct.Halide::Runtime::Internal::work_queue_t"*)) to i8*), %while.body.i ]
  %cmp3.i = icmp eq i8* %bytes.0.lcssa.i, bitcast (%"struct.Halide::Runtime::Internal::work_queue_t"* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 1) to i8*)
  br i1 %cmp3.i, label %_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit, label %if.then.i

if.then.i:                                        ; preds = %do.body.i
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.6, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit

_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit: ; preds = %if.then.i, %do.body.i
  %2 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !58
  %tobool1.not = icmp eq i32 %2, 0
  br i1 %tobool1.not, label %if.then2, label %if.end

if.then2:                                         ; preds = %_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit
  %call = tail call i32 @_ZN6Halide7Runtime8Internal27default_desired_num_threadsEv() #15
  br label %if.end

if.end:                                           ; preds = %if.then2, %_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit
  %3 = phi i32 [ %call, %if.then2 ], [ %2, %_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit ]
  %4 = icmp sgt i32 %3, 1
  %spec.select.i = select i1 %4, i32 %3, i32 1
  %5 = icmp slt i32 %spec.select.i, 256
  %call3176 = select i1 %5, i32 %spec.select.i, i32 256
  store i32 %call3176, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !58
  store i8 1, i8* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 15), align 1, !tbaa !52
  br label %if.end4

if.end4:                                          ; preds = %if.end, %entry
  %cmp181 = icmp sgt i32 %num_jobs, 0
  br i1 %cmp181, label %for.body.preheader, label %for.cond.cleanup

for.body.preheader:                               ; preds = %if.end4
  %wide.trip.count = zext i32 %num_jobs to i64
  br label %for.body

for.cond.cleanup.loopexit:                        ; preds = %for.inc
  %phi.bo = and i8 %stealable_jobs.1, 1
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %if.end4
  %workers_to_wake.0.lcssa = phi i32 [ -1, %if.end4 ], [ %workers_to_wake.1, %for.cond.cleanup.loopexit ]
  %stealable_jobs.0.lcssa = phi i8 [ 0, %if.end4 ], [ %phi.bo, %for.cond.cleanup.loopexit ]
  %job_has_acquires.0.lcssa = phi i8 [ 0, %if.end4 ], [ %spec.select, %for.cond.cleanup.loopexit ]
  %job_may_block.0.lcssa = phi i8 [ 0, %if.end4 ], [ %job_may_block.1, %for.cond.cleanup.loopexit ]
  %min_threads.0.lcssa = phi i32 [ 0, %if.end4 ], [ %add, %for.cond.cleanup.loopexit ]
  %cmp31 = icmp eq %"struct.Halide::Runtime::Internal::work"* %task_parent, null
  br i1 %cmp31, label %if.then32, label %do.body61

for.body:                                         ; preds = %for.inc, %for.body.preheader
  %indvars.iv193 = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next194, %for.inc ]
  %min_threads.0187 = phi i32 [ 0, %for.body.preheader ], [ %add, %for.inc ]
  %job_may_block.0185 = phi i8 [ 0, %for.body.preheader ], [ %job_may_block.1, %for.inc ]
  %job_has_acquires.0184 = phi i8 [ 0, %for.body.preheader ], [ %spec.select, %for.inc ]
  %stealable_jobs.0183 = phi i8 [ 0, %for.body.preheader ], [ %stealable_jobs.1, %for.inc ]
  %workers_to_wake.0182 = phi i32 [ -1, %for.body.preheader ], [ %workers_to_wake.1, %for.inc ]
  %min_threads5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193, i32 0, i32 7
  %6 = load i32, i32* %min_threads5, align 4, !tbaa !37
  %cmp6 = icmp eq i32 %6, 0
  %add = add i32 %6, %min_threads.0187
  %stealable_jobs.1 = select i1 %cmp6, i8 1, i8 %stealable_jobs.0183
  %job_may_block.1 = select i1 %cmp6, i8 %job_may_block.0185, i8 1
  %num_semaphores = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193, i32 0, i32 4
  %7 = load i32, i32* %num_semaphores, align 8, !tbaa !35
  %cmp16.not = icmp eq i32 %7, 0
  %spec.select = select i1 %cmp16.not, i8 %job_has_acquires.0184, i8 1
  %serial = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193, i32 0, i32 8
  %8 = load i8, i8* %serial, align 8, !tbaa !33, !range !21
  %tobool22.not = icmp eq i8 %8, 0
  br i1 %tobool22.not, label %if.else24, label %if.then23

if.then23:                                        ; preds = %for.body
  %inc = add nsw i32 %workers_to_wake.0182, 1
  br label %for.inc

if.else24:                                        ; preds = %for.body
  %extent = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193, i32 0, i32 6
  %9 = load i32, i32* %extent, align 8, !tbaa !32
  %add28 = add nsw i32 %9, %workers_to_wake.0182
  br label %for.inc

for.inc:                                          ; preds = %if.else24, %if.then23
  %workers_to_wake.1 = phi i32 [ %inc, %if.then23 ], [ %add28, %if.else24 ]
  %indvars.iv.next194 = add nuw nsw i64 %indvars.iv193, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next194, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.cleanup.loopexit, label %for.body, !llvm.loop !59

if.then32:                                        ; preds = %for.cond.cleanup
  %10 = or i8 %job_may_block.0.lcssa, %job_has_acquires.0.lcssa
  %11 = and i8 %10, 1
  %12 = icmp eq i8 %11, 0
  %not. = xor i1 %12, true
  %add36 = zext i1 %not. to i32
  %min_threads.2 = add nsw i32 %min_threads.0.lcssa, %add36
  %13 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !60
  %cmp38180 = icmp slt i32 %13, 256
  br i1 %cmp38180, label %land.rhs, label %do.end50

land.rhs:                                         ; preds = %if.then32, %while.body
  %14 = phi i32 [ %inc45, %while.body ], [ %13, %if.then32 ]
  %15 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !58
  %sub = add nsw i32 %15, -1
  %cmp39 = icmp slt i32 %14, %sub
  br i1 %cmp39, label %while.body, label %lor.rhs

lor.rhs:                                          ; preds = %land.rhs
  %add40 = add nsw i32 %14, 1
  %16 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !61
  %sub41 = sub i32 %add40, %16
  %cmp42 = icmp slt i32 %sub41, %min_threads.2
  br i1 %cmp42, label %while.body, label %do.end50

while.body:                                       ; preds = %lor.rhs, %land.rhs
  %17 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !62
  %inc43 = add nsw i32 %17, 1
  store i32 %inc43, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !62
  %call44 = tail call %struct.halide_thread* @halide_spawn_thread(void (i8*)* nonnull @_ZN6Halide7Runtime8Internal13worker_threadEPv, i8* null) #15
  %18 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !60
  %inc45 = add nsw i32 %18, 1
  store i32 %inc45, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !60
  %idxprom46 = sext i32 %18 to i64
  %arrayidx47 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 13, i64 %idxprom46
  store %struct.halide_thread* %call44, %struct.halide_thread** %arrayidx47, align 8, !tbaa !14
  %cmp38 = icmp slt i32 %18, 255
  br i1 %cmp38, label %land.rhs, label %do.end50, !llvm.loop !63

do.end50:                                         ; preds = %while.body, %lor.rhs, %if.then32
  br i1 %12, label %if.end77, label %if.then54

if.then54:                                        ; preds = %do.end50
  %19 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !61
  %inc55 = add nsw i32 %19, 1
  store i32 %inc55, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !61
  br label %if.end77

do.body61:                                        ; preds = %for.cond.cleanup
  %min_threads63 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %task_parent, i64 0, i32 0, i32 7
  %20 = load i32, i32* %min_threads63, align 4, !tbaa !37
  %active_workers = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %task_parent, i64 0, i32 8
  %21 = load i32, i32* %active_workers, align 8, !tbaa !64
  %mul = mul nsw i32 %21, %20
  %threads_reserved = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %task_parent, i64 0, i32 6
  %22 = load i32, i32* %threads_reserved, align 8, !tbaa !65
  %sub64 = sub nsw i32 %mul, %22
  %cmp65.not = icmp sgt i32 %min_threads.0.lcssa, %sub64
  br i1 %cmp65.not, label %if.then66, label %do.end69

if.then66:                                        ; preds = %do.body61
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([263 x i8], [263 x i8]* @.str.3, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %do.end69

do.end69:                                         ; preds = %if.then66, %do.body61
  %23 = or i8 %job_may_block.0.lcssa, %job_has_acquires.0.lcssa
  %24 = and i8 %23, 1
  %25 = icmp eq i8 %24, 0
  br i1 %25, label %if.end77, label %if.then73

if.then73:                                        ; preds = %do.end69
  %26 = load i32, i32* %threads_reserved, align 8, !tbaa !65
  %inc75 = add nsw i32 %26, 1
  store i32 %inc75, i32* %threads_reserved, align 8, !tbaa !65
  br label %if.end77

if.end77:                                         ; preds = %if.then73, %do.end69, %if.then54, %do.end50
  br i1 %cmp181, label %for.body83.lr.ph, label %for.cond.cleanup82

for.body83.lr.ph:                                 ; preds = %if.end77
  %.promoted = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !66
  %27 = zext i32 %num_jobs to i64
  %min.iters.check = icmp eq i32 %num_jobs, 1
  br i1 %min.iters.check, label %for.body83.preheader, label %vector.ph

vector.ph:                                        ; preds = %for.body83.lr.ph
  %n.vec = and i64 %27, 4294967294
  %ind.end = and i64 %27, 1
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %vector.recur = phi %"struct.Halide::Runtime::Internal::work"* [ %.promoted, %vector.ph ], [ %31, %vector.body ]
  %offset.idx = sub i64 %27, %index
  %28 = add nsw i64 %offset.idx, -1
  %29 = add i64 %offset.idx, -2
  %30 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %28
  %31 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %29
  %32 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %28, i32 2
  %33 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %29, i32 2
  store %"struct.Halide::Runtime::Internal::work"* %vector.recur, %"struct.Halide::Runtime::Internal::work"** %32, align 8, !tbaa !67
  store %"struct.Halide::Runtime::Internal::work"* %30, %"struct.Halide::Runtime::Internal::work"** %33, align 8, !tbaa !67
  %34 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %28, i32 3
  %35 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %29, i32 3
  store %"struct.Halide::Runtime::Internal::work"* %jobs, %"struct.Halide::Runtime::Internal::work"** %34, align 8, !tbaa !44
  store %"struct.Halide::Runtime::Internal::work"* %jobs, %"struct.Halide::Runtime::Internal::work"** %35, align 8, !tbaa !44
  %36 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %28, i32 4
  %37 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %29, i32 4
  store i32 %num_jobs, i32* %36, align 8, !tbaa !45
  store i32 %num_jobs, i32* %37, align 8, !tbaa !45
  %38 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %28, i32 6
  %39 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %29, i32 6
  store i32 0, i32* %38, align 8, !tbaa !65
  store i32 0, i32* %39, align 8, !tbaa !65
  %index.next = add i64 %index, 2
  %40 = icmp eq i64 %index.next, %n.vec
  br i1 %40, label %middle.block, label %vector.body, !llvm.loop !68

middle.block:                                     ; preds = %vector.body
  %cmp.n = icmp eq i64 %n.vec, %27
  br i1 %cmp.n, label %for.cond80.for.cond.cleanup82_crit_edge, label %for.body83.preheader

for.body83.preheader:                             ; preds = %for.body83.lr.ph, %middle.block
  %indvars.iv.ph = phi i64 [ %ind.end, %middle.block ], [ %27, %for.body83.lr.ph ]
  %scalar.recur.ph = phi %"struct.Halide::Runtime::Internal::work"* [ %31, %middle.block ], [ %.promoted, %for.body83.lr.ph ]
  br label %for.body83

for.cond80.for.cond.cleanup82_crit_edge:          ; preds = %for.body83, %middle.block
  store %"struct.Halide::Runtime::Internal::work"* %jobs, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !66
  br label %for.cond.cleanup82

for.cond.cleanup82:                               ; preds = %for.cond80.for.cond.cleanup82_crit_edge, %if.end77
  %41 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 12), align 4, !tbaa !70
  %tobool96 = icmp ne i32 %41, 0
  %42 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 11), align 8
  %43 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8
  %cmp98 = icmp slt i32 %42, %43
  %44 = or i1 %tobool96, %cmp98
  %cmp102 = icmp sgt i32 %workers_to_wake.0.lcssa, %42
  %or.cond174 = or i1 %cmp102, %44
  %storemerge = select i1 %or.cond174, i32 %43, i32 %workers_to_wake.0.lcssa
  store i32 %storemerge, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 6), align 8, !tbaa !71
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 8)) #15
  %45 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 6), align 8, !tbaa !71
  %46 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !62
  %cmp106 = icmp sgt i32 %45, %46
  br i1 %cmp106, label %if.then107, label %if.end111

for.body83:                                       ; preds = %for.body83.preheader, %for.body83
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body83 ], [ %indvars.iv.ph, %for.body83.preheader ]
  %scalar.recur = phi %"struct.Halide::Runtime::Internal::work"* [ %arrayidx85, %for.body83 ], [ %scalar.recur.ph, %for.body83.preheader ]
  %indvars.iv.next = add nsw i64 %indvars.iv, -1
  %arrayidx85 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next
  %next_job = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next, i32 2
  store %"struct.Halide::Runtime::Internal::work"* %scalar.recur, %"struct.Halide::Runtime::Internal::work"** %next_job, align 8, !tbaa !67
  %siblings = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next, i32 3
  store %"struct.Halide::Runtime::Internal::work"* %jobs, %"struct.Halide::Runtime::Internal::work"** %siblings, align 8, !tbaa !44
  %sibling_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next, i32 4
  store i32 %num_jobs, i32* %sibling_count, align 8, !tbaa !45
  %threads_reserved93 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next, i32 6
  store i32 0, i32* %threads_reserved93, align 8, !tbaa !65
  %cmp81 = icmp sgt i64 %indvars.iv, 1
  br i1 %cmp81, label %for.body83, label %for.cond80.for.cond.cleanup82_crit_edge, !llvm.loop !72

if.then107:                                       ; preds = %for.cond.cleanup82
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 9)) #15
  %tobool108.not = icmp eq i8 %stealable_jobs.0.lcssa, 0
  br i1 %tobool108.not, label %if.end111, label %if.then109

if.then109:                                       ; preds = %if.then107
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10)) #15
  br label %if.end111

if.end111:                                        ; preds = %if.then109, %if.then107, %for.cond.cleanup82
  %47 = or i8 %job_may_block.0.lcssa, %job_has_acquires.0.lcssa
  %48 = and i8 %47, 1
  %49 = icmp eq i8 %48, 0
  br i1 %49, label %if.end123, label %if.then115

if.then115:                                       ; preds = %if.end111
  br i1 %cmp31, label %if.else120, label %if.then117

if.then117:                                       ; preds = %if.then115
  %threads_reserved118 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %task_parent, i64 0, i32 6
  %50 = load i32, i32* %threads_reserved118, align 8, !tbaa !65
  %dec119 = add nsw i32 %50, -1
  store i32 %dec119, i32* %threads_reserved118, align 8, !tbaa !65
  br label %if.end123

if.else120:                                       ; preds = %if.then115
  %51 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !61
  %dec121 = add nsw i32 %51, -1
  store i32 %dec121, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !61
  br label %if.end123

if.end123:                                        ; preds = %if.else120, %if.then117, %if.end111
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal28worker_thread_already_lockedEPNS1_4workE(%"struct.Halide::Runtime::Internal::work"* %owned_job) local_unnamed_addr #0 {
entry:
  %active_workers.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 8
  %tobool.not = icmp eq %"struct.Halide::Runtime::Internal::work"* %owned_job, null
  %extent.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 0, i32 6
  %exit_status = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 9
  %parent_job = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 5
  %siblings56 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 3
  %owner_is_sleeping = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 11
  %next_job10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 2
  br label %while.cond

while.cond:                                       ; preds = %while.cond.backedge, %entry
  %spin_count.0 = phi i32 [ 0, %entry ], [ %spin_count.0.be, %while.cond.backedge ]
  br i1 %tobool.not, label %cond.false, label %cond.true

cond.true:                                        ; preds = %while.cond
  %0 = load i32, i32* %extent.i, align 8, !tbaa !32
  %tobool.not.i = icmp eq i32 %0, 0
  br i1 %tobool.not.i, label %cond.end, label %if.then

cond.false:                                       ; preds = %while.cond
  %1 = load i8, i8* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 14), align 8, !tbaa !73, !range !21
  %tobool1.not = icmp eq i8 %1, 0
  br i1 %tobool1.not, label %do.end.thread, label %while.end316

cond.end:                                         ; preds = %cond.true
  %2 = load i32, i32* %active_workers.i, align 8, !tbaa !64
  %tobool2.i.not = icmp eq i32 %2, 0
  br i1 %tobool2.i.not, label %while.end316, label %if.then

if.then:                                          ; preds = %cond.end, %cond.true
  %3 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !66
  %4 = load i32, i32* %exit_status, align 4, !tbaa !47
  %cmp.not = icmp eq i32 %4, 0
  br i1 %cmp.not, label %if.else, label %if.then3

if.then3:                                         ; preds = %if.then
  %5 = load i32, i32* %active_workers.i, align 8, !tbaa !64
  %cmp4 = icmp eq i32 %5, 0
  br i1 %cmp4, label %while.cond6.preheader, label %do.end

while.cond6.preheader:                            ; preds = %if.then3
  %cmp7.not524 = icmp eq %"struct.Halide::Runtime::Internal::work"* %3, %owned_job
  br i1 %cmp7.not524, label %while.end, label %while.body8

while.body8:                                      ; preds = %while.cond6.preheader, %while.body8
  %job.0525 = phi %"struct.Halide::Runtime::Internal::work"* [ %6, %while.body8 ], [ %3, %while.cond6.preheader ]
  %next_job = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.0525, i64 0, i32 2
  %6 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job, align 8, !tbaa !67
  %cmp7.not = icmp eq %"struct.Halide::Runtime::Internal::work"* %6, %owned_job
  br i1 %cmp7.not, label %while.end.loopexit, label %while.body8, !llvm.loop !74

while.end.loopexit:                               ; preds = %while.body8
  %next_job.le = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.0525, i64 0, i32 2
  br label %while.end

while.end:                                        ; preds = %while.end.loopexit, %while.cond6.preheader
  %prev_ptr.0.lcssa = phi %"struct.Halide::Runtime::Internal::work"** [ getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), %while.cond6.preheader ], [ %next_job.le, %while.end.loopexit ]
  %7 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job10, align 8, !tbaa !67
  store %"struct.Halide::Runtime::Internal::work"* %7, %"struct.Halide::Runtime::Internal::work"** %prev_ptr.0.lcssa, align 8, !tbaa !14
  store i32 0, i32* %extent.i, align 8, !tbaa !32
  br label %while.cond.backedge

if.else:                                          ; preds = %if.then
  %8 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %parent_job, align 8, !tbaa !46
  %tobool11.not = icmp eq %"struct.Halide::Runtime::Internal::work"* %8, null
  br i1 %tobool11.not, label %do.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.else
  %exit_status13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %8, i64 0, i32 9
  %9 = load i32, i32* %exit_status13, align 4, !tbaa !47
  %cmp14.not = icmp eq i32 %9, 0
  br i1 %cmp14.not, label %do.end, label %if.then15

if.then15:                                        ; preds = %land.lhs.true
  store i32 %9, i32* %exit_status, align 4, !tbaa !47
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10)) #15
  br label %while.cond.backedge

do.end:                                           ; preds = %land.lhs.true, %if.else, %if.then3
  %tobool23.not527 = icmp eq %"struct.Halide::Runtime::Internal::work"* %3, null
  br i1 %tobool23.not527, label %if.then105, label %do.end27

do.end.thread:                                    ; preds = %cond.false
  %10 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !66
  %tobool23.not527563 = icmp eq %"struct.Halide::Runtime::Internal::work"* %10, null
  br i1 %tobool23.not527563, label %if.else112, label %do.end27.us

do.end27.us:                                      ; preds = %do.end.thread, %cleanup.us
  %job.1529.us = phi %"struct.Halide::Runtime::Internal::work"* [ %29, %cleanup.us ], [ %10, %do.end.thread ]
  %prev_ptr.1528.us = phi %"struct.Halide::Runtime::Internal::work"** [ %next_job95.us, %cleanup.us ], [ getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), %do.end.thread ]
  %parent_job29.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 5
  %11 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %parent_job29.us, align 8, !tbaa !46
  %cmp30.us = icmp eq %"struct.Halide::Runtime::Internal::work"* %11, null
  br i1 %cmp30.us, label %if.then31.us, label %if.else32.us

if.else32.us:                                     ; preds = %do.end27.us
  %active_workers33.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %11, i64 0, i32 8
  %12 = load i32, i32* %active_workers33.us, align 8, !tbaa !64
  %cmp34.us = icmp eq i32 %12, 0
  %min_threads.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %11, i64 0, i32 0, i32 7
  %13 = load i32, i32* %min_threads.us, align 4, !tbaa !37
  br i1 %cmp34.us, label %if.then35.us, label %if.else38.us

if.else38.us:                                     ; preds = %if.else32.us
  %mul.us = mul nsw i32 %13, %12
  %threads_reserved42.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %11, i64 0, i32 6
  %14 = load i32, i32* %threads_reserved42.us, align 8, !tbaa !65
  %sub43.us = sub nsw i32 %mul.us, %14
  br label %if.end45.us

if.then35.us:                                     ; preds = %if.else32.us
  %threads_reserved.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %11, i64 0, i32 6
  %15 = load i32, i32* %threads_reserved.us, align 8, !tbaa !65
  %sub37.us = sub nsw i32 %13, %15
  br label %if.end45.us

if.then31.us:                                     ; preds = %do.end27.us
  %16 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !60
  %add.us = add nsw i32 %16, 1
  %17 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !61
  %sub.us = sub i32 %add.us, %17
  br label %if.end45.us

if.end45.us:                                      ; preds = %if.then31.us, %if.then35.us, %if.else38.us
  %threads_available.0.us = phi i32 [ %sub.us, %if.then31.us ], [ %sub37.us, %if.then35.us ], [ %sub43.us, %if.else38.us ]
  %min_threads47.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 0, i32 7
  %18 = load i32, i32* %min_threads47.us, align 4, !tbaa !37
  %cmp48.not.us = icmp sge i32 %threads_available.0.us, %18
  %serial.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 0, i32 8
  %19 = load i8, i8* %serial.us, align 8, !tbaa !33, !range !21
  %tobool69.not.us = icmp eq i8 %19, 0
  br i1 %tobool69.not.us, label %if.end45.us.lor.end73.us_crit_edge, label %lor.rhs70.us

if.end45.us.lor.end73.us_crit_edge:               ; preds = %if.end45.us
  %.0 = and i1 %cmp48.not.us, true
  br label %lor.end73.us

lor.rhs70.us:                                     ; preds = %if.end45.us
  %active_workers71.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 8
  %20 = load i32, i32* %active_workers71.us, align 8, !tbaa !64
  %cmp72.us = icmp eq i32 %20, 0
  %.1 = and i1 %cmp48.not.us, %cmp72.us
  br label %lor.end73.us

lor.end73.us:                                     ; preds = %if.end45.us.lor.end73.us_crit_edge, %lor.rhs70.us
  %.phi = phi i1 [ %.0, %if.end45.us.lor.end73.us_crit_edge ], [ %.1, %lor.rhs70.us ]
  br i1 %.phi, label %if.then86.us, label %cleanup.us

if.then86.us:                                     ; preds = %lor.end73.us
  %next_semaphore.i.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 10
  %21 = load i32, i32* %next_semaphore.i.us, align 8, !tbaa !42
  %num_semaphores.i.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 0, i32 4
  %22 = load i32, i32* %num_semaphores.i.us, align 8, !tbaa !35
  %cmp14.i.us = icmp slt i32 %21, %22
  br i1 %cmp14.i.us, label %for.body.lr.ph.i.us, label %if.else127

for.body.lr.ph.i.us:                              ; preds = %if.then86.us
  %semaphores.i.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 0, i32 3
  br label %for.body.i.us

for.body.i.us:                                    ; preds = %for.inc.i.us, %for.body.lr.ph.i.us
  %23 = phi i32 [ %21, %for.body.lr.ph.i.us ], [ %inc.i.us, %for.inc.i.us ]
  %24 = load %struct.halide_semaphore_acquire_t*, %struct.halide_semaphore_acquire_t** %semaphores.i.us, align 8, !tbaa !34
  %idxprom.i.us = sext i32 %23 to i64
  %semaphore.i.us = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %24, i64 %idxprom.i.us, i32 0
  %25 = load %struct.halide_semaphore_t*, %struct.halide_semaphore_t** %semaphore.i.us, align 8, !tbaa !75
  %count.i.us = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %24, i64 %idxprom.i.us, i32 1
  %26 = load i32, i32* %count.i.us, align 8, !tbaa !77
  %call.i.us = tail call zeroext i1 @halide_default_semaphore_try_acquire(%struct.halide_semaphore_t* %25, i32 %26) #14
  br i1 %call.i.us, label %for.inc.i.us, label %cleanup.us

for.inc.i.us:                                     ; preds = %for.body.i.us
  %27 = load i32, i32* %next_semaphore.i.us, align 8, !tbaa !42
  %inc.i.us = add nsw i32 %27, 1
  store i32 %inc.i.us, i32* %next_semaphore.i.us, align 8, !tbaa !42
  %28 = load i32, i32* %num_semaphores.i.us, align 8, !tbaa !35
  %cmp.i.us = icmp slt i32 %inc.i.us, %28
  br i1 %cmp.i.us, label %for.body.i.us, label %if.else127, !llvm.loop !78

cleanup.us:                                       ; preds = %for.body.i.us, %lor.end73.us
  %next_job95.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 2
  %29 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job95.us, align 8, !tbaa !67
  %tobool23.not.us = icmp eq %"struct.Halide::Runtime::Internal::work"* %29, null
  br i1 %tobool23.not.us, label %if.then103, label %do.end27.us

do.end27:                                         ; preds = %do.end, %cleanup
  %job.1529 = phi %"struct.Halide::Runtime::Internal::work"* [ %50, %cleanup ], [ %3, %do.end ]
  %prev_ptr.1528 = phi %"struct.Halide::Runtime::Internal::work"** [ %next_job95, %cleanup ], [ getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), %do.end ]
  %parent_job29 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 5
  %30 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %parent_job29, align 8, !tbaa !46
  %cmp30 = icmp eq %"struct.Halide::Runtime::Internal::work"* %30, null
  br i1 %cmp30, label %if.then31, label %if.else32

if.then31:                                        ; preds = %do.end27
  %31 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !60
  %add = add nsw i32 %31, 1
  %32 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !61
  %sub = sub i32 %add, %32
  br label %if.end45

if.else32:                                        ; preds = %do.end27
  %active_workers33 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %30, i64 0, i32 8
  %33 = load i32, i32* %active_workers33, align 8, !tbaa !64
  %cmp34 = icmp eq i32 %33, 0
  %min_threads = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %30, i64 0, i32 0, i32 7
  %34 = load i32, i32* %min_threads, align 4, !tbaa !37
  br i1 %cmp34, label %if.then35, label %if.else38

if.then35:                                        ; preds = %if.else32
  %threads_reserved = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %30, i64 0, i32 6
  %35 = load i32, i32* %threads_reserved, align 8, !tbaa !65
  %sub37 = sub nsw i32 %34, %35
  br label %if.end45

if.else38:                                        ; preds = %if.else32
  %mul = mul nsw i32 %34, %33
  %threads_reserved42 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %30, i64 0, i32 6
  %36 = load i32, i32* %threads_reserved42, align 8, !tbaa !65
  %sub43 = sub nsw i32 %mul, %36
  br label %if.end45

if.end45:                                         ; preds = %if.else38, %if.then35, %if.then31
  %threads_available.0 = phi i32 [ %sub, %if.then31 ], [ %sub37, %if.then35 ], [ %sub43, %if.else38 ]
  %min_threads47 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 0, i32 7
  %37 = load i32, i32* %min_threads47, align 4, !tbaa !37
  %cmp48.not = icmp slt i32 %threads_available.0, %37
  %siblings = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 3
  %38 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %siblings, align 8, !tbaa !44
  %39 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %siblings56, align 8, !tbaa !44
  %cmp57 = icmp ne %"struct.Halide::Runtime::Internal::work"* %38, %39
  %cmp60 = icmp ne i32 %37, 0
  %serial = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 0, i32 8
  %40 = load i8, i8* %serial, align 8, !tbaa !33, !range !21
  %tobool69.not = icmp eq i8 %40, 0
  br i1 %tobool69.not, label %if.end45.lor.end73_crit_edge, label %lor.rhs70

if.end45.lor.end73_crit_edge:                     ; preds = %if.end45
  %.not472.0 = xor i1 true, true
  br label %lor.end73

lor.rhs70:                                        ; preds = %if.end45
  %active_workers71 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 8
  %41 = load i32, i32* %active_workers71, align 8, !tbaa !64
  %cmp72 = icmp eq i32 %41, 0
  %.not472.1 = xor i1 %cmp72, true
  br label %lor.end73

lor.end73:                                        ; preds = %if.end45.lor.end73_crit_edge, %lor.rhs70
  %.not472.phi = phi i1 [ %.not472.0, %if.end45.lor.end73_crit_edge ], [ %.not472.1, %lor.rhs70 ]
  %.not = and i1 %cmp60, %cmp57
  %brmerge = or i1 %cmp48.not, %.not
  %brmerge473 = or i1 %brmerge, %.not472.phi
  br i1 %brmerge473, label %cleanup, label %if.then86

if.then86:                                        ; preds = %lor.end73
  %next_semaphore.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 10
  %42 = load i32, i32* %next_semaphore.i, align 8, !tbaa !42
  %num_semaphores.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 0, i32 4
  %43 = load i32, i32* %num_semaphores.i, align 8, !tbaa !35
  %cmp14.i = icmp slt i32 %42, %43
  br i1 %cmp14.i, label %for.body.lr.ph.i, label %if.else127

for.body.lr.ph.i:                                 ; preds = %if.then86
  %semaphores.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 0, i32 3
  br label %for.body.i

for.body.i:                                       ; preds = %for.inc.i, %for.body.lr.ph.i
  %44 = phi i32 [ %42, %for.body.lr.ph.i ], [ %inc.i, %for.inc.i ]
  %45 = load %struct.halide_semaphore_acquire_t*, %struct.halide_semaphore_acquire_t** %semaphores.i, align 8, !tbaa !34
  %idxprom.i = sext i32 %44 to i64
  %semaphore.i = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %45, i64 %idxprom.i, i32 0
  %46 = load %struct.halide_semaphore_t*, %struct.halide_semaphore_t** %semaphore.i, align 8, !tbaa !75
  %count.i = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %45, i64 %idxprom.i, i32 1
  %47 = load i32, i32* %count.i, align 8, !tbaa !77
  %call.i = tail call zeroext i1 @halide_default_semaphore_try_acquire(%struct.halide_semaphore_t* %46, i32 %47) #14
  br i1 %call.i, label %for.inc.i, label %cleanup

for.inc.i:                                        ; preds = %for.body.i
  %48 = load i32, i32* %next_semaphore.i, align 8, !tbaa !42
  %inc.i = add nsw i32 %48, 1
  store i32 %inc.i, i32* %next_semaphore.i, align 8, !tbaa !42
  %49 = load i32, i32* %num_semaphores.i, align 8, !tbaa !35
  %cmp.i = icmp slt i32 %inc.i, %49
  br i1 %cmp.i, label %for.body.i, label %if.else127, !llvm.loop !78

cleanup:                                          ; preds = %for.body.i, %lor.end73
  %next_job95 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 2
  %50 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job95, align 8, !tbaa !67
  %tobool23.not = icmp eq %"struct.Halide::Runtime::Internal::work"* %50, null
  br i1 %tobool23.not, label %if.then103, label %do.end27

if.then103:                                       ; preds = %cleanup, %cleanup.us
  br i1 %tobool.not, label %if.else112, label %if.then105

if.then105:                                       ; preds = %do.end, %if.then103
  %inc = add nsw i32 %spin_count.0, 1
  %cmp106 = icmp slt i32 %spin_count.0, 40
  br i1 %cmp106, label %if.then107, label %if.else108

if.then107:                                       ; preds = %if.then105
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #15
  tail call void @halide_thread_yield() #14
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #15
  br label %while.cond.backedge

if.else108:                                       ; preds = %if.then105
  %51 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 12), align 4, !tbaa !70
  %inc109 = add nsw i32 %51, 1
  store i32 %inc109, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 12), align 4, !tbaa !70
  store i8 1, i8* %owner_is_sleeping, align 4, !tbaa !43
  tail call void @halide_cond_wait(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10), %struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #15
  store i8 0, i8* %owner_is_sleeping, align 4, !tbaa !43
  %52 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 12), align 4, !tbaa !70
  %dec = add nsw i32 %52, -1
  store i32 %dec, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 12), align 4, !tbaa !70
  br label %while.cond.backedge

if.else112:                                       ; preds = %if.then103, %do.end.thread
  %53 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 11), align 8, !tbaa !79
  %inc113 = add nsw i32 %53, 1
  store i32 %inc113, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 11), align 8, !tbaa !79
  %54 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !62
  %55 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 6), align 8, !tbaa !71
  %cmp114 = icmp sgt i32 %54, %55
  br i1 %cmp114, label %if.then115, label %if.else118

if.then115:                                       ; preds = %if.else112
  %dec116 = add nsw i32 %54, -1
  store i32 %dec116, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !62
  tail call void @halide_cond_wait(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 9), %struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #15
  %56 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !62
  %inc117 = add nsw i32 %56, 1
  store i32 %inc117, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !62
  br label %if.end124

if.else118:                                       ; preds = %if.else112
  %inc119 = add nsw i32 %spin_count.0, 1
  %cmp120 = icmp slt i32 %spin_count.0, 40
  br i1 %cmp120, label %if.then121, label %if.else122

if.then121:                                       ; preds = %if.else118
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #15
  tail call void @halide_thread_yield() #14
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #15
  br label %if.end124

if.else122:                                       ; preds = %if.else118
  tail call void @halide_cond_wait(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 8), %struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #15
  br label %if.end124

if.end124:                                        ; preds = %if.else122, %if.then121, %if.then115
  %spin_count.1 = phi i32 [ %spin_count.0, %if.then115 ], [ %inc119, %if.then121 ], [ %inc119, %if.else122 ]
  %57 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 11), align 8, !tbaa !79
  %dec125 = add nsw i32 %57, -1
  store i32 %dec125, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 11), align 8, !tbaa !79
  br label %while.cond.backedge

if.else127:                                       ; preds = %if.then86, %if.then86.us, %for.inc.i, %for.inc.i.us
  %next_semaphore.i521 = phi i32* [ %next_semaphore.i.us, %for.inc.i.us ], [ %next_semaphore.i, %for.inc.i ], [ %next_semaphore.i.us, %if.then86.us ], [ %next_semaphore.i, %if.then86 ]
  %prev_ptr.1519 = phi %"struct.Halide::Runtime::Internal::work"** [ %prev_ptr.1528.us, %for.inc.i.us ], [ %prev_ptr.1528, %for.inc.i ], [ %prev_ptr.1528.us, %if.then86.us ], [ %prev_ptr.1528, %if.then86 ]
  %job.1515 = phi %"struct.Halide::Runtime::Internal::work"* [ %job.1529.us, %for.inc.i.us ], [ %job.1529, %for.inc.i ], [ %job.1529.us, %if.then86.us ], [ %job.1529, %if.then86 ]
  store i32 0, i32* %next_semaphore.i521, align 8, !tbaa !42
  %active_workers132 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 8
  %58 = load i32, i32* %active_workers132, align 8, !tbaa !64
  %inc133 = add nsw i32 %58, 1
  store i32 %inc133, i32* %active_workers132, align 8, !tbaa !64
  %parent_job134 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 5
  %59 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %parent_job134, align 8, !tbaa !46
  %cmp135 = icmp eq %"struct.Halide::Runtime::Internal::work"* %59, null
  %min_threads138 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 7
  %60 = load i32, i32* %min_threads138, align 4, !tbaa !37
  br i1 %cmp135, label %if.then136, label %if.else143

if.then136:                                       ; preds = %if.else127
  %61 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !61
  %add139 = add nsw i32 %61, %60
  store i32 %add139, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !61
  br label %if.end152

if.else143:                                       ; preds = %if.else127
  %threads_reserved147 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %59, i64 0, i32 6
  %62 = load i32, i32* %threads_reserved147, align 8, !tbaa !65
  %add148 = add nsw i32 %62, %60
  store i32 %add148, i32* %threads_reserved147, align 8, !tbaa !65
  br label %if.end152

if.end152:                                        ; preds = %if.else143, %if.then136
  %serial154 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 8
  %63 = load i8, i8* %serial154, align 8, !tbaa !33, !range !21
  %tobool155.not = icmp eq i8 %63, 0
  br i1 %tobool155.not, label %if.else198, label %if.then156

if.then156:                                       ; preds = %if.end152
  %next_job157 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 2
  %64 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job157, align 8, !tbaa !67
  store %"struct.Halide::Runtime::Internal::work"* %64, %"struct.Halide::Runtime::Internal::work"** %prev_ptr.1519, align 8, !tbaa !14
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #15
  %extent163 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 6
  %next_semaphore.i474 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 10
  %num_semaphores.i475 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 4
  %semaphores.i477 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 3
  %user_context = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 7
  %fn = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 0
  %min = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 5
  %closure = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 1
  %65 = bitcast %"struct.Halide::Runtime::Internal::work"* %job.1515 to i8*
  br label %while.cond161.preheader

while.cond161.preheader:                          ; preds = %if.end172, %if.then156
  %iters.0538 = phi i32 [ 1, %if.then156 ], [ 0, %if.end172 ]
  %total_iters.0537 = phi i32 [ 0, %if.then156 ], [ %add178, %if.end172 ]
  %66 = load i32, i32* %extent163, align 8, !tbaa !32
  %sub164531 = sub nsw i32 %66, %total_iters.0537
  %cmp165532 = icmp sgt i32 %sub164531, %iters.0538
  br i1 %cmp165532, label %land.rhs.preheader, label %while.end169

land.rhs.preheader:                               ; preds = %while.cond161.preheader
  %.pre = load i32, i32* %next_semaphore.i474, align 8, !tbaa !42
  %.pre560 = load i32, i32* %num_semaphores.i475, align 8, !tbaa !35
  br label %land.rhs

land.rhs:                                         ; preds = %while.body167, %land.rhs.preheader
  %67 = phi i32 [ %76, %while.body167 ], [ %66, %land.rhs.preheader ]
  %68 = phi i32 [ %77, %while.body167 ], [ %.pre560, %land.rhs.preheader ]
  %69 = phi i32 [ 0, %while.body167 ], [ %.pre, %land.rhs.preheader ]
  %iters.1533 = phi i32 [ %inc168, %while.body167 ], [ %iters.0538, %land.rhs.preheader ]
  %cmp14.i476 = icmp slt i32 %69, %68
  br i1 %cmp14.i476, label %for.body.i483, label %while.body167

for.body.i483:                                    ; preds = %land.rhs, %for.inc.i486
  %70 = phi i32 [ %inc.i484, %for.inc.i486 ], [ %69, %land.rhs ]
  %71 = load %struct.halide_semaphore_acquire_t*, %struct.halide_semaphore_acquire_t** %semaphores.i477, align 8, !tbaa !34
  %idxprom.i479 = sext i32 %70 to i64
  %semaphore.i480 = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %71, i64 %idxprom.i479, i32 0
  %72 = load %struct.halide_semaphore_t*, %struct.halide_semaphore_t** %semaphore.i480, align 8, !tbaa !75
  %count.i481 = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %71, i64 %idxprom.i479, i32 1
  %73 = load i32, i32* %count.i481, align 8, !tbaa !77
  %call.i482 = tail call zeroext i1 @halide_default_semaphore_try_acquire(%struct.halide_semaphore_t* %72, i32 %73) #14
  br i1 %call.i482, label %for.inc.i486, label %while.end169

for.inc.i486:                                     ; preds = %for.body.i483
  %74 = load i32, i32* %next_semaphore.i474, align 8, !tbaa !42
  %inc.i484 = add nsw i32 %74, 1
  store i32 %inc.i484, i32* %next_semaphore.i474, align 8, !tbaa !42
  %75 = load i32, i32* %num_semaphores.i475, align 8, !tbaa !35
  %cmp.i485 = icmp slt i32 %inc.i484, %75
  br i1 %cmp.i485, label %for.body.i483, label %while.body167.loopexit, !llvm.loop !78

while.body167.loopexit:                           ; preds = %for.inc.i486
  %.pre561 = load i32, i32* %extent163, align 8, !tbaa !32
  br label %while.body167

while.body167:                                    ; preds = %while.body167.loopexit, %land.rhs
  %76 = phi i32 [ %.pre561, %while.body167.loopexit ], [ %67, %land.rhs ]
  %77 = phi i32 [ %75, %while.body167.loopexit ], [ %68, %land.rhs ]
  store i32 0, i32* %next_semaphore.i474, align 8, !tbaa !42
  %inc168 = add nuw nsw i32 %iters.1533, 1
  %sub164 = sub nsw i32 %76, %total_iters.0537
  %cmp165 = icmp sgt i32 %sub164, %inc168
  br i1 %cmp165, label %land.rhs, label %if.end172, !llvm.loop !80

while.end169:                                     ; preds = %for.body.i483, %while.cond161.preheader
  %iters.1523 = phi i32 [ %iters.0538, %while.cond161.preheader ], [ %iters.1533, %for.body.i483 ]
  %cmp170 = icmp eq i32 %iters.1523, 0
  br i1 %cmp170, label %while.end179, label %if.end172

if.end172:                                        ; preds = %while.body167, %while.end169
  %iters.1523566 = phi i32 [ %iters.1523, %while.end169 ], [ %inc168, %while.body167 ]
  %78 = load i8*, i8** %user_context, align 8, !tbaa !40
  %79 = load i32 (i8*, i32, i32, i8*, i8*)*, i32 (i8*, i32, i32, i8*, i8*)** %fn, align 8, !tbaa !28
  %80 = load i32, i32* %min, align 4, !tbaa !31
  %add175 = add nsw i32 %80, %total_iters.0537
  %81 = load i8*, i8** %closure, align 8, !tbaa !36
  %call177 = tail call i32 @halide_do_loop_task(i8* %78, i32 (i8*, i32, i32, i8*, i8*)* %79, i32 %add175, i32 %iters.1523566, i8* %81, i8* nonnull %65) #15
  %add178 = add nuw nsw i32 %iters.1523566, %total_iters.0537
  %cmp159 = icmp eq i32 %call177, 0
  br i1 %cmp159, label %while.cond161.preheader, label %while.end179, !llvm.loop !81

while.end179:                                     ; preds = %if.end172, %while.end169
  %cmp170568 = phi i1 [ true, %while.end169 ], [ false, %if.end172 ]
  %result.0.lcssa = phi i32 [ 0, %while.end169 ], [ %call177, %if.end172 ]
  %total_iters.0.lcssa = phi i32 [ %total_iters.0537, %while.end169 ], [ %add178, %if.end172 ]
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #15
  %82 = load i32, i32* %min, align 4, !tbaa !31
  %add182 = add nsw i32 %82, %total_iters.0.lcssa
  store i32 %add182, i32* %min, align 4, !tbaa !31
  %83 = load i32, i32* %extent163, align 8, !tbaa !32
  %sub185 = sub nsw i32 %83, %total_iters.0.lcssa
  store i32 %sub185, i32* %extent163, align 8, !tbaa !32
  br i1 %cmp170568, label %if.else190, label %if.end230.thread505

if.end230.thread505:                              ; preds = %while.end179
  store i32 0, i32* %extent163, align 8, !tbaa !32
  br label %if.then238

if.else190:                                       ; preds = %while.end179
  %cmp193 = icmp sgt i32 %sub185, 0
  br i1 %cmp193, label %if.then194, label %if.end271

if.then194:                                       ; preds = %if.else190
  %84 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !66
  store %"struct.Halide::Runtime::Internal::work"* %84, %"struct.Halide::Runtime::Internal::work"** %next_job157, align 8, !tbaa !67
  store %"struct.Halide::Runtime::Internal::work"* %job.1515, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !66
  br label %if.end271

if.else198:                                       ; preds = %if.end152
  %myjob.sroa.0.0..sroa_idx = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 0
  %myjob.sroa.0.0.copyload = load i32 (i8*, i32, i32, i8*, i8*)*, i32 (i8*, i32, i32, i8*, i8*)** %myjob.sroa.0.0..sroa_idx, align 8, !tbaa.struct !82
  %myjob.sroa.4.0..sroa_idx327 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 1
  %myjob.sroa.4.0.copyload = load i8*, i8** %myjob.sroa.4.0..sroa_idx327, align 8, !tbaa.struct !83
  %myjob.sroa.6333.0..sroa_idx334 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 5
  %myjob.sroa.6333.0.copyload = load i32, i32* %myjob.sroa.6333.0..sroa_idx334, align 4
  %myjob.sroa.8340.0..sroa_idx341 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 1
  %myjob.sroa.8340.0.copyload = load i32 (i8*, i32, i8*)*, i32 (i8*, i32, i8*)** %myjob.sroa.8340.0..sroa_idx341, align 8, !tbaa.struct !84
  %myjob.sroa.10347.0..sroa_idx348 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 7
  %myjob.sroa.10347.0.copyload = load i8*, i8** %myjob.sroa.10347.0..sroa_idx348, align 8, !tbaa.struct !85
  %inc201 = add nsw i32 %myjob.sroa.6333.0.copyload, 1
  store i32 %inc201, i32* %myjob.sroa.6333.0..sroa_idx334, align 4, !tbaa !31
  %extent203 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 6
  %85 = load i32, i32* %extent203, align 8, !tbaa !32
  %dec204 = add nsw i32 %85, -1
  store i32 %dec204, i32* %extent203, align 8, !tbaa !32
  %cmp207 = icmp eq i32 %dec204, 0
  br i1 %cmp207, label %if.then208, label %if.end210

if.then208:                                       ; preds = %if.else198
  %next_job209 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 2
  %86 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job209, align 8, !tbaa !67
  store %"struct.Halide::Runtime::Internal::work"* %86, %"struct.Halide::Runtime::Internal::work"** %prev_ptr.1519, align 8, !tbaa !14
  br label %if.end210

if.end210:                                        ; preds = %if.then208, %if.else198
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #15
  %tobool211.not = icmp eq i32 (i8*, i32, i8*)* %myjob.sroa.8340.0.copyload, null
  br i1 %tobool211.not, label %if.else220, label %if.then212

if.then212:                                       ; preds = %if.end210
  %call219 = tail call i32 @halide_do_task(i8* %myjob.sroa.10347.0.copyload, i32 (i8*, i32, i8*)* nonnull %myjob.sroa.8340.0.copyload, i32 %myjob.sroa.6333.0.copyload, i8* %myjob.sroa.4.0.copyload) #15
  br label %if.end230

if.else220:                                       ; preds = %if.end210
  %87 = bitcast %"struct.Halide::Runtime::Internal::work"* %job.1515 to i8*
  %call228 = tail call i32 @halide_do_loop_task(i8* %myjob.sroa.10347.0.copyload, i32 (i8*, i32, i32, i8*, i8*)* %myjob.sroa.0.0.copyload, i32 %myjob.sroa.6333.0.copyload, i32 1, i8* %myjob.sroa.4.0.copyload, i8* %87) #15
  br label %if.end230

if.end230:                                        ; preds = %if.else220, %if.then212
  %result.1 = phi i32 [ %call219, %if.then212 ], [ %call228, %if.else220 ]
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #15
  %cmp237.not = icmp eq i32 %result.1, 0
  br i1 %cmp237.not, label %if.end271, label %if.then238

if.then238:                                       ; preds = %if.end230, %if.end230.thread505
  %result.2510 = phi i32 [ %result.0.lcssa, %if.end230.thread505 ], [ %result.1, %if.end230 ]
  %exit_status239 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 9
  store i32 %result.2510, i32* %exit_status239, align 4, !tbaa !47
  %sibling_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 4
  %88 = load i32, i32* %sibling_count, align 8, !tbaa !45
  %cmp240540 = icmp sgt i32 %88, 0
  br i1 %cmp240540, label %do.end243.lr.ph, label %if.end271

do.end243.lr.ph:                                  ; preds = %if.then238
  %siblings244 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 3
  %89 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %siblings244, align 8, !tbaa !44
  %wide.trip.count = zext i32 %88 to i64
  br label %do.end243

do.end243:                                        ; preds = %for.inc, %do.end243.lr.ph
  %indvars.iv = phi i64 [ 0, %do.end243.lr.ph ], [ %indvars.iv.next, %for.inc ]
  %wake_owners.0541 = phi i8 [ 0, %do.end243.lr.ph ], [ %wake_owners.1, %for.inc ]
  %exit_status245 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %89, i64 %indvars.iv, i32 9
  %90 = load i32, i32* %exit_status245, align 4, !tbaa !47
  %cmp246 = icmp eq i32 %90, 0
  br i1 %cmp246, label %if.then247, label %for.inc

if.then247:                                       ; preds = %do.end243
  store i32 %result.2510, i32* %exit_status245, align 4, !tbaa !47
  %91 = load i32, i32* %active_workers132, align 8, !tbaa !64
  %cmp253 = icmp eq i32 %91, 0
  br i1 %cmp253, label %land.rhs254, label %land.end260

land.rhs254:                                      ; preds = %if.then247
  %owner_is_sleeping258 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %89, i64 %indvars.iv, i32 11
  %92 = load i8, i8* %owner_is_sleeping258, align 4, !tbaa !43, !range !21
  br label %land.end260

land.end260:                                      ; preds = %land.rhs254, %if.then247
  %93 = phi i8 [ 0, %if.then247 ], [ %92, %land.rhs254 ]
  %94 = and i8 %wake_owners.0541, 1
  %or = or i8 %93, %94
  br label %for.inc

for.inc:                                          ; preds = %land.end260, %do.end243
  %wake_owners.1 = phi i8 [ %or, %land.end260 ], [ %wake_owners.0541, %do.end243 ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %if.end271, label %do.end243, !llvm.loop !86

if.end271:                                        ; preds = %for.inc, %if.then238, %if.end230, %if.then194, %if.else190
  %wake_owners.2 = phi i8 [ 0, %if.end230 ], [ 0, %if.else190 ], [ 0, %if.then194 ], [ 0, %if.then238 ], [ %wake_owners.1, %for.inc ]
  %95 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %parent_job134, align 8, !tbaa !46
  %cmp273 = icmp eq %"struct.Halide::Runtime::Internal::work"* %95, null
  %96 = load i32, i32* %min_threads138, align 4, !tbaa !37
  br i1 %cmp273, label %if.then274, label %if.else281

if.then274:                                       ; preds = %if.end271
  %97 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !61
  %sub277 = sub nsw i32 %97, %96
  store i32 %sub277, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !61
  br label %if.end290

if.else281:                                       ; preds = %if.end271
  %threads_reserved285 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %95, i64 0, i32 6
  %98 = load i32, i32* %threads_reserved285, align 8, !tbaa !65
  %sub286 = sub nsw i32 %98, %96
  store i32 %sub286, i32* %threads_reserved285, align 8, !tbaa !65
  br label %if.end290

if.end290:                                        ; preds = %if.else281, %if.then274
  %99 = load i32, i32* %active_workers132, align 8, !tbaa !64
  %dec292 = add nsw i32 %99, -1
  store i32 %dec292, i32* %active_workers132, align 8, !tbaa !64
  %100 = and i8 %wake_owners.2, 1
  %tobool296.not = icmp eq i8 %100, 0
  br i1 %tobool296.not, label %lor.lhs.false297, label %if.then310

lor.lhs.false297:                                 ; preds = %if.end290
  %cmp299 = icmp eq i32 %dec292, 0
  br i1 %cmp299, label %land.lhs.true300, label %while.cond.backedge

land.lhs.true300:                                 ; preds = %lor.lhs.false297
  %extent302 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 6
  %101 = load i32, i32* %extent302, align 8, !tbaa !32
  %cmp303 = icmp eq i32 %101, 0
  br i1 %cmp303, label %land.lhs.true307, label %lor.lhs.false304

lor.lhs.false304:                                 ; preds = %land.lhs.true300
  %exit_status305 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 9
  %102 = load i32, i32* %exit_status305, align 4, !tbaa !47
  %cmp306.not = icmp eq i32 %102, 0
  br i1 %cmp306.not, label %while.cond.backedge, label %land.lhs.true307

land.lhs.true307:                                 ; preds = %lor.lhs.false304, %land.lhs.true300
  %owner_is_sleeping308 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 11
  %103 = load i8, i8* %owner_is_sleeping308, align 4, !tbaa !43, !range !21
  %tobool309.not = icmp eq i8 %103, 0
  br i1 %tobool309.not, label %while.cond.backedge, label %if.then310

if.then310:                                       ; preds = %land.lhs.true307, %if.end290
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10)) #15
  br label %while.cond.backedge

while.cond.backedge:                              ; preds = %if.then310, %land.lhs.true307, %lor.lhs.false304, %lor.lhs.false297, %if.end124, %if.else108, %if.then107, %if.then15, %while.end
  %spin_count.0.be = phi i32 [ %spin_count.0, %while.end ], [ %spin_count.0, %if.then15 ], [ %inc, %if.then107 ], [ %inc, %if.else108 ], [ %spin_count.1, %if.end124 ], [ 0, %if.then310 ], [ 0, %land.lhs.true307 ], [ 0, %lor.lhs.false304 ], [ 0, %lor.lhs.false297 ]
  br label %while.cond, !llvm.loop !87

while.end316:                                     ; preds = %cond.end, %cond.false
  ret void
}

; Function Attrs: nounwind
define weak void @halide_mutex_unlock(%struct.halide_mutex* %mutex) local_unnamed_addr #4 {
entry:
  %control.i.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", align 8
  %state.i = getelementptr %struct.halide_mutex, %struct.halide_mutex* %mutex, i64 0, i32 0, i64 0
  %0 = cmpxchg weak i64* %state.i, i64 1, i64 0 release monotonic
  %1 = extractvalue { i64, i1 } %0, 1
  br i1 %1, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %2 = cmpxchg i64* %state.i, i64 1, i64 0 release monotonic
  %3 = extractvalue { i64, i1 } %2, 1
  br i1 %3, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit, label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i
  %4 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %4) #11
  %5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8, !tbaa !48
  %lock_state2.i.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 1
  store i64* %state.i, i64** %lock_state2.i.i.i, align 8, !tbaa !50
  %6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0
  %7 = ptrtoint %struct.halide_mutex* %mutex to i64
  %call3.i.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control10unpark_oneEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %6, i64 %7) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %4) #11
  br label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit

_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit: ; preds = %if.end.i.i, %if.then.i, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control10unpark_oneEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i64 %addr) local_unnamed_addr #0 align 2 {
entry:
  %call = tail call nonnull align 8 dereferenceable(24) %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* @_ZN6Halide7Runtime8Internal15Synchronization11lock_bucketEy(i64 %addr) #15
  %head = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 1
  %0 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head, align 8, !tbaa !14
  %tail = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 2
  %1 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::parking_control"* %this to i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)***
  %state.i60 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0, i32 0
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0
  br label %while.cond

while.cond:                                       ; preds = %cleanup, %entry
  %data_location.0 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** [ %head, %entry ], [ %data_location.1, %cleanup ]
  %prev.0 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ null, %entry ], [ %prev.1, %cleanup ]
  %data.0 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %0, %entry ], [ %data.1, %cleanup ]
  %retval.0 = phi i64 [ undef, %entry ], [ %retval.1, %cleanup ]
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, null
  br i1 %cmp.not, label %while.end22, label %while.body

while.body:                                       ; preds = %while.cond
  %sleep_address = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 1
  %2 = load atomic i64, i64* %sleep_address monotonic, align 8
  %cmp2 = icmp eq i64 %2, %addr
  %next3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 2
  %3 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next3, align 8, !tbaa !88
  br i1 %cmp2, label %if.then, label %cleanup

if.then:                                          ; preds = %while.body
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %3, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %data_location.0, align 8, !tbaa !14
  %4 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8, !tbaa !93
  %cmp4 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %4, %data.0
  br i1 %cmp4, label %if.then5, label %while.cond7.preheader

while.cond7.preheader:                            ; preds = %if.then
  %cmp872.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %3, null
  br i1 %cmp872.not, label %if.end, label %while.body9

if.then5:                                         ; preds = %if.then
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %prev.0, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8, !tbaa !93
  br label %if.end

while.body9:                                      ; preds = %while.cond7.preheader, %while.body9
  %data2.073 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %6, %while.body9 ], [ %3, %while.cond7.preheader ]
  %sleep_address10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data2.073, i64 0, i32 1
  %5 = load atomic i64, i64* %sleep_address10 monotonic, align 8
  %cmp11 = icmp eq i64 %5, %addr
  %next12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data2.073, i64 0, i32 2
  %6 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next12, align 8, !tbaa !88
  %cmp8 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %6, null
  %7 = or i1 %cmp11, %cmp8
  br i1 %7, label %if.end.loopexit, label %while.body9, !llvm.loop !96

if.end.loopexit:                                  ; preds = %while.body9
  %frombool = zext i1 %cmp11 to i8
  br label %if.end

if.end:                                           ; preds = %if.end.loopexit, %if.then5, %while.cond7.preheader
  %more_waiters.1 = phi i8 [ 0, %if.then5 ], [ 0, %while.cond7.preheader ], [ %frombool, %if.end.loopexit ]
  %tobool13 = icmp ne i8 %more_waiters.1, 0
  %vtable = load i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)**, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*** %1, align 8, !tbaa !48
  %vfn = getelementptr inbounds i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)** %vtable, i64 2
  %8 = load i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)** %vfn, align 8
  %call14 = tail call i64 %8(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i32 1, i1 zeroext %tobool13) #14
  %unpark_info = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 3
  store i64 %call14, i64* %unpark_info, align 8, !tbaa !97
  %mutex.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 0, i32 0
  %call.i = tail call i32 @pthread_mutex_lock(%struct.pthread_mutex_t* nonnull %mutex.i) #14
  %9 = atomicrmw and i64* %state.i60, i64 -2 release
  %and.i61 = and i64 %9, 2
  %cmp.i62 = icmp ne i64 %and.i61, 0
  %cmp3.not.i63 = icmp ult i64 %9, 4
  %or.cond.i64 = or i1 %cmp3.not.i63, %cmp.i62
  br i1 %or.cond.i64, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66, label %if.then.i65

if.then.i65:                                      ; preds = %if.end
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #14
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66

_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66: ; preds = %if.then.i65, %if.end
  %should_park.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 0, i32 2
  store i8 0, i8* %should_park.i, align 8, !tbaa !98
  %condvar.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 0, i32 1
  %call.i67 = tail call i32 @pthread_cond_signal(%struct.pthread_mutex_t* nonnull %condvar.i) #14
  %call.i69 = tail call i32 @pthread_mutex_unlock(%struct.pthread_mutex_t* nonnull %mutex.i) #14
  %10 = zext i8 %more_waiters.1 to i64
  br label %cleanup

cleanup:                                          ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66, %while.body
  %data_location.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** [ %data_location.0, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66 ], [ %next3, %while.body ]
  %prev.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %prev.0, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66 ], [ %data.0, %while.body ]
  %data.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %data.0, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66 ], [ %3, %while.body ]
  %retval.1 = phi i64 [ %10, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66 ], [ %retval.0, %while.body ]
  br i1 %cmp2, label %cleanup27, label %while.cond, !llvm.loop !99

while.end22:                                      ; preds = %while.cond
  %vtable23 = load i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)**, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*** %1, align 8, !tbaa !48
  %vfn24 = getelementptr inbounds i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)** %vtable23, i64 2
  %11 = load i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)** %vfn24, align 8
  %call25 = tail call i64 %11(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i32 0, i1 zeroext false) #14
  %12 = atomicrmw and i64* %state.i60, i64 -2 release
  %and.i = and i64 %12, 2
  %cmp.i = icmp ne i64 %and.i, 0
  %cmp3.not.i = icmp ult i64 %12, 4
  %or.cond.i = or i1 %cmp3.not.i, %cmp.i
  br i1 %or.cond.i, label %cleanup27, label %if.then.i

if.then.i:                                        ; preds = %while.end22
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #14
  br label %cleanup27

cleanup27:                                        ; preds = %cleanup, %if.then.i, %while.end22
  %retval.2 = phi i64 [ 0, %while.end22 ], [ 0, %if.then.i ], [ %retval.1, %cleanup ]
  ret i64 %retval.2
}

; Function Attrs: nounwind mustprogress
define linkonce nonnull align 8 dereferenceable(24) %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* @_ZN6Halide7Runtime8Internal15Synchronization11lock_bucketEy(i64 %addr) local_unnamed_addr #0 {
entry:
  %mul.i = mul i64 %addr, -7046029254386353131
  %shr.i = lshr i64 %mul.i, 54
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i
  %state.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx, i64 0, i32 0, i32 0
  %0 = cmpxchg weak i64* %state.i, i64 0, i64 1 acquire monotonic
  %1 = extractvalue { i64, i1 } %0, 1
  br i1 %1, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #14
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit

_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit: ; preds = %if.then.i, %entry
  ret %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx
}

declare i32 @pthread_mutex_lock(%struct.pthread_mutex_t*) local_unnamed_addr #1

; Function Attrs: nounwind
define linkonce void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %this) local_unnamed_addr #4 align 2 {
entry:
  %state = getelementptr inbounds %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %this, i64 0, i32 0
  %0 = load atomic i64, i64* %state monotonic, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %expected.0 = phi i64 [ %0, %entry ], [ %3, %if.end ]
  %and = and i64 %expected.0, 2
  %tobool.not = icmp ne i64 %and, 0
  %cmp = icmp ult i64 %expected.0, 4
  %or.cond = or i1 %cmp, %tobool.not
  br i1 %or.cond, label %cleanup75, label %if.end

if.end:                                           ; preds = %while.cond
  %or = or i64 %expected.0, 2
  %1 = cmpxchg weak i64* %state, i64 %expected.0, i64 %or acquire monotonic
  %2 = extractvalue { i64, i1 } %1, 1
  %3 = extractvalue { i64, i1 } %1, 0
  br i1 %2, label %while.cond11, label %while.cond

while.cond11:                                     ; preds = %if.end, %cleanup70
  %.pn.pn = phi { i64, i1 } [ %.pn, %cleanup70 ], [ %1, %if.end ]
  %expected.3 = extractvalue { i64, i1 } %.pn.pn, 0
  %and13 = and i64 %expected.3, -4
  %4 = inttoptr i64 %and13 to %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*
  %tail14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %4, i64 0, i32 3
  %tail.0143 = load %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail14, align 8, !tbaa !100
  %cmp16144 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0143, null
  br i1 %cmp16144, label %while.body17, label %while.end23

while.body17:                                     ; preds = %while.cond11, %do.end
  %current.0145 = phi %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* [ %5, %do.end ], [ %4, %while.cond11 ]
  %next18 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %current.0145, i64 0, i32 1
  %5 = load %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %next18, align 8, !tbaa !102
  %cmp19.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %5, null
  br i1 %cmp19.not, label %if.then20, label %do.end

if.then20:                                        ; preds = %while.body17
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([130 x i8], [130 x i8]* @.str.5, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %do.end

do.end:                                           ; preds = %if.then20, %while.body17
  %prev = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %5, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %current.0145, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %prev, align 8, !tbaa !103
  %tail22 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %5, i64 0, i32 3
  %tail.0 = load %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail22, align 8, !tbaa !100
  %cmp16 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0, null
  br i1 %cmp16, label %while.body17, label %while.end23, !llvm.loop !104

while.end23:                                      ; preds = %do.end, %while.cond11
  %tail.0.lcssa = phi %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* [ %tail.0143, %while.cond11 ], [ %tail.0, %do.end ]
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0.lcssa, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail14, align 8, !tbaa !100
  %and25 = and i64 %expected.3, 1
  %tobool26.not = icmp eq i64 %and25, 0
  br i1 %tobool26.not, label %if.end35, label %if.then27

if.then27:                                        ; preds = %while.end23
  %and29 = and i64 %expected.3, -3
  %6 = cmpxchg weak i64* %state, i64 %expected.3, i64 %and29 acq_rel monotonic
  %7 = extractvalue { i64, i1 } %6, 1
  br i1 %7, label %cleanup75, label %cleanup70

if.end35:                                         ; preds = %while.end23
  %prev36 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0.lcssa, i64 0, i32 2
  %8 = load %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %prev36, align 8, !tbaa !103
  %cmp37 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %8, null
  br i1 %cmp37, label %while.body41, label %if.else62

while.body41:                                     ; preds = %if.end35, %if.end47
  %expected.5146 = phi i64 [ %11, %if.end47 ], [ %expected.3, %if.end35 ]
  %and43 = and i64 %expected.5146, 1
  %9 = cmpxchg weak i64* %state, i64 %expected.5146, i64 %and43 acq_rel monotonic
  %10 = extractvalue { i64, i1 } %9, 1
  br i1 %10, label %if.end66, label %if.end47

if.end47:                                         ; preds = %while.body41
  %11 = extractvalue { i64, i1 } %9, 0
  %cmp49 = icmp ult i64 %11, 4
  br i1 %cmp49, label %while.body41, label %cleanup70, !llvm.loop !105

if.else62:                                        ; preds = %if.end35
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %8, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail14, align 8, !tbaa !100
  %12 = atomicrmw and i64* %state, i64 -3 release
  br label %if.end66

if.end66:                                         ; preds = %while.body41, %if.else62
  %mutex.i103 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0.lcssa, i64 0, i32 0, i32 0
  %call.i104 = tail call i32 @pthread_mutex_lock(%struct.pthread_mutex_t* nonnull %mutex.i103) #14
  %should_park.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0.lcssa, i64 0, i32 0, i32 2
  store i8 0, i8* %should_park.i, align 8, !tbaa !98
  %condvar.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0.lcssa, i64 0, i32 0, i32 1
  %call.i101 = tail call i32 @pthread_cond_signal(%struct.pthread_mutex_t* nonnull %condvar.i) #14
  %call.i = tail call i32 @pthread_mutex_unlock(%struct.pthread_mutex_t* nonnull %mutex.i103) #14
  br label %cleanup75

cleanup70:                                        ; preds = %if.end47, %if.then27
  %.pn = phi { i64, i1 } [ %6, %if.then27 ], [ %9, %if.end47 ]
  fence acquire
  br label %while.cond11

cleanup75:                                        ; preds = %while.cond, %if.then27, %if.end66
  ret void
}

declare i32 @pthread_cond_signal(%struct.pthread_mutex_t*) local_unnamed_addr #1

declare i32 @pthread_mutex_unlock(%struct.pthread_mutex_t*) local_unnamed_addr #1

; Function Attrs: nounwind
define linkonce void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %this) local_unnamed_addr #4 align 2 {
entry:
  %node = alloca %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", align 8
  %state = getelementptr inbounds %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %this, i64 0, i32 0
  %0 = load atomic i64, i64* %state monotonic, align 8
  %1 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node to i8*
  %should_park.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, i64 0, i32 0, i32 2
  %mutex2.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, i64 0, i32 0, i32 0
  %condvar3.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, i64 0, i32 0, i32 1
  %next.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, i64 0, i32 1
  %tail.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, i64 0, i32 3
  %2 = ptrtoint %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node to i64
  %3 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %next.i to <2 x %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*>*
  br label %while.cond.outer

while.cond.outer:                                 ; preds = %while.cond.outer.backedge, %entry
  %expected.0.ph = phi i64 [ %0, %entry ], [ %expected.0.ph.be, %while.cond.outer.backedge ]
  %spinner.sroa.0.0.ph = phi i32 [ 40, %entry ], [ %spinner.sroa.0.0.ph.be, %while.cond.outer.backedge ]
  %and46 = and i64 %expected.0.ph, 1
  %tobool.not47 = icmp eq i64 %and46, 0
  br i1 %tobool.not47, label %if.then, label %if.end4

if.then:                                          ; preds = %while.cond.outer, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit
  %expected.048 = phi i64 [ %6, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit ], [ %expected.0.ph, %while.cond.outer ]
  %or = or i64 %expected.048, 1
  %4 = cmpxchg weak i64* %state, i64 %expected.048, i64 %or acquire monotonic
  %5 = extractvalue { i64, i1 } %4, 1
  br i1 %5, label %cleanup23, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit: ; preds = %if.then
  %6 = extractvalue { i64, i1 } %4, 0
  %and = and i64 %6, 1
  %tobool.not = icmp eq i64 %and, 0
  br i1 %tobool.not, label %if.then, label %if.end4.loopexit

if.end4.loopexit:                                 ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit
  %7 = extractvalue { i64, i1 } %4, 0
  br label %if.end4

if.end4:                                          ; preds = %if.end4.loopexit, %while.cond.outer
  %expected.0.lcssa = phi i64 [ %expected.0.ph, %while.cond.outer ], [ %7, %if.end4.loopexit ]
  %cmp.not = icmp ugt i64 %expected.0.lcssa, 3
  %cmp.i = icmp sgt i32 %spinner.sroa.0.0.ph, 0
  %or.cond = and i1 %cmp.i, %cmp.not
  br i1 %or.cond, label %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit, label %if.end9

_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit: ; preds = %if.end4
  %cmp4.i = icmp sgt i32 %spinner.sroa.0.0.ph, 1
  br i1 %cmp4.i, label %if.then7, label %if.end9

if.then7:                                         ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit
  %dec.i = add nsw i32 %spinner.sroa.0.0.ph, -1
  call void @halide_thread_yield() #14
  %8 = load atomic i64, i64* %state monotonic, align 8
  br label %while.cond.outer.backedge

if.end9:                                          ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit, %if.end4
  %spinner.sroa.0.2 = phi i32 [ %spinner.sroa.0.0.ph, %if.end4 ], [ 0, %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit ]
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %1) #11
  store i8 0, i8* %should_park.i.i, align 8, !tbaa !98
  %call.i.i29 = call i32 @pthread_mutex_init(%struct.pthread_mutex_t* nonnull %mutex2.i.i, i8* null) #14
  %call4.i.i = call i32 @pthread_cond_init(%struct.pthread_mutex_t* nonnull %condvar3.i.i, i8* null) #14
  store <2 x %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*> zeroinitializer, <2 x %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*>* %3, align 8, !tbaa !14
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* null, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail.i, align 8, !tbaa !100
  store i8 1, i8* %should_park.i.i, align 8, !tbaa !98
  %and10 = and i64 %expected.0.lcssa, -4
  %cmp11 = icmp eq i64 %and10, 0
  br i1 %cmp11, label %if.then12, label %if.else

if.then12:                                        ; preds = %if.end9
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail.i, align 8, !tbaa !100
  br label %if.end13

if.else:                                          ; preds = %if.end9
  %9 = inttoptr i64 %and10 to %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %9, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %next.i, align 8, !tbaa !102
  br label %if.end13

if.end13:                                         ; preds = %if.else, %if.then12
  %and15 = and i64 %expected.0.lcssa, 3
  %or16 = or i64 %and15, %2
  %10 = cmpxchg weak i64* %state, i64 %expected.0.lcssa, i64 %or16 release monotonic
  %11 = extractvalue { i64, i1 } %10, 1
  br i1 %11, label %if.then19, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_release_relaxedEPyS4_S4_.exit

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_release_relaxedEPyS4_S4_.exit: ; preds = %if.end13
  %12 = extractvalue { i64, i1 } %10, 0
  br label %if.end22

if.then19:                                        ; preds = %if.end13
  %call.i = call i32 @pthread_mutex_lock(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #14
  %13 = load i8, i8* %should_park.i.i, align 8, !tbaa !98, !range !21
  %tobool.not6.i = icmp eq i8 %13, 0
  br i1 %tobool.not6.i, label %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, label %while.body.i

while.body.i:                                     ; preds = %if.then19, %while.body.i
  %call3.i = call i32 @pthread_cond_wait(%struct.pthread_mutex_t* nonnull %condvar3.i.i, %struct.pthread_mutex_t* nonnull %mutex2.i.i) #14
  %14 = load i8, i8* %should_park.i.i, align 8, !tbaa !98, !range !21
  %tobool.not.i = icmp eq i8 %14, 0
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, label %while.body.i, !llvm.loop !106

_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit: ; preds = %while.body.i, %if.then19
  %call5.i = call i32 @pthread_mutex_unlock(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #14
  %15 = load atomic i64, i64* %state monotonic, align 8
  br label %if.end22

if.end22:                                         ; preds = %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_release_relaxedEPyS4_S4_.exit
  %expected.3 = phi i64 [ %15, %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit ], [ %12, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_release_relaxedEPyS4_S4_.exit ]
  %spinner.sroa.0.3 = phi i32 [ 40, %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit ], [ %spinner.sroa.0.2, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_release_relaxedEPyS4_S4_.exit ]
  %call.i.i = call i32 @pthread_cond_destroy(%struct.pthread_mutex_t* nonnull %condvar3.i.i) #14
  %call2.i.i = call i32 @pthread_mutex_destroy(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #14
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %1) #11
  br label %while.cond.outer.backedge

while.cond.outer.backedge:                        ; preds = %if.end22, %if.then7
  %expected.0.ph.be = phi i64 [ %8, %if.then7 ], [ %expected.3, %if.end22 ]
  %spinner.sroa.0.0.ph.be = phi i32 [ %dec.i, %if.then7 ], [ %spinner.sroa.0.3, %if.end22 ]
  br label %while.cond.outer

cleanup23:                                        ; preds = %if.then
  ret void
}

declare i32 @pthread_mutex_init(%struct.pthread_mutex_t*, i8*) local_unnamed_addr #1

declare i32 @pthread_cond_init(%struct.pthread_mutex_t*, i8*) local_unnamed_addr #1

declare i32 @pthread_cond_wait(%struct.pthread_mutex_t*, %struct.pthread_mutex_t*) local_unnamed_addr #1

declare i32 @pthread_cond_destroy(%struct.pthread_mutex_t*) local_unnamed_addr #1

declare i32 @pthread_mutex_destroy(%struct.pthread_mutex_t*) local_unnamed_addr #1

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr zeroext i1 @_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control8validateERNS2_15validate_actionE(%"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* nonnull dereferenceable(16) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) unnamed_addr #2 align 2 {
entry:
  %lock_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %this, i64 0, i32 1
  %0 = load i64*, i64** %lock_state, align 8, !tbaa !50
  %1 = load atomic i64, i64* %0 monotonic, align 8
  %cmp = icmp eq i64 %1, 3
  ret i1 %cmp
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr void @_ZN6Halide7Runtime8Internal15Synchronization15parking_control12before_sleepEv(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this) unnamed_addr #2 align 2 {
entry:
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr i64 @_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control6unparkEib(%"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* nonnull dereferenceable(16) %this, i32 %unparked, i1 zeroext %more_waiters) unnamed_addr #2 align 2 {
entry:
  %0 = select i1 %more_waiters, i64 2, i64 0
  %lock_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %this, i64 0, i32 1
  %1 = load i64*, i64** %lock_state, align 8, !tbaa !50
  store atomic i64 %0, i64* %1 release, align 8
  ret i64 0
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr void @_ZN6Halide7Runtime8Internal15Synchronization15parking_control16requeue_callbackERKNS2_15validate_actionEbb(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action, i1 zeroext %one_to_wake, i1 zeroext %some_requeued) unnamed_addr #2 align 2 {
entry:
  ret void
}

; Function Attrs: nounwind
define weak void @halide_cond_broadcast(%struct.halide_mutex* %cond) local_unnamed_addr #4 {
entry:
  %control.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", align 8
  %state.i = getelementptr %struct.halide_mutex, %struct.halide_mutex* %cond, i64 0, i32 0, i64 0
  %0 = load atomic i64, i64* %state.i monotonic, align 8
  %cmp.i = icmp eq i64 %0, 0
  br i1 %cmp.i, label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond9broadcastEv.exit, label %if.end.i

if.end.i:                                         ; preds = %entry
  %1 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1) #11
  %2 = inttoptr i64 %0 to %"class.Halide::Runtime::Internal::Synchronization::word_lock"*
  %3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization25broadcast_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8, !tbaa !48
  %cond_state2.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 1
  store i64* %state.i, i64** %cond_state2.i.i, align 8, !tbaa !107
  %mutex3.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 2
  store %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %2, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex3.i.i, align 8, !tbaa !109
  %4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0
  %5 = ptrtoint %struct.halide_mutex* %cond to i64
  %call.i = call i32 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control14unpark_requeueEyyy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %4, i64 %5, i64 %0, i64 0) #14
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1) #11
  br label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond9broadcastEv.exit

_ZN6Halide7Runtime8Internal15Synchronization9fast_cond9broadcastEv.exit: ; preds = %if.end.i, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define weak zeroext i1 @halide_default_semaphore_try_acquire(%struct.halide_semaphore_t* %s, i32 %n) #0 {
entry:
  %cmp = icmp eq i32 %n, 0
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %value = bitcast %struct.halide_semaphore_t* %s to i32*
  %0 = load atomic i32, i32* %value acquire, align 4
  %sub12 = sub nsw i32 %0, %n
  %cmp113 = icmp sgt i32 %sub12, -1
  br i1 %cmp113, label %land.rhs, label %return

land.rhs:                                         ; preds = %if.end, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit
  %sub15 = phi i32 [ %sub, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit ], [ %sub12, %if.end ]
  %expected.014 = phi i32 [ %3, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit ], [ %0, %if.end ]
  %1 = cmpxchg weak i32* %value, i32 %expected.014, i32 %sub15 acq_rel monotonic
  %2 = extractvalue { i32, i1 } %1, 1
  br i1 %2, label %return.loopexit, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit: ; preds = %land.rhs
  %3 = extractvalue { i32, i1 } %1, 0
  %sub = sub nsw i32 %3, %n
  %cmp1 = icmp sgt i32 %sub, -1
  br i1 %cmp1, label %land.rhs, label %return.loopexit

return.loopexit:                                  ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit, %land.rhs
  %4 = extractvalue { i32, i1 } %1, 1
  br label %return

return:                                           ; preds = %return.loopexit, %if.end, %entry
  %retval.0 = phi i1 [ true, %entry ], [ false, %if.end ], [ %4, %return.loopexit ]
  ret i1 %retval.0
}

; Function Attrs: nounwind
define weak void @halide_cond_wait(%struct.halide_mutex* %cond, %struct.halide_mutex* %mutex) local_unnamed_addr #4 {
entry:
  %control.i.i.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", align 8
  %control.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", align 8
  %0 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %0) #11
  %state.i = getelementptr %struct.halide_mutex, %struct.halide_mutex* %cond, i64 0, i32 0, i64 0
  %1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization20wait_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %1, align 8, !tbaa !48
  %cond_state2.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 1
  store i64* %state.i, i64** %cond_state2.i.i, align 8, !tbaa !110
  %mutex3.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 2
  %2 = bitcast %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex3.i.i to %struct.halide_mutex**
  store %struct.halide_mutex* %mutex, %struct.halide_mutex** %2, align 8, !tbaa !112
  %3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0
  %4 = ptrtoint %struct.halide_mutex* %cond to i64
  %call.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control4parkEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %3, i64 %4) #14
  %5 = ptrtoint %struct.halide_mutex* %mutex to i64
  %cmp.not.i = icmp eq i64 %call.i, %5
  %6 = getelementptr %struct.halide_mutex, %struct.halide_mutex* %mutex, i64 0, i32 0, i64 0
  br i1 %cmp.not.i, label %if.else.i, label %if.then.i

if.then.i:                                        ; preds = %entry
  %7 = cmpxchg weak i64* %6, i64 0, i64 1 acquire monotonic
  %8 = extractvalue { i64, i1 } %7, 1
  br i1 %8, label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit, label %if.then.i.i

if.then.i.i:                                      ; preds = %if.then.i
  %9 = load atomic i64, i64* %6 monotonic, align 8
  %10 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i.i to i8*
  %11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i.i, i64 0, i32 0, i32 0
  %lock_state2.i.i.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i.i, i64 0, i32 1
  %12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i.i, i64 0, i32 0
  br label %while.cond.outer.i.i.i

while.cond.outer.i.i.i:                           ; preds = %while.cond.outer.i.i.i.backedge, %if.then.i.i
  %expected.0.ph.i.i.i = phi i64 [ %9, %if.then.i.i ], [ %expected.0.ph.i.i.i.be, %while.cond.outer.i.i.i.backedge ]
  %spinner.sroa.0.0.ph.i.i.i = phi i32 [ 40, %if.then.i.i ], [ %spinner.sroa.0.0.ph.i.i.i.be, %while.cond.outer.i.i.i.backedge ]
  %and55.i.i.i = and i64 %expected.0.ph.i.i.i, 1
  %tobool.not56.i.i.i = icmp eq i64 %and55.i.i.i, 0
  br i1 %tobool.not56.i.i.i, label %if.then.i.i.i, label %if.end4.i.i.i

if.then.i.i.i:                                    ; preds = %while.cond.outer.i.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i.i
  %expected.057.i.i.i = phi i64 [ %15, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i.i ], [ %expected.0.ph.i.i.i, %while.cond.outer.i.i.i ]
  %or.i.i.i = or i64 %expected.057.i.i.i, 1
  %13 = cmpxchg weak i64* %6, i64 %expected.057.i.i.i, i64 %or.i.i.i acquire monotonic
  %14 = extractvalue { i64, i1 } %13, 1
  br i1 %14, label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i.i

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i.i: ; preds = %if.then.i.i.i
  %15 = extractvalue { i64, i1 } %13, 0
  %and.i.i.i = and i64 %15, 1
  %tobool.not.i.i.i = icmp eq i64 %and.i.i.i, 0
  br i1 %tobool.not.i.i.i, label %if.then.i.i.i, label %if.end4.i.i.i.loopexit

if.end4.i.i.i.loopexit:                           ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i.i
  %16 = extractvalue { i64, i1 } %13, 0
  br label %if.end4.i.i.i

if.end4.i.i.i:                                    ; preds = %if.end4.i.i.i.loopexit, %while.cond.outer.i.i.i
  %expected.0.lcssa.i.i.i = phi i64 [ %expected.0.ph.i.i.i, %while.cond.outer.i.i.i ], [ %16, %if.end4.i.i.i.loopexit ]
  %cmp.i.i.i.i = icmp sgt i32 %spinner.sroa.0.0.ph.i.i.i, 0
  br i1 %cmp.i.i.i.i, label %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i.i, label %if.end8.i.i.i

_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i.i: ; preds = %if.end4.i.i.i
  %cmp4.i.not.i.i.i = icmp eq i32 %spinner.sroa.0.0.ph.i.i.i, 1
  br i1 %cmp4.i.not.i.i.i, label %if.end8.i.i.i, label %if.then6.i.i.i

if.then6.i.i.i:                                   ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i.i
  %dec.i.i.i.i = add nsw i32 %spinner.sroa.0.0.ph.i.i.i, -1
  call void @halide_thread_yield() #14
  %17 = load atomic i64, i64* %6 monotonic, align 8
  br label %while.cond.outer.i.i.i.backedge

if.end8.i.i.i:                                    ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i.i, %if.end4.i.i.i
  %spinner.sroa.0.152.i.i.i = phi i32 [ 0, %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i.i ], [ %spinner.sroa.0.0.ph.i.i.i, %if.end4.i.i.i ]
  %and9.i.i.i = and i64 %expected.0.lcssa.i.i.i, 2
  %cmp.i.i.i = icmp eq i64 %and9.i.i.i, 0
  br i1 %cmp.i.i.i, label %if.then10.i.i.i, label %if.end19.i.i.i

if.then10.i.i.i:                                  ; preds = %if.end8.i.i.i
  %or12.i.i.i = or i64 %expected.0.lcssa.i.i.i, 2
  %18 = cmpxchg weak i64* %6, i64 %expected.0.lcssa.i.i.i, i64 %or12.i.i.i monotonic monotonic
  %19 = extractvalue { i64, i1 } %18, 1
  br i1 %19, label %if.end19.i.i.i, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i.i

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i.i: ; preds = %if.then10.i.i.i
  %20 = extractvalue { i64, i1 } %18, 0
  br label %while.cond.outer.i.i.i.backedge

if.end19.i.i.i:                                   ; preds = %if.then10.i.i.i, %if.end8.i.i.i
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %10) #11
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %11, align 8, !tbaa !48
  store i64* %6, i64** %lock_state2.i.i.i.i, align 8, !tbaa !50
  %call21.i.i.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control4parkEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %12, i64 %5) #14
  %cmp22.i.i.i = icmp eq i64 %call21.i.i.i, %5
  br i1 %cmp22.i.i.i, label %cleanup30.critedge.i.i.i, label %if.end24.i.i.i

if.end24.i.i.i:                                   ; preds = %if.end19.i.i.i
  %21 = load atomic i64, i64* %6 monotonic, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %10) #11
  br label %while.cond.outer.i.i.i.backedge

while.cond.outer.i.i.i.backedge:                  ; preds = %if.end24.i.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i.i, %if.then6.i.i.i
  %expected.0.ph.i.i.i.be = phi i64 [ %20, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i.i ], [ %21, %if.end24.i.i.i ], [ %17, %if.then6.i.i.i ]
  %spinner.sroa.0.0.ph.i.i.i.be = phi i32 [ %spinner.sroa.0.152.i.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i.i ], [ 40, %if.end24.i.i.i ], [ %dec.i.i.i.i, %if.then6.i.i.i ]
  br label %while.cond.outer.i.i.i

cleanup30.critedge.i.i.i:                         ; preds = %if.end19.i.i.i
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %10) #11
  br label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit

if.else.i:                                        ; preds = %entry
  %22 = load atomic i64, i64* %6 monotonic, align 8
  %and.i = and i64 %22, 1
  %tobool.not.i = icmp eq i64 %and.i, 0
  br i1 %tobool.not.i, label %if.then2.i, label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit

if.then2.i:                                       ; preds = %if.else.i
  call void @halide_print(i8* null, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @.str.5.6, i64 0, i64 0)) #14
  call void @abort() #14
  br label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit

_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit: ; preds = %if.then.i.i.i, %if.then2.i, %if.else.i, %cleanup30.critedge.i.i.i, %if.then.i
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_loop_task(i8* %user_context, i32 (i8*, i32, i32, i8*, i8*)* %f, i32 %min, i32 %size, i8* %closure, i8* %task_parent) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)*, i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)** @_ZN6Halide7Runtime8Internal19custom_do_loop_taskE, align 8, !tbaa !14
  %call = tail call i32 %0(i8* %user_context, i32 (i8*, i32, i32, i8*, i8*)* %f, i32 %min, i32 %size, i8* %closure, i8* %task_parent) #14
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_task(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %idx, i8* %closure) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 8, !tbaa !14
  %call = tail call i32 %0(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %idx, i8* %closure) #14
  ret i32 %call
}

; Function Attrs: nounwind
define linkonce i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control4parkEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i64 %addr) local_unnamed_addr #4 align 2 {
entry:
  %queue_data = alloca %"struct.Halide::Runtime::Internal::Synchronization::queue_data", align 8
  %action = alloca %"struct.Halide::Runtime::Internal::Synchronization::validate_action", align 8
  %0 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %0) #11
  %should_park.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 0, i32 2
  store i8 0, i8* %should_park.i.i, align 8, !tbaa !98
  %mutex2.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 0, i32 0
  %call.i.i = call i32 @pthread_mutex_init(%struct.pthread_mutex_t* nonnull %mutex2.i.i, i8* null) #14
  %condvar3.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 0, i32 1
  %call4.i.i = call i32 @pthread_cond_init(%struct.pthread_mutex_t* nonnull %condvar3.i.i, i8* null) #14
  %sleep_address.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 1
  store i64 0, i64* %sleep_address.i, align 8, !tbaa !113
  %next.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* null, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next.i, align 8, !tbaa !88
  %unpark_info.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 3
  store i64 0, i64* %unpark_info.i, align 8, !tbaa !97
  %call = call nonnull align 8 dereferenceable(24) %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* @_ZN6Halide7Runtime8Internal15Synchronization11lock_bucketEy(i64 %addr) #15
  %1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1) #11
  store i8 0, i8* %1, align 8, !tbaa !114
  %invalid_unpark_info.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 2
  store i64 0, i64* %invalid_unpark_info.i, align 8, !tbaa !116
  %2 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::parking_control"* %this to i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)***
  %vtable = load i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)**, i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)*** %2, align 8, !tbaa !48
  %3 = load i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)*, i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)** %vtable, align 8
  %call2 = call zeroext i1 %3(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) #14
  br i1 %call2, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %state.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0, i32 0
  %4 = atomicrmw and i64* %state.i, i64 -2 release
  %and.i = and i64 %4, 2
  %cmp.i = icmp ne i64 %and.i, 0
  %cmp3.not.i = icmp ult i64 %4, 4
  %or.cond.i = or i1 %cmp3.not.i, %cmp.i
  br i1 %or.cond.i, label %cleanup, label %if.then.i

if.then.i:                                        ; preds = %if.then
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0
  call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #14
  br label %cleanup

if.end:                                           ; preds = %entry
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* null, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next.i, align 8, !tbaa !88
  store i64 %addr, i64* %sleep_address.i, align 8, !tbaa !113
  store i8 1, i8* %should_park.i.i, align 8, !tbaa !98
  %head = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 1
  %5 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head, align 8, !tbaa !117
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %5, null
  %tail = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 2
  %6 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8
  %next4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %6, i64 0, i32 2
  %head.sink = select i1 %cmp.not, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next4
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head.sink, align 8, !tbaa !14
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8, !tbaa !93
  %state.i23 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0, i32 0
  %7 = atomicrmw and i64* %state.i23, i64 -2 release
  %and.i24 = and i64 %7, 2
  %cmp.i25 = icmp ne i64 %and.i24, 0
  %cmp3.not.i26 = icmp ult i64 %7, 4
  %or.cond.i27 = or i1 %cmp3.not.i26, %cmp.i25
  br i1 %or.cond.i27, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit29, label %if.then.i28

if.then.i28:                                      ; preds = %if.end
  %mutex8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0
  call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex8) #14
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit29

_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit29: ; preds = %if.then.i28, %if.end
  %8 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::parking_control"* %this to void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)***
  %vtable9 = load void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)**, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)*** %8, align 8, !tbaa !48
  %vfn10 = getelementptr inbounds void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)*, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)** %vtable9, i64 1
  %9 = load void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)*, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)** %vfn10, align 8
  call void %9(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this) #14
  %call.i = call i32 @pthread_mutex_lock(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #14
  %10 = load i8, i8* %should_park.i.i, align 8, !tbaa !98, !range !21
  %tobool.not6.i = icmp eq i8 %10, 0
  br i1 %tobool.not6.i, label %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, label %while.body.i

while.body.i:                                     ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit29, %while.body.i
  %call3.i = call i32 @pthread_cond_wait(%struct.pthread_mutex_t* nonnull %condvar3.i.i, %struct.pthread_mutex_t* nonnull %mutex2.i.i) #14
  %11 = load i8, i8* %should_park.i.i, align 8, !tbaa !98, !range !21
  %tobool.not.i = icmp eq i8 %11, 0
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, label %while.body.i, !llvm.loop !106

_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit: ; preds = %while.body.i, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit29
  %call5.i = call i32 @pthread_mutex_unlock(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #14
  br label %cleanup

cleanup:                                          ; preds = %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, %if.then.i, %if.then
  %unpark_info.i.sink = phi i64* [ %unpark_info.i, %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit ], [ %invalid_unpark_info.i, %if.then ], [ %invalid_unpark_info.i, %if.then.i ]
  %12 = load i64, i64* %unpark_info.i.sink, align 8, !tbaa !22
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1) #11
  %call.i.i22 = call i32 @pthread_cond_destroy(%struct.pthread_mutex_t* nonnull %condvar3.i.i) #14
  %call2.i.i = call i32 @pthread_mutex_destroy(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #14
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %0) #11
  ret i64 %12
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr zeroext i1 @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control8validateERNS2_15validate_actionE(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) unnamed_addr #2 align 2 {
entry:
  %cond_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 1
  %0 = load i64*, i64** %cond_state, align 8, !tbaa !110
  %1 = load atomic i64, i64* %0 monotonic, align 8
  %cmp = icmp eq i64 %1, 0
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 2
  %2 = load %"class.Halide::Runtime::Internal::Synchronization::word_lock"*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex, align 8, !tbaa !112
  %3 = ptrtoint %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %2 to i64
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store atomic i64 %3, i64* %0 monotonic, align 8
  br label %cleanup

if.else:                                          ; preds = %entry
  %cmp4.not = icmp eq i64 %1, %3
  br i1 %cmp4.not, label %cleanup, label %if.then5

if.then5:                                         ; preds = %if.else
  %invalid_unpark_info = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 2
  store i64 %3, i64* %invalid_unpark_info, align 8, !tbaa !116
  br label %cleanup

cleanup:                                          ; preds = %if.then5, %if.else, %if.then
  %retval.0 = phi i1 [ false, %if.then5 ], [ true, %if.else ], [ true, %if.then ]
  ret i1 %retval.0
}

; Function Attrs: nounwind
define linkonce_odr void @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control12before_sleepEv(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this) unnamed_addr #4 align 2 {
entry:
  %control.i.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", align 8
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 2
  %0 = load %"class.Halide::Runtime::Internal::Synchronization::word_lock"*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex, align 8, !tbaa !112
  %state.i = getelementptr inbounds %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %0, i64 0, i32 0
  %1 = cmpxchg weak i64* %state.i, i64 1, i64 0 release monotonic
  %2 = extractvalue { i64, i1 } %1, 1
  br i1 %2, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %3 = cmpxchg i64* %state.i, i64 1, i64 0 release monotonic
  %4 = extractvalue { i64, i1 } %3, 1
  br i1 %4, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit, label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i
  %5 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %5) #11
  %6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %6, align 8, !tbaa !48
  %lock_state2.i.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 1
  store i64* %state.i, i64** %lock_state2.i.i.i, align 8, !tbaa !50
  %7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0
  %8 = ptrtoint %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %0 to i64
  %call3.i.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control10unpark_oneEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %7, i64 %8) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %5) #11
  br label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit

_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit: ; preds = %if.end.i.i, %if.then.i, %entry
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr i64 @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control6unparkEib(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this, i32 %unparked, i1 zeroext %more_waiters) unnamed_addr #2 align 2 {
entry:
  br i1 %more_waiters, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %cond_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 1
  %0 = load i64*, i64** %cond_state, align 8, !tbaa !110
  store atomic i64 0, i64* %0 monotonic, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i64 0
}

; Function Attrs: nounwind
define linkonce i32 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control14unpark_requeueEyyy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i64 %addr_from, i64 %addr_to, i64 %unpark_info) local_unnamed_addr #4 align 2 {
entry:
  %buckets = alloca %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", align 8
  %action = alloca %"struct.Halide::Runtime::Internal::Synchronization::validate_action", align 8
  %0 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %buckets to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %0) #11
  call void @_ZN6Halide7Runtime8Internal15Synchronization16lock_bucket_pairEyy(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* nonnull sret(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair") align 8 %buckets, i64 %addr_from, i64 %addr_to) #15
  %1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1) #11
  store i8 0, i8* %1, align 8, !tbaa !114
  %invalid_unpark_info.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 2
  store i64 0, i64* %invalid_unpark_info.i, align 8, !tbaa !116
  %2 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::parking_control"* %this to i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)***
  %vtable = load i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)**, i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)*** %2, align 8, !tbaa !48
  %3 = load i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)*, i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)** %vtable, align 8
  %call = call zeroext i1 %3(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) #14
  br i1 %call, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  call void @_ZN6Halide7Runtime8Internal15Synchronization18unlock_bucket_pairERNS2_11bucket_pairE(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* nonnull align 8 dereferenceable(16) %buckets) #15
  br label %cleanup

if.end:                                           ; preds = %entry
  %from = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %buckets, i64 0, i32 0
  %4 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %from, align 8, !tbaa !118
  %head = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %4, i64 0, i32 1
  %5 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head, align 8, !tbaa !14
  %cmp.not92 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %5, null
  br i1 %cmp.not92, label %if.end38, label %while.body

while.body:                                       ; preds = %if.end, %if.end22
  %wakeup.098 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %wakeup.2, %if.end22 ], [ null, %if.end ]
  %requeue_tail.097 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %requeue_tail.2, %if.end22 ], [ null, %if.end ]
  %requeue.096 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %requeue.3, %if.end22 ], [ null, %if.end ]
  %data.095 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %7, %if.end22 ], [ %5, %if.end ]
  %prev.094 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %prev.1, %if.end22 ], [ null, %if.end ]
  %data_location.093 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** [ %data_location.1, %if.end22 ], [ %head, %if.end ]
  %sleep_address = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.095, i64 0, i32 1
  %6 = load atomic i64, i64* %sleep_address monotonic, align 8
  %next2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.095, i64 0, i32 2
  %7 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next2, align 8, !tbaa !88
  %cmp3 = icmp eq i64 %6, %addr_from
  br i1 %cmp3, label %if.then4, label %if.end22

if.then4:                                         ; preds = %while.body
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %7, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %data_location.093, align 8, !tbaa !14
  %8 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %from, align 8, !tbaa !118
  %tail = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %8, i64 0, i32 2
  %9 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8, !tbaa !93
  %cmp6 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %9, %data.095
  br i1 %cmp6, label %if.then7, label %if.end10

if.then7:                                         ; preds = %if.then4
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %prev.094, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8, !tbaa !93
  br label %if.end10

if.end10:                                         ; preds = %if.then7, %if.then4
  %10 = load i8, i8* %1, align 8, !tbaa !114, !range !21
  %tobool = icmp ne i8 %10, 0
  %cmp11 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.098, null
  %or.cond = and i1 %cmp11, %tobool
  br i1 %or.cond, label %if.end22, label %if.else

if.else:                                          ; preds = %if.end10
  %cmp13 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue.096, null
  br i1 %cmp13, label %if.end17, label %if.else15

if.else15:                                        ; preds = %if.else
  %next16 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue_tail.097, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.095, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next16, align 8, !tbaa !88
  br label %if.end17

if.end17:                                         ; preds = %if.else15, %if.else
  %requeue.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %requeue.096, %if.else15 ], [ %data.095, %if.else ]
  store atomic i64 %addr_to, i64* %sleep_address monotonic, align 8
  br label %if.end22

if.end22:                                         ; preds = %if.end17, %if.end10, %while.body
  %data_location.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** [ %data_location.093, %if.end10 ], [ %data_location.093, %if.end17 ], [ %next2, %while.body ]
  %prev.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %prev.094, %if.end10 ], [ %prev.094, %if.end17 ], [ %data.095, %while.body ]
  %requeue.3 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %requeue.096, %if.end10 ], [ %requeue.1, %if.end17 ], [ %requeue.096, %while.body ]
  %requeue_tail.2 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %requeue_tail.097, %if.end10 ], [ %data.095, %if.end17 ], [ %requeue_tail.097, %while.body ]
  %wakeup.2 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %data.095, %if.end10 ], [ %wakeup.098, %if.end17 ], [ %wakeup.098, %while.body ]
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %7, null
  br i1 %cmp.not, label %while.end, label %while.body, !llvm.loop !120

while.end:                                        ; preds = %if.end22
  %cmp23.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue.3, null
  br i1 %cmp23.not, label %if.end38, label %if.then24

if.then24:                                        ; preds = %while.end
  %next25 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue_tail.2, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* null, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next25, align 8, !tbaa !88
  %to = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %buckets, i64 0, i32 1
  %11 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %to, align 8, !tbaa !121
  %head26 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %11, i64 0, i32 1
  %12 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head26, align 8, !tbaa !117
  %cmp27 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %12, null
  br i1 %cmp27, label %if.end35, label %if.else31

if.else31:                                        ; preds = %if.then24
  %tail33 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %11, i64 0, i32 2
  %13 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail33, align 8, !tbaa !93
  %next34 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %13, i64 0, i32 2
  br label %if.end35

if.end35:                                         ; preds = %if.else31, %if.then24
  %next34.sink = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** [ %next34, %if.else31 ], [ %head26, %if.then24 ]
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue.3, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next34.sink, align 8, !tbaa !14
  %tail37 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %11, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue_tail.2, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail37, align 8, !tbaa !93
  br label %if.end38

if.end38:                                         ; preds = %if.end35, %while.end, %if.end
  %cmp23106 = phi i1 [ true, %if.end35 ], [ false, %while.end ], [ false, %if.end ]
  %wakeup.0.lcssa105 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %wakeup.2, %if.end35 ], [ %wakeup.2, %while.end ], [ null, %if.end ]
  %cmp39 = icmp ne %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.0.lcssa105, null
  %14 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::parking_control"* %this to void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)***
  %vtable41 = load void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)**, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)*** %14, align 8, !tbaa !48
  %vfn42 = getelementptr inbounds void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)*, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)** %vtable41, i64 3
  %15 = load void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)*, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)** %vfn42, align 8
  call void %15(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action, i1 zeroext %cmp39, i1 zeroext %cmp23106) #14
  br i1 %cmp39, label %if.then44, label %if.else48

if.then44:                                        ; preds = %if.end38
  %unpark_info45 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.0.lcssa105, i64 0, i32 3
  store i64 %unpark_info, i64* %unpark_info45, align 8, !tbaa !97
  %mutex.i89 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.0.lcssa105, i64 0, i32 0, i32 0
  %call.i90 = call i32 @pthread_mutex_lock(%struct.pthread_mutex_t* nonnull %mutex.i89) #14
  call void @_ZN6Halide7Runtime8Internal15Synchronization18unlock_bucket_pairERNS2_11bucket_pairE(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* nonnull align 8 dereferenceable(16) %buckets) #15
  %should_park.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.0.lcssa105, i64 0, i32 0, i32 2
  store i8 0, i8* %should_park.i, align 8, !tbaa !98
  %condvar.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.0.lcssa105, i64 0, i32 0, i32 1
  %call.i88 = call i32 @pthread_cond_signal(%struct.pthread_mutex_t* nonnull %condvar.i) #14
  %call.i = call i32 @pthread_mutex_unlock(%struct.pthread_mutex_t* nonnull %mutex.i89) #14
  br label %if.end49

if.else48:                                        ; preds = %if.end38
  call void @_ZN6Halide7Runtime8Internal15Synchronization18unlock_bucket_pairERNS2_11bucket_pairE(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* nonnull align 8 dereferenceable(16) %buckets) #15
  br label %if.end49

if.end49:                                         ; preds = %if.else48, %if.then44
  %16 = load i8, i8* %1, align 8
  %17 = and i8 %16, 1
  %tobool52 = icmp ne i8 %17, 0
  %18 = and i1 %cmp39, %tobool52
  %conv = zext i1 %18 to i32
  br label %cleanup

cleanup:                                          ; preds = %if.end49, %if.then
  %retval.0 = phi i32 [ %conv, %if.end49 ], [ 0, %if.then ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1) #11
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %0) #11
  ret i32 %retval.0
}

; Function Attrs: nounwind
define linkonce void @_ZN6Halide7Runtime8Internal15Synchronization16lock_bucket_pairEyy(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* noalias sret(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair") align 8 %agg.result, i64 %addr_from, i64 %addr_to) local_unnamed_addr #4 {
entry:
  %mul.i = mul i64 %addr_from, -7046029254386353131
  %shr.i = lshr i64 %mul.i, 54
  %mul.i37 = mul i64 %addr_to, -7046029254386353131
  %shr.i38 = lshr i64 %mul.i37, 54
  %cmp = icmp eq i64 %shr.i, %shr.i38
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i
  %state.i42 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx, i64 0, i32 0, i32 0
  %0 = cmpxchg weak i64* %state.i42, i64 0, i64 1 acquire monotonic
  %1 = extractvalue { i64, i1 } %0, 1
  br i1 %1, label %cleanup, label %if.then.i43

if.then.i43:                                      ; preds = %if.then
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #14
  br label %cleanup

if.else:                                          ; preds = %entry
  %cmp2 = icmp ult i64 %shr.i, %shr.i38
  br i1 %cmp2, label %if.then3, label %if.else9

if.then3:                                         ; preds = %if.else
  %arrayidx5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i
  %arrayidx6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i38
  %state.i52 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx5, i64 0, i32 0, i32 0
  %2 = cmpxchg weak i64* %state.i52, i64 0, i64 1 acquire monotonic
  %3 = extractvalue { i64, i1 } %2, 1
  br i1 %3, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54, label %if.then.i53

if.then.i53:                                      ; preds = %if.then3
  %mutex7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx5, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex7) #14
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54

_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54: ; preds = %if.then.i53, %if.then3
  %state.i49 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx6, i64 0, i32 0, i32 0
  %4 = cmpxchg weak i64* %state.i49, i64 0, i64 1 acquire monotonic
  %5 = extractvalue { i64, i1 } %4, 1
  br i1 %5, label %cleanup, label %if.then.i50

if.then.i50:                                      ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54
  %mutex8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx6, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex8) #14
  br label %cleanup

if.else9:                                         ; preds = %if.else
  %arrayidx11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i38
  %arrayidx13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i
  %state.i39 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx11, i64 0, i32 0, i32 0
  %6 = cmpxchg weak i64* %state.i39, i64 0, i64 1 acquire monotonic
  %7 = extractvalue { i64, i1 } %6, 1
  br i1 %7, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41, label %if.then.i40

if.then.i40:                                      ; preds = %if.else9
  %mutex14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx11, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex14) #14
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41

_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41: ; preds = %if.then.i40, %if.else9
  %state.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx13, i64 0, i32 0, i32 0
  %8 = cmpxchg weak i64* %state.i, i64 0, i64 1 acquire monotonic
  %9 = extractvalue { i64, i1 } %8, 1
  br i1 %9, label %cleanup, label %if.then.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41
  %mutex15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx13, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex15) #14
  br label %cleanup

cleanup:                                          ; preds = %if.then.i, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41, %if.then.i50, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54, %if.then.i43, %if.then
  %arrayidx13.sink = phi %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* [ %arrayidx, %if.then ], [ %arrayidx, %if.then.i43 ], [ %arrayidx5, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54 ], [ %arrayidx5, %if.then.i50 ], [ %arrayidx13, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41 ], [ %arrayidx13, %if.then.i ]
  %arrayidx11.sink = phi %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* [ %arrayidx, %if.then ], [ %arrayidx, %if.then.i43 ], [ %arrayidx6, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54 ], [ %arrayidx6, %if.then.i50 ], [ %arrayidx11, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41 ], [ %arrayidx11, %if.then.i ]
  %from2.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %agg.result, i64 0, i32 0
  store %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx13.sink, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %from2.i, align 8, !tbaa !14
  %to3.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %agg.result, i64 0, i32 1
  store %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx11.sink, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %to3.i, align 8, !tbaa !14
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal15Synchronization18unlock_bucket_pairERNS2_11bucket_pairE(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* nonnull align 8 dereferenceable(16) %buckets) local_unnamed_addr #0 {
entry:
  %from = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %buckets, i64 0, i32 0
  %0 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %from, align 8, !tbaa !118
  %to = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %buckets, i64 0, i32 1
  %1 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %to, align 8, !tbaa !121
  %cmp = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, %1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %state.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, i64 0, i32 0, i32 0
  %2 = atomicrmw and i64* %state.i, i64 -2 release
  %and.i = and i64 %2, 2
  %cmp.i = icmp ne i64 %and.i, 0
  %cmp3.not.i = icmp ult i64 %2, 4
  %or.cond.i = or i1 %cmp3.not.i, %cmp.i
  br i1 %or.cond.i, label %if.end15, label %if.then.i

if.then.i:                                        ; preds = %if.then
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #14
  br label %if.end15

if.else:                                          ; preds = %entry
  %cmp4 = icmp ugt %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, %1
  br i1 %cmp4, label %if.then5, label %if.else10

if.then5:                                         ; preds = %if.else
  %state.i25 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, i64 0, i32 0, i32 0
  %3 = atomicrmw and i64* %state.i25, i64 -2 release
  %and.i26 = and i64 %3, 2
  %cmp.i27 = icmp ne i64 %and.i26, 0
  %cmp3.not.i28 = icmp ult i64 %3, 4
  %or.cond.i29 = or i1 %cmp3.not.i28, %cmp.i27
  br i1 %or.cond.i29, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit31, label %if.then.i30

if.then.i30:                                      ; preds = %if.then5
  %mutex7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex7) #14
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit31

_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit31: ; preds = %if.then.i30, %if.then5
  %4 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %to, align 8, !tbaa !121
  %state.i32 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %4, i64 0, i32 0, i32 0
  %5 = atomicrmw and i64* %state.i32, i64 -2 release
  %and.i33 = and i64 %5, 2
  %cmp.i34 = icmp ne i64 %and.i33, 0
  %cmp3.not.i35 = icmp ult i64 %5, 4
  %or.cond.i36 = or i1 %cmp3.not.i35, %cmp.i34
  br i1 %or.cond.i36, label %if.end15, label %if.then.i37

if.then.i37:                                      ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit31
  %mutex9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %4, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex9) #14
  br label %if.end15

if.else10:                                        ; preds = %if.else
  %state.i39 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %1, i64 0, i32 0, i32 0
  %6 = atomicrmw and i64* %state.i39, i64 -2 release
  %and.i40 = and i64 %6, 2
  %cmp.i41 = icmp ne i64 %and.i40, 0
  %cmp3.not.i42 = icmp ult i64 %6, 4
  %or.cond.i43 = or i1 %cmp3.not.i42, %cmp.i41
  br i1 %or.cond.i43, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit45, label %if.then.i44

if.then.i44:                                      ; preds = %if.else10
  %mutex12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %1, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex12) #14
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit45

_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit45: ; preds = %if.then.i44, %if.else10
  %7 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %from, align 8, !tbaa !118
  %state.i46 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %7, i64 0, i32 0, i32 0
  %8 = atomicrmw and i64* %state.i46, i64 -2 release
  %and.i47 = and i64 %8, 2
  %cmp.i48 = icmp ne i64 %and.i47, 0
  %cmp3.not.i49 = icmp ult i64 %8, 4
  %or.cond.i50 = or i1 %cmp3.not.i49, %cmp.i48
  br i1 %or.cond.i50, label %if.end15, label %if.then.i51

if.then.i51:                                      ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit45
  %mutex14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %7, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex14) #14
  br label %if.end15

if.end15:                                         ; preds = %if.then.i51, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit45, %if.then.i37, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit31, %if.then.i, %if.then
  ret void
}

; Function Attrs: nounwind
define linkonce_odr zeroext i1 @_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control8validateERNS2_15validate_actionE(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) unnamed_addr #4 align 2 {
entry:
  %cond_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 1
  %0 = load i64*, i64** %cond_state, align 8, !tbaa !107
  %1 = load atomic i64, i64* %0 monotonic, align 8
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 2
  %2 = load %"class.Halide::Runtime::Internal::Synchronization::word_lock"*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex, align 8, !tbaa !109
  %3 = ptrtoint %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %2 to i64
  %cmp.not = icmp eq i64 %1, %3
  br i1 %cmp.not, label %if.end, label %cleanup

if.end:                                           ; preds = %entry
  store atomic i64 0, i64* %0 monotonic, align 8
  %4 = load %"class.Halide::Runtime::Internal::Synchronization::word_lock"*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex, align 8, !tbaa !109
  %state.i = getelementptr inbounds %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %4, i64 0, i32 0
  %5 = load atomic i64, i64* %state.i monotonic, align 8
  %and11.i = and i64 %5, 1
  %tobool.not12.i = icmp eq i64 %and11.i, 0
  br i1 %tobool.not12.i, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex21make_parked_if_lockedEv.exit, label %if.end.i

if.end.i:                                         ; preds = %if.end, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i
  %val.013.i = phi i64 [ %8, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i ], [ %5, %if.end ]
  %or.i = or i64 %val.013.i, 2
  %6 = cmpxchg weak i64* %state.i, i64 %val.013.i, i64 %or.i monotonic monotonic
  %7 = extractvalue { i64, i1 } %6, 1
  br i1 %7, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex21make_parked_if_lockedEv.exit, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i: ; preds = %if.end.i
  %8 = extractvalue { i64, i1 } %6, 0
  %and.i = and i64 %8, 1
  %tobool.not.i = icmp eq i64 %and.i, 0
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex21make_parked_if_lockedEv.exit, label %if.end.i

_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex21make_parked_if_lockedEv.exit: ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i, %if.end.i, %if.end
  %tobool.not.lcssa.i = phi i8 [ 1, %if.end ], [ 1, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i ], [ 0, %if.end.i ]
  %unpark_one = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 0
  store i8 %tobool.not.lcssa.i, i8* %unpark_one, align 8, !tbaa !114
  br label %cleanup

cleanup:                                          ; preds = %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex21make_parked_if_lockedEv.exit, %entry
  ret i1 %cmp.not
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control6unparkEib(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i32 %unparked, i1 zeroext %more_waiters) unnamed_addr #2 align 2 {
entry:
  ret i64 0
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr void @_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control16requeue_callbackERKNS2_15validate_actionEbb(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action, i1 zeroext %one_to_wake, i1 zeroext %some_requeued) unnamed_addr #2 align 2 {
entry:
  %unpark_one = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 0
  %0 = load i8, i8* %unpark_one, align 8, !tbaa !114, !range !21
  %tobool.not = icmp ne i8 %0, 0
  %1 = and i1 %tobool.not, %some_requeued
  br i1 %1, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 2
  %2 = load %"class.Halide::Runtime::Internal::Synchronization::word_lock"*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex, align 8, !tbaa !109
  %state.i = getelementptr inbounds %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %2, i64 0, i32 0
  %3 = atomicrmw or i64* %state.i, i64 2 monotonic
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce i32 @_ZN6Halide7Runtime8Internal27default_desired_num_threadsEv() local_unnamed_addr #0 {
entry:
  %call = tail call i8* @getenv(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i64 0, i64 0)) #14
  %tobool.not = icmp eq i8* %call, null
  br i1 %tobool.not, label %if.end, label %cond.true

if.end:                                           ; preds = %entry
  %call1 = tail call i8* @getenv(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0)) #14
  %tobool2.not = icmp eq i8* %call1, null
  br i1 %tobool2.not, label %cond.false, label %cond.true

cond.true:                                        ; preds = %if.end, %entry
  %threads_str.010 = phi i8* [ %call1, %if.end ], [ %call, %entry ]
  %call3 = tail call i32 @atoi(i8* nonnull %threads_str.010) #14
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %call4 = tail call i32 @halide_host_cpu_count() #14
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call3, %cond.true ], [ %call4, %cond.false ]
  ret i32 %cond
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal13worker_threadEPv(i8* %arg) #0 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #15
  %0 = bitcast i8* %arg to %"struct.Halide::Runtime::Internal::work"*
  tail call void @_ZN6Halide7Runtime8Internal28worker_thread_already_lockedEPNS1_4workE(%"struct.Halide::Runtime::Internal::work"* %0) #15
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #15
  ret void
}

; Function Attrs: nounwind mustprogress
define weak %struct.halide_thread* @halide_spawn_thread(void (i8*)* %f, i8* %closure) local_unnamed_addr #0 {
entry:
  %call = tail call i8* @malloc(i64 24) #14
  %f1 = bitcast i8* %call to void (i8*)**
  store void (i8*)* %f, void (i8*)** %f1, align 8, !tbaa !122
  %closure2 = getelementptr inbounds i8, i8* %call, i64 8
  %0 = bitcast i8* %closure2 to i8**
  store i8* %closure, i8** %0, align 8, !tbaa !125
  %handle = getelementptr inbounds i8, i8* %call, i64 16
  %1 = bitcast i8* %handle to i64*
  store i64 0, i64* %1, align 8, !tbaa !126
  %call4 = tail call i32 @pthread_create(i64* nonnull %1, i8* null, i8* (i8*)* nonnull @_ZN6Halide7Runtime8Internal19spawn_thread_helperEPv, i8* %call) #14
  %2 = bitcast i8* %call to %struct.halide_thread*
  ret %struct.halide_thread* %2
}

; Function Attrs: nounwind mustprogress
define linkonce i8* @_ZN6Halide7Runtime8Internal19spawn_thread_helperEPv(i8* %arg) #0 {
entry:
  %f = bitcast i8* %arg to void (i8*)**
  %0 = load void (i8*)*, void (i8*)** %f, align 8, !tbaa !122
  %closure = getelementptr inbounds i8, i8* %arg, i64 8
  %1 = bitcast i8* %closure to i8**
  %2 = load i8*, i8** %1, align 8, !tbaa !125
  tail call void %0(i8* %2) #14
  ret i8* null
}

declare i32 @pthread_create(i64*, i8*, i8* (i8*)*, i8*) local_unnamed_addr #1

declare i8* @getenv(i8*) local_unnamed_addr #1

declare i32 @atoi(i8*) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_parallel_tasks(i8* %user_context, i32 %num_tasks, %struct.halide_parallel_task_t* %tasks, i8* %task_parent) #0 {
entry:
  %conv = sext i32 %num_tasks to i64
  %0 = alloca %"struct.Halide::Runtime::Internal::work", i64 %conv, align 8
  %cmp76 = icmp sgt i32 %num_tasks, 0
  br i1 %cmp76, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.inc, %entry
  %num_tasks.addr.0.lcssa = phi i32 [ %num_tasks, %entry ], [ %num_tasks.addr.1, %for.inc ]
  %cmp17 = icmp eq i32 %num_tasks.addr.0.lcssa, 0
  br i1 %cmp17, label %cleanup, label %if.end19

for.body:                                         ; preds = %entry, %for.inc
  %indvars.iv82 = phi i64 [ %indvars.iv.next83, %for.inc ], [ 0, %entry ]
  %num_tasks.addr.078 = phi i32 [ %num_tasks.addr.1, %for.inc ], [ %num_tasks, %entry ]
  %tasks.addr.077 = phi %struct.halide_parallel_task_t* [ %tasks.addr.1, %for.inc ], [ %tasks, %entry ]
  %extent = getelementptr inbounds %struct.halide_parallel_task_t, %struct.halide_parallel_task_t* %tasks.addr.077, i64 0, i32 6
  %1 = load i32, i32* %extent, align 8, !tbaa !127
  %cmp1 = icmp slt i32 %1, 1
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %dec = add nsw i32 %num_tasks.addr.078, -1
  br label %for.inc

if.end:                                           ; preds = %for.body
  %incdec.ptr = getelementptr inbounds %struct.halide_parallel_task_t, %struct.halide_parallel_task_t* %tasks.addr.077, i64 1
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82
  %2 = bitcast %"struct.Halide::Runtime::Internal::work"* %arrayidx to i8*
  %3 = bitcast %struct.halide_parallel_task_t* %tasks.addr.077 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(56) %2, i8* nonnull align 8 dereferenceable(56) %3, i64 56, i1 false), !tbaa.struct !128
  %task_fn = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 1
  store i32 (i8*, i32, i8*)* null, i32 (i8*, i32, i8*)** %task_fn, align 8, !tbaa !39
  %user_context6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 7
  store i8* %user_context, i8** %user_context6, align 8, !tbaa !40
  %active_workers = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 8
  %4 = bitcast i32* %active_workers to <2 x i32>*
  store <2 x i32> zeroinitializer, <2 x i32>* %4, align 8, !tbaa !41
  %next_semaphore = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 10
  store i32 0, i32* %next_semaphore, align 8, !tbaa !42
  %owner_is_sleeping = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 11
  store i8 0, i8* %owner_is_sleeping, align 4, !tbaa !43
  %parent_job = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 5
  %5 = bitcast %"struct.Halide::Runtime::Internal::work"** %parent_job to i8**
  store i8* %task_parent, i8** %5, align 8, !tbaa !46
  br label %for.inc

for.inc:                                          ; preds = %if.end, %if.then
  %tasks.addr.1 = phi %struct.halide_parallel_task_t* [ %tasks.addr.077, %if.then ], [ %incdec.ptr, %if.end ]
  %num_tasks.addr.1 = phi i32 [ %dec, %if.then ], [ %num_tasks.addr.078, %if.end ]
  %indvars.iv.next83 = add nuw nsw i64 %indvars.iv82, 1
  %6 = sext i32 %num_tasks.addr.1 to i64
  %cmp = icmp slt i64 %indvars.iv.next83, %6
  br i1 %cmp, label %for.body, label %for.cond.cleanup, !llvm.loop !129

if.end19:                                         ; preds = %for.cond.cleanup
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #15
  %7 = bitcast i8* %task_parent to %"struct.Halide::Runtime::Internal::work"*
  call void @_ZN6Halide7Runtime8Internal27enqueue_work_already_lockedEiPNS1_4workES3_(i32 %num_tasks.addr.0.lcssa, %"struct.Halide::Runtime::Internal::work"* nonnull %0, %"struct.Halide::Runtime::Internal::work"* %7) #15
  %cmp2373 = icmp sgt i32 %num_tasks.addr.0.lcssa, 0
  br i1 %cmp2373, label %for.body25.preheader, label %for.cond.cleanup24

for.body25.preheader:                             ; preds = %if.end19
  %wide.trip.count = zext i32 %num_tasks.addr.0.lcssa to i64
  br label %for.body25

for.cond.cleanup24:                               ; preds = %for.body25, %if.end19
  %exit_status20.0.lcssa = phi i32 [ 0, %if.end19 ], [ %spec.select, %for.body25 ]
  call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #15
  br label %cleanup

for.body25:                                       ; preds = %for.body25, %for.body25.preheader
  %indvars.iv = phi i64 [ 0, %for.body25.preheader ], [ %indvars.iv.next, %for.body25 ]
  %exit_status20.074 = phi i32 [ 0, %for.body25.preheader ], [ %spec.select, %for.body25 ]
  %add.ptr = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv
  call void @_ZN6Halide7Runtime8Internal28worker_thread_already_lockedEPNS1_4workE(%"struct.Halide::Runtime::Internal::work"* nonnull %add.ptr) #15
  %exit_status28 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv, i32 9
  %8 = load i32, i32* %exit_status28, align 4, !tbaa !47
  %cmp29.not = icmp eq i32 %8, 0
  %spec.select = select i1 %cmp29.not, i32 %exit_status20.074, i32 %8
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.cleanup24, label %for.body25, !llvm.loop !130

cleanup:                                          ; preds = %for.cond.cleanup24, %for.cond.cleanup
  %retval.0 = phi i32 [ %exit_status20.0.lcssa, %for.cond.cleanup24 ], [ 0, %for.cond.cleanup ]
  ret i32 %retval.0
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_default_semaphore_init(%struct.halide_semaphore_t* %s, i32 %n) #2 {
entry:
  %value = bitcast %struct.halide_semaphore_t* %s to i32*
  store atomic i32 %n, i32* %value release, align 4
  ret i32 %n
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_semaphore_release(%struct.halide_semaphore_t* %s, i32 %n) #0 {
entry:
  %value = bitcast %struct.halide_semaphore_t* %s to i32*
  %0 = atomicrmw add i32* %value, i32 %n acq_rel
  %cmp = icmp eq i32 %0, 0
  %cmp1 = icmp ne i32 %n, 0
  %or.cond = and i1 %cmp1, %cmp
  br i1 %or.cond, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #15
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 8)) #15
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10)) #15
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #15
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %add = add nsw i32 %0, %n
  ret i32 %add
}

; Function Attrs: nounwind mustprogress
define weak void @halide_thread_pool_cleanup() #0 {
entry:
  tail call void @halide_shutdown_thread_pool() #15
  ret void
}

; Function Attrs: nounwind mustprogress
define weak void @halide_shutdown_thread_pool() local_unnamed_addr #0 {
entry:
  %0 = load i8, i8* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 15), align 1, !tbaa !52, !range !21
  %tobool.not = icmp eq i8 %0, 0
  br i1 %tobool.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #15
  store i8 1, i8* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 14), align 8, !tbaa !73
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10)) #15
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 8)) #15
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 9)) #15
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #15
  %1 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !60
  %cmp4 = icmp sgt i32 %1, 0
  br i1 %cmp4, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.body, %if.then
  %call.i = tail call i8* @memset(i8* nonnull bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), i32 0, i64 2116) #14
  br label %if.end

for.body:                                         ; preds = %if.then, %for.body
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body ], [ 0, %if.then ]
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 13, i64 %indvars.iv
  %2 = load %struct.halide_thread*, %struct.halide_thread** %arrayidx, align 8, !tbaa !14
  tail call void @halide_join_thread(%struct.halide_thread* %2) #15
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %3 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !60
  %4 = sext i32 %3 to i64
  %cmp = icmp slt i64 %indvars.iv.next, %4
  br i1 %cmp, label %for.body, label %for.cond.cleanup, !llvm.loop !131

if.end:                                           ; preds = %for.cond.cleanup, %entry
  ret void
}

declare i8* @memset(i8*, i32, i64) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_join_thread(%struct.halide_thread* %thread_arg) local_unnamed_addr #0 {
entry:
  %ret = alloca i8*, align 8
  %0 = bitcast %struct.halide_thread* %thread_arg to %"struct.Halide::Runtime::Internal::spawned_thread"*
  %1 = bitcast i8** %ret to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #11
  store i8* null, i8** %ret, align 8, !tbaa !14
  %handle = getelementptr inbounds %"struct.Halide::Runtime::Internal::spawned_thread", %"struct.Halide::Runtime::Internal::spawned_thread"* %0, i64 0, i32 2
  %2 = load i64, i64* %handle, align 8, !tbaa !126
  %call = call i32 @pthread_join(i64 %2, i8** nonnull %ret) #14
  %3 = bitcast %struct.halide_thread* %thread_arg to i8*
  call void @free(i8* %3) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #11
  ret void
}

declare i32 @pthread_join(i64, i8**) local_unnamed_addr #1

; Function Attrs: nounwind
define weak void @halide_cond_signal(%struct.halide_mutex* %cond) local_unnamed_addr #4 {
entry:
  %control.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", align 8
  %state.i = getelementptr %struct.halide_mutex, %struct.halide_mutex* %cond, i64 0, i32 0, i64 0
  %0 = load atomic i64, i64* %state.i monotonic, align 8
  %cmp.i = icmp eq i64 %0, 0
  br i1 %cmp.i, label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond6signalEv.exit, label %if.end.i

if.end.i:                                         ; preds = %entry
  %1 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1) #11
  %2 = inttoptr i64 %0 to %"class.Halide::Runtime::Internal::Synchronization::word_lock"*
  %3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization22signal_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8, !tbaa !48
  %cond_state2.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 1
  store i64* %state.i, i64** %cond_state2.i.i, align 8, !tbaa !132
  %mutex3.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 2
  store %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %2, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex3.i.i, align 8, !tbaa !134
  %4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0
  %5 = ptrtoint %struct.halide_mutex* %cond to i64
  %call.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control10unpark_oneEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %4, i64 %5) #14
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1) #11
  br label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond6signalEv.exit

_ZN6Halide7Runtime8Internal15Synchronization9fast_cond6signalEv.exit: ; preds = %if.end.i, %entry
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr zeroext i1 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control8validateERNS2_15validate_actionE(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) unnamed_addr #2 align 2 {
entry:
  ret i1 true
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr i64 @_ZN6Halide7Runtime8Internal15Synchronization22signal_parking_control6unparkEib(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this, i32 %unparked, i1 zeroext %more_waiters) unnamed_addr #2 align 2 {
entry:
  br i1 %more_waiters, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %cond_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 1
  %0 = load i64*, i64** %cond_state, align 8, !tbaa !132
  store atomic i64 0, i64* %0 monotonic, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i64 0
}

; Function Attrs: nounwind mustprogress
define weak %struct.halide_mutex_array* @halide_mutex_array_create(i32 %sz) local_unnamed_addr #0 {
entry:
  %call = tail call i8* @halide_malloc(i8* null, i64 8) #14
  %0 = bitcast i8* %call to %struct.halide_mutex_array*
  %cmp = icmp eq i8* %call, null
  br i1 %cmp, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %conv = sext i32 %sz to i64
  %mul = shl nsw i64 %conv, 3
  %call1 = tail call i8* @halide_malloc(i8* null, i64 %mul) #14
  %1 = bitcast i8* %call to i8**
  store i8* %call1, i8** %1, align 8, !tbaa !135
  %cmp4 = icmp eq i8* %call1, null
  br i1 %cmp4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.end
  tail call void @halide_free(i8* null, i8* nonnull %call) #14
  br label %cleanup

if.end6:                                          ; preds = %if.end
  %call10 = tail call i8* @memset(i8* nonnull %call1, i32 0, i64 %mul) #14
  br label %cleanup

cleanup:                                          ; preds = %if.end6, %if.then5, %entry
  %retval.0 = phi %struct.halide_mutex_array* [ null, %if.then5 ], [ %0, %if.end6 ], [ null, %entry ]
  ret %struct.halide_mutex_array* %retval.0
}

; Function Attrs: nounwind mustprogress
define weak void @halide_mutex_array_destroy(i8* %user_context, i8* %array) local_unnamed_addr #0 {
entry:
  %0 = bitcast i8* %array to i8**
  %1 = load i8*, i8** %0, align 8, !tbaa !135
  tail call void @halide_free(i8* %user_context, i8* %1) #14
  tail call void @halide_free(i8* %user_context, i8* %array) #14
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_mutex_array_lock(%struct.halide_mutex_array* %array, i32 %entry1) local_unnamed_addr #0 {
entry:
  %array2 = getelementptr inbounds %struct.halide_mutex_array, %struct.halide_mutex_array* %array, i64 0, i32 0
  %0 = load %struct.halide_mutex*, %struct.halide_mutex** %array2, align 8, !tbaa !135
  %idxprom = sext i32 %entry1 to i64
  %arrayidx = getelementptr inbounds %struct.halide_mutex, %struct.halide_mutex* %0, i64 %idxprom
  tail call void @halide_mutex_lock(%struct.halide_mutex* %arrayidx) #15
  ret i32 0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_mutex_array_unlock(%struct.halide_mutex_array* %array, i32 %entry1) local_unnamed_addr #0 {
entry:
  %array2 = getelementptr inbounds %struct.halide_mutex_array, %struct.halide_mutex_array* %array, i64 0, i32 0
  %0 = load %struct.halide_mutex*, %struct.halide_mutex** %array2, align 8, !tbaa !135
  %idxprom = sext i32 %entry1 to i64
  %arrayidx = getelementptr inbounds %struct.halide_mutex, %struct.halide_mutex* %0, i64 %idxprom
  tail call void @halide_mutex_unlock(%struct.halide_mutex* %arrayidx) #15
  ret i32 0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_set_num_threads(i32 %n) local_unnamed_addr #0 {
entry:
  %cmp = icmp slt i32 %n, 0
  br i1 %cmp, label %if.end3.thread, label %if.end

if.end3.thread:                                   ; preds = %entry
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.4, i64 0, i64 0)) #14
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #15
  %0 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !58
  br label %if.else.i

if.end:                                           ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #15
  %cmp1 = icmp eq i32 %n, 0
  br i1 %cmp1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  %call = tail call i32 @_ZN6Halide7Runtime8Internal27default_desired_num_threadsEv() #15
  br label %if.end3

if.end3:                                          ; preds = %if.then2, %if.end
  %n.addr.0 = phi i32 [ %call, %if.then2 ], [ %n, %if.end ]
  %1 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !58
  %cmp.i = icmp sgt i32 %n.addr.0, 256
  br i1 %cmp.i, label %_ZN6Halide7Runtime8Internal17clamp_num_threadsEi.exit, label %if.else.i

if.else.i:                                        ; preds = %if.end3, %if.end3.thread
  %2 = phi i32 [ %0, %if.end3.thread ], [ %1, %if.end3 ]
  %n.addr.012 = phi i32 [ %n, %if.end3.thread ], [ %n.addr.0, %if.end3 ]
  %3 = icmp sgt i32 %n.addr.012, 1
  %spec.select.i = select i1 %3, i32 %n.addr.012, i32 1
  br label %_ZN6Halide7Runtime8Internal17clamp_num_threadsEi.exit

_ZN6Halide7Runtime8Internal17clamp_num_threadsEi.exit: ; preds = %if.else.i, %if.end3
  %4 = phi i32 [ %2, %if.else.i ], [ %1, %if.end3 ]
  %call48 = phi i32 [ %spec.select.i, %if.else.i ], [ 256, %if.end3 ]
  store i32 %call48, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !58
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #15
  ret i32 %4
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* @halide_set_custom_do_task(i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 8, !tbaa !14
  store i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %f, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 8, !tbaa !14
  ret i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* @halide_set_custom_do_loop_task(i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)*, i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)** @_ZN6Halide7Runtime8Internal19custom_do_loop_taskE, align 8, !tbaa !14
  store i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* %f, i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)** @_ZN6Halide7Runtime8Internal19custom_do_loop_taskE, align 8, !tbaa !14
  ret i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* @halide_set_custom_do_par_for(i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 8, !tbaa !14
  store i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %f, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 8, !tbaa !14
  ret i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_set_custom_parallel_runtime(i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %do_par_for, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %do_task, i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* %do_loop_task, i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)* %do_parallel_tasks, i32 (%struct.halide_semaphore_t*, i32)* %semaphore_init, i1 (%struct.halide_semaphore_t*, i32)* %semaphore_try_acquire, i32 (%struct.halide_semaphore_t*, i32)* %semaphore_release) local_unnamed_addr #2 {
entry:
  store i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %do_par_for, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 8, !tbaa !14
  store i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %do_task, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 8, !tbaa !14
  store i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* %do_loop_task, i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)** @_ZN6Halide7Runtime8Internal19custom_do_loop_taskE, align 8, !tbaa !14
  store i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)* %do_parallel_tasks, i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)** @_ZN6Halide7Runtime8Internal24custom_do_parallel_tasksE, align 8, !tbaa !14
  store i32 (%struct.halide_semaphore_t*, i32)* %semaphore_init, i32 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal21custom_semaphore_initE, align 8, !tbaa !14
  store i1 (%struct.halide_semaphore_t*, i32)* %semaphore_try_acquire, i1 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal28custom_semaphore_try_acquireE, align 8, !tbaa !14
  store i32 (%struct.halide_semaphore_t*, i32)* %semaphore_release, i32 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal24custom_semaphore_releaseE, align 8, !tbaa !14
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_par_for(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %min, i32 %size, i8* %closure) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 8, !tbaa !14
  %call = tail call i32 %0(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %min, i32 %size, i8* %closure) #14
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_parallel_tasks(i8* %user_context, i32 %num_tasks, %struct.halide_parallel_task_t* %tasks, i8* %task_parent) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)*, i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)** @_ZN6Halide7Runtime8Internal24custom_do_parallel_tasksE, align 8, !tbaa !14
  %call = tail call i32 %0(i8* %user_context, i32 %num_tasks, %struct.halide_parallel_task_t* %tasks, i8* %task_parent) #14
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_semaphore_init(%struct.halide_semaphore_t* %sema, i32 %count) local_unnamed_addr #0 {
entry:
  %0 = load i32 (%struct.halide_semaphore_t*, i32)*, i32 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal21custom_semaphore_initE, align 8, !tbaa !14
  %call = tail call i32 %0(%struct.halide_semaphore_t* %sema, i32 %count) #14
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_semaphore_release(%struct.halide_semaphore_t* %sema, i32 %count) local_unnamed_addr #0 {
entry:
  %0 = load i32 (%struct.halide_semaphore_t*, i32)*, i32 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal24custom_semaphore_releaseE, align 8, !tbaa !14
  %call = tail call i32 %0(%struct.halide_semaphore_t* %sema, i32 %count) #14
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak zeroext i1 @halide_semaphore_try_acquire(%struct.halide_semaphore_t* %sema, i32 %count) local_unnamed_addr #0 {
entry:
  %0 = load i1 (%struct.halide_semaphore_t*, i32)*, i1 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal28custom_semaphore_try_acquireE, align 8, !tbaa !14
  %call = tail call zeroext i1 %0(%struct.halide_semaphore_t* %sema, i32 %count) #14
  ret i1 %call
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_default_get_symbol(i8* %name) #0 {
entry:
  %call = tail call i8* @dlsym(i8* nonnull inttoptr (i64 -2 to i8*), i8* %name) #14
  ret i8* %call
}

declare i8* @dlsym(i8*, i8*) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i8* @halide_default_load_library(i8* %name) #0 {
entry:
  %call = tail call i8* @dlopen(i8* %name, i32 5) #14
  ret i8* %call
}

declare i8* @dlopen(i8*, i32) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i8* @halide_default_get_library_symbol(i8* %lib, i8* %name) #0 {
entry:
  %cmp = icmp eq i8* %lib, null
  %spec.select = select i1 %cmp, i8* inttoptr (i64 -2 to i8*), i8* %lib
  %call = tail call i8* @dlsym(i8* %spec.select, i8* %name) #14
  ret i8* %call
}

; Function Attrs: nounwind willreturn mustprogress
define weak i8* (i8*)* @halide_set_custom_get_symbol(i8* (i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i8* (i8*)*, i8* (i8*)** @_ZN6Halide7Runtime8Internal17custom_get_symbolE, align 8, !tbaa !14
  store i8* (i8*)* %f, i8* (i8*)** @_ZN6Halide7Runtime8Internal17custom_get_symbolE, align 8, !tbaa !14
  ret i8* (i8*)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i8* (i8*)* @halide_set_custom_load_library(i8* (i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i8* (i8*)*, i8* (i8*)** @_ZN6Halide7Runtime8Internal19custom_load_libraryE, align 8, !tbaa !14
  store i8* (i8*)* %f, i8* (i8*)** @_ZN6Halide7Runtime8Internal19custom_load_libraryE, align 8, !tbaa !14
  ret i8* (i8*)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i8* (i8*, i8*)* @halide_set_custom_get_library_symbol(i8* (i8*, i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i8* (i8*, i8*)*, i8* (i8*, i8*)** @_ZN6Halide7Runtime8Internal25custom_get_library_symbolE, align 8, !tbaa !14
  store i8* (i8*, i8*)* %f, i8* (i8*, i8*)** @_ZN6Halide7Runtime8Internal25custom_get_library_symbolE, align 8, !tbaa !14
  ret i8* (i8*, i8*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_get_symbol(i8* %name) local_unnamed_addr #0 {
entry:
  %0 = load i8* (i8*)*, i8* (i8*)** @_ZN6Halide7Runtime8Internal17custom_get_symbolE, align 8, !tbaa !14
  %call = tail call i8* %0(i8* %name) #14
  ret i8* %call
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_load_library(i8* %name) local_unnamed_addr #0 {
entry:
  %0 = load i8* (i8*)*, i8* (i8*)** @_ZN6Halide7Runtime8Internal19custom_load_libraryE, align 8, !tbaa !14
  %call = tail call i8* %0(i8* %name) #14
  ret i8* %call
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_get_library_symbol(i8* %lib, i8* %name) local_unnamed_addr #0 {
entry:
  %0 = load i8* (i8*, i8*)*, i8* (i8*, i8*)** @_ZN6Halide7Runtime8Internal25custom_get_library_symbolE, align 8, !tbaa !14
  %call = tail call i8* %0(i8* %lib, i8* %name) #14
  ret i8* %call
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_set_gpu_device(i32 %d) local_unnamed_addr #2 {
entry:
  store i32 %d, i32* @_ZN6Halide7Runtime8Internal17halide_gpu_deviceE, align 4, !tbaa !41
  store i8 1, i8* @_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE, align 1, !tbaa !19
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_get_gpu_device(i8* %user_context) local_unnamed_addr #4 {
entry:
  br label %while.cond.i

while.cond.i:                                     ; preds = %while.cond.i, %entry
  %0 = atomicrmw volatile xchg i8* @_ZN6Halide7Runtime8Internal22halide_gpu_device_lockE, i8 1 acquire
  %tobool.not.i = icmp eq i8 %0, 0
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit, label %while.cond.i, !llvm.loop !137

_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit: ; preds = %while.cond.i
  %1 = load i8, i8* @_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE, align 1, !tbaa !19, !range !21
  %tobool.not = icmp eq i8 %1, 0
  br i1 %tobool.not, label %if.then, label %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge

_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge: ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %.pre = load i32, i32* @_ZN6Halide7Runtime8Internal17halide_gpu_deviceE, align 4, !tbaa !41
  br label %if.end4

if.then:                                          ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %call = tail call i8* @getenv(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.8, i64 0, i64 0)) #14
  %tobool1.not = icmp eq i8* %call, null
  br i1 %tobool1.not, label %if.end, label %if.then2

if.then2:                                         ; preds = %if.then
  %call3 = tail call i32 @atoi(i8* nonnull %call) #14
  br label %if.end

if.end:                                           ; preds = %if.then2, %if.then
  %storemerge = phi i32 [ %call3, %if.then2 ], [ -1, %if.then ]
  store i32 %storemerge, i32* @_ZN6Halide7Runtime8Internal17halide_gpu_deviceE, align 4, !tbaa !41
  store i8 1, i8* @_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE, align 1, !tbaa !19
  br label %if.end4

if.end4:                                          ; preds = %if.end, %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge
  %2 = phi i32 [ %.pre, %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge ], [ %storemerge, %if.end ]
  store atomic volatile i8 0, i8* @_ZN6Halide7Runtime8Internal22halide_gpu_device_lockE release, align 1
  ret i32 %2
}

; Function Attrs: nounwind
define weak i32 @halide_default_trace(i8* %user_context, %struct.halide_trace_event_t* %e) #4 {
entry:
  %0 = atomicrmw add i32* @_ZZ20halide_default_traceE3ids, i32 1 seq_cst
  %call = tail call i32 @halide_get_trace_file(i8* %user_context) #15
  %cmp = icmp sgt i32 %call, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %type = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4
  %lanes = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4, i32 2
  %1 = load i16, i16* %lanes, align 2, !tbaa !138
  %conv = zext i16 %1 to i32
  %bits.i = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4, i32 1
  %2 = load i8, i8* %bits.i, align 1, !tbaa !144
  %conv.i = zext i8 %2 to i32
  %add.i = add nuw nsw i32 %conv.i, 7
  %div.i = lshr i32 %add.i, 3
  %mul = mul nuw nsw i32 %div.i, %conv
  %dimensions = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 8
  %3 = load i32, i32* %dimensions, align 8, !tbaa !145
  %mul3 = shl i32 %3, 2
  %func = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 0
  %4 = load i8*, i8** %func, align 8, !tbaa !146
  %call4 = tail call i64 @strlen(i8* %4) #14
  %5 = trunc i64 %call4 to i32
  %conv5 = add i32 %5, 1
  %trace_tag = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 3
  %6 = load i8*, i8** %trace_tag, align 8, !tbaa !147
  %tobool.not = icmp eq i8* %6, null
  br i1 %tobool.not, label %cond.end, label %cond.true

cond.true:                                        ; preds = %if.then
  %call7 = tail call i64 @strlen(i8* nonnull %6) #14
  %7 = trunc i64 %call7 to i32
  %phi.cast = add i32 %7, 1
  br label %cond.end

cond.end:                                         ; preds = %cond.true, %if.then
  %cond = phi i32 [ %phi.cast, %cond.true ], [ 1, %if.then ]
  %add11 = add i32 %mul3, 31
  %add12 = add i32 %add11, %mul
  %add13 = add i32 %add12, %conv5
  %add14 = add i32 %add13, %cond
  %and = and i32 %add14, -4
  %8 = load %"class.Halide::Runtime::Internal::TraceBuffer"*, %"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE, align 8, !tbaa !14
  %lock.i.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %8, i64 0, i32 0, i32 0
  %cmp.i.i = icmp ult i32 %and, 1048577
  %cursor.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %8, i64 0, i32 1
  %overage.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %8, i64 0, i32 2
  %arraydecay.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %8, i64 0, i32 3, i64 0
  br i1 %cmp.i.i, label %while.body.i.i.us.i.preheader, label %while.body.i.i.i.preheader

while.body.i.i.i.preheader:                       ; preds = %cond.end
  %9 = bitcast i32* %cursor.i.i to <2 x i32>*
  br label %while.body.i.i.i

while.body.i.i.us.i.preheader:                    ; preds = %cond.end
  %10 = bitcast i32* %cursor.i.i to <2 x i32>*
  br label %while.body.i.i.us.i

while.body.i.i.us.i:                              ; preds = %while.body.i.i.us.i.backedge, %while.body.i.i.us.i.preheader
  %11 = load volatile i32, i32* %lock.i.i.i, align 4, !tbaa !148
  %and.i.i.us.i = and i32 %11, 1073741823
  %add.i.i.us.i = add nuw nsw i32 %and.i.i.us.i, 1
  %12 = cmpxchg i32* %lock.i.i.i, i32 %and.i.i.us.i, i32 %add.i.i.us.i seq_cst seq_cst
  %13 = extractvalue { i32, i1 } %12, 1
  br i1 %13, label %do.end.i.us.i, label %while.body.i.i.us.i.backedge

do.end.i.us.i:                                    ; preds = %while.body.i.i.us.i
  %14 = atomicrmw add i32* %cursor.i.i, i32 %and seq_cst
  %add.i.us.i = add i32 %14, %and
  %cmp2.i.us.i = icmp ugt i32 %add.i.us.i, 1048576
  br i1 %cmp2.i.us.i, label %while.body.us.i, label %_ZN6Halide7Runtime8Internal11TraceBuffer14acquire_packetEPvij.exit

while.body.us.i:                                  ; preds = %do.end.i.us.i
  %15 = atomicrmw add i32* %overage.i.i, i32 %and seq_cst
  %16 = atomicrmw sub i32* %lock.i.i.i, i32 1 seq_cst
  br label %while.body.i.i5.us.i

while.body.i.i5.us.i:                             ; preds = %while.body.i.i5.us.i, %while.body.us.i
  %17 = atomicrmw or i32* %lock.i.i.i, i32 1073741824 seq_cst
  %18 = cmpxchg i32* %lock.i.i.i, i32 1073741824, i32 -2147483648 seq_cst seq_cst
  %19 = extractvalue { i32, i1 } %18, 1
  br i1 %19, label %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.us.i, label %while.body.i.i5.us.i

_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.us.i: ; preds = %while.body.i.i5.us.i
  %20 = load i32, i32* %cursor.i.i, align 4, !tbaa !150
  %tobool.not.i.us.i = icmp eq i32 %20, 0
  br i1 %tobool.not.i.us.i, label %do.end.critedge.i.us.i, label %if.then.i9.us.i

if.then.i9.us.i:                                  ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.us.i
  %21 = load i32, i32* %overage.i.i, align 4, !tbaa !152
  %sub.i.us.i = sub i32 %20, %21
  store i32 %sub.i.us.i, i32* %cursor.i.i, align 4, !tbaa !150
  %conv.i.us.i = zext i32 %sub.i.us.i to i64
  %call.i.us.i = tail call i64 @write(i32 %call, i8* nonnull %arraydecay.i.i, i64 %conv.i.us.i) #14
  %conv5.i.us.i = trunc i64 %call.i.us.i to i32
  %cmp.i8.us.i = icmp eq i32 %sub.i.us.i, %conv5.i.us.i
  store <2 x i32> zeroinitializer, <2 x i32>* %10, align 4, !tbaa !41
  %22 = atomicrmw and i32* %lock.i.i.i, i32 2147483647 seq_cst
  br i1 %cmp.i8.us.i, label %while.body.i.i.us.i.backedge, label %if.then10.i.us.i

if.then10.i.us.i:                                 ; preds = %if.then.i9.us.i
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([144 x i8], [144 x i8]* @.str.32, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %while.body.i.i.us.i.backedge

do.end.critedge.i.us.i:                           ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.us.i
  %23 = atomicrmw and i32* %lock.i.i.i, i32 2147483647 seq_cst
  br label %while.body.i.i.us.i.backedge

while.body.i.i.us.i.backedge:                     ; preds = %do.end.critedge.i.us.i, %if.then10.i.us.i, %if.then.i9.us.i, %while.body.i.i.us.i
  br label %while.body.i.i.us.i, !llvm.loop !153

while.body.i.i.i:                                 ; preds = %while.body.i.i.i.backedge, %while.body.i.i.i.preheader
  %24 = load volatile i32, i32* %lock.i.i.i, align 4, !tbaa !148
  %and.i.i.i = and i32 %24, 1073741823
  %add.i.i.i = add nuw nsw i32 %and.i.i.i, 1
  %25 = cmpxchg i32* %lock.i.i.i, i32 %and.i.i.i, i32 %add.i.i.i seq_cst seq_cst
  %26 = extractvalue { i32, i1 } %25, 1
  br i1 %26, label %if.then.i.i, label %while.body.i.i.i.backedge

if.then.i.i:                                      ; preds = %while.body.i.i.i
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([120 x i8], [120 x i8]* @.str.31, i64 0, i64 0)) #14
  tail call void @abort() #14
  %27 = atomicrmw add i32* %cursor.i.i, i32 %and seq_cst
  %add.i.i400 = add i32 %27, %and
  %cmp2.i.i = icmp ugt i32 %add.i.i400, 1048576
  br i1 %cmp2.i.i, label %while.body.i, label %_ZN6Halide7Runtime8Internal11TraceBuffer14acquire_packetEPvij.exit

while.body.i:                                     ; preds = %if.then.i.i
  %28 = atomicrmw add i32* %overage.i.i, i32 %and seq_cst
  %29 = atomicrmw sub i32* %lock.i.i.i, i32 1 seq_cst
  br label %while.body.i.i5.i

while.body.i.i5.i:                                ; preds = %while.body.i.i5.i, %while.body.i
  %30 = atomicrmw or i32* %lock.i.i.i, i32 1073741824 seq_cst
  %31 = cmpxchg i32* %lock.i.i.i, i32 1073741824, i32 -2147483648 seq_cst seq_cst
  %32 = extractvalue { i32, i1 } %31, 1
  br i1 %32, label %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.i, label %while.body.i.i5.i

_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.i: ; preds = %while.body.i.i5.i
  %33 = load i32, i32* %cursor.i.i, align 4, !tbaa !150
  %tobool.not.i.i = icmp eq i32 %33, 0
  br i1 %tobool.not.i.i, label %do.end.critedge.i.i, label %if.then.i9.i

if.then.i9.i:                                     ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.i
  %34 = load i32, i32* %overage.i.i, align 4, !tbaa !152
  %sub.i.i = sub i32 %33, %34
  store i32 %sub.i.i, i32* %cursor.i.i, align 4, !tbaa !150
  %conv.i.i = zext i32 %sub.i.i to i64
  %call.i.i401 = tail call i64 @write(i32 %call, i8* nonnull %arraydecay.i.i, i64 %conv.i.i) #14
  %conv5.i.i = trunc i64 %call.i.i401 to i32
  %cmp.i8.i = icmp eq i32 %sub.i.i, %conv5.i.i
  store <2 x i32> zeroinitializer, <2 x i32>* %9, align 4, !tbaa !41
  %35 = atomicrmw and i32* %lock.i.i.i, i32 2147483647 seq_cst
  br i1 %cmp.i8.i, label %while.body.i.i.i.backedge, label %if.then10.i.i

if.then10.i.i:                                    ; preds = %if.then.i9.i
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([144 x i8], [144 x i8]* @.str.32, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %while.body.i.i.i.backedge

do.end.critedge.i.i:                              ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.i
  %36 = atomicrmw and i32* %lock.i.i.i, i32 2147483647 seq_cst
  br label %while.body.i.i.i.backedge

while.body.i.i.i.backedge:                        ; preds = %do.end.critedge.i.i, %if.then10.i.i, %if.then.i9.i, %while.body.i.i.i
  br label %while.body.i.i.i, !llvm.loop !153

_ZN6Halide7Runtime8Internal11TraceBuffer14acquire_packetEPvij.exit: ; preds = %if.then.i.i, %do.end.i.us.i
  %.lcssa.i = phi i32 [ %14, %do.end.i.us.i ], [ %27, %if.then.i.i ]
  %idx.ext.i.i = zext i32 %.lcssa.i to i64
  %add.ptr.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %8, i64 0, i32 3, i64 %idx.ext.i.i
  %cmp16 = icmp ugt i32 %and, 4096
  br i1 %cmp16, label %if.then17, label %if.end

if.then17:                                        ; preds = %_ZN6Halide7Runtime8Internal11TraceBuffer14acquire_packetEPvij.exit
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i404 = icmp eq i8* %call.i, null
  br i1 %tobool.not.i404, label %if.then.i415, label %if.else.i421

if.then.i415:                                     ; preds = %if.then17
  %conv.i4071 = zext i32 %and to i64
  %call.i4082 = tail call i8* @halide_uint64_to_string(i8* null, i8* null, i64 %conv.i4071, i32 1) #14
  %call.i41117 = tail call i8* @halide_string_to_string(i8* %call.i4082, i8* null, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #14
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE0ELy1024EED2Ev.exit

if.else.i421:                                     ; preds = %if.then17
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %conv.i4073 = zext i32 %and to i64
  %call.i4084 = tail call i8* @halide_uint64_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i64 %conv.i4073, i32 1) #14
  %call.i411 = tail call i8* @halide_string_to_string(i8* %call.i4084, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #14
  %sub.ptr.lhs.cast.i.i416 = ptrtoint i8* %call.i411 to i64
  %sub.ptr.rhs.cast.i.i417 = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i418 = sub i64 1, %sub.ptr.rhs.cast.i.i417
  %add.i.i419 = add i64 %sub.ptr.sub.i.i418, %sub.ptr.lhs.cast.i.i416
  %call.i.i420 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* null, i8* nonnull %call.i, i64 %add.i.i419) #14
  tail call void @halide_print(i8* null, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE0ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE0ELy1024EED2Ev.exit: ; preds = %if.else.i421, %if.then.i415
  tail call void @free(i8* %call.i) #14
  br label %if.end

if.end:                                           ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE0ELy1024EED2Ev.exit, %_ZN6Halide7Runtime8Internal11TraceBuffer14acquire_packetEPvij.exit
  %size = bitcast i8* %add.ptr.i.i to i32*
  store i32 %and, i32* %size, align 4, !tbaa !154
  %id = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 4
  %37 = bitcast i8* %id to i32*
  store i32 %0, i32* %37, align 4, !tbaa !156
  %38 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 8
  %39 = bitcast %struct.halide_type_t* %type to i32*
  %40 = bitcast i8* %38 to i32*
  %41 = load i32, i32* %39, align 8
  store i32 %41, i32* %40, align 4
  %event = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 5
  %event22 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 12
  %42 = bitcast i32* %event to <4 x i32>*
  %43 = load <4 x i32>, <4 x i32>* %42, align 4, !tbaa !18
  %dimensions26 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 24
  %44 = bitcast i8* %dimensions26 to i32*
  %45 = bitcast i8* %event22 to <4 x i32>*
  store <4 x i32> %43, <4 x i32>* %45, align 4, !tbaa !18
  %coordinates = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 2
  %46 = load i32*, i32** %coordinates, align 8, !tbaa !157
  %tobool27.not = icmp eq i32* %46, null
  br i1 %tobool27.not, label %if.end33, label %if.then28

if.then28:                                        ; preds = %if.end
  %47 = bitcast i32* %46 to i8*
  %48 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 28
  %conv31 = zext i32 %mul3 to i64
  %call32 = tail call i8* @memcpy(i8* nonnull %48, i8* nonnull %47, i64 %conv31) #14
  br label %if.end33

if.end33:                                         ; preds = %if.then28, %if.end
  %value = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 1
  %49 = load i8*, i8** %value, align 8, !tbaa !158
  %tobool34.not = icmp eq i8* %49, null
  br i1 %tobool34.not, label %if.end40, label %if.then35

if.then35:                                        ; preds = %if.end33
  %50 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 28
  %51 = bitcast i8* %50 to i32*
  %52 = load i32, i32* %44, align 4, !tbaa !159
  %idx.ext.i = sext i32 %52 to i64
  %add.ptr.i424 = getelementptr inbounds i32, i32* %51, i64 %idx.ext.i
  %53 = bitcast i32* %add.ptr.i424 to i8*
  %conv38 = zext i32 %mul to i64
  %call39 = tail call i8* @memcpy(i8* nonnull %53, i8* nonnull %49, i64 %conv38) #14
  br label %if.end40

if.end40:                                         ; preds = %if.end33, %if.then35
  %54 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 28
  %55 = bitcast i8* %54 to i32*
  %56 = load i32, i32* %44, align 4, !tbaa !159
  %idx.ext.i.i425 = sext i32 %56 to i64
  %add.ptr.i.i426 = getelementptr inbounds i32, i32* %55, i64 %idx.ext.i.i425
  %57 = bitcast i32* %add.ptr.i.i426 to i8*
  %lanes.i = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 10
  %58 = bitcast i8* %lanes.i to i16*
  %59 = load i16, i16* %58, align 2, !tbaa !160
  %conv.i427 = zext i16 %59 to i32
  %60 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 9
  %61 = load i8, i8* %60, align 1, !tbaa !144
  %conv.i.i428 = zext i8 %61 to i32
  %add.i.i429 = add nuw nsw i32 %conv.i.i428, 7
  %div.i.i = lshr i32 %add.i.i429, 3
  %mul.i = mul nuw nsw i32 %div.i.i, %conv.i427
  %idx.ext.i430 = zext i32 %mul.i to i64
  %add.ptr.i431 = getelementptr inbounds i8, i8* %57, i64 %idx.ext.i430
  %62 = load i8*, i8** %func, align 8, !tbaa !146
  %conv43 = zext i32 %conv5 to i64
  %call44 = tail call i8* @memcpy(i8* nonnull %add.ptr.i431, i8* %62, i64 %conv43) #14
  %63 = load i32, i32* %44, align 4, !tbaa !159
  %idx.ext.i.i.i = sext i32 %63 to i64
  %add.ptr.i.i.i = getelementptr inbounds i32, i32* %55, i64 %idx.ext.i.i.i
  %64 = bitcast i32* %add.ptr.i.i.i to i8*
  %65 = load i16, i16* %58, align 2, !tbaa !160
  %conv.i.i432 = zext i16 %65 to i32
  %66 = load i8, i8* %60, align 1, !tbaa !144
  %conv.i.i.i = zext i8 %66 to i32
  %add.i.i.i433 = add nuw nsw i32 %conv.i.i.i, 7
  %div.i.i.i = lshr i32 %add.i.i.i433, 3
  %mul.i.i = mul nuw nsw i32 %div.i.i.i, %conv.i.i432
  %idx.ext.i.i434 = zext i32 %mul.i.i to i64
  %add.ptr.i.i435 = getelementptr inbounds i8, i8* %64, i64 %idx.ext.i.i434
  br label %while.cond.i437

while.cond.i437:                                  ; preds = %while.cond.i437, %if.end40
  %f.0.i = phi i8* [ %add.ptr.i.i435, %if.end40 ], [ %incdec.ptr.i, %while.cond.i437 ]
  %incdec.ptr.i = getelementptr inbounds i8, i8* %f.0.i, i64 1
  %67 = load i8, i8* %f.0.i, align 1, !tbaa !18
  %tobool.not.i436 = icmp eq i8 %67, 0
  br i1 %tobool.not.i436, label %_ZN21halide_trace_packet_t9trace_tagEv.exit, label %while.cond.i437, !llvm.loop !161

_ZN21halide_trace_packet_t9trace_tagEv.exit:      ; preds = %while.cond.i437
  %68 = load i8*, i8** %trace_tag, align 8, !tbaa !147
  %tobool47.not = icmp eq i8* %68, null
  %spec.select = select i1 %tobool47.not, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1.10, i64 0, i64 0), i8* %68
  %conv53 = zext i32 %cond to i64
  %call54 = tail call i8* @memcpy(i8* nonnull %incdec.ptr.i, i8* %spec.select, i64 %conv53) #14
  %69 = load %"class.Halide::Runtime::Internal::TraceBuffer"*, %"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE, align 8, !tbaa !14
  fence seq_cst
  %lock.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %69, i64 0, i32 0, i32 0
  %70 = atomicrmw sub i32* %lock.i.i, i32 1 seq_cst
  %71 = load i32, i32* %event, align 4, !tbaa !162
  %cmp56 = icmp eq i32 %71, 9
  br i1 %cmp56, label %if.then57, label %if.end277

if.then57:                                        ; preds = %_ZN21halide_trace_packet_t9trace_tagEv.exit
  %72 = load %"class.Halide::Runtime::Internal::TraceBuffer"*, %"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE, align 8, !tbaa !14
  %lock.i.i438 = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %72, i64 0, i32 0, i32 0
  br label %while.body.i.i

while.body.i.i:                                   ; preds = %while.body.i.i, %if.then57
  %73 = atomicrmw or i32* %lock.i.i438, i32 1073741824 seq_cst
  %74 = cmpxchg i32* %lock.i.i438, i32 1073741824, i32 -2147483648 seq_cst seq_cst
  %75 = extractvalue { i32, i1 } %74, 1
  br i1 %75, label %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i, label %while.body.i.i

_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i: ; preds = %while.body.i.i
  %cursor.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %72, i64 0, i32 1
  %76 = load i32, i32* %cursor.i, align 4, !tbaa !150
  %tobool.not.i439 = icmp eq i32 %76, 0
  br i1 %tobool.not.i439, label %do.end.critedge.i, label %if.then.i442

if.then.i442:                                     ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i
  %overage.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %72, i64 0, i32 2
  %77 = load i32, i32* %overage.i, align 4, !tbaa !152
  %sub.i = sub i32 %76, %77
  store i32 %sub.i, i32* %cursor.i, align 4, !tbaa !150
  %arraydecay.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %72, i64 0, i32 3, i64 0
  %conv.i440 = zext i32 %sub.i to i64
  %call.i441 = tail call i64 @write(i32 %call, i8* nonnull %arraydecay.i, i64 %conv.i440) #14
  %conv5.i = trunc i64 %call.i441 to i32
  %cmp.i = icmp eq i32 %sub.i, %conv5.i
  %78 = bitcast i32* %cursor.i to <2 x i32>*
  store <2 x i32> zeroinitializer, <2 x i32>* %78, align 4, !tbaa !41
  %79 = atomicrmw and i32* %lock.i.i438, i32 2147483647 seq_cst
  br i1 %cmp.i, label %if.end277, label %if.then10.i

if.then10.i:                                      ; preds = %if.then.i442
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([144 x i8], [144 x i8]* @.str.32, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %if.end277

do.end.critedge.i:                                ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i
  %80 = atomicrmw and i32* %lock.i.i438, i32 2147483647 seq_cst
  br label %if.end277

if.else:                                          ; preds = %entry
  %call.i445 = tail call i8* @malloc(i64 4096) #14
  %tobool.not.i448 = icmp eq i8* %call.i445, null
  br i1 %tobool.not.i448, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EEC2EPvPc.exit, label %if.then6.i451

if.then6.i451:                                    ; preds = %if.else
  %add.ptr.i449 = getelementptr inbounds i8, i8* %call.i445, i64 4095
  store i8 0, i8* %add.ptr.i449, align 1, !tbaa !18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EEC2EPvPc.exit: ; preds = %if.then6.i451, %if.else
  %ss.sroa.74.0 = phi i8* [ %add.ptr.i449, %if.then6.i451 ], [ null, %if.else ]
  %bits = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4, i32 1
  %81 = load i8, i8* %bits, align 1, !tbaa !163
  %conv60 = zext i8 %81 to i32
  br label %while.cond

while.cond:                                       ; preds = %while.cond, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EEC2EPvPc.exit
  %print_bits.0 = phi i32 [ 8, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EEC2EPvPc.exit ], [ %shl, %while.cond ]
  %cmp61 = icmp slt i32 %print_bits.0, %conv60
  %shl = shl i32 %print_bits.0, 1
  br i1 %cmp61, label %while.cond, label %do.body, !llvm.loop !164

do.body:                                          ; preds = %while.cond
  %cmp62 = icmp slt i32 %print_bits.0, 65
  br i1 %cmp62, label %do.end, label %if.then63

if.then63:                                        ; preds = %do.body
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([140 x i8], [140 x i8]* @.str.2.11, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %do.end

do.end:                                           ; preds = %if.then63, %do.body
  %event65 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 5
  %82 = load i32, i32* %event65, align 4, !tbaa !162
  %cmp66 = icmp slt i32 %82, 2
  %idxprom = zext i32 %82 to i64
  %arrayidx = getelementptr inbounds [11 x i8*], [11 x i8*]* @__const.halide_default_trace.event_types, i64 0, i64 %idxprom
  %83 = load i8*, i8** %arrayidx, align 8, !tbaa !14
  %call.i456 = tail call i8* @halide_string_to_string(i8* %call.i445, i8* %ss.sroa.74.0, i8* %83) #14
  %call.i459 = tail call i8* @halide_string_to_string(i8* %call.i456, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #14
  %func70 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 0
  %84 = load i8*, i8** %func70, align 8, !tbaa !146
  %call.i462 = tail call i8* @halide_string_to_string(i8* %call.i459, i8* %ss.sroa.74.0, i8* %84) #14
  %call.i465 = tail call i8* @halide_string_to_string(i8* %call.i462, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #14
  %value_index73 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 7
  %85 = load i32, i32* %value_index73, align 4, !tbaa !165
  %conv.i468 = sext i32 %85 to i64
  %call.i469 = tail call i8* @halide_int64_to_string(i8* %call.i465, i8* %ss.sroa.74.0, i64 %conv.i468, i32 1) #14
  %call.i472 = tail call i8* @halide_string_to_string(i8* %call.i469, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.22.179, i64 0, i64 0)) #14
  %lanes77 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4, i32 2
  %86 = load i16, i16* %lanes77, align 2, !tbaa !138
  %cmp79 = icmp ugt i16 %86, 1
  br i1 %cmp79, label %if.then80, label %if.end82

if.then80:                                        ; preds = %do.end
  %call.i475 = tail call i8* @halide_string_to_string(i8* %call.i472, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.17, i64 0, i64 0)) #14
  br label %if.end82

if.end82:                                         ; preds = %if.then80, %do.end
  %ss.sroa.7.0 = phi i8* [ %call.i475, %if.then80 ], [ %call.i472, %do.end ]
  %dimensions83 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 8
  %87 = load i32, i32* %dimensions83, align 8, !tbaa !145
  %cmp84660 = icmp sgt i32 %87, 0
  br i1 %cmp84660, label %if.end100.peel, label %for.cond.cleanup

if.end100.peel:                                   ; preds = %if.end82
  %coordinates101 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 2
  %.pre = load i32*, i32** %coordinates101, align 8, !tbaa !157
  %.pre673 = load i32, i32* %.pre, align 4, !tbaa !41
  %conv.i484.peel = sext i32 %.pre673 to i64
  %call.i485.peel = tail call i8* @halide_int64_to_string(i8* %ss.sroa.7.0, i8* %ss.sroa.74.0, i64 %conv.i484.peel, i32 1) #14
  %88 = load i32, i32* %dimensions83, align 8, !tbaa !145
  %cmp84.peel = icmp sgt i32 %88, 1
  br i1 %cmp84.peel, label %if.then86, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %if.end100, %if.end100.peel, %if.end82
  %ss.sroa.7.1.lcssa = phi i8* [ %ss.sroa.7.0, %if.end82 ], [ %call.i485.peel, %if.end100.peel ], [ %call.i485, %if.end100 ]
  %89 = load i16, i16* %lanes77, align 2, !tbaa !138
  %cmp108 = icmp ugt i16 %89, 1
  %.sink684 = select i1 %cmp108, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.20, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.119, i64 0, i64 0)
  %call.i491 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.1.lcssa, i8* %ss.sroa.74.0, i8* %.sink684) #14
  br i1 %cmp66, label %if.then115, label %if.end263

if.then86:                                        ; preds = %if.end100.peel, %if.end100
  %indvars.iv670 = phi i64 [ %indvars.iv.next671, %if.end100 ], [ 1, %if.end100.peel ]
  %ss.sroa.7.1661 = phi i8* [ %call.i485, %if.end100 ], [ %call.i485.peel, %if.end100.peel ]
  %90 = load i16, i16* %lanes77, align 2, !tbaa !138
  %cmp90 = icmp ugt i16 %90, 1
  br i1 %cmp90, label %land.lhs.true, label %if.else97.split

land.lhs.true:                                    ; preds = %if.then86
  %conv89 = zext i16 %90 to i32
  %91 = trunc i64 %indvars.iv670 to i32
  %rem = urem i32 %91, %conv89
  %cmp94 = icmp eq i32 %rem, 0
  br i1 %cmp94, label %if.end100, label %if.else97.split

if.else97.split:                                  ; preds = %if.then86, %land.lhs.true
  br label %if.end100

if.end100:                                        ; preds = %land.lhs.true, %if.else97.split
  %.sink = phi i8* [ getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0), %if.else97.split ], [ getelementptr inbounds ([5 x i8], [5 x i8]* @.str.18, i64 0, i64 0), %land.lhs.true ]
  %call.i4786 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.1661, i8* %ss.sroa.74.0, i8* %.sink) #14
  %92 = load i32*, i32** %coordinates101, align 8, !tbaa !157
  %arrayidx103 = getelementptr inbounds i32, i32* %92, i64 %indvars.iv670
  %93 = load i32, i32* %arrayidx103, align 4, !tbaa !41
  %conv.i484 = sext i32 %93 to i64
  %call.i485 = tail call i8* @halide_int64_to_string(i8* %call.i4786, i8* %ss.sroa.74.0, i64 %conv.i484, i32 1) #14
  %indvars.iv.next671 = add nuw nsw i64 %indvars.iv670, 1
  %94 = load i32, i32* %dimensions83, align 8, !tbaa !145
  %95 = sext i32 %94 to i64
  %cmp84 = icmp slt i64 %indvars.iv.next671, %95
  br i1 %cmp84, label %if.then86, label %for.cond.cleanup, !llvm.loop !166

if.then115:                                       ; preds = %for.cond.cleanup
  %96 = load i16, i16* %lanes77, align 2, !tbaa !138
  %cmp119 = icmp ugt i16 %96, 1
  %.sink685 = select i1 %cmp119, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.22, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.23, i64 0, i64 0)
  %call.i497 = tail call i8* @halide_string_to_string(i8* %call.i491, i8* %ss.sroa.74.0, i8* %.sink685) #14
  %97 = load i16, i16* %lanes77, align 2, !tbaa !138
  %cmp130655.not = icmp eq i16 %97, 0
  br i1 %cmp130655.not, label %if.end263, label %if.end136.peel

if.end136.peel:                                   ; preds = %if.then115
  %code = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4, i32 0
  %value245 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 1
  %98 = bitcast i8** %value245 to i8***
  %cmp214 = icmp sgt i32 %print_bits.0, 15
  %99 = bitcast i8** %value245 to i16**
  %100 = bitcast i8** %value245 to float**
  %101 = bitcast i8** %value245 to double**
  %102 = bitcast i8** %value245 to i32**
  %103 = bitcast i8** %value245 to i64**
  %.pre674 = load i8, i8* %code, align 8, !tbaa !168
  switch i8 %.pre674, label %for.inc253.peel [
    i8 0, label %if.then140.peel
    i8 1, label %if.then176.peel
    i8 2, label %do.body213.peel
    i8 3, label %if.then244.peel
  ]

if.then244.peel:                                  ; preds = %if.end136.peel
  %104 = load i8**, i8*** %98, align 8, !tbaa !158
  %105 = load i8*, i8** %104, align 8, !tbaa !14
  %call.i543.peel = tail call i8* @halide_pointer_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i8* %105) #14
  br label %for.inc253.peel

do.body213.peel:                                  ; preds = %if.end136.peel
  br i1 %cmp214, label %do.end218.peel, label %if.then215.peel

if.then215.peel:                                  ; preds = %do.body213.peel
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([142 x i8], [142 x i8]* @.str.24, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %do.end218.peel

do.end218.peel:                                   ; preds = %if.then215.peel, %do.body213.peel
  switch i32 %print_bits.0, label %if.else232.peel [
    i32 32, label %if.then220.peel
    i32 16, label %if.then227.peel
  ]

if.then227.peel:                                  ; preds = %do.end218.peel
  %106 = load i16*, i16** %99, align 8, !tbaa !158
  %107 = load i16, i16* %106, align 2, !tbaa !169
  %call.i535.peel = tail call double @halide_float16_bits_to_double(i16 zeroext %107) #14
  %call2.i.peel = tail call i8* @halide_double_to_string(i8* %call.i497, i8* %ss.sroa.74.0, double %call.i535.peel, i32 1) #14
  br label %for.inc253.peel

if.then220.peel:                                  ; preds = %do.end218.peel
  %108 = load float*, float** %100, align 8, !tbaa !158
  %109 = load float, float* %108, align 4, !tbaa !170
  %conv.i533.peel = fpext float %109 to double
  %call.i534.peel = tail call i8* @halide_double_to_string(i8* %call.i497, i8* %ss.sroa.74.0, double %conv.i533.peel, i32 0) #14
  br label %for.inc253.peel

if.else232.peel:                                  ; preds = %do.end218.peel
  %110 = load double*, double** %101, align 8, !tbaa !158
  %111 = load double, double* %110, align 8, !tbaa !172
  %call.i540.peel = tail call i8* @halide_double_to_string(i8* %call.i497, i8* %ss.sroa.74.0, double %111, i32 1) #14
  br label %for.inc253.peel

if.then176.peel:                                  ; preds = %if.end136.peel
  switch i32 %print_bits.0, label %if.else199.peel [
    i32 8, label %if.then178.peel
    i32 16, label %if.then186.peel
    i32 32, label %if.then194.peel
  ]

if.then194.peel:                                  ; preds = %if.then176.peel
  %112 = load i32*, i32** %102, align 8, !tbaa !158
  %113 = load i32, i32* %112, align 4, !tbaa !41
  %conv.i526.peel = zext i32 %113 to i64
  %call.i527.peel = tail call i8* @halide_uint64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i526.peel, i32 1) #14
  br label %for.inc253.peel

if.then186.peel:                                  ; preds = %if.then176.peel
  %114 = load i16*, i16** %99, align 8, !tbaa !158
  %115 = load i16, i16* %114, align 2, !tbaa !169
  %conv.i522.peel = zext i16 %115 to i64
  %call.i523.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i522.peel, i32 1) #14
  br label %for.inc253.peel

if.then178.peel:                                  ; preds = %if.then176.peel
  %116 = load i8*, i8** %value245, align 8, !tbaa !158
  %117 = load i8, i8* %116, align 1, !tbaa !18
  %conv.i518.peel = zext i8 %117 to i64
  %call.i519.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i518.peel, i32 1) #14
  br label %for.inc253.peel

if.else199.peel:                                  ; preds = %if.then176.peel
  %118 = load i64*, i64** %103, align 8, !tbaa !158
  %119 = load i64, i64* %118, align 8, !tbaa !22
  %call.i530.peel = tail call i8* @halide_uint64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %119, i32 1) #14
  br label %for.inc253.peel

if.then140.peel:                                  ; preds = %if.end136.peel
  switch i32 %print_bits.0, label %if.else163.peel [
    i32 8, label %if.then142.peel
    i32 16, label %if.then150.peel
    i32 32, label %if.then158.peel
  ]

if.then158.peel:                                  ; preds = %if.then140.peel
  %120 = load i32*, i32** %102, align 8, !tbaa !158
  %121 = load i32, i32* %120, align 4, !tbaa !41
  %conv.i511.peel = sext i32 %121 to i64
  %call.i512.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i511.peel, i32 1) #14
  br label %for.inc253.peel

if.then150.peel:                                  ; preds = %if.then140.peel
  %122 = load i16*, i16** %99, align 8, !tbaa !158
  %123 = load i16, i16* %122, align 2, !tbaa !169
  %conv.i507.peel = sext i16 %123 to i64
  %call.i508.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i507.peel, i32 1) #14
  br label %for.inc253.peel

if.then142.peel:                                  ; preds = %if.then140.peel
  %124 = load i8*, i8** %value245, align 8, !tbaa !158
  %125 = load i8, i8* %124, align 1, !tbaa !18
  %conv.i503.peel = sext i8 %125 to i64
  %call.i504.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i503.peel, i32 1) #14
  br label %for.inc253.peel

if.else163.peel:                                  ; preds = %if.then140.peel
  %126 = load i64*, i64** %103, align 8, !tbaa !158
  %127 = load i64, i64* %126, align 8, !tbaa !22
  %call.i515.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %127, i32 1) #14
  br label %for.inc253.peel

for.inc253.peel:                                  ; preds = %if.else163.peel, %if.then142.peel, %if.then150.peel, %if.then158.peel, %if.else199.peel, %if.then178.peel, %if.then186.peel, %if.then194.peel, %if.else232.peel, %if.then220.peel, %if.then227.peel, %if.then244.peel, %if.end136.peel
  %ss.sroa.7.7.peel = phi i8* [ %call.i497, %if.end136.peel ], [ %call.i543.peel, %if.then244.peel ], [ %call.i540.peel, %if.else232.peel ], [ %call2.i.peel, %if.then227.peel ], [ %call.i534.peel, %if.then220.peel ], [ %call.i530.peel, %if.else199.peel ], [ %call.i527.peel, %if.then194.peel ], [ %call.i523.peel, %if.then186.peel ], [ %call.i519.peel, %if.then178.peel ], [ %call.i515.peel, %if.else163.peel ], [ %call.i512.peel, %if.then158.peel ], [ %call.i508.peel, %if.then150.peel ], [ %call.i504.peel, %if.then142.peel ]
  %128 = load i16, i16* %lanes77, align 2, !tbaa !138
  %cmp130.peel = icmp ugt i16 %128, 1
  br i1 %cmp130.peel, label %if.end136, label %if.end263

for.cond.cleanup131:                              ; preds = %for.inc253
  %cmp259 = icmp ugt i16 %154, 1
  br i1 %cmp259, label %if.then260, label %if.end263

if.end136:                                        ; preds = %for.inc253.peel, %for.inc253
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc253 ], [ 1, %for.inc253.peel ]
  %ss.sroa.7.5656 = phi i8* [ %ss.sroa.7.7, %for.inc253 ], [ %ss.sroa.7.7.peel, %for.inc253.peel ]
  %call.i500 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.5656, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #14
  %129 = load i8, i8* %code, align 8, !tbaa !168
  switch i8 %129, label %for.inc253 [
    i8 0, label %if.then140
    i8 1, label %if.then176
    i8 2, label %do.body213
    i8 3, label %if.then244
  ]

if.then140:                                       ; preds = %if.end136
  switch i32 %print_bits.0, label %if.else163 [
    i32 8, label %if.then142
    i32 16, label %if.then150
    i32 32, label %if.then158
  ]

if.then142:                                       ; preds = %if.then140
  %130 = load i8*, i8** %value245, align 8, !tbaa !158
  %arrayidx145 = getelementptr inbounds i8, i8* %130, i64 %indvars.iv
  %131 = load i8, i8* %arrayidx145, align 1, !tbaa !18
  %conv.i503 = sext i8 %131 to i64
  %call.i504 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i503, i32 1) #14
  br label %for.inc253

if.then150:                                       ; preds = %if.then140
  %132 = load i16*, i16** %99, align 8, !tbaa !158
  %arrayidx153 = getelementptr inbounds i16, i16* %132, i64 %indvars.iv
  %133 = load i16, i16* %arrayidx153, align 2, !tbaa !169
  %conv.i507 = sext i16 %133 to i64
  %call.i508 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i507, i32 1) #14
  br label %for.inc253

if.then158:                                       ; preds = %if.then140
  %134 = load i32*, i32** %102, align 8, !tbaa !158
  %arrayidx161 = getelementptr inbounds i32, i32* %134, i64 %indvars.iv
  %135 = load i32, i32* %arrayidx161, align 4, !tbaa !41
  %conv.i511 = sext i32 %135 to i64
  %call.i512 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i511, i32 1) #14
  br label %for.inc253

if.else163:                                       ; preds = %if.then140
  %136 = load i64*, i64** %103, align 8, !tbaa !158
  %arrayidx166 = getelementptr inbounds i64, i64* %136, i64 %indvars.iv
  %137 = load i64, i64* %arrayidx166, align 8, !tbaa !22
  %call.i515 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %137, i32 1) #14
  br label %for.inc253

if.then176:                                       ; preds = %if.end136
  switch i32 %print_bits.0, label %if.else199 [
    i32 8, label %if.then178
    i32 16, label %if.then186
    i32 32, label %if.then194
  ]

if.then178:                                       ; preds = %if.then176
  %138 = load i8*, i8** %value245, align 8, !tbaa !158
  %arrayidx181 = getelementptr inbounds i8, i8* %138, i64 %indvars.iv
  %139 = load i8, i8* %arrayidx181, align 1, !tbaa !18
  %conv.i518 = zext i8 %139 to i64
  %call.i519 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i518, i32 1) #14
  br label %for.inc253

if.then186:                                       ; preds = %if.then176
  %140 = load i16*, i16** %99, align 8, !tbaa !158
  %arrayidx189 = getelementptr inbounds i16, i16* %140, i64 %indvars.iv
  %141 = load i16, i16* %arrayidx189, align 2, !tbaa !169
  %conv.i522 = zext i16 %141 to i64
  %call.i523 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i522, i32 1) #14
  br label %for.inc253

if.then194:                                       ; preds = %if.then176
  %142 = load i32*, i32** %102, align 8, !tbaa !158
  %arrayidx197 = getelementptr inbounds i32, i32* %142, i64 %indvars.iv
  %143 = load i32, i32* %arrayidx197, align 4, !tbaa !41
  %conv.i526 = zext i32 %143 to i64
  %call.i527 = tail call i8* @halide_uint64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i526, i32 1) #14
  br label %for.inc253

if.else199:                                       ; preds = %if.then176
  %144 = load i64*, i64** %103, align 8, !tbaa !158
  %arrayidx202 = getelementptr inbounds i64, i64* %144, i64 %indvars.iv
  %145 = load i64, i64* %arrayidx202, align 8, !tbaa !22
  %call.i530 = tail call i8* @halide_uint64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %145, i32 1) #14
  br label %for.inc253

do.body213:                                       ; preds = %if.end136
  br i1 %cmp214, label %do.end218, label %if.then215

if.then215:                                       ; preds = %do.body213
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([142 x i8], [142 x i8]* @.str.24, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %do.end218

do.end218:                                        ; preds = %if.then215, %do.body213
  switch i32 %print_bits.0, label %if.else232 [
    i32 32, label %if.then220
    i32 16, label %if.then227
  ]

if.then220:                                       ; preds = %do.end218
  %146 = load float*, float** %100, align 8, !tbaa !158
  %arrayidx223 = getelementptr inbounds float, float* %146, i64 %indvars.iv
  %147 = load float, float* %arrayidx223, align 4, !tbaa !170
  %conv.i533 = fpext float %147 to double
  %call.i534 = tail call i8* @halide_double_to_string(i8* %call.i500, i8* %ss.sroa.74.0, double %conv.i533, i32 0) #14
  br label %for.inc253

if.then227:                                       ; preds = %do.end218
  %148 = load i16*, i16** %99, align 8, !tbaa !158
  %arrayidx230 = getelementptr inbounds i16, i16* %148, i64 %indvars.iv
  %149 = load i16, i16* %arrayidx230, align 2, !tbaa !169
  %call.i535 = tail call double @halide_float16_bits_to_double(i16 zeroext %149) #14
  %call2.i = tail call i8* @halide_double_to_string(i8* %call.i500, i8* %ss.sroa.74.0, double %call.i535, i32 1) #14
  br label %for.inc253

if.else232:                                       ; preds = %do.end218
  %150 = load double*, double** %101, align 8, !tbaa !158
  %arrayidx235 = getelementptr inbounds double, double* %150, i64 %indvars.iv
  %151 = load double, double* %arrayidx235, align 8, !tbaa !172
  %call.i540 = tail call i8* @halide_double_to_string(i8* %call.i500, i8* %ss.sroa.74.0, double %151, i32 1) #14
  br label %for.inc253

if.then244:                                       ; preds = %if.end136
  %152 = load i8**, i8*** %98, align 8, !tbaa !158
  %arrayidx247 = getelementptr inbounds i8*, i8** %152, i64 %indvars.iv
  %153 = load i8*, i8** %arrayidx247, align 8, !tbaa !14
  %call.i543 = tail call i8* @halide_pointer_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i8* %153) #14
  br label %for.inc253

for.inc253:                                       ; preds = %if.then244, %if.else232, %if.then227, %if.then220, %if.else199, %if.then194, %if.then186, %if.then178, %if.else163, %if.then158, %if.then150, %if.then142, %if.end136
  %ss.sroa.7.7 = phi i8* [ %call.i500, %if.end136 ], [ %call.i543, %if.then244 ], [ %call.i540, %if.else232 ], [ %call2.i, %if.then227 ], [ %call.i534, %if.then220 ], [ %call.i530, %if.else199 ], [ %call.i527, %if.then194 ], [ %call.i523, %if.then186 ], [ %call.i519, %if.then178 ], [ %call.i515, %if.else163 ], [ %call.i512, %if.then158 ], [ %call.i508, %if.then150 ], [ %call.i504, %if.then142 ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %154 = load i16, i16* %lanes77, align 2, !tbaa !138
  %155 = zext i16 %154 to i64
  %cmp130 = icmp ult i64 %indvars.iv.next, %155
  br i1 %cmp130, label %if.end136, label %for.cond.cleanup131, !llvm.loop !174

if.then260:                                       ; preds = %for.cond.cleanup131
  %call.i546 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.7, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.25, i64 0, i64 0)) #14
  br label %if.end263

if.end263:                                        ; preds = %if.then260, %for.cond.cleanup131, %for.inc253.peel, %if.then115, %for.cond.cleanup
  %ss.sroa.7.8 = phi i8* [ %call.i546, %if.then260 ], [ %ss.sroa.7.7, %for.cond.cleanup131 ], [ %call.i491, %for.cond.cleanup ], [ %ss.sroa.7.7.peel, %for.inc253.peel ], [ %call.i497, %if.then115 ]
  %trace_tag264 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 3
  %156 = load i8*, i8** %trace_tag264, align 8, !tbaa !147
  %tobool265.not = icmp eq i8* %156, null
  br i1 %tobool265.not, label %if.end274, label %land.lhs.true266

land.lhs.true266:                                 ; preds = %if.end263
  %157 = load i8, i8* %156, align 1, !tbaa !18
  %tobool268.not = icmp eq i8 %157, 0
  br i1 %tobool268.not, label %if.end274, label %if.then269

if.then269:                                       ; preds = %land.lhs.true266
  %call.i549 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.8, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.26, i64 0, i64 0)) #14
  %158 = load i8*, i8** %trace_tag264, align 8, !tbaa !147
  %call.i552 = tail call i8* @halide_string_to_string(i8* %call.i549, i8* %ss.sroa.74.0, i8* %158) #14
  %call.i555 = tail call i8* @halide_string_to_string(i8* %call.i552, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.27, i64 0, i64 0)) #14
  br label %if.end274

if.end274:                                        ; preds = %if.then269, %land.lhs.true266, %if.end263
  %ss.sroa.7.9 = phi i8* [ %ss.sroa.7.8, %if.end263 ], [ %ss.sroa.7.8, %land.lhs.true266 ], [ %call.i555, %if.then269 ]
  %call.i558 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.9, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #14
  br label %while.cond.i560

while.cond.i560:                                  ; preds = %while.cond.i560, %if.end274
  %159 = atomicrmw volatile xchg i8* @_ZN6Halide7Runtime8Internal22halide_trace_file_lockE, i8 1 acquire
  %tobool.not.i559 = icmp eq i8 %159, 0
  br i1 %tobool.not.i559, label %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit, label %while.cond.i560, !llvm.loop !175

_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit: ; preds = %while.cond.i560
  br i1 %tobool.not.i448, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  store atomic volatile i8 0, i8* @_ZN6Halide7Runtime8Internal22halide_trace_file_lockE release, align 1
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %sub.ptr.lhs.cast.i.i563 = ptrtoint i8* %call.i558 to i64
  %sub.ptr.rhs.cast.i.i564 = ptrtoint i8* %call.i445 to i64
  %sub.ptr.sub.i.i565 = sub i64 1, %sub.ptr.rhs.cast.i.i564
  %add.i.i566 = add i64 %sub.ptr.sub.i.i565, %sub.ptr.lhs.cast.i.i563
  %call.i.i567 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i445, i64 %add.i.i566) #14
  tail call void @halide_print(i8* %user_context, i8* nonnull %call.i445) #14
  store atomic volatile i8 0, i8* @_ZN6Halide7Runtime8Internal22halide_trace_file_lockE release, align 1
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i445, i64 %add.i.i566) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i445) #14
  br label %if.end277

if.end277:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EED2Ev.exit, %do.end.critedge.i, %if.then10.i, %if.then.i442, %_ZN21halide_trace_packet_t9trace_tagEv.exit
  ret i32 %0
}

; Function Attrs: nounwind
define weak i32 @halide_get_trace_file(i8* %user_context) local_unnamed_addr #4 {
entry:
  br label %while.cond.i

while.cond.i:                                     ; preds = %while.cond.i, %entry
  %0 = atomicrmw volatile xchg i8* @_ZN6Halide7Runtime8Internal22halide_trace_file_lockE, i8 1 acquire
  %tobool.not.i = icmp eq i8 %0, 0
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit, label %while.cond.i, !llvm.loop !175

_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit: ; preds = %while.cond.i
  %1 = load i32, i32* @_ZN6Halide7Runtime8Internal17halide_trace_fileE, align 4, !tbaa !41
  %cmp = icmp slt i32 %1, 0
  br i1 %cmp, label %if.then, label %if.end11

if.then:                                          ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %call = tail call i8* @getenv(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.28, i64 0, i64 0)) #14
  %tobool.not = icmp eq i8* %call, null
  br i1 %tobool.not, label %if.else, label %if.then1

if.then1:                                         ; preds = %if.then
  %call2 = tail call i8* @fopen(i8* nonnull %call, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.29, i64 0, i64 0)) #14
  %tobool3.not = icmp eq i8* %call2, null
  br i1 %tobool3.not, label %if.then4, label %do.end

if.then4:                                         ; preds = %if.then1
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([139 x i8], [139 x i8]* @.str.30, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %do.end

do.end:                                           ; preds = %if.then4, %if.then1
  %call5 = tail call i32 @fileno(i8* %call2) #14
  tail call void @halide_set_trace_file(i32 %call5) #15
  store i8* %call2, i8** @_ZN6Halide7Runtime8Internal35halide_trace_file_internally_openedE, align 8, !tbaa !14
  %2 = load %"class.Halide::Runtime::Internal::TraceBuffer"*, %"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE, align 8, !tbaa !14
  %tobool6.not = icmp eq %"class.Halide::Runtime::Internal::TraceBuffer"* %2, null
  br i1 %tobool6.not, label %if.then7, label %if.end11

if.then7:                                         ; preds = %do.end
  %call8 = tail call i8* @malloc(i64 1048588) #14
  store i8* %call8, i8** bitcast (%"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE to i8**), align 8, !tbaa !14
  %cursor.i = getelementptr inbounds i8, i8* %call8, i64 4
  %3 = bitcast i8* %cursor.i to <2 x i32>*
  store <2 x i32> zeroinitializer, <2 x i32>* %3, align 4, !tbaa !41
  %lock.i.i = bitcast i8* %call8 to i32*
  store volatile i32 0, i32* %lock.i.i, align 4, !tbaa !148
  br label %if.end11

if.else:                                          ; preds = %if.then
  tail call void @halide_set_trace_file(i32 0) #15
  br label %if.end11

if.end11:                                         ; preds = %if.else, %if.then7, %do.end, %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %4 = load i32, i32* @_ZN6Halide7Runtime8Internal17halide_trace_fileE, align 4, !tbaa !41
  store atomic volatile i8 0, i8* @_ZN6Halide7Runtime8Internal22halide_trace_file_lockE release, align 1
  ret i32 %4
}

declare i8* @memcpy(i8*, i8*, i64) local_unnamed_addr #1

declare i8* @fopen(i8*, i8*) local_unnamed_addr #1

declare i32 @fileno(i8*) local_unnamed_addr #1

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_set_trace_file(i32 %fd) local_unnamed_addr #2 {
entry:
  store i32 %fd, i32* @_ZN6Halide7Runtime8Internal17halide_trace_fileE, align 4, !tbaa !41
  ret void
}

; Function Attrs: nounwind mustprogress
define weak void @halide_trace_cleanup() #0 {
entry:
  %call = tail call i32 @halide_shutdown_trace() #15
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_shutdown_trace() local_unnamed_addr #0 {
entry:
  %0 = load i8*, i8** @_ZN6Halide7Runtime8Internal35halide_trace_file_internally_openedE, align 8, !tbaa !14
  %tobool.not = icmp eq i8* %0, null
  br i1 %tobool.not, label %return, label %if.then

if.then:                                          ; preds = %entry
  %call = tail call i32 @fclose(i8* nonnull %0) #14
  store i32 0, i32* @_ZN6Halide7Runtime8Internal17halide_trace_fileE, align 4, !tbaa !41
  store i8 0, i8* @_ZN6Halide7Runtime8Internal29halide_trace_file_initializedE, align 1, !tbaa !19
  store i8* null, i8** @_ZN6Halide7Runtime8Internal35halide_trace_file_internally_openedE, align 8, !tbaa !14
  %1 = load %"class.Halide::Runtime::Internal::TraceBuffer"*, %"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE, align 8, !tbaa !14
  %tobool1.not = icmp eq %"class.Halide::Runtime::Internal::TraceBuffer"* %1, null
  br i1 %tobool1.not, label %return, label %if.then2

if.then2:                                         ; preds = %if.then
  %2 = bitcast %"class.Halide::Runtime::Internal::TraceBuffer"* %1 to i8*
  tail call void @free(i8* nonnull %2) #14
  br label %return

return:                                           ; preds = %if.then2, %if.then, %entry
  %retval.0 = phi i32 [ %call, %if.then2 ], [ %call, %if.then ], [ 0, %entry ]
  ret i32 %retval.0
}

declare i32 @fclose(i8*) local_unnamed_addr #1

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i8*, %struct.halide_trace_event_t*)* @halide_set_custom_trace(i32 (i8*, %struct.halide_trace_event_t*)* %t) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i8*, %struct.halide_trace_event_t*)*, i32 (i8*, %struct.halide_trace_event_t*)** @_ZN6Halide7Runtime8Internal19halide_custom_traceE, align 8, !tbaa !14
  store i32 (i8*, %struct.halide_trace_event_t*)* %t, i32 (i8*, %struct.halide_trace_event_t*)** @_ZN6Halide7Runtime8Internal19halide_custom_traceE, align 8, !tbaa !14
  ret i32 (i8*, %struct.halide_trace_event_t*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_trace(i8* %user_context, %struct.halide_trace_event_t* %e) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, %struct.halide_trace_event_t*)*, i32 (i8*, %struct.halide_trace_event_t*)** @_ZN6Halide7Runtime8Internal19halide_custom_traceE, align 8, !tbaa !14
  %call = tail call i32 %0(i8* %user_context, %struct.halide_trace_event_t* %e) #14
  ret i32 %call
}

; Function Attrs: nounwind
define weak i32 @halide_trace_helper(i8* %user_context, i8* %func, i8* %value, i32* %coords, i32 %type_code, i32 %type_bits, i32 %type_lanes, i32 %code, i32 %parent_id, i32 %value_index, i32 %dimensions, i8* %trace_tag) local_unnamed_addr #4 {
entry:
  %event = alloca %struct.halide_trace_event_t, align 8
  %0 = bitcast %struct.halide_trace_event_t* %event to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %0) #11
  %code.i.i = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 4, i32 0
  %bits.i.i = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 4, i32 1
  %lanes.i.i = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 4, i32 2
  %func1 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 0
  store i8* %func, i8** %func1, align 8, !tbaa !146
  %value2 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 1
  store i8* %value, i8** %value2, align 8, !tbaa !158
  %coordinates = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 2
  store i32* %coords, i32** %coordinates, align 8, !tbaa !157
  %trace_tag3 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 3
  store i8* %trace_tag, i8** %trace_tag3, align 8, !tbaa !147
  %conv = trunc i32 %type_code to i8
  store i8 %conv, i8* %code.i.i, align 8, !tbaa !168
  %conv5 = trunc i32 %type_bits to i8
  store i8 %conv5, i8* %bits.i.i, align 1, !tbaa !163
  %conv7 = trunc i32 %type_lanes to i16
  store i16 %conv7, i16* %lanes.i.i, align 2, !tbaa !138
  %event9 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 5
  store i32 %code, i32* %event9, align 4, !tbaa !162
  %parent_id10 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 6
  store i32 %parent_id, i32* %parent_id10, align 8, !tbaa !176
  %value_index11 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 7
  store i32 %value_index, i32* %value_index11, align 4, !tbaa !165
  %dimensions12 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 8
  store i32 %dimensions, i32* %dimensions12, align 8, !tbaa !145
  %call = call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %0, i64 56) #14
  %add = add nsw i32 %type_bits, 7
  %div = sdiv i32 %add, 8
  %mul = mul nsw i32 %div, %type_lanes
  %conv13 = sext i32 %mul to i64
  %call14 = call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* %value, i64 %conv13) #14
  %1 = bitcast i32* %coords to i8*
  %conv15 = sext i32 %dimensions to i64
  %mul16 = shl nsw i64 %conv15, 2
  %call17 = call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* %1, i64 %mul16) #14
  %call18 = call i32 @halide_trace(i8* %user_context, %struct.halide_trace_event_t* nonnull %event) #14
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %0) #11
  ret i32 %call18
}

; Function Attrs: nounwind mustprogress
define linkonce zeroext i1 @_ZN6Halide7Runtime8Internal9ends_withEPKcS3_(i8* %filename, i8* %suffix) local_unnamed_addr #0 {
entry:
  br label %while.cond

while.cond:                                       ; preds = %while.cond, %entry
  %f.0 = phi i8* [ %filename, %entry ], [ %incdec.ptr, %while.cond ]
  %0 = load i8, i8* %f.0, align 1, !tbaa !18
  %tobool.not = icmp eq i8 %0, 0
  %incdec.ptr = getelementptr inbounds i8, i8* %f.0, i64 1
  br i1 %tobool.not, label %while.cond1, label %while.cond, !llvm.loop !177

while.cond1:                                      ; preds = %while.cond, %while.cond1
  %s.0 = phi i8* [ %incdec.ptr4, %while.cond1 ], [ %suffix, %while.cond ]
  %1 = load i8, i8* %s.0, align 1, !tbaa !18
  %tobool2.not = icmp eq i8 %1, 0
  %incdec.ptr4 = getelementptr inbounds i8, i8* %s.0, i64 1
  br i1 %tobool2.not, label %while.cond6.preheader, label %while.cond1, !llvm.loop !178

while.cond6.preheader:                            ; preds = %while.cond1
  %cmp34 = icmp ne i8* %s.0, %suffix
  %cmp735 = icmp ne i8* %f.0, %filename
  %2 = and i1 %cmp735, %cmp34
  br i1 %2, label %if.end, label %while.cond6.preheader.while.end13_crit_edge

while.cond6.preheader.while.end13_crit_edge:      ; preds = %while.cond6.preheader
  %cmp16.0 = icmp eq i8 0, 0
  br label %while.end13

if.end:                                           ; preds = %while.cond6.preheader, %if.end.while.body8_crit_edge
  %f.13649 = phi i8* [ %incdec.ptr11, %if.end.while.body8_crit_edge ], [ %f.0, %while.cond6.preheader ]
  %s.13748 = phi i8* [ %incdec.ptr12, %if.end.while.body8_crit_edge ], [ %s.0, %while.cond6.preheader ]
  %incdec.ptr11 = getelementptr inbounds i8, i8* %f.13649, i64 -1
  %incdec.ptr12 = getelementptr inbounds i8, i8* %s.13748, i64 -1
  %cmp = icmp ne i8* %incdec.ptr12, %suffix
  %cmp7 = icmp ne i8* %incdec.ptr11, %filename
  %3 = and i1 %cmp7, %cmp
  %.pre = load i8, i8* %incdec.ptr11, align 1, !tbaa !18
  %.pre45 = load i8, i8* %incdec.ptr12, align 1, !tbaa !18
  br i1 %3, label %if.end.while.body8_crit_edge, label %if.end.while.end13_crit_edge, !llvm.loop !179

if.end.while.end13_crit_edge:                     ; preds = %if.end
  %cmp16.1 = icmp eq i8 %.pre, %.pre45
  br label %while.end13

if.end.while.body8_crit_edge:                     ; preds = %if.end
  %cmp10.not = icmp eq i8 %.pre, %.pre45
  br i1 %cmp10.not, label %if.end, label %cleanup

while.end13:                                      ; preds = %if.end.while.end13_crit_edge, %while.cond6.preheader.while.end13_crit_edge
  %cmp16.phi = phi i1 [ %cmp16.0, %while.cond6.preheader.while.end13_crit_edge ], [ %cmp16.1, %if.end.while.end13_crit_edge ]
  br label %cleanup

cleanup:                                          ; preds = %if.end.while.body8_crit_edge, %while.end13
  %retval.0 = phi i1 [ %cmp16.phi, %while.end13 ], [ false, %if.end.while.body8_crit_edge ]
  ret i1 %retval.0
}

; Function Attrs: nounwind
define weak i32 @halide_debug_to_file(i8* %user_context, i8* %filename, i32 %type_code, %struct.halide_buffer_t* %buf) local_unnamed_addr #4 {
entry:
  %shape = alloca [4 x %struct.halide_dimension_t], align 16
  %header = alloca %"struct.Halide::Runtime::Internal::halide_tiff_header", align 2
  %offset = alloca i32, align 4
  %count = alloca i32, align 4
  %array_name = alloca [256 x i8], align 1
  %array_name43 = getelementptr inbounds [256 x i8], [256 x i8]* %array_name, i64 0, i64 0
  %header198 = alloca [129 x i8], align 1
  %tags = alloca [8 x i32], align 4
  %extents = alloca [4 x i32], align 4
  %name_header = alloca [2 x i32], align 4
  %payload_header = alloca [2 x i32], align 4
  %header289 = alloca [5 x i32], align 4
  %temp = alloca [4096 x i8], align 1
  %idx = alloca [4 x i32], align 4
  %zero = alloca i64, align 8
  %host.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 2
  %0 = load i8*, i8** %host.i, align 8, !tbaa !180
  %cmp.i = icmp eq i8* %0, null
  br i1 %cmp.i, label %_ZNK15halide_buffer_t15is_bounds_queryEv.exit, label %if.end

_ZNK15halide_buffer_t15is_bounds_queryEv.exit:    ; preds = %entry
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !182
  %cmp2.i = icmp eq i64 %1, 0
  br i1 %cmp2.i, label %if.then, label %if.end

if.then:                                          ; preds = %_ZNK15halide_buffer_t15is_bounds_queryEv.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.34, i64 0, i64 0)) #14
  br label %return

if.end:                                           ; preds = %_ZNK15halide_buffer_t15is_bounds_queryEv.exit, %entry
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 5
  %2 = load i32, i32* %dimensions, align 4, !tbaa !183
  %cmp = icmp sgt i32 %2, 4
  br i1 %cmp, label %if.then1, label %if.end2

if.then1:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.1.35, i64 0, i64 0)) #14
  br label %return

if.end2:                                          ; preds = %if.end
  %call3 = tail call i32 @halide_copy_to_host(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #14
  %cmp4.not = icmp eq i32 %call3, 0
  br i1 %cmp4.not, label %if.end6, label %return

if.end6:                                          ; preds = %if.end2
  %call.i598 = tail call i8* @fopen(i8* %filename, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2.36, i64 0, i64 0)) #14
  %cmp.i601.not = icmp eq i8* %call.i598, null
  br i1 %cmp.i601.not, label %return, label %if.end9

if.end9:                                          ; preds = %if.end6
  %3 = bitcast [4 x %struct.halide_dimension_t]* %shape to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %3) #11
  %min.i = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 0, i32 0
  %extent.i = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 0, i32 1
  %4 = bitcast [4 x %struct.halide_dimension_t]* %shape to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %4, align 16, !tbaa !41
  %min.i.1 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 1, i32 0
  %extent.i.1 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 1, i32 1
  %5 = bitcast i32* %min.i.1 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %5, align 16, !tbaa !41
  %min.i.2 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 2, i32 0
  %extent.i.2 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 2, i32 1
  %6 = bitcast i32* %min.i.2 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %6, align 16, !tbaa !41
  %min.i.3 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 3, i32 0
  %extent.i.3 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 3, i32 1
  %7 = bitcast i32* %min.i.3 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %7, align 16, !tbaa !41
  %8 = load i32, i32* %dimensions, align 4, !tbaa !183
  %cmp11875 = icmp sgt i32 %8, 0
  br i1 %cmp11875, label %for.body.lr.ph, label %for.body22.preheader

for.body.lr.ph:                                   ; preds = %if.end9
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  %9 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !184
  %10 = zext i32 %8 to i64
  %11 = add nsw i64 %10, -1
  %12 = icmp ult i64 %11, 3
  %13 = select i1 %12, i64 %10, i64 4
  br label %for.body

for.cond19.preheader:                             ; preds = %for.body
  %cmp20873 = icmp slt i32 %8, 4
  br i1 %cmp20873, label %for.body22.preheader, label %for.cond.cleanup21

for.body22.preheader:                             ; preds = %for.cond19.preheader, %if.end9
  %elts.0.lcssa907 = phi i64 [ %mul, %for.cond19.preheader ], [ 1, %if.end9 ]
  %14 = sext i32 %8 to i64
  %15 = sub i32 3, %8
  %16 = zext i32 %15 to i64
  %17 = add nuw nsw i64 %16, 1
  %min.iters.check = icmp eq i32 %15, 0
  br i1 %min.iters.check, label %for.body22.preheader162, label %vector.ph

vector.ph:                                        ; preds = %for.body22.preheader
  %n.vec = and i64 %17, 8589934590
  %ind.end = add nsw i64 %n.vec, %14
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %offset.idx = add i64 %index, %14
  %induction36 = add i64 %offset.idx, 1
  %18 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 %offset.idx, i32 0
  %19 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 %induction36, i32 0
  %20 = bitcast i32* %18 to <2 x i32>*
  store <2 x i32> <i32 0, i32 1>, <2 x i32>* %20, align 16, !tbaa !41
  %21 = bitcast i32* %19 to <2 x i32>*
  store <2 x i32> <i32 0, i32 1>, <2 x i32>* %21, align 16, !tbaa !41
  %22 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 %offset.idx, i32 2
  %23 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 %induction36, i32 2
  store i32 0, i32* %22, align 8, !tbaa !185
  store i32 0, i32* %23, align 8, !tbaa !185
  %index.next = add i64 %index, 2
  %24 = icmp eq i64 %index.next, %n.vec
  br i1 %24, label %middle.block, label %vector.body, !llvm.loop !187

middle.block:                                     ; preds = %vector.body
  %cmp.n = icmp eq i64 %17, %n.vec
  br i1 %cmp.n, label %for.cond.cleanup21, label %for.body22.preheader162

for.body22.preheader162:                          ; preds = %for.body22.preheader, %middle.block
  %indvars.iv.ph = phi i64 [ %14, %for.body22.preheader ], [ %ind.end, %middle.block ]
  br label %for.body22

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %indvars.iv887 = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next888, %for.body ]
  %elts.0877 = phi i64 [ 1, %for.body.lr.ph ], [ %mul, %for.body ]
  %arrayidx = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %9, i64 %indvars.iv887
  %arrayidx14 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 %indvars.iv887
  %25 = bitcast %struct.halide_dimension_t* %arrayidx14 to i8*
  %26 = bitcast %struct.halide_dimension_t* %arrayidx to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 dereferenceable(16) %25, i8* nonnull align 4 dereferenceable(16) %26, i64 16, i1 false), !tbaa.struct !188
  %extent = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 %indvars.iv887, i32 1
  %27 = load i32, i32* %extent, align 4, !tbaa !189
  %conv903 = zext i32 %27 to i64
  %mul = mul i64 %elts.0877, %conv903
  %indvars.iv.next888 = add nuw nsw i64 %indvars.iv887, 1
  %exitcond.not17 = icmp eq i64 %indvars.iv.next888, %13
  br i1 %exitcond.not17, label %for.cond19.preheader, label %for.body, !llvm.loop !190

for.cond.cleanup21:                               ; preds = %for.body22, %middle.block, %for.cond19.preheader
  %elts.0.lcssa906 = phi i64 [ %mul, %for.cond19.preheader ], [ %elts.0.lcssa907, %middle.block ], [ %elts.0.lcssa907, %for.body22 ]
  %bits.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 4, i32 1
  %28 = load i8, i8* %bits.i, align 1, !tbaa !144
  %conv.i = zext i8 %28 to i32
  %add.i = add nuw nsw i32 %conv.i, 7
  %div.i = lshr i32 %add.i, 3
  %call34 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal9ends_withEPKcS3_(i8* %filename, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3.37, i64 0, i64 0)) #15
  br i1 %call34, label %if.then36, label %lor.lhs.false

for.body22:                                       ; preds = %for.body22.preheader162, %for.body22
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body22 ], [ %indvars.iv.ph, %for.body22.preheader162 ]
  %min = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 %indvars.iv, i32 0
  %29 = bitcast i32* %min to <2 x i32>*
  store <2 x i32> <i32 0, i32 1>, <2 x i32>* %29, align 16, !tbaa !41
  %stride = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 %indvars.iv, i32 2
  store i32 0, i32* %stride, align 8, !tbaa !185
  %indvars.iv.next = add nsw i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond886.not = icmp eq i32 %lftr.wideiv, 4
  br i1 %exitcond886.not, label %for.cond.cleanup21, label %for.body22, !llvm.loop !191

lor.lhs.false:                                    ; preds = %for.cond.cleanup21
  %call35 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal9ends_withEPKcS3_(i8* %filename, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4.38, i64 0, i64 0)) #15
  br i1 %call35, label %if.then36, label %if.else164

if.then36:                                        ; preds = %lor.lhs.false, %for.cond.cleanup21
  %30 = load i32, i32* %extent.i, align 4, !tbaa !189
  %31 = load i32, i32* %extent.i.1, align 4, !tbaa !189
  %32 = load i32, i32* %extent.i.3, align 4, !tbaa !189
  %switch = icmp ult i32 %32, 2
  %33 = load i32, i32* %extent.i.2, align 4, !tbaa !189
  %cmp50 = icmp slt i32 %33, 5
  %or.cond = and i1 %switch, %cmp50
  %depth.0 = select i1 %or.cond, i32 1, i32 %33
  %channels.0 = select i1 %or.cond, i32 %33, i32 %32
  %34 = bitcast %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header to i8*
  call void @llvm.lifetime.start.p0i8(i64 210, i8* nonnull %34) #11
  %byte_order_marker = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 0
  store i16 18761, i16* %byte_order_marker, align 2, !tbaa !192
  %version = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 1
  store i16 42, i16* %version, align 2, !tbaa !194
  %ifd0_offset = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 2
  store i32 8, i32* %ifd0_offset, align 2, !tbaa !195
  %entry_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 3
  store i16 15, i16* %entry_count, align 2, !tbaa !196
  %tag_code2.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 0, i32 0
  store i16 256, i16* %tag_code2.i, align 2, !tbaa !197
  %type_code.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 0, i32 1
  store i16 4, i16* %type_code.i, align 2, !tbaa !199
  %count3.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 0, i32 2
  store i32 1, i32* %count3.i, align 2, !tbaa !200
  %i32.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 0, i32 3, i32 0
  store i32 %30, i32* %i32.i, align 2, !tbaa !18
  %tag_code2.i632 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 1, i32 0
  store i16 257, i16* %tag_code2.i632, align 2, !tbaa !197
  %type_code.i633 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 1, i32 1
  store i16 4, i16* %type_code.i633, align 2, !tbaa !199
  %count3.i634 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 1, i32 2
  store i32 1, i32* %count3.i634, align 2, !tbaa !200
  %i32.i635 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 1, i32 3, i32 0
  store i32 %31, i32* %i32.i635, align 2, !tbaa !18
  %35 = trunc i32 %add.i to i16
  %conv68 = and i16 %35, 504
  %tag_code2.i643 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 2, i32 0
  store i16 258, i16* %tag_code2.i643, align 2, !tbaa !197
  %type_code.i644 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 2, i32 1
  store i16 3, i16* %type_code.i644, align 2, !tbaa !199
  %count3.i645 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 2, i32 2
  store i32 1, i32* %count3.i645, align 2, !tbaa !200
  %value4.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 2, i32 3
  %i16.i = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i to i16*
  store i16 %conv68, i16* %i16.i, align 2, !tbaa !18
  %tag_code2.i653 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 3, i32 0
  store i16 259, i16* %tag_code2.i653, align 2, !tbaa !197
  %type_code.i654 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 3, i32 1
  store i16 3, i16* %type_code.i654, align 2, !tbaa !199
  %count3.i655 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 3, i32 2
  store i32 1, i32* %count3.i655, align 2, !tbaa !200
  %value4.i656 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 3, i32 3
  %i16.i657 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i656 to i16*
  store i16 1, i16* %i16.i657, align 2, !tbaa !18
  %cmp71 = icmp sgt i32 %channels.0, 2
  %conv72 = select i1 %cmp71, i16 2, i16 1
  %tag_code2.i665 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 4, i32 0
  store i16 262, i16* %tag_code2.i665, align 2, !tbaa !197
  %type_code.i666 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 4, i32 1
  store i16 3, i16* %type_code.i666, align 2, !tbaa !199
  %count3.i667 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 4, i32 2
  store i32 1, i32* %count3.i667, align 2, !tbaa !200
  %value4.i668 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 4, i32 3
  %i16.i669 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i668 to i16*
  store i16 %conv72, i16* %i16.i669, align 2, !tbaa !18
  %tag_code2.i677 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 5, i32 0
  store i16 273, i16* %tag_code2.i677, align 2, !tbaa !197
  %type_code.i678 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 5, i32 1
  store i16 4, i16* %type_code.i678, align 2, !tbaa !199
  %count3.i679 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 5, i32 2
  store i32 %channels.0, i32* %count3.i679, align 2, !tbaa !200
  %i32.i680 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 5, i32 3, i32 0
  store i32 210, i32* %i32.i680, align 2, !tbaa !18
  %conv75 = trunc i32 %channels.0 to i16
  %tag_code2.i688 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 6, i32 0
  store i16 277, i16* %tag_code2.i688, align 2, !tbaa !197
  %type_code.i689 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 6, i32 1
  store i16 3, i16* %type_code.i689, align 2, !tbaa !199
  %count3.i690 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 6, i32 2
  store i32 1, i32* %count3.i690, align 2, !tbaa !200
  %value4.i691 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 6, i32 3
  %i16.i692 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i691 to i16*
  store i16 %conv75, i16* %i16.i692, align 2, !tbaa !18
  %tag_code2.i706 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 7, i32 0
  store i16 278, i16* %tag_code2.i706, align 2, !tbaa !197
  %type_code.i707 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 7, i32 1
  store i16 4, i16* %type_code.i707, align 2, !tbaa !199
  %count3.i708 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 7, i32 2
  store i32 1, i32* %count3.i708, align 2, !tbaa !200
  %i32.i709 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 7, i32 3, i32 0
  store i32 %31, i32* %i32.i709, align 2, !tbaa !18
  %cmp80 = icmp eq i32 %channels.0, 1
  %36 = trunc i64 %elts.0.lcssa906 to i32
  %conv86595 = mul i32 %div.i, %36
  %mul84 = shl i32 %channels.0, 2
  %add = add i32 %mul84, 210
  %add.sink = select i1 %cmp80, i32 %conv86595, i32 %add
  %37 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 8, i32 0
  store i16 279, i16* %37, align 2
  %38 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 8, i32 1
  store i16 4, i16* %38, align 2
  %39 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 8, i32 2
  store i32 %channels.0, i32* %39, align 2
  %40 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 8, i32 3, i32 0
  store i32 %add.sink, i32* %40, align 2
  %tag_code2.i732 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 9, i32 0
  store i16 282, i16* %tag_code2.i732, align 2, !tbaa !197
  %type_code3.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 9, i32 1
  store i16 5, i16* %type_code3.i, align 2, !tbaa !199
  %count4.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 9, i32 2
  %41 = bitcast i32* %count4.i to <2 x i32>*
  store <2 x i32> <i32 1, i32 194>, <2 x i32>* %41, align 2, !tbaa !18
  %tag_code2.i741 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 10, i32 0
  store i16 283, i16* %tag_code2.i741, align 2, !tbaa !197
  %type_code3.i742 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 10, i32 1
  store i16 5, i16* %type_code3.i742, align 2, !tbaa !199
  %count4.i743 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 10, i32 2
  %42 = bitcast i32* %count4.i743 to <2 x i32>*
  store <2 x i32> <i32 1, i32 202>, <2 x i32>* %42, align 2, !tbaa !18
  %tag_code2.i759 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 11, i32 0
  store i16 284, i16* %tag_code2.i759, align 2, !tbaa !197
  %type_code.i760 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 11, i32 1
  store i16 3, i16* %type_code.i760, align 2, !tbaa !199
  %count3.i761 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 11, i32 2
  store i32 1, i32* %count3.i761, align 2, !tbaa !200
  %value4.i762 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 11, i32 3
  %i16.i763 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i762 to i16*
  store i16 2, i16* %i16.i763, align 2, !tbaa !18
  %tag_code2.i754 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 12, i32 0
  store i16 296, i16* %tag_code2.i754, align 2, !tbaa !197
  %type_code.i755 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 12, i32 1
  store i16 3, i16* %type_code.i755, align 2, !tbaa !199
  %count3.i756 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 12, i32 2
  store i32 1, i32* %count3.i756, align 2, !tbaa !200
  %value4.i757 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 12, i32 3
  %i16.i758 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i757 to i16*
  store i16 1, i16* %i16.i758, align 2, !tbaa !18
  %idxprom92 = sext i32 %type_code to i64
  %arrayidx93 = getelementptr inbounds [10 x i16], [10 x i16]* @_ZN6Halide7Runtime8Internal30pixel_type_to_tiff_sample_typeE, i64 0, i64 %idxprom92
  %43 = load i16, i16* %arrayidx93, align 2, !tbaa !169
  %tag_code2.i749 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 13, i32 0
  store i16 339, i16* %tag_code2.i749, align 2, !tbaa !197
  %type_code.i750 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 13, i32 1
  store i16 3, i16* %type_code.i750, align 2, !tbaa !199
  %count3.i751 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 13, i32 2
  store i32 1, i32* %count3.i751, align 2, !tbaa !200
  %value4.i752 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 13, i32 3
  %i16.i753 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i752 to i16*
  store i16 %43, i16* %i16.i753, align 2, !tbaa !18
  %tag_code2.i745 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 14, i32 0
  store i16 -32539, i16* %tag_code2.i745, align 2, !tbaa !197
  %type_code.i746 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 14, i32 1
  store i16 4, i16* %type_code.i746, align 2, !tbaa !199
  %count3.i747 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 14, i32 2
  store i32 1, i32* %count3.i747, align 2, !tbaa !200
  %i32.i748 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 14, i32 3, i32 0
  store i32 %depth.0, i32* %i32.i748, align 2, !tbaa !18
  %ifd0_end = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 5
  %44 = bitcast i32* %ifd0_end to <4 x i32>*
  store <4 x i32> <i32 0, i32 1, i32 1, i32 1>, <4 x i32>* %44, align 2, !tbaa !41
  %arrayidx100 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 7, i64 1
  store i32 1, i32* %arrayidx100, align 2, !tbaa !41
  %call.i736 = call i64 @fwrite(i8* nonnull %34, i64 210, i64 1, i8* nonnull %call.i598) #14
  %cmp.i737.not = icmp eq i64 %call.i736, 0
  br i1 %cmp.i737.not, label %cleanup154, label %if.end103

if.end103:                                        ; preds = %if.then36
  %cmp104 = icmp sgt i32 %channels.0, 1
  br i1 %cmp104, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731.lr.ph, label %cleanup154.thread

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731.lr.ph: ; preds = %if.end103
  %45 = bitcast i32* %offset to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %45) #11
  %mul108 = shl i32 %channels.0, 3
  %add109 = add i32 %mul108, 210
  store i32 %add109, i32* %offset, align 4, !tbaa !41
  %mul123 = mul i32 %depth.0, %div.i
  %46 = load i32, i32* %extent.i, align 4
  %47 = load i32, i32* %extent.i.1, align 4
  %mul124 = mul i32 %mul123, %46
  %mul125 = mul i32 %mul124, %47
  br label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731: ; preds = %if.end118, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731.lr.ph
  %i111.0865 = phi i32 [ 0, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731.lr.ph ], [ %inc128, %if.end118 ]
  %call.i727 = call i64 @fwrite(i8* nonnull %45, i64 4, i64 1, i8* nonnull %call.i598) #14
  %cmp.i728.not = icmp eq i64 %call.i727, 0
  br i1 %cmp.i728.not, label %cleanup151.thread, label %if.end118

if.end118:                                        ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731
  %48 = load i32, i32* %offset, align 4, !tbaa !41
  %add126 = add nsw i32 %mul125, %48
  store i32 %add126, i32* %offset, align 4, !tbaa !41
  %inc128 = add nuw nsw i32 %i111.0865, 1
  %exitcond881.not = icmp eq i32 %inc128, %channels.0
  br i1 %exitcond881.not, label %for.end129, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731, !llvm.loop !201

for.end129:                                       ; preds = %if.end118
  %49 = bitcast i32* %count to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %49) #11
  store i32 %mul125, i32* %count, align 4, !tbaa !41
  %inc146.1 = add nuw nsw i32 0, 1
  br label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720

for.cond138:                                      ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720
  %exitcond.not = icmp eq i32 %inc146.phi, %channels.0
  br i1 %exitcond.not, label %cleanup151, label %for.cond138._ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720_crit_edge, !llvm.loop !202

for.cond138._ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720_crit_edge: ; preds = %for.cond138
  %inc146.0 = add nuw nsw i32 %inc146.phi, 1
  br label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720: ; preds = %for.cond138._ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720_crit_edge, %for.end129
  %inc146.phi = phi i32 [ %inc146.0, %for.cond138._ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720_crit_edge ], [ %inc146.1, %for.end129 ]
  %call.i716 = call i64 @fwrite(i8* nonnull %49, i64 4, i64 1, i8* nonnull %call.i598) #14
  %cmp.i717.not = icmp eq i64 %call.i716, 0
  br i1 %cmp.i717.not, label %select.unfold, label %for.cond138

select.unfold:                                    ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %49) #11
  br label %cleanup151.thread

cleanup151.thread:                                ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731, %select.unfold
  %retval.2.ph = phi i32 [ -5, %select.unfold ], [ -4, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %45) #11
  br label %cleanup154

cleanup151:                                       ; preds = %for.cond138
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %49) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %45) #11
  br label %cleanup154.thread

cleanup154.thread:                                ; preds = %cleanup151, %if.end103
  call void @llvm.lifetime.end.p0i8(i64 210, i8* nonnull %34) #11
  br label %if.end311

cleanup154:                                       ; preds = %cleanup151.thread, %if.then36
  %retval.4 = phi i32 [ -3, %if.then36 ], [ %retval.2.ph, %cleanup151.thread ]
  call void @llvm.lifetime.end.p0i8(i64 210, i8* nonnull %34) #11
  br label %cleanup433

if.else164:                                       ; preds = %lor.lhs.false
  %call165 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal9ends_withEPKcS3_(i8* %filename, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5.39, i64 0, i64 0)) #15
  br i1 %call165, label %while.cond, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631

while.cond:                                       ; preds = %if.else164, %while.cond
  %end.0 = phi i8* [ %incdec.ptr167, %while.cond ], [ %filename, %if.else164 ]
  %50 = load i8, i8* %end.0, align 1, !tbaa !18
  %tobool.not = icmp eq i8 %50, 0
  %incdec.ptr167 = getelementptr inbounds i8, i8* %end.0, i64 1
  br i1 %tobool.not, label %while.body171, label %while.cond, !llvm.loop !203

while.cond174.preheader:                          ; preds = %while.body171
  %end.1872.lcssa883 = ptrtoint i8* %end.1872 to i64
  %51 = ptrtoint i8* %filename to i64
  %52 = sub i64 %51, %end.1872.lcssa883
  br label %while.cond174

while.body171:                                    ; preds = %while.cond, %while.body171
  %end.1872 = phi i8* [ %incdec.ptr172.ptr, %while.body171 ], [ %end.0, %while.cond ]
  %incdec.ptr172.ptr = getelementptr inbounds i8, i8* %end.1872, i64 -1
  %.pr = load i8, i8* %incdec.ptr172.ptr, align 1, !tbaa !18
  %cmp170.not = icmp eq i8 %.pr, 46
  br i1 %cmp170.not, label %while.cond174.preheader, label %while.body171, !llvm.loop !204

while.cond174:                                    ; preds = %land.rhs176, %while.cond174.preheader
  %start.0.idx = phi i64 [ %start.0.add, %land.rhs176 ], [ -1, %while.cond174.preheader ]
  %start.0.ptr.ptr = getelementptr inbounds i8, i8* %end.1872, i64 %start.0.idx
  %cmp175.not = icmp eq i8* %start.0.ptr.ptr, %filename
  br i1 %cmp175.not, label %while.end183, label %land.rhs176

land.rhs176:                                      ; preds = %while.cond174
  %start.0.add = add nsw i64 %start.0.idx, -1
  %arrayidx177.ptr = getelementptr inbounds i8, i8* %end.1872, i64 %start.0.add
  %53 = load i8, i8* %arrayidx177.ptr, align 1, !tbaa !18
  %cmp179.not = icmp eq i8 %53, 47
  br i1 %cmp179.not, label %while.end183, label %while.cond174, !llvm.loop !205

while.end183:                                     ; preds = %land.rhs176, %while.cond174
  %start.0.idx.lcssa = phi i64 [ %52, %while.cond174 ], [ %start.0.idx, %land.rhs176 ]
  %54 = trunc i64 %start.0.idx.lcssa to i32
  %conv184 = xor i32 %54, -1
  %55 = getelementptr inbounds [256 x i8], [256 x i8]* %array_name, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %55) #11
  %cmp186.not868 = icmp eq i64 %start.0.idx.lcssa, -1
  br i1 %cmp186.not868, label %iter.check, label %while.body187.preheader

while.body187.preheader:                          ; preds = %while.end183
  %56 = xor i64 %start.0.idx.lcssa, -1
  %min.iters.check40 = icmp ugt i64 %start.0.idx.lcssa, -33
  br i1 %min.iters.check40, label %while.body187.preheader160, label %vector.memcheck

vector.memcheck:                                  ; preds = %while.body187.preheader
  %57 = xor i64 %start.0.idx.lcssa, -1
  %scevgep44 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 0, i64 %57
  %scevgep45 = getelementptr i8, i8* %end.1872, i64 %start.0.idx.lcssa
  %scevgep46 = getelementptr i8, i8* %end.1872, i64 -1
  %bound0 = icmp ult i8* %array_name43, %scevgep46
  %bound1 = icmp ult i8* %scevgep45, %scevgep44
  %found.conflict = and i1 %bound0, %bound1
  br i1 %found.conflict, label %while.body187.preheader160, label %vector.ph42

vector.ph42:                                      ; preds = %vector.memcheck
  %n.vec48 = and i64 %56, -32
  %ind.end52 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 0, i64 %n.vec48
  %ind.end54 = add i64 %start.0.idx.lcssa, %n.vec48
  br label %vector.body39

vector.body39:                                    ; preds = %vector.body39, %vector.ph42
  %index49 = phi i64 [ 0, %vector.ph42 ], [ %index.next50, %vector.body39 ]
  %next.gep = getelementptr [256 x i8], [256 x i8]* %array_name, i64 0, i64 %index49
  %offset.idx57 = add i64 %start.0.idx.lcssa, %index49
  %58 = getelementptr inbounds i8, i8* %end.1872, i64 %offset.idx57
  %59 = bitcast i8* %58 to <16 x i8>*
  %wide.load = load <16 x i8>, <16 x i8>* %59, align 1, !tbaa !18, !alias.scope !206
  %60 = getelementptr inbounds i8, i8* %58, i64 16
  %61 = bitcast i8* %60 to <16 x i8>*
  %wide.load58 = load <16 x i8>, <16 x i8>* %61, align 1, !tbaa !18, !alias.scope !206
  %62 = bitcast i8* %next.gep to <16 x i8>*
  store <16 x i8> %wide.load, <16 x i8>* %62, align 1, !tbaa !18, !alias.scope !209, !noalias !206
  %63 = getelementptr i8, i8* %next.gep, i64 16
  %64 = bitcast i8* %63 to <16 x i8>*
  store <16 x i8> %wide.load58, <16 x i8>* %64, align 1, !tbaa !18, !alias.scope !209, !noalias !206
  %index.next50 = add i64 %index49, 32
  %65 = icmp eq i64 %index.next50, %n.vec48
  br i1 %65, label %middle.block37, label %vector.body39, !llvm.loop !211

middle.block37:                                   ; preds = %vector.body39
  %cmp.n55 = icmp eq i64 %n.vec48, %56
  br i1 %cmp.n55, label %while.cond191.preheader, label %while.body187.preheader160

while.body187.preheader160:                       ; preds = %vector.memcheck, %while.body187.preheader, %middle.block37
  %dst.0870.ph = phi i8* [ %55, %vector.memcheck ], [ %55, %while.body187.preheader ], [ %ind.end52, %middle.block37 ]
  %start.1869.idx.ph = phi i64 [ %start.0.idx.lcssa, %vector.memcheck ], [ %start.0.idx.lcssa, %while.body187.preheader ], [ %ind.end54, %middle.block37 ]
  br label %while.body187

while.cond191.preheader:                          ; preds = %while.body187, %middle.block37
  %incdec.ptr189.lcssa = phi i8* [ %ind.end52, %middle.block37 ], [ %incdec.ptr189, %while.body187 ]
  %add.ptr = getelementptr inbounds [256 x i8], [256 x i8]* %array_name, i64 0, i64 256
  %cmp193866 = icmp ult i8* %incdec.ptr189.lcssa, %add.ptr
  br i1 %cmp193866, label %iter.check, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705

iter.check:                                       ; preds = %while.cond191.preheader, %while.end183
  %dst.0.lcssa911 = phi i8* [ %incdec.ptr189.lcssa, %while.cond191.preheader ], [ %55, %while.end183 ]
  %dst.0.lcssa91162 = ptrtoint i8* %dst.0.lcssa911 to i64
  %scevgep = getelementptr inbounds [256 x i8], [256 x i8]* %array_name, i64 1, i64 0
  %66 = sub i64 0, %dst.0.lcssa91162
  %scevgep63 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 1, i64 %66
  %exitcount.ptrcnt.to.int = ptrtoint i8* %scevgep63 to i64
  %min.iters.check65 = icmp ult i8* %scevgep63, inttoptr (i64 4 to i8*)
  br i1 %min.iters.check65, label %while.body194.preheader, label %vector.main.loop.iter.check

vector.main.loop.iter.check:                      ; preds = %iter.check
  %min.iters.check67 = icmp ult i8* %scevgep63, inttoptr (i64 32 to i8*)
  br i1 %min.iters.check67, label %vec.epilog.ph, label %vector.ph68

vector.ph68:                                      ; preds = %vector.main.loop.iter.check
  %n.vec70 = and i64 %exitcount.ptrcnt.to.int, -32
  %next.gep74.0 = getelementptr i8, i8* %dst.0.lcssa911, i64 0
  %index.next72.0 = add i64 0, 32
  br label %vector.body61

vector.body61:                                    ; preds = %vector.body61.vector.body61_crit_edge, %vector.ph68
  %index.next72.phi = phi i64 [ %index.next72.0, %vector.ph68 ], [ %index.next72.1, %vector.body61.vector.body61_crit_edge ]
  %next.gep74.phi = phi i8* [ %next.gep74.0, %vector.ph68 ], [ %next.gep74.1, %vector.body61.vector.body61_crit_edge ]
  %67 = bitcast i8* %next.gep74.phi to <16 x i8>*
  store <16 x i8> zeroinitializer, <16 x i8>* %67, align 1, !tbaa !18
  %68 = getelementptr i8, i8* %next.gep74.phi, i64 16
  %69 = bitcast i8* %68 to <16 x i8>*
  store <16 x i8> zeroinitializer, <16 x i8>* %69, align 1, !tbaa !18
  %70 = icmp eq i64 %index.next72.phi, %n.vec70
  br i1 %70, label %middle.block59, label %vector.body61.vector.body61_crit_edge, !llvm.loop !212

vector.body61.vector.body61_crit_edge:            ; preds = %vector.body61
  %next.gep74.1 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index.next72.phi
  %index.next72.1 = add i64 %index.next72.phi, 32
  br label %vector.body61

middle.block59:                                   ; preds = %vector.body61
  %cmp.n73 = icmp eq i64 %n.vec70, %exitcount.ptrcnt.to.int
  br i1 %cmp.n73, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705, label %vec.epilog.iter.check

vec.epilog.iter.check:                            ; preds = %middle.block59
  %ind.end85 = getelementptr i8, i8* %dst.0.lcssa911, i64 %n.vec70
  %n.vec.remaining = and i64 %exitcount.ptrcnt.to.int, 28
  %min.epilog.iters.check = icmp eq i64 %n.vec.remaining, 0
  br i1 %min.epilog.iters.check, label %while.body194.preheader, label %vec.epilog.ph

vec.epilog.ph:                                    ; preds = %vector.main.loop.iter.check, %vec.epilog.iter.check
  %vec.epilog.resume.val = phi i64 [ %n.vec70, %vec.epilog.iter.check ], [ 0, %vector.main.loop.iter.check ]
  %71 = sub i64 0, %dst.0.lcssa91162
  %scevgep76 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 1, i64 %71
  %exitcount.ptrcnt.to.int78 = ptrtoint i8* %scevgep76 to i64
  %n.vec80 = and i64 %exitcount.ptrcnt.to.int78, -4
  %ind.end84 = getelementptr i8, i8* %dst.0.lcssa911, i64 %n.vec80
  br label %vec.epilog.vector.body

vec.epilog.vector.body:                           ; preds = %vec.epilog.vector.body, %vec.epilog.ph
  %index81 = phi i64 [ %vec.epilog.resume.val, %vec.epilog.ph ], [ %index.next82, %vec.epilog.vector.body ]
  %next.gep87 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index81
  %72 = bitcast i8* %next.gep87 to <4 x i8>*
  store <4 x i8> zeroinitializer, <4 x i8>* %72, align 1, !tbaa !18
  %index.next82 = add i64 %index81, 4
  %73 = icmp eq i64 %index.next82, %n.vec80
  br i1 %73, label %vec.epilog.middle.block, label %vec.epilog.vector.body, !llvm.loop !213

vec.epilog.middle.block:                          ; preds = %vec.epilog.vector.body
  %cmp.n86 = icmp eq i64 %n.vec80, %exitcount.ptrcnt.to.int78
  br i1 %cmp.n86, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705, label %while.body194.preheader

while.body194.preheader:                          ; preds = %iter.check, %vec.epilog.iter.check, %vec.epilog.middle.block
  %dst.1867.ph = phi i8* [ %dst.0.lcssa911, %iter.check ], [ %ind.end85, %vec.epilog.iter.check ], [ %ind.end84, %vec.epilog.middle.block ]
  br label %while.body194

while.body187:                                    ; preds = %while.body187.preheader160, %while.body187
  %dst.0870 = phi i8* [ %incdec.ptr189, %while.body187 ], [ %dst.0870.ph, %while.body187.preheader160 ]
  %start.1869.idx = phi i64 [ %start.1869.add, %while.body187 ], [ %start.1869.idx.ph, %while.body187.preheader160 ]
  %start.1869.ptr = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.idx
  %start.1869.add = add nuw nsw i64 %start.1869.idx, 1
  %74 = load i8, i8* %start.1869.ptr, align 1, !tbaa !18
  %incdec.ptr189 = getelementptr inbounds i8, i8* %dst.0870, i64 1
  store i8 %74, i8* %dst.0870, align 1, !tbaa !18
  %cmp186.not = icmp eq i64 %start.1869.add, -1
  br i1 %cmp186.not, label %while.cond191.preheader, label %while.body187, !llvm.loop !214

while.body194:                                    ; preds = %while.body194.preheader, %while.body194
  %dst.1867 = phi i8* [ %incdec.ptr195, %while.body194 ], [ %dst.1867.ph, %while.body194.preheader ]
  %incdec.ptr195 = getelementptr inbounds i8, i8* %dst.1867, i64 1
  store i8 0, i8* %dst.1867, align 1, !tbaa !18
  %exitcond882.not = icmp eq i8* %incdec.ptr195, %scevgep
  br i1 %exitcond882.not, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705, label %while.body194, !llvm.loop !215

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705: ; preds = %while.body194, %middle.block59, %vec.epilog.middle.block, %while.cond191.preheader
  %add197 = sub i32 6, %54
  %and = and i32 %add197, -8
  %75 = getelementptr inbounds [129 x i8], [129 x i8]* %header198, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 129, i8* nonnull %75) #11
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 dereferenceable(129) %75, i8* nonnull align 1 dereferenceable(129) getelementptr inbounds ([129 x i8], [129 x i8]* @__const.halide_debug_to_file.header, i64 0, i64 0), i64 129, i1 false)
  %call.i701 = call i64 @fwrite(i8* nonnull %75, i64 128, i64 1, i8* nonnull %call.i598) #14
  %76 = load i32, i32* %dimensions, align 4, !tbaa !183
  %cmp19.i.i = icmp sgt i32 %76, 0
  br i1 %cmp19.i.i, label %for.body.lr.ph.i.i, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge: ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705
  %sub.i694.0 = sub nsw i64 1, 0
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.lr.ph.i.i:                               ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  %77 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8, !tbaa !184
  %wide.trip.count.i.i = zext i32 %76 to i64
  %min.iters.check91 = icmp ult i32 %76, 3
  br i1 %min.iters.check91, label %for.body.i.i.preheader, label %vector.ph92

vector.ph92:                                      ; preds = %for.body.lr.ph.i.i
  %n.vec94 = and i64 %wide.trip.count.i.i, 4294967294
  br label %vector.body90

vector.body90:                                    ; preds = %pred.load.continue103, %vector.ph92
  %index95 = phi i64 [ 0, %vector.ph92 ], [ %index.next96, %pred.load.continue103 ]
  %vec.phi = phi i64 [ 0, %vector.ph92 ], [ %predphi, %pred.load.continue103 ]
  %vec.phi101 = phi i64 [ 0, %vector.ph92 ], [ %predphi104, %pred.load.continue103 ]
  %induction100 = or i64 %index95, 1
  %78 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %77, i64 %index95, i32 2
  %79 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %77, i64 %induction100, i32 2
  %80 = load i32, i32* %78, align 4, !tbaa !185
  %81 = load i32, i32* %79, align 4, !tbaa !185
  %82 = icmp sgt i32 %80, 0
  %83 = icmp sgt i32 %81, 0
  %84 = zext i32 %80 to i64
  %85 = zext i32 %81 to i64
  br i1 %82, label %pred.load.if, label %pred.load.continue

pred.load.if:                                     ; preds = %vector.body90
  %86 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %77, i64 %index95, i32 1
  %87 = load i32, i32* %86, align 4, !tbaa !189
  br label %pred.load.continue

pred.load.continue:                               ; preds = %pred.load.if, %vector.body90
  %88 = phi i32 [ poison, %vector.body90 ], [ %87, %pred.load.if ]
  br i1 %83, label %pred.load.if102, label %pred.load.continue103

pred.load.if102:                                  ; preds = %pred.load.continue
  %89 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %77, i64 %induction100, i32 1
  %90 = load i32, i32* %89, align 4, !tbaa !189
  br label %pred.load.continue103

pred.load.continue103:                            ; preds = %pred.load.if102, %pred.load.continue
  %91 = phi i32 [ poison, %pred.load.continue ], [ %90, %pred.load.if102 ]
  %92 = add nsw i32 %88, -1
  %93 = add nsw i32 %91, -1
  %94 = sext i32 %92 to i64
  %95 = sext i32 %93 to i64
  %96 = mul nsw i64 %94, %84
  %97 = mul nsw i64 %95, %85
  %98 = select i1 %82, i64 %96, i64 0
  %predphi = add i64 %vec.phi, %98
  %99 = select i1 %83, i64 %97, i64 0
  %predphi104 = add i64 %vec.phi101, %99
  %index.next96 = add i64 %index95, 2
  %100 = icmp eq i64 %index.next96, %n.vec94
  br i1 %100, label %middle.block88, label %vector.body90, !llvm.loop !217

middle.block88:                                   ; preds = %pred.load.continue103
  %bin.rdx = add i64 %predphi104, %predphi
  %cmp.n98 = icmp eq i64 %n.vec94, %wide.trip.count.i.i
  br i1 %cmp.n98, label %for.body.i13.i.preheader, label %for.body.i.i.preheader

for.body.i.i.preheader:                           ; preds = %for.body.lr.ph.i.i, %middle.block88
  %indvars.iv.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %n.vec94, %middle.block88 ]
  %index.021.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %bin.rdx, %middle.block88 ]
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.body.i.i.preheader, %if.end.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %if.end.i.i ], [ %indvars.iv.i.i.ph, %for.body.i.i.preheader ]
  %index.021.i.i = phi i64 [ %index.1.i.i, %if.end.i.i ], [ %index.021.i.i.ph, %for.body.i.i.preheader ]
  %stride2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %77, i64 %indvars.iv.i.i, i32 2
  %101 = load i32, i32* %stride2.i.i, align 4, !tbaa !185
  %cmp3.i.i = icmp sgt i32 %101, 0
  br i1 %cmp3.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %conv18.i.i = zext i32 %101 to i64
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %77, i64 %indvars.iv.i.i, i32 1
  %102 = load i32, i32* %extent.i.i, align 4, !tbaa !189
  %sub.i.i = add nsw i32 %102, -1
  %conv7.i.i = sext i32 %sub.i.i to i64
  %mul.i.i = mul nsw i64 %conv7.i.i, %conv18.i.i
  %add.i.i693 = add nsw i64 %mul.i.i, %index.021.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i64 [ %add.i.i693, %if.then.i.i ], [ %index.021.i.i, %for.body.i.i ]
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %exitcond.not.i.i = icmp eq i64 %indvars.iv.next.i.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i.i, label %for.body.i13.i.preheader, label %for.body.i.i, !llvm.loop !218

for.body.i13.i.preheader:                         ; preds = %if.end.i.i, %middle.block88
  %index.1.i.i.lcssa = phi i64 [ %bin.rdx, %middle.block88 ], [ %index.1.i.i, %if.end.i.i ]
  %min.iters.check108 = icmp ult i32 %76, 3
  br i1 %min.iters.check108, label %for.body.i13.i.preheader157, label %vector.ph109

vector.ph109:                                     ; preds = %for.body.i13.i.preheader
  %n.vec111 = and i64 %wide.trip.count.i.i, 4294967294
  br label %vector.body107

vector.body107:                                   ; preds = %pred.load.continue123, %vector.ph109
  %index112 = phi i64 [ 0, %vector.ph109 ], [ %index.next113, %pred.load.continue123 ]
  %vec.phi118 = phi i64 [ 0, %vector.ph109 ], [ %predphi124, %pred.load.continue123 ]
  %vec.phi119 = phi i64 [ 0, %vector.ph109 ], [ %predphi125, %pred.load.continue123 ]
  %induction117 = or i64 %index112, 1
  %103 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %77, i64 %index112, i32 2
  %104 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %77, i64 %induction117, i32 2
  %105 = load i32, i32* %103, align 4, !tbaa !185
  %106 = load i32, i32* %104, align 4, !tbaa !185
  %107 = icmp slt i32 %105, 0
  %108 = icmp slt i32 %106, 0
  %109 = sext i32 %105 to i64
  %110 = sext i32 %106 to i64
  br i1 %107, label %pred.load.if120, label %pred.load.continue121

pred.load.if120:                                  ; preds = %vector.body107
  %111 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %77, i64 %index112, i32 1
  %112 = load i32, i32* %111, align 4, !tbaa !189
  br label %pred.load.continue121

pred.load.continue121:                            ; preds = %pred.load.if120, %vector.body107
  %113 = phi i32 [ poison, %vector.body107 ], [ %112, %pred.load.if120 ]
  br i1 %108, label %pred.load.if122, label %pred.load.continue123

pred.load.if122:                                  ; preds = %pred.load.continue121
  %114 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %77, i64 %induction117, i32 1
  %115 = load i32, i32* %114, align 4, !tbaa !189
  br label %pred.load.continue123

pred.load.continue123:                            ; preds = %pred.load.if122, %pred.load.continue121
  %116 = phi i32 [ poison, %pred.load.continue121 ], [ %115, %pred.load.if122 ]
  %117 = add nsw i32 %113, -1
  %118 = add nsw i32 %116, -1
  %119 = sext i32 %117 to i64
  %120 = sext i32 %118 to i64
  %121 = mul nsw i64 %119, %109
  %122 = mul nsw i64 %120, %110
  %123 = select i1 %107, i64 %121, i64 0
  %predphi124 = add i64 %vec.phi118, %123
  %124 = select i1 %108, i64 %122, i64 0
  %predphi125 = add i64 %vec.phi119, %124
  %index.next113 = add i64 %index112, 2
  %125 = icmp eq i64 %index.next113, %n.vec111
  br i1 %125, label %middle.block105, label %vector.body107, !llvm.loop !219

middle.block105:                                  ; preds = %pred.load.continue123
  %bin.rdx126 = add i64 %predphi125, %predphi124
  %cmp.n115 = icmp eq i64 %n.vec111, %wide.trip.count.i.i
  br i1 %cmp.n115, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i.preheader157

for.body.i13.i.preheader157:                      ; preds = %for.body.i13.i.preheader, %middle.block105
  %indvars.iv.i10.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %n.vec111, %middle.block105 ]
  %index.018.i.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %bin.rdx126, %middle.block105 ]
  br label %for.body.i13.i

for.body.i13.i:                                   ; preds = %for.body.i13.i.preheader157, %if.end.i24.i
  %indvars.iv.i10.i = phi i64 [ %indvars.iv.next.i22.i, %if.end.i24.i ], [ %indvars.iv.i10.i.ph, %for.body.i13.i.preheader157 ]
  %index.018.i.i = phi i64 [ %index.1.i21.i, %if.end.i24.i ], [ %index.018.i.i.ph, %for.body.i13.i.preheader157 ]
  %stride2.i11.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %77, i64 %indvars.iv.i10.i, i32 2
  %126 = load i32, i32* %stride2.i11.i, align 4, !tbaa !185
  %cmp3.i12.i = icmp slt i32 %126, 0
  br i1 %cmp3.i12.i, label %if.then.i20.i, label %if.end.i24.i

if.then.i20.i:                                    ; preds = %for.body.i13.i
  %conv.i14.i = sext i32 %126 to i64
  %extent.i15.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %77, i64 %indvars.iv.i10.i, i32 1
  %127 = load i32, i32* %extent.i15.i, align 4, !tbaa !189
  %sub.i16.i = add nsw i32 %127, -1
  %conv7.i17.i = sext i32 %sub.i16.i to i64
  %mul.i18.i = mul nsw i64 %conv7.i17.i, %conv.i14.i
  %add.i19.i = add nsw i64 %mul.i18.i, %index.018.i.i
  br label %if.end.i24.i

if.end.i24.i:                                     ; preds = %if.then.i20.i, %for.body.i13.i
  %index.1.i21.i = phi i64 [ %add.i19.i, %if.then.i20.i ], [ %index.018.i.i, %for.body.i13.i ]
  %indvars.iv.next.i22.i = add nuw nsw i64 %indvars.iv.i10.i, 1
  %exitcond.not.i23.i = icmp eq i64 %indvars.iv.next.i22.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i23.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i, !llvm.loop !220

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %if.end.i24.i, %middle.block105
  %index.1.i21.i.lcssa = phi i64 [ %bin.rdx126, %middle.block105 ], [ %index.1.i21.i, %if.end.i24.i ]
  %add8.i.i = add nsw i64 %index.1.i.i.lcssa, 1
  %sub.i694.1 = sub nsw i64 %add8.i.i, %index.1.i21.i.lcssa
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit
  %add8.i27.i = phi i64 [ 1, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge ], [ %add8.i.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %sub.i694.phi = phi i64 [ %sub.i694.0, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge ], [ %sub.i694.1, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %128 = load i8, i8* %bits.i, align 1, !tbaa !144
  %conv.i.i696 = zext i8 %128 to i64
  %add.i4.i = add nuw nsw i64 %conv.i.i696, 7
  %div.i.i697 = lshr i64 %add.i4.i, 3
  %mul.i698 = mul i64 %div.i.i697, %sub.i694.phi
  %129 = trunc i64 %mul.i698 to i32
  %130 = add i32 %129, 7
  %131 = and i32 %130, 7
  %conv204 = xor i32 %131, 7
  %conv205 = zext i32 %conv204 to i64
  %add206 = add i64 %mul.i698, %conv205
  %tobool207.not = icmp ult i64 %add206, 4294967296
  br i1 %tobool207.not, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687, label %cleanup278.thread

cleanup278.thread:                                ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.6.40, i64 0, i64 0)) #14
  call void @llvm.lifetime.end.p0i8(i64 129, i8* nonnull %75) #11
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %55) #11
  br label %cleanup433

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687: ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  %132 = icmp sgt i32 %76, 2
  %spec.store.select = select i1 %132, i32 %76, i32 2
  %133 = bitcast [8 x i32]* %tags to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %133) #11
  %arrayinit.begin = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 0
  store i32 14, i32* %arrayinit.begin, align 4, !tbaa !41
  %arrayinit.element = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 1
  %add214 = shl i32 %spec.store.select, 2
  %and215 = add i32 %add214, 4
  %mul216 = and i32 %and215, -8
  %add217 = add i32 %and, 40
  %add218 = add i32 %add217, %mul216
  %add220 = add i32 %add218, %129
  %add221 = add i32 %add220, %conv204
  store i32 %add221, i32* %arrayinit.element, align 4, !tbaa !41
  %arrayinit.element222 = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 2
  %134 = bitcast i32* %arrayinit.element222 to <2 x i32>*
  store <2 x i32> <i32 6, i32 8>, <2 x i32>* %134, align 4, !tbaa !41
  %arrayinit.element224 = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 4
  %idxprom225 = sext i32 %type_code to i64
  %arrayidx226 = getelementptr inbounds [10 x i8], [10 x i8]* @_ZN6Halide7Runtime8Internal31pixel_type_to_matlab_class_codeE, i64 0, i64 %idxprom225
  %135 = load i8, i8* %arrayidx226, align 1, !tbaa !18
  %conv227 = zext i8 %135 to i32
  store i32 %conv227, i32* %arrayinit.element224, align 4, !tbaa !41
  %arrayinit.element228 = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 5
  %136 = bitcast i32* %arrayinit.element228 to <2 x i32>*
  store <2 x i32> <i32 1, i32 5>, <2 x i32>* %136, align 4, !tbaa !41
  %arrayinit.element230 = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 7
  store i32 %add214, i32* %arrayinit.element230, align 4, !tbaa !41
  %call.i683 = call i64 @fwrite(i8* nonnull %133, i64 32, i64 1, i8* nonnull %call.i598) #14
  %cmp.i684.not = icmp eq i64 %call.i683, 0
  br i1 %cmp.i684.not, label %cleanup278, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676: ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687
  %137 = bitcast [4 x i32]* %extents to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %137) #11
  %arrayinit.begin235 = getelementptr inbounds [4 x i32], [4 x i32]* %extents, i64 0, i64 0
  %138 = load i32, i32* %extent.i, align 4, !tbaa !189
  store i32 %138, i32* %arrayinit.begin235, align 4, !tbaa !41
  %arrayinit.element238 = getelementptr inbounds [4 x i32], [4 x i32]* %extents, i64 0, i64 1
  %139 = load i32, i32* %extent.i.1, align 4, !tbaa !189
  store i32 %139, i32* %arrayinit.element238, align 4, !tbaa !41
  %arrayinit.element241 = getelementptr inbounds [4 x i32], [4 x i32]* %extents, i64 0, i64 2
  %140 = load i32, i32* %extent.i.2, align 4, !tbaa !189
  store i32 %140, i32* %arrayinit.element241, align 4, !tbaa !41
  %arrayinit.element244 = getelementptr inbounds [4 x i32], [4 x i32]* %extents, i64 0, i64 3
  %141 = load i32, i32* %extent.i.3, align 4, !tbaa !189
  store i32 %141, i32* %arrayinit.element244, align 4, !tbaa !41
  %conv248 = sext i32 %mul216 to i64
  %call.i672 = call i64 @fwrite(i8* nonnull %137, i64 %conv248, i64 1, i8* nonnull %call.i598) #14
  %cmp.i673.not = icmp eq i64 %call.i672, 0
  br i1 %cmp.i673.not, label %cleanup274, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664: ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676
  %142 = bitcast [2 x i32]* %name_header to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %142) #11
  %arrayinit.begin252 = getelementptr inbounds [2 x i32], [2 x i32]* %name_header, i64 0, i64 0
  store i32 1, i32* %arrayinit.begin252, align 4, !tbaa !41
  %arrayinit.element253 = getelementptr inbounds [2 x i32], [2 x i32]* %name_header, i64 0, i64 1
  store i32 %conv184, i32* %arrayinit.element253, align 4, !tbaa !41
  %call.i660 = call i64 @fwrite(i8* nonnull %142, i64 8, i64 1, i8* nonnull %call.i598) #14
  %cmp.i661.not = icmp eq i64 %call.i660, 0
  br i1 %cmp.i661.not, label %cleanup273, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652: ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664
  %conv258 = zext i32 %and to i64
  %call.i648 = call i64 @fwrite(i8* nonnull %55, i64 %conv258, i64 1, i8* nonnull %call.i598) #14
  %cmp.i649.not = icmp eq i64 %call.i648, 0
  br i1 %cmp.i649.not, label %cleanup273, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit642

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit642: ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652
  %143 = bitcast [2 x i32]* %payload_header to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %143) #11
  %arrayinit.begin262 = getelementptr inbounds [2 x i32], [2 x i32]* %payload_header, i64 0, i64 0
  %arrayidx264 = getelementptr inbounds [10 x i8], [10 x i8]* @_ZN6Halide7Runtime8Internal30pixel_type_to_matlab_type_codeE, i64 0, i64 %idxprom225
  %144 = load i8, i8* %arrayidx264, align 1, !tbaa !18
  %conv265 = zext i8 %144 to i32
  store i32 %conv265, i32* %arrayinit.begin262, align 4, !tbaa !41
  %arrayinit.element266 = getelementptr inbounds [2 x i32], [2 x i32]* %payload_header, i64 0, i64 1
  store i32 %129, i32* %arrayinit.element266, align 4, !tbaa !41
  %call.i638 = call i64 @fwrite(i8* nonnull %143, i64 8, i64 1, i8* nonnull %call.i598) #14
  %cmp.i639.not = icmp eq i64 %call.i638, 0
  %cleanup.dest.slot.5 = zext i1 %cmp.i639.not to i32
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %143) #11
  br label %cleanup273

cleanup273:                                       ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit642, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664
  %cleanup.dest.slot.6 = phi i32 [ %cleanup.dest.slot.5, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit642 ], [ 1, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664 ], [ 1, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652 ]
  %retval.6 = phi i32 [ -11, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit642 ], [ -9, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664 ], [ -10, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %142) #11
  br label %cleanup274

cleanup274:                                       ; preds = %cleanup273, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676
  %cleanup.dest.slot.7 = phi i32 [ %cleanup.dest.slot.6, %cleanup273 ], [ 1, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676 ]
  %retval.7 = phi i32 [ %retval.6, %cleanup273 ], [ -8, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %137) #11
  br label %cleanup278

cleanup278:                                       ; preds = %cleanup274, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687
  %cleanup.dest.slot.8 = phi i32 [ %cleanup.dest.slot.7, %cleanup274 ], [ 1, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687 ]
  %retval.8 = phi i32 [ %retval.7, %cleanup274 ], [ -7, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %133) #11
  call void @llvm.lifetime.end.p0i8(i64 129, i8* nonnull %75) #11
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %55) #11
  %cond442 = icmp eq i32 %cleanup.dest.slot.8, 0
  br i1 %cond442, label %if.end311, label %cleanup433

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631: ; preds = %if.else164
  %145 = bitcast [5 x i32]* %header289 to i8*
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %145) #11
  %arrayinit.begin290 = getelementptr inbounds [5 x i32], [5 x i32]* %header289, i64 0, i64 0
  %146 = load i32, i32* %extent.i, align 4, !tbaa !189
  store i32 %146, i32* %arrayinit.begin290, align 4, !tbaa !41
  %arrayinit.element293 = getelementptr inbounds [5 x i32], [5 x i32]* %header289, i64 0, i64 1
  %147 = load i32, i32* %extent.i.1, align 4, !tbaa !189
  store i32 %147, i32* %arrayinit.element293, align 4, !tbaa !41
  %arrayinit.element296 = getelementptr inbounds [5 x i32], [5 x i32]* %header289, i64 0, i64 2
  %148 = load i32, i32* %extent.i.2, align 4, !tbaa !189
  store i32 %148, i32* %arrayinit.element296, align 4, !tbaa !41
  %arrayinit.element299 = getelementptr inbounds [5 x i32], [5 x i32]* %header289, i64 0, i64 3
  %149 = load i32, i32* %extent.i.3, align 4, !tbaa !189
  store i32 %149, i32* %arrayinit.element299, align 4, !tbaa !41
  %arrayinit.element302 = getelementptr inbounds [5 x i32], [5 x i32]* %header289, i64 0, i64 4
  store i32 %type_code, i32* %arrayinit.element302, align 4, !tbaa !41
  %call.i627 = call i64 @fwrite(i8* nonnull %145, i64 20, i64 1, i8* nonnull %call.i598) #14
  %cmp.i628.not = icmp eq i64 %call.i627, 0
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %145) #11
  br i1 %cmp.i628.not, label %cleanup433, label %if.end311

if.end311:                                        ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631, %cleanup278, %cleanup154.thread
  %final_padding_bytes.0 = phi i32 [ %conv204, %cleanup278 ], [ 0, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631 ], [ 0, %cleanup154.thread ]
  %150 = getelementptr inbounds [4096 x i8], [4096 x i8]* %temp, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %150) #11
  %div = udiv i32 4096, %div.i
  %151 = load i32, i32* %extent.i.3, align 4, !tbaa !189
  %cmp320856 = icmp sgt i32 %151, 0
  br i1 %cmp320856, label %for.body322.lr.ph, label %if.end412

for.body322.lr.ph:                                ; preds = %if.end311
  %152 = load i32, i32* %min.i.3, align 16, !tbaa !221
  %153 = bitcast [4 x i32]* %idx to i8*
  %arrayinit.begin357 = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 0
  %arrayinit.element358 = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 1
  %arrayinit.element359 = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 2
  %arrayinit.element360 = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 3
  %dim.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  %conv368 = zext i32 %div.i to i64
  %mul373 = mul nuw nsw i32 %div, %div.i
  %conv374 = zext i32 %mul373 to i64
  %.pre891 = load i32, i32* %min.i.2, align 16, !tbaa !221
  %.pre892 = load i32, i32* %extent.i.2, align 4, !tbaa !189
  %.pre893 = load i32, i32* %min.i.1, align 16
  %.pre894 = load i32, i32* %extent.i.1, align 4
  %.pre = load i32, i32* %extent.i, align 4
  %154 = load i32, i32* %min.i, align 16
  %155 = load i32, i32* %extent.i, align 4
  %156 = load i32, i32* %min.i, align 16
  %add352 = add nsw i32 %156, %155
  %.pre15 = load i32, i32* %extent.i.1, align 4
  %.pre16 = load i32, i32* %min.i.1, align 16
  %.pre896 = load i32, i32* %extent.i.2, align 4
  %.pre897 = load i32, i32* %min.i.2, align 16
  %.pre898 = load i32, i32* %extent.i.3, align 4
  %.pre899 = load i32, i32* %min.i.3, align 16
  br label %for.body322

for.body322:                                      ; preds = %for.inc399, %for.body322.lr.ph
  %157 = phi i32 [ %152, %for.body322.lr.ph ], [ %218, %for.inc399 ]
  %158 = phi i32 [ %151, %for.body322.lr.ph ], [ %219, %for.inc399 ]
  %159 = phi i32 [ %.pre891, %for.body322.lr.ph ], [ %220, %for.inc399 ]
  %160 = phi i32 [ %.pre892, %for.body322.lr.ph ], [ %221, %for.inc399 ]
  %161 = phi i32 [ %.pre892, %for.body322.lr.ph ], [ %222, %for.inc399 ]
  %162 = phi i32 [ %.pre891, %for.body322.lr.ph ], [ %223, %for.inc399 ]
  %dim3.0858 = phi i32 [ %152, %for.body322.lr.ph ], [ %inc400, %for.inc399 ]
  %counter.0857 = phi i32 [ 0, %for.body322.lr.ph ], [ %counter.1.lcssa, %for.inc399 ]
  %cmp331848 = icmp sgt i32 %161, 0
  br i1 %cmp331848, label %for.body333, label %for.inc399

for.body333:                                      ; preds = %for.body322, %for.inc394
  %163 = phi i32 [ %212, %for.inc394 ], [ %.pre893, %for.body322 ]
  %164 = phi i32 [ %213, %for.inc394 ], [ %.pre894, %for.body322 ]
  %165 = phi i32 [ %214, %for.inc394 ], [ %159, %for.body322 ]
  %166 = phi i32 [ %215, %for.inc394 ], [ %160, %for.body322 ]
  %167 = phi i32 [ %216, %for.inc394 ], [ %.pre894, %for.body322 ]
  %168 = phi i32 [ %217, %for.inc394 ], [ %.pre893, %for.body322 ]
  %dim2.0850 = phi i32 [ %inc395, %for.inc394 ], [ %162, %for.body322 ]
  %counter.1849 = phi i32 [ %counter.2.lcssa, %for.inc394 ], [ %counter.0857, %for.body322 ]
  %cmp342839 = icmp sgt i32 %167, 0
  br i1 %cmp342839, label %for.body344, label %for.inc394

for.body344:                                      ; preds = %for.body333, %for.inc389
  %169 = phi i32 [ %209, %for.inc389 ], [ %163, %for.body333 ]
  %170 = phi i32 [ %210, %for.inc389 ], [ %164, %for.body333 ]
  %171 = phi i32 [ %211, %for.inc389 ], [ %.pre, %for.body333 ]
  %dim1.0841 = phi i32 [ %inc390, %for.inc389 ], [ %168, %for.body333 ]
  %counter.2840 = phi i32 [ %counter.6797, %for.inc389 ], [ %counter.1849, %for.body333 ]
  %cmp353834 = icmp sgt i32 %171, 0
  br i1 %cmp353834, label %for.body355, label %for.inc389

for.body355:                                      ; preds = %for.body344, %for.inc384
  %dim0.0836 = phi i32 [ %inc385, %for.inc384 ], [ %154, %for.body344 ]
  %counter.3835 = phi i32 [ %counter.4, %for.inc384 ], [ %counter.2840, %for.body344 ]
  %inc356 = add nsw i32 %counter.3835, 1
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %153) #11
  store i32 %dim0.0836, i32* %arrayinit.begin357, align 4, !tbaa !41
  store i32 %dim1.0841, i32* %arrayinit.element358, align 4, !tbaa !41
  store i32 %dim2.0850, i32* %arrayinit.element359, align 4, !tbaa !41
  store i32 %dim3.0858, i32* %arrayinit.element360, align 4, !tbaa !41
  %172 = load i32, i32* %dimensions, align 4, !tbaa !183
  %cmp17.i = icmp sgt i32 %172, 0
  br i1 %cmp17.i, label %for.body.lr.ph.i, label %_ZNK15halide_buffer_t10address_ofEPKi.exit

for.body.lr.ph.i:                                 ; preds = %for.body355
  %173 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i, align 8, !tbaa !184
  %wide.trip.count.i = zext i32 %172 to i64
  %stride.i621920 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %173, i64 0, i32 2
  %174 = load i32, i32* %stride.i621920, align 4, !tbaa !185
  %conv.i622921 = sext i32 %174 to i64
  %min.i623922 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %173, i64 0, i32 0
  %175 = load i32, i32* %min.i623922, align 4, !tbaa !221
  %sub.i923 = sub nsw i32 %dim0.0836, %175
  %conv7.i924 = sext i32 %sub.i923 to i64
  %mul.i925 = mul nsw i64 %conv7.i924, %conv.i622921
  %exitcond.not.i927 = icmp eq i32 %172, 1
  br i1 %exitcond.not.i927, label %_ZNK15halide_buffer_t10address_ofEPKi.exit, label %for.body.i.for.body.i_crit_edge.preheader, !llvm.loop !222

for.body.i.for.body.i_crit_edge.preheader:        ; preds = %for.body.lr.ph.i
  %stride.i62126 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %173, i64 1, i32 2
  %176 = load i32, i32* %stride.i62126, align 4, !tbaa !185
  %conv.i62227 = sext i32 %176 to i64
  %min.i62328 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %173, i64 1, i32 0
  %177 = load i32, i32* %min.i62328, align 4, !tbaa !221
  %sub.i29 = sub nsw i32 %dim1.0841, %177
  %conv7.i30 = sext i32 %sub.i29 to i64
  %mul.i31 = mul nsw i64 %conv7.i30, %conv.i62227
  %add.i62432 = add nsw i64 %mul.i31, %mul.i925
  %exitcond.not.i33 = icmp eq i32 %172, 2
  br i1 %exitcond.not.i33, label %_ZNK15halide_buffer_t10address_ofEPKi.exit, label %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph, !llvm.loop !222

for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph: ; preds = %for.body.i.for.body.i_crit_edge.preheader
  %178 = add nsw i64 %wide.trip.count.i, -2
  %min.iters.check131 = icmp ult i64 %178, 5
  br i1 %min.iters.check131, label %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader, label %vector.ph132

vector.ph132:                                     ; preds = %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph
  %n.mod.vf133 = and i64 %178, 3
  %179 = icmp eq i64 %n.mod.vf133, 0
  %180 = select i1 %179, i64 4, i64 %n.mod.vf133
  %n.vec134 = sub nsw i64 %178, %180
  %ind.end138 = add nsw i64 %n.vec134, 2
  %181 = insertelement <2 x i64> <i64 poison, i64 0>, i64 %add.i62432, i32 0
  br label %vector.body130

vector.body130:                                   ; preds = %vector.body130, %vector.ph132
  %index135 = phi i64 [ 0, %vector.ph132 ], [ %index.next136, %vector.body130 ]
  %vec.phi141 = phi <2 x i64> [ %181, %vector.ph132 ], [ %201, %vector.body130 ]
  %vec.phi142 = phi <2 x i64> [ zeroinitializer, %vector.ph132 ], [ %202, %vector.body130 ]
  %offset.idx140 = or i64 %index135, 2
  %182 = add i64 %offset.idx140, 2
  %183 = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 %offset.idx140
  %184 = bitcast i32* %183 to <2 x i32>*
  %wide.load143 = load <2 x i32>, <2 x i32>* %184, align 4, !tbaa !41
  %185 = getelementptr inbounds i32, i32* %183, i64 2
  %186 = bitcast i32* %185 to <2 x i32>*
  %wide.load144 = load <2 x i32>, <2 x i32>* %186, align 4, !tbaa !41
  %187 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %173, i64 %offset.idx140, i32 2
  %188 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %173, i64 %182, i32 2
  %189 = getelementptr inbounds i32, i32* %187, i64 -2
  %190 = bitcast i32* %189 to <8 x i32>*
  %191 = getelementptr inbounds i32, i32* %188, i64 -2
  %192 = bitcast i32* %191 to <8 x i32>*
  %wide.vec = load <8 x i32>, <8 x i32>* %190, align 4, !tbaa !41
  %wide.vec145 = load <8 x i32>, <8 x i32>* %192, align 4, !tbaa !41
  %strided.vec = shufflevector <8 x i32> %wide.vec, <8 x i32> poison, <2 x i32> <i32 0, i32 4>
  %strided.vec146 = shufflevector <8 x i32> %wide.vec145, <8 x i32> poison, <2 x i32> <i32 0, i32 4>
  %strided.vec147 = shufflevector <8 x i32> %wide.vec, <8 x i32> poison, <2 x i32> <i32 2, i32 6>
  %strided.vec148 = shufflevector <8 x i32> %wide.vec145, <8 x i32> poison, <2 x i32> <i32 2, i32 6>
  %193 = sext <2 x i32> %strided.vec147 to <2 x i64>
  %194 = sext <2 x i32> %strided.vec148 to <2 x i64>
  %195 = sub nsw <2 x i32> %wide.load143, %strided.vec
  %196 = sub nsw <2 x i32> %wide.load144, %strided.vec146
  %197 = sext <2 x i32> %195 to <2 x i64>
  %198 = sext <2 x i32> %196 to <2 x i64>
  %199 = mul nsw <2 x i64> %197, %193
  %200 = mul nsw <2 x i64> %198, %194
  %201 = add <2 x i64> %199, %vec.phi141
  %202 = add <2 x i64> %200, %vec.phi142
  %index.next136 = add i64 %index135, 4
  %203 = icmp eq i64 %index.next136, %n.vec134
  br i1 %203, label %middle.block128, label %vector.body130, !llvm.loop !223

middle.block128:                                  ; preds = %vector.body130
  %bin.rdx149 = add <2 x i64> %202, %201
  %204 = call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %bin.rdx149)
  br label %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader

for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader: ; preds = %middle.block128, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph
  %indvars.iv.next.i35.ph = phi i64 [ 2, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph ], [ %ind.end138, %middle.block128 ]
  %add.i62434.ph = phi i64 [ %add.i62432, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph ], [ %204, %middle.block128 ]
  br label %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge

for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge: ; preds = %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge
  %indvars.iv.next.i35 = phi i64 [ %indvars.iv.next.i, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge ], [ %indvars.iv.next.i35.ph, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader ]
  %add.i62434 = phi i64 [ %add.i624, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge ], [ %add.i62434.ph, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader ]
  %arrayidx3.i.phi.trans.insert.phi.trans.insert = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 %indvars.iv.next.i35
  %.pre895.pre = load i32, i32* %arrayidx3.i.phi.trans.insert.phi.trans.insert, align 4, !tbaa !41
  %stride.i621 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %173, i64 %indvars.iv.next.i35, i32 2
  %205 = load i32, i32* %stride.i621, align 4, !tbaa !185
  %conv.i622 = sext i32 %205 to i64
  %min.i623 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %173, i64 %indvars.iv.next.i35, i32 0
  %206 = load i32, i32* %min.i623, align 4, !tbaa !221
  %sub.i = sub nsw i32 %.pre895.pre, %206
  %conv7.i = sext i32 %sub.i to i64
  %mul.i = mul nsw i64 %conv7.i, %conv.i622
  %add.i624 = add nsw i64 %mul.i, %add.i62434
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.next.i35, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.next.i, %wide.trip.count.i
  br i1 %exitcond.not.i, label %_ZNK15halide_buffer_t10address_ofEPKi.exit, label %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge, !llvm.loop !224

_ZNK15halide_buffer_t10address_ofEPKi.exit:       ; preds = %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge, %for.body.i.for.body.i_crit_edge.preheader, %for.body.lr.ph.i, %for.body355
  %index.0.lcssa.i = phi i64 [ 0, %for.body355 ], [ %mul.i925, %for.body.lr.ph.i ], [ %add.i62432, %for.body.i.for.body.i_crit_edge.preheader ], [ %add.i624, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge ]
  %207 = load i8*, i8** %host.i, align 8, !tbaa !180
  %208 = load i8, i8* %bits.i, align 1, !tbaa !144
  %conv.i.i = zext i8 %208 to i64
  %add.i.i = add nuw nsw i64 %conv.i.i, 7
  %div.i.i = lshr i64 %add.i.i, 3
  %mul9.i = mul nsw i64 %div.i.i, %index.0.lcssa.i
  %add.ptr.i = getelementptr inbounds i8, i8* %207, i64 %mul9.i
  %mul366 = mul nsw i32 %counter.3835, %div.i
  %idx.ext = sext i32 %mul366 to i64
  %add.ptr367 = getelementptr inbounds [4096 x i8], [4096 x i8]* %temp, i64 0, i64 %idx.ext
  %call369 = call i8* @memcpy(i8* nonnull %add.ptr367, i8* %add.ptr.i, i64 %conv368) #14
  %cmp370 = icmp eq i32 %inc356, %div
  br i1 %cmp370, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit619, label %for.inc384

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit619: ; preds = %_ZNK15halide_buffer_t10address_ofEPKi.exit
  %call.i615 = call i64 @fwrite(i8* nonnull %150, i64 %conv374, i64 1, i8* nonnull %call.i598) #14
  %cmp.i616.not = icmp eq i64 %call.i615, 0
  br i1 %cmp.i616.not, label %cleanup425.loopexit, label %for.inc384

for.inc384:                                       ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit619, %_ZNK15halide_buffer_t10address_ofEPKi.exit
  %counter.4 = phi i32 [ 0, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit619 ], [ %inc356, %_ZNK15halide_buffer_t10address_ofEPKi.exit ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %153) #11
  %inc385 = add nsw i32 %dim0.0836, 1
  %cmp353 = icmp slt i32 %inc385, %add352
  br i1 %cmp353, label %for.body355, label %for.inc389, !llvm.loop !225

for.inc389:                                       ; preds = %for.inc384, %for.body344
  %209 = phi i32 [ %169, %for.body344 ], [ %.pre16, %for.inc384 ]
  %210 = phi i32 [ %170, %for.body344 ], [ %.pre15, %for.inc384 ]
  %211 = phi i32 [ %171, %for.body344 ], [ %155, %for.inc384 ]
  %counter.6797 = phi i32 [ %counter.2840, %for.body344 ], [ %counter.4, %for.inc384 ]
  %inc390 = add nsw i32 %dim1.0841, 1
  %add341 = add nsw i32 %209, %210
  %cmp342 = icmp slt i32 %inc390, %add341
  br i1 %cmp342, label %for.body344, label %for.inc394, !llvm.loop !226

for.inc394:                                       ; preds = %for.inc389, %for.body333
  %212 = phi i32 [ %163, %for.body333 ], [ %209, %for.inc389 ]
  %213 = phi i32 [ %164, %for.body333 ], [ %210, %for.inc389 ]
  %214 = phi i32 [ %165, %for.body333 ], [ %.pre897, %for.inc389 ]
  %215 = phi i32 [ %166, %for.body333 ], [ %.pre896, %for.inc389 ]
  %216 = phi i32 [ %167, %for.body333 ], [ %210, %for.inc389 ]
  %217 = phi i32 [ %168, %for.body333 ], [ %209, %for.inc389 ]
  %counter.2.lcssa = phi i32 [ %counter.1849, %for.body333 ], [ %counter.6797, %for.inc389 ]
  %inc395 = add nsw i32 %dim2.0850, 1
  %add330 = add nsw i32 %215, %214
  %cmp331 = icmp slt i32 %inc395, %add330
  br i1 %cmp331, label %for.body333, label %for.inc399, !llvm.loop !227

for.inc399:                                       ; preds = %for.inc394, %for.body322
  %218 = phi i32 [ %157, %for.body322 ], [ %.pre899, %for.inc394 ]
  %219 = phi i32 [ %158, %for.body322 ], [ %.pre898, %for.inc394 ]
  %220 = phi i32 [ %159, %for.body322 ], [ %214, %for.inc394 ]
  %221 = phi i32 [ %160, %for.body322 ], [ %215, %for.inc394 ]
  %222 = phi i32 [ %161, %for.body322 ], [ %215, %for.inc394 ]
  %223 = phi i32 [ %162, %for.body322 ], [ %214, %for.inc394 ]
  %counter.1.lcssa = phi i32 [ %counter.0857, %for.body322 ], [ %counter.2.lcssa, %for.inc394 ]
  %inc400 = add nsw i32 %dim3.0858, 1
  %add319 = add nsw i32 %219, %218
  %cmp320 = icmp slt i32 %inc400, %add319
  br i1 %cmp320, label %for.body322, label %for.end403, !llvm.loop !228

for.end403:                                       ; preds = %for.inc399
  %cmp404 = icmp sgt i32 %counter.1.lcssa, 0
  br i1 %cmp404, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit612, label %if.end412

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit612: ; preds = %for.end403
  %mul407 = mul nsw i32 %counter.1.lcssa, %div.i
  %conv408 = sext i32 %mul407 to i64
  %call.i608 = call i64 @fwrite(i8* nonnull %150, i64 %conv408, i64 1, i8* nonnull %call.i598) #14
  %cmp.i609.not = icmp eq i64 %call.i608, 0
  br i1 %cmp.i609.not, label %cleanup425, label %if.end412

if.end412:                                        ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit612, %for.end403, %if.end311
  %224 = bitcast i64* %zero to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %224) #11
  store i64 0, i64* %zero, align 8, !tbaa !22
  %tobool413.not = icmp eq i32 %final_padding_bytes.0, 0
  br i1 %tobool413.not, label %if.end423, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit: ; preds = %if.end412
  %conv415 = zext i32 %final_padding_bytes.0 to i64
  %call.i604 = call i64 @fwrite(i8* nonnull %224, i64 %conv415, i64 1, i8* nonnull %call.i598) #14
  %cmp.i605.not = icmp eq i64 %call.i604, 0
  br i1 %cmp.i605.not, label %cleanup424, label %if.end423

if.end423:                                        ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit, %if.end412
  br label %cleanup424

cleanup424:                                       ; preds = %if.end423, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit
  %retval.21 = phi i32 [ 0, %if.end423 ], [ -16, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %224) #11
  br label %cleanup425

cleanup425.loopexit:                              ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit619
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %153) #11
  br label %cleanup425

cleanup425:                                       ; preds = %cleanup425.loopexit, %cleanup424, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit612
  %retval.22 = phi i32 [ %retval.21, %cleanup424 ], [ -14, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit612 ], [ -13, %cleanup425.loopexit ]
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %150) #11
  br label %cleanup433

cleanup433:                                       ; preds = %cleanup425, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631, %cleanup278, %cleanup278.thread, %cleanup154
  %retval.23 = phi i32 [ %retval.22, %cleanup425 ], [ %retval.4, %cleanup154 ], [ %retval.8, %cleanup278 ], [ -12, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631 ], [ -6, %cleanup278.thread ]
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %3) #11
  %call.i = call i32 @fclose(i8* nonnull %call.i598) #14
  br label %return

return:                                           ; preds = %cleanup433, %if.end6, %if.end2, %if.then1, %if.then
  %retval.26 = phi i32 [ -1, %if.then ], [ -1, %if.then1 ], [ %call3, %if.end2 ], [ %retval.23, %cleanup433 ], [ -2, %if.end6 ]
  ret i32 %retval.26
}

declare i64 @fwrite(i8*, i64, i64, i8*) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_cache_cleanup() #0 {
entry:
  tail call void @halide_memoization_cache_cleanup() #15
  ret void
}

; Function Attrs: nounwind mustprogress
define weak void @halide_memoization_cache_cleanup() local_unnamed_addr #0 {
entry:
  br label %for.body

for.cond.cleanup:                                 ; preds = %while.end
  store i64 0, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !22
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !14
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !14
  ret void

for.body:                                         ; preds = %while.end, %entry
  %__begin1.018 = phi %"struct.Halide::Runtime::Internal::CacheEntry"** [ getelementptr inbounds ([256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 0, i64 0), %entry ], [ %incdec.ptr, %while.end ]
  %0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %__begin1.018, align 8, !tbaa !14
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %__begin1.018, align 8, !tbaa !14
  %cmp2.not16 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %0, null
  br i1 %cmp2.not16, label %while.end, label %while.body

while.body:                                       ; preds = %for.body, %while.body
  %entry1.017 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %1, %while.body ], [ %0, %for.body ]
  %next3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.017, i64 0, i32 0
  %1 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next3, align 8, !tbaa !229
  tail call void @_ZN6Halide7Runtime8Internal10CacheEntry7destroyEv(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %entry1.017) #15
  %2 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.017 to i8*
  tail call void @halide_free(i8* null, i8* nonnull %2) #14
  %cmp2.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %1, null
  br i1 %cmp2.not, label %while.end, label %while.body, !llvm.loop !231

while.end:                                        ; preds = %while.body, %for.body
  %incdec.ptr = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %__begin1.018, i64 1
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"** %incdec.ptr, getelementptr inbounds ([256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 1, i64 0)
  br i1 %cmp.not, label %for.cond.cleanup, label %for.body
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal10CacheEntry7destroyEv(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %this) local_unnamed_addr #0 align 2 {
entry:
  %tuple_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 8
  %0 = load i32, i32* %tuple_count, align 8, !tbaa !232
  %cmp11.not = icmp eq i32 %0, 0
  br i1 %cmp11.not, label %for.cond.cleanup, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %entry
  %buf = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 11
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %entry
  %metadata_storage = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 3
  %1 = load i8*, i8** %metadata_storage, align 8, !tbaa !233
  tail call void @halide_free(i8* null, i8* %1) #14
  ret void

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.body ]
  %2 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !234
  %arrayidx = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %2, i64 %indvars.iv
  %call = tail call i32 @halide_device_free(i8* null, %struct.halide_buffer_t* %arrayidx) #14
  %3 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !234
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %3, i64 %indvars.iv, i32 2
  %4 = load i8*, i8** %host, align 8, !tbaa !180
  %call6 = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %4) #15
  %5 = bitcast %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call6 to i8*
  tail call void @halide_free(i8* null, i8* %5) #14
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %6 = load i32, i32* %tuple_count, align 8, !tbaa !232
  %7 = zext i32 %6 to i64
  %cmp = icmp ult i64 %indvars.iv.next, %7
  br i1 %cmp, label %for.body, label %for.cond.cleanup, !llvm.loop !235
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %host) local_unnamed_addr #2 {
entry:
  %add.ptr = getelementptr inbounds i8, i8* %host, i64 -32
  %0 = bitcast i8* %add.ptr to %"struct.Halide::Runtime::Internal::CacheBlockHeader"*
  ret %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %0
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal18copy_memory_helperERKNS1_11device_copyEixx(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i32 %d, i64 %src_off, i64 %dst_off) local_unnamed_addr #0 {
entry:
  %cmp41 = icmp sgt i32 %d, -1
  br i1 %cmp41, label %land.rhs, label %while.end

land.rhs:                                         ; preds = %entry, %while.body
  %d.addr.042 = phi i32 [ %dec, %while.body ], [ %d, %entry ]
  %idxprom36 = zext i32 %d.addr.042 to i64
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 3, i64 %idxprom36
  %0 = load i64, i64* %arrayidx, align 8, !tbaa !22
  %cmp1 = icmp eq i64 %0, 1
  br i1 %cmp1, label %while.body, label %while.end

while.body:                                       ; preds = %land.rhs
  %dec = add nsw i32 %d.addr.042, -1
  %cmp = icmp sgt i32 %d.addr.042, 0
  br i1 %cmp, label %land.rhs, label %if.then, !llvm.loop !236

while.end:                                        ; preds = %land.rhs, %entry
  %d.addr.0.lcssa = phi i32 [ %d, %entry ], [ %d.addr.042, %land.rhs ]
  %cmp2 = icmp eq i32 %d.addr.0.lcssa, -1
  br i1 %cmp2, label %if.then, label %for.cond.preheader

for.cond.preheader:                               ; preds = %while.end
  %idxprom5 = sext i32 %d.addr.0.lcssa to i64
  %arrayidx6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 3, i64 %idxprom5
  %1 = load i64, i64* %arrayidx6, align 8, !tbaa !22
  %cmp737.not = icmp eq i64 %1, 0
  br i1 %cmp737.not, label %if.end, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %for.cond.preheader
  %sub = add nsw i32 %d.addr.0.lcssa, -1
  %arrayidx9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 4, i64 %idxprom5
  %arrayidx12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 5, i64 %idxprom5
  %inc.0 = add nuw i64 0, 1
  br label %for.body

if.then:                                          ; preds = %while.body, %while.end
  %src = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 0
  %2 = load i64, i64* %src, align 8, !tbaa !237
  %add = add i64 %2, %src_off
  %3 = inttoptr i64 %add to i8*
  %dst = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 1
  %4 = load i64, i64* %dst, align 8, !tbaa !239
  %add3 = add i64 %4, %dst_off
  %5 = inttoptr i64 %add3 to i8*
  %chunk_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 6
  %6 = load i64, i64* %chunk_size, align 8, !tbaa !240
  %call = tail call i8* @memcpy(i8* %5, i8* %3, i64 %6) #14
  br label %if.end

for.body:                                         ; preds = %for.body.for.body_crit_edge, %for.body.lr.ph
  %inc.phi = phi i64 [ %inc.0, %for.body.lr.ph ], [ %inc.1, %for.body.for.body_crit_edge ]
  %src_off.addr.039 = phi i64 [ %src_off, %for.body.lr.ph ], [ %add10, %for.body.for.body_crit_edge ]
  %dst_off.addr.038 = phi i64 [ %dst_off, %for.body.lr.ph ], [ %add13, %for.body.for.body_crit_edge ]
  tail call void @_ZN6Halide7Runtime8Internal18copy_memory_helperERKNS1_11device_copyEixx(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i32 %sub, i64 %src_off.addr.039, i64 %dst_off.addr.038) #15
  %7 = load i64, i64* %arrayidx9, align 8, !tbaa !22
  %add10 = add i64 %7, %src_off.addr.039
  %8 = load i64, i64* %arrayidx12, align 8, !tbaa !22
  %add13 = add i64 %8, %dst_off.addr.038
  %9 = load i64, i64* %arrayidx6, align 8, !tbaa !22
  %cmp7 = icmp ult i64 %inc.phi, %9
  br i1 %cmp7, label %for.body.for.body_crit_edge, label %if.end, !llvm.loop !241

for.body.for.body_crit_edge:                      ; preds = %for.body
  %inc.1 = add nuw i64 %inc.phi, 1
  br label %for.body

if.end:                                           ; preds = %for.body, %if.then, %for.cond.preheader
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal11copy_memoryERKNS1_11device_copyEPv(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i8* %user_context) local_unnamed_addr #0 {
entry:
  %src = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 0
  %0 = load i64, i64* %src, align 8, !tbaa !237
  %dst = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 1
  %1 = load i64, i64* %dst, align 8, !tbaa !239
  %cmp.not = icmp eq i64 %0, %1
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %src_begin = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 2
  %2 = load i64, i64* %src_begin, align 8, !tbaa !242
  tail call void @_ZN6Halide7Runtime8Internal18copy_memory_helperERKNS1_11device_copyEixx(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i32 15, i64 %2, i64 0) #15
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal16make_buffer_copyEPK15halide_buffer_tbS4_b(%"struct.Halide::Runtime::Internal::device_copy"* noalias sret(%"struct.Halide::Runtime::Internal::device_copy") align 8 %agg.result, %struct.halide_buffer_t* %src, i1 zeroext %src_host, %struct.halide_buffer_t* %dst, i1 zeroext %dst_host) local_unnamed_addr #0 {
entry:
  %c = alloca %"struct.Halide::Runtime::Internal::device_copy", align 8
  %0 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %c to i8*
  call void @llvm.lifetime.start.p0i8(i64 416, i8* nonnull %0) #11
  br i1 %src_host, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 2
  %1 = load i8*, i8** %host, align 8, !tbaa !180
  %2 = ptrtoint i8* %1 to i64
  br label %cond.end

cond.false:                                       ; preds = %entry
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 0
  %3 = load i64, i64* %device, align 8, !tbaa !182
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %2, %cond.true ], [ %3, %cond.false ]
  %src2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 0
  store i64 %cond, i64* %src2, align 8, !tbaa !237
  br i1 %dst_host, label %cond.true4, label %cond.false6

cond.true4:                                       ; preds = %cond.end
  %host5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 2
  %4 = load i8*, i8** %host5, align 8, !tbaa !180
  %5 = ptrtoint i8* %4 to i64
  br label %cond.end8

cond.false6:                                      ; preds = %cond.end
  %device7 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 0
  %6 = load i64, i64* %device7, align 8, !tbaa !182
  br label %cond.end8

cond.end8:                                        ; preds = %cond.false6, %cond.true4
  %cond9 = phi i64 [ %5, %cond.true4 ], [ %6, %cond.false6 ]
  %dst10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 1
  store i64 %cond9, i64* %dst10, align 8, !tbaa !239
  %bits.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 4, i32 1
  %7 = load i8, i8* %bits.i, align 1, !tbaa !144
  %conv.i = zext i8 %7 to i32
  %add.i = add nuw nsw i32 %conv.i, 7
  %div.i = lshr i32 %add.i, 3
  %conv = zext i32 %div.i to i64
  %chunk_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 6
  store i64 %conv, i64* %chunk_size, align 8, !tbaa !240
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 0
  %arrayidx12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 0
  %arrayidx14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 0
  %arrayidx.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 1
  %8 = bitcast i64* %arrayidx to <2 x i64>*
  store <2 x i64> <i64 1, i64 1>, <2 x i64>* %8, align 8, !tbaa !22
  %arrayidx12.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 1
  %9 = bitcast i64* %arrayidx12 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %9, align 8, !tbaa !22
  %arrayidx14.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 1
  %10 = bitcast i64* %arrayidx14 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %10, align 8, !tbaa !22
  %arrayidx.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 2
  %arrayidx12.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 2
  %arrayidx14.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 2
  %arrayidx.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 3
  %11 = bitcast i64* %arrayidx.2 to <2 x i64>*
  store <2 x i64> <i64 1, i64 1>, <2 x i64>* %11, align 8, !tbaa !22
  %arrayidx12.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 3
  %12 = bitcast i64* %arrayidx12.2 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %12, align 8, !tbaa !22
  %arrayidx14.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 3
  %13 = bitcast i64* %arrayidx14.2 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %13, align 8, !tbaa !22
  %arrayidx.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 4
  %arrayidx12.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 4
  %arrayidx14.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 4
  %arrayidx.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 5
  %14 = bitcast i64* %arrayidx.4 to <2 x i64>*
  store <2 x i64> <i64 1, i64 1>, <2 x i64>* %14, align 8, !tbaa !22
  %arrayidx12.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 5
  %15 = bitcast i64* %arrayidx12.4 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %15, align 8, !tbaa !22
  %arrayidx14.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 5
  %16 = bitcast i64* %arrayidx14.4 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %16, align 8, !tbaa !22
  %arrayidx.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 6
  %arrayidx12.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 6
  %arrayidx14.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 6
  %arrayidx.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 7
  %17 = bitcast i64* %arrayidx.6 to <2 x i64>*
  store <2 x i64> <i64 1, i64 1>, <2 x i64>* %17, align 8, !tbaa !22
  %arrayidx12.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 7
  %18 = bitcast i64* %arrayidx12.6 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %18, align 8, !tbaa !22
  %arrayidx14.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 7
  %19 = bitcast i64* %arrayidx14.6 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %19, align 8, !tbaa !22
  %arrayidx.8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 8
  %arrayidx12.8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 8
  %arrayidx14.8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 8
  %arrayidx.9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 9
  %20 = bitcast i64* %arrayidx.8 to <2 x i64>*
  store <2 x i64> <i64 1, i64 1>, <2 x i64>* %20, align 8, !tbaa !22
  %arrayidx12.9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 9
  %21 = bitcast i64* %arrayidx12.8 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %21, align 8, !tbaa !22
  %arrayidx14.9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 9
  %22 = bitcast i64* %arrayidx14.8 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %22, align 8, !tbaa !22
  %arrayidx.10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 10
  %arrayidx12.10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 10
  %arrayidx14.10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 10
  %arrayidx.11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 11
  %23 = bitcast i64* %arrayidx.10 to <2 x i64>*
  store <2 x i64> <i64 1, i64 1>, <2 x i64>* %23, align 8, !tbaa !22
  %arrayidx12.11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 11
  %24 = bitcast i64* %arrayidx12.10 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %24, align 8, !tbaa !22
  %arrayidx14.11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 11
  %25 = bitcast i64* %arrayidx14.10 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %25, align 8, !tbaa !22
  %arrayidx.12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 12
  %arrayidx12.12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 12
  %arrayidx14.12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 12
  %arrayidx.13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 13
  %26 = bitcast i64* %arrayidx.12 to <2 x i64>*
  store <2 x i64> <i64 1, i64 1>, <2 x i64>* %26, align 8, !tbaa !22
  %arrayidx12.13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 13
  %27 = bitcast i64* %arrayidx12.12 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %27, align 8, !tbaa !22
  %arrayidx14.13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 13
  %28 = bitcast i64* %arrayidx14.12 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %28, align 8, !tbaa !22
  %arrayidx.14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 14
  %arrayidx12.14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 14
  %arrayidx14.14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 14
  %arrayidx.15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 15
  %29 = bitcast i64* %arrayidx.14 to <2 x i64>*
  store <2 x i64> <i64 1, i64 1>, <2 x i64>* %29, align 8, !tbaa !22
  %arrayidx12.15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 15
  %30 = bitcast i64* %arrayidx12.14 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %30, align 8, !tbaa !22
  %arrayidx14.15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 15
  %31 = bitcast i64* %arrayidx14.14 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %31, align 8, !tbaa !22
  %src_begin = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 2
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 5
  %32 = load i32, i32* %dimensions, align 4, !tbaa !183
  %cmp17272 = icmp sgt i32 %32, 0
  br i1 %cmp17272, label %for.body19.lr.ph, label %cond.end8.for.cond.cleanup18_crit_edge

cond.end8.for.cond.cleanup18_crit_edge:           ; preds = %cond.end8
  %mul37.0 = mul i64 %conv, 0
  br label %for.cond.cleanup18

for.body19.lr.ph:                                 ; preds = %cond.end8
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 6
  %33 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !184
  %dim23 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 6
  %34 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim23, align 8, !tbaa !184
  %wide.trip.count = zext i32 %32 to i64
  %min.iters.check = icmp ult i32 %32, 5
  br i1 %min.iters.check, label %for.body19.preheader, label %vector.ph

for.body19.preheader:                             ; preds = %middle.block, %for.body19.lr.ph
  %indvars.iv284.ph = phi i64 [ 0, %for.body19.lr.ph ], [ %n.vec, %middle.block ]
  %.ph = phi i64 [ 0, %for.body19.lr.ph ], [ %61, %middle.block ]
  br label %for.body19

vector.ph:                                        ; preds = %for.body19.lr.ph
  %n.mod.vf = and i64 %wide.trip.count, 3
  %35 = icmp eq i64 %n.mod.vf, 0
  %36 = select i1 %35, i64 4, i64 %n.mod.vf
  %n.vec = sub nsw i64 %wide.trip.count, %36
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %vec.phi = phi <2 x i64> [ zeroinitializer, %vector.ph ], [ %58, %vector.body ]
  %vec.phi2 = phi <2 x i64> [ zeroinitializer, %vector.ph ], [ %59, %vector.body ]
  %37 = or i64 %index, 2
  %38 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %33, i64 %index, i32 2
  %39 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %33, i64 %37, i32 2
  %40 = getelementptr inbounds i32, i32* %38, i64 -2
  %41 = bitcast i32* %40 to <8 x i32>*
  %42 = getelementptr inbounds i32, i32* %39, i64 -2
  %43 = bitcast i32* %42 to <8 x i32>*
  %wide.vec = load <8 x i32>, <8 x i32>* %41, align 4, !tbaa !41
  %wide.vec3 = load <8 x i32>, <8 x i32>* %43, align 4, !tbaa !41
  %strided.vec5 = shufflevector <8 x i32> %wide.vec, <8 x i32> poison, <2 x i32> <i32 2, i32 6>
  %strided.vec6 = shufflevector <8 x i32> %wide.vec3, <8 x i32> poison, <2 x i32> <i32 2, i32 6>
  %44 = sext <2 x i32> %strided.vec5 to <2 x i64>
  %45 = sext <2 x i32> %strided.vec6 to <2 x i64>
  %46 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %34, i64 %index, i32 0
  %47 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %34, i64 %37, i32 0
  %48 = bitcast i32* %46 to <8 x i32>*
  %49 = bitcast i32* %47 to <8 x i32>*
  %wide.vec7 = load <8 x i32>, <8 x i32>* %48, align 4, !tbaa !221
  %wide.vec8 = load <8 x i32>, <8 x i32>* %49, align 4, !tbaa !221
  %50 = sub nsw <8 x i32> %wide.vec7, %wide.vec
  %51 = shufflevector <8 x i32> %50, <8 x i32> undef, <2 x i32> <i32 0, i32 4>
  %52 = sub nsw <8 x i32> %wide.vec8, %wide.vec3
  %53 = shufflevector <8 x i32> %52, <8 x i32> undef, <2 x i32> <i32 0, i32 4>
  %54 = sext <2 x i32> %51 to <2 x i64>
  %55 = sext <2 x i32> %53 to <2 x i64>
  %56 = mul nsw <2 x i64> %54, %44
  %57 = mul nsw <2 x i64> %55, %45
  %58 = add <2 x i64> %56, %vec.phi
  %59 = add <2 x i64> %57, %vec.phi2
  %index.next = add i64 %index, 4
  %60 = icmp eq i64 %index.next, %n.vec
  br i1 %60, label %middle.block, label %vector.body, !llvm.loop !243

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <2 x i64> %59, %58
  %61 = call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %bin.rdx)
  br label %for.body19.preheader

for.cond.cleanup18:                               ; preds = %for.body19.for.cond.cleanup18_crit_edge, %cond.end8.for.cond.cleanup18_crit_edge
  %mul37.phi = phi i64 [ %mul37.0, %cond.end8.for.cond.cleanup18_crit_edge ], [ %mul37.1, %for.body19.for.cond.cleanup18_crit_edge ]
  store i64 %mul37.phi, i64* %src_begin, align 8, !tbaa !242
  %dimensions39 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 5
  %62 = load i32, i32* %dimensions39, align 4, !tbaa !183
  %cmp40.not = icmp eq i32 %32, %62
  br i1 %cmp40.not, label %lor.lhs.false, label %if.then

for.body19:                                       ; preds = %for.body19.preheader, %for.body19
  %indvars.iv284 = phi i64 [ %indvars.iv.next285, %for.body19 ], [ %indvars.iv284.ph, %for.body19.preheader ]
  %63 = phi i64 [ %add, %for.body19 ], [ %.ph, %for.body19.preheader ]
  %stride = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %33, i64 %indvars.iv284, i32 2
  %64 = load i32, i32* %stride, align 4, !tbaa !185
  %conv22 = sext i32 %64 to i64
  %min = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %34, i64 %indvars.iv284, i32 0
  %65 = load i32, i32* %min, align 4, !tbaa !221
  %min29 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %33, i64 %indvars.iv284, i32 0
  %66 = load i32, i32* %min29, align 4, !tbaa !221
  %sub = sub nsw i32 %65, %66
  %conv30 = sext i32 %sub to i64
  %mul = mul nsw i64 %conv30, %conv22
  %add = add i64 %mul, %63
  %indvars.iv.next285 = add nuw nsw i64 %indvars.iv284, 1
  %exitcond286.not = icmp eq i64 %indvars.iv.next285, %wide.trip.count
  br i1 %exitcond286.not, label %for.body19.for.cond.cleanup18_crit_edge, label %for.body19, !llvm.loop !244

for.body19.for.cond.cleanup18_crit_edge:          ; preds = %for.body19
  %mul37.1 = mul i64 %add, %conv
  br label %for.cond.cleanup18

lor.lhs.false:                                    ; preds = %for.cond.cleanup18
  %bits.i253 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 4, i32 1
  %67 = load i8, i8* %bits.i253, align 1, !tbaa !144
  %conv.i254 = zext i8 %67 to i32
  %add.i255 = add nuw nsw i32 %conv.i254, 7
  %div.i256 = lshr i32 %add.i255, 3
  %cmp45.not = icmp ne i32 %div.i, %div.i256
  %cmp48 = icmp sgt i32 %32, 16
  %or.cond261 = or i1 %cmp48, %cmp45.not
  br i1 %or.cond261, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %for.cond.cleanup18
  %68 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %agg.result to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(416) %68, i8 0, i64 416, i1 false)
  br label %cleanup

if.end:                                           ; preds = %lor.lhs.false
  %cmp50 = icmp eq i32 %div.i, 0
  br i1 %cmp50, label %if.then51, label %for.cond54.preheader

for.cond54.preheader:                             ; preds = %if.end
  br i1 %cmp17272, label %for.body58.lr.ph, label %while.end

for.body58.lr.ph:                                 ; preds = %for.cond54.preheader
  %dim60 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 6
  %69 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim60, align 8, !tbaa !184
  %dim70 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 6
  %70 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim70, align 8, !tbaa !184
  %wide.trip.count282 = zext i32 %32 to i64
  br label %for.body58

if.then51:                                        ; preds = %if.end
  %71 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %agg.result to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(416) %71, i8 0, i64 416, i1 false)
  br label %cleanup

while.cond.preheader:                             ; preds = %for.cond.cleanup94
  %.pre = load i64, i64* %chunk_size, align 8, !tbaa !240
  %.pre290 = load i64, i64* %arrayidx12, align 8, !tbaa !22
  %cmp139263 = icmp eq i64 %.pre, %.pre290
  br i1 %cmp139263, label %land.rhs.lr.ph, label %while.end

land.rhs.lr.ph:                                   ; preds = %while.cond.preheader
  %.pre291 = load i64, i64* %arrayidx14, align 8, !tbaa !22
  %72 = bitcast i64* %arrayidx.1 to <2 x i64>*
  %73 = bitcast i64* %arrayidx to <2 x i64>*
  %74 = bitcast i64* %arrayidx12.1 to <2 x i64>*
  %75 = bitcast i64* %arrayidx12 to <2 x i64>*
  %76 = bitcast i64* %arrayidx14.1 to <2 x i64>*
  %77 = bitcast i64* %arrayidx14 to <2 x i64>*
  %78 = bitcast i64* %arrayidx.3 to <2 x i64>*
  %79 = bitcast i64* %arrayidx.2 to <2 x i64>*
  %80 = bitcast i64* %arrayidx12.3 to <2 x i64>*
  %81 = bitcast i64* %arrayidx12.2 to <2 x i64>*
  %82 = bitcast i64* %arrayidx14.3 to <2 x i64>*
  %83 = bitcast i64* %arrayidx14.2 to <2 x i64>*
  %84 = bitcast i64* %arrayidx.5 to <2 x i64>*
  %85 = bitcast i64* %arrayidx.4 to <2 x i64>*
  %86 = bitcast i64* %arrayidx12.5 to <2 x i64>*
  %87 = bitcast i64* %arrayidx12.4 to <2 x i64>*
  %88 = bitcast i64* %arrayidx14.5 to <2 x i64>*
  %89 = bitcast i64* %arrayidx14.4 to <2 x i64>*
  %90 = bitcast i64* %arrayidx.7 to <2 x i64>*
  %91 = bitcast i64* %arrayidx.6 to <2 x i64>*
  %92 = bitcast i64* %arrayidx12.7 to <2 x i64>*
  %93 = bitcast i64* %arrayidx12.6 to <2 x i64>*
  %94 = bitcast i64* %arrayidx14.7 to <2 x i64>*
  %95 = bitcast i64* %arrayidx14.6 to <2 x i64>*
  %96 = bitcast i64* %arrayidx.9 to <2 x i64>*
  %97 = bitcast i64* %arrayidx.8 to <2 x i64>*
  %98 = bitcast i64* %arrayidx12.9 to <2 x i64>*
  %99 = bitcast i64* %arrayidx12.8 to <2 x i64>*
  %100 = bitcast i64* %arrayidx14.9 to <2 x i64>*
  %101 = bitcast i64* %arrayidx14.8 to <2 x i64>*
  %102 = bitcast i64* %arrayidx.11 to <2 x i64>*
  %103 = bitcast i64* %arrayidx.10 to <2 x i64>*
  %104 = bitcast i64* %arrayidx12.11 to <2 x i64>*
  %105 = bitcast i64* %arrayidx12.10 to <2 x i64>*
  %106 = bitcast i64* %arrayidx14.11 to <2 x i64>*
  %107 = bitcast i64* %arrayidx14.10 to <2 x i64>*
  %108 = bitcast i64* %arrayidx.13 to <2 x i64>*
  %109 = bitcast i64* %arrayidx.12 to <2 x i64>*
  %110 = bitcast i64* %arrayidx12.13 to <2 x i64>*
  %111 = bitcast i64* %arrayidx12.12 to <2 x i64>*
  %112 = bitcast i64* %arrayidx14.13 to <2 x i64>*
  %113 = bitcast i64* %arrayidx14.12 to <2 x i64>*
  br label %land.rhs

for.body58:                                       ; preds = %for.cond.cleanup94, %for.body58.lr.ph
  %indvars.iv278 = phi i64 [ 0, %for.body58.lr.ph ], [ %indvars.iv.next279, %for.cond.cleanup94 ]
  %stride63 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %69, i64 %indvars.iv278, i32 2
  %114 = load i32, i32* %stride63, align 4, !tbaa !185
  %conv64 = sext i32 %114 to i64
  %mul68 = mul nsw i64 %conv64, %conv
  %stride73 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %70, i64 %indvars.iv278, i32 2
  %115 = load i32, i32* %stride73, align 4, !tbaa !185
  %conv74 = sext i32 %115 to i64
  %mul78 = mul nsw i64 %conv74, %conv
  %cmp80264.not = icmp eq i64 %indvars.iv278, 0
  br i1 %cmp80264.not, label %for.end91, label %for.body81.lr.ph

for.body81.lr.ph:                                 ; preds = %for.body58
  %cmp86.not = icmp eq i64 %mul68, 0
  br i1 %cmp86.not, label %for.body81.preheader, label %for.body81.us

for.body81.preheader:                             ; preds = %for.body81.lr.ph
  %116 = trunc i64 %indvars.iv278 to i32
  br label %for.end91

for.body81.us:                                    ; preds = %for.body81.lr.ph, %for.inc89.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc89.us ], [ 0, %for.body81.lr.ph ]
  %arrayidx84.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv
  %117 = load i64, i64* %arrayidx84.us, align 8, !tbaa !22
  %cmp85.us = icmp ult i64 %mul68, %117
  br i1 %cmp85.us, label %for.end91.loopexit, label %for.inc89.us

for.inc89.us:                                     ; preds = %for.body81.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %indvars.iv278
  br i1 %exitcond.not, label %for.end91.loopexit, label %for.body81.us, !llvm.loop !245

for.end91.loopexit:                               ; preds = %for.inc89.us, %for.body81.us
  %insert.0.lcssa.ph.in = phi i64 [ %indvars.iv278, %for.inc89.us ], [ %indvars.iv, %for.body81.us ]
  %insert.0.lcssa.ph = trunc i64 %insert.0.lcssa.ph.in to i32
  br label %for.end91

for.end91:                                        ; preds = %for.end91.loopexit, %for.body81.preheader, %for.body58
  %insert.0.lcssa = phi i32 [ 0, %for.body58 ], [ %insert.0.lcssa.ph, %for.end91.loopexit ], [ %116, %for.body81.preheader ]
  %118 = zext i32 %insert.0.lcssa to i64
  %cmp93267 = icmp ugt i64 %indvars.iv278, %118
  br i1 %cmp93267, label %for.body95.preheader, label %for.cond.cleanup94

for.body95.preheader:                             ; preds = %for.end91
  %119 = sext i32 %insert.0.lcssa to i64
  br label %for.body95

for.cond.cleanup94:                               ; preds = %for.body95, %for.end91
  %extent122 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %69, i64 %indvars.iv278, i32 1
  %120 = load i32, i32* %extent122, align 4, !tbaa !189
  %conv123 = sext i32 %120 to i64
  %arrayidx126 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %118
  store i64 %conv123, i64* %arrayidx126, align 8, !tbaa !22
  %arrayidx129 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %118
  store i64 %mul68, i64* %arrayidx129, align 8, !tbaa !22
  %arrayidx132 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %118
  store i64 %mul78, i64* %arrayidx132, align 8, !tbaa !22
  %indvars.iv.next279 = add nuw nsw i64 %indvars.iv278, 1
  %exitcond283.not = icmp eq i64 %indvars.iv.next279, %wide.trip.count282
  br i1 %exitcond283.not, label %while.cond.preheader, label %for.body58, !llvm.loop !246

for.body95:                                       ; preds = %for.body95, %for.body95.preheader
  %indvars.iv280 = phi i64 [ %indvars.iv278, %for.body95.preheader ], [ %indvars.iv.next281, %for.body95 ]
  %indvars.iv.next281 = add nsw i64 %indvars.iv280, -1
  %arrayidx99 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv.next281
  %121 = load i64, i64* %arrayidx99, align 8, !tbaa !22
  %arrayidx102 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv280
  store i64 %121, i64* %arrayidx102, align 8, !tbaa !22
  %arrayidx106 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv.next281
  %122 = load i64, i64* %arrayidx106, align 8, !tbaa !22
  %arrayidx109 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv280
  store i64 %122, i64* %arrayidx109, align 8, !tbaa !22
  %arrayidx113 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv.next281
  %123 = load i64, i64* %arrayidx113, align 8, !tbaa !22
  %arrayidx116 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv280
  store i64 %123, i64* %arrayidx116, align 8, !tbaa !22
  %cmp93 = icmp sgt i64 %indvars.iv.next281, %119
  br i1 %cmp93, label %for.body95, label %for.cond.cleanup94, !llvm.loop !247

land.rhs:                                         ; preds = %while.body, %land.rhs.lr.ph
  %124 = phi i64 [ %.pre291, %land.rhs.lr.ph ], [ %152, %while.body ]
  %125 = phi i64 [ %.pre, %land.rhs.lr.ph ], [ %mul147, %while.body ]
  %cmp143 = icmp eq i64 %125, %124
  br i1 %cmp143, label %while.body, label %while.end

while.body:                                       ; preds = %land.rhs
  %126 = load i64, i64* %arrayidx, align 8, !tbaa !22
  %mul147 = mul i64 %126, %124
  store i64 %mul147, i64* %chunk_size, align 8, !tbaa !240
  %127 = load <2 x i64>, <2 x i64>* %72, align 8, !tbaa !22
  store <2 x i64> %127, <2 x i64>* %73, align 8, !tbaa !22
  %128 = load <2 x i64>, <2 x i64>* %74, align 8, !tbaa !22
  store <2 x i64> %128, <2 x i64>* %75, align 8, !tbaa !22
  %129 = load <2 x i64>, <2 x i64>* %76, align 8, !tbaa !22
  store <2 x i64> %129, <2 x i64>* %77, align 8, !tbaa !22
  %130 = load <2 x i64>, <2 x i64>* %78, align 8, !tbaa !22
  store <2 x i64> %130, <2 x i64>* %79, align 8, !tbaa !22
  %131 = load <2 x i64>, <2 x i64>* %80, align 8, !tbaa !22
  store <2 x i64> %131, <2 x i64>* %81, align 8, !tbaa !22
  %132 = load <2 x i64>, <2 x i64>* %82, align 8, !tbaa !22
  store <2 x i64> %132, <2 x i64>* %83, align 8, !tbaa !22
  %133 = load <2 x i64>, <2 x i64>* %84, align 8, !tbaa !22
  store <2 x i64> %133, <2 x i64>* %85, align 8, !tbaa !22
  %134 = load <2 x i64>, <2 x i64>* %86, align 8, !tbaa !22
  store <2 x i64> %134, <2 x i64>* %87, align 8, !tbaa !22
  %135 = load <2 x i64>, <2 x i64>* %88, align 8, !tbaa !22
  store <2 x i64> %135, <2 x i64>* %89, align 8, !tbaa !22
  %136 = load <2 x i64>, <2 x i64>* %90, align 8, !tbaa !22
  store <2 x i64> %136, <2 x i64>* %91, align 8, !tbaa !22
  %137 = load <2 x i64>, <2 x i64>* %92, align 8, !tbaa !22
  store <2 x i64> %137, <2 x i64>* %93, align 8, !tbaa !22
  %138 = load <2 x i64>, <2 x i64>* %94, align 8, !tbaa !22
  store <2 x i64> %138, <2 x i64>* %95, align 8, !tbaa !22
  %139 = load <2 x i64>, <2 x i64>* %96, align 8, !tbaa !22
  store <2 x i64> %139, <2 x i64>* %97, align 8, !tbaa !22
  %140 = load <2 x i64>, <2 x i64>* %98, align 8, !tbaa !22
  store <2 x i64> %140, <2 x i64>* %99, align 8, !tbaa !22
  %141 = load <2 x i64>, <2 x i64>* %100, align 8, !tbaa !22
  store <2 x i64> %141, <2 x i64>* %101, align 8, !tbaa !22
  %142 = load <2 x i64>, <2 x i64>* %102, align 8, !tbaa !22
  store <2 x i64> %142, <2 x i64>* %103, align 8, !tbaa !22
  %143 = load <2 x i64>, <2 x i64>* %104, align 8, !tbaa !22
  store <2 x i64> %143, <2 x i64>* %105, align 8, !tbaa !22
  %144 = load <2 x i64>, <2 x i64>* %106, align 8, !tbaa !22
  store <2 x i64> %144, <2 x i64>* %107, align 8, !tbaa !22
  %145 = load <2 x i64>, <2 x i64>* %108, align 8, !tbaa !22
  store <2 x i64> %145, <2 x i64>* %109, align 8, !tbaa !22
  %146 = load <2 x i64>, <2 x i64>* %110, align 8, !tbaa !22
  store <2 x i64> %146, <2 x i64>* %111, align 8, !tbaa !22
  %147 = load <2 x i64>, <2 x i64>* %112, align 8, !tbaa !22
  store <2 x i64> %147, <2 x i64>* %113, align 8, !tbaa !22
  %148 = load i64, i64* %arrayidx.15, align 8, !tbaa !22
  store i64 %148, i64* %arrayidx.14, align 8, !tbaa !22
  %149 = load i64, i64* %arrayidx12.15, align 8, !tbaa !22
  store i64 %149, i64* %arrayidx12.14, align 8, !tbaa !22
  %150 = load i64, i64* %arrayidx14.15, align 8, !tbaa !22
  store i64 %150, i64* %arrayidx14.14, align 8, !tbaa !22
  store i64 1, i64* %arrayidx.15, align 8, !tbaa !22
  store i64 0, i64* %arrayidx12.15, align 8, !tbaa !22
  store i64 0, i64* %arrayidx14.15, align 8, !tbaa !22
  %151 = extractelement <2 x i64> %128, i32 0
  %cmp139 = icmp eq i64 %mul147, %151
  %152 = extractelement <2 x i64> %129, i32 0
  br i1 %cmp139, label %land.rhs, label %while.end, !llvm.loop !248

while.end:                                        ; preds = %while.body, %land.rhs, %while.cond.preheader, %for.cond54.preheader
  %153 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %agg.result to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(416) %153, i8* nonnull align 8 dereferenceable(416) %0, i64 416, i1 false), !tbaa.struct !249
  br label %cleanup

cleanup:                                          ; preds = %while.end, %if.then51, %if.then
  call void @llvm.lifetime.end.p0i8(i64 416, i8* nonnull %0) #11
  ret void
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #5

; Function Attrs: nounwind mustprogress
define linkonce zeroext i1 @_ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m(i8* %key1, i8* %key2, i64 %key_size) local_unnamed_addr #0 {
entry:
  %call = tail call i32 @memcmp(i8* %key1, i8* %key2, i64 %key_size) #14
  %cmp = icmp eq i32 %call, 0
  ret i1 %cmp
}

declare i32 @memcmp(i8*, i8*, i64) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define linkonce zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %buf, %struct.halide_dimension_t* %shape) local_unnamed_addr #0 {
entry:
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 5
  %0 = load i32, i32* %dimensions, align 4, !tbaa !183
  %cmp9 = icmp sgt i32 %0, 0
  br i1 %cmp9, label %for.body.lr.ph, label %return

for.body.lr.ph:                                   ; preds = %entry
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  %1 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !184
  %2 = zext i32 %0 to i64
  br label %for.body

for.cond:                                         ; preds = %_ZNK18halide_dimension_tneERKS_.exit
  %exitcond.not = icmp eq i64 %indvars.iv.next, %2
  br i1 %exitcond.not, label %return, label %for.body, !llvm.loop !250

for.body:                                         ; preds = %for.cond, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.cond ]
  %min.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %1, i64 %indvars.iv, i32 0
  %3 = load i32, i32* %min.i.i, align 4, !tbaa !221
  %min2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %shape, i64 %indvars.iv, i32 0
  %4 = load i32, i32* %min2.i.i, align 4, !tbaa !221
  %cmp.i.i = icmp eq i32 %3, %4
  br i1 %cmp.i.i, label %land.lhs.true.i.i, label %return

land.lhs.true.i.i:                                ; preds = %for.body
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %1, i64 %indvars.iv, i32 1
  %5 = load i32, i32* %extent.i.i, align 4, !tbaa !189
  %extent3.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %shape, i64 %indvars.iv, i32 1
  %6 = load i32, i32* %extent3.i.i, align 4, !tbaa !189
  %cmp4.i.i = icmp eq i32 %5, %6
  br i1 %cmp4.i.i, label %land.lhs.true5.i.i, label %return

land.lhs.true5.i.i:                               ; preds = %land.lhs.true.i.i
  %stride.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %1, i64 %indvars.iv, i32 2
  %7 = load i32, i32* %stride.i.i, align 4, !tbaa !185
  %stride6.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %shape, i64 %indvars.iv, i32 2
  %8 = load i32, i32* %stride6.i.i, align 4, !tbaa !185
  %cmp7.i.i = icmp eq i32 %7, %8
  br i1 %cmp7.i.i, label %_ZNK18halide_dimension_tneERKS_.exit, label %return

_ZNK18halide_dimension_tneERKS_.exit:             ; preds = %land.lhs.true5.i.i
  %flags.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %1, i64 %indvars.iv, i32 3
  %9 = load i32, i32* %flags.i.i, align 4, !tbaa !251
  %flags8.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %shape, i64 %indvars.iv, i32 3
  %10 = load i32, i32* %flags8.i.i, align 4, !tbaa !251
  %cmp9.i.i.not = icmp eq i32 %9, %10
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  br i1 %cmp9.i.i.not, label %for.cond, label %return

return:                                           ; preds = %_ZNK18halide_dimension_tneERKS_.exit, %land.lhs.true5.i.i, %land.lhs.true.i.i, %for.body, %for.cond, %entry
  %cmp.lcssa = phi i1 [ true, %entry ], [ false, %_ZNK18halide_dimension_tneERKS_.exit ], [ true, %for.cond ], [ false, %land.lhs.true5.i.i ], [ false, %land.lhs.true.i.i ], [ false, %for.body ]
  ret i1 %cmp.lcssa
}

; Function Attrs: nounwind mustprogress
define linkonce zeroext i1 @_ZN6Halide7Runtime8Internal10CacheEntry4initEPKhmjPK15halide_buffer_tiPPS5_by(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %this, i8* %cache_key, i64 %cache_key_size, i32 %key_hash, %struct.halide_buffer_t* %computed_bounds_buf, i32 %tuples, %struct.halide_buffer_t** %tuple_buffers, i1 zeroext %has_eviction_key_arg, i64 %eviction_key_arg) local_unnamed_addr #0 align 2 {
entry:
  %frombool = zext i1 %has_eviction_key_arg to i8
  %0 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"* %this to <2 x %"struct.Halide::Runtime::Internal::CacheEntry"*>*
  store <2 x %"struct.Halide::Runtime::Internal::CacheEntry"*> zeroinitializer, <2 x %"struct.Halide::Runtime::Internal::CacheEntry"*>* %0, align 8, !tbaa !14
  %less_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent, align 8, !tbaa !252
  %key_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 4
  store i64 %cache_key_size, i64* %key_size, align 8, !tbaa !253
  %hash = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 6
  store i32 %key_hash, i32* %hash, align 8, !tbaa !254
  %in_use_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 7
  store i32 0, i32* %in_use_count, align 4, !tbaa !255
  %tuple_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 8
  store i32 %tuples, i32* %tuple_count, align 8, !tbaa !232
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %computed_bounds_buf, i64 0, i32 5
  %1 = load i32, i32* %dimensions, align 4, !tbaa !183
  %dimensions2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 9
  store i32 %1, i32* %dimensions2, align 4, !tbaa !256
  %conv = zext i32 %tuples to i64
  %mul = mul nuw nsw i64 %conv, 56
  %conv5 = sext i32 %1 to i64
  %add8 = add i32 %tuples, 1
  %conv9 = zext i32 %add8 to i64
  %mul6 = shl nuw nsw i64 %conv9, 4
  %mul10 = mul i64 %mul6, %conv5
  %add11 = add i64 %mul10, %mul
  %add13 = add i64 %add11, %cache_key_size
  %call = tail call i8* @halide_malloc(i8* null, i64 %add13) #14
  %metadata_storage = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 3
  store i8* %call, i8** %metadata_storage, align 8, !tbaa !233
  %tobool.not = icmp eq i8* %call, null
  br i1 %tobool.not, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %buf = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 11
  %2 = bitcast %struct.halide_buffer_t** %buf to i8**
  store i8* %call, i8** %2, align 8, !tbaa !234
  %add.ptr = getelementptr inbounds i8, i8* %call, i64 %mul
  %computed_bounds = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 10
  %3 = bitcast %struct.halide_dimension_t** %computed_bounds to i8**
  store i8* %add.ptr, i8** %3, align 8, !tbaa !257
  %add.ptr18 = getelementptr inbounds i8, i8* %call, i64 %add11
  %key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 5
  store i8* %add.ptr18, i8** %key, align 8, !tbaa !258
  %4 = load i64, i64* %key_size, align 8, !tbaa !253
  %cmp117.not = icmp eq i64 %4, 0
  br i1 %cmp117.not, label %for.cond23.preheader, label %for.body.preheader

for.body.preheader:                               ; preds = %if.end
  %5 = load i8, i8* %cache_key, align 1, !tbaa !18
  store i8 %5, i8* %add.ptr18, align 1, !tbaa !18
  %cmp130.not = icmp eq i64 %4, 1
  br i1 %cmp130.not, label %for.cond23.preheader, label %for.body.for.body_crit_edge.preheader, !llvm.loop !259

for.body.for.body_crit_edge.preheader:            ; preds = %for.body.preheader
  %arrayidx2 = getelementptr inbounds i8, i8* %cache_key, i64 1
  %6 = load i8, i8* %arrayidx2, align 1, !tbaa !18
  %arrayidx213 = getelementptr inbounds i8, i8* %add.ptr18, i64 1
  store i8 %6, i8* %arrayidx213, align 1, !tbaa !18
  %7 = load i64, i64* %key_size, align 8, !tbaa !253
  %cmp4 = icmp ugt i64 %7, 2
  br i1 %cmp4, label %for.body.for.body_crit_edge.for.body.for.body_crit_edge_crit_edge, label %for.cond23.preheader, !llvm.loop !259

for.cond23.preheader:                             ; preds = %for.body.for.body_crit_edge.for.body.for.body_crit_edge_crit_edge, %for.body.for.body_crit_edge.preheader, %for.body.preheader, %if.end
  %8 = load i32, i32* %dimensions2, align 4, !tbaa !256
  %cmp25115 = icmp sgt i32 %8, 0
  br i1 %cmp25115, label %for.body27.lr.ph, label %for.cond36.preheader

for.body27.lr.ph:                                 ; preds = %for.cond23.preheader
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %computed_bounds_buf, i64 0, i32 6
  br label %for.body27

for.body.for.body_crit_edge.for.body.for.body_crit_edge_crit_edge: ; preds = %for.body.for.body_crit_edge.preheader, %for.body.for.body_crit_edge.for.body.for.body_crit_edge_crit_edge
  %inc5 = phi i64 [ %inc, %for.body.for.body_crit_edge.for.body.for.body_crit_edge_crit_edge ], [ 2, %for.body.for.body_crit_edge.preheader ]
  %.pre.pre = load i8*, i8** %key, align 8, !tbaa !258
  %arrayidx = getelementptr inbounds i8, i8* %cache_key, i64 %inc5
  %9 = load i8, i8* %arrayidx, align 1, !tbaa !18
  %arrayidx21 = getelementptr inbounds i8, i8* %.pre.pre, i64 %inc5
  store i8 %9, i8* %arrayidx21, align 1, !tbaa !18
  %inc = add nuw i64 %inc5, 1
  %10 = load i64, i64* %key_size, align 8, !tbaa !253
  %cmp = icmp ult i64 %inc, %10
  br i1 %cmp, label %for.body.for.body_crit_edge.for.body.for.body_crit_edge_crit_edge, label %for.cond23.preheader, !llvm.loop !259

for.cond36.preheader:                             ; preds = %for.body27, %for.cond23.preheader
  %11 = load i32, i32* %tuple_count, align 8, !tbaa !232
  %cmp38113.not = icmp eq i32 %11, 0
  br i1 %cmp38113.not, label %for.cond.cleanup39, label %for.body40

for.body27:                                       ; preds = %for.body27, %for.body27.lr.ph
  %indvars.iv121 = phi i64 [ 0, %for.body27.lr.ph ], [ %indvars.iv.next122, %for.body27 ]
  %12 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !184
  %arrayidx28 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i64 %indvars.iv121
  %13 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds, align 8, !tbaa !257
  %arrayidx31 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %13, i64 %indvars.iv121
  %14 = bitcast %struct.halide_dimension_t* %arrayidx31 to i8*
  %15 = bitcast %struct.halide_dimension_t* %arrayidx28 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %14, i8* nonnull align 4 dereferenceable(16) %15, i64 16, i1 false), !tbaa.struct !188
  %indvars.iv.next122 = add nuw nsw i64 %indvars.iv121, 1
  %16 = load i32, i32* %dimensions2, align 4, !tbaa !256
  %17 = sext i32 %16 to i64
  %cmp25 = icmp slt i64 %indvars.iv.next122, %17
  br i1 %cmp25, label %for.body27, label %for.cond36.preheader, !llvm.loop !260

for.cond36.loopexit:                              ; preds = %for.body59.for.body59_crit_edge, %for.body59.preheader, %for.body40
  %18 = load i32, i32* %tuple_count, align 8, !tbaa !232
  %19 = zext i32 %18 to i64
  %cmp38 = icmp ult i64 %indvars.iv.next120, %19
  br i1 %cmp38, label %for.body40, label %for.cond.cleanup39, !llvm.loop !261

for.cond.cleanup39:                               ; preds = %for.cond36.loopexit, %for.cond36.preheader
  %has_eviction_key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 13
  store i8 %frombool, i8* %has_eviction_key, align 8, !tbaa !262
  %eviction_key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 12
  store i64 %eviction_key_arg, i64* %eviction_key, align 8, !tbaa !263
  br label %cleanup

for.body40:                                       ; preds = %for.cond36.preheader, %for.cond36.loopexit
  %indvars.iv119 = phi i64 [ %indvars.iv.next120, %for.cond36.loopexit ], [ 0, %for.cond36.preheader ]
  %arrayidx42 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv119
  %20 = bitcast %struct.halide_buffer_t** %arrayidx42 to i8**
  %21 = load i8*, i8** %20, align 8, !tbaa !14
  %22 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !234
  %arrayidx45 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %22, i64 %indvars.iv119
  %23 = bitcast %struct.halide_buffer_t* %arrayidx45 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(56) %23, i8* nonnull align 8 dereferenceable(56) %21, i64 56, i1 false), !tbaa.struct !264
  %24 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds, align 8, !tbaa !257
  %indvars.iv.next120 = add nuw nsw i64 %indvars.iv119, 1
  %25 = load i32, i32* %dimensions2, align 4, !tbaa !256
  %26 = trunc i64 %indvars.iv.next120 to i32
  %mul49 = mul i32 %25, %26
  %idx.ext = zext i32 %mul49 to i64
  %add.ptr50 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %24, i64 %idx.ext
  %27 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !234
  %dim54 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %27, i64 %indvars.iv119, i32 6
  store %struct.halide_dimension_t* %add.ptr50, %struct.halide_dimension_t** %dim54, align 8, !tbaa !184
  %cmp57111 = icmp sgt i32 %25, 0
  br i1 %cmp57111, label %for.body59.preheader, label %for.cond36.loopexit

for.body59.preheader:                             ; preds = %for.body40
  %28 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx42, align 8, !tbaa !14
  %dim62125 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %28, i64 0, i32 6
  %29 = bitcast %struct.halide_dimension_t** %dim62125 to i8**
  %30 = load i8*, i8** %29, align 8, !tbaa !184
  %31 = bitcast %struct.halide_dimension_t* %add.ptr50 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %31, i8* nonnull align 4 dereferenceable(16) %30, i64 16, i1 false), !tbaa.struct !188
  %32 = load i32, i32* %dimensions2, align 4, !tbaa !256
  %cmp57128 = icmp sgt i32 %32, 1
  br i1 %cmp57128, label %for.body59.for.body59_crit_edge, label %for.cond36.loopexit, !llvm.loop !266

for.body59.for.body59_crit_edge:                  ; preds = %for.body59.preheader, %for.body59.for.body59_crit_edge
  %indvars.iv.next129 = phi i64 [ %indvars.iv.next, %for.body59.for.body59_crit_edge ], [ 1, %for.body59.preheader ]
  %.pre123 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !234
  %dim68.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %.pre123, i64 %indvars.iv119, i32 6
  %.pre124 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim68.phi.trans.insert, align 8, !tbaa !184
  %33 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx42, align 8, !tbaa !14
  %dim62 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %33, i64 0, i32 6
  %34 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim62, align 8, !tbaa !184
  %arrayidx64 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %34, i64 %indvars.iv.next129
  %arrayidx70 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %.pre124, i64 %indvars.iv.next129
  %35 = bitcast %struct.halide_dimension_t* %arrayidx70 to i8*
  %36 = bitcast %struct.halide_dimension_t* %arrayidx64 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %35, i8* nonnull align 4 dereferenceable(16) %36, i64 16, i1 false), !tbaa.struct !188
  %indvars.iv.next = add nuw nsw i64 %indvars.iv.next129, 1
  %37 = load i32, i32* %dimensions2, align 4, !tbaa !256
  %38 = sext i32 %37 to i64
  %cmp57 = icmp slt i64 %indvars.iv.next, %38
  br i1 %cmp57, label %for.body59.for.body59_crit_edge, label %for.cond36.loopexit, !llvm.loop !266

cleanup:                                          ; preds = %for.cond.cleanup39, %entry
  %39 = xor i1 %tobool.not, true
  ret i1 %39
}

; Function Attrs: nounwind mustprogress
define linkonce i32 @_ZN6Halide7Runtime8Internal8djb_hashEPKhm(i8* %key, i64 %key_size) local_unnamed_addr #0 {
entry:
  %cmp8.not = icmp eq i64 %key_size, 0
  br i1 %cmp8.not, label %for.cond.cleanup, label %entry.for.body_crit_edge

entry.for.body_crit_edge:                         ; preds = %entry
  %inc.1 = add nuw i64 0, 1
  %arrayidx.1 = getelementptr inbounds i8, i8* %key, i64 0
  %add.1 = mul i32 5381, 33
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %entry
  %h.0.lcssa = phi i32 [ 5381, %entry ], [ %add1, %for.body ]
  ret i32 %h.0.lcssa

for.body:                                         ; preds = %entry.for.body_crit_edge, %for.body.for.body_crit_edge
  %add.phi = phi i32 [ %add.0, %for.body.for.body_crit_edge ], [ %add.1, %entry.for.body_crit_edge ]
  %arrayidx.phi = phi i8* [ %arrayidx.0, %for.body.for.body_crit_edge ], [ %arrayidx.1, %entry.for.body_crit_edge ]
  %inc.phi = phi i64 [ %inc.0, %for.body.for.body_crit_edge ], [ %inc.1, %entry.for.body_crit_edge ]
  %0 = load i8, i8* %arrayidx.phi, align 1, !tbaa !18
  %conv = zext i8 %0 to i32
  %add1 = add i32 %add.phi, %conv
  %exitcond.not = icmp eq i64 %inc.phi, %key_size
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body.for.body_crit_edge, !llvm.loop !267

for.body.for.body_crit_edge:                      ; preds = %for.body
  %inc.0 = add nuw i64 %inc.phi, 1
  %arrayidx.0 = getelementptr inbounds i8, i8* %key, i64 %inc.phi
  %add.0 = mul i32 %add1, 33
  br label %for.body
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal11prune_cacheEv() local_unnamed_addr #0 {
entry:
  %0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !14
  %1 = load i64, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !22
  %2 = load i64, i64* @_ZN6Halide7Runtime8Internal14max_cache_sizeE, align 8, !tbaa !22
  %cmp84 = icmp sgt i64 %1, %2
  %cmp185 = icmp ne %"struct.Halide::Runtime::Internal::CacheEntry"* %0, null
  %3 = and i1 %cmp185, %cmp84
  br i1 %3, label %while.body, label %while.end42

while.body:                                       ; preds = %entry, %if.end41
  %4 = phi i64 [ %74, %if.end41 ], [ %2, %entry ]
  %5 = phi i64 [ %75, %if.end41 ], [ %1, %entry ]
  %prune_candidate.086 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %6, %if.end41 ], [ %0, %entry ]
  %more_recent2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 1
  %6 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent2, align 8, !tbaa !268
  %in_use_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 7
  %7 = load i32, i32* %in_use_count, align 4, !tbaa !255
  %cmp3 = icmp eq i32 %7, 0
  br i1 %cmp3, label %if.then, label %if.end41

if.then:                                          ; preds = %while.body
  %hash = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 6
  %8 = load i32, i32* %hash, align 8, !tbaa !254
  %9 = and i32 %8, 255
  %idxprom = zext i32 %9 to i64
  %arrayidx = getelementptr inbounds [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 0, i64 %idxprom
  %10 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx, align 8, !tbaa !14
  %cmp5 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %10, %prune_candidate.086
  br i1 %cmp5, label %if.then6, label %while.cond9

if.then6:                                         ; preds = %if.then
  %next = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 0
  %11 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next, align 8, !tbaa !229
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %11, %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx, align 8, !tbaa !14
  br label %if.end21

while.cond9:                                      ; preds = %if.then, %land.rhs11
  %prev_hash_entry.0 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %12, %land.rhs11 ], [ %10, %if.then ]
  %cmp10.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %prev_hash_entry.0, null
  br i1 %cmp10.not, label %if.then18, label %land.rhs11

land.rhs11:                                       ; preds = %while.cond9
  %next12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prev_hash_entry.0, i64 0, i32 0
  %12 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next12, align 8, !tbaa !229
  %cmp13.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %12, %prune_candidate.086
  br i1 %cmp13.not, label %do.end, label %while.cond9, !llvm.loop !269

if.then18:                                        ; preds = %while.cond9
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([126 x i8], [126 x i8]* @.str.2.42, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %do.end

do.end:                                           ; preds = %land.rhs11, %if.then18
  %next19 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 0
  %13 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next19, align 8, !tbaa !229
  %next20 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prev_hash_entry.0, i64 0, i32 0
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %13, %"struct.Halide::Runtime::Internal::CacheEntry"** %next20, align 8, !tbaa !229
  br label %if.end21

if.end21:                                         ; preds = %do.end, %if.then6
  %14 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !14
  %cmp22 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %14, %prune_candidate.086
  br i1 %cmp22, label %if.then23, label %if.end24

if.then23:                                        ; preds = %if.end21
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %6, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !14
  br label %if.end24

if.end24:                                         ; preds = %if.then23, %if.end21
  %cmp25.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %6, null
  br i1 %cmp25.not, label %if.end28, label %if.then26

if.then26:                                        ; preds = %if.end24
  %less_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 2
  %15 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent, align 8, !tbaa !252
  %less_recent27 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %6, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %15, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent27, align 8, !tbaa !252
  br label %if.end28

if.end28:                                         ; preds = %if.then26, %if.end24
  %16 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !14
  %cmp29 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %16, %prune_candidate.086
  %less_recent31 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 2
  %17 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent31, align 8, !tbaa !252
  br i1 %cmp29, label %if.then30, label %if.end32

if.then30:                                        ; preds = %if.end28
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %17, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !14
  br label %if.end32

if.end32:                                         ; preds = %if.then30, %if.end28
  %cmp34.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %17, null
  br i1 %cmp34.not, label %if.end37, label %if.then35

if.then35:                                        ; preds = %if.end32
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %6, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent31, align 8, !tbaa !252
  br label %if.end37

if.end37:                                         ; preds = %if.then35, %if.end32
  %tuple_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 8
  %18 = load i32, i32* %tuple_count, align 8, !tbaa !232
  %cmp3882.not = icmp eq i32 %18, 0
  br i1 %cmp3882.not, label %for.cond.cleanup, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %if.end37
  %buf = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 11
  %19 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !234
  %_ZN6Halide7Runtime8Internal18current_cache_sizeE.promoted = load i64, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !22
  %wide.trip.count = zext i32 %18 to i64
  br label %for.body

for.cond.for.cond.cleanup_crit_edge:              ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  store i64 %sub, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !22
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.for.cond.cleanup_crit_edge, %if.end37
  tail call void @_ZN6Halide7Runtime8Internal10CacheEntry7destroyEv(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %prune_candidate.086) #15
  %20 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086 to i8*
  tail call void @halide_free(i8* null, i8* nonnull %20) #14
  %.pre92 = load i64, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !22
  %.pre93 = load i64, i64* @_ZN6Halide7Runtime8Internal14max_cache_sizeE, align 8, !tbaa !22
  br label %if.end41

for.body:                                         ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ]
  %sub89 = phi i64 [ %_ZN6Halide7Runtime8Internal18current_cache_sizeE.promoted, %for.body.lr.ph ], [ %sub, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ]
  %dimensions.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %19, i64 %indvars.iv, i32 5
  %21 = load i32, i32* %dimensions.i.i, align 4, !tbaa !183
  %cmp19.i.i = icmp sgt i32 %21, 0
  br i1 %cmp19.i.i, label %for.body.lr.ph.i.i, label %for.body._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge

for.body._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge: ; preds = %for.body
  %sub.i.neg.0 = add i64 0, -1
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.lr.ph.i.i:                               ; preds = %for.body
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %19, i64 %indvars.iv, i32 6
  %22 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8, !tbaa !184
  %wide.trip.count.i.i = zext i32 %21 to i64
  %min.iters.check28 = icmp ult i32 %21, 3
  br i1 %min.iters.check28, label %for.body.i.i.preheader, label %vector.ph29

vector.ph29:                                      ; preds = %for.body.lr.ph.i.i
  %n.vec31 = and i64 %wide.trip.count.i.i, 4294967294
  br label %vector.body27

vector.body27:                                    ; preds = %pred.load.continue43, %vector.ph29
  %index32 = phi i64 [ 0, %vector.ph29 ], [ %index.next33, %pred.load.continue43 ]
  %vec.phi38 = phi i64 [ 0, %vector.ph29 ], [ %predphi44, %pred.load.continue43 ]
  %vec.phi39 = phi i64 [ 0, %vector.ph29 ], [ %predphi45, %pred.load.continue43 ]
  %induction37 = or i64 %index32, 1
  %23 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %index32, i32 2
  %24 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %induction37, i32 2
  %25 = load i32, i32* %23, align 4, !tbaa !185
  %26 = load i32, i32* %24, align 4, !tbaa !185
  %27 = icmp sgt i32 %25, 0
  %28 = icmp sgt i32 %26, 0
  %29 = zext i32 %25 to i64
  %30 = zext i32 %26 to i64
  br i1 %27, label %pred.load.if40, label %pred.load.continue41

pred.load.if40:                                   ; preds = %vector.body27
  %31 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %index32, i32 1
  %32 = load i32, i32* %31, align 4, !tbaa !189
  br label %pred.load.continue41

pred.load.continue41:                             ; preds = %pred.load.if40, %vector.body27
  %33 = phi i32 [ poison, %vector.body27 ], [ %32, %pred.load.if40 ]
  br i1 %28, label %pred.load.if42, label %pred.load.continue43

pred.load.if42:                                   ; preds = %pred.load.continue41
  %34 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %induction37, i32 1
  %35 = load i32, i32* %34, align 4, !tbaa !189
  br label %pred.load.continue43

pred.load.continue43:                             ; preds = %pred.load.if42, %pred.load.continue41
  %36 = phi i32 [ poison, %pred.load.continue41 ], [ %35, %pred.load.if42 ]
  %37 = add nsw i32 %33, -1
  %38 = add nsw i32 %36, -1
  %39 = sext i32 %37 to i64
  %40 = sext i32 %38 to i64
  %41 = mul nsw i64 %39, %29
  %42 = mul nsw i64 %40, %30
  %43 = select i1 %27, i64 %41, i64 0
  %predphi44 = add i64 %vec.phi38, %43
  %44 = select i1 %28, i64 %42, i64 0
  %predphi45 = add i64 %vec.phi39, %44
  %index.next33 = add i64 %index32, 2
  %45 = icmp eq i64 %index.next33, %n.vec31
  br i1 %45, label %middle.block25, label %vector.body27, !llvm.loop !270

middle.block25:                                   ; preds = %pred.load.continue43
  %bin.rdx46 = add i64 %predphi45, %predphi44
  %cmp.n35 = icmp eq i64 %n.vec31, %wide.trip.count.i.i
  br i1 %cmp.n35, label %for.body.i13.i.preheader, label %for.body.i.i.preheader

for.body.i.i.preheader:                           ; preds = %for.body.lr.ph.i.i, %middle.block25
  %indvars.iv.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %n.vec31, %middle.block25 ]
  %index.021.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %bin.rdx46, %middle.block25 ]
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.body.i.i.preheader, %if.end.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %if.end.i.i ], [ %indvars.iv.i.i.ph, %for.body.i.i.preheader ]
  %index.021.i.i = phi i64 [ %index.1.i.i, %if.end.i.i ], [ %index.021.i.i.ph, %for.body.i.i.preheader ]
  %stride2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %indvars.iv.i.i, i32 2
  %46 = load i32, i32* %stride2.i.i, align 4, !tbaa !185
  %cmp3.i.i = icmp sgt i32 %46, 0
  br i1 %cmp3.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %conv18.i.i = zext i32 %46 to i64
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %indvars.iv.i.i, i32 1
  %47 = load i32, i32* %extent.i.i, align 4, !tbaa !189
  %sub.i.i = add nsw i32 %47, -1
  %conv7.i.i = sext i32 %sub.i.i to i64
  %mul.i.i = mul nsw i64 %conv7.i.i, %conv18.i.i
  %add.i.i = add nsw i64 %mul.i.i, %index.021.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i64 [ %add.i.i, %if.then.i.i ], [ %index.021.i.i, %for.body.i.i ]
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %exitcond.not.i.i = icmp eq i64 %indvars.iv.next.i.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i.i, label %for.body.i13.i.preheader, label %for.body.i.i, !llvm.loop !271

for.body.i13.i.preheader:                         ; preds = %if.end.i.i, %middle.block25
  %index.1.i.i.lcssa = phi i64 [ %bin.rdx46, %middle.block25 ], [ %index.1.i.i, %if.end.i.i ]
  %min.iters.check = icmp ult i32 %21, 3
  br i1 %min.iters.check, label %for.body.i13.i.preheader48, label %vector.ph

vector.ph:                                        ; preds = %for.body.i13.i.preheader
  %n.vec = and i64 %wide.trip.count.i.i, 4294967294
  br label %vector.body

vector.body:                                      ; preds = %pred.load.continue23, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %pred.load.continue23 ]
  %vec.phi = phi i64 [ 0, %vector.ph ], [ %predphi, %pred.load.continue23 ]
  %vec.phi21 = phi i64 [ 0, %vector.ph ], [ %predphi24, %pred.load.continue23 ]
  %induction20 = or i64 %index, 1
  %48 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %index, i32 2
  %49 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %induction20, i32 2
  %50 = load i32, i32* %48, align 4, !tbaa !185
  %51 = load i32, i32* %49, align 4, !tbaa !185
  %52 = icmp slt i32 %50, 0
  %53 = icmp slt i32 %51, 0
  %54 = sext i32 %50 to i64
  %55 = sext i32 %51 to i64
  br i1 %52, label %pred.load.if, label %pred.load.continue

pred.load.if:                                     ; preds = %vector.body
  %56 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %index, i32 1
  %57 = load i32, i32* %56, align 4, !tbaa !189
  br label %pred.load.continue

pred.load.continue:                               ; preds = %pred.load.if, %vector.body
  %58 = phi i32 [ poison, %vector.body ], [ %57, %pred.load.if ]
  br i1 %53, label %pred.load.if22, label %pred.load.continue23

pred.load.if22:                                   ; preds = %pred.load.continue
  %59 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %induction20, i32 1
  %60 = load i32, i32* %59, align 4, !tbaa !189
  br label %pred.load.continue23

pred.load.continue23:                             ; preds = %pred.load.if22, %pred.load.continue
  %61 = phi i32 [ poison, %pred.load.continue ], [ %60, %pred.load.if22 ]
  %62 = add nsw i32 %58, -1
  %63 = add nsw i32 %61, -1
  %64 = sext i32 %62 to i64
  %65 = sext i32 %63 to i64
  %66 = mul nsw i64 %64, %54
  %67 = mul nsw i64 %65, %55
  %68 = select i1 %52, i64 %66, i64 0
  %predphi = add i64 %vec.phi, %68
  %69 = select i1 %53, i64 %67, i64 0
  %predphi24 = add i64 %vec.phi21, %69
  %index.next = add i64 %index, 2
  %70 = icmp eq i64 %index.next, %n.vec
  br i1 %70, label %middle.block, label %vector.body, !llvm.loop !272

middle.block:                                     ; preds = %pred.load.continue23
  %bin.rdx = add i64 %predphi24, %predphi
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count.i.i
  br i1 %cmp.n, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i.preheader48

for.body.i13.i.preheader48:                       ; preds = %for.body.i13.i.preheader, %middle.block
  %indvars.iv.i10.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %n.vec, %middle.block ]
  %index.018.i.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %bin.rdx, %middle.block ]
  br label %for.body.i13.i

for.body.i13.i:                                   ; preds = %for.body.i13.i.preheader48, %if.end.i24.i
  %indvars.iv.i10.i = phi i64 [ %indvars.iv.next.i22.i, %if.end.i24.i ], [ %indvars.iv.i10.i.ph, %for.body.i13.i.preheader48 ]
  %index.018.i.i = phi i64 [ %index.1.i21.i, %if.end.i24.i ], [ %index.018.i.i.ph, %for.body.i13.i.preheader48 ]
  %stride2.i11.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %indvars.iv.i10.i, i32 2
  %71 = load i32, i32* %stride2.i11.i, align 4, !tbaa !185
  %cmp3.i12.i = icmp slt i32 %71, 0
  br i1 %cmp3.i12.i, label %if.then.i20.i, label %if.end.i24.i

if.then.i20.i:                                    ; preds = %for.body.i13.i
  %conv.i14.i = sext i32 %71 to i64
  %extent.i15.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %indvars.iv.i10.i, i32 1
  %72 = load i32, i32* %extent.i15.i, align 4, !tbaa !189
  %sub.i16.i = add nsw i32 %72, -1
  %conv7.i17.i = sext i32 %sub.i16.i to i64
  %mul.i18.i = mul nsw i64 %conv7.i17.i, %conv.i14.i
  %add.i19.i = add nsw i64 %mul.i18.i, %index.018.i.i
  br label %if.end.i24.i

if.end.i24.i:                                     ; preds = %if.then.i20.i, %for.body.i13.i
  %index.1.i21.i = phi i64 [ %add.i19.i, %if.then.i20.i ], [ %index.018.i.i, %for.body.i13.i ]
  %indvars.iv.next.i22.i = add nuw nsw i64 %indvars.iv.i10.i, 1
  %exitcond.not.i23.i = icmp eq i64 %indvars.iv.next.i22.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i23.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i, !llvm.loop !273

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %if.end.i24.i, %middle.block
  %index.1.i21.i.lcssa = phi i64 [ %bin.rdx, %middle.block ], [ %index.1.i21.i, %if.end.i24.i ]
  %add8.i.i.neg = xor i64 %index.1.i.i.lcssa, -1
  %sub.i.neg.1 = add i64 %index.1.i21.i.lcssa, %add8.i.i.neg
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %for.body._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit
  %sub.i.neg.phi = phi i64 [ %sub.i.neg.0, %for.body._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge ], [ %sub.i.neg.1, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %bits.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %19, i64 %indvars.iv, i32 4, i32 1
  %73 = load i8, i8* %bits.i.i, align 1, !tbaa !144
  %conv.i.i = zext i8 %73 to i64
  %add.i4.i = add nuw nsw i64 %conv.i.i, 7
  %div.i.i = lshr i64 %add.i4.i, 3
  %mul.i.neg = mul i64 %div.i.i, %sub.i.neg.phi
  %sub = add i64 %mul.i.neg, %sub89
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.for.cond.cleanup_crit_edge, label %for.body, !llvm.loop !274

if.end41:                                         ; preds = %for.cond.cleanup, %while.body
  %74 = phi i64 [ %.pre93, %for.cond.cleanup ], [ %4, %while.body ]
  %75 = phi i64 [ %.pre92, %for.cond.cleanup ], [ %5, %while.body ]
  %cmp = icmp sgt i64 %75, %74
  %cmp1 = icmp ne %"struct.Halide::Runtime::Internal::CacheEntry"* %6, null
  %76 = and i1 %cmp1, %cmp
  br i1 %76, label %while.body, label %while.end42, !llvm.loop !275

while.end42:                                      ; preds = %if.end41, %entry
  ret void
}

; Function Attrs: nounwind
define weak void @halide_memoization_cache_set_size(i64 %size) local_unnamed_addr #4 {
entry:
  %cmp = icmp eq i64 %size, 0
  %spec.store.select = select i1 %cmp, i64 1048576, i64 %size
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #14
  store i64 %spec.store.select, i64* @_ZN6Halide7Runtime8Internal14max_cache_sizeE, align 8, !tbaa !22
  tail call void @_ZN6Halide7Runtime8Internal11prune_cacheEv() #15
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #14
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_memoization_cache_lookup(i8* %user_context, i8* %cache_key, i32 %size, %struct.halide_buffer_t* %computed_bounds, i32 %tuple_count, %struct.halide_buffer_t** %tuple_buffers) local_unnamed_addr #4 {
entry:
  %conv = sext i32 %size to i64
  %call = tail call i32 @_ZN6Halide7Runtime8Internal8djb_hashEPKhm(i8* %cache_key, i64 %conv) #15
  %0 = and i32 %call, 255
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #14
  %idxprom = zext i32 %0 to i64
  %arrayidx = getelementptr inbounds [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 0, i64 %idxprom
  %entry3.0220 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx, align 8, !tbaa !14
  %cmp.not221 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0220, null
  br i1 %cmp.not221, label %for.cond75.preheader, label %while.body.lr.ph

while.body.lr.ph:                                 ; preds = %entry
  %cmp16215 = icmp sgt i32 %tuple_count, 0
  %1 = sext i32 %tuple_count to i64
  br i1 %cmp16215, label %while.body.us, label %while.body

while.body.us:                                    ; preds = %while.body.lr.ph, %if.end73.us
  %entry3.0222.us = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %entry3.0.us, %if.end73.us ], [ %entry3.0220, %while.body.lr.ph ]
  %hash.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 6
  %2 = load i32, i32* %hash.us, align 8, !tbaa !254
  %cmp4.us = icmp eq i32 %2, %call
  br i1 %cmp4.us, label %land.lhs.true.us, label %if.end73.us

land.lhs.true.us:                                 ; preds = %while.body.us
  %key_size.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 4
  %3 = load i64, i64* %key_size.us, align 8, !tbaa !253
  %cmp6.us = icmp eq i64 %3, %conv
  br i1 %cmp6.us, label %land.lhs.true7.us, label %if.end73.us

land.lhs.true7.us:                                ; preds = %land.lhs.true.us
  %key.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 5
  %4 = load i8*, i8** %key.us, align 8, !tbaa !258
  %call9.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m(i8* %4, i8* %cache_key, i64 %conv) #15
  br i1 %call9.us, label %land.lhs.true10.us, label %if.end73.us

land.lhs.true10.us:                               ; preds = %land.lhs.true7.us
  %computed_bounds11.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 10
  %5 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds11.us, align 8, !tbaa !257
  %call12.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %computed_bounds, %struct.halide_dimension_t* %5) #15
  br i1 %call12.us, label %land.lhs.true13.us, label %if.end73.us

land.lhs.true13.us:                               ; preds = %land.lhs.true10.us
  %tuple_count14.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 8
  %6 = load i32, i32* %tuple_count14.us, align 8, !tbaa !232
  %cmp15.us = icmp eq i32 %6, %tuple_count
  br i1 %cmp15.us, label %for.cond.preheader.us, label %if.end73.us

for.cond.preheader.us:                            ; preds = %land.lhs.true13.us
  %buf.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 11
  br label %for.body.us

for.body.us:                                      ; preds = %for.body.us, %for.cond.preheader.us
  %indvars.iv226.us = phi i64 [ 0, %for.cond.preheader.us ], [ %indvars.iv.next227.us, %for.body.us ]
  %arrayidx18.us = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv226.us
  %7 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx18.us, align 8, !tbaa !14
  %8 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf.us, align 8, !tbaa !234
  %dim.us = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %8, i64 %indvars.iv226.us, i32 6
  %9 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.us, align 8, !tbaa !184
  %call21.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %7, %struct.halide_dimension_t* %9) #15
  %indvars.iv.next227.us = add nuw nsw i64 %indvars.iv226.us, 1
  %cmp16.us = icmp slt i64 %indvars.iv.next227.us, %1
  %10 = and i1 %cmp16.us, %call21.us
  br i1 %10, label %for.body.us, label %for.cond.cleanup.us, !llvm.loop !276

for.cond.cleanup.us:                              ; preds = %for.body.us
  br i1 %call21.us, label %if.then23, label %if.end73.us

if.end73.us:                                      ; preds = %for.cond.cleanup.us, %land.lhs.true13.us, %land.lhs.true10.us, %land.lhs.true7.us, %land.lhs.true.us, %while.body.us
  %next.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 0
  %entry3.0.us = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next.us, align 8, !tbaa !14
  %cmp.not.us = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0.us, null
  br i1 %cmp.not.us, label %for.cond75.preheader, label %while.body.us, !llvm.loop !277

for.cond75.preheader:                             ; preds = %if.end73, %if.end73.us, %entry
  %cmp76210 = icmp sgt i32 %tuple_count, 0
  br i1 %cmp76210, label %for.body78.preheader, label %cleanup119

for.body78.preheader:                             ; preds = %for.cond75.preheader
  %wide.trip.count = zext i32 %tuple_count to i64
  br label %for.body78

while.body:                                       ; preds = %while.body.lr.ph, %if.end73
  %entry3.0222 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %entry3.0, %if.end73 ], [ %entry3.0220, %while.body.lr.ph ]
  %hash = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 6
  %11 = load i32, i32* %hash, align 8, !tbaa !254
  %cmp4 = icmp eq i32 %11, %call
  br i1 %cmp4, label %land.lhs.true, label %if.end73

land.lhs.true:                                    ; preds = %while.body
  %key_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 4
  %12 = load i64, i64* %key_size, align 8, !tbaa !253
  %cmp6 = icmp eq i64 %12, %conv
  br i1 %cmp6, label %land.lhs.true7, label %if.end73

land.lhs.true7:                                   ; preds = %land.lhs.true
  %key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 5
  %13 = load i8*, i8** %key, align 8, !tbaa !258
  %call9 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m(i8* %13, i8* %cache_key, i64 %conv) #15
  br i1 %call9, label %land.lhs.true10, label %if.end73

land.lhs.true10:                                  ; preds = %land.lhs.true7
  %computed_bounds11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 10
  %14 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds11, align 8, !tbaa !257
  %call12 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %computed_bounds, %struct.halide_dimension_t* %14) #15
  br i1 %call12, label %land.lhs.true13, label %if.end73

land.lhs.true13:                                  ; preds = %land.lhs.true10
  %tuple_count14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 8
  %15 = load i32, i32* %tuple_count14, align 8, !tbaa !232
  %cmp15 = icmp eq i32 %15, %tuple_count
  br i1 %cmp15, label %if.then23, label %if.end73

if.then23:                                        ; preds = %land.lhs.true13, %for.cond.cleanup.us
  %.us-phi = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %entry3.0222.us, %for.cond.cleanup.us ], [ %entry3.0222, %land.lhs.true13 ]
  %16 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !14
  %cmp24.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, %16
  br i1 %cmp24.not, label %if.end57, label %do.body

do.body:                                          ; preds = %if.then23
  %more_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, i64 0, i32 1
  %17 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !268
  %cmp26.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %17, null
  br i1 %cmp26.not, label %if.then27, label %do.end

if.then27:                                        ; preds = %do.body
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([129 x i8], [129 x i8]* @.str.3.43, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %do.end

do.end:                                           ; preds = %if.then27, %do.body
  %less_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, i64 0, i32 2
  %18 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent, align 8, !tbaa !252
  %cmp28.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %18, null
  br i1 %cmp28.not, label %do.body33, label %if.then29

if.then29:                                        ; preds = %do.end
  %19 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !268
  %more_recent32 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %18, i64 0, i32 1
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %19, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent32, align 8, !tbaa !268
  %.pr = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !268
  br label %do.body41

do.body33:                                        ; preds = %do.end
  %20 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !14
  %cmp34 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %20, %.us-phi
  br i1 %cmp34, label %do.end38, label %if.then35

if.then35:                                        ; preds = %do.body33
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @.str.4.44, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %do.end38

do.end38:                                         ; preds = %if.then35, %do.body33
  %21 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !268
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %21, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !14
  br label %do.body41

do.body41:                                        ; preds = %do.end38, %if.then29
  %22 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %.pr, %if.then29 ], [ %21, %do.end38 ]
  %cmp43.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %22, null
  br i1 %cmp43.not, label %if.then44, label %do.end47

if.then44:                                        ; preds = %do.body41
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([129 x i8], [129 x i8]* @.str.5.45, i64 0, i64 0)) #14
  tail call void @abort() #14
  %.pre = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !268
  br label %do.end47

do.end47:                                         ; preds = %if.then44, %do.body41
  %23 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %.pre, %if.then44 ], [ %22, %do.body41 ]
  %24 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent, align 8, !tbaa !252
  %less_recent50 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %23, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %24, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent50, align 8, !tbaa !252
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !268
  %25 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !14
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %25, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent, align 8, !tbaa !252
  %cmp53.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %25, null
  br i1 %cmp53.not, label %if.end56, label %if.then54

if.then54:                                        ; preds = %do.end47
  %more_recent55 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %25, i64 0, i32 1
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent55, align 8, !tbaa !268
  br label %if.end56

if.end56:                                         ; preds = %if.then54, %do.end47
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !14
  br label %if.end57

if.end57:                                         ; preds = %if.end56, %if.then23
  br i1 %cmp16215, label %for.body62.lr.ph, label %cleanup119.loopexit223

for.body62.lr.ph:                                 ; preds = %if.end57
  %buf66 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, i64 0, i32 11
  %wide.trip.count230 = zext i32 %tuple_count to i64
  br label %for.body62

for.body62:                                       ; preds = %for.body62, %for.body62.lr.ph
  %indvars.iv228 = phi i64 [ 0, %for.body62.lr.ph ], [ %indvars.iv.next229, %for.body62 ]
  %arrayidx65 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv228
  %26 = bitcast %struct.halide_buffer_t** %arrayidx65 to i8**
  %27 = load i8*, i8** %26, align 8, !tbaa !14
  %28 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf66, align 8, !tbaa !234
  %arrayidx68 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %28, i64 %indvars.iv228
  %29 = bitcast %struct.halide_buffer_t* %arrayidx68 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(56) %27, i8* nonnull align 8 dereferenceable(56) %29, i64 56, i1 false), !tbaa.struct !264
  %indvars.iv.next229 = add nuw nsw i64 %indvars.iv228, 1
  %exitcond231.not = icmp eq i64 %indvars.iv.next229, %wide.trip.count230
  br i1 %exitcond231.not, label %cleanup119.loopexit223, label %for.body62, !llvm.loop !278

if.end73:                                         ; preds = %land.lhs.true13, %land.lhs.true10, %land.lhs.true7, %land.lhs.true, %while.body
  %next = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 0
  %entry3.0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next, align 8, !tbaa !14
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0, null
  br i1 %cmp.not, label %for.cond75.preheader, label %while.body, !llvm.loop !277

for.body78:                                       ; preds = %for.inc114, %for.body78.preheader
  %indvars.iv = phi i64 [ 0, %for.body78.preheader ], [ %indvars.iv.next, %for.inc114 ]
  %arrayidx81 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv
  %30 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx81, align 8, !tbaa !14
  %dimensions.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %30, i64 0, i32 5
  %31 = load i32, i32* %dimensions.i.i, align 4, !tbaa !183
  %cmp19.i.i = icmp sgt i32 %31, 0
  br i1 %cmp19.i.i, label %for.body.lr.ph.i.i, label %for.body78._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge

for.body78._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge: ; preds = %for.body78
  %sub.i.0 = sub nsw i64 1, 0
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.lr.ph.i.i:                               ; preds = %for.body78
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %30, i64 0, i32 6
  %32 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8, !tbaa !184
  %wide.trip.count.i.i = zext i32 %31 to i64
  %min.iters.check38 = icmp ult i32 %31, 3
  br i1 %min.iters.check38, label %for.body.i.i.preheader, label %vector.ph39

vector.ph39:                                      ; preds = %for.body.lr.ph.i.i
  %n.vec41 = and i64 %wide.trip.count.i.i, 4294967294
  br label %vector.body37

vector.body37:                                    ; preds = %pred.load.continue53, %vector.ph39
  %index42 = phi i64 [ 0, %vector.ph39 ], [ %index.next43, %pred.load.continue53 ]
  %vec.phi48 = phi i64 [ 0, %vector.ph39 ], [ %predphi54, %pred.load.continue53 ]
  %vec.phi49 = phi i64 [ 0, %vector.ph39 ], [ %predphi55, %pred.load.continue53 ]
  %induction47 = or i64 %index42, 1
  %33 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %32, i64 %index42, i32 2
  %34 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %32, i64 %induction47, i32 2
  %35 = load i32, i32* %33, align 4, !tbaa !185
  %36 = load i32, i32* %34, align 4, !tbaa !185
  %37 = icmp sgt i32 %35, 0
  %38 = icmp sgt i32 %36, 0
  %39 = zext i32 %35 to i64
  %40 = zext i32 %36 to i64
  br i1 %37, label %pred.load.if50, label %pred.load.continue51

pred.load.if50:                                   ; preds = %vector.body37
  %41 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %32, i64 %index42, i32 1
  %42 = load i32, i32* %41, align 4, !tbaa !189
  br label %pred.load.continue51

pred.load.continue51:                             ; preds = %pred.load.if50, %vector.body37
  %43 = phi i32 [ poison, %vector.body37 ], [ %42, %pred.load.if50 ]
  br i1 %38, label %pred.load.if52, label %pred.load.continue53

pred.load.if52:                                   ; preds = %pred.load.continue51
  %44 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %32, i64 %induction47, i32 1
  %45 = load i32, i32* %44, align 4, !tbaa !189
  br label %pred.load.continue53

pred.load.continue53:                             ; preds = %pred.load.if52, %pred.load.continue51
  %46 = phi i32 [ poison, %pred.load.continue51 ], [ %45, %pred.load.if52 ]
  %47 = add nsw i32 %43, -1
  %48 = add nsw i32 %46, -1
  %49 = sext i32 %47 to i64
  %50 = sext i32 %48 to i64
  %51 = mul nsw i64 %49, %39
  %52 = mul nsw i64 %50, %40
  %53 = select i1 %37, i64 %51, i64 0
  %predphi54 = add i64 %vec.phi48, %53
  %54 = select i1 %38, i64 %52, i64 0
  %predphi55 = add i64 %vec.phi49, %54
  %index.next43 = add i64 %index42, 2
  %55 = icmp eq i64 %index.next43, %n.vec41
  br i1 %55, label %middle.block35, label %vector.body37, !llvm.loop !279

middle.block35:                                   ; preds = %pred.load.continue53
  %bin.rdx56 = add i64 %predphi55, %predphi54
  %cmp.n45 = icmp eq i64 %n.vec41, %wide.trip.count.i.i
  br i1 %cmp.n45, label %for.body.i13.i.preheader, label %for.body.i.i.preheader

for.body.i.i.preheader:                           ; preds = %for.body.lr.ph.i.i, %middle.block35
  %indvars.iv.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %n.vec41, %middle.block35 ]
  %index.021.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %bin.rdx56, %middle.block35 ]
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.body.i.i.preheader, %if.end.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %if.end.i.i ], [ %indvars.iv.i.i.ph, %for.body.i.i.preheader ]
  %index.021.i.i = phi i64 [ %index.1.i.i, %if.end.i.i ], [ %index.021.i.i.ph, %for.body.i.i.preheader ]
  %stride2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %32, i64 %indvars.iv.i.i, i32 2
  %56 = load i32, i32* %stride2.i.i, align 4, !tbaa !185
  %cmp3.i.i = icmp sgt i32 %56, 0
  br i1 %cmp3.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %conv18.i.i = zext i32 %56 to i64
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %32, i64 %indvars.iv.i.i, i32 1
  %57 = load i32, i32* %extent.i.i, align 4, !tbaa !189
  %sub.i.i = add nsw i32 %57, -1
  %conv7.i.i = sext i32 %sub.i.i to i64
  %mul.i.i = mul nsw i64 %conv7.i.i, %conv18.i.i
  %add.i.i = add nsw i64 %mul.i.i, %index.021.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i64 [ %add.i.i, %if.then.i.i ], [ %index.021.i.i, %for.body.i.i ]
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %exitcond.not.i.i = icmp eq i64 %indvars.iv.next.i.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i.i, label %for.body.i13.i.preheader, label %for.body.i.i, !llvm.loop !280

for.body.i13.i.preheader:                         ; preds = %if.end.i.i, %middle.block35
  %index.1.i.i.lcssa = phi i64 [ %bin.rdx56, %middle.block35 ], [ %index.1.i.i, %if.end.i.i ]
  %min.iters.check = icmp ult i32 %31, 3
  br i1 %min.iters.check, label %for.body.i13.i.preheader58, label %vector.ph

vector.ph:                                        ; preds = %for.body.i13.i.preheader
  %n.vec = and i64 %wide.trip.count.i.i, 4294967294
  br label %vector.body

vector.body:                                      ; preds = %pred.load.continue33, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %pred.load.continue33 ]
  %vec.phi = phi i64 [ 0, %vector.ph ], [ %predphi, %pred.load.continue33 ]
  %vec.phi31 = phi i64 [ 0, %vector.ph ], [ %predphi34, %pred.load.continue33 ]
  %induction30 = or i64 %index, 1
  %58 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %32, i64 %index, i32 2
  %59 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %32, i64 %induction30, i32 2
  %60 = load i32, i32* %58, align 4, !tbaa !185
  %61 = load i32, i32* %59, align 4, !tbaa !185
  %62 = icmp slt i32 %60, 0
  %63 = icmp slt i32 %61, 0
  %64 = sext i32 %60 to i64
  %65 = sext i32 %61 to i64
  br i1 %62, label %pred.load.if, label %pred.load.continue

pred.load.if:                                     ; preds = %vector.body
  %66 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %32, i64 %index, i32 1
  %67 = load i32, i32* %66, align 4, !tbaa !189
  br label %pred.load.continue

pred.load.continue:                               ; preds = %pred.load.if, %vector.body
  %68 = phi i32 [ poison, %vector.body ], [ %67, %pred.load.if ]
  br i1 %63, label %pred.load.if32, label %pred.load.continue33

pred.load.if32:                                   ; preds = %pred.load.continue
  %69 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %32, i64 %induction30, i32 1
  %70 = load i32, i32* %69, align 4, !tbaa !189
  br label %pred.load.continue33

pred.load.continue33:                             ; preds = %pred.load.if32, %pred.load.continue
  %71 = phi i32 [ poison, %pred.load.continue ], [ %70, %pred.load.if32 ]
  %72 = add nsw i32 %68, -1
  %73 = add nsw i32 %71, -1
  %74 = sext i32 %72 to i64
  %75 = sext i32 %73 to i64
  %76 = mul nsw i64 %74, %64
  %77 = mul nsw i64 %75, %65
  %78 = select i1 %62, i64 %76, i64 0
  %predphi = add i64 %vec.phi, %78
  %79 = select i1 %63, i64 %77, i64 0
  %predphi34 = add i64 %vec.phi31, %79
  %index.next = add i64 %index, 2
  %80 = icmp eq i64 %index.next, %n.vec
  br i1 %80, label %middle.block, label %vector.body, !llvm.loop !281

middle.block:                                     ; preds = %pred.load.continue33
  %bin.rdx = add i64 %predphi34, %predphi
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count.i.i
  br i1 %cmp.n, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i.preheader58

for.body.i13.i.preheader58:                       ; preds = %for.body.i13.i.preheader, %middle.block
  %indvars.iv.i10.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %n.vec, %middle.block ]
  %index.018.i.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %bin.rdx, %middle.block ]
  br label %for.body.i13.i

for.body.i13.i:                                   ; preds = %for.body.i13.i.preheader58, %if.end.i24.i
  %indvars.iv.i10.i = phi i64 [ %indvars.iv.next.i22.i, %if.end.i24.i ], [ %indvars.iv.i10.i.ph, %for.body.i13.i.preheader58 ]
  %index.018.i.i = phi i64 [ %index.1.i21.i, %if.end.i24.i ], [ %index.018.i.i.ph, %for.body.i13.i.preheader58 ]
  %stride2.i11.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %32, i64 %indvars.iv.i10.i, i32 2
  %81 = load i32, i32* %stride2.i11.i, align 4, !tbaa !185
  %cmp3.i12.i = icmp slt i32 %81, 0
  br i1 %cmp3.i12.i, label %if.then.i20.i, label %if.end.i24.i

if.then.i20.i:                                    ; preds = %for.body.i13.i
  %conv.i14.i = sext i32 %81 to i64
  %extent.i15.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %32, i64 %indvars.iv.i10.i, i32 1
  %82 = load i32, i32* %extent.i15.i, align 4, !tbaa !189
  %sub.i16.i = add nsw i32 %82, -1
  %conv7.i17.i = sext i32 %sub.i16.i to i64
  %mul.i18.i = mul nsw i64 %conv7.i17.i, %conv.i14.i
  %add.i19.i = add nsw i64 %mul.i18.i, %index.018.i.i
  br label %if.end.i24.i

if.end.i24.i:                                     ; preds = %if.then.i20.i, %for.body.i13.i
  %index.1.i21.i = phi i64 [ %add.i19.i, %if.then.i20.i ], [ %index.018.i.i, %for.body.i13.i ]
  %indvars.iv.next.i22.i = add nuw nsw i64 %indvars.iv.i10.i, 1
  %exitcond.not.i23.i = icmp eq i64 %indvars.iv.next.i22.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i23.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i, !llvm.loop !282

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %if.end.i24.i, %middle.block
  %index.1.i21.i.lcssa = phi i64 [ %bin.rdx, %middle.block ], [ %index.1.i21.i, %if.end.i24.i ]
  %add8.i.i = add nsw i64 %index.1.i.i.lcssa, 1
  %sub.i.1 = sub nsw i64 %add8.i.i, %index.1.i21.i.lcssa
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %for.body78._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit
  %add8.i27.i = phi i64 [ 1, %for.body78._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge ], [ %add8.i.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %sub.i.phi = phi i64 [ %sub.i.0, %for.body78._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge ], [ %sub.i.1, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %bits.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %30, i64 0, i32 4, i32 1
  %83 = load i8, i8* %bits.i.i, align 1, !tbaa !144
  %conv.i.i = zext i8 %83 to i64
  %add.i4.i = add nuw nsw i64 %conv.i.i, 7
  %div.i.i = lshr i64 %add.i4.i, 3
  %mul.i = mul i64 %div.i.i, %sub.i.phi
  %add84 = add i64 %mul.i, 32
  %call85 = tail call i8* @halide_malloc(i8* %user_context, i64 %add84) #14
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %30, i64 0, i32 2
  store i8* %call85, i8** %host, align 8, !tbaa !180
  %cmp87 = icmp eq i8* %call85, null
  br i1 %cmp87, label %for.cond89.preheader, label %for.inc114

for.cond89.preheader:                             ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  %cmp90208.not = icmp eq i64 %indvars.iv, 0
  br i1 %cmp90208.not, label %cleanup119, label %for.body92

for.body92:                                       ; preds = %for.cond89.preheader, %for.body92
  %indvars.iv224 = phi i64 [ %indvars.iv.next225, %for.body92 ], [ %indvars.iv, %for.cond89.preheader ]
  %sub = add nuw nsw i64 %indvars.iv224, 4294967295
  %84 = and i64 %sub, 4294967295
  %arrayidx94 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %84
  %85 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx94, align 8, !tbaa !14
  %host95 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %85, i64 0, i32 2
  %86 = load i8*, i8** %host95, align 8, !tbaa !180
  %call96 = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %86) #15
  %87 = bitcast %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call96 to i8*
  tail call void @halide_free(i8* %user_context, i8* %87) #14
  %88 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx94, align 8, !tbaa !14
  %host100 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %88, i64 0, i32 2
  store i8* null, i8** %host100, align 8, !tbaa !180
  %89 = icmp sgt i64 %indvars.iv224, 1
  %indvars.iv.next225 = add nsw i64 %indvars.iv224, -1
  br i1 %89, label %for.body92, label %cleanup119, !llvm.loop !283

for.inc114:                                       ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  %add.ptr = getelementptr inbounds i8, i8* %call85, i64 32
  store i8* %add.ptr, i8** %host, align 8, !tbaa !180
  %call108 = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* nonnull %add.ptr) #15
  %hash109 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call108, i64 0, i32 1
  store i32 %call, i32* %hash109, align 8, !tbaa !284
  %entry110 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call108, i64 0, i32 0
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %entry110, align 8, !tbaa !286
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %cleanup119, label %for.body78, !llvm.loop !287

cleanup119.loopexit223:                           ; preds = %for.body62, %if.end57
  %in_use_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, i64 0, i32 7
  %90 = load i32, i32* %in_use_count, align 4, !tbaa !255
  %add = add i32 %90, %tuple_count
  store i32 %add, i32* %in_use_count, align 4, !tbaa !255
  br label %cleanup119

cleanup119:                                       ; preds = %for.inc114, %for.body92, %cleanup119.loopexit223, %for.cond89.preheader, %for.cond75.preheader
  %retval.6 = phi i32 [ 1, %for.cond75.preheader ], [ 0, %cleanup119.loopexit223 ], [ -1, %for.cond89.preheader ], [ -1, %for.body92 ], [ 1, %for.inc114 ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #14
  ret i32 %retval.6
}

; Function Attrs: nounwind
define weak i32 @halide_memoization_cache_store(i8* %user_context, i8* %cache_key, i32 %size, %struct.halide_buffer_t* %computed_bounds, i32 %tuple_count, %struct.halide_buffer_t** %tuple_buffers, i1 zeroext %has_eviction_key, i64 %eviction_key) local_unnamed_addr #4 {
entry:
  %0 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, align 8, !tbaa !14
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %0, i64 0, i32 2
  %1 = load i8*, i8** %host, align 8, !tbaa !180
  %call = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %1) #15
  %hash = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call, i64 0, i32 1
  %2 = load i32, i32* %hash, align 8, !tbaa !284
  %3 = and i32 %2, 255
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #14
  %idxprom = zext i32 %3 to i64
  %arrayidx7 = getelementptr inbounds [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 0, i64 %idxprom
  %entry6.0228 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx7, align 8, !tbaa !14
  %cmp.not229 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0228, null
  br i1 %cmp.not229, label %for.cond61.preheader, label %while.body.lr.ph

while.body.lr.ph:                                 ; preds = %entry
  %conv10 = sext i32 %size to i64
  %cmp22221 = icmp sgt i32 %tuple_count, 0
  br i1 %cmp22221, label %while.body.us.preheader, label %while.body

while.body.us.preheader:                          ; preds = %while.body.lr.ph
  %4 = zext i32 %tuple_count to i64
  br label %while.body.us

while.body.us:                                    ; preds = %if.end59.us, %while.body.us.preheader
  %entry6.0230.us = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %entry6.0.us, %if.end59.us ], [ %entry6.0228, %while.body.us.preheader ]
  %hash8.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 6
  %5 = load i32, i32* %hash8.us, align 8, !tbaa !254
  %cmp9.us = icmp eq i32 %5, %2
  br i1 %cmp9.us, label %land.lhs.true.us, label %if.end59.us

land.lhs.true.us:                                 ; preds = %while.body.us
  %key_size.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 4
  %6 = load i64, i64* %key_size.us, align 8, !tbaa !253
  %cmp11.us = icmp eq i64 %6, %conv10
  br i1 %cmp11.us, label %land.lhs.true12.us, label %if.end59.us

land.lhs.true12.us:                               ; preds = %land.lhs.true.us
  %key.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 5
  %7 = load i8*, i8** %key.us, align 8, !tbaa !258
  %call14.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m(i8* %7, i8* %cache_key, i64 %conv10) #15
  br i1 %call14.us, label %land.lhs.true15.us, label %if.end59.us

land.lhs.true15.us:                               ; preds = %land.lhs.true12.us
  %computed_bounds16.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 10
  %8 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds16.us, align 8, !tbaa !257
  %call17.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %computed_bounds, %struct.halide_dimension_t* %8) #15
  br i1 %call17.us, label %land.lhs.true18.us, label %if.end59.us

land.lhs.true18.us:                               ; preds = %land.lhs.true15.us
  %tuple_count19.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 8
  %9 = load i32, i32* %tuple_count19.us, align 8, !tbaa !232
  %cmp20.us = icmp eq i32 %9, %tuple_count
  br i1 %cmp20.us, label %for.body.lr.ph.us, label %if.end59.us

for.cond.cleanup.us:                              ; preds = %for.body.us
  br i1 %call30.us, label %do.body.us, label %if.end59.us

do.body.us:                                       ; preds = %for.cond.cleanup.us
  %10 = and i8 %spec.select.us, 1
  %tobool41.not.us = icmp eq i8 %10, 0
  br i1 %tobool41.not.us, label %if.then42.us, label %for.body48.us.preheader

for.body48.us.preheader:                          ; preds = %if.then42.us, %do.body.us
  %indvars.iv.next245.1 = add nuw nsw i64 0, 1
  %arrayidx50.us.1 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 0
  br label %for.body48.us

if.then42.us:                                     ; preds = %do.body.us
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([122 x i8], [122 x i8]* @.str.9.46, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %for.body48.us.preheader

if.end59.us:                                      ; preds = %for.cond.cleanup.us, %land.lhs.true18.us, %land.lhs.true15.us, %land.lhs.true12.us, %land.lhs.true.us, %while.body.us
  %next.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 0
  %entry6.0.us = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next.us, align 8, !tbaa !14
  %cmp.not.us = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0.us, null
  br i1 %cmp.not.us, label %for.cond61.preheader, label %while.body.us, !llvm.loop !288

for.body48.us:                                    ; preds = %for.body48.us.for.body48.us_crit_edge, %for.body48.us.preheader
  %arrayidx50.us.phi = phi %struct.halide_buffer_t** [ %arrayidx50.us.0, %for.body48.us.for.body48.us_crit_edge ], [ %arrayidx50.us.1, %for.body48.us.preheader ]
  %indvars.iv.next245.phi = phi i64 [ %indvars.iv.next245.0, %for.body48.us.for.body48.us_crit_edge ], [ %indvars.iv.next245.1, %for.body48.us.preheader ]
  %11 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx50.us.phi, align 8, !tbaa !14
  %host51.us = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %11, i64 0, i32 2
  %12 = load i8*, i8** %host51.us, align 8, !tbaa !180
  %call52.us = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %12) #15
  %entry53.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call52.us, i64 0, i32 0
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %entry53.us, align 8, !tbaa !286
  %exitcond247.not = icmp eq i64 %indvars.iv.next245.phi, %4
  br i1 %exitcond247.not, label %cleanup132, label %for.body48.us.for.body48.us_crit_edge, !llvm.loop !289

for.body48.us.for.body48.us_crit_edge:            ; preds = %for.body48.us
  %indvars.iv.next245.0 = add nuw nsw i64 %indvars.iv.next245.phi, 1
  %arrayidx50.us.0 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv.next245.phi
  br label %for.body48.us

for.body.us:                                      ; preds = %for.body.lr.ph.us, %for.body.us
  %13 = phi %struct.halide_buffer_t* [ %.pre, %for.body.lr.ph.us ], [ %16, %for.body.us ]
  %indvars.iv242 = phi i64 [ 0, %for.body.lr.ph.us ], [ %indvars.iv.next243, %for.body.us ]
  %no_host_pointers_equal.0222.us = phi i8 [ 1, %for.body.lr.ph.us ], [ %spec.select.us, %for.body.us ]
  %arrayidx24.us = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv242
  %14 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx24.us, align 8, !tbaa !14
  %dim.us = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %13, i64 %indvars.iv242, i32 6
  %15 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.us, align 8, !tbaa !184
  %call30.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %14, %struct.halide_dimension_t* %15) #15
  %16 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf27.us, align 8, !tbaa !234
  %host35.us = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %16, i64 %indvars.iv242, i32 2
  %17 = load i8*, i8** %host35.us, align 8, !tbaa !180
  %host36.us = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %14, i64 0, i32 2
  %18 = load i8*, i8** %host36.us, align 8, !tbaa !180
  %cmp37.us = icmp eq i8* %17, %18
  %spec.select.us = select i1 %cmp37.us, i8 0, i8 %no_host_pointers_equal.0222.us
  %indvars.iv.next243 = add nuw nsw i64 %indvars.iv242, 1
  %cmp22.us = icmp ult i64 %indvars.iv.next243, %4
  %19 = and i1 %cmp22.us, %call30.us
  br i1 %19, label %for.body.us, label %for.cond.cleanup.us, !llvm.loop !290

for.body.lr.ph.us:                                ; preds = %land.lhs.true18.us
  %buf27.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 11
  %.pre = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf27.us, align 8, !tbaa !234
  br label %for.body.us

for.cond61.preheader:                             ; preds = %if.end59, %if.end59.us, %entry
  %cmp62218 = icmp sgt i32 %tuple_count, 0
  br i1 %cmp62218, label %for.body64.preheader, label %for.cond.cleanup63

for.body64.preheader:                             ; preds = %for.cond61.preheader
  %wide.trip.count240 = zext i32 %tuple_count to i64
  br label %for.body64

while.body:                                       ; preds = %while.body.lr.ph, %if.end59
  %entry6.0230 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %entry6.0, %if.end59 ], [ %entry6.0228, %while.body.lr.ph ]
  %hash8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 6
  %20 = load i32, i32* %hash8, align 8, !tbaa !254
  %cmp9 = icmp eq i32 %20, %2
  br i1 %cmp9, label %land.lhs.true, label %if.end59

land.lhs.true:                                    ; preds = %while.body
  %key_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 4
  %21 = load i64, i64* %key_size, align 8, !tbaa !253
  %cmp11 = icmp eq i64 %21, %conv10
  br i1 %cmp11, label %land.lhs.true12, label %if.end59

land.lhs.true12:                                  ; preds = %land.lhs.true
  %key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 5
  %22 = load i8*, i8** %key, align 8, !tbaa !258
  %call14 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m(i8* %22, i8* %cache_key, i64 %conv10) #15
  br i1 %call14, label %land.lhs.true15, label %if.end59

land.lhs.true15:                                  ; preds = %land.lhs.true12
  %computed_bounds16 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 10
  %23 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds16, align 8, !tbaa !257
  %call17 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %computed_bounds, %struct.halide_dimension_t* %23) #15
  br i1 %call17, label %land.lhs.true18, label %if.end59

land.lhs.true18:                                  ; preds = %land.lhs.true15
  %tuple_count19 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 8
  %24 = load i32, i32* %tuple_count19, align 8, !tbaa !232
  %cmp20 = icmp eq i32 %24, %tuple_count
  br i1 %cmp20, label %cleanup132, label %if.end59

if.end59:                                         ; preds = %land.lhs.true18, %land.lhs.true15, %land.lhs.true12, %land.lhs.true, %while.body
  %next = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 0
  %entry6.0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next, align 8, !tbaa !14
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0, null
  br i1 %cmp.not, label %for.cond61.preheader, label %while.body, !llvm.loop !288

for.cond.cleanup63:                               ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit, %for.cond61.preheader
  %added_size.0.lcssa = phi i64 [ 0, %for.cond61.preheader ], [ %add, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ]
  %25 = load i64, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !22
  %add73 = add i64 %25, %added_size.0.lcssa
  store i64 %add73, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !22
  tail call void @_ZN6Halide7Runtime8Internal11prune_cacheEv() #15
  %call74 = tail call i8* @halide_malloc(i8* null, i64 96) #14
  %tobool75.not = icmp eq i8* %call74, null
  br i1 %tobool75.not, label %if.then83, label %if.then76

for.body64:                                       ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit, %for.body64.preheader
  %indvars.iv238 = phi i64 [ 0, %for.body64.preheader ], [ %indvars.iv.next239, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ]
  %added_size.0219 = phi i64 [ 0, %for.body64.preheader ], [ %add, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ]
  %arrayidx67 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv238
  %26 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx67, align 8, !tbaa !14
  %dimensions.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %26, i64 0, i32 5
  %27 = load i32, i32* %dimensions.i.i, align 4, !tbaa !183
  %cmp19.i.i = icmp sgt i32 %27, 0
  br i1 %cmp19.i.i, label %for.body.lr.ph.i.i, label %for.body64._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge

for.body64._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge: ; preds = %for.body64
  %sub.i.0 = sub nsw i64 1, 0
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.lr.ph.i.i:                               ; preds = %for.body64
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %26, i64 0, i32 6
  %28 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8, !tbaa !184
  %wide.trip.count.i.i = zext i32 %27 to i64
  %min.iters.check24 = icmp ult i32 %27, 3
  br i1 %min.iters.check24, label %for.body.i.i.preheader, label %vector.ph25

vector.ph25:                                      ; preds = %for.body.lr.ph.i.i
  %n.vec27 = and i64 %wide.trip.count.i.i, 4294967294
  br label %vector.body23

vector.body23:                                    ; preds = %pred.load.continue39, %vector.ph25
  %index28 = phi i64 [ 0, %vector.ph25 ], [ %index.next29, %pred.load.continue39 ]
  %vec.phi34 = phi i64 [ 0, %vector.ph25 ], [ %predphi40, %pred.load.continue39 ]
  %vec.phi35 = phi i64 [ 0, %vector.ph25 ], [ %predphi41, %pred.load.continue39 ]
  %induction33 = or i64 %index28, 1
  %29 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %index28, i32 2
  %30 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %induction33, i32 2
  %31 = load i32, i32* %29, align 4, !tbaa !185
  %32 = load i32, i32* %30, align 4, !tbaa !185
  %33 = icmp sgt i32 %31, 0
  %34 = icmp sgt i32 %32, 0
  %35 = zext i32 %31 to i64
  %36 = zext i32 %32 to i64
  br i1 %33, label %pred.load.if36, label %pred.load.continue37

pred.load.if36:                                   ; preds = %vector.body23
  %37 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %index28, i32 1
  %38 = load i32, i32* %37, align 4, !tbaa !189
  br label %pred.load.continue37

pred.load.continue37:                             ; preds = %pred.load.if36, %vector.body23
  %39 = phi i32 [ poison, %vector.body23 ], [ %38, %pred.load.if36 ]
  br i1 %34, label %pred.load.if38, label %pred.load.continue39

pred.load.if38:                                   ; preds = %pred.load.continue37
  %40 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %induction33, i32 1
  %41 = load i32, i32* %40, align 4, !tbaa !189
  br label %pred.load.continue39

pred.load.continue39:                             ; preds = %pred.load.if38, %pred.load.continue37
  %42 = phi i32 [ poison, %pred.load.continue37 ], [ %41, %pred.load.if38 ]
  %43 = add nsw i32 %39, -1
  %44 = add nsw i32 %42, -1
  %45 = sext i32 %43 to i64
  %46 = sext i32 %44 to i64
  %47 = mul nsw i64 %45, %35
  %48 = mul nsw i64 %46, %36
  %49 = select i1 %33, i64 %47, i64 0
  %predphi40 = add i64 %vec.phi34, %49
  %50 = select i1 %34, i64 %48, i64 0
  %predphi41 = add i64 %vec.phi35, %50
  %index.next29 = add i64 %index28, 2
  %51 = icmp eq i64 %index.next29, %n.vec27
  br i1 %51, label %middle.block21, label %vector.body23, !llvm.loop !291

middle.block21:                                   ; preds = %pred.load.continue39
  %bin.rdx42 = add i64 %predphi41, %predphi40
  %cmp.n31 = icmp eq i64 %n.vec27, %wide.trip.count.i.i
  br i1 %cmp.n31, label %for.body.i13.i.preheader, label %for.body.i.i.preheader

for.body.i.i.preheader:                           ; preds = %for.body.lr.ph.i.i, %middle.block21
  %indvars.iv.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %n.vec27, %middle.block21 ]
  %index.021.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %bin.rdx42, %middle.block21 ]
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.body.i.i.preheader, %if.end.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %if.end.i.i ], [ %indvars.iv.i.i.ph, %for.body.i.i.preheader ]
  %index.021.i.i = phi i64 [ %index.1.i.i, %if.end.i.i ], [ %index.021.i.i.ph, %for.body.i.i.preheader ]
  %stride2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %indvars.iv.i.i, i32 2
  %52 = load i32, i32* %stride2.i.i, align 4, !tbaa !185
  %cmp3.i.i = icmp sgt i32 %52, 0
  br i1 %cmp3.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %conv18.i.i = zext i32 %52 to i64
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %indvars.iv.i.i, i32 1
  %53 = load i32, i32* %extent.i.i, align 4, !tbaa !189
  %sub.i.i = add nsw i32 %53, -1
  %conv7.i.i = sext i32 %sub.i.i to i64
  %mul.i.i = mul nsw i64 %conv7.i.i, %conv18.i.i
  %add.i.i = add nsw i64 %mul.i.i, %index.021.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i64 [ %add.i.i, %if.then.i.i ], [ %index.021.i.i, %for.body.i.i ]
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %exitcond.not.i.i = icmp eq i64 %indvars.iv.next.i.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i.i, label %for.body.i13.i.preheader, label %for.body.i.i, !llvm.loop !292

for.body.i13.i.preheader:                         ; preds = %if.end.i.i, %middle.block21
  %index.1.i.i.lcssa = phi i64 [ %bin.rdx42, %middle.block21 ], [ %index.1.i.i, %if.end.i.i ]
  %min.iters.check = icmp ult i32 %27, 3
  br i1 %min.iters.check, label %for.body.i13.i.preheader44, label %vector.ph

vector.ph:                                        ; preds = %for.body.i13.i.preheader
  %n.vec = and i64 %wide.trip.count.i.i, 4294967294
  br label %vector.body

vector.body:                                      ; preds = %pred.load.continue19, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %pred.load.continue19 ]
  %vec.phi = phi i64 [ 0, %vector.ph ], [ %predphi, %pred.load.continue19 ]
  %vec.phi17 = phi i64 [ 0, %vector.ph ], [ %predphi20, %pred.load.continue19 ]
  %induction16 = or i64 %index, 1
  %54 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %index, i32 2
  %55 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %induction16, i32 2
  %56 = load i32, i32* %54, align 4, !tbaa !185
  %57 = load i32, i32* %55, align 4, !tbaa !185
  %58 = icmp slt i32 %56, 0
  %59 = icmp slt i32 %57, 0
  %60 = sext i32 %56 to i64
  %61 = sext i32 %57 to i64
  br i1 %58, label %pred.load.if, label %pred.load.continue

pred.load.if:                                     ; preds = %vector.body
  %62 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %index, i32 1
  %63 = load i32, i32* %62, align 4, !tbaa !189
  br label %pred.load.continue

pred.load.continue:                               ; preds = %pred.load.if, %vector.body
  %64 = phi i32 [ poison, %vector.body ], [ %63, %pred.load.if ]
  br i1 %59, label %pred.load.if18, label %pred.load.continue19

pred.load.if18:                                   ; preds = %pred.load.continue
  %65 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %induction16, i32 1
  %66 = load i32, i32* %65, align 4, !tbaa !189
  br label %pred.load.continue19

pred.load.continue19:                             ; preds = %pred.load.if18, %pred.load.continue
  %67 = phi i32 [ poison, %pred.load.continue ], [ %66, %pred.load.if18 ]
  %68 = add nsw i32 %64, -1
  %69 = add nsw i32 %67, -1
  %70 = sext i32 %68 to i64
  %71 = sext i32 %69 to i64
  %72 = mul nsw i64 %70, %60
  %73 = mul nsw i64 %71, %61
  %74 = select i1 %58, i64 %72, i64 0
  %predphi = add i64 %vec.phi, %74
  %75 = select i1 %59, i64 %73, i64 0
  %predphi20 = add i64 %vec.phi17, %75
  %index.next = add i64 %index, 2
  %76 = icmp eq i64 %index.next, %n.vec
  br i1 %76, label %middle.block, label %vector.body, !llvm.loop !293

middle.block:                                     ; preds = %pred.load.continue19
  %bin.rdx = add i64 %predphi20, %predphi
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count.i.i
  br i1 %cmp.n, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i.preheader44

for.body.i13.i.preheader44:                       ; preds = %for.body.i13.i.preheader, %middle.block
  %indvars.iv.i10.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %n.vec, %middle.block ]
  %index.018.i.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %bin.rdx, %middle.block ]
  br label %for.body.i13.i

for.body.i13.i:                                   ; preds = %for.body.i13.i.preheader44, %if.end.i24.i
  %indvars.iv.i10.i = phi i64 [ %indvars.iv.next.i22.i, %if.end.i24.i ], [ %indvars.iv.i10.i.ph, %for.body.i13.i.preheader44 ]
  %index.018.i.i = phi i64 [ %index.1.i21.i, %if.end.i24.i ], [ %index.018.i.i.ph, %for.body.i13.i.preheader44 ]
  %stride2.i11.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %indvars.iv.i10.i, i32 2
  %77 = load i32, i32* %stride2.i11.i, align 4, !tbaa !185
  %cmp3.i12.i = icmp slt i32 %77, 0
  br i1 %cmp3.i12.i, label %if.then.i20.i, label %if.end.i24.i

if.then.i20.i:                                    ; preds = %for.body.i13.i
  %conv.i14.i = sext i32 %77 to i64
  %extent.i15.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %indvars.iv.i10.i, i32 1
  %78 = load i32, i32* %extent.i15.i, align 4, !tbaa !189
  %sub.i16.i = add nsw i32 %78, -1
  %conv7.i17.i = sext i32 %sub.i16.i to i64
  %mul.i18.i = mul nsw i64 %conv7.i17.i, %conv.i14.i
  %add.i19.i = add nsw i64 %mul.i18.i, %index.018.i.i
  br label %if.end.i24.i

if.end.i24.i:                                     ; preds = %if.then.i20.i, %for.body.i13.i
  %index.1.i21.i = phi i64 [ %add.i19.i, %if.then.i20.i ], [ %index.018.i.i, %for.body.i13.i ]
  %indvars.iv.next.i22.i = add nuw nsw i64 %indvars.iv.i10.i, 1
  %exitcond.not.i23.i = icmp eq i64 %indvars.iv.next.i22.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i23.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i, !llvm.loop !294

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %if.end.i24.i, %middle.block
  %index.1.i21.i.lcssa = phi i64 [ %bin.rdx, %middle.block ], [ %index.1.i21.i, %if.end.i24.i ]
  %add8.i.i = add nsw i64 %index.1.i.i.lcssa, 1
  %sub.i.1 = sub nsw i64 %add8.i.i, %index.1.i21.i.lcssa
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %for.body64._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit
  %add8.i27.i = phi i64 [ 1, %for.body64._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge ], [ %add8.i.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %sub.i.phi = phi i64 [ %sub.i.0, %for.body64._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge ], [ %sub.i.1, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %bits.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %26, i64 0, i32 4, i32 1
  %79 = load i8, i8* %bits.i.i, align 1, !tbaa !144
  %conv.i.i = zext i8 %79 to i64
  %add.i4.i = add nuw nsw i64 %conv.i.i, 7
  %div.i.i = lshr i64 %add.i4.i, 3
  %mul.i = mul i64 %div.i.i, %sub.i.phi
  %add = add i64 %mul.i, %added_size.0219
  %indvars.iv.next239 = add nuw nsw i64 %indvars.iv238, 1
  %exitcond241.not = icmp eq i64 %indvars.iv.next239, %wide.trip.count240
  br i1 %exitcond241.not, label %for.cond.cleanup63, label %for.body64, !llvm.loop !295

if.then76:                                        ; preds = %for.cond.cleanup63
  %80 = bitcast i8* %call74 to %"struct.Halide::Runtime::Internal::CacheEntry"*
  %conv77 = sext i32 %size to i64
  %call79 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal10CacheEntry4initEPKhmjPK15halide_buffer_tiPPS5_by(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %80, i8* %cache_key, i64 %conv77, i32 %2, %struct.halide_buffer_t* %computed_bounds, i32 %tuple_count, %struct.halide_buffer_t** nonnull %tuple_buffers, i1 zeroext %has_eviction_key, i64 %eviction_key) #15
  br i1 %call79, label %if.end101, label %if.then83

if.then83:                                        ; preds = %if.then76, %for.cond.cleanup63
  %81 = load i64, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !22
  %sub = sub i64 %81, %added_size.0.lcssa
  store i64 %sub, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !22
  br i1 %cmp62218, label %for.body88.preheader, label %for.cond.cleanup87

for.body88.preheader:                             ; preds = %if.then83
  %wide.trip.count = zext i32 %tuple_count to i64
  %indvars.iv.next.0 = add nuw nsw i64 0, 1
  %arrayidx90.0 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 0
  br label %for.body88

for.cond.cleanup87:                               ; preds = %for.body88, %if.then83
  br i1 %tobool75.not, label %cleanup132, label %if.then99

for.body88:                                       ; preds = %for.body88.for.body88_crit_edge, %for.body88.preheader
  %arrayidx90.phi = phi %struct.halide_buffer_t** [ %arrayidx90.0, %for.body88.preheader ], [ %arrayidx90.1, %for.body88.for.body88_crit_edge ]
  %indvars.iv.next.phi = phi i64 [ %indvars.iv.next.0, %for.body88.preheader ], [ %indvars.iv.next.1, %for.body88.for.body88_crit_edge ]
  %82 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx90.phi, align 8, !tbaa !14
  %host91 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %82, i64 0, i32 2
  %83 = load i8*, i8** %host91, align 8, !tbaa !180
  %call92 = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %83) #15
  %entry93 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call92, i64 0, i32 0
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %entry93, align 8, !tbaa !286
  %exitcond.not = icmp eq i64 %indvars.iv.next.phi, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.cleanup87, label %for.body88.for.body88_crit_edge, !llvm.loop !296

for.body88.for.body88_crit_edge:                  ; preds = %for.body88
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv.next.phi, 1
  %arrayidx90.1 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv.next.phi
  br label %for.body88

if.then99:                                        ; preds = %for.cond.cleanup87
  tail call void @halide_free(i8* %user_context, i8* nonnull %call74) #14
  br label %cleanup132

if.end101:                                        ; preds = %if.then76
  %84 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx7, align 8, !tbaa !14
  %next104 = bitcast i8* %call74 to %"struct.Halide::Runtime::Internal::CacheEntry"**
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %84, %"struct.Halide::Runtime::Internal::CacheEntry"** %next104, align 8, !tbaa !229
  %85 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !14
  %less_recent = getelementptr inbounds i8, i8* %call74, i64 16
  %86 = bitcast i8* %less_recent to %"struct.Halide::Runtime::Internal::CacheEntry"**
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %85, %"struct.Halide::Runtime::Internal::CacheEntry"** %86, align 8, !tbaa !252
  %cmp105.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %85, null
  br i1 %cmp105.not, label %if.end107, label %if.then106

if.then106:                                       ; preds = %if.end101
  %more_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %85, i64 0, i32 1
  %87 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent to i8**
  store i8* %call74, i8** %87, align 8, !tbaa !268
  br label %if.end107

if.end107:                                        ; preds = %if.then106, %if.end101
  store i8* %call74, i8** bitcast (%"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE to i8**), align 8, !tbaa !14
  %88 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !14
  %cmp108 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %88, null
  br i1 %cmp108, label %if.then109, label %if.end110

if.then109:                                       ; preds = %if.end107
  store i8* %call74, i8** bitcast (%"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE to i8**), align 8, !tbaa !14
  br label %if.end110

if.end110:                                        ; preds = %if.then109, %if.end107
  %89 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx7 to i8**
  store i8* %call74, i8** %89, align 8, !tbaa !14
  %in_use_count = getelementptr inbounds i8, i8* %call74, i64 52
  %90 = bitcast i8* %in_use_count to i32*
  store i32 %tuple_count, i32* %90, align 4, !tbaa !255
  br i1 %cmp62218, label %for.body117.preheader, label %cleanup132

for.body117.preheader:                            ; preds = %if.end110
  %wide.trip.count236 = zext i32 %tuple_count to i64
  %indvars.iv.next235.0 = add nuw nsw i64 0, 1
  %arrayidx119.0 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 0
  br label %for.body117

for.body117:                                      ; preds = %for.body117.for.body117_crit_edge, %for.body117.preheader
  %arrayidx119.phi = phi %struct.halide_buffer_t** [ %arrayidx119.0, %for.body117.preheader ], [ %arrayidx119.1, %for.body117.for.body117_crit_edge ]
  %indvars.iv.next235.phi = phi i64 [ %indvars.iv.next235.0, %for.body117.preheader ], [ %indvars.iv.next235.1, %for.body117.for.body117_crit_edge ]
  %91 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx119.phi, align 8, !tbaa !14
  %host120 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %91, i64 0, i32 2
  %92 = load i8*, i8** %host120, align 8, !tbaa !180
  %call121 = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %92) #15
  %93 = bitcast %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call121 to i8**
  store i8* %call74, i8** %93, align 8, !tbaa !286
  %exitcond237.not = icmp eq i64 %indvars.iv.next235.phi, %wide.trip.count236
  br i1 %exitcond237.not, label %cleanup132, label %for.body117.for.body117_crit_edge, !llvm.loop !297

for.body117.for.body117_crit_edge:                ; preds = %for.body117
  %indvars.iv.next235.1 = add nuw nsw i64 %indvars.iv.next235.phi, 1
  %arrayidx119.1 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv.next235.phi
  br label %for.body117

cleanup132:                                       ; preds = %land.lhs.true18, %for.body48.us, %for.body117, %if.end110, %if.then99, %for.cond.cleanup87
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #14
  ret i32 0
}

; Function Attrs: nounwind
define weak void @halide_memoization_cache_release(i8* %user_context, i8* %host) local_unnamed_addr #4 {
entry:
  %call = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %host) #15
  %entry2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call, i64 0, i32 0
  %0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %entry2, align 8, !tbaa !286
  %cmp = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %0, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = bitcast %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call to i8*
  tail call void @halide_free(i8* %user_context, i8* %1) #14
  br label %if.end6

if.else:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #14
  %in_use_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %0, i64 0, i32 7
  %2 = load i32, i32* %in_use_count, align 4, !tbaa !255
  %cmp3.not = icmp eq i32 %2, 0
  br i1 %cmp3.not, label %if.then4, label %do.end

if.then4:                                         ; preds = %if.else
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([123 x i8], [123 x i8]* @.str.12.47, i64 0, i64 0)) #14
  tail call void @abort() #14
  %.pre = load i32, i32* %in_use_count, align 4, !tbaa !255
  br label %do.end

do.end:                                           ; preds = %if.then4, %if.else
  %3 = phi i32 [ %.pre, %if.then4 ], [ %2, %if.else ]
  %dec = add i32 %3, -1
  store i32 %dec, i32* %in_use_count, align 4, !tbaa !255
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #14
  br label %if.end6

if.end6:                                          ; preds = %do.end, %if.then
  ret void
}

; Function Attrs: nounwind
define weak void @halide_memoization_cache_evict(i8* %user_context, i64 %eviction_key) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #14
  br label %for.body

for.cond.cleanup:                                 ; preds = %if.end25
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #14
  ret void

for.body:                                         ; preds = %if.end25, %entry
  %__begin1.059 = phi %"struct.Halide::Runtime::Internal::CacheEntry"** [ getelementptr inbounds ([256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 0, i64 0), %entry ], [ %incdec.ptr, %if.end25 ]
  %0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %__begin1.059, align 8, !tbaa !14
  %cmp2.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %0, null
  br i1 %cmp2.not, label %if.end25, label %while.body

while.body:                                       ; preds = %for.body, %if.end24
  %prev.058 = phi %"struct.Halide::Runtime::Internal::CacheEntry"** [ %prev.1, %if.end24 ], [ %__begin1.059, %for.body ]
  %entry1.056 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %1, %if.end24 ], [ %0, %for.body ]
  %next4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056, i64 0, i32 0
  %1 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next4, align 8, !tbaa !229
  %has_eviction_key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056, i64 0, i32 13
  %2 = load i8, i8* %has_eviction_key, align 8, !tbaa !262, !range !21
  %tobool.not = icmp eq i8 %2, 0
  br i1 %tobool.not, label %if.end24, label %land.lhs.true

land.lhs.true:                                    ; preds = %while.body
  %eviction_key5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056, i64 0, i32 12
  %3 = load i64, i64* %eviction_key5, align 8, !tbaa !263
  %cmp6 = icmp eq i64 %3, %eviction_key
  br i1 %cmp6, label %if.then7, label %if.end24

if.then7:                                         ; preds = %land.lhs.true
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %1, %"struct.Halide::Runtime::Internal::CacheEntry"** %prev.058, align 8, !tbaa !14
  %more_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056, i64 0, i32 1
  %4 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !268
  %cmp8.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %4, null
  %less_recent12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056, i64 0, i32 2
  %5 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent12, align 8, !tbaa !252
  br i1 %cmp8.not, label %if.else, label %if.then9

if.then9:                                         ; preds = %if.then7
  %less_recent11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %4, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %5, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent11, align 8, !tbaa !252
  %.pre = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent12, align 8, !tbaa !252
  br label %if.end

if.else:                                          ; preds = %if.then7
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %5, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !14
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then9
  %6 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %5, %if.else ], [ %.pre, %if.then9 ]
  %cmp14.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %6, null
  %more_recent18 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %6, i64 0, i32 1
  %_ZN6Halide7Runtime8Internal19least_recently_usedE.sink = select i1 %cmp14.not, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent18
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %4, %"struct.Halide::Runtime::Internal::CacheEntry"** %_ZN6Halide7Runtime8Internal19least_recently_usedE.sink, align 8, !tbaa !14
  tail call void @_ZN6Halide7Runtime8Internal10CacheEntry7destroyEv(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %entry1.056) #15
  %7 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056 to i8*
  tail call void @halide_free(i8* %user_context, i8* nonnull %7) #14
  br label %if.end24

if.end24:                                         ; preds = %if.end, %land.lhs.true, %while.body
  %prev.1 = phi %"struct.Halide::Runtime::Internal::CacheEntry"** [ %prev.058, %if.end ], [ %next4, %land.lhs.true ], [ %next4, %while.body ]
  %cmp3.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %1, null
  br i1 %cmp3.not, label %if.end25, label %while.body, !llvm.loop !298

if.end25:                                         ; preds = %if.end24, %for.body
  %incdec.ptr = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %__begin1.059, i64 1
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"** %incdec.ptr, getelementptr inbounds ([256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 1, i64 0)
  br i1 %cmp.not, label %for.cond.cleanup, label %for.body
}

; Function Attrs: nounwind
define weak i8* @halide_string_to_string(i8* %dst, i8* %end, i8* %arg) local_unnamed_addr #4 {
entry:
  %cmp.not = icmp ult i8* %dst, %end
  br i1 %cmp.not, label %if.end, label %return

if.end:                                           ; preds = %entry
  %tobool.not = icmp eq i8* %arg, null
  %spec.select = select i1 %tobool.not, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.50, i64 0, i64 0), i8* %arg
  br label %if.end5

if.then4:                                         ; preds = %if.end8
  store i8 0, i8* %dst.addr.023, align 1, !tbaa !18
  br label %return

if.end5:                                          ; preds = %if.end8, %if.end
  %arg.addr.124 = phi i8* [ %spec.select, %if.end ], [ %incdec.ptr9, %if.end8 ]
  %dst.addr.023 = phi i8* [ %dst, %if.end ], [ %incdec.ptr, %if.end8 ]
  %0 = load i8, i8* %arg.addr.124, align 1, !tbaa !18
  store i8 %0, i8* %dst.addr.023, align 1, !tbaa !18
  %cmp6 = icmp eq i8 %0, 0
  br i1 %cmp6, label %return, label %if.end8

if.end8:                                          ; preds = %if.end5
  %incdec.ptr = getelementptr inbounds i8, i8* %dst.addr.023, i64 1
  %incdec.ptr9 = getelementptr inbounds i8, i8* %arg.addr.124, i64 1
  %cmp3 = icmp eq i8* %incdec.ptr, %end
  br i1 %cmp3, label %if.then4, label %if.end5

return:                                           ; preds = %if.end5, %if.then4, %entry
  %retval.0 = phi i8* [ %end, %if.then4 ], [ %dst, %entry ], [ %dst.addr.023, %if.end5 ]
  ret i8* %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_uint64_to_string(i8* %dst, i8* %end, i64 %arg, i32 %min_digits) local_unnamed_addr #0 {
entry:
  %buf = alloca [32 x i8], align 1
  %0 = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %0) #11
  %arrayidx = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i64 0, i64 31
  store i8 0, i8* %arrayidx, align 1, !tbaa !18
  %add.ptr = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i64 0, i64 30
  %cmp13 = icmp sgt i32 %min_digits, 0
  %tobool14 = icmp ne i64 %arg, 0
  %1 = or i1 %tobool14, %cmp13
  br i1 %1, label %entry.for.body_crit_edge, label %for.cond.cleanup

entry.for.body_crit_edge:                         ; preds = %entry
  %inc.1 = add nuw nsw i32 0, 1
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %entry
  %digits.0.lcssa = phi i8* [ %add.ptr, %entry ], [ %incdec.ptr, %for.body ]
  %incdec.ptr1 = getelementptr inbounds i8, i8* %digits.0.lcssa, i64 1
  %call = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* nonnull %incdec.ptr1) #15
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %0) #11
  ret i8* %call

for.body:                                         ; preds = %entry.for.body_crit_edge, %for.body.for.body_crit_edge
  %arg.addr.017 = phi i64 [ %div, %for.body.for.body_crit_edge ], [ %arg, %entry.for.body_crit_edge ]
  %digits.016 = phi i8* [ %incdec.ptr, %for.body.for.body_crit_edge ], [ %add.ptr, %entry.for.body_crit_edge ]
  %inc.phi = phi i32 [ %inc.0, %for.body.for.body_crit_edge ], [ %inc.1, %entry.for.body_crit_edge ]
  %div = udiv i64 %arg.addr.017, 10
  %mul.neg = mul i64 %div, -10
  %sub = add i64 %mul.neg, %arg.addr.017
  %2 = trunc i64 %sub to i8
  %conv = add i8 %2, 48
  store i8 %conv, i8* %digits.016, align 1, !tbaa !18
  %incdec.ptr = getelementptr inbounds i8, i8* %digits.016, i64 -1
  %cmp = icmp slt i32 %inc.phi, %min_digits
  %3 = icmp ugt i64 %arg.addr.017, 9
  %4 = or i1 %3, %cmp
  br i1 %4, label %for.body.for.body_crit_edge, label %for.cond.cleanup, !llvm.loop !299

for.body.for.body_crit_edge:                      ; preds = %for.body
  %inc.0 = add nuw nsw i32 %inc.phi, 1
  br label %for.body
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_int64_to_string(i8* %dst, i8* %end, i64 %arg, i32 %min_digits) local_unnamed_addr #0 {
entry:
  %cmp = icmp slt i64 %arg, 0
  %cmp1 = icmp ult i8* %dst, %end
  %or.cond = and i1 %cmp1, %cmp
  br i1 %or.cond, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %incdec.ptr = getelementptr inbounds i8, i8* %dst, i64 1
  store i8 45, i8* %dst, align 1, !tbaa !18
  %sub = sub nsw i64 0, %arg
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %arg.addr.0 = phi i64 [ %sub, %if.then ], [ %arg, %entry ]
  %dst.addr.0 = phi i8* [ %incdec.ptr, %if.then ], [ %dst, %entry ]
  %call = tail call i8* @halide_uint64_to_string(i8* %dst.addr.0, i8* %end, i64 %arg.addr.0, i32 %min_digits) #15
  ret i8* %call
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_double_to_string(i8* %dst, i8* %end, double %arg, i32 %scientific) local_unnamed_addr #0 {
entry:
  %arg.addr = alloca double, align 8
  %bits = alloca i64, align 8
  %buf = alloca [512 x i8], align 1
  store double %arg, double* %arg.addr, align 8, !tbaa !172
  %0 = bitcast i64* %bits to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #11
  store i64 0, i64* %bits, align 8, !tbaa !22
  %1 = bitcast double* %arg.addr to i8*
  %call = call i8* @memcpy(i8* nonnull %0, i8* nonnull %1, i64 8) #14
  %2 = load i64, i64* %bits, align 8, !tbaa !22
  %and = and i64 %2, 4503599627370495
  %shr = lshr i64 %2, 52
  %3 = trunc i64 %shr to i32
  %conv = and i32 %3, 2047
  %cmp = icmp eq i32 %conv, 2047
  br i1 %cmp, label %if.then, label %if.else15

if.then:                                          ; preds = %entry
  %tobool.not = icmp eq i64 %and, 0
  %tobool10.not = icmp sgt i64 %2, -1
  br i1 %tobool.not, label %if.else9, label %if.then4

if.then4:                                         ; preds = %if.then
  br i1 %tobool10.not, label %if.else, label %if.then6

if.then6:                                         ; preds = %if.then4
  %call7 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1.57, i64 0, i64 0)) #15
  br label %cleanup147

if.else:                                          ; preds = %if.then4
  %call8 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.58, i64 0, i64 0)) #15
  br label %cleanup147

if.else9:                                         ; preds = %if.then
  br i1 %tobool10.not, label %if.else13, label %if.then11

if.then11:                                        ; preds = %if.else9
  %call12 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3.59, i64 0, i64 0)) #15
  br label %cleanup147

if.else13:                                        ; preds = %if.else9
  %call14 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4.60, i64 0, i64 0)) #15
  br label %cleanup147

if.else15:                                        ; preds = %entry
  %cmp16 = icmp eq i32 %conv, 0
  %cmp17 = icmp eq i64 %and, 0
  %or.cond = and i1 %cmp17, %cmp16
  br i1 %or.cond, label %if.then18, label %if.end32

if.then18:                                        ; preds = %if.else15
  %tobool19.not = icmp eq i32 %scientific, 0
  %tobool27.not = icmp sgt i64 %2, -1
  br i1 %tobool19.not, label %if.else26, label %if.then20

if.then20:                                        ; preds = %if.then18
  br i1 %tobool27.not, label %if.else24, label %if.then22

if.then22:                                        ; preds = %if.then20
  %call23 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.5.61, i64 0, i64 0)) #15
  br label %cleanup147

if.else24:                                        ; preds = %if.then20
  %call25 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.6.62, i64 0, i64 0)) #15
  br label %cleanup147

if.else26:                                        ; preds = %if.then18
  br i1 %tobool27.not, label %if.else30, label %if.then28

if.then28:                                        ; preds = %if.else26
  %call29 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.7.63, i64 0, i64 0)) #15
  br label %cleanup147

if.else30:                                        ; preds = %if.else26
  %call31 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.8.64, i64 0, i64 0)) #15
  br label %cleanup147

if.end32:                                         ; preds = %if.else15
  %tobool33.not = icmp sgt i64 %2, -1
  br i1 %tobool33.not, label %if.end36, label %if.then34

if.then34:                                        ; preds = %if.end32
  %call35 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9.65, i64 0, i64 0)) #15
  %4 = load double, double* %arg.addr, align 8, !tbaa !172
  %fneg = fneg double %4
  store double %fneg, double* %arg.addr, align 8, !tbaa !172
  br label %if.end36

if.end36:                                         ; preds = %if.then34, %if.end32
  %dst.addr.0 = phi i8* [ %call35, %if.then34 ], [ %dst, %if.end32 ]
  %tobool37.not = icmp eq i32 %scientific, 0
  br i1 %tobool37.not, label %if.else61, label %while.condthread-pre-split

while.condthread-pre-split:                       ; preds = %if.end36
  %.pr = load double, double* %arg.addr, align 8, !tbaa !172
  %cmp39276 = fcmp olt double %.pr, 1.000000e+00
  br i1 %cmp39276, label %while.condthread-pre-split.while.body_crit_edge, label %while.cond40thread-pre-split

while.condthread-pre-split.while.body_crit_edge:  ; preds = %while.condthread-pre-split
  %dec.1 = add nsw i32 0, -1
  br label %while.body

while.body:                                       ; preds = %while.condthread-pre-split.while.body_crit_edge, %while.body.while.body_crit_edge
  %dec.phi = phi i32 [ %dec.0, %while.body.while.body_crit_edge ], [ %dec.1, %while.condthread-pre-split.while.body_crit_edge ]
  %5 = phi double [ %mul, %while.body.while.body_crit_edge ], [ %.pr, %while.condthread-pre-split.while.body_crit_edge ]
  %mul = fmul double %5, 1.000000e+01
  %cmp39 = fcmp olt double %mul, 1.000000e+00
  br i1 %cmp39, label %while.body.while.body_crit_edge, label %while.cond.while.cond40thread-pre-split_crit_edge, !llvm.loop !300

while.body.while.body_crit_edge:                  ; preds = %while.body
  %dec.0 = add nsw i32 %dec.phi, -1
  br label %while.body

while.cond.while.cond40thread-pre-split_crit_edge: ; preds = %while.body
  store double %mul, double* %arg.addr, align 8, !tbaa !172
  br label %while.cond40thread-pre-split

while.cond40thread-pre-split:                     ; preds = %while.cond.while.cond40thread-pre-split_crit_edge, %while.condthread-pre-split
  %.pr261 = phi double [ %mul, %while.cond.while.cond40thread-pre-split_crit_edge ], [ %.pr, %while.condthread-pre-split ]
  %exponent_base_10.0.lcssa = phi i32 [ %dec.phi, %while.cond.while.cond40thread-pre-split_crit_edge ], [ 0, %while.condthread-pre-split ]
  %cmp41272 = fcmp ult double %.pr261, 1.000000e+01
  br i1 %cmp41272, label %while.end43, label %while.body42

while.body42:                                     ; preds = %while.cond40thread-pre-split, %while.body42
  %exponent_base_10.1273 = phi i32 [ %inc, %while.body42 ], [ %exponent_base_10.0.lcssa, %while.cond40thread-pre-split ]
  %6 = phi double [ %div, %while.body42 ], [ %.pr261, %while.cond40thread-pre-split ]
  %div = fdiv double %6, 1.000000e+01
  %inc = add nsw i32 %exponent_base_10.1273, 1
  %cmp41 = fcmp ult double %div, 1.000000e+01
  br i1 %cmp41, label %while.cond40.while.end43_crit_edge, label %while.body42, !llvm.loop !301

while.cond40.while.end43_crit_edge:               ; preds = %while.body42
  store double %div, double* %arg.addr, align 8, !tbaa !172
  br label %while.end43

while.end43:                                      ; preds = %while.cond40.while.end43_crit_edge, %while.cond40thread-pre-split
  %.lcssa = phi double [ %div, %while.cond40.while.end43_crit_edge ], [ %.pr261, %while.cond40thread-pre-split ]
  %exponent_base_10.1.lcssa = phi i32 [ %inc, %while.cond40.while.end43_crit_edge ], [ %exponent_base_10.0.lcssa, %while.cond40thread-pre-split ]
  %mul44 = fmul double %.lcssa, 1.000000e+06
  %add = fadd double %mul44, 5.000000e-01
  %conv45 = fptoui double %add to i64
  %div46 = udiv i64 %conv45, 1000000
  %mul47.neg = mul i64 %div46, -1000000
  %sub48 = add i64 %mul47.neg, %conv45
  %call49 = call i8* @halide_int64_to_string(i8* %dst.addr.0, i8* %end, i64 %div46, i32 1) #15
  %call50 = call i8* @halide_string_to_string(i8* %call49, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #15
  %call51 = call i8* @halide_int64_to_string(i8* %call50, i8* %end, i64 %sub48, i32 6) #15
  %cmp52 = icmp sgt i32 %exponent_base_10.1.lcssa, -1
  br i1 %cmp52, label %if.then53, label %if.else55

if.then53:                                        ; preds = %while.end43
  %call54 = call i8* @halide_string_to_string(i8* %call51, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11.67, i64 0, i64 0)) #15
  br label %if.end58

if.else55:                                        ; preds = %while.end43
  %call56 = call i8* @halide_string_to_string(i8* %call51, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12.68, i64 0, i64 0)) #15
  %sub57 = sub nsw i32 0, %exponent_base_10.1.lcssa
  br label %if.end58

if.end58:                                         ; preds = %if.else55, %if.then53
  %exponent_base_10.2 = phi i32 [ %exponent_base_10.1.lcssa, %if.then53 ], [ %sub57, %if.else55 ]
  %dst.addr.1 = phi i8* [ %call54, %if.then53 ], [ %call56, %if.else55 ]
  %conv59262 = zext i32 %exponent_base_10.2 to i64
  %call60 = call i8* @halide_int64_to_string(i8* %dst.addr.1, i8* %end, i64 %conv59262, i32 2) #15
  br label %cleanup147

if.else61:                                        ; preds = %if.end36
  br i1 %cmp16, label %if.then63, label %if.end65

if.then63:                                        ; preds = %if.else61
  %call64 = call i8* @halide_double_to_string(i8* %dst.addr.0, i8* %end, double 0.000000e+00, i32 0) #15
  br label %cleanup147

if.end65:                                         ; preds = %if.else61
  %add67 = or i64 %and, 4503599627370496
  %sub69 = add nsw i32 %conv, -1075
  %cmp70 = icmp ult i32 %conv, 1075
  br i1 %cmp70, label %if.then71, label %if.end104

if.then71:                                        ; preds = %if.end65
  %cmp72 = icmp ult i32 %conv, 1023
  %sub76 = sub nuw nsw i32 1075, %conv
  %sh_prom = zext i32 %sub76 to i64
  %shr77 = lshr i64 %add67, %sh_prom
  %shl80 = shl i64 %shr77, %sh_prom
  %integer_part.0 = select i1 %cmp72, i64 0, i64 %shr77
  %sub81 = select i1 %cmp72, i64 0, i64 %shl80
  %f.0.in = sub i64 %add67, %sub81
  %f.0 = uitofp i64 %f.0.in to double
  %conv84258 = zext i32 %sub69 to i64
  %shl85 = shl i64 %conv84258, 52
  %add87 = add i64 %shl85, 4696837146684686336
  %7 = bitcast i64 %add87 to double
  %mul89 = fmul double %7, %f.0
  %add90 = fadd double %mul89, 5.000000e-01
  %conv91 = fptoui double %add90 to i64
  %conv92 = uitofp i64 %conv91 to double
  %cmp93 = fcmp oeq double %add90, %conv92
  %and95 = and i64 %conv91, 1
  %tobool96.not = icmp ne i64 %and95, 0
  %not.or.cond259 = and i1 %cmp93, %tobool96.not
  %dec98 = sext i1 %not.or.cond259 to i64
  %fractional_part.0 = add i64 %dec98, %conv91
  %cmp100 = icmp eq i64 %fractional_part.0, 1000000
  %inc102 = zext i1 %cmp100 to i64
  %spec.select = add nuw i64 %integer_part.0, %inc102
  %spec.select260 = select i1 %cmp100, i64 0, i64 %fractional_part.0
  br label %if.end104

if.end104:                                        ; preds = %if.then71, %if.end65
  %integer_part.2 = phi i64 [ %spec.select, %if.then71 ], [ %add67, %if.end65 ]
  %integer_exponent.0 = phi i32 [ 0, %if.then71 ], [ %sub69, %if.end65 ]
  %fractional_part.2 = phi i64 [ %spec.select260, %if.then71 ], [ 0, %if.end65 ]
  %8 = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %8) #11
  %add.ptr = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i64 0, i64 512
  %add.ptr105 = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i64 0, i64 480
  %call108 = call i8* @halide_int64_to_string(i8* nonnull %add.ptr105, i8* nonnull %add.ptr, i64 %integer_part.2, i32 1) #15
  %cmp109267 = icmp sgt i32 %integer_exponent.0, 0
  br i1 %cmp109267, label %for.cond111.preheader, label %for.cond.cleanup

for.cond111.preheader:                            ; preds = %if.end104, %if.end137
  %i.0270 = phi i32 [ %inc139, %if.end137 ], [ 0, %if.end104 ]
  %int_part_ptr.0268 = phi i8* [ %int_part_ptr.1, %if.end137 ], [ %add.ptr105, %if.end104 ]
  %cmp113.not264 = icmp eq i8* %call108, %int_part_ptr.0268
  br i1 %cmp113.not264, label %if.end137, label %for.body115

for.cond.cleanup:                                 ; preds = %if.end137, %if.end104
  %int_part_ptr.0.lcssa = phi i8* [ %add.ptr105, %if.end104 ], [ %int_part_ptr.1, %if.end137 ]
  %call141 = call i8* @halide_string_to_string(i8* %dst.addr.0, i8* %end, i8* %int_part_ptr.0.lcssa) #15
  %call142 = call i8* @halide_string_to_string(i8* %call141, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #15
  %call143 = call i8* @halide_int64_to_string(i8* %call142, i8* %end, i64 %fractional_part.2, i32 6) #15
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %8) #11
  br label %cleanup147

for.cond.cleanup114:                              ; preds = %for.body115
  br i1 %cmp124, label %if.then135, label %if.end137

for.body115:                                      ; preds = %for.cond111.preheader, %for.body115
  %p.0266.pn = phi i8* [ %p.0266, %for.body115 ], [ %call108, %for.cond111.preheader ]
  %carry.0265 = phi i32 [ %carry.1, %for.body115 ], [ 0, %for.cond111.preheader ]
  %p.0266 = getelementptr inbounds i8, i8* %p.0266.pn, i64 -1
  %9 = load i8, i8* %p.0266, align 1, !tbaa !18
  %sub117 = add i8 %9, -48
  %conv119 = sext i8 %sub117 to i32
  %mul120 = shl nsw i32 %conv119, 1
  %add121 = or i32 %mul120, %carry.0265
  %10 = trunc i32 %add121 to i8
  %cmp124 = icmp sgt i8 %10, 9
  %sub127 = add nsw i32 %add121, 246
  %carry.1 = zext i1 %cmp124 to i32
  %new_digit.0.in = select i1 %cmp124, i32 %sub127, i32 %add121
  %11 = trunc i32 %new_digit.0.in to i8
  %conv133 = add i8 %11, 48
  store i8 %conv133, i8* %p.0266, align 1, !tbaa !18
  %cmp113.not = icmp eq i8* %p.0266, %int_part_ptr.0268
  br i1 %cmp113.not, label %for.cond.cleanup114, label %for.body115, !llvm.loop !302

if.then135:                                       ; preds = %for.cond.cleanup114
  %incdec.ptr136 = getelementptr inbounds i8, i8* %int_part_ptr.0268, i64 -1
  store i8 49, i8* %incdec.ptr136, align 1, !tbaa !18
  br label %if.end137

if.end137:                                        ; preds = %if.then135, %for.cond.cleanup114, %for.cond111.preheader
  %int_part_ptr.1 = phi i8* [ %incdec.ptr136, %if.then135 ], [ %int_part_ptr.0268, %for.cond.cleanup114 ], [ %call108, %for.cond111.preheader ]
  %inc139 = add nuw nsw i32 %i.0270, 1
  %exitcond.not = icmp eq i32 %inc139, %integer_exponent.0
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond111.preheader, !llvm.loop !303

cleanup147:                                       ; preds = %for.cond.cleanup, %if.then63, %if.end58, %if.else30, %if.then28, %if.else24, %if.then22, %if.else13, %if.then11, %if.else, %if.then6
  %retval.1 = phi i8* [ %call7, %if.then6 ], [ %call8, %if.else ], [ %call12, %if.then11 ], [ %call14, %if.else13 ], [ %call23, %if.then22 ], [ %call25, %if.else24 ], [ %call29, %if.then28 ], [ %call31, %if.else30 ], [ %call64, %if.then63 ], [ %call60, %if.end58 ], [ %call143, %for.cond.cleanup ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #11
  ret i8* %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_pointer_to_string(i8* %dst, i8* %end, i8* %arg) local_unnamed_addr #0 {
entry:
  %buf = alloca [20 x i8], align 1
  %0 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(20) %0, i8 0, i64 20, i1 false)
  %add.ptr = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 18
  %1 = ptrtoint i8* %arg to i64
  %and = and i64 %1, 15
  %arrayidx = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and
  %2 = load i8, i8* %arrayidx, align 1, !tbaa !18
  %incdec.ptr = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 17
  store i8 %2, i8* %add.ptr, align 1, !tbaa !18
  %shr = lshr i64 %1, 4
  %tobool.not = icmp eq i64 %shr, 0
  br i1 %tobool.not, label %cleanup, label %for.cond

for.cond:                                         ; preds = %entry
  %and.1 = and i64 %shr, 15
  %arrayidx.1 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.1
  %3 = load i8, i8* %arrayidx.1, align 1, !tbaa !18
  %incdec.ptr.1 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 16
  store i8 %3, i8* %incdec.ptr, align 1, !tbaa !18
  %shr.1 = lshr i64 %1, 8
  %tobool.not.1 = icmp eq i64 %shr.1, 0
  br i1 %tobool.not.1, label %cleanup, label %for.cond.1

cleanup:                                          ; preds = %for.cond.14, %for.cond.13, %for.cond.12, %for.cond.11, %for.cond.10, %for.cond.9, %for.cond.8, %for.cond.7, %for.cond.6, %for.cond.5, %for.cond.4, %for.cond.3, %for.cond.2, %for.cond.1, %for.cond, %entry
  %buf_ptr.016.lcssa = phi i8* [ %add.ptr, %entry ], [ %incdec.ptr, %for.cond ], [ %incdec.ptr.1, %for.cond.1 ], [ %incdec.ptr.2, %for.cond.2 ], [ %incdec.ptr.3, %for.cond.3 ], [ %incdec.ptr.4, %for.cond.4 ], [ %incdec.ptr.5, %for.cond.5 ], [ %incdec.ptr.6, %for.cond.6 ], [ %incdec.ptr.7, %for.cond.7 ], [ %incdec.ptr.8, %for.cond.8 ], [ %incdec.ptr.9, %for.cond.9 ], [ %incdec.ptr.10, %for.cond.10 ], [ %incdec.ptr.11, %for.cond.11 ], [ %incdec.ptr.12, %for.cond.12 ], [ %incdec.ptr.13, %for.cond.13 ], [ %incdec.ptr.14, %for.cond.14 ]
  %incdec.ptr.lcssa = phi i8* [ %incdec.ptr, %entry ], [ %incdec.ptr.1, %for.cond ], [ %incdec.ptr.2, %for.cond.1 ], [ %incdec.ptr.3, %for.cond.2 ], [ %incdec.ptr.4, %for.cond.3 ], [ %incdec.ptr.5, %for.cond.4 ], [ %incdec.ptr.6, %for.cond.5 ], [ %incdec.ptr.7, %for.cond.6 ], [ %incdec.ptr.8, %for.cond.7 ], [ %incdec.ptr.9, %for.cond.8 ], [ %incdec.ptr.10, %for.cond.9 ], [ %incdec.ptr.11, %for.cond.10 ], [ %incdec.ptr.12, %for.cond.11 ], [ %incdec.ptr.13, %for.cond.12 ], [ %incdec.ptr.14, %for.cond.13 ], [ %incdec.ptr.15, %for.cond.14 ]
  %incdec.ptr1 = getelementptr inbounds i8, i8* %buf_ptr.016.lcssa, i64 -2
  store i8 120, i8* %incdec.ptr.lcssa, align 1, !tbaa !18
  store i8 48, i8* %incdec.ptr1, align 1, !tbaa !18
  %call = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* nonnull %incdec.ptr1) #15
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %0) #11
  ret i8* %call

for.cond.1:                                       ; preds = %for.cond
  %and.2 = and i64 %shr.1, 15
  %arrayidx.2 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.2
  %4 = load i8, i8* %arrayidx.2, align 1, !tbaa !18
  %incdec.ptr.2 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 15
  store i8 %4, i8* %incdec.ptr.1, align 1, !tbaa !18
  %shr.2 = lshr i64 %1, 12
  %tobool.not.2 = icmp eq i64 %shr.2, 0
  br i1 %tobool.not.2, label %cleanup, label %for.cond.2

for.cond.2:                                       ; preds = %for.cond.1
  %and.3 = and i64 %shr.2, 15
  %arrayidx.3 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.3
  %5 = load i8, i8* %arrayidx.3, align 1, !tbaa !18
  %incdec.ptr.3 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 14
  store i8 %5, i8* %incdec.ptr.2, align 1, !tbaa !18
  %shr.3 = lshr i64 %1, 16
  %tobool.not.3 = icmp eq i64 %shr.3, 0
  br i1 %tobool.not.3, label %cleanup, label %for.cond.3

for.cond.3:                                       ; preds = %for.cond.2
  %and.4 = and i64 %shr.3, 15
  %arrayidx.4 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.4
  %6 = load i8, i8* %arrayidx.4, align 1, !tbaa !18
  %incdec.ptr.4 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 13
  store i8 %6, i8* %incdec.ptr.3, align 1, !tbaa !18
  %shr.4 = lshr i64 %1, 20
  %tobool.not.4 = icmp eq i64 %shr.4, 0
  br i1 %tobool.not.4, label %cleanup, label %for.cond.4

for.cond.4:                                       ; preds = %for.cond.3
  %and.5 = and i64 %shr.4, 15
  %arrayidx.5 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.5
  %7 = load i8, i8* %arrayidx.5, align 1, !tbaa !18
  %incdec.ptr.5 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 12
  store i8 %7, i8* %incdec.ptr.4, align 1, !tbaa !18
  %shr.5 = lshr i64 %1, 24
  %tobool.not.5 = icmp eq i64 %shr.5, 0
  br i1 %tobool.not.5, label %cleanup, label %for.cond.5

for.cond.5:                                       ; preds = %for.cond.4
  %and.6 = and i64 %shr.5, 15
  %arrayidx.6 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.6
  %8 = load i8, i8* %arrayidx.6, align 1, !tbaa !18
  %incdec.ptr.6 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 11
  store i8 %8, i8* %incdec.ptr.5, align 1, !tbaa !18
  %shr.6 = lshr i64 %1, 28
  %tobool.not.6 = icmp eq i64 %shr.6, 0
  br i1 %tobool.not.6, label %cleanup, label %for.cond.6

for.cond.6:                                       ; preds = %for.cond.5
  %and.7 = and i64 %shr.6, 15
  %arrayidx.7 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.7
  %9 = load i8, i8* %arrayidx.7, align 1, !tbaa !18
  %incdec.ptr.7 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 10
  store i8 %9, i8* %incdec.ptr.6, align 1, !tbaa !18
  %shr.7 = lshr i64 %1, 32
  %tobool.not.7 = icmp eq i64 %shr.7, 0
  br i1 %tobool.not.7, label %cleanup, label %for.cond.7

for.cond.7:                                       ; preds = %for.cond.6
  %and.8 = and i64 %shr.7, 15
  %arrayidx.8 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.8
  %10 = load i8, i8* %arrayidx.8, align 1, !tbaa !18
  %incdec.ptr.8 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 9
  store i8 %10, i8* %incdec.ptr.7, align 1, !tbaa !18
  %shr.8 = lshr i64 %1, 36
  %tobool.not.8 = icmp eq i64 %shr.8, 0
  br i1 %tobool.not.8, label %cleanup, label %for.cond.8

for.cond.8:                                       ; preds = %for.cond.7
  %and.9 = and i64 %shr.8, 15
  %arrayidx.9 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.9
  %11 = load i8, i8* %arrayidx.9, align 1, !tbaa !18
  %incdec.ptr.9 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 8
  store i8 %11, i8* %incdec.ptr.8, align 1, !tbaa !18
  %shr.9 = lshr i64 %1, 40
  %tobool.not.9 = icmp eq i64 %shr.9, 0
  br i1 %tobool.not.9, label %cleanup, label %for.cond.9

for.cond.9:                                       ; preds = %for.cond.8
  %and.10 = and i64 %shr.9, 15
  %arrayidx.10 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.10
  %12 = load i8, i8* %arrayidx.10, align 1, !tbaa !18
  %incdec.ptr.10 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 7
  store i8 %12, i8* %incdec.ptr.9, align 1, !tbaa !18
  %shr.10 = lshr i64 %1, 44
  %tobool.not.10 = icmp eq i64 %shr.10, 0
  br i1 %tobool.not.10, label %cleanup, label %for.cond.10

for.cond.10:                                      ; preds = %for.cond.9
  %and.11 = and i64 %shr.10, 15
  %arrayidx.11 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.11
  %13 = load i8, i8* %arrayidx.11, align 1, !tbaa !18
  %incdec.ptr.11 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 6
  store i8 %13, i8* %incdec.ptr.10, align 1, !tbaa !18
  %shr.11 = lshr i64 %1, 48
  %tobool.not.11 = icmp eq i64 %shr.11, 0
  br i1 %tobool.not.11, label %cleanup, label %for.cond.11

for.cond.11:                                      ; preds = %for.cond.10
  %and.12 = and i64 %shr.11, 15
  %arrayidx.12 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.12
  %14 = load i8, i8* %arrayidx.12, align 1, !tbaa !18
  %incdec.ptr.12 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 5
  store i8 %14, i8* %incdec.ptr.11, align 1, !tbaa !18
  %shr.12 = lshr i64 %1, 52
  %tobool.not.12 = icmp eq i64 %shr.12, 0
  br i1 %tobool.not.12, label %cleanup, label %for.cond.12

for.cond.12:                                      ; preds = %for.cond.11
  %and.13 = and i64 %shr.12, 15
  %arrayidx.13 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.13
  %15 = load i8, i8* %arrayidx.13, align 1, !tbaa !18
  %incdec.ptr.13 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 4
  store i8 %15, i8* %incdec.ptr.12, align 1, !tbaa !18
  %shr.13 = lshr i64 %1, 56
  %tobool.not.13 = icmp eq i64 %shr.13, 0
  br i1 %tobool.not.13, label %cleanup, label %for.cond.13

for.cond.13:                                      ; preds = %for.cond.12
  %and.14 = and i64 %shr.13, 15
  %arrayidx.14 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.14
  %16 = load i8, i8* %arrayidx.14, align 1, !tbaa !18
  %incdec.ptr.14 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 3
  store i8 %16, i8* %incdec.ptr.13, align 1, !tbaa !18
  %shr.14 = lshr i64 %1, 60
  %tobool.not.14 = icmp eq i64 %shr.14, 0
  br i1 %tobool.not.14, label %cleanup, label %for.cond.14

for.cond.14:                                      ; preds = %for.cond.13
  %arrayidx.15 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %shr.14
  %17 = load i8, i8* %arrayidx.15, align 1, !tbaa !18
  %incdec.ptr.15 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 2
  store i8 %17, i8* %incdec.ptr.14, align 1, !tbaa !18
  br label %cleanup
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_type_to_string(i8* %dst, i8* %end, %struct.halide_type_t* %t) local_unnamed_addr #0 {
entry:
  %code = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %t, i64 0, i32 0
  %0 = load i8, i8* %code, align 2, !tbaa !304
  %1 = icmp ult i8 %0, 4
  br i1 %1, label %switch.lookup, label %sw.epilog

switch.lookup:                                    ; preds = %entry
  %2 = sext i8 %0 to i64
  %switch.gep = getelementptr inbounds [4 x i8*], [4 x i8*]* @switch.table.halide_type_to_string, i64 0, i64 %2
  %switch.load = load i8*, i8** %switch.gep, align 8
  br label %sw.epilog

sw.epilog:                                        ; preds = %entry, %switch.lookup
  %code_name.0 = phi i8* [ %switch.load, %switch.lookup ], [ getelementptr inbounds ([14 x i8], [14 x i8]* @.str.18.72, i64 0, i64 0), %entry ]
  %call = tail call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* nonnull %code_name.0) #15
  %bits = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %t, i64 0, i32 1
  %3 = load i8, i8* %bits, align 1, !tbaa !144
  %conv4 = zext i8 %3 to i64
  %call5 = tail call i8* @halide_uint64_to_string(i8* %call, i8* %end, i64 %conv4, i32 1) #15
  %lanes = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %t, i64 0, i32 2
  %4 = load i16, i16* %lanes, align 2, !tbaa !305
  %cmp.not = icmp eq i16 %4, 1
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %sw.epilog
  %call7 = tail call i8* @halide_string_to_string(i8* %call5, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.19.77, i64 0, i64 0)) #15
  %5 = load i16, i16* %lanes, align 2, !tbaa !305
  %conv9 = zext i16 %5 to i64
  %call10 = tail call i8* @halide_uint64_to_string(i8* %call7, i8* %end, i64 %conv9, i32 1) #15
  br label %if.end

if.end:                                           ; preds = %if.then, %sw.epilog
  %dst.addr.0 = phi i8* [ %call10, %if.then ], [ %call5, %sw.epilog ]
  ret i8* %dst.addr.0
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_buffer_to_string(i8* %dst, i8* %end, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = tail call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.20.78, i64 0, i64 0)) #15
  br label %return

if.end:                                           ; preds = %entry
  %call1 = tail call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.21.79, i64 0, i64 0)) #15
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !182
  %call2 = tail call i8* @halide_uint64_to_string(i8* %call1, i8* %end, i64 %0, i32 1) #15
  %call3 = tail call i8* @halide_string_to_string(i8* %call2, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #15
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %1 = bitcast %struct.halide_device_interface_t** %device_interface to i8**
  %2 = load i8*, i8** %1, align 8, !tbaa !306
  %call4 = tail call i8* @halide_pointer_to_string(i8* %call3, i8* %end, i8* %2) #15
  %call5 = tail call i8* @halide_string_to_string(i8* %call4, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #15
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 2
  %3 = load i8*, i8** %host, align 8, !tbaa !180
  %call6 = tail call i8* @halide_pointer_to_string(i8* %call5, i8* %end, i8* %3) #15
  %call7 = tail call i8* @halide_string_to_string(i8* %call6, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #15
  %flags = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %4 = load i64, i64* %flags, align 8, !tbaa !307
  %call8 = tail call i8* @halide_uint64_to_string(i8* %call7, i8* %end, i64 %4, i32 1) #15
  %call9 = tail call i8* @halide_string_to_string(i8* %call8, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #15
  %type = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 4
  %call10 = tail call i8* @halide_type_to_string(i8* %call9, i8* %end, %struct.halide_type_t* nonnull %type) #15
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 5
  %5 = load i32, i32* %dimensions, align 4, !tbaa !183
  %cmp1179 = icmp sgt i32 %5, 0
  br i1 %cmp1179, label %for.body.lr.ph, label %for.cond.cleanup

for.body.lr.ph:                                   ; preds = %if.end
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %if.end
  %dst.addr.0.lcssa = phi i8* [ %call10, %if.end ], [ %call26, %for.body ]
  %call27 = tail call i8* @halide_string_to_string(i8* %dst.addr.0.lcssa, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.119, i64 0, i64 0)) #15
  br label %return

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.body ]
  %dst.addr.080 = phi i8* [ %call10, %for.body.lr.ph ], [ %call26, %for.body ]
  %call12 = tail call i8* @halide_string_to_string(i8* %dst.addr.080, i8* %end, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.23.82, i64 0, i64 0)) #15
  %6 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !184
  %min = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %6, i64 %indvars.iv, i32 0
  %7 = load i32, i32* %min, align 4, !tbaa !221
  %conv = sext i32 %7 to i64
  %call13 = tail call i8* @halide_int64_to_string(i8* %call12, i8* %end, i64 %conv, i32 1) #15
  %call14 = tail call i8* @halide_string_to_string(i8* %call13, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #15
  %8 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !184
  %extent = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %8, i64 %indvars.iv, i32 1
  %9 = load i32, i32* %extent, align 4, !tbaa !189
  %conv18 = sext i32 %9 to i64
  %call19 = tail call i8* @halide_int64_to_string(i8* %call14, i8* %end, i64 %conv18, i32 1) #15
  %call20 = tail call i8* @halide_string_to_string(i8* %call19, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #15
  %10 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !184
  %stride = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %10, i64 %indvars.iv, i32 2
  %11 = load i32, i32* %stride, align 4, !tbaa !185
  %conv24 = sext i32 %11 to i64
  %call25 = tail call i8* @halide_int64_to_string(i8* %call20, i8* %end, i64 %conv24, i32 1) #15
  %call26 = tail call i8* @halide_string_to_string(i8* %call25, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.24.83, i64 0, i64 0)) #15
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %12 = load i32, i32* %dimensions, align 4, !tbaa !183
  %13 = sext i32 %12 to i64
  %cmp11 = icmp slt i64 %indvars.iv.next, %13
  br i1 %cmp11, label %for.body, label %for.cond.cleanup, !llvm.loop !308

return:                                           ; preds = %for.cond.cleanup, %if.then
  %retval.0 = phi i8* [ %call, %if.then ], [ %call27, %for.cond.cleanup ]
  ret i8* %retval.0
}

; Function Attrs: alwaysinline nounwind willreturn mustprogress
define weak i32 @halide_malloc_alignment() local_unnamed_addr #6 {
entry:
  ret i32 32
}

; Function Attrs: nounwind
define weak i32 @halide_reuse_device_allocations(i8* %user_context, i1 zeroext %flag) local_unnamed_addr #4 {
entry:
  %frombool = zext i1 %flag to i8
  store i8 %frombool, i8* @_ZN6Halide7Runtime8Internal36halide_reuse_device_allocations_flagE, align 1, !tbaa !19
  br i1 %flag, label %if.end5, label %if.then

if.then:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #14
  %p.014 = load %struct.halide_device_allocation_pool*, %struct.halide_device_allocation_pool** @_ZN6Halide7Runtime8Internal23device_allocation_poolsE, align 8, !tbaa !14
  %cmp.not15 = icmp eq %struct.halide_device_allocation_pool* %p.014, null
  br i1 %cmp.not15, label %for.cond.cleanup, label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %if.then
  %err.0.lcssa = phi i32 [ 0, %if.then ], [ %spec.select, %for.body ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #14
  br label %if.end5

for.body:                                         ; preds = %if.then, %for.body
  %p.017 = phi %struct.halide_device_allocation_pool* [ %p.0, %for.body ], [ %p.014, %if.then ]
  %err.016 = phi i32 [ %spec.select, %for.body ], [ 0, %if.then ]
  %release_unused = getelementptr inbounds %struct.halide_device_allocation_pool, %struct.halide_device_allocation_pool* %p.017, i64 0, i32 0
  %0 = load i32 (i8*)*, i32 (i8*)** %release_unused, align 8, !tbaa !309
  %call = tail call i32 %0(i8* %user_context) #14
  %tobool3.not = icmp eq i32 %call, 0
  %spec.select = select i1 %tobool3.not, i32 %err.016, i32 %call
  %next = getelementptr inbounds %struct.halide_device_allocation_pool, %struct.halide_device_allocation_pool* %p.017, i64 0, i32 1
  %p.0 = load %struct.halide_device_allocation_pool*, %struct.halide_device_allocation_pool** %next, align 8, !tbaa !14
  %cmp.not = icmp eq %struct.halide_device_allocation_pool* %p.0, null
  br i1 %cmp.not, label %for.cond.cleanup, label %for.body, !llvm.loop !311

if.end5:                                          ; preds = %for.cond.cleanup, %entry
  %err.2 = phi i32 [ 0, %entry ], [ %err.0.lcssa, %for.cond.cleanup ]
  ret i32 %err.2
}

; Function Attrs: nounwind willreturn mustprogress
define weak zeroext i1 @halide_can_reuse_device_allocations(i8* %user_context) local_unnamed_addr #2 {
entry:
  %0 = load i8, i8* @_ZN6Halide7Runtime8Internal36halide_reuse_device_allocations_flagE, align 1, !tbaa !19, !range !21
  %tobool = icmp ne i8 %0, 0
  ret i1 %tobool
}

; Function Attrs: nounwind
define weak void @halide_register_device_allocation_pool(%struct.halide_device_allocation_pool* %pool) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #14
  %0 = load %struct.halide_device_allocation_pool*, %struct.halide_device_allocation_pool** @_ZN6Halide7Runtime8Internal23device_allocation_poolsE, align 8, !tbaa !14
  %next = getelementptr inbounds %struct.halide_device_allocation_pool, %struct.halide_device_allocation_pool* %pool, i64 0, i32 1
  store %struct.halide_device_allocation_pool* %0, %struct.halide_device_allocation_pool** %next, align 8, !tbaa !312
  store %struct.halide_device_allocation_pool* %pool, %struct.halide_device_allocation_pool** @_ZN6Halide7Runtime8Internal23device_allocation_poolsE, align 8, !tbaa !14
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #14
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %flags.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %0 = load i64, i64* %flags.i.i, align 8, !tbaa !307
  %and.i.i = and i64 %0, 2
  %cmp.i.i.not = icmp eq i64 %and.i.i, 0
  br i1 %cmp.i.i.not, label %return, label %if.end

if.end:                                           ; preds = %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %1 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !306
  %and.i.i46 = and i64 %0, 1
  %cmp.i.i47.not = icmp eq i64 %and.i.i46, 0
  br i1 %cmp.i.i47.not, label %if.end9, label %return

if.end9:                                          ; preds = %if.end
  %cmp = icmp eq %struct.halide_device_interface_t* %1, null
  br i1 %cmp, label %return, label %if.end15

if.end15:                                         ; preds = %if.end9
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %1, i64 0, i32 15
  %2 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %copy_to_host = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %2, i64 0, i32 6
  %3 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %copy_to_host, align 8, !tbaa !315
  %call16 = tail call i32 %3(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #14
  %cmp17.not = icmp eq i32 %call16, 0
  br i1 %cmp17.not, label %if.end23, label %return

if.end23:                                         ; preds = %if.end15
  %4 = load i64, i64* %flags.i.i, align 8, !tbaa !307
  %and.i.i44 = and i64 %4, -3
  store i64 %and.i.i44, i64* %flags.i.i, align 8, !tbaa !307
  %call24 = tail call i32 @halide_msan_annotate_buffer_is_initialized(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #14
  br label %return

return:                                           ; preds = %if.end23, %if.end15, %if.end9, %if.end, %entry
  %retval.2 = phi i32 [ 0, %entry ], [ 0, %if.end23 ], [ -14, %if.end ], [ -19, %if.end9 ], [ -14, %if.end15 ]
  ret i32 %retval.2
}

; Function Attrs: nounwind mustprogress
define weak void @halide_device_release(i8* %user_context, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i64 0, i32 15
  %0 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %device_release = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %0, i64 0, i32 5
  %1 = load i32 (i8*)*, i32 (i8*)** %device_release, align 8, !tbaa !317
  %call = tail call i32 %1(i8* %user_context) #14
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_copy_to_host(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #14
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.6.88, i64 0, i64 0)) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !306
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !182
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !307
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end16.i.split

if.end16.i.split:                                 ; preds = %if.end16.i
  %call11 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #15
  br label %cleanup

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %call12 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* %buf) #15
  br label %cleanup

cleanup:                                          ; preds = %if.end16.i.split, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ %call11, %if.end16.i.split ], [ %call12, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #14
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define linkonce i32 @copy_to_device_already_locked(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7.89, i64 0, i64 0)) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !306
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !182
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !307
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %if.end, label %cleanup

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit, %if.end16.i
  %cmp1 = icmp eq %struct.halide_device_interface_t* %device_interface, null
  br i1 %cmp1, label %if.then2, label %if.end11

if.then2:                                         ; preds = %if.end
  %device_interface5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %4 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface5, align 8, !tbaa !306
  %cmp6 = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp6, label %if.then7, label %if.end11

if.then7:                                         ; preds = %if.then2
  %call8 = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %cleanup

if.end11:                                         ; preds = %if.then2, %if.end
  %device_interface.addr.0 = phi %struct.halide_device_interface_t* [ %device_interface, %if.end ], [ %4, %if.then2 ]
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %5 = load i64, i64* %device, align 8, !tbaa !182
  %tobool.not = icmp eq i64 %5, 0
  br i1 %tobool.not, label %if.then18, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end11
  %device_interface12 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %6 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface12, align 8, !tbaa !306
  %cmp13.not = icmp eq %struct.halide_device_interface_t* %6, %device_interface.addr.0
  br i1 %cmp13.not, label %if.end27, label %if.then14

if.then14:                                        ; preds = %land.lhs.true
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.9.90, i64 0, i64 0)) #14
  br label %cleanup

if.then18:                                        ; preds = %if.end11
  %call19 = tail call i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* nonnull %buf, %struct.halide_device_interface_t* nonnull %device_interface.addr.0) #15
  %cmp20.not = icmp eq i32 %call19, 0
  br i1 %cmp20.not, label %if.end27, label %cleanup

if.end27:                                         ; preds = %if.then18, %land.lhs.true
  %flags.i.i97 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %7 = load i64, i64* %flags.i.i97, align 8, !tbaa !307
  %and.i.i98 = and i64 %7, 1
  %cmp.i.i99.not = icmp eq i64 %and.i.i98, 0
  br i1 %cmp.i.i99.not, label %cleanup, label %if.then29

if.then29:                                        ; preds = %if.end27
  %and.i.i96 = and i64 %7, 2
  %cmp.i.i.not = icmp eq i64 %and.i.i96, 0
  br i1 %cmp.i.i.not, label %if.else, label %cleanup

if.else:                                          ; preds = %if.then29
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface.addr.0, i64 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %copy_to_device = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i64 0, i32 7
  %9 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %copy_to_device, align 8, !tbaa !318
  %call44 = tail call i32 %9(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #14
  %cmp45 = icmp eq i32 %call44, 0
  br i1 %cmp45, label %if.then46, label %cleanup

if.then46:                                        ; preds = %if.else
  %10 = load i64, i64* %flags.i.i97, align 8, !tbaa !307
  %and.i.i = and i64 %10, -2
  store i64 %and.i.i, i64* %flags.i.i97, align 8, !tbaa !307
  br label %cleanup

cleanup:                                          ; preds = %if.then46, %if.else, %if.then29, %if.end27, %if.then18, %if.then14, %if.then7, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %call8, %if.then7 ], [ -42, %if.then14 ], [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.then46 ], [ %call19, %if.then18 ], [ -15, %if.then29 ], [ -15, %if.else ], [ 0, %if.end27 ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.17.91, i64 0, i64 0)) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !306
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !182
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !307
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup12

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface3.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface3.phi.trans.insert, align 8, !tbaa !306
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp4.not = icmp eq %struct.halide_device_interface_t* %4, null
  %cmp5.not = icmp eq %struct.halide_device_interface_t* %4, %device_interface
  %or.cond = or i1 %cmp4.not, %cmp5.not
  br i1 %or.cond, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.20.92, i64 0, i64 0)) #14
  br label %cleanup12

if.end7:                                          ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !319
  tail call void %6() #14
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %device_malloc = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 2
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_malloc, align 8, !tbaa !320
  %call9 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #14
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !321
  tail call void %10() #14
  %tobool.not = icmp eq i32 %call9, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -16
  ret i32 %spec.select

cleanup12:                                        ; preds = %if.then6, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -42, %if.then6 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind
define weak i32 @halide_copy_to_device(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #14
  %call = tail call i32 @copy_to_device_already_locked(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) #15
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #14
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_sync(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.16.93, i64 0, i64 0)) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !306
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !182
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !307
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup8

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !306
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2 = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %if.end
  %call4 = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %cleanup8

if.end5:                                          ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %device_sync = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 4
  %6 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_sync, align 8, !tbaa !322
  %call6 = tail call i32 %6(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #14
  %tobool.not = icmp eq i32 %call6, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -17
  ret i32 %spec.select

cleanup8:                                         ; preds = %if.then3, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ %call4, %if.then3 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.21.96, i64 0, i64 0)) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !306
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !182
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !307
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup12

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !306
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2.not, label %if.end11, label %if.then3

if.then3:                                         ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !319
  tail call void %6() #14
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %device_free = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 3
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_free, align 8, !tbaa !323
  %call5 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #14
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !321
  tail call void %10() #14
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %11 = load i64, i64* %device, align 8, !tbaa !182
  %cmp7 = icmp eq i64 %11, 0
  br i1 %cmp7, label %do.end, label %if.then8

if.then8:                                         ; preds = %if.then3
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([127 x i8], [127 x i8]* @.str.22.97, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %do.end

do.end:                                           ; preds = %if.then8, %if.then3
  %tobool.not = icmp eq i32 %call5, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -18
  ret i32 %spec.select

if.end11:                                         ; preds = %if.end
  %flags3.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %12 = load i64, i64* %flags3.i.i, align 8, !tbaa !307
  %and.i.i = and i64 %12, -3
  store i64 %and.i.i, i64* %flags3.i.i, align 8, !tbaa !307
  br label %cleanup12

cleanup12:                                        ; preds = %if.end11, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end11 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak void @halide_device_free_as_destructor(i8* %user_context, i8* %obj) local_unnamed_addr #0 {
entry:
  %0 = bitcast i8* %obj to %struct.halide_buffer_t*
  %call = tail call i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* %0) #15
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_and_host_malloc(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.23.98, i64 0, i64 0)) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !306
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !182
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !307
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup14

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface3.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface3.phi.trans.insert, align 8, !tbaa !306
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp4.not = icmp eq %struct.halide_device_interface_t* %4, null
  %cmp5.not = icmp eq %struct.halide_device_interface_t* %4, %device_interface
  %or.cond = or i1 %cmp4.not, %cmp5.not
  br i1 %or.cond, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.25.99, i64 0, i64 0)) #14
  br label %cleanup14

if.end7:                                          ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !319
  tail call void %6() #14
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %device_and_host_malloc = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 8
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_and_host_malloc, align 8, !tbaa !324
  %call9 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #14
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !321
  tail call void %10() #14
  %cmp11.not = icmp eq i32 %call9, 0
  br i1 %cmp11.not, label %cleanup14, label %if.then12

if.then12:                                        ; preds = %if.end7
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.26.100, i64 0, i64 0)) #14
  br label %cleanup14

cleanup14:                                        ; preds = %if.then12, %if.end7, %if.then6, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -42, %if.then6 ], [ -16, %if.then12 ], [ 0, %if.end7 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_and_host_free(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.27.101, i64 0, i64 0)) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !306
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !182
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !307
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup18

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !306
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2.not, label %if.else11, label %if.then3

if.then3:                                         ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !319
  tail call void %6() #14
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %device_and_host_free = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 9
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_and_host_free, align 8, !tbaa !325
  %call5 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #14
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !321
  tail call void %10() #14
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %11 = load i64, i64* %device, align 8, !tbaa !182
  %cmp7 = icmp eq i64 %11, 0
  br i1 %cmp7, label %do.end, label %if.then8

if.then8:                                         ; preds = %if.then3
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([127 x i8], [127 x i8]* @.str.28.102, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %do.end

do.end:                                           ; preds = %if.then8, %if.then3
  %tobool.not = icmp eq i32 %call5, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -18
  ret i32 %spec.select

if.else11:                                        ; preds = %if.end
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 2
  %12 = load i8*, i8** %host, align 8, !tbaa !180
  %tobool12.not = icmp eq i8* %12, null
  br i1 %tobool12.not, label %if.end17, label %if.then13

if.then13:                                        ; preds = %if.else11
  tail call void @halide_free(i8* %user_context, i8* nonnull %12) #14
  store i8* null, i8** %host, align 8, !tbaa !180
  br label %if.end17

if.end17:                                         ; preds = %if.then13, %if.else11
  %flags3.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %13 = load i64, i64* %flags3.i.i, align 8, !tbaa !307
  %and.i.i = and i64 %13, -3
  store i64 %and.i.i, i64* %flags3.i.i, align 8, !tbaa !307
  br label %cleanup18

cleanup18:                                        ; preds = %if.end17, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end17 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_and_host_malloc(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.29.103, i64 0, i64 0)) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !306
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !182
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !307
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %if.end, label %cleanup13

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit, %if.end16.i
  %dimensions.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 5
  %4 = load i32, i32* %dimensions.i.i, align 4, !tbaa !183
  %cmp19.i.i = icmp sgt i32 %4, 0
  br i1 %cmp19.i.i, label %for.body.lr.ph.i.i, label %if.end._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge

if.end._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge: ; preds = %if.end
  %sub.i.0 = sub nsw i64 1, 0
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.lr.ph.i.i:                               ; preds = %if.end
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  %5 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8, !tbaa !184
  %wide.trip.count.i.i = zext i32 %4 to i64
  %min.iters.check = icmp ult i32 %4, 3
  br i1 %min.iters.check, label %for.body.i.i.preheader, label %vector.ph

vector.ph:                                        ; preds = %for.body.lr.ph.i.i
  %n.vec = and i64 %wide.trip.count.i.i, 4294967294
  br label %vector.body

vector.body:                                      ; preds = %pred.load.continue6, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %pred.load.continue6 ]
  %vec.phi = phi i64 [ 0, %vector.ph ], [ %predphi, %pred.load.continue6 ]
  %vec.phi4 = phi i64 [ 0, %vector.ph ], [ %predphi7, %pred.load.continue6 ]
  %induction3 = or i64 %index, 1
  %6 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %index, i32 2
  %7 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %induction3, i32 2
  %8 = load i32, i32* %6, align 4, !tbaa !185
  %9 = load i32, i32* %7, align 4, !tbaa !185
  %10 = icmp sgt i32 %8, 0
  %11 = icmp sgt i32 %9, 0
  %12 = zext i32 %8 to i64
  %13 = zext i32 %9 to i64
  br i1 %10, label %pred.load.if, label %pred.load.continue

pred.load.if:                                     ; preds = %vector.body
  %14 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %index, i32 1
  %15 = load i32, i32* %14, align 4, !tbaa !189
  br label %pred.load.continue

pred.load.continue:                               ; preds = %pred.load.if, %vector.body
  %16 = phi i32 [ poison, %vector.body ], [ %15, %pred.load.if ]
  br i1 %11, label %pred.load.if5, label %pred.load.continue6

pred.load.if5:                                    ; preds = %pred.load.continue
  %17 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %induction3, i32 1
  %18 = load i32, i32* %17, align 4, !tbaa !189
  br label %pred.load.continue6

pred.load.continue6:                              ; preds = %pred.load.if5, %pred.load.continue
  %19 = phi i32 [ poison, %pred.load.continue ], [ %18, %pred.load.if5 ]
  %20 = add nsw i32 %16, -1
  %21 = add nsw i32 %19, -1
  %22 = sext i32 %20 to i64
  %23 = sext i32 %21 to i64
  %24 = mul nsw i64 %22, %12
  %25 = mul nsw i64 %23, %13
  %26 = select i1 %10, i64 %24, i64 0
  %predphi = add i64 %vec.phi, %26
  %27 = select i1 %11, i64 %25, i64 0
  %predphi7 = add i64 %vec.phi4, %27
  %index.next = add i64 %index, 2
  %28 = icmp eq i64 %index.next, %n.vec
  br i1 %28, label %middle.block, label %vector.body, !llvm.loop !326

middle.block:                                     ; preds = %pred.load.continue6
  %bin.rdx = add i64 %predphi7, %predphi
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count.i.i
  br i1 %cmp.n, label %for.body.i13.i.preheader, label %for.body.i.i.preheader

for.body.i.i.preheader:                           ; preds = %for.body.lr.ph.i.i, %middle.block
  %indvars.iv.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %n.vec, %middle.block ]
  %index.021.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %bin.rdx, %middle.block ]
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.body.i.i.preheader, %if.end.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %if.end.i.i ], [ %indvars.iv.i.i.ph, %for.body.i.i.preheader ]
  %index.021.i.i = phi i64 [ %index.1.i.i, %if.end.i.i ], [ %index.021.i.i.ph, %for.body.i.i.preheader ]
  %stride2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %indvars.iv.i.i, i32 2
  %29 = load i32, i32* %stride2.i.i, align 4, !tbaa !185
  %cmp3.i.i = icmp sgt i32 %29, 0
  br i1 %cmp3.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %conv18.i.i = zext i32 %29 to i64
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %indvars.iv.i.i, i32 1
  %30 = load i32, i32* %extent.i.i, align 4, !tbaa !189
  %sub.i.i = add nsw i32 %30, -1
  %conv7.i.i = sext i32 %sub.i.i to i64
  %mul.i.i = mul nsw i64 %conv7.i.i, %conv18.i.i
  %add.i.i = add nsw i64 %mul.i.i, %index.021.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i64 [ %add.i.i, %if.then.i.i ], [ %index.021.i.i, %for.body.i.i ]
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %exitcond.not.i.i = icmp eq i64 %indvars.iv.next.i.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i.i, label %for.body.i13.i.preheader, label %for.body.i.i, !llvm.loop !327

for.body.i13.i.preheader:                         ; preds = %if.end.i.i, %middle.block
  %index.1.i.i.lcssa = phi i64 [ %bin.rdx, %middle.block ], [ %index.1.i.i, %if.end.i.i ]
  %min.iters.check11 = icmp ult i32 %4, 3
  br i1 %min.iters.check11, label %for.body.i13.i.preheader31, label %vector.ph12

vector.ph12:                                      ; preds = %for.body.i13.i.preheader
  %n.vec14 = and i64 %wide.trip.count.i.i, 4294967294
  br label %vector.body10

vector.body10:                                    ; preds = %pred.load.continue26, %vector.ph12
  %index15 = phi i64 [ 0, %vector.ph12 ], [ %index.next16, %pred.load.continue26 ]
  %vec.phi21 = phi i64 [ 0, %vector.ph12 ], [ %predphi27, %pred.load.continue26 ]
  %vec.phi22 = phi i64 [ 0, %vector.ph12 ], [ %predphi28, %pred.load.continue26 ]
  %induction20 = or i64 %index15, 1
  %31 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %index15, i32 2
  %32 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %induction20, i32 2
  %33 = load i32, i32* %31, align 4, !tbaa !185
  %34 = load i32, i32* %32, align 4, !tbaa !185
  %35 = icmp slt i32 %33, 0
  %36 = icmp slt i32 %34, 0
  %37 = sext i32 %33 to i64
  %38 = sext i32 %34 to i64
  br i1 %35, label %pred.load.if23, label %pred.load.continue24

pred.load.if23:                                   ; preds = %vector.body10
  %39 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %index15, i32 1
  %40 = load i32, i32* %39, align 4, !tbaa !189
  br label %pred.load.continue24

pred.load.continue24:                             ; preds = %pred.load.if23, %vector.body10
  %41 = phi i32 [ poison, %vector.body10 ], [ %40, %pred.load.if23 ]
  br i1 %36, label %pred.load.if25, label %pred.load.continue26

pred.load.if25:                                   ; preds = %pred.load.continue24
  %42 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %induction20, i32 1
  %43 = load i32, i32* %42, align 4, !tbaa !189
  br label %pred.load.continue26

pred.load.continue26:                             ; preds = %pred.load.if25, %pred.load.continue24
  %44 = phi i32 [ poison, %pred.load.continue24 ], [ %43, %pred.load.if25 ]
  %45 = add nsw i32 %41, -1
  %46 = add nsw i32 %44, -1
  %47 = sext i32 %45 to i64
  %48 = sext i32 %46 to i64
  %49 = mul nsw i64 %47, %37
  %50 = mul nsw i64 %48, %38
  %51 = select i1 %35, i64 %49, i64 0
  %predphi27 = add i64 %vec.phi21, %51
  %52 = select i1 %36, i64 %50, i64 0
  %predphi28 = add i64 %vec.phi22, %52
  %index.next16 = add i64 %index15, 2
  %53 = icmp eq i64 %index.next16, %n.vec14
  br i1 %53, label %middle.block8, label %vector.body10, !llvm.loop !328

middle.block8:                                    ; preds = %pred.load.continue26
  %bin.rdx29 = add i64 %predphi28, %predphi27
  %cmp.n18 = icmp eq i64 %n.vec14, %wide.trip.count.i.i
  br i1 %cmp.n18, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i.preheader31

for.body.i13.i.preheader31:                       ; preds = %for.body.i13.i.preheader, %middle.block8
  %indvars.iv.i10.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %n.vec14, %middle.block8 ]
  %index.018.i.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %bin.rdx29, %middle.block8 ]
  br label %for.body.i13.i

for.body.i13.i:                                   ; preds = %for.body.i13.i.preheader31, %if.end.i24.i
  %indvars.iv.i10.i = phi i64 [ %indvars.iv.next.i22.i, %if.end.i24.i ], [ %indvars.iv.i10.i.ph, %for.body.i13.i.preheader31 ]
  %index.018.i.i = phi i64 [ %index.1.i21.i, %if.end.i24.i ], [ %index.018.i.i.ph, %for.body.i13.i.preheader31 ]
  %stride2.i11.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %indvars.iv.i10.i, i32 2
  %54 = load i32, i32* %stride2.i11.i, align 4, !tbaa !185
  %cmp3.i12.i = icmp slt i32 %54, 0
  br i1 %cmp3.i12.i, label %if.then.i20.i, label %if.end.i24.i

if.then.i20.i:                                    ; preds = %for.body.i13.i
  %conv.i14.i = sext i32 %54 to i64
  %extent.i15.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %indvars.iv.i10.i, i32 1
  %55 = load i32, i32* %extent.i15.i, align 4, !tbaa !189
  %sub.i16.i = add nsw i32 %55, -1
  %conv7.i17.i = sext i32 %sub.i16.i to i64
  %mul.i18.i = mul nsw i64 %conv7.i17.i, %conv.i14.i
  %add.i19.i = add nsw i64 %mul.i18.i, %index.018.i.i
  br label %if.end.i24.i

if.end.i24.i:                                     ; preds = %if.then.i20.i, %for.body.i13.i
  %index.1.i21.i = phi i64 [ %add.i19.i, %if.then.i20.i ], [ %index.018.i.i, %for.body.i13.i ]
  %indvars.iv.next.i22.i = add nuw nsw i64 %indvars.iv.i10.i, 1
  %exitcond.not.i23.i = icmp eq i64 %indvars.iv.next.i22.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i23.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i, !llvm.loop !329

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %if.end.i24.i, %middle.block8
  %index.1.i21.i.lcssa = phi i64 [ %bin.rdx29, %middle.block8 ], [ %index.1.i21.i, %if.end.i24.i ]
  %add8.i.i = add nsw i64 %index.1.i.i.lcssa, 1
  %sub.i.1 = sub nsw i64 %add8.i.i, %index.1.i21.i.lcssa
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %if.end._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit
  %add8.i27.i = phi i64 [ 1, %if.end._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge ], [ %add8.i.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %sub.i.phi = phi i64 [ %sub.i.0, %if.end._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge ], [ %sub.i.1, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %bits.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 4, i32 1
  %56 = load i8, i8* %bits.i.i, align 1, !tbaa !144
  %conv.i.i = zext i8 %56 to i64
  %add.i4.i = add nuw nsw i64 %conv.i.i, 7
  %div.i.i = lshr i64 %add.i4.i, 3
  %mul.i = mul i64 %div.i.i, %sub.i.phi
  %call2 = tail call i8* @halide_malloc(i8* %user_context, i64 %mul.i) #14
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 2
  store i8* %call2, i8** %host, align 8, !tbaa !180
  %cmp4 = icmp eq i8* %call2, null
  br i1 %cmp4, label %cleanup13, label %if.end6

if.end6:                                          ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  %call7 = tail call i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* nonnull %buf, %struct.halide_device_interface_t* %device_interface) #15
  %cmp8.not = icmp eq i32 %call7, 0
  br i1 %cmp8.not, label %cleanup13, label %if.then9

if.then9:                                         ; preds = %if.end6
  %57 = load i8*, i8** %host, align 8, !tbaa !180
  tail call void @halide_free(i8* %user_context, i8* %57) #14
  store i8* null, i8** %host, align 8, !tbaa !180
  br label %cleanup13

cleanup13:                                        ; preds = %if.then9, %if.end6, %_ZNK15halide_buffer_t13size_in_bytesEv.exit, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -1, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ], [ %call7, %if.then9 ], [ 0, %if.end6 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_and_host_free(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.30.104, i64 0, i64 0)) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !306
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !182
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !307
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end16.i.split

if.end16.i.split:                                 ; preds = %if.end16.i
  %call11 = tail call i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #15
  br label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %call12 = tail call i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* %buf) #15
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, %if.end16.i.split
  %phi.call = phi i32 [ %call11, %if.end16.i.split ], [ %call12, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split ]
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 2
  %4 = load i8*, i8** %host, align 8, !tbaa !180
  %tobool.not = icmp eq i8* %4, null
  br i1 %tobool.not, label %if.end5, label %if.then2

if.then2:                                         ; preds = %if.end
  tail call void @halide_free(i8* %user_context, i8* nonnull %4) #14
  store i8* null, i8** %host, align 8, !tbaa !180
  br label %if.end5

if.end5:                                          ; preds = %if.then2, %if.end
  %flags3.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %5 = load i64, i64* %flags3.i.i, align 8, !tbaa !307
  %and.i.i18 = and i64 %5, -4
  store i64 %and.i.i18, i64* %flags3.i.i, align 8, !tbaa !307
  br label %cleanup

cleanup:                                          ; preds = %if.end5, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %phi.call, %if.end5 ], [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_wrap_native(i8* %user_context, %struct.halide_buffer_t* %buf, i64 %handle, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.31.105, i64 0, i64 0)) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !306
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !182
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !307
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup12

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !306
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  %cmp3.not = icmp eq %struct.halide_device_interface_t* %4, %device_interface
  %or.cond = or i1 %cmp2.not, %cmp3.not
  br i1 %or.cond, label %if.end5, label %if.then4

if.then4:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.32.106, i64 0, i64 0)) #14
  br label %cleanup12

if.end5:                                          ; preds = %if.end
  %device_interface1 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !319
  tail call void %6() #14
  store %struct.halide_device_interface_t* %device_interface, %struct.halide_device_interface_t** %device_interface1, align 8, !tbaa !306
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %wrap_native = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 14
  %8 = load i32 (i8*, %struct.halide_buffer_t*, i64)*, i32 (i8*, %struct.halide_buffer_t*, i64)** %wrap_native, align 8, !tbaa !330
  %call8 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf, i64 %handle) #14
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !321
  tail call void %10() #14
  %tobool.not = icmp eq i32 %call8, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -16
  ret i32 %spec.select

cleanup12:                                        ; preds = %if.then4, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -42, %if.then4 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_detach_native(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.33.107, i64 0, i64 0)) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !306
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !182
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !307
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !306
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2.not, label %cleanup, label %if.then3

if.then3:                                         ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !319
  tail call void %6() #14
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %detach_native = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 15
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %detach_native, align 8, !tbaa !331
  %call5 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #14
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !321
  tail call void %10() #14
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %11 = load i64, i64* %device, align 8, !tbaa !182
  %cmp7 = icmp eq i64 %11, 0
  br i1 %cmp7, label %do.end, label %if.then8

if.then8:                                         ; preds = %if.then3
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([127 x i8], [127 x i8]* @.str.34.108, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %do.end

do.end:                                           ; preds = %if.then8, %if.then3
  %tobool.not = icmp eq i32 %call5, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -33
  ret i32 %spec.select

cleanup:                                          ; preds = %if.end, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_wrap_native(i8* %user_context, %struct.halide_buffer_t* %buf, i64 %handle) local_unnamed_addr #0 {
entry:
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !182
  %cmp.not = icmp eq i64 %0, 0
  br i1 %cmp.not, label %if.end, label %return

if.end:                                           ; preds = %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %1 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !306
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %1, i64 0, i32 15
  %2 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %2, i64 0, i32 0
  %3 = load void ()*, void ()** %use_module, align 8, !tbaa !319
  tail call void %3() #14
  store i64 %handle, i64* %device, align 8, !tbaa !182
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i32 [ 0, %if.end ], [ -32, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_detach_native(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.35, i64 0, i64 0)) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !306
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !182
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !307
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %.pre = load i64, i64* %device.phi.trans.insert, align 8, !tbaa !182
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi i64 [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %1, %if.end16.i ]
  %cmp1 = icmp eq i64 %4, 0
  br i1 %cmp1, label %cleanup, label %if.end3

if.end3:                                          ; preds = %if.end
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %5 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !306
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %5, i64 0, i32 15
  %6 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %6, i64 0, i32 1
  %7 = load void ()*, void ()** %release_module, align 8, !tbaa !321
  tail call void %7() #14
  store i64 0, i64* %device, align 8, !tbaa !182
  store %struct.halide_device_interface_t* null, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !306
  br label %cleanup

cleanup:                                          ; preds = %if.end3, %if.end, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ 0, %if.end3 ], [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak void @halide_device_and_host_free_as_destructor(i8* %user_context, i8* %obj) local_unnamed_addr #0 {
entry:
  %0 = bitcast i8* %obj to %struct.halide_buffer_t*
  %call = tail call i32 @halide_device_and_host_free(i8* %user_context, %struct.halide_buffer_t* %0) #15
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_device_host_nop_free(i8* %user_context, i8* %obj) local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_default_buffer_copy(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) local_unnamed_addr #2 {
entry:
  ret i32 -39
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_buffer_copy_already_locked(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) local_unnamed_addr #0 {
entry:
  %c = alloca %"struct.Halide::Runtime::Internal::device_copy", align 8
  %tobool.not = icmp eq %struct.halide_device_interface_t* %dst_device_interface, null
  br i1 %tobool.not, label %if.end13, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !306
  %tobool1.not = icmp eq %struct.halide_device_interface_t* %0, null
  %cmp.not = icmp eq %struct.halide_device_interface_t* %0, %dst_device_interface
  %or.cond = or i1 %tobool1.not, %cmp.not
  br i1 %or.cond, label %land.lhs.true5, label %if.then

if.then:                                          ; preds = %land.lhs.true
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.41, i64 0, i64 0)) #14
  br label %cleanup143

land.lhs.true5:                                   ; preds = %land.lhs.true
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 0
  %1 = load i64, i64* %device, align 8, !tbaa !182
  %tobool6.not = icmp eq i64 %1, 0
  br i1 %tobool6.not, label %if.then7, label %if.end13

if.then7:                                         ; preds = %land.lhs.true5
  %call = tail call i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* nonnull %dst, %struct.halide_device_interface_t* nonnull %dst_device_interface) #15
  %tobool10.not = icmp eq i32 %call, 0
  br i1 %tobool10.not, label %if.end13, label %cleanup143

if.end13:                                         ; preds = %if.then7, %land.lhs.true5, %entry
  %device14 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 0
  %2 = load i64, i64* %device14, align 8, !tbaa !182
  %cmp15.not = icmp eq i64 %2, 0
  %host22.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 2
  %.pre = load i8*, i8** %host22.phi.trans.insert, align 8, !tbaa !180
  %cmp23.not = icmp eq i8* %.pre, null
  br i1 %cmp15.not, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %if.end13
  br i1 %cmp23.not, label %land.end32, label %land.end.thread264

land.end.thread264:                               ; preds = %land.rhs
  %flags.i.i243 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 3
  %3 = load i64, i64* %flags.i.i243, align 8, !tbaa !307
  %and.i.i244 = and i64 %3, 1
  %cmp.i.i.not = icmp ne i64 %and.i.i244, 0
  br label %land.rhs26

land.end:                                         ; preds = %if.end13
  br i1 %cmp23.not, label %land.end32, label %land.end.land.rhs26_crit_edge

land.end.land.rhs26_crit_edge:                    ; preds = %land.end
  %flags.i.i247.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 3
  %.pre1 = load i64, i64* %flags.i.i247.phi.trans.insert, align 8, !tbaa !307
  br label %land.rhs26

land.rhs26:                                       ; preds = %land.end.land.rhs26_crit_edge, %land.end.thread264
  %4 = phi i64 [ %3, %land.end.thread264 ], [ %.pre1, %land.end.land.rhs26_crit_edge ]
  %5 = phi i1 [ %cmp.i.i.not, %land.end.thread264 ], [ true, %land.end.land.rhs26_crit_edge ]
  %and.i.i248 = and i64 %4, 2
  %cmp.i.i249.not = icmp eq i64 %and.i.i248, 0
  br i1 %cmp.i.i249.not, label %land.end32, label %lor.rhs28

lor.rhs28:                                        ; preds = %land.rhs26
  %device_interface29 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %6 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface29, align 8, !tbaa !306
  %cmp30 = icmp ne %struct.halide_device_interface_t* %6, null
  br label %land.end32

land.end32:                                       ; preds = %lor.rhs28, %land.rhs26, %land.end, %land.rhs
  %cmp23.not263 = phi i1 [ true, %land.end ], [ false, %land.rhs26 ], [ false, %lor.rhs28 ], [ true, %land.rhs ]
  %7 = phi i1 [ true, %land.end ], [ %5, %land.rhs26 ], [ %5, %lor.rhs28 ], [ false, %land.rhs ]
  %8 = phi i1 [ true, %land.end ], [ false, %land.rhs26 ], [ %cmp30, %lor.rhs28 ], [ true, %land.rhs ]
  %host34 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 2
  %9 = load i8*, i8** %host34, align 8, !tbaa !180
  %cmp35.not = icmp eq i8* %9, null
  %cmp20.not = xor i1 %tobool.not, true
  %10 = and i1 %tobool.not, %cmp35.not
  br i1 %10, label %cleanup143, label %if.end41

if.end41:                                         ; preds = %land.end32
  %brmerge229 = or i1 %tobool.not, %7
  br i1 %brmerge229, label %if.then51, label %if.end49

if.end49:                                         ; preds = %if.end41
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i64 0, i32 15
  %11 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %buffer_copy = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %11, i64 0, i32 10
  %12 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy, align 8, !tbaa !332
  %call48 = tail call i32 %12(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* nonnull %dst_device_interface, %struct.halide_buffer_t* nonnull %dst) #14
  %cmp50 = icmp eq i32 %call48, -42
  br i1 %cmp50, label %if.then51, label %if.end117

if.then51:                                        ; preds = %if.end49, %if.end41
  %brmerge231.demorgan = and i1 %cmp23.not263, %cmp35.not
  br i1 %brmerge231.demorgan, label %cleanup143, label %if.end58

if.end58:                                         ; preds = %if.then51
  %brmerge234 = or i1 %8, %cmp20.not
  br i1 %brmerge234, label %if.else, label %if.end117.thread258

if.end117.thread258:                              ; preds = %if.end58
  %13 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %c to i8*
  call void @llvm.lifetime.start.p0i8(i64 416, i8* nonnull %13) #11
  call void @_ZN6Halide7Runtime8Internal16make_buffer_copyEPK15halide_buffer_tbS4_b(%"struct.Halide::Runtime::Internal::device_copy"* nonnull sret(%"struct.Halide::Runtime::Internal::device_copy") align 8 %c, %struct.halide_buffer_t* nonnull %src, i1 zeroext true, %struct.halide_buffer_t* nonnull %dst, i1 zeroext true) #15
  call void @_ZN6Halide7Runtime8Internal11copy_memoryERKNS1_11device_copyEPv(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %c, i8* %user_context) #15
  call void @llvm.lifetime.end.p0i8(i64 416, i8* nonnull %13) #11
  br label %land.lhs.true126

if.else:                                          ; preds = %if.end58
  %brmerge237 = or i1 %7, %cmp20.not
  br i1 %brmerge237, label %if.else81, label %if.then66

if.then66:                                        ; preds = %if.else
  %device_interface69 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %14 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface69, align 8, !tbaa !306
  %impl70 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %14, i64 0, i32 15
  %15 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl70, align 8, !tbaa !313
  %buffer_copy71 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %15, i64 0, i32 10
  %16 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy71, align 8, !tbaa !332
  %call72 = tail call i32 %16(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* null, %struct.halide_buffer_t* nonnull %dst) #14
  %cmp73 = icmp eq i32 %call72, -42
  br i1 %cmp73, label %if.then74, label %if.end117

if.then74:                                        ; preds = %if.then66
  %call75 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* nonnull %src) #15
  %tobool76.not = icmp eq i32 %call75, 0
  br i1 %tobool76.not, label %if.then77, label %cleanup143

if.then77:                                        ; preds = %if.then74
  %call78 = tail call i32 @halide_buffer_copy_already_locked(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* null, %struct.halide_buffer_t* nonnull %dst) #15
  br label %if.end117

if.else81:                                        ; preds = %if.else
  %brmerge239 = or i1 %7, %cmp35.not
  br i1 %brmerge239, label %if.else98, label %if.then85

if.then85:                                        ; preds = %if.else81
  %device_interface90 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %17 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface90, align 8, !tbaa !306
  %impl91 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %17, i64 0, i32 15
  %18 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl91, align 8, !tbaa !313
  %buffer_copy92 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %18, i64 0, i32 10
  %19 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy92, align 8, !tbaa !332
  %call93 = tail call i32 %19(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* null, %struct.halide_buffer_t* nonnull %dst) #14
  %cmp94 = icmp eq i32 %call93, 0
  br i1 %cmp94, label %if.then95, label %cleanup143

if.then95:                                        ; preds = %if.then85
  %flags.i.i245 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 3
  %20 = load i64, i64* %flags.i.i245, align 8, !tbaa !307
  %or.i.i246 = or i64 %20, 1
  store i64 %or.i.i246, i64* %flags.i.i245, align 8, !tbaa !307
  %call96 = tail call i32 @copy_to_device_already_locked(i8* %user_context, %struct.halide_buffer_t* nonnull %dst, %struct.halide_device_interface_t* %dst_device_interface) #15
  br label %if.end117

if.else98:                                        ; preds = %if.else81
  br i1 %tobool.not, label %cleanup143, label %if.then100

if.then100:                                       ; preds = %if.else98
  %call103 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* nonnull %src) #15
  %cmp104 = icmp eq i32 %call103, 0
  br i1 %cmp104, label %if.then105, label %cleanup143

if.then105:                                       ; preds = %if.then100
  %impl106 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i64 0, i32 15
  %21 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl106, align 8, !tbaa !313
  %buffer_copy107 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %21, i64 0, i32 10
  %22 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy107, align 8, !tbaa !332
  %call108 = tail call i32 %22(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* nonnull %dst_device_interface, %struct.halide_buffer_t* nonnull %dst) #14
  br label %if.end117

if.end117:                                        ; preds = %if.then105, %if.then95, %if.then77, %if.then66, %if.end49
  %err.1 = phi i32 [ %call78, %if.then77 ], [ %call72, %if.then66 ], [ %call96, %if.then95 ], [ %call108, %if.then105 ], [ %call48, %if.end49 ]
  %cond = icmp eq i32 %err.1, 0
  br i1 %cond, label %land.lhs.true126, label %cleanup143

land.lhs.true126:                                 ; preds = %if.end117, %if.end117.thread258
  %cmp127.not.old = icmp eq %struct.halide_buffer_t* %dst, %src
  br i1 %cmp127.not.old, label %cleanup143, label %if.then128

if.then128:                                       ; preds = %land.lhs.true126
  %flags.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 3
  %23 = load i64, i64* %flags.i.i, align 8, !tbaa !307
  %or.i.i = and i64 %23, -4
  br i1 %tobool.not, label %if.else133, label %if.then130

if.then130:                                       ; preds = %if.then128
  %or.i.i242 = or i64 %or.i.i, 2
  store i64 %or.i.i242, i64* %flags.i.i, align 8, !tbaa !307
  br label %cleanup143

if.else133:                                       ; preds = %if.then128
  %and.i.i251 = or i64 %or.i.i, 1
  store i64 %and.i.i251, i64* %flags.i.i, align 8, !tbaa !307
  br label %cleanup143

cleanup143:                                       ; preds = %if.else133, %if.then130, %land.lhs.true126, %if.end117, %if.then100, %if.else98, %if.then85, %if.then74, %if.then51, %land.end32, %if.then7, %if.then
  %retval.1 = phi i32 [ -42, %if.then ], [ %call, %if.then7 ], [ -34, %land.end32 ], [ 0, %if.then130 ], [ 0, %if.else133 ], [ 0, %land.lhs.true126 ], [ -42, %if.then51 ], [ %err.1, %if.end117 ], [ -42, %if.else98 ], [ %call103, %if.then100 ], [ %call93, %if.then85 ], [ %call75, %if.then74 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind
define weak i32 @halide_buffer_copy(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #14
  %tobool.not = icmp eq %struct.halide_device_interface_t* %dst_device_interface, null
  br i1 %tobool.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i64 0, i32 15
  %0 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %0, i64 0, i32 0
  %1 = load void ()*, void ()** %use_module, align 8, !tbaa !319
  tail call void %1() #14
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %2 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !306
  %tobool11.not = icmp eq %struct.halide_device_interface_t* %2, null
  br i1 %tobool11.not, label %if.end16, label %if.then12

if.then12:                                        ; preds = %if.end
  %impl14 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %2, i64 0, i32 15
  %3 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl14, align 8, !tbaa !313
  %use_module15 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %3, i64 0, i32 0
  %4 = load void ()*, void ()** %use_module15, align 8, !tbaa !319
  tail call void %4() #14
  br label %if.end16

if.end16:                                         ; preds = %if.then12, %if.end
  %call = tail call i32 @halide_buffer_copy_already_locked(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) #15
  br i1 %tobool.not, label %if.end20, label %if.then18

if.then18:                                        ; preds = %if.end16
  %impl19 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl19, align 8, !tbaa !313
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 1
  %6 = load void ()*, void ()** %release_module, align 8, !tbaa !321
  tail call void %6() #14
  br label %if.end20

if.end20:                                         ; preds = %if.then18, %if.end16
  %7 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !306
  %tobool22.not = icmp eq %struct.halide_device_interface_t* %7, null
  br i1 %tobool22.not, label %if.end27, label %if.then23

if.then23:                                        ; preds = %if.end20
  %impl25 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %7, i64 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl25, align 8, !tbaa !313
  %release_module26 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i64 0, i32 1
  %9 = load void ()*, void ()** %release_module26, align 8, !tbaa !321
  tail call void %9() #14
  br label %if.end27

if.end27:                                         ; preds = %if.then23, %if.end20
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #14
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_crop(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_buffer_t* %dst) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.58, i64 0, i64 0)) #14
  ret i32 -40
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_slice(i8* %user_context, %struct.halide_buffer_t* %src, i32 %slice_dim, i32 %slice_pos, %struct.halide_buffer_t* %dst) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.59, i64 0, i64 0)) #14
  ret i32 -40
}

; Function Attrs: nounwind
define weak i32 @halide_device_crop(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_buffer_t* %dst) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #14
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !182
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %device1 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 0
  %1 = load i64, i64* %device1, align 8, !tbaa !182
  %tobool2.not = icmp eq i64 %1, 0
  br i1 %tobool2.not, label %if.end4, label %if.then3

if.then3:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.60, i64 0, i64 0)) #14
  br label %cleanup

if.end4:                                          ; preds = %if.end
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 5
  %2 = load i32, i32* %dimensions, align 4, !tbaa !183
  %dimensions5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 5
  %3 = load i32, i32* %dimensions5, align 4, !tbaa !183
  %cmp.not = icmp eq i32 %2, %3
  br i1 %cmp.not, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end4
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.61, i64 0, i64 0)) #14
  br label %cleanup

if.end7:                                          ; preds = %if.end4
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %4 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !306
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !319
  tail call void %6() #14
  %7 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !306
  %impl9 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %7, i64 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl9, align 8, !tbaa !313
  %device_crop = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i64 0, i32 11
  %9 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)** %device_crop, align 8, !tbaa !333
  %call = tail call i32 %9(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_buffer_t* nonnull %dst) #14
  br label %cleanup

cleanup:                                          ; preds = %if.end7, %if.then6, %if.then3, %entry
  %retval.0 = phi i32 [ -41, %if.then3 ], [ -41, %if.then6 ], [ %call, %if.end7 ], [ 0, %entry ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #14
  ret i32 %retval.0
}

; Function Attrs: nounwind
define weak i32 @halide_device_slice(i8* %user_context, %struct.halide_buffer_t* %src, i32 %slice_dim, i32 %slice_pos, %struct.halide_buffer_t* %dst) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #14
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !182
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %device1 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 0
  %1 = load i64, i64* %device1, align 8, !tbaa !182
  %tobool2.not = icmp eq i64 %1, 0
  br i1 %tobool2.not, label %if.end4, label %if.then3

if.then3:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.60, i64 0, i64 0)) #14
  br label %cleanup

if.end4:                                          ; preds = %if.end
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 5
  %2 = load i32, i32* %dimensions, align 4, !tbaa !183
  %dimensions5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 5
  %3 = load i32, i32* %dimensions5, align 4, !tbaa !183
  %add = add nsw i32 %3, 1
  %cmp.not = icmp eq i32 %2, %add
  br i1 %cmp.not, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end4
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.64, i64 0, i64 0)) #14
  br label %cleanup

if.end7:                                          ; preds = %if.end4
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %4 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !306
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !319
  tail call void %6() #14
  %7 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !306
  %impl9 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %7, i64 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl9, align 8, !tbaa !313
  %device_slice = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i64 0, i32 12
  %9 = load i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)** %device_slice, align 8, !tbaa !334
  %call = tail call i32 %9(i8* %user_context, %struct.halide_buffer_t* nonnull %src, i32 %slice_dim, i32 %slice_pos, %struct.halide_buffer_t* nonnull %dst) #14
  br label %cleanup

cleanup:                                          ; preds = %if.end7, %if.then6, %if.then3, %entry
  %retval.0 = phi i32 [ -41, %if.then3 ], [ -41, %if.then6 ], [ %call, %if.end7 ], [ 0, %entry ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #14
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_release_crop(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !182
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %return, label %if.end

if.end:                                           ; preds = %entry
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.58, i64 0, i64 0)) #14
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i32 [ -40, %if.end ], [ 0, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind
define weak i32 @halide_device_release_crop(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #4 {
entry:
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !182
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %return, label %if.then

if.then:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #14
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %1 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !306
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %1, i64 0, i32 15
  %2 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %device_release_crop = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %2, i64 0, i32 13
  %3 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_release_crop, align 8, !tbaa !335
  %call = tail call i32 %3(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #14
  store i64 0, i64* %device, align 8, !tbaa !182
  %4 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %4, i64 0, i32 1
  %5 = load void ()*, void ()** %release_module, align 8, !tbaa !321
  tail call void %5() #14
  store %struct.halide_device_interface_t* null, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !306
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #14
  br label %return

return:                                           ; preds = %if.then, %entry
  %retval.0 = phi i32 [ %call, %if.then ], [ 0, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind willreturn mustprogress
define weak float @halide_float16_bits_to_float(i16 zeroext %bits) local_unnamed_addr #2 {
entry:
  %conv = zext i16 %bits to i32
  %and2 = and i32 %conv, 1023
  %and4 = lshr i32 %conv, 10
  %0 = and i32 %and4, 31
  %cmp = icmp eq i32 %0, 0
  %cmp5 = icmp ne i32 %and2, 0
  %or.cond = and i1 %cmp5, %cmp
  br i1 %or.cond, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = tail call i32 @llvm.ctlz.i32(i32 %and2, i1 true), !range !336
  %sub6 = xor i32 %1, 31
  %shl7 = shl nuw i32 1, %sub6
  %neg = xor i32 %shl7, -1
  %and8 = and i32 %and2, %neg
  %sub9 = sub nsw i32 23, %sub6
  %shl10 = shl i32 %and8, %sub9
  %add11.neg = mul nsw i32 %1, -8388608
  %shl12 = add i32 %add11.neg, 1124073472
  br label %if.end28

if.else:                                          ; preds = %entry
  %shl14 = shl nuw nsw i32 %and2, 13
  br i1 %cmp, label %if.end28, label %if.else18

if.else18:                                        ; preds = %if.else
  %cmp19 = icmp eq i32 %0, 31
  br i1 %cmp19, label %if.end28, label %if.else21

if.else21:                                        ; preds = %if.else18
  %add22 = shl nuw nsw i32 %0, 23
  %phi.bo = add nuw nsw i32 %add22, 939524096
  br label %if.end28

if.end28:                                         ; preds = %if.else21, %if.else18, %if.else, %if.then
  %shl14.sink = phi i32 [ %shl12, %if.then ], [ %shl14, %if.else18 ], [ %shl14, %if.else ], [ %shl14, %if.else21 ]
  %reEncodedExponent15.0.sink = phi i32 [ %shl10, %if.then ], [ 2139095040, %if.else18 ], [ 0, %if.else ], [ %phi.bo, %if.else21 ]
  %bits.signext = sext i16 %bits to i32
  %shl = and i32 %bits.signext, -2147483648
  %or25 = or i32 %shl14.sink, %shl
  %or26 = or i32 %or25, %reEncodedExponent15.0.sink
  %result.sroa.0.0 = bitcast i32 %or26 to float
  ret float %result.sroa.0.0
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #7

; Function Attrs: nounwind willreturn mustprogress
define weak double @halide_float16_bits_to_double(i16 zeroext %bits) local_unnamed_addr #2 {
entry:
  %call = tail call float @halide_float16_bits_to_float(i16 zeroext %bits) #15
  %conv = fpext float %call to double
  ret double %conv
}

; Function Attrs: nounwind
define weak i32 @halide_error_bounds_inference_call_failed(i8* %user_context, i8* %extern_stage_name, i32 %result) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i71 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.111, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i72 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.111, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i71, %entry.split ], [ %call.i72, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i10 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %extern_stage_name) #14
  %call.i13 = tail call i8* @halide_string_to_string(i8* %call.i10, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1.112, i64 0, i64 0)) #14
  %conv.i = sext i32 %result to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %call.i13, i8* %ref.tmp.sroa.16.0, i64 %conv.i, i32 1) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i16 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 %result
}

; Function Attrs: nounwind
define weak i32 @halide_error_extern_stage_failed(i8* %user_context, i8* %extern_stage_name, i32 %result) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i71 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2.113, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i72 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2.113, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i71, %entry.split ], [ %call.i72, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i10 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %extern_stage_name) #14
  %call.i13 = tail call i8* @halide_string_to_string(i8* %call.i10, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1.112, i64 0, i64 0)) #14
  %conv.i = sext i32 %result to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %call.i13, i8* %ref.tmp.sroa.16.0, i64 %conv.i, i32 1) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i16 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 %result
}

; Function Attrs: nounwind
define weak i32 @halide_error_explicit_bounds_too_small(i8* %user_context, i8* %func_name, i8* %var_name, i32 %min_bound, i32 %max_bound, i32 %min_required, i32 %max_required) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i151 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3.114, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i152 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3.114, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i151, %entry.split ], [ %call.i152, %if.then6.i ]
  %ref.tmp.sroa.34.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i18 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.34.0, i8* %var_name) #14
  %call.i21 = tail call i8* @halide_string_to_string(i8* %call.i18, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4.115, i64 0, i64 0)) #14
  %call.i24 = tail call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.34.0, i8* %func_name) #14
  %call.i27 = tail call i8* @halide_string_to_string(i8* %call.i24, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5.116, i64 0, i64 0)) #14
  %conv.i = sext i32 %min_bound to i64
  %call.i30 = tail call i8* @halide_int64_to_string(i8* %call.i27, i8* %ref.tmp.sroa.34.0, i64 %conv.i, i32 1) #14
  %call.i33 = tail call i8* @halide_string_to_string(i8* %call.i30, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.117, i64 0, i64 0)) #14
  %conv.i36 = sext i32 %max_bound to i64
  %call.i37 = tail call i8* @halide_int64_to_string(i8* %call.i33, i8* %ref.tmp.sroa.34.0, i64 %conv.i36, i32 1) #14
  %call.i40 = tail call i8* @halide_string_to_string(i8* %call.i37, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.7.118, i64 0, i64 0)) #14
  %conv.i43 = sext i32 %min_required to i64
  %call.i44 = tail call i8* @halide_int64_to_string(i8* %call.i40, i8* %ref.tmp.sroa.34.0, i64 %conv.i43, i32 1) #14
  %call.i47 = tail call i8* @halide_string_to_string(i8* %call.i44, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.117, i64 0, i64 0)) #14
  %conv.i50 = sext i32 %max_required to i64
  %call.i51 = tail call i8* @halide_int64_to_string(i8* %call.i47, i8* %ref.tmp.sroa.34.0, i64 %conv.i50, i32 1) #14
  %call.i54 = tail call i8* @halide_string_to_string(i8* %call.i51, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.119, i64 0, i64 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i54 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -2
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_type(i8* %user_context, i8* %func_name, i32 %type_given_bits, i32 %correct_type_bits) local_unnamed_addr #4 {
entry:
  %type_given_bits.addr = alloca i32, align 4
  %correct_type_bits.addr = alloca i32, align 4
  %correct_type = alloca %struct.halide_type_t, align 2
  %type_given = alloca %struct.halide_type_t, align 2
  store i32 %type_given_bits, i32* %type_given_bits.addr, align 4, !tbaa !41
  store i32 %correct_type_bits, i32* %correct_type_bits.addr, align 4, !tbaa !41
  %0 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %correct_type, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0) #11
  store i8 0, i8* %0, align 2, !tbaa !304
  %bits.i = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %correct_type, i64 0, i32 1
  store i8 0, i8* %bits.i, align 1, !tbaa !144
  %lanes.i = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %correct_type, i64 0, i32 2
  store i16 0, i16* %lanes.i, align 2, !tbaa !305
  %1 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %type_given, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1) #11
  store i8 0, i8* %1, align 2, !tbaa !304
  %bits.i8 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %type_given, i64 0, i32 1
  store i8 0, i8* %bits.i8, align 1, !tbaa !144
  %lanes.i9 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %type_given, i64 0, i32 2
  store i16 0, i16* %lanes.i9, align 2, !tbaa !305
  %2 = bitcast i32* %correct_type_bits.addr to i8*
  %call = call i8* @memcpy(i8* nonnull %0, i8* nonnull %2, i64 4) #14
  %3 = bitcast i32* %type_given_bits.addr to i8*
  %call1 = call i8* @memcpy(i8* nonnull %1, i8* nonnull %3, i64 4) #14
  %call.i = call i8* @malloc(i64 1024) #14
  %tobool.not.i12 = icmp eq i8* %call.i, null
  br i1 %tobool.not.i12, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i151 = call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i152 = call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* %func_name) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i151, %entry.split ], [ %call.i152, %if.then6.i ]
  %ref.tmp.sroa.18.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i18 = call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.9.120, i64 0, i64 0)) #14
  %call.i21 = call i8* @halide_type_to_string(i8* %call.i18, i8* %ref.tmp.sroa.18.0, %struct.halide_type_t* nonnull %correct_type) #14
  %call.i24 = call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.10.121, i64 0, i64 0)) #14
  %call.i27 = call i8* @halide_type_to_string(i8* %call.i24, i8* %ref.tmp.sroa.18.0, %struct.halide_type_t* nonnull %type_given) #14
  br i1 %tobool.not.i12, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i27 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  call void @free(i8* %call.i) #14
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0) #11
  ret i32 -3
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_dimensions(i8* %user_context, i8* %func_name, i32 %dimensions_given, i32 %correct_dimensions) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* %func_name) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.11.122, i64 0, i64 0)) #14
  %conv.i = sext i32 %correct_dimensions to i64
  %call.i14 = tail call i8* @halide_int64_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i64 %conv.i, i32 1) #14
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.12.123, i64 0, i64 0)) #14
  %conv.i20 = sext i32 %dimensions_given to i64
  %call.i21 = tail call i8* @halide_int64_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i64 %conv.i20, i32 1) #14
  %call.i24 = tail call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.13.124, i64 0, i64 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i24 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -43
}

; Function Attrs: nounwind
define weak i32 @halide_error_access_out_of_bounds(i8* %user_context, i8* %func_name, i32 %dimension, i32 %min_touched, i32 %max_touched, i32 %min_valid, i32 %max_valid) local_unnamed_addr #4 {
entry:
  %cmp = icmp slt i32 %min_touched, %min_valid
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.split, label %if.then6.i

if.then.split:                                    ; preds = %if.then
  %call.i271 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %if.then
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i272 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* %func_name) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %if.then.split, %if.then6.i
  %phi.call = phi i8* [ %call.i271, %if.then.split ], [ %call.i272, %if.then6.i ]
  %ref.tmp.sroa.22.0 = phi i8* [ null, %if.then.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i30 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.14.125, i64 0, i64 0)) #14
  %conv.i = sext i32 %min_touched to i64
  %call.i33 = tail call i8* @halide_int64_to_string(i8* %call.i30, i8* %ref.tmp.sroa.22.0, i64 %conv.i, i32 1) #14
  %call.i36 = tail call i8* @halide_string_to_string(i8* %call.i33, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.15.126, i64 0, i64 0)) #14
  %conv.i39 = sext i32 %min_valid to i64
  %call.i40 = tail call i8* @halide_int64_to_string(i8* %call.i36, i8* %ref.tmp.sroa.22.0, i64 %conv.i39, i32 1) #14
  %call.i43 = tail call i8* @halide_string_to_string(i8* %call.i40, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.16.127, i64 0, i64 0)) #14
  %conv.i46 = sext i32 %dimension to i64
  %call.i47 = tail call i8* @halide_int64_to_string(i8* %call.i43, i8* %ref.tmp.sroa.22.0, i64 %conv.i46, i32 1) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %if.end17.sink.split

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i47 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %if.end17.sink.split

if.else:                                          ; preds = %entry
  %cmp7 = icmp sgt i32 %max_touched, %max_valid
  br i1 %cmp7, label %if.then8, label %if.end17

if.then8:                                         ; preds = %if.else
  %call.i53 = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i56 = icmp eq i8* %call.i53, null
  br i1 %tobool.not.i56, label %if.then8.split, label %if.then6.i59

if.then8.split:                                   ; preds = %if.then8
  %call.i653 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62

if.then6.i59:                                     ; preds = %if.then8
  %add.ptr.i57 = getelementptr inbounds i8, i8* %call.i53, i64 1023
  store i8 0, i8* %add.ptr.i57, align 1, !tbaa !18
  %call.i654 = tail call i8* @halide_string_to_string(i8* nonnull %call.i53, i8* nonnull %add.ptr.i57, i8* %func_name) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62: ; preds = %if.then8.split, %if.then6.i59
  %phi.call5 = phi i8* [ %call.i653, %if.then8.split ], [ %call.i654, %if.then6.i59 ]
  %ref.tmp9.sroa.22.0 = phi i8* [ null, %if.then8.split ], [ %add.ptr.i57, %if.then6.i59 ]
  %call.i68 = tail call i8* @halide_string_to_string(i8* %phi.call5, i8* %ref.tmp9.sroa.22.0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.14.125, i64 0, i64 0)) #14
  %conv.i71 = sext i32 %max_touched to i64
  %call.i72 = tail call i8* @halide_int64_to_string(i8* %call.i68, i8* %ref.tmp9.sroa.22.0, i64 %conv.i71, i32 1) #14
  %call.i75 = tail call i8* @halide_string_to_string(i8* %call.i72, i8* %ref.tmp9.sroa.22.0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.17.128, i64 0, i64 0)) #14
  %conv.i78 = sext i32 %max_valid to i64
  %call.i79 = tail call i8* @halide_int64_to_string(i8* %call.i75, i8* %ref.tmp9.sroa.22.0, i64 %conv.i78, i32 1) #14
  %call.i82 = tail call i8* @halide_string_to_string(i8* %call.i79, i8* %ref.tmp9.sroa.22.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.16.127, i64 0, i64 0)) #14
  %conv.i85 = sext i32 %dimension to i64
  %call.i86 = tail call i8* @halide_int64_to_string(i8* %call.i82, i8* %ref.tmp9.sroa.22.0, i64 %conv.i85, i32 1) #14
  br i1 %tobool.not.i56, label %if.then.i90, label %if.else.i100

if.then.i90:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %if.end17.sink.split

if.else.i100:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62
  %sub.ptr.lhs.cast.i.i95 = ptrtoint i8* %call.i86 to i64
  %sub.ptr.rhs.cast.i.i96 = ptrtoint i8* %call.i53 to i64
  %sub.ptr.sub.i.i97 = sub i64 1, %sub.ptr.rhs.cast.i.i96
  %add.i.i98 = add i64 %sub.ptr.sub.i.i97, %sub.ptr.lhs.cast.i.i95
  %call.i.i99 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i53, i64 %add.i.i98) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i53) #14
  br label %if.end17.sink.split

if.end17.sink.split:                              ; preds = %if.else.i100, %if.then.i90, %if.else.i, %if.then.i
  %call.i53.sink = phi i8* [ %call.i, %if.else.i ], [ null, %if.then.i ], [ %call.i53, %if.else.i100 ], [ null, %if.then.i90 ]
  tail call void @free(i8* %call.i53.sink) #14
  br label %if.end17

if.end17:                                         ; preds = %if.end17.sink.split, %if.else
  ret i32 -4
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_allocation_too_large(i8* %user_context, i8* %buffer_name, i64 %allocation_size, i64 %max_size) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.18.129, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.18.129, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %buffer_name) #14
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #14
  %call.i17 = tail call i8* @halide_uint64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %allocation_size, i32 1) #14
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.20.131, i64 0, i64 0)) #14
  %call.i23 = tail call i8* @halide_uint64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_size, i32 1) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -5
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_extents_negative(i8* %user_context, i8* %buffer_name, i32 %dimension, i32 %extent) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i91 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.21.132, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i92 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.21.132, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i91, %entry.split ], [ %call.i92, %if.then6.i ]
  %ref.tmp.sroa.22.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i12 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.22.0, i8* %buffer_name) #14
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.22.133, i64 0, i64 0)) #14
  %conv.i = sext i32 %dimension to i64
  %call.i18 = tail call i8* @halide_int64_to_string(i8* %call.i15, i8* %ref.tmp.sroa.22.0, i64 %conv.i, i32 1) #14
  %call.i21 = tail call i8* @halide_string_to_string(i8* %call.i18, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.23.134, i64 0, i64 0)) #14
  %conv.i24 = sext i32 %extent to i64
  %call.i25 = tail call i8* @halide_int64_to_string(i8* %call.i21, i8* %ref.tmp.sroa.22.0, i64 %conv.i24, i32 1) #14
  %call.i28 = tail call i8* @halide_string_to_string(i8* %call.i25, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.119, i64 0, i64 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i28 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -28
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_extents_too_large(i8* %user_context, i8* %buffer_name, i64 %actual_size, i64 %max_size) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.24.135, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.24.135, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %buffer_name) #14
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #14
  %call.i17 = tail call i8* @halide_int64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %actual_size, i32 1) #14
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.20.131, i64 0, i64 0)) #14
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_size, i32 1) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -6
}

; Function Attrs: nounwind
define weak i32 @halide_error_constraints_make_required_region_smaller(i8* %user_context, i8* %buffer_name, i32 %dimension, i32 %constrained_min, i32 %constrained_extent, i32 %required_min, i32 %required_extent) local_unnamed_addr #4 {
entry:
  %add = add i32 %required_min, -1
  %sub = add i32 %add, %required_extent
  %add1 = add i32 %constrained_min, -1
  %sub2 = add i32 %add1, %constrained_extent
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i231 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.25.136, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i232 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.25.136, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i231, %entry.split ], [ %call.i232, %if.then6.i ]
  %ref.tmp.sroa.38.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i26 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.38.0, i8* %buffer_name) #14
  %call.i29 = tail call i8* @halide_string_to_string(i8* %call.i26, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.26.137, i64 0, i64 0)) #14
  %conv.i = sext i32 %dimension to i64
  %call.i32 = tail call i8* @halide_int64_to_string(i8* %call.i29, i8* %ref.tmp.sroa.38.0, i64 %conv.i, i32 1) #14
  %call.i35 = tail call i8* @halide_string_to_string(i8* %call.i32, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.27.138, i64 0, i64 0)) #14
  %call.i38 = tail call i8* @halide_string_to_string(i8* %call.i35, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.28.139, i64 0, i64 0)) #14
  %conv.i41 = sext i32 %required_min to i64
  %call.i42 = tail call i8* @halide_int64_to_string(i8* %call.i38, i8* %ref.tmp.sroa.38.0, i64 %conv.i41, i32 1) #14
  %call.i45 = tail call i8* @halide_string_to_string(i8* %call.i42, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.117, i64 0, i64 0)) #14
  %conv.i48 = sext i32 %sub to i64
  %call.i49 = tail call i8* @halide_int64_to_string(i8* %call.i45, i8* %ref.tmp.sroa.38.0, i64 %conv.i48, i32 1) #14
  %call.i52 = tail call i8* @halide_string_to_string(i8* %call.i49, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.27.138, i64 0, i64 0)) #14
  %call.i55 = tail call i8* @halide_string_to_string(i8* %call.i52, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.29.140, i64 0, i64 0)) #14
  %conv.i58 = sext i32 %constrained_min to i64
  %call.i59 = tail call i8* @halide_int64_to_string(i8* %call.i55, i8* %ref.tmp.sroa.38.0, i64 %conv.i58, i32 1) #14
  %call.i62 = tail call i8* @halide_string_to_string(i8* %call.i59, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.117, i64 0, i64 0)) #14
  %conv.i65 = sext i32 %sub2 to i64
  %call.i66 = tail call i8* @halide_int64_to_string(i8* %call.i62, i8* %ref.tmp.sroa.38.0, i64 %conv.i65, i32 1) #14
  %call.i69 = tail call i8* @halide_string_to_string(i8* %call.i66, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i69 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -7
}

; Function Attrs: nounwind
define weak i32 @halide_error_constraint_violated(i8* %user_context, i8* %var, i32 %val, i8* %constrained_var, i32 %constrained_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i111 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.31.142, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i112 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.31.142, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i111, %entry.split ], [ %call.i112, %if.then6.i ]
  %ref.tmp.sroa.26.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i14 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.26.0, i8* %var) #14
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32.143, i64 0, i64 0)) #14
  %conv.i = sext i32 %val to i64
  %call.i20 = tail call i8* @halide_int64_to_string(i8* %call.i17, i8* %ref.tmp.sroa.26.0, i64 %conv.i, i32 1) #14
  %call.i23 = tail call i8* @halide_string_to_string(i8* %call.i20, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.33.144, i64 0, i64 0)) #14
  %call.i26 = tail call i8* @halide_string_to_string(i8* %call.i23, i8* %ref.tmp.sroa.26.0, i8* %constrained_var) #14
  %call.i29 = tail call i8* @halide_string_to_string(i8* %call.i26, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32.143, i64 0, i64 0)) #14
  %conv.i32 = sext i32 %constrained_val to i64
  %call.i33 = tail call i8* @halide_int64_to_string(i8* %call.i29, i8* %ref.tmp.sroa.26.0, i64 %conv.i32, i32 1) #14
  %call.i36 = tail call i8* @halide_string_to_string(i8* %call.i33, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.119, i64 0, i64 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i36 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -8
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_small_i64(i8* %user_context, i8* %param_name, i64 %val, i64 %min_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #14
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #14
  %call.i17 = tail call i8* @halide_int64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #14
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.35.146, i64 0, i64 0)) #14
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %min_val, i32 1) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -9
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_small_u64(i8* %user_context, i8* %param_name, i64 %val, i64 %min_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #14
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #14
  %call.i17 = tail call i8* @halide_uint64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #14
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.35.146, i64 0, i64 0)) #14
  %call.i23 = tail call i8* @halide_uint64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %min_val, i32 1) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -9
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_small_f64(i8* %user_context, i8* %param_name, double %val, double %min_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #14
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #14
  %call.i17 = tail call i8* @halide_double_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, double %val, i32 1) #14
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.35.146, i64 0, i64 0)) #14
  %call.i23 = tail call i8* @halide_double_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, double %min_val, i32 1) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -9
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_large_i64(i8* %user_context, i8* %param_name, i64 %val, i64 %max_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #14
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #14
  %call.i17 = tail call i8* @halide_int64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #14
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.36, i64 0, i64 0)) #14
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_val, i32 1) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -10
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_large_u64(i8* %user_context, i8* %param_name, i64 %val, i64 %max_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #14
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #14
  %call.i17 = tail call i8* @halide_uint64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #14
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.36, i64 0, i64 0)) #14
  %call.i23 = tail call i8* @halide_uint64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_val, i32 1) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -10
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_large_f64(i8* %user_context, i8* %param_name, double %val, double %max_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #14
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #14
  %call.i17 = tail call i8* @halide_double_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, double %val, i32 1) #14
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.36, i64 0, i64 0)) #14
  %call.i23 = tail call i8* @halide_double_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, double %max_val, i32 1) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -10
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_error_out_of_memory(i8* %user_context) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.37, i64 0, i64 0)) #14
  ret i32 -11
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_argument_is_null(i8* %user_context, i8* %buffer_name) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i51 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.38, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i52 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.38, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i51, %entry.split ], [ %call.i52, %if.then6.i ]
  %ref.tmp.sroa.14.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i8 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.14.0, i8* %buffer_name) #14
  %call.i11 = tail call i8* @halide_string_to_string(i8* %call.i8, i8* %ref.tmp.sroa.14.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.39, i64 0, i64 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i11 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -12
}

; Function Attrs: nounwind
define weak i32 @halide_error_debug_to_file_failed(i8* %user_context, i8* %func, i8* %filename, i32 %error_code) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.40, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.40, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %func) #14
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.41.147, i64 0, i64 0)) #14
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i8* %filename) #14
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.42, i64 0, i64 0)) #14
  %conv.i = sext i32 %error_code to i64
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %conv.i, i32 1) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -13
}

; Function Attrs: nounwind
define weak i32 @halide_error_unaligned_host_ptr(i8* %user_context, i8* %func, i32 %alignment) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i71 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i72 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i71, %entry.split ], [ %call.i72, %if.then6.i ]
  %ref.tmp.sroa.18.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i10 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.18.0, i8* %func) #14
  %call.i13 = tail call i8* @halide_string_to_string(i8* %call.i10, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.44, i64 0, i64 0)) #14
  %conv.i = sext i32 %alignment to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %call.i13, i8* %ref.tmp.sroa.18.0, i64 %conv.i, i32 1) #14
  %call.i19 = tail call i8* @halide_string_to_string(i8* %call.i16, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.45, i64 0, i64 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i19 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -24
}

; Function Attrs: nounwind
define weak i32 @halide_error_device_dirty_with_no_device_support(i8* %user_context, i8* %func) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i61 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.46, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i62 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.46, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i61, %entry.split ], [ %call.i62, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i9 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %func) #14
  %call.i12 = tail call i8* @halide_string_to_string(i8* %call.i9, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.47, i64 0, i64 0)) #14
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.48, i64 0, i64 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i15 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -44
}

; Function Attrs: nounwind
define weak i32 @halide_error_host_is_null(i8* %user_context, i8* %func) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i51 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i52 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i51, %entry.split ], [ %call.i52, %if.then6.i ]
  %ref.tmp.sroa.14.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i8 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.14.0, i8* %func) #14
  %call.i11 = tail call i8* @halide_string_to_string(i8* %call.i8, i8* %ref.tmp.sroa.14.0, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.49, i64 0, i64 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i11 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -34
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_fold(i8* %user_context, i8* %func_name, i8* %var_name, i8* %loop_name) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i91 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.50.148, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i92 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.50.148, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i91, %entry.split ], [ %call.i92, %if.then6.i ]
  %ref.tmp.sroa.22.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i12 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.22.0, i8* %var_name) #14
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i64 0, i64 0)) #14
  %call.i18 = tail call i8* @halide_string_to_string(i8* %call.i15, i8* %ref.tmp.sroa.22.0, i8* %func_name) #14
  %call.i21 = tail call i8* @halide_string_to_string(i8* %call.i18, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.52, i64 0, i64 0)) #14
  %call.i24 = tail call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.22.0, i8* %loop_name) #14
  %call.i27 = tail call i8* @halide_string_to_string(i8* %call.i24, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i27 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -25
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_extern_fold(i8* %user_context, i8* %func_name, i32 %dim, i32 %min, i32 %extent, i32 %valid_min, i32 %fold_factor) local_unnamed_addr #4 {
entry:
  %cmp = icmp slt i32 %min, %valid_min
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %add = add nsw i32 %extent, %min
  %add1 = add nsw i32 %fold_factor, %valid_min
  %cmp2 = icmp sgt i32 %add, %add1
  br i1 %cmp2, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false, %entry
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.split, label %if.then6.i

if.then.split:                                    ; preds = %if.then
  %call.i521 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %if.then
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i522 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %if.then.split, %if.then6.i
  %phi.call = phi i8* [ %call.i521, %if.then.split ], [ %call.i522, %if.then6.i ]
  %ref.tmp.sroa.36.0 = phi i8* [ null, %if.then.split ], [ %add.ptr.i, %if.then6.i ]
  %conv.i = sext i32 %dim to i64
  %call.i55 = tail call i8* @halide_int64_to_string(i8* %phi.call, i8* %ref.tmp.sroa.36.0, i64 %conv.i, i32 1) #14
  %call.i58 = tail call i8* @halide_string_to_string(i8* %call.i55, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i64 0, i64 0)) #14
  %call.i61 = tail call i8* @halide_string_to_string(i8* %call.i58, i8* %ref.tmp.sroa.36.0, i8* %func_name) #14
  %call.i64 = tail call i8* @halide_string_to_string(i8* %call.i61, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.54, i64 0, i64 0)) #14
  %conv.i67 = sext i32 %min to i64
  %call.i68 = tail call i8* @halide_int64_to_string(i8* %call.i64, i8* %ref.tmp.sroa.36.0, i64 %conv.i67, i32 1) #14
  %call.i71 = tail call i8* @halide_string_to_string(i8* %call.i68, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #14
  %add9 = add nsw i32 %extent, %min
  %sub = add nsw i32 %add9, -1
  %conv.i74 = sext i32 %sub to i64
  %call.i75 = tail call i8* @halide_int64_to_string(i8* %call.i71, i8* %ref.tmp.sroa.36.0, i64 %conv.i74, i32 1) #14
  %call.i78 = tail call i8* @halide_string_to_string(i8* %call.i75, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.56, i64 0, i64 0)) #14
  %call.i81 = tail call i8* @halide_string_to_string(i8* %call.i78, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.57, i64 0, i64 0)) #14
  %conv.i84 = sext i32 %valid_min to i64
  %call.i85 = tail call i8* @halide_int64_to_string(i8* %call.i81, i8* %ref.tmp.sroa.36.0, i64 %conv.i84, i32 1) #14
  %call.i88 = tail call i8* @halide_string_to_string(i8* %call.i85, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #14
  %add15 = add nsw i32 %fold_factor, %valid_min
  %sub16 = add nsw i32 %add15, -1
  %conv.i91 = sext i32 %sub16 to i64
  %call.i92 = tail call i8* @halide_int64_to_string(i8* %call.i88, i8* %ref.tmp.sroa.36.0, i64 %conv.i91, i32 1) #14
  %call.i95 = tail call i8* @halide_string_to_string(i8* %call.i92, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.58.149, i64 0, i64 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %if.end

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i95 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %if.end

if.else:                                          ; preds = %lor.lhs.false
  %call.i101 = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i104 = icmp eq i8* %call.i101, null
  br i1 %tobool.not.i104, label %if.else.split, label %if.then6.i107

if.else.split:                                    ; preds = %if.else
  %call.i1133 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110

if.then6.i107:                                    ; preds = %if.else
  %add.ptr.i105 = getelementptr inbounds i8, i8* %call.i101, i64 1023
  store i8 0, i8* %add.ptr.i105, align 1, !tbaa !18
  %call.i1134 = tail call i8* @halide_string_to_string(i8* nonnull %call.i101, i8* nonnull %add.ptr.i105, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110: ; preds = %if.else.split, %if.then6.i107
  %phi.call5 = phi i8* [ %call.i1133, %if.else.split ], [ %call.i1134, %if.then6.i107 ]
  %ref.tmp19.sroa.34.0 = phi i8* [ null, %if.else.split ], [ %add.ptr.i105, %if.then6.i107 ]
  %conv.i116 = sext i32 %dim to i64
  %call.i117 = tail call i8* @halide_int64_to_string(i8* %phi.call5, i8* %ref.tmp19.sroa.34.0, i64 %conv.i116, i32 1) #14
  %call.i120 = tail call i8* @halide_string_to_string(i8* %call.i117, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i64 0, i64 0)) #14
  %call.i123 = tail call i8* @halide_string_to_string(i8* %call.i120, i8* %ref.tmp19.sroa.34.0, i8* %func_name) #14
  %call.i126 = tail call i8* @halide_string_to_string(i8* %call.i123, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.54, i64 0, i64 0)) #14
  %conv.i129 = sext i32 %min to i64
  %call.i130 = tail call i8* @halide_int64_to_string(i8* %call.i126, i8* %ref.tmp19.sroa.34.0, i64 %conv.i129, i32 1) #14
  %call.i133 = tail call i8* @halide_string_to_string(i8* %call.i130, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #14
  %sub28 = add nsw i32 %add, -1
  %conv.i136 = sext i32 %sub28 to i64
  %call.i137 = tail call i8* @halide_int64_to_string(i8* %call.i133, i8* %ref.tmp19.sroa.34.0, i64 %conv.i136, i32 1) #14
  %call.i140 = tail call i8* @halide_string_to_string(i8* %call.i137, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.56, i64 0, i64 0)) #14
  %call.i143 = tail call i8* @halide_string_to_string(i8* %call.i140, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.59.150, i64 0, i64 0)) #14
  %call.i146 = tail call i8* @halide_string_to_string(i8* %call.i143, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.60.151, i64 0, i64 0)) #14
  %conv.i149 = sext i32 %fold_factor to i64
  %call.i150 = tail call i8* @halide_int64_to_string(i8* %call.i146, i8* %ref.tmp19.sroa.34.0, i64 %conv.i149, i32 1) #14
  %call.i153 = tail call i8* @halide_string_to_string(i8* %call.i150, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #14
  br i1 %tobool.not.i104, label %if.then.i157, label %if.else.i167

if.then.i157:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %if.end

if.else.i167:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110
  %sub.ptr.lhs.cast.i.i162 = ptrtoint i8* %call.i153 to i64
  %sub.ptr.rhs.cast.i.i163 = ptrtoint i8* %call.i101 to i64
  %sub.ptr.sub.i.i164 = sub i64 1, %sub.ptr.rhs.cast.i.i163
  %add.i.i165 = add i64 %sub.ptr.sub.i.i164, %sub.ptr.lhs.cast.i.i162
  %call.i.i166 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i101, i64 %add.i.i165) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i101) #14
  br label %if.end

if.end:                                           ; preds = %if.else.i167, %if.then.i157, %if.else.i, %if.then.i
  %call.i101.sink = phi i8* [ %call.i, %if.else.i ], [ null, %if.then.i ], [ %call.i101, %if.else.i167 ], [ null, %if.then.i157 ]
  tail call void @free(i8* %call.i101.sink) #14
  ret i32 -35
}

; Function Attrs: nounwind
define weak i32 @halide_error_fold_factor_too_small(i8* %user_context, i8* %func_name, i8* %var_name, i32 %fold_factor, i8* %loop_name, i32 %required_extent) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i131 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.61.152, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i132 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.61.152, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i131, %entry.split ], [ %call.i132, %if.then6.i ]
  %ref.tmp.sroa.30.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %conv.i = sext i32 %fold_factor to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %phi.call, i8* %ref.tmp.sroa.30.0, i64 %conv.i, i32 1) #14
  %call.i19 = tail call i8* @halide_string_to_string(i8* %call.i16, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.62, i64 0, i64 0)) #14
  %call.i22 = tail call i8* @halide_string_to_string(i8* %call.i19, i8* %ref.tmp.sroa.30.0, i8* %var_name) #14
  %call.i25 = tail call i8* @halide_string_to_string(i8* %call.i22, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i64 0, i64 0)) #14
  %call.i28 = tail call i8* @halide_string_to_string(i8* %call.i25, i8* %ref.tmp.sroa.30.0, i8* %func_name) #14
  %call.i31 = tail call i8* @halide_string_to_string(i8* %call.i28, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.63, i64 0, i64 0)) #14
  %call.i34 = tail call i8* @halide_string_to_string(i8* %call.i31, i8* %ref.tmp.sroa.30.0, i8* %loop_name) #14
  %call.i37 = tail call i8* @halide_string_to_string(i8* %call.i34, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32.143, i64 0, i64 0)) #14
  %conv.i40 = sext i32 %required_extent to i64
  %call.i41 = tail call i8* @halide_int64_to_string(i8* %call.i37, i8* %ref.tmp.sroa.30.0, i64 %conv.i40, i32 1) #14
  %call.i44 = tail call i8* @halide_string_to_string(i8* %call.i41, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.64.153, i64 0, i64 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i44 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -26
}

; Function Attrs: nounwind
define weak i32 @halide_error_requirement_failed(i8* %user_context, i8* %condition, i8* %message) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i61 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.65, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i62 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.65, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i61, %entry.split ], [ %call.i62, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i9 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %condition) #14
  %call.i12 = tail call i8* @halide_string_to_string(i8* %call.i9, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.66, i64 0, i64 0)) #14
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.16.0, i8* %message) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i15 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -27
}

; Function Attrs: nounwind
define weak i32 @halide_error_specialize_fail(i8* %user_context, i8* %message) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i41 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.67, i64 0, i64 0)) #14
  %call.i75 = tail call i8* @halide_string_to_string(i8* %call.i41, i8* null, i8* %message) #14
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i42 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.67, i64 0, i64 0)) #14
  %call.i7 = tail call i8* @halide_string_to_string(i8* %call.i42, i8* nonnull %add.ptr.i, i8* %message) #14
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i7 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -31
}

; Function Attrs: nounwind
define weak i32 @halide_error_no_device_interface(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.68, i64 0, i64 0)) #14
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.68, i64 0, i64 0)) #14
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -19
}

; Function Attrs: nounwind
define weak i32 @halide_error_device_interface_no_device(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.69, i64 0, i64 0)) #14
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.69, i64 0, i64 0)) #14
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -36
}

; Function Attrs: nounwind
define weak i32 @halide_error_host_and_device_dirty(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.70, i64 0, i64 0)) #14
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.70, i64 0, i64 0)) #14
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -37
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_is_null(i8* %user_context, i8* %routine) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i51 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.71, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i52 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.71, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i51, %entry.split ], [ %call.i52, %if.then6.i ]
  %ref.tmp.sroa.14.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i8 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.14.0, i8* %routine) #14
  %call.i11 = tail call i8* @halide_string_to_string(i8* %call.i8, i8* %ref.tmp.sroa.14.0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.72, i64 0, i64 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i11 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -38
}

; Function Attrs: nounwind
define weak i32 @halide_error_storage_bound_too_small(i8* %user_context, i8* %func_name, i8* %var_name, i32 %provided_size, i32 %required_size) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i111 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.73, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i112 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.73, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i111, %entry.split ], [ %call.i112, %if.then6.i ]
  %ref.tmp.sroa.26.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %conv.i = sext i32 %provided_size to i64
  %call.i14 = tail call i8* @halide_int64_to_string(i8* %phi.call, i8* %ref.tmp.sroa.26.0, i64 %conv.i, i32 1) #14
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.62, i64 0, i64 0)) #14
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.26.0, i8* %var_name) #14
  %call.i23 = tail call i8* @halide_string_to_string(i8* %call.i20, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i64 0, i64 0)) #14
  %call.i26 = tail call i8* @halide_string_to_string(i8* %call.i23, i8* %ref.tmp.sroa.26.0, i8* %func_name) #14
  %call.i29 = tail call i8* @halide_string_to_string(i8* %call.i26, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.74, i64 0, i64 0)) #14
  %conv.i32 = sext i32 %required_size to i64
  %call.i33 = tail call i8* @halide_int64_to_string(i8* %call.i29, i8* %ref.tmp.sroa.26.0, i64 %conv.i32, i32 1) #14
  %call.i36 = tail call i8* @halide_string_to_string(i8* %call.i33, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.64.153, i64 0, i64 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i36 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -45
}

; Function Attrs: nounwind
define weak i32 @halide_error_device_crop_failed(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.75, i64 0, i64 0)) #14
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.75, i64 0, i64 0)) #14
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -41
}

; Function Attrs: nounwind mustprogress
define weak void @halide_profiler_shutdown() #0 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #15
  %sampling_thread = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 7
  %0 = load %struct.halide_thread*, %struct.halide_thread** %sampling_thread, align 8, !tbaa !337
  %tobool.not = icmp eq %struct.halide_thread* %0, null
  br i1 %tobool.not, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %current_func = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 3
  store i32 -2, i32* %current_func, align 8, !tbaa !339
  tail call void @halide_join_thread(%struct.halide_thread* nonnull %0) #14
  store %struct.halide_thread* null, %struct.halide_thread** %sampling_thread, align 8, !tbaa !337
  store i32 -1, i32* %current_func, align 8, !tbaa !339
  tail call void @halide_profiler_report_unlocked(i8* null, %struct.halide_profiler_state* nonnull %call) #15
  tail call void @halide_profiler_reset_unlocked(%struct.halide_profiler_state* nonnull %call) #15
  br label %cleanup

cleanup:                                          ; preds = %if.end, %entry
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak %struct.halide_profiler_state* @halide_profiler_get_state() local_unnamed_addr #2 {
entry:
  ret %struct.halide_profiler_state* @_ZZ25halide_profiler_get_stateE1s
}

; Function Attrs: nounwind
define weak void @halide_profiler_report_unlocked(i8* %user_context, %struct.halide_profiler_state* %s) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit, label %if.then6.i

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit: ; preds = %if.then6.i, %entry
  %sstr.sroa.125.0 = phi i8* [ %add.ptr.i, %if.then6.i ], [ null, %entry ]
  %pipelines = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 5
  %p.0624 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !14
  %tobool.not625 = icmp eq %struct.halide_profiler_pipeline_stats* %p.0624, null
  br i1 %tobool.not625, label %for.cond.cleanup, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit
  %sub.ptr.rhs.cast.i.i348 = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i349 = sub i64 1, %sub.ptr.rhs.cast.i.i348
  br label %for.body

for.cond.cleanup:                                 ; preds = %cleanup181, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit
  %sstr.sroa.19.0.lcssa = phi i8* [ %call.i, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit ], [ %sstr.sroa.19.15, %cleanup181 ]
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %for.cond.cleanup
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %for.cond.cleanup
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %sstr.sroa.19.0.lcssa to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret void

for.body:                                         ; preds = %cleanup181, %for.body.lr.ph
  %p.0627 = phi %struct.halide_profiler_pipeline_stats* [ %p.0624, %for.body.lr.ph ], [ %p.0, %cleanup181 ]
  %sstr.sroa.19.0626 = phi i8* [ %call.i, %for.body.lr.ph ], [ %sstr.sroa.19.15, %cleanup181 ]
  %time = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 0
  %0 = load i64, i64* %time, align 8, !tbaa !340
  %conv = uitofp i64 %0 to float
  %div = fdiv float %conv, 1.000000e+06
  %runs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 11
  %1 = load i32, i32* %runs, align 8, !tbaa !342
  %tobool1.not = icmp eq i32 %1, 0
  br i1 %tobool1.not, label %cleanup181, label %if.end

if.end:                                           ; preds = %for.body
  br i1 %tobool.not.i, label %if.end.split, label %if.then.i278

if.end.split:                                     ; preds = %if.end
  %active_threads_numerator1 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 4
  %2 = load i64, i64* %active_threads_numerator1, align 8, !tbaa !343
  %active_threads_denominator2 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 5
  %3 = load i64, i64* %active_threads_denominator2, align 8, !tbaa !344
  %cmp3 = icmp eq i64 %2, %3
  %name4 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 6
  %4 = load i8*, i8** %name4, align 8, !tbaa !345
  %call.i2825 = tail call i8* @halide_string_to_string(i8* null, i8* %sstr.sroa.125.0, i8* %4) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit

if.then.i278:                                     ; preds = %if.end
  store i8 0, i8* %call.i, align 1, !tbaa !18
  %active_threads_numerator6 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 4
  %5 = load i64, i64* %active_threads_numerator6, align 8, !tbaa !343
  %active_threads_denominator7 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 5
  %6 = load i64, i64* %active_threads_denominator7, align 8, !tbaa !344
  %cmp8 = icmp eq i64 %5, %6
  %name9 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 6
  %7 = load i8*, i8** %name9, align 8, !tbaa !345
  %call.i28210 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* %sstr.sroa.125.0, i8* %7) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit: ; preds = %if.end.split, %if.then.i278
  %8 = phi i64 [ %2, %if.end.split ], [ %5, %if.then.i278 ]
  %9 = phi i64 [ %3, %if.end.split ], [ %6, %if.then.i278 ]
  %10 = phi i1 [ %cmp3, %if.end.split ], [ %cmp8, %if.then.i278 ]
  %phi.call = phi i8* [ %call.i2825, %if.end.split ], [ %call.i28210, %if.then.i278 ]
  %call.i285 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #14
  %call.i288 = tail call i8* @halide_string_to_string(i8* %call.i285, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.8.165, i64 0, i64 0)) #14
  %conv.i = fpext float %div to double
  %call.i291 = tail call i8* @halide_double_to_string(i8* %call.i288, i8* %sstr.sroa.125.0, double %conv.i, i32 0) #14
  %call.i294 = tail call i8* @halide_string_to_string(i8* %call.i291, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9.166, i64 0, i64 0)) #14
  %call.i297 = tail call i8* @halide_string_to_string(i8* %call.i294, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.10.167, i64 0, i64 0)) #14
  %samples = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 12
  %11 = load i32, i32* %samples, align 4, !tbaa !346
  %conv.i300 = sext i32 %11 to i64
  %call.i301 = tail call i8* @halide_int64_to_string(i8* %call.i297, i8* %sstr.sroa.125.0, i64 %conv.i300, i32 1) #14
  %call.i304 = tail call i8* @halide_string_to_string(i8* %call.i301, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.11.168, i64 0, i64 0)) #14
  %12 = load i32, i32* %runs, align 8, !tbaa !342
  %conv.i307 = sext i32 %12 to i64
  %call.i308 = tail call i8* @halide_int64_to_string(i8* %call.i304, i8* %sstr.sroa.125.0, i64 %conv.i307, i32 1) #14
  %call.i311 = tail call i8* @halide_string_to_string(i8* %call.i308, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.12.169, i64 0, i64 0)) #14
  %13 = load i32, i32* %runs, align 8, !tbaa !342
  %conv19 = sitofp i32 %13 to float
  %div20 = fdiv float %div, %conv19
  %conv.i314 = fpext float %div20 to double
  %call.i315 = tail call i8* @halide_double_to_string(i8* %call.i311, i8* %sstr.sroa.125.0, double %conv.i314, i32 0) #14
  %call.i318 = tail call i8* @halide_string_to_string(i8* %call.i315, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.13.170, i64 0, i64 0)) #14
  br i1 %10, label %if.end28, label %if.then24

if.then24:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit
  %conv3 = uitofp i64 %8 to double
  %conv5 = uitofp i64 %9 to double
  %add = fadd double %conv5, 1.000000e-10
  %div6 = fdiv double %conv3, %add
  %conv7 = fptrunc double %div6 to float
  %call.i321 = tail call i8* @halide_string_to_string(i8* %call.i318, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.14.171, i64 0, i64 0)) #14
  %conv.i324 = fpext float %conv7 to double
  %call.i325 = tail call i8* @halide_double_to_string(i8* %call.i321, i8* %sstr.sroa.125.0, double %conv.i324, i32 0) #14
  %call.i328 = tail call i8* @halide_string_to_string(i8* %call.i325, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #14
  br label %if.end28

if.end28:                                         ; preds = %if.then24, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit
  %sstr.sroa.19.1 = phi i8* [ %call.i318, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit ], [ %call.i328, %if.then24 ]
  %call.i331 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.1, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.15.172, i64 0, i64 0)) #14
  %num_allocs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 13
  %14 = load i32, i32* %num_allocs, align 8, !tbaa !347
  %conv.i334 = sext i32 %14 to i64
  %call.i335 = tail call i8* @halide_int64_to_string(i8* %call.i331, i8* %sstr.sroa.125.0, i64 %conv.i334, i32 1) #14
  %call.i338 = tail call i8* @halide_string_to_string(i8* %call.i335, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.16.173, i64 0, i64 0)) #14
  %memory_peak = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 2
  %15 = load i64, i64* %memory_peak, align 8, !tbaa !348
  %call.i341 = tail call i8* @halide_uint64_to_string(i8* %call.i338, i8* %sstr.sroa.125.0, i64 %15, i32 1) #14
  %call.i344 = tail call i8* @halide_string_to_string(i8* %call.i341, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.17.174, i64 0, i64 0)) #14
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit, label %if.then.i352

if.then.i352:                                     ; preds = %if.end28
  %sub.ptr.lhs.cast.i.i347 = ptrtoint i8* %call.i344 to i64
  %add.i.i350 = add i64 %sub.ptr.sub.i.i349, %sub.ptr.lhs.cast.i.i347
  %call.i.i351 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i350) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit: ; preds = %if.then.i352, %if.end28
  %retval.0.i = phi i8* [ %call.i, %if.then.i352 ], [ getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0), %if.end28 ]
  tail call void @halide_print(i8* %user_context, i8* nonnull %retval.0.i) #14
  %16 = load i64, i64* %time, align 8, !tbaa !340
  %tobool36.not = icmp eq i64 %16, 0
  br i1 %tobool36.not, label %lor.end, label %for.cond53.preheader

lor.end:                                          ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit
  %memory_total = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 3
  %17 = load i64, i64* %memory_total, align 8, !tbaa !349
  %tobool37.not = icmp eq i64 %17, 0
  br i1 %tobool37.not, label %for.cond41.preheader, label %for.cond53.preheader

for.cond41.preheader:                             ; preds = %lor.end
  %num_funcs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 9
  %18 = load i32, i32* %num_funcs, align 8, !tbaa !350
  %cmp42589 = icmp sgt i32 %18, 0
  br i1 %cmp42589, label %for.body44.lr.ph, label %cleanup181

for.body44.lr.ph:                                 ; preds = %for.cond41.preheader
  %funcs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 7
  %19 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %funcs, align 8, !tbaa !351
  %20 = zext i32 %18 to i64
  br label %for.body44

for.cond41:                                       ; preds = %for.body44
  %exitcond.not = icmp eq i64 %indvars.iv.next, %20
  br i1 %exitcond.not, label %cleanup181, label %for.body44, !llvm.loop !352

for.body44:                                       ; preds = %for.cond41, %for.body44.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body44.lr.ph ], [ %indvars.iv.next, %for.cond41 ]
  %stack_peak = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %19, i64 %indvars.iv, i32 4
  %21 = load i64, i64* %stack_peak, align 8, !tbaa !353
  %tobool45.not = icmp eq i64 %21, 0
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  br i1 %tobool45.not, label %for.cond41, label %for.cond53.preheader

for.cond53.preheader:                             ; preds = %for.body44, %lor.end, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit
  %num_funcs54 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 9
  %22 = load i32, i32* %num_funcs54, align 8, !tbaa !350
  %cmp55621 = icmp sgt i32 %22, 0
  br i1 %cmp55621, label %for.body57.lr.ph, label %cleanup181

for.body57.lr.ph:                                 ; preds = %for.cond53.preheader
  %funcs59 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 7
  br label %for.body57

for.body57:                                       ; preds = %cleanup172, %for.body57.lr.ph
  %indvars.iv630 = phi i64 [ 0, %for.body57.lr.ph ], [ %indvars.iv.next631, %cleanup172 ]
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit358, label %if.then.i356

if.then.i356:                                     ; preds = %for.body57
  store i8 0, i8* %call.i, align 1, !tbaa !18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit358

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit358: ; preds = %if.then.i356, %for.body57
  %23 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %funcs59, align 8, !tbaa !351
  %add.ptr61 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630
  %cmp62 = icmp eq i64 %indvars.iv630, 0
  br i1 %cmp62, label %land.lhs.true, label %if.end66

land.lhs.true:                                    ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit358
  %time63 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %add.ptr61, i64 0, i32 0
  %24 = load i64, i64* %time63, align 8, !tbaa !355
  %cmp64 = icmp eq i64 %24, 0
  br i1 %cmp64, label %cleanup172, label %if.end66

if.end66:                                         ; preds = %land.lhs.true, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit358
  %call.i361 = tail call i8* @halide_string_to_string(i8* %call.i, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.18.175, i64 0, i64 0)) #14
  %name68 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 7
  %25 = load i8*, i8** %name68, align 8, !tbaa !356
  %call.i364 = tail call i8* @halide_string_to_string(i8* %call.i361, i8* %sstr.sroa.125.0, i8* %25) #14
  %call.i367 = tail call i8* @halide_string_to_string(i8* %call.i364, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.19.176, i64 0, i64 0)) #14
  %sub.ptr.lhs.cast.i591 = ptrtoint i8* %call.i367 to i64
  %sub.ptr.sub.i592 = sub i64 %sub.ptr.lhs.cast.i591, %sub.ptr.rhs.cast.i.i348
  %cmp73593 = icmp ult i64 %sub.ptr.sub.i592, 25
  br i1 %cmp73593, label %while.body, label %while.end

while.body:                                       ; preds = %if.end66, %while.body
  %sstr.sroa.19.3594 = phi i8* [ %call.i384, %while.body ], [ %call.i367, %if.end66 ]
  %call.i384 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.3594, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #14
  %sub.ptr.lhs.cast.i = ptrtoint i8* %call.i384 to i64
  %sub.ptr.sub.i = sub i64 %sub.ptr.lhs.cast.i, %sub.ptr.rhs.cast.i.i348
  %cmp73 = icmp ult i64 %sub.ptr.sub.i, 25
  br i1 %cmp73, label %while.body, label %while.end, !llvm.loop !357

while.end:                                        ; preds = %while.body, %if.end66
  %sstr.sroa.19.3.lcssa = phi i8* [ %call.i367, %if.end66 ], [ %call.i384, %while.body ]
  %time75 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %add.ptr61, i64 0, i32 0
  %26 = load i64, i64* %time75, align 8, !tbaa !355
  %conv76 = uitofp i64 %26 to float
  %27 = load i32, i32* %runs, align 8, !tbaa !342
  %conv78 = sitofp i32 %27 to float
  %mul = fmul float %conv78, 1.000000e+06
  %div79 = fdiv float %conv76, %mul
  %conv.i387 = fpext float %div79 to double
  %call.i388 = tail call i8* @halide_double_to_string(i8* %sstr.sroa.19.3.lcssa, i8* %sstr.sroa.125.0, double %conv.i387, i32 0) #14
  %tobool.not.i390 = icmp eq i8* %call.i388, null
  br i1 %tobool.not.i390, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit, label %if.then.i393

if.then.i393:                                     ; preds = %while.end
  %add.ptr.i391 = getelementptr inbounds i8, i8* %call.i388, i64 -3
  %cmp.i = icmp ult i8* %add.ptr.i391, %call.i
  %spec.store.select.i = select i1 %cmp.i, i8* %call.i, i8* %add.ptr.i391
  store i8 0, i8* %spec.store.select.i, align 1, !tbaa !18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit: ; preds = %if.then.i393, %while.end
  %sstr.sroa.19.4 = phi i8* [ null, %while.end ], [ %spec.store.select.i, %if.then.i393 ]
  %call.i399 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.4, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.21.178, i64 0, i64 0)) #14
  %sub.ptr.lhs.cast.i400596 = ptrtoint i8* %call.i399 to i64
  %sub.ptr.sub.i402597 = sub i64 %sub.ptr.lhs.cast.i400596, %sub.ptr.rhs.cast.i.i348
  %cmp85598 = icmp ult i64 %sub.ptr.sub.i402597, 35
  br i1 %cmp85598, label %while.body86, label %while.end88

while.body86:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit, %while.body86
  %sstr.sroa.19.5599 = phi i8* [ %call.i408, %while.body86 ], [ %call.i399, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit ]
  %call.i408 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.5599, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #14
  %sub.ptr.lhs.cast.i400 = ptrtoint i8* %call.i408 to i64
  %sub.ptr.sub.i402 = sub i64 %sub.ptr.lhs.cast.i400, %sub.ptr.rhs.cast.i.i348
  %cmp85 = icmp ult i64 %sub.ptr.sub.i402, 35
  br i1 %cmp85, label %while.body86, label %while.end88, !llvm.loop !358

while.end88:                                      ; preds = %while.body86, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit
  %sstr.sroa.19.5.lcssa = phi i8* [ %call.i399, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit ], [ %call.i408, %while.body86 ]
  %28 = load i64, i64* %time, align 8, !tbaa !340
  %cmp90.not = icmp eq i64 %28, 0
  br i1 %cmp90.not, label %if.end97, label %if.then91

if.then91:                                        ; preds = %while.end88
  %29 = load i64, i64* %time75, align 8, !tbaa !355
  %mul93 = mul i64 %29, 100
  %div95 = udiv i64 %mul93, %28
  br label %if.end97

if.end97:                                         ; preds = %if.then91, %while.end88
  %percent.0 = phi i64 [ %div95, %if.then91 ], [ 0, %while.end88 ]
  %call.i411 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.5.lcssa, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.22.179, i64 0, i64 0)) #14
  %sext = shl i64 %percent.0, 32
  %conv.i414 = ashr exact i64 %sext, 32
  %call.i415 = tail call i8* @halide_int64_to_string(i8* %call.i411, i8* %sstr.sroa.125.0, i64 %conv.i414, i32 1) #14
  %call.i418 = tail call i8* @halide_string_to_string(i8* %call.i415, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.23.180, i64 0, i64 0)) #14
  %sub.ptr.lhs.cast.i419601 = ptrtoint i8* %call.i418 to i64
  %sub.ptr.sub.i421602 = sub i64 %sub.ptr.lhs.cast.i419601, %sub.ptr.rhs.cast.i.i348
  %cmp104603 = icmp ult i64 %sub.ptr.sub.i421602, 43
  br i1 %cmp104603, label %while.body105, label %while.end107

while.body105:                                    ; preds = %if.end97, %while.body105
  %sstr.sroa.19.6604 = phi i8* [ %call.i427, %while.body105 ], [ %call.i418, %if.end97 ]
  %call.i427 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.6604, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #14
  %sub.ptr.lhs.cast.i419 = ptrtoint i8* %call.i427 to i64
  %sub.ptr.sub.i421 = sub i64 %sub.ptr.lhs.cast.i419, %sub.ptr.rhs.cast.i.i348
  %cmp104 = icmp ult i64 %sub.ptr.sub.i421, 43
  br i1 %cmp104, label %while.body105, label %while.end107, !llvm.loop !359

while.end107:                                     ; preds = %while.body105, %if.end97
  %sstr.sroa.19.6.lcssa = phi i8* [ %call.i418, %if.end97 ], [ %call.i427, %while.body105 ]
  br i1 %10, label %if.end127, label %if.then109

if.then109:                                       ; preds = %while.end107
  %active_threads_numerator111 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 5
  %30 = load i64, i64* %active_threads_numerator111, align 8, !tbaa !360
  %conv112 = uitofp i64 %30 to double
  %active_threads_denominator113 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 6
  %31 = load i64, i64* %active_threads_denominator113, align 8, !tbaa !361
  %conv114 = uitofp i64 %31 to double
  %add115 = fadd double %conv114, 1.000000e-10
  %div116 = fdiv double %conv112, %add115
  %conv117 = fptrunc double %div116 to float
  %call.i430 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.6.lcssa, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.24.181, i64 0, i64 0)) #14
  %conv.i433 = fpext float %conv117 to double
  %call.i434 = tail call i8* @halide_double_to_string(i8* %call.i430, i8* %sstr.sroa.125.0, double %conv.i433, i32 0) #14
  %tobool.not.i436 = icmp eq i8* %call.i434, null
  br i1 %tobool.not.i436, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442, label %if.then.i441

if.then.i441:                                     ; preds = %if.then109
  %add.ptr.i437 = getelementptr inbounds i8, i8* %call.i434, i64 -3
  %cmp.i439 = icmp ult i8* %add.ptr.i437, %call.i
  %spec.store.select.i440 = select i1 %cmp.i439, i8* %call.i, i8* %add.ptr.i437
  store i8 0, i8* %spec.store.select.i440, align 1, !tbaa !18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442: ; preds = %if.then.i441, %if.then109
  %sstr.sroa.19.7 = phi i8* [ null, %if.then109 ], [ %spec.store.select.i440, %if.then.i441 ]
  %sub.ptr.lhs.cast.i447606 = ptrtoint i8* %sstr.sroa.19.7 to i64
  %sub.ptr.sub.i449607 = sub i64 %sub.ptr.lhs.cast.i447606, %sub.ptr.rhs.cast.i.i348
  %cmp123608 = icmp ult i64 %sub.ptr.sub.i449607, 58
  br i1 %cmp123608, label %while.body124, label %if.end127

while.body124:                                    ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442, %while.body124
  %sstr.sroa.19.8609 = phi i8* [ %call.i455, %while.body124 ], [ %sstr.sroa.19.7, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442 ]
  %call.i455 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.8609, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #14
  %sub.ptr.lhs.cast.i447 = ptrtoint i8* %call.i455 to i64
  %sub.ptr.sub.i449 = sub i64 %sub.ptr.lhs.cast.i447, %sub.ptr.rhs.cast.i.i348
  %cmp123 = icmp ult i64 %sub.ptr.sub.i449, 58
  br i1 %cmp123, label %while.body124, label %if.end127, !llvm.loop !362

if.end127:                                        ; preds = %while.body124, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442, %while.end107
  %sstr.sroa.19.9 = phi i8* [ %sstr.sroa.19.6.lcssa, %while.end107 ], [ %sstr.sroa.19.7, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442 ], [ %call.i455, %while.body124 ]
  %cursor.0 = phi i64 [ 58, %while.end107 ], [ 73, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442 ], [ 73, %while.body124 ]
  %memory_peak128 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 2
  %32 = load i64, i64* %memory_peak128, align 8, !tbaa !363
  %tobool129.not = icmp eq i64 %32, 0
  br i1 %tobool129.not, label %if.end162, label %if.then130

if.then130:                                       ; preds = %if.end127
  %call.i458 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.9, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.25.182, i64 0, i64 0)) #14
  %33 = load i64, i64* %memory_peak128, align 8, !tbaa !363
  %call.i461 = tail call i8* @halide_uint64_to_string(i8* %call.i458, i8* %sstr.sroa.125.0, i64 %33, i32 1) #14
  %sub.ptr.lhs.cast.i462611 = ptrtoint i8* %call.i461 to i64
  %sub.ptr.sub.i464612 = sub i64 %sub.ptr.lhs.cast.i462611, %sub.ptr.rhs.cast.i.i348
  %cmp137613 = icmp ult i64 %sub.ptr.sub.i464612, %cursor.0
  br i1 %cmp137613, label %while.body138, label %while.end140

while.body138:                                    ; preds = %if.then130, %while.body138
  %sstr.sroa.19.10614 = phi i8* [ %call.i470, %while.body138 ], [ %call.i461, %if.then130 ]
  %call.i470 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.10614, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #14
  %sub.ptr.lhs.cast.i462 = ptrtoint i8* %call.i470 to i64
  %sub.ptr.sub.i464 = sub i64 %sub.ptr.lhs.cast.i462, %sub.ptr.rhs.cast.i.i348
  %cmp137 = icmp ult i64 %sub.ptr.sub.i464, %cursor.0
  br i1 %cmp137, label %while.body138, label %while.end140, !llvm.loop !364

while.end140:                                     ; preds = %while.body138, %if.then130
  %sstr.sroa.19.10.lcssa = phi i8* [ %call.i461, %if.then130 ], [ %call.i470, %while.body138 ]
  %call.i473 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.10.lcssa, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.26.183, i64 0, i64 0)) #14
  %num_allocs142 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 8
  %34 = load i32, i32* %num_allocs142, align 8, !tbaa !365
  %conv.i476 = sext i32 %34 to i64
  %call.i477 = tail call i8* @halide_int64_to_string(i8* %call.i473, i8* %sstr.sroa.125.0, i64 %conv.i476, i32 1) #14
  %add144 = add nuw nsw i64 %cursor.0, 15
  %sub.ptr.lhs.cast.i478616 = ptrtoint i8* %call.i477 to i64
  %sub.ptr.sub.i480617 = sub i64 %sub.ptr.lhs.cast.i478616, %sub.ptr.rhs.cast.i.i348
  %cmp147618 = icmp ult i64 %sub.ptr.sub.i480617, %add144
  br i1 %cmp147618, label %while.body148, label %while.end150

while.body148:                                    ; preds = %while.end140, %while.body148
  %sstr.sroa.19.11619 = phi i8* [ %call.i467, %while.body148 ], [ %call.i477, %while.end140 ]
  %call.i467 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.11619, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #14
  %sub.ptr.lhs.cast.i478 = ptrtoint i8* %call.i467 to i64
  %sub.ptr.sub.i480 = sub i64 %sub.ptr.lhs.cast.i478, %sub.ptr.rhs.cast.i.i348
  %cmp147 = icmp ult i64 %sub.ptr.sub.i480, %add144
  br i1 %cmp147, label %while.body148, label %while.end150, !llvm.loop !366

while.end150:                                     ; preds = %while.body148, %while.end140
  %sstr.sroa.19.11.lcssa = phi i8* [ %call.i477, %while.end140 ], [ %call.i467, %while.body148 ]
  %35 = load i32, i32* %num_allocs142, align 8, !tbaa !365
  %cmp152.not = icmp eq i32 %35, 0
  br i1 %cmp152.not, label %if.end159, label %if.then153

if.then153:                                       ; preds = %while.end150
  %memory_total154 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 3
  %36 = load i64, i64* %memory_total154, align 8, !tbaa !367
  %conv156 = sext i32 %35 to i64
  %div157 = udiv i64 %36, %conv156
  br label %if.end159

if.end159:                                        ; preds = %if.then153, %while.end150
  %alloc_avg.0 = phi i64 [ %div157, %if.then153 ], [ 0, %while.end150 ]
  %call.i452 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.11.lcssa, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.27.184, i64 0, i64 0)) #14
  %sext586 = shl i64 %alloc_avg.0, 32
  %conv.i445 = ashr exact i64 %sext586, 32
  %call.i446 = tail call i8* @halide_int64_to_string(i8* %call.i452, i8* %sstr.sroa.125.0, i64 %conv.i445, i32 1) #14
  br label %if.end162

if.end162:                                        ; preds = %if.end159, %if.end127
  %sstr.sroa.19.12 = phi i8* [ %sstr.sroa.19.9, %if.end127 ], [ %call.i446, %if.end159 ]
  %stack_peak163 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 4
  %37 = load i64, i64* %stack_peak163, align 8, !tbaa !353
  %cmp164.not = icmp eq i64 %37, 0
  br i1 %cmp164.not, label %if.end169, label %if.then165

if.then165:                                       ; preds = %if.end162
  %call.i424 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.12, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.28.185, i64 0, i64 0)) #14
  %38 = load i64, i64* %stack_peak163, align 8, !tbaa !353
  %call.i405 = tail call i8* @halide_uint64_to_string(i8* %call.i424, i8* %sstr.sroa.125.0, i64 %38, i32 1) #14
  br label %if.end169

if.end169:                                        ; preds = %if.then165, %if.end162
  %sstr.sroa.19.13 = phi i8* [ %sstr.sroa.19.12, %if.end162 ], [ %call.i405, %if.then165 ]
  %call.i396 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.13, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #14
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit381, label %if.then.i379

if.then.i379:                                     ; preds = %if.end169
  %sub.ptr.lhs.cast.i.i374 = ptrtoint i8* %call.i396 to i64
  %add.i.i377 = add i64 %sub.ptr.sub.i.i349, %sub.ptr.lhs.cast.i.i374
  %call.i.i378 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i377) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit381

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit381: ; preds = %if.then.i379, %if.end169
  %retval.0.i380 = phi i8* [ %call.i, %if.then.i379 ], [ getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0), %if.end169 ]
  tail call void @halide_print(i8* %user_context, i8* nonnull %retval.0.i380) #14
  br label %cleanup172

cleanup172:                                       ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit381, %land.lhs.true
  %sstr.sroa.19.14 = phi i8* [ %call.i, %land.lhs.true ], [ %call.i396, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit381 ]
  %indvars.iv.next631 = add nuw nsw i64 %indvars.iv630, 1
  %39 = load i32, i32* %num_funcs54, align 8, !tbaa !350
  %40 = sext i32 %39 to i64
  %cmp55 = icmp slt i64 %indvars.iv.next631, %40
  br i1 %cmp55, label %for.body57, label %cleanup181, !llvm.loop !368

cleanup181:                                       ; preds = %for.cond41, %cleanup172, %for.cond53.preheader, %for.cond41.preheader, %for.body
  %sstr.sroa.19.15 = phi i8* [ %sstr.sroa.19.0626, %for.body ], [ %call.i344, %for.cond53.preheader ], [ %call.i344, %for.cond41.preheader ], [ %sstr.sroa.19.14, %cleanup172 ], [ %call.i344, %for.cond41 ]
  %next = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 8
  %41 = bitcast i8** %next to %struct.halide_profiler_pipeline_stats**
  %p.0 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %41, align 8, !tbaa !14
  %tobool.not = icmp eq %struct.halide_profiler_pipeline_stats* %p.0, null
  br i1 %tobool.not, label %for.cond.cleanup, label %for.body, !llvm.loop !369
}

; Function Attrs: nounwind mustprogress
define weak void @halide_profiler_reset_unlocked(%struct.halide_profiler_state* %s) local_unnamed_addr #0 {
entry:
  %pipelines = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 5
  %0 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !370
  %tobool.not9 = icmp eq %struct.halide_profiler_pipeline_stats* %0, null
  br i1 %tobool.not9, label %while.end, label %while.body

while.body:                                       ; preds = %entry, %while.body
  %1 = phi %struct.halide_profiler_pipeline_stats* [ %7, %while.body ], [ %0, %entry ]
  %next = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %1, i64 0, i32 8
  %2 = bitcast i8** %next to %struct.halide_profiler_pipeline_stats**
  %3 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %2, align 8, !tbaa !371
  store %struct.halide_profiler_pipeline_stats* %3, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !370
  %funcs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %1, i64 0, i32 7
  %4 = bitcast %struct.halide_profiler_func_stats** %funcs to i8**
  %5 = load i8*, i8** %4, align 8, !tbaa !351
  tail call void @free(i8* %5) #14
  %6 = bitcast %struct.halide_profiler_pipeline_stats* %1 to i8*
  tail call void @free(i8* nonnull %6) #14
  %7 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !370
  %tobool.not = icmp eq %struct.halide_profiler_pipeline_stats* %7, null
  br i1 %tobool.not, label %while.end, label %while.body, !llvm.loop !372

while.end:                                        ; preds = %while.body, %entry
  %first_free_id = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 2
  store i32 0, i32* %first_free_id, align 4, !tbaa !373
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce %struct.halide_profiler_pipeline_stats* @_ZN6Halide7Runtime8Internal23find_or_create_pipelineEPKciPKy(i8* %pipeline_name, i32 %num_funcs, i64* %func_names) local_unnamed_addr #0 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #15
  %pipelines = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 5
  %p.0121 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !14
  %tobool.not122 = icmp eq %struct.halide_profiler_pipeline_stats* %p.0121, null
  br i1 %tobool.not122, label %for.end, label %for.body

for.body:                                         ; preds = %entry, %for.inc
  %p.0123 = phi %struct.halide_profiler_pipeline_stats* [ %p.0, %for.inc ], [ %p.0121, %entry ]
  %name = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0123, i64 0, i32 6
  %0 = load i8*, i8** %name, align 8, !tbaa !345
  %cmp = icmp eq i8* %0, %pipeline_name
  br i1 %cmp, label %land.lhs.true, label %for.inc

land.lhs.true:                                    ; preds = %for.body
  %num_funcs1 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0123, i64 0, i32 9
  %1 = load i32, i32* %num_funcs1, align 8, !tbaa !350
  %cmp2 = icmp eq i32 %1, %num_funcs
  br i1 %cmp2, label %cleanup62, label %for.inc

for.inc:                                          ; preds = %land.lhs.true, %for.body
  %next = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0123, i64 0, i32 8
  %2 = bitcast i8** %next to %struct.halide_profiler_pipeline_stats**
  %p.0 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %2, align 8, !tbaa !14
  %tobool.not = icmp eq %struct.halide_profiler_pipeline_stats* %p.0, null
  br i1 %tobool.not, label %for.end, label %for.body, !llvm.loop !374

for.end:                                          ; preds = %for.inc, %entry
  %call4 = tail call i8* @malloc(i64 96) #14
  %3 = bitcast i8* %call4 to %struct.halide_profiler_pipeline_stats*
  %tobool5.not = icmp eq i8* %call4, null
  br i1 %tobool5.not, label %cleanup62, label %if.end7

if.end7:                                          ; preds = %for.end
  %4 = bitcast %struct.halide_profiler_pipeline_stats** %pipelines to i8**
  %5 = load i8*, i8** %4, align 8, !tbaa !370
  %next9 = getelementptr inbounds i8, i8* %call4, i64 64
  %6 = bitcast i8* %next9 to i8**
  store i8* %5, i8** %6, align 8, !tbaa !371
  %name10 = getelementptr inbounds i8, i8* %call4, i64 48
  %7 = bitcast i8* %name10 to i8**
  store i8* %pipeline_name, i8** %7, align 8, !tbaa !345
  %first_free_id = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 2
  %8 = load i32, i32* %first_free_id, align 4, !tbaa !373
  %first_func_id = getelementptr inbounds i8, i8* %call4, i64 76
  %9 = bitcast i8* %first_func_id to i32*
  store i32 %8, i32* %9, align 4, !tbaa !375
  %num_funcs11 = getelementptr inbounds i8, i8* %call4, i64 72
  %10 = bitcast i8* %num_funcs11 to i32*
  store i32 %num_funcs, i32* %10, align 8, !tbaa !350
  %runs = getelementptr inbounds i8, i8* %call4, i64 80
  %11 = bitcast i8* %runs to <2 x i32>*
  store <2 x i32> zeroinitializer, <2 x i32>* %11, align 8, !tbaa !41
  %12 = bitcast i8* %call4 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %12, align 8, !tbaa !22
  %memory_peak = getelementptr inbounds i8, i8* %call4, i64 16
  %13 = bitcast i8* %memory_peak to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %13, align 8, !tbaa !22
  %num_allocs = getelementptr inbounds i8, i8* %call4, i64 88
  %14 = bitcast i8* %num_allocs to i32*
  store i32 0, i32* %14, align 8, !tbaa !347
  %active_threads_numerator = getelementptr inbounds i8, i8* %call4, i64 32
  %15 = bitcast i8* %active_threads_numerator to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %15, align 8, !tbaa !22
  %conv = sext i32 %num_funcs to i64
  %mul = mul nsw i64 %conv, 72
  %call12 = tail call i8* @malloc(i64 %mul) #14
  %funcs = getelementptr inbounds i8, i8* %call4, i64 56
  %16 = bitcast i8* %funcs to i8**
  store i8* %call12, i8** %16, align 8, !tbaa !351
  %tobool14.not = icmp eq i8* %call12, null
  %17 = bitcast i8* %call12 to %struct.halide_profiler_func_stats*
  br i1 %tobool14.not, label %if.then15, label %for.cond17.preheader

for.cond17.preheader:                             ; preds = %if.end7
  %cmp18119 = icmp sgt i32 %num_funcs, 0
  br i1 %cmp18119, label %for.body20.lr.ph, label %for.cond.cleanup19

for.body20.lr.ph:                                 ; preds = %for.cond17.preheader
  %wide.trip.count = zext i32 %num_funcs to i64
  br label %for.body20

if.then15:                                        ; preds = %if.end7
  tail call void @free(i8* nonnull %call4) #14
  br label %cleanup62

for.cond.cleanup19:                               ; preds = %for.body20, %for.cond17.preheader
  %18 = load i32, i32* %first_free_id, align 4, !tbaa !373
  %add = add nsw i32 %18, %num_funcs
  store i32 %add, i32* %first_free_id, align 4, !tbaa !373
  store i8* %call4, i8** %4, align 8, !tbaa !370
  br label %cleanup62

for.body20:                                       ; preds = %for.body20, %for.body20.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body20.lr.ph ], [ %indvars.iv.next, %for.body20 ]
  %time22 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv, i32 0
  store i64 0, i64* %time22, align 8, !tbaa !355
  %arrayidx24 = getelementptr inbounds i64, i64* %func_names, i64 %indvars.iv
  %19 = load i64, i64* %arrayidx24, align 8, !tbaa !22
  %20 = inttoptr i64 %19 to i8*
  %name28 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv, i32 7
  store i8* %20, i8** %name28, align 8, !tbaa !356
  %memory_current32 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv, i32 1
  %21 = bitcast i64* %memory_current32 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %21, align 8, !tbaa !22
  %memory_total40 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv, i32 3
  %num_allocs44 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv, i32 8
  store i32 0, i32* %num_allocs44, align 8, !tbaa !365
  %22 = bitcast i64* %memory_total40 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %22, align 8, !tbaa !22
  %active_threads_numerator51 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv, i32 5
  %23 = bitcast i64* %active_threads_numerator51 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %23, align 8, !tbaa !22
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.cleanup19, label %for.body20, !llvm.loop !376

cleanup62:                                        ; preds = %land.lhs.true, %for.cond.cleanup19, %if.then15, %for.end
  %retval.2 = phi %struct.halide_profiler_pipeline_stats* [ %3, %for.cond.cleanup19 ], [ null, %if.then15 ], [ null, %for.end ], [ %p.0123, %land.lhs.true ]
  ret %struct.halide_profiler_pipeline_stats* %retval.2
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal9bill_funcEP21halide_profiler_stateiyi(%struct.halide_profiler_state* %s, i32 %func_id, i64 %time, i32 %active_threads) local_unnamed_addr #0 {
entry:
  %pipelines = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 5
  %p.055 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !14
  %tobool.not56 = icmp eq %struct.halide_profiler_pipeline_stats* %p.055, null
  br i1 %tobool.not56, label %cleanup25, label %for.body

for.body:                                         ; preds = %entry, %if.end23
  %p.058 = phi %struct.halide_profiler_pipeline_stats* [ %p.0, %if.end23 ], [ %p.055, %entry ]
  %p_prev.057 = phi %struct.halide_profiler_pipeline_stats* [ %p.058, %if.end23 ], [ null, %entry ]
  %first_func_id = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 10
  %0 = load i32, i32* %first_func_id, align 4, !tbaa !375
  %cmp.not = icmp sgt i32 %0, %func_id
  br i1 %cmp.not, label %if.end23, label %land.lhs.true

land.lhs.true:                                    ; preds = %for.body
  %num_funcs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 9
  %1 = load i32, i32* %num_funcs, align 8, !tbaa !350
  %add = add nsw i32 %1, %0
  %cmp2 = icmp sgt i32 %add, %func_id
  br i1 %cmp2, label %if.then, label %if.end23

if.then:                                          ; preds = %land.lhs.true
  %tobool3.not = icmp eq %struct.halide_profiler_pipeline_stats* %p_prev.057, null
  br i1 %tobool3.not, label %if.end, label %if.then4

if.then4:                                         ; preds = %if.then
  %next = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 8
  %2 = load i8*, i8** %next, align 8, !tbaa !371
  %next5 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p_prev.057, i64 0, i32 8
  store i8* %2, i8** %next5, align 8, !tbaa !371
  %3 = bitcast i8** %next to %struct.halide_profiler_pipeline_stats**
  store %struct.halide_profiler_pipeline_stats* %p.055, %struct.halide_profiler_pipeline_stats** %3, align 8, !tbaa !371
  store %struct.halide_profiler_pipeline_stats* %p.058, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !370
  br label %if.end

if.end:                                           ; preds = %if.then4, %if.then
  %funcs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 7
  %4 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %funcs, align 8, !tbaa !351
  %idx.ext = sext i32 %func_id to i64
  %add.ptr = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %4, i64 %idx.ext
  %idx.ext10 = sext i32 %0 to i64
  %idx.neg = sub nsw i64 0, %idx.ext10
  %add.ptr11 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %add.ptr, i64 %idx.neg
  %time12 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %add.ptr11, i64 0, i32 0
  %5 = load i64, i64* %time12, align 8, !tbaa !355
  %add13 = add i64 %5, %time
  store i64 %add13, i64* %time12, align 8, !tbaa !355
  %conv = sext i32 %active_threads to i64
  %active_threads_numerator = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %add.ptr11, i64 0, i32 5
  %6 = load i64, i64* %active_threads_numerator, align 8, !tbaa !360
  %add14 = add i64 %6, %conv
  store i64 %add14, i64* %active_threads_numerator, align 8, !tbaa !360
  %active_threads_denominator = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %add.ptr11, i64 0, i32 6
  %7 = load i64, i64* %active_threads_denominator, align 8, !tbaa !361
  %add15 = add i64 %7, 1
  store i64 %add15, i64* %active_threads_denominator, align 8, !tbaa !361
  %time16 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 0
  %8 = load i64, i64* %time16, align 8, !tbaa !340
  %add17 = add i64 %8, %time
  store i64 %add17, i64* %time16, align 8, !tbaa !340
  %samples = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 12
  %9 = load i32, i32* %samples, align 4, !tbaa !346
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %samples, align 4, !tbaa !346
  %active_threads_numerator19 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 4
  %10 = load i64, i64* %active_threads_numerator19, align 8, !tbaa !343
  %add20 = add i64 %10, %conv
  store i64 %add20, i64* %active_threads_numerator19, align 8, !tbaa !343
  %active_threads_denominator21 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 5
  %11 = load i64, i64* %active_threads_denominator21, align 8, !tbaa !344
  %add22 = add i64 %11, 1
  store i64 %add22, i64* %active_threads_denominator21, align 8, !tbaa !344
  ret void

if.end23:                                         ; preds = %land.lhs.true, %for.body
  %next24 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 8
  %12 = bitcast i8** %next24 to %struct.halide_profiler_pipeline_stats**
  %p.0 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %12, align 8, !tbaa !14
  %tobool.not = icmp eq %struct.halide_profiler_pipeline_stats* %p.0, null
  br i1 %tobool.not, label %cleanup25, label %for.body, !llvm.loop !377

cleanup25:                                        ; preds = %if.end23, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_profiler_sample(%struct.halide_profiler_state* %s, i64* %prev_t) local_unnamed_addr #0 {
entry:
  %func = alloca i32, align 4
  %active_threads = alloca i32, align 4
  %0 = bitcast i32* %func to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0) #11
  %1 = bitcast i32* %active_threads to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1) #11
  %get_remote_profiler_state = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 6
  %2 = load void (i32*, i32*)*, void (i32*, i32*)** %get_remote_profiler_state, align 8, !tbaa !378
  %tobool.not = icmp eq void (i32*, i32*)* %2, null
  br i1 %tobool.not, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  call void %2(i32* nonnull %func, i32* nonnull %active_threads) #14
  br label %if.end

if.else:                                          ; preds = %entry
  %current_func = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 3
  %3 = load i32, i32* %current_func, align 8, !tbaa !339
  store i32 %3, i32* %func, align 4, !tbaa !41
  %active_threads2 = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 4
  %4 = load i32, i32* %active_threads2, align 4, !tbaa !379
  store i32 %4, i32* %active_threads, align 4, !tbaa !41
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %call = call i64 @halide_current_time_ns(i8* null) #14
  %5 = load i32, i32* %func, align 4, !tbaa !41
  %cmp = icmp eq i32 %5, -2
  br i1 %cmp, label %cleanup, label %if.else4

if.else4:                                         ; preds = %if.end
  %cmp5 = icmp sgt i32 %5, -1
  br i1 %cmp5, label %if.then6, label %if.end8

if.then6:                                         ; preds = %if.else4
  %6 = load i64, i64* %prev_t, align 8, !tbaa !22
  %sub = sub i64 %call, %6
  %7 = load i32, i32* %active_threads, align 4, !tbaa !41
  call void @_ZN6Halide7Runtime8Internal9bill_funcEP21halide_profiler_stateiyi(%struct.halide_profiler_state* nonnull %s, i32 %5, i64 %sub, i32 %7) #15
  br label %if.end8

if.end8:                                          ; preds = %if.then6, %if.else4
  store i64 %call, i64* %prev_t, align 8, !tbaa !22
  %sleep_time = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 1
  %8 = load i32, i32* %sleep_time, align 8, !tbaa !380
  br label %cleanup

cleanup:                                          ; preds = %if.end8, %if.end
  %retval.0 = phi i32 [ %8, %if.end8 ], [ -1, %if.end ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0) #11
  ret i32 %retval.0
}

; Function Attrs: nounwind
define linkonce void @_ZN6Halide7Runtime8Internal24sampling_profiler_threadEPv(i8* %0) #4 {
entry:
  %t = alloca i64, align 8
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #15
  %lock = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 0
  tail call void @halide_mutex_lock(%struct.halide_mutex* %lock) #14
  %current_func = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 3
  %1 = load i32, i32* %current_func, align 8, !tbaa !339
  %cmp.not23 = icmp eq i32 %1, -2
  br i1 %cmp.not23, label %while.end8, label %while.body.lr.ph

while.body.lr.ph:                                 ; preds = %entry
  %2 = bitcast i64* %t to i8*
  br label %while.body

while.body:                                       ; preds = %while.end, %while.body.lr.ph
  %call1 = call i64 @halide_current_time_ns(i8* null) #14
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %2) #11
  store i64 %call1, i64* %t, align 8, !tbaa !22
  %call420 = call i32 @halide_profiler_sample(%struct.halide_profiler_state* nonnull %call, i64* nonnull %t) #15
  %cmp521 = icmp slt i32 %call420, 0
  br i1 %cmp521, label %while.end, label %if.end

if.end:                                           ; preds = %while.body, %if.end
  %call422 = phi i32 [ %call4, %if.end ], [ %call420, %while.body ]
  call void @halide_mutex_unlock(%struct.halide_mutex* %lock) #14
  call void @halide_sleep_ms(i8* null, i32 %call422) #14
  call void @halide_mutex_lock(%struct.halide_mutex* %lock) #14
  %call4 = call i32 @halide_profiler_sample(%struct.halide_profiler_state* %call, i64* nonnull %t) #15
  %cmp5 = icmp slt i32 %call4, 0
  br i1 %cmp5, label %while.end, label %if.end

while.end:                                        ; preds = %if.end, %while.body
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %2) #11
  %3 = load i32, i32* %current_func, align 8, !tbaa !339
  %cmp.not = icmp eq i32 %3, -2
  br i1 %cmp.not, label %while.end8, label %while.body, !llvm.loop !381

while.end8:                                       ; preds = %while.end, %entry
  call void @halide_mutex_unlock(%struct.halide_mutex* nonnull %lock) #14
  ret void
}

; Function Attrs: nounwind
define weak %struct.halide_profiler_pipeline_stats* @halide_profiler_get_pipeline_state(i8* %pipeline_name) local_unnamed_addr #4 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #15
  %lock.i = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 0
  tail call void @halide_mutex_lock(%struct.halide_mutex* %lock.i) #14
  %pipelines = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 5
  %p.013 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !14
  %tobool.not14 = icmp eq %struct.halide_profiler_pipeline_stats* %p.013, null
  br i1 %tobool.not14, label %cleanup, label %for.body

for.body:                                         ; preds = %entry, %for.inc
  %p.015 = phi %struct.halide_profiler_pipeline_stats* [ %p.0, %for.inc ], [ %p.013, %entry ]
  %name = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.015, i64 0, i32 6
  %0 = load i8*, i8** %name, align 8, !tbaa !345
  %cmp = icmp eq i8* %0, %pipeline_name
  br i1 %cmp, label %cleanup, label %for.inc

for.inc:                                          ; preds = %for.body
  %next = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.015, i64 0, i32 8
  %1 = bitcast i8** %next to %struct.halide_profiler_pipeline_stats**
  %p.0 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %1, align 8, !tbaa !14
  %tobool.not = icmp eq %struct.halide_profiler_pipeline_stats* %p.0, null
  br i1 %tobool.not, label %cleanup, label %for.body, !llvm.loop !382

cleanup:                                          ; preds = %for.inc, %for.body, %entry
  %p.0.lcssa = phi %struct.halide_profiler_pipeline_stats* [ null, %entry ], [ null, %for.inc ], [ %p.015, %for.body ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* %lock.i) #14
  ret %struct.halide_profiler_pipeline_stats* %p.0.lcssa
}

; Function Attrs: nounwind
define weak i32 @halide_profiler_pipeline_start(i8* %user_context, i8* %pipeline_name, i32 %num_funcs, i64* %func_names) local_unnamed_addr #4 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #15
  %lock.i = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 0
  tail call void @halide_mutex_lock(%struct.halide_mutex* %lock.i) #14
  %sampling_thread = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 7
  %0 = load %struct.halide_thread*, %struct.halide_thread** %sampling_thread, align 8, !tbaa !337
  %tobool.not = icmp eq %struct.halide_thread* %0, null
  br i1 %tobool.not, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call1 = tail call i32 @halide_start_clock(i8* %user_context) #14
  %call2 = tail call %struct.halide_thread* @halide_spawn_thread(void (i8*)* nonnull @_ZN6Halide7Runtime8Internal24sampling_profiler_threadEPv, i8* null) #14
  store %struct.halide_thread* %call2, %struct.halide_thread** %sampling_thread, align 8, !tbaa !337
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %call4 = tail call %struct.halide_profiler_pipeline_stats* @_ZN6Halide7Runtime8Internal23find_or_create_pipelineEPKciPKy(i8* %pipeline_name, i32 %num_funcs, i64* %func_names) #15
  %tobool5.not = icmp eq %struct.halide_profiler_pipeline_stats* %call4, null
  br i1 %tobool5.not, label %if.then6, label %if.end8

if.then6:                                         ; preds = %if.end
  %call7 = tail call i32 @halide_error_out_of_memory(i8* %user_context) #14
  br label %cleanup

if.end8:                                          ; preds = %if.end
  %runs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %call4, i64 0, i32 11
  %1 = load i32, i32* %runs, align 8, !tbaa !342
  %inc = add nsw i32 %1, 1
  store i32 %inc, i32* %runs, align 8, !tbaa !342
  %first_func_id = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %call4, i64 0, i32 10
  %2 = load i32, i32* %first_func_id, align 4, !tbaa !375
  br label %cleanup

cleanup:                                          ; preds = %if.end8, %if.then6
  %retval.0 = phi i32 [ %2, %if.end8 ], [ %call7, %if.then6 ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull %lock.i) #14
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak void @halide_profiler_stack_peak_update(i8* %user_context, i8* %pipeline_state, i64* %f_values) local_unnamed_addr #0 {
entry:
  %cmp.not = icmp eq i8* %pipeline_state, null
  br i1 %cmp.not, label %if.then, label %do.end

if.then:                                          ; preds = %entry
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @.str.186, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %do.end

do.end:                                           ; preds = %if.then, %entry
  %num_funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 72
  %0 = bitcast i8* %num_funcs to i32*
  %1 = load i32, i32* %0, align 8, !tbaa !350
  %cmp118 = icmp sgt i32 %1, 0
  br i1 %cmp118, label %for.body.lr.ph, label %for.cond.cleanup

for.body.lr.ph:                                   ; preds = %do.end
  %funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 56
  %2 = bitcast i8* %funcs to %struct.halide_profiler_func_stats**
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.inc, %do.end
  ret void

for.body:                                         ; preds = %for.inc, %for.body.lr.ph
  %3 = phi i32 [ %1, %for.body.lr.ph ], [ %9, %for.inc ]
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.inc ]
  %arrayidx = getelementptr inbounds i64, i64* %f_values, i64 %indvars.iv
  %4 = load i64, i64* %arrayidx, align 8, !tbaa !22
  %cmp2.not = icmp eq i64 %4, 0
  br i1 %cmp2.not, label %for.inc, label %if.then3

if.then3:                                         ; preds = %for.body
  %5 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %2, align 8, !tbaa !351
  %stack_peak = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %5, i64 %indvars.iv, i32 4
  %6 = load i64, i64* %stack_peak, align 8, !tbaa !22
  br label %while.cond.i

while.cond.i:                                     ; preds = %while.body.i, %if.then3
  %old_val.0.i = phi i64 [ %6, %if.then3 ], [ %8, %while.body.i ]
  %cmp.i = icmp ult i64 %old_val.0.i, %4
  br i1 %cmp.i, label %while.body.i, label %for.inc.loopexit

while.body.i:                                     ; preds = %while.cond.i
  %7 = cmpxchg i64* %stack_peak, i64 %old_val.0.i, i64 %4 seq_cst seq_cst
  %8 = extractvalue { i64, i1 } %7, 0
  %cmp1.i = icmp eq i64 %old_val.0.i, %8
  br i1 %cmp1.i, label %for.inc.loopexit, label %while.cond.i, !llvm.loop !383

for.inc.loopexit:                                 ; preds = %while.body.i, %while.cond.i
  %.pre = load i32, i32* %0, align 8, !tbaa !350
  br label %for.inc

for.inc:                                          ; preds = %for.inc.loopexit, %for.body
  %9 = phi i32 [ %.pre, %for.inc.loopexit ], [ %3, %for.body ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %10 = sext i32 %9 to i64
  %cmp1 = icmp slt i64 %indvars.iv.next, %10
  br i1 %cmp1, label %for.body, label %for.cond.cleanup, !llvm.loop !384
}

; Function Attrs: nounwind mustprogress
define weak void @halide_profiler_memory_allocate(i8* %user_context, i8* %pipeline_state, i32 %func_id, i64 %incr) local_unnamed_addr #0 {
entry:
  %cmp = icmp eq i64 %incr, 0
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %cmp1.not = icmp eq i8* %pipeline_state, null
  br i1 %cmp1.not, label %if.then2, label %do.body4

if.then2:                                         ; preds = %if.end
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @.str.1.187, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %do.body4

do.body4:                                         ; preds = %if.then2, %if.end
  %cmp5 = icmp sgt i32 %func_id, -1
  br i1 %cmp5, label %do.body10, label %if.then6

if.then6:                                         ; preds = %do.body4
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([122 x i8], [122 x i8]* @.str.2.188, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %do.body10

do.body10:                                        ; preds = %if.then6, %do.body4
  %num_funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 72
  %0 = bitcast i8* %num_funcs to i32*
  %1 = load i32, i32* %0, align 8, !tbaa !350
  %cmp11 = icmp sgt i32 %1, %func_id
  br i1 %cmp11, label %do.end15, label %if.then12

if.then12:                                        ; preds = %do.body10
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([138 x i8], [138 x i8]* @.str.3.189, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %do.end15

do.end15:                                         ; preds = %if.then12, %do.body10
  %funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 56
  %2 = bitcast i8* %funcs to %struct.halide_profiler_func_stats**
  %3 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %2, align 8, !tbaa !351
  %idxprom = sext i32 %func_id to i64
  %num_allocs = getelementptr inbounds i8, i8* %pipeline_state, i64 88
  %4 = bitcast i8* %num_allocs to i32*
  %5 = atomicrmw add i32* %4, i32 1 seq_cst
  %memory_total = getelementptr inbounds i8, i8* %pipeline_state, i64 24
  %6 = bitcast i8* %memory_total to i64*
  %7 = atomicrmw add i64* %6, i64 %incr seq_cst
  %memory_current = getelementptr inbounds i8, i8* %pipeline_state, i64 8
  %8 = bitcast i8* %memory_current to i64*
  %9 = atomicrmw add i64* %8, i64 %incr seq_cst
  %10 = add i64 %9, %incr
  %memory_peak = getelementptr inbounds i8, i8* %pipeline_state, i64 16
  %11 = bitcast i8* %memory_peak to i64*
  %12 = load i64, i64* %11, align 8, !tbaa !22
  br label %while.cond.i

while.cond.i:                                     ; preds = %while.body.i, %do.end15
  %old_val.0.i = phi i64 [ %12, %do.end15 ], [ %14, %while.body.i ]
  %cmp.i = icmp ult i64 %old_val.0.i, %10
  br i1 %cmp.i, label %while.body.i, label %_ZN12_GLOBAL__N_125sync_compare_max_and_swapIyEEvPT_S1_.exit

while.body.i:                                     ; preds = %while.cond.i
  %13 = cmpxchg i64* %11, i64 %old_val.0.i, i64 %10 seq_cst seq_cst
  %14 = extractvalue { i64, i1 } %13, 0
  %cmp1.i = icmp eq i64 %old_val.0.i, %14
  br i1 %cmp1.i, label %_ZN12_GLOBAL__N_125sync_compare_max_and_swapIyEEvPT_S1_.exit, label %while.cond.i, !llvm.loop !383

_ZN12_GLOBAL__N_125sync_compare_max_and_swapIyEEvPT_S1_.exit: ; preds = %while.body.i, %while.cond.i
  %num_allocs16 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %3, i64 %idxprom, i32 8
  %15 = atomicrmw add i32* %num_allocs16, i32 1 seq_cst
  %memory_total17 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %3, i64 %idxprom, i32 3
  %16 = atomicrmw add i64* %memory_total17, i64 %incr seq_cst
  %memory_current18 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %3, i64 %idxprom, i32 1
  %17 = atomicrmw add i64* %memory_current18, i64 %incr seq_cst
  %18 = add i64 %17, %incr
  %memory_peak19 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %3, i64 %idxprom, i32 2
  %19 = load i64, i64* %memory_peak19, align 8, !tbaa !22
  br label %while.cond.i43

while.cond.i43:                                   ; preds = %while.body.i45, %_ZN12_GLOBAL__N_125sync_compare_max_and_swapIyEEvPT_S1_.exit
  %old_val.0.i41 = phi i64 [ %19, %_ZN12_GLOBAL__N_125sync_compare_max_and_swapIyEEvPT_S1_.exit ], [ %21, %while.body.i45 ]
  %cmp.i42 = icmp ult i64 %old_val.0.i41, %18
  br i1 %cmp.i42, label %while.body.i45, label %return

while.body.i45:                                   ; preds = %while.cond.i43
  %20 = cmpxchg i64* %memory_peak19, i64 %old_val.0.i41, i64 %18 seq_cst seq_cst
  %21 = extractvalue { i64, i1 } %20, 0
  %cmp1.i44 = icmp eq i64 %old_val.0.i41, %21
  br i1 %cmp1.i44, label %return, label %while.cond.i43, !llvm.loop !383

return:                                           ; preds = %while.body.i45, %while.cond.i43, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define weak void @halide_profiler_memory_free(i8* %user_context, i8* %pipeline_state, i32 %func_id, i64 %decr) local_unnamed_addr #0 {
entry:
  %cmp = icmp eq i64 %decr, 0
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %cmp1.not = icmp eq i8* %pipeline_state, null
  br i1 %cmp1.not, label %if.then2, label %do.body4

if.then2:                                         ; preds = %if.end
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @.str.4.190, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %do.body4

do.body4:                                         ; preds = %if.then2, %if.end
  %cmp5 = icmp sgt i32 %func_id, -1
  br i1 %cmp5, label %do.body10, label %if.then6

if.then6:                                         ; preds = %do.body4
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([122 x i8], [122 x i8]* @.str.5.191, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %do.body10

do.body10:                                        ; preds = %if.then6, %do.body4
  %num_funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 72
  %0 = bitcast i8* %num_funcs to i32*
  %1 = load i32, i32* %0, align 8, !tbaa !350
  %cmp11 = icmp sgt i32 %1, %func_id
  br i1 %cmp11, label %do.end15, label %if.then12

if.then12:                                        ; preds = %do.body10
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([138 x i8], [138 x i8]* @.str.6.192, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %do.end15

do.end15:                                         ; preds = %if.then12, %do.body10
  %funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 56
  %2 = bitcast i8* %funcs to %struct.halide_profiler_func_stats**
  %3 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %2, align 8, !tbaa !351
  %idxprom = sext i32 %func_id to i64
  %memory_current = getelementptr inbounds i8, i8* %pipeline_state, i64 8
  %4 = bitcast i8* %memory_current to i64*
  %5 = atomicrmw sub i64* %4, i64 %decr seq_cst
  %memory_current16 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %3, i64 %idxprom, i32 1
  %6 = atomicrmw sub i64* %memory_current16, i64 %decr seq_cst
  br label %return

return:                                           ; preds = %do.end15, %entry
  ret void
}

; Function Attrs: nounwind
define weak void @halide_profiler_report(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #15
  %lock.i = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 0
  tail call void @halide_mutex_lock(%struct.halide_mutex* %lock.i) #14
  tail call void @halide_profiler_report_unlocked(i8* %user_context, %struct.halide_profiler_state* %call) #15
  tail call void @halide_mutex_unlock(%struct.halide_mutex* %lock.i) #14
  ret void
}

; Function Attrs: nounwind
define weak void @halide_profiler_reset() local_unnamed_addr #4 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #15
  %lock.i = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 0
  tail call void @halide_mutex_lock(%struct.halide_mutex* %lock.i) #14
  tail call void @halide_profiler_reset_unlocked(%struct.halide_profiler_state* %call) #15
  tail call void @halide_mutex_unlock(%struct.halide_mutex* %lock.i) #14
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_profiler_pipeline_end(i8* %user_context, i8* %state) local_unnamed_addr #2 {
entry:
  %current_func = getelementptr inbounds i8, i8* %state, i64 16
  %0 = bitcast i8* %current_func to i32*
  store i32 -1, i32* %0, align 8, !tbaa !339
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* %ptr, i64 %len) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_check_memory_is_initialized(i8* %user_context, i8* %ptr, i64 %len, i8* %name) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_check_buffer_is_initialized(i8* %user_context, %struct.halide_buffer_t* %b, i8* %buf_name) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_annotate_buffer_is_initialized(i8* %user_context, %struct.halide_buffer_t* %b) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_msan_annotate_buffer_is_initialized_as_destructor(i8* %user_context, i8* %b) local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_default_can_use_target_features(i32 %count, i64* %features) #4 {
entry:
  %tmp = alloca %"struct.Halide::Runtime::Internal::CpuFeatures", align 8
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal36halide_cpu_features_initialized_lockE) #14
  %0 = load i8, i8* @_ZN6Halide7Runtime8Internal31halide_cpu_features_initializedE, align 1, !tbaa !19, !range !21
  %tobool.not = icmp eq i8 %0, 0
  br i1 %tobool.not, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = bitcast %"struct.Halide::Runtime::Internal::CpuFeatures"* %tmp to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1) #11
  call void @_ZN6Halide7Runtime8Internal23halide_get_cpu_featuresEv(%"struct.Halide::Runtime::Internal::CpuFeatures"* nonnull sret(%"struct.Halide::Runtime::Internal::CpuFeatures") align 8 %tmp) #14
  %call = call i8* @memcpy(i8* bitcast ([4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE to i8*), i8* nonnull %1, i64 32) #14
  store i8 1, i8* @_ZN6Halide7Runtime8Internal31halide_cpu_features_initializedE, align 1, !tbaa !19
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1) #11
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal36halide_cpu_features_initialized_lockE) #14
  %cmp.not = icmp eq i32 %count, 2
  br i1 %cmp.not, label %if.end2, label %if.then1

if.then1:                                         ; preds = %if.end
  call void @halide_error(i8* null, i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.197, i64 0, i64 0)) #14
  br label %if.end2

if.end2:                                          ; preds = %if.then1, %if.end
  %2 = load i64, i64* %features, align 8, !tbaa !22
  %3 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i64 0, i64 0), align 8, !tbaa !22
  %and = and i64 %3, %2
  %cmp6.not = icmp eq i64 %and, 0
  br i1 %cmp6.not, label %for.inc.critedge, label %if.then7

if.then7:                                         ; preds = %if.end2
  %4 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i64 0, i64 2), align 8, !tbaa !22
  %and10 = and i64 %4, %and
  %cmp11.not = icmp eq i64 %and10, %and
  br i1 %cmp11.not, label %for.inc.critedge, label %cleanup15

for.inc.critedge:                                 ; preds = %if.then7, %if.end2
  %arrayidx.1 = getelementptr inbounds i64, i64* %features, i64 1
  %5 = load i64, i64* %arrayidx.1, align 8, !tbaa !22
  %6 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i64 0, i64 1), align 8, !tbaa !22
  %and.1 = and i64 %6, %5
  %cmp6.not.1 = icmp eq i64 %and.1, 0
  br i1 %cmp6.not.1, label %for.inc.critedge.1, label %if.then7.1

cleanup15:                                        ; preds = %for.inc.critedge.1, %if.then7.1, %if.then7
  %cmp3.lcssa = phi i32 [ 0, %if.then7 ], [ 0, %if.then7.1 ], [ 1, %for.inc.critedge.1 ]
  ret i32 %cmp3.lcssa

if.then7.1:                                       ; preds = %for.inc.critedge
  %7 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i64 0, i64 3), align 8, !tbaa !22
  %and10.1 = and i64 %7, %and.1
  %cmp11.not.1 = icmp eq i64 %and10.1, %and.1
  br i1 %cmp11.not.1, label %for.inc.critedge.1, label %cleanup15

for.inc.critedge.1:                               ; preds = %if.then7.1, %for.inc.critedge
  br label %cleanup15
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i32, i64*)* @halide_set_custom_can_use_target_features(i32 (i32, i64*)* %fn) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i32, i64*)*, i32 (i32, i64*)** @_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE, align 8, !tbaa !14
  store i32 (i32, i64*)* %fn, i32 (i32, i64*)** @_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE, align 8, !tbaa !14
  ret i32 (i32, i64*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_can_use_target_features(i32 %count, i64* %features) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i32, i64*)*, i32 (i32, i64*)** @_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE, align 8, !tbaa !14
  %call = tail call i32 %0(i32 %count, i64* %features) #14
  ret i32 %call
}

; Function Attrs: nounwind willreturn
define linkonce void @_ZN6Halide7Runtime8Internal23halide_get_cpu_featuresEv(%"struct.Halide::Runtime::Internal::CpuFeatures"* noalias sret(%"struct.Halide::Runtime::Internal::CpuFeatures") align 8 %agg.result) local_unnamed_addr #8 {
entry:
  %arrayidx3.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::CpuFeatures", %"struct.Halide::Runtime::Internal::CpuFeatures"* %agg.result, i64 0, i32 1, i64 0
  %0 = bitcast %"struct.Halide::Runtime::Internal::CpuFeatures"* %agg.result to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %0, align 8, !tbaa !22
  %1 = bitcast i64* %arrayidx3.i to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %1, align 8, !tbaa !22
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_use_jit_module() local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_release_jit_module() local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nofree nosync nounwind readnone willreturn
declare <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32>, <4 x i32>) #9

; Function Attrs: nofree nosync nounwind readnone willreturn
declare <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8>, <16 x i8>) #9

; Function Attrs: nofree nosync nounwind readnone willreturn
declare <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32>, <4 x i32>) #9

; Function Attrs: nounwind
define i32 @dilate3x3(%struct.halide_buffer_t* noalias nocapture readonly %input.buffer, %struct.halide_buffer_t* noalias nocapture readonly %output.buffer) local_unnamed_addr #10 {
entry:
  %host.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %input.buffer, i64 0, i32 2
  %0 = load i8*, i8** %host.i, align 8, !tbaa !180
  %dim.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %input.buffer, i64 0, i32 6
  %1 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i, align 8, !tbaa !184
  %extent.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %1, i64 0, i32 1
  %2 = load i32, i32* %extent.i, align 4, !tbaa !189
  %extent.i248 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %1, i64 1, i32 1
  %3 = load i32, i32* %extent.i248, align 4, !tbaa !189
  %stride.i250 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %1, i64 1, i32 2
  %4 = load i32, i32* %stride.i250, align 4, !tbaa !185
  %host.i251 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %output.buffer, i64 0, i32 2
  %5 = load i8*, i8** %host.i251, align 8, !tbaa !180
  %dim.i252 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %output.buffer, i64 0, i32 6
  %6 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i252, align 8, !tbaa !184
  %extent.i255 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %6, i64 0, i32 1
  %7 = load i32, i32* %extent.i255, align 4, !tbaa !189
  %extent.i261 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %6, i64 1, i32 1
  %8 = load i32, i32* %extent.i261, align 4, !tbaa !189
  %stride.i263 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %6, i64 1, i32 2
  %9 = load i32, i32* %stride.i263, align 4, !tbaa !185
  %10 = add nsw i32 %7, 127
  %a0 = ashr i32 %10, 7
  %b4 = shl nsw i32 %a0, 1
  %11 = icmp slt i32 %a0, 0
  %t85 = select i1 %11, i32 %a0, i32 0
  %b3 = shl nsw i32 %t85, 1
  %12 = add nsw i32 %2, -63
  %a2 = ashr i32 %12, 6
  %13 = icmp slt i32 %a2, %b4
  %a1 = select i1 %13, i32 %a2, i32 %b4
  %14 = icmp sgt i32 %a1, %b3
  %t79 = select i1 %14, i32 %a1, i32 %b3
  %a3 = and i32 %10, -128
  %15 = add nsw i32 %7, -1
  %16 = and i32 %15, -128
  %b5 = or i32 %16, 66
  %17 = add nsw i32 %8, 7
  %t76 = ashr i32 %17, 3
  %18 = icmp sgt i32 %8, 0
  br i1 %18, label %"for output.s0.y.y.preheader", label %"end for output.s0.y.y", !prof !385

"for output.s0.y.y.preheader":                    ; preds = %entry
  %19 = icmp sgt i32 %a3, %b5
  %t77 = select i1 %19, i32 %a3, i32 %b5
  %20 = add nsw i32 %t77, 191
  %a4 = ashr i32 %20, 7
  %21 = icmp sgt i32 %a4, 0
  %t148 = select i1 %21, i32 %a4, i32 0
  %22 = shl nuw nsw i32 %t148, 7
  %23 = zext i32 %22 to i64
  %24 = mul nuw nsw i64 %23, 10
  %25 = or i64 %24, 3
  %26 = or i32 %b4, 1
  %27 = icmp sgt i32 %26, 0
  %28 = add nsw i32 %2, -1
  %29 = insertelement <64 x i32> undef, i32 %28, i32 0
  %30 = shufflevector <64 x i32> %29, <64 x i32> undef, <4 x i32> zeroinitializer
  %t92 = sub nsw i32 %b4, %t79
  %t90 = sub nsw i32 %t79, %b3
  %31 = sext i32 %a4 to i64
  %32 = shl nsw i64 %31, 7
  %33 = shl nsw i32 %a4, 1
  %34 = icmp sgt i32 %t90, 0
  %35 = sext i32 %b3 to i64
  %36 = icmp sgt i32 %t92, 0
  %a23 = add nsw i32 %3, -1
  %t120 = shl nsw i32 %a4, 4
  %t118 = mul nsw i32 %a4, 14
  %t116 = mul nsw i32 %a4, 12
  %t114 = mul nsw i32 %a4, 10
  %t112 = shl nsw i32 %a4, 3
  %t110 = mul nsw i32 %a4, 6
  %t108 = shl nsw i32 %a4, 2
  %t106 = mul nsw i32 %a4, -2
  %37 = icmp sgt i32 %7, 0
  %38 = zext i32 %26 to i64
  %39 = zext i32 %t90 to i64
  %40 = zext i32 %t92 to i64
  %41 = sext i32 %3 to i64
  %42 = zext i32 %a0 to i64
  %43 = sext i32 %9 to i64
  %zext = zext i32 %t76 to i64
  br label %"for output.s0.y.y"

"for output.s0.y.y":                              ; preds = %"for output.s0.y.y.preheader", %call_destructor.exit
  %indvars.iv348 = phi i64 [ 0, %"for output.s0.y.y.preheader" ], [ %indvars.iv.next349, %call_destructor.exit ]
  %bounded_input = tail call i8* @halide_malloc(i8* null, i64 %25)
  %44 = trunc i64 %indvars.iv348 to i32
  %a7 = shl nsw i32 %44, 3
  %.not212 = icmp eq i64 %indvars.iv348, 0
  %a6 = select i1 %.not212, i32 1, i32 %a7
  %a9 = add nuw nsw i32 %a7, 9
  %45 = icmp slt i32 %a9, %3
  %a8 = select i1 %45, i32 %a9, i32 %3
  %b10 = add nsw i32 %a6, -1
  %.not213 = icmp slt i32 %a8, %a6
  %bounded_input.s0.y.epilogue = select i1 %.not213, i32 %b10, i32 %a8
  %or.cond = and i1 %27, %.not212
  br i1 %or.cond, label %"for bounded_input.s0.x.x", label %after_bb, !prof !386

"end for output.s0.y.y.loopexit":                 ; preds = %call_destructor.exit
  %.pre = load i32, i32* %extent.i, align 4, !tbaa !189
  %.pre395 = load i32, i32* %extent.i248, align 4, !tbaa !189
  %.pre396 = load i32, i32* %stride.i250, align 4, !tbaa !185
  %.pre397 = load i32, i32* %extent.i255, align 4, !tbaa !189
  %.pre398 = load i32, i32* %extent.i261, align 4, !tbaa !189
  %.pre399 = load i32, i32* %stride.i263, align 4, !tbaa !185
  %.pre400 = add nsw i32 %.pre397, 127
  %.pre401 = ashr i32 %.pre400, 7
  %.pre402 = shl nsw i32 %.pre401, 1
  %.pre403 = add nsw i32 %.pre, -63
  %.pre405 = ashr i32 %.pre403, 6
  %.pre406 = and i32 %.pre400, -128
  %.pre407 = add nsw i32 %.pre397, -1
  %.pre409 = and i32 %.pre407, -128
  %.pre411 = or i32 %.pre409, 66
  %.pre412 = add nsw i32 %.pre398, 7
  %.pre414 = ashr i32 %.pre412, 3
  br label %"end for output.s0.y.y"

"end for output.s0.y.y":                          ; preds = %"end for output.s0.y.y.loopexit", %entry
  %t7648.pre-phi = phi i32 [ %.pre414, %"end for output.s0.y.y.loopexit" ], [ %t76, %entry ]
  %b31.pre-phi = phi i32 [ %.pre411, %"end for output.s0.y.y.loopexit" ], [ %b5, %entry ]
  %a29.pre-phi = phi i32 [ %.pre406, %"end for output.s0.y.y.loopexit" ], [ %a3, %entry ]
  %a27.pre-phi = phi i32 [ %.pre405, %"end for output.s0.y.y.loopexit" ], [ %a2, %entry ]
  %t84.pre-phi = phi i32 [ %.pre402, %"end for output.s0.y.y.loopexit" ], [ %b4, %entry ]
  %t83.pre-phi = phi i32 [ %.pre401, %"end for output.s0.y.y.loopexit" ], [ %a0, %entry ]
  %46 = phi i32 [ %.pre399, %"end for output.s0.y.y.loopexit" ], [ %9, %entry ]
  %47 = phi i32 [ %.pre398, %"end for output.s0.y.y.loopexit" ], [ %8, %entry ]
  %48 = phi i32 [ %.pre397, %"end for output.s0.y.y.loopexit" ], [ %7, %entry ]
  %49 = phi i32 [ %.pre396, %"end for output.s0.y.y.loopexit" ], [ %4, %entry ]
  %50 = phi i32 [ %.pre395, %"end for output.s0.y.y.loopexit" ], [ %3, %entry ]
  %51 = phi i32 [ %.pre, %"end for output.s0.y.y.loopexit" ], [ %2, %entry ]
  %52 = icmp slt i32 %t83.pre-phi, 0
  %53 = select i1 %52, i32 %t83.pre-phi, i32 0
  %54 = icmp slt i32 %a27.pre-phi, %t84.pre-phi
  %a26 = select i1 %54, i32 %a27.pre-phi, i32 %t84.pre-phi
  %b28 = shl nsw i32 %53, 1
  %55 = icmp sgt i32 %a26, %b28
  %t7946 = select i1 %55, i32 %a26, i32 %b28
  %56 = icmp sgt i32 %47, 0
  br i1 %56, label %"for output.s0.y.y49.preheader", label %"end for output.s0.y.y50", !prof !385

"for output.s0.y.y49.preheader":                  ; preds = %"end for output.s0.y.y"
  %57 = icmp sgt i32 %a29.pre-phi, %b31.pre-phi
  %t7747 = select i1 %57, i32 %a29.pre-phi, i32 %b31.pre-phi
  %58 = add nsw i32 %t7747, 191
  %a30 = ashr i32 %58, 7
  %59 = icmp sgt i32 %a30, 0
  %t166 = select i1 %59, i32 %a30, i32 0
  %60 = shl nuw nsw i32 %t166, 7
  %61 = zext i32 %60 to i64
  %62 = mul nuw nsw i64 %61, 10
  %63 = or i64 %62, 3
  %64 = or i32 %t84.pre-phi, 1
  %65 = icmp sgt i32 %64, 0
  %66 = add nsw i32 %51, -1
  %67 = insertelement <64 x i32> undef, i32 %66, i32 0
  %68 = shufflevector <64 x i32> %67, <64 x i32> undef, <4 x i32> zeroinitializer
  %t9265 = sub nsw i32 %t84.pre-phi, %t7946
  %t9066 = sub nsw i32 %t7946, %b28
  %69 = sext i32 %a30 to i64
  %70 = shl nsw i64 %69, 7
  %71 = shl nsw i32 %a30, 1
  %72 = icmp sgt i32 %t9066, 0
  %73 = sext i32 %b28 to i64
  %74 = icmp sgt i32 %t9265, 0
  %a80 = add nsw i32 %50, -1
  %75 = icmp sgt i32 %48, 0
  %76 = mul nsw i32 %a30, -2
  %77 = shl nsw i32 %a30, 2
  %78 = mul nsw i32 %a30, 6
  %79 = shl nsw i32 %a30, 3
  %80 = mul nsw i32 %a30, 10
  %81 = mul nsw i32 %a30, 12
  %82 = mul nsw i32 %a30, 14
  %83 = shl nsw i32 %a30, 4
  %84 = zext i32 %64 to i64
  %85 = zext i32 %t9066 to i64
  %86 = zext i32 %t9265 to i64
  %87 = sext i32 %50 to i64
  %88 = zext i32 %t83.pre-phi to i64
  %89 = sext i32 %46 to i64
  %zext394 = zext i32 %t7648.pre-phi to i64
  br label %"for output.s0.y.y49"

after_bb:                                         ; preds = %"for bounded_input.s0.x.x", %"for output.s0.y.y"
  %a12 = sub nsw i32 %a8, %a6
  %90 = icmp sgt i32 %a12, -1
  br i1 %90, label %"for bounded_input.s0.y.rebased.preheader", label %"end for bounded_input.s0.y.rebased", !prof !385

"for bounded_input.s0.y.rebased.preheader":       ; preds = %after_bb
  %91 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> <i32 -1, i32 0, i32 1, i32 2>, <4 x i32> %30)
  %92 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> <i32 3, i32 4, i32 5, i32 6>, <4 x i32> %30)
  %93 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> <i32 7, i32 8, i32 9, i32 10>, <4 x i32> %30)
  %94 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> <i32 11, i32 12, i32 13, i32 14>, <4 x i32> %30)
  %95 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> <i32 15, i32 16, i32 17, i32 18>, <4 x i32> %30)
  %96 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> <i32 19, i32 20, i32 21, i32 22>, <4 x i32> %30)
  %97 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> <i32 23, i32 24, i32 25, i32 26>, <4 x i32> %30)
  %98 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> <i32 27, i32 28, i32 29, i32 30>, <4 x i32> %30)
  %99 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> <i32 31, i32 32, i32 33, i32 34>, <4 x i32> %30)
  %100 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> <i32 35, i32 36, i32 37, i32 38>, <4 x i32> %30)
  %101 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> <i32 39, i32 40, i32 41, i32 42>, <4 x i32> %30)
  %102 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> <i32 43, i32 44, i32 45, i32 46>, <4 x i32> %30)
  %103 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> <i32 47, i32 48, i32 49, i32 50>, <4 x i32> %30)
  %104 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> <i32 51, i32 52, i32 53, i32 54>, <4 x i32> %30)
  %105 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> <i32 55, i32 56, i32 57, i32 58>, <4 x i32> %30)
  %106 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> <i32 59, i32 60, i32 61, i32 62>, <4 x i32> %30)
  %107 = shufflevector <4 x i32> %106, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %108 = shufflevector <8 x i32> %107, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %109 = shufflevector <16 x i32> %108, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %110 = shufflevector <32 x i32> %109, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %111 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %91, <4 x i32> zeroinitializer)
  %112 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %92, <4 x i32> zeroinitializer)
  %113 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %93, <4 x i32> zeroinitializer)
  %114 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %94, <4 x i32> zeroinitializer)
  %115 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %95, <4 x i32> zeroinitializer)
  %116 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %96, <4 x i32> zeroinitializer)
  %117 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %97, <4 x i32> zeroinitializer)
  %118 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %98, <4 x i32> zeroinitializer)
  %119 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %99, <4 x i32> zeroinitializer)
  %120 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %100, <4 x i32> zeroinitializer)
  %121 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %101, <4 x i32> zeroinitializer)
  %122 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %102, <4 x i32> zeroinitializer)
  %123 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %103, <4 x i32> zeroinitializer)
  %124 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %104, <4 x i32> zeroinitializer)
  %125 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %105, <4 x i32> zeroinitializer)
  %126 = shufflevector <64 x i32> %110, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %127 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %126, <4 x i32> zeroinitializer)
  %128 = shufflevector <4 x i32> %111, <4 x i32> %112, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %129 = shufflevector <4 x i32> %113, <4 x i32> %114, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %130 = shufflevector <4 x i32> %115, <4 x i32> %116, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %131 = shufflevector <4 x i32> %117, <4 x i32> %118, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %132 = shufflevector <4 x i32> %119, <4 x i32> %120, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %133 = shufflevector <4 x i32> %121, <4 x i32> %122, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %134 = shufflevector <4 x i32> %123, <4 x i32> %124, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %135 = shufflevector <4 x i32> %125, <4 x i32> %127, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %136 = shufflevector <8 x i32> %128, <8 x i32> %129, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %137 = shufflevector <8 x i32> %130, <8 x i32> %131, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %138 = shufflevector <8 x i32> %132, <8 x i32> %133, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %139 = shufflevector <8 x i32> %134, <8 x i32> %135, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %140 = shufflevector <16 x i32> %136, <16 x i32> %137, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %141 = shufflevector <16 x i32> %138, <16 x i32> %139, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %142 = shufflevector <32 x i32> %140, <32 x i32> %141, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %143 = zext i1 %.not212 to i64
  %144 = zext i1 %.not212 to i64
  %145 = zext i32 %a12 to i64
  br label %"for bounded_input.s0.y.rebased"

"for bounded_input.s0.x.x":                       ; preds = %"for output.s0.y.y", %"for bounded_input.s0.x.x"
  %indvars.iv = phi i64 [ %indvars.iv.next, %"for bounded_input.s0.x.x" ], [ 0, %"for output.s0.y.y" ]
  %146 = trunc i64 %indvars.iv to i32
  %147 = shl nsw i32 %146, 6
  %148 = add nsw i32 %147, -1
  %149 = insertelement <64 x i32> undef, i32 %148, i32 0
  %150 = shufflevector <64 x i32> %149, <64 x i32> undef, <64 x i32> zeroinitializer
  %151 = add nsw <64 x i32> %150, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %152 = shufflevector <64 x i32> %151, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %153 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %152, <4 x i32> %30)
  %154 = shufflevector <64 x i32> %151, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %155 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %154, <4 x i32> %30)
  %156 = shufflevector <64 x i32> %151, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %157 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %156, <4 x i32> %30)
  %158 = shufflevector <64 x i32> %151, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %159 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %158, <4 x i32> %30)
  %160 = shufflevector <64 x i32> %151, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %161 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %160, <4 x i32> %30)
  %162 = shufflevector <64 x i32> %151, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %163 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %162, <4 x i32> %30)
  %164 = shufflevector <64 x i32> %151, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %165 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %164, <4 x i32> %30)
  %166 = shufflevector <64 x i32> %151, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %167 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %166, <4 x i32> %30)
  %168 = shufflevector <64 x i32> %151, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %169 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %168, <4 x i32> %30)
  %170 = shufflevector <64 x i32> %151, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %171 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %170, <4 x i32> %30)
  %172 = shufflevector <64 x i32> %151, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %173 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %172, <4 x i32> %30)
  %174 = shufflevector <64 x i32> %151, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %175 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %174, <4 x i32> %30)
  %176 = shufflevector <64 x i32> %151, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %177 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %176, <4 x i32> %30)
  %178 = shufflevector <64 x i32> %151, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %179 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %178, <4 x i32> %30)
  %180 = shufflevector <64 x i32> %151, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %181 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %180, <4 x i32> %30)
  %182 = shufflevector <64 x i32> %151, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %183 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %182, <4 x i32> %30)
  %184 = shufflevector <4 x i32> %183, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %185 = shufflevector <8 x i32> %184, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %186 = shufflevector <16 x i32> %185, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %187 = shufflevector <32 x i32> %186, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %188 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %153, <4 x i32> zeroinitializer)
  %189 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %155, <4 x i32> zeroinitializer)
  %190 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %157, <4 x i32> zeroinitializer)
  %191 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %159, <4 x i32> zeroinitializer)
  %192 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %161, <4 x i32> zeroinitializer)
  %193 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %163, <4 x i32> zeroinitializer)
  %194 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %165, <4 x i32> zeroinitializer)
  %195 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %167, <4 x i32> zeroinitializer)
  %196 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %169, <4 x i32> zeroinitializer)
  %197 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %171, <4 x i32> zeroinitializer)
  %198 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %173, <4 x i32> zeroinitializer)
  %199 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %175, <4 x i32> zeroinitializer)
  %200 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %177, <4 x i32> zeroinitializer)
  %201 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %179, <4 x i32> zeroinitializer)
  %202 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %181, <4 x i32> zeroinitializer)
  %203 = shufflevector <64 x i32> %187, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %204 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %203, <4 x i32> zeroinitializer)
  %205 = extractelement <4 x i32> %188, i32 0
  %206 = sext i32 %205 to i64
  %207 = getelementptr inbounds i8, i8* %0, i64 %206
  %208 = load i8, i8* %207, align 1, !tbaa !387
  %209 = insertelement <64 x i8> undef, i8 %208, i32 0
  %210 = extractelement <4 x i32> %188, i32 1
  %211 = sext i32 %210 to i64
  %212 = getelementptr inbounds i8, i8* %0, i64 %211
  %213 = load i8, i8* %212, align 1, !tbaa !387
  %214 = insertelement <64 x i8> %209, i8 %213, i32 1
  %215 = extractelement <4 x i32> %188, i32 2
  %216 = sext i32 %215 to i64
  %217 = getelementptr inbounds i8, i8* %0, i64 %216
  %218 = load i8, i8* %217, align 1, !tbaa !387
  %219 = insertelement <64 x i8> %214, i8 %218, i32 2
  %220 = extractelement <4 x i32> %188, i32 3
  %221 = sext i32 %220 to i64
  %222 = getelementptr inbounds i8, i8* %0, i64 %221
  %223 = load i8, i8* %222, align 1, !tbaa !387
  %224 = insertelement <64 x i8> %219, i8 %223, i32 3
  %225 = extractelement <4 x i32> %189, i32 0
  %226 = sext i32 %225 to i64
  %227 = getelementptr inbounds i8, i8* %0, i64 %226
  %228 = load i8, i8* %227, align 1, !tbaa !387
  %229 = insertelement <64 x i8> %224, i8 %228, i32 4
  %230 = extractelement <4 x i32> %189, i32 1
  %231 = sext i32 %230 to i64
  %232 = getelementptr inbounds i8, i8* %0, i64 %231
  %233 = load i8, i8* %232, align 1, !tbaa !387
  %234 = insertelement <64 x i8> %229, i8 %233, i32 5
  %235 = extractelement <4 x i32> %189, i32 2
  %236 = sext i32 %235 to i64
  %237 = getelementptr inbounds i8, i8* %0, i64 %236
  %238 = load i8, i8* %237, align 1, !tbaa !387
  %239 = insertelement <64 x i8> %234, i8 %238, i32 6
  %240 = extractelement <4 x i32> %189, i32 3
  %241 = sext i32 %240 to i64
  %242 = getelementptr inbounds i8, i8* %0, i64 %241
  %243 = load i8, i8* %242, align 1, !tbaa !387
  %244 = insertelement <64 x i8> %239, i8 %243, i32 7
  %245 = extractelement <4 x i32> %190, i32 0
  %246 = sext i32 %245 to i64
  %247 = getelementptr inbounds i8, i8* %0, i64 %246
  %248 = load i8, i8* %247, align 1, !tbaa !387
  %249 = insertelement <64 x i8> %244, i8 %248, i32 8
  %250 = extractelement <4 x i32> %190, i32 1
  %251 = sext i32 %250 to i64
  %252 = getelementptr inbounds i8, i8* %0, i64 %251
  %253 = load i8, i8* %252, align 1, !tbaa !387
  %254 = insertelement <64 x i8> %249, i8 %253, i32 9
  %255 = extractelement <4 x i32> %190, i32 2
  %256 = sext i32 %255 to i64
  %257 = getelementptr inbounds i8, i8* %0, i64 %256
  %258 = load i8, i8* %257, align 1, !tbaa !387
  %259 = insertelement <64 x i8> %254, i8 %258, i32 10
  %260 = extractelement <4 x i32> %190, i32 3
  %261 = sext i32 %260 to i64
  %262 = getelementptr inbounds i8, i8* %0, i64 %261
  %263 = load i8, i8* %262, align 1, !tbaa !387
  %264 = insertelement <64 x i8> %259, i8 %263, i32 11
  %265 = extractelement <4 x i32> %191, i32 0
  %266 = sext i32 %265 to i64
  %267 = getelementptr inbounds i8, i8* %0, i64 %266
  %268 = load i8, i8* %267, align 1, !tbaa !387
  %269 = insertelement <64 x i8> %264, i8 %268, i32 12
  %270 = extractelement <4 x i32> %191, i32 1
  %271 = sext i32 %270 to i64
  %272 = getelementptr inbounds i8, i8* %0, i64 %271
  %273 = load i8, i8* %272, align 1, !tbaa !387
  %274 = insertelement <64 x i8> %269, i8 %273, i32 13
  %275 = extractelement <4 x i32> %191, i32 2
  %276 = sext i32 %275 to i64
  %277 = getelementptr inbounds i8, i8* %0, i64 %276
  %278 = load i8, i8* %277, align 1, !tbaa !387
  %279 = insertelement <64 x i8> %274, i8 %278, i32 14
  %280 = extractelement <4 x i32> %191, i32 3
  %281 = sext i32 %280 to i64
  %282 = getelementptr inbounds i8, i8* %0, i64 %281
  %283 = load i8, i8* %282, align 1, !tbaa !387
  %284 = insertelement <64 x i8> %279, i8 %283, i32 15
  %285 = extractelement <4 x i32> %192, i32 0
  %286 = sext i32 %285 to i64
  %287 = getelementptr inbounds i8, i8* %0, i64 %286
  %288 = load i8, i8* %287, align 1, !tbaa !387
  %289 = insertelement <64 x i8> %284, i8 %288, i32 16
  %290 = extractelement <4 x i32> %192, i32 1
  %291 = sext i32 %290 to i64
  %292 = getelementptr inbounds i8, i8* %0, i64 %291
  %293 = load i8, i8* %292, align 1, !tbaa !387
  %294 = insertelement <64 x i8> %289, i8 %293, i32 17
  %295 = extractelement <4 x i32> %192, i32 2
  %296 = sext i32 %295 to i64
  %297 = getelementptr inbounds i8, i8* %0, i64 %296
  %298 = load i8, i8* %297, align 1, !tbaa !387
  %299 = insertelement <64 x i8> %294, i8 %298, i32 18
  %300 = extractelement <4 x i32> %192, i32 3
  %301 = sext i32 %300 to i64
  %302 = getelementptr inbounds i8, i8* %0, i64 %301
  %303 = load i8, i8* %302, align 1, !tbaa !387
  %304 = insertelement <64 x i8> %299, i8 %303, i32 19
  %305 = extractelement <4 x i32> %193, i32 0
  %306 = sext i32 %305 to i64
  %307 = getelementptr inbounds i8, i8* %0, i64 %306
  %308 = load i8, i8* %307, align 1, !tbaa !387
  %309 = insertelement <64 x i8> %304, i8 %308, i32 20
  %310 = extractelement <4 x i32> %193, i32 1
  %311 = sext i32 %310 to i64
  %312 = getelementptr inbounds i8, i8* %0, i64 %311
  %313 = load i8, i8* %312, align 1, !tbaa !387
  %314 = insertelement <64 x i8> %309, i8 %313, i32 21
  %315 = extractelement <4 x i32> %193, i32 2
  %316 = sext i32 %315 to i64
  %317 = getelementptr inbounds i8, i8* %0, i64 %316
  %318 = load i8, i8* %317, align 1, !tbaa !387
  %319 = insertelement <64 x i8> %314, i8 %318, i32 22
  %320 = extractelement <4 x i32> %193, i32 3
  %321 = sext i32 %320 to i64
  %322 = getelementptr inbounds i8, i8* %0, i64 %321
  %323 = load i8, i8* %322, align 1, !tbaa !387
  %324 = insertelement <64 x i8> %319, i8 %323, i32 23
  %325 = extractelement <4 x i32> %194, i32 0
  %326 = sext i32 %325 to i64
  %327 = getelementptr inbounds i8, i8* %0, i64 %326
  %328 = load i8, i8* %327, align 1, !tbaa !387
  %329 = insertelement <64 x i8> %324, i8 %328, i32 24
  %330 = extractelement <4 x i32> %194, i32 1
  %331 = sext i32 %330 to i64
  %332 = getelementptr inbounds i8, i8* %0, i64 %331
  %333 = load i8, i8* %332, align 1, !tbaa !387
  %334 = insertelement <64 x i8> %329, i8 %333, i32 25
  %335 = extractelement <4 x i32> %194, i32 2
  %336 = sext i32 %335 to i64
  %337 = getelementptr inbounds i8, i8* %0, i64 %336
  %338 = load i8, i8* %337, align 1, !tbaa !387
  %339 = insertelement <64 x i8> %334, i8 %338, i32 26
  %340 = extractelement <4 x i32> %194, i32 3
  %341 = sext i32 %340 to i64
  %342 = getelementptr inbounds i8, i8* %0, i64 %341
  %343 = load i8, i8* %342, align 1, !tbaa !387
  %344 = insertelement <64 x i8> %339, i8 %343, i32 27
  %345 = extractelement <4 x i32> %195, i32 0
  %346 = sext i32 %345 to i64
  %347 = getelementptr inbounds i8, i8* %0, i64 %346
  %348 = load i8, i8* %347, align 1, !tbaa !387
  %349 = insertelement <64 x i8> %344, i8 %348, i32 28
  %350 = extractelement <4 x i32> %195, i32 1
  %351 = sext i32 %350 to i64
  %352 = getelementptr inbounds i8, i8* %0, i64 %351
  %353 = load i8, i8* %352, align 1, !tbaa !387
  %354 = insertelement <64 x i8> %349, i8 %353, i32 29
  %355 = extractelement <4 x i32> %195, i32 2
  %356 = sext i32 %355 to i64
  %357 = getelementptr inbounds i8, i8* %0, i64 %356
  %358 = load i8, i8* %357, align 1, !tbaa !387
  %359 = insertelement <64 x i8> %354, i8 %358, i32 30
  %360 = extractelement <4 x i32> %195, i32 3
  %361 = sext i32 %360 to i64
  %362 = getelementptr inbounds i8, i8* %0, i64 %361
  %363 = load i8, i8* %362, align 1, !tbaa !387
  %364 = insertelement <64 x i8> %359, i8 %363, i32 31
  %365 = extractelement <4 x i32> %196, i32 0
  %366 = sext i32 %365 to i64
  %367 = getelementptr inbounds i8, i8* %0, i64 %366
  %368 = load i8, i8* %367, align 1, !tbaa !387
  %369 = insertelement <64 x i8> %364, i8 %368, i32 32
  %370 = extractelement <4 x i32> %196, i32 1
  %371 = sext i32 %370 to i64
  %372 = getelementptr inbounds i8, i8* %0, i64 %371
  %373 = load i8, i8* %372, align 1, !tbaa !387
  %374 = insertelement <64 x i8> %369, i8 %373, i32 33
  %375 = extractelement <4 x i32> %196, i32 2
  %376 = sext i32 %375 to i64
  %377 = getelementptr inbounds i8, i8* %0, i64 %376
  %378 = load i8, i8* %377, align 1, !tbaa !387
  %379 = insertelement <64 x i8> %374, i8 %378, i32 34
  %380 = extractelement <4 x i32> %196, i32 3
  %381 = sext i32 %380 to i64
  %382 = getelementptr inbounds i8, i8* %0, i64 %381
  %383 = load i8, i8* %382, align 1, !tbaa !387
  %384 = insertelement <64 x i8> %379, i8 %383, i32 35
  %385 = extractelement <4 x i32> %197, i32 0
  %386 = sext i32 %385 to i64
  %387 = getelementptr inbounds i8, i8* %0, i64 %386
  %388 = load i8, i8* %387, align 1, !tbaa !387
  %389 = insertelement <64 x i8> %384, i8 %388, i32 36
  %390 = extractelement <4 x i32> %197, i32 1
  %391 = sext i32 %390 to i64
  %392 = getelementptr inbounds i8, i8* %0, i64 %391
  %393 = load i8, i8* %392, align 1, !tbaa !387
  %394 = insertelement <64 x i8> %389, i8 %393, i32 37
  %395 = extractelement <4 x i32> %197, i32 2
  %396 = sext i32 %395 to i64
  %397 = getelementptr inbounds i8, i8* %0, i64 %396
  %398 = load i8, i8* %397, align 1, !tbaa !387
  %399 = insertelement <64 x i8> %394, i8 %398, i32 38
  %400 = extractelement <4 x i32> %197, i32 3
  %401 = sext i32 %400 to i64
  %402 = getelementptr inbounds i8, i8* %0, i64 %401
  %403 = load i8, i8* %402, align 1, !tbaa !387
  %404 = insertelement <64 x i8> %399, i8 %403, i32 39
  %405 = extractelement <4 x i32> %198, i32 0
  %406 = sext i32 %405 to i64
  %407 = getelementptr inbounds i8, i8* %0, i64 %406
  %408 = load i8, i8* %407, align 1, !tbaa !387
  %409 = insertelement <64 x i8> %404, i8 %408, i32 40
  %410 = extractelement <4 x i32> %198, i32 1
  %411 = sext i32 %410 to i64
  %412 = getelementptr inbounds i8, i8* %0, i64 %411
  %413 = load i8, i8* %412, align 1, !tbaa !387
  %414 = insertelement <64 x i8> %409, i8 %413, i32 41
  %415 = extractelement <4 x i32> %198, i32 2
  %416 = sext i32 %415 to i64
  %417 = getelementptr inbounds i8, i8* %0, i64 %416
  %418 = load i8, i8* %417, align 1, !tbaa !387
  %419 = insertelement <64 x i8> %414, i8 %418, i32 42
  %420 = extractelement <4 x i32> %198, i32 3
  %421 = sext i32 %420 to i64
  %422 = getelementptr inbounds i8, i8* %0, i64 %421
  %423 = load i8, i8* %422, align 1, !tbaa !387
  %424 = insertelement <64 x i8> %419, i8 %423, i32 43
  %425 = extractelement <4 x i32> %199, i32 0
  %426 = sext i32 %425 to i64
  %427 = getelementptr inbounds i8, i8* %0, i64 %426
  %428 = load i8, i8* %427, align 1, !tbaa !387
  %429 = insertelement <64 x i8> %424, i8 %428, i32 44
  %430 = extractelement <4 x i32> %199, i32 1
  %431 = sext i32 %430 to i64
  %432 = getelementptr inbounds i8, i8* %0, i64 %431
  %433 = load i8, i8* %432, align 1, !tbaa !387
  %434 = insertelement <64 x i8> %429, i8 %433, i32 45
  %435 = extractelement <4 x i32> %199, i32 2
  %436 = sext i32 %435 to i64
  %437 = getelementptr inbounds i8, i8* %0, i64 %436
  %438 = load i8, i8* %437, align 1, !tbaa !387
  %439 = insertelement <64 x i8> %434, i8 %438, i32 46
  %440 = extractelement <4 x i32> %199, i32 3
  %441 = sext i32 %440 to i64
  %442 = getelementptr inbounds i8, i8* %0, i64 %441
  %443 = load i8, i8* %442, align 1, !tbaa !387
  %444 = insertelement <64 x i8> %439, i8 %443, i32 47
  %445 = extractelement <4 x i32> %200, i32 0
  %446 = sext i32 %445 to i64
  %447 = getelementptr inbounds i8, i8* %0, i64 %446
  %448 = load i8, i8* %447, align 1, !tbaa !387
  %449 = insertelement <64 x i8> %444, i8 %448, i32 48
  %450 = extractelement <4 x i32> %200, i32 1
  %451 = sext i32 %450 to i64
  %452 = getelementptr inbounds i8, i8* %0, i64 %451
  %453 = load i8, i8* %452, align 1, !tbaa !387
  %454 = insertelement <64 x i8> %449, i8 %453, i32 49
  %455 = extractelement <4 x i32> %200, i32 2
  %456 = sext i32 %455 to i64
  %457 = getelementptr inbounds i8, i8* %0, i64 %456
  %458 = load i8, i8* %457, align 1, !tbaa !387
  %459 = insertelement <64 x i8> %454, i8 %458, i32 50
  %460 = extractelement <4 x i32> %200, i32 3
  %461 = sext i32 %460 to i64
  %462 = getelementptr inbounds i8, i8* %0, i64 %461
  %463 = load i8, i8* %462, align 1, !tbaa !387
  %464 = insertelement <64 x i8> %459, i8 %463, i32 51
  %465 = extractelement <4 x i32> %201, i32 0
  %466 = sext i32 %465 to i64
  %467 = getelementptr inbounds i8, i8* %0, i64 %466
  %468 = load i8, i8* %467, align 1, !tbaa !387
  %469 = insertelement <64 x i8> %464, i8 %468, i32 52
  %470 = extractelement <4 x i32> %201, i32 1
  %471 = sext i32 %470 to i64
  %472 = getelementptr inbounds i8, i8* %0, i64 %471
  %473 = load i8, i8* %472, align 1, !tbaa !387
  %474 = insertelement <64 x i8> %469, i8 %473, i32 53
  %475 = extractelement <4 x i32> %201, i32 2
  %476 = sext i32 %475 to i64
  %477 = getelementptr inbounds i8, i8* %0, i64 %476
  %478 = load i8, i8* %477, align 1, !tbaa !387
  %479 = insertelement <64 x i8> %474, i8 %478, i32 54
  %480 = extractelement <4 x i32> %201, i32 3
  %481 = sext i32 %480 to i64
  %482 = getelementptr inbounds i8, i8* %0, i64 %481
  %483 = load i8, i8* %482, align 1, !tbaa !387
  %484 = insertelement <64 x i8> %479, i8 %483, i32 55
  %485 = extractelement <4 x i32> %202, i32 0
  %486 = sext i32 %485 to i64
  %487 = getelementptr inbounds i8, i8* %0, i64 %486
  %488 = load i8, i8* %487, align 1, !tbaa !387
  %489 = insertelement <64 x i8> %484, i8 %488, i32 56
  %490 = extractelement <4 x i32> %202, i32 1
  %491 = sext i32 %490 to i64
  %492 = getelementptr inbounds i8, i8* %0, i64 %491
  %493 = load i8, i8* %492, align 1, !tbaa !387
  %494 = insertelement <64 x i8> %489, i8 %493, i32 57
  %495 = extractelement <4 x i32> %202, i32 2
  %496 = sext i32 %495 to i64
  %497 = getelementptr inbounds i8, i8* %0, i64 %496
  %498 = load i8, i8* %497, align 1, !tbaa !387
  %499 = insertelement <64 x i8> %494, i8 %498, i32 58
  %500 = extractelement <4 x i32> %202, i32 3
  %501 = sext i32 %500 to i64
  %502 = getelementptr inbounds i8, i8* %0, i64 %501
  %503 = load i8, i8* %502, align 1, !tbaa !387
  %504 = insertelement <64 x i8> %499, i8 %503, i32 59
  %505 = extractelement <4 x i32> %204, i32 0
  %506 = sext i32 %505 to i64
  %507 = getelementptr inbounds i8, i8* %0, i64 %506
  %508 = load i8, i8* %507, align 1, !tbaa !387
  %509 = insertelement <64 x i8> %504, i8 %508, i32 60
  %510 = extractelement <4 x i32> %204, i32 1
  %511 = sext i32 %510 to i64
  %512 = getelementptr inbounds i8, i8* %0, i64 %511
  %513 = load i8, i8* %512, align 1, !tbaa !387
  %514 = insertelement <64 x i8> %509, i8 %513, i32 61
  %515 = extractelement <4 x i32> %204, i32 2
  %516 = sext i32 %515 to i64
  %517 = getelementptr inbounds i8, i8* %0, i64 %516
  %518 = load i8, i8* %517, align 1, !tbaa !387
  %519 = insertelement <64 x i8> %514, i8 %518, i32 62
  %520 = extractelement <4 x i32> %204, i32 3
  %521 = sext i32 %520 to i64
  %522 = getelementptr inbounds i8, i8* %0, i64 %521
  %523 = load i8, i8* %522, align 1, !tbaa !387
  %524 = insertelement <64 x i8> %519, i8 %523, i32 63
  %525 = shufflevector <64 x i8> %524, <64 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %526 = shl nuw nsw i64 %indvars.iv, 6
  %527 = getelementptr inbounds i8, i8* %bounded_input, i64 %526
  %528 = bitcast i8* %527 to <16 x i8>*
  store <16 x i8> %525, <16 x i8>* %528, align 16, !tbaa !390
  %529 = shufflevector <64 x i8> %524, <64 x i8> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %530 = getelementptr inbounds i8, i8* %527, i64 16
  %531 = bitcast i8* %530 to <16 x i8>*
  store <16 x i8> %529, <16 x i8>* %531, align 16, !tbaa !390
  %532 = shufflevector <64 x i8> %524, <64 x i8> undef, <16 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %533 = getelementptr inbounds i8, i8* %527, i64 32
  %534 = bitcast i8* %533 to <16 x i8>*
  store <16 x i8> %532, <16 x i8>* %534, align 16, !tbaa !390
  %535 = shufflevector <64 x i8> %524, <64 x i8> undef, <16 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %536 = getelementptr inbounds i8, i8* %527, i64 48
  %537 = bitcast i8* %536 to <16 x i8>*
  store <16 x i8> %535, <16 x i8>* %537, align 16, !tbaa !390
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %.not239 = icmp eq i64 %indvars.iv.next, %38
  br i1 %.not239, label %after_bb, label %"for bounded_input.s0.x.x"

"for bounded_input.s0.y.rebased":                 ; preds = %"for bounded_input.s0.y.rebased.preheader", %"end for bounded_input.s0.x.x.rebased2"
  %indvars.iv306 = phi i64 [ 0, %"for bounded_input.s0.y.rebased.preheader" ], [ %indvars.iv.next307, %"end for bounded_input.s0.x.x.rebased2" ]
  %538 = trunc i64 %indvars.iv306 to i32
  %539 = add i32 %b10, %538
  %540 = mul nsw i32 %539, %4
  %541 = insertelement <64 x i32> undef, i32 %540, i32 0
  %542 = shufflevector <64 x i32> %541, <64 x i32> undef, <64 x i32> zeroinitializer
  %543 = add nsw <64 x i32> %142, %542
  %544 = extractelement <64 x i32> %543, i32 0
  %545 = sext i32 %544 to i64
  %546 = getelementptr inbounds i8, i8* %0, i64 %545
  %547 = load i8, i8* %546, align 1, !tbaa !387
  %548 = insertelement <64 x i8> undef, i8 %547, i32 0
  %549 = extractelement <64 x i32> %543, i32 1
  %550 = sext i32 %549 to i64
  %551 = getelementptr inbounds i8, i8* %0, i64 %550
  %552 = load i8, i8* %551, align 1, !tbaa !387
  %553 = insertelement <64 x i8> %548, i8 %552, i32 1
  %554 = extractelement <64 x i32> %543, i32 2
  %555 = sext i32 %554 to i64
  %556 = getelementptr inbounds i8, i8* %0, i64 %555
  %557 = load i8, i8* %556, align 1, !tbaa !387
  %558 = insertelement <64 x i8> %553, i8 %557, i32 2
  %559 = extractelement <64 x i32> %543, i32 3
  %560 = sext i32 %559 to i64
  %561 = getelementptr inbounds i8, i8* %0, i64 %560
  %562 = load i8, i8* %561, align 1, !tbaa !387
  %563 = insertelement <64 x i8> %558, i8 %562, i32 3
  %564 = extractelement <64 x i32> %543, i32 4
  %565 = sext i32 %564 to i64
  %566 = getelementptr inbounds i8, i8* %0, i64 %565
  %567 = load i8, i8* %566, align 1, !tbaa !387
  %568 = insertelement <64 x i8> %563, i8 %567, i32 4
  %569 = extractelement <64 x i32> %543, i32 5
  %570 = sext i32 %569 to i64
  %571 = getelementptr inbounds i8, i8* %0, i64 %570
  %572 = load i8, i8* %571, align 1, !tbaa !387
  %573 = insertelement <64 x i8> %568, i8 %572, i32 5
  %574 = extractelement <64 x i32> %543, i32 6
  %575 = sext i32 %574 to i64
  %576 = getelementptr inbounds i8, i8* %0, i64 %575
  %577 = load i8, i8* %576, align 1, !tbaa !387
  %578 = insertelement <64 x i8> %573, i8 %577, i32 6
  %579 = extractelement <64 x i32> %543, i32 7
  %580 = sext i32 %579 to i64
  %581 = getelementptr inbounds i8, i8* %0, i64 %580
  %582 = load i8, i8* %581, align 1, !tbaa !387
  %583 = insertelement <64 x i8> %578, i8 %582, i32 7
  %584 = extractelement <64 x i32> %543, i32 8
  %585 = sext i32 %584 to i64
  %586 = getelementptr inbounds i8, i8* %0, i64 %585
  %587 = load i8, i8* %586, align 1, !tbaa !387
  %588 = insertelement <64 x i8> %583, i8 %587, i32 8
  %589 = extractelement <64 x i32> %543, i32 9
  %590 = sext i32 %589 to i64
  %591 = getelementptr inbounds i8, i8* %0, i64 %590
  %592 = load i8, i8* %591, align 1, !tbaa !387
  %593 = insertelement <64 x i8> %588, i8 %592, i32 9
  %594 = extractelement <64 x i32> %543, i32 10
  %595 = sext i32 %594 to i64
  %596 = getelementptr inbounds i8, i8* %0, i64 %595
  %597 = load i8, i8* %596, align 1, !tbaa !387
  %598 = insertelement <64 x i8> %593, i8 %597, i32 10
  %599 = extractelement <64 x i32> %543, i32 11
  %600 = sext i32 %599 to i64
  %601 = getelementptr inbounds i8, i8* %0, i64 %600
  %602 = load i8, i8* %601, align 1, !tbaa !387
  %603 = insertelement <64 x i8> %598, i8 %602, i32 11
  %604 = extractelement <64 x i32> %543, i32 12
  %605 = sext i32 %604 to i64
  %606 = getelementptr inbounds i8, i8* %0, i64 %605
  %607 = load i8, i8* %606, align 1, !tbaa !387
  %608 = insertelement <64 x i8> %603, i8 %607, i32 12
  %609 = extractelement <64 x i32> %543, i32 13
  %610 = sext i32 %609 to i64
  %611 = getelementptr inbounds i8, i8* %0, i64 %610
  %612 = load i8, i8* %611, align 1, !tbaa !387
  %613 = insertelement <64 x i8> %608, i8 %612, i32 13
  %614 = extractelement <64 x i32> %543, i32 14
  %615 = sext i32 %614 to i64
  %616 = getelementptr inbounds i8, i8* %0, i64 %615
  %617 = load i8, i8* %616, align 1, !tbaa !387
  %618 = insertelement <64 x i8> %613, i8 %617, i32 14
  %619 = extractelement <64 x i32> %543, i32 15
  %620 = sext i32 %619 to i64
  %621 = getelementptr inbounds i8, i8* %0, i64 %620
  %622 = load i8, i8* %621, align 1, !tbaa !387
  %623 = insertelement <64 x i8> %618, i8 %622, i32 15
  %624 = extractelement <64 x i32> %543, i32 16
  %625 = sext i32 %624 to i64
  %626 = getelementptr inbounds i8, i8* %0, i64 %625
  %627 = load i8, i8* %626, align 1, !tbaa !387
  %628 = insertelement <64 x i8> %623, i8 %627, i32 16
  %629 = extractelement <64 x i32> %543, i32 17
  %630 = sext i32 %629 to i64
  %631 = getelementptr inbounds i8, i8* %0, i64 %630
  %632 = load i8, i8* %631, align 1, !tbaa !387
  %633 = insertelement <64 x i8> %628, i8 %632, i32 17
  %634 = extractelement <64 x i32> %543, i32 18
  %635 = sext i32 %634 to i64
  %636 = getelementptr inbounds i8, i8* %0, i64 %635
  %637 = load i8, i8* %636, align 1, !tbaa !387
  %638 = insertelement <64 x i8> %633, i8 %637, i32 18
  %639 = extractelement <64 x i32> %543, i32 19
  %640 = sext i32 %639 to i64
  %641 = getelementptr inbounds i8, i8* %0, i64 %640
  %642 = load i8, i8* %641, align 1, !tbaa !387
  %643 = insertelement <64 x i8> %638, i8 %642, i32 19
  %644 = extractelement <64 x i32> %543, i32 20
  %645 = sext i32 %644 to i64
  %646 = getelementptr inbounds i8, i8* %0, i64 %645
  %647 = load i8, i8* %646, align 1, !tbaa !387
  %648 = insertelement <64 x i8> %643, i8 %647, i32 20
  %649 = extractelement <64 x i32> %543, i32 21
  %650 = sext i32 %649 to i64
  %651 = getelementptr inbounds i8, i8* %0, i64 %650
  %652 = load i8, i8* %651, align 1, !tbaa !387
  %653 = insertelement <64 x i8> %648, i8 %652, i32 21
  %654 = extractelement <64 x i32> %543, i32 22
  %655 = sext i32 %654 to i64
  %656 = getelementptr inbounds i8, i8* %0, i64 %655
  %657 = load i8, i8* %656, align 1, !tbaa !387
  %658 = insertelement <64 x i8> %653, i8 %657, i32 22
  %659 = extractelement <64 x i32> %543, i32 23
  %660 = sext i32 %659 to i64
  %661 = getelementptr inbounds i8, i8* %0, i64 %660
  %662 = load i8, i8* %661, align 1, !tbaa !387
  %663 = insertelement <64 x i8> %658, i8 %662, i32 23
  %664 = extractelement <64 x i32> %543, i32 24
  %665 = sext i32 %664 to i64
  %666 = getelementptr inbounds i8, i8* %0, i64 %665
  %667 = load i8, i8* %666, align 1, !tbaa !387
  %668 = insertelement <64 x i8> %663, i8 %667, i32 24
  %669 = extractelement <64 x i32> %543, i32 25
  %670 = sext i32 %669 to i64
  %671 = getelementptr inbounds i8, i8* %0, i64 %670
  %672 = load i8, i8* %671, align 1, !tbaa !387
  %673 = insertelement <64 x i8> %668, i8 %672, i32 25
  %674 = extractelement <64 x i32> %543, i32 26
  %675 = sext i32 %674 to i64
  %676 = getelementptr inbounds i8, i8* %0, i64 %675
  %677 = load i8, i8* %676, align 1, !tbaa !387
  %678 = insertelement <64 x i8> %673, i8 %677, i32 26
  %679 = extractelement <64 x i32> %543, i32 27
  %680 = sext i32 %679 to i64
  %681 = getelementptr inbounds i8, i8* %0, i64 %680
  %682 = load i8, i8* %681, align 1, !tbaa !387
  %683 = insertelement <64 x i8> %678, i8 %682, i32 27
  %684 = extractelement <64 x i32> %543, i32 28
  %685 = sext i32 %684 to i64
  %686 = getelementptr inbounds i8, i8* %0, i64 %685
  %687 = load i8, i8* %686, align 1, !tbaa !387
  %688 = insertelement <64 x i8> %683, i8 %687, i32 28
  %689 = extractelement <64 x i32> %543, i32 29
  %690 = sext i32 %689 to i64
  %691 = getelementptr inbounds i8, i8* %0, i64 %690
  %692 = load i8, i8* %691, align 1, !tbaa !387
  %693 = insertelement <64 x i8> %688, i8 %692, i32 29
  %694 = extractelement <64 x i32> %543, i32 30
  %695 = sext i32 %694 to i64
  %696 = getelementptr inbounds i8, i8* %0, i64 %695
  %697 = load i8, i8* %696, align 1, !tbaa !387
  %698 = insertelement <64 x i8> %693, i8 %697, i32 30
  %699 = extractelement <64 x i32> %543, i32 31
  %700 = sext i32 %699 to i64
  %701 = getelementptr inbounds i8, i8* %0, i64 %700
  %702 = load i8, i8* %701, align 1, !tbaa !387
  %703 = insertelement <64 x i8> %698, i8 %702, i32 31
  %704 = extractelement <64 x i32> %543, i32 32
  %705 = sext i32 %704 to i64
  %706 = getelementptr inbounds i8, i8* %0, i64 %705
  %707 = load i8, i8* %706, align 1, !tbaa !387
  %708 = insertelement <64 x i8> %703, i8 %707, i32 32
  %709 = extractelement <64 x i32> %543, i32 33
  %710 = sext i32 %709 to i64
  %711 = getelementptr inbounds i8, i8* %0, i64 %710
  %712 = load i8, i8* %711, align 1, !tbaa !387
  %713 = insertelement <64 x i8> %708, i8 %712, i32 33
  %714 = extractelement <64 x i32> %543, i32 34
  %715 = sext i32 %714 to i64
  %716 = getelementptr inbounds i8, i8* %0, i64 %715
  %717 = load i8, i8* %716, align 1, !tbaa !387
  %718 = insertelement <64 x i8> %713, i8 %717, i32 34
  %719 = extractelement <64 x i32> %543, i32 35
  %720 = sext i32 %719 to i64
  %721 = getelementptr inbounds i8, i8* %0, i64 %720
  %722 = load i8, i8* %721, align 1, !tbaa !387
  %723 = insertelement <64 x i8> %718, i8 %722, i32 35
  %724 = extractelement <64 x i32> %543, i32 36
  %725 = sext i32 %724 to i64
  %726 = getelementptr inbounds i8, i8* %0, i64 %725
  %727 = load i8, i8* %726, align 1, !tbaa !387
  %728 = insertelement <64 x i8> %723, i8 %727, i32 36
  %729 = extractelement <64 x i32> %543, i32 37
  %730 = sext i32 %729 to i64
  %731 = getelementptr inbounds i8, i8* %0, i64 %730
  %732 = load i8, i8* %731, align 1, !tbaa !387
  %733 = insertelement <64 x i8> %728, i8 %732, i32 37
  %734 = extractelement <64 x i32> %543, i32 38
  %735 = sext i32 %734 to i64
  %736 = getelementptr inbounds i8, i8* %0, i64 %735
  %737 = load i8, i8* %736, align 1, !tbaa !387
  %738 = insertelement <64 x i8> %733, i8 %737, i32 38
  %739 = extractelement <64 x i32> %543, i32 39
  %740 = sext i32 %739 to i64
  %741 = getelementptr inbounds i8, i8* %0, i64 %740
  %742 = load i8, i8* %741, align 1, !tbaa !387
  %743 = insertelement <64 x i8> %738, i8 %742, i32 39
  %744 = extractelement <64 x i32> %543, i32 40
  %745 = sext i32 %744 to i64
  %746 = getelementptr inbounds i8, i8* %0, i64 %745
  %747 = load i8, i8* %746, align 1, !tbaa !387
  %748 = insertelement <64 x i8> %743, i8 %747, i32 40
  %749 = extractelement <64 x i32> %543, i32 41
  %750 = sext i32 %749 to i64
  %751 = getelementptr inbounds i8, i8* %0, i64 %750
  %752 = load i8, i8* %751, align 1, !tbaa !387
  %753 = insertelement <64 x i8> %748, i8 %752, i32 41
  %754 = extractelement <64 x i32> %543, i32 42
  %755 = sext i32 %754 to i64
  %756 = getelementptr inbounds i8, i8* %0, i64 %755
  %757 = load i8, i8* %756, align 1, !tbaa !387
  %758 = insertelement <64 x i8> %753, i8 %757, i32 42
  %759 = extractelement <64 x i32> %543, i32 43
  %760 = sext i32 %759 to i64
  %761 = getelementptr inbounds i8, i8* %0, i64 %760
  %762 = load i8, i8* %761, align 1, !tbaa !387
  %763 = insertelement <64 x i8> %758, i8 %762, i32 43
  %764 = extractelement <64 x i32> %543, i32 44
  %765 = sext i32 %764 to i64
  %766 = getelementptr inbounds i8, i8* %0, i64 %765
  %767 = load i8, i8* %766, align 1, !tbaa !387
  %768 = insertelement <64 x i8> %763, i8 %767, i32 44
  %769 = extractelement <64 x i32> %543, i32 45
  %770 = sext i32 %769 to i64
  %771 = getelementptr inbounds i8, i8* %0, i64 %770
  %772 = load i8, i8* %771, align 1, !tbaa !387
  %773 = insertelement <64 x i8> %768, i8 %772, i32 45
  %774 = extractelement <64 x i32> %543, i32 46
  %775 = sext i32 %774 to i64
  %776 = getelementptr inbounds i8, i8* %0, i64 %775
  %777 = load i8, i8* %776, align 1, !tbaa !387
  %778 = insertelement <64 x i8> %773, i8 %777, i32 46
  %779 = extractelement <64 x i32> %543, i32 47
  %780 = sext i32 %779 to i64
  %781 = getelementptr inbounds i8, i8* %0, i64 %780
  %782 = load i8, i8* %781, align 1, !tbaa !387
  %783 = insertelement <64 x i8> %778, i8 %782, i32 47
  %784 = extractelement <64 x i32> %543, i32 48
  %785 = sext i32 %784 to i64
  %786 = getelementptr inbounds i8, i8* %0, i64 %785
  %787 = load i8, i8* %786, align 1, !tbaa !387
  %788 = insertelement <64 x i8> %783, i8 %787, i32 48
  %789 = extractelement <64 x i32> %543, i32 49
  %790 = sext i32 %789 to i64
  %791 = getelementptr inbounds i8, i8* %0, i64 %790
  %792 = load i8, i8* %791, align 1, !tbaa !387
  %793 = insertelement <64 x i8> %788, i8 %792, i32 49
  %794 = extractelement <64 x i32> %543, i32 50
  %795 = sext i32 %794 to i64
  %796 = getelementptr inbounds i8, i8* %0, i64 %795
  %797 = load i8, i8* %796, align 1, !tbaa !387
  %798 = insertelement <64 x i8> %793, i8 %797, i32 50
  %799 = extractelement <64 x i32> %543, i32 51
  %800 = sext i32 %799 to i64
  %801 = getelementptr inbounds i8, i8* %0, i64 %800
  %802 = load i8, i8* %801, align 1, !tbaa !387
  %803 = insertelement <64 x i8> %798, i8 %802, i32 51
  %804 = extractelement <64 x i32> %543, i32 52
  %805 = sext i32 %804 to i64
  %806 = getelementptr inbounds i8, i8* %0, i64 %805
  %807 = load i8, i8* %806, align 1, !tbaa !387
  %808 = insertelement <64 x i8> %803, i8 %807, i32 52
  %809 = extractelement <64 x i32> %543, i32 53
  %810 = sext i32 %809 to i64
  %811 = getelementptr inbounds i8, i8* %0, i64 %810
  %812 = load i8, i8* %811, align 1, !tbaa !387
  %813 = insertelement <64 x i8> %808, i8 %812, i32 53
  %814 = extractelement <64 x i32> %543, i32 54
  %815 = sext i32 %814 to i64
  %816 = getelementptr inbounds i8, i8* %0, i64 %815
  %817 = load i8, i8* %816, align 1, !tbaa !387
  %818 = insertelement <64 x i8> %813, i8 %817, i32 54
  %819 = extractelement <64 x i32> %543, i32 55
  %820 = sext i32 %819 to i64
  %821 = getelementptr inbounds i8, i8* %0, i64 %820
  %822 = load i8, i8* %821, align 1, !tbaa !387
  %823 = insertelement <64 x i8> %818, i8 %822, i32 55
  %824 = extractelement <64 x i32> %543, i32 56
  %825 = sext i32 %824 to i64
  %826 = getelementptr inbounds i8, i8* %0, i64 %825
  %827 = load i8, i8* %826, align 1, !tbaa !387
  %828 = insertelement <64 x i8> %823, i8 %827, i32 56
  %829 = extractelement <64 x i32> %543, i32 57
  %830 = sext i32 %829 to i64
  %831 = getelementptr inbounds i8, i8* %0, i64 %830
  %832 = load i8, i8* %831, align 1, !tbaa !387
  %833 = insertelement <64 x i8> %828, i8 %832, i32 57
  %834 = extractelement <64 x i32> %543, i32 58
  %835 = sext i32 %834 to i64
  %836 = getelementptr inbounds i8, i8* %0, i64 %835
  %837 = load i8, i8* %836, align 1, !tbaa !387
  %838 = insertelement <64 x i8> %833, i8 %837, i32 58
  %839 = extractelement <64 x i32> %543, i32 59
  %840 = sext i32 %839 to i64
  %841 = getelementptr inbounds i8, i8* %0, i64 %840
  %842 = load i8, i8* %841, align 1, !tbaa !387
  %843 = insertelement <64 x i8> %838, i8 %842, i32 59
  %844 = extractelement <64 x i32> %543, i32 60
  %845 = sext i32 %844 to i64
  %846 = getelementptr inbounds i8, i8* %0, i64 %845
  %847 = load i8, i8* %846, align 1, !tbaa !387
  %848 = insertelement <64 x i8> %843, i8 %847, i32 60
  %849 = extractelement <64 x i32> %543, i32 61
  %850 = sext i32 %849 to i64
  %851 = getelementptr inbounds i8, i8* %0, i64 %850
  %852 = load i8, i8* %851, align 1, !tbaa !387
  %853 = insertelement <64 x i8> %848, i8 %852, i32 61
  %854 = extractelement <64 x i32> %543, i32 62
  %855 = sext i32 %854 to i64
  %856 = getelementptr inbounds i8, i8* %0, i64 %855
  %857 = load i8, i8* %856, align 1, !tbaa !387
  %858 = insertelement <64 x i8> %853, i8 %857, i32 62
  %859 = extractelement <64 x i32> %543, i32 63
  %860 = sext i32 %859 to i64
  %861 = getelementptr inbounds i8, i8* %0, i64 %860
  %862 = load i8, i8* %861, align 1, !tbaa !387
  %863 = insertelement <64 x i8> %858, i8 %862, i32 63
  %864 = shufflevector <64 x i8> %863, <64 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %865 = add nuw nsw i64 %indvars.iv306, %143
  %866 = mul nsw i64 %32, %865
  %867 = getelementptr inbounds i8, i8* %bounded_input, i64 %866
  %868 = bitcast i8* %867 to <16 x i8>*
  store <16 x i8> %864, <16 x i8>* %868, align 16, !tbaa !390
  %869 = shufflevector <64 x i8> %863, <64 x i8> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %870 = getelementptr inbounds i8, i8* %867, i64 16
  %871 = bitcast i8* %870 to <16 x i8>*
  store <16 x i8> %869, <16 x i8>* %871, align 16, !tbaa !390
  %872 = shufflevector <64 x i8> %863, <64 x i8> undef, <16 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %873 = getelementptr inbounds i8, i8* %867, i64 32
  %874 = bitcast i8* %873 to <16 x i8>*
  store <16 x i8> %872, <16 x i8>* %874, align 16, !tbaa !390
  %875 = shufflevector <64 x i8> %863, <64 x i8> undef, <16 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %876 = getelementptr inbounds i8, i8* %867, i64 48
  %877 = bitcast i8* %876 to <16 x i8>*
  store <16 x i8> %875, <16 x i8>* %877, align 16, !tbaa !390
  %878 = add nuw i64 %indvars.iv306, %144
  %879 = trunc i64 %878 to i32
  %880 = mul i32 %33, %879
  br i1 %34, label %"for bounded_input.s0.x.x.rebased.preheader", label %"end for bounded_input.s0.x.x.rebased", !prof !385

"for bounded_input.s0.x.x.rebased.preheader":     ; preds = %"for bounded_input.s0.y.rebased"
  %t95 = add nsw i32 %880, %b3
  %881 = sext i32 %540 to i64
  %882 = sext i32 %t95 to i64
  br label %"for bounded_input.s0.x.x.rebased"

"end for bounded_input.s0.y.rebased":             ; preds = %"end for bounded_input.s0.x.x.rebased2", %after_bb
  %t98 = sub nsw i32 %a7, %bounded_input.s0.y.epilogue
  %883 = icmp sgt i32 %t98, -9
  br i1 %883, label %"for bounded_input.s0.y.rebased4.preheader", label %"consume bounded_input", !prof !385

"for bounded_input.s0.y.rebased4.preheader":      ; preds = %"end for bounded_input.s0.y.rebased"
  %884 = add nsw i32 %t98, 8
  %885 = sext i32 %bounded_input.s0.y.epilogue to i64
  %886 = zext i32 %884 to i64
  br label %"for bounded_input.s0.y.rebased4"

"for bounded_input.s0.x.x.rebased":               ; preds = %"for bounded_input.s0.x.x.rebased.preheader", %"for bounded_input.s0.x.x.rebased"
  %indvars.iv302 = phi i64 [ 0, %"for bounded_input.s0.x.x.rebased.preheader" ], [ %indvars.iv.next303, %"for bounded_input.s0.x.x.rebased" ]
  %887 = add nsw i64 %indvars.iv302, %35
  %888 = shl nsw i64 %887, 6
  %889 = add nsw i64 %888, %881
  %890 = getelementptr inbounds i8, i8* %0, i64 %889
  %891 = getelementptr inbounds i8, i8* %890, i64 63
  %892 = bitcast i8* %891 to <16 x i8>*
  %893 = load <16 x i8>, <16 x i8>* %892, align 1, !tbaa !387
  %894 = getelementptr inbounds i8, i8* %890, i64 79
  %895 = bitcast i8* %894 to <16 x i8>*
  %896 = load <16 x i8>, <16 x i8>* %895, align 1, !tbaa !387
  %897 = getelementptr inbounds i8, i8* %890, i64 95
  %898 = bitcast i8* %897 to <16 x i8>*
  %899 = load <16 x i8>, <16 x i8>* %898, align 1, !tbaa !387
  %900 = getelementptr inbounds i8, i8* %890, i64 111
  %901 = bitcast i8* %900 to <16 x i8>*
  %902 = load <16 x i8>, <16 x i8>* %901, align 1, !tbaa !387
  %903 = add nsw i64 %indvars.iv302, %882
  %904 = shl nsw i64 %903, 6
  %905 = getelementptr inbounds i8, i8* %bounded_input, i64 %904
  %906 = getelementptr inbounds i8, i8* %905, i64 64
  %907 = bitcast i8* %906 to <16 x i8>*
  store <16 x i8> %893, <16 x i8>* %907, align 16, !tbaa !390
  %908 = getelementptr inbounds i8, i8* %905, i64 80
  %909 = bitcast i8* %908 to <16 x i8>*
  store <16 x i8> %896, <16 x i8>* %909, align 16, !tbaa !390
  %910 = getelementptr inbounds i8, i8* %905, i64 96
  %911 = bitcast i8* %910 to <16 x i8>*
  store <16 x i8> %899, <16 x i8>* %911, align 16, !tbaa !390
  %912 = getelementptr inbounds i8, i8* %905, i64 112
  %913 = bitcast i8* %912 to <16 x i8>*
  store <16 x i8> %902, <16 x i8>* %913, align 16, !tbaa !390
  %indvars.iv.next303 = add nuw nsw i64 %indvars.iv302, 1
  %.not238 = icmp eq i64 %indvars.iv.next303, %39
  br i1 %.not238, label %"end for bounded_input.s0.x.x.rebased", label %"for bounded_input.s0.x.x.rebased"

"end for bounded_input.s0.x.x.rebased":           ; preds = %"for bounded_input.s0.x.x.rebased", %"for bounded_input.s0.y.rebased"
  br i1 %36, label %"for bounded_input.s0.x.x.rebased1.preheader", label %"end for bounded_input.s0.x.x.rebased2", !prof !385

"for bounded_input.s0.x.x.rebased1.preheader":    ; preds = %"end for bounded_input.s0.x.x.rebased"
  %t97 = add nsw i32 %880, %t79
  %914 = sext i32 %t97 to i64
  br label %"for bounded_input.s0.x.x.rebased1"

"for bounded_input.s0.x.x.rebased1":              ; preds = %"for bounded_input.s0.x.x.rebased1.preheader", %"for bounded_input.s0.x.x.rebased1"
  %indvars.iv304 = phi i64 [ 0, %"for bounded_input.s0.x.x.rebased1.preheader" ], [ %indvars.iv.next305, %"for bounded_input.s0.x.x.rebased1" ]
  %915 = trunc i64 %indvars.iv304 to i32
  %916 = add nsw i32 %t79, %915
  %917 = shl nsw i32 %916, 6
  %918 = or i32 %917, 63
  %919 = insertelement <64 x i32> undef, i32 %918, i32 0
  %920 = shufflevector <64 x i32> %919, <64 x i32> undef, <64 x i32> zeroinitializer
  %921 = add nsw <64 x i32> %920, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %922 = shufflevector <64 x i32> %921, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %923 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %922, <4 x i32> %30)
  %924 = shufflevector <64 x i32> %921, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %925 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %924, <4 x i32> %30)
  %926 = shufflevector <64 x i32> %921, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %927 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %926, <4 x i32> %30)
  %928 = shufflevector <64 x i32> %921, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %929 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %928, <4 x i32> %30)
  %930 = shufflevector <64 x i32> %921, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %931 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %930, <4 x i32> %30)
  %932 = shufflevector <64 x i32> %921, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %933 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %932, <4 x i32> %30)
  %934 = shufflevector <64 x i32> %921, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %935 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %934, <4 x i32> %30)
  %936 = shufflevector <64 x i32> %921, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %937 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %936, <4 x i32> %30)
  %938 = shufflevector <64 x i32> %921, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %939 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %938, <4 x i32> %30)
  %940 = shufflevector <64 x i32> %921, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %941 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %940, <4 x i32> %30)
  %942 = shufflevector <64 x i32> %921, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %943 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %942, <4 x i32> %30)
  %944 = shufflevector <64 x i32> %921, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %945 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %944, <4 x i32> %30)
  %946 = shufflevector <64 x i32> %921, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %947 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %946, <4 x i32> %30)
  %948 = shufflevector <64 x i32> %921, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %949 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %948, <4 x i32> %30)
  %950 = shufflevector <64 x i32> %921, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %951 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %950, <4 x i32> %30)
  %952 = shufflevector <64 x i32> %921, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %953 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %952, <4 x i32> %30)
  %954 = shufflevector <4 x i32> %953, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %955 = shufflevector <8 x i32> %954, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %956 = shufflevector <16 x i32> %955, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %957 = shufflevector <32 x i32> %956, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %958 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %923, <4 x i32> zeroinitializer)
  %959 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %925, <4 x i32> zeroinitializer)
  %960 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %927, <4 x i32> zeroinitializer)
  %961 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %929, <4 x i32> zeroinitializer)
  %962 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %931, <4 x i32> zeroinitializer)
  %963 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %933, <4 x i32> zeroinitializer)
  %964 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %935, <4 x i32> zeroinitializer)
  %965 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %937, <4 x i32> zeroinitializer)
  %966 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %939, <4 x i32> zeroinitializer)
  %967 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %941, <4 x i32> zeroinitializer)
  %968 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %943, <4 x i32> zeroinitializer)
  %969 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %945, <4 x i32> zeroinitializer)
  %970 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %947, <4 x i32> zeroinitializer)
  %971 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %949, <4 x i32> zeroinitializer)
  %972 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %951, <4 x i32> zeroinitializer)
  %973 = shufflevector <64 x i32> %957, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %974 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %973, <4 x i32> zeroinitializer)
  %975 = shufflevector <4 x i32> %958, <4 x i32> %959, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %976 = shufflevector <4 x i32> %960, <4 x i32> %961, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %977 = shufflevector <4 x i32> %962, <4 x i32> %963, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %978 = shufflevector <4 x i32> %964, <4 x i32> %965, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %979 = shufflevector <4 x i32> %966, <4 x i32> %967, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %980 = shufflevector <4 x i32> %968, <4 x i32> %969, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %981 = shufflevector <4 x i32> %970, <4 x i32> %971, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %982 = shufflevector <4 x i32> %972, <4 x i32> %974, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %983 = shufflevector <8 x i32> %975, <8 x i32> %976, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %984 = shufflevector <8 x i32> %977, <8 x i32> %978, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %985 = shufflevector <8 x i32> %979, <8 x i32> %980, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %986 = shufflevector <8 x i32> %981, <8 x i32> %982, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %987 = shufflevector <16 x i32> %983, <16 x i32> %984, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %988 = shufflevector <16 x i32> %985, <16 x i32> %986, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %989 = shufflevector <32 x i32> %987, <32 x i32> %988, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %990 = add nsw <64 x i32> %989, %542
  %991 = extractelement <64 x i32> %990, i32 0
  %992 = sext i32 %991 to i64
  %993 = getelementptr inbounds i8, i8* %0, i64 %992
  %994 = load i8, i8* %993, align 1, !tbaa !387
  %995 = insertelement <64 x i8> undef, i8 %994, i32 0
  %996 = extractelement <64 x i32> %990, i32 1
  %997 = sext i32 %996 to i64
  %998 = getelementptr inbounds i8, i8* %0, i64 %997
  %999 = load i8, i8* %998, align 1, !tbaa !387
  %1000 = insertelement <64 x i8> %995, i8 %999, i32 1
  %1001 = extractelement <64 x i32> %990, i32 2
  %1002 = sext i32 %1001 to i64
  %1003 = getelementptr inbounds i8, i8* %0, i64 %1002
  %1004 = load i8, i8* %1003, align 1, !tbaa !387
  %1005 = insertelement <64 x i8> %1000, i8 %1004, i32 2
  %1006 = extractelement <64 x i32> %990, i32 3
  %1007 = sext i32 %1006 to i64
  %1008 = getelementptr inbounds i8, i8* %0, i64 %1007
  %1009 = load i8, i8* %1008, align 1, !tbaa !387
  %1010 = insertelement <64 x i8> %1005, i8 %1009, i32 3
  %1011 = extractelement <64 x i32> %990, i32 4
  %1012 = sext i32 %1011 to i64
  %1013 = getelementptr inbounds i8, i8* %0, i64 %1012
  %1014 = load i8, i8* %1013, align 1, !tbaa !387
  %1015 = insertelement <64 x i8> %1010, i8 %1014, i32 4
  %1016 = extractelement <64 x i32> %990, i32 5
  %1017 = sext i32 %1016 to i64
  %1018 = getelementptr inbounds i8, i8* %0, i64 %1017
  %1019 = load i8, i8* %1018, align 1, !tbaa !387
  %1020 = insertelement <64 x i8> %1015, i8 %1019, i32 5
  %1021 = extractelement <64 x i32> %990, i32 6
  %1022 = sext i32 %1021 to i64
  %1023 = getelementptr inbounds i8, i8* %0, i64 %1022
  %1024 = load i8, i8* %1023, align 1, !tbaa !387
  %1025 = insertelement <64 x i8> %1020, i8 %1024, i32 6
  %1026 = extractelement <64 x i32> %990, i32 7
  %1027 = sext i32 %1026 to i64
  %1028 = getelementptr inbounds i8, i8* %0, i64 %1027
  %1029 = load i8, i8* %1028, align 1, !tbaa !387
  %1030 = insertelement <64 x i8> %1025, i8 %1029, i32 7
  %1031 = extractelement <64 x i32> %990, i32 8
  %1032 = sext i32 %1031 to i64
  %1033 = getelementptr inbounds i8, i8* %0, i64 %1032
  %1034 = load i8, i8* %1033, align 1, !tbaa !387
  %1035 = insertelement <64 x i8> %1030, i8 %1034, i32 8
  %1036 = extractelement <64 x i32> %990, i32 9
  %1037 = sext i32 %1036 to i64
  %1038 = getelementptr inbounds i8, i8* %0, i64 %1037
  %1039 = load i8, i8* %1038, align 1, !tbaa !387
  %1040 = insertelement <64 x i8> %1035, i8 %1039, i32 9
  %1041 = extractelement <64 x i32> %990, i32 10
  %1042 = sext i32 %1041 to i64
  %1043 = getelementptr inbounds i8, i8* %0, i64 %1042
  %1044 = load i8, i8* %1043, align 1, !tbaa !387
  %1045 = insertelement <64 x i8> %1040, i8 %1044, i32 10
  %1046 = extractelement <64 x i32> %990, i32 11
  %1047 = sext i32 %1046 to i64
  %1048 = getelementptr inbounds i8, i8* %0, i64 %1047
  %1049 = load i8, i8* %1048, align 1, !tbaa !387
  %1050 = insertelement <64 x i8> %1045, i8 %1049, i32 11
  %1051 = extractelement <64 x i32> %990, i32 12
  %1052 = sext i32 %1051 to i64
  %1053 = getelementptr inbounds i8, i8* %0, i64 %1052
  %1054 = load i8, i8* %1053, align 1, !tbaa !387
  %1055 = insertelement <64 x i8> %1050, i8 %1054, i32 12
  %1056 = extractelement <64 x i32> %990, i32 13
  %1057 = sext i32 %1056 to i64
  %1058 = getelementptr inbounds i8, i8* %0, i64 %1057
  %1059 = load i8, i8* %1058, align 1, !tbaa !387
  %1060 = insertelement <64 x i8> %1055, i8 %1059, i32 13
  %1061 = extractelement <64 x i32> %990, i32 14
  %1062 = sext i32 %1061 to i64
  %1063 = getelementptr inbounds i8, i8* %0, i64 %1062
  %1064 = load i8, i8* %1063, align 1, !tbaa !387
  %1065 = insertelement <64 x i8> %1060, i8 %1064, i32 14
  %1066 = extractelement <64 x i32> %990, i32 15
  %1067 = sext i32 %1066 to i64
  %1068 = getelementptr inbounds i8, i8* %0, i64 %1067
  %1069 = load i8, i8* %1068, align 1, !tbaa !387
  %1070 = insertelement <64 x i8> %1065, i8 %1069, i32 15
  %1071 = extractelement <64 x i32> %990, i32 16
  %1072 = sext i32 %1071 to i64
  %1073 = getelementptr inbounds i8, i8* %0, i64 %1072
  %1074 = load i8, i8* %1073, align 1, !tbaa !387
  %1075 = insertelement <64 x i8> %1070, i8 %1074, i32 16
  %1076 = extractelement <64 x i32> %990, i32 17
  %1077 = sext i32 %1076 to i64
  %1078 = getelementptr inbounds i8, i8* %0, i64 %1077
  %1079 = load i8, i8* %1078, align 1, !tbaa !387
  %1080 = insertelement <64 x i8> %1075, i8 %1079, i32 17
  %1081 = extractelement <64 x i32> %990, i32 18
  %1082 = sext i32 %1081 to i64
  %1083 = getelementptr inbounds i8, i8* %0, i64 %1082
  %1084 = load i8, i8* %1083, align 1, !tbaa !387
  %1085 = insertelement <64 x i8> %1080, i8 %1084, i32 18
  %1086 = extractelement <64 x i32> %990, i32 19
  %1087 = sext i32 %1086 to i64
  %1088 = getelementptr inbounds i8, i8* %0, i64 %1087
  %1089 = load i8, i8* %1088, align 1, !tbaa !387
  %1090 = insertelement <64 x i8> %1085, i8 %1089, i32 19
  %1091 = extractelement <64 x i32> %990, i32 20
  %1092 = sext i32 %1091 to i64
  %1093 = getelementptr inbounds i8, i8* %0, i64 %1092
  %1094 = load i8, i8* %1093, align 1, !tbaa !387
  %1095 = insertelement <64 x i8> %1090, i8 %1094, i32 20
  %1096 = extractelement <64 x i32> %990, i32 21
  %1097 = sext i32 %1096 to i64
  %1098 = getelementptr inbounds i8, i8* %0, i64 %1097
  %1099 = load i8, i8* %1098, align 1, !tbaa !387
  %1100 = insertelement <64 x i8> %1095, i8 %1099, i32 21
  %1101 = extractelement <64 x i32> %990, i32 22
  %1102 = sext i32 %1101 to i64
  %1103 = getelementptr inbounds i8, i8* %0, i64 %1102
  %1104 = load i8, i8* %1103, align 1, !tbaa !387
  %1105 = insertelement <64 x i8> %1100, i8 %1104, i32 22
  %1106 = extractelement <64 x i32> %990, i32 23
  %1107 = sext i32 %1106 to i64
  %1108 = getelementptr inbounds i8, i8* %0, i64 %1107
  %1109 = load i8, i8* %1108, align 1, !tbaa !387
  %1110 = insertelement <64 x i8> %1105, i8 %1109, i32 23
  %1111 = extractelement <64 x i32> %990, i32 24
  %1112 = sext i32 %1111 to i64
  %1113 = getelementptr inbounds i8, i8* %0, i64 %1112
  %1114 = load i8, i8* %1113, align 1, !tbaa !387
  %1115 = insertelement <64 x i8> %1110, i8 %1114, i32 24
  %1116 = extractelement <64 x i32> %990, i32 25
  %1117 = sext i32 %1116 to i64
  %1118 = getelementptr inbounds i8, i8* %0, i64 %1117
  %1119 = load i8, i8* %1118, align 1, !tbaa !387
  %1120 = insertelement <64 x i8> %1115, i8 %1119, i32 25
  %1121 = extractelement <64 x i32> %990, i32 26
  %1122 = sext i32 %1121 to i64
  %1123 = getelementptr inbounds i8, i8* %0, i64 %1122
  %1124 = load i8, i8* %1123, align 1, !tbaa !387
  %1125 = insertelement <64 x i8> %1120, i8 %1124, i32 26
  %1126 = extractelement <64 x i32> %990, i32 27
  %1127 = sext i32 %1126 to i64
  %1128 = getelementptr inbounds i8, i8* %0, i64 %1127
  %1129 = load i8, i8* %1128, align 1, !tbaa !387
  %1130 = insertelement <64 x i8> %1125, i8 %1129, i32 27
  %1131 = extractelement <64 x i32> %990, i32 28
  %1132 = sext i32 %1131 to i64
  %1133 = getelementptr inbounds i8, i8* %0, i64 %1132
  %1134 = load i8, i8* %1133, align 1, !tbaa !387
  %1135 = insertelement <64 x i8> %1130, i8 %1134, i32 28
  %1136 = extractelement <64 x i32> %990, i32 29
  %1137 = sext i32 %1136 to i64
  %1138 = getelementptr inbounds i8, i8* %0, i64 %1137
  %1139 = load i8, i8* %1138, align 1, !tbaa !387
  %1140 = insertelement <64 x i8> %1135, i8 %1139, i32 29
  %1141 = extractelement <64 x i32> %990, i32 30
  %1142 = sext i32 %1141 to i64
  %1143 = getelementptr inbounds i8, i8* %0, i64 %1142
  %1144 = load i8, i8* %1143, align 1, !tbaa !387
  %1145 = insertelement <64 x i8> %1140, i8 %1144, i32 30
  %1146 = extractelement <64 x i32> %990, i32 31
  %1147 = sext i32 %1146 to i64
  %1148 = getelementptr inbounds i8, i8* %0, i64 %1147
  %1149 = load i8, i8* %1148, align 1, !tbaa !387
  %1150 = insertelement <64 x i8> %1145, i8 %1149, i32 31
  %1151 = extractelement <64 x i32> %990, i32 32
  %1152 = sext i32 %1151 to i64
  %1153 = getelementptr inbounds i8, i8* %0, i64 %1152
  %1154 = load i8, i8* %1153, align 1, !tbaa !387
  %1155 = insertelement <64 x i8> %1150, i8 %1154, i32 32
  %1156 = extractelement <64 x i32> %990, i32 33
  %1157 = sext i32 %1156 to i64
  %1158 = getelementptr inbounds i8, i8* %0, i64 %1157
  %1159 = load i8, i8* %1158, align 1, !tbaa !387
  %1160 = insertelement <64 x i8> %1155, i8 %1159, i32 33
  %1161 = extractelement <64 x i32> %990, i32 34
  %1162 = sext i32 %1161 to i64
  %1163 = getelementptr inbounds i8, i8* %0, i64 %1162
  %1164 = load i8, i8* %1163, align 1, !tbaa !387
  %1165 = insertelement <64 x i8> %1160, i8 %1164, i32 34
  %1166 = extractelement <64 x i32> %990, i32 35
  %1167 = sext i32 %1166 to i64
  %1168 = getelementptr inbounds i8, i8* %0, i64 %1167
  %1169 = load i8, i8* %1168, align 1, !tbaa !387
  %1170 = insertelement <64 x i8> %1165, i8 %1169, i32 35
  %1171 = extractelement <64 x i32> %990, i32 36
  %1172 = sext i32 %1171 to i64
  %1173 = getelementptr inbounds i8, i8* %0, i64 %1172
  %1174 = load i8, i8* %1173, align 1, !tbaa !387
  %1175 = insertelement <64 x i8> %1170, i8 %1174, i32 36
  %1176 = extractelement <64 x i32> %990, i32 37
  %1177 = sext i32 %1176 to i64
  %1178 = getelementptr inbounds i8, i8* %0, i64 %1177
  %1179 = load i8, i8* %1178, align 1, !tbaa !387
  %1180 = insertelement <64 x i8> %1175, i8 %1179, i32 37
  %1181 = extractelement <64 x i32> %990, i32 38
  %1182 = sext i32 %1181 to i64
  %1183 = getelementptr inbounds i8, i8* %0, i64 %1182
  %1184 = load i8, i8* %1183, align 1, !tbaa !387
  %1185 = insertelement <64 x i8> %1180, i8 %1184, i32 38
  %1186 = extractelement <64 x i32> %990, i32 39
  %1187 = sext i32 %1186 to i64
  %1188 = getelementptr inbounds i8, i8* %0, i64 %1187
  %1189 = load i8, i8* %1188, align 1, !tbaa !387
  %1190 = insertelement <64 x i8> %1185, i8 %1189, i32 39
  %1191 = extractelement <64 x i32> %990, i32 40
  %1192 = sext i32 %1191 to i64
  %1193 = getelementptr inbounds i8, i8* %0, i64 %1192
  %1194 = load i8, i8* %1193, align 1, !tbaa !387
  %1195 = insertelement <64 x i8> %1190, i8 %1194, i32 40
  %1196 = extractelement <64 x i32> %990, i32 41
  %1197 = sext i32 %1196 to i64
  %1198 = getelementptr inbounds i8, i8* %0, i64 %1197
  %1199 = load i8, i8* %1198, align 1, !tbaa !387
  %1200 = insertelement <64 x i8> %1195, i8 %1199, i32 41
  %1201 = extractelement <64 x i32> %990, i32 42
  %1202 = sext i32 %1201 to i64
  %1203 = getelementptr inbounds i8, i8* %0, i64 %1202
  %1204 = load i8, i8* %1203, align 1, !tbaa !387
  %1205 = insertelement <64 x i8> %1200, i8 %1204, i32 42
  %1206 = extractelement <64 x i32> %990, i32 43
  %1207 = sext i32 %1206 to i64
  %1208 = getelementptr inbounds i8, i8* %0, i64 %1207
  %1209 = load i8, i8* %1208, align 1, !tbaa !387
  %1210 = insertelement <64 x i8> %1205, i8 %1209, i32 43
  %1211 = extractelement <64 x i32> %990, i32 44
  %1212 = sext i32 %1211 to i64
  %1213 = getelementptr inbounds i8, i8* %0, i64 %1212
  %1214 = load i8, i8* %1213, align 1, !tbaa !387
  %1215 = insertelement <64 x i8> %1210, i8 %1214, i32 44
  %1216 = extractelement <64 x i32> %990, i32 45
  %1217 = sext i32 %1216 to i64
  %1218 = getelementptr inbounds i8, i8* %0, i64 %1217
  %1219 = load i8, i8* %1218, align 1, !tbaa !387
  %1220 = insertelement <64 x i8> %1215, i8 %1219, i32 45
  %1221 = extractelement <64 x i32> %990, i32 46
  %1222 = sext i32 %1221 to i64
  %1223 = getelementptr inbounds i8, i8* %0, i64 %1222
  %1224 = load i8, i8* %1223, align 1, !tbaa !387
  %1225 = insertelement <64 x i8> %1220, i8 %1224, i32 46
  %1226 = extractelement <64 x i32> %990, i32 47
  %1227 = sext i32 %1226 to i64
  %1228 = getelementptr inbounds i8, i8* %0, i64 %1227
  %1229 = load i8, i8* %1228, align 1, !tbaa !387
  %1230 = insertelement <64 x i8> %1225, i8 %1229, i32 47
  %1231 = extractelement <64 x i32> %990, i32 48
  %1232 = sext i32 %1231 to i64
  %1233 = getelementptr inbounds i8, i8* %0, i64 %1232
  %1234 = load i8, i8* %1233, align 1, !tbaa !387
  %1235 = insertelement <64 x i8> %1230, i8 %1234, i32 48
  %1236 = extractelement <64 x i32> %990, i32 49
  %1237 = sext i32 %1236 to i64
  %1238 = getelementptr inbounds i8, i8* %0, i64 %1237
  %1239 = load i8, i8* %1238, align 1, !tbaa !387
  %1240 = insertelement <64 x i8> %1235, i8 %1239, i32 49
  %1241 = extractelement <64 x i32> %990, i32 50
  %1242 = sext i32 %1241 to i64
  %1243 = getelementptr inbounds i8, i8* %0, i64 %1242
  %1244 = load i8, i8* %1243, align 1, !tbaa !387
  %1245 = insertelement <64 x i8> %1240, i8 %1244, i32 50
  %1246 = extractelement <64 x i32> %990, i32 51
  %1247 = sext i32 %1246 to i64
  %1248 = getelementptr inbounds i8, i8* %0, i64 %1247
  %1249 = load i8, i8* %1248, align 1, !tbaa !387
  %1250 = insertelement <64 x i8> %1245, i8 %1249, i32 51
  %1251 = extractelement <64 x i32> %990, i32 52
  %1252 = sext i32 %1251 to i64
  %1253 = getelementptr inbounds i8, i8* %0, i64 %1252
  %1254 = load i8, i8* %1253, align 1, !tbaa !387
  %1255 = insertelement <64 x i8> %1250, i8 %1254, i32 52
  %1256 = extractelement <64 x i32> %990, i32 53
  %1257 = sext i32 %1256 to i64
  %1258 = getelementptr inbounds i8, i8* %0, i64 %1257
  %1259 = load i8, i8* %1258, align 1, !tbaa !387
  %1260 = insertelement <64 x i8> %1255, i8 %1259, i32 53
  %1261 = extractelement <64 x i32> %990, i32 54
  %1262 = sext i32 %1261 to i64
  %1263 = getelementptr inbounds i8, i8* %0, i64 %1262
  %1264 = load i8, i8* %1263, align 1, !tbaa !387
  %1265 = insertelement <64 x i8> %1260, i8 %1264, i32 54
  %1266 = extractelement <64 x i32> %990, i32 55
  %1267 = sext i32 %1266 to i64
  %1268 = getelementptr inbounds i8, i8* %0, i64 %1267
  %1269 = load i8, i8* %1268, align 1, !tbaa !387
  %1270 = insertelement <64 x i8> %1265, i8 %1269, i32 55
  %1271 = extractelement <64 x i32> %990, i32 56
  %1272 = sext i32 %1271 to i64
  %1273 = getelementptr inbounds i8, i8* %0, i64 %1272
  %1274 = load i8, i8* %1273, align 1, !tbaa !387
  %1275 = insertelement <64 x i8> %1270, i8 %1274, i32 56
  %1276 = extractelement <64 x i32> %990, i32 57
  %1277 = sext i32 %1276 to i64
  %1278 = getelementptr inbounds i8, i8* %0, i64 %1277
  %1279 = load i8, i8* %1278, align 1, !tbaa !387
  %1280 = insertelement <64 x i8> %1275, i8 %1279, i32 57
  %1281 = extractelement <64 x i32> %990, i32 58
  %1282 = sext i32 %1281 to i64
  %1283 = getelementptr inbounds i8, i8* %0, i64 %1282
  %1284 = load i8, i8* %1283, align 1, !tbaa !387
  %1285 = insertelement <64 x i8> %1280, i8 %1284, i32 58
  %1286 = extractelement <64 x i32> %990, i32 59
  %1287 = sext i32 %1286 to i64
  %1288 = getelementptr inbounds i8, i8* %0, i64 %1287
  %1289 = load i8, i8* %1288, align 1, !tbaa !387
  %1290 = insertelement <64 x i8> %1285, i8 %1289, i32 59
  %1291 = extractelement <64 x i32> %990, i32 60
  %1292 = sext i32 %1291 to i64
  %1293 = getelementptr inbounds i8, i8* %0, i64 %1292
  %1294 = load i8, i8* %1293, align 1, !tbaa !387
  %1295 = insertelement <64 x i8> %1290, i8 %1294, i32 60
  %1296 = extractelement <64 x i32> %990, i32 61
  %1297 = sext i32 %1296 to i64
  %1298 = getelementptr inbounds i8, i8* %0, i64 %1297
  %1299 = load i8, i8* %1298, align 1, !tbaa !387
  %1300 = insertelement <64 x i8> %1295, i8 %1299, i32 61
  %1301 = extractelement <64 x i32> %990, i32 62
  %1302 = sext i32 %1301 to i64
  %1303 = getelementptr inbounds i8, i8* %0, i64 %1302
  %1304 = load i8, i8* %1303, align 1, !tbaa !387
  %1305 = insertelement <64 x i8> %1300, i8 %1304, i32 62
  %1306 = extractelement <64 x i32> %990, i32 63
  %1307 = sext i32 %1306 to i64
  %1308 = getelementptr inbounds i8, i8* %0, i64 %1307
  %1309 = load i8, i8* %1308, align 1, !tbaa !387
  %1310 = insertelement <64 x i8> %1305, i8 %1309, i32 63
  %1311 = shufflevector <64 x i8> %1310, <64 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1312 = add nsw i64 %indvars.iv304, %914
  %1313 = shl nsw i64 %1312, 6
  %1314 = getelementptr inbounds i8, i8* %bounded_input, i64 %1313
  %1315 = getelementptr inbounds i8, i8* %1314, i64 64
  %1316 = bitcast i8* %1315 to <16 x i8>*
  store <16 x i8> %1311, <16 x i8>* %1316, align 16, !tbaa !390
  %1317 = shufflevector <64 x i8> %1310, <64 x i8> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1318 = getelementptr inbounds i8, i8* %1314, i64 80
  %1319 = bitcast i8* %1318 to <16 x i8>*
  store <16 x i8> %1317, <16 x i8>* %1319, align 16, !tbaa !390
  %1320 = shufflevector <64 x i8> %1310, <64 x i8> undef, <16 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %1321 = getelementptr inbounds i8, i8* %1314, i64 96
  %1322 = bitcast i8* %1321 to <16 x i8>*
  store <16 x i8> %1320, <16 x i8>* %1322, align 16, !tbaa !390
  %1323 = shufflevector <64 x i8> %1310, <64 x i8> undef, <16 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1324 = getelementptr inbounds i8, i8* %1314, i64 112
  %1325 = bitcast i8* %1324 to <16 x i8>*
  store <16 x i8> %1323, <16 x i8>* %1325, align 16, !tbaa !390
  %indvars.iv.next305 = add nuw nsw i64 %indvars.iv304, 1
  %.not237 = icmp eq i64 %indvars.iv.next305, %40
  br i1 %.not237, label %"end for bounded_input.s0.x.x.rebased2", label %"for bounded_input.s0.x.x.rebased1"

"end for bounded_input.s0.x.x.rebased2":          ; preds = %"for bounded_input.s0.x.x.rebased1", %"end for bounded_input.s0.x.x.rebased"
  %indvars.iv.next307 = add nuw nsw i64 %indvars.iv306, 1
  %.not236 = icmp eq i64 %indvars.iv306, %145
  br i1 %.not236, label %"end for bounded_input.s0.y.rebased", label %"for bounded_input.s0.y.rebased"

"for bounded_input.s0.y.rebased4":                ; preds = %"for bounded_input.s0.y.rebased4.preheader", %"end for bounded_input.s0.x.x8"
  %indvars.iv310 = phi i64 [ 0, %"for bounded_input.s0.y.rebased4.preheader" ], [ %1328, %"end for bounded_input.s0.x.x8" ]
  %1326 = add nsw i64 %indvars.iv310, %885
  %.not233 = icmp slt i64 %1326, %41
  %1327 = trunc i64 %1326 to i32
  %a22 = select i1 %.not233, i32 %1327, i32 %a23
  %1328 = add nuw nsw i64 %indvars.iv310, 1
  br i1 %27, label %"for bounded_input.s0.x.x7.preheader", label %"end for bounded_input.s0.x.x8", !prof !385

"for bounded_input.s0.x.x7.preheader":            ; preds = %"for bounded_input.s0.y.rebased4"
  %1329 = trunc i64 %1328 to i32
  %1330 = sub i32 %1329, %a7
  %1331 = add i32 %1330, %bounded_input.s0.y.epilogue
  %t104 = mul i32 %33, %1331
  %1332 = icmp sgt i32 %a22, 0
  %1333 = select i1 %1332, i32 %a22, i32 0
  %t103 = mul nsw i32 %1333, %4
  %1334 = insertelement <64 x i32> undef, i32 %t103, i32 0
  %1335 = shufflevector <64 x i32> %1334, <64 x i32> undef, <64 x i32> zeroinitializer
  %1336 = sext i32 %t104 to i64
  br label %"for bounded_input.s0.x.x7"

"for bounded_input.s0.x.x7":                      ; preds = %"for bounded_input.s0.x.x7.preheader", %"for bounded_input.s0.x.x7"
  %indvars.iv308 = phi i64 [ 0, %"for bounded_input.s0.x.x7.preheader" ], [ %indvars.iv.next309, %"for bounded_input.s0.x.x7" ]
  %1337 = trunc i64 %indvars.iv308 to i32
  %1338 = shl nsw i32 %1337, 6
  %1339 = add nsw i32 %1338, -1
  %1340 = insertelement <64 x i32> undef, i32 %1339, i32 0
  %1341 = shufflevector <64 x i32> %1340, <64 x i32> undef, <64 x i32> zeroinitializer
  %1342 = add nsw <64 x i32> %1341, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1343 = shufflevector <64 x i32> %1342, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1344 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1343, <4 x i32> %30)
  %1345 = shufflevector <64 x i32> %1342, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1346 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1345, <4 x i32> %30)
  %1347 = shufflevector <64 x i32> %1342, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %1348 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1347, <4 x i32> %30)
  %1349 = shufflevector <64 x i32> %1342, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %1350 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1349, <4 x i32> %30)
  %1351 = shufflevector <64 x i32> %1342, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %1352 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1351, <4 x i32> %30)
  %1353 = shufflevector <64 x i32> %1342, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %1354 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1353, <4 x i32> %30)
  %1355 = shufflevector <64 x i32> %1342, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %1356 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1355, <4 x i32> %30)
  %1357 = shufflevector <64 x i32> %1342, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %1358 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1357, <4 x i32> %30)
  %1359 = shufflevector <64 x i32> %1342, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %1360 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1359, <4 x i32> %30)
  %1361 = shufflevector <64 x i32> %1342, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %1362 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1361, <4 x i32> %30)
  %1363 = shufflevector <64 x i32> %1342, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %1364 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1363, <4 x i32> %30)
  %1365 = shufflevector <64 x i32> %1342, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %1366 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1365, <4 x i32> %30)
  %1367 = shufflevector <64 x i32> %1342, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %1368 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1367, <4 x i32> %30)
  %1369 = shufflevector <64 x i32> %1342, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %1370 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1369, <4 x i32> %30)
  %1371 = shufflevector <64 x i32> %1342, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %1372 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1371, <4 x i32> %30)
  %1373 = shufflevector <64 x i32> %1342, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %1374 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1373, <4 x i32> %30)
  %1375 = shufflevector <4 x i32> %1374, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %1376 = shufflevector <8 x i32> %1375, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %1377 = shufflevector <16 x i32> %1376, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %1378 = shufflevector <32 x i32> %1377, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %1379 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1344, <4 x i32> zeroinitializer)
  %1380 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1346, <4 x i32> zeroinitializer)
  %1381 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1348, <4 x i32> zeroinitializer)
  %1382 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1350, <4 x i32> zeroinitializer)
  %1383 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1352, <4 x i32> zeroinitializer)
  %1384 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1354, <4 x i32> zeroinitializer)
  %1385 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1356, <4 x i32> zeroinitializer)
  %1386 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1358, <4 x i32> zeroinitializer)
  %1387 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1360, <4 x i32> zeroinitializer)
  %1388 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1362, <4 x i32> zeroinitializer)
  %1389 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1364, <4 x i32> zeroinitializer)
  %1390 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1366, <4 x i32> zeroinitializer)
  %1391 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1368, <4 x i32> zeroinitializer)
  %1392 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1370, <4 x i32> zeroinitializer)
  %1393 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1372, <4 x i32> zeroinitializer)
  %1394 = shufflevector <64 x i32> %1378, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %1395 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1394, <4 x i32> zeroinitializer)
  %1396 = shufflevector <4 x i32> %1379, <4 x i32> %1380, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1397 = shufflevector <4 x i32> %1381, <4 x i32> %1382, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1398 = shufflevector <4 x i32> %1383, <4 x i32> %1384, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1399 = shufflevector <4 x i32> %1385, <4 x i32> %1386, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1400 = shufflevector <4 x i32> %1387, <4 x i32> %1388, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1401 = shufflevector <4 x i32> %1389, <4 x i32> %1390, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1402 = shufflevector <4 x i32> %1391, <4 x i32> %1392, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1403 = shufflevector <4 x i32> %1393, <4 x i32> %1395, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1404 = shufflevector <8 x i32> %1396, <8 x i32> %1397, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1405 = shufflevector <8 x i32> %1398, <8 x i32> %1399, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1406 = shufflevector <8 x i32> %1400, <8 x i32> %1401, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1407 = shufflevector <8 x i32> %1402, <8 x i32> %1403, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1408 = shufflevector <16 x i32> %1404, <16 x i32> %1405, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1409 = shufflevector <16 x i32> %1406, <16 x i32> %1407, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1410 = shufflevector <32 x i32> %1408, <32 x i32> %1409, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1411 = add nsw <64 x i32> %1410, %1335
  %1412 = extractelement <64 x i32> %1411, i32 0
  %1413 = sext i32 %1412 to i64
  %1414 = getelementptr inbounds i8, i8* %0, i64 %1413
  %1415 = load i8, i8* %1414, align 1, !tbaa !387
  %1416 = insertelement <64 x i8> undef, i8 %1415, i32 0
  %1417 = extractelement <64 x i32> %1411, i32 1
  %1418 = sext i32 %1417 to i64
  %1419 = getelementptr inbounds i8, i8* %0, i64 %1418
  %1420 = load i8, i8* %1419, align 1, !tbaa !387
  %1421 = insertelement <64 x i8> %1416, i8 %1420, i32 1
  %1422 = extractelement <64 x i32> %1411, i32 2
  %1423 = sext i32 %1422 to i64
  %1424 = getelementptr inbounds i8, i8* %0, i64 %1423
  %1425 = load i8, i8* %1424, align 1, !tbaa !387
  %1426 = insertelement <64 x i8> %1421, i8 %1425, i32 2
  %1427 = extractelement <64 x i32> %1411, i32 3
  %1428 = sext i32 %1427 to i64
  %1429 = getelementptr inbounds i8, i8* %0, i64 %1428
  %1430 = load i8, i8* %1429, align 1, !tbaa !387
  %1431 = insertelement <64 x i8> %1426, i8 %1430, i32 3
  %1432 = extractelement <64 x i32> %1411, i32 4
  %1433 = sext i32 %1432 to i64
  %1434 = getelementptr inbounds i8, i8* %0, i64 %1433
  %1435 = load i8, i8* %1434, align 1, !tbaa !387
  %1436 = insertelement <64 x i8> %1431, i8 %1435, i32 4
  %1437 = extractelement <64 x i32> %1411, i32 5
  %1438 = sext i32 %1437 to i64
  %1439 = getelementptr inbounds i8, i8* %0, i64 %1438
  %1440 = load i8, i8* %1439, align 1, !tbaa !387
  %1441 = insertelement <64 x i8> %1436, i8 %1440, i32 5
  %1442 = extractelement <64 x i32> %1411, i32 6
  %1443 = sext i32 %1442 to i64
  %1444 = getelementptr inbounds i8, i8* %0, i64 %1443
  %1445 = load i8, i8* %1444, align 1, !tbaa !387
  %1446 = insertelement <64 x i8> %1441, i8 %1445, i32 6
  %1447 = extractelement <64 x i32> %1411, i32 7
  %1448 = sext i32 %1447 to i64
  %1449 = getelementptr inbounds i8, i8* %0, i64 %1448
  %1450 = load i8, i8* %1449, align 1, !tbaa !387
  %1451 = insertelement <64 x i8> %1446, i8 %1450, i32 7
  %1452 = extractelement <64 x i32> %1411, i32 8
  %1453 = sext i32 %1452 to i64
  %1454 = getelementptr inbounds i8, i8* %0, i64 %1453
  %1455 = load i8, i8* %1454, align 1, !tbaa !387
  %1456 = insertelement <64 x i8> %1451, i8 %1455, i32 8
  %1457 = extractelement <64 x i32> %1411, i32 9
  %1458 = sext i32 %1457 to i64
  %1459 = getelementptr inbounds i8, i8* %0, i64 %1458
  %1460 = load i8, i8* %1459, align 1, !tbaa !387
  %1461 = insertelement <64 x i8> %1456, i8 %1460, i32 9
  %1462 = extractelement <64 x i32> %1411, i32 10
  %1463 = sext i32 %1462 to i64
  %1464 = getelementptr inbounds i8, i8* %0, i64 %1463
  %1465 = load i8, i8* %1464, align 1, !tbaa !387
  %1466 = insertelement <64 x i8> %1461, i8 %1465, i32 10
  %1467 = extractelement <64 x i32> %1411, i32 11
  %1468 = sext i32 %1467 to i64
  %1469 = getelementptr inbounds i8, i8* %0, i64 %1468
  %1470 = load i8, i8* %1469, align 1, !tbaa !387
  %1471 = insertelement <64 x i8> %1466, i8 %1470, i32 11
  %1472 = extractelement <64 x i32> %1411, i32 12
  %1473 = sext i32 %1472 to i64
  %1474 = getelementptr inbounds i8, i8* %0, i64 %1473
  %1475 = load i8, i8* %1474, align 1, !tbaa !387
  %1476 = insertelement <64 x i8> %1471, i8 %1475, i32 12
  %1477 = extractelement <64 x i32> %1411, i32 13
  %1478 = sext i32 %1477 to i64
  %1479 = getelementptr inbounds i8, i8* %0, i64 %1478
  %1480 = load i8, i8* %1479, align 1, !tbaa !387
  %1481 = insertelement <64 x i8> %1476, i8 %1480, i32 13
  %1482 = extractelement <64 x i32> %1411, i32 14
  %1483 = sext i32 %1482 to i64
  %1484 = getelementptr inbounds i8, i8* %0, i64 %1483
  %1485 = load i8, i8* %1484, align 1, !tbaa !387
  %1486 = insertelement <64 x i8> %1481, i8 %1485, i32 14
  %1487 = extractelement <64 x i32> %1411, i32 15
  %1488 = sext i32 %1487 to i64
  %1489 = getelementptr inbounds i8, i8* %0, i64 %1488
  %1490 = load i8, i8* %1489, align 1, !tbaa !387
  %1491 = insertelement <64 x i8> %1486, i8 %1490, i32 15
  %1492 = extractelement <64 x i32> %1411, i32 16
  %1493 = sext i32 %1492 to i64
  %1494 = getelementptr inbounds i8, i8* %0, i64 %1493
  %1495 = load i8, i8* %1494, align 1, !tbaa !387
  %1496 = insertelement <64 x i8> %1491, i8 %1495, i32 16
  %1497 = extractelement <64 x i32> %1411, i32 17
  %1498 = sext i32 %1497 to i64
  %1499 = getelementptr inbounds i8, i8* %0, i64 %1498
  %1500 = load i8, i8* %1499, align 1, !tbaa !387
  %1501 = insertelement <64 x i8> %1496, i8 %1500, i32 17
  %1502 = extractelement <64 x i32> %1411, i32 18
  %1503 = sext i32 %1502 to i64
  %1504 = getelementptr inbounds i8, i8* %0, i64 %1503
  %1505 = load i8, i8* %1504, align 1, !tbaa !387
  %1506 = insertelement <64 x i8> %1501, i8 %1505, i32 18
  %1507 = extractelement <64 x i32> %1411, i32 19
  %1508 = sext i32 %1507 to i64
  %1509 = getelementptr inbounds i8, i8* %0, i64 %1508
  %1510 = load i8, i8* %1509, align 1, !tbaa !387
  %1511 = insertelement <64 x i8> %1506, i8 %1510, i32 19
  %1512 = extractelement <64 x i32> %1411, i32 20
  %1513 = sext i32 %1512 to i64
  %1514 = getelementptr inbounds i8, i8* %0, i64 %1513
  %1515 = load i8, i8* %1514, align 1, !tbaa !387
  %1516 = insertelement <64 x i8> %1511, i8 %1515, i32 20
  %1517 = extractelement <64 x i32> %1411, i32 21
  %1518 = sext i32 %1517 to i64
  %1519 = getelementptr inbounds i8, i8* %0, i64 %1518
  %1520 = load i8, i8* %1519, align 1, !tbaa !387
  %1521 = insertelement <64 x i8> %1516, i8 %1520, i32 21
  %1522 = extractelement <64 x i32> %1411, i32 22
  %1523 = sext i32 %1522 to i64
  %1524 = getelementptr inbounds i8, i8* %0, i64 %1523
  %1525 = load i8, i8* %1524, align 1, !tbaa !387
  %1526 = insertelement <64 x i8> %1521, i8 %1525, i32 22
  %1527 = extractelement <64 x i32> %1411, i32 23
  %1528 = sext i32 %1527 to i64
  %1529 = getelementptr inbounds i8, i8* %0, i64 %1528
  %1530 = load i8, i8* %1529, align 1, !tbaa !387
  %1531 = insertelement <64 x i8> %1526, i8 %1530, i32 23
  %1532 = extractelement <64 x i32> %1411, i32 24
  %1533 = sext i32 %1532 to i64
  %1534 = getelementptr inbounds i8, i8* %0, i64 %1533
  %1535 = load i8, i8* %1534, align 1, !tbaa !387
  %1536 = insertelement <64 x i8> %1531, i8 %1535, i32 24
  %1537 = extractelement <64 x i32> %1411, i32 25
  %1538 = sext i32 %1537 to i64
  %1539 = getelementptr inbounds i8, i8* %0, i64 %1538
  %1540 = load i8, i8* %1539, align 1, !tbaa !387
  %1541 = insertelement <64 x i8> %1536, i8 %1540, i32 25
  %1542 = extractelement <64 x i32> %1411, i32 26
  %1543 = sext i32 %1542 to i64
  %1544 = getelementptr inbounds i8, i8* %0, i64 %1543
  %1545 = load i8, i8* %1544, align 1, !tbaa !387
  %1546 = insertelement <64 x i8> %1541, i8 %1545, i32 26
  %1547 = extractelement <64 x i32> %1411, i32 27
  %1548 = sext i32 %1547 to i64
  %1549 = getelementptr inbounds i8, i8* %0, i64 %1548
  %1550 = load i8, i8* %1549, align 1, !tbaa !387
  %1551 = insertelement <64 x i8> %1546, i8 %1550, i32 27
  %1552 = extractelement <64 x i32> %1411, i32 28
  %1553 = sext i32 %1552 to i64
  %1554 = getelementptr inbounds i8, i8* %0, i64 %1553
  %1555 = load i8, i8* %1554, align 1, !tbaa !387
  %1556 = insertelement <64 x i8> %1551, i8 %1555, i32 28
  %1557 = extractelement <64 x i32> %1411, i32 29
  %1558 = sext i32 %1557 to i64
  %1559 = getelementptr inbounds i8, i8* %0, i64 %1558
  %1560 = load i8, i8* %1559, align 1, !tbaa !387
  %1561 = insertelement <64 x i8> %1556, i8 %1560, i32 29
  %1562 = extractelement <64 x i32> %1411, i32 30
  %1563 = sext i32 %1562 to i64
  %1564 = getelementptr inbounds i8, i8* %0, i64 %1563
  %1565 = load i8, i8* %1564, align 1, !tbaa !387
  %1566 = insertelement <64 x i8> %1561, i8 %1565, i32 30
  %1567 = extractelement <64 x i32> %1411, i32 31
  %1568 = sext i32 %1567 to i64
  %1569 = getelementptr inbounds i8, i8* %0, i64 %1568
  %1570 = load i8, i8* %1569, align 1, !tbaa !387
  %1571 = insertelement <64 x i8> %1566, i8 %1570, i32 31
  %1572 = extractelement <64 x i32> %1411, i32 32
  %1573 = sext i32 %1572 to i64
  %1574 = getelementptr inbounds i8, i8* %0, i64 %1573
  %1575 = load i8, i8* %1574, align 1, !tbaa !387
  %1576 = insertelement <64 x i8> %1571, i8 %1575, i32 32
  %1577 = extractelement <64 x i32> %1411, i32 33
  %1578 = sext i32 %1577 to i64
  %1579 = getelementptr inbounds i8, i8* %0, i64 %1578
  %1580 = load i8, i8* %1579, align 1, !tbaa !387
  %1581 = insertelement <64 x i8> %1576, i8 %1580, i32 33
  %1582 = extractelement <64 x i32> %1411, i32 34
  %1583 = sext i32 %1582 to i64
  %1584 = getelementptr inbounds i8, i8* %0, i64 %1583
  %1585 = load i8, i8* %1584, align 1, !tbaa !387
  %1586 = insertelement <64 x i8> %1581, i8 %1585, i32 34
  %1587 = extractelement <64 x i32> %1411, i32 35
  %1588 = sext i32 %1587 to i64
  %1589 = getelementptr inbounds i8, i8* %0, i64 %1588
  %1590 = load i8, i8* %1589, align 1, !tbaa !387
  %1591 = insertelement <64 x i8> %1586, i8 %1590, i32 35
  %1592 = extractelement <64 x i32> %1411, i32 36
  %1593 = sext i32 %1592 to i64
  %1594 = getelementptr inbounds i8, i8* %0, i64 %1593
  %1595 = load i8, i8* %1594, align 1, !tbaa !387
  %1596 = insertelement <64 x i8> %1591, i8 %1595, i32 36
  %1597 = extractelement <64 x i32> %1411, i32 37
  %1598 = sext i32 %1597 to i64
  %1599 = getelementptr inbounds i8, i8* %0, i64 %1598
  %1600 = load i8, i8* %1599, align 1, !tbaa !387
  %1601 = insertelement <64 x i8> %1596, i8 %1600, i32 37
  %1602 = extractelement <64 x i32> %1411, i32 38
  %1603 = sext i32 %1602 to i64
  %1604 = getelementptr inbounds i8, i8* %0, i64 %1603
  %1605 = load i8, i8* %1604, align 1, !tbaa !387
  %1606 = insertelement <64 x i8> %1601, i8 %1605, i32 38
  %1607 = extractelement <64 x i32> %1411, i32 39
  %1608 = sext i32 %1607 to i64
  %1609 = getelementptr inbounds i8, i8* %0, i64 %1608
  %1610 = load i8, i8* %1609, align 1, !tbaa !387
  %1611 = insertelement <64 x i8> %1606, i8 %1610, i32 39
  %1612 = extractelement <64 x i32> %1411, i32 40
  %1613 = sext i32 %1612 to i64
  %1614 = getelementptr inbounds i8, i8* %0, i64 %1613
  %1615 = load i8, i8* %1614, align 1, !tbaa !387
  %1616 = insertelement <64 x i8> %1611, i8 %1615, i32 40
  %1617 = extractelement <64 x i32> %1411, i32 41
  %1618 = sext i32 %1617 to i64
  %1619 = getelementptr inbounds i8, i8* %0, i64 %1618
  %1620 = load i8, i8* %1619, align 1, !tbaa !387
  %1621 = insertelement <64 x i8> %1616, i8 %1620, i32 41
  %1622 = extractelement <64 x i32> %1411, i32 42
  %1623 = sext i32 %1622 to i64
  %1624 = getelementptr inbounds i8, i8* %0, i64 %1623
  %1625 = load i8, i8* %1624, align 1, !tbaa !387
  %1626 = insertelement <64 x i8> %1621, i8 %1625, i32 42
  %1627 = extractelement <64 x i32> %1411, i32 43
  %1628 = sext i32 %1627 to i64
  %1629 = getelementptr inbounds i8, i8* %0, i64 %1628
  %1630 = load i8, i8* %1629, align 1, !tbaa !387
  %1631 = insertelement <64 x i8> %1626, i8 %1630, i32 43
  %1632 = extractelement <64 x i32> %1411, i32 44
  %1633 = sext i32 %1632 to i64
  %1634 = getelementptr inbounds i8, i8* %0, i64 %1633
  %1635 = load i8, i8* %1634, align 1, !tbaa !387
  %1636 = insertelement <64 x i8> %1631, i8 %1635, i32 44
  %1637 = extractelement <64 x i32> %1411, i32 45
  %1638 = sext i32 %1637 to i64
  %1639 = getelementptr inbounds i8, i8* %0, i64 %1638
  %1640 = load i8, i8* %1639, align 1, !tbaa !387
  %1641 = insertelement <64 x i8> %1636, i8 %1640, i32 45
  %1642 = extractelement <64 x i32> %1411, i32 46
  %1643 = sext i32 %1642 to i64
  %1644 = getelementptr inbounds i8, i8* %0, i64 %1643
  %1645 = load i8, i8* %1644, align 1, !tbaa !387
  %1646 = insertelement <64 x i8> %1641, i8 %1645, i32 46
  %1647 = extractelement <64 x i32> %1411, i32 47
  %1648 = sext i32 %1647 to i64
  %1649 = getelementptr inbounds i8, i8* %0, i64 %1648
  %1650 = load i8, i8* %1649, align 1, !tbaa !387
  %1651 = insertelement <64 x i8> %1646, i8 %1650, i32 47
  %1652 = extractelement <64 x i32> %1411, i32 48
  %1653 = sext i32 %1652 to i64
  %1654 = getelementptr inbounds i8, i8* %0, i64 %1653
  %1655 = load i8, i8* %1654, align 1, !tbaa !387
  %1656 = insertelement <64 x i8> %1651, i8 %1655, i32 48
  %1657 = extractelement <64 x i32> %1411, i32 49
  %1658 = sext i32 %1657 to i64
  %1659 = getelementptr inbounds i8, i8* %0, i64 %1658
  %1660 = load i8, i8* %1659, align 1, !tbaa !387
  %1661 = insertelement <64 x i8> %1656, i8 %1660, i32 49
  %1662 = extractelement <64 x i32> %1411, i32 50
  %1663 = sext i32 %1662 to i64
  %1664 = getelementptr inbounds i8, i8* %0, i64 %1663
  %1665 = load i8, i8* %1664, align 1, !tbaa !387
  %1666 = insertelement <64 x i8> %1661, i8 %1665, i32 50
  %1667 = extractelement <64 x i32> %1411, i32 51
  %1668 = sext i32 %1667 to i64
  %1669 = getelementptr inbounds i8, i8* %0, i64 %1668
  %1670 = load i8, i8* %1669, align 1, !tbaa !387
  %1671 = insertelement <64 x i8> %1666, i8 %1670, i32 51
  %1672 = extractelement <64 x i32> %1411, i32 52
  %1673 = sext i32 %1672 to i64
  %1674 = getelementptr inbounds i8, i8* %0, i64 %1673
  %1675 = load i8, i8* %1674, align 1, !tbaa !387
  %1676 = insertelement <64 x i8> %1671, i8 %1675, i32 52
  %1677 = extractelement <64 x i32> %1411, i32 53
  %1678 = sext i32 %1677 to i64
  %1679 = getelementptr inbounds i8, i8* %0, i64 %1678
  %1680 = load i8, i8* %1679, align 1, !tbaa !387
  %1681 = insertelement <64 x i8> %1676, i8 %1680, i32 53
  %1682 = extractelement <64 x i32> %1411, i32 54
  %1683 = sext i32 %1682 to i64
  %1684 = getelementptr inbounds i8, i8* %0, i64 %1683
  %1685 = load i8, i8* %1684, align 1, !tbaa !387
  %1686 = insertelement <64 x i8> %1681, i8 %1685, i32 54
  %1687 = extractelement <64 x i32> %1411, i32 55
  %1688 = sext i32 %1687 to i64
  %1689 = getelementptr inbounds i8, i8* %0, i64 %1688
  %1690 = load i8, i8* %1689, align 1, !tbaa !387
  %1691 = insertelement <64 x i8> %1686, i8 %1690, i32 55
  %1692 = extractelement <64 x i32> %1411, i32 56
  %1693 = sext i32 %1692 to i64
  %1694 = getelementptr inbounds i8, i8* %0, i64 %1693
  %1695 = load i8, i8* %1694, align 1, !tbaa !387
  %1696 = insertelement <64 x i8> %1691, i8 %1695, i32 56
  %1697 = extractelement <64 x i32> %1411, i32 57
  %1698 = sext i32 %1697 to i64
  %1699 = getelementptr inbounds i8, i8* %0, i64 %1698
  %1700 = load i8, i8* %1699, align 1, !tbaa !387
  %1701 = insertelement <64 x i8> %1696, i8 %1700, i32 57
  %1702 = extractelement <64 x i32> %1411, i32 58
  %1703 = sext i32 %1702 to i64
  %1704 = getelementptr inbounds i8, i8* %0, i64 %1703
  %1705 = load i8, i8* %1704, align 1, !tbaa !387
  %1706 = insertelement <64 x i8> %1701, i8 %1705, i32 58
  %1707 = extractelement <64 x i32> %1411, i32 59
  %1708 = sext i32 %1707 to i64
  %1709 = getelementptr inbounds i8, i8* %0, i64 %1708
  %1710 = load i8, i8* %1709, align 1, !tbaa !387
  %1711 = insertelement <64 x i8> %1706, i8 %1710, i32 59
  %1712 = extractelement <64 x i32> %1411, i32 60
  %1713 = sext i32 %1712 to i64
  %1714 = getelementptr inbounds i8, i8* %0, i64 %1713
  %1715 = load i8, i8* %1714, align 1, !tbaa !387
  %1716 = insertelement <64 x i8> %1711, i8 %1715, i32 60
  %1717 = extractelement <64 x i32> %1411, i32 61
  %1718 = sext i32 %1717 to i64
  %1719 = getelementptr inbounds i8, i8* %0, i64 %1718
  %1720 = load i8, i8* %1719, align 1, !tbaa !387
  %1721 = insertelement <64 x i8> %1716, i8 %1720, i32 61
  %1722 = extractelement <64 x i32> %1411, i32 62
  %1723 = sext i32 %1722 to i64
  %1724 = getelementptr inbounds i8, i8* %0, i64 %1723
  %1725 = load i8, i8* %1724, align 1, !tbaa !387
  %1726 = insertelement <64 x i8> %1721, i8 %1725, i32 62
  %1727 = extractelement <64 x i32> %1411, i32 63
  %1728 = sext i32 %1727 to i64
  %1729 = getelementptr inbounds i8, i8* %0, i64 %1728
  %1730 = load i8, i8* %1729, align 1, !tbaa !387
  %1731 = insertelement <64 x i8> %1726, i8 %1730, i32 63
  %1732 = shufflevector <64 x i8> %1731, <64 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1733 = add nsw i64 %indvars.iv308, %1336
  %1734 = shl nsw i64 %1733, 6
  %1735 = getelementptr inbounds i8, i8* %bounded_input, i64 %1734
  %1736 = bitcast i8* %1735 to <16 x i8>*
  store <16 x i8> %1732, <16 x i8>* %1736, align 16, !tbaa !390
  %1737 = shufflevector <64 x i8> %1731, <64 x i8> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1738 = getelementptr inbounds i8, i8* %1735, i64 16
  %1739 = bitcast i8* %1738 to <16 x i8>*
  store <16 x i8> %1737, <16 x i8>* %1739, align 16, !tbaa !390
  %1740 = shufflevector <64 x i8> %1731, <64 x i8> undef, <16 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %1741 = getelementptr inbounds i8, i8* %1735, i64 32
  %1742 = bitcast i8* %1741 to <16 x i8>*
  store <16 x i8> %1740, <16 x i8>* %1742, align 16, !tbaa !390
  %1743 = shufflevector <64 x i8> %1731, <64 x i8> undef, <16 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1744 = getelementptr inbounds i8, i8* %1735, i64 48
  %1745 = bitcast i8* %1744 to <16 x i8>*
  store <16 x i8> %1743, <16 x i8>* %1745, align 16, !tbaa !390
  %indvars.iv.next309 = add nuw nsw i64 %indvars.iv308, 1
  %.not235 = icmp eq i64 %indvars.iv.next309, %38
  br i1 %.not235, label %"end for bounded_input.s0.x.x8", label %"for bounded_input.s0.x.x7"

"end for bounded_input.s0.x.x8":                  ; preds = %"for bounded_input.s0.x.x7", %"for bounded_input.s0.y.rebased4"
  %.not234 = icmp eq i64 %indvars.iv310, %886
  br i1 %.not234, label %"consume bounded_input", label %"for bounded_input.s0.y.rebased4"

"consume bounded_input":                          ; preds = %"end for bounded_input.s0.x.x8", %"end for bounded_input.s0.y.rebased"
  br i1 %37, label %"for output.s0.x.x.preheader", label %"end for output.s0.x.x", !prof !385

"for output.s0.x.x.preheader":                    ; preds = %"consume bounded_input"
  %1746 = mul nsw i64 %indvars.iv348, %43
  %1747 = or i32 %a7, 1
  %t109 = mul nsw i32 %1747, %9
  %1748 = or i32 %a7, 2
  %t111 = mul nsw i32 %1748, %9
  %1749 = or i32 %a7, 3
  %t113 = mul nsw i32 %1749, %9
  %1750 = or i32 %a7, 4
  %t115 = mul nsw i32 %1750, %9
  %1751 = or i32 %a7, 5
  %t117 = mul nsw i32 %1751, %9
  %1752 = or i32 %a7, 6
  %t119 = mul nsw i32 %1752, %9
  %1753 = or i32 %a7, 7
  %t121 = mul nsw i32 %1753, %9
  %1754 = sext i32 %t109 to i64
  %1755 = sext i32 %t111 to i64
  %1756 = sext i32 %t113 to i64
  %1757 = sext i32 %t115 to i64
  %1758 = sext i32 %t117 to i64
  %1759 = sext i32 %t119 to i64
  %1760 = sext i32 %t121 to i64
  br label %"for output.s0.x.x"

"for output.s0.x.x":                              ; preds = %"for output.s0.x.x.preheader", %"for output.s0.x.x"
  %indvars.iv345 = phi i64 [ 0, %"for output.s0.x.x.preheader" ], [ %indvars.iv.next346, %"for output.s0.x.x" ]
  %1761 = shl nuw nsw i64 %indvars.iv345, 1
  %1762 = trunc i64 %1761 to i32
  %t15 = add i32 %33, %1762
  %t60 = add nsw i32 %t15, %33
  %t61 = add nsw i32 %t15, %t106
  %1763 = sext i32 %t60 to i64
  %1764 = shl nsw i64 %1763, 6
  %1765 = getelementptr inbounds i8, i8* %bounded_input, i64 %1764
  %1766 = getelementptr inbounds i8, i8* %1765, i64 1
  %1767 = bitcast i8* %1766 to <16 x i8>*
  %1768 = load <16 x i8>, <16 x i8>* %1767, align 1, !tbaa !390
  %1769 = getelementptr inbounds i8, i8* %1765, i64 17
  %1770 = bitcast i8* %1769 to <16 x i8>*
  %1771 = load <16 x i8>, <16 x i8>* %1770, align 1, !tbaa !390
  %1772 = getelementptr inbounds i8, i8* %1765, i64 33
  %1773 = bitcast i8* %1772 to <16 x i8>*
  %1774 = load <16 x i8>, <16 x i8>* %1773, align 1, !tbaa !390
  %1775 = getelementptr inbounds i8, i8* %1765, i64 49
  %1776 = bitcast i8* %1775 to <16 x i8>*
  %1777 = load <16 x i8>, <16 x i8>* %1776, align 1, !tbaa !390
  %1778 = sext i32 %t15 to i64
  %1779 = shl nsw i64 %1778, 6
  %1780 = getelementptr inbounds i8, i8* %bounded_input, i64 %1779
  %1781 = getelementptr inbounds i8, i8* %1780, i64 1
  %1782 = bitcast i8* %1781 to <16 x i8>*
  %1783 = load <16 x i8>, <16 x i8>* %1782, align 1, !tbaa !390
  %1784 = getelementptr inbounds i8, i8* %1780, i64 17
  %1785 = bitcast i8* %1784 to <16 x i8>*
  %1786 = load <16 x i8>, <16 x i8>* %1785, align 1, !tbaa !390
  %1787 = getelementptr inbounds i8, i8* %1780, i64 33
  %1788 = bitcast i8* %1787 to <16 x i8>*
  %1789 = load <16 x i8>, <16 x i8>* %1788, align 1, !tbaa !390
  %1790 = getelementptr inbounds i8, i8* %1780, i64 49
  %1791 = bitcast i8* %1790 to <16 x i8>*
  %1792 = load <16 x i8>, <16 x i8>* %1791, align 1, !tbaa !390
  %1793 = sext i32 %t61 to i64
  %1794 = shl nsw i64 %1793, 6
  %1795 = getelementptr inbounds i8, i8* %bounded_input, i64 %1794
  %1796 = getelementptr inbounds i8, i8* %1795, i64 1
  %1797 = bitcast i8* %1796 to <16 x i8>*
  %1798 = load <16 x i8>, <16 x i8>* %1797, align 1, !tbaa !390
  %1799 = getelementptr inbounds i8, i8* %1795, i64 17
  %1800 = bitcast i8* %1799 to <16 x i8>*
  %1801 = load <16 x i8>, <16 x i8>* %1800, align 1, !tbaa !390
  %1802 = getelementptr inbounds i8, i8* %1795, i64 33
  %1803 = bitcast i8* %1802 to <16 x i8>*
  %1804 = load <16 x i8>, <16 x i8>* %1803, align 1, !tbaa !390
  %1805 = getelementptr inbounds i8, i8* %1795, i64 49
  %1806 = bitcast i8* %1805 to <16 x i8>*
  %1807 = load <16 x i8>, <16 x i8>* %1806, align 1, !tbaa !390
  %1808 = getelementptr inbounds i8, i8* %1795, i64 2
  %1809 = bitcast i8* %1808 to <16 x i8>*
  %1810 = load <16 x i8>, <16 x i8>* %1809, align 2, !tbaa !390
  %1811 = getelementptr inbounds i8, i8* %1795, i64 18
  %1812 = bitcast i8* %1811 to <16 x i8>*
  %1813 = load <16 x i8>, <16 x i8>* %1812, align 2, !tbaa !390
  %1814 = getelementptr inbounds i8, i8* %1795, i64 34
  %1815 = bitcast i8* %1814 to <16 x i8>*
  %1816 = load <16 x i8>, <16 x i8>* %1815, align 2, !tbaa !390
  %1817 = getelementptr inbounds i8, i8* %1795, i64 50
  %1818 = bitcast i8* %1817 to <16 x i8>*
  %1819 = load <16 x i8>, <16 x i8>* %1818, align 2, !tbaa !390
  %1820 = getelementptr inbounds i8, i8* %1780, i64 2
  %1821 = bitcast i8* %1820 to <16 x i8>*
  %1822 = load <16 x i8>, <16 x i8>* %1821, align 2, !tbaa !390
  %1823 = getelementptr inbounds i8, i8* %1780, i64 18
  %1824 = bitcast i8* %1823 to <16 x i8>*
  %1825 = load <16 x i8>, <16 x i8>* %1824, align 2, !tbaa !390
  %1826 = getelementptr inbounds i8, i8* %1780, i64 34
  %1827 = bitcast i8* %1826 to <16 x i8>*
  %1828 = load <16 x i8>, <16 x i8>* %1827, align 2, !tbaa !390
  %1829 = getelementptr inbounds i8, i8* %1780, i64 50
  %1830 = bitcast i8* %1829 to <16 x i8>*
  %1831 = load <16 x i8>, <16 x i8>* %1830, align 2, !tbaa !390
  %1832 = getelementptr inbounds i8, i8* %1765, i64 2
  %1833 = bitcast i8* %1832 to <16 x i8>*
  %1834 = load <16 x i8>, <16 x i8>* %1833, align 2, !tbaa !390
  %1835 = getelementptr inbounds i8, i8* %1765, i64 18
  %1836 = bitcast i8* %1835 to <16 x i8>*
  %1837 = load <16 x i8>, <16 x i8>* %1836, align 2, !tbaa !390
  %1838 = getelementptr inbounds i8, i8* %1765, i64 34
  %1839 = bitcast i8* %1838 to <16 x i8>*
  %1840 = load <16 x i8>, <16 x i8>* %1839, align 2, !tbaa !390
  %1841 = getelementptr inbounds i8, i8* %1765, i64 50
  %1842 = bitcast i8* %1841 to <16 x i8>*
  %1843 = load <16 x i8>, <16 x i8>* %1842, align 2, !tbaa !390
  %1844 = bitcast i8* %1795 to <16 x i8>*
  %1845 = load <16 x i8>, <16 x i8>* %1844, align 16, !tbaa !390
  %1846 = getelementptr inbounds i8, i8* %1795, i64 16
  %1847 = bitcast i8* %1846 to <16 x i8>*
  %1848 = load <16 x i8>, <16 x i8>* %1847, align 16, !tbaa !390
  %1849 = getelementptr inbounds i8, i8* %1795, i64 32
  %1850 = bitcast i8* %1849 to <16 x i8>*
  %1851 = load <16 x i8>, <16 x i8>* %1850, align 16, !tbaa !390
  %1852 = getelementptr inbounds i8, i8* %1795, i64 48
  %1853 = bitcast i8* %1852 to <16 x i8>*
  %1854 = load <16 x i8>, <16 x i8>* %1853, align 16, !tbaa !390
  %1855 = bitcast i8* %1780 to <16 x i8>*
  %1856 = load <16 x i8>, <16 x i8>* %1855, align 16, !tbaa !390
  %1857 = getelementptr inbounds i8, i8* %1780, i64 16
  %1858 = bitcast i8* %1857 to <16 x i8>*
  %1859 = load <16 x i8>, <16 x i8>* %1858, align 16, !tbaa !390
  %1860 = getelementptr inbounds i8, i8* %1780, i64 32
  %1861 = bitcast i8* %1860 to <16 x i8>*
  %1862 = load <16 x i8>, <16 x i8>* %1861, align 16, !tbaa !390
  %1863 = getelementptr inbounds i8, i8* %1780, i64 48
  %1864 = bitcast i8* %1863 to <16 x i8>*
  %1865 = load <16 x i8>, <16 x i8>* %1864, align 16, !tbaa !390
  %1866 = bitcast i8* %1765 to <16 x i8>*
  %1867 = load <16 x i8>, <16 x i8>* %1866, align 16, !tbaa !390
  %1868 = getelementptr inbounds i8, i8* %1765, i64 16
  %1869 = bitcast i8* %1868 to <16 x i8>*
  %1870 = load <16 x i8>, <16 x i8>* %1869, align 16, !tbaa !390
  %1871 = getelementptr inbounds i8, i8* %1765, i64 32
  %1872 = bitcast i8* %1871 to <16 x i8>*
  %1873 = load <16 x i8>, <16 x i8>* %1872, align 16, !tbaa !390
  %1874 = getelementptr inbounds i8, i8* %1765, i64 48
  %1875 = bitcast i8* %1874 to <16 x i8>*
  %1876 = load <16 x i8>, <16 x i8>* %1875, align 16, !tbaa !390
  %1877 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %1856, <16 x i8> %1867)
  %1878 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %1859, <16 x i8> %1870)
  %1879 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %1862, <16 x i8> %1873)
  %1880 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %1865, <16 x i8> %1876)
  %1881 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %1845, <16 x i8> %1877)
  %1882 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %1848, <16 x i8> %1878)
  %1883 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %1851, <16 x i8> %1879)
  %1884 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %1854, <16 x i8> %1880)
  %1885 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %1834, <16 x i8> %1881)
  %1886 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %1837, <16 x i8> %1882)
  %1887 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %1840, <16 x i8> %1883)
  %1888 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %1843, <16 x i8> %1884)
  %1889 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %1822, <16 x i8> %1885)
  %1890 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %1825, <16 x i8> %1886)
  %1891 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %1828, <16 x i8> %1887)
  %1892 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %1831, <16 x i8> %1888)
  %1893 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %1810, <16 x i8> %1889)
  %1894 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %1813, <16 x i8> %1890)
  %1895 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %1816, <16 x i8> %1891)
  %1896 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %1819, <16 x i8> %1892)
  %1897 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %1798, <16 x i8> %1893)
  %1898 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %1801, <16 x i8> %1894)
  %1899 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %1804, <16 x i8> %1895)
  %1900 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %1807, <16 x i8> %1896)
  %1901 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %1783, <16 x i8> %1897)
  %1902 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %1786, <16 x i8> %1898)
  %1903 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %1789, <16 x i8> %1899)
  %1904 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %1792, <16 x i8> %1900)
  %1905 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %1768, <16 x i8> %1901)
  %1906 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %1771, <16 x i8> %1902)
  %1907 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %1774, <16 x i8> %1903)
  %1908 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %1777, <16 x i8> %1904)
  %1909 = shl nuw nsw i64 %indvars.iv345, 4
  %1910 = add nsw i64 %1909, %1746
  %1911 = shl nsw i64 %1910, 3
  %1912 = getelementptr inbounds i8, i8* %5, i64 %1911
  %1913 = bitcast i8* %1912 to <16 x i8>*
  store <16 x i8> %1905, <16 x i8>* %1913, align 1, !tbaa !392
  %1914 = getelementptr inbounds i8, i8* %1912, i64 16
  %1915 = bitcast i8* %1914 to <16 x i8>*
  store <16 x i8> %1906, <16 x i8>* %1915, align 1, !tbaa !392
  %1916 = getelementptr inbounds i8, i8* %1912, i64 32
  %1917 = bitcast i8* %1916 to <16 x i8>*
  store <16 x i8> %1907, <16 x i8>* %1917, align 1, !tbaa !392
  %1918 = getelementptr inbounds i8, i8* %1912, i64 48
  %1919 = bitcast i8* %1918 to <16 x i8>*
  store <16 x i8> %1908, <16 x i8>* %1919, align 1, !tbaa !392
  %1920 = or i64 %1761, 1
  %1921 = trunc i64 %1920 to i32
  %t15.1 = add i32 %33, %1921
  %t60.1 = add nsw i32 %t15.1, %33
  %t61.1 = add nsw i32 %t15.1, %t106
  %1922 = sext i32 %t60.1 to i64
  %1923 = shl nsw i64 %1922, 6
  %1924 = getelementptr inbounds i8, i8* %bounded_input, i64 %1923
  %1925 = getelementptr inbounds i8, i8* %1924, i64 1
  %1926 = bitcast i8* %1925 to <16 x i8>*
  %1927 = load <16 x i8>, <16 x i8>* %1926, align 1, !tbaa !390
  %1928 = getelementptr inbounds i8, i8* %1924, i64 17
  %1929 = bitcast i8* %1928 to <16 x i8>*
  %1930 = load <16 x i8>, <16 x i8>* %1929, align 1, !tbaa !390
  %1931 = getelementptr inbounds i8, i8* %1924, i64 33
  %1932 = bitcast i8* %1931 to <16 x i8>*
  %1933 = load <16 x i8>, <16 x i8>* %1932, align 1, !tbaa !390
  %1934 = getelementptr inbounds i8, i8* %1924, i64 49
  %1935 = bitcast i8* %1934 to <16 x i8>*
  %1936 = load <16 x i8>, <16 x i8>* %1935, align 1, !tbaa !390
  %1937 = sext i32 %t15.1 to i64
  %1938 = shl nsw i64 %1937, 6
  %1939 = getelementptr inbounds i8, i8* %bounded_input, i64 %1938
  %1940 = getelementptr inbounds i8, i8* %1939, i64 1
  %1941 = bitcast i8* %1940 to <16 x i8>*
  %1942 = load <16 x i8>, <16 x i8>* %1941, align 1, !tbaa !390
  %1943 = getelementptr inbounds i8, i8* %1939, i64 17
  %1944 = bitcast i8* %1943 to <16 x i8>*
  %1945 = load <16 x i8>, <16 x i8>* %1944, align 1, !tbaa !390
  %1946 = getelementptr inbounds i8, i8* %1939, i64 33
  %1947 = bitcast i8* %1946 to <16 x i8>*
  %1948 = load <16 x i8>, <16 x i8>* %1947, align 1, !tbaa !390
  %1949 = getelementptr inbounds i8, i8* %1939, i64 49
  %1950 = bitcast i8* %1949 to <16 x i8>*
  %1951 = load <16 x i8>, <16 x i8>* %1950, align 1, !tbaa !390
  %1952 = sext i32 %t61.1 to i64
  %1953 = shl nsw i64 %1952, 6
  %1954 = getelementptr inbounds i8, i8* %bounded_input, i64 %1953
  %1955 = getelementptr inbounds i8, i8* %1954, i64 1
  %1956 = bitcast i8* %1955 to <16 x i8>*
  %1957 = load <16 x i8>, <16 x i8>* %1956, align 1, !tbaa !390
  %1958 = getelementptr inbounds i8, i8* %1954, i64 17
  %1959 = bitcast i8* %1958 to <16 x i8>*
  %1960 = load <16 x i8>, <16 x i8>* %1959, align 1, !tbaa !390
  %1961 = getelementptr inbounds i8, i8* %1954, i64 33
  %1962 = bitcast i8* %1961 to <16 x i8>*
  %1963 = load <16 x i8>, <16 x i8>* %1962, align 1, !tbaa !390
  %1964 = getelementptr inbounds i8, i8* %1954, i64 49
  %1965 = bitcast i8* %1964 to <16 x i8>*
  %1966 = load <16 x i8>, <16 x i8>* %1965, align 1, !tbaa !390
  %1967 = getelementptr inbounds i8, i8* %1954, i64 2
  %1968 = bitcast i8* %1967 to <16 x i8>*
  %1969 = load <16 x i8>, <16 x i8>* %1968, align 2, !tbaa !390
  %1970 = getelementptr inbounds i8, i8* %1954, i64 18
  %1971 = bitcast i8* %1970 to <16 x i8>*
  %1972 = load <16 x i8>, <16 x i8>* %1971, align 2, !tbaa !390
  %1973 = getelementptr inbounds i8, i8* %1954, i64 34
  %1974 = bitcast i8* %1973 to <16 x i8>*
  %1975 = load <16 x i8>, <16 x i8>* %1974, align 2, !tbaa !390
  %1976 = getelementptr inbounds i8, i8* %1954, i64 50
  %1977 = bitcast i8* %1976 to <16 x i8>*
  %1978 = load <16 x i8>, <16 x i8>* %1977, align 2, !tbaa !390
  %1979 = getelementptr inbounds i8, i8* %1939, i64 2
  %1980 = bitcast i8* %1979 to <16 x i8>*
  %1981 = load <16 x i8>, <16 x i8>* %1980, align 2, !tbaa !390
  %1982 = getelementptr inbounds i8, i8* %1939, i64 18
  %1983 = bitcast i8* %1982 to <16 x i8>*
  %1984 = load <16 x i8>, <16 x i8>* %1983, align 2, !tbaa !390
  %1985 = getelementptr inbounds i8, i8* %1939, i64 34
  %1986 = bitcast i8* %1985 to <16 x i8>*
  %1987 = load <16 x i8>, <16 x i8>* %1986, align 2, !tbaa !390
  %1988 = getelementptr inbounds i8, i8* %1939, i64 50
  %1989 = bitcast i8* %1988 to <16 x i8>*
  %1990 = load <16 x i8>, <16 x i8>* %1989, align 2, !tbaa !390
  %1991 = getelementptr inbounds i8, i8* %1924, i64 2
  %1992 = bitcast i8* %1991 to <16 x i8>*
  %1993 = load <16 x i8>, <16 x i8>* %1992, align 2, !tbaa !390
  %1994 = getelementptr inbounds i8, i8* %1924, i64 18
  %1995 = bitcast i8* %1994 to <16 x i8>*
  %1996 = load <16 x i8>, <16 x i8>* %1995, align 2, !tbaa !390
  %1997 = getelementptr inbounds i8, i8* %1924, i64 34
  %1998 = bitcast i8* %1997 to <16 x i8>*
  %1999 = load <16 x i8>, <16 x i8>* %1998, align 2, !tbaa !390
  %2000 = getelementptr inbounds i8, i8* %1924, i64 50
  %2001 = bitcast i8* %2000 to <16 x i8>*
  %2002 = load <16 x i8>, <16 x i8>* %2001, align 2, !tbaa !390
  %2003 = bitcast i8* %1954 to <16 x i8>*
  %2004 = load <16 x i8>, <16 x i8>* %2003, align 16, !tbaa !390
  %2005 = getelementptr inbounds i8, i8* %1954, i64 16
  %2006 = bitcast i8* %2005 to <16 x i8>*
  %2007 = load <16 x i8>, <16 x i8>* %2006, align 16, !tbaa !390
  %2008 = getelementptr inbounds i8, i8* %1954, i64 32
  %2009 = bitcast i8* %2008 to <16 x i8>*
  %2010 = load <16 x i8>, <16 x i8>* %2009, align 16, !tbaa !390
  %2011 = getelementptr inbounds i8, i8* %1954, i64 48
  %2012 = bitcast i8* %2011 to <16 x i8>*
  %2013 = load <16 x i8>, <16 x i8>* %2012, align 16, !tbaa !390
  %2014 = bitcast i8* %1939 to <16 x i8>*
  %2015 = load <16 x i8>, <16 x i8>* %2014, align 16, !tbaa !390
  %2016 = getelementptr inbounds i8, i8* %1939, i64 16
  %2017 = bitcast i8* %2016 to <16 x i8>*
  %2018 = load <16 x i8>, <16 x i8>* %2017, align 16, !tbaa !390
  %2019 = getelementptr inbounds i8, i8* %1939, i64 32
  %2020 = bitcast i8* %2019 to <16 x i8>*
  %2021 = load <16 x i8>, <16 x i8>* %2020, align 16, !tbaa !390
  %2022 = getelementptr inbounds i8, i8* %1939, i64 48
  %2023 = bitcast i8* %2022 to <16 x i8>*
  %2024 = load <16 x i8>, <16 x i8>* %2023, align 16, !tbaa !390
  %2025 = bitcast i8* %1924 to <16 x i8>*
  %2026 = load <16 x i8>, <16 x i8>* %2025, align 16, !tbaa !390
  %2027 = getelementptr inbounds i8, i8* %1924, i64 16
  %2028 = bitcast i8* %2027 to <16 x i8>*
  %2029 = load <16 x i8>, <16 x i8>* %2028, align 16, !tbaa !390
  %2030 = getelementptr inbounds i8, i8* %1924, i64 32
  %2031 = bitcast i8* %2030 to <16 x i8>*
  %2032 = load <16 x i8>, <16 x i8>* %2031, align 16, !tbaa !390
  %2033 = getelementptr inbounds i8, i8* %1924, i64 48
  %2034 = bitcast i8* %2033 to <16 x i8>*
  %2035 = load <16 x i8>, <16 x i8>* %2034, align 16, !tbaa !390
  %2036 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2015, <16 x i8> %2026)
  %2037 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2018, <16 x i8> %2029)
  %2038 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2021, <16 x i8> %2032)
  %2039 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2024, <16 x i8> %2035)
  %2040 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2004, <16 x i8> %2036)
  %2041 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2007, <16 x i8> %2037)
  %2042 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2010, <16 x i8> %2038)
  %2043 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2013, <16 x i8> %2039)
  %2044 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %1993, <16 x i8> %2040)
  %2045 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %1996, <16 x i8> %2041)
  %2046 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %1999, <16 x i8> %2042)
  %2047 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2002, <16 x i8> %2043)
  %2048 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %1981, <16 x i8> %2044)
  %2049 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %1984, <16 x i8> %2045)
  %2050 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %1987, <16 x i8> %2046)
  %2051 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %1990, <16 x i8> %2047)
  %2052 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %1969, <16 x i8> %2048)
  %2053 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %1972, <16 x i8> %2049)
  %2054 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %1975, <16 x i8> %2050)
  %2055 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %1978, <16 x i8> %2051)
  %2056 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %1957, <16 x i8> %2052)
  %2057 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %1960, <16 x i8> %2053)
  %2058 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %1963, <16 x i8> %2054)
  %2059 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %1966, <16 x i8> %2055)
  %2060 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %1942, <16 x i8> %2056)
  %2061 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %1945, <16 x i8> %2057)
  %2062 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %1948, <16 x i8> %2058)
  %2063 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %1951, <16 x i8> %2059)
  %2064 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %1927, <16 x i8> %2060)
  %2065 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %1930, <16 x i8> %2061)
  %2066 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %1933, <16 x i8> %2062)
  %2067 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %1936, <16 x i8> %2063)
  %2068 = shl nuw nsw i64 %1920, 3
  %2069 = add nsw i64 %2068, %1746
  %2070 = shl nsw i64 %2069, 3
  %2071 = getelementptr inbounds i8, i8* %5, i64 %2070
  %2072 = bitcast i8* %2071 to <16 x i8>*
  store <16 x i8> %2064, <16 x i8>* %2072, align 1, !tbaa !392
  %2073 = getelementptr inbounds i8, i8* %2071, i64 16
  %2074 = bitcast i8* %2073 to <16 x i8>*
  store <16 x i8> %2065, <16 x i8>* %2074, align 1, !tbaa !392
  %2075 = getelementptr inbounds i8, i8* %2071, i64 32
  %2076 = bitcast i8* %2075 to <16 x i8>*
  store <16 x i8> %2066, <16 x i8>* %2076, align 1, !tbaa !392
  %2077 = getelementptr inbounds i8, i8* %2071, i64 48
  %2078 = bitcast i8* %2077 to <16 x i8>*
  store <16 x i8> %2067, <16 x i8>* %2078, align 1, !tbaa !392
  %t19 = add i32 %t108, %1762
  %t62 = add nsw i32 %t19, %33
  %t63 = add nsw i32 %t19, %t106
  %2079 = sext i32 %t62 to i64
  %2080 = shl nsw i64 %2079, 6
  %2081 = getelementptr inbounds i8, i8* %bounded_input, i64 %2080
  %2082 = getelementptr inbounds i8, i8* %2081, i64 1
  %2083 = bitcast i8* %2082 to <16 x i8>*
  %2084 = load <16 x i8>, <16 x i8>* %2083, align 1, !tbaa !390
  %2085 = getelementptr inbounds i8, i8* %2081, i64 17
  %2086 = bitcast i8* %2085 to <16 x i8>*
  %2087 = load <16 x i8>, <16 x i8>* %2086, align 1, !tbaa !390
  %2088 = getelementptr inbounds i8, i8* %2081, i64 33
  %2089 = bitcast i8* %2088 to <16 x i8>*
  %2090 = load <16 x i8>, <16 x i8>* %2089, align 1, !tbaa !390
  %2091 = getelementptr inbounds i8, i8* %2081, i64 49
  %2092 = bitcast i8* %2091 to <16 x i8>*
  %2093 = load <16 x i8>, <16 x i8>* %2092, align 1, !tbaa !390
  %2094 = sext i32 %t19 to i64
  %2095 = shl nsw i64 %2094, 6
  %2096 = getelementptr inbounds i8, i8* %bounded_input, i64 %2095
  %2097 = getelementptr inbounds i8, i8* %2096, i64 1
  %2098 = bitcast i8* %2097 to <16 x i8>*
  %2099 = load <16 x i8>, <16 x i8>* %2098, align 1, !tbaa !390
  %2100 = getelementptr inbounds i8, i8* %2096, i64 17
  %2101 = bitcast i8* %2100 to <16 x i8>*
  %2102 = load <16 x i8>, <16 x i8>* %2101, align 1, !tbaa !390
  %2103 = getelementptr inbounds i8, i8* %2096, i64 33
  %2104 = bitcast i8* %2103 to <16 x i8>*
  %2105 = load <16 x i8>, <16 x i8>* %2104, align 1, !tbaa !390
  %2106 = getelementptr inbounds i8, i8* %2096, i64 49
  %2107 = bitcast i8* %2106 to <16 x i8>*
  %2108 = load <16 x i8>, <16 x i8>* %2107, align 1, !tbaa !390
  %2109 = sext i32 %t63 to i64
  %2110 = shl nsw i64 %2109, 6
  %2111 = getelementptr inbounds i8, i8* %bounded_input, i64 %2110
  %2112 = getelementptr inbounds i8, i8* %2111, i64 1
  %2113 = bitcast i8* %2112 to <16 x i8>*
  %2114 = load <16 x i8>, <16 x i8>* %2113, align 1, !tbaa !390
  %2115 = getelementptr inbounds i8, i8* %2111, i64 17
  %2116 = bitcast i8* %2115 to <16 x i8>*
  %2117 = load <16 x i8>, <16 x i8>* %2116, align 1, !tbaa !390
  %2118 = getelementptr inbounds i8, i8* %2111, i64 33
  %2119 = bitcast i8* %2118 to <16 x i8>*
  %2120 = load <16 x i8>, <16 x i8>* %2119, align 1, !tbaa !390
  %2121 = getelementptr inbounds i8, i8* %2111, i64 49
  %2122 = bitcast i8* %2121 to <16 x i8>*
  %2123 = load <16 x i8>, <16 x i8>* %2122, align 1, !tbaa !390
  %2124 = getelementptr inbounds i8, i8* %2111, i64 2
  %2125 = bitcast i8* %2124 to <16 x i8>*
  %2126 = load <16 x i8>, <16 x i8>* %2125, align 2, !tbaa !390
  %2127 = getelementptr inbounds i8, i8* %2111, i64 18
  %2128 = bitcast i8* %2127 to <16 x i8>*
  %2129 = load <16 x i8>, <16 x i8>* %2128, align 2, !tbaa !390
  %2130 = getelementptr inbounds i8, i8* %2111, i64 34
  %2131 = bitcast i8* %2130 to <16 x i8>*
  %2132 = load <16 x i8>, <16 x i8>* %2131, align 2, !tbaa !390
  %2133 = getelementptr inbounds i8, i8* %2111, i64 50
  %2134 = bitcast i8* %2133 to <16 x i8>*
  %2135 = load <16 x i8>, <16 x i8>* %2134, align 2, !tbaa !390
  %2136 = getelementptr inbounds i8, i8* %2096, i64 2
  %2137 = bitcast i8* %2136 to <16 x i8>*
  %2138 = load <16 x i8>, <16 x i8>* %2137, align 2, !tbaa !390
  %2139 = getelementptr inbounds i8, i8* %2096, i64 18
  %2140 = bitcast i8* %2139 to <16 x i8>*
  %2141 = load <16 x i8>, <16 x i8>* %2140, align 2, !tbaa !390
  %2142 = getelementptr inbounds i8, i8* %2096, i64 34
  %2143 = bitcast i8* %2142 to <16 x i8>*
  %2144 = load <16 x i8>, <16 x i8>* %2143, align 2, !tbaa !390
  %2145 = getelementptr inbounds i8, i8* %2096, i64 50
  %2146 = bitcast i8* %2145 to <16 x i8>*
  %2147 = load <16 x i8>, <16 x i8>* %2146, align 2, !tbaa !390
  %2148 = getelementptr inbounds i8, i8* %2081, i64 2
  %2149 = bitcast i8* %2148 to <16 x i8>*
  %2150 = load <16 x i8>, <16 x i8>* %2149, align 2, !tbaa !390
  %2151 = getelementptr inbounds i8, i8* %2081, i64 18
  %2152 = bitcast i8* %2151 to <16 x i8>*
  %2153 = load <16 x i8>, <16 x i8>* %2152, align 2, !tbaa !390
  %2154 = getelementptr inbounds i8, i8* %2081, i64 34
  %2155 = bitcast i8* %2154 to <16 x i8>*
  %2156 = load <16 x i8>, <16 x i8>* %2155, align 2, !tbaa !390
  %2157 = getelementptr inbounds i8, i8* %2081, i64 50
  %2158 = bitcast i8* %2157 to <16 x i8>*
  %2159 = load <16 x i8>, <16 x i8>* %2158, align 2, !tbaa !390
  %2160 = bitcast i8* %2111 to <16 x i8>*
  %2161 = load <16 x i8>, <16 x i8>* %2160, align 16, !tbaa !390
  %2162 = getelementptr inbounds i8, i8* %2111, i64 16
  %2163 = bitcast i8* %2162 to <16 x i8>*
  %2164 = load <16 x i8>, <16 x i8>* %2163, align 16, !tbaa !390
  %2165 = getelementptr inbounds i8, i8* %2111, i64 32
  %2166 = bitcast i8* %2165 to <16 x i8>*
  %2167 = load <16 x i8>, <16 x i8>* %2166, align 16, !tbaa !390
  %2168 = getelementptr inbounds i8, i8* %2111, i64 48
  %2169 = bitcast i8* %2168 to <16 x i8>*
  %2170 = load <16 x i8>, <16 x i8>* %2169, align 16, !tbaa !390
  %2171 = bitcast i8* %2096 to <16 x i8>*
  %2172 = load <16 x i8>, <16 x i8>* %2171, align 16, !tbaa !390
  %2173 = getelementptr inbounds i8, i8* %2096, i64 16
  %2174 = bitcast i8* %2173 to <16 x i8>*
  %2175 = load <16 x i8>, <16 x i8>* %2174, align 16, !tbaa !390
  %2176 = getelementptr inbounds i8, i8* %2096, i64 32
  %2177 = bitcast i8* %2176 to <16 x i8>*
  %2178 = load <16 x i8>, <16 x i8>* %2177, align 16, !tbaa !390
  %2179 = getelementptr inbounds i8, i8* %2096, i64 48
  %2180 = bitcast i8* %2179 to <16 x i8>*
  %2181 = load <16 x i8>, <16 x i8>* %2180, align 16, !tbaa !390
  %2182 = bitcast i8* %2081 to <16 x i8>*
  %2183 = load <16 x i8>, <16 x i8>* %2182, align 16, !tbaa !390
  %2184 = getelementptr inbounds i8, i8* %2081, i64 16
  %2185 = bitcast i8* %2184 to <16 x i8>*
  %2186 = load <16 x i8>, <16 x i8>* %2185, align 16, !tbaa !390
  %2187 = getelementptr inbounds i8, i8* %2081, i64 32
  %2188 = bitcast i8* %2187 to <16 x i8>*
  %2189 = load <16 x i8>, <16 x i8>* %2188, align 16, !tbaa !390
  %2190 = getelementptr inbounds i8, i8* %2081, i64 48
  %2191 = bitcast i8* %2190 to <16 x i8>*
  %2192 = load <16 x i8>, <16 x i8>* %2191, align 16, !tbaa !390
  %2193 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2172, <16 x i8> %2183)
  %2194 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2175, <16 x i8> %2186)
  %2195 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2178, <16 x i8> %2189)
  %2196 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2181, <16 x i8> %2192)
  %2197 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2161, <16 x i8> %2193)
  %2198 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2164, <16 x i8> %2194)
  %2199 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2167, <16 x i8> %2195)
  %2200 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2170, <16 x i8> %2196)
  %2201 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2150, <16 x i8> %2197)
  %2202 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2153, <16 x i8> %2198)
  %2203 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2156, <16 x i8> %2199)
  %2204 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2159, <16 x i8> %2200)
  %2205 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2138, <16 x i8> %2201)
  %2206 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2141, <16 x i8> %2202)
  %2207 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2144, <16 x i8> %2203)
  %2208 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2147, <16 x i8> %2204)
  %2209 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2126, <16 x i8> %2205)
  %2210 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2129, <16 x i8> %2206)
  %2211 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2132, <16 x i8> %2207)
  %2212 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2135, <16 x i8> %2208)
  %2213 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2114, <16 x i8> %2209)
  %2214 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2117, <16 x i8> %2210)
  %2215 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2120, <16 x i8> %2211)
  %2216 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2123, <16 x i8> %2212)
  %2217 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2099, <16 x i8> %2213)
  %2218 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2102, <16 x i8> %2214)
  %2219 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2105, <16 x i8> %2215)
  %2220 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2108, <16 x i8> %2216)
  %2221 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2084, <16 x i8> %2217)
  %2222 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2087, <16 x i8> %2218)
  %2223 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2090, <16 x i8> %2219)
  %2224 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2093, <16 x i8> %2220)
  %2225 = shl nuw nsw i64 %indvars.iv345, 7
  %2226 = add nsw i64 %2225, %1754
  %2227 = getelementptr inbounds i8, i8* %5, i64 %2226
  %2228 = bitcast i8* %2227 to <16 x i8>*
  store <16 x i8> %2221, <16 x i8>* %2228, align 1, !tbaa !392
  %2229 = getelementptr inbounds i8, i8* %2227, i64 16
  %2230 = bitcast i8* %2229 to <16 x i8>*
  store <16 x i8> %2222, <16 x i8>* %2230, align 1, !tbaa !392
  %2231 = getelementptr inbounds i8, i8* %2227, i64 32
  %2232 = bitcast i8* %2231 to <16 x i8>*
  store <16 x i8> %2223, <16 x i8>* %2232, align 1, !tbaa !392
  %2233 = getelementptr inbounds i8, i8* %2227, i64 48
  %2234 = bitcast i8* %2233 to <16 x i8>*
  store <16 x i8> %2224, <16 x i8>* %2234, align 1, !tbaa !392
  %t19.1 = add i32 %t108, %1921
  %t62.1 = add nsw i32 %t19.1, %33
  %t63.1 = add nsw i32 %t19.1, %t106
  %2235 = sext i32 %t62.1 to i64
  %2236 = shl nsw i64 %2235, 6
  %2237 = getelementptr inbounds i8, i8* %bounded_input, i64 %2236
  %2238 = getelementptr inbounds i8, i8* %2237, i64 1
  %2239 = bitcast i8* %2238 to <16 x i8>*
  %2240 = load <16 x i8>, <16 x i8>* %2239, align 1, !tbaa !390
  %2241 = getelementptr inbounds i8, i8* %2237, i64 17
  %2242 = bitcast i8* %2241 to <16 x i8>*
  %2243 = load <16 x i8>, <16 x i8>* %2242, align 1, !tbaa !390
  %2244 = getelementptr inbounds i8, i8* %2237, i64 33
  %2245 = bitcast i8* %2244 to <16 x i8>*
  %2246 = load <16 x i8>, <16 x i8>* %2245, align 1, !tbaa !390
  %2247 = getelementptr inbounds i8, i8* %2237, i64 49
  %2248 = bitcast i8* %2247 to <16 x i8>*
  %2249 = load <16 x i8>, <16 x i8>* %2248, align 1, !tbaa !390
  %2250 = sext i32 %t19.1 to i64
  %2251 = shl nsw i64 %2250, 6
  %2252 = getelementptr inbounds i8, i8* %bounded_input, i64 %2251
  %2253 = getelementptr inbounds i8, i8* %2252, i64 1
  %2254 = bitcast i8* %2253 to <16 x i8>*
  %2255 = load <16 x i8>, <16 x i8>* %2254, align 1, !tbaa !390
  %2256 = getelementptr inbounds i8, i8* %2252, i64 17
  %2257 = bitcast i8* %2256 to <16 x i8>*
  %2258 = load <16 x i8>, <16 x i8>* %2257, align 1, !tbaa !390
  %2259 = getelementptr inbounds i8, i8* %2252, i64 33
  %2260 = bitcast i8* %2259 to <16 x i8>*
  %2261 = load <16 x i8>, <16 x i8>* %2260, align 1, !tbaa !390
  %2262 = getelementptr inbounds i8, i8* %2252, i64 49
  %2263 = bitcast i8* %2262 to <16 x i8>*
  %2264 = load <16 x i8>, <16 x i8>* %2263, align 1, !tbaa !390
  %2265 = sext i32 %t63.1 to i64
  %2266 = shl nsw i64 %2265, 6
  %2267 = getelementptr inbounds i8, i8* %bounded_input, i64 %2266
  %2268 = getelementptr inbounds i8, i8* %2267, i64 1
  %2269 = bitcast i8* %2268 to <16 x i8>*
  %2270 = load <16 x i8>, <16 x i8>* %2269, align 1, !tbaa !390
  %2271 = getelementptr inbounds i8, i8* %2267, i64 17
  %2272 = bitcast i8* %2271 to <16 x i8>*
  %2273 = load <16 x i8>, <16 x i8>* %2272, align 1, !tbaa !390
  %2274 = getelementptr inbounds i8, i8* %2267, i64 33
  %2275 = bitcast i8* %2274 to <16 x i8>*
  %2276 = load <16 x i8>, <16 x i8>* %2275, align 1, !tbaa !390
  %2277 = getelementptr inbounds i8, i8* %2267, i64 49
  %2278 = bitcast i8* %2277 to <16 x i8>*
  %2279 = load <16 x i8>, <16 x i8>* %2278, align 1, !tbaa !390
  %2280 = getelementptr inbounds i8, i8* %2267, i64 2
  %2281 = bitcast i8* %2280 to <16 x i8>*
  %2282 = load <16 x i8>, <16 x i8>* %2281, align 2, !tbaa !390
  %2283 = getelementptr inbounds i8, i8* %2267, i64 18
  %2284 = bitcast i8* %2283 to <16 x i8>*
  %2285 = load <16 x i8>, <16 x i8>* %2284, align 2, !tbaa !390
  %2286 = getelementptr inbounds i8, i8* %2267, i64 34
  %2287 = bitcast i8* %2286 to <16 x i8>*
  %2288 = load <16 x i8>, <16 x i8>* %2287, align 2, !tbaa !390
  %2289 = getelementptr inbounds i8, i8* %2267, i64 50
  %2290 = bitcast i8* %2289 to <16 x i8>*
  %2291 = load <16 x i8>, <16 x i8>* %2290, align 2, !tbaa !390
  %2292 = getelementptr inbounds i8, i8* %2252, i64 2
  %2293 = bitcast i8* %2292 to <16 x i8>*
  %2294 = load <16 x i8>, <16 x i8>* %2293, align 2, !tbaa !390
  %2295 = getelementptr inbounds i8, i8* %2252, i64 18
  %2296 = bitcast i8* %2295 to <16 x i8>*
  %2297 = load <16 x i8>, <16 x i8>* %2296, align 2, !tbaa !390
  %2298 = getelementptr inbounds i8, i8* %2252, i64 34
  %2299 = bitcast i8* %2298 to <16 x i8>*
  %2300 = load <16 x i8>, <16 x i8>* %2299, align 2, !tbaa !390
  %2301 = getelementptr inbounds i8, i8* %2252, i64 50
  %2302 = bitcast i8* %2301 to <16 x i8>*
  %2303 = load <16 x i8>, <16 x i8>* %2302, align 2, !tbaa !390
  %2304 = getelementptr inbounds i8, i8* %2237, i64 2
  %2305 = bitcast i8* %2304 to <16 x i8>*
  %2306 = load <16 x i8>, <16 x i8>* %2305, align 2, !tbaa !390
  %2307 = getelementptr inbounds i8, i8* %2237, i64 18
  %2308 = bitcast i8* %2307 to <16 x i8>*
  %2309 = load <16 x i8>, <16 x i8>* %2308, align 2, !tbaa !390
  %2310 = getelementptr inbounds i8, i8* %2237, i64 34
  %2311 = bitcast i8* %2310 to <16 x i8>*
  %2312 = load <16 x i8>, <16 x i8>* %2311, align 2, !tbaa !390
  %2313 = getelementptr inbounds i8, i8* %2237, i64 50
  %2314 = bitcast i8* %2313 to <16 x i8>*
  %2315 = load <16 x i8>, <16 x i8>* %2314, align 2, !tbaa !390
  %2316 = bitcast i8* %2267 to <16 x i8>*
  %2317 = load <16 x i8>, <16 x i8>* %2316, align 16, !tbaa !390
  %2318 = getelementptr inbounds i8, i8* %2267, i64 16
  %2319 = bitcast i8* %2318 to <16 x i8>*
  %2320 = load <16 x i8>, <16 x i8>* %2319, align 16, !tbaa !390
  %2321 = getelementptr inbounds i8, i8* %2267, i64 32
  %2322 = bitcast i8* %2321 to <16 x i8>*
  %2323 = load <16 x i8>, <16 x i8>* %2322, align 16, !tbaa !390
  %2324 = getelementptr inbounds i8, i8* %2267, i64 48
  %2325 = bitcast i8* %2324 to <16 x i8>*
  %2326 = load <16 x i8>, <16 x i8>* %2325, align 16, !tbaa !390
  %2327 = bitcast i8* %2252 to <16 x i8>*
  %2328 = load <16 x i8>, <16 x i8>* %2327, align 16, !tbaa !390
  %2329 = getelementptr inbounds i8, i8* %2252, i64 16
  %2330 = bitcast i8* %2329 to <16 x i8>*
  %2331 = load <16 x i8>, <16 x i8>* %2330, align 16, !tbaa !390
  %2332 = getelementptr inbounds i8, i8* %2252, i64 32
  %2333 = bitcast i8* %2332 to <16 x i8>*
  %2334 = load <16 x i8>, <16 x i8>* %2333, align 16, !tbaa !390
  %2335 = getelementptr inbounds i8, i8* %2252, i64 48
  %2336 = bitcast i8* %2335 to <16 x i8>*
  %2337 = load <16 x i8>, <16 x i8>* %2336, align 16, !tbaa !390
  %2338 = bitcast i8* %2237 to <16 x i8>*
  %2339 = load <16 x i8>, <16 x i8>* %2338, align 16, !tbaa !390
  %2340 = getelementptr inbounds i8, i8* %2237, i64 16
  %2341 = bitcast i8* %2340 to <16 x i8>*
  %2342 = load <16 x i8>, <16 x i8>* %2341, align 16, !tbaa !390
  %2343 = getelementptr inbounds i8, i8* %2237, i64 32
  %2344 = bitcast i8* %2343 to <16 x i8>*
  %2345 = load <16 x i8>, <16 x i8>* %2344, align 16, !tbaa !390
  %2346 = getelementptr inbounds i8, i8* %2237, i64 48
  %2347 = bitcast i8* %2346 to <16 x i8>*
  %2348 = load <16 x i8>, <16 x i8>* %2347, align 16, !tbaa !390
  %2349 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2328, <16 x i8> %2339)
  %2350 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2331, <16 x i8> %2342)
  %2351 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2334, <16 x i8> %2345)
  %2352 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2337, <16 x i8> %2348)
  %2353 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2317, <16 x i8> %2349)
  %2354 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2320, <16 x i8> %2350)
  %2355 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2323, <16 x i8> %2351)
  %2356 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2326, <16 x i8> %2352)
  %2357 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2306, <16 x i8> %2353)
  %2358 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2309, <16 x i8> %2354)
  %2359 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2312, <16 x i8> %2355)
  %2360 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2315, <16 x i8> %2356)
  %2361 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2294, <16 x i8> %2357)
  %2362 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2297, <16 x i8> %2358)
  %2363 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2300, <16 x i8> %2359)
  %2364 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2303, <16 x i8> %2360)
  %2365 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2282, <16 x i8> %2361)
  %2366 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2285, <16 x i8> %2362)
  %2367 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2288, <16 x i8> %2363)
  %2368 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2291, <16 x i8> %2364)
  %2369 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2270, <16 x i8> %2365)
  %2370 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2273, <16 x i8> %2366)
  %2371 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2276, <16 x i8> %2367)
  %2372 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2279, <16 x i8> %2368)
  %2373 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2255, <16 x i8> %2369)
  %2374 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2258, <16 x i8> %2370)
  %2375 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2261, <16 x i8> %2371)
  %2376 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2264, <16 x i8> %2372)
  %2377 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2240, <16 x i8> %2373)
  %2378 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2243, <16 x i8> %2374)
  %2379 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2246, <16 x i8> %2375)
  %2380 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2249, <16 x i8> %2376)
  %2381 = shl nuw nsw i64 %1920, 6
  %2382 = add nsw i64 %2381, %1754
  %2383 = getelementptr inbounds i8, i8* %5, i64 %2382
  %2384 = bitcast i8* %2383 to <16 x i8>*
  store <16 x i8> %2377, <16 x i8>* %2384, align 1, !tbaa !392
  %2385 = getelementptr inbounds i8, i8* %2383, i64 16
  %2386 = bitcast i8* %2385 to <16 x i8>*
  store <16 x i8> %2378, <16 x i8>* %2386, align 1, !tbaa !392
  %2387 = getelementptr inbounds i8, i8* %2383, i64 32
  %2388 = bitcast i8* %2387 to <16 x i8>*
  store <16 x i8> %2379, <16 x i8>* %2388, align 1, !tbaa !392
  %2389 = getelementptr inbounds i8, i8* %2383, i64 48
  %2390 = bitcast i8* %2389 to <16 x i8>*
  store <16 x i8> %2380, <16 x i8>* %2390, align 1, !tbaa !392
  %t23 = add i32 %t110, %1762
  %t64 = add nsw i32 %t23, %33
  %t65 = add nsw i32 %t23, %t106
  %2391 = sext i32 %t64 to i64
  %2392 = shl nsw i64 %2391, 6
  %2393 = getelementptr inbounds i8, i8* %bounded_input, i64 %2392
  %2394 = getelementptr inbounds i8, i8* %2393, i64 1
  %2395 = bitcast i8* %2394 to <16 x i8>*
  %2396 = load <16 x i8>, <16 x i8>* %2395, align 1, !tbaa !390
  %2397 = getelementptr inbounds i8, i8* %2393, i64 17
  %2398 = bitcast i8* %2397 to <16 x i8>*
  %2399 = load <16 x i8>, <16 x i8>* %2398, align 1, !tbaa !390
  %2400 = getelementptr inbounds i8, i8* %2393, i64 33
  %2401 = bitcast i8* %2400 to <16 x i8>*
  %2402 = load <16 x i8>, <16 x i8>* %2401, align 1, !tbaa !390
  %2403 = getelementptr inbounds i8, i8* %2393, i64 49
  %2404 = bitcast i8* %2403 to <16 x i8>*
  %2405 = load <16 x i8>, <16 x i8>* %2404, align 1, !tbaa !390
  %2406 = sext i32 %t23 to i64
  %2407 = shl nsw i64 %2406, 6
  %2408 = getelementptr inbounds i8, i8* %bounded_input, i64 %2407
  %2409 = getelementptr inbounds i8, i8* %2408, i64 1
  %2410 = bitcast i8* %2409 to <16 x i8>*
  %2411 = load <16 x i8>, <16 x i8>* %2410, align 1, !tbaa !390
  %2412 = getelementptr inbounds i8, i8* %2408, i64 17
  %2413 = bitcast i8* %2412 to <16 x i8>*
  %2414 = load <16 x i8>, <16 x i8>* %2413, align 1, !tbaa !390
  %2415 = getelementptr inbounds i8, i8* %2408, i64 33
  %2416 = bitcast i8* %2415 to <16 x i8>*
  %2417 = load <16 x i8>, <16 x i8>* %2416, align 1, !tbaa !390
  %2418 = getelementptr inbounds i8, i8* %2408, i64 49
  %2419 = bitcast i8* %2418 to <16 x i8>*
  %2420 = load <16 x i8>, <16 x i8>* %2419, align 1, !tbaa !390
  %2421 = sext i32 %t65 to i64
  %2422 = shl nsw i64 %2421, 6
  %2423 = getelementptr inbounds i8, i8* %bounded_input, i64 %2422
  %2424 = getelementptr inbounds i8, i8* %2423, i64 1
  %2425 = bitcast i8* %2424 to <16 x i8>*
  %2426 = load <16 x i8>, <16 x i8>* %2425, align 1, !tbaa !390
  %2427 = getelementptr inbounds i8, i8* %2423, i64 17
  %2428 = bitcast i8* %2427 to <16 x i8>*
  %2429 = load <16 x i8>, <16 x i8>* %2428, align 1, !tbaa !390
  %2430 = getelementptr inbounds i8, i8* %2423, i64 33
  %2431 = bitcast i8* %2430 to <16 x i8>*
  %2432 = load <16 x i8>, <16 x i8>* %2431, align 1, !tbaa !390
  %2433 = getelementptr inbounds i8, i8* %2423, i64 49
  %2434 = bitcast i8* %2433 to <16 x i8>*
  %2435 = load <16 x i8>, <16 x i8>* %2434, align 1, !tbaa !390
  %2436 = getelementptr inbounds i8, i8* %2423, i64 2
  %2437 = bitcast i8* %2436 to <16 x i8>*
  %2438 = load <16 x i8>, <16 x i8>* %2437, align 2, !tbaa !390
  %2439 = getelementptr inbounds i8, i8* %2423, i64 18
  %2440 = bitcast i8* %2439 to <16 x i8>*
  %2441 = load <16 x i8>, <16 x i8>* %2440, align 2, !tbaa !390
  %2442 = getelementptr inbounds i8, i8* %2423, i64 34
  %2443 = bitcast i8* %2442 to <16 x i8>*
  %2444 = load <16 x i8>, <16 x i8>* %2443, align 2, !tbaa !390
  %2445 = getelementptr inbounds i8, i8* %2423, i64 50
  %2446 = bitcast i8* %2445 to <16 x i8>*
  %2447 = load <16 x i8>, <16 x i8>* %2446, align 2, !tbaa !390
  %2448 = getelementptr inbounds i8, i8* %2408, i64 2
  %2449 = bitcast i8* %2448 to <16 x i8>*
  %2450 = load <16 x i8>, <16 x i8>* %2449, align 2, !tbaa !390
  %2451 = getelementptr inbounds i8, i8* %2408, i64 18
  %2452 = bitcast i8* %2451 to <16 x i8>*
  %2453 = load <16 x i8>, <16 x i8>* %2452, align 2, !tbaa !390
  %2454 = getelementptr inbounds i8, i8* %2408, i64 34
  %2455 = bitcast i8* %2454 to <16 x i8>*
  %2456 = load <16 x i8>, <16 x i8>* %2455, align 2, !tbaa !390
  %2457 = getelementptr inbounds i8, i8* %2408, i64 50
  %2458 = bitcast i8* %2457 to <16 x i8>*
  %2459 = load <16 x i8>, <16 x i8>* %2458, align 2, !tbaa !390
  %2460 = getelementptr inbounds i8, i8* %2393, i64 2
  %2461 = bitcast i8* %2460 to <16 x i8>*
  %2462 = load <16 x i8>, <16 x i8>* %2461, align 2, !tbaa !390
  %2463 = getelementptr inbounds i8, i8* %2393, i64 18
  %2464 = bitcast i8* %2463 to <16 x i8>*
  %2465 = load <16 x i8>, <16 x i8>* %2464, align 2, !tbaa !390
  %2466 = getelementptr inbounds i8, i8* %2393, i64 34
  %2467 = bitcast i8* %2466 to <16 x i8>*
  %2468 = load <16 x i8>, <16 x i8>* %2467, align 2, !tbaa !390
  %2469 = getelementptr inbounds i8, i8* %2393, i64 50
  %2470 = bitcast i8* %2469 to <16 x i8>*
  %2471 = load <16 x i8>, <16 x i8>* %2470, align 2, !tbaa !390
  %2472 = bitcast i8* %2423 to <16 x i8>*
  %2473 = load <16 x i8>, <16 x i8>* %2472, align 16, !tbaa !390
  %2474 = getelementptr inbounds i8, i8* %2423, i64 16
  %2475 = bitcast i8* %2474 to <16 x i8>*
  %2476 = load <16 x i8>, <16 x i8>* %2475, align 16, !tbaa !390
  %2477 = getelementptr inbounds i8, i8* %2423, i64 32
  %2478 = bitcast i8* %2477 to <16 x i8>*
  %2479 = load <16 x i8>, <16 x i8>* %2478, align 16, !tbaa !390
  %2480 = getelementptr inbounds i8, i8* %2423, i64 48
  %2481 = bitcast i8* %2480 to <16 x i8>*
  %2482 = load <16 x i8>, <16 x i8>* %2481, align 16, !tbaa !390
  %2483 = bitcast i8* %2408 to <16 x i8>*
  %2484 = load <16 x i8>, <16 x i8>* %2483, align 16, !tbaa !390
  %2485 = getelementptr inbounds i8, i8* %2408, i64 16
  %2486 = bitcast i8* %2485 to <16 x i8>*
  %2487 = load <16 x i8>, <16 x i8>* %2486, align 16, !tbaa !390
  %2488 = getelementptr inbounds i8, i8* %2408, i64 32
  %2489 = bitcast i8* %2488 to <16 x i8>*
  %2490 = load <16 x i8>, <16 x i8>* %2489, align 16, !tbaa !390
  %2491 = getelementptr inbounds i8, i8* %2408, i64 48
  %2492 = bitcast i8* %2491 to <16 x i8>*
  %2493 = load <16 x i8>, <16 x i8>* %2492, align 16, !tbaa !390
  %2494 = bitcast i8* %2393 to <16 x i8>*
  %2495 = load <16 x i8>, <16 x i8>* %2494, align 16, !tbaa !390
  %2496 = getelementptr inbounds i8, i8* %2393, i64 16
  %2497 = bitcast i8* %2496 to <16 x i8>*
  %2498 = load <16 x i8>, <16 x i8>* %2497, align 16, !tbaa !390
  %2499 = getelementptr inbounds i8, i8* %2393, i64 32
  %2500 = bitcast i8* %2499 to <16 x i8>*
  %2501 = load <16 x i8>, <16 x i8>* %2500, align 16, !tbaa !390
  %2502 = getelementptr inbounds i8, i8* %2393, i64 48
  %2503 = bitcast i8* %2502 to <16 x i8>*
  %2504 = load <16 x i8>, <16 x i8>* %2503, align 16, !tbaa !390
  %2505 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2484, <16 x i8> %2495)
  %2506 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2487, <16 x i8> %2498)
  %2507 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2490, <16 x i8> %2501)
  %2508 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2493, <16 x i8> %2504)
  %2509 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2473, <16 x i8> %2505)
  %2510 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2476, <16 x i8> %2506)
  %2511 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2479, <16 x i8> %2507)
  %2512 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2482, <16 x i8> %2508)
  %2513 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2462, <16 x i8> %2509)
  %2514 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2465, <16 x i8> %2510)
  %2515 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2468, <16 x i8> %2511)
  %2516 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2471, <16 x i8> %2512)
  %2517 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2450, <16 x i8> %2513)
  %2518 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2453, <16 x i8> %2514)
  %2519 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2456, <16 x i8> %2515)
  %2520 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2459, <16 x i8> %2516)
  %2521 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2438, <16 x i8> %2517)
  %2522 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2441, <16 x i8> %2518)
  %2523 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2444, <16 x i8> %2519)
  %2524 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2447, <16 x i8> %2520)
  %2525 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2426, <16 x i8> %2521)
  %2526 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2429, <16 x i8> %2522)
  %2527 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2432, <16 x i8> %2523)
  %2528 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2435, <16 x i8> %2524)
  %2529 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2411, <16 x i8> %2525)
  %2530 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2414, <16 x i8> %2526)
  %2531 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2417, <16 x i8> %2527)
  %2532 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2420, <16 x i8> %2528)
  %2533 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2396, <16 x i8> %2529)
  %2534 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2399, <16 x i8> %2530)
  %2535 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2402, <16 x i8> %2531)
  %2536 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2405, <16 x i8> %2532)
  %2537 = add nsw i64 %2225, %1755
  %2538 = getelementptr inbounds i8, i8* %5, i64 %2537
  %2539 = bitcast i8* %2538 to <16 x i8>*
  store <16 x i8> %2533, <16 x i8>* %2539, align 1, !tbaa !392
  %2540 = getelementptr inbounds i8, i8* %2538, i64 16
  %2541 = bitcast i8* %2540 to <16 x i8>*
  store <16 x i8> %2534, <16 x i8>* %2541, align 1, !tbaa !392
  %2542 = getelementptr inbounds i8, i8* %2538, i64 32
  %2543 = bitcast i8* %2542 to <16 x i8>*
  store <16 x i8> %2535, <16 x i8>* %2543, align 1, !tbaa !392
  %2544 = getelementptr inbounds i8, i8* %2538, i64 48
  %2545 = bitcast i8* %2544 to <16 x i8>*
  store <16 x i8> %2536, <16 x i8>* %2545, align 1, !tbaa !392
  %t23.1 = add i32 %t110, %1921
  %t64.1 = add nsw i32 %t23.1, %33
  %t65.1 = add nsw i32 %t23.1, %t106
  %2546 = sext i32 %t64.1 to i64
  %2547 = shl nsw i64 %2546, 6
  %2548 = getelementptr inbounds i8, i8* %bounded_input, i64 %2547
  %2549 = getelementptr inbounds i8, i8* %2548, i64 1
  %2550 = bitcast i8* %2549 to <16 x i8>*
  %2551 = load <16 x i8>, <16 x i8>* %2550, align 1, !tbaa !390
  %2552 = getelementptr inbounds i8, i8* %2548, i64 17
  %2553 = bitcast i8* %2552 to <16 x i8>*
  %2554 = load <16 x i8>, <16 x i8>* %2553, align 1, !tbaa !390
  %2555 = getelementptr inbounds i8, i8* %2548, i64 33
  %2556 = bitcast i8* %2555 to <16 x i8>*
  %2557 = load <16 x i8>, <16 x i8>* %2556, align 1, !tbaa !390
  %2558 = getelementptr inbounds i8, i8* %2548, i64 49
  %2559 = bitcast i8* %2558 to <16 x i8>*
  %2560 = load <16 x i8>, <16 x i8>* %2559, align 1, !tbaa !390
  %2561 = sext i32 %t23.1 to i64
  %2562 = shl nsw i64 %2561, 6
  %2563 = getelementptr inbounds i8, i8* %bounded_input, i64 %2562
  %2564 = getelementptr inbounds i8, i8* %2563, i64 1
  %2565 = bitcast i8* %2564 to <16 x i8>*
  %2566 = load <16 x i8>, <16 x i8>* %2565, align 1, !tbaa !390
  %2567 = getelementptr inbounds i8, i8* %2563, i64 17
  %2568 = bitcast i8* %2567 to <16 x i8>*
  %2569 = load <16 x i8>, <16 x i8>* %2568, align 1, !tbaa !390
  %2570 = getelementptr inbounds i8, i8* %2563, i64 33
  %2571 = bitcast i8* %2570 to <16 x i8>*
  %2572 = load <16 x i8>, <16 x i8>* %2571, align 1, !tbaa !390
  %2573 = getelementptr inbounds i8, i8* %2563, i64 49
  %2574 = bitcast i8* %2573 to <16 x i8>*
  %2575 = load <16 x i8>, <16 x i8>* %2574, align 1, !tbaa !390
  %2576 = sext i32 %t65.1 to i64
  %2577 = shl nsw i64 %2576, 6
  %2578 = getelementptr inbounds i8, i8* %bounded_input, i64 %2577
  %2579 = getelementptr inbounds i8, i8* %2578, i64 1
  %2580 = bitcast i8* %2579 to <16 x i8>*
  %2581 = load <16 x i8>, <16 x i8>* %2580, align 1, !tbaa !390
  %2582 = getelementptr inbounds i8, i8* %2578, i64 17
  %2583 = bitcast i8* %2582 to <16 x i8>*
  %2584 = load <16 x i8>, <16 x i8>* %2583, align 1, !tbaa !390
  %2585 = getelementptr inbounds i8, i8* %2578, i64 33
  %2586 = bitcast i8* %2585 to <16 x i8>*
  %2587 = load <16 x i8>, <16 x i8>* %2586, align 1, !tbaa !390
  %2588 = getelementptr inbounds i8, i8* %2578, i64 49
  %2589 = bitcast i8* %2588 to <16 x i8>*
  %2590 = load <16 x i8>, <16 x i8>* %2589, align 1, !tbaa !390
  %2591 = getelementptr inbounds i8, i8* %2578, i64 2
  %2592 = bitcast i8* %2591 to <16 x i8>*
  %2593 = load <16 x i8>, <16 x i8>* %2592, align 2, !tbaa !390
  %2594 = getelementptr inbounds i8, i8* %2578, i64 18
  %2595 = bitcast i8* %2594 to <16 x i8>*
  %2596 = load <16 x i8>, <16 x i8>* %2595, align 2, !tbaa !390
  %2597 = getelementptr inbounds i8, i8* %2578, i64 34
  %2598 = bitcast i8* %2597 to <16 x i8>*
  %2599 = load <16 x i8>, <16 x i8>* %2598, align 2, !tbaa !390
  %2600 = getelementptr inbounds i8, i8* %2578, i64 50
  %2601 = bitcast i8* %2600 to <16 x i8>*
  %2602 = load <16 x i8>, <16 x i8>* %2601, align 2, !tbaa !390
  %2603 = getelementptr inbounds i8, i8* %2563, i64 2
  %2604 = bitcast i8* %2603 to <16 x i8>*
  %2605 = load <16 x i8>, <16 x i8>* %2604, align 2, !tbaa !390
  %2606 = getelementptr inbounds i8, i8* %2563, i64 18
  %2607 = bitcast i8* %2606 to <16 x i8>*
  %2608 = load <16 x i8>, <16 x i8>* %2607, align 2, !tbaa !390
  %2609 = getelementptr inbounds i8, i8* %2563, i64 34
  %2610 = bitcast i8* %2609 to <16 x i8>*
  %2611 = load <16 x i8>, <16 x i8>* %2610, align 2, !tbaa !390
  %2612 = getelementptr inbounds i8, i8* %2563, i64 50
  %2613 = bitcast i8* %2612 to <16 x i8>*
  %2614 = load <16 x i8>, <16 x i8>* %2613, align 2, !tbaa !390
  %2615 = getelementptr inbounds i8, i8* %2548, i64 2
  %2616 = bitcast i8* %2615 to <16 x i8>*
  %2617 = load <16 x i8>, <16 x i8>* %2616, align 2, !tbaa !390
  %2618 = getelementptr inbounds i8, i8* %2548, i64 18
  %2619 = bitcast i8* %2618 to <16 x i8>*
  %2620 = load <16 x i8>, <16 x i8>* %2619, align 2, !tbaa !390
  %2621 = getelementptr inbounds i8, i8* %2548, i64 34
  %2622 = bitcast i8* %2621 to <16 x i8>*
  %2623 = load <16 x i8>, <16 x i8>* %2622, align 2, !tbaa !390
  %2624 = getelementptr inbounds i8, i8* %2548, i64 50
  %2625 = bitcast i8* %2624 to <16 x i8>*
  %2626 = load <16 x i8>, <16 x i8>* %2625, align 2, !tbaa !390
  %2627 = bitcast i8* %2578 to <16 x i8>*
  %2628 = load <16 x i8>, <16 x i8>* %2627, align 16, !tbaa !390
  %2629 = getelementptr inbounds i8, i8* %2578, i64 16
  %2630 = bitcast i8* %2629 to <16 x i8>*
  %2631 = load <16 x i8>, <16 x i8>* %2630, align 16, !tbaa !390
  %2632 = getelementptr inbounds i8, i8* %2578, i64 32
  %2633 = bitcast i8* %2632 to <16 x i8>*
  %2634 = load <16 x i8>, <16 x i8>* %2633, align 16, !tbaa !390
  %2635 = getelementptr inbounds i8, i8* %2578, i64 48
  %2636 = bitcast i8* %2635 to <16 x i8>*
  %2637 = load <16 x i8>, <16 x i8>* %2636, align 16, !tbaa !390
  %2638 = bitcast i8* %2563 to <16 x i8>*
  %2639 = load <16 x i8>, <16 x i8>* %2638, align 16, !tbaa !390
  %2640 = getelementptr inbounds i8, i8* %2563, i64 16
  %2641 = bitcast i8* %2640 to <16 x i8>*
  %2642 = load <16 x i8>, <16 x i8>* %2641, align 16, !tbaa !390
  %2643 = getelementptr inbounds i8, i8* %2563, i64 32
  %2644 = bitcast i8* %2643 to <16 x i8>*
  %2645 = load <16 x i8>, <16 x i8>* %2644, align 16, !tbaa !390
  %2646 = getelementptr inbounds i8, i8* %2563, i64 48
  %2647 = bitcast i8* %2646 to <16 x i8>*
  %2648 = load <16 x i8>, <16 x i8>* %2647, align 16, !tbaa !390
  %2649 = bitcast i8* %2548 to <16 x i8>*
  %2650 = load <16 x i8>, <16 x i8>* %2649, align 16, !tbaa !390
  %2651 = getelementptr inbounds i8, i8* %2548, i64 16
  %2652 = bitcast i8* %2651 to <16 x i8>*
  %2653 = load <16 x i8>, <16 x i8>* %2652, align 16, !tbaa !390
  %2654 = getelementptr inbounds i8, i8* %2548, i64 32
  %2655 = bitcast i8* %2654 to <16 x i8>*
  %2656 = load <16 x i8>, <16 x i8>* %2655, align 16, !tbaa !390
  %2657 = getelementptr inbounds i8, i8* %2548, i64 48
  %2658 = bitcast i8* %2657 to <16 x i8>*
  %2659 = load <16 x i8>, <16 x i8>* %2658, align 16, !tbaa !390
  %2660 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2639, <16 x i8> %2650)
  %2661 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2642, <16 x i8> %2653)
  %2662 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2645, <16 x i8> %2656)
  %2663 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2648, <16 x i8> %2659)
  %2664 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2628, <16 x i8> %2660)
  %2665 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2631, <16 x i8> %2661)
  %2666 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2634, <16 x i8> %2662)
  %2667 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2637, <16 x i8> %2663)
  %2668 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2617, <16 x i8> %2664)
  %2669 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2620, <16 x i8> %2665)
  %2670 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2623, <16 x i8> %2666)
  %2671 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2626, <16 x i8> %2667)
  %2672 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2605, <16 x i8> %2668)
  %2673 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2608, <16 x i8> %2669)
  %2674 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2611, <16 x i8> %2670)
  %2675 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2614, <16 x i8> %2671)
  %2676 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2593, <16 x i8> %2672)
  %2677 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2596, <16 x i8> %2673)
  %2678 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2599, <16 x i8> %2674)
  %2679 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2602, <16 x i8> %2675)
  %2680 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2581, <16 x i8> %2676)
  %2681 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2584, <16 x i8> %2677)
  %2682 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2587, <16 x i8> %2678)
  %2683 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2590, <16 x i8> %2679)
  %2684 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2566, <16 x i8> %2680)
  %2685 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2569, <16 x i8> %2681)
  %2686 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2572, <16 x i8> %2682)
  %2687 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2575, <16 x i8> %2683)
  %2688 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2551, <16 x i8> %2684)
  %2689 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2554, <16 x i8> %2685)
  %2690 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2557, <16 x i8> %2686)
  %2691 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2560, <16 x i8> %2687)
  %2692 = add nsw i64 %2381, %1755
  %2693 = getelementptr inbounds i8, i8* %5, i64 %2692
  %2694 = bitcast i8* %2693 to <16 x i8>*
  store <16 x i8> %2688, <16 x i8>* %2694, align 1, !tbaa !392
  %2695 = getelementptr inbounds i8, i8* %2693, i64 16
  %2696 = bitcast i8* %2695 to <16 x i8>*
  store <16 x i8> %2689, <16 x i8>* %2696, align 1, !tbaa !392
  %2697 = getelementptr inbounds i8, i8* %2693, i64 32
  %2698 = bitcast i8* %2697 to <16 x i8>*
  store <16 x i8> %2690, <16 x i8>* %2698, align 1, !tbaa !392
  %2699 = getelementptr inbounds i8, i8* %2693, i64 48
  %2700 = bitcast i8* %2699 to <16 x i8>*
  store <16 x i8> %2691, <16 x i8>* %2700, align 1, !tbaa !392
  %t27 = add i32 %t112, %1762
  %t66 = add nsw i32 %t27, %33
  %t67 = add nsw i32 %t27, %t106
  %2701 = sext i32 %t66 to i64
  %2702 = shl nsw i64 %2701, 6
  %2703 = getelementptr inbounds i8, i8* %bounded_input, i64 %2702
  %2704 = getelementptr inbounds i8, i8* %2703, i64 1
  %2705 = bitcast i8* %2704 to <16 x i8>*
  %2706 = load <16 x i8>, <16 x i8>* %2705, align 1, !tbaa !390
  %2707 = getelementptr inbounds i8, i8* %2703, i64 17
  %2708 = bitcast i8* %2707 to <16 x i8>*
  %2709 = load <16 x i8>, <16 x i8>* %2708, align 1, !tbaa !390
  %2710 = getelementptr inbounds i8, i8* %2703, i64 33
  %2711 = bitcast i8* %2710 to <16 x i8>*
  %2712 = load <16 x i8>, <16 x i8>* %2711, align 1, !tbaa !390
  %2713 = getelementptr inbounds i8, i8* %2703, i64 49
  %2714 = bitcast i8* %2713 to <16 x i8>*
  %2715 = load <16 x i8>, <16 x i8>* %2714, align 1, !tbaa !390
  %2716 = sext i32 %t27 to i64
  %2717 = shl nsw i64 %2716, 6
  %2718 = getelementptr inbounds i8, i8* %bounded_input, i64 %2717
  %2719 = getelementptr inbounds i8, i8* %2718, i64 1
  %2720 = bitcast i8* %2719 to <16 x i8>*
  %2721 = load <16 x i8>, <16 x i8>* %2720, align 1, !tbaa !390
  %2722 = getelementptr inbounds i8, i8* %2718, i64 17
  %2723 = bitcast i8* %2722 to <16 x i8>*
  %2724 = load <16 x i8>, <16 x i8>* %2723, align 1, !tbaa !390
  %2725 = getelementptr inbounds i8, i8* %2718, i64 33
  %2726 = bitcast i8* %2725 to <16 x i8>*
  %2727 = load <16 x i8>, <16 x i8>* %2726, align 1, !tbaa !390
  %2728 = getelementptr inbounds i8, i8* %2718, i64 49
  %2729 = bitcast i8* %2728 to <16 x i8>*
  %2730 = load <16 x i8>, <16 x i8>* %2729, align 1, !tbaa !390
  %2731 = sext i32 %t67 to i64
  %2732 = shl nsw i64 %2731, 6
  %2733 = getelementptr inbounds i8, i8* %bounded_input, i64 %2732
  %2734 = getelementptr inbounds i8, i8* %2733, i64 1
  %2735 = bitcast i8* %2734 to <16 x i8>*
  %2736 = load <16 x i8>, <16 x i8>* %2735, align 1, !tbaa !390
  %2737 = getelementptr inbounds i8, i8* %2733, i64 17
  %2738 = bitcast i8* %2737 to <16 x i8>*
  %2739 = load <16 x i8>, <16 x i8>* %2738, align 1, !tbaa !390
  %2740 = getelementptr inbounds i8, i8* %2733, i64 33
  %2741 = bitcast i8* %2740 to <16 x i8>*
  %2742 = load <16 x i8>, <16 x i8>* %2741, align 1, !tbaa !390
  %2743 = getelementptr inbounds i8, i8* %2733, i64 49
  %2744 = bitcast i8* %2743 to <16 x i8>*
  %2745 = load <16 x i8>, <16 x i8>* %2744, align 1, !tbaa !390
  %2746 = getelementptr inbounds i8, i8* %2733, i64 2
  %2747 = bitcast i8* %2746 to <16 x i8>*
  %2748 = load <16 x i8>, <16 x i8>* %2747, align 2, !tbaa !390
  %2749 = getelementptr inbounds i8, i8* %2733, i64 18
  %2750 = bitcast i8* %2749 to <16 x i8>*
  %2751 = load <16 x i8>, <16 x i8>* %2750, align 2, !tbaa !390
  %2752 = getelementptr inbounds i8, i8* %2733, i64 34
  %2753 = bitcast i8* %2752 to <16 x i8>*
  %2754 = load <16 x i8>, <16 x i8>* %2753, align 2, !tbaa !390
  %2755 = getelementptr inbounds i8, i8* %2733, i64 50
  %2756 = bitcast i8* %2755 to <16 x i8>*
  %2757 = load <16 x i8>, <16 x i8>* %2756, align 2, !tbaa !390
  %2758 = getelementptr inbounds i8, i8* %2718, i64 2
  %2759 = bitcast i8* %2758 to <16 x i8>*
  %2760 = load <16 x i8>, <16 x i8>* %2759, align 2, !tbaa !390
  %2761 = getelementptr inbounds i8, i8* %2718, i64 18
  %2762 = bitcast i8* %2761 to <16 x i8>*
  %2763 = load <16 x i8>, <16 x i8>* %2762, align 2, !tbaa !390
  %2764 = getelementptr inbounds i8, i8* %2718, i64 34
  %2765 = bitcast i8* %2764 to <16 x i8>*
  %2766 = load <16 x i8>, <16 x i8>* %2765, align 2, !tbaa !390
  %2767 = getelementptr inbounds i8, i8* %2718, i64 50
  %2768 = bitcast i8* %2767 to <16 x i8>*
  %2769 = load <16 x i8>, <16 x i8>* %2768, align 2, !tbaa !390
  %2770 = getelementptr inbounds i8, i8* %2703, i64 2
  %2771 = bitcast i8* %2770 to <16 x i8>*
  %2772 = load <16 x i8>, <16 x i8>* %2771, align 2, !tbaa !390
  %2773 = getelementptr inbounds i8, i8* %2703, i64 18
  %2774 = bitcast i8* %2773 to <16 x i8>*
  %2775 = load <16 x i8>, <16 x i8>* %2774, align 2, !tbaa !390
  %2776 = getelementptr inbounds i8, i8* %2703, i64 34
  %2777 = bitcast i8* %2776 to <16 x i8>*
  %2778 = load <16 x i8>, <16 x i8>* %2777, align 2, !tbaa !390
  %2779 = getelementptr inbounds i8, i8* %2703, i64 50
  %2780 = bitcast i8* %2779 to <16 x i8>*
  %2781 = load <16 x i8>, <16 x i8>* %2780, align 2, !tbaa !390
  %2782 = bitcast i8* %2733 to <16 x i8>*
  %2783 = load <16 x i8>, <16 x i8>* %2782, align 16, !tbaa !390
  %2784 = getelementptr inbounds i8, i8* %2733, i64 16
  %2785 = bitcast i8* %2784 to <16 x i8>*
  %2786 = load <16 x i8>, <16 x i8>* %2785, align 16, !tbaa !390
  %2787 = getelementptr inbounds i8, i8* %2733, i64 32
  %2788 = bitcast i8* %2787 to <16 x i8>*
  %2789 = load <16 x i8>, <16 x i8>* %2788, align 16, !tbaa !390
  %2790 = getelementptr inbounds i8, i8* %2733, i64 48
  %2791 = bitcast i8* %2790 to <16 x i8>*
  %2792 = load <16 x i8>, <16 x i8>* %2791, align 16, !tbaa !390
  %2793 = bitcast i8* %2718 to <16 x i8>*
  %2794 = load <16 x i8>, <16 x i8>* %2793, align 16, !tbaa !390
  %2795 = getelementptr inbounds i8, i8* %2718, i64 16
  %2796 = bitcast i8* %2795 to <16 x i8>*
  %2797 = load <16 x i8>, <16 x i8>* %2796, align 16, !tbaa !390
  %2798 = getelementptr inbounds i8, i8* %2718, i64 32
  %2799 = bitcast i8* %2798 to <16 x i8>*
  %2800 = load <16 x i8>, <16 x i8>* %2799, align 16, !tbaa !390
  %2801 = getelementptr inbounds i8, i8* %2718, i64 48
  %2802 = bitcast i8* %2801 to <16 x i8>*
  %2803 = load <16 x i8>, <16 x i8>* %2802, align 16, !tbaa !390
  %2804 = bitcast i8* %2703 to <16 x i8>*
  %2805 = load <16 x i8>, <16 x i8>* %2804, align 16, !tbaa !390
  %2806 = getelementptr inbounds i8, i8* %2703, i64 16
  %2807 = bitcast i8* %2806 to <16 x i8>*
  %2808 = load <16 x i8>, <16 x i8>* %2807, align 16, !tbaa !390
  %2809 = getelementptr inbounds i8, i8* %2703, i64 32
  %2810 = bitcast i8* %2809 to <16 x i8>*
  %2811 = load <16 x i8>, <16 x i8>* %2810, align 16, !tbaa !390
  %2812 = getelementptr inbounds i8, i8* %2703, i64 48
  %2813 = bitcast i8* %2812 to <16 x i8>*
  %2814 = load <16 x i8>, <16 x i8>* %2813, align 16, !tbaa !390
  %2815 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2794, <16 x i8> %2805)
  %2816 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2797, <16 x i8> %2808)
  %2817 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2800, <16 x i8> %2811)
  %2818 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2803, <16 x i8> %2814)
  %2819 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2783, <16 x i8> %2815)
  %2820 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2786, <16 x i8> %2816)
  %2821 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2789, <16 x i8> %2817)
  %2822 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2792, <16 x i8> %2818)
  %2823 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2772, <16 x i8> %2819)
  %2824 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2775, <16 x i8> %2820)
  %2825 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2778, <16 x i8> %2821)
  %2826 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2781, <16 x i8> %2822)
  %2827 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2760, <16 x i8> %2823)
  %2828 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2763, <16 x i8> %2824)
  %2829 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2766, <16 x i8> %2825)
  %2830 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2769, <16 x i8> %2826)
  %2831 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2748, <16 x i8> %2827)
  %2832 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2751, <16 x i8> %2828)
  %2833 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2754, <16 x i8> %2829)
  %2834 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2757, <16 x i8> %2830)
  %2835 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2736, <16 x i8> %2831)
  %2836 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2739, <16 x i8> %2832)
  %2837 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2742, <16 x i8> %2833)
  %2838 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2745, <16 x i8> %2834)
  %2839 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2721, <16 x i8> %2835)
  %2840 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2724, <16 x i8> %2836)
  %2841 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2727, <16 x i8> %2837)
  %2842 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2730, <16 x i8> %2838)
  %2843 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2706, <16 x i8> %2839)
  %2844 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2709, <16 x i8> %2840)
  %2845 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2712, <16 x i8> %2841)
  %2846 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2715, <16 x i8> %2842)
  %2847 = add nsw i64 %2225, %1756
  %2848 = getelementptr inbounds i8, i8* %5, i64 %2847
  %2849 = bitcast i8* %2848 to <16 x i8>*
  store <16 x i8> %2843, <16 x i8>* %2849, align 1, !tbaa !392
  %2850 = getelementptr inbounds i8, i8* %2848, i64 16
  %2851 = bitcast i8* %2850 to <16 x i8>*
  store <16 x i8> %2844, <16 x i8>* %2851, align 1, !tbaa !392
  %2852 = getelementptr inbounds i8, i8* %2848, i64 32
  %2853 = bitcast i8* %2852 to <16 x i8>*
  store <16 x i8> %2845, <16 x i8>* %2853, align 1, !tbaa !392
  %2854 = getelementptr inbounds i8, i8* %2848, i64 48
  %2855 = bitcast i8* %2854 to <16 x i8>*
  store <16 x i8> %2846, <16 x i8>* %2855, align 1, !tbaa !392
  %t27.1 = add i32 %t112, %1921
  %t66.1 = add nsw i32 %t27.1, %33
  %t67.1 = add nsw i32 %t27.1, %t106
  %2856 = sext i32 %t66.1 to i64
  %2857 = shl nsw i64 %2856, 6
  %2858 = getelementptr inbounds i8, i8* %bounded_input, i64 %2857
  %2859 = getelementptr inbounds i8, i8* %2858, i64 1
  %2860 = bitcast i8* %2859 to <16 x i8>*
  %2861 = load <16 x i8>, <16 x i8>* %2860, align 1, !tbaa !390
  %2862 = getelementptr inbounds i8, i8* %2858, i64 17
  %2863 = bitcast i8* %2862 to <16 x i8>*
  %2864 = load <16 x i8>, <16 x i8>* %2863, align 1, !tbaa !390
  %2865 = getelementptr inbounds i8, i8* %2858, i64 33
  %2866 = bitcast i8* %2865 to <16 x i8>*
  %2867 = load <16 x i8>, <16 x i8>* %2866, align 1, !tbaa !390
  %2868 = getelementptr inbounds i8, i8* %2858, i64 49
  %2869 = bitcast i8* %2868 to <16 x i8>*
  %2870 = load <16 x i8>, <16 x i8>* %2869, align 1, !tbaa !390
  %2871 = sext i32 %t27.1 to i64
  %2872 = shl nsw i64 %2871, 6
  %2873 = getelementptr inbounds i8, i8* %bounded_input, i64 %2872
  %2874 = getelementptr inbounds i8, i8* %2873, i64 1
  %2875 = bitcast i8* %2874 to <16 x i8>*
  %2876 = load <16 x i8>, <16 x i8>* %2875, align 1, !tbaa !390
  %2877 = getelementptr inbounds i8, i8* %2873, i64 17
  %2878 = bitcast i8* %2877 to <16 x i8>*
  %2879 = load <16 x i8>, <16 x i8>* %2878, align 1, !tbaa !390
  %2880 = getelementptr inbounds i8, i8* %2873, i64 33
  %2881 = bitcast i8* %2880 to <16 x i8>*
  %2882 = load <16 x i8>, <16 x i8>* %2881, align 1, !tbaa !390
  %2883 = getelementptr inbounds i8, i8* %2873, i64 49
  %2884 = bitcast i8* %2883 to <16 x i8>*
  %2885 = load <16 x i8>, <16 x i8>* %2884, align 1, !tbaa !390
  %2886 = sext i32 %t67.1 to i64
  %2887 = shl nsw i64 %2886, 6
  %2888 = getelementptr inbounds i8, i8* %bounded_input, i64 %2887
  %2889 = getelementptr inbounds i8, i8* %2888, i64 1
  %2890 = bitcast i8* %2889 to <16 x i8>*
  %2891 = load <16 x i8>, <16 x i8>* %2890, align 1, !tbaa !390
  %2892 = getelementptr inbounds i8, i8* %2888, i64 17
  %2893 = bitcast i8* %2892 to <16 x i8>*
  %2894 = load <16 x i8>, <16 x i8>* %2893, align 1, !tbaa !390
  %2895 = getelementptr inbounds i8, i8* %2888, i64 33
  %2896 = bitcast i8* %2895 to <16 x i8>*
  %2897 = load <16 x i8>, <16 x i8>* %2896, align 1, !tbaa !390
  %2898 = getelementptr inbounds i8, i8* %2888, i64 49
  %2899 = bitcast i8* %2898 to <16 x i8>*
  %2900 = load <16 x i8>, <16 x i8>* %2899, align 1, !tbaa !390
  %2901 = getelementptr inbounds i8, i8* %2888, i64 2
  %2902 = bitcast i8* %2901 to <16 x i8>*
  %2903 = load <16 x i8>, <16 x i8>* %2902, align 2, !tbaa !390
  %2904 = getelementptr inbounds i8, i8* %2888, i64 18
  %2905 = bitcast i8* %2904 to <16 x i8>*
  %2906 = load <16 x i8>, <16 x i8>* %2905, align 2, !tbaa !390
  %2907 = getelementptr inbounds i8, i8* %2888, i64 34
  %2908 = bitcast i8* %2907 to <16 x i8>*
  %2909 = load <16 x i8>, <16 x i8>* %2908, align 2, !tbaa !390
  %2910 = getelementptr inbounds i8, i8* %2888, i64 50
  %2911 = bitcast i8* %2910 to <16 x i8>*
  %2912 = load <16 x i8>, <16 x i8>* %2911, align 2, !tbaa !390
  %2913 = getelementptr inbounds i8, i8* %2873, i64 2
  %2914 = bitcast i8* %2913 to <16 x i8>*
  %2915 = load <16 x i8>, <16 x i8>* %2914, align 2, !tbaa !390
  %2916 = getelementptr inbounds i8, i8* %2873, i64 18
  %2917 = bitcast i8* %2916 to <16 x i8>*
  %2918 = load <16 x i8>, <16 x i8>* %2917, align 2, !tbaa !390
  %2919 = getelementptr inbounds i8, i8* %2873, i64 34
  %2920 = bitcast i8* %2919 to <16 x i8>*
  %2921 = load <16 x i8>, <16 x i8>* %2920, align 2, !tbaa !390
  %2922 = getelementptr inbounds i8, i8* %2873, i64 50
  %2923 = bitcast i8* %2922 to <16 x i8>*
  %2924 = load <16 x i8>, <16 x i8>* %2923, align 2, !tbaa !390
  %2925 = getelementptr inbounds i8, i8* %2858, i64 2
  %2926 = bitcast i8* %2925 to <16 x i8>*
  %2927 = load <16 x i8>, <16 x i8>* %2926, align 2, !tbaa !390
  %2928 = getelementptr inbounds i8, i8* %2858, i64 18
  %2929 = bitcast i8* %2928 to <16 x i8>*
  %2930 = load <16 x i8>, <16 x i8>* %2929, align 2, !tbaa !390
  %2931 = getelementptr inbounds i8, i8* %2858, i64 34
  %2932 = bitcast i8* %2931 to <16 x i8>*
  %2933 = load <16 x i8>, <16 x i8>* %2932, align 2, !tbaa !390
  %2934 = getelementptr inbounds i8, i8* %2858, i64 50
  %2935 = bitcast i8* %2934 to <16 x i8>*
  %2936 = load <16 x i8>, <16 x i8>* %2935, align 2, !tbaa !390
  %2937 = bitcast i8* %2888 to <16 x i8>*
  %2938 = load <16 x i8>, <16 x i8>* %2937, align 16, !tbaa !390
  %2939 = getelementptr inbounds i8, i8* %2888, i64 16
  %2940 = bitcast i8* %2939 to <16 x i8>*
  %2941 = load <16 x i8>, <16 x i8>* %2940, align 16, !tbaa !390
  %2942 = getelementptr inbounds i8, i8* %2888, i64 32
  %2943 = bitcast i8* %2942 to <16 x i8>*
  %2944 = load <16 x i8>, <16 x i8>* %2943, align 16, !tbaa !390
  %2945 = getelementptr inbounds i8, i8* %2888, i64 48
  %2946 = bitcast i8* %2945 to <16 x i8>*
  %2947 = load <16 x i8>, <16 x i8>* %2946, align 16, !tbaa !390
  %2948 = bitcast i8* %2873 to <16 x i8>*
  %2949 = load <16 x i8>, <16 x i8>* %2948, align 16, !tbaa !390
  %2950 = getelementptr inbounds i8, i8* %2873, i64 16
  %2951 = bitcast i8* %2950 to <16 x i8>*
  %2952 = load <16 x i8>, <16 x i8>* %2951, align 16, !tbaa !390
  %2953 = getelementptr inbounds i8, i8* %2873, i64 32
  %2954 = bitcast i8* %2953 to <16 x i8>*
  %2955 = load <16 x i8>, <16 x i8>* %2954, align 16, !tbaa !390
  %2956 = getelementptr inbounds i8, i8* %2873, i64 48
  %2957 = bitcast i8* %2956 to <16 x i8>*
  %2958 = load <16 x i8>, <16 x i8>* %2957, align 16, !tbaa !390
  %2959 = bitcast i8* %2858 to <16 x i8>*
  %2960 = load <16 x i8>, <16 x i8>* %2959, align 16, !tbaa !390
  %2961 = getelementptr inbounds i8, i8* %2858, i64 16
  %2962 = bitcast i8* %2961 to <16 x i8>*
  %2963 = load <16 x i8>, <16 x i8>* %2962, align 16, !tbaa !390
  %2964 = getelementptr inbounds i8, i8* %2858, i64 32
  %2965 = bitcast i8* %2964 to <16 x i8>*
  %2966 = load <16 x i8>, <16 x i8>* %2965, align 16, !tbaa !390
  %2967 = getelementptr inbounds i8, i8* %2858, i64 48
  %2968 = bitcast i8* %2967 to <16 x i8>*
  %2969 = load <16 x i8>, <16 x i8>* %2968, align 16, !tbaa !390
  %2970 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2949, <16 x i8> %2960)
  %2971 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2952, <16 x i8> %2963)
  %2972 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2955, <16 x i8> %2966)
  %2973 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2958, <16 x i8> %2969)
  %2974 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2938, <16 x i8> %2970)
  %2975 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2941, <16 x i8> %2971)
  %2976 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2944, <16 x i8> %2972)
  %2977 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2947, <16 x i8> %2973)
  %2978 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2927, <16 x i8> %2974)
  %2979 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2930, <16 x i8> %2975)
  %2980 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2933, <16 x i8> %2976)
  %2981 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2936, <16 x i8> %2977)
  %2982 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2915, <16 x i8> %2978)
  %2983 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2918, <16 x i8> %2979)
  %2984 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2921, <16 x i8> %2980)
  %2985 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2924, <16 x i8> %2981)
  %2986 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2903, <16 x i8> %2982)
  %2987 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2906, <16 x i8> %2983)
  %2988 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2909, <16 x i8> %2984)
  %2989 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2912, <16 x i8> %2985)
  %2990 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2891, <16 x i8> %2986)
  %2991 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2894, <16 x i8> %2987)
  %2992 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2897, <16 x i8> %2988)
  %2993 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2900, <16 x i8> %2989)
  %2994 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2876, <16 x i8> %2990)
  %2995 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2879, <16 x i8> %2991)
  %2996 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2882, <16 x i8> %2992)
  %2997 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2885, <16 x i8> %2993)
  %2998 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2861, <16 x i8> %2994)
  %2999 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2864, <16 x i8> %2995)
  %3000 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2867, <16 x i8> %2996)
  %3001 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2870, <16 x i8> %2997)
  %3002 = add nsw i64 %2381, %1756
  %3003 = getelementptr inbounds i8, i8* %5, i64 %3002
  %3004 = bitcast i8* %3003 to <16 x i8>*
  store <16 x i8> %2998, <16 x i8>* %3004, align 1, !tbaa !392
  %3005 = getelementptr inbounds i8, i8* %3003, i64 16
  %3006 = bitcast i8* %3005 to <16 x i8>*
  store <16 x i8> %2999, <16 x i8>* %3006, align 1, !tbaa !392
  %3007 = getelementptr inbounds i8, i8* %3003, i64 32
  %3008 = bitcast i8* %3007 to <16 x i8>*
  store <16 x i8> %3000, <16 x i8>* %3008, align 1, !tbaa !392
  %3009 = getelementptr inbounds i8, i8* %3003, i64 48
  %3010 = bitcast i8* %3009 to <16 x i8>*
  store <16 x i8> %3001, <16 x i8>* %3010, align 1, !tbaa !392
  %t31 = add i32 %t114, %1762
  %t68 = add nsw i32 %t31, %33
  %t69 = add nsw i32 %t31, %t106
  %3011 = sext i32 %t68 to i64
  %3012 = shl nsw i64 %3011, 6
  %3013 = getelementptr inbounds i8, i8* %bounded_input, i64 %3012
  %3014 = getelementptr inbounds i8, i8* %3013, i64 1
  %3015 = bitcast i8* %3014 to <16 x i8>*
  %3016 = load <16 x i8>, <16 x i8>* %3015, align 1, !tbaa !390
  %3017 = getelementptr inbounds i8, i8* %3013, i64 17
  %3018 = bitcast i8* %3017 to <16 x i8>*
  %3019 = load <16 x i8>, <16 x i8>* %3018, align 1, !tbaa !390
  %3020 = getelementptr inbounds i8, i8* %3013, i64 33
  %3021 = bitcast i8* %3020 to <16 x i8>*
  %3022 = load <16 x i8>, <16 x i8>* %3021, align 1, !tbaa !390
  %3023 = getelementptr inbounds i8, i8* %3013, i64 49
  %3024 = bitcast i8* %3023 to <16 x i8>*
  %3025 = load <16 x i8>, <16 x i8>* %3024, align 1, !tbaa !390
  %3026 = sext i32 %t31 to i64
  %3027 = shl nsw i64 %3026, 6
  %3028 = getelementptr inbounds i8, i8* %bounded_input, i64 %3027
  %3029 = getelementptr inbounds i8, i8* %3028, i64 1
  %3030 = bitcast i8* %3029 to <16 x i8>*
  %3031 = load <16 x i8>, <16 x i8>* %3030, align 1, !tbaa !390
  %3032 = getelementptr inbounds i8, i8* %3028, i64 17
  %3033 = bitcast i8* %3032 to <16 x i8>*
  %3034 = load <16 x i8>, <16 x i8>* %3033, align 1, !tbaa !390
  %3035 = getelementptr inbounds i8, i8* %3028, i64 33
  %3036 = bitcast i8* %3035 to <16 x i8>*
  %3037 = load <16 x i8>, <16 x i8>* %3036, align 1, !tbaa !390
  %3038 = getelementptr inbounds i8, i8* %3028, i64 49
  %3039 = bitcast i8* %3038 to <16 x i8>*
  %3040 = load <16 x i8>, <16 x i8>* %3039, align 1, !tbaa !390
  %3041 = sext i32 %t69 to i64
  %3042 = shl nsw i64 %3041, 6
  %3043 = getelementptr inbounds i8, i8* %bounded_input, i64 %3042
  %3044 = getelementptr inbounds i8, i8* %3043, i64 1
  %3045 = bitcast i8* %3044 to <16 x i8>*
  %3046 = load <16 x i8>, <16 x i8>* %3045, align 1, !tbaa !390
  %3047 = getelementptr inbounds i8, i8* %3043, i64 17
  %3048 = bitcast i8* %3047 to <16 x i8>*
  %3049 = load <16 x i8>, <16 x i8>* %3048, align 1, !tbaa !390
  %3050 = getelementptr inbounds i8, i8* %3043, i64 33
  %3051 = bitcast i8* %3050 to <16 x i8>*
  %3052 = load <16 x i8>, <16 x i8>* %3051, align 1, !tbaa !390
  %3053 = getelementptr inbounds i8, i8* %3043, i64 49
  %3054 = bitcast i8* %3053 to <16 x i8>*
  %3055 = load <16 x i8>, <16 x i8>* %3054, align 1, !tbaa !390
  %3056 = getelementptr inbounds i8, i8* %3043, i64 2
  %3057 = bitcast i8* %3056 to <16 x i8>*
  %3058 = load <16 x i8>, <16 x i8>* %3057, align 2, !tbaa !390
  %3059 = getelementptr inbounds i8, i8* %3043, i64 18
  %3060 = bitcast i8* %3059 to <16 x i8>*
  %3061 = load <16 x i8>, <16 x i8>* %3060, align 2, !tbaa !390
  %3062 = getelementptr inbounds i8, i8* %3043, i64 34
  %3063 = bitcast i8* %3062 to <16 x i8>*
  %3064 = load <16 x i8>, <16 x i8>* %3063, align 2, !tbaa !390
  %3065 = getelementptr inbounds i8, i8* %3043, i64 50
  %3066 = bitcast i8* %3065 to <16 x i8>*
  %3067 = load <16 x i8>, <16 x i8>* %3066, align 2, !tbaa !390
  %3068 = getelementptr inbounds i8, i8* %3028, i64 2
  %3069 = bitcast i8* %3068 to <16 x i8>*
  %3070 = load <16 x i8>, <16 x i8>* %3069, align 2, !tbaa !390
  %3071 = getelementptr inbounds i8, i8* %3028, i64 18
  %3072 = bitcast i8* %3071 to <16 x i8>*
  %3073 = load <16 x i8>, <16 x i8>* %3072, align 2, !tbaa !390
  %3074 = getelementptr inbounds i8, i8* %3028, i64 34
  %3075 = bitcast i8* %3074 to <16 x i8>*
  %3076 = load <16 x i8>, <16 x i8>* %3075, align 2, !tbaa !390
  %3077 = getelementptr inbounds i8, i8* %3028, i64 50
  %3078 = bitcast i8* %3077 to <16 x i8>*
  %3079 = load <16 x i8>, <16 x i8>* %3078, align 2, !tbaa !390
  %3080 = getelementptr inbounds i8, i8* %3013, i64 2
  %3081 = bitcast i8* %3080 to <16 x i8>*
  %3082 = load <16 x i8>, <16 x i8>* %3081, align 2, !tbaa !390
  %3083 = getelementptr inbounds i8, i8* %3013, i64 18
  %3084 = bitcast i8* %3083 to <16 x i8>*
  %3085 = load <16 x i8>, <16 x i8>* %3084, align 2, !tbaa !390
  %3086 = getelementptr inbounds i8, i8* %3013, i64 34
  %3087 = bitcast i8* %3086 to <16 x i8>*
  %3088 = load <16 x i8>, <16 x i8>* %3087, align 2, !tbaa !390
  %3089 = getelementptr inbounds i8, i8* %3013, i64 50
  %3090 = bitcast i8* %3089 to <16 x i8>*
  %3091 = load <16 x i8>, <16 x i8>* %3090, align 2, !tbaa !390
  %3092 = bitcast i8* %3043 to <16 x i8>*
  %3093 = load <16 x i8>, <16 x i8>* %3092, align 16, !tbaa !390
  %3094 = getelementptr inbounds i8, i8* %3043, i64 16
  %3095 = bitcast i8* %3094 to <16 x i8>*
  %3096 = load <16 x i8>, <16 x i8>* %3095, align 16, !tbaa !390
  %3097 = getelementptr inbounds i8, i8* %3043, i64 32
  %3098 = bitcast i8* %3097 to <16 x i8>*
  %3099 = load <16 x i8>, <16 x i8>* %3098, align 16, !tbaa !390
  %3100 = getelementptr inbounds i8, i8* %3043, i64 48
  %3101 = bitcast i8* %3100 to <16 x i8>*
  %3102 = load <16 x i8>, <16 x i8>* %3101, align 16, !tbaa !390
  %3103 = bitcast i8* %3028 to <16 x i8>*
  %3104 = load <16 x i8>, <16 x i8>* %3103, align 16, !tbaa !390
  %3105 = getelementptr inbounds i8, i8* %3028, i64 16
  %3106 = bitcast i8* %3105 to <16 x i8>*
  %3107 = load <16 x i8>, <16 x i8>* %3106, align 16, !tbaa !390
  %3108 = getelementptr inbounds i8, i8* %3028, i64 32
  %3109 = bitcast i8* %3108 to <16 x i8>*
  %3110 = load <16 x i8>, <16 x i8>* %3109, align 16, !tbaa !390
  %3111 = getelementptr inbounds i8, i8* %3028, i64 48
  %3112 = bitcast i8* %3111 to <16 x i8>*
  %3113 = load <16 x i8>, <16 x i8>* %3112, align 16, !tbaa !390
  %3114 = bitcast i8* %3013 to <16 x i8>*
  %3115 = load <16 x i8>, <16 x i8>* %3114, align 16, !tbaa !390
  %3116 = getelementptr inbounds i8, i8* %3013, i64 16
  %3117 = bitcast i8* %3116 to <16 x i8>*
  %3118 = load <16 x i8>, <16 x i8>* %3117, align 16, !tbaa !390
  %3119 = getelementptr inbounds i8, i8* %3013, i64 32
  %3120 = bitcast i8* %3119 to <16 x i8>*
  %3121 = load <16 x i8>, <16 x i8>* %3120, align 16, !tbaa !390
  %3122 = getelementptr inbounds i8, i8* %3013, i64 48
  %3123 = bitcast i8* %3122 to <16 x i8>*
  %3124 = load <16 x i8>, <16 x i8>* %3123, align 16, !tbaa !390
  %3125 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3104, <16 x i8> %3115)
  %3126 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3107, <16 x i8> %3118)
  %3127 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3110, <16 x i8> %3121)
  %3128 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3113, <16 x i8> %3124)
  %3129 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3093, <16 x i8> %3125)
  %3130 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3096, <16 x i8> %3126)
  %3131 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3099, <16 x i8> %3127)
  %3132 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3102, <16 x i8> %3128)
  %3133 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3082, <16 x i8> %3129)
  %3134 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3085, <16 x i8> %3130)
  %3135 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3088, <16 x i8> %3131)
  %3136 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3091, <16 x i8> %3132)
  %3137 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3070, <16 x i8> %3133)
  %3138 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3073, <16 x i8> %3134)
  %3139 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3076, <16 x i8> %3135)
  %3140 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3079, <16 x i8> %3136)
  %3141 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3058, <16 x i8> %3137)
  %3142 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3061, <16 x i8> %3138)
  %3143 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3064, <16 x i8> %3139)
  %3144 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3067, <16 x i8> %3140)
  %3145 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3046, <16 x i8> %3141)
  %3146 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3049, <16 x i8> %3142)
  %3147 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3052, <16 x i8> %3143)
  %3148 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3055, <16 x i8> %3144)
  %3149 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3031, <16 x i8> %3145)
  %3150 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3034, <16 x i8> %3146)
  %3151 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3037, <16 x i8> %3147)
  %3152 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3040, <16 x i8> %3148)
  %3153 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3016, <16 x i8> %3149)
  %3154 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3019, <16 x i8> %3150)
  %3155 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3022, <16 x i8> %3151)
  %3156 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3025, <16 x i8> %3152)
  %3157 = add nsw i64 %2225, %1757
  %3158 = getelementptr inbounds i8, i8* %5, i64 %3157
  %3159 = bitcast i8* %3158 to <16 x i8>*
  store <16 x i8> %3153, <16 x i8>* %3159, align 1, !tbaa !392
  %3160 = getelementptr inbounds i8, i8* %3158, i64 16
  %3161 = bitcast i8* %3160 to <16 x i8>*
  store <16 x i8> %3154, <16 x i8>* %3161, align 1, !tbaa !392
  %3162 = getelementptr inbounds i8, i8* %3158, i64 32
  %3163 = bitcast i8* %3162 to <16 x i8>*
  store <16 x i8> %3155, <16 x i8>* %3163, align 1, !tbaa !392
  %3164 = getelementptr inbounds i8, i8* %3158, i64 48
  %3165 = bitcast i8* %3164 to <16 x i8>*
  store <16 x i8> %3156, <16 x i8>* %3165, align 1, !tbaa !392
  %t31.1 = add i32 %t114, %1921
  %t68.1 = add nsw i32 %t31.1, %33
  %t69.1 = add nsw i32 %t31.1, %t106
  %3166 = sext i32 %t68.1 to i64
  %3167 = shl nsw i64 %3166, 6
  %3168 = getelementptr inbounds i8, i8* %bounded_input, i64 %3167
  %3169 = getelementptr inbounds i8, i8* %3168, i64 1
  %3170 = bitcast i8* %3169 to <16 x i8>*
  %3171 = load <16 x i8>, <16 x i8>* %3170, align 1, !tbaa !390
  %3172 = getelementptr inbounds i8, i8* %3168, i64 17
  %3173 = bitcast i8* %3172 to <16 x i8>*
  %3174 = load <16 x i8>, <16 x i8>* %3173, align 1, !tbaa !390
  %3175 = getelementptr inbounds i8, i8* %3168, i64 33
  %3176 = bitcast i8* %3175 to <16 x i8>*
  %3177 = load <16 x i8>, <16 x i8>* %3176, align 1, !tbaa !390
  %3178 = getelementptr inbounds i8, i8* %3168, i64 49
  %3179 = bitcast i8* %3178 to <16 x i8>*
  %3180 = load <16 x i8>, <16 x i8>* %3179, align 1, !tbaa !390
  %3181 = sext i32 %t31.1 to i64
  %3182 = shl nsw i64 %3181, 6
  %3183 = getelementptr inbounds i8, i8* %bounded_input, i64 %3182
  %3184 = getelementptr inbounds i8, i8* %3183, i64 1
  %3185 = bitcast i8* %3184 to <16 x i8>*
  %3186 = load <16 x i8>, <16 x i8>* %3185, align 1, !tbaa !390
  %3187 = getelementptr inbounds i8, i8* %3183, i64 17
  %3188 = bitcast i8* %3187 to <16 x i8>*
  %3189 = load <16 x i8>, <16 x i8>* %3188, align 1, !tbaa !390
  %3190 = getelementptr inbounds i8, i8* %3183, i64 33
  %3191 = bitcast i8* %3190 to <16 x i8>*
  %3192 = load <16 x i8>, <16 x i8>* %3191, align 1, !tbaa !390
  %3193 = getelementptr inbounds i8, i8* %3183, i64 49
  %3194 = bitcast i8* %3193 to <16 x i8>*
  %3195 = load <16 x i8>, <16 x i8>* %3194, align 1, !tbaa !390
  %3196 = sext i32 %t69.1 to i64
  %3197 = shl nsw i64 %3196, 6
  %3198 = getelementptr inbounds i8, i8* %bounded_input, i64 %3197
  %3199 = getelementptr inbounds i8, i8* %3198, i64 1
  %3200 = bitcast i8* %3199 to <16 x i8>*
  %3201 = load <16 x i8>, <16 x i8>* %3200, align 1, !tbaa !390
  %3202 = getelementptr inbounds i8, i8* %3198, i64 17
  %3203 = bitcast i8* %3202 to <16 x i8>*
  %3204 = load <16 x i8>, <16 x i8>* %3203, align 1, !tbaa !390
  %3205 = getelementptr inbounds i8, i8* %3198, i64 33
  %3206 = bitcast i8* %3205 to <16 x i8>*
  %3207 = load <16 x i8>, <16 x i8>* %3206, align 1, !tbaa !390
  %3208 = getelementptr inbounds i8, i8* %3198, i64 49
  %3209 = bitcast i8* %3208 to <16 x i8>*
  %3210 = load <16 x i8>, <16 x i8>* %3209, align 1, !tbaa !390
  %3211 = getelementptr inbounds i8, i8* %3198, i64 2
  %3212 = bitcast i8* %3211 to <16 x i8>*
  %3213 = load <16 x i8>, <16 x i8>* %3212, align 2, !tbaa !390
  %3214 = getelementptr inbounds i8, i8* %3198, i64 18
  %3215 = bitcast i8* %3214 to <16 x i8>*
  %3216 = load <16 x i8>, <16 x i8>* %3215, align 2, !tbaa !390
  %3217 = getelementptr inbounds i8, i8* %3198, i64 34
  %3218 = bitcast i8* %3217 to <16 x i8>*
  %3219 = load <16 x i8>, <16 x i8>* %3218, align 2, !tbaa !390
  %3220 = getelementptr inbounds i8, i8* %3198, i64 50
  %3221 = bitcast i8* %3220 to <16 x i8>*
  %3222 = load <16 x i8>, <16 x i8>* %3221, align 2, !tbaa !390
  %3223 = getelementptr inbounds i8, i8* %3183, i64 2
  %3224 = bitcast i8* %3223 to <16 x i8>*
  %3225 = load <16 x i8>, <16 x i8>* %3224, align 2, !tbaa !390
  %3226 = getelementptr inbounds i8, i8* %3183, i64 18
  %3227 = bitcast i8* %3226 to <16 x i8>*
  %3228 = load <16 x i8>, <16 x i8>* %3227, align 2, !tbaa !390
  %3229 = getelementptr inbounds i8, i8* %3183, i64 34
  %3230 = bitcast i8* %3229 to <16 x i8>*
  %3231 = load <16 x i8>, <16 x i8>* %3230, align 2, !tbaa !390
  %3232 = getelementptr inbounds i8, i8* %3183, i64 50
  %3233 = bitcast i8* %3232 to <16 x i8>*
  %3234 = load <16 x i8>, <16 x i8>* %3233, align 2, !tbaa !390
  %3235 = getelementptr inbounds i8, i8* %3168, i64 2
  %3236 = bitcast i8* %3235 to <16 x i8>*
  %3237 = load <16 x i8>, <16 x i8>* %3236, align 2, !tbaa !390
  %3238 = getelementptr inbounds i8, i8* %3168, i64 18
  %3239 = bitcast i8* %3238 to <16 x i8>*
  %3240 = load <16 x i8>, <16 x i8>* %3239, align 2, !tbaa !390
  %3241 = getelementptr inbounds i8, i8* %3168, i64 34
  %3242 = bitcast i8* %3241 to <16 x i8>*
  %3243 = load <16 x i8>, <16 x i8>* %3242, align 2, !tbaa !390
  %3244 = getelementptr inbounds i8, i8* %3168, i64 50
  %3245 = bitcast i8* %3244 to <16 x i8>*
  %3246 = load <16 x i8>, <16 x i8>* %3245, align 2, !tbaa !390
  %3247 = bitcast i8* %3198 to <16 x i8>*
  %3248 = load <16 x i8>, <16 x i8>* %3247, align 16, !tbaa !390
  %3249 = getelementptr inbounds i8, i8* %3198, i64 16
  %3250 = bitcast i8* %3249 to <16 x i8>*
  %3251 = load <16 x i8>, <16 x i8>* %3250, align 16, !tbaa !390
  %3252 = getelementptr inbounds i8, i8* %3198, i64 32
  %3253 = bitcast i8* %3252 to <16 x i8>*
  %3254 = load <16 x i8>, <16 x i8>* %3253, align 16, !tbaa !390
  %3255 = getelementptr inbounds i8, i8* %3198, i64 48
  %3256 = bitcast i8* %3255 to <16 x i8>*
  %3257 = load <16 x i8>, <16 x i8>* %3256, align 16, !tbaa !390
  %3258 = bitcast i8* %3183 to <16 x i8>*
  %3259 = load <16 x i8>, <16 x i8>* %3258, align 16, !tbaa !390
  %3260 = getelementptr inbounds i8, i8* %3183, i64 16
  %3261 = bitcast i8* %3260 to <16 x i8>*
  %3262 = load <16 x i8>, <16 x i8>* %3261, align 16, !tbaa !390
  %3263 = getelementptr inbounds i8, i8* %3183, i64 32
  %3264 = bitcast i8* %3263 to <16 x i8>*
  %3265 = load <16 x i8>, <16 x i8>* %3264, align 16, !tbaa !390
  %3266 = getelementptr inbounds i8, i8* %3183, i64 48
  %3267 = bitcast i8* %3266 to <16 x i8>*
  %3268 = load <16 x i8>, <16 x i8>* %3267, align 16, !tbaa !390
  %3269 = bitcast i8* %3168 to <16 x i8>*
  %3270 = load <16 x i8>, <16 x i8>* %3269, align 16, !tbaa !390
  %3271 = getelementptr inbounds i8, i8* %3168, i64 16
  %3272 = bitcast i8* %3271 to <16 x i8>*
  %3273 = load <16 x i8>, <16 x i8>* %3272, align 16, !tbaa !390
  %3274 = getelementptr inbounds i8, i8* %3168, i64 32
  %3275 = bitcast i8* %3274 to <16 x i8>*
  %3276 = load <16 x i8>, <16 x i8>* %3275, align 16, !tbaa !390
  %3277 = getelementptr inbounds i8, i8* %3168, i64 48
  %3278 = bitcast i8* %3277 to <16 x i8>*
  %3279 = load <16 x i8>, <16 x i8>* %3278, align 16, !tbaa !390
  %3280 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3259, <16 x i8> %3270)
  %3281 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3262, <16 x i8> %3273)
  %3282 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3265, <16 x i8> %3276)
  %3283 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3268, <16 x i8> %3279)
  %3284 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3248, <16 x i8> %3280)
  %3285 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3251, <16 x i8> %3281)
  %3286 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3254, <16 x i8> %3282)
  %3287 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3257, <16 x i8> %3283)
  %3288 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3237, <16 x i8> %3284)
  %3289 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3240, <16 x i8> %3285)
  %3290 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3243, <16 x i8> %3286)
  %3291 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3246, <16 x i8> %3287)
  %3292 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3225, <16 x i8> %3288)
  %3293 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3228, <16 x i8> %3289)
  %3294 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3231, <16 x i8> %3290)
  %3295 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3234, <16 x i8> %3291)
  %3296 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3213, <16 x i8> %3292)
  %3297 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3216, <16 x i8> %3293)
  %3298 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3219, <16 x i8> %3294)
  %3299 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3222, <16 x i8> %3295)
  %3300 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3201, <16 x i8> %3296)
  %3301 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3204, <16 x i8> %3297)
  %3302 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3207, <16 x i8> %3298)
  %3303 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3210, <16 x i8> %3299)
  %3304 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3186, <16 x i8> %3300)
  %3305 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3189, <16 x i8> %3301)
  %3306 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3192, <16 x i8> %3302)
  %3307 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3195, <16 x i8> %3303)
  %3308 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3171, <16 x i8> %3304)
  %3309 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3174, <16 x i8> %3305)
  %3310 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3177, <16 x i8> %3306)
  %3311 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3180, <16 x i8> %3307)
  %3312 = add nsw i64 %2381, %1757
  %3313 = getelementptr inbounds i8, i8* %5, i64 %3312
  %3314 = bitcast i8* %3313 to <16 x i8>*
  store <16 x i8> %3308, <16 x i8>* %3314, align 1, !tbaa !392
  %3315 = getelementptr inbounds i8, i8* %3313, i64 16
  %3316 = bitcast i8* %3315 to <16 x i8>*
  store <16 x i8> %3309, <16 x i8>* %3316, align 1, !tbaa !392
  %3317 = getelementptr inbounds i8, i8* %3313, i64 32
  %3318 = bitcast i8* %3317 to <16 x i8>*
  store <16 x i8> %3310, <16 x i8>* %3318, align 1, !tbaa !392
  %3319 = getelementptr inbounds i8, i8* %3313, i64 48
  %3320 = bitcast i8* %3319 to <16 x i8>*
  store <16 x i8> %3311, <16 x i8>* %3320, align 1, !tbaa !392
  %t35 = add i32 %t116, %1762
  %t70 = add nsw i32 %t35, %33
  %t71 = add nsw i32 %t35, %t106
  %3321 = sext i32 %t70 to i64
  %3322 = shl nsw i64 %3321, 6
  %3323 = getelementptr inbounds i8, i8* %bounded_input, i64 %3322
  %3324 = getelementptr inbounds i8, i8* %3323, i64 1
  %3325 = bitcast i8* %3324 to <16 x i8>*
  %3326 = load <16 x i8>, <16 x i8>* %3325, align 1, !tbaa !390
  %3327 = getelementptr inbounds i8, i8* %3323, i64 17
  %3328 = bitcast i8* %3327 to <16 x i8>*
  %3329 = load <16 x i8>, <16 x i8>* %3328, align 1, !tbaa !390
  %3330 = getelementptr inbounds i8, i8* %3323, i64 33
  %3331 = bitcast i8* %3330 to <16 x i8>*
  %3332 = load <16 x i8>, <16 x i8>* %3331, align 1, !tbaa !390
  %3333 = getelementptr inbounds i8, i8* %3323, i64 49
  %3334 = bitcast i8* %3333 to <16 x i8>*
  %3335 = load <16 x i8>, <16 x i8>* %3334, align 1, !tbaa !390
  %3336 = sext i32 %t35 to i64
  %3337 = shl nsw i64 %3336, 6
  %3338 = getelementptr inbounds i8, i8* %bounded_input, i64 %3337
  %3339 = getelementptr inbounds i8, i8* %3338, i64 1
  %3340 = bitcast i8* %3339 to <16 x i8>*
  %3341 = load <16 x i8>, <16 x i8>* %3340, align 1, !tbaa !390
  %3342 = getelementptr inbounds i8, i8* %3338, i64 17
  %3343 = bitcast i8* %3342 to <16 x i8>*
  %3344 = load <16 x i8>, <16 x i8>* %3343, align 1, !tbaa !390
  %3345 = getelementptr inbounds i8, i8* %3338, i64 33
  %3346 = bitcast i8* %3345 to <16 x i8>*
  %3347 = load <16 x i8>, <16 x i8>* %3346, align 1, !tbaa !390
  %3348 = getelementptr inbounds i8, i8* %3338, i64 49
  %3349 = bitcast i8* %3348 to <16 x i8>*
  %3350 = load <16 x i8>, <16 x i8>* %3349, align 1, !tbaa !390
  %3351 = sext i32 %t71 to i64
  %3352 = shl nsw i64 %3351, 6
  %3353 = getelementptr inbounds i8, i8* %bounded_input, i64 %3352
  %3354 = getelementptr inbounds i8, i8* %3353, i64 1
  %3355 = bitcast i8* %3354 to <16 x i8>*
  %3356 = load <16 x i8>, <16 x i8>* %3355, align 1, !tbaa !390
  %3357 = getelementptr inbounds i8, i8* %3353, i64 17
  %3358 = bitcast i8* %3357 to <16 x i8>*
  %3359 = load <16 x i8>, <16 x i8>* %3358, align 1, !tbaa !390
  %3360 = getelementptr inbounds i8, i8* %3353, i64 33
  %3361 = bitcast i8* %3360 to <16 x i8>*
  %3362 = load <16 x i8>, <16 x i8>* %3361, align 1, !tbaa !390
  %3363 = getelementptr inbounds i8, i8* %3353, i64 49
  %3364 = bitcast i8* %3363 to <16 x i8>*
  %3365 = load <16 x i8>, <16 x i8>* %3364, align 1, !tbaa !390
  %3366 = getelementptr inbounds i8, i8* %3353, i64 2
  %3367 = bitcast i8* %3366 to <16 x i8>*
  %3368 = load <16 x i8>, <16 x i8>* %3367, align 2, !tbaa !390
  %3369 = getelementptr inbounds i8, i8* %3353, i64 18
  %3370 = bitcast i8* %3369 to <16 x i8>*
  %3371 = load <16 x i8>, <16 x i8>* %3370, align 2, !tbaa !390
  %3372 = getelementptr inbounds i8, i8* %3353, i64 34
  %3373 = bitcast i8* %3372 to <16 x i8>*
  %3374 = load <16 x i8>, <16 x i8>* %3373, align 2, !tbaa !390
  %3375 = getelementptr inbounds i8, i8* %3353, i64 50
  %3376 = bitcast i8* %3375 to <16 x i8>*
  %3377 = load <16 x i8>, <16 x i8>* %3376, align 2, !tbaa !390
  %3378 = getelementptr inbounds i8, i8* %3338, i64 2
  %3379 = bitcast i8* %3378 to <16 x i8>*
  %3380 = load <16 x i8>, <16 x i8>* %3379, align 2, !tbaa !390
  %3381 = getelementptr inbounds i8, i8* %3338, i64 18
  %3382 = bitcast i8* %3381 to <16 x i8>*
  %3383 = load <16 x i8>, <16 x i8>* %3382, align 2, !tbaa !390
  %3384 = getelementptr inbounds i8, i8* %3338, i64 34
  %3385 = bitcast i8* %3384 to <16 x i8>*
  %3386 = load <16 x i8>, <16 x i8>* %3385, align 2, !tbaa !390
  %3387 = getelementptr inbounds i8, i8* %3338, i64 50
  %3388 = bitcast i8* %3387 to <16 x i8>*
  %3389 = load <16 x i8>, <16 x i8>* %3388, align 2, !tbaa !390
  %3390 = getelementptr inbounds i8, i8* %3323, i64 2
  %3391 = bitcast i8* %3390 to <16 x i8>*
  %3392 = load <16 x i8>, <16 x i8>* %3391, align 2, !tbaa !390
  %3393 = getelementptr inbounds i8, i8* %3323, i64 18
  %3394 = bitcast i8* %3393 to <16 x i8>*
  %3395 = load <16 x i8>, <16 x i8>* %3394, align 2, !tbaa !390
  %3396 = getelementptr inbounds i8, i8* %3323, i64 34
  %3397 = bitcast i8* %3396 to <16 x i8>*
  %3398 = load <16 x i8>, <16 x i8>* %3397, align 2, !tbaa !390
  %3399 = getelementptr inbounds i8, i8* %3323, i64 50
  %3400 = bitcast i8* %3399 to <16 x i8>*
  %3401 = load <16 x i8>, <16 x i8>* %3400, align 2, !tbaa !390
  %3402 = bitcast i8* %3353 to <16 x i8>*
  %3403 = load <16 x i8>, <16 x i8>* %3402, align 16, !tbaa !390
  %3404 = getelementptr inbounds i8, i8* %3353, i64 16
  %3405 = bitcast i8* %3404 to <16 x i8>*
  %3406 = load <16 x i8>, <16 x i8>* %3405, align 16, !tbaa !390
  %3407 = getelementptr inbounds i8, i8* %3353, i64 32
  %3408 = bitcast i8* %3407 to <16 x i8>*
  %3409 = load <16 x i8>, <16 x i8>* %3408, align 16, !tbaa !390
  %3410 = getelementptr inbounds i8, i8* %3353, i64 48
  %3411 = bitcast i8* %3410 to <16 x i8>*
  %3412 = load <16 x i8>, <16 x i8>* %3411, align 16, !tbaa !390
  %3413 = bitcast i8* %3338 to <16 x i8>*
  %3414 = load <16 x i8>, <16 x i8>* %3413, align 16, !tbaa !390
  %3415 = getelementptr inbounds i8, i8* %3338, i64 16
  %3416 = bitcast i8* %3415 to <16 x i8>*
  %3417 = load <16 x i8>, <16 x i8>* %3416, align 16, !tbaa !390
  %3418 = getelementptr inbounds i8, i8* %3338, i64 32
  %3419 = bitcast i8* %3418 to <16 x i8>*
  %3420 = load <16 x i8>, <16 x i8>* %3419, align 16, !tbaa !390
  %3421 = getelementptr inbounds i8, i8* %3338, i64 48
  %3422 = bitcast i8* %3421 to <16 x i8>*
  %3423 = load <16 x i8>, <16 x i8>* %3422, align 16, !tbaa !390
  %3424 = bitcast i8* %3323 to <16 x i8>*
  %3425 = load <16 x i8>, <16 x i8>* %3424, align 16, !tbaa !390
  %3426 = getelementptr inbounds i8, i8* %3323, i64 16
  %3427 = bitcast i8* %3426 to <16 x i8>*
  %3428 = load <16 x i8>, <16 x i8>* %3427, align 16, !tbaa !390
  %3429 = getelementptr inbounds i8, i8* %3323, i64 32
  %3430 = bitcast i8* %3429 to <16 x i8>*
  %3431 = load <16 x i8>, <16 x i8>* %3430, align 16, !tbaa !390
  %3432 = getelementptr inbounds i8, i8* %3323, i64 48
  %3433 = bitcast i8* %3432 to <16 x i8>*
  %3434 = load <16 x i8>, <16 x i8>* %3433, align 16, !tbaa !390
  %3435 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3414, <16 x i8> %3425)
  %3436 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3417, <16 x i8> %3428)
  %3437 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3420, <16 x i8> %3431)
  %3438 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3423, <16 x i8> %3434)
  %3439 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3403, <16 x i8> %3435)
  %3440 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3406, <16 x i8> %3436)
  %3441 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3409, <16 x i8> %3437)
  %3442 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3412, <16 x i8> %3438)
  %3443 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3392, <16 x i8> %3439)
  %3444 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3395, <16 x i8> %3440)
  %3445 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3398, <16 x i8> %3441)
  %3446 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3401, <16 x i8> %3442)
  %3447 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3380, <16 x i8> %3443)
  %3448 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3383, <16 x i8> %3444)
  %3449 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3386, <16 x i8> %3445)
  %3450 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3389, <16 x i8> %3446)
  %3451 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3368, <16 x i8> %3447)
  %3452 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3371, <16 x i8> %3448)
  %3453 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3374, <16 x i8> %3449)
  %3454 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3377, <16 x i8> %3450)
  %3455 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3356, <16 x i8> %3451)
  %3456 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3359, <16 x i8> %3452)
  %3457 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3362, <16 x i8> %3453)
  %3458 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3365, <16 x i8> %3454)
  %3459 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3341, <16 x i8> %3455)
  %3460 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3344, <16 x i8> %3456)
  %3461 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3347, <16 x i8> %3457)
  %3462 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3350, <16 x i8> %3458)
  %3463 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3326, <16 x i8> %3459)
  %3464 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3329, <16 x i8> %3460)
  %3465 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3332, <16 x i8> %3461)
  %3466 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3335, <16 x i8> %3462)
  %3467 = add nsw i64 %2225, %1758
  %3468 = getelementptr inbounds i8, i8* %5, i64 %3467
  %3469 = bitcast i8* %3468 to <16 x i8>*
  store <16 x i8> %3463, <16 x i8>* %3469, align 1, !tbaa !392
  %3470 = getelementptr inbounds i8, i8* %3468, i64 16
  %3471 = bitcast i8* %3470 to <16 x i8>*
  store <16 x i8> %3464, <16 x i8>* %3471, align 1, !tbaa !392
  %3472 = getelementptr inbounds i8, i8* %3468, i64 32
  %3473 = bitcast i8* %3472 to <16 x i8>*
  store <16 x i8> %3465, <16 x i8>* %3473, align 1, !tbaa !392
  %3474 = getelementptr inbounds i8, i8* %3468, i64 48
  %3475 = bitcast i8* %3474 to <16 x i8>*
  store <16 x i8> %3466, <16 x i8>* %3475, align 1, !tbaa !392
  %t35.1 = add i32 %t116, %1921
  %t70.1 = add nsw i32 %t35.1, %33
  %t71.1 = add nsw i32 %t35.1, %t106
  %3476 = sext i32 %t70.1 to i64
  %3477 = shl nsw i64 %3476, 6
  %3478 = getelementptr inbounds i8, i8* %bounded_input, i64 %3477
  %3479 = getelementptr inbounds i8, i8* %3478, i64 1
  %3480 = bitcast i8* %3479 to <16 x i8>*
  %3481 = load <16 x i8>, <16 x i8>* %3480, align 1, !tbaa !390
  %3482 = getelementptr inbounds i8, i8* %3478, i64 17
  %3483 = bitcast i8* %3482 to <16 x i8>*
  %3484 = load <16 x i8>, <16 x i8>* %3483, align 1, !tbaa !390
  %3485 = getelementptr inbounds i8, i8* %3478, i64 33
  %3486 = bitcast i8* %3485 to <16 x i8>*
  %3487 = load <16 x i8>, <16 x i8>* %3486, align 1, !tbaa !390
  %3488 = getelementptr inbounds i8, i8* %3478, i64 49
  %3489 = bitcast i8* %3488 to <16 x i8>*
  %3490 = load <16 x i8>, <16 x i8>* %3489, align 1, !tbaa !390
  %3491 = sext i32 %t35.1 to i64
  %3492 = shl nsw i64 %3491, 6
  %3493 = getelementptr inbounds i8, i8* %bounded_input, i64 %3492
  %3494 = getelementptr inbounds i8, i8* %3493, i64 1
  %3495 = bitcast i8* %3494 to <16 x i8>*
  %3496 = load <16 x i8>, <16 x i8>* %3495, align 1, !tbaa !390
  %3497 = getelementptr inbounds i8, i8* %3493, i64 17
  %3498 = bitcast i8* %3497 to <16 x i8>*
  %3499 = load <16 x i8>, <16 x i8>* %3498, align 1, !tbaa !390
  %3500 = getelementptr inbounds i8, i8* %3493, i64 33
  %3501 = bitcast i8* %3500 to <16 x i8>*
  %3502 = load <16 x i8>, <16 x i8>* %3501, align 1, !tbaa !390
  %3503 = getelementptr inbounds i8, i8* %3493, i64 49
  %3504 = bitcast i8* %3503 to <16 x i8>*
  %3505 = load <16 x i8>, <16 x i8>* %3504, align 1, !tbaa !390
  %3506 = sext i32 %t71.1 to i64
  %3507 = shl nsw i64 %3506, 6
  %3508 = getelementptr inbounds i8, i8* %bounded_input, i64 %3507
  %3509 = getelementptr inbounds i8, i8* %3508, i64 1
  %3510 = bitcast i8* %3509 to <16 x i8>*
  %3511 = load <16 x i8>, <16 x i8>* %3510, align 1, !tbaa !390
  %3512 = getelementptr inbounds i8, i8* %3508, i64 17
  %3513 = bitcast i8* %3512 to <16 x i8>*
  %3514 = load <16 x i8>, <16 x i8>* %3513, align 1, !tbaa !390
  %3515 = getelementptr inbounds i8, i8* %3508, i64 33
  %3516 = bitcast i8* %3515 to <16 x i8>*
  %3517 = load <16 x i8>, <16 x i8>* %3516, align 1, !tbaa !390
  %3518 = getelementptr inbounds i8, i8* %3508, i64 49
  %3519 = bitcast i8* %3518 to <16 x i8>*
  %3520 = load <16 x i8>, <16 x i8>* %3519, align 1, !tbaa !390
  %3521 = getelementptr inbounds i8, i8* %3508, i64 2
  %3522 = bitcast i8* %3521 to <16 x i8>*
  %3523 = load <16 x i8>, <16 x i8>* %3522, align 2, !tbaa !390
  %3524 = getelementptr inbounds i8, i8* %3508, i64 18
  %3525 = bitcast i8* %3524 to <16 x i8>*
  %3526 = load <16 x i8>, <16 x i8>* %3525, align 2, !tbaa !390
  %3527 = getelementptr inbounds i8, i8* %3508, i64 34
  %3528 = bitcast i8* %3527 to <16 x i8>*
  %3529 = load <16 x i8>, <16 x i8>* %3528, align 2, !tbaa !390
  %3530 = getelementptr inbounds i8, i8* %3508, i64 50
  %3531 = bitcast i8* %3530 to <16 x i8>*
  %3532 = load <16 x i8>, <16 x i8>* %3531, align 2, !tbaa !390
  %3533 = getelementptr inbounds i8, i8* %3493, i64 2
  %3534 = bitcast i8* %3533 to <16 x i8>*
  %3535 = load <16 x i8>, <16 x i8>* %3534, align 2, !tbaa !390
  %3536 = getelementptr inbounds i8, i8* %3493, i64 18
  %3537 = bitcast i8* %3536 to <16 x i8>*
  %3538 = load <16 x i8>, <16 x i8>* %3537, align 2, !tbaa !390
  %3539 = getelementptr inbounds i8, i8* %3493, i64 34
  %3540 = bitcast i8* %3539 to <16 x i8>*
  %3541 = load <16 x i8>, <16 x i8>* %3540, align 2, !tbaa !390
  %3542 = getelementptr inbounds i8, i8* %3493, i64 50
  %3543 = bitcast i8* %3542 to <16 x i8>*
  %3544 = load <16 x i8>, <16 x i8>* %3543, align 2, !tbaa !390
  %3545 = getelementptr inbounds i8, i8* %3478, i64 2
  %3546 = bitcast i8* %3545 to <16 x i8>*
  %3547 = load <16 x i8>, <16 x i8>* %3546, align 2, !tbaa !390
  %3548 = getelementptr inbounds i8, i8* %3478, i64 18
  %3549 = bitcast i8* %3548 to <16 x i8>*
  %3550 = load <16 x i8>, <16 x i8>* %3549, align 2, !tbaa !390
  %3551 = getelementptr inbounds i8, i8* %3478, i64 34
  %3552 = bitcast i8* %3551 to <16 x i8>*
  %3553 = load <16 x i8>, <16 x i8>* %3552, align 2, !tbaa !390
  %3554 = getelementptr inbounds i8, i8* %3478, i64 50
  %3555 = bitcast i8* %3554 to <16 x i8>*
  %3556 = load <16 x i8>, <16 x i8>* %3555, align 2, !tbaa !390
  %3557 = bitcast i8* %3508 to <16 x i8>*
  %3558 = load <16 x i8>, <16 x i8>* %3557, align 16, !tbaa !390
  %3559 = getelementptr inbounds i8, i8* %3508, i64 16
  %3560 = bitcast i8* %3559 to <16 x i8>*
  %3561 = load <16 x i8>, <16 x i8>* %3560, align 16, !tbaa !390
  %3562 = getelementptr inbounds i8, i8* %3508, i64 32
  %3563 = bitcast i8* %3562 to <16 x i8>*
  %3564 = load <16 x i8>, <16 x i8>* %3563, align 16, !tbaa !390
  %3565 = getelementptr inbounds i8, i8* %3508, i64 48
  %3566 = bitcast i8* %3565 to <16 x i8>*
  %3567 = load <16 x i8>, <16 x i8>* %3566, align 16, !tbaa !390
  %3568 = bitcast i8* %3493 to <16 x i8>*
  %3569 = load <16 x i8>, <16 x i8>* %3568, align 16, !tbaa !390
  %3570 = getelementptr inbounds i8, i8* %3493, i64 16
  %3571 = bitcast i8* %3570 to <16 x i8>*
  %3572 = load <16 x i8>, <16 x i8>* %3571, align 16, !tbaa !390
  %3573 = getelementptr inbounds i8, i8* %3493, i64 32
  %3574 = bitcast i8* %3573 to <16 x i8>*
  %3575 = load <16 x i8>, <16 x i8>* %3574, align 16, !tbaa !390
  %3576 = getelementptr inbounds i8, i8* %3493, i64 48
  %3577 = bitcast i8* %3576 to <16 x i8>*
  %3578 = load <16 x i8>, <16 x i8>* %3577, align 16, !tbaa !390
  %3579 = bitcast i8* %3478 to <16 x i8>*
  %3580 = load <16 x i8>, <16 x i8>* %3579, align 16, !tbaa !390
  %3581 = getelementptr inbounds i8, i8* %3478, i64 16
  %3582 = bitcast i8* %3581 to <16 x i8>*
  %3583 = load <16 x i8>, <16 x i8>* %3582, align 16, !tbaa !390
  %3584 = getelementptr inbounds i8, i8* %3478, i64 32
  %3585 = bitcast i8* %3584 to <16 x i8>*
  %3586 = load <16 x i8>, <16 x i8>* %3585, align 16, !tbaa !390
  %3587 = getelementptr inbounds i8, i8* %3478, i64 48
  %3588 = bitcast i8* %3587 to <16 x i8>*
  %3589 = load <16 x i8>, <16 x i8>* %3588, align 16, !tbaa !390
  %3590 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3569, <16 x i8> %3580)
  %3591 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3572, <16 x i8> %3583)
  %3592 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3575, <16 x i8> %3586)
  %3593 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3578, <16 x i8> %3589)
  %3594 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3558, <16 x i8> %3590)
  %3595 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3561, <16 x i8> %3591)
  %3596 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3564, <16 x i8> %3592)
  %3597 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3567, <16 x i8> %3593)
  %3598 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3547, <16 x i8> %3594)
  %3599 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3550, <16 x i8> %3595)
  %3600 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3553, <16 x i8> %3596)
  %3601 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3556, <16 x i8> %3597)
  %3602 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3535, <16 x i8> %3598)
  %3603 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3538, <16 x i8> %3599)
  %3604 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3541, <16 x i8> %3600)
  %3605 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3544, <16 x i8> %3601)
  %3606 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3523, <16 x i8> %3602)
  %3607 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3526, <16 x i8> %3603)
  %3608 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3529, <16 x i8> %3604)
  %3609 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3532, <16 x i8> %3605)
  %3610 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3511, <16 x i8> %3606)
  %3611 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3514, <16 x i8> %3607)
  %3612 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3517, <16 x i8> %3608)
  %3613 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3520, <16 x i8> %3609)
  %3614 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3496, <16 x i8> %3610)
  %3615 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3499, <16 x i8> %3611)
  %3616 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3502, <16 x i8> %3612)
  %3617 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3505, <16 x i8> %3613)
  %3618 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3481, <16 x i8> %3614)
  %3619 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3484, <16 x i8> %3615)
  %3620 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3487, <16 x i8> %3616)
  %3621 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3490, <16 x i8> %3617)
  %3622 = add nsw i64 %2381, %1758
  %3623 = getelementptr inbounds i8, i8* %5, i64 %3622
  %3624 = bitcast i8* %3623 to <16 x i8>*
  store <16 x i8> %3618, <16 x i8>* %3624, align 1, !tbaa !392
  %3625 = getelementptr inbounds i8, i8* %3623, i64 16
  %3626 = bitcast i8* %3625 to <16 x i8>*
  store <16 x i8> %3619, <16 x i8>* %3626, align 1, !tbaa !392
  %3627 = getelementptr inbounds i8, i8* %3623, i64 32
  %3628 = bitcast i8* %3627 to <16 x i8>*
  store <16 x i8> %3620, <16 x i8>* %3628, align 1, !tbaa !392
  %3629 = getelementptr inbounds i8, i8* %3623, i64 48
  %3630 = bitcast i8* %3629 to <16 x i8>*
  store <16 x i8> %3621, <16 x i8>* %3630, align 1, !tbaa !392
  %t39 = add i32 %t118, %1762
  %t72 = add nsw i32 %t39, %33
  %t73 = add nsw i32 %t39, %t106
  %3631 = sext i32 %t72 to i64
  %3632 = shl nsw i64 %3631, 6
  %3633 = getelementptr inbounds i8, i8* %bounded_input, i64 %3632
  %3634 = getelementptr inbounds i8, i8* %3633, i64 1
  %3635 = bitcast i8* %3634 to <16 x i8>*
  %3636 = load <16 x i8>, <16 x i8>* %3635, align 1, !tbaa !390
  %3637 = getelementptr inbounds i8, i8* %3633, i64 17
  %3638 = bitcast i8* %3637 to <16 x i8>*
  %3639 = load <16 x i8>, <16 x i8>* %3638, align 1, !tbaa !390
  %3640 = getelementptr inbounds i8, i8* %3633, i64 33
  %3641 = bitcast i8* %3640 to <16 x i8>*
  %3642 = load <16 x i8>, <16 x i8>* %3641, align 1, !tbaa !390
  %3643 = getelementptr inbounds i8, i8* %3633, i64 49
  %3644 = bitcast i8* %3643 to <16 x i8>*
  %3645 = load <16 x i8>, <16 x i8>* %3644, align 1, !tbaa !390
  %3646 = sext i32 %t39 to i64
  %3647 = shl nsw i64 %3646, 6
  %3648 = getelementptr inbounds i8, i8* %bounded_input, i64 %3647
  %3649 = getelementptr inbounds i8, i8* %3648, i64 1
  %3650 = bitcast i8* %3649 to <16 x i8>*
  %3651 = load <16 x i8>, <16 x i8>* %3650, align 1, !tbaa !390
  %3652 = getelementptr inbounds i8, i8* %3648, i64 17
  %3653 = bitcast i8* %3652 to <16 x i8>*
  %3654 = load <16 x i8>, <16 x i8>* %3653, align 1, !tbaa !390
  %3655 = getelementptr inbounds i8, i8* %3648, i64 33
  %3656 = bitcast i8* %3655 to <16 x i8>*
  %3657 = load <16 x i8>, <16 x i8>* %3656, align 1, !tbaa !390
  %3658 = getelementptr inbounds i8, i8* %3648, i64 49
  %3659 = bitcast i8* %3658 to <16 x i8>*
  %3660 = load <16 x i8>, <16 x i8>* %3659, align 1, !tbaa !390
  %3661 = sext i32 %t73 to i64
  %3662 = shl nsw i64 %3661, 6
  %3663 = getelementptr inbounds i8, i8* %bounded_input, i64 %3662
  %3664 = getelementptr inbounds i8, i8* %3663, i64 1
  %3665 = bitcast i8* %3664 to <16 x i8>*
  %3666 = load <16 x i8>, <16 x i8>* %3665, align 1, !tbaa !390
  %3667 = getelementptr inbounds i8, i8* %3663, i64 17
  %3668 = bitcast i8* %3667 to <16 x i8>*
  %3669 = load <16 x i8>, <16 x i8>* %3668, align 1, !tbaa !390
  %3670 = getelementptr inbounds i8, i8* %3663, i64 33
  %3671 = bitcast i8* %3670 to <16 x i8>*
  %3672 = load <16 x i8>, <16 x i8>* %3671, align 1, !tbaa !390
  %3673 = getelementptr inbounds i8, i8* %3663, i64 49
  %3674 = bitcast i8* %3673 to <16 x i8>*
  %3675 = load <16 x i8>, <16 x i8>* %3674, align 1, !tbaa !390
  %3676 = getelementptr inbounds i8, i8* %3663, i64 2
  %3677 = bitcast i8* %3676 to <16 x i8>*
  %3678 = load <16 x i8>, <16 x i8>* %3677, align 2, !tbaa !390
  %3679 = getelementptr inbounds i8, i8* %3663, i64 18
  %3680 = bitcast i8* %3679 to <16 x i8>*
  %3681 = load <16 x i8>, <16 x i8>* %3680, align 2, !tbaa !390
  %3682 = getelementptr inbounds i8, i8* %3663, i64 34
  %3683 = bitcast i8* %3682 to <16 x i8>*
  %3684 = load <16 x i8>, <16 x i8>* %3683, align 2, !tbaa !390
  %3685 = getelementptr inbounds i8, i8* %3663, i64 50
  %3686 = bitcast i8* %3685 to <16 x i8>*
  %3687 = load <16 x i8>, <16 x i8>* %3686, align 2, !tbaa !390
  %3688 = getelementptr inbounds i8, i8* %3648, i64 2
  %3689 = bitcast i8* %3688 to <16 x i8>*
  %3690 = load <16 x i8>, <16 x i8>* %3689, align 2, !tbaa !390
  %3691 = getelementptr inbounds i8, i8* %3648, i64 18
  %3692 = bitcast i8* %3691 to <16 x i8>*
  %3693 = load <16 x i8>, <16 x i8>* %3692, align 2, !tbaa !390
  %3694 = getelementptr inbounds i8, i8* %3648, i64 34
  %3695 = bitcast i8* %3694 to <16 x i8>*
  %3696 = load <16 x i8>, <16 x i8>* %3695, align 2, !tbaa !390
  %3697 = getelementptr inbounds i8, i8* %3648, i64 50
  %3698 = bitcast i8* %3697 to <16 x i8>*
  %3699 = load <16 x i8>, <16 x i8>* %3698, align 2, !tbaa !390
  %3700 = getelementptr inbounds i8, i8* %3633, i64 2
  %3701 = bitcast i8* %3700 to <16 x i8>*
  %3702 = load <16 x i8>, <16 x i8>* %3701, align 2, !tbaa !390
  %3703 = getelementptr inbounds i8, i8* %3633, i64 18
  %3704 = bitcast i8* %3703 to <16 x i8>*
  %3705 = load <16 x i8>, <16 x i8>* %3704, align 2, !tbaa !390
  %3706 = getelementptr inbounds i8, i8* %3633, i64 34
  %3707 = bitcast i8* %3706 to <16 x i8>*
  %3708 = load <16 x i8>, <16 x i8>* %3707, align 2, !tbaa !390
  %3709 = getelementptr inbounds i8, i8* %3633, i64 50
  %3710 = bitcast i8* %3709 to <16 x i8>*
  %3711 = load <16 x i8>, <16 x i8>* %3710, align 2, !tbaa !390
  %3712 = bitcast i8* %3663 to <16 x i8>*
  %3713 = load <16 x i8>, <16 x i8>* %3712, align 16, !tbaa !390
  %3714 = getelementptr inbounds i8, i8* %3663, i64 16
  %3715 = bitcast i8* %3714 to <16 x i8>*
  %3716 = load <16 x i8>, <16 x i8>* %3715, align 16, !tbaa !390
  %3717 = getelementptr inbounds i8, i8* %3663, i64 32
  %3718 = bitcast i8* %3717 to <16 x i8>*
  %3719 = load <16 x i8>, <16 x i8>* %3718, align 16, !tbaa !390
  %3720 = getelementptr inbounds i8, i8* %3663, i64 48
  %3721 = bitcast i8* %3720 to <16 x i8>*
  %3722 = load <16 x i8>, <16 x i8>* %3721, align 16, !tbaa !390
  %3723 = bitcast i8* %3648 to <16 x i8>*
  %3724 = load <16 x i8>, <16 x i8>* %3723, align 16, !tbaa !390
  %3725 = getelementptr inbounds i8, i8* %3648, i64 16
  %3726 = bitcast i8* %3725 to <16 x i8>*
  %3727 = load <16 x i8>, <16 x i8>* %3726, align 16, !tbaa !390
  %3728 = getelementptr inbounds i8, i8* %3648, i64 32
  %3729 = bitcast i8* %3728 to <16 x i8>*
  %3730 = load <16 x i8>, <16 x i8>* %3729, align 16, !tbaa !390
  %3731 = getelementptr inbounds i8, i8* %3648, i64 48
  %3732 = bitcast i8* %3731 to <16 x i8>*
  %3733 = load <16 x i8>, <16 x i8>* %3732, align 16, !tbaa !390
  %3734 = bitcast i8* %3633 to <16 x i8>*
  %3735 = load <16 x i8>, <16 x i8>* %3734, align 16, !tbaa !390
  %3736 = getelementptr inbounds i8, i8* %3633, i64 16
  %3737 = bitcast i8* %3736 to <16 x i8>*
  %3738 = load <16 x i8>, <16 x i8>* %3737, align 16, !tbaa !390
  %3739 = getelementptr inbounds i8, i8* %3633, i64 32
  %3740 = bitcast i8* %3739 to <16 x i8>*
  %3741 = load <16 x i8>, <16 x i8>* %3740, align 16, !tbaa !390
  %3742 = getelementptr inbounds i8, i8* %3633, i64 48
  %3743 = bitcast i8* %3742 to <16 x i8>*
  %3744 = load <16 x i8>, <16 x i8>* %3743, align 16, !tbaa !390
  %3745 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3724, <16 x i8> %3735)
  %3746 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3727, <16 x i8> %3738)
  %3747 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3730, <16 x i8> %3741)
  %3748 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3733, <16 x i8> %3744)
  %3749 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3713, <16 x i8> %3745)
  %3750 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3716, <16 x i8> %3746)
  %3751 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3719, <16 x i8> %3747)
  %3752 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3722, <16 x i8> %3748)
  %3753 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3702, <16 x i8> %3749)
  %3754 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3705, <16 x i8> %3750)
  %3755 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3708, <16 x i8> %3751)
  %3756 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3711, <16 x i8> %3752)
  %3757 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3690, <16 x i8> %3753)
  %3758 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3693, <16 x i8> %3754)
  %3759 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3696, <16 x i8> %3755)
  %3760 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3699, <16 x i8> %3756)
  %3761 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3678, <16 x i8> %3757)
  %3762 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3681, <16 x i8> %3758)
  %3763 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3684, <16 x i8> %3759)
  %3764 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3687, <16 x i8> %3760)
  %3765 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3666, <16 x i8> %3761)
  %3766 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3669, <16 x i8> %3762)
  %3767 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3672, <16 x i8> %3763)
  %3768 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3675, <16 x i8> %3764)
  %3769 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3651, <16 x i8> %3765)
  %3770 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3654, <16 x i8> %3766)
  %3771 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3657, <16 x i8> %3767)
  %3772 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3660, <16 x i8> %3768)
  %3773 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3636, <16 x i8> %3769)
  %3774 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3639, <16 x i8> %3770)
  %3775 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3642, <16 x i8> %3771)
  %3776 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3645, <16 x i8> %3772)
  %3777 = add nsw i64 %2225, %1759
  %3778 = getelementptr inbounds i8, i8* %5, i64 %3777
  %3779 = bitcast i8* %3778 to <16 x i8>*
  store <16 x i8> %3773, <16 x i8>* %3779, align 1, !tbaa !392
  %3780 = getelementptr inbounds i8, i8* %3778, i64 16
  %3781 = bitcast i8* %3780 to <16 x i8>*
  store <16 x i8> %3774, <16 x i8>* %3781, align 1, !tbaa !392
  %3782 = getelementptr inbounds i8, i8* %3778, i64 32
  %3783 = bitcast i8* %3782 to <16 x i8>*
  store <16 x i8> %3775, <16 x i8>* %3783, align 1, !tbaa !392
  %3784 = getelementptr inbounds i8, i8* %3778, i64 48
  %3785 = bitcast i8* %3784 to <16 x i8>*
  store <16 x i8> %3776, <16 x i8>* %3785, align 1, !tbaa !392
  %t39.1 = add i32 %t118, %1921
  %t72.1 = add nsw i32 %t39.1, %33
  %t73.1 = add nsw i32 %t39.1, %t106
  %3786 = sext i32 %t72.1 to i64
  %3787 = shl nsw i64 %3786, 6
  %3788 = getelementptr inbounds i8, i8* %bounded_input, i64 %3787
  %3789 = getelementptr inbounds i8, i8* %3788, i64 1
  %3790 = bitcast i8* %3789 to <16 x i8>*
  %3791 = load <16 x i8>, <16 x i8>* %3790, align 1, !tbaa !390
  %3792 = getelementptr inbounds i8, i8* %3788, i64 17
  %3793 = bitcast i8* %3792 to <16 x i8>*
  %3794 = load <16 x i8>, <16 x i8>* %3793, align 1, !tbaa !390
  %3795 = getelementptr inbounds i8, i8* %3788, i64 33
  %3796 = bitcast i8* %3795 to <16 x i8>*
  %3797 = load <16 x i8>, <16 x i8>* %3796, align 1, !tbaa !390
  %3798 = getelementptr inbounds i8, i8* %3788, i64 49
  %3799 = bitcast i8* %3798 to <16 x i8>*
  %3800 = load <16 x i8>, <16 x i8>* %3799, align 1, !tbaa !390
  %3801 = sext i32 %t39.1 to i64
  %3802 = shl nsw i64 %3801, 6
  %3803 = getelementptr inbounds i8, i8* %bounded_input, i64 %3802
  %3804 = getelementptr inbounds i8, i8* %3803, i64 1
  %3805 = bitcast i8* %3804 to <16 x i8>*
  %3806 = load <16 x i8>, <16 x i8>* %3805, align 1, !tbaa !390
  %3807 = getelementptr inbounds i8, i8* %3803, i64 17
  %3808 = bitcast i8* %3807 to <16 x i8>*
  %3809 = load <16 x i8>, <16 x i8>* %3808, align 1, !tbaa !390
  %3810 = getelementptr inbounds i8, i8* %3803, i64 33
  %3811 = bitcast i8* %3810 to <16 x i8>*
  %3812 = load <16 x i8>, <16 x i8>* %3811, align 1, !tbaa !390
  %3813 = getelementptr inbounds i8, i8* %3803, i64 49
  %3814 = bitcast i8* %3813 to <16 x i8>*
  %3815 = load <16 x i8>, <16 x i8>* %3814, align 1, !tbaa !390
  %3816 = sext i32 %t73.1 to i64
  %3817 = shl nsw i64 %3816, 6
  %3818 = getelementptr inbounds i8, i8* %bounded_input, i64 %3817
  %3819 = getelementptr inbounds i8, i8* %3818, i64 1
  %3820 = bitcast i8* %3819 to <16 x i8>*
  %3821 = load <16 x i8>, <16 x i8>* %3820, align 1, !tbaa !390
  %3822 = getelementptr inbounds i8, i8* %3818, i64 17
  %3823 = bitcast i8* %3822 to <16 x i8>*
  %3824 = load <16 x i8>, <16 x i8>* %3823, align 1, !tbaa !390
  %3825 = getelementptr inbounds i8, i8* %3818, i64 33
  %3826 = bitcast i8* %3825 to <16 x i8>*
  %3827 = load <16 x i8>, <16 x i8>* %3826, align 1, !tbaa !390
  %3828 = getelementptr inbounds i8, i8* %3818, i64 49
  %3829 = bitcast i8* %3828 to <16 x i8>*
  %3830 = load <16 x i8>, <16 x i8>* %3829, align 1, !tbaa !390
  %3831 = getelementptr inbounds i8, i8* %3818, i64 2
  %3832 = bitcast i8* %3831 to <16 x i8>*
  %3833 = load <16 x i8>, <16 x i8>* %3832, align 2, !tbaa !390
  %3834 = getelementptr inbounds i8, i8* %3818, i64 18
  %3835 = bitcast i8* %3834 to <16 x i8>*
  %3836 = load <16 x i8>, <16 x i8>* %3835, align 2, !tbaa !390
  %3837 = getelementptr inbounds i8, i8* %3818, i64 34
  %3838 = bitcast i8* %3837 to <16 x i8>*
  %3839 = load <16 x i8>, <16 x i8>* %3838, align 2, !tbaa !390
  %3840 = getelementptr inbounds i8, i8* %3818, i64 50
  %3841 = bitcast i8* %3840 to <16 x i8>*
  %3842 = load <16 x i8>, <16 x i8>* %3841, align 2, !tbaa !390
  %3843 = getelementptr inbounds i8, i8* %3803, i64 2
  %3844 = bitcast i8* %3843 to <16 x i8>*
  %3845 = load <16 x i8>, <16 x i8>* %3844, align 2, !tbaa !390
  %3846 = getelementptr inbounds i8, i8* %3803, i64 18
  %3847 = bitcast i8* %3846 to <16 x i8>*
  %3848 = load <16 x i8>, <16 x i8>* %3847, align 2, !tbaa !390
  %3849 = getelementptr inbounds i8, i8* %3803, i64 34
  %3850 = bitcast i8* %3849 to <16 x i8>*
  %3851 = load <16 x i8>, <16 x i8>* %3850, align 2, !tbaa !390
  %3852 = getelementptr inbounds i8, i8* %3803, i64 50
  %3853 = bitcast i8* %3852 to <16 x i8>*
  %3854 = load <16 x i8>, <16 x i8>* %3853, align 2, !tbaa !390
  %3855 = getelementptr inbounds i8, i8* %3788, i64 2
  %3856 = bitcast i8* %3855 to <16 x i8>*
  %3857 = load <16 x i8>, <16 x i8>* %3856, align 2, !tbaa !390
  %3858 = getelementptr inbounds i8, i8* %3788, i64 18
  %3859 = bitcast i8* %3858 to <16 x i8>*
  %3860 = load <16 x i8>, <16 x i8>* %3859, align 2, !tbaa !390
  %3861 = getelementptr inbounds i8, i8* %3788, i64 34
  %3862 = bitcast i8* %3861 to <16 x i8>*
  %3863 = load <16 x i8>, <16 x i8>* %3862, align 2, !tbaa !390
  %3864 = getelementptr inbounds i8, i8* %3788, i64 50
  %3865 = bitcast i8* %3864 to <16 x i8>*
  %3866 = load <16 x i8>, <16 x i8>* %3865, align 2, !tbaa !390
  %3867 = bitcast i8* %3818 to <16 x i8>*
  %3868 = load <16 x i8>, <16 x i8>* %3867, align 16, !tbaa !390
  %3869 = getelementptr inbounds i8, i8* %3818, i64 16
  %3870 = bitcast i8* %3869 to <16 x i8>*
  %3871 = load <16 x i8>, <16 x i8>* %3870, align 16, !tbaa !390
  %3872 = getelementptr inbounds i8, i8* %3818, i64 32
  %3873 = bitcast i8* %3872 to <16 x i8>*
  %3874 = load <16 x i8>, <16 x i8>* %3873, align 16, !tbaa !390
  %3875 = getelementptr inbounds i8, i8* %3818, i64 48
  %3876 = bitcast i8* %3875 to <16 x i8>*
  %3877 = load <16 x i8>, <16 x i8>* %3876, align 16, !tbaa !390
  %3878 = bitcast i8* %3803 to <16 x i8>*
  %3879 = load <16 x i8>, <16 x i8>* %3878, align 16, !tbaa !390
  %3880 = getelementptr inbounds i8, i8* %3803, i64 16
  %3881 = bitcast i8* %3880 to <16 x i8>*
  %3882 = load <16 x i8>, <16 x i8>* %3881, align 16, !tbaa !390
  %3883 = getelementptr inbounds i8, i8* %3803, i64 32
  %3884 = bitcast i8* %3883 to <16 x i8>*
  %3885 = load <16 x i8>, <16 x i8>* %3884, align 16, !tbaa !390
  %3886 = getelementptr inbounds i8, i8* %3803, i64 48
  %3887 = bitcast i8* %3886 to <16 x i8>*
  %3888 = load <16 x i8>, <16 x i8>* %3887, align 16, !tbaa !390
  %3889 = bitcast i8* %3788 to <16 x i8>*
  %3890 = load <16 x i8>, <16 x i8>* %3889, align 16, !tbaa !390
  %3891 = getelementptr inbounds i8, i8* %3788, i64 16
  %3892 = bitcast i8* %3891 to <16 x i8>*
  %3893 = load <16 x i8>, <16 x i8>* %3892, align 16, !tbaa !390
  %3894 = getelementptr inbounds i8, i8* %3788, i64 32
  %3895 = bitcast i8* %3894 to <16 x i8>*
  %3896 = load <16 x i8>, <16 x i8>* %3895, align 16, !tbaa !390
  %3897 = getelementptr inbounds i8, i8* %3788, i64 48
  %3898 = bitcast i8* %3897 to <16 x i8>*
  %3899 = load <16 x i8>, <16 x i8>* %3898, align 16, !tbaa !390
  %3900 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3879, <16 x i8> %3890)
  %3901 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3882, <16 x i8> %3893)
  %3902 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3885, <16 x i8> %3896)
  %3903 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3888, <16 x i8> %3899)
  %3904 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3868, <16 x i8> %3900)
  %3905 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3871, <16 x i8> %3901)
  %3906 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3874, <16 x i8> %3902)
  %3907 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3877, <16 x i8> %3903)
  %3908 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3857, <16 x i8> %3904)
  %3909 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3860, <16 x i8> %3905)
  %3910 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3863, <16 x i8> %3906)
  %3911 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3866, <16 x i8> %3907)
  %3912 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3845, <16 x i8> %3908)
  %3913 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3848, <16 x i8> %3909)
  %3914 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3851, <16 x i8> %3910)
  %3915 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3854, <16 x i8> %3911)
  %3916 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3833, <16 x i8> %3912)
  %3917 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3836, <16 x i8> %3913)
  %3918 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3839, <16 x i8> %3914)
  %3919 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3842, <16 x i8> %3915)
  %3920 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3821, <16 x i8> %3916)
  %3921 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3824, <16 x i8> %3917)
  %3922 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3827, <16 x i8> %3918)
  %3923 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3830, <16 x i8> %3919)
  %3924 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3806, <16 x i8> %3920)
  %3925 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3809, <16 x i8> %3921)
  %3926 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3812, <16 x i8> %3922)
  %3927 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3815, <16 x i8> %3923)
  %3928 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3791, <16 x i8> %3924)
  %3929 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3794, <16 x i8> %3925)
  %3930 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3797, <16 x i8> %3926)
  %3931 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3800, <16 x i8> %3927)
  %3932 = add nsw i64 %2381, %1759
  %3933 = getelementptr inbounds i8, i8* %5, i64 %3932
  %3934 = bitcast i8* %3933 to <16 x i8>*
  store <16 x i8> %3928, <16 x i8>* %3934, align 1, !tbaa !392
  %3935 = getelementptr inbounds i8, i8* %3933, i64 16
  %3936 = bitcast i8* %3935 to <16 x i8>*
  store <16 x i8> %3929, <16 x i8>* %3936, align 1, !tbaa !392
  %3937 = getelementptr inbounds i8, i8* %3933, i64 32
  %3938 = bitcast i8* %3937 to <16 x i8>*
  store <16 x i8> %3930, <16 x i8>* %3938, align 1, !tbaa !392
  %3939 = getelementptr inbounds i8, i8* %3933, i64 48
  %3940 = bitcast i8* %3939 to <16 x i8>*
  store <16 x i8> %3931, <16 x i8>* %3940, align 1, !tbaa !392
  %t43 = add i32 %t120, %1762
  %t74 = add nsw i32 %t43, %33
  %t75 = add nsw i32 %t43, %t106
  %3941 = sext i32 %t74 to i64
  %3942 = shl nsw i64 %3941, 6
  %3943 = getelementptr inbounds i8, i8* %bounded_input, i64 %3942
  %3944 = getelementptr inbounds i8, i8* %3943, i64 1
  %3945 = bitcast i8* %3944 to <16 x i8>*
  %3946 = load <16 x i8>, <16 x i8>* %3945, align 1, !tbaa !390
  %3947 = getelementptr inbounds i8, i8* %3943, i64 17
  %3948 = bitcast i8* %3947 to <16 x i8>*
  %3949 = load <16 x i8>, <16 x i8>* %3948, align 1, !tbaa !390
  %3950 = getelementptr inbounds i8, i8* %3943, i64 33
  %3951 = bitcast i8* %3950 to <16 x i8>*
  %3952 = load <16 x i8>, <16 x i8>* %3951, align 1, !tbaa !390
  %3953 = getelementptr inbounds i8, i8* %3943, i64 49
  %3954 = bitcast i8* %3953 to <16 x i8>*
  %3955 = load <16 x i8>, <16 x i8>* %3954, align 1, !tbaa !390
  %3956 = sext i32 %t43 to i64
  %3957 = shl nsw i64 %3956, 6
  %3958 = getelementptr inbounds i8, i8* %bounded_input, i64 %3957
  %3959 = getelementptr inbounds i8, i8* %3958, i64 1
  %3960 = bitcast i8* %3959 to <16 x i8>*
  %3961 = load <16 x i8>, <16 x i8>* %3960, align 1, !tbaa !390
  %3962 = getelementptr inbounds i8, i8* %3958, i64 17
  %3963 = bitcast i8* %3962 to <16 x i8>*
  %3964 = load <16 x i8>, <16 x i8>* %3963, align 1, !tbaa !390
  %3965 = getelementptr inbounds i8, i8* %3958, i64 33
  %3966 = bitcast i8* %3965 to <16 x i8>*
  %3967 = load <16 x i8>, <16 x i8>* %3966, align 1, !tbaa !390
  %3968 = getelementptr inbounds i8, i8* %3958, i64 49
  %3969 = bitcast i8* %3968 to <16 x i8>*
  %3970 = load <16 x i8>, <16 x i8>* %3969, align 1, !tbaa !390
  %3971 = sext i32 %t75 to i64
  %3972 = shl nsw i64 %3971, 6
  %3973 = getelementptr inbounds i8, i8* %bounded_input, i64 %3972
  %3974 = getelementptr inbounds i8, i8* %3973, i64 1
  %3975 = bitcast i8* %3974 to <16 x i8>*
  %3976 = load <16 x i8>, <16 x i8>* %3975, align 1, !tbaa !390
  %3977 = getelementptr inbounds i8, i8* %3973, i64 17
  %3978 = bitcast i8* %3977 to <16 x i8>*
  %3979 = load <16 x i8>, <16 x i8>* %3978, align 1, !tbaa !390
  %3980 = getelementptr inbounds i8, i8* %3973, i64 33
  %3981 = bitcast i8* %3980 to <16 x i8>*
  %3982 = load <16 x i8>, <16 x i8>* %3981, align 1, !tbaa !390
  %3983 = getelementptr inbounds i8, i8* %3973, i64 49
  %3984 = bitcast i8* %3983 to <16 x i8>*
  %3985 = load <16 x i8>, <16 x i8>* %3984, align 1, !tbaa !390
  %3986 = getelementptr inbounds i8, i8* %3973, i64 2
  %3987 = bitcast i8* %3986 to <16 x i8>*
  %3988 = load <16 x i8>, <16 x i8>* %3987, align 2, !tbaa !390
  %3989 = getelementptr inbounds i8, i8* %3973, i64 18
  %3990 = bitcast i8* %3989 to <16 x i8>*
  %3991 = load <16 x i8>, <16 x i8>* %3990, align 2, !tbaa !390
  %3992 = getelementptr inbounds i8, i8* %3973, i64 34
  %3993 = bitcast i8* %3992 to <16 x i8>*
  %3994 = load <16 x i8>, <16 x i8>* %3993, align 2, !tbaa !390
  %3995 = getelementptr inbounds i8, i8* %3973, i64 50
  %3996 = bitcast i8* %3995 to <16 x i8>*
  %3997 = load <16 x i8>, <16 x i8>* %3996, align 2, !tbaa !390
  %3998 = getelementptr inbounds i8, i8* %3958, i64 2
  %3999 = bitcast i8* %3998 to <16 x i8>*
  %4000 = load <16 x i8>, <16 x i8>* %3999, align 2, !tbaa !390
  %4001 = getelementptr inbounds i8, i8* %3958, i64 18
  %4002 = bitcast i8* %4001 to <16 x i8>*
  %4003 = load <16 x i8>, <16 x i8>* %4002, align 2, !tbaa !390
  %4004 = getelementptr inbounds i8, i8* %3958, i64 34
  %4005 = bitcast i8* %4004 to <16 x i8>*
  %4006 = load <16 x i8>, <16 x i8>* %4005, align 2, !tbaa !390
  %4007 = getelementptr inbounds i8, i8* %3958, i64 50
  %4008 = bitcast i8* %4007 to <16 x i8>*
  %4009 = load <16 x i8>, <16 x i8>* %4008, align 2, !tbaa !390
  %4010 = getelementptr inbounds i8, i8* %3943, i64 2
  %4011 = bitcast i8* %4010 to <16 x i8>*
  %4012 = load <16 x i8>, <16 x i8>* %4011, align 2, !tbaa !390
  %4013 = getelementptr inbounds i8, i8* %3943, i64 18
  %4014 = bitcast i8* %4013 to <16 x i8>*
  %4015 = load <16 x i8>, <16 x i8>* %4014, align 2, !tbaa !390
  %4016 = getelementptr inbounds i8, i8* %3943, i64 34
  %4017 = bitcast i8* %4016 to <16 x i8>*
  %4018 = load <16 x i8>, <16 x i8>* %4017, align 2, !tbaa !390
  %4019 = getelementptr inbounds i8, i8* %3943, i64 50
  %4020 = bitcast i8* %4019 to <16 x i8>*
  %4021 = load <16 x i8>, <16 x i8>* %4020, align 2, !tbaa !390
  %4022 = bitcast i8* %3973 to <16 x i8>*
  %4023 = load <16 x i8>, <16 x i8>* %4022, align 16, !tbaa !390
  %4024 = getelementptr inbounds i8, i8* %3973, i64 16
  %4025 = bitcast i8* %4024 to <16 x i8>*
  %4026 = load <16 x i8>, <16 x i8>* %4025, align 16, !tbaa !390
  %4027 = getelementptr inbounds i8, i8* %3973, i64 32
  %4028 = bitcast i8* %4027 to <16 x i8>*
  %4029 = load <16 x i8>, <16 x i8>* %4028, align 16, !tbaa !390
  %4030 = getelementptr inbounds i8, i8* %3973, i64 48
  %4031 = bitcast i8* %4030 to <16 x i8>*
  %4032 = load <16 x i8>, <16 x i8>* %4031, align 16, !tbaa !390
  %4033 = bitcast i8* %3958 to <16 x i8>*
  %4034 = load <16 x i8>, <16 x i8>* %4033, align 16, !tbaa !390
  %4035 = getelementptr inbounds i8, i8* %3958, i64 16
  %4036 = bitcast i8* %4035 to <16 x i8>*
  %4037 = load <16 x i8>, <16 x i8>* %4036, align 16, !tbaa !390
  %4038 = getelementptr inbounds i8, i8* %3958, i64 32
  %4039 = bitcast i8* %4038 to <16 x i8>*
  %4040 = load <16 x i8>, <16 x i8>* %4039, align 16, !tbaa !390
  %4041 = getelementptr inbounds i8, i8* %3958, i64 48
  %4042 = bitcast i8* %4041 to <16 x i8>*
  %4043 = load <16 x i8>, <16 x i8>* %4042, align 16, !tbaa !390
  %4044 = bitcast i8* %3943 to <16 x i8>*
  %4045 = load <16 x i8>, <16 x i8>* %4044, align 16, !tbaa !390
  %4046 = getelementptr inbounds i8, i8* %3943, i64 16
  %4047 = bitcast i8* %4046 to <16 x i8>*
  %4048 = load <16 x i8>, <16 x i8>* %4047, align 16, !tbaa !390
  %4049 = getelementptr inbounds i8, i8* %3943, i64 32
  %4050 = bitcast i8* %4049 to <16 x i8>*
  %4051 = load <16 x i8>, <16 x i8>* %4050, align 16, !tbaa !390
  %4052 = getelementptr inbounds i8, i8* %3943, i64 48
  %4053 = bitcast i8* %4052 to <16 x i8>*
  %4054 = load <16 x i8>, <16 x i8>* %4053, align 16, !tbaa !390
  %4055 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %4034, <16 x i8> %4045)
  %4056 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %4037, <16 x i8> %4048)
  %4057 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %4040, <16 x i8> %4051)
  %4058 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %4043, <16 x i8> %4054)
  %4059 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %4023, <16 x i8> %4055)
  %4060 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %4026, <16 x i8> %4056)
  %4061 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %4029, <16 x i8> %4057)
  %4062 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %4032, <16 x i8> %4058)
  %4063 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %4012, <16 x i8> %4059)
  %4064 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %4015, <16 x i8> %4060)
  %4065 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %4018, <16 x i8> %4061)
  %4066 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %4021, <16 x i8> %4062)
  %4067 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %4000, <16 x i8> %4063)
  %4068 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %4003, <16 x i8> %4064)
  %4069 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %4006, <16 x i8> %4065)
  %4070 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %4009, <16 x i8> %4066)
  %4071 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3988, <16 x i8> %4067)
  %4072 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3991, <16 x i8> %4068)
  %4073 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3994, <16 x i8> %4069)
  %4074 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3997, <16 x i8> %4070)
  %4075 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3976, <16 x i8> %4071)
  %4076 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3979, <16 x i8> %4072)
  %4077 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3982, <16 x i8> %4073)
  %4078 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3985, <16 x i8> %4074)
  %4079 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3961, <16 x i8> %4075)
  %4080 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3964, <16 x i8> %4076)
  %4081 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3967, <16 x i8> %4077)
  %4082 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3970, <16 x i8> %4078)
  %4083 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3946, <16 x i8> %4079)
  %4084 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3949, <16 x i8> %4080)
  %4085 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3952, <16 x i8> %4081)
  %4086 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %3955, <16 x i8> %4082)
  %4087 = add nsw i64 %2225, %1760
  %4088 = getelementptr inbounds i8, i8* %5, i64 %4087
  %4089 = bitcast i8* %4088 to <16 x i8>*
  store <16 x i8> %4083, <16 x i8>* %4089, align 1, !tbaa !392
  %4090 = getelementptr inbounds i8, i8* %4088, i64 16
  %4091 = bitcast i8* %4090 to <16 x i8>*
  store <16 x i8> %4084, <16 x i8>* %4091, align 1, !tbaa !392
  %4092 = getelementptr inbounds i8, i8* %4088, i64 32
  %4093 = bitcast i8* %4092 to <16 x i8>*
  store <16 x i8> %4085, <16 x i8>* %4093, align 1, !tbaa !392
  %4094 = getelementptr inbounds i8, i8* %4088, i64 48
  %4095 = bitcast i8* %4094 to <16 x i8>*
  store <16 x i8> %4086, <16 x i8>* %4095, align 1, !tbaa !392
  %t43.1 = add i32 %t120, %1921
  %t74.1 = add nsw i32 %t43.1, %33
  %t75.1 = add nsw i32 %t43.1, %t106
  %4096 = sext i32 %t74.1 to i64
  %4097 = shl nsw i64 %4096, 6
  %4098 = getelementptr inbounds i8, i8* %bounded_input, i64 %4097
  %4099 = getelementptr inbounds i8, i8* %4098, i64 1
  %4100 = bitcast i8* %4099 to <16 x i8>*
  %4101 = load <16 x i8>, <16 x i8>* %4100, align 1, !tbaa !390
  %4102 = getelementptr inbounds i8, i8* %4098, i64 17
  %4103 = bitcast i8* %4102 to <16 x i8>*
  %4104 = load <16 x i8>, <16 x i8>* %4103, align 1, !tbaa !390
  %4105 = getelementptr inbounds i8, i8* %4098, i64 33
  %4106 = bitcast i8* %4105 to <16 x i8>*
  %4107 = load <16 x i8>, <16 x i8>* %4106, align 1, !tbaa !390
  %4108 = getelementptr inbounds i8, i8* %4098, i64 49
  %4109 = bitcast i8* %4108 to <16 x i8>*
  %4110 = load <16 x i8>, <16 x i8>* %4109, align 1, !tbaa !390
  %4111 = sext i32 %t43.1 to i64
  %4112 = shl nsw i64 %4111, 6
  %4113 = getelementptr inbounds i8, i8* %bounded_input, i64 %4112
  %4114 = getelementptr inbounds i8, i8* %4113, i64 1
  %4115 = bitcast i8* %4114 to <16 x i8>*
  %4116 = load <16 x i8>, <16 x i8>* %4115, align 1, !tbaa !390
  %4117 = getelementptr inbounds i8, i8* %4113, i64 17
  %4118 = bitcast i8* %4117 to <16 x i8>*
  %4119 = load <16 x i8>, <16 x i8>* %4118, align 1, !tbaa !390
  %4120 = getelementptr inbounds i8, i8* %4113, i64 33
  %4121 = bitcast i8* %4120 to <16 x i8>*
  %4122 = load <16 x i8>, <16 x i8>* %4121, align 1, !tbaa !390
  %4123 = getelementptr inbounds i8, i8* %4113, i64 49
  %4124 = bitcast i8* %4123 to <16 x i8>*
  %4125 = load <16 x i8>, <16 x i8>* %4124, align 1, !tbaa !390
  %4126 = sext i32 %t75.1 to i64
  %4127 = shl nsw i64 %4126, 6
  %4128 = getelementptr inbounds i8, i8* %bounded_input, i64 %4127
  %4129 = getelementptr inbounds i8, i8* %4128, i64 1
  %4130 = bitcast i8* %4129 to <16 x i8>*
  %4131 = load <16 x i8>, <16 x i8>* %4130, align 1, !tbaa !390
  %4132 = getelementptr inbounds i8, i8* %4128, i64 17
  %4133 = bitcast i8* %4132 to <16 x i8>*
  %4134 = load <16 x i8>, <16 x i8>* %4133, align 1, !tbaa !390
  %4135 = getelementptr inbounds i8, i8* %4128, i64 33
  %4136 = bitcast i8* %4135 to <16 x i8>*
  %4137 = load <16 x i8>, <16 x i8>* %4136, align 1, !tbaa !390
  %4138 = getelementptr inbounds i8, i8* %4128, i64 49
  %4139 = bitcast i8* %4138 to <16 x i8>*
  %4140 = load <16 x i8>, <16 x i8>* %4139, align 1, !tbaa !390
  %4141 = getelementptr inbounds i8, i8* %4128, i64 2
  %4142 = bitcast i8* %4141 to <16 x i8>*
  %4143 = load <16 x i8>, <16 x i8>* %4142, align 2, !tbaa !390
  %4144 = getelementptr inbounds i8, i8* %4128, i64 18
  %4145 = bitcast i8* %4144 to <16 x i8>*
  %4146 = load <16 x i8>, <16 x i8>* %4145, align 2, !tbaa !390
  %4147 = getelementptr inbounds i8, i8* %4128, i64 34
  %4148 = bitcast i8* %4147 to <16 x i8>*
  %4149 = load <16 x i8>, <16 x i8>* %4148, align 2, !tbaa !390
  %4150 = getelementptr inbounds i8, i8* %4128, i64 50
  %4151 = bitcast i8* %4150 to <16 x i8>*
  %4152 = load <16 x i8>, <16 x i8>* %4151, align 2, !tbaa !390
  %4153 = getelementptr inbounds i8, i8* %4113, i64 2
  %4154 = bitcast i8* %4153 to <16 x i8>*
  %4155 = load <16 x i8>, <16 x i8>* %4154, align 2, !tbaa !390
  %4156 = getelementptr inbounds i8, i8* %4113, i64 18
  %4157 = bitcast i8* %4156 to <16 x i8>*
  %4158 = load <16 x i8>, <16 x i8>* %4157, align 2, !tbaa !390
  %4159 = getelementptr inbounds i8, i8* %4113, i64 34
  %4160 = bitcast i8* %4159 to <16 x i8>*
  %4161 = load <16 x i8>, <16 x i8>* %4160, align 2, !tbaa !390
  %4162 = getelementptr inbounds i8, i8* %4113, i64 50
  %4163 = bitcast i8* %4162 to <16 x i8>*
  %4164 = load <16 x i8>, <16 x i8>* %4163, align 2, !tbaa !390
  %4165 = getelementptr inbounds i8, i8* %4098, i64 2
  %4166 = bitcast i8* %4165 to <16 x i8>*
  %4167 = load <16 x i8>, <16 x i8>* %4166, align 2, !tbaa !390
  %4168 = getelementptr inbounds i8, i8* %4098, i64 18
  %4169 = bitcast i8* %4168 to <16 x i8>*
  %4170 = load <16 x i8>, <16 x i8>* %4169, align 2, !tbaa !390
  %4171 = getelementptr inbounds i8, i8* %4098, i64 34
  %4172 = bitcast i8* %4171 to <16 x i8>*
  %4173 = load <16 x i8>, <16 x i8>* %4172, align 2, !tbaa !390
  %4174 = getelementptr inbounds i8, i8* %4098, i64 50
  %4175 = bitcast i8* %4174 to <16 x i8>*
  %4176 = load <16 x i8>, <16 x i8>* %4175, align 2, !tbaa !390
  %4177 = bitcast i8* %4128 to <16 x i8>*
  %4178 = load <16 x i8>, <16 x i8>* %4177, align 16, !tbaa !390
  %4179 = getelementptr inbounds i8, i8* %4128, i64 16
  %4180 = bitcast i8* %4179 to <16 x i8>*
  %4181 = load <16 x i8>, <16 x i8>* %4180, align 16, !tbaa !390
  %4182 = getelementptr inbounds i8, i8* %4128, i64 32
  %4183 = bitcast i8* %4182 to <16 x i8>*
  %4184 = load <16 x i8>, <16 x i8>* %4183, align 16, !tbaa !390
  %4185 = getelementptr inbounds i8, i8* %4128, i64 48
  %4186 = bitcast i8* %4185 to <16 x i8>*
  %4187 = load <16 x i8>, <16 x i8>* %4186, align 16, !tbaa !390
  %4188 = bitcast i8* %4113 to <16 x i8>*
  %4189 = load <16 x i8>, <16 x i8>* %4188, align 16, !tbaa !390
  %4190 = getelementptr inbounds i8, i8* %4113, i64 16
  %4191 = bitcast i8* %4190 to <16 x i8>*
  %4192 = load <16 x i8>, <16 x i8>* %4191, align 16, !tbaa !390
  %4193 = getelementptr inbounds i8, i8* %4113, i64 32
  %4194 = bitcast i8* %4193 to <16 x i8>*
  %4195 = load <16 x i8>, <16 x i8>* %4194, align 16, !tbaa !390
  %4196 = getelementptr inbounds i8, i8* %4113, i64 48
  %4197 = bitcast i8* %4196 to <16 x i8>*
  %4198 = load <16 x i8>, <16 x i8>* %4197, align 16, !tbaa !390
  %4199 = bitcast i8* %4098 to <16 x i8>*
  %4200 = load <16 x i8>, <16 x i8>* %4199, align 16, !tbaa !390
  %4201 = getelementptr inbounds i8, i8* %4098, i64 16
  %4202 = bitcast i8* %4201 to <16 x i8>*
  %4203 = load <16 x i8>, <16 x i8>* %4202, align 16, !tbaa !390
  %4204 = getelementptr inbounds i8, i8* %4098, i64 32
  %4205 = bitcast i8* %4204 to <16 x i8>*
  %4206 = load <16 x i8>, <16 x i8>* %4205, align 16, !tbaa !390
  %4207 = getelementptr inbounds i8, i8* %4098, i64 48
  %4208 = bitcast i8* %4207 to <16 x i8>*
  %4209 = load <16 x i8>, <16 x i8>* %4208, align 16, !tbaa !390
  %4210 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %4189, <16 x i8> %4200)
  %4211 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %4192, <16 x i8> %4203)
  %4212 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %4195, <16 x i8> %4206)
  %4213 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %4198, <16 x i8> %4209)
  %4214 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %4178, <16 x i8> %4210)
  %4215 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %4181, <16 x i8> %4211)
  %4216 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %4184, <16 x i8> %4212)
  %4217 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %4187, <16 x i8> %4213)
  %4218 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %4167, <16 x i8> %4214)
  %4219 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %4170, <16 x i8> %4215)
  %4220 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %4173, <16 x i8> %4216)
  %4221 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %4176, <16 x i8> %4217)
  %4222 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %4155, <16 x i8> %4218)
  %4223 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %4158, <16 x i8> %4219)
  %4224 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %4161, <16 x i8> %4220)
  %4225 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %4164, <16 x i8> %4221)
  %4226 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %4143, <16 x i8> %4222)
  %4227 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %4146, <16 x i8> %4223)
  %4228 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %4149, <16 x i8> %4224)
  %4229 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %4152, <16 x i8> %4225)
  %4230 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %4131, <16 x i8> %4226)
  %4231 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %4134, <16 x i8> %4227)
  %4232 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %4137, <16 x i8> %4228)
  %4233 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %4140, <16 x i8> %4229)
  %4234 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %4116, <16 x i8> %4230)
  %4235 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %4119, <16 x i8> %4231)
  %4236 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %4122, <16 x i8> %4232)
  %4237 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %4125, <16 x i8> %4233)
  %4238 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %4101, <16 x i8> %4234)
  %4239 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %4104, <16 x i8> %4235)
  %4240 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %4107, <16 x i8> %4236)
  %4241 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %4110, <16 x i8> %4237)
  %4242 = add nsw i64 %2381, %1760
  %4243 = getelementptr inbounds i8, i8* %5, i64 %4242
  %4244 = bitcast i8* %4243 to <16 x i8>*
  store <16 x i8> %4238, <16 x i8>* %4244, align 1, !tbaa !392
  %4245 = getelementptr inbounds i8, i8* %4243, i64 16
  %4246 = bitcast i8* %4245 to <16 x i8>*
  store <16 x i8> %4239, <16 x i8>* %4246, align 1, !tbaa !392
  %4247 = getelementptr inbounds i8, i8* %4243, i64 32
  %4248 = bitcast i8* %4247 to <16 x i8>*
  store <16 x i8> %4240, <16 x i8>* %4248, align 1, !tbaa !392
  %4249 = getelementptr inbounds i8, i8* %4243, i64 48
  %4250 = bitcast i8* %4249 to <16 x i8>*
  store <16 x i8> %4241, <16 x i8>* %4250, align 1, !tbaa !392
  %indvars.iv.next346 = add nuw nsw i64 %indvars.iv345, 1
  %.not232 = icmp eq i64 %indvars.iv.next346, %42
  br i1 %.not232, label %if.then.i, label %"for output.s0.x.x"

"end for output.s0.x.x":                          ; preds = %"consume bounded_input"
  %tobool.not.i.not = icmp eq i8* %bounded_input, null
  br i1 %tobool.not.i.not, label %call_destructor.exit, label %if.then.i

if.then.i:                                        ; preds = %"for output.s0.x.x", %"end for output.s0.x.x"
  tail call void @halide_free(i8* null, i8* nonnull %bounded_input) #14
  br label %call_destructor.exit

call_destructor.exit:                             ; preds = %"end for output.s0.x.x", %if.then.i
  %indvars.iv.next349 = add nuw nsw i64 %indvars.iv348, 1
  %4251 = icmp eq i64 %indvars.iv.next349, %zext
  br i1 %4251, label %"end for output.s0.y.y.loopexit", label %"for output.s0.y.y"

"for output.s0.y.y49":                            ; preds = %"for output.s0.y.y49.preheader", %call_destructor.exit294
  %indvars.iv391 = phi i64 [ 0, %"for output.s0.y.y49.preheader" ], [ %indvars.iv.next392, %call_destructor.exit294 ]
  %bounded_input52 = tail call i8* @halide_malloc(i8* null, i64 %63)
  %4252 = trunc i64 %indvars.iv391 to i32
  %a33 = shl nsw i32 %4252, 3
  %.not = icmp eq i64 %indvars.iv391, 0
  %a32 = select i1 %.not, i32 1, i32 %a33
  %a35 = add nuw nsw i32 %a33, 9
  %4253 = icmp slt i32 %a35, %50
  %a34 = select i1 %4253, i32 %a35, i32 %50
  %b36 = add nsw i32 %a32, -1
  %.not186 = icmp slt i32 %a34, %a32
  %or.cond242 = and i1 %65, %.not
  br i1 %or.cond242, label %"for bounded_input.s0.x.x59", label %after_bb56, !prof !386

"end for output.s0.y.y50":                        ; preds = %call_destructor.exit294, %"end for output.s0.y.y"
  ret i32 0

after_bb56:                                       ; preds = %"for bounded_input.s0.x.x59", %"for output.s0.y.y49"
  %a38 = sub nsw i32 %a34, %a32
  %4254 = icmp sgt i32 %a38, -1
  br i1 %4254, label %"for bounded_input.s0.y.rebased68.preheader", label %"end for bounded_input.s0.y.rebased69", !prof !385

"for bounded_input.s0.y.rebased68.preheader":     ; preds = %after_bb56
  %4255 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> <i32 -1, i32 0, i32 1, i32 2>, <4 x i32> %68)
  %4256 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> <i32 3, i32 4, i32 5, i32 6>, <4 x i32> %68)
  %4257 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> <i32 7, i32 8, i32 9, i32 10>, <4 x i32> %68)
  %4258 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> <i32 11, i32 12, i32 13, i32 14>, <4 x i32> %68)
  %4259 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> <i32 15, i32 16, i32 17, i32 18>, <4 x i32> %68)
  %4260 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> <i32 19, i32 20, i32 21, i32 22>, <4 x i32> %68)
  %4261 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> <i32 23, i32 24, i32 25, i32 26>, <4 x i32> %68)
  %4262 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> <i32 27, i32 28, i32 29, i32 30>, <4 x i32> %68)
  %4263 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> <i32 31, i32 32, i32 33, i32 34>, <4 x i32> %68)
  %4264 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> <i32 35, i32 36, i32 37, i32 38>, <4 x i32> %68)
  %4265 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> <i32 39, i32 40, i32 41, i32 42>, <4 x i32> %68)
  %4266 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> <i32 43, i32 44, i32 45, i32 46>, <4 x i32> %68)
  %4267 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> <i32 47, i32 48, i32 49, i32 50>, <4 x i32> %68)
  %4268 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> <i32 51, i32 52, i32 53, i32 54>, <4 x i32> %68)
  %4269 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> <i32 55, i32 56, i32 57, i32 58>, <4 x i32> %68)
  %4270 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> <i32 59, i32 60, i32 61, i32 62>, <4 x i32> %68)
  %4271 = shufflevector <4 x i32> %4270, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %4272 = shufflevector <8 x i32> %4271, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %4273 = shufflevector <16 x i32> %4272, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %4274 = shufflevector <32 x i32> %4273, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %4275 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4255, <4 x i32> zeroinitializer)
  %4276 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4256, <4 x i32> zeroinitializer)
  %4277 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4257, <4 x i32> zeroinitializer)
  %4278 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4258, <4 x i32> zeroinitializer)
  %4279 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4259, <4 x i32> zeroinitializer)
  %4280 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4260, <4 x i32> zeroinitializer)
  %4281 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4261, <4 x i32> zeroinitializer)
  %4282 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4262, <4 x i32> zeroinitializer)
  %4283 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4263, <4 x i32> zeroinitializer)
  %4284 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4264, <4 x i32> zeroinitializer)
  %4285 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4265, <4 x i32> zeroinitializer)
  %4286 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4266, <4 x i32> zeroinitializer)
  %4287 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4267, <4 x i32> zeroinitializer)
  %4288 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4268, <4 x i32> zeroinitializer)
  %4289 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4269, <4 x i32> zeroinitializer)
  %4290 = shufflevector <64 x i32> %4274, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %4291 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4290, <4 x i32> zeroinitializer)
  %4292 = shufflevector <4 x i32> %4275, <4 x i32> %4276, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4293 = shufflevector <4 x i32> %4277, <4 x i32> %4278, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4294 = shufflevector <4 x i32> %4279, <4 x i32> %4280, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4295 = shufflevector <4 x i32> %4281, <4 x i32> %4282, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4296 = shufflevector <4 x i32> %4283, <4 x i32> %4284, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4297 = shufflevector <4 x i32> %4285, <4 x i32> %4286, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4298 = shufflevector <4 x i32> %4287, <4 x i32> %4288, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4299 = shufflevector <4 x i32> %4289, <4 x i32> %4291, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4300 = shufflevector <8 x i32> %4292, <8 x i32> %4293, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4301 = shufflevector <8 x i32> %4294, <8 x i32> %4295, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4302 = shufflevector <8 x i32> %4296, <8 x i32> %4297, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4303 = shufflevector <8 x i32> %4298, <8 x i32> %4299, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4304 = shufflevector <16 x i32> %4300, <16 x i32> %4301, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4305 = shufflevector <16 x i32> %4302, <16 x i32> %4303, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4306 = shufflevector <32 x i32> %4304, <32 x i32> %4305, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %4307 = zext i1 %.not to i64
  %4308 = zext i1 %.not to i64
  %4309 = zext i32 %a38 to i64
  br label %"for bounded_input.s0.y.rebased68"

"for bounded_input.s0.x.x59":                     ; preds = %"for output.s0.y.y49", %"for bounded_input.s0.x.x59"
  %indvars.iv351 = phi i64 [ %indvars.iv.next352, %"for bounded_input.s0.x.x59" ], [ 0, %"for output.s0.y.y49" ]
  %4310 = trunc i64 %indvars.iv351 to i32
  %4311 = shl nsw i32 %4310, 6
  %4312 = add nsw i32 %4311, -1
  %4313 = insertelement <64 x i32> undef, i32 %4312, i32 0
  %4314 = shufflevector <64 x i32> %4313, <64 x i32> undef, <64 x i32> zeroinitializer
  %4315 = add nsw <64 x i32> %4314, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %4316 = shufflevector <64 x i32> %4315, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4317 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4316, <4 x i32> %68)
  %4318 = shufflevector <64 x i32> %4315, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4319 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4318, <4 x i32> %68)
  %4320 = shufflevector <64 x i32> %4315, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %4321 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4320, <4 x i32> %68)
  %4322 = shufflevector <64 x i32> %4315, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %4323 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4322, <4 x i32> %68)
  %4324 = shufflevector <64 x i32> %4315, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %4325 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4324, <4 x i32> %68)
  %4326 = shufflevector <64 x i32> %4315, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %4327 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4326, <4 x i32> %68)
  %4328 = shufflevector <64 x i32> %4315, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %4329 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4328, <4 x i32> %68)
  %4330 = shufflevector <64 x i32> %4315, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %4331 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4330, <4 x i32> %68)
  %4332 = shufflevector <64 x i32> %4315, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %4333 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4332, <4 x i32> %68)
  %4334 = shufflevector <64 x i32> %4315, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %4335 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4334, <4 x i32> %68)
  %4336 = shufflevector <64 x i32> %4315, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %4337 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4336, <4 x i32> %68)
  %4338 = shufflevector <64 x i32> %4315, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %4339 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4338, <4 x i32> %68)
  %4340 = shufflevector <64 x i32> %4315, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %4341 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4340, <4 x i32> %68)
  %4342 = shufflevector <64 x i32> %4315, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %4343 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4342, <4 x i32> %68)
  %4344 = shufflevector <64 x i32> %4315, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %4345 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4344, <4 x i32> %68)
  %4346 = shufflevector <64 x i32> %4315, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %4347 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4346, <4 x i32> %68)
  %4348 = shufflevector <4 x i32> %4347, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %4349 = shufflevector <8 x i32> %4348, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %4350 = shufflevector <16 x i32> %4349, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %4351 = shufflevector <32 x i32> %4350, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %4352 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4317, <4 x i32> zeroinitializer)
  %4353 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4319, <4 x i32> zeroinitializer)
  %4354 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4321, <4 x i32> zeroinitializer)
  %4355 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4323, <4 x i32> zeroinitializer)
  %4356 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4325, <4 x i32> zeroinitializer)
  %4357 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4327, <4 x i32> zeroinitializer)
  %4358 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4329, <4 x i32> zeroinitializer)
  %4359 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4331, <4 x i32> zeroinitializer)
  %4360 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4333, <4 x i32> zeroinitializer)
  %4361 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4335, <4 x i32> zeroinitializer)
  %4362 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4337, <4 x i32> zeroinitializer)
  %4363 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4339, <4 x i32> zeroinitializer)
  %4364 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4341, <4 x i32> zeroinitializer)
  %4365 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4343, <4 x i32> zeroinitializer)
  %4366 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4345, <4 x i32> zeroinitializer)
  %4367 = shufflevector <64 x i32> %4351, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %4368 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4367, <4 x i32> zeroinitializer)
  %4369 = extractelement <4 x i32> %4352, i32 0
  %4370 = sext i32 %4369 to i64
  %4371 = getelementptr inbounds i8, i8* %0, i64 %4370
  %4372 = load i8, i8* %4371, align 1, !tbaa !387
  %4373 = insertelement <64 x i8> undef, i8 %4372, i32 0
  %4374 = extractelement <4 x i32> %4352, i32 1
  %4375 = sext i32 %4374 to i64
  %4376 = getelementptr inbounds i8, i8* %0, i64 %4375
  %4377 = load i8, i8* %4376, align 1, !tbaa !387
  %4378 = insertelement <64 x i8> %4373, i8 %4377, i32 1
  %4379 = extractelement <4 x i32> %4352, i32 2
  %4380 = sext i32 %4379 to i64
  %4381 = getelementptr inbounds i8, i8* %0, i64 %4380
  %4382 = load i8, i8* %4381, align 1, !tbaa !387
  %4383 = insertelement <64 x i8> %4378, i8 %4382, i32 2
  %4384 = extractelement <4 x i32> %4352, i32 3
  %4385 = sext i32 %4384 to i64
  %4386 = getelementptr inbounds i8, i8* %0, i64 %4385
  %4387 = load i8, i8* %4386, align 1, !tbaa !387
  %4388 = insertelement <64 x i8> %4383, i8 %4387, i32 3
  %4389 = extractelement <4 x i32> %4353, i32 0
  %4390 = sext i32 %4389 to i64
  %4391 = getelementptr inbounds i8, i8* %0, i64 %4390
  %4392 = load i8, i8* %4391, align 1, !tbaa !387
  %4393 = insertelement <64 x i8> %4388, i8 %4392, i32 4
  %4394 = extractelement <4 x i32> %4353, i32 1
  %4395 = sext i32 %4394 to i64
  %4396 = getelementptr inbounds i8, i8* %0, i64 %4395
  %4397 = load i8, i8* %4396, align 1, !tbaa !387
  %4398 = insertelement <64 x i8> %4393, i8 %4397, i32 5
  %4399 = extractelement <4 x i32> %4353, i32 2
  %4400 = sext i32 %4399 to i64
  %4401 = getelementptr inbounds i8, i8* %0, i64 %4400
  %4402 = load i8, i8* %4401, align 1, !tbaa !387
  %4403 = insertelement <64 x i8> %4398, i8 %4402, i32 6
  %4404 = extractelement <4 x i32> %4353, i32 3
  %4405 = sext i32 %4404 to i64
  %4406 = getelementptr inbounds i8, i8* %0, i64 %4405
  %4407 = load i8, i8* %4406, align 1, !tbaa !387
  %4408 = insertelement <64 x i8> %4403, i8 %4407, i32 7
  %4409 = extractelement <4 x i32> %4354, i32 0
  %4410 = sext i32 %4409 to i64
  %4411 = getelementptr inbounds i8, i8* %0, i64 %4410
  %4412 = load i8, i8* %4411, align 1, !tbaa !387
  %4413 = insertelement <64 x i8> %4408, i8 %4412, i32 8
  %4414 = extractelement <4 x i32> %4354, i32 1
  %4415 = sext i32 %4414 to i64
  %4416 = getelementptr inbounds i8, i8* %0, i64 %4415
  %4417 = load i8, i8* %4416, align 1, !tbaa !387
  %4418 = insertelement <64 x i8> %4413, i8 %4417, i32 9
  %4419 = extractelement <4 x i32> %4354, i32 2
  %4420 = sext i32 %4419 to i64
  %4421 = getelementptr inbounds i8, i8* %0, i64 %4420
  %4422 = load i8, i8* %4421, align 1, !tbaa !387
  %4423 = insertelement <64 x i8> %4418, i8 %4422, i32 10
  %4424 = extractelement <4 x i32> %4354, i32 3
  %4425 = sext i32 %4424 to i64
  %4426 = getelementptr inbounds i8, i8* %0, i64 %4425
  %4427 = load i8, i8* %4426, align 1, !tbaa !387
  %4428 = insertelement <64 x i8> %4423, i8 %4427, i32 11
  %4429 = extractelement <4 x i32> %4355, i32 0
  %4430 = sext i32 %4429 to i64
  %4431 = getelementptr inbounds i8, i8* %0, i64 %4430
  %4432 = load i8, i8* %4431, align 1, !tbaa !387
  %4433 = insertelement <64 x i8> %4428, i8 %4432, i32 12
  %4434 = extractelement <4 x i32> %4355, i32 1
  %4435 = sext i32 %4434 to i64
  %4436 = getelementptr inbounds i8, i8* %0, i64 %4435
  %4437 = load i8, i8* %4436, align 1, !tbaa !387
  %4438 = insertelement <64 x i8> %4433, i8 %4437, i32 13
  %4439 = extractelement <4 x i32> %4355, i32 2
  %4440 = sext i32 %4439 to i64
  %4441 = getelementptr inbounds i8, i8* %0, i64 %4440
  %4442 = load i8, i8* %4441, align 1, !tbaa !387
  %4443 = insertelement <64 x i8> %4438, i8 %4442, i32 14
  %4444 = extractelement <4 x i32> %4355, i32 3
  %4445 = sext i32 %4444 to i64
  %4446 = getelementptr inbounds i8, i8* %0, i64 %4445
  %4447 = load i8, i8* %4446, align 1, !tbaa !387
  %4448 = insertelement <64 x i8> %4443, i8 %4447, i32 15
  %4449 = extractelement <4 x i32> %4356, i32 0
  %4450 = sext i32 %4449 to i64
  %4451 = getelementptr inbounds i8, i8* %0, i64 %4450
  %4452 = load i8, i8* %4451, align 1, !tbaa !387
  %4453 = insertelement <64 x i8> %4448, i8 %4452, i32 16
  %4454 = extractelement <4 x i32> %4356, i32 1
  %4455 = sext i32 %4454 to i64
  %4456 = getelementptr inbounds i8, i8* %0, i64 %4455
  %4457 = load i8, i8* %4456, align 1, !tbaa !387
  %4458 = insertelement <64 x i8> %4453, i8 %4457, i32 17
  %4459 = extractelement <4 x i32> %4356, i32 2
  %4460 = sext i32 %4459 to i64
  %4461 = getelementptr inbounds i8, i8* %0, i64 %4460
  %4462 = load i8, i8* %4461, align 1, !tbaa !387
  %4463 = insertelement <64 x i8> %4458, i8 %4462, i32 18
  %4464 = extractelement <4 x i32> %4356, i32 3
  %4465 = sext i32 %4464 to i64
  %4466 = getelementptr inbounds i8, i8* %0, i64 %4465
  %4467 = load i8, i8* %4466, align 1, !tbaa !387
  %4468 = insertelement <64 x i8> %4463, i8 %4467, i32 19
  %4469 = extractelement <4 x i32> %4357, i32 0
  %4470 = sext i32 %4469 to i64
  %4471 = getelementptr inbounds i8, i8* %0, i64 %4470
  %4472 = load i8, i8* %4471, align 1, !tbaa !387
  %4473 = insertelement <64 x i8> %4468, i8 %4472, i32 20
  %4474 = extractelement <4 x i32> %4357, i32 1
  %4475 = sext i32 %4474 to i64
  %4476 = getelementptr inbounds i8, i8* %0, i64 %4475
  %4477 = load i8, i8* %4476, align 1, !tbaa !387
  %4478 = insertelement <64 x i8> %4473, i8 %4477, i32 21
  %4479 = extractelement <4 x i32> %4357, i32 2
  %4480 = sext i32 %4479 to i64
  %4481 = getelementptr inbounds i8, i8* %0, i64 %4480
  %4482 = load i8, i8* %4481, align 1, !tbaa !387
  %4483 = insertelement <64 x i8> %4478, i8 %4482, i32 22
  %4484 = extractelement <4 x i32> %4357, i32 3
  %4485 = sext i32 %4484 to i64
  %4486 = getelementptr inbounds i8, i8* %0, i64 %4485
  %4487 = load i8, i8* %4486, align 1, !tbaa !387
  %4488 = insertelement <64 x i8> %4483, i8 %4487, i32 23
  %4489 = extractelement <4 x i32> %4358, i32 0
  %4490 = sext i32 %4489 to i64
  %4491 = getelementptr inbounds i8, i8* %0, i64 %4490
  %4492 = load i8, i8* %4491, align 1, !tbaa !387
  %4493 = insertelement <64 x i8> %4488, i8 %4492, i32 24
  %4494 = extractelement <4 x i32> %4358, i32 1
  %4495 = sext i32 %4494 to i64
  %4496 = getelementptr inbounds i8, i8* %0, i64 %4495
  %4497 = load i8, i8* %4496, align 1, !tbaa !387
  %4498 = insertelement <64 x i8> %4493, i8 %4497, i32 25
  %4499 = extractelement <4 x i32> %4358, i32 2
  %4500 = sext i32 %4499 to i64
  %4501 = getelementptr inbounds i8, i8* %0, i64 %4500
  %4502 = load i8, i8* %4501, align 1, !tbaa !387
  %4503 = insertelement <64 x i8> %4498, i8 %4502, i32 26
  %4504 = extractelement <4 x i32> %4358, i32 3
  %4505 = sext i32 %4504 to i64
  %4506 = getelementptr inbounds i8, i8* %0, i64 %4505
  %4507 = load i8, i8* %4506, align 1, !tbaa !387
  %4508 = insertelement <64 x i8> %4503, i8 %4507, i32 27
  %4509 = extractelement <4 x i32> %4359, i32 0
  %4510 = sext i32 %4509 to i64
  %4511 = getelementptr inbounds i8, i8* %0, i64 %4510
  %4512 = load i8, i8* %4511, align 1, !tbaa !387
  %4513 = insertelement <64 x i8> %4508, i8 %4512, i32 28
  %4514 = extractelement <4 x i32> %4359, i32 1
  %4515 = sext i32 %4514 to i64
  %4516 = getelementptr inbounds i8, i8* %0, i64 %4515
  %4517 = load i8, i8* %4516, align 1, !tbaa !387
  %4518 = insertelement <64 x i8> %4513, i8 %4517, i32 29
  %4519 = extractelement <4 x i32> %4359, i32 2
  %4520 = sext i32 %4519 to i64
  %4521 = getelementptr inbounds i8, i8* %0, i64 %4520
  %4522 = load i8, i8* %4521, align 1, !tbaa !387
  %4523 = insertelement <64 x i8> %4518, i8 %4522, i32 30
  %4524 = extractelement <4 x i32> %4359, i32 3
  %4525 = sext i32 %4524 to i64
  %4526 = getelementptr inbounds i8, i8* %0, i64 %4525
  %4527 = load i8, i8* %4526, align 1, !tbaa !387
  %4528 = insertelement <64 x i8> %4523, i8 %4527, i32 31
  %4529 = extractelement <4 x i32> %4360, i32 0
  %4530 = sext i32 %4529 to i64
  %4531 = getelementptr inbounds i8, i8* %0, i64 %4530
  %4532 = load i8, i8* %4531, align 1, !tbaa !387
  %4533 = insertelement <64 x i8> %4528, i8 %4532, i32 32
  %4534 = extractelement <4 x i32> %4360, i32 1
  %4535 = sext i32 %4534 to i64
  %4536 = getelementptr inbounds i8, i8* %0, i64 %4535
  %4537 = load i8, i8* %4536, align 1, !tbaa !387
  %4538 = insertelement <64 x i8> %4533, i8 %4537, i32 33
  %4539 = extractelement <4 x i32> %4360, i32 2
  %4540 = sext i32 %4539 to i64
  %4541 = getelementptr inbounds i8, i8* %0, i64 %4540
  %4542 = load i8, i8* %4541, align 1, !tbaa !387
  %4543 = insertelement <64 x i8> %4538, i8 %4542, i32 34
  %4544 = extractelement <4 x i32> %4360, i32 3
  %4545 = sext i32 %4544 to i64
  %4546 = getelementptr inbounds i8, i8* %0, i64 %4545
  %4547 = load i8, i8* %4546, align 1, !tbaa !387
  %4548 = insertelement <64 x i8> %4543, i8 %4547, i32 35
  %4549 = extractelement <4 x i32> %4361, i32 0
  %4550 = sext i32 %4549 to i64
  %4551 = getelementptr inbounds i8, i8* %0, i64 %4550
  %4552 = load i8, i8* %4551, align 1, !tbaa !387
  %4553 = insertelement <64 x i8> %4548, i8 %4552, i32 36
  %4554 = extractelement <4 x i32> %4361, i32 1
  %4555 = sext i32 %4554 to i64
  %4556 = getelementptr inbounds i8, i8* %0, i64 %4555
  %4557 = load i8, i8* %4556, align 1, !tbaa !387
  %4558 = insertelement <64 x i8> %4553, i8 %4557, i32 37
  %4559 = extractelement <4 x i32> %4361, i32 2
  %4560 = sext i32 %4559 to i64
  %4561 = getelementptr inbounds i8, i8* %0, i64 %4560
  %4562 = load i8, i8* %4561, align 1, !tbaa !387
  %4563 = insertelement <64 x i8> %4558, i8 %4562, i32 38
  %4564 = extractelement <4 x i32> %4361, i32 3
  %4565 = sext i32 %4564 to i64
  %4566 = getelementptr inbounds i8, i8* %0, i64 %4565
  %4567 = load i8, i8* %4566, align 1, !tbaa !387
  %4568 = insertelement <64 x i8> %4563, i8 %4567, i32 39
  %4569 = extractelement <4 x i32> %4362, i32 0
  %4570 = sext i32 %4569 to i64
  %4571 = getelementptr inbounds i8, i8* %0, i64 %4570
  %4572 = load i8, i8* %4571, align 1, !tbaa !387
  %4573 = insertelement <64 x i8> %4568, i8 %4572, i32 40
  %4574 = extractelement <4 x i32> %4362, i32 1
  %4575 = sext i32 %4574 to i64
  %4576 = getelementptr inbounds i8, i8* %0, i64 %4575
  %4577 = load i8, i8* %4576, align 1, !tbaa !387
  %4578 = insertelement <64 x i8> %4573, i8 %4577, i32 41
  %4579 = extractelement <4 x i32> %4362, i32 2
  %4580 = sext i32 %4579 to i64
  %4581 = getelementptr inbounds i8, i8* %0, i64 %4580
  %4582 = load i8, i8* %4581, align 1, !tbaa !387
  %4583 = insertelement <64 x i8> %4578, i8 %4582, i32 42
  %4584 = extractelement <4 x i32> %4362, i32 3
  %4585 = sext i32 %4584 to i64
  %4586 = getelementptr inbounds i8, i8* %0, i64 %4585
  %4587 = load i8, i8* %4586, align 1, !tbaa !387
  %4588 = insertelement <64 x i8> %4583, i8 %4587, i32 43
  %4589 = extractelement <4 x i32> %4363, i32 0
  %4590 = sext i32 %4589 to i64
  %4591 = getelementptr inbounds i8, i8* %0, i64 %4590
  %4592 = load i8, i8* %4591, align 1, !tbaa !387
  %4593 = insertelement <64 x i8> %4588, i8 %4592, i32 44
  %4594 = extractelement <4 x i32> %4363, i32 1
  %4595 = sext i32 %4594 to i64
  %4596 = getelementptr inbounds i8, i8* %0, i64 %4595
  %4597 = load i8, i8* %4596, align 1, !tbaa !387
  %4598 = insertelement <64 x i8> %4593, i8 %4597, i32 45
  %4599 = extractelement <4 x i32> %4363, i32 2
  %4600 = sext i32 %4599 to i64
  %4601 = getelementptr inbounds i8, i8* %0, i64 %4600
  %4602 = load i8, i8* %4601, align 1, !tbaa !387
  %4603 = insertelement <64 x i8> %4598, i8 %4602, i32 46
  %4604 = extractelement <4 x i32> %4363, i32 3
  %4605 = sext i32 %4604 to i64
  %4606 = getelementptr inbounds i8, i8* %0, i64 %4605
  %4607 = load i8, i8* %4606, align 1, !tbaa !387
  %4608 = insertelement <64 x i8> %4603, i8 %4607, i32 47
  %4609 = extractelement <4 x i32> %4364, i32 0
  %4610 = sext i32 %4609 to i64
  %4611 = getelementptr inbounds i8, i8* %0, i64 %4610
  %4612 = load i8, i8* %4611, align 1, !tbaa !387
  %4613 = insertelement <64 x i8> %4608, i8 %4612, i32 48
  %4614 = extractelement <4 x i32> %4364, i32 1
  %4615 = sext i32 %4614 to i64
  %4616 = getelementptr inbounds i8, i8* %0, i64 %4615
  %4617 = load i8, i8* %4616, align 1, !tbaa !387
  %4618 = insertelement <64 x i8> %4613, i8 %4617, i32 49
  %4619 = extractelement <4 x i32> %4364, i32 2
  %4620 = sext i32 %4619 to i64
  %4621 = getelementptr inbounds i8, i8* %0, i64 %4620
  %4622 = load i8, i8* %4621, align 1, !tbaa !387
  %4623 = insertelement <64 x i8> %4618, i8 %4622, i32 50
  %4624 = extractelement <4 x i32> %4364, i32 3
  %4625 = sext i32 %4624 to i64
  %4626 = getelementptr inbounds i8, i8* %0, i64 %4625
  %4627 = load i8, i8* %4626, align 1, !tbaa !387
  %4628 = insertelement <64 x i8> %4623, i8 %4627, i32 51
  %4629 = extractelement <4 x i32> %4365, i32 0
  %4630 = sext i32 %4629 to i64
  %4631 = getelementptr inbounds i8, i8* %0, i64 %4630
  %4632 = load i8, i8* %4631, align 1, !tbaa !387
  %4633 = insertelement <64 x i8> %4628, i8 %4632, i32 52
  %4634 = extractelement <4 x i32> %4365, i32 1
  %4635 = sext i32 %4634 to i64
  %4636 = getelementptr inbounds i8, i8* %0, i64 %4635
  %4637 = load i8, i8* %4636, align 1, !tbaa !387
  %4638 = insertelement <64 x i8> %4633, i8 %4637, i32 53
  %4639 = extractelement <4 x i32> %4365, i32 2
  %4640 = sext i32 %4639 to i64
  %4641 = getelementptr inbounds i8, i8* %0, i64 %4640
  %4642 = load i8, i8* %4641, align 1, !tbaa !387
  %4643 = insertelement <64 x i8> %4638, i8 %4642, i32 54
  %4644 = extractelement <4 x i32> %4365, i32 3
  %4645 = sext i32 %4644 to i64
  %4646 = getelementptr inbounds i8, i8* %0, i64 %4645
  %4647 = load i8, i8* %4646, align 1, !tbaa !387
  %4648 = insertelement <64 x i8> %4643, i8 %4647, i32 55
  %4649 = extractelement <4 x i32> %4366, i32 0
  %4650 = sext i32 %4649 to i64
  %4651 = getelementptr inbounds i8, i8* %0, i64 %4650
  %4652 = load i8, i8* %4651, align 1, !tbaa !387
  %4653 = insertelement <64 x i8> %4648, i8 %4652, i32 56
  %4654 = extractelement <4 x i32> %4366, i32 1
  %4655 = sext i32 %4654 to i64
  %4656 = getelementptr inbounds i8, i8* %0, i64 %4655
  %4657 = load i8, i8* %4656, align 1, !tbaa !387
  %4658 = insertelement <64 x i8> %4653, i8 %4657, i32 57
  %4659 = extractelement <4 x i32> %4366, i32 2
  %4660 = sext i32 %4659 to i64
  %4661 = getelementptr inbounds i8, i8* %0, i64 %4660
  %4662 = load i8, i8* %4661, align 1, !tbaa !387
  %4663 = insertelement <64 x i8> %4658, i8 %4662, i32 58
  %4664 = extractelement <4 x i32> %4366, i32 3
  %4665 = sext i32 %4664 to i64
  %4666 = getelementptr inbounds i8, i8* %0, i64 %4665
  %4667 = load i8, i8* %4666, align 1, !tbaa !387
  %4668 = insertelement <64 x i8> %4663, i8 %4667, i32 59
  %4669 = extractelement <4 x i32> %4368, i32 0
  %4670 = sext i32 %4669 to i64
  %4671 = getelementptr inbounds i8, i8* %0, i64 %4670
  %4672 = load i8, i8* %4671, align 1, !tbaa !387
  %4673 = insertelement <64 x i8> %4668, i8 %4672, i32 60
  %4674 = extractelement <4 x i32> %4368, i32 1
  %4675 = sext i32 %4674 to i64
  %4676 = getelementptr inbounds i8, i8* %0, i64 %4675
  %4677 = load i8, i8* %4676, align 1, !tbaa !387
  %4678 = insertelement <64 x i8> %4673, i8 %4677, i32 61
  %4679 = extractelement <4 x i32> %4368, i32 2
  %4680 = sext i32 %4679 to i64
  %4681 = getelementptr inbounds i8, i8* %0, i64 %4680
  %4682 = load i8, i8* %4681, align 1, !tbaa !387
  %4683 = insertelement <64 x i8> %4678, i8 %4682, i32 62
  %4684 = extractelement <4 x i32> %4368, i32 3
  %4685 = sext i32 %4684 to i64
  %4686 = getelementptr inbounds i8, i8* %0, i64 %4685
  %4687 = load i8, i8* %4686, align 1, !tbaa !387
  %4688 = insertelement <64 x i8> %4683, i8 %4687, i32 63
  %4689 = shufflevector <64 x i8> %4688, <64 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4690 = shl nuw nsw i64 %indvars.iv351, 6
  %4691 = getelementptr inbounds i8, i8* %bounded_input52, i64 %4690
  %4692 = bitcast i8* %4691 to <16 x i8>*
  store <16 x i8> %4689, <16 x i8>* %4692, align 16, !tbaa !390
  %4693 = shufflevector <64 x i8> %4688, <64 x i8> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4694 = getelementptr inbounds i8, i8* %4691, i64 16
  %4695 = bitcast i8* %4694 to <16 x i8>*
  store <16 x i8> %4693, <16 x i8>* %4695, align 16, !tbaa !390
  %4696 = shufflevector <64 x i8> %4688, <64 x i8> undef, <16 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %4697 = getelementptr inbounds i8, i8* %4691, i64 32
  %4698 = bitcast i8* %4697 to <16 x i8>*
  store <16 x i8> %4696, <16 x i8>* %4698, align 16, !tbaa !390
  %4699 = shufflevector <64 x i8> %4688, <64 x i8> undef, <16 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %4700 = getelementptr inbounds i8, i8* %4691, i64 48
  %4701 = bitcast i8* %4700 to <16 x i8>*
  store <16 x i8> %4699, <16 x i8>* %4701, align 16, !tbaa !390
  %indvars.iv.next352 = add nuw nsw i64 %indvars.iv351, 1
  %.not211 = icmp eq i64 %indvars.iv.next352, %84
  br i1 %.not211, label %after_bb56, label %"for bounded_input.s0.x.x59"

"for bounded_input.s0.y.rebased68":               ; preds = %"for bounded_input.s0.y.rebased68.preheader", %"end for bounded_input.s0.x.x.rebased79"
  %indvars.iv357 = phi i64 [ 0, %"for bounded_input.s0.y.rebased68.preheader" ], [ %indvars.iv.next358, %"end for bounded_input.s0.x.x.rebased79" ]
  %4702 = trunc i64 %indvars.iv357 to i32
  %4703 = add i32 %b36, %4702
  %4704 = mul nsw i32 %4703, %49
  %4705 = insertelement <64 x i32> undef, i32 %4704, i32 0
  %4706 = shufflevector <64 x i32> %4705, <64 x i32> undef, <64 x i32> zeroinitializer
  %4707 = add nsw <64 x i32> %4306, %4706
  %4708 = extractelement <64 x i32> %4707, i32 0
  %4709 = sext i32 %4708 to i64
  %4710 = getelementptr inbounds i8, i8* %0, i64 %4709
  %4711 = load i8, i8* %4710, align 1, !tbaa !387
  %4712 = insertelement <64 x i8> undef, i8 %4711, i32 0
  %4713 = extractelement <64 x i32> %4707, i32 1
  %4714 = sext i32 %4713 to i64
  %4715 = getelementptr inbounds i8, i8* %0, i64 %4714
  %4716 = load i8, i8* %4715, align 1, !tbaa !387
  %4717 = insertelement <64 x i8> %4712, i8 %4716, i32 1
  %4718 = extractelement <64 x i32> %4707, i32 2
  %4719 = sext i32 %4718 to i64
  %4720 = getelementptr inbounds i8, i8* %0, i64 %4719
  %4721 = load i8, i8* %4720, align 1, !tbaa !387
  %4722 = insertelement <64 x i8> %4717, i8 %4721, i32 2
  %4723 = extractelement <64 x i32> %4707, i32 3
  %4724 = sext i32 %4723 to i64
  %4725 = getelementptr inbounds i8, i8* %0, i64 %4724
  %4726 = load i8, i8* %4725, align 1, !tbaa !387
  %4727 = insertelement <64 x i8> %4722, i8 %4726, i32 3
  %4728 = extractelement <64 x i32> %4707, i32 4
  %4729 = sext i32 %4728 to i64
  %4730 = getelementptr inbounds i8, i8* %0, i64 %4729
  %4731 = load i8, i8* %4730, align 1, !tbaa !387
  %4732 = insertelement <64 x i8> %4727, i8 %4731, i32 4
  %4733 = extractelement <64 x i32> %4707, i32 5
  %4734 = sext i32 %4733 to i64
  %4735 = getelementptr inbounds i8, i8* %0, i64 %4734
  %4736 = load i8, i8* %4735, align 1, !tbaa !387
  %4737 = insertelement <64 x i8> %4732, i8 %4736, i32 5
  %4738 = extractelement <64 x i32> %4707, i32 6
  %4739 = sext i32 %4738 to i64
  %4740 = getelementptr inbounds i8, i8* %0, i64 %4739
  %4741 = load i8, i8* %4740, align 1, !tbaa !387
  %4742 = insertelement <64 x i8> %4737, i8 %4741, i32 6
  %4743 = extractelement <64 x i32> %4707, i32 7
  %4744 = sext i32 %4743 to i64
  %4745 = getelementptr inbounds i8, i8* %0, i64 %4744
  %4746 = load i8, i8* %4745, align 1, !tbaa !387
  %4747 = insertelement <64 x i8> %4742, i8 %4746, i32 7
  %4748 = extractelement <64 x i32> %4707, i32 8
  %4749 = sext i32 %4748 to i64
  %4750 = getelementptr inbounds i8, i8* %0, i64 %4749
  %4751 = load i8, i8* %4750, align 1, !tbaa !387
  %4752 = insertelement <64 x i8> %4747, i8 %4751, i32 8
  %4753 = extractelement <64 x i32> %4707, i32 9
  %4754 = sext i32 %4753 to i64
  %4755 = getelementptr inbounds i8, i8* %0, i64 %4754
  %4756 = load i8, i8* %4755, align 1, !tbaa !387
  %4757 = insertelement <64 x i8> %4752, i8 %4756, i32 9
  %4758 = extractelement <64 x i32> %4707, i32 10
  %4759 = sext i32 %4758 to i64
  %4760 = getelementptr inbounds i8, i8* %0, i64 %4759
  %4761 = load i8, i8* %4760, align 1, !tbaa !387
  %4762 = insertelement <64 x i8> %4757, i8 %4761, i32 10
  %4763 = extractelement <64 x i32> %4707, i32 11
  %4764 = sext i32 %4763 to i64
  %4765 = getelementptr inbounds i8, i8* %0, i64 %4764
  %4766 = load i8, i8* %4765, align 1, !tbaa !387
  %4767 = insertelement <64 x i8> %4762, i8 %4766, i32 11
  %4768 = extractelement <64 x i32> %4707, i32 12
  %4769 = sext i32 %4768 to i64
  %4770 = getelementptr inbounds i8, i8* %0, i64 %4769
  %4771 = load i8, i8* %4770, align 1, !tbaa !387
  %4772 = insertelement <64 x i8> %4767, i8 %4771, i32 12
  %4773 = extractelement <64 x i32> %4707, i32 13
  %4774 = sext i32 %4773 to i64
  %4775 = getelementptr inbounds i8, i8* %0, i64 %4774
  %4776 = load i8, i8* %4775, align 1, !tbaa !387
  %4777 = insertelement <64 x i8> %4772, i8 %4776, i32 13
  %4778 = extractelement <64 x i32> %4707, i32 14
  %4779 = sext i32 %4778 to i64
  %4780 = getelementptr inbounds i8, i8* %0, i64 %4779
  %4781 = load i8, i8* %4780, align 1, !tbaa !387
  %4782 = insertelement <64 x i8> %4777, i8 %4781, i32 14
  %4783 = extractelement <64 x i32> %4707, i32 15
  %4784 = sext i32 %4783 to i64
  %4785 = getelementptr inbounds i8, i8* %0, i64 %4784
  %4786 = load i8, i8* %4785, align 1, !tbaa !387
  %4787 = insertelement <64 x i8> %4782, i8 %4786, i32 15
  %4788 = extractelement <64 x i32> %4707, i32 16
  %4789 = sext i32 %4788 to i64
  %4790 = getelementptr inbounds i8, i8* %0, i64 %4789
  %4791 = load i8, i8* %4790, align 1, !tbaa !387
  %4792 = insertelement <64 x i8> %4787, i8 %4791, i32 16
  %4793 = extractelement <64 x i32> %4707, i32 17
  %4794 = sext i32 %4793 to i64
  %4795 = getelementptr inbounds i8, i8* %0, i64 %4794
  %4796 = load i8, i8* %4795, align 1, !tbaa !387
  %4797 = insertelement <64 x i8> %4792, i8 %4796, i32 17
  %4798 = extractelement <64 x i32> %4707, i32 18
  %4799 = sext i32 %4798 to i64
  %4800 = getelementptr inbounds i8, i8* %0, i64 %4799
  %4801 = load i8, i8* %4800, align 1, !tbaa !387
  %4802 = insertelement <64 x i8> %4797, i8 %4801, i32 18
  %4803 = extractelement <64 x i32> %4707, i32 19
  %4804 = sext i32 %4803 to i64
  %4805 = getelementptr inbounds i8, i8* %0, i64 %4804
  %4806 = load i8, i8* %4805, align 1, !tbaa !387
  %4807 = insertelement <64 x i8> %4802, i8 %4806, i32 19
  %4808 = extractelement <64 x i32> %4707, i32 20
  %4809 = sext i32 %4808 to i64
  %4810 = getelementptr inbounds i8, i8* %0, i64 %4809
  %4811 = load i8, i8* %4810, align 1, !tbaa !387
  %4812 = insertelement <64 x i8> %4807, i8 %4811, i32 20
  %4813 = extractelement <64 x i32> %4707, i32 21
  %4814 = sext i32 %4813 to i64
  %4815 = getelementptr inbounds i8, i8* %0, i64 %4814
  %4816 = load i8, i8* %4815, align 1, !tbaa !387
  %4817 = insertelement <64 x i8> %4812, i8 %4816, i32 21
  %4818 = extractelement <64 x i32> %4707, i32 22
  %4819 = sext i32 %4818 to i64
  %4820 = getelementptr inbounds i8, i8* %0, i64 %4819
  %4821 = load i8, i8* %4820, align 1, !tbaa !387
  %4822 = insertelement <64 x i8> %4817, i8 %4821, i32 22
  %4823 = extractelement <64 x i32> %4707, i32 23
  %4824 = sext i32 %4823 to i64
  %4825 = getelementptr inbounds i8, i8* %0, i64 %4824
  %4826 = load i8, i8* %4825, align 1, !tbaa !387
  %4827 = insertelement <64 x i8> %4822, i8 %4826, i32 23
  %4828 = extractelement <64 x i32> %4707, i32 24
  %4829 = sext i32 %4828 to i64
  %4830 = getelementptr inbounds i8, i8* %0, i64 %4829
  %4831 = load i8, i8* %4830, align 1, !tbaa !387
  %4832 = insertelement <64 x i8> %4827, i8 %4831, i32 24
  %4833 = extractelement <64 x i32> %4707, i32 25
  %4834 = sext i32 %4833 to i64
  %4835 = getelementptr inbounds i8, i8* %0, i64 %4834
  %4836 = load i8, i8* %4835, align 1, !tbaa !387
  %4837 = insertelement <64 x i8> %4832, i8 %4836, i32 25
  %4838 = extractelement <64 x i32> %4707, i32 26
  %4839 = sext i32 %4838 to i64
  %4840 = getelementptr inbounds i8, i8* %0, i64 %4839
  %4841 = load i8, i8* %4840, align 1, !tbaa !387
  %4842 = insertelement <64 x i8> %4837, i8 %4841, i32 26
  %4843 = extractelement <64 x i32> %4707, i32 27
  %4844 = sext i32 %4843 to i64
  %4845 = getelementptr inbounds i8, i8* %0, i64 %4844
  %4846 = load i8, i8* %4845, align 1, !tbaa !387
  %4847 = insertelement <64 x i8> %4842, i8 %4846, i32 27
  %4848 = extractelement <64 x i32> %4707, i32 28
  %4849 = sext i32 %4848 to i64
  %4850 = getelementptr inbounds i8, i8* %0, i64 %4849
  %4851 = load i8, i8* %4850, align 1, !tbaa !387
  %4852 = insertelement <64 x i8> %4847, i8 %4851, i32 28
  %4853 = extractelement <64 x i32> %4707, i32 29
  %4854 = sext i32 %4853 to i64
  %4855 = getelementptr inbounds i8, i8* %0, i64 %4854
  %4856 = load i8, i8* %4855, align 1, !tbaa !387
  %4857 = insertelement <64 x i8> %4852, i8 %4856, i32 29
  %4858 = extractelement <64 x i32> %4707, i32 30
  %4859 = sext i32 %4858 to i64
  %4860 = getelementptr inbounds i8, i8* %0, i64 %4859
  %4861 = load i8, i8* %4860, align 1, !tbaa !387
  %4862 = insertelement <64 x i8> %4857, i8 %4861, i32 30
  %4863 = extractelement <64 x i32> %4707, i32 31
  %4864 = sext i32 %4863 to i64
  %4865 = getelementptr inbounds i8, i8* %0, i64 %4864
  %4866 = load i8, i8* %4865, align 1, !tbaa !387
  %4867 = insertelement <64 x i8> %4862, i8 %4866, i32 31
  %4868 = extractelement <64 x i32> %4707, i32 32
  %4869 = sext i32 %4868 to i64
  %4870 = getelementptr inbounds i8, i8* %0, i64 %4869
  %4871 = load i8, i8* %4870, align 1, !tbaa !387
  %4872 = insertelement <64 x i8> %4867, i8 %4871, i32 32
  %4873 = extractelement <64 x i32> %4707, i32 33
  %4874 = sext i32 %4873 to i64
  %4875 = getelementptr inbounds i8, i8* %0, i64 %4874
  %4876 = load i8, i8* %4875, align 1, !tbaa !387
  %4877 = insertelement <64 x i8> %4872, i8 %4876, i32 33
  %4878 = extractelement <64 x i32> %4707, i32 34
  %4879 = sext i32 %4878 to i64
  %4880 = getelementptr inbounds i8, i8* %0, i64 %4879
  %4881 = load i8, i8* %4880, align 1, !tbaa !387
  %4882 = insertelement <64 x i8> %4877, i8 %4881, i32 34
  %4883 = extractelement <64 x i32> %4707, i32 35
  %4884 = sext i32 %4883 to i64
  %4885 = getelementptr inbounds i8, i8* %0, i64 %4884
  %4886 = load i8, i8* %4885, align 1, !tbaa !387
  %4887 = insertelement <64 x i8> %4882, i8 %4886, i32 35
  %4888 = extractelement <64 x i32> %4707, i32 36
  %4889 = sext i32 %4888 to i64
  %4890 = getelementptr inbounds i8, i8* %0, i64 %4889
  %4891 = load i8, i8* %4890, align 1, !tbaa !387
  %4892 = insertelement <64 x i8> %4887, i8 %4891, i32 36
  %4893 = extractelement <64 x i32> %4707, i32 37
  %4894 = sext i32 %4893 to i64
  %4895 = getelementptr inbounds i8, i8* %0, i64 %4894
  %4896 = load i8, i8* %4895, align 1, !tbaa !387
  %4897 = insertelement <64 x i8> %4892, i8 %4896, i32 37
  %4898 = extractelement <64 x i32> %4707, i32 38
  %4899 = sext i32 %4898 to i64
  %4900 = getelementptr inbounds i8, i8* %0, i64 %4899
  %4901 = load i8, i8* %4900, align 1, !tbaa !387
  %4902 = insertelement <64 x i8> %4897, i8 %4901, i32 38
  %4903 = extractelement <64 x i32> %4707, i32 39
  %4904 = sext i32 %4903 to i64
  %4905 = getelementptr inbounds i8, i8* %0, i64 %4904
  %4906 = load i8, i8* %4905, align 1, !tbaa !387
  %4907 = insertelement <64 x i8> %4902, i8 %4906, i32 39
  %4908 = extractelement <64 x i32> %4707, i32 40
  %4909 = sext i32 %4908 to i64
  %4910 = getelementptr inbounds i8, i8* %0, i64 %4909
  %4911 = load i8, i8* %4910, align 1, !tbaa !387
  %4912 = insertelement <64 x i8> %4907, i8 %4911, i32 40
  %4913 = extractelement <64 x i32> %4707, i32 41
  %4914 = sext i32 %4913 to i64
  %4915 = getelementptr inbounds i8, i8* %0, i64 %4914
  %4916 = load i8, i8* %4915, align 1, !tbaa !387
  %4917 = insertelement <64 x i8> %4912, i8 %4916, i32 41
  %4918 = extractelement <64 x i32> %4707, i32 42
  %4919 = sext i32 %4918 to i64
  %4920 = getelementptr inbounds i8, i8* %0, i64 %4919
  %4921 = load i8, i8* %4920, align 1, !tbaa !387
  %4922 = insertelement <64 x i8> %4917, i8 %4921, i32 42
  %4923 = extractelement <64 x i32> %4707, i32 43
  %4924 = sext i32 %4923 to i64
  %4925 = getelementptr inbounds i8, i8* %0, i64 %4924
  %4926 = load i8, i8* %4925, align 1, !tbaa !387
  %4927 = insertelement <64 x i8> %4922, i8 %4926, i32 43
  %4928 = extractelement <64 x i32> %4707, i32 44
  %4929 = sext i32 %4928 to i64
  %4930 = getelementptr inbounds i8, i8* %0, i64 %4929
  %4931 = load i8, i8* %4930, align 1, !tbaa !387
  %4932 = insertelement <64 x i8> %4927, i8 %4931, i32 44
  %4933 = extractelement <64 x i32> %4707, i32 45
  %4934 = sext i32 %4933 to i64
  %4935 = getelementptr inbounds i8, i8* %0, i64 %4934
  %4936 = load i8, i8* %4935, align 1, !tbaa !387
  %4937 = insertelement <64 x i8> %4932, i8 %4936, i32 45
  %4938 = extractelement <64 x i32> %4707, i32 46
  %4939 = sext i32 %4938 to i64
  %4940 = getelementptr inbounds i8, i8* %0, i64 %4939
  %4941 = load i8, i8* %4940, align 1, !tbaa !387
  %4942 = insertelement <64 x i8> %4937, i8 %4941, i32 46
  %4943 = extractelement <64 x i32> %4707, i32 47
  %4944 = sext i32 %4943 to i64
  %4945 = getelementptr inbounds i8, i8* %0, i64 %4944
  %4946 = load i8, i8* %4945, align 1, !tbaa !387
  %4947 = insertelement <64 x i8> %4942, i8 %4946, i32 47
  %4948 = extractelement <64 x i32> %4707, i32 48
  %4949 = sext i32 %4948 to i64
  %4950 = getelementptr inbounds i8, i8* %0, i64 %4949
  %4951 = load i8, i8* %4950, align 1, !tbaa !387
  %4952 = insertelement <64 x i8> %4947, i8 %4951, i32 48
  %4953 = extractelement <64 x i32> %4707, i32 49
  %4954 = sext i32 %4953 to i64
  %4955 = getelementptr inbounds i8, i8* %0, i64 %4954
  %4956 = load i8, i8* %4955, align 1, !tbaa !387
  %4957 = insertelement <64 x i8> %4952, i8 %4956, i32 49
  %4958 = extractelement <64 x i32> %4707, i32 50
  %4959 = sext i32 %4958 to i64
  %4960 = getelementptr inbounds i8, i8* %0, i64 %4959
  %4961 = load i8, i8* %4960, align 1, !tbaa !387
  %4962 = insertelement <64 x i8> %4957, i8 %4961, i32 50
  %4963 = extractelement <64 x i32> %4707, i32 51
  %4964 = sext i32 %4963 to i64
  %4965 = getelementptr inbounds i8, i8* %0, i64 %4964
  %4966 = load i8, i8* %4965, align 1, !tbaa !387
  %4967 = insertelement <64 x i8> %4962, i8 %4966, i32 51
  %4968 = extractelement <64 x i32> %4707, i32 52
  %4969 = sext i32 %4968 to i64
  %4970 = getelementptr inbounds i8, i8* %0, i64 %4969
  %4971 = load i8, i8* %4970, align 1, !tbaa !387
  %4972 = insertelement <64 x i8> %4967, i8 %4971, i32 52
  %4973 = extractelement <64 x i32> %4707, i32 53
  %4974 = sext i32 %4973 to i64
  %4975 = getelementptr inbounds i8, i8* %0, i64 %4974
  %4976 = load i8, i8* %4975, align 1, !tbaa !387
  %4977 = insertelement <64 x i8> %4972, i8 %4976, i32 53
  %4978 = extractelement <64 x i32> %4707, i32 54
  %4979 = sext i32 %4978 to i64
  %4980 = getelementptr inbounds i8, i8* %0, i64 %4979
  %4981 = load i8, i8* %4980, align 1, !tbaa !387
  %4982 = insertelement <64 x i8> %4977, i8 %4981, i32 54
  %4983 = extractelement <64 x i32> %4707, i32 55
  %4984 = sext i32 %4983 to i64
  %4985 = getelementptr inbounds i8, i8* %0, i64 %4984
  %4986 = load i8, i8* %4985, align 1, !tbaa !387
  %4987 = insertelement <64 x i8> %4982, i8 %4986, i32 55
  %4988 = extractelement <64 x i32> %4707, i32 56
  %4989 = sext i32 %4988 to i64
  %4990 = getelementptr inbounds i8, i8* %0, i64 %4989
  %4991 = load i8, i8* %4990, align 1, !tbaa !387
  %4992 = insertelement <64 x i8> %4987, i8 %4991, i32 56
  %4993 = extractelement <64 x i32> %4707, i32 57
  %4994 = sext i32 %4993 to i64
  %4995 = getelementptr inbounds i8, i8* %0, i64 %4994
  %4996 = load i8, i8* %4995, align 1, !tbaa !387
  %4997 = insertelement <64 x i8> %4992, i8 %4996, i32 57
  %4998 = extractelement <64 x i32> %4707, i32 58
  %4999 = sext i32 %4998 to i64
  %5000 = getelementptr inbounds i8, i8* %0, i64 %4999
  %5001 = load i8, i8* %5000, align 1, !tbaa !387
  %5002 = insertelement <64 x i8> %4997, i8 %5001, i32 58
  %5003 = extractelement <64 x i32> %4707, i32 59
  %5004 = sext i32 %5003 to i64
  %5005 = getelementptr inbounds i8, i8* %0, i64 %5004
  %5006 = load i8, i8* %5005, align 1, !tbaa !387
  %5007 = insertelement <64 x i8> %5002, i8 %5006, i32 59
  %5008 = extractelement <64 x i32> %4707, i32 60
  %5009 = sext i32 %5008 to i64
  %5010 = getelementptr inbounds i8, i8* %0, i64 %5009
  %5011 = load i8, i8* %5010, align 1, !tbaa !387
  %5012 = insertelement <64 x i8> %5007, i8 %5011, i32 60
  %5013 = extractelement <64 x i32> %4707, i32 61
  %5014 = sext i32 %5013 to i64
  %5015 = getelementptr inbounds i8, i8* %0, i64 %5014
  %5016 = load i8, i8* %5015, align 1, !tbaa !387
  %5017 = insertelement <64 x i8> %5012, i8 %5016, i32 61
  %5018 = extractelement <64 x i32> %4707, i32 62
  %5019 = sext i32 %5018 to i64
  %5020 = getelementptr inbounds i8, i8* %0, i64 %5019
  %5021 = load i8, i8* %5020, align 1, !tbaa !387
  %5022 = insertelement <64 x i8> %5017, i8 %5021, i32 62
  %5023 = extractelement <64 x i32> %4707, i32 63
  %5024 = sext i32 %5023 to i64
  %5025 = getelementptr inbounds i8, i8* %0, i64 %5024
  %5026 = load i8, i8* %5025, align 1, !tbaa !387
  %5027 = insertelement <64 x i8> %5022, i8 %5026, i32 63
  %5028 = shufflevector <64 x i8> %5027, <64 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5029 = add nuw nsw i64 %indvars.iv357, %4307
  %5030 = mul nsw i64 %70, %5029
  %5031 = getelementptr inbounds i8, i8* %bounded_input52, i64 %5030
  %5032 = bitcast i8* %5031 to <16 x i8>*
  store <16 x i8> %5028, <16 x i8>* %5032, align 16, !tbaa !390
  %5033 = shufflevector <64 x i8> %5027, <64 x i8> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5034 = getelementptr inbounds i8, i8* %5031, i64 16
  %5035 = bitcast i8* %5034 to <16 x i8>*
  store <16 x i8> %5033, <16 x i8>* %5035, align 16, !tbaa !390
  %5036 = shufflevector <64 x i8> %5027, <64 x i8> undef, <16 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %5037 = getelementptr inbounds i8, i8* %5031, i64 32
  %5038 = bitcast i8* %5037 to <16 x i8>*
  store <16 x i8> %5036, <16 x i8>* %5038, align 16, !tbaa !390
  %5039 = shufflevector <64 x i8> %5027, <64 x i8> undef, <16 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %5040 = getelementptr inbounds i8, i8* %5031, i64 48
  %5041 = bitcast i8* %5040 to <16 x i8>*
  store <16 x i8> %5039, <16 x i8>* %5041, align 16, !tbaa !390
  %5042 = add nuw i64 %indvars.iv357, %4308
  %5043 = trunc i64 %5042 to i32
  %5044 = mul i32 %71, %5043
  br i1 %72, label %"for bounded_input.s0.x.x.rebased73.preheader", label %"end for bounded_input.s0.x.x.rebased74", !prof !385

"for bounded_input.s0.x.x.rebased73.preheader":   ; preds = %"for bounded_input.s0.y.rebased68"
  %t9572 = add nsw i32 %5044, %b28
  %5045 = sext i32 %4704 to i64
  %5046 = sext i32 %t9572 to i64
  br label %"for bounded_input.s0.x.x.rebased73"

"end for bounded_input.s0.y.rebased69":           ; preds = %"end for bounded_input.s0.x.x.rebased79", %after_bb56
  %5047 = select i1 %.not186, i32 %b36, i32 %a34
  %t9884 = sub nsw i32 %a33, %5047
  %5048 = icmp sgt i32 %t9884, -9
  br i1 %5048, label %"for bounded_input.s0.y.rebased85.preheader", label %"consume bounded_input93", !prof !385

"for bounded_input.s0.y.rebased85.preheader":     ; preds = %"end for bounded_input.s0.y.rebased69"
  %5049 = add nsw i32 %t9884, 8
  %5050 = sext i32 %5047 to i64
  %5051 = zext i32 %5049 to i64
  br label %"for bounded_input.s0.y.rebased85"

"for bounded_input.s0.x.x.rebased73":             ; preds = %"for bounded_input.s0.x.x.rebased73.preheader", %"for bounded_input.s0.x.x.rebased73"
  %indvars.iv353 = phi i64 [ 0, %"for bounded_input.s0.x.x.rebased73.preheader" ], [ %indvars.iv.next354, %"for bounded_input.s0.x.x.rebased73" ]
  %5052 = add nsw i64 %indvars.iv353, %73
  %5053 = shl nsw i64 %5052, 6
  %5054 = add nsw i64 %5053, %5045
  %5055 = getelementptr inbounds i8, i8* %0, i64 %5054
  %5056 = getelementptr inbounds i8, i8* %5055, i64 63
  %5057 = bitcast i8* %5056 to <16 x i8>*
  %5058 = load <16 x i8>, <16 x i8>* %5057, align 1, !tbaa !387
  %5059 = getelementptr inbounds i8, i8* %5055, i64 79
  %5060 = bitcast i8* %5059 to <16 x i8>*
  %5061 = load <16 x i8>, <16 x i8>* %5060, align 1, !tbaa !387
  %5062 = getelementptr inbounds i8, i8* %5055, i64 95
  %5063 = bitcast i8* %5062 to <16 x i8>*
  %5064 = load <16 x i8>, <16 x i8>* %5063, align 1, !tbaa !387
  %5065 = getelementptr inbounds i8, i8* %5055, i64 111
  %5066 = bitcast i8* %5065 to <16 x i8>*
  %5067 = load <16 x i8>, <16 x i8>* %5066, align 1, !tbaa !387
  %5068 = add nsw i64 %indvars.iv353, %5046
  %5069 = shl nsw i64 %5068, 6
  %5070 = getelementptr inbounds i8, i8* %bounded_input52, i64 %5069
  %5071 = getelementptr inbounds i8, i8* %5070, i64 64
  %5072 = bitcast i8* %5071 to <16 x i8>*
  store <16 x i8> %5058, <16 x i8>* %5072, align 16, !tbaa !390
  %5073 = getelementptr inbounds i8, i8* %5070, i64 80
  %5074 = bitcast i8* %5073 to <16 x i8>*
  store <16 x i8> %5061, <16 x i8>* %5074, align 16, !tbaa !390
  %5075 = getelementptr inbounds i8, i8* %5070, i64 96
  %5076 = bitcast i8* %5075 to <16 x i8>*
  store <16 x i8> %5064, <16 x i8>* %5076, align 16, !tbaa !390
  %5077 = getelementptr inbounds i8, i8* %5070, i64 112
  %5078 = bitcast i8* %5077 to <16 x i8>*
  store <16 x i8> %5067, <16 x i8>* %5078, align 16, !tbaa !390
  %indvars.iv.next354 = add nuw nsw i64 %indvars.iv353, 1
  %.not210 = icmp eq i64 %indvars.iv.next354, %85
  br i1 %.not210, label %"end for bounded_input.s0.x.x.rebased74", label %"for bounded_input.s0.x.x.rebased73"

"end for bounded_input.s0.x.x.rebased74":         ; preds = %"for bounded_input.s0.x.x.rebased73", %"for bounded_input.s0.y.rebased68"
  br i1 %74, label %"for bounded_input.s0.x.x.rebased78.preheader", label %"end for bounded_input.s0.x.x.rebased79", !prof !385

"for bounded_input.s0.x.x.rebased78.preheader":   ; preds = %"end for bounded_input.s0.x.x.rebased74"
  %t9777 = add nsw i32 %5044, %t7946
  %5079 = sext i32 %t9777 to i64
  br label %"for bounded_input.s0.x.x.rebased78"

"for bounded_input.s0.x.x.rebased78":             ; preds = %"for bounded_input.s0.x.x.rebased78.preheader", %"for bounded_input.s0.x.x.rebased78"
  %indvars.iv355 = phi i64 [ 0, %"for bounded_input.s0.x.x.rebased78.preheader" ], [ %indvars.iv.next356, %"for bounded_input.s0.x.x.rebased78" ]
  %5080 = trunc i64 %indvars.iv355 to i32
  %5081 = add nsw i32 %t7946, %5080
  %5082 = shl nsw i32 %5081, 6
  %5083 = or i32 %5082, 63
  %5084 = insertelement <64 x i32> undef, i32 %5083, i32 0
  %5085 = shufflevector <64 x i32> %5084, <64 x i32> undef, <64 x i32> zeroinitializer
  %5086 = add nsw <64 x i32> %5085, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %5087 = shufflevector <64 x i32> %5086, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %5088 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5087, <4 x i32> %68)
  %5089 = shufflevector <64 x i32> %5086, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5090 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5089, <4 x i32> %68)
  %5091 = shufflevector <64 x i32> %5086, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %5092 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5091, <4 x i32> %68)
  %5093 = shufflevector <64 x i32> %5086, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %5094 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5093, <4 x i32> %68)
  %5095 = shufflevector <64 x i32> %5086, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %5096 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5095, <4 x i32> %68)
  %5097 = shufflevector <64 x i32> %5086, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %5098 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5097, <4 x i32> %68)
  %5099 = shufflevector <64 x i32> %5086, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %5100 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5099, <4 x i32> %68)
  %5101 = shufflevector <64 x i32> %5086, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %5102 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5101, <4 x i32> %68)
  %5103 = shufflevector <64 x i32> %5086, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %5104 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5103, <4 x i32> %68)
  %5105 = shufflevector <64 x i32> %5086, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %5106 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5105, <4 x i32> %68)
  %5107 = shufflevector <64 x i32> %5086, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %5108 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5107, <4 x i32> %68)
  %5109 = shufflevector <64 x i32> %5086, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %5110 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5109, <4 x i32> %68)
  %5111 = shufflevector <64 x i32> %5086, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %5112 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5111, <4 x i32> %68)
  %5113 = shufflevector <64 x i32> %5086, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %5114 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5113, <4 x i32> %68)
  %5115 = shufflevector <64 x i32> %5086, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %5116 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5115, <4 x i32> %68)
  %5117 = shufflevector <64 x i32> %5086, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %5118 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5117, <4 x i32> %68)
  %5119 = shufflevector <4 x i32> %5118, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %5120 = shufflevector <8 x i32> %5119, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %5121 = shufflevector <16 x i32> %5120, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %5122 = shufflevector <32 x i32> %5121, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %5123 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5088, <4 x i32> zeroinitializer)
  %5124 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5090, <4 x i32> zeroinitializer)
  %5125 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5092, <4 x i32> zeroinitializer)
  %5126 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5094, <4 x i32> zeroinitializer)
  %5127 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5096, <4 x i32> zeroinitializer)
  %5128 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5098, <4 x i32> zeroinitializer)
  %5129 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5100, <4 x i32> zeroinitializer)
  %5130 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5102, <4 x i32> zeroinitializer)
  %5131 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5104, <4 x i32> zeroinitializer)
  %5132 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5106, <4 x i32> zeroinitializer)
  %5133 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5108, <4 x i32> zeroinitializer)
  %5134 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5110, <4 x i32> zeroinitializer)
  %5135 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5112, <4 x i32> zeroinitializer)
  %5136 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5114, <4 x i32> zeroinitializer)
  %5137 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5116, <4 x i32> zeroinitializer)
  %5138 = shufflevector <64 x i32> %5122, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %5139 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5138, <4 x i32> zeroinitializer)
  %5140 = shufflevector <4 x i32> %5123, <4 x i32> %5124, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %5141 = shufflevector <4 x i32> %5125, <4 x i32> %5126, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %5142 = shufflevector <4 x i32> %5127, <4 x i32> %5128, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %5143 = shufflevector <4 x i32> %5129, <4 x i32> %5130, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %5144 = shufflevector <4 x i32> %5131, <4 x i32> %5132, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %5145 = shufflevector <4 x i32> %5133, <4 x i32> %5134, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %5146 = shufflevector <4 x i32> %5135, <4 x i32> %5136, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %5147 = shufflevector <4 x i32> %5137, <4 x i32> %5139, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %5148 = shufflevector <8 x i32> %5140, <8 x i32> %5141, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5149 = shufflevector <8 x i32> %5142, <8 x i32> %5143, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5150 = shufflevector <8 x i32> %5144, <8 x i32> %5145, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5151 = shufflevector <8 x i32> %5146, <8 x i32> %5147, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5152 = shufflevector <16 x i32> %5148, <16 x i32> %5149, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5153 = shufflevector <16 x i32> %5150, <16 x i32> %5151, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5154 = shufflevector <32 x i32> %5152, <32 x i32> %5153, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %5155 = add nsw <64 x i32> %5154, %4706
  %5156 = extractelement <64 x i32> %5155, i32 0
  %5157 = sext i32 %5156 to i64
  %5158 = getelementptr inbounds i8, i8* %0, i64 %5157
  %5159 = load i8, i8* %5158, align 1, !tbaa !387
  %5160 = insertelement <64 x i8> undef, i8 %5159, i32 0
  %5161 = extractelement <64 x i32> %5155, i32 1
  %5162 = sext i32 %5161 to i64
  %5163 = getelementptr inbounds i8, i8* %0, i64 %5162
  %5164 = load i8, i8* %5163, align 1, !tbaa !387
  %5165 = insertelement <64 x i8> %5160, i8 %5164, i32 1
  %5166 = extractelement <64 x i32> %5155, i32 2
  %5167 = sext i32 %5166 to i64
  %5168 = getelementptr inbounds i8, i8* %0, i64 %5167
  %5169 = load i8, i8* %5168, align 1, !tbaa !387
  %5170 = insertelement <64 x i8> %5165, i8 %5169, i32 2
  %5171 = extractelement <64 x i32> %5155, i32 3
  %5172 = sext i32 %5171 to i64
  %5173 = getelementptr inbounds i8, i8* %0, i64 %5172
  %5174 = load i8, i8* %5173, align 1, !tbaa !387
  %5175 = insertelement <64 x i8> %5170, i8 %5174, i32 3
  %5176 = extractelement <64 x i32> %5155, i32 4
  %5177 = sext i32 %5176 to i64
  %5178 = getelementptr inbounds i8, i8* %0, i64 %5177
  %5179 = load i8, i8* %5178, align 1, !tbaa !387
  %5180 = insertelement <64 x i8> %5175, i8 %5179, i32 4
  %5181 = extractelement <64 x i32> %5155, i32 5
  %5182 = sext i32 %5181 to i64
  %5183 = getelementptr inbounds i8, i8* %0, i64 %5182
  %5184 = load i8, i8* %5183, align 1, !tbaa !387
  %5185 = insertelement <64 x i8> %5180, i8 %5184, i32 5
  %5186 = extractelement <64 x i32> %5155, i32 6
  %5187 = sext i32 %5186 to i64
  %5188 = getelementptr inbounds i8, i8* %0, i64 %5187
  %5189 = load i8, i8* %5188, align 1, !tbaa !387
  %5190 = insertelement <64 x i8> %5185, i8 %5189, i32 6
  %5191 = extractelement <64 x i32> %5155, i32 7
  %5192 = sext i32 %5191 to i64
  %5193 = getelementptr inbounds i8, i8* %0, i64 %5192
  %5194 = load i8, i8* %5193, align 1, !tbaa !387
  %5195 = insertelement <64 x i8> %5190, i8 %5194, i32 7
  %5196 = extractelement <64 x i32> %5155, i32 8
  %5197 = sext i32 %5196 to i64
  %5198 = getelementptr inbounds i8, i8* %0, i64 %5197
  %5199 = load i8, i8* %5198, align 1, !tbaa !387
  %5200 = insertelement <64 x i8> %5195, i8 %5199, i32 8
  %5201 = extractelement <64 x i32> %5155, i32 9
  %5202 = sext i32 %5201 to i64
  %5203 = getelementptr inbounds i8, i8* %0, i64 %5202
  %5204 = load i8, i8* %5203, align 1, !tbaa !387
  %5205 = insertelement <64 x i8> %5200, i8 %5204, i32 9
  %5206 = extractelement <64 x i32> %5155, i32 10
  %5207 = sext i32 %5206 to i64
  %5208 = getelementptr inbounds i8, i8* %0, i64 %5207
  %5209 = load i8, i8* %5208, align 1, !tbaa !387
  %5210 = insertelement <64 x i8> %5205, i8 %5209, i32 10
  %5211 = extractelement <64 x i32> %5155, i32 11
  %5212 = sext i32 %5211 to i64
  %5213 = getelementptr inbounds i8, i8* %0, i64 %5212
  %5214 = load i8, i8* %5213, align 1, !tbaa !387
  %5215 = insertelement <64 x i8> %5210, i8 %5214, i32 11
  %5216 = extractelement <64 x i32> %5155, i32 12
  %5217 = sext i32 %5216 to i64
  %5218 = getelementptr inbounds i8, i8* %0, i64 %5217
  %5219 = load i8, i8* %5218, align 1, !tbaa !387
  %5220 = insertelement <64 x i8> %5215, i8 %5219, i32 12
  %5221 = extractelement <64 x i32> %5155, i32 13
  %5222 = sext i32 %5221 to i64
  %5223 = getelementptr inbounds i8, i8* %0, i64 %5222
  %5224 = load i8, i8* %5223, align 1, !tbaa !387
  %5225 = insertelement <64 x i8> %5220, i8 %5224, i32 13
  %5226 = extractelement <64 x i32> %5155, i32 14
  %5227 = sext i32 %5226 to i64
  %5228 = getelementptr inbounds i8, i8* %0, i64 %5227
  %5229 = load i8, i8* %5228, align 1, !tbaa !387
  %5230 = insertelement <64 x i8> %5225, i8 %5229, i32 14
  %5231 = extractelement <64 x i32> %5155, i32 15
  %5232 = sext i32 %5231 to i64
  %5233 = getelementptr inbounds i8, i8* %0, i64 %5232
  %5234 = load i8, i8* %5233, align 1, !tbaa !387
  %5235 = insertelement <64 x i8> %5230, i8 %5234, i32 15
  %5236 = extractelement <64 x i32> %5155, i32 16
  %5237 = sext i32 %5236 to i64
  %5238 = getelementptr inbounds i8, i8* %0, i64 %5237
  %5239 = load i8, i8* %5238, align 1, !tbaa !387
  %5240 = insertelement <64 x i8> %5235, i8 %5239, i32 16
  %5241 = extractelement <64 x i32> %5155, i32 17
  %5242 = sext i32 %5241 to i64
  %5243 = getelementptr inbounds i8, i8* %0, i64 %5242
  %5244 = load i8, i8* %5243, align 1, !tbaa !387
  %5245 = insertelement <64 x i8> %5240, i8 %5244, i32 17
  %5246 = extractelement <64 x i32> %5155, i32 18
  %5247 = sext i32 %5246 to i64
  %5248 = getelementptr inbounds i8, i8* %0, i64 %5247
  %5249 = load i8, i8* %5248, align 1, !tbaa !387
  %5250 = insertelement <64 x i8> %5245, i8 %5249, i32 18
  %5251 = extractelement <64 x i32> %5155, i32 19
  %5252 = sext i32 %5251 to i64
  %5253 = getelementptr inbounds i8, i8* %0, i64 %5252
  %5254 = load i8, i8* %5253, align 1, !tbaa !387
  %5255 = insertelement <64 x i8> %5250, i8 %5254, i32 19
  %5256 = extractelement <64 x i32> %5155, i32 20
  %5257 = sext i32 %5256 to i64
  %5258 = getelementptr inbounds i8, i8* %0, i64 %5257
  %5259 = load i8, i8* %5258, align 1, !tbaa !387
  %5260 = insertelement <64 x i8> %5255, i8 %5259, i32 20
  %5261 = extractelement <64 x i32> %5155, i32 21
  %5262 = sext i32 %5261 to i64
  %5263 = getelementptr inbounds i8, i8* %0, i64 %5262
  %5264 = load i8, i8* %5263, align 1, !tbaa !387
  %5265 = insertelement <64 x i8> %5260, i8 %5264, i32 21
  %5266 = extractelement <64 x i32> %5155, i32 22
  %5267 = sext i32 %5266 to i64
  %5268 = getelementptr inbounds i8, i8* %0, i64 %5267
  %5269 = load i8, i8* %5268, align 1, !tbaa !387
  %5270 = insertelement <64 x i8> %5265, i8 %5269, i32 22
  %5271 = extractelement <64 x i32> %5155, i32 23
  %5272 = sext i32 %5271 to i64
  %5273 = getelementptr inbounds i8, i8* %0, i64 %5272
  %5274 = load i8, i8* %5273, align 1, !tbaa !387
  %5275 = insertelement <64 x i8> %5270, i8 %5274, i32 23
  %5276 = extractelement <64 x i32> %5155, i32 24
  %5277 = sext i32 %5276 to i64
  %5278 = getelementptr inbounds i8, i8* %0, i64 %5277
  %5279 = load i8, i8* %5278, align 1, !tbaa !387
  %5280 = insertelement <64 x i8> %5275, i8 %5279, i32 24
  %5281 = extractelement <64 x i32> %5155, i32 25
  %5282 = sext i32 %5281 to i64
  %5283 = getelementptr inbounds i8, i8* %0, i64 %5282
  %5284 = load i8, i8* %5283, align 1, !tbaa !387
  %5285 = insertelement <64 x i8> %5280, i8 %5284, i32 25
  %5286 = extractelement <64 x i32> %5155, i32 26
  %5287 = sext i32 %5286 to i64
  %5288 = getelementptr inbounds i8, i8* %0, i64 %5287
  %5289 = load i8, i8* %5288, align 1, !tbaa !387
  %5290 = insertelement <64 x i8> %5285, i8 %5289, i32 26
  %5291 = extractelement <64 x i32> %5155, i32 27
  %5292 = sext i32 %5291 to i64
  %5293 = getelementptr inbounds i8, i8* %0, i64 %5292
  %5294 = load i8, i8* %5293, align 1, !tbaa !387
  %5295 = insertelement <64 x i8> %5290, i8 %5294, i32 27
  %5296 = extractelement <64 x i32> %5155, i32 28
  %5297 = sext i32 %5296 to i64
  %5298 = getelementptr inbounds i8, i8* %0, i64 %5297
  %5299 = load i8, i8* %5298, align 1, !tbaa !387
  %5300 = insertelement <64 x i8> %5295, i8 %5299, i32 28
  %5301 = extractelement <64 x i32> %5155, i32 29
  %5302 = sext i32 %5301 to i64
  %5303 = getelementptr inbounds i8, i8* %0, i64 %5302
  %5304 = load i8, i8* %5303, align 1, !tbaa !387
  %5305 = insertelement <64 x i8> %5300, i8 %5304, i32 29
  %5306 = extractelement <64 x i32> %5155, i32 30
  %5307 = sext i32 %5306 to i64
  %5308 = getelementptr inbounds i8, i8* %0, i64 %5307
  %5309 = load i8, i8* %5308, align 1, !tbaa !387
  %5310 = insertelement <64 x i8> %5305, i8 %5309, i32 30
  %5311 = extractelement <64 x i32> %5155, i32 31
  %5312 = sext i32 %5311 to i64
  %5313 = getelementptr inbounds i8, i8* %0, i64 %5312
  %5314 = load i8, i8* %5313, align 1, !tbaa !387
  %5315 = insertelement <64 x i8> %5310, i8 %5314, i32 31
  %5316 = extractelement <64 x i32> %5155, i32 32
  %5317 = sext i32 %5316 to i64
  %5318 = getelementptr inbounds i8, i8* %0, i64 %5317
  %5319 = load i8, i8* %5318, align 1, !tbaa !387
  %5320 = insertelement <64 x i8> %5315, i8 %5319, i32 32
  %5321 = extractelement <64 x i32> %5155, i32 33
  %5322 = sext i32 %5321 to i64
  %5323 = getelementptr inbounds i8, i8* %0, i64 %5322
  %5324 = load i8, i8* %5323, align 1, !tbaa !387
  %5325 = insertelement <64 x i8> %5320, i8 %5324, i32 33
  %5326 = extractelement <64 x i32> %5155, i32 34
  %5327 = sext i32 %5326 to i64
  %5328 = getelementptr inbounds i8, i8* %0, i64 %5327
  %5329 = load i8, i8* %5328, align 1, !tbaa !387
  %5330 = insertelement <64 x i8> %5325, i8 %5329, i32 34
  %5331 = extractelement <64 x i32> %5155, i32 35
  %5332 = sext i32 %5331 to i64
  %5333 = getelementptr inbounds i8, i8* %0, i64 %5332
  %5334 = load i8, i8* %5333, align 1, !tbaa !387
  %5335 = insertelement <64 x i8> %5330, i8 %5334, i32 35
  %5336 = extractelement <64 x i32> %5155, i32 36
  %5337 = sext i32 %5336 to i64
  %5338 = getelementptr inbounds i8, i8* %0, i64 %5337
  %5339 = load i8, i8* %5338, align 1, !tbaa !387
  %5340 = insertelement <64 x i8> %5335, i8 %5339, i32 36
  %5341 = extractelement <64 x i32> %5155, i32 37
  %5342 = sext i32 %5341 to i64
  %5343 = getelementptr inbounds i8, i8* %0, i64 %5342
  %5344 = load i8, i8* %5343, align 1, !tbaa !387
  %5345 = insertelement <64 x i8> %5340, i8 %5344, i32 37
  %5346 = extractelement <64 x i32> %5155, i32 38
  %5347 = sext i32 %5346 to i64
  %5348 = getelementptr inbounds i8, i8* %0, i64 %5347
  %5349 = load i8, i8* %5348, align 1, !tbaa !387
  %5350 = insertelement <64 x i8> %5345, i8 %5349, i32 38
  %5351 = extractelement <64 x i32> %5155, i32 39
  %5352 = sext i32 %5351 to i64
  %5353 = getelementptr inbounds i8, i8* %0, i64 %5352
  %5354 = load i8, i8* %5353, align 1, !tbaa !387
  %5355 = insertelement <64 x i8> %5350, i8 %5354, i32 39
  %5356 = extractelement <64 x i32> %5155, i32 40
  %5357 = sext i32 %5356 to i64
  %5358 = getelementptr inbounds i8, i8* %0, i64 %5357
  %5359 = load i8, i8* %5358, align 1, !tbaa !387
  %5360 = insertelement <64 x i8> %5355, i8 %5359, i32 40
  %5361 = extractelement <64 x i32> %5155, i32 41
  %5362 = sext i32 %5361 to i64
  %5363 = getelementptr inbounds i8, i8* %0, i64 %5362
  %5364 = load i8, i8* %5363, align 1, !tbaa !387
  %5365 = insertelement <64 x i8> %5360, i8 %5364, i32 41
  %5366 = extractelement <64 x i32> %5155, i32 42
  %5367 = sext i32 %5366 to i64
  %5368 = getelementptr inbounds i8, i8* %0, i64 %5367
  %5369 = load i8, i8* %5368, align 1, !tbaa !387
  %5370 = insertelement <64 x i8> %5365, i8 %5369, i32 42
  %5371 = extractelement <64 x i32> %5155, i32 43
  %5372 = sext i32 %5371 to i64
  %5373 = getelementptr inbounds i8, i8* %0, i64 %5372
  %5374 = load i8, i8* %5373, align 1, !tbaa !387
  %5375 = insertelement <64 x i8> %5370, i8 %5374, i32 43
  %5376 = extractelement <64 x i32> %5155, i32 44
  %5377 = sext i32 %5376 to i64
  %5378 = getelementptr inbounds i8, i8* %0, i64 %5377
  %5379 = load i8, i8* %5378, align 1, !tbaa !387
  %5380 = insertelement <64 x i8> %5375, i8 %5379, i32 44
  %5381 = extractelement <64 x i32> %5155, i32 45
  %5382 = sext i32 %5381 to i64
  %5383 = getelementptr inbounds i8, i8* %0, i64 %5382
  %5384 = load i8, i8* %5383, align 1, !tbaa !387
  %5385 = insertelement <64 x i8> %5380, i8 %5384, i32 45
  %5386 = extractelement <64 x i32> %5155, i32 46
  %5387 = sext i32 %5386 to i64
  %5388 = getelementptr inbounds i8, i8* %0, i64 %5387
  %5389 = load i8, i8* %5388, align 1, !tbaa !387
  %5390 = insertelement <64 x i8> %5385, i8 %5389, i32 46
  %5391 = extractelement <64 x i32> %5155, i32 47
  %5392 = sext i32 %5391 to i64
  %5393 = getelementptr inbounds i8, i8* %0, i64 %5392
  %5394 = load i8, i8* %5393, align 1, !tbaa !387
  %5395 = insertelement <64 x i8> %5390, i8 %5394, i32 47
  %5396 = extractelement <64 x i32> %5155, i32 48
  %5397 = sext i32 %5396 to i64
  %5398 = getelementptr inbounds i8, i8* %0, i64 %5397
  %5399 = load i8, i8* %5398, align 1, !tbaa !387
  %5400 = insertelement <64 x i8> %5395, i8 %5399, i32 48
  %5401 = extractelement <64 x i32> %5155, i32 49
  %5402 = sext i32 %5401 to i64
  %5403 = getelementptr inbounds i8, i8* %0, i64 %5402
  %5404 = load i8, i8* %5403, align 1, !tbaa !387
  %5405 = insertelement <64 x i8> %5400, i8 %5404, i32 49
  %5406 = extractelement <64 x i32> %5155, i32 50
  %5407 = sext i32 %5406 to i64
  %5408 = getelementptr inbounds i8, i8* %0, i64 %5407
  %5409 = load i8, i8* %5408, align 1, !tbaa !387
  %5410 = insertelement <64 x i8> %5405, i8 %5409, i32 50
  %5411 = extractelement <64 x i32> %5155, i32 51
  %5412 = sext i32 %5411 to i64
  %5413 = getelementptr inbounds i8, i8* %0, i64 %5412
  %5414 = load i8, i8* %5413, align 1, !tbaa !387
  %5415 = insertelement <64 x i8> %5410, i8 %5414, i32 51
  %5416 = extractelement <64 x i32> %5155, i32 52
  %5417 = sext i32 %5416 to i64
  %5418 = getelementptr inbounds i8, i8* %0, i64 %5417
  %5419 = load i8, i8* %5418, align 1, !tbaa !387
  %5420 = insertelement <64 x i8> %5415, i8 %5419, i32 52
  %5421 = extractelement <64 x i32> %5155, i32 53
  %5422 = sext i32 %5421 to i64
  %5423 = getelementptr inbounds i8, i8* %0, i64 %5422
  %5424 = load i8, i8* %5423, align 1, !tbaa !387
  %5425 = insertelement <64 x i8> %5420, i8 %5424, i32 53
  %5426 = extractelement <64 x i32> %5155, i32 54
  %5427 = sext i32 %5426 to i64
  %5428 = getelementptr inbounds i8, i8* %0, i64 %5427
  %5429 = load i8, i8* %5428, align 1, !tbaa !387
  %5430 = insertelement <64 x i8> %5425, i8 %5429, i32 54
  %5431 = extractelement <64 x i32> %5155, i32 55
  %5432 = sext i32 %5431 to i64
  %5433 = getelementptr inbounds i8, i8* %0, i64 %5432
  %5434 = load i8, i8* %5433, align 1, !tbaa !387
  %5435 = insertelement <64 x i8> %5430, i8 %5434, i32 55
  %5436 = extractelement <64 x i32> %5155, i32 56
  %5437 = sext i32 %5436 to i64
  %5438 = getelementptr inbounds i8, i8* %0, i64 %5437
  %5439 = load i8, i8* %5438, align 1, !tbaa !387
  %5440 = insertelement <64 x i8> %5435, i8 %5439, i32 56
  %5441 = extractelement <64 x i32> %5155, i32 57
  %5442 = sext i32 %5441 to i64
  %5443 = getelementptr inbounds i8, i8* %0, i64 %5442
  %5444 = load i8, i8* %5443, align 1, !tbaa !387
  %5445 = insertelement <64 x i8> %5440, i8 %5444, i32 57
  %5446 = extractelement <64 x i32> %5155, i32 58
  %5447 = sext i32 %5446 to i64
  %5448 = getelementptr inbounds i8, i8* %0, i64 %5447
  %5449 = load i8, i8* %5448, align 1, !tbaa !387
  %5450 = insertelement <64 x i8> %5445, i8 %5449, i32 58
  %5451 = extractelement <64 x i32> %5155, i32 59
  %5452 = sext i32 %5451 to i64
  %5453 = getelementptr inbounds i8, i8* %0, i64 %5452
  %5454 = load i8, i8* %5453, align 1, !tbaa !387
  %5455 = insertelement <64 x i8> %5450, i8 %5454, i32 59
  %5456 = extractelement <64 x i32> %5155, i32 60
  %5457 = sext i32 %5456 to i64
  %5458 = getelementptr inbounds i8, i8* %0, i64 %5457
  %5459 = load i8, i8* %5458, align 1, !tbaa !387
  %5460 = insertelement <64 x i8> %5455, i8 %5459, i32 60
  %5461 = extractelement <64 x i32> %5155, i32 61
  %5462 = sext i32 %5461 to i64
  %5463 = getelementptr inbounds i8, i8* %0, i64 %5462
  %5464 = load i8, i8* %5463, align 1, !tbaa !387
  %5465 = insertelement <64 x i8> %5460, i8 %5464, i32 61
  %5466 = extractelement <64 x i32> %5155, i32 62
  %5467 = sext i32 %5466 to i64
  %5468 = getelementptr inbounds i8, i8* %0, i64 %5467
  %5469 = load i8, i8* %5468, align 1, !tbaa !387
  %5470 = insertelement <64 x i8> %5465, i8 %5469, i32 62
  %5471 = extractelement <64 x i32> %5155, i32 63
  %5472 = sext i32 %5471 to i64
  %5473 = getelementptr inbounds i8, i8* %0, i64 %5472
  %5474 = load i8, i8* %5473, align 1, !tbaa !387
  %5475 = insertelement <64 x i8> %5470, i8 %5474, i32 63
  %5476 = shufflevector <64 x i8> %5475, <64 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5477 = add nsw i64 %indvars.iv355, %5079
  %5478 = shl nsw i64 %5477, 6
  %5479 = getelementptr inbounds i8, i8* %bounded_input52, i64 %5478
  %5480 = getelementptr inbounds i8, i8* %5479, i64 64
  %5481 = bitcast i8* %5480 to <16 x i8>*
  store <16 x i8> %5476, <16 x i8>* %5481, align 16, !tbaa !390
  %5482 = shufflevector <64 x i8> %5475, <64 x i8> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5483 = getelementptr inbounds i8, i8* %5479, i64 80
  %5484 = bitcast i8* %5483 to <16 x i8>*
  store <16 x i8> %5482, <16 x i8>* %5484, align 16, !tbaa !390
  %5485 = shufflevector <64 x i8> %5475, <64 x i8> undef, <16 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %5486 = getelementptr inbounds i8, i8* %5479, i64 96
  %5487 = bitcast i8* %5486 to <16 x i8>*
  store <16 x i8> %5485, <16 x i8>* %5487, align 16, !tbaa !390
  %5488 = shufflevector <64 x i8> %5475, <64 x i8> undef, <16 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %5489 = getelementptr inbounds i8, i8* %5479, i64 112
  %5490 = bitcast i8* %5489 to <16 x i8>*
  store <16 x i8> %5488, <16 x i8>* %5490, align 16, !tbaa !390
  %indvars.iv.next356 = add nuw nsw i64 %indvars.iv355, 1
  %.not209 = icmp eq i64 %indvars.iv.next356, %86
  br i1 %.not209, label %"end for bounded_input.s0.x.x.rebased79", label %"for bounded_input.s0.x.x.rebased78"

"end for bounded_input.s0.x.x.rebased79":         ; preds = %"for bounded_input.s0.x.x.rebased78", %"end for bounded_input.s0.x.x.rebased74"
  %indvars.iv.next358 = add nuw nsw i64 %indvars.iv357, 1
  %.not208 = icmp eq i64 %indvars.iv357, %4309
  br i1 %.not208, label %"end for bounded_input.s0.y.rebased69", label %"for bounded_input.s0.y.rebased68"

"for bounded_input.s0.y.rebased85":               ; preds = %"for bounded_input.s0.y.rebased85.preheader", %"end for bounded_input.s0.x.x91"
  %indvars.iv361 = phi i64 [ 0, %"for bounded_input.s0.y.rebased85.preheader" ], [ %5493, %"end for bounded_input.s0.x.x91" ]
  %5491 = add nsw i64 %indvars.iv361, %5050
  %.not205 = icmp slt i64 %5491, %87
  %5492 = trunc i64 %5491 to i32
  %a79 = select i1 %.not205, i32 %5492, i32 %a80
  %5493 = add nuw nsw i64 %indvars.iv361, 1
  br i1 %65, label %"for bounded_input.s0.x.x90.preheader", label %"end for bounded_input.s0.x.x91", !prof !385

"for bounded_input.s0.x.x90.preheader":           ; preds = %"for bounded_input.s0.y.rebased85"
  %5494 = trunc i64 %5493 to i32
  %5495 = sub i32 %5494, %a33
  %5496 = add i32 %5495, %5047
  %t10489 = mul i32 %71, %5496
  %5497 = icmp sgt i32 %a79, 0
  %5498 = select i1 %5497, i32 %a79, i32 0
  %t10388 = mul nsw i32 %5498, %49
  %5499 = insertelement <64 x i32> undef, i32 %t10388, i32 0
  %5500 = shufflevector <64 x i32> %5499, <64 x i32> undef, <64 x i32> zeroinitializer
  %5501 = sext i32 %t10489 to i64
  br label %"for bounded_input.s0.x.x90"

"for bounded_input.s0.x.x90":                     ; preds = %"for bounded_input.s0.x.x90.preheader", %"for bounded_input.s0.x.x90"
  %indvars.iv359 = phi i64 [ 0, %"for bounded_input.s0.x.x90.preheader" ], [ %indvars.iv.next360, %"for bounded_input.s0.x.x90" ]
  %5502 = trunc i64 %indvars.iv359 to i32
  %5503 = shl nsw i32 %5502, 6
  %5504 = add nsw i32 %5503, -1
  %5505 = insertelement <64 x i32> undef, i32 %5504, i32 0
  %5506 = shufflevector <64 x i32> %5505, <64 x i32> undef, <64 x i32> zeroinitializer
  %5507 = add nsw <64 x i32> %5506, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %5508 = shufflevector <64 x i32> %5507, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %5509 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5508, <4 x i32> %68)
  %5510 = shufflevector <64 x i32> %5507, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5511 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5510, <4 x i32> %68)
  %5512 = shufflevector <64 x i32> %5507, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %5513 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5512, <4 x i32> %68)
  %5514 = shufflevector <64 x i32> %5507, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %5515 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5514, <4 x i32> %68)
  %5516 = shufflevector <64 x i32> %5507, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %5517 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5516, <4 x i32> %68)
  %5518 = shufflevector <64 x i32> %5507, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %5519 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5518, <4 x i32> %68)
  %5520 = shufflevector <64 x i32> %5507, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %5521 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5520, <4 x i32> %68)
  %5522 = shufflevector <64 x i32> %5507, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %5523 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5522, <4 x i32> %68)
  %5524 = shufflevector <64 x i32> %5507, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %5525 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5524, <4 x i32> %68)
  %5526 = shufflevector <64 x i32> %5507, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %5527 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5526, <4 x i32> %68)
  %5528 = shufflevector <64 x i32> %5507, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %5529 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5528, <4 x i32> %68)
  %5530 = shufflevector <64 x i32> %5507, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %5531 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5530, <4 x i32> %68)
  %5532 = shufflevector <64 x i32> %5507, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %5533 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5532, <4 x i32> %68)
  %5534 = shufflevector <64 x i32> %5507, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %5535 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5534, <4 x i32> %68)
  %5536 = shufflevector <64 x i32> %5507, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %5537 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5536, <4 x i32> %68)
  %5538 = shufflevector <64 x i32> %5507, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %5539 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5538, <4 x i32> %68)
  %5540 = shufflevector <4 x i32> %5539, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %5541 = shufflevector <8 x i32> %5540, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %5542 = shufflevector <16 x i32> %5541, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %5543 = shufflevector <32 x i32> %5542, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %5544 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5509, <4 x i32> zeroinitializer)
  %5545 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5511, <4 x i32> zeroinitializer)
  %5546 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5513, <4 x i32> zeroinitializer)
  %5547 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5515, <4 x i32> zeroinitializer)
  %5548 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5517, <4 x i32> zeroinitializer)
  %5549 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5519, <4 x i32> zeroinitializer)
  %5550 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5521, <4 x i32> zeroinitializer)
  %5551 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5523, <4 x i32> zeroinitializer)
  %5552 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5525, <4 x i32> zeroinitializer)
  %5553 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5527, <4 x i32> zeroinitializer)
  %5554 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5529, <4 x i32> zeroinitializer)
  %5555 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5531, <4 x i32> zeroinitializer)
  %5556 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5533, <4 x i32> zeroinitializer)
  %5557 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5535, <4 x i32> zeroinitializer)
  %5558 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5537, <4 x i32> zeroinitializer)
  %5559 = shufflevector <64 x i32> %5543, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %5560 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5559, <4 x i32> zeroinitializer)
  %5561 = shufflevector <4 x i32> %5544, <4 x i32> %5545, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %5562 = shufflevector <4 x i32> %5546, <4 x i32> %5547, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %5563 = shufflevector <4 x i32> %5548, <4 x i32> %5549, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %5564 = shufflevector <4 x i32> %5550, <4 x i32> %5551, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %5565 = shufflevector <4 x i32> %5552, <4 x i32> %5553, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %5566 = shufflevector <4 x i32> %5554, <4 x i32> %5555, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %5567 = shufflevector <4 x i32> %5556, <4 x i32> %5557, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %5568 = shufflevector <4 x i32> %5558, <4 x i32> %5560, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %5569 = shufflevector <8 x i32> %5561, <8 x i32> %5562, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5570 = shufflevector <8 x i32> %5563, <8 x i32> %5564, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5571 = shufflevector <8 x i32> %5565, <8 x i32> %5566, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5572 = shufflevector <8 x i32> %5567, <8 x i32> %5568, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5573 = shufflevector <16 x i32> %5569, <16 x i32> %5570, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5574 = shufflevector <16 x i32> %5571, <16 x i32> %5572, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5575 = shufflevector <32 x i32> %5573, <32 x i32> %5574, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %5576 = add nsw <64 x i32> %5575, %5500
  %5577 = extractelement <64 x i32> %5576, i32 0
  %5578 = sext i32 %5577 to i64
  %5579 = getelementptr inbounds i8, i8* %0, i64 %5578
  %5580 = load i8, i8* %5579, align 1, !tbaa !387
  %5581 = insertelement <64 x i8> undef, i8 %5580, i32 0
  %5582 = extractelement <64 x i32> %5576, i32 1
  %5583 = sext i32 %5582 to i64
  %5584 = getelementptr inbounds i8, i8* %0, i64 %5583
  %5585 = load i8, i8* %5584, align 1, !tbaa !387
  %5586 = insertelement <64 x i8> %5581, i8 %5585, i32 1
  %5587 = extractelement <64 x i32> %5576, i32 2
  %5588 = sext i32 %5587 to i64
  %5589 = getelementptr inbounds i8, i8* %0, i64 %5588
  %5590 = load i8, i8* %5589, align 1, !tbaa !387
  %5591 = insertelement <64 x i8> %5586, i8 %5590, i32 2
  %5592 = extractelement <64 x i32> %5576, i32 3
  %5593 = sext i32 %5592 to i64
  %5594 = getelementptr inbounds i8, i8* %0, i64 %5593
  %5595 = load i8, i8* %5594, align 1, !tbaa !387
  %5596 = insertelement <64 x i8> %5591, i8 %5595, i32 3
  %5597 = extractelement <64 x i32> %5576, i32 4
  %5598 = sext i32 %5597 to i64
  %5599 = getelementptr inbounds i8, i8* %0, i64 %5598
  %5600 = load i8, i8* %5599, align 1, !tbaa !387
  %5601 = insertelement <64 x i8> %5596, i8 %5600, i32 4
  %5602 = extractelement <64 x i32> %5576, i32 5
  %5603 = sext i32 %5602 to i64
  %5604 = getelementptr inbounds i8, i8* %0, i64 %5603
  %5605 = load i8, i8* %5604, align 1, !tbaa !387
  %5606 = insertelement <64 x i8> %5601, i8 %5605, i32 5
  %5607 = extractelement <64 x i32> %5576, i32 6
  %5608 = sext i32 %5607 to i64
  %5609 = getelementptr inbounds i8, i8* %0, i64 %5608
  %5610 = load i8, i8* %5609, align 1, !tbaa !387
  %5611 = insertelement <64 x i8> %5606, i8 %5610, i32 6
  %5612 = extractelement <64 x i32> %5576, i32 7
  %5613 = sext i32 %5612 to i64
  %5614 = getelementptr inbounds i8, i8* %0, i64 %5613
  %5615 = load i8, i8* %5614, align 1, !tbaa !387
  %5616 = insertelement <64 x i8> %5611, i8 %5615, i32 7
  %5617 = extractelement <64 x i32> %5576, i32 8
  %5618 = sext i32 %5617 to i64
  %5619 = getelementptr inbounds i8, i8* %0, i64 %5618
  %5620 = load i8, i8* %5619, align 1, !tbaa !387
  %5621 = insertelement <64 x i8> %5616, i8 %5620, i32 8
  %5622 = extractelement <64 x i32> %5576, i32 9
  %5623 = sext i32 %5622 to i64
  %5624 = getelementptr inbounds i8, i8* %0, i64 %5623
  %5625 = load i8, i8* %5624, align 1, !tbaa !387
  %5626 = insertelement <64 x i8> %5621, i8 %5625, i32 9
  %5627 = extractelement <64 x i32> %5576, i32 10
  %5628 = sext i32 %5627 to i64
  %5629 = getelementptr inbounds i8, i8* %0, i64 %5628
  %5630 = load i8, i8* %5629, align 1, !tbaa !387
  %5631 = insertelement <64 x i8> %5626, i8 %5630, i32 10
  %5632 = extractelement <64 x i32> %5576, i32 11
  %5633 = sext i32 %5632 to i64
  %5634 = getelementptr inbounds i8, i8* %0, i64 %5633
  %5635 = load i8, i8* %5634, align 1, !tbaa !387
  %5636 = insertelement <64 x i8> %5631, i8 %5635, i32 11
  %5637 = extractelement <64 x i32> %5576, i32 12
  %5638 = sext i32 %5637 to i64
  %5639 = getelementptr inbounds i8, i8* %0, i64 %5638
  %5640 = load i8, i8* %5639, align 1, !tbaa !387
  %5641 = insertelement <64 x i8> %5636, i8 %5640, i32 12
  %5642 = extractelement <64 x i32> %5576, i32 13
  %5643 = sext i32 %5642 to i64
  %5644 = getelementptr inbounds i8, i8* %0, i64 %5643
  %5645 = load i8, i8* %5644, align 1, !tbaa !387
  %5646 = insertelement <64 x i8> %5641, i8 %5645, i32 13
  %5647 = extractelement <64 x i32> %5576, i32 14
  %5648 = sext i32 %5647 to i64
  %5649 = getelementptr inbounds i8, i8* %0, i64 %5648
  %5650 = load i8, i8* %5649, align 1, !tbaa !387
  %5651 = insertelement <64 x i8> %5646, i8 %5650, i32 14
  %5652 = extractelement <64 x i32> %5576, i32 15
  %5653 = sext i32 %5652 to i64
  %5654 = getelementptr inbounds i8, i8* %0, i64 %5653
  %5655 = load i8, i8* %5654, align 1, !tbaa !387
  %5656 = insertelement <64 x i8> %5651, i8 %5655, i32 15
  %5657 = extractelement <64 x i32> %5576, i32 16
  %5658 = sext i32 %5657 to i64
  %5659 = getelementptr inbounds i8, i8* %0, i64 %5658
  %5660 = load i8, i8* %5659, align 1, !tbaa !387
  %5661 = insertelement <64 x i8> %5656, i8 %5660, i32 16
  %5662 = extractelement <64 x i32> %5576, i32 17
  %5663 = sext i32 %5662 to i64
  %5664 = getelementptr inbounds i8, i8* %0, i64 %5663
  %5665 = load i8, i8* %5664, align 1, !tbaa !387
  %5666 = insertelement <64 x i8> %5661, i8 %5665, i32 17
  %5667 = extractelement <64 x i32> %5576, i32 18
  %5668 = sext i32 %5667 to i64
  %5669 = getelementptr inbounds i8, i8* %0, i64 %5668
  %5670 = load i8, i8* %5669, align 1, !tbaa !387
  %5671 = insertelement <64 x i8> %5666, i8 %5670, i32 18
  %5672 = extractelement <64 x i32> %5576, i32 19
  %5673 = sext i32 %5672 to i64
  %5674 = getelementptr inbounds i8, i8* %0, i64 %5673
  %5675 = load i8, i8* %5674, align 1, !tbaa !387
  %5676 = insertelement <64 x i8> %5671, i8 %5675, i32 19
  %5677 = extractelement <64 x i32> %5576, i32 20
  %5678 = sext i32 %5677 to i64
  %5679 = getelementptr inbounds i8, i8* %0, i64 %5678
  %5680 = load i8, i8* %5679, align 1, !tbaa !387
  %5681 = insertelement <64 x i8> %5676, i8 %5680, i32 20
  %5682 = extractelement <64 x i32> %5576, i32 21
  %5683 = sext i32 %5682 to i64
  %5684 = getelementptr inbounds i8, i8* %0, i64 %5683
  %5685 = load i8, i8* %5684, align 1, !tbaa !387
  %5686 = insertelement <64 x i8> %5681, i8 %5685, i32 21
  %5687 = extractelement <64 x i32> %5576, i32 22
  %5688 = sext i32 %5687 to i64
  %5689 = getelementptr inbounds i8, i8* %0, i64 %5688
  %5690 = load i8, i8* %5689, align 1, !tbaa !387
  %5691 = insertelement <64 x i8> %5686, i8 %5690, i32 22
  %5692 = extractelement <64 x i32> %5576, i32 23
  %5693 = sext i32 %5692 to i64
  %5694 = getelementptr inbounds i8, i8* %0, i64 %5693
  %5695 = load i8, i8* %5694, align 1, !tbaa !387
  %5696 = insertelement <64 x i8> %5691, i8 %5695, i32 23
  %5697 = extractelement <64 x i32> %5576, i32 24
  %5698 = sext i32 %5697 to i64
  %5699 = getelementptr inbounds i8, i8* %0, i64 %5698
  %5700 = load i8, i8* %5699, align 1, !tbaa !387
  %5701 = insertelement <64 x i8> %5696, i8 %5700, i32 24
  %5702 = extractelement <64 x i32> %5576, i32 25
  %5703 = sext i32 %5702 to i64
  %5704 = getelementptr inbounds i8, i8* %0, i64 %5703
  %5705 = load i8, i8* %5704, align 1, !tbaa !387
  %5706 = insertelement <64 x i8> %5701, i8 %5705, i32 25
  %5707 = extractelement <64 x i32> %5576, i32 26
  %5708 = sext i32 %5707 to i64
  %5709 = getelementptr inbounds i8, i8* %0, i64 %5708
  %5710 = load i8, i8* %5709, align 1, !tbaa !387
  %5711 = insertelement <64 x i8> %5706, i8 %5710, i32 26
  %5712 = extractelement <64 x i32> %5576, i32 27
  %5713 = sext i32 %5712 to i64
  %5714 = getelementptr inbounds i8, i8* %0, i64 %5713
  %5715 = load i8, i8* %5714, align 1, !tbaa !387
  %5716 = insertelement <64 x i8> %5711, i8 %5715, i32 27
  %5717 = extractelement <64 x i32> %5576, i32 28
  %5718 = sext i32 %5717 to i64
  %5719 = getelementptr inbounds i8, i8* %0, i64 %5718
  %5720 = load i8, i8* %5719, align 1, !tbaa !387
  %5721 = insertelement <64 x i8> %5716, i8 %5720, i32 28
  %5722 = extractelement <64 x i32> %5576, i32 29
  %5723 = sext i32 %5722 to i64
  %5724 = getelementptr inbounds i8, i8* %0, i64 %5723
  %5725 = load i8, i8* %5724, align 1, !tbaa !387
  %5726 = insertelement <64 x i8> %5721, i8 %5725, i32 29
  %5727 = extractelement <64 x i32> %5576, i32 30
  %5728 = sext i32 %5727 to i64
  %5729 = getelementptr inbounds i8, i8* %0, i64 %5728
  %5730 = load i8, i8* %5729, align 1, !tbaa !387
  %5731 = insertelement <64 x i8> %5726, i8 %5730, i32 30
  %5732 = extractelement <64 x i32> %5576, i32 31
  %5733 = sext i32 %5732 to i64
  %5734 = getelementptr inbounds i8, i8* %0, i64 %5733
  %5735 = load i8, i8* %5734, align 1, !tbaa !387
  %5736 = insertelement <64 x i8> %5731, i8 %5735, i32 31
  %5737 = extractelement <64 x i32> %5576, i32 32
  %5738 = sext i32 %5737 to i64
  %5739 = getelementptr inbounds i8, i8* %0, i64 %5738
  %5740 = load i8, i8* %5739, align 1, !tbaa !387
  %5741 = insertelement <64 x i8> %5736, i8 %5740, i32 32
  %5742 = extractelement <64 x i32> %5576, i32 33
  %5743 = sext i32 %5742 to i64
  %5744 = getelementptr inbounds i8, i8* %0, i64 %5743
  %5745 = load i8, i8* %5744, align 1, !tbaa !387
  %5746 = insertelement <64 x i8> %5741, i8 %5745, i32 33
  %5747 = extractelement <64 x i32> %5576, i32 34
  %5748 = sext i32 %5747 to i64
  %5749 = getelementptr inbounds i8, i8* %0, i64 %5748
  %5750 = load i8, i8* %5749, align 1, !tbaa !387
  %5751 = insertelement <64 x i8> %5746, i8 %5750, i32 34
  %5752 = extractelement <64 x i32> %5576, i32 35
  %5753 = sext i32 %5752 to i64
  %5754 = getelementptr inbounds i8, i8* %0, i64 %5753
  %5755 = load i8, i8* %5754, align 1, !tbaa !387
  %5756 = insertelement <64 x i8> %5751, i8 %5755, i32 35
  %5757 = extractelement <64 x i32> %5576, i32 36
  %5758 = sext i32 %5757 to i64
  %5759 = getelementptr inbounds i8, i8* %0, i64 %5758
  %5760 = load i8, i8* %5759, align 1, !tbaa !387
  %5761 = insertelement <64 x i8> %5756, i8 %5760, i32 36
  %5762 = extractelement <64 x i32> %5576, i32 37
  %5763 = sext i32 %5762 to i64
  %5764 = getelementptr inbounds i8, i8* %0, i64 %5763
  %5765 = load i8, i8* %5764, align 1, !tbaa !387
  %5766 = insertelement <64 x i8> %5761, i8 %5765, i32 37
  %5767 = extractelement <64 x i32> %5576, i32 38
  %5768 = sext i32 %5767 to i64
  %5769 = getelementptr inbounds i8, i8* %0, i64 %5768
  %5770 = load i8, i8* %5769, align 1, !tbaa !387
  %5771 = insertelement <64 x i8> %5766, i8 %5770, i32 38
  %5772 = extractelement <64 x i32> %5576, i32 39
  %5773 = sext i32 %5772 to i64
  %5774 = getelementptr inbounds i8, i8* %0, i64 %5773
  %5775 = load i8, i8* %5774, align 1, !tbaa !387
  %5776 = insertelement <64 x i8> %5771, i8 %5775, i32 39
  %5777 = extractelement <64 x i32> %5576, i32 40
  %5778 = sext i32 %5777 to i64
  %5779 = getelementptr inbounds i8, i8* %0, i64 %5778
  %5780 = load i8, i8* %5779, align 1, !tbaa !387
  %5781 = insertelement <64 x i8> %5776, i8 %5780, i32 40
  %5782 = extractelement <64 x i32> %5576, i32 41
  %5783 = sext i32 %5782 to i64
  %5784 = getelementptr inbounds i8, i8* %0, i64 %5783
  %5785 = load i8, i8* %5784, align 1, !tbaa !387
  %5786 = insertelement <64 x i8> %5781, i8 %5785, i32 41
  %5787 = extractelement <64 x i32> %5576, i32 42
  %5788 = sext i32 %5787 to i64
  %5789 = getelementptr inbounds i8, i8* %0, i64 %5788
  %5790 = load i8, i8* %5789, align 1, !tbaa !387
  %5791 = insertelement <64 x i8> %5786, i8 %5790, i32 42
  %5792 = extractelement <64 x i32> %5576, i32 43
  %5793 = sext i32 %5792 to i64
  %5794 = getelementptr inbounds i8, i8* %0, i64 %5793
  %5795 = load i8, i8* %5794, align 1, !tbaa !387
  %5796 = insertelement <64 x i8> %5791, i8 %5795, i32 43
  %5797 = extractelement <64 x i32> %5576, i32 44
  %5798 = sext i32 %5797 to i64
  %5799 = getelementptr inbounds i8, i8* %0, i64 %5798
  %5800 = load i8, i8* %5799, align 1, !tbaa !387
  %5801 = insertelement <64 x i8> %5796, i8 %5800, i32 44
  %5802 = extractelement <64 x i32> %5576, i32 45
  %5803 = sext i32 %5802 to i64
  %5804 = getelementptr inbounds i8, i8* %0, i64 %5803
  %5805 = load i8, i8* %5804, align 1, !tbaa !387
  %5806 = insertelement <64 x i8> %5801, i8 %5805, i32 45
  %5807 = extractelement <64 x i32> %5576, i32 46
  %5808 = sext i32 %5807 to i64
  %5809 = getelementptr inbounds i8, i8* %0, i64 %5808
  %5810 = load i8, i8* %5809, align 1, !tbaa !387
  %5811 = insertelement <64 x i8> %5806, i8 %5810, i32 46
  %5812 = extractelement <64 x i32> %5576, i32 47
  %5813 = sext i32 %5812 to i64
  %5814 = getelementptr inbounds i8, i8* %0, i64 %5813
  %5815 = load i8, i8* %5814, align 1, !tbaa !387
  %5816 = insertelement <64 x i8> %5811, i8 %5815, i32 47
  %5817 = extractelement <64 x i32> %5576, i32 48
  %5818 = sext i32 %5817 to i64
  %5819 = getelementptr inbounds i8, i8* %0, i64 %5818
  %5820 = load i8, i8* %5819, align 1, !tbaa !387
  %5821 = insertelement <64 x i8> %5816, i8 %5820, i32 48
  %5822 = extractelement <64 x i32> %5576, i32 49
  %5823 = sext i32 %5822 to i64
  %5824 = getelementptr inbounds i8, i8* %0, i64 %5823
  %5825 = load i8, i8* %5824, align 1, !tbaa !387
  %5826 = insertelement <64 x i8> %5821, i8 %5825, i32 49
  %5827 = extractelement <64 x i32> %5576, i32 50
  %5828 = sext i32 %5827 to i64
  %5829 = getelementptr inbounds i8, i8* %0, i64 %5828
  %5830 = load i8, i8* %5829, align 1, !tbaa !387
  %5831 = insertelement <64 x i8> %5826, i8 %5830, i32 50
  %5832 = extractelement <64 x i32> %5576, i32 51
  %5833 = sext i32 %5832 to i64
  %5834 = getelementptr inbounds i8, i8* %0, i64 %5833
  %5835 = load i8, i8* %5834, align 1, !tbaa !387
  %5836 = insertelement <64 x i8> %5831, i8 %5835, i32 51
  %5837 = extractelement <64 x i32> %5576, i32 52
  %5838 = sext i32 %5837 to i64
  %5839 = getelementptr inbounds i8, i8* %0, i64 %5838
  %5840 = load i8, i8* %5839, align 1, !tbaa !387
  %5841 = insertelement <64 x i8> %5836, i8 %5840, i32 52
  %5842 = extractelement <64 x i32> %5576, i32 53
  %5843 = sext i32 %5842 to i64
  %5844 = getelementptr inbounds i8, i8* %0, i64 %5843
  %5845 = load i8, i8* %5844, align 1, !tbaa !387
  %5846 = insertelement <64 x i8> %5841, i8 %5845, i32 53
  %5847 = extractelement <64 x i32> %5576, i32 54
  %5848 = sext i32 %5847 to i64
  %5849 = getelementptr inbounds i8, i8* %0, i64 %5848
  %5850 = load i8, i8* %5849, align 1, !tbaa !387
  %5851 = insertelement <64 x i8> %5846, i8 %5850, i32 54
  %5852 = extractelement <64 x i32> %5576, i32 55
  %5853 = sext i32 %5852 to i64
  %5854 = getelementptr inbounds i8, i8* %0, i64 %5853
  %5855 = load i8, i8* %5854, align 1, !tbaa !387
  %5856 = insertelement <64 x i8> %5851, i8 %5855, i32 55
  %5857 = extractelement <64 x i32> %5576, i32 56
  %5858 = sext i32 %5857 to i64
  %5859 = getelementptr inbounds i8, i8* %0, i64 %5858
  %5860 = load i8, i8* %5859, align 1, !tbaa !387
  %5861 = insertelement <64 x i8> %5856, i8 %5860, i32 56
  %5862 = extractelement <64 x i32> %5576, i32 57
  %5863 = sext i32 %5862 to i64
  %5864 = getelementptr inbounds i8, i8* %0, i64 %5863
  %5865 = load i8, i8* %5864, align 1, !tbaa !387
  %5866 = insertelement <64 x i8> %5861, i8 %5865, i32 57
  %5867 = extractelement <64 x i32> %5576, i32 58
  %5868 = sext i32 %5867 to i64
  %5869 = getelementptr inbounds i8, i8* %0, i64 %5868
  %5870 = load i8, i8* %5869, align 1, !tbaa !387
  %5871 = insertelement <64 x i8> %5866, i8 %5870, i32 58
  %5872 = extractelement <64 x i32> %5576, i32 59
  %5873 = sext i32 %5872 to i64
  %5874 = getelementptr inbounds i8, i8* %0, i64 %5873
  %5875 = load i8, i8* %5874, align 1, !tbaa !387
  %5876 = insertelement <64 x i8> %5871, i8 %5875, i32 59
  %5877 = extractelement <64 x i32> %5576, i32 60
  %5878 = sext i32 %5877 to i64
  %5879 = getelementptr inbounds i8, i8* %0, i64 %5878
  %5880 = load i8, i8* %5879, align 1, !tbaa !387
  %5881 = insertelement <64 x i8> %5876, i8 %5880, i32 60
  %5882 = extractelement <64 x i32> %5576, i32 61
  %5883 = sext i32 %5882 to i64
  %5884 = getelementptr inbounds i8, i8* %0, i64 %5883
  %5885 = load i8, i8* %5884, align 1, !tbaa !387
  %5886 = insertelement <64 x i8> %5881, i8 %5885, i32 61
  %5887 = extractelement <64 x i32> %5576, i32 62
  %5888 = sext i32 %5887 to i64
  %5889 = getelementptr inbounds i8, i8* %0, i64 %5888
  %5890 = load i8, i8* %5889, align 1, !tbaa !387
  %5891 = insertelement <64 x i8> %5886, i8 %5890, i32 62
  %5892 = extractelement <64 x i32> %5576, i32 63
  %5893 = sext i32 %5892 to i64
  %5894 = getelementptr inbounds i8, i8* %0, i64 %5893
  %5895 = load i8, i8* %5894, align 1, !tbaa !387
  %5896 = insertelement <64 x i8> %5891, i8 %5895, i32 63
  %5897 = shufflevector <64 x i8> %5896, <64 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5898 = add nsw i64 %indvars.iv359, %5501
  %5899 = shl nsw i64 %5898, 6
  %5900 = getelementptr inbounds i8, i8* %bounded_input52, i64 %5899
  %5901 = bitcast i8* %5900 to <16 x i8>*
  store <16 x i8> %5897, <16 x i8>* %5901, align 16, !tbaa !390
  %5902 = shufflevector <64 x i8> %5896, <64 x i8> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5903 = getelementptr inbounds i8, i8* %5900, i64 16
  %5904 = bitcast i8* %5903 to <16 x i8>*
  store <16 x i8> %5902, <16 x i8>* %5904, align 16, !tbaa !390
  %5905 = shufflevector <64 x i8> %5896, <64 x i8> undef, <16 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %5906 = getelementptr inbounds i8, i8* %5900, i64 32
  %5907 = bitcast i8* %5906 to <16 x i8>*
  store <16 x i8> %5905, <16 x i8>* %5907, align 16, !tbaa !390
  %5908 = shufflevector <64 x i8> %5896, <64 x i8> undef, <16 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %5909 = getelementptr inbounds i8, i8* %5900, i64 48
  %5910 = bitcast i8* %5909 to <16 x i8>*
  store <16 x i8> %5908, <16 x i8>* %5910, align 16, !tbaa !390
  %indvars.iv.next360 = add nuw nsw i64 %indvars.iv359, 1
  %.not207 = icmp eq i64 %indvars.iv.next360, %84
  br i1 %.not207, label %"end for bounded_input.s0.x.x91", label %"for bounded_input.s0.x.x90"

"end for bounded_input.s0.x.x91":                 ; preds = %"for bounded_input.s0.x.x90", %"for bounded_input.s0.y.rebased85"
  %.not206 = icmp eq i64 %indvars.iv361, %5051
  br i1 %.not206, label %"consume bounded_input93", label %"for bounded_input.s0.y.rebased85"

"consume bounded_input93":                        ; preds = %"end for bounded_input.s0.x.x91", %"end for bounded_input.s0.y.rebased69"
  br i1 %75, label %"for output.s0.x.x113.preheader", label %"end for output.s0.x.x114", !prof !385

"for output.s0.x.x113.preheader":                 ; preds = %"consume bounded_input93"
  %5911 = mul nsw i64 %indvars.iv391, %89
  %5912 = or i32 %a33, 1
  %t109111 = mul nsw i32 %5912, %46
  %5913 = or i32 %a33, 2
  %t111110 = mul nsw i32 %5913, %46
  %5914 = or i32 %a33, 3
  %t113109 = mul nsw i32 %5914, %46
  %5915 = or i32 %a33, 4
  %t115108 = mul nsw i32 %5915, %46
  %5916 = or i32 %a33, 5
  %t117107 = mul nsw i32 %5916, %46
  %5917 = or i32 %a33, 6
  %t119106 = mul nsw i32 %5917, %46
  %5918 = or i32 %a33, 7
  %t121105 = mul nsw i32 %5918, %46
  %5919 = sext i32 %t109111 to i64
  %5920 = sext i32 %t111110 to i64
  %5921 = sext i32 %t113109 to i64
  %5922 = sext i32 %t115108 to i64
  %5923 = sext i32 %t117107 to i64
  %5924 = sext i32 %t119106 to i64
  %5925 = sext i32 %t121105 to i64
  br label %"for output.s0.x.x113"

"for output.s0.x.x113":                           ; preds = %"for output.s0.x.x113.preheader", %"for output.s0.x.x113"
  %indvars.iv388 = phi i64 [ 0, %"for output.s0.x.x113.preheader" ], [ %indvars.iv.next389, %"for output.s0.x.x113" ]
  %5926 = shl nuw nsw i64 %indvars.iv388, 1
  %5927 = trunc i64 %5926 to i32
  %t15120 = add i32 %71, %5927
  %t60121 = add nsw i32 %t15120, %71
  %t61122 = add nsw i32 %t15120, %76
  %5928 = sext i32 %t60121 to i64
  %5929 = shl nsw i64 %5928, 6
  %5930 = getelementptr inbounds i8, i8* %bounded_input52, i64 %5929
  %5931 = getelementptr inbounds i8, i8* %5930, i64 1
  %5932 = bitcast i8* %5931 to <16 x i8>*
  %5933 = load <16 x i8>, <16 x i8>* %5932, align 1, !tbaa !390
  %5934 = sext i32 %t15120 to i64
  %5935 = shl nsw i64 %5934, 6
  %5936 = getelementptr inbounds i8, i8* %bounded_input52, i64 %5935
  %5937 = getelementptr inbounds i8, i8* %5936, i64 1
  %5938 = bitcast i8* %5937 to <16 x i8>*
  %5939 = load <16 x i8>, <16 x i8>* %5938, align 1, !tbaa !390
  %5940 = sext i32 %t61122 to i64
  %5941 = shl nsw i64 %5940, 6
  %5942 = getelementptr inbounds i8, i8* %bounded_input52, i64 %5941
  %5943 = getelementptr inbounds i8, i8* %5942, i64 1
  %5944 = bitcast i8* %5943 to <16 x i8>*
  %5945 = load <16 x i8>, <16 x i8>* %5944, align 1, !tbaa !390
  %5946 = getelementptr inbounds i8, i8* %5942, i64 2
  %5947 = bitcast i8* %5946 to <16 x i8>*
  %5948 = load <16 x i8>, <16 x i8>* %5947, align 2, !tbaa !390
  %5949 = getelementptr inbounds i8, i8* %5936, i64 2
  %5950 = bitcast i8* %5949 to <16 x i8>*
  %5951 = load <16 x i8>, <16 x i8>* %5950, align 2, !tbaa !390
  %5952 = getelementptr inbounds i8, i8* %5930, i64 2
  %5953 = bitcast i8* %5952 to <16 x i8>*
  %5954 = load <16 x i8>, <16 x i8>* %5953, align 2, !tbaa !390
  %5955 = bitcast i8* %5942 to <16 x i8>*
  %5956 = load <16 x i8>, <16 x i8>* %5955, align 16, !tbaa !390
  %5957 = bitcast i8* %5936 to <16 x i8>*
  %5958 = load <16 x i8>, <16 x i8>* %5957, align 16, !tbaa !390
  %5959 = bitcast i8* %5930 to <16 x i8>*
  %5960 = load <16 x i8>, <16 x i8>* %5959, align 16, !tbaa !390
  %5961 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %5958, <16 x i8> %5960) #11
  %5962 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %5961, <16 x i8> %5956) #11
  %5963 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %5948, <16 x i8> %5962) #11
  %5964 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %5954, <16 x i8> %5951) #11
  %5965 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %5963, <16 x i8> %5964) #11
  %5966 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %5933, <16 x i8> %5965) #11
  %5967 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %5945, <16 x i8> %5939) #11
  %5968 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %5966, <16 x i8> %5967) #11
  %5969 = getelementptr inbounds i8, i8* %5930, i64 17
  %5970 = bitcast i8* %5969 to <16 x i8>*
  %5971 = load <16 x i8>, <16 x i8>* %5970, align 1, !tbaa !390
  %5972 = getelementptr inbounds i8, i8* %5936, i64 17
  %5973 = bitcast i8* %5972 to <16 x i8>*
  %5974 = load <16 x i8>, <16 x i8>* %5973, align 1, !tbaa !390
  %5975 = getelementptr inbounds i8, i8* %5942, i64 17
  %5976 = bitcast i8* %5975 to <16 x i8>*
  %5977 = load <16 x i8>, <16 x i8>* %5976, align 1, !tbaa !390
  %5978 = getelementptr inbounds i8, i8* %5942, i64 18
  %5979 = bitcast i8* %5978 to <16 x i8>*
  %5980 = load <16 x i8>, <16 x i8>* %5979, align 2, !tbaa !390
  %5981 = getelementptr inbounds i8, i8* %5936, i64 18
  %5982 = bitcast i8* %5981 to <16 x i8>*
  %5983 = load <16 x i8>, <16 x i8>* %5982, align 2, !tbaa !390
  %5984 = getelementptr inbounds i8, i8* %5930, i64 18
  %5985 = bitcast i8* %5984 to <16 x i8>*
  %5986 = load <16 x i8>, <16 x i8>* %5985, align 2, !tbaa !390
  %5987 = getelementptr inbounds i8, i8* %5942, i64 16
  %5988 = bitcast i8* %5987 to <16 x i8>*
  %5989 = load <16 x i8>, <16 x i8>* %5988, align 16, !tbaa !390
  %5990 = getelementptr inbounds i8, i8* %5936, i64 16
  %5991 = bitcast i8* %5990 to <16 x i8>*
  %5992 = load <16 x i8>, <16 x i8>* %5991, align 16, !tbaa !390
  %5993 = getelementptr inbounds i8, i8* %5930, i64 16
  %5994 = bitcast i8* %5993 to <16 x i8>*
  %5995 = load <16 x i8>, <16 x i8>* %5994, align 16, !tbaa !390
  %5996 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %5992, <16 x i8> %5995) #11
  %5997 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %5996, <16 x i8> %5989) #11
  %5998 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %5980, <16 x i8> %5997) #11
  %5999 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %5986, <16 x i8> %5983) #11
  %6000 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %5998, <16 x i8> %5999) #11
  %6001 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %5971, <16 x i8> %6000) #11
  %6002 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %5977, <16 x i8> %5974) #11
  %6003 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6001, <16 x i8> %6002) #11
  %6004 = getelementptr inbounds i8, i8* %5930, i64 33
  %6005 = bitcast i8* %6004 to <16 x i8>*
  %6006 = load <16 x i8>, <16 x i8>* %6005, align 1, !tbaa !390
  %6007 = getelementptr inbounds i8, i8* %5936, i64 33
  %6008 = bitcast i8* %6007 to <16 x i8>*
  %6009 = load <16 x i8>, <16 x i8>* %6008, align 1, !tbaa !390
  %6010 = getelementptr inbounds i8, i8* %5942, i64 33
  %6011 = bitcast i8* %6010 to <16 x i8>*
  %6012 = load <16 x i8>, <16 x i8>* %6011, align 1, !tbaa !390
  %6013 = getelementptr inbounds i8, i8* %5942, i64 34
  %6014 = bitcast i8* %6013 to <16 x i8>*
  %6015 = load <16 x i8>, <16 x i8>* %6014, align 2, !tbaa !390
  %6016 = getelementptr inbounds i8, i8* %5936, i64 34
  %6017 = bitcast i8* %6016 to <16 x i8>*
  %6018 = load <16 x i8>, <16 x i8>* %6017, align 2, !tbaa !390
  %6019 = getelementptr inbounds i8, i8* %5930, i64 34
  %6020 = bitcast i8* %6019 to <16 x i8>*
  %6021 = load <16 x i8>, <16 x i8>* %6020, align 2, !tbaa !390
  %6022 = getelementptr inbounds i8, i8* %5942, i64 32
  %6023 = bitcast i8* %6022 to <16 x i8>*
  %6024 = load <16 x i8>, <16 x i8>* %6023, align 16, !tbaa !390
  %6025 = getelementptr inbounds i8, i8* %5936, i64 32
  %6026 = bitcast i8* %6025 to <16 x i8>*
  %6027 = load <16 x i8>, <16 x i8>* %6026, align 16, !tbaa !390
  %6028 = getelementptr inbounds i8, i8* %5930, i64 32
  %6029 = bitcast i8* %6028 to <16 x i8>*
  %6030 = load <16 x i8>, <16 x i8>* %6029, align 16, !tbaa !390
  %6031 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6027, <16 x i8> %6030) #11
  %6032 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6031, <16 x i8> %6024) #11
  %6033 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6015, <16 x i8> %6032) #11
  %6034 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6021, <16 x i8> %6018) #11
  %6035 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6033, <16 x i8> %6034) #11
  %6036 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6006, <16 x i8> %6035) #11
  %6037 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6012, <16 x i8> %6009) #11
  %6038 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6036, <16 x i8> %6037) #11
  %6039 = getelementptr inbounds i8, i8* %5930, i64 49
  %6040 = bitcast i8* %6039 to <16 x i8>*
  %6041 = load <16 x i8>, <16 x i8>* %6040, align 1, !tbaa !390
  %6042 = getelementptr inbounds i8, i8* %5936, i64 49
  %6043 = bitcast i8* %6042 to <16 x i8>*
  %6044 = load <16 x i8>, <16 x i8>* %6043, align 1, !tbaa !390
  %6045 = getelementptr inbounds i8, i8* %5942, i64 49
  %6046 = bitcast i8* %6045 to <16 x i8>*
  %6047 = load <16 x i8>, <16 x i8>* %6046, align 1, !tbaa !390
  %6048 = getelementptr inbounds i8, i8* %5942, i64 50
  %6049 = bitcast i8* %6048 to <16 x i8>*
  %6050 = load <16 x i8>, <16 x i8>* %6049, align 2, !tbaa !390
  %6051 = getelementptr inbounds i8, i8* %5936, i64 50
  %6052 = bitcast i8* %6051 to <16 x i8>*
  %6053 = load <16 x i8>, <16 x i8>* %6052, align 2, !tbaa !390
  %6054 = getelementptr inbounds i8, i8* %5930, i64 50
  %6055 = bitcast i8* %6054 to <16 x i8>*
  %6056 = load <16 x i8>, <16 x i8>* %6055, align 2, !tbaa !390
  %6057 = getelementptr inbounds i8, i8* %5942, i64 48
  %6058 = bitcast i8* %6057 to <16 x i8>*
  %6059 = load <16 x i8>, <16 x i8>* %6058, align 16, !tbaa !390
  %6060 = getelementptr inbounds i8, i8* %5936, i64 48
  %6061 = bitcast i8* %6060 to <16 x i8>*
  %6062 = load <16 x i8>, <16 x i8>* %6061, align 16, !tbaa !390
  %6063 = getelementptr inbounds i8, i8* %5930, i64 48
  %6064 = bitcast i8* %6063 to <16 x i8>*
  %6065 = load <16 x i8>, <16 x i8>* %6064, align 16, !tbaa !390
  %6066 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6062, <16 x i8> %6065) #11
  %6067 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6066, <16 x i8> %6059) #11
  %6068 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6050, <16 x i8> %6067) #11
  %6069 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6056, <16 x i8> %6053) #11
  %6070 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6068, <16 x i8> %6069) #11
  %6071 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6041, <16 x i8> %6070) #11
  %6072 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6047, <16 x i8> %6044) #11
  %6073 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6071, <16 x i8> %6072) #11
  %6074 = shl nuw nsw i64 %indvars.iv388, 4
  %6075 = add nsw i64 %6074, %5911
  %6076 = shl nsw i64 %6075, 3
  %6077 = getelementptr inbounds i8, i8* %5, i64 %6076
  %6078 = bitcast i8* %6077 to <16 x i8>*
  store <16 x i8> %5968, <16 x i8>* %6078, align 1, !tbaa !392
  %6079 = getelementptr inbounds i8, i8* %6077, i64 16
  %6080 = bitcast i8* %6079 to <16 x i8>*
  store <16 x i8> %6003, <16 x i8>* %6080, align 1, !tbaa !392
  %6081 = getelementptr inbounds i8, i8* %6077, i64 32
  %6082 = bitcast i8* %6081 to <16 x i8>*
  store <16 x i8> %6038, <16 x i8>* %6082, align 1, !tbaa !392
  %6083 = getelementptr inbounds i8, i8* %6077, i64 48
  %6084 = bitcast i8* %6083 to <16 x i8>*
  store <16 x i8> %6073, <16 x i8>* %6084, align 1, !tbaa !392
  %6085 = or i64 %5926, 1
  %6086 = trunc i64 %6085 to i32
  %t15120.1 = add i32 %71, %6086
  %t60121.1 = add nsw i32 %t15120.1, %71
  %t61122.1 = add nsw i32 %t15120.1, %76
  %6087 = sext i32 %t60121.1 to i64
  %6088 = shl nsw i64 %6087, 6
  %6089 = getelementptr inbounds i8, i8* %bounded_input52, i64 %6088
  %6090 = getelementptr inbounds i8, i8* %6089, i64 1
  %6091 = bitcast i8* %6090 to <16 x i8>*
  %6092 = load <16 x i8>, <16 x i8>* %6091, align 1, !tbaa !390
  %6093 = sext i32 %t15120.1 to i64
  %6094 = shl nsw i64 %6093, 6
  %6095 = getelementptr inbounds i8, i8* %bounded_input52, i64 %6094
  %6096 = getelementptr inbounds i8, i8* %6095, i64 1
  %6097 = bitcast i8* %6096 to <16 x i8>*
  %6098 = load <16 x i8>, <16 x i8>* %6097, align 1, !tbaa !390
  %6099 = sext i32 %t61122.1 to i64
  %6100 = shl nsw i64 %6099, 6
  %6101 = getelementptr inbounds i8, i8* %bounded_input52, i64 %6100
  %6102 = getelementptr inbounds i8, i8* %6101, i64 1
  %6103 = bitcast i8* %6102 to <16 x i8>*
  %6104 = load <16 x i8>, <16 x i8>* %6103, align 1, !tbaa !390
  %6105 = getelementptr inbounds i8, i8* %6101, i64 2
  %6106 = bitcast i8* %6105 to <16 x i8>*
  %6107 = load <16 x i8>, <16 x i8>* %6106, align 2, !tbaa !390
  %6108 = getelementptr inbounds i8, i8* %6095, i64 2
  %6109 = bitcast i8* %6108 to <16 x i8>*
  %6110 = load <16 x i8>, <16 x i8>* %6109, align 2, !tbaa !390
  %6111 = getelementptr inbounds i8, i8* %6089, i64 2
  %6112 = bitcast i8* %6111 to <16 x i8>*
  %6113 = load <16 x i8>, <16 x i8>* %6112, align 2, !tbaa !390
  %6114 = bitcast i8* %6101 to <16 x i8>*
  %6115 = load <16 x i8>, <16 x i8>* %6114, align 16, !tbaa !390
  %6116 = bitcast i8* %6095 to <16 x i8>*
  %6117 = load <16 x i8>, <16 x i8>* %6116, align 16, !tbaa !390
  %6118 = bitcast i8* %6089 to <16 x i8>*
  %6119 = load <16 x i8>, <16 x i8>* %6118, align 16, !tbaa !390
  %6120 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6117, <16 x i8> %6119) #11
  %6121 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6120, <16 x i8> %6115) #11
  %6122 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6107, <16 x i8> %6121) #11
  %6123 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6113, <16 x i8> %6110) #11
  %6124 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6122, <16 x i8> %6123) #11
  %6125 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6092, <16 x i8> %6124) #11
  %6126 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6104, <16 x i8> %6098) #11
  %6127 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6125, <16 x i8> %6126) #11
  %6128 = getelementptr inbounds i8, i8* %6089, i64 17
  %6129 = bitcast i8* %6128 to <16 x i8>*
  %6130 = load <16 x i8>, <16 x i8>* %6129, align 1, !tbaa !390
  %6131 = getelementptr inbounds i8, i8* %6095, i64 17
  %6132 = bitcast i8* %6131 to <16 x i8>*
  %6133 = load <16 x i8>, <16 x i8>* %6132, align 1, !tbaa !390
  %6134 = getelementptr inbounds i8, i8* %6101, i64 17
  %6135 = bitcast i8* %6134 to <16 x i8>*
  %6136 = load <16 x i8>, <16 x i8>* %6135, align 1, !tbaa !390
  %6137 = getelementptr inbounds i8, i8* %6101, i64 18
  %6138 = bitcast i8* %6137 to <16 x i8>*
  %6139 = load <16 x i8>, <16 x i8>* %6138, align 2, !tbaa !390
  %6140 = getelementptr inbounds i8, i8* %6095, i64 18
  %6141 = bitcast i8* %6140 to <16 x i8>*
  %6142 = load <16 x i8>, <16 x i8>* %6141, align 2, !tbaa !390
  %6143 = getelementptr inbounds i8, i8* %6089, i64 18
  %6144 = bitcast i8* %6143 to <16 x i8>*
  %6145 = load <16 x i8>, <16 x i8>* %6144, align 2, !tbaa !390
  %6146 = getelementptr inbounds i8, i8* %6101, i64 16
  %6147 = bitcast i8* %6146 to <16 x i8>*
  %6148 = load <16 x i8>, <16 x i8>* %6147, align 16, !tbaa !390
  %6149 = getelementptr inbounds i8, i8* %6095, i64 16
  %6150 = bitcast i8* %6149 to <16 x i8>*
  %6151 = load <16 x i8>, <16 x i8>* %6150, align 16, !tbaa !390
  %6152 = getelementptr inbounds i8, i8* %6089, i64 16
  %6153 = bitcast i8* %6152 to <16 x i8>*
  %6154 = load <16 x i8>, <16 x i8>* %6153, align 16, !tbaa !390
  %6155 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6151, <16 x i8> %6154) #11
  %6156 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6155, <16 x i8> %6148) #11
  %6157 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6139, <16 x i8> %6156) #11
  %6158 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6145, <16 x i8> %6142) #11
  %6159 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6157, <16 x i8> %6158) #11
  %6160 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6130, <16 x i8> %6159) #11
  %6161 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6136, <16 x i8> %6133) #11
  %6162 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6160, <16 x i8> %6161) #11
  %6163 = getelementptr inbounds i8, i8* %6089, i64 33
  %6164 = bitcast i8* %6163 to <16 x i8>*
  %6165 = load <16 x i8>, <16 x i8>* %6164, align 1, !tbaa !390
  %6166 = getelementptr inbounds i8, i8* %6095, i64 33
  %6167 = bitcast i8* %6166 to <16 x i8>*
  %6168 = load <16 x i8>, <16 x i8>* %6167, align 1, !tbaa !390
  %6169 = getelementptr inbounds i8, i8* %6101, i64 33
  %6170 = bitcast i8* %6169 to <16 x i8>*
  %6171 = load <16 x i8>, <16 x i8>* %6170, align 1, !tbaa !390
  %6172 = getelementptr inbounds i8, i8* %6101, i64 34
  %6173 = bitcast i8* %6172 to <16 x i8>*
  %6174 = load <16 x i8>, <16 x i8>* %6173, align 2, !tbaa !390
  %6175 = getelementptr inbounds i8, i8* %6095, i64 34
  %6176 = bitcast i8* %6175 to <16 x i8>*
  %6177 = load <16 x i8>, <16 x i8>* %6176, align 2, !tbaa !390
  %6178 = getelementptr inbounds i8, i8* %6089, i64 34
  %6179 = bitcast i8* %6178 to <16 x i8>*
  %6180 = load <16 x i8>, <16 x i8>* %6179, align 2, !tbaa !390
  %6181 = getelementptr inbounds i8, i8* %6101, i64 32
  %6182 = bitcast i8* %6181 to <16 x i8>*
  %6183 = load <16 x i8>, <16 x i8>* %6182, align 16, !tbaa !390
  %6184 = getelementptr inbounds i8, i8* %6095, i64 32
  %6185 = bitcast i8* %6184 to <16 x i8>*
  %6186 = load <16 x i8>, <16 x i8>* %6185, align 16, !tbaa !390
  %6187 = getelementptr inbounds i8, i8* %6089, i64 32
  %6188 = bitcast i8* %6187 to <16 x i8>*
  %6189 = load <16 x i8>, <16 x i8>* %6188, align 16, !tbaa !390
  %6190 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6186, <16 x i8> %6189) #11
  %6191 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6190, <16 x i8> %6183) #11
  %6192 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6174, <16 x i8> %6191) #11
  %6193 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6180, <16 x i8> %6177) #11
  %6194 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6192, <16 x i8> %6193) #11
  %6195 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6165, <16 x i8> %6194) #11
  %6196 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6171, <16 x i8> %6168) #11
  %6197 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6195, <16 x i8> %6196) #11
  %6198 = getelementptr inbounds i8, i8* %6089, i64 49
  %6199 = bitcast i8* %6198 to <16 x i8>*
  %6200 = load <16 x i8>, <16 x i8>* %6199, align 1, !tbaa !390
  %6201 = getelementptr inbounds i8, i8* %6095, i64 49
  %6202 = bitcast i8* %6201 to <16 x i8>*
  %6203 = load <16 x i8>, <16 x i8>* %6202, align 1, !tbaa !390
  %6204 = getelementptr inbounds i8, i8* %6101, i64 49
  %6205 = bitcast i8* %6204 to <16 x i8>*
  %6206 = load <16 x i8>, <16 x i8>* %6205, align 1, !tbaa !390
  %6207 = getelementptr inbounds i8, i8* %6101, i64 50
  %6208 = bitcast i8* %6207 to <16 x i8>*
  %6209 = load <16 x i8>, <16 x i8>* %6208, align 2, !tbaa !390
  %6210 = getelementptr inbounds i8, i8* %6095, i64 50
  %6211 = bitcast i8* %6210 to <16 x i8>*
  %6212 = load <16 x i8>, <16 x i8>* %6211, align 2, !tbaa !390
  %6213 = getelementptr inbounds i8, i8* %6089, i64 50
  %6214 = bitcast i8* %6213 to <16 x i8>*
  %6215 = load <16 x i8>, <16 x i8>* %6214, align 2, !tbaa !390
  %6216 = getelementptr inbounds i8, i8* %6101, i64 48
  %6217 = bitcast i8* %6216 to <16 x i8>*
  %6218 = load <16 x i8>, <16 x i8>* %6217, align 16, !tbaa !390
  %6219 = getelementptr inbounds i8, i8* %6095, i64 48
  %6220 = bitcast i8* %6219 to <16 x i8>*
  %6221 = load <16 x i8>, <16 x i8>* %6220, align 16, !tbaa !390
  %6222 = getelementptr inbounds i8, i8* %6089, i64 48
  %6223 = bitcast i8* %6222 to <16 x i8>*
  %6224 = load <16 x i8>, <16 x i8>* %6223, align 16, !tbaa !390
  %6225 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6221, <16 x i8> %6224) #11
  %6226 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6225, <16 x i8> %6218) #11
  %6227 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6209, <16 x i8> %6226) #11
  %6228 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6215, <16 x i8> %6212) #11
  %6229 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6227, <16 x i8> %6228) #11
  %6230 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6200, <16 x i8> %6229) #11
  %6231 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6206, <16 x i8> %6203) #11
  %6232 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6230, <16 x i8> %6231) #11
  %6233 = shl nuw nsw i64 %6085, 3
  %6234 = add nsw i64 %6233, %5911
  %6235 = shl nsw i64 %6234, 3
  %6236 = getelementptr inbounds i8, i8* %5, i64 %6235
  %6237 = bitcast i8* %6236 to <16 x i8>*
  store <16 x i8> %6127, <16 x i8>* %6237, align 1, !tbaa !392
  %6238 = getelementptr inbounds i8, i8* %6236, i64 16
  %6239 = bitcast i8* %6238 to <16 x i8>*
  store <16 x i8> %6162, <16 x i8>* %6239, align 1, !tbaa !392
  %6240 = getelementptr inbounds i8, i8* %6236, i64 32
  %6241 = bitcast i8* %6240 to <16 x i8>*
  store <16 x i8> %6197, <16 x i8>* %6241, align 1, !tbaa !392
  %6242 = getelementptr inbounds i8, i8* %6236, i64 48
  %6243 = bitcast i8* %6242 to <16 x i8>*
  store <16 x i8> %6232, <16 x i8>* %6243, align 1, !tbaa !392
  %t19128 = add i32 %77, %5927
  %t62129 = add nsw i32 %t19128, %71
  %t63130 = add nsw i32 %t19128, %76
  %6244 = sext i32 %t62129 to i64
  %6245 = shl nsw i64 %6244, 6
  %6246 = getelementptr inbounds i8, i8* %bounded_input52, i64 %6245
  %6247 = getelementptr inbounds i8, i8* %6246, i64 1
  %6248 = bitcast i8* %6247 to <16 x i8>*
  %6249 = load <16 x i8>, <16 x i8>* %6248, align 1, !tbaa !390
  %6250 = sext i32 %t19128 to i64
  %6251 = shl nsw i64 %6250, 6
  %6252 = getelementptr inbounds i8, i8* %bounded_input52, i64 %6251
  %6253 = getelementptr inbounds i8, i8* %6252, i64 1
  %6254 = bitcast i8* %6253 to <16 x i8>*
  %6255 = load <16 x i8>, <16 x i8>* %6254, align 1, !tbaa !390
  %6256 = sext i32 %t63130 to i64
  %6257 = shl nsw i64 %6256, 6
  %6258 = getelementptr inbounds i8, i8* %bounded_input52, i64 %6257
  %6259 = getelementptr inbounds i8, i8* %6258, i64 1
  %6260 = bitcast i8* %6259 to <16 x i8>*
  %6261 = load <16 x i8>, <16 x i8>* %6260, align 1, !tbaa !390
  %6262 = getelementptr inbounds i8, i8* %6258, i64 2
  %6263 = bitcast i8* %6262 to <16 x i8>*
  %6264 = load <16 x i8>, <16 x i8>* %6263, align 2, !tbaa !390
  %6265 = getelementptr inbounds i8, i8* %6252, i64 2
  %6266 = bitcast i8* %6265 to <16 x i8>*
  %6267 = load <16 x i8>, <16 x i8>* %6266, align 2, !tbaa !390
  %6268 = getelementptr inbounds i8, i8* %6246, i64 2
  %6269 = bitcast i8* %6268 to <16 x i8>*
  %6270 = load <16 x i8>, <16 x i8>* %6269, align 2, !tbaa !390
  %6271 = bitcast i8* %6258 to <16 x i8>*
  %6272 = load <16 x i8>, <16 x i8>* %6271, align 16, !tbaa !390
  %6273 = bitcast i8* %6252 to <16 x i8>*
  %6274 = load <16 x i8>, <16 x i8>* %6273, align 16, !tbaa !390
  %6275 = bitcast i8* %6246 to <16 x i8>*
  %6276 = load <16 x i8>, <16 x i8>* %6275, align 16, !tbaa !390
  %6277 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6274, <16 x i8> %6276) #11
  %6278 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6277, <16 x i8> %6272) #11
  %6279 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6264, <16 x i8> %6278) #11
  %6280 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6270, <16 x i8> %6267) #11
  %6281 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6279, <16 x i8> %6280) #11
  %6282 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6249, <16 x i8> %6281) #11
  %6283 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6261, <16 x i8> %6255) #11
  %6284 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6282, <16 x i8> %6283) #11
  %6285 = getelementptr inbounds i8, i8* %6246, i64 17
  %6286 = bitcast i8* %6285 to <16 x i8>*
  %6287 = load <16 x i8>, <16 x i8>* %6286, align 1, !tbaa !390
  %6288 = getelementptr inbounds i8, i8* %6252, i64 17
  %6289 = bitcast i8* %6288 to <16 x i8>*
  %6290 = load <16 x i8>, <16 x i8>* %6289, align 1, !tbaa !390
  %6291 = getelementptr inbounds i8, i8* %6258, i64 17
  %6292 = bitcast i8* %6291 to <16 x i8>*
  %6293 = load <16 x i8>, <16 x i8>* %6292, align 1, !tbaa !390
  %6294 = getelementptr inbounds i8, i8* %6258, i64 18
  %6295 = bitcast i8* %6294 to <16 x i8>*
  %6296 = load <16 x i8>, <16 x i8>* %6295, align 2, !tbaa !390
  %6297 = getelementptr inbounds i8, i8* %6252, i64 18
  %6298 = bitcast i8* %6297 to <16 x i8>*
  %6299 = load <16 x i8>, <16 x i8>* %6298, align 2, !tbaa !390
  %6300 = getelementptr inbounds i8, i8* %6246, i64 18
  %6301 = bitcast i8* %6300 to <16 x i8>*
  %6302 = load <16 x i8>, <16 x i8>* %6301, align 2, !tbaa !390
  %6303 = getelementptr inbounds i8, i8* %6258, i64 16
  %6304 = bitcast i8* %6303 to <16 x i8>*
  %6305 = load <16 x i8>, <16 x i8>* %6304, align 16, !tbaa !390
  %6306 = getelementptr inbounds i8, i8* %6252, i64 16
  %6307 = bitcast i8* %6306 to <16 x i8>*
  %6308 = load <16 x i8>, <16 x i8>* %6307, align 16, !tbaa !390
  %6309 = getelementptr inbounds i8, i8* %6246, i64 16
  %6310 = bitcast i8* %6309 to <16 x i8>*
  %6311 = load <16 x i8>, <16 x i8>* %6310, align 16, !tbaa !390
  %6312 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6308, <16 x i8> %6311) #11
  %6313 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6312, <16 x i8> %6305) #11
  %6314 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6296, <16 x i8> %6313) #11
  %6315 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6302, <16 x i8> %6299) #11
  %6316 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6314, <16 x i8> %6315) #11
  %6317 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6287, <16 x i8> %6316) #11
  %6318 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6293, <16 x i8> %6290) #11
  %6319 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6317, <16 x i8> %6318) #11
  %6320 = getelementptr inbounds i8, i8* %6246, i64 33
  %6321 = bitcast i8* %6320 to <16 x i8>*
  %6322 = load <16 x i8>, <16 x i8>* %6321, align 1, !tbaa !390
  %6323 = getelementptr inbounds i8, i8* %6252, i64 33
  %6324 = bitcast i8* %6323 to <16 x i8>*
  %6325 = load <16 x i8>, <16 x i8>* %6324, align 1, !tbaa !390
  %6326 = getelementptr inbounds i8, i8* %6258, i64 33
  %6327 = bitcast i8* %6326 to <16 x i8>*
  %6328 = load <16 x i8>, <16 x i8>* %6327, align 1, !tbaa !390
  %6329 = getelementptr inbounds i8, i8* %6258, i64 34
  %6330 = bitcast i8* %6329 to <16 x i8>*
  %6331 = load <16 x i8>, <16 x i8>* %6330, align 2, !tbaa !390
  %6332 = getelementptr inbounds i8, i8* %6252, i64 34
  %6333 = bitcast i8* %6332 to <16 x i8>*
  %6334 = load <16 x i8>, <16 x i8>* %6333, align 2, !tbaa !390
  %6335 = getelementptr inbounds i8, i8* %6246, i64 34
  %6336 = bitcast i8* %6335 to <16 x i8>*
  %6337 = load <16 x i8>, <16 x i8>* %6336, align 2, !tbaa !390
  %6338 = getelementptr inbounds i8, i8* %6258, i64 32
  %6339 = bitcast i8* %6338 to <16 x i8>*
  %6340 = load <16 x i8>, <16 x i8>* %6339, align 16, !tbaa !390
  %6341 = getelementptr inbounds i8, i8* %6252, i64 32
  %6342 = bitcast i8* %6341 to <16 x i8>*
  %6343 = load <16 x i8>, <16 x i8>* %6342, align 16, !tbaa !390
  %6344 = getelementptr inbounds i8, i8* %6246, i64 32
  %6345 = bitcast i8* %6344 to <16 x i8>*
  %6346 = load <16 x i8>, <16 x i8>* %6345, align 16, !tbaa !390
  %6347 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6343, <16 x i8> %6346) #11
  %6348 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6347, <16 x i8> %6340) #11
  %6349 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6331, <16 x i8> %6348) #11
  %6350 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6337, <16 x i8> %6334) #11
  %6351 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6349, <16 x i8> %6350) #11
  %6352 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6322, <16 x i8> %6351) #11
  %6353 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6328, <16 x i8> %6325) #11
  %6354 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6352, <16 x i8> %6353) #11
  %6355 = getelementptr inbounds i8, i8* %6246, i64 49
  %6356 = bitcast i8* %6355 to <16 x i8>*
  %6357 = load <16 x i8>, <16 x i8>* %6356, align 1, !tbaa !390
  %6358 = getelementptr inbounds i8, i8* %6252, i64 49
  %6359 = bitcast i8* %6358 to <16 x i8>*
  %6360 = load <16 x i8>, <16 x i8>* %6359, align 1, !tbaa !390
  %6361 = getelementptr inbounds i8, i8* %6258, i64 49
  %6362 = bitcast i8* %6361 to <16 x i8>*
  %6363 = load <16 x i8>, <16 x i8>* %6362, align 1, !tbaa !390
  %6364 = getelementptr inbounds i8, i8* %6258, i64 50
  %6365 = bitcast i8* %6364 to <16 x i8>*
  %6366 = load <16 x i8>, <16 x i8>* %6365, align 2, !tbaa !390
  %6367 = getelementptr inbounds i8, i8* %6252, i64 50
  %6368 = bitcast i8* %6367 to <16 x i8>*
  %6369 = load <16 x i8>, <16 x i8>* %6368, align 2, !tbaa !390
  %6370 = getelementptr inbounds i8, i8* %6246, i64 50
  %6371 = bitcast i8* %6370 to <16 x i8>*
  %6372 = load <16 x i8>, <16 x i8>* %6371, align 2, !tbaa !390
  %6373 = getelementptr inbounds i8, i8* %6258, i64 48
  %6374 = bitcast i8* %6373 to <16 x i8>*
  %6375 = load <16 x i8>, <16 x i8>* %6374, align 16, !tbaa !390
  %6376 = getelementptr inbounds i8, i8* %6252, i64 48
  %6377 = bitcast i8* %6376 to <16 x i8>*
  %6378 = load <16 x i8>, <16 x i8>* %6377, align 16, !tbaa !390
  %6379 = getelementptr inbounds i8, i8* %6246, i64 48
  %6380 = bitcast i8* %6379 to <16 x i8>*
  %6381 = load <16 x i8>, <16 x i8>* %6380, align 16, !tbaa !390
  %6382 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6378, <16 x i8> %6381) #11
  %6383 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6382, <16 x i8> %6375) #11
  %6384 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6366, <16 x i8> %6383) #11
  %6385 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6372, <16 x i8> %6369) #11
  %6386 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6384, <16 x i8> %6385) #11
  %6387 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6357, <16 x i8> %6386) #11
  %6388 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6363, <16 x i8> %6360) #11
  %6389 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6387, <16 x i8> %6388) #11
  %6390 = shl nuw nsw i64 %indvars.iv388, 7
  %6391 = add nsw i64 %6390, %5919
  %6392 = getelementptr inbounds i8, i8* %5, i64 %6391
  %6393 = bitcast i8* %6392 to <16 x i8>*
  store <16 x i8> %6284, <16 x i8>* %6393, align 1, !tbaa !392
  %6394 = getelementptr inbounds i8, i8* %6392, i64 16
  %6395 = bitcast i8* %6394 to <16 x i8>*
  store <16 x i8> %6319, <16 x i8>* %6395, align 1, !tbaa !392
  %6396 = getelementptr inbounds i8, i8* %6392, i64 32
  %6397 = bitcast i8* %6396 to <16 x i8>*
  store <16 x i8> %6354, <16 x i8>* %6397, align 1, !tbaa !392
  %6398 = getelementptr inbounds i8, i8* %6392, i64 48
  %6399 = bitcast i8* %6398 to <16 x i8>*
  store <16 x i8> %6389, <16 x i8>* %6399, align 1, !tbaa !392
  %t19128.1 = add i32 %77, %6086
  %t62129.1 = add nsw i32 %t19128.1, %71
  %t63130.1 = add nsw i32 %t19128.1, %76
  %6400 = sext i32 %t62129.1 to i64
  %6401 = shl nsw i64 %6400, 6
  %6402 = getelementptr inbounds i8, i8* %bounded_input52, i64 %6401
  %6403 = getelementptr inbounds i8, i8* %6402, i64 1
  %6404 = bitcast i8* %6403 to <16 x i8>*
  %6405 = load <16 x i8>, <16 x i8>* %6404, align 1, !tbaa !390
  %6406 = sext i32 %t19128.1 to i64
  %6407 = shl nsw i64 %6406, 6
  %6408 = getelementptr inbounds i8, i8* %bounded_input52, i64 %6407
  %6409 = getelementptr inbounds i8, i8* %6408, i64 1
  %6410 = bitcast i8* %6409 to <16 x i8>*
  %6411 = load <16 x i8>, <16 x i8>* %6410, align 1, !tbaa !390
  %6412 = sext i32 %t63130.1 to i64
  %6413 = shl nsw i64 %6412, 6
  %6414 = getelementptr inbounds i8, i8* %bounded_input52, i64 %6413
  %6415 = getelementptr inbounds i8, i8* %6414, i64 1
  %6416 = bitcast i8* %6415 to <16 x i8>*
  %6417 = load <16 x i8>, <16 x i8>* %6416, align 1, !tbaa !390
  %6418 = getelementptr inbounds i8, i8* %6414, i64 2
  %6419 = bitcast i8* %6418 to <16 x i8>*
  %6420 = load <16 x i8>, <16 x i8>* %6419, align 2, !tbaa !390
  %6421 = getelementptr inbounds i8, i8* %6408, i64 2
  %6422 = bitcast i8* %6421 to <16 x i8>*
  %6423 = load <16 x i8>, <16 x i8>* %6422, align 2, !tbaa !390
  %6424 = getelementptr inbounds i8, i8* %6402, i64 2
  %6425 = bitcast i8* %6424 to <16 x i8>*
  %6426 = load <16 x i8>, <16 x i8>* %6425, align 2, !tbaa !390
  %6427 = bitcast i8* %6414 to <16 x i8>*
  %6428 = load <16 x i8>, <16 x i8>* %6427, align 16, !tbaa !390
  %6429 = bitcast i8* %6408 to <16 x i8>*
  %6430 = load <16 x i8>, <16 x i8>* %6429, align 16, !tbaa !390
  %6431 = bitcast i8* %6402 to <16 x i8>*
  %6432 = load <16 x i8>, <16 x i8>* %6431, align 16, !tbaa !390
  %6433 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6430, <16 x i8> %6432) #11
  %6434 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6433, <16 x i8> %6428) #11
  %6435 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6420, <16 x i8> %6434) #11
  %6436 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6426, <16 x i8> %6423) #11
  %6437 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6435, <16 x i8> %6436) #11
  %6438 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6405, <16 x i8> %6437) #11
  %6439 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6417, <16 x i8> %6411) #11
  %6440 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6438, <16 x i8> %6439) #11
  %6441 = getelementptr inbounds i8, i8* %6402, i64 17
  %6442 = bitcast i8* %6441 to <16 x i8>*
  %6443 = load <16 x i8>, <16 x i8>* %6442, align 1, !tbaa !390
  %6444 = getelementptr inbounds i8, i8* %6408, i64 17
  %6445 = bitcast i8* %6444 to <16 x i8>*
  %6446 = load <16 x i8>, <16 x i8>* %6445, align 1, !tbaa !390
  %6447 = getelementptr inbounds i8, i8* %6414, i64 17
  %6448 = bitcast i8* %6447 to <16 x i8>*
  %6449 = load <16 x i8>, <16 x i8>* %6448, align 1, !tbaa !390
  %6450 = getelementptr inbounds i8, i8* %6414, i64 18
  %6451 = bitcast i8* %6450 to <16 x i8>*
  %6452 = load <16 x i8>, <16 x i8>* %6451, align 2, !tbaa !390
  %6453 = getelementptr inbounds i8, i8* %6408, i64 18
  %6454 = bitcast i8* %6453 to <16 x i8>*
  %6455 = load <16 x i8>, <16 x i8>* %6454, align 2, !tbaa !390
  %6456 = getelementptr inbounds i8, i8* %6402, i64 18
  %6457 = bitcast i8* %6456 to <16 x i8>*
  %6458 = load <16 x i8>, <16 x i8>* %6457, align 2, !tbaa !390
  %6459 = getelementptr inbounds i8, i8* %6414, i64 16
  %6460 = bitcast i8* %6459 to <16 x i8>*
  %6461 = load <16 x i8>, <16 x i8>* %6460, align 16, !tbaa !390
  %6462 = getelementptr inbounds i8, i8* %6408, i64 16
  %6463 = bitcast i8* %6462 to <16 x i8>*
  %6464 = load <16 x i8>, <16 x i8>* %6463, align 16, !tbaa !390
  %6465 = getelementptr inbounds i8, i8* %6402, i64 16
  %6466 = bitcast i8* %6465 to <16 x i8>*
  %6467 = load <16 x i8>, <16 x i8>* %6466, align 16, !tbaa !390
  %6468 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6464, <16 x i8> %6467) #11
  %6469 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6468, <16 x i8> %6461) #11
  %6470 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6452, <16 x i8> %6469) #11
  %6471 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6458, <16 x i8> %6455) #11
  %6472 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6470, <16 x i8> %6471) #11
  %6473 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6443, <16 x i8> %6472) #11
  %6474 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6449, <16 x i8> %6446) #11
  %6475 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6473, <16 x i8> %6474) #11
  %6476 = getelementptr inbounds i8, i8* %6402, i64 33
  %6477 = bitcast i8* %6476 to <16 x i8>*
  %6478 = load <16 x i8>, <16 x i8>* %6477, align 1, !tbaa !390
  %6479 = getelementptr inbounds i8, i8* %6408, i64 33
  %6480 = bitcast i8* %6479 to <16 x i8>*
  %6481 = load <16 x i8>, <16 x i8>* %6480, align 1, !tbaa !390
  %6482 = getelementptr inbounds i8, i8* %6414, i64 33
  %6483 = bitcast i8* %6482 to <16 x i8>*
  %6484 = load <16 x i8>, <16 x i8>* %6483, align 1, !tbaa !390
  %6485 = getelementptr inbounds i8, i8* %6414, i64 34
  %6486 = bitcast i8* %6485 to <16 x i8>*
  %6487 = load <16 x i8>, <16 x i8>* %6486, align 2, !tbaa !390
  %6488 = getelementptr inbounds i8, i8* %6408, i64 34
  %6489 = bitcast i8* %6488 to <16 x i8>*
  %6490 = load <16 x i8>, <16 x i8>* %6489, align 2, !tbaa !390
  %6491 = getelementptr inbounds i8, i8* %6402, i64 34
  %6492 = bitcast i8* %6491 to <16 x i8>*
  %6493 = load <16 x i8>, <16 x i8>* %6492, align 2, !tbaa !390
  %6494 = getelementptr inbounds i8, i8* %6414, i64 32
  %6495 = bitcast i8* %6494 to <16 x i8>*
  %6496 = load <16 x i8>, <16 x i8>* %6495, align 16, !tbaa !390
  %6497 = getelementptr inbounds i8, i8* %6408, i64 32
  %6498 = bitcast i8* %6497 to <16 x i8>*
  %6499 = load <16 x i8>, <16 x i8>* %6498, align 16, !tbaa !390
  %6500 = getelementptr inbounds i8, i8* %6402, i64 32
  %6501 = bitcast i8* %6500 to <16 x i8>*
  %6502 = load <16 x i8>, <16 x i8>* %6501, align 16, !tbaa !390
  %6503 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6499, <16 x i8> %6502) #11
  %6504 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6503, <16 x i8> %6496) #11
  %6505 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6487, <16 x i8> %6504) #11
  %6506 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6493, <16 x i8> %6490) #11
  %6507 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6505, <16 x i8> %6506) #11
  %6508 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6478, <16 x i8> %6507) #11
  %6509 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6484, <16 x i8> %6481) #11
  %6510 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6508, <16 x i8> %6509) #11
  %6511 = getelementptr inbounds i8, i8* %6402, i64 49
  %6512 = bitcast i8* %6511 to <16 x i8>*
  %6513 = load <16 x i8>, <16 x i8>* %6512, align 1, !tbaa !390
  %6514 = getelementptr inbounds i8, i8* %6408, i64 49
  %6515 = bitcast i8* %6514 to <16 x i8>*
  %6516 = load <16 x i8>, <16 x i8>* %6515, align 1, !tbaa !390
  %6517 = getelementptr inbounds i8, i8* %6414, i64 49
  %6518 = bitcast i8* %6517 to <16 x i8>*
  %6519 = load <16 x i8>, <16 x i8>* %6518, align 1, !tbaa !390
  %6520 = getelementptr inbounds i8, i8* %6414, i64 50
  %6521 = bitcast i8* %6520 to <16 x i8>*
  %6522 = load <16 x i8>, <16 x i8>* %6521, align 2, !tbaa !390
  %6523 = getelementptr inbounds i8, i8* %6408, i64 50
  %6524 = bitcast i8* %6523 to <16 x i8>*
  %6525 = load <16 x i8>, <16 x i8>* %6524, align 2, !tbaa !390
  %6526 = getelementptr inbounds i8, i8* %6402, i64 50
  %6527 = bitcast i8* %6526 to <16 x i8>*
  %6528 = load <16 x i8>, <16 x i8>* %6527, align 2, !tbaa !390
  %6529 = getelementptr inbounds i8, i8* %6414, i64 48
  %6530 = bitcast i8* %6529 to <16 x i8>*
  %6531 = load <16 x i8>, <16 x i8>* %6530, align 16, !tbaa !390
  %6532 = getelementptr inbounds i8, i8* %6408, i64 48
  %6533 = bitcast i8* %6532 to <16 x i8>*
  %6534 = load <16 x i8>, <16 x i8>* %6533, align 16, !tbaa !390
  %6535 = getelementptr inbounds i8, i8* %6402, i64 48
  %6536 = bitcast i8* %6535 to <16 x i8>*
  %6537 = load <16 x i8>, <16 x i8>* %6536, align 16, !tbaa !390
  %6538 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6534, <16 x i8> %6537) #11
  %6539 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6538, <16 x i8> %6531) #11
  %6540 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6522, <16 x i8> %6539) #11
  %6541 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6528, <16 x i8> %6525) #11
  %6542 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6540, <16 x i8> %6541) #11
  %6543 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6513, <16 x i8> %6542) #11
  %6544 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6519, <16 x i8> %6516) #11
  %6545 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6543, <16 x i8> %6544) #11
  %6546 = shl nuw nsw i64 %6085, 6
  %6547 = add nsw i64 %6546, %5919
  %6548 = getelementptr inbounds i8, i8* %5, i64 %6547
  %6549 = bitcast i8* %6548 to <16 x i8>*
  store <16 x i8> %6440, <16 x i8>* %6549, align 1, !tbaa !392
  %6550 = getelementptr inbounds i8, i8* %6548, i64 16
  %6551 = bitcast i8* %6550 to <16 x i8>*
  store <16 x i8> %6475, <16 x i8>* %6551, align 1, !tbaa !392
  %6552 = getelementptr inbounds i8, i8* %6548, i64 32
  %6553 = bitcast i8* %6552 to <16 x i8>*
  store <16 x i8> %6510, <16 x i8>* %6553, align 1, !tbaa !392
  %6554 = getelementptr inbounds i8, i8* %6548, i64 48
  %6555 = bitcast i8* %6554 to <16 x i8>*
  store <16 x i8> %6545, <16 x i8>* %6555, align 1, !tbaa !392
  %t23136 = add i32 %78, %5927
  %t64137 = add nsw i32 %t23136, %71
  %t65138 = add nsw i32 %t23136, %76
  %6556 = sext i32 %t64137 to i64
  %6557 = shl nsw i64 %6556, 6
  %6558 = getelementptr inbounds i8, i8* %bounded_input52, i64 %6557
  %6559 = getelementptr inbounds i8, i8* %6558, i64 1
  %6560 = bitcast i8* %6559 to <16 x i8>*
  %6561 = load <16 x i8>, <16 x i8>* %6560, align 1, !tbaa !390
  %6562 = sext i32 %t23136 to i64
  %6563 = shl nsw i64 %6562, 6
  %6564 = getelementptr inbounds i8, i8* %bounded_input52, i64 %6563
  %6565 = getelementptr inbounds i8, i8* %6564, i64 1
  %6566 = bitcast i8* %6565 to <16 x i8>*
  %6567 = load <16 x i8>, <16 x i8>* %6566, align 1, !tbaa !390
  %6568 = sext i32 %t65138 to i64
  %6569 = shl nsw i64 %6568, 6
  %6570 = getelementptr inbounds i8, i8* %bounded_input52, i64 %6569
  %6571 = getelementptr inbounds i8, i8* %6570, i64 1
  %6572 = bitcast i8* %6571 to <16 x i8>*
  %6573 = load <16 x i8>, <16 x i8>* %6572, align 1, !tbaa !390
  %6574 = getelementptr inbounds i8, i8* %6570, i64 2
  %6575 = bitcast i8* %6574 to <16 x i8>*
  %6576 = load <16 x i8>, <16 x i8>* %6575, align 2, !tbaa !390
  %6577 = getelementptr inbounds i8, i8* %6564, i64 2
  %6578 = bitcast i8* %6577 to <16 x i8>*
  %6579 = load <16 x i8>, <16 x i8>* %6578, align 2, !tbaa !390
  %6580 = getelementptr inbounds i8, i8* %6558, i64 2
  %6581 = bitcast i8* %6580 to <16 x i8>*
  %6582 = load <16 x i8>, <16 x i8>* %6581, align 2, !tbaa !390
  %6583 = bitcast i8* %6570 to <16 x i8>*
  %6584 = load <16 x i8>, <16 x i8>* %6583, align 16, !tbaa !390
  %6585 = bitcast i8* %6564 to <16 x i8>*
  %6586 = load <16 x i8>, <16 x i8>* %6585, align 16, !tbaa !390
  %6587 = bitcast i8* %6558 to <16 x i8>*
  %6588 = load <16 x i8>, <16 x i8>* %6587, align 16, !tbaa !390
  %6589 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6586, <16 x i8> %6588) #11
  %6590 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6589, <16 x i8> %6584) #11
  %6591 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6576, <16 x i8> %6590) #11
  %6592 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6582, <16 x i8> %6579) #11
  %6593 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6591, <16 x i8> %6592) #11
  %6594 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6561, <16 x i8> %6593) #11
  %6595 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6573, <16 x i8> %6567) #11
  %6596 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6594, <16 x i8> %6595) #11
  %6597 = getelementptr inbounds i8, i8* %6558, i64 17
  %6598 = bitcast i8* %6597 to <16 x i8>*
  %6599 = load <16 x i8>, <16 x i8>* %6598, align 1, !tbaa !390
  %6600 = getelementptr inbounds i8, i8* %6564, i64 17
  %6601 = bitcast i8* %6600 to <16 x i8>*
  %6602 = load <16 x i8>, <16 x i8>* %6601, align 1, !tbaa !390
  %6603 = getelementptr inbounds i8, i8* %6570, i64 17
  %6604 = bitcast i8* %6603 to <16 x i8>*
  %6605 = load <16 x i8>, <16 x i8>* %6604, align 1, !tbaa !390
  %6606 = getelementptr inbounds i8, i8* %6570, i64 18
  %6607 = bitcast i8* %6606 to <16 x i8>*
  %6608 = load <16 x i8>, <16 x i8>* %6607, align 2, !tbaa !390
  %6609 = getelementptr inbounds i8, i8* %6564, i64 18
  %6610 = bitcast i8* %6609 to <16 x i8>*
  %6611 = load <16 x i8>, <16 x i8>* %6610, align 2, !tbaa !390
  %6612 = getelementptr inbounds i8, i8* %6558, i64 18
  %6613 = bitcast i8* %6612 to <16 x i8>*
  %6614 = load <16 x i8>, <16 x i8>* %6613, align 2, !tbaa !390
  %6615 = getelementptr inbounds i8, i8* %6570, i64 16
  %6616 = bitcast i8* %6615 to <16 x i8>*
  %6617 = load <16 x i8>, <16 x i8>* %6616, align 16, !tbaa !390
  %6618 = getelementptr inbounds i8, i8* %6564, i64 16
  %6619 = bitcast i8* %6618 to <16 x i8>*
  %6620 = load <16 x i8>, <16 x i8>* %6619, align 16, !tbaa !390
  %6621 = getelementptr inbounds i8, i8* %6558, i64 16
  %6622 = bitcast i8* %6621 to <16 x i8>*
  %6623 = load <16 x i8>, <16 x i8>* %6622, align 16, !tbaa !390
  %6624 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6620, <16 x i8> %6623) #11
  %6625 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6624, <16 x i8> %6617) #11
  %6626 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6608, <16 x i8> %6625) #11
  %6627 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6614, <16 x i8> %6611) #11
  %6628 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6626, <16 x i8> %6627) #11
  %6629 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6599, <16 x i8> %6628) #11
  %6630 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6605, <16 x i8> %6602) #11
  %6631 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6629, <16 x i8> %6630) #11
  %6632 = getelementptr inbounds i8, i8* %6558, i64 33
  %6633 = bitcast i8* %6632 to <16 x i8>*
  %6634 = load <16 x i8>, <16 x i8>* %6633, align 1, !tbaa !390
  %6635 = getelementptr inbounds i8, i8* %6564, i64 33
  %6636 = bitcast i8* %6635 to <16 x i8>*
  %6637 = load <16 x i8>, <16 x i8>* %6636, align 1, !tbaa !390
  %6638 = getelementptr inbounds i8, i8* %6570, i64 33
  %6639 = bitcast i8* %6638 to <16 x i8>*
  %6640 = load <16 x i8>, <16 x i8>* %6639, align 1, !tbaa !390
  %6641 = getelementptr inbounds i8, i8* %6570, i64 34
  %6642 = bitcast i8* %6641 to <16 x i8>*
  %6643 = load <16 x i8>, <16 x i8>* %6642, align 2, !tbaa !390
  %6644 = getelementptr inbounds i8, i8* %6564, i64 34
  %6645 = bitcast i8* %6644 to <16 x i8>*
  %6646 = load <16 x i8>, <16 x i8>* %6645, align 2, !tbaa !390
  %6647 = getelementptr inbounds i8, i8* %6558, i64 34
  %6648 = bitcast i8* %6647 to <16 x i8>*
  %6649 = load <16 x i8>, <16 x i8>* %6648, align 2, !tbaa !390
  %6650 = getelementptr inbounds i8, i8* %6570, i64 32
  %6651 = bitcast i8* %6650 to <16 x i8>*
  %6652 = load <16 x i8>, <16 x i8>* %6651, align 16, !tbaa !390
  %6653 = getelementptr inbounds i8, i8* %6564, i64 32
  %6654 = bitcast i8* %6653 to <16 x i8>*
  %6655 = load <16 x i8>, <16 x i8>* %6654, align 16, !tbaa !390
  %6656 = getelementptr inbounds i8, i8* %6558, i64 32
  %6657 = bitcast i8* %6656 to <16 x i8>*
  %6658 = load <16 x i8>, <16 x i8>* %6657, align 16, !tbaa !390
  %6659 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6655, <16 x i8> %6658) #11
  %6660 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6659, <16 x i8> %6652) #11
  %6661 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6643, <16 x i8> %6660) #11
  %6662 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6649, <16 x i8> %6646) #11
  %6663 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6661, <16 x i8> %6662) #11
  %6664 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6634, <16 x i8> %6663) #11
  %6665 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6640, <16 x i8> %6637) #11
  %6666 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6664, <16 x i8> %6665) #11
  %6667 = getelementptr inbounds i8, i8* %6558, i64 49
  %6668 = bitcast i8* %6667 to <16 x i8>*
  %6669 = load <16 x i8>, <16 x i8>* %6668, align 1, !tbaa !390
  %6670 = getelementptr inbounds i8, i8* %6564, i64 49
  %6671 = bitcast i8* %6670 to <16 x i8>*
  %6672 = load <16 x i8>, <16 x i8>* %6671, align 1, !tbaa !390
  %6673 = getelementptr inbounds i8, i8* %6570, i64 49
  %6674 = bitcast i8* %6673 to <16 x i8>*
  %6675 = load <16 x i8>, <16 x i8>* %6674, align 1, !tbaa !390
  %6676 = getelementptr inbounds i8, i8* %6570, i64 50
  %6677 = bitcast i8* %6676 to <16 x i8>*
  %6678 = load <16 x i8>, <16 x i8>* %6677, align 2, !tbaa !390
  %6679 = getelementptr inbounds i8, i8* %6564, i64 50
  %6680 = bitcast i8* %6679 to <16 x i8>*
  %6681 = load <16 x i8>, <16 x i8>* %6680, align 2, !tbaa !390
  %6682 = getelementptr inbounds i8, i8* %6558, i64 50
  %6683 = bitcast i8* %6682 to <16 x i8>*
  %6684 = load <16 x i8>, <16 x i8>* %6683, align 2, !tbaa !390
  %6685 = getelementptr inbounds i8, i8* %6570, i64 48
  %6686 = bitcast i8* %6685 to <16 x i8>*
  %6687 = load <16 x i8>, <16 x i8>* %6686, align 16, !tbaa !390
  %6688 = getelementptr inbounds i8, i8* %6564, i64 48
  %6689 = bitcast i8* %6688 to <16 x i8>*
  %6690 = load <16 x i8>, <16 x i8>* %6689, align 16, !tbaa !390
  %6691 = getelementptr inbounds i8, i8* %6558, i64 48
  %6692 = bitcast i8* %6691 to <16 x i8>*
  %6693 = load <16 x i8>, <16 x i8>* %6692, align 16, !tbaa !390
  %6694 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6690, <16 x i8> %6693) #11
  %6695 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6694, <16 x i8> %6687) #11
  %6696 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6678, <16 x i8> %6695) #11
  %6697 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6684, <16 x i8> %6681) #11
  %6698 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6696, <16 x i8> %6697) #11
  %6699 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6669, <16 x i8> %6698) #11
  %6700 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6675, <16 x i8> %6672) #11
  %6701 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6699, <16 x i8> %6700) #11
  %6702 = add nsw i64 %6390, %5920
  %6703 = getelementptr inbounds i8, i8* %5, i64 %6702
  %6704 = bitcast i8* %6703 to <16 x i8>*
  store <16 x i8> %6596, <16 x i8>* %6704, align 1, !tbaa !392
  %6705 = getelementptr inbounds i8, i8* %6703, i64 16
  %6706 = bitcast i8* %6705 to <16 x i8>*
  store <16 x i8> %6631, <16 x i8>* %6706, align 1, !tbaa !392
  %6707 = getelementptr inbounds i8, i8* %6703, i64 32
  %6708 = bitcast i8* %6707 to <16 x i8>*
  store <16 x i8> %6666, <16 x i8>* %6708, align 1, !tbaa !392
  %6709 = getelementptr inbounds i8, i8* %6703, i64 48
  %6710 = bitcast i8* %6709 to <16 x i8>*
  store <16 x i8> %6701, <16 x i8>* %6710, align 1, !tbaa !392
  %t23136.1 = add i32 %78, %6086
  %t64137.1 = add nsw i32 %t23136.1, %71
  %t65138.1 = add nsw i32 %t23136.1, %76
  %6711 = sext i32 %t64137.1 to i64
  %6712 = shl nsw i64 %6711, 6
  %6713 = getelementptr inbounds i8, i8* %bounded_input52, i64 %6712
  %6714 = getelementptr inbounds i8, i8* %6713, i64 1
  %6715 = bitcast i8* %6714 to <16 x i8>*
  %6716 = load <16 x i8>, <16 x i8>* %6715, align 1, !tbaa !390
  %6717 = sext i32 %t23136.1 to i64
  %6718 = shl nsw i64 %6717, 6
  %6719 = getelementptr inbounds i8, i8* %bounded_input52, i64 %6718
  %6720 = getelementptr inbounds i8, i8* %6719, i64 1
  %6721 = bitcast i8* %6720 to <16 x i8>*
  %6722 = load <16 x i8>, <16 x i8>* %6721, align 1, !tbaa !390
  %6723 = sext i32 %t65138.1 to i64
  %6724 = shl nsw i64 %6723, 6
  %6725 = getelementptr inbounds i8, i8* %bounded_input52, i64 %6724
  %6726 = getelementptr inbounds i8, i8* %6725, i64 1
  %6727 = bitcast i8* %6726 to <16 x i8>*
  %6728 = load <16 x i8>, <16 x i8>* %6727, align 1, !tbaa !390
  %6729 = getelementptr inbounds i8, i8* %6725, i64 2
  %6730 = bitcast i8* %6729 to <16 x i8>*
  %6731 = load <16 x i8>, <16 x i8>* %6730, align 2, !tbaa !390
  %6732 = getelementptr inbounds i8, i8* %6719, i64 2
  %6733 = bitcast i8* %6732 to <16 x i8>*
  %6734 = load <16 x i8>, <16 x i8>* %6733, align 2, !tbaa !390
  %6735 = getelementptr inbounds i8, i8* %6713, i64 2
  %6736 = bitcast i8* %6735 to <16 x i8>*
  %6737 = load <16 x i8>, <16 x i8>* %6736, align 2, !tbaa !390
  %6738 = bitcast i8* %6725 to <16 x i8>*
  %6739 = load <16 x i8>, <16 x i8>* %6738, align 16, !tbaa !390
  %6740 = bitcast i8* %6719 to <16 x i8>*
  %6741 = load <16 x i8>, <16 x i8>* %6740, align 16, !tbaa !390
  %6742 = bitcast i8* %6713 to <16 x i8>*
  %6743 = load <16 x i8>, <16 x i8>* %6742, align 16, !tbaa !390
  %6744 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6741, <16 x i8> %6743) #11
  %6745 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6744, <16 x i8> %6739) #11
  %6746 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6731, <16 x i8> %6745) #11
  %6747 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6737, <16 x i8> %6734) #11
  %6748 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6746, <16 x i8> %6747) #11
  %6749 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6716, <16 x i8> %6748) #11
  %6750 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6728, <16 x i8> %6722) #11
  %6751 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6749, <16 x i8> %6750) #11
  %6752 = getelementptr inbounds i8, i8* %6713, i64 17
  %6753 = bitcast i8* %6752 to <16 x i8>*
  %6754 = load <16 x i8>, <16 x i8>* %6753, align 1, !tbaa !390
  %6755 = getelementptr inbounds i8, i8* %6719, i64 17
  %6756 = bitcast i8* %6755 to <16 x i8>*
  %6757 = load <16 x i8>, <16 x i8>* %6756, align 1, !tbaa !390
  %6758 = getelementptr inbounds i8, i8* %6725, i64 17
  %6759 = bitcast i8* %6758 to <16 x i8>*
  %6760 = load <16 x i8>, <16 x i8>* %6759, align 1, !tbaa !390
  %6761 = getelementptr inbounds i8, i8* %6725, i64 18
  %6762 = bitcast i8* %6761 to <16 x i8>*
  %6763 = load <16 x i8>, <16 x i8>* %6762, align 2, !tbaa !390
  %6764 = getelementptr inbounds i8, i8* %6719, i64 18
  %6765 = bitcast i8* %6764 to <16 x i8>*
  %6766 = load <16 x i8>, <16 x i8>* %6765, align 2, !tbaa !390
  %6767 = getelementptr inbounds i8, i8* %6713, i64 18
  %6768 = bitcast i8* %6767 to <16 x i8>*
  %6769 = load <16 x i8>, <16 x i8>* %6768, align 2, !tbaa !390
  %6770 = getelementptr inbounds i8, i8* %6725, i64 16
  %6771 = bitcast i8* %6770 to <16 x i8>*
  %6772 = load <16 x i8>, <16 x i8>* %6771, align 16, !tbaa !390
  %6773 = getelementptr inbounds i8, i8* %6719, i64 16
  %6774 = bitcast i8* %6773 to <16 x i8>*
  %6775 = load <16 x i8>, <16 x i8>* %6774, align 16, !tbaa !390
  %6776 = getelementptr inbounds i8, i8* %6713, i64 16
  %6777 = bitcast i8* %6776 to <16 x i8>*
  %6778 = load <16 x i8>, <16 x i8>* %6777, align 16, !tbaa !390
  %6779 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6775, <16 x i8> %6778) #11
  %6780 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6779, <16 x i8> %6772) #11
  %6781 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6763, <16 x i8> %6780) #11
  %6782 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6769, <16 x i8> %6766) #11
  %6783 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6781, <16 x i8> %6782) #11
  %6784 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6754, <16 x i8> %6783) #11
  %6785 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6760, <16 x i8> %6757) #11
  %6786 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6784, <16 x i8> %6785) #11
  %6787 = getelementptr inbounds i8, i8* %6713, i64 33
  %6788 = bitcast i8* %6787 to <16 x i8>*
  %6789 = load <16 x i8>, <16 x i8>* %6788, align 1, !tbaa !390
  %6790 = getelementptr inbounds i8, i8* %6719, i64 33
  %6791 = bitcast i8* %6790 to <16 x i8>*
  %6792 = load <16 x i8>, <16 x i8>* %6791, align 1, !tbaa !390
  %6793 = getelementptr inbounds i8, i8* %6725, i64 33
  %6794 = bitcast i8* %6793 to <16 x i8>*
  %6795 = load <16 x i8>, <16 x i8>* %6794, align 1, !tbaa !390
  %6796 = getelementptr inbounds i8, i8* %6725, i64 34
  %6797 = bitcast i8* %6796 to <16 x i8>*
  %6798 = load <16 x i8>, <16 x i8>* %6797, align 2, !tbaa !390
  %6799 = getelementptr inbounds i8, i8* %6719, i64 34
  %6800 = bitcast i8* %6799 to <16 x i8>*
  %6801 = load <16 x i8>, <16 x i8>* %6800, align 2, !tbaa !390
  %6802 = getelementptr inbounds i8, i8* %6713, i64 34
  %6803 = bitcast i8* %6802 to <16 x i8>*
  %6804 = load <16 x i8>, <16 x i8>* %6803, align 2, !tbaa !390
  %6805 = getelementptr inbounds i8, i8* %6725, i64 32
  %6806 = bitcast i8* %6805 to <16 x i8>*
  %6807 = load <16 x i8>, <16 x i8>* %6806, align 16, !tbaa !390
  %6808 = getelementptr inbounds i8, i8* %6719, i64 32
  %6809 = bitcast i8* %6808 to <16 x i8>*
  %6810 = load <16 x i8>, <16 x i8>* %6809, align 16, !tbaa !390
  %6811 = getelementptr inbounds i8, i8* %6713, i64 32
  %6812 = bitcast i8* %6811 to <16 x i8>*
  %6813 = load <16 x i8>, <16 x i8>* %6812, align 16, !tbaa !390
  %6814 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6810, <16 x i8> %6813) #11
  %6815 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6814, <16 x i8> %6807) #11
  %6816 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6798, <16 x i8> %6815) #11
  %6817 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6804, <16 x i8> %6801) #11
  %6818 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6816, <16 x i8> %6817) #11
  %6819 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6789, <16 x i8> %6818) #11
  %6820 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6795, <16 x i8> %6792) #11
  %6821 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6819, <16 x i8> %6820) #11
  %6822 = getelementptr inbounds i8, i8* %6713, i64 49
  %6823 = bitcast i8* %6822 to <16 x i8>*
  %6824 = load <16 x i8>, <16 x i8>* %6823, align 1, !tbaa !390
  %6825 = getelementptr inbounds i8, i8* %6719, i64 49
  %6826 = bitcast i8* %6825 to <16 x i8>*
  %6827 = load <16 x i8>, <16 x i8>* %6826, align 1, !tbaa !390
  %6828 = getelementptr inbounds i8, i8* %6725, i64 49
  %6829 = bitcast i8* %6828 to <16 x i8>*
  %6830 = load <16 x i8>, <16 x i8>* %6829, align 1, !tbaa !390
  %6831 = getelementptr inbounds i8, i8* %6725, i64 50
  %6832 = bitcast i8* %6831 to <16 x i8>*
  %6833 = load <16 x i8>, <16 x i8>* %6832, align 2, !tbaa !390
  %6834 = getelementptr inbounds i8, i8* %6719, i64 50
  %6835 = bitcast i8* %6834 to <16 x i8>*
  %6836 = load <16 x i8>, <16 x i8>* %6835, align 2, !tbaa !390
  %6837 = getelementptr inbounds i8, i8* %6713, i64 50
  %6838 = bitcast i8* %6837 to <16 x i8>*
  %6839 = load <16 x i8>, <16 x i8>* %6838, align 2, !tbaa !390
  %6840 = getelementptr inbounds i8, i8* %6725, i64 48
  %6841 = bitcast i8* %6840 to <16 x i8>*
  %6842 = load <16 x i8>, <16 x i8>* %6841, align 16, !tbaa !390
  %6843 = getelementptr inbounds i8, i8* %6719, i64 48
  %6844 = bitcast i8* %6843 to <16 x i8>*
  %6845 = load <16 x i8>, <16 x i8>* %6844, align 16, !tbaa !390
  %6846 = getelementptr inbounds i8, i8* %6713, i64 48
  %6847 = bitcast i8* %6846 to <16 x i8>*
  %6848 = load <16 x i8>, <16 x i8>* %6847, align 16, !tbaa !390
  %6849 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6845, <16 x i8> %6848) #11
  %6850 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6849, <16 x i8> %6842) #11
  %6851 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6833, <16 x i8> %6850) #11
  %6852 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6839, <16 x i8> %6836) #11
  %6853 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6851, <16 x i8> %6852) #11
  %6854 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6824, <16 x i8> %6853) #11
  %6855 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6830, <16 x i8> %6827) #11
  %6856 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6854, <16 x i8> %6855) #11
  %6857 = add nsw i64 %6546, %5920
  %6858 = getelementptr inbounds i8, i8* %5, i64 %6857
  %6859 = bitcast i8* %6858 to <16 x i8>*
  store <16 x i8> %6751, <16 x i8>* %6859, align 1, !tbaa !392
  %6860 = getelementptr inbounds i8, i8* %6858, i64 16
  %6861 = bitcast i8* %6860 to <16 x i8>*
  store <16 x i8> %6786, <16 x i8>* %6861, align 1, !tbaa !392
  %6862 = getelementptr inbounds i8, i8* %6858, i64 32
  %6863 = bitcast i8* %6862 to <16 x i8>*
  store <16 x i8> %6821, <16 x i8>* %6863, align 1, !tbaa !392
  %6864 = getelementptr inbounds i8, i8* %6858, i64 48
  %6865 = bitcast i8* %6864 to <16 x i8>*
  store <16 x i8> %6856, <16 x i8>* %6865, align 1, !tbaa !392
  %t27144 = add i32 %79, %5927
  %t66145 = add nsw i32 %t27144, %71
  %t67146 = add nsw i32 %t27144, %76
  %6866 = sext i32 %t66145 to i64
  %6867 = shl nsw i64 %6866, 6
  %6868 = getelementptr inbounds i8, i8* %bounded_input52, i64 %6867
  %6869 = getelementptr inbounds i8, i8* %6868, i64 1
  %6870 = bitcast i8* %6869 to <16 x i8>*
  %6871 = load <16 x i8>, <16 x i8>* %6870, align 1, !tbaa !390
  %6872 = sext i32 %t27144 to i64
  %6873 = shl nsw i64 %6872, 6
  %6874 = getelementptr inbounds i8, i8* %bounded_input52, i64 %6873
  %6875 = getelementptr inbounds i8, i8* %6874, i64 1
  %6876 = bitcast i8* %6875 to <16 x i8>*
  %6877 = load <16 x i8>, <16 x i8>* %6876, align 1, !tbaa !390
  %6878 = sext i32 %t67146 to i64
  %6879 = shl nsw i64 %6878, 6
  %6880 = getelementptr inbounds i8, i8* %bounded_input52, i64 %6879
  %6881 = getelementptr inbounds i8, i8* %6880, i64 1
  %6882 = bitcast i8* %6881 to <16 x i8>*
  %6883 = load <16 x i8>, <16 x i8>* %6882, align 1, !tbaa !390
  %6884 = getelementptr inbounds i8, i8* %6880, i64 2
  %6885 = bitcast i8* %6884 to <16 x i8>*
  %6886 = load <16 x i8>, <16 x i8>* %6885, align 2, !tbaa !390
  %6887 = getelementptr inbounds i8, i8* %6874, i64 2
  %6888 = bitcast i8* %6887 to <16 x i8>*
  %6889 = load <16 x i8>, <16 x i8>* %6888, align 2, !tbaa !390
  %6890 = getelementptr inbounds i8, i8* %6868, i64 2
  %6891 = bitcast i8* %6890 to <16 x i8>*
  %6892 = load <16 x i8>, <16 x i8>* %6891, align 2, !tbaa !390
  %6893 = bitcast i8* %6880 to <16 x i8>*
  %6894 = load <16 x i8>, <16 x i8>* %6893, align 16, !tbaa !390
  %6895 = bitcast i8* %6874 to <16 x i8>*
  %6896 = load <16 x i8>, <16 x i8>* %6895, align 16, !tbaa !390
  %6897 = bitcast i8* %6868 to <16 x i8>*
  %6898 = load <16 x i8>, <16 x i8>* %6897, align 16, !tbaa !390
  %6899 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6896, <16 x i8> %6898) #11
  %6900 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6899, <16 x i8> %6894) #11
  %6901 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6886, <16 x i8> %6900) #11
  %6902 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6892, <16 x i8> %6889) #11
  %6903 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6901, <16 x i8> %6902) #11
  %6904 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6871, <16 x i8> %6903) #11
  %6905 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6883, <16 x i8> %6877) #11
  %6906 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6904, <16 x i8> %6905) #11
  %6907 = getelementptr inbounds i8, i8* %6868, i64 17
  %6908 = bitcast i8* %6907 to <16 x i8>*
  %6909 = load <16 x i8>, <16 x i8>* %6908, align 1, !tbaa !390
  %6910 = getelementptr inbounds i8, i8* %6874, i64 17
  %6911 = bitcast i8* %6910 to <16 x i8>*
  %6912 = load <16 x i8>, <16 x i8>* %6911, align 1, !tbaa !390
  %6913 = getelementptr inbounds i8, i8* %6880, i64 17
  %6914 = bitcast i8* %6913 to <16 x i8>*
  %6915 = load <16 x i8>, <16 x i8>* %6914, align 1, !tbaa !390
  %6916 = getelementptr inbounds i8, i8* %6880, i64 18
  %6917 = bitcast i8* %6916 to <16 x i8>*
  %6918 = load <16 x i8>, <16 x i8>* %6917, align 2, !tbaa !390
  %6919 = getelementptr inbounds i8, i8* %6874, i64 18
  %6920 = bitcast i8* %6919 to <16 x i8>*
  %6921 = load <16 x i8>, <16 x i8>* %6920, align 2, !tbaa !390
  %6922 = getelementptr inbounds i8, i8* %6868, i64 18
  %6923 = bitcast i8* %6922 to <16 x i8>*
  %6924 = load <16 x i8>, <16 x i8>* %6923, align 2, !tbaa !390
  %6925 = getelementptr inbounds i8, i8* %6880, i64 16
  %6926 = bitcast i8* %6925 to <16 x i8>*
  %6927 = load <16 x i8>, <16 x i8>* %6926, align 16, !tbaa !390
  %6928 = getelementptr inbounds i8, i8* %6874, i64 16
  %6929 = bitcast i8* %6928 to <16 x i8>*
  %6930 = load <16 x i8>, <16 x i8>* %6929, align 16, !tbaa !390
  %6931 = getelementptr inbounds i8, i8* %6868, i64 16
  %6932 = bitcast i8* %6931 to <16 x i8>*
  %6933 = load <16 x i8>, <16 x i8>* %6932, align 16, !tbaa !390
  %6934 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6930, <16 x i8> %6933) #11
  %6935 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6934, <16 x i8> %6927) #11
  %6936 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6918, <16 x i8> %6935) #11
  %6937 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6924, <16 x i8> %6921) #11
  %6938 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6936, <16 x i8> %6937) #11
  %6939 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6909, <16 x i8> %6938) #11
  %6940 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6915, <16 x i8> %6912) #11
  %6941 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6939, <16 x i8> %6940) #11
  %6942 = getelementptr inbounds i8, i8* %6868, i64 33
  %6943 = bitcast i8* %6942 to <16 x i8>*
  %6944 = load <16 x i8>, <16 x i8>* %6943, align 1, !tbaa !390
  %6945 = getelementptr inbounds i8, i8* %6874, i64 33
  %6946 = bitcast i8* %6945 to <16 x i8>*
  %6947 = load <16 x i8>, <16 x i8>* %6946, align 1, !tbaa !390
  %6948 = getelementptr inbounds i8, i8* %6880, i64 33
  %6949 = bitcast i8* %6948 to <16 x i8>*
  %6950 = load <16 x i8>, <16 x i8>* %6949, align 1, !tbaa !390
  %6951 = getelementptr inbounds i8, i8* %6880, i64 34
  %6952 = bitcast i8* %6951 to <16 x i8>*
  %6953 = load <16 x i8>, <16 x i8>* %6952, align 2, !tbaa !390
  %6954 = getelementptr inbounds i8, i8* %6874, i64 34
  %6955 = bitcast i8* %6954 to <16 x i8>*
  %6956 = load <16 x i8>, <16 x i8>* %6955, align 2, !tbaa !390
  %6957 = getelementptr inbounds i8, i8* %6868, i64 34
  %6958 = bitcast i8* %6957 to <16 x i8>*
  %6959 = load <16 x i8>, <16 x i8>* %6958, align 2, !tbaa !390
  %6960 = getelementptr inbounds i8, i8* %6880, i64 32
  %6961 = bitcast i8* %6960 to <16 x i8>*
  %6962 = load <16 x i8>, <16 x i8>* %6961, align 16, !tbaa !390
  %6963 = getelementptr inbounds i8, i8* %6874, i64 32
  %6964 = bitcast i8* %6963 to <16 x i8>*
  %6965 = load <16 x i8>, <16 x i8>* %6964, align 16, !tbaa !390
  %6966 = getelementptr inbounds i8, i8* %6868, i64 32
  %6967 = bitcast i8* %6966 to <16 x i8>*
  %6968 = load <16 x i8>, <16 x i8>* %6967, align 16, !tbaa !390
  %6969 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6965, <16 x i8> %6968) #11
  %6970 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6969, <16 x i8> %6962) #11
  %6971 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6953, <16 x i8> %6970) #11
  %6972 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6959, <16 x i8> %6956) #11
  %6973 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6971, <16 x i8> %6972) #11
  %6974 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6944, <16 x i8> %6973) #11
  %6975 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6950, <16 x i8> %6947) #11
  %6976 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6974, <16 x i8> %6975) #11
  %6977 = getelementptr inbounds i8, i8* %6868, i64 49
  %6978 = bitcast i8* %6977 to <16 x i8>*
  %6979 = load <16 x i8>, <16 x i8>* %6978, align 1, !tbaa !390
  %6980 = getelementptr inbounds i8, i8* %6874, i64 49
  %6981 = bitcast i8* %6980 to <16 x i8>*
  %6982 = load <16 x i8>, <16 x i8>* %6981, align 1, !tbaa !390
  %6983 = getelementptr inbounds i8, i8* %6880, i64 49
  %6984 = bitcast i8* %6983 to <16 x i8>*
  %6985 = load <16 x i8>, <16 x i8>* %6984, align 1, !tbaa !390
  %6986 = getelementptr inbounds i8, i8* %6880, i64 50
  %6987 = bitcast i8* %6986 to <16 x i8>*
  %6988 = load <16 x i8>, <16 x i8>* %6987, align 2, !tbaa !390
  %6989 = getelementptr inbounds i8, i8* %6874, i64 50
  %6990 = bitcast i8* %6989 to <16 x i8>*
  %6991 = load <16 x i8>, <16 x i8>* %6990, align 2, !tbaa !390
  %6992 = getelementptr inbounds i8, i8* %6868, i64 50
  %6993 = bitcast i8* %6992 to <16 x i8>*
  %6994 = load <16 x i8>, <16 x i8>* %6993, align 2, !tbaa !390
  %6995 = getelementptr inbounds i8, i8* %6880, i64 48
  %6996 = bitcast i8* %6995 to <16 x i8>*
  %6997 = load <16 x i8>, <16 x i8>* %6996, align 16, !tbaa !390
  %6998 = getelementptr inbounds i8, i8* %6874, i64 48
  %6999 = bitcast i8* %6998 to <16 x i8>*
  %7000 = load <16 x i8>, <16 x i8>* %6999, align 16, !tbaa !390
  %7001 = getelementptr inbounds i8, i8* %6868, i64 48
  %7002 = bitcast i8* %7001 to <16 x i8>*
  %7003 = load <16 x i8>, <16 x i8>* %7002, align 16, !tbaa !390
  %7004 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7000, <16 x i8> %7003) #11
  %7005 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7004, <16 x i8> %6997) #11
  %7006 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6988, <16 x i8> %7005) #11
  %7007 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6994, <16 x i8> %6991) #11
  %7008 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7006, <16 x i8> %7007) #11
  %7009 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6979, <16 x i8> %7008) #11
  %7010 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %6985, <16 x i8> %6982) #11
  %7011 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7009, <16 x i8> %7010) #11
  %7012 = add nsw i64 %6390, %5921
  %7013 = getelementptr inbounds i8, i8* %5, i64 %7012
  %7014 = bitcast i8* %7013 to <16 x i8>*
  store <16 x i8> %6906, <16 x i8>* %7014, align 1, !tbaa !392
  %7015 = getelementptr inbounds i8, i8* %7013, i64 16
  %7016 = bitcast i8* %7015 to <16 x i8>*
  store <16 x i8> %6941, <16 x i8>* %7016, align 1, !tbaa !392
  %7017 = getelementptr inbounds i8, i8* %7013, i64 32
  %7018 = bitcast i8* %7017 to <16 x i8>*
  store <16 x i8> %6976, <16 x i8>* %7018, align 1, !tbaa !392
  %7019 = getelementptr inbounds i8, i8* %7013, i64 48
  %7020 = bitcast i8* %7019 to <16 x i8>*
  store <16 x i8> %7011, <16 x i8>* %7020, align 1, !tbaa !392
  %t27144.1 = add i32 %79, %6086
  %t66145.1 = add nsw i32 %t27144.1, %71
  %t67146.1 = add nsw i32 %t27144.1, %76
  %7021 = sext i32 %t66145.1 to i64
  %7022 = shl nsw i64 %7021, 6
  %7023 = getelementptr inbounds i8, i8* %bounded_input52, i64 %7022
  %7024 = getelementptr inbounds i8, i8* %7023, i64 1
  %7025 = bitcast i8* %7024 to <16 x i8>*
  %7026 = load <16 x i8>, <16 x i8>* %7025, align 1, !tbaa !390
  %7027 = sext i32 %t27144.1 to i64
  %7028 = shl nsw i64 %7027, 6
  %7029 = getelementptr inbounds i8, i8* %bounded_input52, i64 %7028
  %7030 = getelementptr inbounds i8, i8* %7029, i64 1
  %7031 = bitcast i8* %7030 to <16 x i8>*
  %7032 = load <16 x i8>, <16 x i8>* %7031, align 1, !tbaa !390
  %7033 = sext i32 %t67146.1 to i64
  %7034 = shl nsw i64 %7033, 6
  %7035 = getelementptr inbounds i8, i8* %bounded_input52, i64 %7034
  %7036 = getelementptr inbounds i8, i8* %7035, i64 1
  %7037 = bitcast i8* %7036 to <16 x i8>*
  %7038 = load <16 x i8>, <16 x i8>* %7037, align 1, !tbaa !390
  %7039 = getelementptr inbounds i8, i8* %7035, i64 2
  %7040 = bitcast i8* %7039 to <16 x i8>*
  %7041 = load <16 x i8>, <16 x i8>* %7040, align 2, !tbaa !390
  %7042 = getelementptr inbounds i8, i8* %7029, i64 2
  %7043 = bitcast i8* %7042 to <16 x i8>*
  %7044 = load <16 x i8>, <16 x i8>* %7043, align 2, !tbaa !390
  %7045 = getelementptr inbounds i8, i8* %7023, i64 2
  %7046 = bitcast i8* %7045 to <16 x i8>*
  %7047 = load <16 x i8>, <16 x i8>* %7046, align 2, !tbaa !390
  %7048 = bitcast i8* %7035 to <16 x i8>*
  %7049 = load <16 x i8>, <16 x i8>* %7048, align 16, !tbaa !390
  %7050 = bitcast i8* %7029 to <16 x i8>*
  %7051 = load <16 x i8>, <16 x i8>* %7050, align 16, !tbaa !390
  %7052 = bitcast i8* %7023 to <16 x i8>*
  %7053 = load <16 x i8>, <16 x i8>* %7052, align 16, !tbaa !390
  %7054 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7051, <16 x i8> %7053) #11
  %7055 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7054, <16 x i8> %7049) #11
  %7056 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7041, <16 x i8> %7055) #11
  %7057 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7047, <16 x i8> %7044) #11
  %7058 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7056, <16 x i8> %7057) #11
  %7059 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7026, <16 x i8> %7058) #11
  %7060 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7038, <16 x i8> %7032) #11
  %7061 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7059, <16 x i8> %7060) #11
  %7062 = getelementptr inbounds i8, i8* %7023, i64 17
  %7063 = bitcast i8* %7062 to <16 x i8>*
  %7064 = load <16 x i8>, <16 x i8>* %7063, align 1, !tbaa !390
  %7065 = getelementptr inbounds i8, i8* %7029, i64 17
  %7066 = bitcast i8* %7065 to <16 x i8>*
  %7067 = load <16 x i8>, <16 x i8>* %7066, align 1, !tbaa !390
  %7068 = getelementptr inbounds i8, i8* %7035, i64 17
  %7069 = bitcast i8* %7068 to <16 x i8>*
  %7070 = load <16 x i8>, <16 x i8>* %7069, align 1, !tbaa !390
  %7071 = getelementptr inbounds i8, i8* %7035, i64 18
  %7072 = bitcast i8* %7071 to <16 x i8>*
  %7073 = load <16 x i8>, <16 x i8>* %7072, align 2, !tbaa !390
  %7074 = getelementptr inbounds i8, i8* %7029, i64 18
  %7075 = bitcast i8* %7074 to <16 x i8>*
  %7076 = load <16 x i8>, <16 x i8>* %7075, align 2, !tbaa !390
  %7077 = getelementptr inbounds i8, i8* %7023, i64 18
  %7078 = bitcast i8* %7077 to <16 x i8>*
  %7079 = load <16 x i8>, <16 x i8>* %7078, align 2, !tbaa !390
  %7080 = getelementptr inbounds i8, i8* %7035, i64 16
  %7081 = bitcast i8* %7080 to <16 x i8>*
  %7082 = load <16 x i8>, <16 x i8>* %7081, align 16, !tbaa !390
  %7083 = getelementptr inbounds i8, i8* %7029, i64 16
  %7084 = bitcast i8* %7083 to <16 x i8>*
  %7085 = load <16 x i8>, <16 x i8>* %7084, align 16, !tbaa !390
  %7086 = getelementptr inbounds i8, i8* %7023, i64 16
  %7087 = bitcast i8* %7086 to <16 x i8>*
  %7088 = load <16 x i8>, <16 x i8>* %7087, align 16, !tbaa !390
  %7089 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7085, <16 x i8> %7088) #11
  %7090 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7089, <16 x i8> %7082) #11
  %7091 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7073, <16 x i8> %7090) #11
  %7092 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7079, <16 x i8> %7076) #11
  %7093 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7091, <16 x i8> %7092) #11
  %7094 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7064, <16 x i8> %7093) #11
  %7095 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7070, <16 x i8> %7067) #11
  %7096 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7094, <16 x i8> %7095) #11
  %7097 = getelementptr inbounds i8, i8* %7023, i64 33
  %7098 = bitcast i8* %7097 to <16 x i8>*
  %7099 = load <16 x i8>, <16 x i8>* %7098, align 1, !tbaa !390
  %7100 = getelementptr inbounds i8, i8* %7029, i64 33
  %7101 = bitcast i8* %7100 to <16 x i8>*
  %7102 = load <16 x i8>, <16 x i8>* %7101, align 1, !tbaa !390
  %7103 = getelementptr inbounds i8, i8* %7035, i64 33
  %7104 = bitcast i8* %7103 to <16 x i8>*
  %7105 = load <16 x i8>, <16 x i8>* %7104, align 1, !tbaa !390
  %7106 = getelementptr inbounds i8, i8* %7035, i64 34
  %7107 = bitcast i8* %7106 to <16 x i8>*
  %7108 = load <16 x i8>, <16 x i8>* %7107, align 2, !tbaa !390
  %7109 = getelementptr inbounds i8, i8* %7029, i64 34
  %7110 = bitcast i8* %7109 to <16 x i8>*
  %7111 = load <16 x i8>, <16 x i8>* %7110, align 2, !tbaa !390
  %7112 = getelementptr inbounds i8, i8* %7023, i64 34
  %7113 = bitcast i8* %7112 to <16 x i8>*
  %7114 = load <16 x i8>, <16 x i8>* %7113, align 2, !tbaa !390
  %7115 = getelementptr inbounds i8, i8* %7035, i64 32
  %7116 = bitcast i8* %7115 to <16 x i8>*
  %7117 = load <16 x i8>, <16 x i8>* %7116, align 16, !tbaa !390
  %7118 = getelementptr inbounds i8, i8* %7029, i64 32
  %7119 = bitcast i8* %7118 to <16 x i8>*
  %7120 = load <16 x i8>, <16 x i8>* %7119, align 16, !tbaa !390
  %7121 = getelementptr inbounds i8, i8* %7023, i64 32
  %7122 = bitcast i8* %7121 to <16 x i8>*
  %7123 = load <16 x i8>, <16 x i8>* %7122, align 16, !tbaa !390
  %7124 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7120, <16 x i8> %7123) #11
  %7125 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7124, <16 x i8> %7117) #11
  %7126 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7108, <16 x i8> %7125) #11
  %7127 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7114, <16 x i8> %7111) #11
  %7128 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7126, <16 x i8> %7127) #11
  %7129 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7099, <16 x i8> %7128) #11
  %7130 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7105, <16 x i8> %7102) #11
  %7131 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7129, <16 x i8> %7130) #11
  %7132 = getelementptr inbounds i8, i8* %7023, i64 49
  %7133 = bitcast i8* %7132 to <16 x i8>*
  %7134 = load <16 x i8>, <16 x i8>* %7133, align 1, !tbaa !390
  %7135 = getelementptr inbounds i8, i8* %7029, i64 49
  %7136 = bitcast i8* %7135 to <16 x i8>*
  %7137 = load <16 x i8>, <16 x i8>* %7136, align 1, !tbaa !390
  %7138 = getelementptr inbounds i8, i8* %7035, i64 49
  %7139 = bitcast i8* %7138 to <16 x i8>*
  %7140 = load <16 x i8>, <16 x i8>* %7139, align 1, !tbaa !390
  %7141 = getelementptr inbounds i8, i8* %7035, i64 50
  %7142 = bitcast i8* %7141 to <16 x i8>*
  %7143 = load <16 x i8>, <16 x i8>* %7142, align 2, !tbaa !390
  %7144 = getelementptr inbounds i8, i8* %7029, i64 50
  %7145 = bitcast i8* %7144 to <16 x i8>*
  %7146 = load <16 x i8>, <16 x i8>* %7145, align 2, !tbaa !390
  %7147 = getelementptr inbounds i8, i8* %7023, i64 50
  %7148 = bitcast i8* %7147 to <16 x i8>*
  %7149 = load <16 x i8>, <16 x i8>* %7148, align 2, !tbaa !390
  %7150 = getelementptr inbounds i8, i8* %7035, i64 48
  %7151 = bitcast i8* %7150 to <16 x i8>*
  %7152 = load <16 x i8>, <16 x i8>* %7151, align 16, !tbaa !390
  %7153 = getelementptr inbounds i8, i8* %7029, i64 48
  %7154 = bitcast i8* %7153 to <16 x i8>*
  %7155 = load <16 x i8>, <16 x i8>* %7154, align 16, !tbaa !390
  %7156 = getelementptr inbounds i8, i8* %7023, i64 48
  %7157 = bitcast i8* %7156 to <16 x i8>*
  %7158 = load <16 x i8>, <16 x i8>* %7157, align 16, !tbaa !390
  %7159 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7155, <16 x i8> %7158) #11
  %7160 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7159, <16 x i8> %7152) #11
  %7161 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7143, <16 x i8> %7160) #11
  %7162 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7149, <16 x i8> %7146) #11
  %7163 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7161, <16 x i8> %7162) #11
  %7164 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7134, <16 x i8> %7163) #11
  %7165 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7140, <16 x i8> %7137) #11
  %7166 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7164, <16 x i8> %7165) #11
  %7167 = add nsw i64 %6546, %5921
  %7168 = getelementptr inbounds i8, i8* %5, i64 %7167
  %7169 = bitcast i8* %7168 to <16 x i8>*
  store <16 x i8> %7061, <16 x i8>* %7169, align 1, !tbaa !392
  %7170 = getelementptr inbounds i8, i8* %7168, i64 16
  %7171 = bitcast i8* %7170 to <16 x i8>*
  store <16 x i8> %7096, <16 x i8>* %7171, align 1, !tbaa !392
  %7172 = getelementptr inbounds i8, i8* %7168, i64 32
  %7173 = bitcast i8* %7172 to <16 x i8>*
  store <16 x i8> %7131, <16 x i8>* %7173, align 1, !tbaa !392
  %7174 = getelementptr inbounds i8, i8* %7168, i64 48
  %7175 = bitcast i8* %7174 to <16 x i8>*
  store <16 x i8> %7166, <16 x i8>* %7175, align 1, !tbaa !392
  %t31152 = add i32 %80, %5927
  %t68153 = add nsw i32 %t31152, %71
  %t69154 = add nsw i32 %t31152, %76
  %7176 = sext i32 %t68153 to i64
  %7177 = shl nsw i64 %7176, 6
  %7178 = getelementptr inbounds i8, i8* %bounded_input52, i64 %7177
  %7179 = getelementptr inbounds i8, i8* %7178, i64 1
  %7180 = bitcast i8* %7179 to <16 x i8>*
  %7181 = load <16 x i8>, <16 x i8>* %7180, align 1, !tbaa !390
  %7182 = sext i32 %t31152 to i64
  %7183 = shl nsw i64 %7182, 6
  %7184 = getelementptr inbounds i8, i8* %bounded_input52, i64 %7183
  %7185 = getelementptr inbounds i8, i8* %7184, i64 1
  %7186 = bitcast i8* %7185 to <16 x i8>*
  %7187 = load <16 x i8>, <16 x i8>* %7186, align 1, !tbaa !390
  %7188 = sext i32 %t69154 to i64
  %7189 = shl nsw i64 %7188, 6
  %7190 = getelementptr inbounds i8, i8* %bounded_input52, i64 %7189
  %7191 = getelementptr inbounds i8, i8* %7190, i64 1
  %7192 = bitcast i8* %7191 to <16 x i8>*
  %7193 = load <16 x i8>, <16 x i8>* %7192, align 1, !tbaa !390
  %7194 = getelementptr inbounds i8, i8* %7190, i64 2
  %7195 = bitcast i8* %7194 to <16 x i8>*
  %7196 = load <16 x i8>, <16 x i8>* %7195, align 2, !tbaa !390
  %7197 = getelementptr inbounds i8, i8* %7184, i64 2
  %7198 = bitcast i8* %7197 to <16 x i8>*
  %7199 = load <16 x i8>, <16 x i8>* %7198, align 2, !tbaa !390
  %7200 = getelementptr inbounds i8, i8* %7178, i64 2
  %7201 = bitcast i8* %7200 to <16 x i8>*
  %7202 = load <16 x i8>, <16 x i8>* %7201, align 2, !tbaa !390
  %7203 = bitcast i8* %7190 to <16 x i8>*
  %7204 = load <16 x i8>, <16 x i8>* %7203, align 16, !tbaa !390
  %7205 = bitcast i8* %7184 to <16 x i8>*
  %7206 = load <16 x i8>, <16 x i8>* %7205, align 16, !tbaa !390
  %7207 = bitcast i8* %7178 to <16 x i8>*
  %7208 = load <16 x i8>, <16 x i8>* %7207, align 16, !tbaa !390
  %7209 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7206, <16 x i8> %7208) #11
  %7210 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7209, <16 x i8> %7204) #11
  %7211 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7196, <16 x i8> %7210) #11
  %7212 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7202, <16 x i8> %7199) #11
  %7213 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7211, <16 x i8> %7212) #11
  %7214 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7181, <16 x i8> %7213) #11
  %7215 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7193, <16 x i8> %7187) #11
  %7216 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7214, <16 x i8> %7215) #11
  %7217 = getelementptr inbounds i8, i8* %7178, i64 17
  %7218 = bitcast i8* %7217 to <16 x i8>*
  %7219 = load <16 x i8>, <16 x i8>* %7218, align 1, !tbaa !390
  %7220 = getelementptr inbounds i8, i8* %7184, i64 17
  %7221 = bitcast i8* %7220 to <16 x i8>*
  %7222 = load <16 x i8>, <16 x i8>* %7221, align 1, !tbaa !390
  %7223 = getelementptr inbounds i8, i8* %7190, i64 17
  %7224 = bitcast i8* %7223 to <16 x i8>*
  %7225 = load <16 x i8>, <16 x i8>* %7224, align 1, !tbaa !390
  %7226 = getelementptr inbounds i8, i8* %7190, i64 18
  %7227 = bitcast i8* %7226 to <16 x i8>*
  %7228 = load <16 x i8>, <16 x i8>* %7227, align 2, !tbaa !390
  %7229 = getelementptr inbounds i8, i8* %7184, i64 18
  %7230 = bitcast i8* %7229 to <16 x i8>*
  %7231 = load <16 x i8>, <16 x i8>* %7230, align 2, !tbaa !390
  %7232 = getelementptr inbounds i8, i8* %7178, i64 18
  %7233 = bitcast i8* %7232 to <16 x i8>*
  %7234 = load <16 x i8>, <16 x i8>* %7233, align 2, !tbaa !390
  %7235 = getelementptr inbounds i8, i8* %7190, i64 16
  %7236 = bitcast i8* %7235 to <16 x i8>*
  %7237 = load <16 x i8>, <16 x i8>* %7236, align 16, !tbaa !390
  %7238 = getelementptr inbounds i8, i8* %7184, i64 16
  %7239 = bitcast i8* %7238 to <16 x i8>*
  %7240 = load <16 x i8>, <16 x i8>* %7239, align 16, !tbaa !390
  %7241 = getelementptr inbounds i8, i8* %7178, i64 16
  %7242 = bitcast i8* %7241 to <16 x i8>*
  %7243 = load <16 x i8>, <16 x i8>* %7242, align 16, !tbaa !390
  %7244 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7240, <16 x i8> %7243) #11
  %7245 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7244, <16 x i8> %7237) #11
  %7246 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7228, <16 x i8> %7245) #11
  %7247 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7234, <16 x i8> %7231) #11
  %7248 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7246, <16 x i8> %7247) #11
  %7249 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7219, <16 x i8> %7248) #11
  %7250 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7225, <16 x i8> %7222) #11
  %7251 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7249, <16 x i8> %7250) #11
  %7252 = getelementptr inbounds i8, i8* %7178, i64 33
  %7253 = bitcast i8* %7252 to <16 x i8>*
  %7254 = load <16 x i8>, <16 x i8>* %7253, align 1, !tbaa !390
  %7255 = getelementptr inbounds i8, i8* %7184, i64 33
  %7256 = bitcast i8* %7255 to <16 x i8>*
  %7257 = load <16 x i8>, <16 x i8>* %7256, align 1, !tbaa !390
  %7258 = getelementptr inbounds i8, i8* %7190, i64 33
  %7259 = bitcast i8* %7258 to <16 x i8>*
  %7260 = load <16 x i8>, <16 x i8>* %7259, align 1, !tbaa !390
  %7261 = getelementptr inbounds i8, i8* %7190, i64 34
  %7262 = bitcast i8* %7261 to <16 x i8>*
  %7263 = load <16 x i8>, <16 x i8>* %7262, align 2, !tbaa !390
  %7264 = getelementptr inbounds i8, i8* %7184, i64 34
  %7265 = bitcast i8* %7264 to <16 x i8>*
  %7266 = load <16 x i8>, <16 x i8>* %7265, align 2, !tbaa !390
  %7267 = getelementptr inbounds i8, i8* %7178, i64 34
  %7268 = bitcast i8* %7267 to <16 x i8>*
  %7269 = load <16 x i8>, <16 x i8>* %7268, align 2, !tbaa !390
  %7270 = getelementptr inbounds i8, i8* %7190, i64 32
  %7271 = bitcast i8* %7270 to <16 x i8>*
  %7272 = load <16 x i8>, <16 x i8>* %7271, align 16, !tbaa !390
  %7273 = getelementptr inbounds i8, i8* %7184, i64 32
  %7274 = bitcast i8* %7273 to <16 x i8>*
  %7275 = load <16 x i8>, <16 x i8>* %7274, align 16, !tbaa !390
  %7276 = getelementptr inbounds i8, i8* %7178, i64 32
  %7277 = bitcast i8* %7276 to <16 x i8>*
  %7278 = load <16 x i8>, <16 x i8>* %7277, align 16, !tbaa !390
  %7279 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7275, <16 x i8> %7278) #11
  %7280 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7279, <16 x i8> %7272) #11
  %7281 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7263, <16 x i8> %7280) #11
  %7282 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7269, <16 x i8> %7266) #11
  %7283 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7281, <16 x i8> %7282) #11
  %7284 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7254, <16 x i8> %7283) #11
  %7285 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7260, <16 x i8> %7257) #11
  %7286 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7284, <16 x i8> %7285) #11
  %7287 = getelementptr inbounds i8, i8* %7178, i64 49
  %7288 = bitcast i8* %7287 to <16 x i8>*
  %7289 = load <16 x i8>, <16 x i8>* %7288, align 1, !tbaa !390
  %7290 = getelementptr inbounds i8, i8* %7184, i64 49
  %7291 = bitcast i8* %7290 to <16 x i8>*
  %7292 = load <16 x i8>, <16 x i8>* %7291, align 1, !tbaa !390
  %7293 = getelementptr inbounds i8, i8* %7190, i64 49
  %7294 = bitcast i8* %7293 to <16 x i8>*
  %7295 = load <16 x i8>, <16 x i8>* %7294, align 1, !tbaa !390
  %7296 = getelementptr inbounds i8, i8* %7190, i64 50
  %7297 = bitcast i8* %7296 to <16 x i8>*
  %7298 = load <16 x i8>, <16 x i8>* %7297, align 2, !tbaa !390
  %7299 = getelementptr inbounds i8, i8* %7184, i64 50
  %7300 = bitcast i8* %7299 to <16 x i8>*
  %7301 = load <16 x i8>, <16 x i8>* %7300, align 2, !tbaa !390
  %7302 = getelementptr inbounds i8, i8* %7178, i64 50
  %7303 = bitcast i8* %7302 to <16 x i8>*
  %7304 = load <16 x i8>, <16 x i8>* %7303, align 2, !tbaa !390
  %7305 = getelementptr inbounds i8, i8* %7190, i64 48
  %7306 = bitcast i8* %7305 to <16 x i8>*
  %7307 = load <16 x i8>, <16 x i8>* %7306, align 16, !tbaa !390
  %7308 = getelementptr inbounds i8, i8* %7184, i64 48
  %7309 = bitcast i8* %7308 to <16 x i8>*
  %7310 = load <16 x i8>, <16 x i8>* %7309, align 16, !tbaa !390
  %7311 = getelementptr inbounds i8, i8* %7178, i64 48
  %7312 = bitcast i8* %7311 to <16 x i8>*
  %7313 = load <16 x i8>, <16 x i8>* %7312, align 16, !tbaa !390
  %7314 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7310, <16 x i8> %7313) #11
  %7315 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7314, <16 x i8> %7307) #11
  %7316 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7298, <16 x i8> %7315) #11
  %7317 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7304, <16 x i8> %7301) #11
  %7318 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7316, <16 x i8> %7317) #11
  %7319 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7289, <16 x i8> %7318) #11
  %7320 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7295, <16 x i8> %7292) #11
  %7321 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7319, <16 x i8> %7320) #11
  %7322 = add nsw i64 %6390, %5922
  %7323 = getelementptr inbounds i8, i8* %5, i64 %7322
  %7324 = bitcast i8* %7323 to <16 x i8>*
  store <16 x i8> %7216, <16 x i8>* %7324, align 1, !tbaa !392
  %7325 = getelementptr inbounds i8, i8* %7323, i64 16
  %7326 = bitcast i8* %7325 to <16 x i8>*
  store <16 x i8> %7251, <16 x i8>* %7326, align 1, !tbaa !392
  %7327 = getelementptr inbounds i8, i8* %7323, i64 32
  %7328 = bitcast i8* %7327 to <16 x i8>*
  store <16 x i8> %7286, <16 x i8>* %7328, align 1, !tbaa !392
  %7329 = getelementptr inbounds i8, i8* %7323, i64 48
  %7330 = bitcast i8* %7329 to <16 x i8>*
  store <16 x i8> %7321, <16 x i8>* %7330, align 1, !tbaa !392
  %t31152.1 = add i32 %80, %6086
  %t68153.1 = add nsw i32 %t31152.1, %71
  %t69154.1 = add nsw i32 %t31152.1, %76
  %7331 = sext i32 %t68153.1 to i64
  %7332 = shl nsw i64 %7331, 6
  %7333 = getelementptr inbounds i8, i8* %bounded_input52, i64 %7332
  %7334 = getelementptr inbounds i8, i8* %7333, i64 1
  %7335 = bitcast i8* %7334 to <16 x i8>*
  %7336 = load <16 x i8>, <16 x i8>* %7335, align 1, !tbaa !390
  %7337 = sext i32 %t31152.1 to i64
  %7338 = shl nsw i64 %7337, 6
  %7339 = getelementptr inbounds i8, i8* %bounded_input52, i64 %7338
  %7340 = getelementptr inbounds i8, i8* %7339, i64 1
  %7341 = bitcast i8* %7340 to <16 x i8>*
  %7342 = load <16 x i8>, <16 x i8>* %7341, align 1, !tbaa !390
  %7343 = sext i32 %t69154.1 to i64
  %7344 = shl nsw i64 %7343, 6
  %7345 = getelementptr inbounds i8, i8* %bounded_input52, i64 %7344
  %7346 = getelementptr inbounds i8, i8* %7345, i64 1
  %7347 = bitcast i8* %7346 to <16 x i8>*
  %7348 = load <16 x i8>, <16 x i8>* %7347, align 1, !tbaa !390
  %7349 = getelementptr inbounds i8, i8* %7345, i64 2
  %7350 = bitcast i8* %7349 to <16 x i8>*
  %7351 = load <16 x i8>, <16 x i8>* %7350, align 2, !tbaa !390
  %7352 = getelementptr inbounds i8, i8* %7339, i64 2
  %7353 = bitcast i8* %7352 to <16 x i8>*
  %7354 = load <16 x i8>, <16 x i8>* %7353, align 2, !tbaa !390
  %7355 = getelementptr inbounds i8, i8* %7333, i64 2
  %7356 = bitcast i8* %7355 to <16 x i8>*
  %7357 = load <16 x i8>, <16 x i8>* %7356, align 2, !tbaa !390
  %7358 = bitcast i8* %7345 to <16 x i8>*
  %7359 = load <16 x i8>, <16 x i8>* %7358, align 16, !tbaa !390
  %7360 = bitcast i8* %7339 to <16 x i8>*
  %7361 = load <16 x i8>, <16 x i8>* %7360, align 16, !tbaa !390
  %7362 = bitcast i8* %7333 to <16 x i8>*
  %7363 = load <16 x i8>, <16 x i8>* %7362, align 16, !tbaa !390
  %7364 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7361, <16 x i8> %7363) #11
  %7365 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7364, <16 x i8> %7359) #11
  %7366 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7351, <16 x i8> %7365) #11
  %7367 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7357, <16 x i8> %7354) #11
  %7368 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7366, <16 x i8> %7367) #11
  %7369 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7336, <16 x i8> %7368) #11
  %7370 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7348, <16 x i8> %7342) #11
  %7371 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7369, <16 x i8> %7370) #11
  %7372 = getelementptr inbounds i8, i8* %7333, i64 17
  %7373 = bitcast i8* %7372 to <16 x i8>*
  %7374 = load <16 x i8>, <16 x i8>* %7373, align 1, !tbaa !390
  %7375 = getelementptr inbounds i8, i8* %7339, i64 17
  %7376 = bitcast i8* %7375 to <16 x i8>*
  %7377 = load <16 x i8>, <16 x i8>* %7376, align 1, !tbaa !390
  %7378 = getelementptr inbounds i8, i8* %7345, i64 17
  %7379 = bitcast i8* %7378 to <16 x i8>*
  %7380 = load <16 x i8>, <16 x i8>* %7379, align 1, !tbaa !390
  %7381 = getelementptr inbounds i8, i8* %7345, i64 18
  %7382 = bitcast i8* %7381 to <16 x i8>*
  %7383 = load <16 x i8>, <16 x i8>* %7382, align 2, !tbaa !390
  %7384 = getelementptr inbounds i8, i8* %7339, i64 18
  %7385 = bitcast i8* %7384 to <16 x i8>*
  %7386 = load <16 x i8>, <16 x i8>* %7385, align 2, !tbaa !390
  %7387 = getelementptr inbounds i8, i8* %7333, i64 18
  %7388 = bitcast i8* %7387 to <16 x i8>*
  %7389 = load <16 x i8>, <16 x i8>* %7388, align 2, !tbaa !390
  %7390 = getelementptr inbounds i8, i8* %7345, i64 16
  %7391 = bitcast i8* %7390 to <16 x i8>*
  %7392 = load <16 x i8>, <16 x i8>* %7391, align 16, !tbaa !390
  %7393 = getelementptr inbounds i8, i8* %7339, i64 16
  %7394 = bitcast i8* %7393 to <16 x i8>*
  %7395 = load <16 x i8>, <16 x i8>* %7394, align 16, !tbaa !390
  %7396 = getelementptr inbounds i8, i8* %7333, i64 16
  %7397 = bitcast i8* %7396 to <16 x i8>*
  %7398 = load <16 x i8>, <16 x i8>* %7397, align 16, !tbaa !390
  %7399 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7395, <16 x i8> %7398) #11
  %7400 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7399, <16 x i8> %7392) #11
  %7401 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7383, <16 x i8> %7400) #11
  %7402 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7389, <16 x i8> %7386) #11
  %7403 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7401, <16 x i8> %7402) #11
  %7404 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7374, <16 x i8> %7403) #11
  %7405 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7380, <16 x i8> %7377) #11
  %7406 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7404, <16 x i8> %7405) #11
  %7407 = getelementptr inbounds i8, i8* %7333, i64 33
  %7408 = bitcast i8* %7407 to <16 x i8>*
  %7409 = load <16 x i8>, <16 x i8>* %7408, align 1, !tbaa !390
  %7410 = getelementptr inbounds i8, i8* %7339, i64 33
  %7411 = bitcast i8* %7410 to <16 x i8>*
  %7412 = load <16 x i8>, <16 x i8>* %7411, align 1, !tbaa !390
  %7413 = getelementptr inbounds i8, i8* %7345, i64 33
  %7414 = bitcast i8* %7413 to <16 x i8>*
  %7415 = load <16 x i8>, <16 x i8>* %7414, align 1, !tbaa !390
  %7416 = getelementptr inbounds i8, i8* %7345, i64 34
  %7417 = bitcast i8* %7416 to <16 x i8>*
  %7418 = load <16 x i8>, <16 x i8>* %7417, align 2, !tbaa !390
  %7419 = getelementptr inbounds i8, i8* %7339, i64 34
  %7420 = bitcast i8* %7419 to <16 x i8>*
  %7421 = load <16 x i8>, <16 x i8>* %7420, align 2, !tbaa !390
  %7422 = getelementptr inbounds i8, i8* %7333, i64 34
  %7423 = bitcast i8* %7422 to <16 x i8>*
  %7424 = load <16 x i8>, <16 x i8>* %7423, align 2, !tbaa !390
  %7425 = getelementptr inbounds i8, i8* %7345, i64 32
  %7426 = bitcast i8* %7425 to <16 x i8>*
  %7427 = load <16 x i8>, <16 x i8>* %7426, align 16, !tbaa !390
  %7428 = getelementptr inbounds i8, i8* %7339, i64 32
  %7429 = bitcast i8* %7428 to <16 x i8>*
  %7430 = load <16 x i8>, <16 x i8>* %7429, align 16, !tbaa !390
  %7431 = getelementptr inbounds i8, i8* %7333, i64 32
  %7432 = bitcast i8* %7431 to <16 x i8>*
  %7433 = load <16 x i8>, <16 x i8>* %7432, align 16, !tbaa !390
  %7434 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7430, <16 x i8> %7433) #11
  %7435 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7434, <16 x i8> %7427) #11
  %7436 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7418, <16 x i8> %7435) #11
  %7437 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7424, <16 x i8> %7421) #11
  %7438 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7436, <16 x i8> %7437) #11
  %7439 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7409, <16 x i8> %7438) #11
  %7440 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7415, <16 x i8> %7412) #11
  %7441 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7439, <16 x i8> %7440) #11
  %7442 = getelementptr inbounds i8, i8* %7333, i64 49
  %7443 = bitcast i8* %7442 to <16 x i8>*
  %7444 = load <16 x i8>, <16 x i8>* %7443, align 1, !tbaa !390
  %7445 = getelementptr inbounds i8, i8* %7339, i64 49
  %7446 = bitcast i8* %7445 to <16 x i8>*
  %7447 = load <16 x i8>, <16 x i8>* %7446, align 1, !tbaa !390
  %7448 = getelementptr inbounds i8, i8* %7345, i64 49
  %7449 = bitcast i8* %7448 to <16 x i8>*
  %7450 = load <16 x i8>, <16 x i8>* %7449, align 1, !tbaa !390
  %7451 = getelementptr inbounds i8, i8* %7345, i64 50
  %7452 = bitcast i8* %7451 to <16 x i8>*
  %7453 = load <16 x i8>, <16 x i8>* %7452, align 2, !tbaa !390
  %7454 = getelementptr inbounds i8, i8* %7339, i64 50
  %7455 = bitcast i8* %7454 to <16 x i8>*
  %7456 = load <16 x i8>, <16 x i8>* %7455, align 2, !tbaa !390
  %7457 = getelementptr inbounds i8, i8* %7333, i64 50
  %7458 = bitcast i8* %7457 to <16 x i8>*
  %7459 = load <16 x i8>, <16 x i8>* %7458, align 2, !tbaa !390
  %7460 = getelementptr inbounds i8, i8* %7345, i64 48
  %7461 = bitcast i8* %7460 to <16 x i8>*
  %7462 = load <16 x i8>, <16 x i8>* %7461, align 16, !tbaa !390
  %7463 = getelementptr inbounds i8, i8* %7339, i64 48
  %7464 = bitcast i8* %7463 to <16 x i8>*
  %7465 = load <16 x i8>, <16 x i8>* %7464, align 16, !tbaa !390
  %7466 = getelementptr inbounds i8, i8* %7333, i64 48
  %7467 = bitcast i8* %7466 to <16 x i8>*
  %7468 = load <16 x i8>, <16 x i8>* %7467, align 16, !tbaa !390
  %7469 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7465, <16 x i8> %7468) #11
  %7470 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7469, <16 x i8> %7462) #11
  %7471 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7453, <16 x i8> %7470) #11
  %7472 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7459, <16 x i8> %7456) #11
  %7473 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7471, <16 x i8> %7472) #11
  %7474 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7444, <16 x i8> %7473) #11
  %7475 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7450, <16 x i8> %7447) #11
  %7476 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7474, <16 x i8> %7475) #11
  %7477 = add nsw i64 %6546, %5922
  %7478 = getelementptr inbounds i8, i8* %5, i64 %7477
  %7479 = bitcast i8* %7478 to <16 x i8>*
  store <16 x i8> %7371, <16 x i8>* %7479, align 1, !tbaa !392
  %7480 = getelementptr inbounds i8, i8* %7478, i64 16
  %7481 = bitcast i8* %7480 to <16 x i8>*
  store <16 x i8> %7406, <16 x i8>* %7481, align 1, !tbaa !392
  %7482 = getelementptr inbounds i8, i8* %7478, i64 32
  %7483 = bitcast i8* %7482 to <16 x i8>*
  store <16 x i8> %7441, <16 x i8>* %7483, align 1, !tbaa !392
  %7484 = getelementptr inbounds i8, i8* %7478, i64 48
  %7485 = bitcast i8* %7484 to <16 x i8>*
  store <16 x i8> %7476, <16 x i8>* %7485, align 1, !tbaa !392
  %t35160 = add i32 %81, %5927
  %t70161 = add nsw i32 %t35160, %71
  %t71162 = add nsw i32 %t35160, %76
  %7486 = sext i32 %t70161 to i64
  %7487 = shl nsw i64 %7486, 6
  %7488 = getelementptr inbounds i8, i8* %bounded_input52, i64 %7487
  %7489 = getelementptr inbounds i8, i8* %7488, i64 1
  %7490 = bitcast i8* %7489 to <16 x i8>*
  %7491 = load <16 x i8>, <16 x i8>* %7490, align 1, !tbaa !390
  %7492 = sext i32 %t35160 to i64
  %7493 = shl nsw i64 %7492, 6
  %7494 = getelementptr inbounds i8, i8* %bounded_input52, i64 %7493
  %7495 = getelementptr inbounds i8, i8* %7494, i64 1
  %7496 = bitcast i8* %7495 to <16 x i8>*
  %7497 = load <16 x i8>, <16 x i8>* %7496, align 1, !tbaa !390
  %7498 = sext i32 %t71162 to i64
  %7499 = shl nsw i64 %7498, 6
  %7500 = getelementptr inbounds i8, i8* %bounded_input52, i64 %7499
  %7501 = getelementptr inbounds i8, i8* %7500, i64 1
  %7502 = bitcast i8* %7501 to <16 x i8>*
  %7503 = load <16 x i8>, <16 x i8>* %7502, align 1, !tbaa !390
  %7504 = getelementptr inbounds i8, i8* %7500, i64 2
  %7505 = bitcast i8* %7504 to <16 x i8>*
  %7506 = load <16 x i8>, <16 x i8>* %7505, align 2, !tbaa !390
  %7507 = getelementptr inbounds i8, i8* %7494, i64 2
  %7508 = bitcast i8* %7507 to <16 x i8>*
  %7509 = load <16 x i8>, <16 x i8>* %7508, align 2, !tbaa !390
  %7510 = getelementptr inbounds i8, i8* %7488, i64 2
  %7511 = bitcast i8* %7510 to <16 x i8>*
  %7512 = load <16 x i8>, <16 x i8>* %7511, align 2, !tbaa !390
  %7513 = bitcast i8* %7500 to <16 x i8>*
  %7514 = load <16 x i8>, <16 x i8>* %7513, align 16, !tbaa !390
  %7515 = bitcast i8* %7494 to <16 x i8>*
  %7516 = load <16 x i8>, <16 x i8>* %7515, align 16, !tbaa !390
  %7517 = bitcast i8* %7488 to <16 x i8>*
  %7518 = load <16 x i8>, <16 x i8>* %7517, align 16, !tbaa !390
  %7519 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7516, <16 x i8> %7518) #11
  %7520 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7519, <16 x i8> %7514) #11
  %7521 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7506, <16 x i8> %7520) #11
  %7522 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7512, <16 x i8> %7509) #11
  %7523 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7521, <16 x i8> %7522) #11
  %7524 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7491, <16 x i8> %7523) #11
  %7525 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7503, <16 x i8> %7497) #11
  %7526 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7524, <16 x i8> %7525) #11
  %7527 = getelementptr inbounds i8, i8* %7488, i64 17
  %7528 = bitcast i8* %7527 to <16 x i8>*
  %7529 = load <16 x i8>, <16 x i8>* %7528, align 1, !tbaa !390
  %7530 = getelementptr inbounds i8, i8* %7494, i64 17
  %7531 = bitcast i8* %7530 to <16 x i8>*
  %7532 = load <16 x i8>, <16 x i8>* %7531, align 1, !tbaa !390
  %7533 = getelementptr inbounds i8, i8* %7500, i64 17
  %7534 = bitcast i8* %7533 to <16 x i8>*
  %7535 = load <16 x i8>, <16 x i8>* %7534, align 1, !tbaa !390
  %7536 = getelementptr inbounds i8, i8* %7500, i64 18
  %7537 = bitcast i8* %7536 to <16 x i8>*
  %7538 = load <16 x i8>, <16 x i8>* %7537, align 2, !tbaa !390
  %7539 = getelementptr inbounds i8, i8* %7494, i64 18
  %7540 = bitcast i8* %7539 to <16 x i8>*
  %7541 = load <16 x i8>, <16 x i8>* %7540, align 2, !tbaa !390
  %7542 = getelementptr inbounds i8, i8* %7488, i64 18
  %7543 = bitcast i8* %7542 to <16 x i8>*
  %7544 = load <16 x i8>, <16 x i8>* %7543, align 2, !tbaa !390
  %7545 = getelementptr inbounds i8, i8* %7500, i64 16
  %7546 = bitcast i8* %7545 to <16 x i8>*
  %7547 = load <16 x i8>, <16 x i8>* %7546, align 16, !tbaa !390
  %7548 = getelementptr inbounds i8, i8* %7494, i64 16
  %7549 = bitcast i8* %7548 to <16 x i8>*
  %7550 = load <16 x i8>, <16 x i8>* %7549, align 16, !tbaa !390
  %7551 = getelementptr inbounds i8, i8* %7488, i64 16
  %7552 = bitcast i8* %7551 to <16 x i8>*
  %7553 = load <16 x i8>, <16 x i8>* %7552, align 16, !tbaa !390
  %7554 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7550, <16 x i8> %7553) #11
  %7555 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7554, <16 x i8> %7547) #11
  %7556 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7538, <16 x i8> %7555) #11
  %7557 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7544, <16 x i8> %7541) #11
  %7558 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7556, <16 x i8> %7557) #11
  %7559 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7529, <16 x i8> %7558) #11
  %7560 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7535, <16 x i8> %7532) #11
  %7561 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7559, <16 x i8> %7560) #11
  %7562 = getelementptr inbounds i8, i8* %7488, i64 33
  %7563 = bitcast i8* %7562 to <16 x i8>*
  %7564 = load <16 x i8>, <16 x i8>* %7563, align 1, !tbaa !390
  %7565 = getelementptr inbounds i8, i8* %7494, i64 33
  %7566 = bitcast i8* %7565 to <16 x i8>*
  %7567 = load <16 x i8>, <16 x i8>* %7566, align 1, !tbaa !390
  %7568 = getelementptr inbounds i8, i8* %7500, i64 33
  %7569 = bitcast i8* %7568 to <16 x i8>*
  %7570 = load <16 x i8>, <16 x i8>* %7569, align 1, !tbaa !390
  %7571 = getelementptr inbounds i8, i8* %7500, i64 34
  %7572 = bitcast i8* %7571 to <16 x i8>*
  %7573 = load <16 x i8>, <16 x i8>* %7572, align 2, !tbaa !390
  %7574 = getelementptr inbounds i8, i8* %7494, i64 34
  %7575 = bitcast i8* %7574 to <16 x i8>*
  %7576 = load <16 x i8>, <16 x i8>* %7575, align 2, !tbaa !390
  %7577 = getelementptr inbounds i8, i8* %7488, i64 34
  %7578 = bitcast i8* %7577 to <16 x i8>*
  %7579 = load <16 x i8>, <16 x i8>* %7578, align 2, !tbaa !390
  %7580 = getelementptr inbounds i8, i8* %7500, i64 32
  %7581 = bitcast i8* %7580 to <16 x i8>*
  %7582 = load <16 x i8>, <16 x i8>* %7581, align 16, !tbaa !390
  %7583 = getelementptr inbounds i8, i8* %7494, i64 32
  %7584 = bitcast i8* %7583 to <16 x i8>*
  %7585 = load <16 x i8>, <16 x i8>* %7584, align 16, !tbaa !390
  %7586 = getelementptr inbounds i8, i8* %7488, i64 32
  %7587 = bitcast i8* %7586 to <16 x i8>*
  %7588 = load <16 x i8>, <16 x i8>* %7587, align 16, !tbaa !390
  %7589 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7585, <16 x i8> %7588) #11
  %7590 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7589, <16 x i8> %7582) #11
  %7591 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7573, <16 x i8> %7590) #11
  %7592 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7579, <16 x i8> %7576) #11
  %7593 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7591, <16 x i8> %7592) #11
  %7594 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7564, <16 x i8> %7593) #11
  %7595 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7570, <16 x i8> %7567) #11
  %7596 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7594, <16 x i8> %7595) #11
  %7597 = getelementptr inbounds i8, i8* %7488, i64 49
  %7598 = bitcast i8* %7597 to <16 x i8>*
  %7599 = load <16 x i8>, <16 x i8>* %7598, align 1, !tbaa !390
  %7600 = getelementptr inbounds i8, i8* %7494, i64 49
  %7601 = bitcast i8* %7600 to <16 x i8>*
  %7602 = load <16 x i8>, <16 x i8>* %7601, align 1, !tbaa !390
  %7603 = getelementptr inbounds i8, i8* %7500, i64 49
  %7604 = bitcast i8* %7603 to <16 x i8>*
  %7605 = load <16 x i8>, <16 x i8>* %7604, align 1, !tbaa !390
  %7606 = getelementptr inbounds i8, i8* %7500, i64 50
  %7607 = bitcast i8* %7606 to <16 x i8>*
  %7608 = load <16 x i8>, <16 x i8>* %7607, align 2, !tbaa !390
  %7609 = getelementptr inbounds i8, i8* %7494, i64 50
  %7610 = bitcast i8* %7609 to <16 x i8>*
  %7611 = load <16 x i8>, <16 x i8>* %7610, align 2, !tbaa !390
  %7612 = getelementptr inbounds i8, i8* %7488, i64 50
  %7613 = bitcast i8* %7612 to <16 x i8>*
  %7614 = load <16 x i8>, <16 x i8>* %7613, align 2, !tbaa !390
  %7615 = getelementptr inbounds i8, i8* %7500, i64 48
  %7616 = bitcast i8* %7615 to <16 x i8>*
  %7617 = load <16 x i8>, <16 x i8>* %7616, align 16, !tbaa !390
  %7618 = getelementptr inbounds i8, i8* %7494, i64 48
  %7619 = bitcast i8* %7618 to <16 x i8>*
  %7620 = load <16 x i8>, <16 x i8>* %7619, align 16, !tbaa !390
  %7621 = getelementptr inbounds i8, i8* %7488, i64 48
  %7622 = bitcast i8* %7621 to <16 x i8>*
  %7623 = load <16 x i8>, <16 x i8>* %7622, align 16, !tbaa !390
  %7624 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7620, <16 x i8> %7623) #11
  %7625 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7624, <16 x i8> %7617) #11
  %7626 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7608, <16 x i8> %7625) #11
  %7627 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7614, <16 x i8> %7611) #11
  %7628 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7626, <16 x i8> %7627) #11
  %7629 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7599, <16 x i8> %7628) #11
  %7630 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7605, <16 x i8> %7602) #11
  %7631 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7629, <16 x i8> %7630) #11
  %7632 = add nsw i64 %6390, %5923
  %7633 = getelementptr inbounds i8, i8* %5, i64 %7632
  %7634 = bitcast i8* %7633 to <16 x i8>*
  store <16 x i8> %7526, <16 x i8>* %7634, align 1, !tbaa !392
  %7635 = getelementptr inbounds i8, i8* %7633, i64 16
  %7636 = bitcast i8* %7635 to <16 x i8>*
  store <16 x i8> %7561, <16 x i8>* %7636, align 1, !tbaa !392
  %7637 = getelementptr inbounds i8, i8* %7633, i64 32
  %7638 = bitcast i8* %7637 to <16 x i8>*
  store <16 x i8> %7596, <16 x i8>* %7638, align 1, !tbaa !392
  %7639 = getelementptr inbounds i8, i8* %7633, i64 48
  %7640 = bitcast i8* %7639 to <16 x i8>*
  store <16 x i8> %7631, <16 x i8>* %7640, align 1, !tbaa !392
  %t35160.1 = add i32 %81, %6086
  %t70161.1 = add nsw i32 %t35160.1, %71
  %t71162.1 = add nsw i32 %t35160.1, %76
  %7641 = sext i32 %t70161.1 to i64
  %7642 = shl nsw i64 %7641, 6
  %7643 = getelementptr inbounds i8, i8* %bounded_input52, i64 %7642
  %7644 = getelementptr inbounds i8, i8* %7643, i64 1
  %7645 = bitcast i8* %7644 to <16 x i8>*
  %7646 = load <16 x i8>, <16 x i8>* %7645, align 1, !tbaa !390
  %7647 = sext i32 %t35160.1 to i64
  %7648 = shl nsw i64 %7647, 6
  %7649 = getelementptr inbounds i8, i8* %bounded_input52, i64 %7648
  %7650 = getelementptr inbounds i8, i8* %7649, i64 1
  %7651 = bitcast i8* %7650 to <16 x i8>*
  %7652 = load <16 x i8>, <16 x i8>* %7651, align 1, !tbaa !390
  %7653 = sext i32 %t71162.1 to i64
  %7654 = shl nsw i64 %7653, 6
  %7655 = getelementptr inbounds i8, i8* %bounded_input52, i64 %7654
  %7656 = getelementptr inbounds i8, i8* %7655, i64 1
  %7657 = bitcast i8* %7656 to <16 x i8>*
  %7658 = load <16 x i8>, <16 x i8>* %7657, align 1, !tbaa !390
  %7659 = getelementptr inbounds i8, i8* %7655, i64 2
  %7660 = bitcast i8* %7659 to <16 x i8>*
  %7661 = load <16 x i8>, <16 x i8>* %7660, align 2, !tbaa !390
  %7662 = getelementptr inbounds i8, i8* %7649, i64 2
  %7663 = bitcast i8* %7662 to <16 x i8>*
  %7664 = load <16 x i8>, <16 x i8>* %7663, align 2, !tbaa !390
  %7665 = getelementptr inbounds i8, i8* %7643, i64 2
  %7666 = bitcast i8* %7665 to <16 x i8>*
  %7667 = load <16 x i8>, <16 x i8>* %7666, align 2, !tbaa !390
  %7668 = bitcast i8* %7655 to <16 x i8>*
  %7669 = load <16 x i8>, <16 x i8>* %7668, align 16, !tbaa !390
  %7670 = bitcast i8* %7649 to <16 x i8>*
  %7671 = load <16 x i8>, <16 x i8>* %7670, align 16, !tbaa !390
  %7672 = bitcast i8* %7643 to <16 x i8>*
  %7673 = load <16 x i8>, <16 x i8>* %7672, align 16, !tbaa !390
  %7674 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7671, <16 x i8> %7673) #11
  %7675 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7674, <16 x i8> %7669) #11
  %7676 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7661, <16 x i8> %7675) #11
  %7677 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7667, <16 x i8> %7664) #11
  %7678 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7676, <16 x i8> %7677) #11
  %7679 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7646, <16 x i8> %7678) #11
  %7680 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7658, <16 x i8> %7652) #11
  %7681 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7679, <16 x i8> %7680) #11
  %7682 = getelementptr inbounds i8, i8* %7643, i64 17
  %7683 = bitcast i8* %7682 to <16 x i8>*
  %7684 = load <16 x i8>, <16 x i8>* %7683, align 1, !tbaa !390
  %7685 = getelementptr inbounds i8, i8* %7649, i64 17
  %7686 = bitcast i8* %7685 to <16 x i8>*
  %7687 = load <16 x i8>, <16 x i8>* %7686, align 1, !tbaa !390
  %7688 = getelementptr inbounds i8, i8* %7655, i64 17
  %7689 = bitcast i8* %7688 to <16 x i8>*
  %7690 = load <16 x i8>, <16 x i8>* %7689, align 1, !tbaa !390
  %7691 = getelementptr inbounds i8, i8* %7655, i64 18
  %7692 = bitcast i8* %7691 to <16 x i8>*
  %7693 = load <16 x i8>, <16 x i8>* %7692, align 2, !tbaa !390
  %7694 = getelementptr inbounds i8, i8* %7649, i64 18
  %7695 = bitcast i8* %7694 to <16 x i8>*
  %7696 = load <16 x i8>, <16 x i8>* %7695, align 2, !tbaa !390
  %7697 = getelementptr inbounds i8, i8* %7643, i64 18
  %7698 = bitcast i8* %7697 to <16 x i8>*
  %7699 = load <16 x i8>, <16 x i8>* %7698, align 2, !tbaa !390
  %7700 = getelementptr inbounds i8, i8* %7655, i64 16
  %7701 = bitcast i8* %7700 to <16 x i8>*
  %7702 = load <16 x i8>, <16 x i8>* %7701, align 16, !tbaa !390
  %7703 = getelementptr inbounds i8, i8* %7649, i64 16
  %7704 = bitcast i8* %7703 to <16 x i8>*
  %7705 = load <16 x i8>, <16 x i8>* %7704, align 16, !tbaa !390
  %7706 = getelementptr inbounds i8, i8* %7643, i64 16
  %7707 = bitcast i8* %7706 to <16 x i8>*
  %7708 = load <16 x i8>, <16 x i8>* %7707, align 16, !tbaa !390
  %7709 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7705, <16 x i8> %7708) #11
  %7710 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7709, <16 x i8> %7702) #11
  %7711 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7693, <16 x i8> %7710) #11
  %7712 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7699, <16 x i8> %7696) #11
  %7713 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7711, <16 x i8> %7712) #11
  %7714 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7684, <16 x i8> %7713) #11
  %7715 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7690, <16 x i8> %7687) #11
  %7716 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7714, <16 x i8> %7715) #11
  %7717 = getelementptr inbounds i8, i8* %7643, i64 33
  %7718 = bitcast i8* %7717 to <16 x i8>*
  %7719 = load <16 x i8>, <16 x i8>* %7718, align 1, !tbaa !390
  %7720 = getelementptr inbounds i8, i8* %7649, i64 33
  %7721 = bitcast i8* %7720 to <16 x i8>*
  %7722 = load <16 x i8>, <16 x i8>* %7721, align 1, !tbaa !390
  %7723 = getelementptr inbounds i8, i8* %7655, i64 33
  %7724 = bitcast i8* %7723 to <16 x i8>*
  %7725 = load <16 x i8>, <16 x i8>* %7724, align 1, !tbaa !390
  %7726 = getelementptr inbounds i8, i8* %7655, i64 34
  %7727 = bitcast i8* %7726 to <16 x i8>*
  %7728 = load <16 x i8>, <16 x i8>* %7727, align 2, !tbaa !390
  %7729 = getelementptr inbounds i8, i8* %7649, i64 34
  %7730 = bitcast i8* %7729 to <16 x i8>*
  %7731 = load <16 x i8>, <16 x i8>* %7730, align 2, !tbaa !390
  %7732 = getelementptr inbounds i8, i8* %7643, i64 34
  %7733 = bitcast i8* %7732 to <16 x i8>*
  %7734 = load <16 x i8>, <16 x i8>* %7733, align 2, !tbaa !390
  %7735 = getelementptr inbounds i8, i8* %7655, i64 32
  %7736 = bitcast i8* %7735 to <16 x i8>*
  %7737 = load <16 x i8>, <16 x i8>* %7736, align 16, !tbaa !390
  %7738 = getelementptr inbounds i8, i8* %7649, i64 32
  %7739 = bitcast i8* %7738 to <16 x i8>*
  %7740 = load <16 x i8>, <16 x i8>* %7739, align 16, !tbaa !390
  %7741 = getelementptr inbounds i8, i8* %7643, i64 32
  %7742 = bitcast i8* %7741 to <16 x i8>*
  %7743 = load <16 x i8>, <16 x i8>* %7742, align 16, !tbaa !390
  %7744 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7740, <16 x i8> %7743) #11
  %7745 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7744, <16 x i8> %7737) #11
  %7746 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7728, <16 x i8> %7745) #11
  %7747 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7734, <16 x i8> %7731) #11
  %7748 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7746, <16 x i8> %7747) #11
  %7749 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7719, <16 x i8> %7748) #11
  %7750 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7725, <16 x i8> %7722) #11
  %7751 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7749, <16 x i8> %7750) #11
  %7752 = getelementptr inbounds i8, i8* %7643, i64 49
  %7753 = bitcast i8* %7752 to <16 x i8>*
  %7754 = load <16 x i8>, <16 x i8>* %7753, align 1, !tbaa !390
  %7755 = getelementptr inbounds i8, i8* %7649, i64 49
  %7756 = bitcast i8* %7755 to <16 x i8>*
  %7757 = load <16 x i8>, <16 x i8>* %7756, align 1, !tbaa !390
  %7758 = getelementptr inbounds i8, i8* %7655, i64 49
  %7759 = bitcast i8* %7758 to <16 x i8>*
  %7760 = load <16 x i8>, <16 x i8>* %7759, align 1, !tbaa !390
  %7761 = getelementptr inbounds i8, i8* %7655, i64 50
  %7762 = bitcast i8* %7761 to <16 x i8>*
  %7763 = load <16 x i8>, <16 x i8>* %7762, align 2, !tbaa !390
  %7764 = getelementptr inbounds i8, i8* %7649, i64 50
  %7765 = bitcast i8* %7764 to <16 x i8>*
  %7766 = load <16 x i8>, <16 x i8>* %7765, align 2, !tbaa !390
  %7767 = getelementptr inbounds i8, i8* %7643, i64 50
  %7768 = bitcast i8* %7767 to <16 x i8>*
  %7769 = load <16 x i8>, <16 x i8>* %7768, align 2, !tbaa !390
  %7770 = getelementptr inbounds i8, i8* %7655, i64 48
  %7771 = bitcast i8* %7770 to <16 x i8>*
  %7772 = load <16 x i8>, <16 x i8>* %7771, align 16, !tbaa !390
  %7773 = getelementptr inbounds i8, i8* %7649, i64 48
  %7774 = bitcast i8* %7773 to <16 x i8>*
  %7775 = load <16 x i8>, <16 x i8>* %7774, align 16, !tbaa !390
  %7776 = getelementptr inbounds i8, i8* %7643, i64 48
  %7777 = bitcast i8* %7776 to <16 x i8>*
  %7778 = load <16 x i8>, <16 x i8>* %7777, align 16, !tbaa !390
  %7779 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7775, <16 x i8> %7778) #11
  %7780 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7779, <16 x i8> %7772) #11
  %7781 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7763, <16 x i8> %7780) #11
  %7782 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7769, <16 x i8> %7766) #11
  %7783 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7781, <16 x i8> %7782) #11
  %7784 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7754, <16 x i8> %7783) #11
  %7785 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7760, <16 x i8> %7757) #11
  %7786 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7784, <16 x i8> %7785) #11
  %7787 = add nsw i64 %6546, %5923
  %7788 = getelementptr inbounds i8, i8* %5, i64 %7787
  %7789 = bitcast i8* %7788 to <16 x i8>*
  store <16 x i8> %7681, <16 x i8>* %7789, align 1, !tbaa !392
  %7790 = getelementptr inbounds i8, i8* %7788, i64 16
  %7791 = bitcast i8* %7790 to <16 x i8>*
  store <16 x i8> %7716, <16 x i8>* %7791, align 1, !tbaa !392
  %7792 = getelementptr inbounds i8, i8* %7788, i64 32
  %7793 = bitcast i8* %7792 to <16 x i8>*
  store <16 x i8> %7751, <16 x i8>* %7793, align 1, !tbaa !392
  %7794 = getelementptr inbounds i8, i8* %7788, i64 48
  %7795 = bitcast i8* %7794 to <16 x i8>*
  store <16 x i8> %7786, <16 x i8>* %7795, align 1, !tbaa !392
  %t39168 = add i32 %82, %5927
  %t72169 = add nsw i32 %t39168, %71
  %t73170 = add nsw i32 %t39168, %76
  %7796 = sext i32 %t72169 to i64
  %7797 = shl nsw i64 %7796, 6
  %7798 = getelementptr inbounds i8, i8* %bounded_input52, i64 %7797
  %7799 = getelementptr inbounds i8, i8* %7798, i64 1
  %7800 = bitcast i8* %7799 to <16 x i8>*
  %7801 = load <16 x i8>, <16 x i8>* %7800, align 1, !tbaa !390
  %7802 = sext i32 %t39168 to i64
  %7803 = shl nsw i64 %7802, 6
  %7804 = getelementptr inbounds i8, i8* %bounded_input52, i64 %7803
  %7805 = getelementptr inbounds i8, i8* %7804, i64 1
  %7806 = bitcast i8* %7805 to <16 x i8>*
  %7807 = load <16 x i8>, <16 x i8>* %7806, align 1, !tbaa !390
  %7808 = sext i32 %t73170 to i64
  %7809 = shl nsw i64 %7808, 6
  %7810 = getelementptr inbounds i8, i8* %bounded_input52, i64 %7809
  %7811 = getelementptr inbounds i8, i8* %7810, i64 1
  %7812 = bitcast i8* %7811 to <16 x i8>*
  %7813 = load <16 x i8>, <16 x i8>* %7812, align 1, !tbaa !390
  %7814 = getelementptr inbounds i8, i8* %7810, i64 2
  %7815 = bitcast i8* %7814 to <16 x i8>*
  %7816 = load <16 x i8>, <16 x i8>* %7815, align 2, !tbaa !390
  %7817 = getelementptr inbounds i8, i8* %7804, i64 2
  %7818 = bitcast i8* %7817 to <16 x i8>*
  %7819 = load <16 x i8>, <16 x i8>* %7818, align 2, !tbaa !390
  %7820 = getelementptr inbounds i8, i8* %7798, i64 2
  %7821 = bitcast i8* %7820 to <16 x i8>*
  %7822 = load <16 x i8>, <16 x i8>* %7821, align 2, !tbaa !390
  %7823 = bitcast i8* %7810 to <16 x i8>*
  %7824 = load <16 x i8>, <16 x i8>* %7823, align 16, !tbaa !390
  %7825 = bitcast i8* %7804 to <16 x i8>*
  %7826 = load <16 x i8>, <16 x i8>* %7825, align 16, !tbaa !390
  %7827 = bitcast i8* %7798 to <16 x i8>*
  %7828 = load <16 x i8>, <16 x i8>* %7827, align 16, !tbaa !390
  %7829 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7826, <16 x i8> %7828) #11
  %7830 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7829, <16 x i8> %7824) #11
  %7831 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7816, <16 x i8> %7830) #11
  %7832 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7822, <16 x i8> %7819) #11
  %7833 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7831, <16 x i8> %7832) #11
  %7834 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7801, <16 x i8> %7833) #11
  %7835 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7813, <16 x i8> %7807) #11
  %7836 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7834, <16 x i8> %7835) #11
  %7837 = getelementptr inbounds i8, i8* %7798, i64 17
  %7838 = bitcast i8* %7837 to <16 x i8>*
  %7839 = load <16 x i8>, <16 x i8>* %7838, align 1, !tbaa !390
  %7840 = getelementptr inbounds i8, i8* %7804, i64 17
  %7841 = bitcast i8* %7840 to <16 x i8>*
  %7842 = load <16 x i8>, <16 x i8>* %7841, align 1, !tbaa !390
  %7843 = getelementptr inbounds i8, i8* %7810, i64 17
  %7844 = bitcast i8* %7843 to <16 x i8>*
  %7845 = load <16 x i8>, <16 x i8>* %7844, align 1, !tbaa !390
  %7846 = getelementptr inbounds i8, i8* %7810, i64 18
  %7847 = bitcast i8* %7846 to <16 x i8>*
  %7848 = load <16 x i8>, <16 x i8>* %7847, align 2, !tbaa !390
  %7849 = getelementptr inbounds i8, i8* %7804, i64 18
  %7850 = bitcast i8* %7849 to <16 x i8>*
  %7851 = load <16 x i8>, <16 x i8>* %7850, align 2, !tbaa !390
  %7852 = getelementptr inbounds i8, i8* %7798, i64 18
  %7853 = bitcast i8* %7852 to <16 x i8>*
  %7854 = load <16 x i8>, <16 x i8>* %7853, align 2, !tbaa !390
  %7855 = getelementptr inbounds i8, i8* %7810, i64 16
  %7856 = bitcast i8* %7855 to <16 x i8>*
  %7857 = load <16 x i8>, <16 x i8>* %7856, align 16, !tbaa !390
  %7858 = getelementptr inbounds i8, i8* %7804, i64 16
  %7859 = bitcast i8* %7858 to <16 x i8>*
  %7860 = load <16 x i8>, <16 x i8>* %7859, align 16, !tbaa !390
  %7861 = getelementptr inbounds i8, i8* %7798, i64 16
  %7862 = bitcast i8* %7861 to <16 x i8>*
  %7863 = load <16 x i8>, <16 x i8>* %7862, align 16, !tbaa !390
  %7864 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7860, <16 x i8> %7863) #11
  %7865 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7864, <16 x i8> %7857) #11
  %7866 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7848, <16 x i8> %7865) #11
  %7867 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7854, <16 x i8> %7851) #11
  %7868 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7866, <16 x i8> %7867) #11
  %7869 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7839, <16 x i8> %7868) #11
  %7870 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7845, <16 x i8> %7842) #11
  %7871 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7869, <16 x i8> %7870) #11
  %7872 = getelementptr inbounds i8, i8* %7798, i64 33
  %7873 = bitcast i8* %7872 to <16 x i8>*
  %7874 = load <16 x i8>, <16 x i8>* %7873, align 1, !tbaa !390
  %7875 = getelementptr inbounds i8, i8* %7804, i64 33
  %7876 = bitcast i8* %7875 to <16 x i8>*
  %7877 = load <16 x i8>, <16 x i8>* %7876, align 1, !tbaa !390
  %7878 = getelementptr inbounds i8, i8* %7810, i64 33
  %7879 = bitcast i8* %7878 to <16 x i8>*
  %7880 = load <16 x i8>, <16 x i8>* %7879, align 1, !tbaa !390
  %7881 = getelementptr inbounds i8, i8* %7810, i64 34
  %7882 = bitcast i8* %7881 to <16 x i8>*
  %7883 = load <16 x i8>, <16 x i8>* %7882, align 2, !tbaa !390
  %7884 = getelementptr inbounds i8, i8* %7804, i64 34
  %7885 = bitcast i8* %7884 to <16 x i8>*
  %7886 = load <16 x i8>, <16 x i8>* %7885, align 2, !tbaa !390
  %7887 = getelementptr inbounds i8, i8* %7798, i64 34
  %7888 = bitcast i8* %7887 to <16 x i8>*
  %7889 = load <16 x i8>, <16 x i8>* %7888, align 2, !tbaa !390
  %7890 = getelementptr inbounds i8, i8* %7810, i64 32
  %7891 = bitcast i8* %7890 to <16 x i8>*
  %7892 = load <16 x i8>, <16 x i8>* %7891, align 16, !tbaa !390
  %7893 = getelementptr inbounds i8, i8* %7804, i64 32
  %7894 = bitcast i8* %7893 to <16 x i8>*
  %7895 = load <16 x i8>, <16 x i8>* %7894, align 16, !tbaa !390
  %7896 = getelementptr inbounds i8, i8* %7798, i64 32
  %7897 = bitcast i8* %7896 to <16 x i8>*
  %7898 = load <16 x i8>, <16 x i8>* %7897, align 16, !tbaa !390
  %7899 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7895, <16 x i8> %7898) #11
  %7900 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7899, <16 x i8> %7892) #11
  %7901 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7883, <16 x i8> %7900) #11
  %7902 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7889, <16 x i8> %7886) #11
  %7903 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7901, <16 x i8> %7902) #11
  %7904 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7874, <16 x i8> %7903) #11
  %7905 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7880, <16 x i8> %7877) #11
  %7906 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7904, <16 x i8> %7905) #11
  %7907 = getelementptr inbounds i8, i8* %7798, i64 49
  %7908 = bitcast i8* %7907 to <16 x i8>*
  %7909 = load <16 x i8>, <16 x i8>* %7908, align 1, !tbaa !390
  %7910 = getelementptr inbounds i8, i8* %7804, i64 49
  %7911 = bitcast i8* %7910 to <16 x i8>*
  %7912 = load <16 x i8>, <16 x i8>* %7911, align 1, !tbaa !390
  %7913 = getelementptr inbounds i8, i8* %7810, i64 49
  %7914 = bitcast i8* %7913 to <16 x i8>*
  %7915 = load <16 x i8>, <16 x i8>* %7914, align 1, !tbaa !390
  %7916 = getelementptr inbounds i8, i8* %7810, i64 50
  %7917 = bitcast i8* %7916 to <16 x i8>*
  %7918 = load <16 x i8>, <16 x i8>* %7917, align 2, !tbaa !390
  %7919 = getelementptr inbounds i8, i8* %7804, i64 50
  %7920 = bitcast i8* %7919 to <16 x i8>*
  %7921 = load <16 x i8>, <16 x i8>* %7920, align 2, !tbaa !390
  %7922 = getelementptr inbounds i8, i8* %7798, i64 50
  %7923 = bitcast i8* %7922 to <16 x i8>*
  %7924 = load <16 x i8>, <16 x i8>* %7923, align 2, !tbaa !390
  %7925 = getelementptr inbounds i8, i8* %7810, i64 48
  %7926 = bitcast i8* %7925 to <16 x i8>*
  %7927 = load <16 x i8>, <16 x i8>* %7926, align 16, !tbaa !390
  %7928 = getelementptr inbounds i8, i8* %7804, i64 48
  %7929 = bitcast i8* %7928 to <16 x i8>*
  %7930 = load <16 x i8>, <16 x i8>* %7929, align 16, !tbaa !390
  %7931 = getelementptr inbounds i8, i8* %7798, i64 48
  %7932 = bitcast i8* %7931 to <16 x i8>*
  %7933 = load <16 x i8>, <16 x i8>* %7932, align 16, !tbaa !390
  %7934 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7930, <16 x i8> %7933) #11
  %7935 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7934, <16 x i8> %7927) #11
  %7936 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7918, <16 x i8> %7935) #11
  %7937 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7924, <16 x i8> %7921) #11
  %7938 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7936, <16 x i8> %7937) #11
  %7939 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7909, <16 x i8> %7938) #11
  %7940 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7915, <16 x i8> %7912) #11
  %7941 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7939, <16 x i8> %7940) #11
  %7942 = add nsw i64 %6390, %5924
  %7943 = getelementptr inbounds i8, i8* %5, i64 %7942
  %7944 = bitcast i8* %7943 to <16 x i8>*
  store <16 x i8> %7836, <16 x i8>* %7944, align 1, !tbaa !392
  %7945 = getelementptr inbounds i8, i8* %7943, i64 16
  %7946 = bitcast i8* %7945 to <16 x i8>*
  store <16 x i8> %7871, <16 x i8>* %7946, align 1, !tbaa !392
  %7947 = getelementptr inbounds i8, i8* %7943, i64 32
  %7948 = bitcast i8* %7947 to <16 x i8>*
  store <16 x i8> %7906, <16 x i8>* %7948, align 1, !tbaa !392
  %7949 = getelementptr inbounds i8, i8* %7943, i64 48
  %7950 = bitcast i8* %7949 to <16 x i8>*
  store <16 x i8> %7941, <16 x i8>* %7950, align 1, !tbaa !392
  %t39168.1 = add i32 %82, %6086
  %t72169.1 = add nsw i32 %t39168.1, %71
  %t73170.1 = add nsw i32 %t39168.1, %76
  %7951 = sext i32 %t72169.1 to i64
  %7952 = shl nsw i64 %7951, 6
  %7953 = getelementptr inbounds i8, i8* %bounded_input52, i64 %7952
  %7954 = getelementptr inbounds i8, i8* %7953, i64 1
  %7955 = bitcast i8* %7954 to <16 x i8>*
  %7956 = load <16 x i8>, <16 x i8>* %7955, align 1, !tbaa !390
  %7957 = sext i32 %t39168.1 to i64
  %7958 = shl nsw i64 %7957, 6
  %7959 = getelementptr inbounds i8, i8* %bounded_input52, i64 %7958
  %7960 = getelementptr inbounds i8, i8* %7959, i64 1
  %7961 = bitcast i8* %7960 to <16 x i8>*
  %7962 = load <16 x i8>, <16 x i8>* %7961, align 1, !tbaa !390
  %7963 = sext i32 %t73170.1 to i64
  %7964 = shl nsw i64 %7963, 6
  %7965 = getelementptr inbounds i8, i8* %bounded_input52, i64 %7964
  %7966 = getelementptr inbounds i8, i8* %7965, i64 1
  %7967 = bitcast i8* %7966 to <16 x i8>*
  %7968 = load <16 x i8>, <16 x i8>* %7967, align 1, !tbaa !390
  %7969 = getelementptr inbounds i8, i8* %7965, i64 2
  %7970 = bitcast i8* %7969 to <16 x i8>*
  %7971 = load <16 x i8>, <16 x i8>* %7970, align 2, !tbaa !390
  %7972 = getelementptr inbounds i8, i8* %7959, i64 2
  %7973 = bitcast i8* %7972 to <16 x i8>*
  %7974 = load <16 x i8>, <16 x i8>* %7973, align 2, !tbaa !390
  %7975 = getelementptr inbounds i8, i8* %7953, i64 2
  %7976 = bitcast i8* %7975 to <16 x i8>*
  %7977 = load <16 x i8>, <16 x i8>* %7976, align 2, !tbaa !390
  %7978 = bitcast i8* %7965 to <16 x i8>*
  %7979 = load <16 x i8>, <16 x i8>* %7978, align 16, !tbaa !390
  %7980 = bitcast i8* %7959 to <16 x i8>*
  %7981 = load <16 x i8>, <16 x i8>* %7980, align 16, !tbaa !390
  %7982 = bitcast i8* %7953 to <16 x i8>*
  %7983 = load <16 x i8>, <16 x i8>* %7982, align 16, !tbaa !390
  %7984 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7981, <16 x i8> %7983) #11
  %7985 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7984, <16 x i8> %7979) #11
  %7986 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7971, <16 x i8> %7985) #11
  %7987 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7977, <16 x i8> %7974) #11
  %7988 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7986, <16 x i8> %7987) #11
  %7989 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7956, <16 x i8> %7988) #11
  %7990 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7968, <16 x i8> %7962) #11
  %7991 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7989, <16 x i8> %7990) #11
  %7992 = getelementptr inbounds i8, i8* %7953, i64 17
  %7993 = bitcast i8* %7992 to <16 x i8>*
  %7994 = load <16 x i8>, <16 x i8>* %7993, align 1, !tbaa !390
  %7995 = getelementptr inbounds i8, i8* %7959, i64 17
  %7996 = bitcast i8* %7995 to <16 x i8>*
  %7997 = load <16 x i8>, <16 x i8>* %7996, align 1, !tbaa !390
  %7998 = getelementptr inbounds i8, i8* %7965, i64 17
  %7999 = bitcast i8* %7998 to <16 x i8>*
  %8000 = load <16 x i8>, <16 x i8>* %7999, align 1, !tbaa !390
  %8001 = getelementptr inbounds i8, i8* %7965, i64 18
  %8002 = bitcast i8* %8001 to <16 x i8>*
  %8003 = load <16 x i8>, <16 x i8>* %8002, align 2, !tbaa !390
  %8004 = getelementptr inbounds i8, i8* %7959, i64 18
  %8005 = bitcast i8* %8004 to <16 x i8>*
  %8006 = load <16 x i8>, <16 x i8>* %8005, align 2, !tbaa !390
  %8007 = getelementptr inbounds i8, i8* %7953, i64 18
  %8008 = bitcast i8* %8007 to <16 x i8>*
  %8009 = load <16 x i8>, <16 x i8>* %8008, align 2, !tbaa !390
  %8010 = getelementptr inbounds i8, i8* %7965, i64 16
  %8011 = bitcast i8* %8010 to <16 x i8>*
  %8012 = load <16 x i8>, <16 x i8>* %8011, align 16, !tbaa !390
  %8013 = getelementptr inbounds i8, i8* %7959, i64 16
  %8014 = bitcast i8* %8013 to <16 x i8>*
  %8015 = load <16 x i8>, <16 x i8>* %8014, align 16, !tbaa !390
  %8016 = getelementptr inbounds i8, i8* %7953, i64 16
  %8017 = bitcast i8* %8016 to <16 x i8>*
  %8018 = load <16 x i8>, <16 x i8>* %8017, align 16, !tbaa !390
  %8019 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %8015, <16 x i8> %8018) #11
  %8020 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %8019, <16 x i8> %8012) #11
  %8021 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %8003, <16 x i8> %8020) #11
  %8022 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %8009, <16 x i8> %8006) #11
  %8023 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %8021, <16 x i8> %8022) #11
  %8024 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %7994, <16 x i8> %8023) #11
  %8025 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %8000, <16 x i8> %7997) #11
  %8026 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %8024, <16 x i8> %8025) #11
  %8027 = getelementptr inbounds i8, i8* %7953, i64 33
  %8028 = bitcast i8* %8027 to <16 x i8>*
  %8029 = load <16 x i8>, <16 x i8>* %8028, align 1, !tbaa !390
  %8030 = getelementptr inbounds i8, i8* %7959, i64 33
  %8031 = bitcast i8* %8030 to <16 x i8>*
  %8032 = load <16 x i8>, <16 x i8>* %8031, align 1, !tbaa !390
  %8033 = getelementptr inbounds i8, i8* %7965, i64 33
  %8034 = bitcast i8* %8033 to <16 x i8>*
  %8035 = load <16 x i8>, <16 x i8>* %8034, align 1, !tbaa !390
  %8036 = getelementptr inbounds i8, i8* %7965, i64 34
  %8037 = bitcast i8* %8036 to <16 x i8>*
  %8038 = load <16 x i8>, <16 x i8>* %8037, align 2, !tbaa !390
  %8039 = getelementptr inbounds i8, i8* %7959, i64 34
  %8040 = bitcast i8* %8039 to <16 x i8>*
  %8041 = load <16 x i8>, <16 x i8>* %8040, align 2, !tbaa !390
  %8042 = getelementptr inbounds i8, i8* %7953, i64 34
  %8043 = bitcast i8* %8042 to <16 x i8>*
  %8044 = load <16 x i8>, <16 x i8>* %8043, align 2, !tbaa !390
  %8045 = getelementptr inbounds i8, i8* %7965, i64 32
  %8046 = bitcast i8* %8045 to <16 x i8>*
  %8047 = load <16 x i8>, <16 x i8>* %8046, align 16, !tbaa !390
  %8048 = getelementptr inbounds i8, i8* %7959, i64 32
  %8049 = bitcast i8* %8048 to <16 x i8>*
  %8050 = load <16 x i8>, <16 x i8>* %8049, align 16, !tbaa !390
  %8051 = getelementptr inbounds i8, i8* %7953, i64 32
  %8052 = bitcast i8* %8051 to <16 x i8>*
  %8053 = load <16 x i8>, <16 x i8>* %8052, align 16, !tbaa !390
  %8054 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %8050, <16 x i8> %8053) #11
  %8055 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %8054, <16 x i8> %8047) #11
  %8056 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %8038, <16 x i8> %8055) #11
  %8057 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %8044, <16 x i8> %8041) #11
  %8058 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %8056, <16 x i8> %8057) #11
  %8059 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %8029, <16 x i8> %8058) #11
  %8060 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %8035, <16 x i8> %8032) #11
  %8061 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %8059, <16 x i8> %8060) #11
  %8062 = getelementptr inbounds i8, i8* %7953, i64 49
  %8063 = bitcast i8* %8062 to <16 x i8>*
  %8064 = load <16 x i8>, <16 x i8>* %8063, align 1, !tbaa !390
  %8065 = getelementptr inbounds i8, i8* %7959, i64 49
  %8066 = bitcast i8* %8065 to <16 x i8>*
  %8067 = load <16 x i8>, <16 x i8>* %8066, align 1, !tbaa !390
  %8068 = getelementptr inbounds i8, i8* %7965, i64 49
  %8069 = bitcast i8* %8068 to <16 x i8>*
  %8070 = load <16 x i8>, <16 x i8>* %8069, align 1, !tbaa !390
  %8071 = getelementptr inbounds i8, i8* %7965, i64 50
  %8072 = bitcast i8* %8071 to <16 x i8>*
  %8073 = load <16 x i8>, <16 x i8>* %8072, align 2, !tbaa !390
  %8074 = getelementptr inbounds i8, i8* %7959, i64 50
  %8075 = bitcast i8* %8074 to <16 x i8>*
  %8076 = load <16 x i8>, <16 x i8>* %8075, align 2, !tbaa !390
  %8077 = getelementptr inbounds i8, i8* %7953, i64 50
  %8078 = bitcast i8* %8077 to <16 x i8>*
  %8079 = load <16 x i8>, <16 x i8>* %8078, align 2, !tbaa !390
  %8080 = getelementptr inbounds i8, i8* %7965, i64 48
  %8081 = bitcast i8* %8080 to <16 x i8>*
  %8082 = load <16 x i8>, <16 x i8>* %8081, align 16, !tbaa !390
  %8083 = getelementptr inbounds i8, i8* %7959, i64 48
  %8084 = bitcast i8* %8083 to <16 x i8>*
  %8085 = load <16 x i8>, <16 x i8>* %8084, align 16, !tbaa !390
  %8086 = getelementptr inbounds i8, i8* %7953, i64 48
  %8087 = bitcast i8* %8086 to <16 x i8>*
  %8088 = load <16 x i8>, <16 x i8>* %8087, align 16, !tbaa !390
  %8089 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %8085, <16 x i8> %8088) #11
  %8090 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %8089, <16 x i8> %8082) #11
  %8091 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %8073, <16 x i8> %8090) #11
  %8092 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %8079, <16 x i8> %8076) #11
  %8093 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %8091, <16 x i8> %8092) #11
  %8094 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %8064, <16 x i8> %8093) #11
  %8095 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %8070, <16 x i8> %8067) #11
  %8096 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %8094, <16 x i8> %8095) #11
  %8097 = add nsw i64 %6546, %5924
  %8098 = getelementptr inbounds i8, i8* %5, i64 %8097
  %8099 = bitcast i8* %8098 to <16 x i8>*
  store <16 x i8> %7991, <16 x i8>* %8099, align 1, !tbaa !392
  %8100 = getelementptr inbounds i8, i8* %8098, i64 16
  %8101 = bitcast i8* %8100 to <16 x i8>*
  store <16 x i8> %8026, <16 x i8>* %8101, align 1, !tbaa !392
  %8102 = getelementptr inbounds i8, i8* %8098, i64 32
  %8103 = bitcast i8* %8102 to <16 x i8>*
  store <16 x i8> %8061, <16 x i8>* %8103, align 1, !tbaa !392
  %8104 = getelementptr inbounds i8, i8* %8098, i64 48
  %8105 = bitcast i8* %8104 to <16 x i8>*
  store <16 x i8> %8096, <16 x i8>* %8105, align 1, !tbaa !392
  %t43176 = add i32 %83, %5927
  %t74177 = add nsw i32 %t43176, %71
  %t75178 = add nsw i32 %t43176, %76
  %8106 = sext i32 %t74177 to i64
  %8107 = shl nsw i64 %8106, 6
  %8108 = getelementptr inbounds i8, i8* %bounded_input52, i64 %8107
  %8109 = getelementptr inbounds i8, i8* %8108, i64 1
  %8110 = bitcast i8* %8109 to <16 x i8>*
  %8111 = load <16 x i8>, <16 x i8>* %8110, align 1, !tbaa !390
  %8112 = sext i32 %t43176 to i64
  %8113 = shl nsw i64 %8112, 6
  %8114 = getelementptr inbounds i8, i8* %bounded_input52, i64 %8113
  %8115 = getelementptr inbounds i8, i8* %8114, i64 1
  %8116 = bitcast i8* %8115 to <16 x i8>*
  %8117 = load <16 x i8>, <16 x i8>* %8116, align 1, !tbaa !390
  %8118 = sext i32 %t75178 to i64
  %8119 = shl nsw i64 %8118, 6
  %8120 = getelementptr inbounds i8, i8* %bounded_input52, i64 %8119
  %8121 = getelementptr inbounds i8, i8* %8120, i64 1
  %8122 = bitcast i8* %8121 to <16 x i8>*
  %8123 = load <16 x i8>, <16 x i8>* %8122, align 1, !tbaa !390
  %8124 = getelementptr inbounds i8, i8* %8120, i64 2
  %8125 = bitcast i8* %8124 to <16 x i8>*
  %8126 = load <16 x i8>, <16 x i8>* %8125, align 2, !tbaa !390
  %8127 = getelementptr inbounds i8, i8* %8114, i64 2
  %8128 = bitcast i8* %8127 to <16 x i8>*
  %8129 = load <16 x i8>, <16 x i8>* %8128, align 2, !tbaa !390
  %8130 = getelementptr inbounds i8, i8* %8108, i64 2
  %8131 = bitcast i8* %8130 to <16 x i8>*
  %8132 = load <16 x i8>, <16 x i8>* %8131, align 2, !tbaa !390
  %8133 = bitcast i8* %8120 to <16 x i8>*
  %8134 = load <16 x i8>, <16 x i8>* %8133, align 16, !tbaa !390
  %8135 = bitcast i8* %8114 to <16 x i8>*
  %8136 = load <16 x i8>, <16 x i8>* %8135, align 16, !tbaa !390
  %8137 = bitcast i8* %8108 to <16 x i8>*
  %8138 = load <16 x i8>, <16 x i8>* %8137, align 16, !tbaa !390
  %8139 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %8136, <16 x i8> %8138) #11
  %8140 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %8139, <16 x i8> %8134) #11
  %8141 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %8126, <16 x i8> %8140) #11
  %8142 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %8132, <16 x i8> %8129) #11
  %8143 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %8141, <16 x i8> %8142) #11
  %8144 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %8111, <16 x i8> %8143) #11
  %8145 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %8123, <16 x i8> %8117) #11
  %8146 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %8144, <16 x i8> %8145) #11
  %8147 = getelementptr inbounds i8, i8* %8108, i64 17
  %8148 = bitcast i8* %8147 to <16 x i8>*
  %8149 = load <16 x i8>, <16 x i8>* %8148, align 1, !tbaa !390
  %8150 = getelementptr inbounds i8, i8* %8114, i64 17
  %8151 = bitcast i8* %8150 to <16 x i8>*
  %8152 = load <16 x i8>, <16 x i8>* %8151, align 1, !tbaa !390
  %8153 = getelementptr inbounds i8, i8* %8120, i64 17
  %8154 = bitcast i8* %8153 to <16 x i8>*
  %8155 = load <16 x i8>, <16 x i8>* %8154, align 1, !tbaa !390
  %8156 = getelementptr inbounds i8, i8* %8120, i64 18
  %8157 = bitcast i8* %8156 to <16 x i8>*
  %8158 = load <16 x i8>, <16 x i8>* %8157, align 2, !tbaa !390
  %8159 = getelementptr inbounds i8, i8* %8114, i64 18
  %8160 = bitcast i8* %8159 to <16 x i8>*
  %8161 = load <16 x i8>, <16 x i8>* %8160, align 2, !tbaa !390
  %8162 = getelementptr inbounds i8, i8* %8108, i64 18
  %8163 = bitcast i8* %8162 to <16 x i8>*
  %8164 = load <16 x i8>, <16 x i8>* %8163, align 2, !tbaa !390
  %8165 = getelementptr inbounds i8, i8* %8120, i64 16
  %8166 = bitcast i8* %8165 to <16 x i8>*
  %8167 = load <16 x i8>, <16 x i8>* %8166, align 16, !tbaa !390
  %8168 = getelementptr inbounds i8, i8* %8114, i64 16
  %8169 = bitcast i8* %8168 to <16 x i8>*
  %8170 = load <16 x i8>, <16 x i8>* %8169, align 16, !tbaa !390
  %8171 = getelementptr inbounds i8, i8* %8108, i64 16
  %8172 = bitcast i8* %8171 to <16 x i8>*
  %8173 = load <16 x i8>, <16 x i8>* %8172, align 16, !tbaa !390
  %8174 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %8170, <16 x i8> %8173) #11
  %8175 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %8174, <16 x i8> %8167) #11
  %8176 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %8158, <16 x i8> %8175) #11
  %8177 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %8164, <16 x i8> %8161) #11
  %8178 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %8176, <16 x i8> %8177) #11
  %8179 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %8149, <16 x i8> %8178) #11
  %8180 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %8155, <16 x i8> %8152) #11
  %8181 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %8179, <16 x i8> %8180) #11
  %8182 = getelementptr inbounds i8, i8* %8108, i64 33
  %8183 = bitcast i8* %8182 to <16 x i8>*
  %8184 = load <16 x i8>, <16 x i8>* %8183, align 1, !tbaa !390
  %8185 = getelementptr inbounds i8, i8* %8114, i64 33
  %8186 = bitcast i8* %8185 to <16 x i8>*
  %8187 = load <16 x i8>, <16 x i8>* %8186, align 1, !tbaa !390
  %8188 = getelementptr inbounds i8, i8* %8120, i64 33
  %8189 = bitcast i8* %8188 to <16 x i8>*
  %8190 = load <16 x i8>, <16 x i8>* %8189, align 1, !tbaa !390
  %8191 = getelementptr inbounds i8, i8* %8120, i64 34
  %8192 = bitcast i8* %8191 to <16 x i8>*
  %8193 = load <16 x i8>, <16 x i8>* %8192, align 2, !tbaa !390
  %8194 = getelementptr inbounds i8, i8* %8114, i64 34
  %8195 = bitcast i8* %8194 to <16 x i8>*
  %8196 = load <16 x i8>, <16 x i8>* %8195, align 2, !tbaa !390
  %8197 = getelementptr inbounds i8, i8* %8108, i64 34
  %8198 = bitcast i8* %8197 to <16 x i8>*
  %8199 = load <16 x i8>, <16 x i8>* %8198, align 2, !tbaa !390
  %8200 = getelementptr inbounds i8, i8* %8120, i64 32
  %8201 = bitcast i8* %8200 to <16 x i8>*
  %8202 = load <16 x i8>, <16 x i8>* %8201, align 16, !tbaa !390
  %8203 = getelementptr inbounds i8, i8* %8114, i64 32
  %8204 = bitcast i8* %8203 to <16 x i8>*
  %8205 = load <16 x i8>, <16 x i8>* %8204, align 16, !tbaa !390
  %8206 = getelementptr inbounds i8, i8* %8108, i64 32
  %8207 = bitcast i8* %8206 to <16 x i8>*
  %8208 = load <16 x i8>, <16 x i8>* %8207, align 16, !tbaa !390
  %8209 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %8205, <16 x i8> %8208) #11
  %8210 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %8209, <16 x i8> %8202) #11
  %8211 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %8193, <16 x i8> %8210) #11
  %8212 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %8199, <16 x i8> %8196) #11
  %8213 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %8211, <16 x i8> %8212) #11
  %8214 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %8184, <16 x i8> %8213) #11
  %8215 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %8190, <16 x i8> %8187) #11
  %8216 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %8214, <16 x i8> %8215) #11
  %8217 = getelementptr inbounds i8, i8* %8108, i64 49
  %8218 = bitcast i8* %8217 to <16 x i8>*
  %8219 = load <16 x i8>, <16 x i8>* %8218, align 1, !tbaa !390
  %8220 = getelementptr inbounds i8, i8* %8114, i64 49
  %8221 = bitcast i8* %8220 to <16 x i8>*
  %8222 = load <16 x i8>, <16 x i8>* %8221, align 1, !tbaa !390
  %8223 = getelementptr inbounds i8, i8* %8120, i64 49
  %8224 = bitcast i8* %8223 to <16 x i8>*
  %8225 = load <16 x i8>, <16 x i8>* %8224, align 1, !tbaa !390
  %8226 = getelementptr inbounds i8, i8* %8120, i64 50
  %8227 = bitcast i8* %8226 to <16 x i8>*
  %8228 = load <16 x i8>, <16 x i8>* %8227, align 2, !tbaa !390
  %8229 = getelementptr inbounds i8, i8* %8114, i64 50
  %8230 = bitcast i8* %8229 to <16 x i8>*
  %8231 = load <16 x i8>, <16 x i8>* %8230, align 2, !tbaa !390
  %8232 = getelementptr inbounds i8, i8* %8108, i64 50
  %8233 = bitcast i8* %8232 to <16 x i8>*
  %8234 = load <16 x i8>, <16 x i8>* %8233, align 2, !tbaa !390
  %8235 = getelementptr inbounds i8, i8* %8120, i64 48
  %8236 = bitcast i8* %8235 to <16 x i8>*
  %8237 = load <16 x i8>, <16 x i8>* %8236, align 16, !tbaa !390
  %8238 = getelementptr inbounds i8, i8* %8114, i64 48
  %8239 = bitcast i8* %8238 to <16 x i8>*
  %8240 = load <16 x i8>, <16 x i8>* %8239, align 16, !tbaa !390
  %8241 = getelementptr inbounds i8, i8* %8108, i64 48
  %8242 = bitcast i8* %8241 to <16 x i8>*
  %8243 = load <16 x i8>, <16 x i8>* %8242, align 16, !tbaa !390
  %8244 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %8240, <16 x i8> %8243) #11
  %8245 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %8244, <16 x i8> %8237) #11
  %8246 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %8228, <16 x i8> %8245) #11
  %8247 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %8234, <16 x i8> %8231) #11
  %8248 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %8246, <16 x i8> %8247) #11
  %8249 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %8219, <16 x i8> %8248) #11
  %8250 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %8225, <16 x i8> %8222) #11
  %8251 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %8249, <16 x i8> %8250) #11
  %8252 = add nsw i64 %6390, %5925
  %8253 = getelementptr inbounds i8, i8* %5, i64 %8252
  %8254 = bitcast i8* %8253 to <16 x i8>*
  store <16 x i8> %8146, <16 x i8>* %8254, align 1, !tbaa !392
  %8255 = getelementptr inbounds i8, i8* %8253, i64 16
  %8256 = bitcast i8* %8255 to <16 x i8>*
  store <16 x i8> %8181, <16 x i8>* %8256, align 1, !tbaa !392
  %8257 = getelementptr inbounds i8, i8* %8253, i64 32
  %8258 = bitcast i8* %8257 to <16 x i8>*
  store <16 x i8> %8216, <16 x i8>* %8258, align 1, !tbaa !392
  %8259 = getelementptr inbounds i8, i8* %8253, i64 48
  %8260 = bitcast i8* %8259 to <16 x i8>*
  store <16 x i8> %8251, <16 x i8>* %8260, align 1, !tbaa !392
  %t43176.1 = add i32 %83, %6086
  %t74177.1 = add nsw i32 %t43176.1, %71
  %t75178.1 = add nsw i32 %t43176.1, %76
  %8261 = sext i32 %t74177.1 to i64
  %8262 = shl nsw i64 %8261, 6
  %8263 = getelementptr inbounds i8, i8* %bounded_input52, i64 %8262
  %8264 = getelementptr inbounds i8, i8* %8263, i64 1
  %8265 = bitcast i8* %8264 to <16 x i8>*
  %8266 = load <16 x i8>, <16 x i8>* %8265, align 1, !tbaa !390
  %8267 = sext i32 %t43176.1 to i64
  %8268 = shl nsw i64 %8267, 6
  %8269 = getelementptr inbounds i8, i8* %bounded_input52, i64 %8268
  %8270 = getelementptr inbounds i8, i8* %8269, i64 1
  %8271 = bitcast i8* %8270 to <16 x i8>*
  %8272 = load <16 x i8>, <16 x i8>* %8271, align 1, !tbaa !390
  %8273 = sext i32 %t75178.1 to i64
  %8274 = shl nsw i64 %8273, 6
  %8275 = getelementptr inbounds i8, i8* %bounded_input52, i64 %8274
  %8276 = getelementptr inbounds i8, i8* %8275, i64 1
  %8277 = bitcast i8* %8276 to <16 x i8>*
  %8278 = load <16 x i8>, <16 x i8>* %8277, align 1, !tbaa !390
  %8279 = getelementptr inbounds i8, i8* %8275, i64 2
  %8280 = bitcast i8* %8279 to <16 x i8>*
  %8281 = load <16 x i8>, <16 x i8>* %8280, align 2, !tbaa !390
  %8282 = getelementptr inbounds i8, i8* %8269, i64 2
  %8283 = bitcast i8* %8282 to <16 x i8>*
  %8284 = load <16 x i8>, <16 x i8>* %8283, align 2, !tbaa !390
  %8285 = getelementptr inbounds i8, i8* %8263, i64 2
  %8286 = bitcast i8* %8285 to <16 x i8>*
  %8287 = load <16 x i8>, <16 x i8>* %8286, align 2, !tbaa !390
  %8288 = bitcast i8* %8275 to <16 x i8>*
  %8289 = load <16 x i8>, <16 x i8>* %8288, align 16, !tbaa !390
  %8290 = bitcast i8* %8269 to <16 x i8>*
  %8291 = load <16 x i8>, <16 x i8>* %8290, align 16, !tbaa !390
  %8292 = bitcast i8* %8263 to <16 x i8>*
  %8293 = load <16 x i8>, <16 x i8>* %8292, align 16, !tbaa !390
  %8294 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %8291, <16 x i8> %8293) #11
  %8295 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %8294, <16 x i8> %8289) #11
  %8296 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %8281, <16 x i8> %8295) #11
  %8297 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %8287, <16 x i8> %8284) #11
  %8298 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %8296, <16 x i8> %8297) #11
  %8299 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %8266, <16 x i8> %8298) #11
  %8300 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %8278, <16 x i8> %8272) #11
  %8301 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %8299, <16 x i8> %8300) #11
  %8302 = getelementptr inbounds i8, i8* %8263, i64 17
  %8303 = bitcast i8* %8302 to <16 x i8>*
  %8304 = load <16 x i8>, <16 x i8>* %8303, align 1, !tbaa !390
  %8305 = getelementptr inbounds i8, i8* %8269, i64 17
  %8306 = bitcast i8* %8305 to <16 x i8>*
  %8307 = load <16 x i8>, <16 x i8>* %8306, align 1, !tbaa !390
  %8308 = getelementptr inbounds i8, i8* %8275, i64 17
  %8309 = bitcast i8* %8308 to <16 x i8>*
  %8310 = load <16 x i8>, <16 x i8>* %8309, align 1, !tbaa !390
  %8311 = getelementptr inbounds i8, i8* %8275, i64 18
  %8312 = bitcast i8* %8311 to <16 x i8>*
  %8313 = load <16 x i8>, <16 x i8>* %8312, align 2, !tbaa !390
  %8314 = getelementptr inbounds i8, i8* %8269, i64 18
  %8315 = bitcast i8* %8314 to <16 x i8>*
  %8316 = load <16 x i8>, <16 x i8>* %8315, align 2, !tbaa !390
  %8317 = getelementptr inbounds i8, i8* %8263, i64 18
  %8318 = bitcast i8* %8317 to <16 x i8>*
  %8319 = load <16 x i8>, <16 x i8>* %8318, align 2, !tbaa !390
  %8320 = getelementptr inbounds i8, i8* %8275, i64 16
  %8321 = bitcast i8* %8320 to <16 x i8>*
  %8322 = load <16 x i8>, <16 x i8>* %8321, align 16, !tbaa !390
  %8323 = getelementptr inbounds i8, i8* %8269, i64 16
  %8324 = bitcast i8* %8323 to <16 x i8>*
  %8325 = load <16 x i8>, <16 x i8>* %8324, align 16, !tbaa !390
  %8326 = getelementptr inbounds i8, i8* %8263, i64 16
  %8327 = bitcast i8* %8326 to <16 x i8>*
  %8328 = load <16 x i8>, <16 x i8>* %8327, align 16, !tbaa !390
  %8329 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %8325, <16 x i8> %8328) #11
  %8330 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %8329, <16 x i8> %8322) #11
  %8331 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %8313, <16 x i8> %8330) #11
  %8332 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %8319, <16 x i8> %8316) #11
  %8333 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %8331, <16 x i8> %8332) #11
  %8334 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %8304, <16 x i8> %8333) #11
  %8335 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %8310, <16 x i8> %8307) #11
  %8336 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %8334, <16 x i8> %8335) #11
  %8337 = getelementptr inbounds i8, i8* %8263, i64 33
  %8338 = bitcast i8* %8337 to <16 x i8>*
  %8339 = load <16 x i8>, <16 x i8>* %8338, align 1, !tbaa !390
  %8340 = getelementptr inbounds i8, i8* %8269, i64 33
  %8341 = bitcast i8* %8340 to <16 x i8>*
  %8342 = load <16 x i8>, <16 x i8>* %8341, align 1, !tbaa !390
  %8343 = getelementptr inbounds i8, i8* %8275, i64 33
  %8344 = bitcast i8* %8343 to <16 x i8>*
  %8345 = load <16 x i8>, <16 x i8>* %8344, align 1, !tbaa !390
  %8346 = getelementptr inbounds i8, i8* %8275, i64 34
  %8347 = bitcast i8* %8346 to <16 x i8>*
  %8348 = load <16 x i8>, <16 x i8>* %8347, align 2, !tbaa !390
  %8349 = getelementptr inbounds i8, i8* %8269, i64 34
  %8350 = bitcast i8* %8349 to <16 x i8>*
  %8351 = load <16 x i8>, <16 x i8>* %8350, align 2, !tbaa !390
  %8352 = getelementptr inbounds i8, i8* %8263, i64 34
  %8353 = bitcast i8* %8352 to <16 x i8>*
  %8354 = load <16 x i8>, <16 x i8>* %8353, align 2, !tbaa !390
  %8355 = getelementptr inbounds i8, i8* %8275, i64 32
  %8356 = bitcast i8* %8355 to <16 x i8>*
  %8357 = load <16 x i8>, <16 x i8>* %8356, align 16, !tbaa !390
  %8358 = getelementptr inbounds i8, i8* %8269, i64 32
  %8359 = bitcast i8* %8358 to <16 x i8>*
  %8360 = load <16 x i8>, <16 x i8>* %8359, align 16, !tbaa !390
  %8361 = getelementptr inbounds i8, i8* %8263, i64 32
  %8362 = bitcast i8* %8361 to <16 x i8>*
  %8363 = load <16 x i8>, <16 x i8>* %8362, align 16, !tbaa !390
  %8364 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %8360, <16 x i8> %8363) #11
  %8365 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %8364, <16 x i8> %8357) #11
  %8366 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %8348, <16 x i8> %8365) #11
  %8367 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %8354, <16 x i8> %8351) #11
  %8368 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %8366, <16 x i8> %8367) #11
  %8369 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %8339, <16 x i8> %8368) #11
  %8370 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %8345, <16 x i8> %8342) #11
  %8371 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %8369, <16 x i8> %8370) #11
  %8372 = getelementptr inbounds i8, i8* %8263, i64 49
  %8373 = bitcast i8* %8372 to <16 x i8>*
  %8374 = load <16 x i8>, <16 x i8>* %8373, align 1, !tbaa !390
  %8375 = getelementptr inbounds i8, i8* %8269, i64 49
  %8376 = bitcast i8* %8375 to <16 x i8>*
  %8377 = load <16 x i8>, <16 x i8>* %8376, align 1, !tbaa !390
  %8378 = getelementptr inbounds i8, i8* %8275, i64 49
  %8379 = bitcast i8* %8378 to <16 x i8>*
  %8380 = load <16 x i8>, <16 x i8>* %8379, align 1, !tbaa !390
  %8381 = getelementptr inbounds i8, i8* %8275, i64 50
  %8382 = bitcast i8* %8381 to <16 x i8>*
  %8383 = load <16 x i8>, <16 x i8>* %8382, align 2, !tbaa !390
  %8384 = getelementptr inbounds i8, i8* %8269, i64 50
  %8385 = bitcast i8* %8384 to <16 x i8>*
  %8386 = load <16 x i8>, <16 x i8>* %8385, align 2, !tbaa !390
  %8387 = getelementptr inbounds i8, i8* %8263, i64 50
  %8388 = bitcast i8* %8387 to <16 x i8>*
  %8389 = load <16 x i8>, <16 x i8>* %8388, align 2, !tbaa !390
  %8390 = getelementptr inbounds i8, i8* %8275, i64 48
  %8391 = bitcast i8* %8390 to <16 x i8>*
  %8392 = load <16 x i8>, <16 x i8>* %8391, align 16, !tbaa !390
  %8393 = getelementptr inbounds i8, i8* %8269, i64 48
  %8394 = bitcast i8* %8393 to <16 x i8>*
  %8395 = load <16 x i8>, <16 x i8>* %8394, align 16, !tbaa !390
  %8396 = getelementptr inbounds i8, i8* %8263, i64 48
  %8397 = bitcast i8* %8396 to <16 x i8>*
  %8398 = load <16 x i8>, <16 x i8>* %8397, align 16, !tbaa !390
  %8399 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %8395, <16 x i8> %8398) #11
  %8400 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %8399, <16 x i8> %8392) #11
  %8401 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %8383, <16 x i8> %8400) #11
  %8402 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %8389, <16 x i8> %8386) #11
  %8403 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %8401, <16 x i8> %8402) #11
  %8404 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %8374, <16 x i8> %8403) #11
  %8405 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %8380, <16 x i8> %8377) #11
  %8406 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %8404, <16 x i8> %8405) #11
  %8407 = add nsw i64 %6546, %5925
  %8408 = getelementptr inbounds i8, i8* %5, i64 %8407
  %8409 = bitcast i8* %8408 to <16 x i8>*
  store <16 x i8> %8301, <16 x i8>* %8409, align 1, !tbaa !392
  %8410 = getelementptr inbounds i8, i8* %8408, i64 16
  %8411 = bitcast i8* %8410 to <16 x i8>*
  store <16 x i8> %8336, <16 x i8>* %8411, align 1, !tbaa !392
  %8412 = getelementptr inbounds i8, i8* %8408, i64 32
  %8413 = bitcast i8* %8412 to <16 x i8>*
  store <16 x i8> %8371, <16 x i8>* %8413, align 1, !tbaa !392
  %8414 = getelementptr inbounds i8, i8* %8408, i64 48
  %8415 = bitcast i8* %8414 to <16 x i8>*
  store <16 x i8> %8406, <16 x i8>* %8415, align 1, !tbaa !392
  %indvars.iv.next389 = add nuw nsw i64 %indvars.iv388, 1
  %.not204 = icmp eq i64 %indvars.iv.next389, %88
  br i1 %.not204, label %if.then.i293, label %"for output.s0.x.x113"

"end for output.s0.x.x114":                       ; preds = %"consume bounded_input93"
  %tobool.not.i292.not = icmp eq i8* %bounded_input52, null
  br i1 %tobool.not.i292.not, label %call_destructor.exit294, label %if.then.i293

if.then.i293:                                     ; preds = %"for output.s0.x.x113", %"end for output.s0.x.x114"
  tail call void @halide_free(i8* null, i8* nonnull %bounded_input52) #14
  br label %call_destructor.exit294

call_destructor.exit294:                          ; preds = %"end for output.s0.x.x114", %if.then.i293
  %indvars.iv.next392 = add nuw nsw i64 %indvars.iv391, 1
  %8416 = icmp eq i64 %indvars.iv.next392, %zext394
  br i1 %8416, label %"end for output.s0.y.y50", label %"for output.s0.y.y49"
}

; Function Attrs: nounwind
define i32 @dilate3x3_argv(i8** nocapture readonly %0) local_unnamed_addr #11 {
entry:
  %1 = bitcast i8** %0 to %struct.halide_buffer_t**
  %2 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %1, align 8
  %3 = getelementptr i8*, i8** %0, i64 1
  %4 = bitcast i8** %3 to %struct.halide_buffer_t**
  %5 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %4, align 8
  %6 = tail call i32 @dilate3x3(%struct.halide_buffer_t* %2, %struct.halide_buffer_t* %5) #16
  ret i32 0
}

; Function Attrs: norecurse nounwind readnone willreturn
define nonnull %struct.halide_filter_metadata_t* @dilate3x3_metadata() local_unnamed_addr #12 {
entry:
  ret %struct.halide_filter_metadata_t* @dilate3x3_metadata_storage
}

; Function Attrs: nounwind readnone willreturn
define <16 x i8> @hydride.node.dilate3x3_arm_depth3.0(<16 x i8> %arg, <16 x i8> %arg.1, <16 x i8> %arg.2, <16 x i8> %arg.3, <16 x i8> %arg.4, <16 x i8> %arg.5, <16 x i8> %arg.6, <16 x i8> %arg.7, <16 x i8> %arg.8) local_unnamed_addr #13 {
entry:
  %0 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.7, <16 x i8> %arg.8) #11
  %1 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %0, <16 x i8> %arg.6) #11
  %2 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.3, <16 x i8> %1) #11
  %3 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.5, <16 x i8> %arg.4) #11
  %4 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2, <16 x i8> %3) #11
  %5 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg, <16 x i8> %4) #11
  %6 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.2, <16 x i8> %arg.1) #11
  %7 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %5, <16 x i8> %6) #11
  ret <16 x i8> %7
}

; Function Attrs: nounwind readnone willreturn
define <16 x i8> @hydride.node.dilate3x3_arm_depth3.1(<16 x i8> %arg, <16 x i8> %arg.1, <16 x i8> %arg.2, <16 x i8> %arg.3, <16 x i8> %arg.4, <16 x i8> %arg.5, <16 x i8> %arg.6, <16 x i8> %arg.7, <16 x i8> %arg.8) local_unnamed_addr #13 {
entry:
  %0 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.7, <16 x i8> %arg.8) #11
  %1 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %0, <16 x i8> %arg.6) #11
  %2 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.3, <16 x i8> %1) #11
  %3 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.5, <16 x i8> %arg.4) #11
  %4 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2, <16 x i8> %3) #11
  %5 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg, <16 x i8> %4) #11
  %6 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.2, <16 x i8> %arg.1) #11
  %7 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %5, <16 x i8> %6) #11
  ret <16 x i8> %7
}

; Function Attrs: nounwind readnone willreturn
define <16 x i8> @hydride.node.dilate3x3_arm_depth3.2(<16 x i8> %arg, <16 x i8> %arg.1, <16 x i8> %arg.2, <16 x i8> %arg.3, <16 x i8> %arg.4, <16 x i8> %arg.5, <16 x i8> %arg.6, <16 x i8> %arg.7, <16 x i8> %arg.8) local_unnamed_addr #13 {
entry:
  %0 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.7, <16 x i8> %arg.8) #11
  %1 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %0, <16 x i8> %arg.6) #11
  %2 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.3, <16 x i8> %1) #11
  %3 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.5, <16 x i8> %arg.4) #11
  %4 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2, <16 x i8> %3) #11
  %5 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg, <16 x i8> %4) #11
  %6 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.2, <16 x i8> %arg.1) #11
  %7 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %5, <16 x i8> %6) #11
  ret <16 x i8> %7
}

; Function Attrs: nounwind readnone willreturn
define <16 x i8> @hydride.node.dilate3x3_arm_depth3.3(<16 x i8> %arg, <16 x i8> %arg.1, <16 x i8> %arg.2, <16 x i8> %arg.3, <16 x i8> %arg.4, <16 x i8> %arg.5, <16 x i8> %arg.6, <16 x i8> %arg.7, <16 x i8> %arg.8) local_unnamed_addr #13 {
entry:
  %0 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.7, <16 x i8> %arg.8) #11
  %1 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %0, <16 x i8> %arg.6) #11
  %2 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.3, <16 x i8> %1) #11
  %3 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.5, <16 x i8> %arg.4) #11
  %4 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2, <16 x i8> %3) #11
  %5 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg, <16 x i8> %4) #11
  %6 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.2, <16 x i8> %arg.1) #11
  %7 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %5, <16 x i8> %6) #11
  ret <16 x i8> %7
}

; Function Attrs: nounwind readnone willreturn
define <16 x i8> @hydride.node.dilate3x3_arm_depth3.4(<16 x i8> %arg, <16 x i8> %arg.1, <16 x i8> %arg.2, <16 x i8> %arg.3, <16 x i8> %arg.4, <16 x i8> %arg.5, <16 x i8> %arg.6, <16 x i8> %arg.7, <16 x i8> %arg.8) local_unnamed_addr #13 {
entry:
  %0 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.7, <16 x i8> %arg.8) #11
  %1 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %0, <16 x i8> %arg.6) #11
  %2 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.3, <16 x i8> %1) #11
  %3 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.5, <16 x i8> %arg.4) #11
  %4 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2, <16 x i8> %3) #11
  %5 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg, <16 x i8> %4) #11
  %6 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.2, <16 x i8> %arg.1) #11
  %7 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %5, <16 x i8> %6) #11
  ret <16 x i8> %7
}

; Function Attrs: nounwind readnone willreturn
define <16 x i8> @hydride.node.dilate3x3_arm_depth3.5(<16 x i8> %arg, <16 x i8> %arg.1, <16 x i8> %arg.2, <16 x i8> %arg.3, <16 x i8> %arg.4, <16 x i8> %arg.5, <16 x i8> %arg.6, <16 x i8> %arg.7, <16 x i8> %arg.8) local_unnamed_addr #13 {
entry:
  %0 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.7, <16 x i8> %arg.8) #11
  %1 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %0, <16 x i8> %arg.6) #11
  %2 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.3, <16 x i8> %1) #11
  %3 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.5, <16 x i8> %arg.4) #11
  %4 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2, <16 x i8> %3) #11
  %5 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg, <16 x i8> %4) #11
  %6 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.2, <16 x i8> %arg.1) #11
  %7 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %5, <16 x i8> %6) #11
  ret <16 x i8> %7
}

; Function Attrs: nounwind readnone willreturn
define <16 x i8> @hydride.node.dilate3x3_arm_depth3.6(<16 x i8> %arg, <16 x i8> %arg.1, <16 x i8> %arg.2, <16 x i8> %arg.3, <16 x i8> %arg.4, <16 x i8> %arg.5, <16 x i8> %arg.6, <16 x i8> %arg.7, <16 x i8> %arg.8) local_unnamed_addr #13 {
entry:
  %0 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.7, <16 x i8> %arg.8) #11
  %1 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %0, <16 x i8> %arg.6) #11
  %2 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.3, <16 x i8> %1) #11
  %3 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.5, <16 x i8> %arg.4) #11
  %4 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2, <16 x i8> %3) #11
  %5 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg, <16 x i8> %4) #11
  %6 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.2, <16 x i8> %arg.1) #11
  %7 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %5, <16 x i8> %6) #11
  ret <16 x i8> %7
}

; Function Attrs: nounwind readnone willreturn
define <16 x i8> @hydride.node.dilate3x3_arm_depth3.7(<16 x i8> %arg, <16 x i8> %arg.1, <16 x i8> %arg.2, <16 x i8> %arg.3, <16 x i8> %arg.4, <16 x i8> %arg.5, <16 x i8> %arg.6, <16 x i8> %arg.7, <16 x i8> %arg.8) local_unnamed_addr #13 {
entry:
  %0 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.7, <16 x i8> %arg.8) #11
  %1 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %0, <16 x i8> %arg.6) #11
  %2 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.3, <16 x i8> %1) #11
  %3 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.5, <16 x i8> %arg.4) #11
  %4 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2, <16 x i8> %3) #11
  %5 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg, <16 x i8> %4) #11
  %6 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.2, <16 x i8> %arg.1) #11
  %7 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %5, <16 x i8> %6) #11
  ret <16 x i8> %7
}

; Function Attrs: nounwind readnone willreturn
define <16 x i8> @hydride.node.dilate3x3_arm_depth3.8(<16 x i8> %arg, <16 x i8> %arg.1, <16 x i8> %arg.2, <16 x i8> %arg.3, <16 x i8> %arg.4, <16 x i8> %arg.5, <16 x i8> %arg.6, <16 x i8> %arg.7, <16 x i8> %arg.8) local_unnamed_addr #13 {
entry:
  %0 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.7, <16 x i8> %arg.8) #11
  %1 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %0, <16 x i8> %arg.6) #11
  %2 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.3, <16 x i8> %1) #11
  %3 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.5, <16 x i8> %arg.4) #11
  %4 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2, <16 x i8> %3) #11
  %5 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg, <16 x i8> %4) #11
  %6 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.2, <16 x i8> %arg.1) #11
  %7 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %5, <16 x i8> %6) #11
  ret <16 x i8> %7
}

; Function Attrs: nounwind readnone willreturn
define <16 x i8> @hydride.node.dilate3x3_arm_depth3.9(<16 x i8> %arg, <16 x i8> %arg.1, <16 x i8> %arg.2, <16 x i8> %arg.3, <16 x i8> %arg.4, <16 x i8> %arg.5, <16 x i8> %arg.6, <16 x i8> %arg.7, <16 x i8> %arg.8) local_unnamed_addr #13 {
entry:
  %0 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.7, <16 x i8> %arg.8) #11
  %1 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %0, <16 x i8> %arg.6) #11
  %2 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.3, <16 x i8> %1) #11
  %3 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.5, <16 x i8> %arg.4) #11
  %4 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2, <16 x i8> %3) #11
  %5 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg, <16 x i8> %4) #11
  %6 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.2, <16 x i8> %arg.1) #11
  %7 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %5, <16 x i8> %6) #11
  ret <16 x i8> %7
}

; Function Attrs: nounwind readnone willreturn
define <16 x i8> @hydride.node.dilate3x3_arm_depth3.10(<16 x i8> %arg, <16 x i8> %arg.1, <16 x i8> %arg.2, <16 x i8> %arg.3, <16 x i8> %arg.4, <16 x i8> %arg.5, <16 x i8> %arg.6, <16 x i8> %arg.7, <16 x i8> %arg.8) local_unnamed_addr #13 {
entry:
  %0 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.7, <16 x i8> %arg.8) #11
  %1 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %0, <16 x i8> %arg.6) #11
  %2 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.3, <16 x i8> %1) #11
  %3 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.5, <16 x i8> %arg.4) #11
  %4 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2, <16 x i8> %3) #11
  %5 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg, <16 x i8> %4) #11
  %6 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.2, <16 x i8> %arg.1) #11
  %7 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %5, <16 x i8> %6) #11
  ret <16 x i8> %7
}

; Function Attrs: nounwind readnone willreturn
define <16 x i8> @hydride.node.dilate3x3_arm_depth3.11(<16 x i8> %arg, <16 x i8> %arg.1, <16 x i8> %arg.2, <16 x i8> %arg.3, <16 x i8> %arg.4, <16 x i8> %arg.5, <16 x i8> %arg.6, <16 x i8> %arg.7, <16 x i8> %arg.8) local_unnamed_addr #13 {
entry:
  %0 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.7, <16 x i8> %arg.8) #11
  %1 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %0, <16 x i8> %arg.6) #11
  %2 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.3, <16 x i8> %1) #11
  %3 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.5, <16 x i8> %arg.4) #11
  %4 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2, <16 x i8> %3) #11
  %5 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg, <16 x i8> %4) #11
  %6 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.2, <16 x i8> %arg.1) #11
  %7 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %5, <16 x i8> %6) #11
  ret <16 x i8> %7
}

; Function Attrs: nounwind readnone willreturn
define <16 x i8> @hydride.node.dilate3x3_arm_depth3.12(<16 x i8> %arg, <16 x i8> %arg.1, <16 x i8> %arg.2, <16 x i8> %arg.3, <16 x i8> %arg.4, <16 x i8> %arg.5, <16 x i8> %arg.6, <16 x i8> %arg.7, <16 x i8> %arg.8) local_unnamed_addr #13 {
entry:
  %0 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.7, <16 x i8> %arg.8) #11
  %1 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %0, <16 x i8> %arg.6) #11
  %2 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.3, <16 x i8> %1) #11
  %3 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.5, <16 x i8> %arg.4) #11
  %4 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2, <16 x i8> %3) #11
  %5 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg, <16 x i8> %4) #11
  %6 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.2, <16 x i8> %arg.1) #11
  %7 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %5, <16 x i8> %6) #11
  ret <16 x i8> %7
}

; Function Attrs: nounwind readnone willreturn
define <16 x i8> @hydride.node.dilate3x3_arm_depth3.13(<16 x i8> %arg, <16 x i8> %arg.1, <16 x i8> %arg.2, <16 x i8> %arg.3, <16 x i8> %arg.4, <16 x i8> %arg.5, <16 x i8> %arg.6, <16 x i8> %arg.7, <16 x i8> %arg.8) local_unnamed_addr #13 {
entry:
  %0 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.7, <16 x i8> %arg.8) #11
  %1 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %0, <16 x i8> %arg.6) #11
  %2 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.3, <16 x i8> %1) #11
  %3 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.5, <16 x i8> %arg.4) #11
  %4 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2, <16 x i8> %3) #11
  %5 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg, <16 x i8> %4) #11
  %6 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.2, <16 x i8> %arg.1) #11
  %7 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %5, <16 x i8> %6) #11
  ret <16 x i8> %7
}

; Function Attrs: nounwind readnone willreturn
define <16 x i8> @hydride.node.dilate3x3_arm_depth3.14(<16 x i8> %arg, <16 x i8> %arg.1, <16 x i8> %arg.2, <16 x i8> %arg.3, <16 x i8> %arg.4, <16 x i8> %arg.5, <16 x i8> %arg.6, <16 x i8> %arg.7, <16 x i8> %arg.8) local_unnamed_addr #13 {
entry:
  %0 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.7, <16 x i8> %arg.8) #11
  %1 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %0, <16 x i8> %arg.6) #11
  %2 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.3, <16 x i8> %1) #11
  %3 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.5, <16 x i8> %arg.4) #11
  %4 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2, <16 x i8> %3) #11
  %5 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg, <16 x i8> %4) #11
  %6 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.2, <16 x i8> %arg.1) #11
  %7 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %5, <16 x i8> %6) #11
  ret <16 x i8> %7
}

; Function Attrs: nounwind readnone willreturn
define <16 x i8> @hydride.node.dilate3x3_arm_depth3.15(<16 x i8> %arg, <16 x i8> %arg.1, <16 x i8> %arg.2, <16 x i8> %arg.3, <16 x i8> %arg.4, <16 x i8> %arg.5, <16 x i8> %arg.6, <16 x i8> %arg.7, <16 x i8> %arg.8) local_unnamed_addr #13 {
entry:
  %0 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.7, <16 x i8> %arg.8) #11
  %1 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %0, <16 x i8> %arg.6) #11
  %2 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.3, <16 x i8> %1) #11
  %3 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.5, <16 x i8> %arg.4) #11
  %4 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2, <16 x i8> %3) #11
  %5 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg, <16 x i8> %4) #11
  %6 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.2, <16 x i8> %arg.1) #11
  %7 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %5, <16 x i8> %6) #11
  ret <16 x i8> %7
}

; Function Attrs: nounwind readnone willreturn
define <16 x i8> @hydride.node.dilate3x3_arm_depth3.16(<16 x i8> %arg, <16 x i8> %arg.1, <16 x i8> %arg.2, <16 x i8> %arg.3, <16 x i8> %arg.4, <16 x i8> %arg.5, <16 x i8> %arg.6, <16 x i8> %arg.7, <16 x i8> %arg.8) local_unnamed_addr #13 {
entry:
  %0 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.7, <16 x i8> %arg.8) #11
  %1 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %0, <16 x i8> %arg.6) #11
  %2 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.3, <16 x i8> %1) #11
  %3 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.5, <16 x i8> %arg.4) #11
  %4 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2, <16 x i8> %3) #11
  %5 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg, <16 x i8> %4) #11
  %6 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.2, <16 x i8> %arg.1) #11
  %7 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %5, <16 x i8> %6) #11
  ret <16 x i8> %7
}

; Function Attrs: nounwind readnone willreturn
define <16 x i8> @hydride.node.dilate3x3_arm_depth3.17(<16 x i8> %arg, <16 x i8> %arg.1, <16 x i8> %arg.2, <16 x i8> %arg.3, <16 x i8> %arg.4, <16 x i8> %arg.5, <16 x i8> %arg.6, <16 x i8> %arg.7, <16 x i8> %arg.8) local_unnamed_addr #13 {
entry:
  %0 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.7, <16 x i8> %arg.8) #11
  %1 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %0, <16 x i8> %arg.6) #11
  %2 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.3, <16 x i8> %1) #11
  %3 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.5, <16 x i8> %arg.4) #11
  %4 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2, <16 x i8> %3) #11
  %5 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg, <16 x i8> %4) #11
  %6 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.2, <16 x i8> %arg.1) #11
  %7 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %5, <16 x i8> %6) #11
  ret <16 x i8> %7
}

; Function Attrs: nounwind readnone willreturn
define <16 x i8> @hydride.node.dilate3x3_arm_depth3.18(<16 x i8> %arg, <16 x i8> %arg.1, <16 x i8> %arg.2, <16 x i8> %arg.3, <16 x i8> %arg.4, <16 x i8> %arg.5, <16 x i8> %arg.6, <16 x i8> %arg.7, <16 x i8> %arg.8) local_unnamed_addr #13 {
entry:
  %0 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.7, <16 x i8> %arg.8) #11
  %1 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %0, <16 x i8> %arg.6) #11
  %2 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.3, <16 x i8> %1) #11
  %3 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.5, <16 x i8> %arg.4) #11
  %4 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2, <16 x i8> %3) #11
  %5 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg, <16 x i8> %4) #11
  %6 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.2, <16 x i8> %arg.1) #11
  %7 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %5, <16 x i8> %6) #11
  ret <16 x i8> %7
}

; Function Attrs: nounwind readnone willreturn
define <16 x i8> @hydride.node.dilate3x3_arm_depth3.19(<16 x i8> %arg, <16 x i8> %arg.1, <16 x i8> %arg.2, <16 x i8> %arg.3, <16 x i8> %arg.4, <16 x i8> %arg.5, <16 x i8> %arg.6, <16 x i8> %arg.7, <16 x i8> %arg.8) local_unnamed_addr #13 {
entry:
  %0 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.7, <16 x i8> %arg.8) #11
  %1 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %0, <16 x i8> %arg.6) #11
  %2 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.3, <16 x i8> %1) #11
  %3 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.5, <16 x i8> %arg.4) #11
  %4 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2, <16 x i8> %3) #11
  %5 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg, <16 x i8> %4) #11
  %6 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.2, <16 x i8> %arg.1) #11
  %7 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %5, <16 x i8> %6) #11
  ret <16 x i8> %7
}

; Function Attrs: nounwind readnone willreturn
define <16 x i8> @hydride.node.dilate3x3_arm_depth3.20(<16 x i8> %arg, <16 x i8> %arg.1, <16 x i8> %arg.2, <16 x i8> %arg.3, <16 x i8> %arg.4, <16 x i8> %arg.5, <16 x i8> %arg.6, <16 x i8> %arg.7, <16 x i8> %arg.8) local_unnamed_addr #13 {
entry:
  %0 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.7, <16 x i8> %arg.8) #11
  %1 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %0, <16 x i8> %arg.6) #11
  %2 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.3, <16 x i8> %1) #11
  %3 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.5, <16 x i8> %arg.4) #11
  %4 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2, <16 x i8> %3) #11
  %5 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg, <16 x i8> %4) #11
  %6 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.2, <16 x i8> %arg.1) #11
  %7 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %5, <16 x i8> %6) #11
  ret <16 x i8> %7
}

; Function Attrs: nounwind readnone willreturn
define <16 x i8> @hydride.node.dilate3x3_arm_depth3.21(<16 x i8> %arg, <16 x i8> %arg.1, <16 x i8> %arg.2, <16 x i8> %arg.3, <16 x i8> %arg.4, <16 x i8> %arg.5, <16 x i8> %arg.6, <16 x i8> %arg.7, <16 x i8> %arg.8) local_unnamed_addr #13 {
entry:
  %0 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.7, <16 x i8> %arg.8) #11
  %1 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %0, <16 x i8> %arg.6) #11
  %2 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.3, <16 x i8> %1) #11
  %3 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.5, <16 x i8> %arg.4) #11
  %4 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2, <16 x i8> %3) #11
  %5 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg, <16 x i8> %4) #11
  %6 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.2, <16 x i8> %arg.1) #11
  %7 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %5, <16 x i8> %6) #11
  ret <16 x i8> %7
}

; Function Attrs: nounwind readnone willreturn
define <16 x i8> @hydride.node.dilate3x3_arm_depth3.22(<16 x i8> %arg, <16 x i8> %arg.1, <16 x i8> %arg.2, <16 x i8> %arg.3, <16 x i8> %arg.4, <16 x i8> %arg.5, <16 x i8> %arg.6, <16 x i8> %arg.7, <16 x i8> %arg.8) local_unnamed_addr #13 {
entry:
  %0 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.7, <16 x i8> %arg.8) #11
  %1 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %0, <16 x i8> %arg.6) #11
  %2 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.3, <16 x i8> %1) #11
  %3 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.5, <16 x i8> %arg.4) #11
  %4 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2, <16 x i8> %3) #11
  %5 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg, <16 x i8> %4) #11
  %6 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.2, <16 x i8> %arg.1) #11
  %7 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %5, <16 x i8> %6) #11
  ret <16 x i8> %7
}

; Function Attrs: nounwind readnone willreturn
define <16 x i8> @hydride.node.dilate3x3_arm_depth3.23(<16 x i8> %arg, <16 x i8> %arg.1, <16 x i8> %arg.2, <16 x i8> %arg.3, <16 x i8> %arg.4, <16 x i8> %arg.5, <16 x i8> %arg.6, <16 x i8> %arg.7, <16 x i8> %arg.8) local_unnamed_addr #13 {
entry:
  %0 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.7, <16 x i8> %arg.8) #11
  %1 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %0, <16 x i8> %arg.6) #11
  %2 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.3, <16 x i8> %1) #11
  %3 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.5, <16 x i8> %arg.4) #11
  %4 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2, <16 x i8> %3) #11
  %5 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg, <16 x i8> %4) #11
  %6 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.2, <16 x i8> %arg.1) #11
  %7 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %5, <16 x i8> %6) #11
  ret <16 x i8> %7
}

; Function Attrs: nounwind readnone willreturn
define <16 x i8> @hydride.node.dilate3x3_arm_depth3.24(<16 x i8> %arg, <16 x i8> %arg.1, <16 x i8> %arg.2, <16 x i8> %arg.3, <16 x i8> %arg.4, <16 x i8> %arg.5, <16 x i8> %arg.6, <16 x i8> %arg.7, <16 x i8> %arg.8) local_unnamed_addr #13 {
entry:
  %0 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.7, <16 x i8> %arg.8) #11
  %1 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %0, <16 x i8> %arg.6) #11
  %2 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.3, <16 x i8> %1) #11
  %3 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.5, <16 x i8> %arg.4) #11
  %4 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2, <16 x i8> %3) #11
  %5 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg, <16 x i8> %4) #11
  %6 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.2, <16 x i8> %arg.1) #11
  %7 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %5, <16 x i8> %6) #11
  ret <16 x i8> %7
}

; Function Attrs: nounwind readnone willreturn
define <16 x i8> @hydride.node.dilate3x3_arm_depth3.25(<16 x i8> %arg, <16 x i8> %arg.1, <16 x i8> %arg.2, <16 x i8> %arg.3, <16 x i8> %arg.4, <16 x i8> %arg.5, <16 x i8> %arg.6, <16 x i8> %arg.7, <16 x i8> %arg.8) local_unnamed_addr #13 {
entry:
  %0 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.7, <16 x i8> %arg.8) #11
  %1 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %0, <16 x i8> %arg.6) #11
  %2 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.3, <16 x i8> %1) #11
  %3 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.5, <16 x i8> %arg.4) #11
  %4 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2, <16 x i8> %3) #11
  %5 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg, <16 x i8> %4) #11
  %6 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.2, <16 x i8> %arg.1) #11
  %7 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %5, <16 x i8> %6) #11
  ret <16 x i8> %7
}

; Function Attrs: nounwind readnone willreturn
define <16 x i8> @hydride.node.dilate3x3_arm_depth3.26(<16 x i8> %arg, <16 x i8> %arg.1, <16 x i8> %arg.2, <16 x i8> %arg.3, <16 x i8> %arg.4, <16 x i8> %arg.5, <16 x i8> %arg.6, <16 x i8> %arg.7, <16 x i8> %arg.8) local_unnamed_addr #13 {
entry:
  %0 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.7, <16 x i8> %arg.8) #11
  %1 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %0, <16 x i8> %arg.6) #11
  %2 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.3, <16 x i8> %1) #11
  %3 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.5, <16 x i8> %arg.4) #11
  %4 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2, <16 x i8> %3) #11
  %5 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg, <16 x i8> %4) #11
  %6 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.2, <16 x i8> %arg.1) #11
  %7 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %5, <16 x i8> %6) #11
  ret <16 x i8> %7
}

; Function Attrs: nounwind readnone willreturn
define <16 x i8> @hydride.node.dilate3x3_arm_depth3.27(<16 x i8> %arg, <16 x i8> %arg.1, <16 x i8> %arg.2, <16 x i8> %arg.3, <16 x i8> %arg.4, <16 x i8> %arg.5, <16 x i8> %arg.6, <16 x i8> %arg.7, <16 x i8> %arg.8) local_unnamed_addr #13 {
entry:
  %0 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.7, <16 x i8> %arg.8) #11
  %1 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %0, <16 x i8> %arg.6) #11
  %2 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.3, <16 x i8> %1) #11
  %3 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.5, <16 x i8> %arg.4) #11
  %4 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2, <16 x i8> %3) #11
  %5 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg, <16 x i8> %4) #11
  %6 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.2, <16 x i8> %arg.1) #11
  %7 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %5, <16 x i8> %6) #11
  ret <16 x i8> %7
}

; Function Attrs: nounwind readnone willreturn
define <16 x i8> @hydride.node.dilate3x3_arm_depth3.28(<16 x i8> %arg, <16 x i8> %arg.1, <16 x i8> %arg.2, <16 x i8> %arg.3, <16 x i8> %arg.4, <16 x i8> %arg.5, <16 x i8> %arg.6, <16 x i8> %arg.7, <16 x i8> %arg.8) local_unnamed_addr #13 {
entry:
  %0 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.7, <16 x i8> %arg.8) #11
  %1 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %0, <16 x i8> %arg.6) #11
  %2 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.3, <16 x i8> %1) #11
  %3 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.5, <16 x i8> %arg.4) #11
  %4 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2, <16 x i8> %3) #11
  %5 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg, <16 x i8> %4) #11
  %6 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.2, <16 x i8> %arg.1) #11
  %7 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %5, <16 x i8> %6) #11
  ret <16 x i8> %7
}

; Function Attrs: nounwind readnone willreturn
define <16 x i8> @hydride.node.dilate3x3_arm_depth3.29(<16 x i8> %arg, <16 x i8> %arg.1, <16 x i8> %arg.2, <16 x i8> %arg.3, <16 x i8> %arg.4, <16 x i8> %arg.5, <16 x i8> %arg.6, <16 x i8> %arg.7, <16 x i8> %arg.8) local_unnamed_addr #13 {
entry:
  %0 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.7, <16 x i8> %arg.8) #11
  %1 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %0, <16 x i8> %arg.6) #11
  %2 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.3, <16 x i8> %1) #11
  %3 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.5, <16 x i8> %arg.4) #11
  %4 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2, <16 x i8> %3) #11
  %5 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg, <16 x i8> %4) #11
  %6 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.2, <16 x i8> %arg.1) #11
  %7 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %5, <16 x i8> %6) #11
  ret <16 x i8> %7
}

; Function Attrs: nounwind readnone willreturn
define <16 x i8> @hydride.node.dilate3x3_arm_depth3.30(<16 x i8> %arg, <16 x i8> %arg.1, <16 x i8> %arg.2, <16 x i8> %arg.3, <16 x i8> %arg.4, <16 x i8> %arg.5, <16 x i8> %arg.6, <16 x i8> %arg.7, <16 x i8> %arg.8) local_unnamed_addr #13 {
entry:
  %0 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.7, <16 x i8> %arg.8) #11
  %1 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %0, <16 x i8> %arg.6) #11
  %2 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.3, <16 x i8> %1) #11
  %3 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.5, <16 x i8> %arg.4) #11
  %4 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2, <16 x i8> %3) #11
  %5 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg, <16 x i8> %4) #11
  %6 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.2, <16 x i8> %arg.1) #11
  %7 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %5, <16 x i8> %6) #11
  ret <16 x i8> %7
}

; Function Attrs: nounwind readnone willreturn
define <16 x i8> @hydride.node.dilate3x3_arm_depth3.31(<16 x i8> %arg, <16 x i8> %arg.1, <16 x i8> %arg.2, <16 x i8> %arg.3, <16 x i8> %arg.4, <16 x i8> %arg.5, <16 x i8> %arg.6, <16 x i8> %arg.7, <16 x i8> %arg.8) local_unnamed_addr #13 {
entry:
  %0 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.7, <16 x i8> %arg.8) #11
  %1 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %0, <16 x i8> %arg.6) #11
  %2 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.3, <16 x i8> %1) #11
  %3 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.5, <16 x i8> %arg.4) #11
  %4 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %2, <16 x i8> %3) #11
  %5 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg, <16 x i8> %4) #11
  %6 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %arg.2, <16 x i8> %arg.1) #11
  %7 = tail call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %5, <16 x i8> %6) #11
  ret <16 x i8> %7
}

; Function Attrs: nofree nosync nounwind readnone willreturn
declare i64 @llvm.vector.reduce.add.v2i64(<2 x i64>) #9

attributes #0 = { nounwind mustprogress "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-builtins" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind willreturn mustprogress "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nofree nosync nounwind willreturn }
attributes #4 = { nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nofree nosync nounwind willreturn writeonly }
attributes #6 = { alwaysinline nounwind willreturn mustprogress "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #8 = { nounwind willreturn "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nofree nosync nounwind readnone willreturn }
attributes #10 = { nounwind "reciprocal-estimates"="none" }
attributes #11 = { nounwind }
attributes #12 = { norecurse nounwind readnone willreturn }
attributes #13 = { nounwind readnone willreturn }
attributes #14 = { nobuiltin nounwind "no-builtins" }
attributes #15 = { nobuiltin "no-builtins" }
attributes #16 = { noinline }

!llvm.module.flags = !{!0, !1, !2, !3, !4, !5, !6, !7, !8, !9, !10, !11, !12}
!llvm.ident = !{!13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 2, !"halide_use_soft_float_abi", i32 0}
!3 = !{i32 2, !"halide_mcpu", !"apple-a12"}
!4 = !{i32 2, !"halide_mattrs", !"+reserve-x18"}
!5 = !{i32 2, !"halide_mabi", !""}
!6 = !{i32 2, !"halide_use_pic", i32 1}
!7 = !{i32 2, !"halide_use_large_code_model", i32 0}
!8 = !{i32 2, !"halide_per_instruction_fast_math_flags", i32 0}
!9 = !{i32 1, !"branch-target-enforcement", i32 0}
!10 = !{i32 1, !"sign-return-address", i32 0}
!11 = !{i32 1, !"sign-return-address-all", i32 0}
!12 = !{i32 1, !"sign-return-address-with-bkey", i32 0}
!13 = !{!"clang version 12.0.1 (https://github.com/llvm/llvm-project.git fed41342a82f5a3a9201819a82bf7a48313e296b)"}
!14 = !{!15, !15, i64 0}
!15 = !{!"any pointer", !16, i64 0}
!16 = !{!"omnipotent char", !17, i64 0}
!17 = !{!"Simple C++ TBAA"}
!18 = !{!16, !16, i64 0}
!19 = !{!20, !20, i64 0}
!20 = !{!"bool", !16, i64 0}
!21 = !{i8 0, i8 2}
!22 = !{!23, !23, i64 0}
!23 = !{!"long long", !16, i64 0}
!24 = !{!25, !26, i64 0}
!25 = !{!"_ZTS18mach_timebase_info", !26, i64 0, !26, i64 4}
!26 = !{!"int", !16, i64 0}
!27 = !{!25, !26, i64 4}
!28 = !{!29, !15, i64 0}
!29 = !{!"_ZTSN6Halide7Runtime8Internal4workE", !30, i64 0, !15, i64 56, !15, i64 64, !15, i64 72, !26, i64 80, !15, i64 88, !26, i64 96, !15, i64 104, !26, i64 112, !26, i64 116, !26, i64 120, !20, i64 124}
!30 = !{!"_ZTS22halide_parallel_task_t", !15, i64 0, !15, i64 8, !15, i64 16, !15, i64 24, !26, i64 32, !26, i64 36, !26, i64 40, !26, i64 44, !20, i64 48}
!31 = !{!29, !26, i64 36}
!32 = !{!29, !26, i64 40}
!33 = !{!29, !20, i64 48}
!34 = !{!29, !15, i64 24}
!35 = !{!29, !26, i64 32}
!36 = !{!29, !15, i64 8}
!37 = !{!29, !26, i64 44}
!38 = !{!29, !15, i64 16}
!39 = !{!29, !15, i64 56}
!40 = !{!29, !15, i64 104}
!41 = !{!26, !26, i64 0}
!42 = !{!29, !26, i64 120}
!43 = !{!29, !20, i64 124}
!44 = !{!29, !15, i64 72}
!45 = !{!29, !26, i64 80}
!46 = !{!29, !15, i64 88}
!47 = !{!29, !26, i64 116}
!48 = !{!49, !49, i64 0}
!49 = !{!"vtable pointer", !17, i64 0}
!50 = !{!51, !15, i64 8}
!51 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE", !15, i64 8}
!52 = !{!53, !20, i64 2121}
!53 = !{!"_ZTSN6Halide7Runtime8Internal12work_queue_tE", !54, i64 0, !26, i64 8, !26, i64 12, !15, i64 16, !26, i64 24, !26, i64 28, !26, i64 32, !55, i64 40, !55, i64 48, !55, i64 56, !26, i64 64, !26, i64 68, !16, i64 72, !20, i64 2120, !20, i64 2121, !26, i64 2124}
!54 = !{!"_ZTS12halide_mutex", !16, i64 0}
!55 = !{!"_ZTS11halide_cond", !16, i64 0}
!56 = distinct !{!56, !57}
!57 = !{!"llvm.loop.mustprogress"}
!58 = !{!53, !26, i64 8}
!59 = distinct !{!59, !57}
!60 = !{!53, !26, i64 24}
!61 = !{!53, !26, i64 2124}
!62 = !{!53, !26, i64 28}
!63 = distinct !{!63, !57}
!64 = !{!29, !26, i64 112}
!65 = !{!29, !26, i64 96}
!66 = !{!53, !15, i64 16}
!67 = !{!29, !15, i64 64}
!68 = distinct !{!68, !57, !69}
!69 = !{!"llvm.loop.isvectorized", i32 1}
!70 = !{!53, !26, i64 68}
!71 = !{!53, !26, i64 32}
!72 = distinct !{!72, !57, !69}
!73 = !{!53, !20, i64 2120}
!74 = distinct !{!74, !57}
!75 = !{!76, !15, i64 0}
!76 = !{!"_ZTS26halide_semaphore_acquire_t", !15, i64 0, !26, i64 8}
!77 = !{!76, !26, i64 8}
!78 = distinct !{!78, !57}
!79 = !{!53, !26, i64 64}
!80 = distinct !{!80, !57}
!81 = distinct !{!81, !57}
!82 = !{i64 0, i64 8, !14, i64 8, i64 8, !14, i64 16, i64 8, !14, i64 24, i64 8, !14, i64 32, i64 4, !41, i64 36, i64 4, !41, i64 40, i64 4, !41, i64 44, i64 4, !41, i64 48, i64 1, !19, i64 56, i64 8, !14, i64 64, i64 8, !14, i64 72, i64 8, !14, i64 80, i64 4, !41, i64 88, i64 8, !14, i64 96, i64 4, !41, i64 104, i64 8, !14, i64 112, i64 4, !41, i64 116, i64 4, !41, i64 120, i64 4, !41, i64 124, i64 1, !19}
!83 = !{i64 0, i64 8, !14, i64 8, i64 8, !14, i64 16, i64 8, !14, i64 24, i64 4, !41, i64 28, i64 4, !41, i64 32, i64 4, !41, i64 36, i64 4, !41, i64 40, i64 1, !19, i64 48, i64 8, !14, i64 56, i64 8, !14, i64 64, i64 8, !14, i64 72, i64 4, !41, i64 80, i64 8, !14, i64 88, i64 4, !41, i64 96, i64 8, !14, i64 104, i64 4, !41, i64 108, i64 4, !41, i64 112, i64 4, !41, i64 116, i64 1, !19}
!84 = !{i64 0, i64 8, !14, i64 8, i64 8, !14, i64 16, i64 8, !14, i64 24, i64 4, !41, i64 32, i64 8, !14, i64 40, i64 4, !41, i64 48, i64 8, !14, i64 56, i64 4, !41, i64 60, i64 4, !41, i64 64, i64 4, !41, i64 68, i64 1, !19}
!85 = !{i64 0, i64 8, !14, i64 8, i64 4, !41, i64 12, i64 4, !41, i64 16, i64 4, !41, i64 20, i64 1, !19}
!86 = distinct !{!86, !57}
!87 = distinct !{!87, !57}
!88 = !{!89, !15, i64 144}
!89 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization10queue_dataE", !90, i64 0, !23, i64 136, !15, i64 144, !23, i64 152}
!90 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization13thread_parkerE", !91, i64 0, !92, i64 64, !20, i64 128}
!91 = !{!"_ZTS15pthread_mutex_t", !16, i64 0}
!92 = !{!"_ZTS14pthread_cond_t", !16, i64 0}
!93 = !{!94, !15, i64 16}
!94 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization11hash_bucketE", !95, i64 0, !15, i64 8, !15, i64 16}
!95 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization9word_lockE", !23, i64 0}
!96 = distinct !{!96, !57}
!97 = !{!89, !23, i64 152}
!98 = !{!90, !20, i64 128}
!99 = distinct !{!99, !57}
!100 = !{!101, !15, i64 152}
!101 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization20word_lock_queue_dataE", !90, i64 0, !15, i64 136, !15, i64 144, !15, i64 152}
!102 = !{!101, !15, i64 136}
!103 = !{!101, !15, i64 144}
!104 = distinct !{!104, !57}
!105 = distinct !{!105, !57}
!106 = distinct !{!106, !57}
!107 = !{!108, !15, i64 8}
!108 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization25broadcast_parking_controlE", !15, i64 8, !15, i64 16}
!109 = !{!108, !15, i64 16}
!110 = !{!111, !15, i64 8}
!111 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization20wait_parking_controlE", !15, i64 8, !15, i64 16}
!112 = !{!111, !15, i64 16}
!113 = !{!89, !23, i64 136}
!114 = !{!115, !20, i64 0}
!115 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization15validate_actionE", !20, i64 0, !23, i64 8}
!116 = !{!115, !23, i64 8}
!117 = !{!94, !15, i64 8}
!118 = !{!119, !15, i64 0}
!119 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization11bucket_pairE", !15, i64 0, !15, i64 8}
!120 = distinct !{!120, !57}
!121 = !{!119, !15, i64 8}
!122 = !{!123, !15, i64 0}
!123 = !{!"_ZTSN6Halide7Runtime8Internal14spawned_threadE", !15, i64 0, !15, i64 8, !124, i64 16}
!124 = !{!"long", !16, i64 0}
!125 = !{!123, !15, i64 8}
!126 = !{!123, !124, i64 16}
!127 = !{!30, !26, i64 40}
!128 = !{i64 0, i64 8, !14, i64 8, i64 8, !14, i64 16, i64 8, !14, i64 24, i64 8, !14, i64 32, i64 4, !41, i64 36, i64 4, !41, i64 40, i64 4, !41, i64 44, i64 4, !41, i64 48, i64 1, !19}
!129 = distinct !{!129, !57}
!130 = distinct !{!130, !57}
!131 = distinct !{!131, !57}
!132 = !{!133, !15, i64 8}
!133 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization22signal_parking_controlE", !15, i64 8, !15, i64 16}
!134 = !{!133, !15, i64 16}
!135 = !{!136, !15, i64 0}
!136 = !{!"_ZTS18halide_mutex_array", !15, i64 0}
!137 = distinct !{!137, !57}
!138 = !{!139, !142, i64 34}
!139 = !{!"_ZTS20halide_trace_event_t", !15, i64 0, !15, i64 8, !15, i64 16, !15, i64 24, !140, i64 32, !143, i64 36, !26, i64 40, !26, i64 44, !26, i64 48}
!140 = !{!"_ZTS13halide_type_t", !141, i64 0, !16, i64 1, !142, i64 2}
!141 = !{!"_ZTS18halide_type_code_t", !16, i64 0}
!142 = !{!"short", !16, i64 0}
!143 = !{!"_ZTS25halide_trace_event_code_t", !16, i64 0}
!144 = !{!140, !16, i64 1}
!145 = !{!139, !26, i64 48}
!146 = !{!139, !15, i64 0}
!147 = !{!139, !15, i64 24}
!148 = !{!149, !26, i64 0}
!149 = !{!"_ZTSN6Halide7Runtime8Internal23SharedExclusiveSpinLockE", !26, i64 0}
!150 = !{!151, !26, i64 4}
!151 = !{!"_ZTSN6Halide7Runtime8Internal11TraceBufferE", !149, i64 0, !26, i64 4, !26, i64 8, !16, i64 12}
!152 = !{!151, !26, i64 8}
!153 = distinct !{!153, !57}
!154 = !{!155, !26, i64 0}
!155 = !{!"_ZTS21halide_trace_packet_t", !26, i64 0, !26, i64 4, !140, i64 8, !143, i64 12, !26, i64 16, !26, i64 20, !26, i64 24}
!156 = !{!155, !26, i64 4}
!157 = !{!139, !15, i64 16}
!158 = !{!139, !15, i64 8}
!159 = !{!155, !26, i64 24}
!160 = !{!155, !142, i64 10}
!161 = distinct !{!161, !57}
!162 = !{!139, !143, i64 36}
!163 = !{!139, !16, i64 33}
!164 = distinct !{!164, !57}
!165 = !{!139, !26, i64 44}
!166 = distinct !{!166, !57, !167}
!167 = !{!"llvm.loop.peeled.count", i32 1}
!168 = !{!139, !141, i64 32}
!169 = !{!142, !142, i64 0}
!170 = !{!171, !171, i64 0}
!171 = !{!"float", !16, i64 0}
!172 = !{!173, !173, i64 0}
!173 = !{!"double", !16, i64 0}
!174 = distinct !{!174, !57, !167}
!175 = distinct !{!175, !57}
!176 = !{!139, !26, i64 40}
!177 = distinct !{!177, !57}
!178 = distinct !{!178, !57}
!179 = distinct !{!179, !57}
!180 = !{!181, !15, i64 16}
!181 = !{!"_ZTS15halide_buffer_t", !23, i64 0, !15, i64 8, !15, i64 16, !23, i64 24, !140, i64 32, !26, i64 36, !15, i64 40, !15, i64 48}
!182 = !{!181, !23, i64 0}
!183 = !{!181, !26, i64 36}
!184 = !{!181, !15, i64 40}
!185 = !{!186, !26, i64 8}
!186 = !{!"_ZTS18halide_dimension_t", !26, i64 0, !26, i64 4, !26, i64 8, !26, i64 12}
!187 = distinct !{!187, !57, !69}
!188 = !{i64 0, i64 4, !41, i64 4, i64 4, !41, i64 8, i64 4, !41, i64 12, i64 4, !41}
!189 = !{!186, !26, i64 4}
!190 = distinct !{!190, !57}
!191 = distinct !{!191, !57, !69}
!192 = !{!193, !142, i64 0}
!193 = !{!"_ZTSN6Halide7Runtime8Internal18halide_tiff_headerE", !142, i64 0, !142, i64 2, !26, i64 4, !142, i64 8, !16, i64 10, !26, i64 190, !16, i64 194, !16, i64 202}
!194 = !{!193, !142, i64 2}
!195 = !{!193, !26, i64 4}
!196 = !{!193, !142, i64 8}
!197 = !{!198, !142, i64 0}
!198 = !{!"_ZTSN6Halide7Runtime8Internal8tiff_tagE", !142, i64 0, !142, i64 2, !26, i64 4, !16, i64 8}
!199 = !{!198, !142, i64 2}
!200 = !{!198, !26, i64 4}
!201 = distinct !{!201, !57}
!202 = distinct !{!202, !57}
!203 = distinct !{!203, !57}
!204 = distinct !{!204, !57}
!205 = distinct !{!205, !57}
!206 = !{!207}
!207 = distinct !{!207, !208}
!208 = distinct !{!208, !"LVerDomain"}
!209 = !{!210}
!210 = distinct !{!210, !208}
!211 = distinct !{!211, !57, !69}
!212 = distinct !{!212, !57, !69}
!213 = distinct !{!213, !57, !69}
!214 = distinct !{!214, !57, !69}
!215 = distinct !{!215, !57, !216, !69}
!216 = !{!"llvm.loop.unroll.runtime.disable"}
!217 = distinct !{!217, !57, !69}
!218 = distinct !{!218, !57, !69}
!219 = distinct !{!219, !57, !69}
!220 = distinct !{!220, !57, !69}
!221 = !{!186, !26, i64 0}
!222 = distinct !{!222, !57}
!223 = distinct !{!223, !57, !69}
!224 = distinct !{!224, !57, !216, !69}
!225 = distinct !{!225, !57}
!226 = distinct !{!226, !57}
!227 = distinct !{!227, !57}
!228 = distinct !{!228, !57}
!229 = !{!230, !15, i64 0}
!230 = !{!"_ZTSN6Halide7Runtime8Internal10CacheEntryE", !15, i64 0, !15, i64 8, !15, i64 16, !15, i64 24, !124, i64 32, !15, i64 40, !26, i64 48, !26, i64 52, !26, i64 56, !26, i64 60, !15, i64 64, !15, i64 72, !23, i64 80, !20, i64 88}
!231 = distinct !{!231, !57}
!232 = !{!230, !26, i64 56}
!233 = !{!230, !15, i64 24}
!234 = !{!230, !15, i64 72}
!235 = distinct !{!235, !57}
!236 = distinct !{!236, !57}
!237 = !{!238, !23, i64 0}
!238 = !{!"_ZTSN6Halide7Runtime8Internal11device_copyE", !23, i64 0, !23, i64 8, !23, i64 16, !16, i64 24, !16, i64 152, !16, i64 280, !23, i64 408}
!239 = !{!238, !23, i64 8}
!240 = !{!238, !23, i64 408}
!241 = distinct !{!241, !57}
!242 = !{!238, !23, i64 16}
!243 = distinct !{!243, !57, !69}
!244 = distinct !{!244, !57, !216, !69}
!245 = distinct !{!245, !57}
!246 = distinct !{!246, !57}
!247 = distinct !{!247, !57}
!248 = distinct !{!248, !57}
!249 = !{i64 0, i64 8, !22, i64 8, i64 8, !22, i64 16, i64 8, !22, i64 24, i64 128, !18, i64 152, i64 128, !18, i64 280, i64 128, !18, i64 408, i64 8, !22}
!250 = distinct !{!250, !57}
!251 = !{!186, !26, i64 12}
!252 = !{!230, !15, i64 16}
!253 = !{!230, !124, i64 32}
!254 = !{!230, !26, i64 48}
!255 = !{!230, !26, i64 52}
!256 = !{!230, !26, i64 60}
!257 = !{!230, !15, i64 64}
!258 = !{!230, !15, i64 40}
!259 = distinct !{!259, !57}
!260 = distinct !{!260, !57}
!261 = distinct !{!261, !57}
!262 = !{!230, !20, i64 88}
!263 = !{!230, !23, i64 80}
!264 = !{i64 0, i64 8, !22, i64 8, i64 8, !14, i64 16, i64 8, !14, i64 24, i64 8, !22, i64 32, i64 1, !265, i64 33, i64 1, !18, i64 34, i64 2, !169, i64 36, i64 4, !41, i64 40, i64 8, !14, i64 48, i64 8, !14}
!265 = !{!141, !141, i64 0}
!266 = distinct !{!266, !57}
!267 = distinct !{!267, !57}
!268 = !{!230, !15, i64 8}
!269 = distinct !{!269, !57}
!270 = distinct !{!270, !57, !69}
!271 = distinct !{!271, !57, !69}
!272 = distinct !{!272, !57, !69}
!273 = distinct !{!273, !57, !69}
!274 = distinct !{!274, !57}
!275 = distinct !{!275, !57}
!276 = distinct !{!276, !57}
!277 = distinct !{!277, !57}
!278 = distinct !{!278, !57}
!279 = distinct !{!279, !57, !69}
!280 = distinct !{!280, !57, !69}
!281 = distinct !{!281, !57, !69}
!282 = distinct !{!282, !57, !69}
!283 = distinct !{!283, !57}
!284 = !{!285, !26, i64 8}
!285 = !{!"_ZTSN6Halide7Runtime8Internal16CacheBlockHeaderE", !15, i64 0, !26, i64 8}
!286 = !{!285, !15, i64 0}
!287 = distinct !{!287, !57}
!288 = distinct !{!288, !57}
!289 = distinct !{!289, !57}
!290 = distinct !{!290, !57}
!291 = distinct !{!291, !57, !69}
!292 = distinct !{!292, !57, !69}
!293 = distinct !{!293, !57, !69}
!294 = distinct !{!294, !57, !69}
!295 = distinct !{!295, !57}
!296 = distinct !{!296, !57}
!297 = distinct !{!297, !57}
!298 = distinct !{!298, !57}
!299 = distinct !{!299, !57}
!300 = distinct !{!300, !57}
!301 = distinct !{!301, !57}
!302 = distinct !{!302, !57}
!303 = distinct !{!303, !57}
!304 = !{!140, !141, i64 0}
!305 = !{!140, !142, i64 2}
!306 = !{!181, !15, i64 8}
!307 = !{!181, !23, i64 24}
!308 = distinct !{!308, !57}
!309 = !{!310, !15, i64 0}
!310 = !{!"_ZTS29halide_device_allocation_pool", !15, i64 0, !15, i64 8}
!311 = distinct !{!311, !57}
!312 = !{!310, !15, i64 8}
!313 = !{!314, !15, i64 120}
!314 = !{!"_ZTS25halide_device_interface_t", !15, i64 0, !15, i64 8, !15, i64 16, !15, i64 24, !15, i64 32, !15, i64 40, !15, i64 48, !15, i64 56, !15, i64 64, !15, i64 72, !15, i64 80, !15, i64 88, !15, i64 96, !15, i64 104, !15, i64 112, !15, i64 120}
!315 = !{!316, !15, i64 48}
!316 = !{!"_ZTS30halide_device_interface_impl_t", !15, i64 0, !15, i64 8, !15, i64 16, !15, i64 24, !15, i64 32, !15, i64 40, !15, i64 48, !15, i64 56, !15, i64 64, !15, i64 72, !15, i64 80, !15, i64 88, !15, i64 96, !15, i64 104, !15, i64 112, !15, i64 120}
!317 = !{!316, !15, i64 40}
!318 = !{!316, !15, i64 56}
!319 = !{!316, !15, i64 0}
!320 = !{!316, !15, i64 16}
!321 = !{!316, !15, i64 8}
!322 = !{!316, !15, i64 32}
!323 = !{!316, !15, i64 24}
!324 = !{!316, !15, i64 64}
!325 = !{!316, !15, i64 72}
!326 = distinct !{!326, !57, !69}
!327 = distinct !{!327, !57, !69}
!328 = distinct !{!328, !57, !69}
!329 = distinct !{!329, !57, !69}
!330 = !{!316, !15, i64 112}
!331 = !{!316, !15, i64 120}
!332 = !{!316, !15, i64 80}
!333 = !{!316, !15, i64 88}
!334 = !{!316, !15, i64 96}
!335 = !{!316, !15, i64 104}
!336 = !{i32 22, i32 33}
!337 = !{!338, !15, i64 40}
!338 = !{!"_ZTS21halide_profiler_state", !54, i64 0, !26, i64 8, !26, i64 12, !26, i64 16, !26, i64 20, !15, i64 24, !15, i64 32, !15, i64 40}
!339 = !{!338, !26, i64 16}
!340 = !{!341, !23, i64 0}
!341 = !{!"_ZTS30halide_profiler_pipeline_stats", !23, i64 0, !23, i64 8, !23, i64 16, !23, i64 24, !23, i64 32, !23, i64 40, !15, i64 48, !15, i64 56, !15, i64 64, !26, i64 72, !26, i64 76, !26, i64 80, !26, i64 84, !26, i64 88}
!342 = !{!341, !26, i64 80}
!343 = !{!341, !23, i64 32}
!344 = !{!341, !23, i64 40}
!345 = !{!341, !15, i64 48}
!346 = !{!341, !26, i64 84}
!347 = !{!341, !26, i64 88}
!348 = !{!341, !23, i64 16}
!349 = !{!341, !23, i64 24}
!350 = !{!341, !26, i64 72}
!351 = !{!341, !15, i64 56}
!352 = distinct !{!352, !57}
!353 = !{!354, !23, i64 32}
!354 = !{!"_ZTS26halide_profiler_func_stats", !23, i64 0, !23, i64 8, !23, i64 16, !23, i64 24, !23, i64 32, !23, i64 40, !23, i64 48, !15, i64 56, !26, i64 64}
!355 = !{!354, !23, i64 0}
!356 = !{!354, !15, i64 56}
!357 = distinct !{!357, !57}
!358 = distinct !{!358, !57}
!359 = distinct !{!359, !57}
!360 = !{!354, !23, i64 40}
!361 = !{!354, !23, i64 48}
!362 = distinct !{!362, !57}
!363 = !{!354, !23, i64 16}
!364 = distinct !{!364, !57}
!365 = !{!354, !26, i64 64}
!366 = distinct !{!366, !57}
!367 = !{!354, !23, i64 24}
!368 = distinct !{!368, !57}
!369 = distinct !{!369, !57}
!370 = !{!338, !15, i64 24}
!371 = !{!341, !15, i64 64}
!372 = distinct !{!372, !57}
!373 = !{!338, !26, i64 12}
!374 = distinct !{!374, !57}
!375 = !{!341, !26, i64 76}
!376 = distinct !{!376, !57}
!377 = distinct !{!377, !57}
!378 = !{!338, !15, i64 32}
!379 = !{!338, !26, i64 20}
!380 = !{!338, !26, i64 8}
!381 = distinct !{!381, !57}
!382 = distinct !{!382, !57}
!383 = distinct !{!383, !57}
!384 = distinct !{!384, !57}
!385 = !{!"branch_weights", i32 1073741824, i32 0}
!386 = !{!"branch_weights", i32 1073741824, i32 1073741824}
!387 = !{!388, !388, i64 0}
!388 = !{!"input", !389, i64 0}
!389 = !{!"Halide buffer"}
!390 = !{!391, !391, i64 0}
!391 = !{!"bounded_input", !389, i64 0}
!392 = !{!393, !393, i64 0}
!393 = !{!"output", !389, i64 0}
