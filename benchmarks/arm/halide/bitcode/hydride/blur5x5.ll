; ModuleID = 'blur5x5'
source_filename = "/home/muchenx2/Hydride/frontends/halide/src/runtime/posix_allocator.cpp"
target datalayout = "e-m:o-i64:64-i128:128-n32:64-S128"
target triple = "arm64-apple-macosx"

%struct.mach_timebase_info = type { i32, i32 }
%"struct.Halide::Runtime::Internal::Synchronization::hash_table" = type { [1024 x %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"] }
%"struct.Halide::Runtime::Internal::Synchronization::hash_bucket" = type { %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* }
%"class.Halide::Runtime::Internal::Synchronization::word_lock" = type { i64 }
%"struct.Halide::Runtime::Internal::Synchronization::queue_data" = type { %"struct.Halide::Runtime::Internal::Synchronization::thread_parker", i64, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, i64 }
%"struct.Halide::Runtime::Internal::Synchronization::thread_parker" = type <{ %struct.pthread_mutex_t, %struct.pthread_mutex_t, i8, [7 x i8] }>
%struct.pthread_mutex_t = type { [8 x i64] }
%"struct.Halide::Runtime::Internal::work_queue_t" = type { %struct.halide_mutex, i32, i32, %"struct.Halide::Runtime::Internal::work"*, i32, i32, i32, [4 x i8], %struct.halide_mutex, %struct.halide_mutex, %struct.halide_mutex, i32, i32, [256 x %struct.halide_thread*], i8, i8, i32 }
%"struct.Halide::Runtime::Internal::work" = type { %struct.halide_parallel_task_t, i32 (i8*, i32, i8*)*, %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"*, i32, %"struct.Halide::Runtime::Internal::work"*, i32, i8*, i32, i32, i32, i8 }
%struct.halide_parallel_task_t = type { i32 (i8*, i32, i32, i8*, i8*)*, i8*, i8*, %struct.halide_semaphore_acquire_t*, i32, i32, i32, i32, i8, [7 x i8] }
%struct.halide_semaphore_acquire_t = type { %struct.halide_semaphore_t*, i32, [4 x i8] }
%struct.halide_semaphore_t = type { [2 x i64] }
%struct.halide_mutex = type { [1 x i64] }
%struct.halide_thread = type opaque
%"class.Halide::Runtime::Internal::TraceBuffer" = type { %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock", i32, i32, [1048576 x i8] }
%"class.Halide::Runtime::Internal::SharedExclusiveSpinLock" = type { i32 }
%struct.halide_trace_event_t = type <{ i8*, i8*, i32*, i8*, %struct.halide_type_t, i32, i32, i32, i32, [4 x i8] }>
%struct.halide_type_t = type { i8, i8, i16 }
%"struct.Halide::Runtime::Internal::CacheEntry" = type { %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"*, i8*, i64, i8*, i32, i32, i32, i32, %struct.halide_dimension_t*, %struct.halide_buffer_t*, i64, i8, [7 x i8] }
%struct.halide_dimension_t = type { i32, i32, i32, i32 }
%struct.halide_buffer_t = type { i64, %struct.halide_device_interface_t*, i8*, i64, %struct.halide_type_t, i32, %struct.halide_dimension_t*, i8* }
%struct.halide_device_interface_t = type { i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, void (i8*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i64, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, i32*, i32*)*, %struct.halide_device_interface_impl_t* }
%struct.halide_device_interface_impl_t = type { void ()*, void ()*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i64)*, i32 (i8*, %struct.halide_buffer_t*)* }
%struct.halide_device_allocation_pool = type { i32 (i8*)*, %struct.halide_device_allocation_pool* }
%struct.halide_profiler_state = type { %struct.halide_mutex, i32, i32, i32, i32, %struct.halide_profiler_pipeline_stats*, void (i32*, i32*)*, %struct.halide_thread* }
%struct.halide_profiler_pipeline_stats = type { i64, i64, i64, i64, i64, i64, i8*, %struct.halide_profiler_func_stats*, i8*, i32, i32, i32, i32, i32, [4 x i8] }
%struct.halide_profiler_func_stats = type { i64, i64, i64, i64, i64, i64, i64, i8*, i32, [4 x i8] }
%struct.halide_filter_argument_t = type { i8*, i32, i32, %struct.halide_type_t, %struct.halide_scalar_value_t*, %struct.halide_scalar_value_t*, %struct.halide_scalar_value_t*, %struct.halide_scalar_value_t*, i64** }
%struct.halide_scalar_value_t = type { %union.anon.28 }
%union.anon.28 = type { double }
%struct.halide_filter_metadata_t = type { i32, i32, %struct.halide_filter_argument_t*, i8*, i8* }
%"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control" = type { %"struct.Halide::Runtime::Internal::Synchronization::parking_control", i64* }
%"struct.Halide::Runtime::Internal::Synchronization::parking_control" = type { i32 (...)** }
%"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data" = type { %"struct.Halide::Runtime::Internal::Synchronization::thread_parker", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* }
%"struct.Halide::Runtime::Internal::Synchronization::validate_action" = type { i8, [7 x i8], i64 }
%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control" = type { %"struct.Halide::Runtime::Internal::Synchronization::parking_control", i64*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"* }
%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair" = type { %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* }
%"struct.Halide::Runtime::Internal::spawned_thread" = type { void (i8*)*, i8*, i64 }
%struct.halide_mutex_array = type { %struct.halide_mutex* }
%"struct.Halide::Runtime::Internal::halide_tiff_header" = type <{ i16, i16, i32, i16, [15 x %"struct.Halide::Runtime::Internal::tiff_tag"], i32, [2 x i32], [2 x i32] }>
%"struct.Halide::Runtime::Internal::tiff_tag" = type { i16, i16, i32, %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock" }
%"struct.Halide::Runtime::Internal::CacheBlockHeader" = type { %"struct.Halide::Runtime::Internal::CacheEntry"*, i32, [4 x i8] }
%"struct.Halide::Runtime::Internal::device_copy" = type { i64, i64, i64, [16 x i64], [16 x i64], [16 x i64], i64 }
%"struct.Halide::Runtime::Internal::CpuFeatures" = type { [2 x i64], [2 x i64] }

@_ZN6Halide7Runtime8Internal13custom_mallocE = linkonce local_unnamed_addr global i8* (i8*, i64)* @halide_default_malloc, align 8
@_ZN6Halide7Runtime8Internal11custom_freeE = linkonce local_unnamed_addr global void (i8*, i8*)* @halide_default_free, align 8
@_ZN6Halide7Runtime8Internal13error_handlerE = linkonce local_unnamed_addr global void (i8*, i8*)* @halide_default_error, align 8
@.str = private unnamed_addr constant [8 x i8] c"Error: \00", align 1
@_ZN6Halide7Runtime8Internal12custom_printE = linkonce local_unnamed_addr global void (i8*, i8*)* @halide_default_print, align 8
@_ZN6Halide7Runtime8Internal29halide_reference_clock_initedE = linkonce local_unnamed_addr global i8 0, align 1
@_ZN6Halide7Runtime8Internal22halide_reference_clockE = linkonce local_unnamed_addr global i64 0, align 8
@_ZN6Halide7Runtime8Internal20halide_timebase_infoE = linkonce global %struct.mach_timebase_info zeroinitializer, align 4
@_ZN6Halide7Runtime8Internal15Synchronization5tableE = linkonce global %"struct.Halide::Runtime::Internal::Synchronization::hash_table" zeroinitializer, align 8
@_ZN6Halide7Runtime8Internal10work_queueE = linkonce global %"struct.Halide::Runtime::Internal::work_queue_t" { %struct.halide_mutex zeroinitializer, i32 0, i32 0, %"struct.Halide::Runtime::Internal::work"* null, i32 0, i32 0, i32 0, [4 x i8] undef, %struct.halide_mutex zeroinitializer, %struct.halide_mutex zeroinitializer, %struct.halide_mutex zeroinitializer, i32 0, i32 0, [256 x %struct.halide_thread*] zeroinitializer, i8 0, i8 0, i32 0 }, align 8
@_ZN6Halide7Runtime8Internal14custom_do_taskE = linkonce local_unnamed_addr global i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* @halide_default_do_task, align 8
@_ZN6Halide7Runtime8Internal19custom_do_loop_taskE = linkonce local_unnamed_addr global i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* @halide_default_do_loop_task, align 8
@_ZN6Halide7Runtime8Internal17custom_do_par_forE = linkonce local_unnamed_addr global i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* @halide_default_do_par_for, align 8
@_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE = linkonce_odr unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (i1 (%"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)* @_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control8validateERNS2_15validate_actionE to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control12before_sleepEv to i8*), i8* bitcast (i64 (%"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"*, i32, i1)* @_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control6unparkEib to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control16requeue_callbackERKNS2_15validate_actionEbb to i8*)] }, align 8
@.str.5 = private unnamed_addr constant [130 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/synchronization_common.h:386 halide_abort_if_false() failed: next != nullptr\0A\00", align 1
@_ZTVN6Halide7Runtime8Internal15Synchronization20wait_parking_controlE = linkonce_odr unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (i1 (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)* @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control8validateERNS2_15validate_actionE to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*)* @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control12before_sleepEv to i8*), i8* bitcast (i64 (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*, i32, i1)* @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control6unparkEib to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control16requeue_callbackERKNS2_15validate_actionEbb to i8*)] }, align 8
@.str.5.6 = private unnamed_addr constant [124 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/synchronization_common.h:994 halide_abort_if_false() failed: val & 0x1\0A\00", align 1
@_ZTVN6Halide7Runtime8Internal15Synchronization25broadcast_parking_controlE = linkonce_odr unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (i1 (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)* @_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control8validateERNS2_15validate_actionE to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control12before_sleepEv to i8*), i8* bitcast (i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control6unparkEib to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)* @_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control16requeue_callbackERKNS2_15validate_actionEbb to i8*)] }, align 8
@.str.6 = private unnamed_addr constant [186 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/thread_pool_common.h:155 halide_abort_if_false() failed: bytes == limit && \22Logic error in thread pool work queue initialization.\\n\22\0A\00", align 1
@.str.3 = private unnamed_addr constant [263 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/thread_pool_common.h:527 halide_abort_if_false() failed: (min_threads <= ((task_parent->task.min_threads * task_parent->active_workers) - task_parent->threads_reserved)) && \22Logic error: thread over commit.\\n\22\0A\00", align 1
@.str.1 = private unnamed_addr constant [15 x i8] c"HL_NUM_THREADS\00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"HL_NUMTHREADS\00", align 1
@_ZN6Halide7Runtime8Internal24custom_do_parallel_tasksE = linkonce local_unnamed_addr global i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)* @halide_default_do_parallel_tasks, align 8
@_ZN6Halide7Runtime8Internal21custom_semaphore_initE = linkonce local_unnamed_addr global i32 (%struct.halide_semaphore_t*, i32)* @halide_default_semaphore_init, align 8
@_ZN6Halide7Runtime8Internal28custom_semaphore_try_acquireE = linkonce local_unnamed_addr global i1 (%struct.halide_semaphore_t*, i32)* @halide_default_semaphore_try_acquire, align 8
@_ZN6Halide7Runtime8Internal24custom_semaphore_releaseE = linkonce local_unnamed_addr global i32 (%struct.halide_semaphore_t*, i32)* @halide_default_semaphore_release, align 8
@llvm.global_dtors = appending global [4 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @halide_thread_pool_cleanup, i8* null }, { i32, void ()*, i8* } { i32 65535, void ()* @halide_trace_cleanup, i8* null }, { i32, void ()*, i8* } { i32 65535, void ()* @halide_cache_cleanup, i8* null }, { i32, void ()*, i8* } { i32 65535, void ()* @halide_profiler_shutdown, i8* null }]
@_ZTVN6Halide7Runtime8Internal15Synchronization22signal_parking_controlE = linkonce_odr unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control8validateERNS2_15validate_actionE to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control12before_sleepEv to i8*), i8* bitcast (i64 (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*, i32, i1)* @_ZN6Halide7Runtime8Internal15Synchronization22signal_parking_control6unparkEib to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control16requeue_callbackERKNS2_15validate_actionEbb to i8*)] }, align 8
@.str.4 = private unnamed_addr constant [38 x i8] c"halide_set_num_threads: must be >= 0.\00", align 1
@_ZN6Halide7Runtime8Internal17custom_get_symbolE = linkonce local_unnamed_addr global i8* (i8*)* @halide_default_get_symbol, align 8
@_ZN6Halide7Runtime8Internal19custom_load_libraryE = linkonce local_unnamed_addr global i8* (i8*)* @halide_default_load_library, align 8
@_ZN6Halide7Runtime8Internal25custom_get_library_symbolE = linkonce local_unnamed_addr global i8* (i8*, i8*)* @halide_default_get_library_symbol, align 8
@_ZN6Halide7Runtime8Internal17halide_gpu_deviceE = linkonce local_unnamed_addr global i32 0, align 4
@_ZN6Halide7Runtime8Internal22halide_gpu_device_lockE = linkonce global i8 0, align 1
@_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE = linkonce local_unnamed_addr global i8 0, align 1
@.str.8 = private unnamed_addr constant [14 x i8] c"HL_GPU_DEVICE\00", align 1
@_ZN6Halide7Runtime8Internal19halide_trace_bufferE = linkonce local_unnamed_addr global %"class.Halide::Runtime::Internal::TraceBuffer"* null, align 8
@_ZN6Halide7Runtime8Internal17halide_trace_fileE = linkonce local_unnamed_addr global i32 -1, align 4
@_ZN6Halide7Runtime8Internal22halide_trace_file_lockE = linkonce global i8 0, align 1
@_ZN6Halide7Runtime8Internal29halide_trace_file_initializedE = linkonce local_unnamed_addr global i8 0, align 1
@_ZN6Halide7Runtime8Internal35halide_trace_file_internally_openedE = linkonce local_unnamed_addr global i8* null, align 8
@_ZN6Halide7Runtime8Internal19halide_custom_traceE = linkonce local_unnamed_addr global i32 (i8*, %struct.halide_trace_event_t*)* @halide_default_trace, align 8
@_ZZ20halide_default_traceE3ids = internal global i32 1, align 4
@.str.32 = private unnamed_addr constant [144 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/tracing.cpp:115 halide_abort_if_false() failed: success && \22Could not write to trace file\22\0A\00", align 1
@.str.31 = private unnamed_addr constant [120 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/tracing.cpp:87 halide_abort_if_false() failed: size <= buffer_size\0A\00", align 1
@.str.1.10 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.2.11 = private unnamed_addr constant [140 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/tracing.cpp:218 halide_abort_if_false() failed: print_bits <= 64 && \22Tracing bad type\22\0A\00", align 1
@__const.halide_default_trace.event_types = private unnamed_addr constant [11 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3.12, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4.13, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.5.14, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.6.15, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.8.16, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.9.17, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i32 0, i32 0)], align 8
@.str.17 = private unnamed_addr constant [2 x i8] c"<\00", align 1
@.str.20 = private unnamed_addr constant [3 x i8] c">)\00", align 1
@.str.18 = private unnamed_addr constant [5 x i8] c">, <\00", align 1
@.str.22 = private unnamed_addr constant [5 x i8] c" = <\00", align 1
@.str.23 = private unnamed_addr constant [4 x i8] c" = \00", align 1
@.str.24 = private unnamed_addr constant [142 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/tracing.cpp:287 halide_abort_if_false() failed: print_bits >= 16 && \22Tracing a bad type\22\0A\00", align 1
@.str.25 = private unnamed_addr constant [2 x i8] c">\00", align 1
@.str.26 = private unnamed_addr constant [9 x i8] c" tag = \22\00", align 1
@.str.27 = private unnamed_addr constant [2 x i8] c"\22\00", align 1
@.str.3.12 = private unnamed_addr constant [5 x i8] c"Load\00", align 1
@.str.4.13 = private unnamed_addr constant [6 x i8] c"Store\00", align 1
@.str.5.14 = private unnamed_addr constant [18 x i8] c"Begin realization\00", align 1
@.str.6.15 = private unnamed_addr constant [16 x i8] c"End realization\00", align 1
@.str.7 = private unnamed_addr constant [8 x i8] c"Produce\00", align 1
@.str.8.16 = private unnamed_addr constant [12 x i8] c"End produce\00", align 1
@.str.9.17 = private unnamed_addr constant [8 x i8] c"Consume\00", align 1
@.str.10 = private unnamed_addr constant [12 x i8] c"End consume\00", align 1
@.str.11 = private unnamed_addr constant [15 x i8] c"Begin pipeline\00", align 1
@.str.12 = private unnamed_addr constant [13 x i8] c"End pipeline\00", align 1
@.str.13 = private unnamed_addr constant [4 x i8] c"Tag\00", align 1
@.str.28 = private unnamed_addr constant [14 x i8] c"HL_TRACE_FILE\00", align 1
@.str.29 = private unnamed_addr constant [3 x i8] c"ab\00", align 1
@.str.30 = private unnamed_addr constant [139 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/tracing.cpp:351 halide_abort_if_false() failed: file && \22Failed to open trace file\\n\22\0A\00", align 1
@_ZN6Halide7Runtime8Internal30pixel_type_to_tiff_sample_typeE = linkonce local_unnamed_addr global [10 x i16] [i16 3, i16 3, i16 1, i16 2, i16 1, i16 2, i16 1, i16 2, i16 1, i16 2], align 2
@_ZN6Halide7Runtime8Internal31pixel_type_to_matlab_class_codeE = linkonce local_unnamed_addr global [10 x i8] c"\07\06\09\08\0B\0A\0D\0C\0F\0E", align 1
@_ZN6Halide7Runtime8Internal30pixel_type_to_matlab_type_codeE = linkonce local_unnamed_addr global [10 x i8] c"\07\09\02\01\04\03\06\05\0D\0C", align 1
@.str.34 = private unnamed_addr constant [51 x i8] c"Bounds query buffer passed to halide_debug_to_file\00", align 1
@.str.1.35 = private unnamed_addr constant [59 x i8] c"Can't debug_to_file a Func with more than four dimensions\0A\00", align 1
@.str.2.36 = private unnamed_addr constant [3 x i8] c"wb\00", align 1
@.str.3.37 = private unnamed_addr constant [6 x i8] c".tiff\00", align 1
@.str.4.38 = private unnamed_addr constant [5 x i8] c".tif\00", align 1
@.str.5.39 = private unnamed_addr constant [5 x i8] c".mat\00", align 1
@__const.halide_debug_to_file.header = private unnamed_addr constant [129 x i8] c"MATLAB 5.0 MAT-file, produced by Halide                                                                                     \00\01IM\00", align 1
@.str.6.40 = private unnamed_addr constant [53 x i8] c"Can't debug_to_file to a .mat file greater than 4GB\0A\00", align 1
@_ZN6Halide7Runtime8Internal16memoization_lockE = linkonce global %struct.halide_mutex zeroinitializer, align 8
@_ZN6Halide7Runtime8Internal13cache_entriesE = linkonce global [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*] zeroinitializer, align 8
@_ZN6Halide7Runtime8Internal18most_recently_usedE = linkonce local_unnamed_addr global %"struct.Halide::Runtime::Internal::CacheEntry"* null, align 8
@_ZN6Halide7Runtime8Internal19least_recently_usedE = linkonce local_unnamed_addr global %"struct.Halide::Runtime::Internal::CacheEntry"* null, align 8
@_ZN6Halide7Runtime8Internal14max_cache_sizeE = linkonce local_unnamed_addr global i64 1048576, align 8
@_ZN6Halide7Runtime8Internal18current_cache_sizeE = linkonce local_unnamed_addr global i64 0, align 8
@.str.2.42 = private unnamed_addr constant [126 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/cache.cpp:284 halide_abort_if_false() failed: prev_hash_entry != nullptr\0A\00", align 1
@.str.3.43 = private unnamed_addr constant [129 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/cache.cpp:373 halide_abort_if_false() failed: entry->more_recent != nullptr\0A\00", align 1
@.str.4.44 = private unnamed_addr constant [128 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/cache.cpp:377 halide_abort_if_false() failed: least_recently_used == entry\0A\00", align 1
@.str.5.45 = private unnamed_addr constant [129 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/cache.cpp:380 halide_abort_if_false() failed: entry->more_recent != nullptr\0A\00", align 1
@.str.9.46 = private unnamed_addr constant [122 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/cache.cpp:472 halide_abort_if_false() failed: no_host_pointers_equal\0A\00", align 1
@.str.12.47 = private unnamed_addr constant [123 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/cache.cpp:550 halide_abort_if_false() failed: entry->in_use_count > 0\0A\00", align 1
@.str.50 = private unnamed_addr constant [10 x i8] c"<nullptr>\00", align 1
@.str.1.57 = private unnamed_addr constant [5 x i8] c"-nan\00", align 1
@.str.2.58 = private unnamed_addr constant [4 x i8] c"nan\00", align 1
@.str.3.59 = private unnamed_addr constant [5 x i8] c"-inf\00", align 1
@.str.4.60 = private unnamed_addr constant [4 x i8] c"inf\00", align 1
@.str.5.61 = private unnamed_addr constant [14 x i8] c"-0.000000e+00\00", align 1
@.str.6.62 = private unnamed_addr constant [13 x i8] c"0.000000e+00\00", align 1
@.str.7.63 = private unnamed_addr constant [10 x i8] c"-0.000000\00", align 1
@.str.8.64 = private unnamed_addr constant [9 x i8] c"0.000000\00", align 1
@.str.9.65 = private unnamed_addr constant [2 x i8] c"-\00", align 1
@.str.11.67 = private unnamed_addr constant [3 x i8] c"e+\00", align 1
@.str.12.68 = private unnamed_addr constant [3 x i8] c"e-\00", align 1
@.str.13.71 = private unnamed_addr constant [17 x i8] c"0123456789abcdef\00", align 1
@.str.18.72 = private unnamed_addr constant [14 x i8] c"bad_type_code\00", align 1
@.str.17.73 = private unnamed_addr constant [7 x i8] c"handle\00", align 1
@.str.16.74 = private unnamed_addr constant [6 x i8] c"float\00", align 1
@.str.15.75 = private unnamed_addr constant [5 x i8] c"uint\00", align 1
@.str.14.76 = private unnamed_addr constant [4 x i8] c"int\00", align 1
@.str.19.77 = private unnamed_addr constant [2 x i8] c"x\00", align 1
@.str.20.78 = private unnamed_addr constant [8 x i8] c"nullptr\00", align 1
@.str.21.79 = private unnamed_addr constant [8 x i8] c"buffer(\00", align 1
@.str.23.82 = private unnamed_addr constant [4 x i8] c", {\00", align 1
@.str.24.83 = private unnamed_addr constant [2 x i8] c"}\00", align 1
@_ZN6Halide7Runtime8Internal36halide_reuse_device_allocations_flagE = linkonce local_unnamed_addr global i8 1, align 1
@_ZN6Halide7Runtime8Internal21allocation_pools_lockE = linkonce global %struct.halide_mutex zeroinitializer, align 8
@_ZN6Halide7Runtime8Internal23device_allocation_poolsE = linkonce local_unnamed_addr global %struct.halide_device_allocation_pool* null, align 8
@_ZN6Halide7Runtime8Internal17device_copy_mutexE = linkonce global %struct.halide_mutex zeroinitializer, align 8
@.str.6.88 = private unnamed_addr constant [20 x i8] c"halide_copy_to_host\00", align 1
@.str.7.89 = private unnamed_addr constant [22 x i8] c"halide_copy_to_device\00", align 1
@.str.9.90 = private unnamed_addr constant [61 x i8] c"halide_copy_to_device does not support switching interfaces\0A\00", align 1
@.str.17.91 = private unnamed_addr constant [21 x i8] c"halide_device_malloc\00", align 1
@.str.20.92 = private unnamed_addr constant [59 x i8] c"halide_device_malloc doesn't support switching interfaces\0A\00", align 1
@.str.16.93 = private unnamed_addr constant [19 x i8] c"halide_device_sync\00", align 1
@.str.21.96 = private unnamed_addr constant [19 x i8] c"halide_device_free\00", align 1
@.str.22.97 = private unnamed_addr constant [127 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/device_interface.cpp:252 halide_abort_if_false() failed: buf->device == 0\0A\00", align 1
@.str.23.98 = private unnamed_addr constant [30 x i8] c"halide_device_and_host_malloc\00", align 1
@.str.25.99 = private unnamed_addr constant [68 x i8] c"halide_device_and_host_malloc doesn't support switching interfaces\0A\00", align 1
@.str.26.100 = private unnamed_addr constant [42 x i8] c"allocating host and device memory failed\0A\00", align 1
@.str.27.101 = private unnamed_addr constant [28 x i8] c"halide_device_and_host_free\00", align 1
@.str.28.102 = private unnamed_addr constant [127 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/device_interface.cpp:317 halide_abort_if_false() failed: buf->device == 0\0A\00", align 1
@.str.29.103 = private unnamed_addr constant [38 x i8] c"halide_default_device_and_host_malloc\00", align 1
@.str.30.104 = private unnamed_addr constant [36 x i8] c"halide_default_device_and_host_free\00", align 1
@.str.31.105 = private unnamed_addr constant [26 x i8] c"halide_device_wrap_native\00", align 1
@.str.32.106 = private unnamed_addr constant [64 x i8] c"halide_device_wrap_native doesn't support switching interfaces\0A\00", align 1
@.str.33.107 = private unnamed_addr constant [28 x i8] c"halide_device_detach_native\00", align 1
@.str.34.108 = private unnamed_addr constant [127 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/device_interface.cpp:403 halide_abort_if_false() failed: buf->device == 0\0A\00", align 1
@.str.35 = private unnamed_addr constant [36 x i8] c"halide_default_device_detach_native\00", align 1
@.str.41 = private unnamed_addr constant [64 x i8] c"halide_buffer_copy does not support switching device interfaces\00", align 1
@.str.58 = private unnamed_addr constant [44 x i8] c"device_interface does not support cropping\0A\00", align 1
@.str.59 = private unnamed_addr constant [43 x i8] c"device_interface does not support slicing\0A\00", align 1
@.str.60 = private unnamed_addr constant [52 x i8] c"destination buffer already has a device allocation\0A\00", align 1
@.str.61 = private unnamed_addr constant [48 x i8] c"src and dst must have identical dimensionality\0A\00", align 1
@.str.64 = private unnamed_addr constant [52 x i8] c"dst must have exactly one fewer dimension than src\0A\00", align 1
@.str.111 = private unnamed_addr constant [41 x i8] c"Bounds inference call to external stage \00", align 1
@.str.1.112 = private unnamed_addr constant [27 x i8] c" returned non-zero value: \00", align 1
@.str.2.113 = private unnamed_addr constant [24 x i8] c"Call to external stage \00", align 1
@.str.3.114 = private unnamed_addr constant [18 x i8] c"Bounds given for \00", align 1
@.str.4.115 = private unnamed_addr constant [5 x i8] c" in \00", align 1
@.str.5.116 = private unnamed_addr constant [8 x i8] c" (from \00", align 1
@.str.6.117 = private unnamed_addr constant [5 x i8] c" to \00", align 1
@.str.7.118 = private unnamed_addr constant [38 x i8] c") do not cover required region (from \00", align 1
@.str.8.119 = private unnamed_addr constant [2 x i8] c")\00", align 1
@.str.9.120 = private unnamed_addr constant [11 x i8] c" has type \00", align 1
@.str.10.121 = private unnamed_addr constant [38 x i8] c" but type of the buffer passed in is \00", align 1
@.str.11.122 = private unnamed_addr constant [31 x i8] c" requires a buffer of exactly \00", align 1
@.str.12.123 = private unnamed_addr constant [43 x i8] c" dimensions, but the buffer passed in has \00", align 1
@.str.13.124 = private unnamed_addr constant [12 x i8] c" dimensions\00", align 1
@.str.14.125 = private unnamed_addr constant [17 x i8] c" is accessed at \00", align 1
@.str.15.126 = private unnamed_addr constant [28 x i8] c", which is before the min (\00", align 1
@.str.16.127 = private unnamed_addr constant [16 x i8] c") in dimension \00", align 1
@.str.17.128 = private unnamed_addr constant [28 x i8] c", which is beyond the max (\00", align 1
@.str.18.129 = private unnamed_addr constant [29 x i8] c"Total allocation for buffer \00", align 1
@.str.19.130 = private unnamed_addr constant [5 x i8] c" is \00", align 1
@.str.20.131 = private unnamed_addr constant [37 x i8] c", which exceeds the maximum size of \00", align 1
@.str.21.132 = private unnamed_addr constant [24 x i8] c"The extents for buffer \00", align 1
@.str.22.133 = private unnamed_addr constant [12 x i8] c" dimension \00", align 1
@.str.23.134 = private unnamed_addr constant [15 x i8] c" is negative (\00", align 1
@.str.24.135 = private unnamed_addr constant [31 x i8] c"Product of extents for buffer \00", align 1
@.str.25.136 = private unnamed_addr constant [29 x i8] c"Applying the constraints on \00", align 1
@.str.26.137 = private unnamed_addr constant [54 x i8] c" to the required region made it smaller in dimension \00", align 1
@.str.27.138 = private unnamed_addr constant [3 x i8] c". \00", align 1
@.str.28.139 = private unnamed_addr constant [16 x i8] c"Required size: \00", align 1
@.str.29.140 = private unnamed_addr constant [19 x i8] c"Constrained size: \00", align 1
@.str.30.141 = private unnamed_addr constant [2 x i8] c".\00", align 1
@.str.31.142 = private unnamed_addr constant [22 x i8] c"Constraint violated: \00", align 1
@.str.32.143 = private unnamed_addr constant [3 x i8] c" (\00", align 1
@.str.33.144 = private unnamed_addr constant [6 x i8] c") == \00", align 1
@.str.34.145 = private unnamed_addr constant [11 x i8] c"Parameter \00", align 1
@.str.35.146 = private unnamed_addr constant [23 x i8] c" but must be at least \00", align 1
@.str.36 = private unnamed_addr constant [22 x i8] c" but must be at most \00", align 1
@.str.37 = private unnamed_addr constant [47 x i8] c"Out of memory (halide_malloc returned nullptr)\00", align 1
@.str.38 = private unnamed_addr constant [17 x i8] c"Buffer argument \00", align 1
@.str.39 = private unnamed_addr constant [12 x i8] c" is nullptr\00", align 1
@.str.40 = private unnamed_addr constant [25 x i8] c"Failed to dump function \00", align 1
@.str.41.147 = private unnamed_addr constant [10 x i8] c" to file \00", align 1
@.str.42 = private unnamed_addr constant [13 x i8] c" with error \00", align 1
@.str.43 = private unnamed_addr constant [21 x i8] c"The host pointer of \00", align 1
@.str.44 = private unnamed_addr constant [22 x i8] c" is not aligned to a \00", align 1
@.str.45 = private unnamed_addr constant [17 x i8] c" bytes boundary.\00", align 1
@.str.46 = private unnamed_addr constant [12 x i8] c"The buffer \00", align 1
@.str.47 = private unnamed_addr constant [53 x i8] c" is dirty on device, but this pipeline was compiled \00", align 1
@.str.48 = private unnamed_addr constant [43 x i8] c"with no support for device to host copies.\00", align 1
@.str.49 = private unnamed_addr constant [55 x i8] c" is null, but the pipeline will access it on the host.\00", align 1
@.str.50.148 = private unnamed_addr constant [30 x i8] c"The folded storage dimension \00", align 1
@.str.51 = private unnamed_addr constant [5 x i8] c" of \00", align 1
@.str.52 = private unnamed_addr constant [36 x i8] c" was accessed out of order by loop \00", align 1
@.str.53 = private unnamed_addr constant [23 x i8] c"Cannot fold dimension \00", align 1
@.str.54 = private unnamed_addr constant [36 x i8] c" because an extern stage accesses [\00", align 1
@.str.55 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.56 = private unnamed_addr constant [3 x i8] c"],\00", align 1
@.str.57 = private unnamed_addr constant [47 x i8] c" which is outside the range currently valid: [\00", align 1
@.str.58.149 = private unnamed_addr constant [3 x i8] c"].\00", align 1
@.str.59.150 = private unnamed_addr constant [47 x i8] c" which wraps around the boundary of the fold, \00", align 1
@.str.60.151 = private unnamed_addr constant [30 x i8] c"which occurs at multiples of \00", align 1
@.str.61.152 = private unnamed_addr constant [18 x i8] c"The fold factor (\00", align 1
@.str.62 = private unnamed_addr constant [16 x i8] c") of dimension \00", align 1
@.str.63 = private unnamed_addr constant [61 x i8] c" is too small to store the required region accessed by loop \00", align 1
@.str.64.153 = private unnamed_addr constant [3 x i8] c").\00", align 1
@.str.65 = private unnamed_addr constant [22 x i8] c"Requirement Failed: (\00", align 1
@.str.66 = private unnamed_addr constant [3 x i8] c") \00", align 1
@.str.67 = private unnamed_addr constant [59 x i8] c"A schedule specialized with specialize_fail() was chosen: \00", align 1
@.str.68 = private unnamed_addr constant [55 x i8] c"Buffer has a non-zero device but no device interface.\0A\00", align 1
@.str.69 = private unnamed_addr constant [57 x i8] c"Buffer has a non-null device_interface but device is 0.\0A\00", align 1
@.str.70 = private unnamed_addr constant [49 x i8] c"Buffer has both host and device dirty bits set.\0A\00", align 1
@.str.71 = private unnamed_addr constant [26 x i8] c"Buffer pointer passed to \00", align 1
@.str.72 = private unnamed_addr constant [11 x i8] c" is null.\0A\00", align 1
@.str.73 = private unnamed_addr constant [32 x i8] c"The explicit allocation bound (\00", align 1
@.str.74 = private unnamed_addr constant [45 x i8] c" is too small to store the required region (\00", align 1
@.str.75 = private unnamed_addr constant [77 x i8] c"Buffer could not be cropped (runtime error or unimplemented device option).\0A\00", align 1
@.str.29.163 = private unnamed_addr constant [35 x i8] c"Printer buffer allocation failed.\0A\00", align 1
@.str.7.164 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.8.165 = private unnamed_addr constant [14 x i8] c" total time: \00", align 1
@.str.9.166 = private unnamed_addr constant [4 x i8] c" ms\00", align 1
@.str.10.167 = private unnamed_addr constant [12 x i8] c"  samples: \00", align 1
@.str.11.168 = private unnamed_addr constant [9 x i8] c"  runs: \00", align 1
@.str.12.169 = private unnamed_addr constant [13 x i8] c"  time/run: \00", align 1
@.str.13.170 = private unnamed_addr constant [5 x i8] c" ms\0A\00", align 1
@.str.14.171 = private unnamed_addr constant [24 x i8] c" average threads used: \00", align 1
@.str.15.172 = private unnamed_addr constant [20 x i8] c" heap allocations: \00", align 1
@.str.16.173 = private unnamed_addr constant [20 x i8] c"  peak heap usage: \00", align 1
@.str.17.174 = private unnamed_addr constant [8 x i8] c" bytes\0A\00", align 1
@.str.18.175 = private unnamed_addr constant [3 x i8] c"  \00", align 1
@.str.19.176 = private unnamed_addr constant [3 x i8] c": \00", align 1
@.str.20.177 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.21.178 = private unnamed_addr constant [3 x i8] c"ms\00", align 1
@.str.22.179 = private unnamed_addr constant [2 x i8] c"(\00", align 1
@.str.23.180 = private unnamed_addr constant [3 x i8] c"%)\00", align 1
@.str.24.181 = private unnamed_addr constant [10 x i8] c"threads: \00", align 1
@.str.25.182 = private unnamed_addr constant [8 x i8] c" peak: \00", align 1
@.str.26.183 = private unnamed_addr constant [7 x i8] c" num: \00", align 1
@.str.27.184 = private unnamed_addr constant [7 x i8] c" avg: \00", align 1
@.str.28.185 = private unnamed_addr constant [9 x i8] c" stack: \00", align 1
@_ZZ25halide_profiler_get_stateE1s = internal global %struct.halide_profiler_state { %struct.halide_mutex zeroinitializer, i32 1, i32 0, i32 0, i32 0, %struct.halide_profiler_pipeline_stats* null, void (i32*, i32*)* null, %struct.halide_thread* null }, align 8
@.str.186 = private unnamed_addr constant [128 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:246 halide_abort_if_false() failed: p_stats != nullptr\0A\00", align 1
@.str.1.187 = private unnamed_addr constant [128 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:273 halide_abort_if_false() failed: p_stats != nullptr\0A\00", align 1
@.str.2.188 = private unnamed_addr constant [122 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:274 halide_abort_if_false() failed: func_id >= 0\0A\00", align 1
@.str.3.189 = private unnamed_addr constant [138 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:275 halide_abort_if_false() failed: func_id < p_stats->num_funcs\0A\00", align 1
@.str.4.190 = private unnamed_addr constant [128 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:309 halide_abort_if_false() failed: p_stats != nullptr\0A\00", align 1
@.str.5.191 = private unnamed_addr constant [122 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:310 halide_abort_if_false() failed: func_id >= 0\0A\00", align 1
@.str.6.192 = private unnamed_addr constant [138 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:311 halide_abort_if_false() failed: func_id < p_stats->num_funcs\0A\00", align 1
@_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE = linkonce local_unnamed_addr global i32 (i32, i64*)* @halide_default_can_use_target_features, align 8
@_ZN6Halide7Runtime8Internal36halide_cpu_features_initialized_lockE = linkonce global %struct.halide_mutex zeroinitializer, align 8
@_ZN6Halide7Runtime8Internal31halide_cpu_features_initializedE = linkonce local_unnamed_addr global i8 0, align 1
@_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE = linkonce global [4 x i64] zeroinitializer, align 8
@.str.197 = private unnamed_addr constant [81 x i8] c"Internal error: wrong structure size passed to halide_can_use_target_features()\0A\00", align 1
@0 = private constant [4 x i64*] zeroinitializer
@str = private constant [6 x i8] c"input\00", align 32
@1 = private constant [4 x i64*] zeroinitializer
@str.200 = private constant [7 x i8] c"blur_y\00", align 32
@2 = private constant [2 x %struct.halide_filter_argument_t] [%struct.halide_filter_argument_t { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str, i32 0, i32 0), i32 1, i32 2, %struct.halide_type_t { i8 1, i8 16, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** getelementptr inbounds ([4 x i64*], [4 x i64*]* @0, i32 0, i32 0) }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str.200, i32 0, i32 0), i32 2, i32 2, %struct.halide_type_t { i8 1, i8 16, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** getelementptr inbounds ([4 x i64*], [4 x i64*]* @1, i32 0, i32 0) }]
@str.201 = private constant [38 x i8] c"arm-64-osx-no_asserts-no_bounds_query\00", align 32
@str.202 = private constant [8 x i8] c"blur5x5\00", align 32
@blur5x5_metadata_storage = private constant %struct.halide_filter_metadata_t { i32 1, i32 2, %struct.halide_filter_argument_t* getelementptr inbounds ([2 x %struct.halide_filter_argument_t], [2 x %struct.halide_filter_argument_t]* @2, i32 0, i32 0), i8* getelementptr inbounds ([38 x i8], [38 x i8]* @str.201, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str.202, i32 0, i32 0) }
@switch.table.halide_type_to_string = private unnamed_addr constant [4 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14.76, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.15.75, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.16.74, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.17.73, i64 0, i64 0)], align 8

; Function Attrs: nounwind mustprogress
define weak i8* @halide_default_malloc(i8* %user_context, i64 %x) #0 {
entry:
  %add = add i64 %x, 32
  %call1 = tail call i8* @malloc(i64 %add) #14
  %cmp = icmp eq i8* %call1, null
  br i1 %cmp, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %0 = ptrtoint i8* %call1 to i64
  %sub = add i64 %0, 39
  %and = and i64 %sub, -32
  %1 = inttoptr i64 %and to i8*
  %2 = inttoptr i64 %and to i8**
  %arrayidx = getelementptr inbounds i8*, i8** %2, i64 -1
  store i8* %call1, i8** %arrayidx, align 8, !tbaa !14
  br label %cleanup

cleanup:                                          ; preds = %if.end, %entry
  %retval.0 = phi i8* [ %1, %if.end ], [ null, %entry ]
  ret i8* %retval.0
}

declare i8* @malloc(i64) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_default_free(i8* %user_context, i8* %ptr) #0 {
entry:
  %arrayidx = getelementptr inbounds i8, i8* %ptr, i64 -8
  %0 = bitcast i8* %arrayidx to i8**
  %1 = load i8*, i8** %0, align 8, !tbaa !14
  tail call void @free(i8* %1) #14
  ret void
}

declare void @free(i8*) local_unnamed_addr #1

; Function Attrs: nounwind willreturn mustprogress
define weak i8* (i8*, i64)* @halide_set_custom_malloc(i8* (i8*, i64)* %user_malloc) local_unnamed_addr #2 {
entry:
  %0 = load i8* (i8*, i64)*, i8* (i8*, i64)** @_ZN6Halide7Runtime8Internal13custom_mallocE, align 8, !tbaa !14
  store i8* (i8*, i64)* %user_malloc, i8* (i8*, i64)** @_ZN6Halide7Runtime8Internal13custom_mallocE, align 8, !tbaa !14
  ret i8* (i8*, i64)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak void (i8*, i8*)* @halide_set_custom_free(void (i8*, i8*)* %user_free) local_unnamed_addr #2 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal11custom_freeE, align 8, !tbaa !14
  store void (i8*, i8*)* %user_free, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal11custom_freeE, align 8, !tbaa !14
  ret void (i8*, i8*)* %0
}

; Function Attrs: nounwind mustprogress
define weak noalias i8* @halide_malloc(i8* %user_context, i64 %x) local_unnamed_addr #0 {
entry:
  %0 = load i8* (i8*, i64)*, i8* (i8*, i64)** @_ZN6Halide7Runtime8Internal13custom_mallocE, align 8, !tbaa !14
  %call = tail call i8* %0(i8* %user_context, i64 %x) #14
  ret i8* %call
}

; Function Attrs: nounwind mustprogress
define weak void @halide_free(i8* %user_context, i8* %ptr) local_unnamed_addr #0 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal11custom_freeE, align 8, !tbaa !14
  tail call void %0(i8* %user_context, i8* %ptr) #14
  ret void
}

; Function Attrs: nounwind mustprogress
define weak void @halide_default_error(i8* %user_context, i8* %msg) #0 {
entry:
  %buf = alloca [4096 x i8], align 1
  %0 = getelementptr inbounds [4096 x i8], [4096 x i8]* %buf, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %0) #11
  %add.ptr = getelementptr inbounds [4096 x i8], [4096 x i8]* %buf, i64 0, i64 4094
  %call = call i8* @halide_string_to_string(i8* nonnull %0, i8* nonnull %add.ptr, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0)) #14
  %add.ptr2 = getelementptr inbounds i8, i8* %call, i64 4094
  %call3 = call i8* @halide_string_to_string(i8* %call, i8* nonnull %add.ptr2, i8* %msg) #14
  %arrayidx = getelementptr inbounds i8, i8* %call3, i64 -1
  %1 = load i8, i8* %arrayidx, align 1, !tbaa !18
  %cmp.not = icmp eq i8 %1, 10
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i8 10, i8* %call3, align 1, !tbaa !18
  %arrayidx5 = getelementptr inbounds i8, i8* %call3, i64 1
  store i8 0, i8* %arrayidx5, align 1, !tbaa !18
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %dst.0 = phi i8* [ %arrayidx5, %if.then ], [ %call3, %entry ]
  %sub.ptr.lhs.cast = ptrtoint i8* %dst.0 to i64
  %sub.ptr.rhs.cast = ptrtoint [4096 x i8]* %buf to i64
  %sub.ptr.sub = sub i64 1, %sub.ptr.rhs.cast
  %add = add i64 %sub.ptr.sub, %sub.ptr.lhs.cast
  %call9 = call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %0, i64 %add) #14
  call void @halide_print(i8* %user_context, i8* nonnull %0) #14
  call void @abort() #14
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %0) #11
  ret void
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

declare void @abort() local_unnamed_addr #1

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind mustprogress
define weak void @halide_error(i8* %user_context, i8* %msg) local_unnamed_addr #0 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal13error_handlerE, align 8, !tbaa !14
  tail call void %0(i8* %user_context, i8* %msg) #14
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void (i8*, i8*)* @halide_set_error_handler(void (i8*, i8*)* %handler) local_unnamed_addr #2 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal13error_handlerE, align 8, !tbaa !14
  store void (i8*, i8*)* %handler, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal13error_handlerE, align 8, !tbaa !14
  ret void (i8*, i8*)* %0
}

; Function Attrs: nounwind mustprogress
define weak void @halide_print(i8* %user_context, i8* %msg) local_unnamed_addr #0 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal12custom_printE, align 8, !tbaa !14
  tail call void %0(i8* %user_context, i8* %msg) #14
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void (i8*, i8*)* @halide_set_custom_print(void (i8*, i8*)* %print) local_unnamed_addr #2 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal12custom_printE, align 8, !tbaa !14
  store void (i8*, i8*)* %print, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal12custom_printE, align 8, !tbaa !14
  ret void (i8*, i8*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_start_clock(i8* %user_context) local_unnamed_addr #0 {
entry:
  %0 = load i8, i8* @_ZN6Halide7Runtime8Internal29halide_reference_clock_initedE, align 1, !tbaa !19, !range !21
  %tobool.not = icmp eq i8 %0, 0
  br i1 %tobool.not, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = tail call i32 @mach_timebase_info(%struct.mach_timebase_info* nonnull @_ZN6Halide7Runtime8Internal20halide_timebase_infoE) #14
  %call1 = tail call i64 @mach_absolute_time() #14
  store i64 %call1, i64* @_ZN6Halide7Runtime8Internal22halide_reference_clockE, align 8, !tbaa !22
  store i8 1, i8* @_ZN6Halide7Runtime8Internal29halide_reference_clock_initedE, align 1, !tbaa !19
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i32 0
}

declare i32 @mach_timebase_info(%struct.mach_timebase_info*) local_unnamed_addr #1

declare i64 @mach_absolute_time() local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i64 @halide_current_time_ns(i8* %user_context) local_unnamed_addr #0 {
entry:
  %call = tail call i64 @mach_absolute_time() #14
  %0 = load i64, i64* @_ZN6Halide7Runtime8Internal22halide_reference_clockE, align 8, !tbaa !22
  %sub = sub i64 %call, %0
  %1 = load i32, i32* getelementptr inbounds (%struct.mach_timebase_info, %struct.mach_timebase_info* @_ZN6Halide7Runtime8Internal20halide_timebase_infoE, i64 0, i32 0), align 4, !tbaa !24
  %conv = zext i32 %1 to i64
  %mul = mul i64 %sub, %conv
  %2 = load i32, i32* getelementptr inbounds (%struct.mach_timebase_info, %struct.mach_timebase_info* @_ZN6Halide7Runtime8Internal20halide_timebase_infoE, i64 0, i32 1), align 4, !tbaa !27
  %conv1 = zext i32 %2 to i64
  %div = udiv i64 %mul, %conv1
  ret i64 %div
}

; Function Attrs: nounwind mustprogress
define weak void @halide_sleep_ms(i8* %user_context, i32 %ms) local_unnamed_addr #0 {
entry:
  %mul = mul nsw i32 %ms, 1000
  %call = tail call i32 @usleep(i32 %mul) #14
  ret void
}

declare i32 @usleep(i32) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_default_print(i8* %user_context, i8* %str) #0 {
entry:
  %call = tail call i64 @strlen(i8* %str) #14
  %call1 = tail call i64 @write(i32 1, i8* %str, i64 %call) #14
  ret void
}

declare i64 @strlen(i8*) local_unnamed_addr #1

declare i64 @write(i32, i8*, i64) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i32 @halide_host_cpu_count() local_unnamed_addr #0 {
entry:
  %call = tail call i64 @sysconf(i32 58) #14
  %conv = trunc i64 %call to i32
  ret i32 %conv
}

declare i64 @sysconf(i32) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_thread_yield() local_unnamed_addr #0 {
entry:
  %call = tail call i32 @swtch_pri(i32 0) #14
  ret void
}

declare i32 @swtch_pri(i32) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_task(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %idx, i8* %closure) #0 {
entry:
  %call = tail call i32 %f(i8* %user_context, i32 %idx, i8* %closure) #14
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_loop_task(i8* %user_context, i32 (i8*, i32, i32, i8*, i8*)* %f, i32 %min, i32 %extent, i8* %closure, i8* %task_parent) #0 {
entry:
  %call = tail call i32 %f(i8* %user_context, i32 %min, i32 %extent, i8* %closure, i8* %task_parent) #14
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_par_for(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %min, i32 %size, i8* %closure) #0 {
entry:
  %job = alloca %"struct.Halide::Runtime::Internal::work", align 8
  %cmp = icmp slt i32 %size, 1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %0 = bitcast %"struct.Halide::Runtime::Internal::work"* %job to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %0) #11
  %fn = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 0
  store i32 (i8*, i32, i32, i8*, i8*)* null, i32 (i8*, i32, i32, i8*, i8*)** %fn, align 8, !tbaa !28
  %min2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 5
  store i32 %min, i32* %min2, align 4, !tbaa !31
  %extent = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 6
  store i32 %size, i32* %extent, align 8, !tbaa !32
  %serial = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 8
  store i8 0, i8* %serial, align 8, !tbaa !33
  %semaphores = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 3
  store %struct.halide_semaphore_acquire_t* null, %struct.halide_semaphore_acquire_t** %semaphores, align 8, !tbaa !34
  %num_semaphores = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 4
  store i32 0, i32* %num_semaphores, align 8, !tbaa !35
  %closure8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 1
  store i8* %closure, i8** %closure8, align 8, !tbaa !36
  %min_threads = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 7
  store i32 0, i32* %min_threads, align 4, !tbaa !37
  %name = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 2
  store i8* null, i8** %name, align 8, !tbaa !38
  %task_fn = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 1
  store i32 (i8*, i32, i8*)* %f, i32 (i8*, i32, i8*)** %task_fn, align 8, !tbaa !39
  %user_context11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 7
  store i8* %user_context, i8** %user_context11, align 8, !tbaa !40
  %exit_status = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 9
  %active_workers = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 8
  %1 = bitcast i32* %active_workers to <2 x i32>*
  store <2 x i32> zeroinitializer, <2 x i32>* %1, align 8, !tbaa !41
  %next_semaphore = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 10
  store i32 0, i32* %next_semaphore, align 8, !tbaa !42
  %owner_is_sleeping = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 11
  store i8 0, i8* %owner_is_sleeping, align 4, !tbaa !43
  %siblings = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 3
  store %"struct.Halide::Runtime::Internal::work"* %job, %"struct.Halide::Runtime::Internal::work"** %siblings, align 8, !tbaa !44
  %sibling_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 4
  store i32 0, i32* %sibling_count, align 8, !tbaa !45
  %parent_job = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 5
  store %"struct.Halide::Runtime::Internal::work"* null, %"struct.Halide::Runtime::Internal::work"** %parent_job, align 8, !tbaa !46
  call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #15
  call void @_ZN6Halide7Runtime8Internal27enqueue_work_already_lockedEiPNS1_4workES3_(i32 1, %"struct.Halide::Runtime::Internal::work"* nonnull %job, %"struct.Halide::Runtime::Internal::work"* null) #15
  call void @_ZN6Halide7Runtime8Internal28worker_thread_already_lockedEPNS1_4workE(%"struct.Halide::Runtime::Internal::work"* nonnull %job) #15
  call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #15
  %2 = load i32, i32* %exit_status, align 4, !tbaa !47
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %0) #11
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i32 [ %2, %if.end ], [ 0, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind
define weak void @halide_mutex_lock(%struct.halide_mutex* %mutex) local_unnamed_addr #4 {
entry:
  %control.i.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", align 8
  %state.i = getelementptr %struct.halide_mutex, %struct.halide_mutex* %mutex, i64 0, i32 0, i64 0
  %0 = cmpxchg weak i64* %state.i, i64 0, i64 1 acquire monotonic
  %1 = extractvalue { i64, i1 } %0, 1
  br i1 %1, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex4lockEv.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %2 = load atomic i64, i64* %state.i monotonic, align 8
  %3 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i to i8*
  %4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0, i32 0
  %lock_state2.i.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 1
  %5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0
  %6 = ptrtoint %struct.halide_mutex* %mutex to i64
  br label %while.cond.outer.i.i

while.cond.outer.i.i:                             ; preds = %while.cond.outer.i.i.backedge, %if.then.i
  %expected.0.ph.i.i = phi i64 [ %2, %if.then.i ], [ %expected.0.ph.i.i.be, %while.cond.outer.i.i.backedge ]
  %spinner.sroa.0.0.ph.i.i = phi i32 [ 40, %if.then.i ], [ %spinner.sroa.0.0.ph.i.i.be, %while.cond.outer.i.i.backedge ]
  %and55.i.i = and i64 %expected.0.ph.i.i, 1
  %tobool.not56.i.i = icmp eq i64 %and55.i.i, 0
  br i1 %tobool.not56.i.i, label %if.then.i.i, label %if.end4.i.i

if.then.i.i:                                      ; preds = %while.cond.outer.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i
  %expected.057.i.i = phi i64 [ %9, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i ], [ %expected.0.ph.i.i, %while.cond.outer.i.i ]
  %or.i.i = or i64 %expected.057.i.i, 1
  %7 = cmpxchg weak i64* %state.i, i64 %expected.057.i.i, i64 %or.i.i acquire monotonic
  %8 = extractvalue { i64, i1 } %7, 1
  br i1 %8, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex4lockEv.exit, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i: ; preds = %if.then.i.i
  %9 = extractvalue { i64, i1 } %7, 0
  %and.i.i = and i64 %9, 1
  %tobool.not.i.i = icmp eq i64 %and.i.i, 0
  br i1 %tobool.not.i.i, label %if.then.i.i, label %if.end4.i.i.loopexit

if.end4.i.i.loopexit:                             ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i
  %10 = extractvalue { i64, i1 } %7, 0
  br label %if.end4.i.i

if.end4.i.i:                                      ; preds = %if.end4.i.i.loopexit, %while.cond.outer.i.i
  %expected.0.lcssa.i.i = phi i64 [ %expected.0.ph.i.i, %while.cond.outer.i.i ], [ %10, %if.end4.i.i.loopexit ]
  %cmp.i.i.i = icmp sgt i32 %spinner.sroa.0.0.ph.i.i, 0
  br i1 %cmp.i.i.i, label %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i, label %if.end8.i.i

_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i: ; preds = %if.end4.i.i
  %cmp4.i.not.i.i = icmp eq i32 %spinner.sroa.0.0.ph.i.i, 1
  br i1 %cmp4.i.not.i.i, label %if.end8.i.i, label %if.then6.i.i

if.then6.i.i:                                     ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i
  %dec.i.i.i = add nsw i32 %spinner.sroa.0.0.ph.i.i, -1
  call void @halide_thread_yield() #14
  %11 = load atomic i64, i64* %state.i monotonic, align 8
  br label %while.cond.outer.i.i.backedge

if.end8.i.i:                                      ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i, %if.end4.i.i
  %spinner.sroa.0.152.i.i = phi i32 [ 0, %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i ], [ %spinner.sroa.0.0.ph.i.i, %if.end4.i.i ]
  %and9.i.i = and i64 %expected.0.lcssa.i.i, 2
  %cmp.i.i = icmp eq i64 %and9.i.i, 0
  br i1 %cmp.i.i, label %if.then10.i.i, label %if.end19.i.i

if.then10.i.i:                                    ; preds = %if.end8.i.i
  %or12.i.i = or i64 %expected.0.lcssa.i.i, 2
  %12 = cmpxchg weak i64* %state.i, i64 %expected.0.lcssa.i.i, i64 %or12.i.i monotonic monotonic
  %13 = extractvalue { i64, i1 } %12, 1
  br i1 %13, label %if.end19.i.i, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i: ; preds = %if.then10.i.i
  %14 = extractvalue { i64, i1 } %12, 0
  br label %while.cond.outer.i.i.backedge

if.end19.i.i:                                     ; preds = %if.then10.i.i, %if.end8.i.i
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %3) #11
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8, !tbaa !48
  store i64* %state.i, i64** %lock_state2.i.i.i, align 8, !tbaa !50
  %call21.i.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control4parkEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %5, i64 %6) #14
  %cmp22.i.i = icmp eq i64 %call21.i.i, %6
  br i1 %cmp22.i.i, label %cleanup30.critedge.i.i, label %if.end24.i.i

if.end24.i.i:                                     ; preds = %if.end19.i.i
  %15 = load atomic i64, i64* %state.i monotonic, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %3) #11
  br label %while.cond.outer.i.i.backedge

while.cond.outer.i.i.backedge:                    ; preds = %if.end24.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i, %if.then6.i.i
  %expected.0.ph.i.i.be = phi i64 [ %14, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i ], [ %15, %if.end24.i.i ], [ %11, %if.then6.i.i ]
  %spinner.sroa.0.0.ph.i.i.be = phi i32 [ %spinner.sroa.0.152.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i ], [ 40, %if.end24.i.i ], [ %dec.i.i.i, %if.then6.i.i ]
  br label %while.cond.outer.i.i

cleanup30.critedge.i.i:                           ; preds = %if.end19.i.i
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %3) #11
  br label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex4lockEv.exit

_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex4lockEv.exit: ; preds = %if.then.i.i, %cleanup30.critedge.i.i, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal27enqueue_work_already_lockedEiPNS1_4workES3_(i32 %num_jobs, %"struct.Halide::Runtime::Internal::work"* %jobs, %"struct.Halide::Runtime::Internal::work"* %task_parent) local_unnamed_addr #0 {
entry:
  %0 = load i8, i8* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 15), align 1, !tbaa !52, !range !21
  %tobool.not = icmp eq i8 %0, 0
  br i1 %tobool.not, label %land.rhs.i, label %if.end4

land.rhs.i:                                       ; preds = %entry, %while.body.i
  %bytes.011.i = phi i8* [ %incdec.ptr.i, %while.body.i ], [ bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), %entry ]
  %1 = load i8, i8* %bytes.011.i, align 1, !tbaa !18
  %cmp2.i = icmp eq i8 %1, 0
  br i1 %cmp2.i, label %while.body.i, label %do.body.i

while.body.i:                                     ; preds = %land.rhs.i
  %incdec.ptr.i = getelementptr inbounds i8, i8* %bytes.011.i, i64 1
  %exitcond.not.i = icmp eq i8* %incdec.ptr.i, bitcast (%"struct.Halide::Runtime::Internal::work_queue_t"* select (i1 icmp ugt (i8* bitcast (%"struct.Halide::Runtime::Internal::work_queue_t"* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 1) to i8*), i8* getelementptr (i8, i8* bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), i64 1)), %"struct.Halide::Runtime::Internal::work_queue_t"* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 1), %"struct.Halide::Runtime::Internal::work_queue_t"* bitcast (i8* getelementptr (i8, i8* bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), i64 1) to %"struct.Halide::Runtime::Internal::work_queue_t"*)) to i8*)
  br i1 %exitcond.not.i, label %do.body.i, label %land.rhs.i, !llvm.loop !56

do.body.i:                                        ; preds = %while.body.i, %land.rhs.i
  %bytes.0.lcssa.i = phi i8* [ %bytes.011.i, %land.rhs.i ], [ bitcast (%"struct.Halide::Runtime::Internal::work_queue_t"* select (i1 icmp ugt (i8* bitcast (%"struct.Halide::Runtime::Internal::work_queue_t"* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 1) to i8*), i8* getelementptr (i8, i8* bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), i64 1)), %"struct.Halide::Runtime::Internal::work_queue_t"* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 1), %"struct.Halide::Runtime::Internal::work_queue_t"* bitcast (i8* getelementptr (i8, i8* bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), i64 1) to %"struct.Halide::Runtime::Internal::work_queue_t"*)) to i8*), %while.body.i ]
  %cmp3.i = icmp eq i8* %bytes.0.lcssa.i, bitcast (%"struct.Halide::Runtime::Internal::work_queue_t"* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 1) to i8*)
  br i1 %cmp3.i, label %_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit, label %if.then.i

if.then.i:                                        ; preds = %do.body.i
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.6, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit

_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit: ; preds = %if.then.i, %do.body.i
  %2 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !58
  %tobool1.not = icmp eq i32 %2, 0
  br i1 %tobool1.not, label %if.then2, label %if.end

if.then2:                                         ; preds = %_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit
  %call = tail call i32 @_ZN6Halide7Runtime8Internal27default_desired_num_threadsEv() #15
  br label %if.end

if.end:                                           ; preds = %if.then2, %_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit
  %3 = phi i32 [ %call, %if.then2 ], [ %2, %_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit ]
  %4 = icmp sgt i32 %3, 1
  %spec.select.i = select i1 %4, i32 %3, i32 1
  %5 = icmp slt i32 %spec.select.i, 256
  %call3176 = select i1 %5, i32 %spec.select.i, i32 256
  store i32 %call3176, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !58
  store i8 1, i8* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 15), align 1, !tbaa !52
  br label %if.end4

if.end4:                                          ; preds = %if.end, %entry
  %cmp181 = icmp sgt i32 %num_jobs, 0
  br i1 %cmp181, label %for.body.preheader, label %for.cond.cleanup

for.body.preheader:                               ; preds = %if.end4
  %wide.trip.count = zext i32 %num_jobs to i64
  br label %for.body

for.cond.cleanup.loopexit:                        ; preds = %for.inc
  %phi.bo = and i8 %stealable_jobs.1, 1
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %if.end4
  %workers_to_wake.0.lcssa = phi i32 [ -1, %if.end4 ], [ %workers_to_wake.1, %for.cond.cleanup.loopexit ]
  %stealable_jobs.0.lcssa = phi i8 [ 0, %if.end4 ], [ %phi.bo, %for.cond.cleanup.loopexit ]
  %job_has_acquires.0.lcssa = phi i8 [ 0, %if.end4 ], [ %spec.select, %for.cond.cleanup.loopexit ]
  %job_may_block.0.lcssa = phi i8 [ 0, %if.end4 ], [ %job_may_block.1, %for.cond.cleanup.loopexit ]
  %min_threads.0.lcssa = phi i32 [ 0, %if.end4 ], [ %add, %for.cond.cleanup.loopexit ]
  %cmp31 = icmp eq %"struct.Halide::Runtime::Internal::work"* %task_parent, null
  br i1 %cmp31, label %if.then32, label %do.body61

for.body:                                         ; preds = %for.inc, %for.body.preheader
  %indvars.iv193 = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next194, %for.inc ]
  %min_threads.0187 = phi i32 [ 0, %for.body.preheader ], [ %add, %for.inc ]
  %job_may_block.0185 = phi i8 [ 0, %for.body.preheader ], [ %job_may_block.1, %for.inc ]
  %job_has_acquires.0184 = phi i8 [ 0, %for.body.preheader ], [ %spec.select, %for.inc ]
  %stealable_jobs.0183 = phi i8 [ 0, %for.body.preheader ], [ %stealable_jobs.1, %for.inc ]
  %workers_to_wake.0182 = phi i32 [ -1, %for.body.preheader ], [ %workers_to_wake.1, %for.inc ]
  %min_threads5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193, i32 0, i32 7
  %6 = load i32, i32* %min_threads5, align 4, !tbaa !37
  %cmp6 = icmp eq i32 %6, 0
  %add = add i32 %6, %min_threads.0187
  %stealable_jobs.1 = select i1 %cmp6, i8 1, i8 %stealable_jobs.0183
  %job_may_block.1 = select i1 %cmp6, i8 %job_may_block.0185, i8 1
  %num_semaphores = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193, i32 0, i32 4
  %7 = load i32, i32* %num_semaphores, align 8, !tbaa !35
  %cmp16.not = icmp eq i32 %7, 0
  %spec.select = select i1 %cmp16.not, i8 %job_has_acquires.0184, i8 1
  %serial = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193, i32 0, i32 8
  %8 = load i8, i8* %serial, align 8, !tbaa !33, !range !21
  %tobool22.not = icmp eq i8 %8, 0
  br i1 %tobool22.not, label %if.else24, label %if.then23

if.then23:                                        ; preds = %for.body
  %inc = add nsw i32 %workers_to_wake.0182, 1
  br label %for.inc

if.else24:                                        ; preds = %for.body
  %extent = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193, i32 0, i32 6
  %9 = load i32, i32* %extent, align 8, !tbaa !32
  %add28 = add nsw i32 %9, %workers_to_wake.0182
  br label %for.inc

for.inc:                                          ; preds = %if.else24, %if.then23
  %workers_to_wake.1 = phi i32 [ %inc, %if.then23 ], [ %add28, %if.else24 ]
  %indvars.iv.next194 = add nuw nsw i64 %indvars.iv193, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next194, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.cleanup.loopexit, label %for.body, !llvm.loop !59

if.then32:                                        ; preds = %for.cond.cleanup
  %10 = or i8 %job_may_block.0.lcssa, %job_has_acquires.0.lcssa
  %11 = and i8 %10, 1
  %12 = icmp eq i8 %11, 0
  %not. = xor i1 %12, true
  %add36 = zext i1 %not. to i32
  %min_threads.2 = add nsw i32 %min_threads.0.lcssa, %add36
  %13 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !60
  %cmp38180 = icmp slt i32 %13, 256
  br i1 %cmp38180, label %land.rhs, label %do.end50

land.rhs:                                         ; preds = %if.then32, %while.body
  %14 = phi i32 [ %inc45, %while.body ], [ %13, %if.then32 ]
  %15 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !58
  %sub = add nsw i32 %15, -1
  %cmp39 = icmp slt i32 %14, %sub
  br i1 %cmp39, label %while.body, label %lor.rhs

lor.rhs:                                          ; preds = %land.rhs
  %add40 = add nsw i32 %14, 1
  %16 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !61
  %sub41 = sub i32 %add40, %16
  %cmp42 = icmp slt i32 %sub41, %min_threads.2
  br i1 %cmp42, label %while.body, label %do.end50

while.body:                                       ; preds = %lor.rhs, %land.rhs
  %17 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !62
  %inc43 = add nsw i32 %17, 1
  store i32 %inc43, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !62
  %call44 = tail call %struct.halide_thread* @halide_spawn_thread(void (i8*)* nonnull @_ZN6Halide7Runtime8Internal13worker_threadEPv, i8* null) #15
  %18 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !60
  %inc45 = add nsw i32 %18, 1
  store i32 %inc45, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !60
  %idxprom46 = sext i32 %18 to i64
  %arrayidx47 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 13, i64 %idxprom46
  store %struct.halide_thread* %call44, %struct.halide_thread** %arrayidx47, align 8, !tbaa !14
  %cmp38 = icmp slt i32 %18, 255
  br i1 %cmp38, label %land.rhs, label %do.end50, !llvm.loop !63

do.end50:                                         ; preds = %while.body, %lor.rhs, %if.then32
  br i1 %12, label %if.end77, label %if.then54

if.then54:                                        ; preds = %do.end50
  %19 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !61
  %inc55 = add nsw i32 %19, 1
  store i32 %inc55, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !61
  br label %if.end77

do.body61:                                        ; preds = %for.cond.cleanup
  %min_threads63 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %task_parent, i64 0, i32 0, i32 7
  %20 = load i32, i32* %min_threads63, align 4, !tbaa !37
  %active_workers = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %task_parent, i64 0, i32 8
  %21 = load i32, i32* %active_workers, align 8, !tbaa !64
  %mul = mul nsw i32 %21, %20
  %threads_reserved = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %task_parent, i64 0, i32 6
  %22 = load i32, i32* %threads_reserved, align 8, !tbaa !65
  %sub64 = sub nsw i32 %mul, %22
  %cmp65.not = icmp sgt i32 %min_threads.0.lcssa, %sub64
  br i1 %cmp65.not, label %if.then66, label %do.end69

if.then66:                                        ; preds = %do.body61
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([263 x i8], [263 x i8]* @.str.3, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %do.end69

do.end69:                                         ; preds = %if.then66, %do.body61
  %23 = or i8 %job_may_block.0.lcssa, %job_has_acquires.0.lcssa
  %24 = and i8 %23, 1
  %25 = icmp eq i8 %24, 0
  br i1 %25, label %if.end77, label %if.then73

if.then73:                                        ; preds = %do.end69
  %26 = load i32, i32* %threads_reserved, align 8, !tbaa !65
  %inc75 = add nsw i32 %26, 1
  store i32 %inc75, i32* %threads_reserved, align 8, !tbaa !65
  br label %if.end77

if.end77:                                         ; preds = %if.then73, %do.end69, %if.then54, %do.end50
  br i1 %cmp181, label %for.body83.lr.ph, label %for.cond.cleanup82

for.body83.lr.ph:                                 ; preds = %if.end77
  %.promoted = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !66
  %27 = zext i32 %num_jobs to i64
  %min.iters.check = icmp eq i32 %num_jobs, 1
  br i1 %min.iters.check, label %for.body83.preheader, label %vector.ph

vector.ph:                                        ; preds = %for.body83.lr.ph
  %n.vec = and i64 %27, 4294967294
  %ind.end = and i64 %27, 1
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %vector.recur = phi %"struct.Halide::Runtime::Internal::work"* [ %.promoted, %vector.ph ], [ %31, %vector.body ]
  %offset.idx = sub i64 %27, %index
  %28 = add nsw i64 %offset.idx, -1
  %29 = add i64 %offset.idx, -2
  %30 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %28
  %31 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %29
  %32 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %28, i32 2
  %33 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %29, i32 2
  store %"struct.Halide::Runtime::Internal::work"* %vector.recur, %"struct.Halide::Runtime::Internal::work"** %32, align 8, !tbaa !67
  store %"struct.Halide::Runtime::Internal::work"* %30, %"struct.Halide::Runtime::Internal::work"** %33, align 8, !tbaa !67
  %34 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %28, i32 3
  %35 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %29, i32 3
  store %"struct.Halide::Runtime::Internal::work"* %jobs, %"struct.Halide::Runtime::Internal::work"** %34, align 8, !tbaa !44
  store %"struct.Halide::Runtime::Internal::work"* %jobs, %"struct.Halide::Runtime::Internal::work"** %35, align 8, !tbaa !44
  %36 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %28, i32 4
  %37 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %29, i32 4
  store i32 %num_jobs, i32* %36, align 8, !tbaa !45
  store i32 %num_jobs, i32* %37, align 8, !tbaa !45
  %38 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %28, i32 6
  %39 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %29, i32 6
  store i32 0, i32* %38, align 8, !tbaa !65
  store i32 0, i32* %39, align 8, !tbaa !65
  %index.next = add i64 %index, 2
  %40 = icmp eq i64 %index.next, %n.vec
  br i1 %40, label %middle.block, label %vector.body, !llvm.loop !68

middle.block:                                     ; preds = %vector.body
  %cmp.n = icmp eq i64 %n.vec, %27
  br i1 %cmp.n, label %for.cond80.for.cond.cleanup82_crit_edge, label %for.body83.preheader

for.body83.preheader:                             ; preds = %for.body83.lr.ph, %middle.block
  %indvars.iv.ph = phi i64 [ %ind.end, %middle.block ], [ %27, %for.body83.lr.ph ]
  %scalar.recur.ph = phi %"struct.Halide::Runtime::Internal::work"* [ %31, %middle.block ], [ %.promoted, %for.body83.lr.ph ]
  br label %for.body83

for.cond80.for.cond.cleanup82_crit_edge:          ; preds = %for.body83, %middle.block
  store %"struct.Halide::Runtime::Internal::work"* %jobs, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !66
  br label %for.cond.cleanup82

for.cond.cleanup82:                               ; preds = %for.cond80.for.cond.cleanup82_crit_edge, %if.end77
  %41 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 12), align 4, !tbaa !70
  %tobool96 = icmp ne i32 %41, 0
  %42 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 11), align 8
  %43 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8
  %cmp98 = icmp slt i32 %42, %43
  %44 = or i1 %tobool96, %cmp98
  %cmp102 = icmp sgt i32 %workers_to_wake.0.lcssa, %42
  %or.cond174 = or i1 %cmp102, %44
  %storemerge = select i1 %or.cond174, i32 %43, i32 %workers_to_wake.0.lcssa
  store i32 %storemerge, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 6), align 8, !tbaa !71
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 8)) #15
  %45 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 6), align 8, !tbaa !71
  %46 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !62
  %cmp106 = icmp sgt i32 %45, %46
  br i1 %cmp106, label %if.then107, label %if.end111

for.body83:                                       ; preds = %for.body83.preheader, %for.body83
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body83 ], [ %indvars.iv.ph, %for.body83.preheader ]
  %scalar.recur = phi %"struct.Halide::Runtime::Internal::work"* [ %arrayidx85, %for.body83 ], [ %scalar.recur.ph, %for.body83.preheader ]
  %indvars.iv.next = add nsw i64 %indvars.iv, -1
  %arrayidx85 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next
  %next_job = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next, i32 2
  store %"struct.Halide::Runtime::Internal::work"* %scalar.recur, %"struct.Halide::Runtime::Internal::work"** %next_job, align 8, !tbaa !67
  %siblings = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next, i32 3
  store %"struct.Halide::Runtime::Internal::work"* %jobs, %"struct.Halide::Runtime::Internal::work"** %siblings, align 8, !tbaa !44
  %sibling_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next, i32 4
  store i32 %num_jobs, i32* %sibling_count, align 8, !tbaa !45
  %threads_reserved93 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next, i32 6
  store i32 0, i32* %threads_reserved93, align 8, !tbaa !65
  %cmp81 = icmp sgt i64 %indvars.iv, 1
  br i1 %cmp81, label %for.body83, label %for.cond80.for.cond.cleanup82_crit_edge, !llvm.loop !72

if.then107:                                       ; preds = %for.cond.cleanup82
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 9)) #15
  %tobool108.not = icmp eq i8 %stealable_jobs.0.lcssa, 0
  br i1 %tobool108.not, label %if.end111, label %if.then109

if.then109:                                       ; preds = %if.then107
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10)) #15
  br label %if.end111

if.end111:                                        ; preds = %if.then109, %if.then107, %for.cond.cleanup82
  %47 = or i8 %job_may_block.0.lcssa, %job_has_acquires.0.lcssa
  %48 = and i8 %47, 1
  %49 = icmp eq i8 %48, 0
  br i1 %49, label %if.end123, label %if.then115

if.then115:                                       ; preds = %if.end111
  br i1 %cmp31, label %if.else120, label %if.then117

if.then117:                                       ; preds = %if.then115
  %threads_reserved118 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %task_parent, i64 0, i32 6
  %50 = load i32, i32* %threads_reserved118, align 8, !tbaa !65
  %dec119 = add nsw i32 %50, -1
  store i32 %dec119, i32* %threads_reserved118, align 8, !tbaa !65
  br label %if.end123

if.else120:                                       ; preds = %if.then115
  %51 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !61
  %dec121 = add nsw i32 %51, -1
  store i32 %dec121, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !61
  br label %if.end123

if.end123:                                        ; preds = %if.else120, %if.then117, %if.end111
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal28worker_thread_already_lockedEPNS1_4workE(%"struct.Halide::Runtime::Internal::work"* %owned_job) local_unnamed_addr #0 {
entry:
  %active_workers.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 8
  %tobool.not = icmp eq %"struct.Halide::Runtime::Internal::work"* %owned_job, null
  %extent.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 0, i32 6
  %exit_status = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 9
  %parent_job = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 5
  %siblings56 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 3
  %owner_is_sleeping = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 11
  %next_job10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 2
  br label %while.cond

while.cond:                                       ; preds = %while.cond.backedge, %entry
  %spin_count.0 = phi i32 [ 0, %entry ], [ %spin_count.0.be, %while.cond.backedge ]
  br i1 %tobool.not, label %cond.false, label %cond.true

cond.true:                                        ; preds = %while.cond
  %0 = load i32, i32* %extent.i, align 8, !tbaa !32
  %tobool.not.i = icmp eq i32 %0, 0
  br i1 %tobool.not.i, label %cond.end, label %if.then

cond.false:                                       ; preds = %while.cond
  %1 = load i8, i8* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 14), align 8, !tbaa !73, !range !21
  %tobool1.not = icmp eq i8 %1, 0
  br i1 %tobool1.not, label %do.end.thread, label %while.end316

cond.end:                                         ; preds = %cond.true
  %2 = load i32, i32* %active_workers.i, align 8, !tbaa !64
  %tobool2.i.not = icmp eq i32 %2, 0
  br i1 %tobool2.i.not, label %while.end316, label %if.then

if.then:                                          ; preds = %cond.end, %cond.true
  %3 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !66
  %4 = load i32, i32* %exit_status, align 4, !tbaa !47
  %cmp.not = icmp eq i32 %4, 0
  br i1 %cmp.not, label %if.else, label %if.then3

if.then3:                                         ; preds = %if.then
  %5 = load i32, i32* %active_workers.i, align 8, !tbaa !64
  %cmp4 = icmp eq i32 %5, 0
  br i1 %cmp4, label %while.cond6.preheader, label %do.end

while.cond6.preheader:                            ; preds = %if.then3
  %cmp7.not524 = icmp eq %"struct.Halide::Runtime::Internal::work"* %3, %owned_job
  br i1 %cmp7.not524, label %while.end, label %while.body8

while.body8:                                      ; preds = %while.cond6.preheader, %while.body8
  %job.0525 = phi %"struct.Halide::Runtime::Internal::work"* [ %6, %while.body8 ], [ %3, %while.cond6.preheader ]
  %next_job = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.0525, i64 0, i32 2
  %6 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job, align 8, !tbaa !67
  %cmp7.not = icmp eq %"struct.Halide::Runtime::Internal::work"* %6, %owned_job
  br i1 %cmp7.not, label %while.end.loopexit, label %while.body8, !llvm.loop !74

while.end.loopexit:                               ; preds = %while.body8
  %next_job.le = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.0525, i64 0, i32 2
  br label %while.end

while.end:                                        ; preds = %while.end.loopexit, %while.cond6.preheader
  %prev_ptr.0.lcssa = phi %"struct.Halide::Runtime::Internal::work"** [ getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), %while.cond6.preheader ], [ %next_job.le, %while.end.loopexit ]
  %7 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job10, align 8, !tbaa !67
  store %"struct.Halide::Runtime::Internal::work"* %7, %"struct.Halide::Runtime::Internal::work"** %prev_ptr.0.lcssa, align 8, !tbaa !14
  store i32 0, i32* %extent.i, align 8, !tbaa !32
  br label %while.cond.backedge

if.else:                                          ; preds = %if.then
  %8 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %parent_job, align 8, !tbaa !46
  %tobool11.not = icmp eq %"struct.Halide::Runtime::Internal::work"* %8, null
  br i1 %tobool11.not, label %do.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.else
  %exit_status13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %8, i64 0, i32 9
  %9 = load i32, i32* %exit_status13, align 4, !tbaa !47
  %cmp14.not = icmp eq i32 %9, 0
  br i1 %cmp14.not, label %do.end, label %if.then15

if.then15:                                        ; preds = %land.lhs.true
  store i32 %9, i32* %exit_status, align 4, !tbaa !47
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10)) #15
  br label %while.cond.backedge

do.end:                                           ; preds = %land.lhs.true, %if.else, %if.then3
  %tobool23.not527 = icmp eq %"struct.Halide::Runtime::Internal::work"* %3, null
  br i1 %tobool23.not527, label %if.then105, label %do.end27

do.end.thread:                                    ; preds = %cond.false
  %10 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !66
  %tobool23.not527563 = icmp eq %"struct.Halide::Runtime::Internal::work"* %10, null
  br i1 %tobool23.not527563, label %if.else112, label %do.end27.us

do.end27.us:                                      ; preds = %do.end.thread, %cleanup.us
  %job.1529.us = phi %"struct.Halide::Runtime::Internal::work"* [ %29, %cleanup.us ], [ %10, %do.end.thread ]
  %prev_ptr.1528.us = phi %"struct.Halide::Runtime::Internal::work"** [ %next_job95.us, %cleanup.us ], [ getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), %do.end.thread ]
  %parent_job29.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 5
  %11 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %parent_job29.us, align 8, !tbaa !46
  %cmp30.us = icmp eq %"struct.Halide::Runtime::Internal::work"* %11, null
  br i1 %cmp30.us, label %if.then31.us, label %if.else32.us

if.else32.us:                                     ; preds = %do.end27.us
  %active_workers33.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %11, i64 0, i32 8
  %12 = load i32, i32* %active_workers33.us, align 8, !tbaa !64
  %cmp34.us = icmp eq i32 %12, 0
  %min_threads.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %11, i64 0, i32 0, i32 7
  %13 = load i32, i32* %min_threads.us, align 4, !tbaa !37
  br i1 %cmp34.us, label %if.then35.us, label %if.else38.us

if.else38.us:                                     ; preds = %if.else32.us
  %mul.us = mul nsw i32 %13, %12
  %threads_reserved42.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %11, i64 0, i32 6
  %14 = load i32, i32* %threads_reserved42.us, align 8, !tbaa !65
  %sub43.us = sub nsw i32 %mul.us, %14
  br label %if.end45.us

if.then35.us:                                     ; preds = %if.else32.us
  %threads_reserved.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %11, i64 0, i32 6
  %15 = load i32, i32* %threads_reserved.us, align 8, !tbaa !65
  %sub37.us = sub nsw i32 %13, %15
  br label %if.end45.us

if.then31.us:                                     ; preds = %do.end27.us
  %16 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !60
  %add.us = add nsw i32 %16, 1
  %17 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !61
  %sub.us = sub i32 %add.us, %17
  br label %if.end45.us

if.end45.us:                                      ; preds = %if.then31.us, %if.then35.us, %if.else38.us
  %threads_available.0.us = phi i32 [ %sub.us, %if.then31.us ], [ %sub37.us, %if.then35.us ], [ %sub43.us, %if.else38.us ]
  %min_threads47.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 0, i32 7
  %18 = load i32, i32* %min_threads47.us, align 4, !tbaa !37
  %cmp48.not.us = icmp sge i32 %threads_available.0.us, %18
  %serial.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 0, i32 8
  %19 = load i8, i8* %serial.us, align 8, !tbaa !33, !range !21
  %tobool69.not.us = icmp eq i8 %19, 0
  br i1 %tobool69.not.us, label %if.end45.us.lor.end73.us_crit_edge, label %lor.rhs70.us

if.end45.us.lor.end73.us_crit_edge:               ; preds = %if.end45.us
  %.0 = and i1 %cmp48.not.us, true
  br label %lor.end73.us

lor.rhs70.us:                                     ; preds = %if.end45.us
  %active_workers71.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 8
  %20 = load i32, i32* %active_workers71.us, align 8, !tbaa !64
  %cmp72.us = icmp eq i32 %20, 0
  %.1 = and i1 %cmp48.not.us, %cmp72.us
  br label %lor.end73.us

lor.end73.us:                                     ; preds = %if.end45.us.lor.end73.us_crit_edge, %lor.rhs70.us
  %.phi = phi i1 [ %.0, %if.end45.us.lor.end73.us_crit_edge ], [ %.1, %lor.rhs70.us ]
  br i1 %.phi, label %if.then86.us, label %cleanup.us

if.then86.us:                                     ; preds = %lor.end73.us
  %next_semaphore.i.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 10
  %21 = load i32, i32* %next_semaphore.i.us, align 8, !tbaa !42
  %num_semaphores.i.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 0, i32 4
  %22 = load i32, i32* %num_semaphores.i.us, align 8, !tbaa !35
  %cmp14.i.us = icmp slt i32 %21, %22
  br i1 %cmp14.i.us, label %for.body.lr.ph.i.us, label %if.else127

for.body.lr.ph.i.us:                              ; preds = %if.then86.us
  %semaphores.i.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 0, i32 3
  br label %for.body.i.us

for.body.i.us:                                    ; preds = %for.inc.i.us, %for.body.lr.ph.i.us
  %23 = phi i32 [ %21, %for.body.lr.ph.i.us ], [ %inc.i.us, %for.inc.i.us ]
  %24 = load %struct.halide_semaphore_acquire_t*, %struct.halide_semaphore_acquire_t** %semaphores.i.us, align 8, !tbaa !34
  %idxprom.i.us = sext i32 %23 to i64
  %semaphore.i.us = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %24, i64 %idxprom.i.us, i32 0
  %25 = load %struct.halide_semaphore_t*, %struct.halide_semaphore_t** %semaphore.i.us, align 8, !tbaa !75
  %count.i.us = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %24, i64 %idxprom.i.us, i32 1
  %26 = load i32, i32* %count.i.us, align 8, !tbaa !77
  %call.i.us = tail call zeroext i1 @halide_default_semaphore_try_acquire(%struct.halide_semaphore_t* %25, i32 %26) #14
  br i1 %call.i.us, label %for.inc.i.us, label %cleanup.us

for.inc.i.us:                                     ; preds = %for.body.i.us
  %27 = load i32, i32* %next_semaphore.i.us, align 8, !tbaa !42
  %inc.i.us = add nsw i32 %27, 1
  store i32 %inc.i.us, i32* %next_semaphore.i.us, align 8, !tbaa !42
  %28 = load i32, i32* %num_semaphores.i.us, align 8, !tbaa !35
  %cmp.i.us = icmp slt i32 %inc.i.us, %28
  br i1 %cmp.i.us, label %for.body.i.us, label %if.else127, !llvm.loop !78

cleanup.us:                                       ; preds = %for.body.i.us, %lor.end73.us
  %next_job95.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 2
  %29 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job95.us, align 8, !tbaa !67
  %tobool23.not.us = icmp eq %"struct.Halide::Runtime::Internal::work"* %29, null
  br i1 %tobool23.not.us, label %if.then103, label %do.end27.us

do.end27:                                         ; preds = %do.end, %cleanup
  %job.1529 = phi %"struct.Halide::Runtime::Internal::work"* [ %50, %cleanup ], [ %3, %do.end ]
  %prev_ptr.1528 = phi %"struct.Halide::Runtime::Internal::work"** [ %next_job95, %cleanup ], [ getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), %do.end ]
  %parent_job29 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 5
  %30 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %parent_job29, align 8, !tbaa !46
  %cmp30 = icmp eq %"struct.Halide::Runtime::Internal::work"* %30, null
  br i1 %cmp30, label %if.then31, label %if.else32

if.then31:                                        ; preds = %do.end27
  %31 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !60
  %add = add nsw i32 %31, 1
  %32 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !61
  %sub = sub i32 %add, %32
  br label %if.end45

if.else32:                                        ; preds = %do.end27
  %active_workers33 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %30, i64 0, i32 8
  %33 = load i32, i32* %active_workers33, align 8, !tbaa !64
  %cmp34 = icmp eq i32 %33, 0
  %min_threads = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %30, i64 0, i32 0, i32 7
  %34 = load i32, i32* %min_threads, align 4, !tbaa !37
  br i1 %cmp34, label %if.then35, label %if.else38

if.then35:                                        ; preds = %if.else32
  %threads_reserved = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %30, i64 0, i32 6
  %35 = load i32, i32* %threads_reserved, align 8, !tbaa !65
  %sub37 = sub nsw i32 %34, %35
  br label %if.end45

if.else38:                                        ; preds = %if.else32
  %mul = mul nsw i32 %34, %33
  %threads_reserved42 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %30, i64 0, i32 6
  %36 = load i32, i32* %threads_reserved42, align 8, !tbaa !65
  %sub43 = sub nsw i32 %mul, %36
  br label %if.end45

if.end45:                                         ; preds = %if.else38, %if.then35, %if.then31
  %threads_available.0 = phi i32 [ %sub, %if.then31 ], [ %sub37, %if.then35 ], [ %sub43, %if.else38 ]
  %min_threads47 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 0, i32 7
  %37 = load i32, i32* %min_threads47, align 4, !tbaa !37
  %cmp48.not = icmp slt i32 %threads_available.0, %37
  %siblings = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 3
  %38 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %siblings, align 8, !tbaa !44
  %39 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %siblings56, align 8, !tbaa !44
  %cmp57 = icmp ne %"struct.Halide::Runtime::Internal::work"* %38, %39
  %cmp60 = icmp ne i32 %37, 0
  %serial = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 0, i32 8
  %40 = load i8, i8* %serial, align 8, !tbaa !33, !range !21
  %tobool69.not = icmp eq i8 %40, 0
  br i1 %tobool69.not, label %if.end45.lor.end73_crit_edge, label %lor.rhs70

if.end45.lor.end73_crit_edge:                     ; preds = %if.end45
  %.not472.0 = xor i1 true, true
  br label %lor.end73

lor.rhs70:                                        ; preds = %if.end45
  %active_workers71 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 8
  %41 = load i32, i32* %active_workers71, align 8, !tbaa !64
  %cmp72 = icmp eq i32 %41, 0
  %.not472.1 = xor i1 %cmp72, true
  br label %lor.end73

lor.end73:                                        ; preds = %if.end45.lor.end73_crit_edge, %lor.rhs70
  %.not472.phi = phi i1 [ %.not472.0, %if.end45.lor.end73_crit_edge ], [ %.not472.1, %lor.rhs70 ]
  %.not = and i1 %cmp60, %cmp57
  %brmerge = or i1 %cmp48.not, %.not
  %brmerge473 = or i1 %brmerge, %.not472.phi
  br i1 %brmerge473, label %cleanup, label %if.then86

if.then86:                                        ; preds = %lor.end73
  %next_semaphore.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 10
  %42 = load i32, i32* %next_semaphore.i, align 8, !tbaa !42
  %num_semaphores.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 0, i32 4
  %43 = load i32, i32* %num_semaphores.i, align 8, !tbaa !35
  %cmp14.i = icmp slt i32 %42, %43
  br i1 %cmp14.i, label %for.body.lr.ph.i, label %if.else127

for.body.lr.ph.i:                                 ; preds = %if.then86
  %semaphores.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 0, i32 3
  br label %for.body.i

for.body.i:                                       ; preds = %for.inc.i, %for.body.lr.ph.i
  %44 = phi i32 [ %42, %for.body.lr.ph.i ], [ %inc.i, %for.inc.i ]
  %45 = load %struct.halide_semaphore_acquire_t*, %struct.halide_semaphore_acquire_t** %semaphores.i, align 8, !tbaa !34
  %idxprom.i = sext i32 %44 to i64
  %semaphore.i = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %45, i64 %idxprom.i, i32 0
  %46 = load %struct.halide_semaphore_t*, %struct.halide_semaphore_t** %semaphore.i, align 8, !tbaa !75
  %count.i = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %45, i64 %idxprom.i, i32 1
  %47 = load i32, i32* %count.i, align 8, !tbaa !77
  %call.i = tail call zeroext i1 @halide_default_semaphore_try_acquire(%struct.halide_semaphore_t* %46, i32 %47) #14
  br i1 %call.i, label %for.inc.i, label %cleanup

for.inc.i:                                        ; preds = %for.body.i
  %48 = load i32, i32* %next_semaphore.i, align 8, !tbaa !42
  %inc.i = add nsw i32 %48, 1
  store i32 %inc.i, i32* %next_semaphore.i, align 8, !tbaa !42
  %49 = load i32, i32* %num_semaphores.i, align 8, !tbaa !35
  %cmp.i = icmp slt i32 %inc.i, %49
  br i1 %cmp.i, label %for.body.i, label %if.else127, !llvm.loop !78

cleanup:                                          ; preds = %for.body.i, %lor.end73
  %next_job95 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 2
  %50 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job95, align 8, !tbaa !67
  %tobool23.not = icmp eq %"struct.Halide::Runtime::Internal::work"* %50, null
  br i1 %tobool23.not, label %if.then103, label %do.end27

if.then103:                                       ; preds = %cleanup, %cleanup.us
  br i1 %tobool.not, label %if.else112, label %if.then105

if.then105:                                       ; preds = %do.end, %if.then103
  %inc = add nsw i32 %spin_count.0, 1
  %cmp106 = icmp slt i32 %spin_count.0, 40
  br i1 %cmp106, label %if.then107, label %if.else108

if.then107:                                       ; preds = %if.then105
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #15
  tail call void @halide_thread_yield() #14
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #15
  br label %while.cond.backedge

if.else108:                                       ; preds = %if.then105
  %51 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 12), align 4, !tbaa !70
  %inc109 = add nsw i32 %51, 1
  store i32 %inc109, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 12), align 4, !tbaa !70
  store i8 1, i8* %owner_is_sleeping, align 4, !tbaa !43
  tail call void @halide_cond_wait(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10), %struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #15
  store i8 0, i8* %owner_is_sleeping, align 4, !tbaa !43
  %52 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 12), align 4, !tbaa !70
  %dec = add nsw i32 %52, -1
  store i32 %dec, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 12), align 4, !tbaa !70
  br label %while.cond.backedge

if.else112:                                       ; preds = %if.then103, %do.end.thread
  %53 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 11), align 8, !tbaa !79
  %inc113 = add nsw i32 %53, 1
  store i32 %inc113, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 11), align 8, !tbaa !79
  %54 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !62
  %55 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 6), align 8, !tbaa !71
  %cmp114 = icmp sgt i32 %54, %55
  br i1 %cmp114, label %if.then115, label %if.else118

if.then115:                                       ; preds = %if.else112
  %dec116 = add nsw i32 %54, -1
  store i32 %dec116, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !62
  tail call void @halide_cond_wait(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 9), %struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #15
  %56 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !62
  %inc117 = add nsw i32 %56, 1
  store i32 %inc117, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !62
  br label %if.end124

if.else118:                                       ; preds = %if.else112
  %inc119 = add nsw i32 %spin_count.0, 1
  %cmp120 = icmp slt i32 %spin_count.0, 40
  br i1 %cmp120, label %if.then121, label %if.else122

if.then121:                                       ; preds = %if.else118
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #15
  tail call void @halide_thread_yield() #14
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #15
  br label %if.end124

if.else122:                                       ; preds = %if.else118
  tail call void @halide_cond_wait(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 8), %struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #15
  br label %if.end124

if.end124:                                        ; preds = %if.else122, %if.then121, %if.then115
  %spin_count.1 = phi i32 [ %spin_count.0, %if.then115 ], [ %inc119, %if.then121 ], [ %inc119, %if.else122 ]
  %57 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 11), align 8, !tbaa !79
  %dec125 = add nsw i32 %57, -1
  store i32 %dec125, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 11), align 8, !tbaa !79
  br label %while.cond.backedge

if.else127:                                       ; preds = %if.then86, %if.then86.us, %for.inc.i, %for.inc.i.us
  %next_semaphore.i521 = phi i32* [ %next_semaphore.i.us, %for.inc.i.us ], [ %next_semaphore.i, %for.inc.i ], [ %next_semaphore.i.us, %if.then86.us ], [ %next_semaphore.i, %if.then86 ]
  %prev_ptr.1519 = phi %"struct.Halide::Runtime::Internal::work"** [ %prev_ptr.1528.us, %for.inc.i.us ], [ %prev_ptr.1528, %for.inc.i ], [ %prev_ptr.1528.us, %if.then86.us ], [ %prev_ptr.1528, %if.then86 ]
  %job.1515 = phi %"struct.Halide::Runtime::Internal::work"* [ %job.1529.us, %for.inc.i.us ], [ %job.1529, %for.inc.i ], [ %job.1529.us, %if.then86.us ], [ %job.1529, %if.then86 ]
  store i32 0, i32* %next_semaphore.i521, align 8, !tbaa !42
  %active_workers132 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 8
  %58 = load i32, i32* %active_workers132, align 8, !tbaa !64
  %inc133 = add nsw i32 %58, 1
  store i32 %inc133, i32* %active_workers132, align 8, !tbaa !64
  %parent_job134 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 5
  %59 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %parent_job134, align 8, !tbaa !46
  %cmp135 = icmp eq %"struct.Halide::Runtime::Internal::work"* %59, null
  %min_threads138 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 7
  %60 = load i32, i32* %min_threads138, align 4, !tbaa !37
  br i1 %cmp135, label %if.then136, label %if.else143

if.then136:                                       ; preds = %if.else127
  %61 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !61
  %add139 = add nsw i32 %61, %60
  store i32 %add139, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !61
  br label %if.end152

if.else143:                                       ; preds = %if.else127
  %threads_reserved147 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %59, i64 0, i32 6
  %62 = load i32, i32* %threads_reserved147, align 8, !tbaa !65
  %add148 = add nsw i32 %62, %60
  store i32 %add148, i32* %threads_reserved147, align 8, !tbaa !65
  br label %if.end152

if.end152:                                        ; preds = %if.else143, %if.then136
  %serial154 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 8
  %63 = load i8, i8* %serial154, align 8, !tbaa !33, !range !21
  %tobool155.not = icmp eq i8 %63, 0
  br i1 %tobool155.not, label %if.else198, label %if.then156

if.then156:                                       ; preds = %if.end152
  %next_job157 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 2
  %64 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job157, align 8, !tbaa !67
  store %"struct.Halide::Runtime::Internal::work"* %64, %"struct.Halide::Runtime::Internal::work"** %prev_ptr.1519, align 8, !tbaa !14
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #15
  %extent163 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 6
  %next_semaphore.i474 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 10
  %num_semaphores.i475 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 4
  %semaphores.i477 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 3
  %user_context = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 7
  %fn = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 0
  %min = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 5
  %closure = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 1
  %65 = bitcast %"struct.Halide::Runtime::Internal::work"* %job.1515 to i8*
  br label %while.cond161.preheader

while.cond161.preheader:                          ; preds = %if.end172, %if.then156
  %iters.0538 = phi i32 [ 1, %if.then156 ], [ 0, %if.end172 ]
  %total_iters.0537 = phi i32 [ 0, %if.then156 ], [ %add178, %if.end172 ]
  %66 = load i32, i32* %extent163, align 8, !tbaa !32
  %sub164531 = sub nsw i32 %66, %total_iters.0537
  %cmp165532 = icmp sgt i32 %sub164531, %iters.0538
  br i1 %cmp165532, label %land.rhs.preheader, label %while.end169

land.rhs.preheader:                               ; preds = %while.cond161.preheader
  %.pre = load i32, i32* %next_semaphore.i474, align 8, !tbaa !42
  %.pre560 = load i32, i32* %num_semaphores.i475, align 8, !tbaa !35
  br label %land.rhs

land.rhs:                                         ; preds = %while.body167, %land.rhs.preheader
  %67 = phi i32 [ %76, %while.body167 ], [ %66, %land.rhs.preheader ]
  %68 = phi i32 [ %77, %while.body167 ], [ %.pre560, %land.rhs.preheader ]
  %69 = phi i32 [ 0, %while.body167 ], [ %.pre, %land.rhs.preheader ]
  %iters.1533 = phi i32 [ %inc168, %while.body167 ], [ %iters.0538, %land.rhs.preheader ]
  %cmp14.i476 = icmp slt i32 %69, %68
  br i1 %cmp14.i476, label %for.body.i483, label %while.body167

for.body.i483:                                    ; preds = %land.rhs, %for.inc.i486
  %70 = phi i32 [ %inc.i484, %for.inc.i486 ], [ %69, %land.rhs ]
  %71 = load %struct.halide_semaphore_acquire_t*, %struct.halide_semaphore_acquire_t** %semaphores.i477, align 8, !tbaa !34
  %idxprom.i479 = sext i32 %70 to i64
  %semaphore.i480 = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %71, i64 %idxprom.i479, i32 0
  %72 = load %struct.halide_semaphore_t*, %struct.halide_semaphore_t** %semaphore.i480, align 8, !tbaa !75
  %count.i481 = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %71, i64 %idxprom.i479, i32 1
  %73 = load i32, i32* %count.i481, align 8, !tbaa !77
  %call.i482 = tail call zeroext i1 @halide_default_semaphore_try_acquire(%struct.halide_semaphore_t* %72, i32 %73) #14
  br i1 %call.i482, label %for.inc.i486, label %while.end169

for.inc.i486:                                     ; preds = %for.body.i483
  %74 = load i32, i32* %next_semaphore.i474, align 8, !tbaa !42
  %inc.i484 = add nsw i32 %74, 1
  store i32 %inc.i484, i32* %next_semaphore.i474, align 8, !tbaa !42
  %75 = load i32, i32* %num_semaphores.i475, align 8, !tbaa !35
  %cmp.i485 = icmp slt i32 %inc.i484, %75
  br i1 %cmp.i485, label %for.body.i483, label %while.body167.loopexit, !llvm.loop !78

while.body167.loopexit:                           ; preds = %for.inc.i486
  %.pre561 = load i32, i32* %extent163, align 8, !tbaa !32
  br label %while.body167

while.body167:                                    ; preds = %while.body167.loopexit, %land.rhs
  %76 = phi i32 [ %.pre561, %while.body167.loopexit ], [ %67, %land.rhs ]
  %77 = phi i32 [ %75, %while.body167.loopexit ], [ %68, %land.rhs ]
  store i32 0, i32* %next_semaphore.i474, align 8, !tbaa !42
  %inc168 = add nuw nsw i32 %iters.1533, 1
  %sub164 = sub nsw i32 %76, %total_iters.0537
  %cmp165 = icmp sgt i32 %sub164, %inc168
  br i1 %cmp165, label %land.rhs, label %if.end172, !llvm.loop !80

while.end169:                                     ; preds = %for.body.i483, %while.cond161.preheader
  %iters.1523 = phi i32 [ %iters.0538, %while.cond161.preheader ], [ %iters.1533, %for.body.i483 ]
  %cmp170 = icmp eq i32 %iters.1523, 0
  br i1 %cmp170, label %while.end179, label %if.end172

if.end172:                                        ; preds = %while.body167, %while.end169
  %iters.1523566 = phi i32 [ %iters.1523, %while.end169 ], [ %inc168, %while.body167 ]
  %78 = load i8*, i8** %user_context, align 8, !tbaa !40
  %79 = load i32 (i8*, i32, i32, i8*, i8*)*, i32 (i8*, i32, i32, i8*, i8*)** %fn, align 8, !tbaa !28
  %80 = load i32, i32* %min, align 4, !tbaa !31
  %add175 = add nsw i32 %80, %total_iters.0537
  %81 = load i8*, i8** %closure, align 8, !tbaa !36
  %call177 = tail call i32 @halide_do_loop_task(i8* %78, i32 (i8*, i32, i32, i8*, i8*)* %79, i32 %add175, i32 %iters.1523566, i8* %81, i8* nonnull %65) #15
  %add178 = add nuw nsw i32 %iters.1523566, %total_iters.0537
  %cmp159 = icmp eq i32 %call177, 0
  br i1 %cmp159, label %while.cond161.preheader, label %while.end179, !llvm.loop !81

while.end179:                                     ; preds = %if.end172, %while.end169
  %cmp170568 = phi i1 [ true, %while.end169 ], [ false, %if.end172 ]
  %result.0.lcssa = phi i32 [ 0, %while.end169 ], [ %call177, %if.end172 ]
  %total_iters.0.lcssa = phi i32 [ %total_iters.0537, %while.end169 ], [ %add178, %if.end172 ]
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #15
  %82 = load i32, i32* %min, align 4, !tbaa !31
  %add182 = add nsw i32 %82, %total_iters.0.lcssa
  store i32 %add182, i32* %min, align 4, !tbaa !31
  %83 = load i32, i32* %extent163, align 8, !tbaa !32
  %sub185 = sub nsw i32 %83, %total_iters.0.lcssa
  store i32 %sub185, i32* %extent163, align 8, !tbaa !32
  br i1 %cmp170568, label %if.else190, label %if.end230.thread505

if.end230.thread505:                              ; preds = %while.end179
  store i32 0, i32* %extent163, align 8, !tbaa !32
  br label %if.then238

if.else190:                                       ; preds = %while.end179
  %cmp193 = icmp sgt i32 %sub185, 0
  br i1 %cmp193, label %if.then194, label %if.end271

if.then194:                                       ; preds = %if.else190
  %84 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !66
  store %"struct.Halide::Runtime::Internal::work"* %84, %"struct.Halide::Runtime::Internal::work"** %next_job157, align 8, !tbaa !67
  store %"struct.Halide::Runtime::Internal::work"* %job.1515, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !66
  br label %if.end271

if.else198:                                       ; preds = %if.end152
  %myjob.sroa.0.0..sroa_idx = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 0
  %myjob.sroa.0.0.copyload = load i32 (i8*, i32, i32, i8*, i8*)*, i32 (i8*, i32, i32, i8*, i8*)** %myjob.sroa.0.0..sroa_idx, align 8, !tbaa.struct !82
  %myjob.sroa.4.0..sroa_idx327 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 1
  %myjob.sroa.4.0.copyload = load i8*, i8** %myjob.sroa.4.0..sroa_idx327, align 8, !tbaa.struct !83
  %myjob.sroa.6333.0..sroa_idx334 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 5
  %myjob.sroa.6333.0.copyload = load i32, i32* %myjob.sroa.6333.0..sroa_idx334, align 4
  %myjob.sroa.8340.0..sroa_idx341 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 1
  %myjob.sroa.8340.0.copyload = load i32 (i8*, i32, i8*)*, i32 (i8*, i32, i8*)** %myjob.sroa.8340.0..sroa_idx341, align 8, !tbaa.struct !84
  %myjob.sroa.10347.0..sroa_idx348 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 7
  %myjob.sroa.10347.0.copyload = load i8*, i8** %myjob.sroa.10347.0..sroa_idx348, align 8, !tbaa.struct !85
  %inc201 = add nsw i32 %myjob.sroa.6333.0.copyload, 1
  store i32 %inc201, i32* %myjob.sroa.6333.0..sroa_idx334, align 4, !tbaa !31
  %extent203 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 6
  %85 = load i32, i32* %extent203, align 8, !tbaa !32
  %dec204 = add nsw i32 %85, -1
  store i32 %dec204, i32* %extent203, align 8, !tbaa !32
  %cmp207 = icmp eq i32 %dec204, 0
  br i1 %cmp207, label %if.then208, label %if.end210

if.then208:                                       ; preds = %if.else198
  %next_job209 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 2
  %86 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job209, align 8, !tbaa !67
  store %"struct.Halide::Runtime::Internal::work"* %86, %"struct.Halide::Runtime::Internal::work"** %prev_ptr.1519, align 8, !tbaa !14
  br label %if.end210

if.end210:                                        ; preds = %if.then208, %if.else198
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #15
  %tobool211.not = icmp eq i32 (i8*, i32, i8*)* %myjob.sroa.8340.0.copyload, null
  br i1 %tobool211.not, label %if.else220, label %if.then212

if.then212:                                       ; preds = %if.end210
  %call219 = tail call i32 @halide_do_task(i8* %myjob.sroa.10347.0.copyload, i32 (i8*, i32, i8*)* nonnull %myjob.sroa.8340.0.copyload, i32 %myjob.sroa.6333.0.copyload, i8* %myjob.sroa.4.0.copyload) #15
  br label %if.end230

if.else220:                                       ; preds = %if.end210
  %87 = bitcast %"struct.Halide::Runtime::Internal::work"* %job.1515 to i8*
  %call228 = tail call i32 @halide_do_loop_task(i8* %myjob.sroa.10347.0.copyload, i32 (i8*, i32, i32, i8*, i8*)* %myjob.sroa.0.0.copyload, i32 %myjob.sroa.6333.0.copyload, i32 1, i8* %myjob.sroa.4.0.copyload, i8* %87) #15
  br label %if.end230

if.end230:                                        ; preds = %if.else220, %if.then212
  %result.1 = phi i32 [ %call219, %if.then212 ], [ %call228, %if.else220 ]
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #15
  %cmp237.not = icmp eq i32 %result.1, 0
  br i1 %cmp237.not, label %if.end271, label %if.then238

if.then238:                                       ; preds = %if.end230, %if.end230.thread505
  %result.2510 = phi i32 [ %result.0.lcssa, %if.end230.thread505 ], [ %result.1, %if.end230 ]
  %exit_status239 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 9
  store i32 %result.2510, i32* %exit_status239, align 4, !tbaa !47
  %sibling_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 4
  %88 = load i32, i32* %sibling_count, align 8, !tbaa !45
  %cmp240540 = icmp sgt i32 %88, 0
  br i1 %cmp240540, label %do.end243.lr.ph, label %if.end271

do.end243.lr.ph:                                  ; preds = %if.then238
  %siblings244 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 3
  %89 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %siblings244, align 8, !tbaa !44
  %wide.trip.count = zext i32 %88 to i64
  br label %do.end243

do.end243:                                        ; preds = %for.inc, %do.end243.lr.ph
  %indvars.iv = phi i64 [ 0, %do.end243.lr.ph ], [ %indvars.iv.next, %for.inc ]
  %wake_owners.0541 = phi i8 [ 0, %do.end243.lr.ph ], [ %wake_owners.1, %for.inc ]
  %exit_status245 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %89, i64 %indvars.iv, i32 9
  %90 = load i32, i32* %exit_status245, align 4, !tbaa !47
  %cmp246 = icmp eq i32 %90, 0
  br i1 %cmp246, label %if.then247, label %for.inc

if.then247:                                       ; preds = %do.end243
  store i32 %result.2510, i32* %exit_status245, align 4, !tbaa !47
  %91 = load i32, i32* %active_workers132, align 8, !tbaa !64
  %cmp253 = icmp eq i32 %91, 0
  br i1 %cmp253, label %land.rhs254, label %land.end260

land.rhs254:                                      ; preds = %if.then247
  %owner_is_sleeping258 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %89, i64 %indvars.iv, i32 11
  %92 = load i8, i8* %owner_is_sleeping258, align 4, !tbaa !43, !range !21
  br label %land.end260

land.end260:                                      ; preds = %land.rhs254, %if.then247
  %93 = phi i8 [ 0, %if.then247 ], [ %92, %land.rhs254 ]
  %94 = and i8 %wake_owners.0541, 1
  %or = or i8 %93, %94
  br label %for.inc

for.inc:                                          ; preds = %land.end260, %do.end243
  %wake_owners.1 = phi i8 [ %or, %land.end260 ], [ %wake_owners.0541, %do.end243 ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %if.end271, label %do.end243, !llvm.loop !86

if.end271:                                        ; preds = %for.inc, %if.then238, %if.end230, %if.then194, %if.else190
  %wake_owners.2 = phi i8 [ 0, %if.end230 ], [ 0, %if.else190 ], [ 0, %if.then194 ], [ 0, %if.then238 ], [ %wake_owners.1, %for.inc ]
  %95 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %parent_job134, align 8, !tbaa !46
  %cmp273 = icmp eq %"struct.Halide::Runtime::Internal::work"* %95, null
  %96 = load i32, i32* %min_threads138, align 4, !tbaa !37
  br i1 %cmp273, label %if.then274, label %if.else281

if.then274:                                       ; preds = %if.end271
  %97 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !61
  %sub277 = sub nsw i32 %97, %96
  store i32 %sub277, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !61
  br label %if.end290

if.else281:                                       ; preds = %if.end271
  %threads_reserved285 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %95, i64 0, i32 6
  %98 = load i32, i32* %threads_reserved285, align 8, !tbaa !65
  %sub286 = sub nsw i32 %98, %96
  store i32 %sub286, i32* %threads_reserved285, align 8, !tbaa !65
  br label %if.end290

if.end290:                                        ; preds = %if.else281, %if.then274
  %99 = load i32, i32* %active_workers132, align 8, !tbaa !64
  %dec292 = add nsw i32 %99, -1
  store i32 %dec292, i32* %active_workers132, align 8, !tbaa !64
  %100 = and i8 %wake_owners.2, 1
  %tobool296.not = icmp eq i8 %100, 0
  br i1 %tobool296.not, label %lor.lhs.false297, label %if.then310

lor.lhs.false297:                                 ; preds = %if.end290
  %cmp299 = icmp eq i32 %dec292, 0
  br i1 %cmp299, label %land.lhs.true300, label %while.cond.backedge

land.lhs.true300:                                 ; preds = %lor.lhs.false297
  %extent302 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 6
  %101 = load i32, i32* %extent302, align 8, !tbaa !32
  %cmp303 = icmp eq i32 %101, 0
  br i1 %cmp303, label %land.lhs.true307, label %lor.lhs.false304

lor.lhs.false304:                                 ; preds = %land.lhs.true300
  %exit_status305 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 9
  %102 = load i32, i32* %exit_status305, align 4, !tbaa !47
  %cmp306.not = icmp eq i32 %102, 0
  br i1 %cmp306.not, label %while.cond.backedge, label %land.lhs.true307

land.lhs.true307:                                 ; preds = %lor.lhs.false304, %land.lhs.true300
  %owner_is_sleeping308 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 11
  %103 = load i8, i8* %owner_is_sleeping308, align 4, !tbaa !43, !range !21
  %tobool309.not = icmp eq i8 %103, 0
  br i1 %tobool309.not, label %while.cond.backedge, label %if.then310

if.then310:                                       ; preds = %land.lhs.true307, %if.end290
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10)) #15
  br label %while.cond.backedge

while.cond.backedge:                              ; preds = %if.then310, %land.lhs.true307, %lor.lhs.false304, %lor.lhs.false297, %if.end124, %if.else108, %if.then107, %if.then15, %while.end
  %spin_count.0.be = phi i32 [ %spin_count.0, %while.end ], [ %spin_count.0, %if.then15 ], [ %inc, %if.then107 ], [ %inc, %if.else108 ], [ %spin_count.1, %if.end124 ], [ 0, %if.then310 ], [ 0, %land.lhs.true307 ], [ 0, %lor.lhs.false304 ], [ 0, %lor.lhs.false297 ]
  br label %while.cond, !llvm.loop !87

while.end316:                                     ; preds = %cond.end, %cond.false
  ret void
}

; Function Attrs: nounwind
define weak void @halide_mutex_unlock(%struct.halide_mutex* %mutex) local_unnamed_addr #4 {
entry:
  %control.i.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", align 8
  %state.i = getelementptr %struct.halide_mutex, %struct.halide_mutex* %mutex, i64 0, i32 0, i64 0
  %0 = cmpxchg weak i64* %state.i, i64 1, i64 0 release monotonic
  %1 = extractvalue { i64, i1 } %0, 1
  br i1 %1, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %2 = cmpxchg i64* %state.i, i64 1, i64 0 release monotonic
  %3 = extractvalue { i64, i1 } %2, 1
  br i1 %3, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit, label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i
  %4 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %4) #11
  %5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8, !tbaa !48
  %lock_state2.i.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 1
  store i64* %state.i, i64** %lock_state2.i.i.i, align 8, !tbaa !50
  %6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0
  %7 = ptrtoint %struct.halide_mutex* %mutex to i64
  %call3.i.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control10unpark_oneEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %6, i64 %7) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %4) #11
  br label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit

_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit: ; preds = %if.end.i.i, %if.then.i, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control10unpark_oneEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i64 %addr) local_unnamed_addr #0 align 2 {
entry:
  %call = tail call nonnull align 8 dereferenceable(24) %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* @_ZN6Halide7Runtime8Internal15Synchronization11lock_bucketEy(i64 %addr) #15
  %head = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 1
  %0 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head, align 8, !tbaa !14
  %tail = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 2
  %1 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::parking_control"* %this to i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)***
  %state.i60 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0, i32 0
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0
  br label %while.cond

while.cond:                                       ; preds = %cleanup, %entry
  %data_location.0 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** [ %head, %entry ], [ %data_location.1, %cleanup ]
  %prev.0 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ null, %entry ], [ %prev.1, %cleanup ]
  %data.0 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %0, %entry ], [ %data.1, %cleanup ]
  %retval.0 = phi i64 [ undef, %entry ], [ %retval.1, %cleanup ]
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, null
  br i1 %cmp.not, label %while.end22, label %while.body

while.body:                                       ; preds = %while.cond
  %sleep_address = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 1
  %2 = load atomic i64, i64* %sleep_address monotonic, align 8
  %cmp2 = icmp eq i64 %2, %addr
  %next3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 2
  %3 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next3, align 8, !tbaa !88
  br i1 %cmp2, label %if.then, label %cleanup

if.then:                                          ; preds = %while.body
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %3, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %data_location.0, align 8, !tbaa !14
  %4 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8, !tbaa !93
  %cmp4 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %4, %data.0
  br i1 %cmp4, label %if.then5, label %while.cond7.preheader

while.cond7.preheader:                            ; preds = %if.then
  %cmp872.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %3, null
  br i1 %cmp872.not, label %if.end, label %while.body9

if.then5:                                         ; preds = %if.then
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %prev.0, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8, !tbaa !93
  br label %if.end

while.body9:                                      ; preds = %while.cond7.preheader, %while.body9
  %data2.073 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %6, %while.body9 ], [ %3, %while.cond7.preheader ]
  %sleep_address10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data2.073, i64 0, i32 1
  %5 = load atomic i64, i64* %sleep_address10 monotonic, align 8
  %cmp11 = icmp eq i64 %5, %addr
  %next12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data2.073, i64 0, i32 2
  %6 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next12, align 8, !tbaa !88
  %cmp8 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %6, null
  %7 = or i1 %cmp11, %cmp8
  br i1 %7, label %if.end.loopexit, label %while.body9, !llvm.loop !96

if.end.loopexit:                                  ; preds = %while.body9
  %frombool = zext i1 %cmp11 to i8
  br label %if.end

if.end:                                           ; preds = %if.end.loopexit, %if.then5, %while.cond7.preheader
  %more_waiters.1 = phi i8 [ 0, %if.then5 ], [ 0, %while.cond7.preheader ], [ %frombool, %if.end.loopexit ]
  %tobool13 = icmp ne i8 %more_waiters.1, 0
  %vtable = load i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)**, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*** %1, align 8, !tbaa !48
  %vfn = getelementptr inbounds i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)** %vtable, i64 2
  %8 = load i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)** %vfn, align 8
  %call14 = tail call i64 %8(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i32 1, i1 zeroext %tobool13) #14
  %unpark_info = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 3
  store i64 %call14, i64* %unpark_info, align 8, !tbaa !97
  %mutex.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 0, i32 0
  %call.i = tail call i32 @pthread_mutex_lock(%struct.pthread_mutex_t* nonnull %mutex.i) #14
  %9 = atomicrmw and i64* %state.i60, i64 -2 release
  %and.i61 = and i64 %9, 2
  %cmp.i62 = icmp ne i64 %and.i61, 0
  %cmp3.not.i63 = icmp ult i64 %9, 4
  %or.cond.i64 = or i1 %cmp3.not.i63, %cmp.i62
  br i1 %or.cond.i64, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66, label %if.then.i65

if.then.i65:                                      ; preds = %if.end
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #14
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66

_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66: ; preds = %if.then.i65, %if.end
  %should_park.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 0, i32 2
  store i8 0, i8* %should_park.i, align 8, !tbaa !98
  %condvar.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 0, i32 1
  %call.i67 = tail call i32 @pthread_cond_signal(%struct.pthread_mutex_t* nonnull %condvar.i) #14
  %call.i69 = tail call i32 @pthread_mutex_unlock(%struct.pthread_mutex_t* nonnull %mutex.i) #14
  %10 = zext i8 %more_waiters.1 to i64
  br label %cleanup

cleanup:                                          ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66, %while.body
  %data_location.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** [ %data_location.0, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66 ], [ %next3, %while.body ]
  %prev.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %prev.0, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66 ], [ %data.0, %while.body ]
  %data.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %data.0, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66 ], [ %3, %while.body ]
  %retval.1 = phi i64 [ %10, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66 ], [ %retval.0, %while.body ]
  br i1 %cmp2, label %cleanup27, label %while.cond, !llvm.loop !99

while.end22:                                      ; preds = %while.cond
  %vtable23 = load i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)**, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*** %1, align 8, !tbaa !48
  %vfn24 = getelementptr inbounds i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)** %vtable23, i64 2
  %11 = load i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)** %vfn24, align 8
  %call25 = tail call i64 %11(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i32 0, i1 zeroext false) #14
  %12 = atomicrmw and i64* %state.i60, i64 -2 release
  %and.i = and i64 %12, 2
  %cmp.i = icmp ne i64 %and.i, 0
  %cmp3.not.i = icmp ult i64 %12, 4
  %or.cond.i = or i1 %cmp3.not.i, %cmp.i
  br i1 %or.cond.i, label %cleanup27, label %if.then.i

if.then.i:                                        ; preds = %while.end22
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #14
  br label %cleanup27

cleanup27:                                        ; preds = %cleanup, %if.then.i, %while.end22
  %retval.2 = phi i64 [ 0, %while.end22 ], [ 0, %if.then.i ], [ %retval.1, %cleanup ]
  ret i64 %retval.2
}

; Function Attrs: nounwind mustprogress
define linkonce nonnull align 8 dereferenceable(24) %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* @_ZN6Halide7Runtime8Internal15Synchronization11lock_bucketEy(i64 %addr) local_unnamed_addr #0 {
entry:
  %mul.i = mul i64 %addr, -7046029254386353131
  %shr.i = lshr i64 %mul.i, 54
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i
  %state.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx, i64 0, i32 0, i32 0
  %0 = cmpxchg weak i64* %state.i, i64 0, i64 1 acquire monotonic
  %1 = extractvalue { i64, i1 } %0, 1
  br i1 %1, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #14
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit

_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit: ; preds = %if.then.i, %entry
  ret %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx
}

declare i32 @pthread_mutex_lock(%struct.pthread_mutex_t*) local_unnamed_addr #1

; Function Attrs: nounwind
define linkonce void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %this) local_unnamed_addr #4 align 2 {
entry:
  %state = getelementptr inbounds %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %this, i64 0, i32 0
  %0 = load atomic i64, i64* %state monotonic, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %expected.0 = phi i64 [ %0, %entry ], [ %3, %if.end ]
  %and = and i64 %expected.0, 2
  %tobool.not = icmp ne i64 %and, 0
  %cmp = icmp ult i64 %expected.0, 4
  %or.cond = or i1 %cmp, %tobool.not
  br i1 %or.cond, label %cleanup75, label %if.end

if.end:                                           ; preds = %while.cond
  %or = or i64 %expected.0, 2
  %1 = cmpxchg weak i64* %state, i64 %expected.0, i64 %or acquire monotonic
  %2 = extractvalue { i64, i1 } %1, 1
  %3 = extractvalue { i64, i1 } %1, 0
  br i1 %2, label %while.cond11, label %while.cond

while.cond11:                                     ; preds = %if.end, %cleanup70
  %.pn.pn = phi { i64, i1 } [ %.pn, %cleanup70 ], [ %1, %if.end ]
  %expected.3 = extractvalue { i64, i1 } %.pn.pn, 0
  %and13 = and i64 %expected.3, -4
  %4 = inttoptr i64 %and13 to %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*
  %tail14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %4, i64 0, i32 3
  %tail.0143 = load %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail14, align 8, !tbaa !100
  %cmp16144 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0143, null
  br i1 %cmp16144, label %while.body17, label %while.end23

while.body17:                                     ; preds = %while.cond11, %do.end
  %current.0145 = phi %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* [ %5, %do.end ], [ %4, %while.cond11 ]
  %next18 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %current.0145, i64 0, i32 1
  %5 = load %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %next18, align 8, !tbaa !102
  %cmp19.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %5, null
  br i1 %cmp19.not, label %if.then20, label %do.end

if.then20:                                        ; preds = %while.body17
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([130 x i8], [130 x i8]* @.str.5, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %do.end

do.end:                                           ; preds = %if.then20, %while.body17
  %prev = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %5, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %current.0145, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %prev, align 8, !tbaa !103
  %tail22 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %5, i64 0, i32 3
  %tail.0 = load %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail22, align 8, !tbaa !100
  %cmp16 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0, null
  br i1 %cmp16, label %while.body17, label %while.end23, !llvm.loop !104

while.end23:                                      ; preds = %do.end, %while.cond11
  %tail.0.lcssa = phi %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* [ %tail.0143, %while.cond11 ], [ %tail.0, %do.end ]
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0.lcssa, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail14, align 8, !tbaa !100
  %and25 = and i64 %expected.3, 1
  %tobool26.not = icmp eq i64 %and25, 0
  br i1 %tobool26.not, label %if.end35, label %if.then27

if.then27:                                        ; preds = %while.end23
  %and29 = and i64 %expected.3, -3
  %6 = cmpxchg weak i64* %state, i64 %expected.3, i64 %and29 acq_rel monotonic
  %7 = extractvalue { i64, i1 } %6, 1
  br i1 %7, label %cleanup75, label %cleanup70

if.end35:                                         ; preds = %while.end23
  %prev36 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0.lcssa, i64 0, i32 2
  %8 = load %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %prev36, align 8, !tbaa !103
  %cmp37 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %8, null
  br i1 %cmp37, label %while.body41, label %if.else62

while.body41:                                     ; preds = %if.end35, %if.end47
  %expected.5146 = phi i64 [ %11, %if.end47 ], [ %expected.3, %if.end35 ]
  %and43 = and i64 %expected.5146, 1
  %9 = cmpxchg weak i64* %state, i64 %expected.5146, i64 %and43 acq_rel monotonic
  %10 = extractvalue { i64, i1 } %9, 1
  br i1 %10, label %if.end66, label %if.end47

if.end47:                                         ; preds = %while.body41
  %11 = extractvalue { i64, i1 } %9, 0
  %cmp49 = icmp ult i64 %11, 4
  br i1 %cmp49, label %while.body41, label %cleanup70, !llvm.loop !105

if.else62:                                        ; preds = %if.end35
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %8, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail14, align 8, !tbaa !100
  %12 = atomicrmw and i64* %state, i64 -3 release
  br label %if.end66

if.end66:                                         ; preds = %while.body41, %if.else62
  %mutex.i103 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0.lcssa, i64 0, i32 0, i32 0
  %call.i104 = tail call i32 @pthread_mutex_lock(%struct.pthread_mutex_t* nonnull %mutex.i103) #14
  %should_park.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0.lcssa, i64 0, i32 0, i32 2
  store i8 0, i8* %should_park.i, align 8, !tbaa !98
  %condvar.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0.lcssa, i64 0, i32 0, i32 1
  %call.i101 = tail call i32 @pthread_cond_signal(%struct.pthread_mutex_t* nonnull %condvar.i) #14
  %call.i = tail call i32 @pthread_mutex_unlock(%struct.pthread_mutex_t* nonnull %mutex.i103) #14
  br label %cleanup75

cleanup70:                                        ; preds = %if.end47, %if.then27
  %.pn = phi { i64, i1 } [ %6, %if.then27 ], [ %9, %if.end47 ]
  fence acquire
  br label %while.cond11

cleanup75:                                        ; preds = %while.cond, %if.then27, %if.end66
  ret void
}

declare i32 @pthread_cond_signal(%struct.pthread_mutex_t*) local_unnamed_addr #1

declare i32 @pthread_mutex_unlock(%struct.pthread_mutex_t*) local_unnamed_addr #1

; Function Attrs: nounwind
define linkonce void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %this) local_unnamed_addr #4 align 2 {
entry:
  %node = alloca %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", align 8
  %state = getelementptr inbounds %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %this, i64 0, i32 0
  %0 = load atomic i64, i64* %state monotonic, align 8
  %1 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node to i8*
  %should_park.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, i64 0, i32 0, i32 2
  %mutex2.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, i64 0, i32 0, i32 0
  %condvar3.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, i64 0, i32 0, i32 1
  %next.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, i64 0, i32 1
  %tail.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, i64 0, i32 3
  %2 = ptrtoint %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node to i64
  %3 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %next.i to <2 x %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*>*
  br label %while.cond.outer

while.cond.outer:                                 ; preds = %while.cond.outer.backedge, %entry
  %expected.0.ph = phi i64 [ %0, %entry ], [ %expected.0.ph.be, %while.cond.outer.backedge ]
  %spinner.sroa.0.0.ph = phi i32 [ 40, %entry ], [ %spinner.sroa.0.0.ph.be, %while.cond.outer.backedge ]
  %and46 = and i64 %expected.0.ph, 1
  %tobool.not47 = icmp eq i64 %and46, 0
  br i1 %tobool.not47, label %if.then, label %if.end4

if.then:                                          ; preds = %while.cond.outer, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit
  %expected.048 = phi i64 [ %6, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit ], [ %expected.0.ph, %while.cond.outer ]
  %or = or i64 %expected.048, 1
  %4 = cmpxchg weak i64* %state, i64 %expected.048, i64 %or acquire monotonic
  %5 = extractvalue { i64, i1 } %4, 1
  br i1 %5, label %cleanup23, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit: ; preds = %if.then
  %6 = extractvalue { i64, i1 } %4, 0
  %and = and i64 %6, 1
  %tobool.not = icmp eq i64 %and, 0
  br i1 %tobool.not, label %if.then, label %if.end4.loopexit

if.end4.loopexit:                                 ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit
  %7 = extractvalue { i64, i1 } %4, 0
  br label %if.end4

if.end4:                                          ; preds = %if.end4.loopexit, %while.cond.outer
  %expected.0.lcssa = phi i64 [ %expected.0.ph, %while.cond.outer ], [ %7, %if.end4.loopexit ]
  %cmp.not = icmp ugt i64 %expected.0.lcssa, 3
  %cmp.i = icmp sgt i32 %spinner.sroa.0.0.ph, 0
  %or.cond = and i1 %cmp.i, %cmp.not
  br i1 %or.cond, label %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit, label %if.end9

_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit: ; preds = %if.end4
  %cmp4.i = icmp sgt i32 %spinner.sroa.0.0.ph, 1
  br i1 %cmp4.i, label %if.then7, label %if.end9

if.then7:                                         ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit
  %dec.i = add nsw i32 %spinner.sroa.0.0.ph, -1
  call void @halide_thread_yield() #14
  %8 = load atomic i64, i64* %state monotonic, align 8
  br label %while.cond.outer.backedge

if.end9:                                          ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit, %if.end4
  %spinner.sroa.0.2 = phi i32 [ %spinner.sroa.0.0.ph, %if.end4 ], [ 0, %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit ]
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %1) #11
  store i8 0, i8* %should_park.i.i, align 8, !tbaa !98
  %call.i.i29 = call i32 @pthread_mutex_init(%struct.pthread_mutex_t* nonnull %mutex2.i.i, i8* null) #14
  %call4.i.i = call i32 @pthread_cond_init(%struct.pthread_mutex_t* nonnull %condvar3.i.i, i8* null) #14
  store <2 x %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*> zeroinitializer, <2 x %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*>* %3, align 8, !tbaa !14
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* null, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail.i, align 8, !tbaa !100
  store i8 1, i8* %should_park.i.i, align 8, !tbaa !98
  %and10 = and i64 %expected.0.lcssa, -4
  %cmp11 = icmp eq i64 %and10, 0
  br i1 %cmp11, label %if.then12, label %if.else

if.then12:                                        ; preds = %if.end9
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail.i, align 8, !tbaa !100
  br label %if.end13

if.else:                                          ; preds = %if.end9
  %9 = inttoptr i64 %and10 to %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %9, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %next.i, align 8, !tbaa !102
  br label %if.end13

if.end13:                                         ; preds = %if.else, %if.then12
  %and15 = and i64 %expected.0.lcssa, 3
  %or16 = or i64 %and15, %2
  %10 = cmpxchg weak i64* %state, i64 %expected.0.lcssa, i64 %or16 release monotonic
  %11 = extractvalue { i64, i1 } %10, 1
  br i1 %11, label %if.then19, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_release_relaxedEPyS4_S4_.exit

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_release_relaxedEPyS4_S4_.exit: ; preds = %if.end13
  %12 = extractvalue { i64, i1 } %10, 0
  br label %if.end22

if.then19:                                        ; preds = %if.end13
  %call.i = call i32 @pthread_mutex_lock(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #14
  %13 = load i8, i8* %should_park.i.i, align 8, !tbaa !98, !range !21
  %tobool.not6.i = icmp eq i8 %13, 0
  br i1 %tobool.not6.i, label %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, label %while.body.i

while.body.i:                                     ; preds = %if.then19, %while.body.i
  %call3.i = call i32 @pthread_cond_wait(%struct.pthread_mutex_t* nonnull %condvar3.i.i, %struct.pthread_mutex_t* nonnull %mutex2.i.i) #14
  %14 = load i8, i8* %should_park.i.i, align 8, !tbaa !98, !range !21
  %tobool.not.i = icmp eq i8 %14, 0
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, label %while.body.i, !llvm.loop !106

_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit: ; preds = %while.body.i, %if.then19
  %call5.i = call i32 @pthread_mutex_unlock(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #14
  %15 = load atomic i64, i64* %state monotonic, align 8
  br label %if.end22

if.end22:                                         ; preds = %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_release_relaxedEPyS4_S4_.exit
  %expected.3 = phi i64 [ %15, %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit ], [ %12, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_release_relaxedEPyS4_S4_.exit ]
  %spinner.sroa.0.3 = phi i32 [ 40, %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit ], [ %spinner.sroa.0.2, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_release_relaxedEPyS4_S4_.exit ]
  %call.i.i = call i32 @pthread_cond_destroy(%struct.pthread_mutex_t* nonnull %condvar3.i.i) #14
  %call2.i.i = call i32 @pthread_mutex_destroy(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #14
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %1) #11
  br label %while.cond.outer.backedge

while.cond.outer.backedge:                        ; preds = %if.end22, %if.then7
  %expected.0.ph.be = phi i64 [ %8, %if.then7 ], [ %expected.3, %if.end22 ]
  %spinner.sroa.0.0.ph.be = phi i32 [ %dec.i, %if.then7 ], [ %spinner.sroa.0.3, %if.end22 ]
  br label %while.cond.outer

cleanup23:                                        ; preds = %if.then
  ret void
}

declare i32 @pthread_mutex_init(%struct.pthread_mutex_t*, i8*) local_unnamed_addr #1

declare i32 @pthread_cond_init(%struct.pthread_mutex_t*, i8*) local_unnamed_addr #1

declare i32 @pthread_cond_wait(%struct.pthread_mutex_t*, %struct.pthread_mutex_t*) local_unnamed_addr #1

declare i32 @pthread_cond_destroy(%struct.pthread_mutex_t*) local_unnamed_addr #1

declare i32 @pthread_mutex_destroy(%struct.pthread_mutex_t*) local_unnamed_addr #1

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr zeroext i1 @_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control8validateERNS2_15validate_actionE(%"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* nonnull dereferenceable(16) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) unnamed_addr #2 align 2 {
entry:
  %lock_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %this, i64 0, i32 1
  %0 = load i64*, i64** %lock_state, align 8, !tbaa !50
  %1 = load atomic i64, i64* %0 monotonic, align 8
  %cmp = icmp eq i64 %1, 3
  ret i1 %cmp
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr void @_ZN6Halide7Runtime8Internal15Synchronization15parking_control12before_sleepEv(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this) unnamed_addr #2 align 2 {
entry:
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr i64 @_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control6unparkEib(%"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* nonnull dereferenceable(16) %this, i32 %unparked, i1 zeroext %more_waiters) unnamed_addr #2 align 2 {
entry:
  %0 = select i1 %more_waiters, i64 2, i64 0
  %lock_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %this, i64 0, i32 1
  %1 = load i64*, i64** %lock_state, align 8, !tbaa !50
  store atomic i64 %0, i64* %1 release, align 8
  ret i64 0
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr void @_ZN6Halide7Runtime8Internal15Synchronization15parking_control16requeue_callbackERKNS2_15validate_actionEbb(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action, i1 zeroext %one_to_wake, i1 zeroext %some_requeued) unnamed_addr #2 align 2 {
entry:
  ret void
}

; Function Attrs: nounwind
define weak void @halide_cond_broadcast(%struct.halide_mutex* %cond) local_unnamed_addr #4 {
entry:
  %control.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", align 8
  %state.i = getelementptr %struct.halide_mutex, %struct.halide_mutex* %cond, i64 0, i32 0, i64 0
  %0 = load atomic i64, i64* %state.i monotonic, align 8
  %cmp.i = icmp eq i64 %0, 0
  br i1 %cmp.i, label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond9broadcastEv.exit, label %if.end.i

if.end.i:                                         ; preds = %entry
  %1 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1) #11
  %2 = inttoptr i64 %0 to %"class.Halide::Runtime::Internal::Synchronization::word_lock"*
  %3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization25broadcast_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8, !tbaa !48
  %cond_state2.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 1
  store i64* %state.i, i64** %cond_state2.i.i, align 8, !tbaa !107
  %mutex3.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 2
  store %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %2, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex3.i.i, align 8, !tbaa !109
  %4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0
  %5 = ptrtoint %struct.halide_mutex* %cond to i64
  %call.i = call i32 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control14unpark_requeueEyyy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %4, i64 %5, i64 %0, i64 0) #14
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1) #11
  br label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond9broadcastEv.exit

_ZN6Halide7Runtime8Internal15Synchronization9fast_cond9broadcastEv.exit: ; preds = %if.end.i, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define weak zeroext i1 @halide_default_semaphore_try_acquire(%struct.halide_semaphore_t* %s, i32 %n) #0 {
entry:
  %cmp = icmp eq i32 %n, 0
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %value = bitcast %struct.halide_semaphore_t* %s to i32*
  %0 = load atomic i32, i32* %value acquire, align 4
  %sub12 = sub nsw i32 %0, %n
  %cmp113 = icmp sgt i32 %sub12, -1
  br i1 %cmp113, label %land.rhs, label %return

land.rhs:                                         ; preds = %if.end, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit
  %sub15 = phi i32 [ %sub, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit ], [ %sub12, %if.end ]
  %expected.014 = phi i32 [ %3, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit ], [ %0, %if.end ]
  %1 = cmpxchg weak i32* %value, i32 %expected.014, i32 %sub15 acq_rel monotonic
  %2 = extractvalue { i32, i1 } %1, 1
  br i1 %2, label %return.loopexit, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit: ; preds = %land.rhs
  %3 = extractvalue { i32, i1 } %1, 0
  %sub = sub nsw i32 %3, %n
  %cmp1 = icmp sgt i32 %sub, -1
  br i1 %cmp1, label %land.rhs, label %return.loopexit

return.loopexit:                                  ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit, %land.rhs
  %4 = extractvalue { i32, i1 } %1, 1
  br label %return

return:                                           ; preds = %return.loopexit, %if.end, %entry
  %retval.0 = phi i1 [ true, %entry ], [ false, %if.end ], [ %4, %return.loopexit ]
  ret i1 %retval.0
}

; Function Attrs: nounwind
define weak void @halide_cond_wait(%struct.halide_mutex* %cond, %struct.halide_mutex* %mutex) local_unnamed_addr #4 {
entry:
  %control.i.i.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", align 8
  %control.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", align 8
  %0 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %0) #11
  %state.i = getelementptr %struct.halide_mutex, %struct.halide_mutex* %cond, i64 0, i32 0, i64 0
  %1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization20wait_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %1, align 8, !tbaa !48
  %cond_state2.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 1
  store i64* %state.i, i64** %cond_state2.i.i, align 8, !tbaa !110
  %mutex3.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 2
  %2 = bitcast %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex3.i.i to %struct.halide_mutex**
  store %struct.halide_mutex* %mutex, %struct.halide_mutex** %2, align 8, !tbaa !112
  %3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0
  %4 = ptrtoint %struct.halide_mutex* %cond to i64
  %call.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control4parkEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %3, i64 %4) #14
  %5 = ptrtoint %struct.halide_mutex* %mutex to i64
  %cmp.not.i = icmp eq i64 %call.i, %5
  %6 = getelementptr %struct.halide_mutex, %struct.halide_mutex* %mutex, i64 0, i32 0, i64 0
  br i1 %cmp.not.i, label %if.else.i, label %if.then.i

if.then.i:                                        ; preds = %entry
  %7 = cmpxchg weak i64* %6, i64 0, i64 1 acquire monotonic
  %8 = extractvalue { i64, i1 } %7, 1
  br i1 %8, label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit, label %if.then.i.i

if.then.i.i:                                      ; preds = %if.then.i
  %9 = load atomic i64, i64* %6 monotonic, align 8
  %10 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i.i to i8*
  %11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i.i, i64 0, i32 0, i32 0
  %lock_state2.i.i.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i.i, i64 0, i32 1
  %12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i.i, i64 0, i32 0
  br label %while.cond.outer.i.i.i

while.cond.outer.i.i.i:                           ; preds = %while.cond.outer.i.i.i.backedge, %if.then.i.i
  %expected.0.ph.i.i.i = phi i64 [ %9, %if.then.i.i ], [ %expected.0.ph.i.i.i.be, %while.cond.outer.i.i.i.backedge ]
  %spinner.sroa.0.0.ph.i.i.i = phi i32 [ 40, %if.then.i.i ], [ %spinner.sroa.0.0.ph.i.i.i.be, %while.cond.outer.i.i.i.backedge ]
  %and55.i.i.i = and i64 %expected.0.ph.i.i.i, 1
  %tobool.not56.i.i.i = icmp eq i64 %and55.i.i.i, 0
  br i1 %tobool.not56.i.i.i, label %if.then.i.i.i, label %if.end4.i.i.i

if.then.i.i.i:                                    ; preds = %while.cond.outer.i.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i.i
  %expected.057.i.i.i = phi i64 [ %15, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i.i ], [ %expected.0.ph.i.i.i, %while.cond.outer.i.i.i ]
  %or.i.i.i = or i64 %expected.057.i.i.i, 1
  %13 = cmpxchg weak i64* %6, i64 %expected.057.i.i.i, i64 %or.i.i.i acquire monotonic
  %14 = extractvalue { i64, i1 } %13, 1
  br i1 %14, label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i.i

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i.i: ; preds = %if.then.i.i.i
  %15 = extractvalue { i64, i1 } %13, 0
  %and.i.i.i = and i64 %15, 1
  %tobool.not.i.i.i = icmp eq i64 %and.i.i.i, 0
  br i1 %tobool.not.i.i.i, label %if.then.i.i.i, label %if.end4.i.i.i.loopexit

if.end4.i.i.i.loopexit:                           ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i.i
  %16 = extractvalue { i64, i1 } %13, 0
  br label %if.end4.i.i.i

if.end4.i.i.i:                                    ; preds = %if.end4.i.i.i.loopexit, %while.cond.outer.i.i.i
  %expected.0.lcssa.i.i.i = phi i64 [ %expected.0.ph.i.i.i, %while.cond.outer.i.i.i ], [ %16, %if.end4.i.i.i.loopexit ]
  %cmp.i.i.i.i = icmp sgt i32 %spinner.sroa.0.0.ph.i.i.i, 0
  br i1 %cmp.i.i.i.i, label %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i.i, label %if.end8.i.i.i

_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i.i: ; preds = %if.end4.i.i.i
  %cmp4.i.not.i.i.i = icmp eq i32 %spinner.sroa.0.0.ph.i.i.i, 1
  br i1 %cmp4.i.not.i.i.i, label %if.end8.i.i.i, label %if.then6.i.i.i

if.then6.i.i.i:                                   ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i.i
  %dec.i.i.i.i = add nsw i32 %spinner.sroa.0.0.ph.i.i.i, -1
  call void @halide_thread_yield() #14
  %17 = load atomic i64, i64* %6 monotonic, align 8
  br label %while.cond.outer.i.i.i.backedge

if.end8.i.i.i:                                    ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i.i, %if.end4.i.i.i
  %spinner.sroa.0.152.i.i.i = phi i32 [ 0, %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i.i ], [ %spinner.sroa.0.0.ph.i.i.i, %if.end4.i.i.i ]
  %and9.i.i.i = and i64 %expected.0.lcssa.i.i.i, 2
  %cmp.i.i.i = icmp eq i64 %and9.i.i.i, 0
  br i1 %cmp.i.i.i, label %if.then10.i.i.i, label %if.end19.i.i.i

if.then10.i.i.i:                                  ; preds = %if.end8.i.i.i
  %or12.i.i.i = or i64 %expected.0.lcssa.i.i.i, 2
  %18 = cmpxchg weak i64* %6, i64 %expected.0.lcssa.i.i.i, i64 %or12.i.i.i monotonic monotonic
  %19 = extractvalue { i64, i1 } %18, 1
  br i1 %19, label %if.end19.i.i.i, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i.i

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i.i: ; preds = %if.then10.i.i.i
  %20 = extractvalue { i64, i1 } %18, 0
  br label %while.cond.outer.i.i.i.backedge

if.end19.i.i.i:                                   ; preds = %if.then10.i.i.i, %if.end8.i.i.i
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %10) #11
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %11, align 8, !tbaa !48
  store i64* %6, i64** %lock_state2.i.i.i.i, align 8, !tbaa !50
  %call21.i.i.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control4parkEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %12, i64 %5) #14
  %cmp22.i.i.i = icmp eq i64 %call21.i.i.i, %5
  br i1 %cmp22.i.i.i, label %cleanup30.critedge.i.i.i, label %if.end24.i.i.i

if.end24.i.i.i:                                   ; preds = %if.end19.i.i.i
  %21 = load atomic i64, i64* %6 monotonic, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %10) #11
  br label %while.cond.outer.i.i.i.backedge

while.cond.outer.i.i.i.backedge:                  ; preds = %if.end24.i.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i.i, %if.then6.i.i.i
  %expected.0.ph.i.i.i.be = phi i64 [ %20, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i.i ], [ %21, %if.end24.i.i.i ], [ %17, %if.then6.i.i.i ]
  %spinner.sroa.0.0.ph.i.i.i.be = phi i32 [ %spinner.sroa.0.152.i.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i.i ], [ 40, %if.end24.i.i.i ], [ %dec.i.i.i.i, %if.then6.i.i.i ]
  br label %while.cond.outer.i.i.i

cleanup30.critedge.i.i.i:                         ; preds = %if.end19.i.i.i
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %10) #11
  br label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit

if.else.i:                                        ; preds = %entry
  %22 = load atomic i64, i64* %6 monotonic, align 8
  %and.i = and i64 %22, 1
  %tobool.not.i = icmp eq i64 %and.i, 0
  br i1 %tobool.not.i, label %if.then2.i, label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit

if.then2.i:                                       ; preds = %if.else.i
  call void @halide_print(i8* null, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @.str.5.6, i64 0, i64 0)) #14
  call void @abort() #14
  br label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit

_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit: ; preds = %if.then.i.i.i, %if.then2.i, %if.else.i, %cleanup30.critedge.i.i.i, %if.then.i
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_loop_task(i8* %user_context, i32 (i8*, i32, i32, i8*, i8*)* %f, i32 %min, i32 %size, i8* %closure, i8* %task_parent) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)*, i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)** @_ZN6Halide7Runtime8Internal19custom_do_loop_taskE, align 8, !tbaa !14
  %call = tail call i32 %0(i8* %user_context, i32 (i8*, i32, i32, i8*, i8*)* %f, i32 %min, i32 %size, i8* %closure, i8* %task_parent) #14
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_task(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %idx, i8* %closure) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 8, !tbaa !14
  %call = tail call i32 %0(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %idx, i8* %closure) #14
  ret i32 %call
}

; Function Attrs: nounwind
define linkonce i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control4parkEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i64 %addr) local_unnamed_addr #4 align 2 {
entry:
  %queue_data = alloca %"struct.Halide::Runtime::Internal::Synchronization::queue_data", align 8
  %action = alloca %"struct.Halide::Runtime::Internal::Synchronization::validate_action", align 8
  %0 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %0) #11
  %should_park.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 0, i32 2
  store i8 0, i8* %should_park.i.i, align 8, !tbaa !98
  %mutex2.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 0, i32 0
  %call.i.i = call i32 @pthread_mutex_init(%struct.pthread_mutex_t* nonnull %mutex2.i.i, i8* null) #14
  %condvar3.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 0, i32 1
  %call4.i.i = call i32 @pthread_cond_init(%struct.pthread_mutex_t* nonnull %condvar3.i.i, i8* null) #14
  %sleep_address.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 1
  store i64 0, i64* %sleep_address.i, align 8, !tbaa !113
  %next.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* null, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next.i, align 8, !tbaa !88
  %unpark_info.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 3
  store i64 0, i64* %unpark_info.i, align 8, !tbaa !97
  %call = call nonnull align 8 dereferenceable(24) %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* @_ZN6Halide7Runtime8Internal15Synchronization11lock_bucketEy(i64 %addr) #15
  %1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1) #11
  store i8 0, i8* %1, align 8, !tbaa !114
  %invalid_unpark_info.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 2
  store i64 0, i64* %invalid_unpark_info.i, align 8, !tbaa !116
  %2 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::parking_control"* %this to i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)***
  %vtable = load i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)**, i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)*** %2, align 8, !tbaa !48
  %3 = load i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)*, i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)** %vtable, align 8
  %call2 = call zeroext i1 %3(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) #14
  br i1 %call2, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %state.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0, i32 0
  %4 = atomicrmw and i64* %state.i, i64 -2 release
  %and.i = and i64 %4, 2
  %cmp.i = icmp ne i64 %and.i, 0
  %cmp3.not.i = icmp ult i64 %4, 4
  %or.cond.i = or i1 %cmp3.not.i, %cmp.i
  br i1 %or.cond.i, label %cleanup, label %if.then.i

if.then.i:                                        ; preds = %if.then
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0
  call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #14
  br label %cleanup

if.end:                                           ; preds = %entry
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* null, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next.i, align 8, !tbaa !88
  store i64 %addr, i64* %sleep_address.i, align 8, !tbaa !113
  store i8 1, i8* %should_park.i.i, align 8, !tbaa !98
  %head = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 1
  %5 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head, align 8, !tbaa !117
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %5, null
  %tail = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 2
  %6 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8
  %next4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %6, i64 0, i32 2
  %head.sink = select i1 %cmp.not, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next4
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head.sink, align 8, !tbaa !14
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8, !tbaa !93
  %state.i23 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0, i32 0
  %7 = atomicrmw and i64* %state.i23, i64 -2 release
  %and.i24 = and i64 %7, 2
  %cmp.i25 = icmp ne i64 %and.i24, 0
  %cmp3.not.i26 = icmp ult i64 %7, 4
  %or.cond.i27 = or i1 %cmp3.not.i26, %cmp.i25
  br i1 %or.cond.i27, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit29, label %if.then.i28

if.then.i28:                                      ; preds = %if.end
  %mutex8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0
  call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex8) #14
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit29

_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit29: ; preds = %if.then.i28, %if.end
  %8 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::parking_control"* %this to void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)***
  %vtable9 = load void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)**, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)*** %8, align 8, !tbaa !48
  %vfn10 = getelementptr inbounds void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)*, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)** %vtable9, i64 1
  %9 = load void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)*, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)** %vfn10, align 8
  call void %9(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this) #14
  %call.i = call i32 @pthread_mutex_lock(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #14
  %10 = load i8, i8* %should_park.i.i, align 8, !tbaa !98, !range !21
  %tobool.not6.i = icmp eq i8 %10, 0
  br i1 %tobool.not6.i, label %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, label %while.body.i

while.body.i:                                     ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit29, %while.body.i
  %call3.i = call i32 @pthread_cond_wait(%struct.pthread_mutex_t* nonnull %condvar3.i.i, %struct.pthread_mutex_t* nonnull %mutex2.i.i) #14
  %11 = load i8, i8* %should_park.i.i, align 8, !tbaa !98, !range !21
  %tobool.not.i = icmp eq i8 %11, 0
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, label %while.body.i, !llvm.loop !106

_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit: ; preds = %while.body.i, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit29
  %call5.i = call i32 @pthread_mutex_unlock(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #14
  br label %cleanup

cleanup:                                          ; preds = %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, %if.then.i, %if.then
  %unpark_info.i.sink = phi i64* [ %unpark_info.i, %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit ], [ %invalid_unpark_info.i, %if.then ], [ %invalid_unpark_info.i, %if.then.i ]
  %12 = load i64, i64* %unpark_info.i.sink, align 8, !tbaa !22
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1) #11
  %call.i.i22 = call i32 @pthread_cond_destroy(%struct.pthread_mutex_t* nonnull %condvar3.i.i) #14
  %call2.i.i = call i32 @pthread_mutex_destroy(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #14
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %0) #11
  ret i64 %12
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr zeroext i1 @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control8validateERNS2_15validate_actionE(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) unnamed_addr #2 align 2 {
entry:
  %cond_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 1
  %0 = load i64*, i64** %cond_state, align 8, !tbaa !110
  %1 = load atomic i64, i64* %0 monotonic, align 8
  %cmp = icmp eq i64 %1, 0
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 2
  %2 = load %"class.Halide::Runtime::Internal::Synchronization::word_lock"*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex, align 8, !tbaa !112
  %3 = ptrtoint %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %2 to i64
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store atomic i64 %3, i64* %0 monotonic, align 8
  br label %cleanup

if.else:                                          ; preds = %entry
  %cmp4.not = icmp eq i64 %1, %3
  br i1 %cmp4.not, label %cleanup, label %if.then5

if.then5:                                         ; preds = %if.else
  %invalid_unpark_info = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 2
  store i64 %3, i64* %invalid_unpark_info, align 8, !tbaa !116
  br label %cleanup

cleanup:                                          ; preds = %if.then5, %if.else, %if.then
  %retval.0 = phi i1 [ false, %if.then5 ], [ true, %if.else ], [ true, %if.then ]
  ret i1 %retval.0
}

; Function Attrs: nounwind
define linkonce_odr void @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control12before_sleepEv(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this) unnamed_addr #4 align 2 {
entry:
  %control.i.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", align 8
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 2
  %0 = load %"class.Halide::Runtime::Internal::Synchronization::word_lock"*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex, align 8, !tbaa !112
  %state.i = getelementptr inbounds %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %0, i64 0, i32 0
  %1 = cmpxchg weak i64* %state.i, i64 1, i64 0 release monotonic
  %2 = extractvalue { i64, i1 } %1, 1
  br i1 %2, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %3 = cmpxchg i64* %state.i, i64 1, i64 0 release monotonic
  %4 = extractvalue { i64, i1 } %3, 1
  br i1 %4, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit, label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i
  %5 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %5) #11
  %6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %6, align 8, !tbaa !48
  %lock_state2.i.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 1
  store i64* %state.i, i64** %lock_state2.i.i.i, align 8, !tbaa !50
  %7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0
  %8 = ptrtoint %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %0 to i64
  %call3.i.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control10unpark_oneEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %7, i64 %8) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %5) #11
  br label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit

_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit: ; preds = %if.end.i.i, %if.then.i, %entry
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr i64 @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control6unparkEib(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this, i32 %unparked, i1 zeroext %more_waiters) unnamed_addr #2 align 2 {
entry:
  br i1 %more_waiters, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %cond_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 1
  %0 = load i64*, i64** %cond_state, align 8, !tbaa !110
  store atomic i64 0, i64* %0 monotonic, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i64 0
}

; Function Attrs: nounwind
define linkonce i32 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control14unpark_requeueEyyy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i64 %addr_from, i64 %addr_to, i64 %unpark_info) local_unnamed_addr #4 align 2 {
entry:
  %buckets = alloca %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", align 8
  %action = alloca %"struct.Halide::Runtime::Internal::Synchronization::validate_action", align 8
  %0 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %buckets to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %0) #11
  call void @_ZN6Halide7Runtime8Internal15Synchronization16lock_bucket_pairEyy(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* nonnull sret(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair") align 8 %buckets, i64 %addr_from, i64 %addr_to) #15
  %1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1) #11
  store i8 0, i8* %1, align 8, !tbaa !114
  %invalid_unpark_info.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 2
  store i64 0, i64* %invalid_unpark_info.i, align 8, !tbaa !116
  %2 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::parking_control"* %this to i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)***
  %vtable = load i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)**, i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)*** %2, align 8, !tbaa !48
  %3 = load i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)*, i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)** %vtable, align 8
  %call = call zeroext i1 %3(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) #14
  br i1 %call, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  call void @_ZN6Halide7Runtime8Internal15Synchronization18unlock_bucket_pairERNS2_11bucket_pairE(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* nonnull align 8 dereferenceable(16) %buckets) #15
  br label %cleanup

if.end:                                           ; preds = %entry
  %from = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %buckets, i64 0, i32 0
  %4 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %from, align 8, !tbaa !118
  %head = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %4, i64 0, i32 1
  %5 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head, align 8, !tbaa !14
  %cmp.not92 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %5, null
  br i1 %cmp.not92, label %if.end38, label %while.body

while.body:                                       ; preds = %if.end, %if.end22
  %wakeup.098 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %wakeup.2, %if.end22 ], [ null, %if.end ]
  %requeue_tail.097 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %requeue_tail.2, %if.end22 ], [ null, %if.end ]
  %requeue.096 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %requeue.3, %if.end22 ], [ null, %if.end ]
  %data.095 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %7, %if.end22 ], [ %5, %if.end ]
  %prev.094 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %prev.1, %if.end22 ], [ null, %if.end ]
  %data_location.093 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** [ %data_location.1, %if.end22 ], [ %head, %if.end ]
  %sleep_address = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.095, i64 0, i32 1
  %6 = load atomic i64, i64* %sleep_address monotonic, align 8
  %next2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.095, i64 0, i32 2
  %7 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next2, align 8, !tbaa !88
  %cmp3 = icmp eq i64 %6, %addr_from
  br i1 %cmp3, label %if.then4, label %if.end22

if.then4:                                         ; preds = %while.body
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %7, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %data_location.093, align 8, !tbaa !14
  %8 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %from, align 8, !tbaa !118
  %tail = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %8, i64 0, i32 2
  %9 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8, !tbaa !93
  %cmp6 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %9, %data.095
  br i1 %cmp6, label %if.then7, label %if.end10

if.then7:                                         ; preds = %if.then4
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %prev.094, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8, !tbaa !93
  br label %if.end10

if.end10:                                         ; preds = %if.then7, %if.then4
  %10 = load i8, i8* %1, align 8, !tbaa !114, !range !21
  %tobool = icmp ne i8 %10, 0
  %cmp11 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.098, null
  %or.cond = and i1 %cmp11, %tobool
  br i1 %or.cond, label %if.end22, label %if.else

if.else:                                          ; preds = %if.end10
  %cmp13 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue.096, null
  br i1 %cmp13, label %if.end17, label %if.else15

if.else15:                                        ; preds = %if.else
  %next16 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue_tail.097, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.095, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next16, align 8, !tbaa !88
  br label %if.end17

if.end17:                                         ; preds = %if.else15, %if.else
  %requeue.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %requeue.096, %if.else15 ], [ %data.095, %if.else ]
  store atomic i64 %addr_to, i64* %sleep_address monotonic, align 8
  br label %if.end22

if.end22:                                         ; preds = %if.end17, %if.end10, %while.body
  %data_location.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** [ %data_location.093, %if.end10 ], [ %data_location.093, %if.end17 ], [ %next2, %while.body ]
  %prev.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %prev.094, %if.end10 ], [ %prev.094, %if.end17 ], [ %data.095, %while.body ]
  %requeue.3 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %requeue.096, %if.end10 ], [ %requeue.1, %if.end17 ], [ %requeue.096, %while.body ]
  %requeue_tail.2 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %requeue_tail.097, %if.end10 ], [ %data.095, %if.end17 ], [ %requeue_tail.097, %while.body ]
  %wakeup.2 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %data.095, %if.end10 ], [ %wakeup.098, %if.end17 ], [ %wakeup.098, %while.body ]
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %7, null
  br i1 %cmp.not, label %while.end, label %while.body, !llvm.loop !120

while.end:                                        ; preds = %if.end22
  %cmp23.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue.3, null
  br i1 %cmp23.not, label %if.end38, label %if.then24

if.then24:                                        ; preds = %while.end
  %next25 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue_tail.2, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* null, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next25, align 8, !tbaa !88
  %to = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %buckets, i64 0, i32 1
  %11 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %to, align 8, !tbaa !121
  %head26 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %11, i64 0, i32 1
  %12 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head26, align 8, !tbaa !117
  %cmp27 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %12, null
  br i1 %cmp27, label %if.end35, label %if.else31

if.else31:                                        ; preds = %if.then24
  %tail33 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %11, i64 0, i32 2
  %13 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail33, align 8, !tbaa !93
  %next34 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %13, i64 0, i32 2
  br label %if.end35

if.end35:                                         ; preds = %if.else31, %if.then24
  %next34.sink = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** [ %next34, %if.else31 ], [ %head26, %if.then24 ]
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue.3, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next34.sink, align 8, !tbaa !14
  %tail37 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %11, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue_tail.2, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail37, align 8, !tbaa !93
  br label %if.end38

if.end38:                                         ; preds = %if.end35, %while.end, %if.end
  %cmp23106 = phi i1 [ true, %if.end35 ], [ false, %while.end ], [ false, %if.end ]
  %wakeup.0.lcssa105 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %wakeup.2, %if.end35 ], [ %wakeup.2, %while.end ], [ null, %if.end ]
  %cmp39 = icmp ne %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.0.lcssa105, null
  %14 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::parking_control"* %this to void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)***
  %vtable41 = load void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)**, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)*** %14, align 8, !tbaa !48
  %vfn42 = getelementptr inbounds void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)*, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)** %vtable41, i64 3
  %15 = load void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)*, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)** %vfn42, align 8
  call void %15(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action, i1 zeroext %cmp39, i1 zeroext %cmp23106) #14
  br i1 %cmp39, label %if.then44, label %if.else48

if.then44:                                        ; preds = %if.end38
  %unpark_info45 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.0.lcssa105, i64 0, i32 3
  store i64 %unpark_info, i64* %unpark_info45, align 8, !tbaa !97
  %mutex.i89 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.0.lcssa105, i64 0, i32 0, i32 0
  %call.i90 = call i32 @pthread_mutex_lock(%struct.pthread_mutex_t* nonnull %mutex.i89) #14
  call void @_ZN6Halide7Runtime8Internal15Synchronization18unlock_bucket_pairERNS2_11bucket_pairE(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* nonnull align 8 dereferenceable(16) %buckets) #15
  %should_park.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.0.lcssa105, i64 0, i32 0, i32 2
  store i8 0, i8* %should_park.i, align 8, !tbaa !98
  %condvar.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.0.lcssa105, i64 0, i32 0, i32 1
  %call.i88 = call i32 @pthread_cond_signal(%struct.pthread_mutex_t* nonnull %condvar.i) #14
  %call.i = call i32 @pthread_mutex_unlock(%struct.pthread_mutex_t* nonnull %mutex.i89) #14
  br label %if.end49

if.else48:                                        ; preds = %if.end38
  call void @_ZN6Halide7Runtime8Internal15Synchronization18unlock_bucket_pairERNS2_11bucket_pairE(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* nonnull align 8 dereferenceable(16) %buckets) #15
  br label %if.end49

if.end49:                                         ; preds = %if.else48, %if.then44
  %16 = load i8, i8* %1, align 8
  %17 = and i8 %16, 1
  %tobool52 = icmp ne i8 %17, 0
  %18 = and i1 %cmp39, %tobool52
  %conv = zext i1 %18 to i32
  br label %cleanup

cleanup:                                          ; preds = %if.end49, %if.then
  %retval.0 = phi i32 [ %conv, %if.end49 ], [ 0, %if.then ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1) #11
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %0) #11
  ret i32 %retval.0
}

; Function Attrs: nounwind
define linkonce void @_ZN6Halide7Runtime8Internal15Synchronization16lock_bucket_pairEyy(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* noalias sret(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair") align 8 %agg.result, i64 %addr_from, i64 %addr_to) local_unnamed_addr #4 {
entry:
  %mul.i = mul i64 %addr_from, -7046029254386353131
  %shr.i = lshr i64 %mul.i, 54
  %mul.i37 = mul i64 %addr_to, -7046029254386353131
  %shr.i38 = lshr i64 %mul.i37, 54
  %cmp = icmp eq i64 %shr.i, %shr.i38
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i
  %state.i42 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx, i64 0, i32 0, i32 0
  %0 = cmpxchg weak i64* %state.i42, i64 0, i64 1 acquire monotonic
  %1 = extractvalue { i64, i1 } %0, 1
  br i1 %1, label %cleanup, label %if.then.i43

if.then.i43:                                      ; preds = %if.then
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #14
  br label %cleanup

if.else:                                          ; preds = %entry
  %cmp2 = icmp ult i64 %shr.i, %shr.i38
  br i1 %cmp2, label %if.then3, label %if.else9

if.then3:                                         ; preds = %if.else
  %arrayidx5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i
  %arrayidx6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i38
  %state.i52 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx5, i64 0, i32 0, i32 0
  %2 = cmpxchg weak i64* %state.i52, i64 0, i64 1 acquire monotonic
  %3 = extractvalue { i64, i1 } %2, 1
  br i1 %3, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54, label %if.then.i53

if.then.i53:                                      ; preds = %if.then3
  %mutex7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx5, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex7) #14
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54

_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54: ; preds = %if.then.i53, %if.then3
  %state.i49 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx6, i64 0, i32 0, i32 0
  %4 = cmpxchg weak i64* %state.i49, i64 0, i64 1 acquire monotonic
  %5 = extractvalue { i64, i1 } %4, 1
  br i1 %5, label %cleanup, label %if.then.i50

if.then.i50:                                      ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54
  %mutex8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx6, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex8) #14
  br label %cleanup

if.else9:                                         ; preds = %if.else
  %arrayidx11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i38
  %arrayidx13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i
  %state.i39 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx11, i64 0, i32 0, i32 0
  %6 = cmpxchg weak i64* %state.i39, i64 0, i64 1 acquire monotonic
  %7 = extractvalue { i64, i1 } %6, 1
  br i1 %7, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41, label %if.then.i40

if.then.i40:                                      ; preds = %if.else9
  %mutex14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx11, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex14) #14
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41

_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41: ; preds = %if.then.i40, %if.else9
  %state.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx13, i64 0, i32 0, i32 0
  %8 = cmpxchg weak i64* %state.i, i64 0, i64 1 acquire monotonic
  %9 = extractvalue { i64, i1 } %8, 1
  br i1 %9, label %cleanup, label %if.then.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41
  %mutex15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx13, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex15) #14
  br label %cleanup

cleanup:                                          ; preds = %if.then.i, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41, %if.then.i50, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54, %if.then.i43, %if.then
  %arrayidx13.sink = phi %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* [ %arrayidx, %if.then ], [ %arrayidx, %if.then.i43 ], [ %arrayidx5, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54 ], [ %arrayidx5, %if.then.i50 ], [ %arrayidx13, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41 ], [ %arrayidx13, %if.then.i ]
  %arrayidx11.sink = phi %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* [ %arrayidx, %if.then ], [ %arrayidx, %if.then.i43 ], [ %arrayidx6, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54 ], [ %arrayidx6, %if.then.i50 ], [ %arrayidx11, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41 ], [ %arrayidx11, %if.then.i ]
  %from2.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %agg.result, i64 0, i32 0
  store %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx13.sink, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %from2.i, align 8, !tbaa !14
  %to3.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %agg.result, i64 0, i32 1
  store %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx11.sink, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %to3.i, align 8, !tbaa !14
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal15Synchronization18unlock_bucket_pairERNS2_11bucket_pairE(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* nonnull align 8 dereferenceable(16) %buckets) local_unnamed_addr #0 {
entry:
  %from = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %buckets, i64 0, i32 0
  %0 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %from, align 8, !tbaa !118
  %to = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %buckets, i64 0, i32 1
  %1 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %to, align 8, !tbaa !121
  %cmp = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, %1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %state.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, i64 0, i32 0, i32 0
  %2 = atomicrmw and i64* %state.i, i64 -2 release
  %and.i = and i64 %2, 2
  %cmp.i = icmp ne i64 %and.i, 0
  %cmp3.not.i = icmp ult i64 %2, 4
  %or.cond.i = or i1 %cmp3.not.i, %cmp.i
  br i1 %or.cond.i, label %if.end15, label %if.then.i

if.then.i:                                        ; preds = %if.then
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #14
  br label %if.end15

if.else:                                          ; preds = %entry
  %cmp4 = icmp ugt %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, %1
  br i1 %cmp4, label %if.then5, label %if.else10

if.then5:                                         ; preds = %if.else
  %state.i25 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, i64 0, i32 0, i32 0
  %3 = atomicrmw and i64* %state.i25, i64 -2 release
  %and.i26 = and i64 %3, 2
  %cmp.i27 = icmp ne i64 %and.i26, 0
  %cmp3.not.i28 = icmp ult i64 %3, 4
  %or.cond.i29 = or i1 %cmp3.not.i28, %cmp.i27
  br i1 %or.cond.i29, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit31, label %if.then.i30

if.then.i30:                                      ; preds = %if.then5
  %mutex7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex7) #14
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit31

_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit31: ; preds = %if.then.i30, %if.then5
  %4 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %to, align 8, !tbaa !121
  %state.i32 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %4, i64 0, i32 0, i32 0
  %5 = atomicrmw and i64* %state.i32, i64 -2 release
  %and.i33 = and i64 %5, 2
  %cmp.i34 = icmp ne i64 %and.i33, 0
  %cmp3.not.i35 = icmp ult i64 %5, 4
  %or.cond.i36 = or i1 %cmp3.not.i35, %cmp.i34
  br i1 %or.cond.i36, label %if.end15, label %if.then.i37

if.then.i37:                                      ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit31
  %mutex9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %4, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex9) #14
  br label %if.end15

if.else10:                                        ; preds = %if.else
  %state.i39 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %1, i64 0, i32 0, i32 0
  %6 = atomicrmw and i64* %state.i39, i64 -2 release
  %and.i40 = and i64 %6, 2
  %cmp.i41 = icmp ne i64 %and.i40, 0
  %cmp3.not.i42 = icmp ult i64 %6, 4
  %or.cond.i43 = or i1 %cmp3.not.i42, %cmp.i41
  br i1 %or.cond.i43, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit45, label %if.then.i44

if.then.i44:                                      ; preds = %if.else10
  %mutex12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %1, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex12) #14
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit45

_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit45: ; preds = %if.then.i44, %if.else10
  %7 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %from, align 8, !tbaa !118
  %state.i46 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %7, i64 0, i32 0, i32 0
  %8 = atomicrmw and i64* %state.i46, i64 -2 release
  %and.i47 = and i64 %8, 2
  %cmp.i48 = icmp ne i64 %and.i47, 0
  %cmp3.not.i49 = icmp ult i64 %8, 4
  %or.cond.i50 = or i1 %cmp3.not.i49, %cmp.i48
  br i1 %or.cond.i50, label %if.end15, label %if.then.i51

if.then.i51:                                      ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit45
  %mutex14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %7, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex14) #14
  br label %if.end15

if.end15:                                         ; preds = %if.then.i51, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit45, %if.then.i37, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit31, %if.then.i, %if.then
  ret void
}

; Function Attrs: nounwind
define linkonce_odr zeroext i1 @_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control8validateERNS2_15validate_actionE(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) unnamed_addr #4 align 2 {
entry:
  %cond_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 1
  %0 = load i64*, i64** %cond_state, align 8, !tbaa !107
  %1 = load atomic i64, i64* %0 monotonic, align 8
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 2
  %2 = load %"class.Halide::Runtime::Internal::Synchronization::word_lock"*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex, align 8, !tbaa !109
  %3 = ptrtoint %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %2 to i64
  %cmp.not = icmp eq i64 %1, %3
  br i1 %cmp.not, label %if.end, label %cleanup

if.end:                                           ; preds = %entry
  store atomic i64 0, i64* %0 monotonic, align 8
  %4 = load %"class.Halide::Runtime::Internal::Synchronization::word_lock"*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex, align 8, !tbaa !109
  %state.i = getelementptr inbounds %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %4, i64 0, i32 0
  %5 = load atomic i64, i64* %state.i monotonic, align 8
  %and11.i = and i64 %5, 1
  %tobool.not12.i = icmp eq i64 %and11.i, 0
  br i1 %tobool.not12.i, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex21make_parked_if_lockedEv.exit, label %if.end.i

if.end.i:                                         ; preds = %if.end, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i
  %val.013.i = phi i64 [ %8, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i ], [ %5, %if.end ]
  %or.i = or i64 %val.013.i, 2
  %6 = cmpxchg weak i64* %state.i, i64 %val.013.i, i64 %or.i monotonic monotonic
  %7 = extractvalue { i64, i1 } %6, 1
  br i1 %7, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex21make_parked_if_lockedEv.exit, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i: ; preds = %if.end.i
  %8 = extractvalue { i64, i1 } %6, 0
  %and.i = and i64 %8, 1
  %tobool.not.i = icmp eq i64 %and.i, 0
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex21make_parked_if_lockedEv.exit, label %if.end.i

_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex21make_parked_if_lockedEv.exit: ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i, %if.end.i, %if.end
  %tobool.not.lcssa.i = phi i8 [ 1, %if.end ], [ 1, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i ], [ 0, %if.end.i ]
  %unpark_one = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 0
  store i8 %tobool.not.lcssa.i, i8* %unpark_one, align 8, !tbaa !114
  br label %cleanup

cleanup:                                          ; preds = %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex21make_parked_if_lockedEv.exit, %entry
  ret i1 %cmp.not
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control6unparkEib(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i32 %unparked, i1 zeroext %more_waiters) unnamed_addr #2 align 2 {
entry:
  ret i64 0
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr void @_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control16requeue_callbackERKNS2_15validate_actionEbb(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action, i1 zeroext %one_to_wake, i1 zeroext %some_requeued) unnamed_addr #2 align 2 {
entry:
  %unpark_one = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 0
  %0 = load i8, i8* %unpark_one, align 8, !tbaa !114, !range !21
  %tobool.not = icmp ne i8 %0, 0
  %1 = and i1 %tobool.not, %some_requeued
  br i1 %1, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 2
  %2 = load %"class.Halide::Runtime::Internal::Synchronization::word_lock"*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex, align 8, !tbaa !109
  %state.i = getelementptr inbounds %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %2, i64 0, i32 0
  %3 = atomicrmw or i64* %state.i, i64 2 monotonic
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce i32 @_ZN6Halide7Runtime8Internal27default_desired_num_threadsEv() local_unnamed_addr #0 {
entry:
  %call = tail call i8* @getenv(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i64 0, i64 0)) #14
  %tobool.not = icmp eq i8* %call, null
  br i1 %tobool.not, label %if.end, label %cond.true

if.end:                                           ; preds = %entry
  %call1 = tail call i8* @getenv(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0)) #14
  %tobool2.not = icmp eq i8* %call1, null
  br i1 %tobool2.not, label %cond.false, label %cond.true

cond.true:                                        ; preds = %if.end, %entry
  %threads_str.010 = phi i8* [ %call1, %if.end ], [ %call, %entry ]
  %call3 = tail call i32 @atoi(i8* nonnull %threads_str.010) #14
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %call4 = tail call i32 @halide_host_cpu_count() #14
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call3, %cond.true ], [ %call4, %cond.false ]
  ret i32 %cond
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal13worker_threadEPv(i8* %arg) #0 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #15
  %0 = bitcast i8* %arg to %"struct.Halide::Runtime::Internal::work"*
  tail call void @_ZN6Halide7Runtime8Internal28worker_thread_already_lockedEPNS1_4workE(%"struct.Halide::Runtime::Internal::work"* %0) #15
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #15
  ret void
}

; Function Attrs: nounwind mustprogress
define weak %struct.halide_thread* @halide_spawn_thread(void (i8*)* %f, i8* %closure) local_unnamed_addr #0 {
entry:
  %call = tail call i8* @malloc(i64 24) #14
  %f1 = bitcast i8* %call to void (i8*)**
  store void (i8*)* %f, void (i8*)** %f1, align 8, !tbaa !122
  %closure2 = getelementptr inbounds i8, i8* %call, i64 8
  %0 = bitcast i8* %closure2 to i8**
  store i8* %closure, i8** %0, align 8, !tbaa !125
  %handle = getelementptr inbounds i8, i8* %call, i64 16
  %1 = bitcast i8* %handle to i64*
  store i64 0, i64* %1, align 8, !tbaa !126
  %call4 = tail call i32 @pthread_create(i64* nonnull %1, i8* null, i8* (i8*)* nonnull @_ZN6Halide7Runtime8Internal19spawn_thread_helperEPv, i8* %call) #14
  %2 = bitcast i8* %call to %struct.halide_thread*
  ret %struct.halide_thread* %2
}

; Function Attrs: nounwind mustprogress
define linkonce i8* @_ZN6Halide7Runtime8Internal19spawn_thread_helperEPv(i8* %arg) #0 {
entry:
  %f = bitcast i8* %arg to void (i8*)**
  %0 = load void (i8*)*, void (i8*)** %f, align 8, !tbaa !122
  %closure = getelementptr inbounds i8, i8* %arg, i64 8
  %1 = bitcast i8* %closure to i8**
  %2 = load i8*, i8** %1, align 8, !tbaa !125
  tail call void %0(i8* %2) #14
  ret i8* null
}

declare i32 @pthread_create(i64*, i8*, i8* (i8*)*, i8*) local_unnamed_addr #1

declare i8* @getenv(i8*) local_unnamed_addr #1

declare i32 @atoi(i8*) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_parallel_tasks(i8* %user_context, i32 %num_tasks, %struct.halide_parallel_task_t* %tasks, i8* %task_parent) #0 {
entry:
  %conv = sext i32 %num_tasks to i64
  %0 = alloca %"struct.Halide::Runtime::Internal::work", i64 %conv, align 8
  %cmp76 = icmp sgt i32 %num_tasks, 0
  br i1 %cmp76, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.inc, %entry
  %num_tasks.addr.0.lcssa = phi i32 [ %num_tasks, %entry ], [ %num_tasks.addr.1, %for.inc ]
  %cmp17 = icmp eq i32 %num_tasks.addr.0.lcssa, 0
  br i1 %cmp17, label %cleanup, label %if.end19

for.body:                                         ; preds = %entry, %for.inc
  %indvars.iv82 = phi i64 [ %indvars.iv.next83, %for.inc ], [ 0, %entry ]
  %num_tasks.addr.078 = phi i32 [ %num_tasks.addr.1, %for.inc ], [ %num_tasks, %entry ]
  %tasks.addr.077 = phi %struct.halide_parallel_task_t* [ %tasks.addr.1, %for.inc ], [ %tasks, %entry ]
  %extent = getelementptr inbounds %struct.halide_parallel_task_t, %struct.halide_parallel_task_t* %tasks.addr.077, i64 0, i32 6
  %1 = load i32, i32* %extent, align 8, !tbaa !127
  %cmp1 = icmp slt i32 %1, 1
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %dec = add nsw i32 %num_tasks.addr.078, -1
  br label %for.inc

if.end:                                           ; preds = %for.body
  %incdec.ptr = getelementptr inbounds %struct.halide_parallel_task_t, %struct.halide_parallel_task_t* %tasks.addr.077, i64 1
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82
  %2 = bitcast %"struct.Halide::Runtime::Internal::work"* %arrayidx to i8*
  %3 = bitcast %struct.halide_parallel_task_t* %tasks.addr.077 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(56) %2, i8* nonnull align 8 dereferenceable(56) %3, i64 56, i1 false), !tbaa.struct !128
  %task_fn = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 1
  store i32 (i8*, i32, i8*)* null, i32 (i8*, i32, i8*)** %task_fn, align 8, !tbaa !39
  %user_context6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 7
  store i8* %user_context, i8** %user_context6, align 8, !tbaa !40
  %active_workers = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 8
  %4 = bitcast i32* %active_workers to <2 x i32>*
  store <2 x i32> zeroinitializer, <2 x i32>* %4, align 8, !tbaa !41
  %next_semaphore = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 10
  store i32 0, i32* %next_semaphore, align 8, !tbaa !42
  %owner_is_sleeping = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 11
  store i8 0, i8* %owner_is_sleeping, align 4, !tbaa !43
  %parent_job = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 5
  %5 = bitcast %"struct.Halide::Runtime::Internal::work"** %parent_job to i8**
  store i8* %task_parent, i8** %5, align 8, !tbaa !46
  br label %for.inc

for.inc:                                          ; preds = %if.end, %if.then
  %tasks.addr.1 = phi %struct.halide_parallel_task_t* [ %tasks.addr.077, %if.then ], [ %incdec.ptr, %if.end ]
  %num_tasks.addr.1 = phi i32 [ %dec, %if.then ], [ %num_tasks.addr.078, %if.end ]
  %indvars.iv.next83 = add nuw nsw i64 %indvars.iv82, 1
  %6 = sext i32 %num_tasks.addr.1 to i64
  %cmp = icmp slt i64 %indvars.iv.next83, %6
  br i1 %cmp, label %for.body, label %for.cond.cleanup, !llvm.loop !129

if.end19:                                         ; preds = %for.cond.cleanup
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #15
  %7 = bitcast i8* %task_parent to %"struct.Halide::Runtime::Internal::work"*
  call void @_ZN6Halide7Runtime8Internal27enqueue_work_already_lockedEiPNS1_4workES3_(i32 %num_tasks.addr.0.lcssa, %"struct.Halide::Runtime::Internal::work"* nonnull %0, %"struct.Halide::Runtime::Internal::work"* %7) #15
  %cmp2373 = icmp sgt i32 %num_tasks.addr.0.lcssa, 0
  br i1 %cmp2373, label %for.body25.preheader, label %for.cond.cleanup24

for.body25.preheader:                             ; preds = %if.end19
  %wide.trip.count = zext i32 %num_tasks.addr.0.lcssa to i64
  br label %for.body25

for.cond.cleanup24:                               ; preds = %for.body25, %if.end19
  %exit_status20.0.lcssa = phi i32 [ 0, %if.end19 ], [ %spec.select, %for.body25 ]
  call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #15
  br label %cleanup

for.body25:                                       ; preds = %for.body25, %for.body25.preheader
  %indvars.iv = phi i64 [ 0, %for.body25.preheader ], [ %indvars.iv.next, %for.body25 ]
  %exit_status20.074 = phi i32 [ 0, %for.body25.preheader ], [ %spec.select, %for.body25 ]
  %add.ptr = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv
  call void @_ZN6Halide7Runtime8Internal28worker_thread_already_lockedEPNS1_4workE(%"struct.Halide::Runtime::Internal::work"* nonnull %add.ptr) #15
  %exit_status28 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv, i32 9
  %8 = load i32, i32* %exit_status28, align 4, !tbaa !47
  %cmp29.not = icmp eq i32 %8, 0
  %spec.select = select i1 %cmp29.not, i32 %exit_status20.074, i32 %8
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.cleanup24, label %for.body25, !llvm.loop !130

cleanup:                                          ; preds = %for.cond.cleanup24, %for.cond.cleanup
  %retval.0 = phi i32 [ %exit_status20.0.lcssa, %for.cond.cleanup24 ], [ 0, %for.cond.cleanup ]
  ret i32 %retval.0
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_default_semaphore_init(%struct.halide_semaphore_t* %s, i32 %n) #2 {
entry:
  %value = bitcast %struct.halide_semaphore_t* %s to i32*
  store atomic i32 %n, i32* %value release, align 4
  ret i32 %n
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_semaphore_release(%struct.halide_semaphore_t* %s, i32 %n) #0 {
entry:
  %value = bitcast %struct.halide_semaphore_t* %s to i32*
  %0 = atomicrmw add i32* %value, i32 %n acq_rel
  %cmp = icmp eq i32 %0, 0
  %cmp1 = icmp ne i32 %n, 0
  %or.cond = and i1 %cmp1, %cmp
  br i1 %or.cond, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #15
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 8)) #15
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10)) #15
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #15
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %add = add nsw i32 %0, %n
  ret i32 %add
}

; Function Attrs: nounwind mustprogress
define weak void @halide_thread_pool_cleanup() #0 {
entry:
  tail call void @halide_shutdown_thread_pool() #15
  ret void
}

; Function Attrs: nounwind mustprogress
define weak void @halide_shutdown_thread_pool() local_unnamed_addr #0 {
entry:
  %0 = load i8, i8* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 15), align 1, !tbaa !52, !range !21
  %tobool.not = icmp eq i8 %0, 0
  br i1 %tobool.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #15
  store i8 1, i8* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 14), align 8, !tbaa !73
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10)) #15
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 8)) #15
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 9)) #15
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #15
  %1 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !60
  %cmp4 = icmp sgt i32 %1, 0
  br i1 %cmp4, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.body, %if.then
  %call.i = tail call i8* @memset(i8* nonnull bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), i32 0, i64 2116) #14
  br label %if.end

for.body:                                         ; preds = %if.then, %for.body
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body ], [ 0, %if.then ]
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 13, i64 %indvars.iv
  %2 = load %struct.halide_thread*, %struct.halide_thread** %arrayidx, align 8, !tbaa !14
  tail call void @halide_join_thread(%struct.halide_thread* %2) #15
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %3 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !60
  %4 = sext i32 %3 to i64
  %cmp = icmp slt i64 %indvars.iv.next, %4
  br i1 %cmp, label %for.body, label %for.cond.cleanup, !llvm.loop !131

if.end:                                           ; preds = %for.cond.cleanup, %entry
  ret void
}

declare i8* @memset(i8*, i32, i64) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_join_thread(%struct.halide_thread* %thread_arg) local_unnamed_addr #0 {
entry:
  %ret = alloca i8*, align 8
  %0 = bitcast %struct.halide_thread* %thread_arg to %"struct.Halide::Runtime::Internal::spawned_thread"*
  %1 = bitcast i8** %ret to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #11
  store i8* null, i8** %ret, align 8, !tbaa !14
  %handle = getelementptr inbounds %"struct.Halide::Runtime::Internal::spawned_thread", %"struct.Halide::Runtime::Internal::spawned_thread"* %0, i64 0, i32 2
  %2 = load i64, i64* %handle, align 8, !tbaa !126
  %call = call i32 @pthread_join(i64 %2, i8** nonnull %ret) #14
  %3 = bitcast %struct.halide_thread* %thread_arg to i8*
  call void @free(i8* %3) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #11
  ret void
}

declare i32 @pthread_join(i64, i8**) local_unnamed_addr #1

; Function Attrs: nounwind
define weak void @halide_cond_signal(%struct.halide_mutex* %cond) local_unnamed_addr #4 {
entry:
  %control.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", align 8
  %state.i = getelementptr %struct.halide_mutex, %struct.halide_mutex* %cond, i64 0, i32 0, i64 0
  %0 = load atomic i64, i64* %state.i monotonic, align 8
  %cmp.i = icmp eq i64 %0, 0
  br i1 %cmp.i, label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond6signalEv.exit, label %if.end.i

if.end.i:                                         ; preds = %entry
  %1 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1) #11
  %2 = inttoptr i64 %0 to %"class.Halide::Runtime::Internal::Synchronization::word_lock"*
  %3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization22signal_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8, !tbaa !48
  %cond_state2.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 1
  store i64* %state.i, i64** %cond_state2.i.i, align 8, !tbaa !132
  %mutex3.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 2
  store %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %2, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex3.i.i, align 8, !tbaa !134
  %4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0
  %5 = ptrtoint %struct.halide_mutex* %cond to i64
  %call.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control10unpark_oneEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %4, i64 %5) #14
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1) #11
  br label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond6signalEv.exit

_ZN6Halide7Runtime8Internal15Synchronization9fast_cond6signalEv.exit: ; preds = %if.end.i, %entry
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr zeroext i1 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control8validateERNS2_15validate_actionE(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) unnamed_addr #2 align 2 {
entry:
  ret i1 true
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr i64 @_ZN6Halide7Runtime8Internal15Synchronization22signal_parking_control6unparkEib(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this, i32 %unparked, i1 zeroext %more_waiters) unnamed_addr #2 align 2 {
entry:
  br i1 %more_waiters, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %cond_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 1
  %0 = load i64*, i64** %cond_state, align 8, !tbaa !132
  store atomic i64 0, i64* %0 monotonic, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i64 0
}

; Function Attrs: nounwind mustprogress
define weak %struct.halide_mutex_array* @halide_mutex_array_create(i32 %sz) local_unnamed_addr #0 {
entry:
  %call = tail call i8* @halide_malloc(i8* null, i64 8) #14
  %0 = bitcast i8* %call to %struct.halide_mutex_array*
  %cmp = icmp eq i8* %call, null
  br i1 %cmp, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %conv = sext i32 %sz to i64
  %mul = shl nsw i64 %conv, 3
  %call1 = tail call i8* @halide_malloc(i8* null, i64 %mul) #14
  %1 = bitcast i8* %call to i8**
  store i8* %call1, i8** %1, align 8, !tbaa !135
  %cmp4 = icmp eq i8* %call1, null
  br i1 %cmp4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.end
  tail call void @halide_free(i8* null, i8* nonnull %call) #14
  br label %cleanup

if.end6:                                          ; preds = %if.end
  %call10 = tail call i8* @memset(i8* nonnull %call1, i32 0, i64 %mul) #14
  br label %cleanup

cleanup:                                          ; preds = %if.end6, %if.then5, %entry
  %retval.0 = phi %struct.halide_mutex_array* [ null, %if.then5 ], [ %0, %if.end6 ], [ null, %entry ]
  ret %struct.halide_mutex_array* %retval.0
}

; Function Attrs: nounwind mustprogress
define weak void @halide_mutex_array_destroy(i8* %user_context, i8* %array) local_unnamed_addr #0 {
entry:
  %0 = bitcast i8* %array to i8**
  %1 = load i8*, i8** %0, align 8, !tbaa !135
  tail call void @halide_free(i8* %user_context, i8* %1) #14
  tail call void @halide_free(i8* %user_context, i8* %array) #14
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_mutex_array_lock(%struct.halide_mutex_array* %array, i32 %entry1) local_unnamed_addr #0 {
entry:
  %array2 = getelementptr inbounds %struct.halide_mutex_array, %struct.halide_mutex_array* %array, i64 0, i32 0
  %0 = load %struct.halide_mutex*, %struct.halide_mutex** %array2, align 8, !tbaa !135
  %idxprom = sext i32 %entry1 to i64
  %arrayidx = getelementptr inbounds %struct.halide_mutex, %struct.halide_mutex* %0, i64 %idxprom
  tail call void @halide_mutex_lock(%struct.halide_mutex* %arrayidx) #15
  ret i32 0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_mutex_array_unlock(%struct.halide_mutex_array* %array, i32 %entry1) local_unnamed_addr #0 {
entry:
  %array2 = getelementptr inbounds %struct.halide_mutex_array, %struct.halide_mutex_array* %array, i64 0, i32 0
  %0 = load %struct.halide_mutex*, %struct.halide_mutex** %array2, align 8, !tbaa !135
  %idxprom = sext i32 %entry1 to i64
  %arrayidx = getelementptr inbounds %struct.halide_mutex, %struct.halide_mutex* %0, i64 %idxprom
  tail call void @halide_mutex_unlock(%struct.halide_mutex* %arrayidx) #15
  ret i32 0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_set_num_threads(i32 %n) local_unnamed_addr #0 {
entry:
  %cmp = icmp slt i32 %n, 0
  br i1 %cmp, label %if.end3.thread, label %if.end

if.end3.thread:                                   ; preds = %entry
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.4, i64 0, i64 0)) #14
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #15
  %0 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !58
  br label %if.else.i

if.end:                                           ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #15
  %cmp1 = icmp eq i32 %n, 0
  br i1 %cmp1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  %call = tail call i32 @_ZN6Halide7Runtime8Internal27default_desired_num_threadsEv() #15
  br label %if.end3

if.end3:                                          ; preds = %if.then2, %if.end
  %n.addr.0 = phi i32 [ %call, %if.then2 ], [ %n, %if.end ]
  %1 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !58
  %cmp.i = icmp sgt i32 %n.addr.0, 256
  br i1 %cmp.i, label %_ZN6Halide7Runtime8Internal17clamp_num_threadsEi.exit, label %if.else.i

if.else.i:                                        ; preds = %if.end3, %if.end3.thread
  %2 = phi i32 [ %0, %if.end3.thread ], [ %1, %if.end3 ]
  %n.addr.012 = phi i32 [ %n, %if.end3.thread ], [ %n.addr.0, %if.end3 ]
  %3 = icmp sgt i32 %n.addr.012, 1
  %spec.select.i = select i1 %3, i32 %n.addr.012, i32 1
  br label %_ZN6Halide7Runtime8Internal17clamp_num_threadsEi.exit

_ZN6Halide7Runtime8Internal17clamp_num_threadsEi.exit: ; preds = %if.else.i, %if.end3
  %4 = phi i32 [ %2, %if.else.i ], [ %1, %if.end3 ]
  %call48 = phi i32 [ %spec.select.i, %if.else.i ], [ 256, %if.end3 ]
  store i32 %call48, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !58
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #15
  ret i32 %4
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* @halide_set_custom_do_task(i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 8, !tbaa !14
  store i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %f, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 8, !tbaa !14
  ret i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* @halide_set_custom_do_loop_task(i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)*, i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)** @_ZN6Halide7Runtime8Internal19custom_do_loop_taskE, align 8, !tbaa !14
  store i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* %f, i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)** @_ZN6Halide7Runtime8Internal19custom_do_loop_taskE, align 8, !tbaa !14
  ret i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* @halide_set_custom_do_par_for(i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 8, !tbaa !14
  store i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %f, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 8, !tbaa !14
  ret i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_set_custom_parallel_runtime(i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %do_par_for, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %do_task, i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* %do_loop_task, i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)* %do_parallel_tasks, i32 (%struct.halide_semaphore_t*, i32)* %semaphore_init, i1 (%struct.halide_semaphore_t*, i32)* %semaphore_try_acquire, i32 (%struct.halide_semaphore_t*, i32)* %semaphore_release) local_unnamed_addr #2 {
entry:
  store i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %do_par_for, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 8, !tbaa !14
  store i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %do_task, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 8, !tbaa !14
  store i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* %do_loop_task, i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)** @_ZN6Halide7Runtime8Internal19custom_do_loop_taskE, align 8, !tbaa !14
  store i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)* %do_parallel_tasks, i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)** @_ZN6Halide7Runtime8Internal24custom_do_parallel_tasksE, align 8, !tbaa !14
  store i32 (%struct.halide_semaphore_t*, i32)* %semaphore_init, i32 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal21custom_semaphore_initE, align 8, !tbaa !14
  store i1 (%struct.halide_semaphore_t*, i32)* %semaphore_try_acquire, i1 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal28custom_semaphore_try_acquireE, align 8, !tbaa !14
  store i32 (%struct.halide_semaphore_t*, i32)* %semaphore_release, i32 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal24custom_semaphore_releaseE, align 8, !tbaa !14
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_par_for(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %min, i32 %size, i8* %closure) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 8, !tbaa !14
  %call = tail call i32 %0(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %min, i32 %size, i8* %closure) #14
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_parallel_tasks(i8* %user_context, i32 %num_tasks, %struct.halide_parallel_task_t* %tasks, i8* %task_parent) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)*, i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)** @_ZN6Halide7Runtime8Internal24custom_do_parallel_tasksE, align 8, !tbaa !14
  %call = tail call i32 %0(i8* %user_context, i32 %num_tasks, %struct.halide_parallel_task_t* %tasks, i8* %task_parent) #14
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_semaphore_init(%struct.halide_semaphore_t* %sema, i32 %count) local_unnamed_addr #0 {
entry:
  %0 = load i32 (%struct.halide_semaphore_t*, i32)*, i32 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal21custom_semaphore_initE, align 8, !tbaa !14
  %call = tail call i32 %0(%struct.halide_semaphore_t* %sema, i32 %count) #14
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_semaphore_release(%struct.halide_semaphore_t* %sema, i32 %count) local_unnamed_addr #0 {
entry:
  %0 = load i32 (%struct.halide_semaphore_t*, i32)*, i32 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal24custom_semaphore_releaseE, align 8, !tbaa !14
  %call = tail call i32 %0(%struct.halide_semaphore_t* %sema, i32 %count) #14
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak zeroext i1 @halide_semaphore_try_acquire(%struct.halide_semaphore_t* %sema, i32 %count) local_unnamed_addr #0 {
entry:
  %0 = load i1 (%struct.halide_semaphore_t*, i32)*, i1 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal28custom_semaphore_try_acquireE, align 8, !tbaa !14
  %call = tail call zeroext i1 %0(%struct.halide_semaphore_t* %sema, i32 %count) #14
  ret i1 %call
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_default_get_symbol(i8* %name) #0 {
entry:
  %call = tail call i8* @dlsym(i8* nonnull inttoptr (i64 -2 to i8*), i8* %name) #14
  ret i8* %call
}

declare i8* @dlsym(i8*, i8*) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i8* @halide_default_load_library(i8* %name) #0 {
entry:
  %call = tail call i8* @dlopen(i8* %name, i32 5) #14
  ret i8* %call
}

declare i8* @dlopen(i8*, i32) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i8* @halide_default_get_library_symbol(i8* %lib, i8* %name) #0 {
entry:
  %cmp = icmp eq i8* %lib, null
  %spec.select = select i1 %cmp, i8* inttoptr (i64 -2 to i8*), i8* %lib
  %call = tail call i8* @dlsym(i8* %spec.select, i8* %name) #14
  ret i8* %call
}

; Function Attrs: nounwind willreturn mustprogress
define weak i8* (i8*)* @halide_set_custom_get_symbol(i8* (i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i8* (i8*)*, i8* (i8*)** @_ZN6Halide7Runtime8Internal17custom_get_symbolE, align 8, !tbaa !14
  store i8* (i8*)* %f, i8* (i8*)** @_ZN6Halide7Runtime8Internal17custom_get_symbolE, align 8, !tbaa !14
  ret i8* (i8*)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i8* (i8*)* @halide_set_custom_load_library(i8* (i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i8* (i8*)*, i8* (i8*)** @_ZN6Halide7Runtime8Internal19custom_load_libraryE, align 8, !tbaa !14
  store i8* (i8*)* %f, i8* (i8*)** @_ZN6Halide7Runtime8Internal19custom_load_libraryE, align 8, !tbaa !14
  ret i8* (i8*)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i8* (i8*, i8*)* @halide_set_custom_get_library_symbol(i8* (i8*, i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i8* (i8*, i8*)*, i8* (i8*, i8*)** @_ZN6Halide7Runtime8Internal25custom_get_library_symbolE, align 8, !tbaa !14
  store i8* (i8*, i8*)* %f, i8* (i8*, i8*)** @_ZN6Halide7Runtime8Internal25custom_get_library_symbolE, align 8, !tbaa !14
  ret i8* (i8*, i8*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_get_symbol(i8* %name) local_unnamed_addr #0 {
entry:
  %0 = load i8* (i8*)*, i8* (i8*)** @_ZN6Halide7Runtime8Internal17custom_get_symbolE, align 8, !tbaa !14
  %call = tail call i8* %0(i8* %name) #14
  ret i8* %call
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_load_library(i8* %name) local_unnamed_addr #0 {
entry:
  %0 = load i8* (i8*)*, i8* (i8*)** @_ZN6Halide7Runtime8Internal19custom_load_libraryE, align 8, !tbaa !14
  %call = tail call i8* %0(i8* %name) #14
  ret i8* %call
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_get_library_symbol(i8* %lib, i8* %name) local_unnamed_addr #0 {
entry:
  %0 = load i8* (i8*, i8*)*, i8* (i8*, i8*)** @_ZN6Halide7Runtime8Internal25custom_get_library_symbolE, align 8, !tbaa !14
  %call = tail call i8* %0(i8* %lib, i8* %name) #14
  ret i8* %call
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_set_gpu_device(i32 %d) local_unnamed_addr #2 {
entry:
  store i32 %d, i32* @_ZN6Halide7Runtime8Internal17halide_gpu_deviceE, align 4, !tbaa !41
  store i8 1, i8* @_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE, align 1, !tbaa !19
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_get_gpu_device(i8* %user_context) local_unnamed_addr #4 {
entry:
  br label %while.cond.i

while.cond.i:                                     ; preds = %while.cond.i, %entry
  %0 = atomicrmw volatile xchg i8* @_ZN6Halide7Runtime8Internal22halide_gpu_device_lockE, i8 1 acquire
  %tobool.not.i = icmp eq i8 %0, 0
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit, label %while.cond.i, !llvm.loop !137

_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit: ; preds = %while.cond.i
  %1 = load i8, i8* @_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE, align 1, !tbaa !19, !range !21
  %tobool.not = icmp eq i8 %1, 0
  br i1 %tobool.not, label %if.then, label %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge

_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge: ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %.pre = load i32, i32* @_ZN6Halide7Runtime8Internal17halide_gpu_deviceE, align 4, !tbaa !41
  br label %if.end4

if.then:                                          ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %call = tail call i8* @getenv(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.8, i64 0, i64 0)) #14
  %tobool1.not = icmp eq i8* %call, null
  br i1 %tobool1.not, label %if.end, label %if.then2

if.then2:                                         ; preds = %if.then
  %call3 = tail call i32 @atoi(i8* nonnull %call) #14
  br label %if.end

if.end:                                           ; preds = %if.then2, %if.then
  %storemerge = phi i32 [ %call3, %if.then2 ], [ -1, %if.then ]
  store i32 %storemerge, i32* @_ZN6Halide7Runtime8Internal17halide_gpu_deviceE, align 4, !tbaa !41
  store i8 1, i8* @_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE, align 1, !tbaa !19
  br label %if.end4

if.end4:                                          ; preds = %if.end, %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge
  %2 = phi i32 [ %.pre, %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge ], [ %storemerge, %if.end ]
  store atomic volatile i8 0, i8* @_ZN6Halide7Runtime8Internal22halide_gpu_device_lockE release, align 1
  ret i32 %2
}

; Function Attrs: nounwind
define weak i32 @halide_default_trace(i8* %user_context, %struct.halide_trace_event_t* %e) #4 {
entry:
  %0 = atomicrmw add i32* @_ZZ20halide_default_traceE3ids, i32 1 seq_cst
  %call = tail call i32 @halide_get_trace_file(i8* %user_context) #15
  %cmp = icmp sgt i32 %call, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %type = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4
  %lanes = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4, i32 2
  %1 = load i16, i16* %lanes, align 2, !tbaa !138
  %conv = zext i16 %1 to i32
  %bits.i = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4, i32 1
  %2 = load i8, i8* %bits.i, align 1, !tbaa !144
  %conv.i = zext i8 %2 to i32
  %add.i = add nuw nsw i32 %conv.i, 7
  %div.i = lshr i32 %add.i, 3
  %mul = mul nuw nsw i32 %div.i, %conv
  %dimensions = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 8
  %3 = load i32, i32* %dimensions, align 8, !tbaa !145
  %mul3 = shl i32 %3, 2
  %func = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 0
  %4 = load i8*, i8** %func, align 8, !tbaa !146
  %call4 = tail call i64 @strlen(i8* %4) #14
  %5 = trunc i64 %call4 to i32
  %conv5 = add i32 %5, 1
  %trace_tag = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 3
  %6 = load i8*, i8** %trace_tag, align 8, !tbaa !147
  %tobool.not = icmp eq i8* %6, null
  br i1 %tobool.not, label %cond.end, label %cond.true

cond.true:                                        ; preds = %if.then
  %call7 = tail call i64 @strlen(i8* nonnull %6) #14
  %7 = trunc i64 %call7 to i32
  %phi.cast = add i32 %7, 1
  br label %cond.end

cond.end:                                         ; preds = %cond.true, %if.then
  %cond = phi i32 [ %phi.cast, %cond.true ], [ 1, %if.then ]
  %add11 = add i32 %mul3, 31
  %add12 = add i32 %add11, %mul
  %add13 = add i32 %add12, %conv5
  %add14 = add i32 %add13, %cond
  %and = and i32 %add14, -4
  %8 = load %"class.Halide::Runtime::Internal::TraceBuffer"*, %"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE, align 8, !tbaa !14
  %lock.i.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %8, i64 0, i32 0, i32 0
  %cmp.i.i = icmp ult i32 %and, 1048577
  %cursor.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %8, i64 0, i32 1
  %overage.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %8, i64 0, i32 2
  %arraydecay.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %8, i64 0, i32 3, i64 0
  br i1 %cmp.i.i, label %while.body.i.i.us.i.preheader, label %while.body.i.i.i.preheader

while.body.i.i.i.preheader:                       ; preds = %cond.end
  %9 = bitcast i32* %cursor.i.i to <2 x i32>*
  br label %while.body.i.i.i

while.body.i.i.us.i.preheader:                    ; preds = %cond.end
  %10 = bitcast i32* %cursor.i.i to <2 x i32>*
  br label %while.body.i.i.us.i

while.body.i.i.us.i:                              ; preds = %while.body.i.i.us.i.backedge, %while.body.i.i.us.i.preheader
  %11 = load volatile i32, i32* %lock.i.i.i, align 4, !tbaa !148
  %and.i.i.us.i = and i32 %11, 1073741823
  %add.i.i.us.i = add nuw nsw i32 %and.i.i.us.i, 1
  %12 = cmpxchg i32* %lock.i.i.i, i32 %and.i.i.us.i, i32 %add.i.i.us.i seq_cst seq_cst
  %13 = extractvalue { i32, i1 } %12, 1
  br i1 %13, label %do.end.i.us.i, label %while.body.i.i.us.i.backedge

do.end.i.us.i:                                    ; preds = %while.body.i.i.us.i
  %14 = atomicrmw add i32* %cursor.i.i, i32 %and seq_cst
  %add.i.us.i = add i32 %14, %and
  %cmp2.i.us.i = icmp ugt i32 %add.i.us.i, 1048576
  br i1 %cmp2.i.us.i, label %while.body.us.i, label %_ZN6Halide7Runtime8Internal11TraceBuffer14acquire_packetEPvij.exit

while.body.us.i:                                  ; preds = %do.end.i.us.i
  %15 = atomicrmw add i32* %overage.i.i, i32 %and seq_cst
  %16 = atomicrmw sub i32* %lock.i.i.i, i32 1 seq_cst
  br label %while.body.i.i5.us.i

while.body.i.i5.us.i:                             ; preds = %while.body.i.i5.us.i, %while.body.us.i
  %17 = atomicrmw or i32* %lock.i.i.i, i32 1073741824 seq_cst
  %18 = cmpxchg i32* %lock.i.i.i, i32 1073741824, i32 -2147483648 seq_cst seq_cst
  %19 = extractvalue { i32, i1 } %18, 1
  br i1 %19, label %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.us.i, label %while.body.i.i5.us.i

_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.us.i: ; preds = %while.body.i.i5.us.i
  %20 = load i32, i32* %cursor.i.i, align 4, !tbaa !150
  %tobool.not.i.us.i = icmp eq i32 %20, 0
  br i1 %tobool.not.i.us.i, label %do.end.critedge.i.us.i, label %if.then.i9.us.i

if.then.i9.us.i:                                  ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.us.i
  %21 = load i32, i32* %overage.i.i, align 4, !tbaa !152
  %sub.i.us.i = sub i32 %20, %21
  store i32 %sub.i.us.i, i32* %cursor.i.i, align 4, !tbaa !150
  %conv.i.us.i = zext i32 %sub.i.us.i to i64
  %call.i.us.i = tail call i64 @write(i32 %call, i8* nonnull %arraydecay.i.i, i64 %conv.i.us.i) #14
  %conv5.i.us.i = trunc i64 %call.i.us.i to i32
  %cmp.i8.us.i = icmp eq i32 %sub.i.us.i, %conv5.i.us.i
  store <2 x i32> zeroinitializer, <2 x i32>* %10, align 4, !tbaa !41
  %22 = atomicrmw and i32* %lock.i.i.i, i32 2147483647 seq_cst
  br i1 %cmp.i8.us.i, label %while.body.i.i.us.i.backedge, label %if.then10.i.us.i

if.then10.i.us.i:                                 ; preds = %if.then.i9.us.i
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([144 x i8], [144 x i8]* @.str.32, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %while.body.i.i.us.i.backedge

do.end.critedge.i.us.i:                           ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.us.i
  %23 = atomicrmw and i32* %lock.i.i.i, i32 2147483647 seq_cst
  br label %while.body.i.i.us.i.backedge

while.body.i.i.us.i.backedge:                     ; preds = %do.end.critedge.i.us.i, %if.then10.i.us.i, %if.then.i9.us.i, %while.body.i.i.us.i
  br label %while.body.i.i.us.i, !llvm.loop !153

while.body.i.i.i:                                 ; preds = %while.body.i.i.i.backedge, %while.body.i.i.i.preheader
  %24 = load volatile i32, i32* %lock.i.i.i, align 4, !tbaa !148
  %and.i.i.i = and i32 %24, 1073741823
  %add.i.i.i = add nuw nsw i32 %and.i.i.i, 1
  %25 = cmpxchg i32* %lock.i.i.i, i32 %and.i.i.i, i32 %add.i.i.i seq_cst seq_cst
  %26 = extractvalue { i32, i1 } %25, 1
  br i1 %26, label %if.then.i.i, label %while.body.i.i.i.backedge

if.then.i.i:                                      ; preds = %while.body.i.i.i
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([120 x i8], [120 x i8]* @.str.31, i64 0, i64 0)) #14
  tail call void @abort() #14
  %27 = atomicrmw add i32* %cursor.i.i, i32 %and seq_cst
  %add.i.i400 = add i32 %27, %and
  %cmp2.i.i = icmp ugt i32 %add.i.i400, 1048576
  br i1 %cmp2.i.i, label %while.body.i, label %_ZN6Halide7Runtime8Internal11TraceBuffer14acquire_packetEPvij.exit

while.body.i:                                     ; preds = %if.then.i.i
  %28 = atomicrmw add i32* %overage.i.i, i32 %and seq_cst
  %29 = atomicrmw sub i32* %lock.i.i.i, i32 1 seq_cst
  br label %while.body.i.i5.i

while.body.i.i5.i:                                ; preds = %while.body.i.i5.i, %while.body.i
  %30 = atomicrmw or i32* %lock.i.i.i, i32 1073741824 seq_cst
  %31 = cmpxchg i32* %lock.i.i.i, i32 1073741824, i32 -2147483648 seq_cst seq_cst
  %32 = extractvalue { i32, i1 } %31, 1
  br i1 %32, label %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.i, label %while.body.i.i5.i

_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.i: ; preds = %while.body.i.i5.i
  %33 = load i32, i32* %cursor.i.i, align 4, !tbaa !150
  %tobool.not.i.i = icmp eq i32 %33, 0
  br i1 %tobool.not.i.i, label %do.end.critedge.i.i, label %if.then.i9.i

if.then.i9.i:                                     ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.i
  %34 = load i32, i32* %overage.i.i, align 4, !tbaa !152
  %sub.i.i = sub i32 %33, %34
  store i32 %sub.i.i, i32* %cursor.i.i, align 4, !tbaa !150
  %conv.i.i = zext i32 %sub.i.i to i64
  %call.i.i401 = tail call i64 @write(i32 %call, i8* nonnull %arraydecay.i.i, i64 %conv.i.i) #14
  %conv5.i.i = trunc i64 %call.i.i401 to i32
  %cmp.i8.i = icmp eq i32 %sub.i.i, %conv5.i.i
  store <2 x i32> zeroinitializer, <2 x i32>* %9, align 4, !tbaa !41
  %35 = atomicrmw and i32* %lock.i.i.i, i32 2147483647 seq_cst
  br i1 %cmp.i8.i, label %while.body.i.i.i.backedge, label %if.then10.i.i

if.then10.i.i:                                    ; preds = %if.then.i9.i
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([144 x i8], [144 x i8]* @.str.32, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %while.body.i.i.i.backedge

do.end.critedge.i.i:                              ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.i
  %36 = atomicrmw and i32* %lock.i.i.i, i32 2147483647 seq_cst
  br label %while.body.i.i.i.backedge

while.body.i.i.i.backedge:                        ; preds = %do.end.critedge.i.i, %if.then10.i.i, %if.then.i9.i, %while.body.i.i.i
  br label %while.body.i.i.i, !llvm.loop !153

_ZN6Halide7Runtime8Internal11TraceBuffer14acquire_packetEPvij.exit: ; preds = %if.then.i.i, %do.end.i.us.i
  %.lcssa.i = phi i32 [ %14, %do.end.i.us.i ], [ %27, %if.then.i.i ]
  %idx.ext.i.i = zext i32 %.lcssa.i to i64
  %add.ptr.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %8, i64 0, i32 3, i64 %idx.ext.i.i
  %cmp16 = icmp ugt i32 %and, 4096
  br i1 %cmp16, label %if.then17, label %if.end

if.then17:                                        ; preds = %_ZN6Halide7Runtime8Internal11TraceBuffer14acquire_packetEPvij.exit
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i404 = icmp eq i8* %call.i, null
  br i1 %tobool.not.i404, label %if.then.i415, label %if.else.i421

if.then.i415:                                     ; preds = %if.then17
  %conv.i4071 = zext i32 %and to i64
  %call.i4082 = tail call i8* @halide_uint64_to_string(i8* null, i8* null, i64 %conv.i4071, i32 1) #14
  %call.i41117 = tail call i8* @halide_string_to_string(i8* %call.i4082, i8* null, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #14
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE0ELy1024EED2Ev.exit

if.else.i421:                                     ; preds = %if.then17
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %conv.i4073 = zext i32 %and to i64
  %call.i4084 = tail call i8* @halide_uint64_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i64 %conv.i4073, i32 1) #14
  %call.i411 = tail call i8* @halide_string_to_string(i8* %call.i4084, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #14
  %sub.ptr.lhs.cast.i.i416 = ptrtoint i8* %call.i411 to i64
  %sub.ptr.rhs.cast.i.i417 = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i418 = sub i64 1, %sub.ptr.rhs.cast.i.i417
  %add.i.i419 = add i64 %sub.ptr.sub.i.i418, %sub.ptr.lhs.cast.i.i416
  %call.i.i420 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* null, i8* nonnull %call.i, i64 %add.i.i419) #14
  tail call void @halide_print(i8* null, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE0ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE0ELy1024EED2Ev.exit: ; preds = %if.else.i421, %if.then.i415
  tail call void @free(i8* %call.i) #14
  br label %if.end

if.end:                                           ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE0ELy1024EED2Ev.exit, %_ZN6Halide7Runtime8Internal11TraceBuffer14acquire_packetEPvij.exit
  %size = bitcast i8* %add.ptr.i.i to i32*
  store i32 %and, i32* %size, align 4, !tbaa !154
  %id = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 4
  %37 = bitcast i8* %id to i32*
  store i32 %0, i32* %37, align 4, !tbaa !156
  %38 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 8
  %39 = bitcast %struct.halide_type_t* %type to i32*
  %40 = bitcast i8* %38 to i32*
  %41 = load i32, i32* %39, align 8
  store i32 %41, i32* %40, align 4
  %event = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 5
  %event22 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 12
  %42 = bitcast i32* %event to <4 x i32>*
  %43 = load <4 x i32>, <4 x i32>* %42, align 4, !tbaa !18
  %dimensions26 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 24
  %44 = bitcast i8* %dimensions26 to i32*
  %45 = bitcast i8* %event22 to <4 x i32>*
  store <4 x i32> %43, <4 x i32>* %45, align 4, !tbaa !18
  %coordinates = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 2
  %46 = load i32*, i32** %coordinates, align 8, !tbaa !157
  %tobool27.not = icmp eq i32* %46, null
  br i1 %tobool27.not, label %if.end33, label %if.then28

if.then28:                                        ; preds = %if.end
  %47 = bitcast i32* %46 to i8*
  %48 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 28
  %conv31 = zext i32 %mul3 to i64
  %call32 = tail call i8* @memcpy(i8* nonnull %48, i8* nonnull %47, i64 %conv31) #14
  br label %if.end33

if.end33:                                         ; preds = %if.then28, %if.end
  %value = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 1
  %49 = load i8*, i8** %value, align 8, !tbaa !158
  %tobool34.not = icmp eq i8* %49, null
  br i1 %tobool34.not, label %if.end40, label %if.then35

if.then35:                                        ; preds = %if.end33
  %50 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 28
  %51 = bitcast i8* %50 to i32*
  %52 = load i32, i32* %44, align 4, !tbaa !159
  %idx.ext.i = sext i32 %52 to i64
  %add.ptr.i424 = getelementptr inbounds i32, i32* %51, i64 %idx.ext.i
  %53 = bitcast i32* %add.ptr.i424 to i8*
  %conv38 = zext i32 %mul to i64
  %call39 = tail call i8* @memcpy(i8* nonnull %53, i8* nonnull %49, i64 %conv38) #14
  br label %if.end40

if.end40:                                         ; preds = %if.end33, %if.then35
  %54 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 28
  %55 = bitcast i8* %54 to i32*
  %56 = load i32, i32* %44, align 4, !tbaa !159
  %idx.ext.i.i425 = sext i32 %56 to i64
  %add.ptr.i.i426 = getelementptr inbounds i32, i32* %55, i64 %idx.ext.i.i425
  %57 = bitcast i32* %add.ptr.i.i426 to i8*
  %lanes.i = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 10
  %58 = bitcast i8* %lanes.i to i16*
  %59 = load i16, i16* %58, align 2, !tbaa !160
  %conv.i427 = zext i16 %59 to i32
  %60 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 9
  %61 = load i8, i8* %60, align 1, !tbaa !144
  %conv.i.i428 = zext i8 %61 to i32
  %add.i.i429 = add nuw nsw i32 %conv.i.i428, 7
  %div.i.i = lshr i32 %add.i.i429, 3
  %mul.i = mul nuw nsw i32 %div.i.i, %conv.i427
  %idx.ext.i430 = zext i32 %mul.i to i64
  %add.ptr.i431 = getelementptr inbounds i8, i8* %57, i64 %idx.ext.i430
  %62 = load i8*, i8** %func, align 8, !tbaa !146
  %conv43 = zext i32 %conv5 to i64
  %call44 = tail call i8* @memcpy(i8* nonnull %add.ptr.i431, i8* %62, i64 %conv43) #14
  %63 = load i32, i32* %44, align 4, !tbaa !159
  %idx.ext.i.i.i = sext i32 %63 to i64
  %add.ptr.i.i.i = getelementptr inbounds i32, i32* %55, i64 %idx.ext.i.i.i
  %64 = bitcast i32* %add.ptr.i.i.i to i8*
  %65 = load i16, i16* %58, align 2, !tbaa !160
  %conv.i.i432 = zext i16 %65 to i32
  %66 = load i8, i8* %60, align 1, !tbaa !144
  %conv.i.i.i = zext i8 %66 to i32
  %add.i.i.i433 = add nuw nsw i32 %conv.i.i.i, 7
  %div.i.i.i = lshr i32 %add.i.i.i433, 3
  %mul.i.i = mul nuw nsw i32 %div.i.i.i, %conv.i.i432
  %idx.ext.i.i434 = zext i32 %mul.i.i to i64
  %add.ptr.i.i435 = getelementptr inbounds i8, i8* %64, i64 %idx.ext.i.i434
  br label %while.cond.i437

while.cond.i437:                                  ; preds = %while.cond.i437, %if.end40
  %f.0.i = phi i8* [ %add.ptr.i.i435, %if.end40 ], [ %incdec.ptr.i, %while.cond.i437 ]
  %incdec.ptr.i = getelementptr inbounds i8, i8* %f.0.i, i64 1
  %67 = load i8, i8* %f.0.i, align 1, !tbaa !18
  %tobool.not.i436 = icmp eq i8 %67, 0
  br i1 %tobool.not.i436, label %_ZN21halide_trace_packet_t9trace_tagEv.exit, label %while.cond.i437, !llvm.loop !161

_ZN21halide_trace_packet_t9trace_tagEv.exit:      ; preds = %while.cond.i437
  %68 = load i8*, i8** %trace_tag, align 8, !tbaa !147
  %tobool47.not = icmp eq i8* %68, null
  %spec.select = select i1 %tobool47.not, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1.10, i64 0, i64 0), i8* %68
  %conv53 = zext i32 %cond to i64
  %call54 = tail call i8* @memcpy(i8* nonnull %incdec.ptr.i, i8* %spec.select, i64 %conv53) #14
  %69 = load %"class.Halide::Runtime::Internal::TraceBuffer"*, %"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE, align 8, !tbaa !14
  fence seq_cst
  %lock.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %69, i64 0, i32 0, i32 0
  %70 = atomicrmw sub i32* %lock.i.i, i32 1 seq_cst
  %71 = load i32, i32* %event, align 4, !tbaa !162
  %cmp56 = icmp eq i32 %71, 9
  br i1 %cmp56, label %if.then57, label %if.end277

if.then57:                                        ; preds = %_ZN21halide_trace_packet_t9trace_tagEv.exit
  %72 = load %"class.Halide::Runtime::Internal::TraceBuffer"*, %"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE, align 8, !tbaa !14
  %lock.i.i438 = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %72, i64 0, i32 0, i32 0
  br label %while.body.i.i

while.body.i.i:                                   ; preds = %while.body.i.i, %if.then57
  %73 = atomicrmw or i32* %lock.i.i438, i32 1073741824 seq_cst
  %74 = cmpxchg i32* %lock.i.i438, i32 1073741824, i32 -2147483648 seq_cst seq_cst
  %75 = extractvalue { i32, i1 } %74, 1
  br i1 %75, label %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i, label %while.body.i.i

_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i: ; preds = %while.body.i.i
  %cursor.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %72, i64 0, i32 1
  %76 = load i32, i32* %cursor.i, align 4, !tbaa !150
  %tobool.not.i439 = icmp eq i32 %76, 0
  br i1 %tobool.not.i439, label %do.end.critedge.i, label %if.then.i442

if.then.i442:                                     ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i
  %overage.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %72, i64 0, i32 2
  %77 = load i32, i32* %overage.i, align 4, !tbaa !152
  %sub.i = sub i32 %76, %77
  store i32 %sub.i, i32* %cursor.i, align 4, !tbaa !150
  %arraydecay.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %72, i64 0, i32 3, i64 0
  %conv.i440 = zext i32 %sub.i to i64
  %call.i441 = tail call i64 @write(i32 %call, i8* nonnull %arraydecay.i, i64 %conv.i440) #14
  %conv5.i = trunc i64 %call.i441 to i32
  %cmp.i = icmp eq i32 %sub.i, %conv5.i
  %78 = bitcast i32* %cursor.i to <2 x i32>*
  store <2 x i32> zeroinitializer, <2 x i32>* %78, align 4, !tbaa !41
  %79 = atomicrmw and i32* %lock.i.i438, i32 2147483647 seq_cst
  br i1 %cmp.i, label %if.end277, label %if.then10.i

if.then10.i:                                      ; preds = %if.then.i442
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([144 x i8], [144 x i8]* @.str.32, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %if.end277

do.end.critedge.i:                                ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i
  %80 = atomicrmw and i32* %lock.i.i438, i32 2147483647 seq_cst
  br label %if.end277

if.else:                                          ; preds = %entry
  %call.i445 = tail call i8* @malloc(i64 4096) #14
  %tobool.not.i448 = icmp eq i8* %call.i445, null
  br i1 %tobool.not.i448, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EEC2EPvPc.exit, label %if.then6.i451

if.then6.i451:                                    ; preds = %if.else
  %add.ptr.i449 = getelementptr inbounds i8, i8* %call.i445, i64 4095
  store i8 0, i8* %add.ptr.i449, align 1, !tbaa !18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EEC2EPvPc.exit: ; preds = %if.then6.i451, %if.else
  %ss.sroa.74.0 = phi i8* [ %add.ptr.i449, %if.then6.i451 ], [ null, %if.else ]
  %bits = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4, i32 1
  %81 = load i8, i8* %bits, align 1, !tbaa !163
  %conv60 = zext i8 %81 to i32
  br label %while.cond

while.cond:                                       ; preds = %while.cond, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EEC2EPvPc.exit
  %print_bits.0 = phi i32 [ 8, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EEC2EPvPc.exit ], [ %shl, %while.cond ]
  %cmp61 = icmp slt i32 %print_bits.0, %conv60
  %shl = shl i32 %print_bits.0, 1
  br i1 %cmp61, label %while.cond, label %do.body, !llvm.loop !164

do.body:                                          ; preds = %while.cond
  %cmp62 = icmp slt i32 %print_bits.0, 65
  br i1 %cmp62, label %do.end, label %if.then63

if.then63:                                        ; preds = %do.body
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([140 x i8], [140 x i8]* @.str.2.11, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %do.end

do.end:                                           ; preds = %if.then63, %do.body
  %event65 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 5
  %82 = load i32, i32* %event65, align 4, !tbaa !162
  %cmp66 = icmp slt i32 %82, 2
  %idxprom = zext i32 %82 to i64
  %arrayidx = getelementptr inbounds [11 x i8*], [11 x i8*]* @__const.halide_default_trace.event_types, i64 0, i64 %idxprom
  %83 = load i8*, i8** %arrayidx, align 8, !tbaa !14
  %call.i456 = tail call i8* @halide_string_to_string(i8* %call.i445, i8* %ss.sroa.74.0, i8* %83) #14
  %call.i459 = tail call i8* @halide_string_to_string(i8* %call.i456, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #14
  %func70 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 0
  %84 = load i8*, i8** %func70, align 8, !tbaa !146
  %call.i462 = tail call i8* @halide_string_to_string(i8* %call.i459, i8* %ss.sroa.74.0, i8* %84) #14
  %call.i465 = tail call i8* @halide_string_to_string(i8* %call.i462, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #14
  %value_index73 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 7
  %85 = load i32, i32* %value_index73, align 4, !tbaa !165
  %conv.i468 = sext i32 %85 to i64
  %call.i469 = tail call i8* @halide_int64_to_string(i8* %call.i465, i8* %ss.sroa.74.0, i64 %conv.i468, i32 1) #14
  %call.i472 = tail call i8* @halide_string_to_string(i8* %call.i469, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.22.179, i64 0, i64 0)) #14
  %lanes77 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4, i32 2
  %86 = load i16, i16* %lanes77, align 2, !tbaa !138
  %cmp79 = icmp ugt i16 %86, 1
  br i1 %cmp79, label %if.then80, label %if.end82

if.then80:                                        ; preds = %do.end
  %call.i475 = tail call i8* @halide_string_to_string(i8* %call.i472, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.17, i64 0, i64 0)) #14
  br label %if.end82

if.end82:                                         ; preds = %if.then80, %do.end
  %ss.sroa.7.0 = phi i8* [ %call.i475, %if.then80 ], [ %call.i472, %do.end ]
  %dimensions83 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 8
  %87 = load i32, i32* %dimensions83, align 8, !tbaa !145
  %cmp84660 = icmp sgt i32 %87, 0
  br i1 %cmp84660, label %if.end100.peel, label %for.cond.cleanup

if.end100.peel:                                   ; preds = %if.end82
  %coordinates101 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 2
  %.pre = load i32*, i32** %coordinates101, align 8, !tbaa !157
  %.pre673 = load i32, i32* %.pre, align 4, !tbaa !41
  %conv.i484.peel = sext i32 %.pre673 to i64
  %call.i485.peel = tail call i8* @halide_int64_to_string(i8* %ss.sroa.7.0, i8* %ss.sroa.74.0, i64 %conv.i484.peel, i32 1) #14
  %88 = load i32, i32* %dimensions83, align 8, !tbaa !145
  %cmp84.peel = icmp sgt i32 %88, 1
  br i1 %cmp84.peel, label %if.then86, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %if.end100, %if.end100.peel, %if.end82
  %ss.sroa.7.1.lcssa = phi i8* [ %ss.sroa.7.0, %if.end82 ], [ %call.i485.peel, %if.end100.peel ], [ %call.i485, %if.end100 ]
  %89 = load i16, i16* %lanes77, align 2, !tbaa !138
  %cmp108 = icmp ugt i16 %89, 1
  %.sink684 = select i1 %cmp108, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.20, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.119, i64 0, i64 0)
  %call.i491 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.1.lcssa, i8* %ss.sroa.74.0, i8* %.sink684) #14
  br i1 %cmp66, label %if.then115, label %if.end263

if.then86:                                        ; preds = %if.end100.peel, %if.end100
  %indvars.iv670 = phi i64 [ %indvars.iv.next671, %if.end100 ], [ 1, %if.end100.peel ]
  %ss.sroa.7.1661 = phi i8* [ %call.i485, %if.end100 ], [ %call.i485.peel, %if.end100.peel ]
  %90 = load i16, i16* %lanes77, align 2, !tbaa !138
  %cmp90 = icmp ugt i16 %90, 1
  br i1 %cmp90, label %land.lhs.true, label %if.else97.split

land.lhs.true:                                    ; preds = %if.then86
  %conv89 = zext i16 %90 to i32
  %91 = trunc i64 %indvars.iv670 to i32
  %rem = urem i32 %91, %conv89
  %cmp94 = icmp eq i32 %rem, 0
  br i1 %cmp94, label %if.end100, label %if.else97.split

if.else97.split:                                  ; preds = %if.then86, %land.lhs.true
  br label %if.end100

if.end100:                                        ; preds = %land.lhs.true, %if.else97.split
  %.sink = phi i8* [ getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0), %if.else97.split ], [ getelementptr inbounds ([5 x i8], [5 x i8]* @.str.18, i64 0, i64 0), %land.lhs.true ]
  %call.i4786 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.1661, i8* %ss.sroa.74.0, i8* %.sink) #14
  %92 = load i32*, i32** %coordinates101, align 8, !tbaa !157
  %arrayidx103 = getelementptr inbounds i32, i32* %92, i64 %indvars.iv670
  %93 = load i32, i32* %arrayidx103, align 4, !tbaa !41
  %conv.i484 = sext i32 %93 to i64
  %call.i485 = tail call i8* @halide_int64_to_string(i8* %call.i4786, i8* %ss.sroa.74.0, i64 %conv.i484, i32 1) #14
  %indvars.iv.next671 = add nuw nsw i64 %indvars.iv670, 1
  %94 = load i32, i32* %dimensions83, align 8, !tbaa !145
  %95 = sext i32 %94 to i64
  %cmp84 = icmp slt i64 %indvars.iv.next671, %95
  br i1 %cmp84, label %if.then86, label %for.cond.cleanup, !llvm.loop !166

if.then115:                                       ; preds = %for.cond.cleanup
  %96 = load i16, i16* %lanes77, align 2, !tbaa !138
  %cmp119 = icmp ugt i16 %96, 1
  %.sink685 = select i1 %cmp119, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.22, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.23, i64 0, i64 0)
  %call.i497 = tail call i8* @halide_string_to_string(i8* %call.i491, i8* %ss.sroa.74.0, i8* %.sink685) #14
  %97 = load i16, i16* %lanes77, align 2, !tbaa !138
  %cmp130655.not = icmp eq i16 %97, 0
  br i1 %cmp130655.not, label %if.end263, label %if.end136.peel

if.end136.peel:                                   ; preds = %if.then115
  %code = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4, i32 0
  %value245 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 1
  %98 = bitcast i8** %value245 to i8***
  %cmp214 = icmp sgt i32 %print_bits.0, 15
  %99 = bitcast i8** %value245 to i16**
  %100 = bitcast i8** %value245 to float**
  %101 = bitcast i8** %value245 to double**
  %102 = bitcast i8** %value245 to i32**
  %103 = bitcast i8** %value245 to i64**
  %.pre674 = load i8, i8* %code, align 8, !tbaa !168
  switch i8 %.pre674, label %for.inc253.peel [
    i8 0, label %if.then140.peel
    i8 1, label %if.then176.peel
    i8 2, label %do.body213.peel
    i8 3, label %if.then244.peel
  ]

if.then244.peel:                                  ; preds = %if.end136.peel
  %104 = load i8**, i8*** %98, align 8, !tbaa !158
  %105 = load i8*, i8** %104, align 8, !tbaa !14
  %call.i543.peel = tail call i8* @halide_pointer_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i8* %105) #14
  br label %for.inc253.peel

do.body213.peel:                                  ; preds = %if.end136.peel
  br i1 %cmp214, label %do.end218.peel, label %if.then215.peel

if.then215.peel:                                  ; preds = %do.body213.peel
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([142 x i8], [142 x i8]* @.str.24, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %do.end218.peel

do.end218.peel:                                   ; preds = %if.then215.peel, %do.body213.peel
  switch i32 %print_bits.0, label %if.else232.peel [
    i32 32, label %if.then220.peel
    i32 16, label %if.then227.peel
  ]

if.then227.peel:                                  ; preds = %do.end218.peel
  %106 = load i16*, i16** %99, align 8, !tbaa !158
  %107 = load i16, i16* %106, align 2, !tbaa !169
  %call.i535.peel = tail call double @halide_float16_bits_to_double(i16 zeroext %107) #14
  %call2.i.peel = tail call i8* @halide_double_to_string(i8* %call.i497, i8* %ss.sroa.74.0, double %call.i535.peel, i32 1) #14
  br label %for.inc253.peel

if.then220.peel:                                  ; preds = %do.end218.peel
  %108 = load float*, float** %100, align 8, !tbaa !158
  %109 = load float, float* %108, align 4, !tbaa !170
  %conv.i533.peel = fpext float %109 to double
  %call.i534.peel = tail call i8* @halide_double_to_string(i8* %call.i497, i8* %ss.sroa.74.0, double %conv.i533.peel, i32 0) #14
  br label %for.inc253.peel

if.else232.peel:                                  ; preds = %do.end218.peel
  %110 = load double*, double** %101, align 8, !tbaa !158
  %111 = load double, double* %110, align 8, !tbaa !172
  %call.i540.peel = tail call i8* @halide_double_to_string(i8* %call.i497, i8* %ss.sroa.74.0, double %111, i32 1) #14
  br label %for.inc253.peel

if.then176.peel:                                  ; preds = %if.end136.peel
  switch i32 %print_bits.0, label %if.else199.peel [
    i32 8, label %if.then178.peel
    i32 16, label %if.then186.peel
    i32 32, label %if.then194.peel
  ]

if.then194.peel:                                  ; preds = %if.then176.peel
  %112 = load i32*, i32** %102, align 8, !tbaa !158
  %113 = load i32, i32* %112, align 4, !tbaa !41
  %conv.i526.peel = zext i32 %113 to i64
  %call.i527.peel = tail call i8* @halide_uint64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i526.peel, i32 1) #14
  br label %for.inc253.peel

if.then186.peel:                                  ; preds = %if.then176.peel
  %114 = load i16*, i16** %99, align 8, !tbaa !158
  %115 = load i16, i16* %114, align 2, !tbaa !169
  %conv.i522.peel = zext i16 %115 to i64
  %call.i523.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i522.peel, i32 1) #14
  br label %for.inc253.peel

if.then178.peel:                                  ; preds = %if.then176.peel
  %116 = load i8*, i8** %value245, align 8, !tbaa !158
  %117 = load i8, i8* %116, align 1, !tbaa !18
  %conv.i518.peel = zext i8 %117 to i64
  %call.i519.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i518.peel, i32 1) #14
  br label %for.inc253.peel

if.else199.peel:                                  ; preds = %if.then176.peel
  %118 = load i64*, i64** %103, align 8, !tbaa !158
  %119 = load i64, i64* %118, align 8, !tbaa !22
  %call.i530.peel = tail call i8* @halide_uint64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %119, i32 1) #14
  br label %for.inc253.peel

if.then140.peel:                                  ; preds = %if.end136.peel
  switch i32 %print_bits.0, label %if.else163.peel [
    i32 8, label %if.then142.peel
    i32 16, label %if.then150.peel
    i32 32, label %if.then158.peel
  ]

if.then158.peel:                                  ; preds = %if.then140.peel
  %120 = load i32*, i32** %102, align 8, !tbaa !158
  %121 = load i32, i32* %120, align 4, !tbaa !41
  %conv.i511.peel = sext i32 %121 to i64
  %call.i512.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i511.peel, i32 1) #14
  br label %for.inc253.peel

if.then150.peel:                                  ; preds = %if.then140.peel
  %122 = load i16*, i16** %99, align 8, !tbaa !158
  %123 = load i16, i16* %122, align 2, !tbaa !169
  %conv.i507.peel = sext i16 %123 to i64
  %call.i508.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i507.peel, i32 1) #14
  br label %for.inc253.peel

if.then142.peel:                                  ; preds = %if.then140.peel
  %124 = load i8*, i8** %value245, align 8, !tbaa !158
  %125 = load i8, i8* %124, align 1, !tbaa !18
  %conv.i503.peel = sext i8 %125 to i64
  %call.i504.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i503.peel, i32 1) #14
  br label %for.inc253.peel

if.else163.peel:                                  ; preds = %if.then140.peel
  %126 = load i64*, i64** %103, align 8, !tbaa !158
  %127 = load i64, i64* %126, align 8, !tbaa !22
  %call.i515.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %127, i32 1) #14
  br label %for.inc253.peel

for.inc253.peel:                                  ; preds = %if.else163.peel, %if.then142.peel, %if.then150.peel, %if.then158.peel, %if.else199.peel, %if.then178.peel, %if.then186.peel, %if.then194.peel, %if.else232.peel, %if.then220.peel, %if.then227.peel, %if.then244.peel, %if.end136.peel
  %ss.sroa.7.7.peel = phi i8* [ %call.i497, %if.end136.peel ], [ %call.i543.peel, %if.then244.peel ], [ %call.i540.peel, %if.else232.peel ], [ %call2.i.peel, %if.then227.peel ], [ %call.i534.peel, %if.then220.peel ], [ %call.i530.peel, %if.else199.peel ], [ %call.i527.peel, %if.then194.peel ], [ %call.i523.peel, %if.then186.peel ], [ %call.i519.peel, %if.then178.peel ], [ %call.i515.peel, %if.else163.peel ], [ %call.i512.peel, %if.then158.peel ], [ %call.i508.peel, %if.then150.peel ], [ %call.i504.peel, %if.then142.peel ]
  %128 = load i16, i16* %lanes77, align 2, !tbaa !138
  %cmp130.peel = icmp ugt i16 %128, 1
  br i1 %cmp130.peel, label %if.end136, label %if.end263

for.cond.cleanup131:                              ; preds = %for.inc253
  %cmp259 = icmp ugt i16 %154, 1
  br i1 %cmp259, label %if.then260, label %if.end263

if.end136:                                        ; preds = %for.inc253.peel, %for.inc253
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc253 ], [ 1, %for.inc253.peel ]
  %ss.sroa.7.5656 = phi i8* [ %ss.sroa.7.7, %for.inc253 ], [ %ss.sroa.7.7.peel, %for.inc253.peel ]
  %call.i500 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.5656, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #14
  %129 = load i8, i8* %code, align 8, !tbaa !168
  switch i8 %129, label %for.inc253 [
    i8 0, label %if.then140
    i8 1, label %if.then176
    i8 2, label %do.body213
    i8 3, label %if.then244
  ]

if.then140:                                       ; preds = %if.end136
  switch i32 %print_bits.0, label %if.else163 [
    i32 8, label %if.then142
    i32 16, label %if.then150
    i32 32, label %if.then158
  ]

if.then142:                                       ; preds = %if.then140
  %130 = load i8*, i8** %value245, align 8, !tbaa !158
  %arrayidx145 = getelementptr inbounds i8, i8* %130, i64 %indvars.iv
  %131 = load i8, i8* %arrayidx145, align 1, !tbaa !18
  %conv.i503 = sext i8 %131 to i64
  %call.i504 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i503, i32 1) #14
  br label %for.inc253

if.then150:                                       ; preds = %if.then140
  %132 = load i16*, i16** %99, align 8, !tbaa !158
  %arrayidx153 = getelementptr inbounds i16, i16* %132, i64 %indvars.iv
  %133 = load i16, i16* %arrayidx153, align 2, !tbaa !169
  %conv.i507 = sext i16 %133 to i64
  %call.i508 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i507, i32 1) #14
  br label %for.inc253

if.then158:                                       ; preds = %if.then140
  %134 = load i32*, i32** %102, align 8, !tbaa !158
  %arrayidx161 = getelementptr inbounds i32, i32* %134, i64 %indvars.iv
  %135 = load i32, i32* %arrayidx161, align 4, !tbaa !41
  %conv.i511 = sext i32 %135 to i64
  %call.i512 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i511, i32 1) #14
  br label %for.inc253

if.else163:                                       ; preds = %if.then140
  %136 = load i64*, i64** %103, align 8, !tbaa !158
  %arrayidx166 = getelementptr inbounds i64, i64* %136, i64 %indvars.iv
  %137 = load i64, i64* %arrayidx166, align 8, !tbaa !22
  %call.i515 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %137, i32 1) #14
  br label %for.inc253

if.then176:                                       ; preds = %if.end136
  switch i32 %print_bits.0, label %if.else199 [
    i32 8, label %if.then178
    i32 16, label %if.then186
    i32 32, label %if.then194
  ]

if.then178:                                       ; preds = %if.then176
  %138 = load i8*, i8** %value245, align 8, !tbaa !158
  %arrayidx181 = getelementptr inbounds i8, i8* %138, i64 %indvars.iv
  %139 = load i8, i8* %arrayidx181, align 1, !tbaa !18
  %conv.i518 = zext i8 %139 to i64
  %call.i519 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i518, i32 1) #14
  br label %for.inc253

if.then186:                                       ; preds = %if.then176
  %140 = load i16*, i16** %99, align 8, !tbaa !158
  %arrayidx189 = getelementptr inbounds i16, i16* %140, i64 %indvars.iv
  %141 = load i16, i16* %arrayidx189, align 2, !tbaa !169
  %conv.i522 = zext i16 %141 to i64
  %call.i523 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i522, i32 1) #14
  br label %for.inc253

if.then194:                                       ; preds = %if.then176
  %142 = load i32*, i32** %102, align 8, !tbaa !158
  %arrayidx197 = getelementptr inbounds i32, i32* %142, i64 %indvars.iv
  %143 = load i32, i32* %arrayidx197, align 4, !tbaa !41
  %conv.i526 = zext i32 %143 to i64
  %call.i527 = tail call i8* @halide_uint64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i526, i32 1) #14
  br label %for.inc253

if.else199:                                       ; preds = %if.then176
  %144 = load i64*, i64** %103, align 8, !tbaa !158
  %arrayidx202 = getelementptr inbounds i64, i64* %144, i64 %indvars.iv
  %145 = load i64, i64* %arrayidx202, align 8, !tbaa !22
  %call.i530 = tail call i8* @halide_uint64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %145, i32 1) #14
  br label %for.inc253

do.body213:                                       ; preds = %if.end136
  br i1 %cmp214, label %do.end218, label %if.then215

if.then215:                                       ; preds = %do.body213
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([142 x i8], [142 x i8]* @.str.24, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %do.end218

do.end218:                                        ; preds = %if.then215, %do.body213
  switch i32 %print_bits.0, label %if.else232 [
    i32 32, label %if.then220
    i32 16, label %if.then227
  ]

if.then220:                                       ; preds = %do.end218
  %146 = load float*, float** %100, align 8, !tbaa !158
  %arrayidx223 = getelementptr inbounds float, float* %146, i64 %indvars.iv
  %147 = load float, float* %arrayidx223, align 4, !tbaa !170
  %conv.i533 = fpext float %147 to double
  %call.i534 = tail call i8* @halide_double_to_string(i8* %call.i500, i8* %ss.sroa.74.0, double %conv.i533, i32 0) #14
  br label %for.inc253

if.then227:                                       ; preds = %do.end218
  %148 = load i16*, i16** %99, align 8, !tbaa !158
  %arrayidx230 = getelementptr inbounds i16, i16* %148, i64 %indvars.iv
  %149 = load i16, i16* %arrayidx230, align 2, !tbaa !169
  %call.i535 = tail call double @halide_float16_bits_to_double(i16 zeroext %149) #14
  %call2.i = tail call i8* @halide_double_to_string(i8* %call.i500, i8* %ss.sroa.74.0, double %call.i535, i32 1) #14
  br label %for.inc253

if.else232:                                       ; preds = %do.end218
  %150 = load double*, double** %101, align 8, !tbaa !158
  %arrayidx235 = getelementptr inbounds double, double* %150, i64 %indvars.iv
  %151 = load double, double* %arrayidx235, align 8, !tbaa !172
  %call.i540 = tail call i8* @halide_double_to_string(i8* %call.i500, i8* %ss.sroa.74.0, double %151, i32 1) #14
  br label %for.inc253

if.then244:                                       ; preds = %if.end136
  %152 = load i8**, i8*** %98, align 8, !tbaa !158
  %arrayidx247 = getelementptr inbounds i8*, i8** %152, i64 %indvars.iv
  %153 = load i8*, i8** %arrayidx247, align 8, !tbaa !14
  %call.i543 = tail call i8* @halide_pointer_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i8* %153) #14
  br label %for.inc253

for.inc253:                                       ; preds = %if.then244, %if.else232, %if.then227, %if.then220, %if.else199, %if.then194, %if.then186, %if.then178, %if.else163, %if.then158, %if.then150, %if.then142, %if.end136
  %ss.sroa.7.7 = phi i8* [ %call.i500, %if.end136 ], [ %call.i543, %if.then244 ], [ %call.i540, %if.else232 ], [ %call2.i, %if.then227 ], [ %call.i534, %if.then220 ], [ %call.i530, %if.else199 ], [ %call.i527, %if.then194 ], [ %call.i523, %if.then186 ], [ %call.i519, %if.then178 ], [ %call.i515, %if.else163 ], [ %call.i512, %if.then158 ], [ %call.i508, %if.then150 ], [ %call.i504, %if.then142 ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %154 = load i16, i16* %lanes77, align 2, !tbaa !138
  %155 = zext i16 %154 to i64
  %cmp130 = icmp ult i64 %indvars.iv.next, %155
  br i1 %cmp130, label %if.end136, label %for.cond.cleanup131, !llvm.loop !174

if.then260:                                       ; preds = %for.cond.cleanup131
  %call.i546 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.7, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.25, i64 0, i64 0)) #14
  br label %if.end263

if.end263:                                        ; preds = %if.then260, %for.cond.cleanup131, %for.inc253.peel, %if.then115, %for.cond.cleanup
  %ss.sroa.7.8 = phi i8* [ %call.i546, %if.then260 ], [ %ss.sroa.7.7, %for.cond.cleanup131 ], [ %call.i491, %for.cond.cleanup ], [ %ss.sroa.7.7.peel, %for.inc253.peel ], [ %call.i497, %if.then115 ]
  %trace_tag264 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 3
  %156 = load i8*, i8** %trace_tag264, align 8, !tbaa !147
  %tobool265.not = icmp eq i8* %156, null
  br i1 %tobool265.not, label %if.end274, label %land.lhs.true266

land.lhs.true266:                                 ; preds = %if.end263
  %157 = load i8, i8* %156, align 1, !tbaa !18
  %tobool268.not = icmp eq i8 %157, 0
  br i1 %tobool268.not, label %if.end274, label %if.then269

if.then269:                                       ; preds = %land.lhs.true266
  %call.i549 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.8, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.26, i64 0, i64 0)) #14
  %158 = load i8*, i8** %trace_tag264, align 8, !tbaa !147
  %call.i552 = tail call i8* @halide_string_to_string(i8* %call.i549, i8* %ss.sroa.74.0, i8* %158) #14
  %call.i555 = tail call i8* @halide_string_to_string(i8* %call.i552, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.27, i64 0, i64 0)) #14
  br label %if.end274

if.end274:                                        ; preds = %if.then269, %land.lhs.true266, %if.end263
  %ss.sroa.7.9 = phi i8* [ %ss.sroa.7.8, %if.end263 ], [ %ss.sroa.7.8, %land.lhs.true266 ], [ %call.i555, %if.then269 ]
  %call.i558 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.9, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #14
  br label %while.cond.i560

while.cond.i560:                                  ; preds = %while.cond.i560, %if.end274
  %159 = atomicrmw volatile xchg i8* @_ZN6Halide7Runtime8Internal22halide_trace_file_lockE, i8 1 acquire
  %tobool.not.i559 = icmp eq i8 %159, 0
  br i1 %tobool.not.i559, label %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit, label %while.cond.i560, !llvm.loop !175

_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit: ; preds = %while.cond.i560
  br i1 %tobool.not.i448, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  store atomic volatile i8 0, i8* @_ZN6Halide7Runtime8Internal22halide_trace_file_lockE release, align 1
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %sub.ptr.lhs.cast.i.i563 = ptrtoint i8* %call.i558 to i64
  %sub.ptr.rhs.cast.i.i564 = ptrtoint i8* %call.i445 to i64
  %sub.ptr.sub.i.i565 = sub i64 1, %sub.ptr.rhs.cast.i.i564
  %add.i.i566 = add i64 %sub.ptr.sub.i.i565, %sub.ptr.lhs.cast.i.i563
  %call.i.i567 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i445, i64 %add.i.i566) #14
  tail call void @halide_print(i8* %user_context, i8* nonnull %call.i445) #14
  store atomic volatile i8 0, i8* @_ZN6Halide7Runtime8Internal22halide_trace_file_lockE release, align 1
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i445, i64 %add.i.i566) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i445) #14
  br label %if.end277

if.end277:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EED2Ev.exit, %do.end.critedge.i, %if.then10.i, %if.then.i442, %_ZN21halide_trace_packet_t9trace_tagEv.exit
  ret i32 %0
}

; Function Attrs: nounwind
define weak i32 @halide_get_trace_file(i8* %user_context) local_unnamed_addr #4 {
entry:
  br label %while.cond.i

while.cond.i:                                     ; preds = %while.cond.i, %entry
  %0 = atomicrmw volatile xchg i8* @_ZN6Halide7Runtime8Internal22halide_trace_file_lockE, i8 1 acquire
  %tobool.not.i = icmp eq i8 %0, 0
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit, label %while.cond.i, !llvm.loop !175

_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit: ; preds = %while.cond.i
  %1 = load i32, i32* @_ZN6Halide7Runtime8Internal17halide_trace_fileE, align 4, !tbaa !41
  %cmp = icmp slt i32 %1, 0
  br i1 %cmp, label %if.then, label %if.end11

if.then:                                          ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %call = tail call i8* @getenv(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.28, i64 0, i64 0)) #14
  %tobool.not = icmp eq i8* %call, null
  br i1 %tobool.not, label %if.else, label %if.then1

if.then1:                                         ; preds = %if.then
  %call2 = tail call i8* @fopen(i8* nonnull %call, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.29, i64 0, i64 0)) #14
  %tobool3.not = icmp eq i8* %call2, null
  br i1 %tobool3.not, label %if.then4, label %do.end

if.then4:                                         ; preds = %if.then1
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([139 x i8], [139 x i8]* @.str.30, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %do.end

do.end:                                           ; preds = %if.then4, %if.then1
  %call5 = tail call i32 @fileno(i8* %call2) #14
  tail call void @halide_set_trace_file(i32 %call5) #15
  store i8* %call2, i8** @_ZN6Halide7Runtime8Internal35halide_trace_file_internally_openedE, align 8, !tbaa !14
  %2 = load %"class.Halide::Runtime::Internal::TraceBuffer"*, %"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE, align 8, !tbaa !14
  %tobool6.not = icmp eq %"class.Halide::Runtime::Internal::TraceBuffer"* %2, null
  br i1 %tobool6.not, label %if.then7, label %if.end11

if.then7:                                         ; preds = %do.end
  %call8 = tail call i8* @malloc(i64 1048588) #14
  store i8* %call8, i8** bitcast (%"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE to i8**), align 8, !tbaa !14
  %cursor.i = getelementptr inbounds i8, i8* %call8, i64 4
  %3 = bitcast i8* %cursor.i to <2 x i32>*
  store <2 x i32> zeroinitializer, <2 x i32>* %3, align 4, !tbaa !41
  %lock.i.i = bitcast i8* %call8 to i32*
  store volatile i32 0, i32* %lock.i.i, align 4, !tbaa !148
  br label %if.end11

if.else:                                          ; preds = %if.then
  tail call void @halide_set_trace_file(i32 0) #15
  br label %if.end11

if.end11:                                         ; preds = %if.else, %if.then7, %do.end, %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %4 = load i32, i32* @_ZN6Halide7Runtime8Internal17halide_trace_fileE, align 4, !tbaa !41
  store atomic volatile i8 0, i8* @_ZN6Halide7Runtime8Internal22halide_trace_file_lockE release, align 1
  ret i32 %4
}

declare i8* @memcpy(i8*, i8*, i64) local_unnamed_addr #1

declare i8* @fopen(i8*, i8*) local_unnamed_addr #1

declare i32 @fileno(i8*) local_unnamed_addr #1

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_set_trace_file(i32 %fd) local_unnamed_addr #2 {
entry:
  store i32 %fd, i32* @_ZN6Halide7Runtime8Internal17halide_trace_fileE, align 4, !tbaa !41
  ret void
}

; Function Attrs: nounwind mustprogress
define weak void @halide_trace_cleanup() #0 {
entry:
  %call = tail call i32 @halide_shutdown_trace() #15
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_shutdown_trace() local_unnamed_addr #0 {
entry:
  %0 = load i8*, i8** @_ZN6Halide7Runtime8Internal35halide_trace_file_internally_openedE, align 8, !tbaa !14
  %tobool.not = icmp eq i8* %0, null
  br i1 %tobool.not, label %return, label %if.then

if.then:                                          ; preds = %entry
  %call = tail call i32 @fclose(i8* nonnull %0) #14
  store i32 0, i32* @_ZN6Halide7Runtime8Internal17halide_trace_fileE, align 4, !tbaa !41
  store i8 0, i8* @_ZN6Halide7Runtime8Internal29halide_trace_file_initializedE, align 1, !tbaa !19
  store i8* null, i8** @_ZN6Halide7Runtime8Internal35halide_trace_file_internally_openedE, align 8, !tbaa !14
  %1 = load %"class.Halide::Runtime::Internal::TraceBuffer"*, %"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE, align 8, !tbaa !14
  %tobool1.not = icmp eq %"class.Halide::Runtime::Internal::TraceBuffer"* %1, null
  br i1 %tobool1.not, label %return, label %if.then2

if.then2:                                         ; preds = %if.then
  %2 = bitcast %"class.Halide::Runtime::Internal::TraceBuffer"* %1 to i8*
  tail call void @free(i8* nonnull %2) #14
  br label %return

return:                                           ; preds = %if.then2, %if.then, %entry
  %retval.0 = phi i32 [ %call, %if.then2 ], [ %call, %if.then ], [ 0, %entry ]
  ret i32 %retval.0
}

declare i32 @fclose(i8*) local_unnamed_addr #1

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i8*, %struct.halide_trace_event_t*)* @halide_set_custom_trace(i32 (i8*, %struct.halide_trace_event_t*)* %t) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i8*, %struct.halide_trace_event_t*)*, i32 (i8*, %struct.halide_trace_event_t*)** @_ZN6Halide7Runtime8Internal19halide_custom_traceE, align 8, !tbaa !14
  store i32 (i8*, %struct.halide_trace_event_t*)* %t, i32 (i8*, %struct.halide_trace_event_t*)** @_ZN6Halide7Runtime8Internal19halide_custom_traceE, align 8, !tbaa !14
  ret i32 (i8*, %struct.halide_trace_event_t*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_trace(i8* %user_context, %struct.halide_trace_event_t* %e) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, %struct.halide_trace_event_t*)*, i32 (i8*, %struct.halide_trace_event_t*)** @_ZN6Halide7Runtime8Internal19halide_custom_traceE, align 8, !tbaa !14
  %call = tail call i32 %0(i8* %user_context, %struct.halide_trace_event_t* %e) #14
  ret i32 %call
}

; Function Attrs: nounwind
define weak i32 @halide_trace_helper(i8* %user_context, i8* %func, i8* %value, i32* %coords, i32 %type_code, i32 %type_bits, i32 %type_lanes, i32 %code, i32 %parent_id, i32 %value_index, i32 %dimensions, i8* %trace_tag) local_unnamed_addr #4 {
entry:
  %event = alloca %struct.halide_trace_event_t, align 8
  %0 = bitcast %struct.halide_trace_event_t* %event to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %0) #11
  %code.i.i = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 4, i32 0
  %bits.i.i = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 4, i32 1
  %lanes.i.i = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 4, i32 2
  %func1 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 0
  store i8* %func, i8** %func1, align 8, !tbaa !146
  %value2 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 1
  store i8* %value, i8** %value2, align 8, !tbaa !158
  %coordinates = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 2
  store i32* %coords, i32** %coordinates, align 8, !tbaa !157
  %trace_tag3 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 3
  store i8* %trace_tag, i8** %trace_tag3, align 8, !tbaa !147
  %conv = trunc i32 %type_code to i8
  store i8 %conv, i8* %code.i.i, align 8, !tbaa !168
  %conv5 = trunc i32 %type_bits to i8
  store i8 %conv5, i8* %bits.i.i, align 1, !tbaa !163
  %conv7 = trunc i32 %type_lanes to i16
  store i16 %conv7, i16* %lanes.i.i, align 2, !tbaa !138
  %event9 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 5
  store i32 %code, i32* %event9, align 4, !tbaa !162
  %parent_id10 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 6
  store i32 %parent_id, i32* %parent_id10, align 8, !tbaa !176
  %value_index11 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 7
  store i32 %value_index, i32* %value_index11, align 4, !tbaa !165
  %dimensions12 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 8
  store i32 %dimensions, i32* %dimensions12, align 8, !tbaa !145
  %call = call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %0, i64 56) #14
  %add = add nsw i32 %type_bits, 7
  %div = sdiv i32 %add, 8
  %mul = mul nsw i32 %div, %type_lanes
  %conv13 = sext i32 %mul to i64
  %call14 = call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* %value, i64 %conv13) #14
  %1 = bitcast i32* %coords to i8*
  %conv15 = sext i32 %dimensions to i64
  %mul16 = shl nsw i64 %conv15, 2
  %call17 = call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* %1, i64 %mul16) #14
  %call18 = call i32 @halide_trace(i8* %user_context, %struct.halide_trace_event_t* nonnull %event) #14
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %0) #11
  ret i32 %call18
}

; Function Attrs: nounwind mustprogress
define linkonce zeroext i1 @_ZN6Halide7Runtime8Internal9ends_withEPKcS3_(i8* %filename, i8* %suffix) local_unnamed_addr #0 {
entry:
  br label %while.cond

while.cond:                                       ; preds = %while.cond, %entry
  %f.0 = phi i8* [ %filename, %entry ], [ %incdec.ptr, %while.cond ]
  %0 = load i8, i8* %f.0, align 1, !tbaa !18
  %tobool.not = icmp eq i8 %0, 0
  %incdec.ptr = getelementptr inbounds i8, i8* %f.0, i64 1
  br i1 %tobool.not, label %while.cond1, label %while.cond, !llvm.loop !177

while.cond1:                                      ; preds = %while.cond, %while.cond1
  %s.0 = phi i8* [ %incdec.ptr4, %while.cond1 ], [ %suffix, %while.cond ]
  %1 = load i8, i8* %s.0, align 1, !tbaa !18
  %tobool2.not = icmp eq i8 %1, 0
  %incdec.ptr4 = getelementptr inbounds i8, i8* %s.0, i64 1
  br i1 %tobool2.not, label %while.cond6.preheader, label %while.cond1, !llvm.loop !178

while.cond6.preheader:                            ; preds = %while.cond1
  %cmp34 = icmp ne i8* %s.0, %suffix
  %cmp735 = icmp ne i8* %f.0, %filename
  %2 = and i1 %cmp735, %cmp34
  br i1 %2, label %if.end, label %while.cond6.preheader.while.end13_crit_edge

while.cond6.preheader.while.end13_crit_edge:      ; preds = %while.cond6.preheader
  %cmp16.0 = icmp eq i8 0, 0
  br label %while.end13

if.end:                                           ; preds = %while.cond6.preheader, %if.end.while.body8_crit_edge
  %f.13649 = phi i8* [ %incdec.ptr11, %if.end.while.body8_crit_edge ], [ %f.0, %while.cond6.preheader ]
  %s.13748 = phi i8* [ %incdec.ptr12, %if.end.while.body8_crit_edge ], [ %s.0, %while.cond6.preheader ]
  %incdec.ptr11 = getelementptr inbounds i8, i8* %f.13649, i64 -1
  %incdec.ptr12 = getelementptr inbounds i8, i8* %s.13748, i64 -1
  %cmp = icmp ne i8* %incdec.ptr12, %suffix
  %cmp7 = icmp ne i8* %incdec.ptr11, %filename
  %3 = and i1 %cmp7, %cmp
  %.pre = load i8, i8* %incdec.ptr11, align 1, !tbaa !18
  %.pre45 = load i8, i8* %incdec.ptr12, align 1, !tbaa !18
  br i1 %3, label %if.end.while.body8_crit_edge, label %if.end.while.end13_crit_edge, !llvm.loop !179

if.end.while.end13_crit_edge:                     ; preds = %if.end
  %cmp16.1 = icmp eq i8 %.pre, %.pre45
  br label %while.end13

if.end.while.body8_crit_edge:                     ; preds = %if.end
  %cmp10.not = icmp eq i8 %.pre, %.pre45
  br i1 %cmp10.not, label %if.end, label %cleanup

while.end13:                                      ; preds = %if.end.while.end13_crit_edge, %while.cond6.preheader.while.end13_crit_edge
  %cmp16.phi = phi i1 [ %cmp16.0, %while.cond6.preheader.while.end13_crit_edge ], [ %cmp16.1, %if.end.while.end13_crit_edge ]
  br label %cleanup

cleanup:                                          ; preds = %if.end.while.body8_crit_edge, %while.end13
  %retval.0 = phi i1 [ %cmp16.phi, %while.end13 ], [ false, %if.end.while.body8_crit_edge ]
  ret i1 %retval.0
}

; Function Attrs: nounwind
define weak i32 @halide_debug_to_file(i8* %user_context, i8* %filename, i32 %type_code, %struct.halide_buffer_t* %buf) local_unnamed_addr #4 {
entry:
  %shape = alloca [4 x %struct.halide_dimension_t], align 16
  %header = alloca %"struct.Halide::Runtime::Internal::halide_tiff_header", align 2
  %offset = alloca i32, align 4
  %count = alloca i32, align 4
  %array_name = alloca [256 x i8], align 1
  %array_name43 = getelementptr inbounds [256 x i8], [256 x i8]* %array_name, i64 0, i64 0
  %header198 = alloca [129 x i8], align 1
  %tags = alloca [8 x i32], align 4
  %extents = alloca [4 x i32], align 4
  %name_header = alloca [2 x i32], align 4
  %payload_header = alloca [2 x i32], align 4
  %header289 = alloca [5 x i32], align 4
  %temp = alloca [4096 x i8], align 1
  %idx = alloca [4 x i32], align 4
  %zero = alloca i64, align 8
  %host.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 2
  %0 = load i8*, i8** %host.i, align 8, !tbaa !180
  %cmp.i = icmp eq i8* %0, null
  br i1 %cmp.i, label %_ZNK15halide_buffer_t15is_bounds_queryEv.exit, label %if.end

_ZNK15halide_buffer_t15is_bounds_queryEv.exit:    ; preds = %entry
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !182
  %cmp2.i = icmp eq i64 %1, 0
  br i1 %cmp2.i, label %if.then, label %if.end

if.then:                                          ; preds = %_ZNK15halide_buffer_t15is_bounds_queryEv.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.34, i64 0, i64 0)) #14
  br label %return

if.end:                                           ; preds = %_ZNK15halide_buffer_t15is_bounds_queryEv.exit, %entry
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 5
  %2 = load i32, i32* %dimensions, align 4, !tbaa !183
  %cmp = icmp sgt i32 %2, 4
  br i1 %cmp, label %if.then1, label %if.end2

if.then1:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.1.35, i64 0, i64 0)) #14
  br label %return

if.end2:                                          ; preds = %if.end
  %call3 = tail call i32 @halide_copy_to_host(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #14
  %cmp4.not = icmp eq i32 %call3, 0
  br i1 %cmp4.not, label %if.end6, label %return

if.end6:                                          ; preds = %if.end2
  %call.i598 = tail call i8* @fopen(i8* %filename, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2.36, i64 0, i64 0)) #14
  %cmp.i601.not = icmp eq i8* %call.i598, null
  br i1 %cmp.i601.not, label %return, label %if.end9

if.end9:                                          ; preds = %if.end6
  %3 = bitcast [4 x %struct.halide_dimension_t]* %shape to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %3) #11
  %min.i = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 0, i32 0
  %extent.i = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 0, i32 1
  %4 = bitcast [4 x %struct.halide_dimension_t]* %shape to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %4, align 16, !tbaa !41
  %min.i.1 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 1, i32 0
  %extent.i.1 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 1, i32 1
  %5 = bitcast i32* %min.i.1 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %5, align 16, !tbaa !41
  %min.i.2 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 2, i32 0
  %extent.i.2 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 2, i32 1
  %6 = bitcast i32* %min.i.2 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %6, align 16, !tbaa !41
  %min.i.3 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 3, i32 0
  %extent.i.3 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 3, i32 1
  %7 = bitcast i32* %min.i.3 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %7, align 16, !tbaa !41
  %8 = load i32, i32* %dimensions, align 4, !tbaa !183
  %cmp11875 = icmp sgt i32 %8, 0
  br i1 %cmp11875, label %for.body.lr.ph, label %for.body22.preheader

for.body.lr.ph:                                   ; preds = %if.end9
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  %9 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !184
  %10 = zext i32 %8 to i64
  %11 = add nsw i64 %10, -1
  %12 = icmp ult i64 %11, 3
  %13 = select i1 %12, i64 %10, i64 4
  br label %for.body

for.cond19.preheader:                             ; preds = %for.body
  %cmp20873 = icmp slt i32 %8, 4
  br i1 %cmp20873, label %for.body22.preheader, label %for.cond.cleanup21

for.body22.preheader:                             ; preds = %for.cond19.preheader, %if.end9
  %elts.0.lcssa907 = phi i64 [ %mul, %for.cond19.preheader ], [ 1, %if.end9 ]
  %14 = sext i32 %8 to i64
  %15 = sub i32 3, %8
  %16 = zext i32 %15 to i64
  %17 = add nuw nsw i64 %16, 1
  %min.iters.check = icmp eq i32 %15, 0
  br i1 %min.iters.check, label %for.body22.preheader162, label %vector.ph

vector.ph:                                        ; preds = %for.body22.preheader
  %n.vec = and i64 %17, 8589934590
  %ind.end = add nsw i64 %n.vec, %14
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %offset.idx = add i64 %index, %14
  %induction36 = add i64 %offset.idx, 1
  %18 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 %offset.idx, i32 0
  %19 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 %induction36, i32 0
  %20 = bitcast i32* %18 to <2 x i32>*
  store <2 x i32> <i32 0, i32 1>, <2 x i32>* %20, align 16, !tbaa !41
  %21 = bitcast i32* %19 to <2 x i32>*
  store <2 x i32> <i32 0, i32 1>, <2 x i32>* %21, align 16, !tbaa !41
  %22 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 %offset.idx, i32 2
  %23 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 %induction36, i32 2
  store i32 0, i32* %22, align 8, !tbaa !185
  store i32 0, i32* %23, align 8, !tbaa !185
  %index.next = add i64 %index, 2
  %24 = icmp eq i64 %index.next, %n.vec
  br i1 %24, label %middle.block, label %vector.body, !llvm.loop !187

middle.block:                                     ; preds = %vector.body
  %cmp.n = icmp eq i64 %17, %n.vec
  br i1 %cmp.n, label %for.cond.cleanup21, label %for.body22.preheader162

for.body22.preheader162:                          ; preds = %for.body22.preheader, %middle.block
  %indvars.iv.ph = phi i64 [ %14, %for.body22.preheader ], [ %ind.end, %middle.block ]
  br label %for.body22

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %indvars.iv887 = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next888, %for.body ]
  %elts.0877 = phi i64 [ 1, %for.body.lr.ph ], [ %mul, %for.body ]
  %arrayidx = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %9, i64 %indvars.iv887
  %arrayidx14 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 %indvars.iv887
  %25 = bitcast %struct.halide_dimension_t* %arrayidx14 to i8*
  %26 = bitcast %struct.halide_dimension_t* %arrayidx to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 dereferenceable(16) %25, i8* nonnull align 4 dereferenceable(16) %26, i64 16, i1 false), !tbaa.struct !188
  %extent = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 %indvars.iv887, i32 1
  %27 = load i32, i32* %extent, align 4, !tbaa !189
  %conv903 = zext i32 %27 to i64
  %mul = mul i64 %elts.0877, %conv903
  %indvars.iv.next888 = add nuw nsw i64 %indvars.iv887, 1
  %exitcond.not17 = icmp eq i64 %indvars.iv.next888, %13
  br i1 %exitcond.not17, label %for.cond19.preheader, label %for.body, !llvm.loop !190

for.cond.cleanup21:                               ; preds = %for.body22, %middle.block, %for.cond19.preheader
  %elts.0.lcssa906 = phi i64 [ %mul, %for.cond19.preheader ], [ %elts.0.lcssa907, %middle.block ], [ %elts.0.lcssa907, %for.body22 ]
  %bits.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 4, i32 1
  %28 = load i8, i8* %bits.i, align 1, !tbaa !144
  %conv.i = zext i8 %28 to i32
  %add.i = add nuw nsw i32 %conv.i, 7
  %div.i = lshr i32 %add.i, 3
  %call34 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal9ends_withEPKcS3_(i8* %filename, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3.37, i64 0, i64 0)) #15
  br i1 %call34, label %if.then36, label %lor.lhs.false

for.body22:                                       ; preds = %for.body22.preheader162, %for.body22
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body22 ], [ %indvars.iv.ph, %for.body22.preheader162 ]
  %min = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 %indvars.iv, i32 0
  %29 = bitcast i32* %min to <2 x i32>*
  store <2 x i32> <i32 0, i32 1>, <2 x i32>* %29, align 16, !tbaa !41
  %stride = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 %indvars.iv, i32 2
  store i32 0, i32* %stride, align 8, !tbaa !185
  %indvars.iv.next = add nsw i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond886.not = icmp eq i32 %lftr.wideiv, 4
  br i1 %exitcond886.not, label %for.cond.cleanup21, label %for.body22, !llvm.loop !191

lor.lhs.false:                                    ; preds = %for.cond.cleanup21
  %call35 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal9ends_withEPKcS3_(i8* %filename, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4.38, i64 0, i64 0)) #15
  br i1 %call35, label %if.then36, label %if.else164

if.then36:                                        ; preds = %lor.lhs.false, %for.cond.cleanup21
  %30 = load i32, i32* %extent.i, align 4, !tbaa !189
  %31 = load i32, i32* %extent.i.1, align 4, !tbaa !189
  %32 = load i32, i32* %extent.i.3, align 4, !tbaa !189
  %switch = icmp ult i32 %32, 2
  %33 = load i32, i32* %extent.i.2, align 4, !tbaa !189
  %cmp50 = icmp slt i32 %33, 5
  %or.cond = and i1 %switch, %cmp50
  %depth.0 = select i1 %or.cond, i32 1, i32 %33
  %channels.0 = select i1 %or.cond, i32 %33, i32 %32
  %34 = bitcast %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header to i8*
  call void @llvm.lifetime.start.p0i8(i64 210, i8* nonnull %34) #11
  %byte_order_marker = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 0
  store i16 18761, i16* %byte_order_marker, align 2, !tbaa !192
  %version = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 1
  store i16 42, i16* %version, align 2, !tbaa !194
  %ifd0_offset = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 2
  store i32 8, i32* %ifd0_offset, align 2, !tbaa !195
  %entry_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 3
  store i16 15, i16* %entry_count, align 2, !tbaa !196
  %tag_code2.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 0, i32 0
  store i16 256, i16* %tag_code2.i, align 2, !tbaa !197
  %type_code.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 0, i32 1
  store i16 4, i16* %type_code.i, align 2, !tbaa !199
  %count3.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 0, i32 2
  store i32 1, i32* %count3.i, align 2, !tbaa !200
  %i32.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 0, i32 3, i32 0
  store i32 %30, i32* %i32.i, align 2, !tbaa !18
  %tag_code2.i632 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 1, i32 0
  store i16 257, i16* %tag_code2.i632, align 2, !tbaa !197
  %type_code.i633 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 1, i32 1
  store i16 4, i16* %type_code.i633, align 2, !tbaa !199
  %count3.i634 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 1, i32 2
  store i32 1, i32* %count3.i634, align 2, !tbaa !200
  %i32.i635 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 1, i32 3, i32 0
  store i32 %31, i32* %i32.i635, align 2, !tbaa !18
  %35 = trunc i32 %add.i to i16
  %conv68 = and i16 %35, 504
  %tag_code2.i643 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 2, i32 0
  store i16 258, i16* %tag_code2.i643, align 2, !tbaa !197
  %type_code.i644 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 2, i32 1
  store i16 3, i16* %type_code.i644, align 2, !tbaa !199
  %count3.i645 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 2, i32 2
  store i32 1, i32* %count3.i645, align 2, !tbaa !200
  %value4.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 2, i32 3
  %i16.i = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i to i16*
  store i16 %conv68, i16* %i16.i, align 2, !tbaa !18
  %tag_code2.i653 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 3, i32 0
  store i16 259, i16* %tag_code2.i653, align 2, !tbaa !197
  %type_code.i654 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 3, i32 1
  store i16 3, i16* %type_code.i654, align 2, !tbaa !199
  %count3.i655 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 3, i32 2
  store i32 1, i32* %count3.i655, align 2, !tbaa !200
  %value4.i656 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 3, i32 3
  %i16.i657 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i656 to i16*
  store i16 1, i16* %i16.i657, align 2, !tbaa !18
  %cmp71 = icmp sgt i32 %channels.0, 2
  %conv72 = select i1 %cmp71, i16 2, i16 1
  %tag_code2.i665 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 4, i32 0
  store i16 262, i16* %tag_code2.i665, align 2, !tbaa !197
  %type_code.i666 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 4, i32 1
  store i16 3, i16* %type_code.i666, align 2, !tbaa !199
  %count3.i667 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 4, i32 2
  store i32 1, i32* %count3.i667, align 2, !tbaa !200
  %value4.i668 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 4, i32 3
  %i16.i669 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i668 to i16*
  store i16 %conv72, i16* %i16.i669, align 2, !tbaa !18
  %tag_code2.i677 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 5, i32 0
  store i16 273, i16* %tag_code2.i677, align 2, !tbaa !197
  %type_code.i678 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 5, i32 1
  store i16 4, i16* %type_code.i678, align 2, !tbaa !199
  %count3.i679 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 5, i32 2
  store i32 %channels.0, i32* %count3.i679, align 2, !tbaa !200
  %i32.i680 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 5, i32 3, i32 0
  store i32 210, i32* %i32.i680, align 2, !tbaa !18
  %conv75 = trunc i32 %channels.0 to i16
  %tag_code2.i688 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 6, i32 0
  store i16 277, i16* %tag_code2.i688, align 2, !tbaa !197
  %type_code.i689 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 6, i32 1
  store i16 3, i16* %type_code.i689, align 2, !tbaa !199
  %count3.i690 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 6, i32 2
  store i32 1, i32* %count3.i690, align 2, !tbaa !200
  %value4.i691 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 6, i32 3
  %i16.i692 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i691 to i16*
  store i16 %conv75, i16* %i16.i692, align 2, !tbaa !18
  %tag_code2.i706 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 7, i32 0
  store i16 278, i16* %tag_code2.i706, align 2, !tbaa !197
  %type_code.i707 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 7, i32 1
  store i16 4, i16* %type_code.i707, align 2, !tbaa !199
  %count3.i708 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 7, i32 2
  store i32 1, i32* %count3.i708, align 2, !tbaa !200
  %i32.i709 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 7, i32 3, i32 0
  store i32 %31, i32* %i32.i709, align 2, !tbaa !18
  %cmp80 = icmp eq i32 %channels.0, 1
  %36 = trunc i64 %elts.0.lcssa906 to i32
  %conv86595 = mul i32 %div.i, %36
  %mul84 = shl i32 %channels.0, 2
  %add = add i32 %mul84, 210
  %add.sink = select i1 %cmp80, i32 %conv86595, i32 %add
  %37 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 8, i32 0
  store i16 279, i16* %37, align 2
  %38 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 8, i32 1
  store i16 4, i16* %38, align 2
  %39 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 8, i32 2
  store i32 %channels.0, i32* %39, align 2
  %40 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 8, i32 3, i32 0
  store i32 %add.sink, i32* %40, align 2
  %tag_code2.i732 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 9, i32 0
  store i16 282, i16* %tag_code2.i732, align 2, !tbaa !197
  %type_code3.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 9, i32 1
  store i16 5, i16* %type_code3.i, align 2, !tbaa !199
  %count4.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 9, i32 2
  %41 = bitcast i32* %count4.i to <2 x i32>*
  store <2 x i32> <i32 1, i32 194>, <2 x i32>* %41, align 2, !tbaa !18
  %tag_code2.i741 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 10, i32 0
  store i16 283, i16* %tag_code2.i741, align 2, !tbaa !197
  %type_code3.i742 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 10, i32 1
  store i16 5, i16* %type_code3.i742, align 2, !tbaa !199
  %count4.i743 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 10, i32 2
  %42 = bitcast i32* %count4.i743 to <2 x i32>*
  store <2 x i32> <i32 1, i32 202>, <2 x i32>* %42, align 2, !tbaa !18
  %tag_code2.i759 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 11, i32 0
  store i16 284, i16* %tag_code2.i759, align 2, !tbaa !197
  %type_code.i760 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 11, i32 1
  store i16 3, i16* %type_code.i760, align 2, !tbaa !199
  %count3.i761 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 11, i32 2
  store i32 1, i32* %count3.i761, align 2, !tbaa !200
  %value4.i762 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 11, i32 3
  %i16.i763 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i762 to i16*
  store i16 2, i16* %i16.i763, align 2, !tbaa !18
  %tag_code2.i754 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 12, i32 0
  store i16 296, i16* %tag_code2.i754, align 2, !tbaa !197
  %type_code.i755 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 12, i32 1
  store i16 3, i16* %type_code.i755, align 2, !tbaa !199
  %count3.i756 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 12, i32 2
  store i32 1, i32* %count3.i756, align 2, !tbaa !200
  %value4.i757 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 12, i32 3
  %i16.i758 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i757 to i16*
  store i16 1, i16* %i16.i758, align 2, !tbaa !18
  %idxprom92 = sext i32 %type_code to i64
  %arrayidx93 = getelementptr inbounds [10 x i16], [10 x i16]* @_ZN6Halide7Runtime8Internal30pixel_type_to_tiff_sample_typeE, i64 0, i64 %idxprom92
  %43 = load i16, i16* %arrayidx93, align 2, !tbaa !169
  %tag_code2.i749 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 13, i32 0
  store i16 339, i16* %tag_code2.i749, align 2, !tbaa !197
  %type_code.i750 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 13, i32 1
  store i16 3, i16* %type_code.i750, align 2, !tbaa !199
  %count3.i751 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 13, i32 2
  store i32 1, i32* %count3.i751, align 2, !tbaa !200
  %value4.i752 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 13, i32 3
  %i16.i753 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i752 to i16*
  store i16 %43, i16* %i16.i753, align 2, !tbaa !18
  %tag_code2.i745 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 14, i32 0
  store i16 -32539, i16* %tag_code2.i745, align 2, !tbaa !197
  %type_code.i746 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 14, i32 1
  store i16 4, i16* %type_code.i746, align 2, !tbaa !199
  %count3.i747 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 14, i32 2
  store i32 1, i32* %count3.i747, align 2, !tbaa !200
  %i32.i748 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 14, i32 3, i32 0
  store i32 %depth.0, i32* %i32.i748, align 2, !tbaa !18
  %ifd0_end = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 5
  %44 = bitcast i32* %ifd0_end to <4 x i32>*
  store <4 x i32> <i32 0, i32 1, i32 1, i32 1>, <4 x i32>* %44, align 2, !tbaa !41
  %arrayidx100 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 7, i64 1
  store i32 1, i32* %arrayidx100, align 2, !tbaa !41
  %call.i736 = call i64 @fwrite(i8* nonnull %34, i64 210, i64 1, i8* nonnull %call.i598) #14
  %cmp.i737.not = icmp eq i64 %call.i736, 0
  br i1 %cmp.i737.not, label %cleanup154, label %if.end103

if.end103:                                        ; preds = %if.then36
  %cmp104 = icmp sgt i32 %channels.0, 1
  br i1 %cmp104, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731.lr.ph, label %cleanup154.thread

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731.lr.ph: ; preds = %if.end103
  %45 = bitcast i32* %offset to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %45) #11
  %mul108 = shl i32 %channels.0, 3
  %add109 = add i32 %mul108, 210
  store i32 %add109, i32* %offset, align 4, !tbaa !41
  %mul123 = mul i32 %depth.0, %div.i
  %46 = load i32, i32* %extent.i, align 4
  %47 = load i32, i32* %extent.i.1, align 4
  %mul124 = mul i32 %mul123, %46
  %mul125 = mul i32 %mul124, %47
  br label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731: ; preds = %if.end118, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731.lr.ph
  %i111.0865 = phi i32 [ 0, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731.lr.ph ], [ %inc128, %if.end118 ]
  %call.i727 = call i64 @fwrite(i8* nonnull %45, i64 4, i64 1, i8* nonnull %call.i598) #14
  %cmp.i728.not = icmp eq i64 %call.i727, 0
  br i1 %cmp.i728.not, label %cleanup151.thread, label %if.end118

if.end118:                                        ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731
  %48 = load i32, i32* %offset, align 4, !tbaa !41
  %add126 = add nsw i32 %mul125, %48
  store i32 %add126, i32* %offset, align 4, !tbaa !41
  %inc128 = add nuw nsw i32 %i111.0865, 1
  %exitcond881.not = icmp eq i32 %inc128, %channels.0
  br i1 %exitcond881.not, label %for.end129, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731, !llvm.loop !201

for.end129:                                       ; preds = %if.end118
  %49 = bitcast i32* %count to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %49) #11
  store i32 %mul125, i32* %count, align 4, !tbaa !41
  %inc146.1 = add nuw nsw i32 0, 1
  br label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720

for.cond138:                                      ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720
  %exitcond.not = icmp eq i32 %inc146.phi, %channels.0
  br i1 %exitcond.not, label %cleanup151, label %for.cond138._ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720_crit_edge, !llvm.loop !202

for.cond138._ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720_crit_edge: ; preds = %for.cond138
  %inc146.0 = add nuw nsw i32 %inc146.phi, 1
  br label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720: ; preds = %for.cond138._ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720_crit_edge, %for.end129
  %inc146.phi = phi i32 [ %inc146.0, %for.cond138._ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720_crit_edge ], [ %inc146.1, %for.end129 ]
  %call.i716 = call i64 @fwrite(i8* nonnull %49, i64 4, i64 1, i8* nonnull %call.i598) #14
  %cmp.i717.not = icmp eq i64 %call.i716, 0
  br i1 %cmp.i717.not, label %select.unfold, label %for.cond138

select.unfold:                                    ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %49) #11
  br label %cleanup151.thread

cleanup151.thread:                                ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731, %select.unfold
  %retval.2.ph = phi i32 [ -5, %select.unfold ], [ -4, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %45) #11
  br label %cleanup154

cleanup151:                                       ; preds = %for.cond138
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %49) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %45) #11
  br label %cleanup154.thread

cleanup154.thread:                                ; preds = %cleanup151, %if.end103
  call void @llvm.lifetime.end.p0i8(i64 210, i8* nonnull %34) #11
  br label %if.end311

cleanup154:                                       ; preds = %cleanup151.thread, %if.then36
  %retval.4 = phi i32 [ -3, %if.then36 ], [ %retval.2.ph, %cleanup151.thread ]
  call void @llvm.lifetime.end.p0i8(i64 210, i8* nonnull %34) #11
  br label %cleanup433

if.else164:                                       ; preds = %lor.lhs.false
  %call165 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal9ends_withEPKcS3_(i8* %filename, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5.39, i64 0, i64 0)) #15
  br i1 %call165, label %while.cond, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631

while.cond:                                       ; preds = %if.else164, %while.cond
  %end.0 = phi i8* [ %incdec.ptr167, %while.cond ], [ %filename, %if.else164 ]
  %50 = load i8, i8* %end.0, align 1, !tbaa !18
  %tobool.not = icmp eq i8 %50, 0
  %incdec.ptr167 = getelementptr inbounds i8, i8* %end.0, i64 1
  br i1 %tobool.not, label %while.body171, label %while.cond, !llvm.loop !203

while.cond174.preheader:                          ; preds = %while.body171
  %end.1872.lcssa883 = ptrtoint i8* %end.1872 to i64
  %51 = ptrtoint i8* %filename to i64
  %52 = sub i64 %51, %end.1872.lcssa883
  br label %while.cond174

while.body171:                                    ; preds = %while.cond, %while.body171
  %end.1872 = phi i8* [ %incdec.ptr172.ptr, %while.body171 ], [ %end.0, %while.cond ]
  %incdec.ptr172.ptr = getelementptr inbounds i8, i8* %end.1872, i64 -1
  %.pr = load i8, i8* %incdec.ptr172.ptr, align 1, !tbaa !18
  %cmp170.not = icmp eq i8 %.pr, 46
  br i1 %cmp170.not, label %while.cond174.preheader, label %while.body171, !llvm.loop !204

while.cond174:                                    ; preds = %land.rhs176, %while.cond174.preheader
  %start.0.idx = phi i64 [ %start.0.add, %land.rhs176 ], [ -1, %while.cond174.preheader ]
  %start.0.ptr.ptr = getelementptr inbounds i8, i8* %end.1872, i64 %start.0.idx
  %cmp175.not = icmp eq i8* %start.0.ptr.ptr, %filename
  br i1 %cmp175.not, label %while.end183, label %land.rhs176

land.rhs176:                                      ; preds = %while.cond174
  %start.0.add = add nsw i64 %start.0.idx, -1
  %arrayidx177.ptr = getelementptr inbounds i8, i8* %end.1872, i64 %start.0.add
  %53 = load i8, i8* %arrayidx177.ptr, align 1, !tbaa !18
  %cmp179.not = icmp eq i8 %53, 47
  br i1 %cmp179.not, label %while.end183, label %while.cond174, !llvm.loop !205

while.end183:                                     ; preds = %land.rhs176, %while.cond174
  %start.0.idx.lcssa = phi i64 [ %52, %while.cond174 ], [ %start.0.idx, %land.rhs176 ]
  %54 = trunc i64 %start.0.idx.lcssa to i32
  %conv184 = xor i32 %54, -1
  %55 = getelementptr inbounds [256 x i8], [256 x i8]* %array_name, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %55) #11
  %cmp186.not868 = icmp eq i64 %start.0.idx.lcssa, -1
  br i1 %cmp186.not868, label %iter.check, label %while.body187.preheader

while.body187.preheader:                          ; preds = %while.end183
  %56 = xor i64 %start.0.idx.lcssa, -1
  %min.iters.check40 = icmp ugt i64 %start.0.idx.lcssa, -33
  br i1 %min.iters.check40, label %while.body187.preheader160, label %vector.memcheck

vector.memcheck:                                  ; preds = %while.body187.preheader
  %57 = xor i64 %start.0.idx.lcssa, -1
  %scevgep44 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 0, i64 %57
  %scevgep45 = getelementptr i8, i8* %end.1872, i64 %start.0.idx.lcssa
  %scevgep46 = getelementptr i8, i8* %end.1872, i64 -1
  %bound0 = icmp ult i8* %array_name43, %scevgep46
  %bound1 = icmp ult i8* %scevgep45, %scevgep44
  %found.conflict = and i1 %bound0, %bound1
  br i1 %found.conflict, label %while.body187.preheader160, label %vector.ph42

vector.ph42:                                      ; preds = %vector.memcheck
  %n.vec48 = and i64 %56, -32
  %ind.end52 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 0, i64 %n.vec48
  %ind.end54 = add i64 %start.0.idx.lcssa, %n.vec48
  br label %vector.body39

vector.body39:                                    ; preds = %vector.body39, %vector.ph42
  %index49 = phi i64 [ 0, %vector.ph42 ], [ %index.next50, %vector.body39 ]
  %next.gep = getelementptr [256 x i8], [256 x i8]* %array_name, i64 0, i64 %index49
  %offset.idx57 = add i64 %start.0.idx.lcssa, %index49
  %58 = getelementptr inbounds i8, i8* %end.1872, i64 %offset.idx57
  %59 = bitcast i8* %58 to <16 x i8>*
  %wide.load = load <16 x i8>, <16 x i8>* %59, align 1, !tbaa !18, !alias.scope !206
  %60 = getelementptr inbounds i8, i8* %58, i64 16
  %61 = bitcast i8* %60 to <16 x i8>*
  %wide.load58 = load <16 x i8>, <16 x i8>* %61, align 1, !tbaa !18, !alias.scope !206
  %62 = bitcast i8* %next.gep to <16 x i8>*
  store <16 x i8> %wide.load, <16 x i8>* %62, align 1, !tbaa !18, !alias.scope !209, !noalias !206
  %63 = getelementptr i8, i8* %next.gep, i64 16
  %64 = bitcast i8* %63 to <16 x i8>*
  store <16 x i8> %wide.load58, <16 x i8>* %64, align 1, !tbaa !18, !alias.scope !209, !noalias !206
  %index.next50 = add i64 %index49, 32
  %65 = icmp eq i64 %index.next50, %n.vec48
  br i1 %65, label %middle.block37, label %vector.body39, !llvm.loop !211

middle.block37:                                   ; preds = %vector.body39
  %cmp.n55 = icmp eq i64 %n.vec48, %56
  br i1 %cmp.n55, label %while.cond191.preheader, label %while.body187.preheader160

while.body187.preheader160:                       ; preds = %vector.memcheck, %while.body187.preheader, %middle.block37
  %dst.0870.ph = phi i8* [ %55, %vector.memcheck ], [ %55, %while.body187.preheader ], [ %ind.end52, %middle.block37 ]
  %start.1869.idx.ph = phi i64 [ %start.0.idx.lcssa, %vector.memcheck ], [ %start.0.idx.lcssa, %while.body187.preheader ], [ %ind.end54, %middle.block37 ]
  br label %while.body187

while.cond191.preheader:                          ; preds = %while.body187, %middle.block37
  %incdec.ptr189.lcssa = phi i8* [ %ind.end52, %middle.block37 ], [ %incdec.ptr189, %while.body187 ]
  %add.ptr = getelementptr inbounds [256 x i8], [256 x i8]* %array_name, i64 0, i64 256
  %cmp193866 = icmp ult i8* %incdec.ptr189.lcssa, %add.ptr
  br i1 %cmp193866, label %iter.check, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705

iter.check:                                       ; preds = %while.cond191.preheader, %while.end183
  %dst.0.lcssa911 = phi i8* [ %incdec.ptr189.lcssa, %while.cond191.preheader ], [ %55, %while.end183 ]
  %dst.0.lcssa91162 = ptrtoint i8* %dst.0.lcssa911 to i64
  %scevgep = getelementptr inbounds [256 x i8], [256 x i8]* %array_name, i64 1, i64 0
  %66 = sub i64 0, %dst.0.lcssa91162
  %scevgep63 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 1, i64 %66
  %exitcount.ptrcnt.to.int = ptrtoint i8* %scevgep63 to i64
  %min.iters.check65 = icmp ult i8* %scevgep63, inttoptr (i64 4 to i8*)
  br i1 %min.iters.check65, label %while.body194.preheader, label %vector.main.loop.iter.check

vector.main.loop.iter.check:                      ; preds = %iter.check
  %min.iters.check67 = icmp ult i8* %scevgep63, inttoptr (i64 32 to i8*)
  br i1 %min.iters.check67, label %vec.epilog.ph, label %vector.ph68

vector.ph68:                                      ; preds = %vector.main.loop.iter.check
  %n.vec70 = and i64 %exitcount.ptrcnt.to.int, -32
  %next.gep74.0 = getelementptr i8, i8* %dst.0.lcssa911, i64 0
  %index.next72.0 = add i64 0, 32
  br label %vector.body61

vector.body61:                                    ; preds = %vector.body61.vector.body61_crit_edge, %vector.ph68
  %index.next72.phi = phi i64 [ %index.next72.0, %vector.ph68 ], [ %index.next72.1, %vector.body61.vector.body61_crit_edge ]
  %next.gep74.phi = phi i8* [ %next.gep74.0, %vector.ph68 ], [ %next.gep74.1, %vector.body61.vector.body61_crit_edge ]
  %67 = bitcast i8* %next.gep74.phi to <16 x i8>*
  store <16 x i8> zeroinitializer, <16 x i8>* %67, align 1, !tbaa !18
  %68 = getelementptr i8, i8* %next.gep74.phi, i64 16
  %69 = bitcast i8* %68 to <16 x i8>*
  store <16 x i8> zeroinitializer, <16 x i8>* %69, align 1, !tbaa !18
  %70 = icmp eq i64 %index.next72.phi, %n.vec70
  br i1 %70, label %middle.block59, label %vector.body61.vector.body61_crit_edge, !llvm.loop !212

vector.body61.vector.body61_crit_edge:            ; preds = %vector.body61
  %next.gep74.1 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index.next72.phi
  %index.next72.1 = add i64 %index.next72.phi, 32
  br label %vector.body61

middle.block59:                                   ; preds = %vector.body61
  %cmp.n73 = icmp eq i64 %n.vec70, %exitcount.ptrcnt.to.int
  br i1 %cmp.n73, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705, label %vec.epilog.iter.check

vec.epilog.iter.check:                            ; preds = %middle.block59
  %ind.end85 = getelementptr i8, i8* %dst.0.lcssa911, i64 %n.vec70
  %n.vec.remaining = and i64 %exitcount.ptrcnt.to.int, 28
  %min.epilog.iters.check = icmp eq i64 %n.vec.remaining, 0
  br i1 %min.epilog.iters.check, label %while.body194.preheader, label %vec.epilog.ph

vec.epilog.ph:                                    ; preds = %vector.main.loop.iter.check, %vec.epilog.iter.check
  %vec.epilog.resume.val = phi i64 [ %n.vec70, %vec.epilog.iter.check ], [ 0, %vector.main.loop.iter.check ]
  %71 = sub i64 0, %dst.0.lcssa91162
  %scevgep76 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 1, i64 %71
  %exitcount.ptrcnt.to.int78 = ptrtoint i8* %scevgep76 to i64
  %n.vec80 = and i64 %exitcount.ptrcnt.to.int78, -4
  %ind.end84 = getelementptr i8, i8* %dst.0.lcssa911, i64 %n.vec80
  br label %vec.epilog.vector.body

vec.epilog.vector.body:                           ; preds = %vec.epilog.vector.body, %vec.epilog.ph
  %index81 = phi i64 [ %vec.epilog.resume.val, %vec.epilog.ph ], [ %index.next82, %vec.epilog.vector.body ]
  %next.gep87 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index81
  %72 = bitcast i8* %next.gep87 to <4 x i8>*
  store <4 x i8> zeroinitializer, <4 x i8>* %72, align 1, !tbaa !18
  %index.next82 = add i64 %index81, 4
  %73 = icmp eq i64 %index.next82, %n.vec80
  br i1 %73, label %vec.epilog.middle.block, label %vec.epilog.vector.body, !llvm.loop !213

vec.epilog.middle.block:                          ; preds = %vec.epilog.vector.body
  %cmp.n86 = icmp eq i64 %n.vec80, %exitcount.ptrcnt.to.int78
  br i1 %cmp.n86, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705, label %while.body194.preheader

while.body194.preheader:                          ; preds = %iter.check, %vec.epilog.iter.check, %vec.epilog.middle.block
  %dst.1867.ph = phi i8* [ %dst.0.lcssa911, %iter.check ], [ %ind.end85, %vec.epilog.iter.check ], [ %ind.end84, %vec.epilog.middle.block ]
  br label %while.body194

while.body187:                                    ; preds = %while.body187.preheader160, %while.body187
  %dst.0870 = phi i8* [ %incdec.ptr189, %while.body187 ], [ %dst.0870.ph, %while.body187.preheader160 ]
  %start.1869.idx = phi i64 [ %start.1869.add, %while.body187 ], [ %start.1869.idx.ph, %while.body187.preheader160 ]
  %start.1869.ptr = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.idx
  %start.1869.add = add nuw nsw i64 %start.1869.idx, 1
  %74 = load i8, i8* %start.1869.ptr, align 1, !tbaa !18
  %incdec.ptr189 = getelementptr inbounds i8, i8* %dst.0870, i64 1
  store i8 %74, i8* %dst.0870, align 1, !tbaa !18
  %cmp186.not = icmp eq i64 %start.1869.add, -1
  br i1 %cmp186.not, label %while.cond191.preheader, label %while.body187, !llvm.loop !214

while.body194:                                    ; preds = %while.body194.preheader, %while.body194
  %dst.1867 = phi i8* [ %incdec.ptr195, %while.body194 ], [ %dst.1867.ph, %while.body194.preheader ]
  %incdec.ptr195 = getelementptr inbounds i8, i8* %dst.1867, i64 1
  store i8 0, i8* %dst.1867, align 1, !tbaa !18
  %exitcond882.not = icmp eq i8* %incdec.ptr195, %scevgep
  br i1 %exitcond882.not, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705, label %while.body194, !llvm.loop !215

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705: ; preds = %while.body194, %middle.block59, %vec.epilog.middle.block, %while.cond191.preheader
  %add197 = sub i32 6, %54
  %and = and i32 %add197, -8
  %75 = getelementptr inbounds [129 x i8], [129 x i8]* %header198, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 129, i8* nonnull %75) #11
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 dereferenceable(129) %75, i8* nonnull align 1 dereferenceable(129) getelementptr inbounds ([129 x i8], [129 x i8]* @__const.halide_debug_to_file.header, i64 0, i64 0), i64 129, i1 false)
  %call.i701 = call i64 @fwrite(i8* nonnull %75, i64 128, i64 1, i8* nonnull %call.i598) #14
  %76 = load i32, i32* %dimensions, align 4, !tbaa !183
  %cmp19.i.i = icmp sgt i32 %76, 0
  br i1 %cmp19.i.i, label %for.body.lr.ph.i.i, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge: ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705
  %sub.i694.0 = sub nsw i64 1, 0
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.lr.ph.i.i:                               ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  %77 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8, !tbaa !184
  %wide.trip.count.i.i = zext i32 %76 to i64
  %min.iters.check91 = icmp ult i32 %76, 3
  br i1 %min.iters.check91, label %for.body.i.i.preheader, label %vector.ph92

vector.ph92:                                      ; preds = %for.body.lr.ph.i.i
  %n.vec94 = and i64 %wide.trip.count.i.i, 4294967294
  br label %vector.body90

vector.body90:                                    ; preds = %pred.load.continue103, %vector.ph92
  %index95 = phi i64 [ 0, %vector.ph92 ], [ %index.next96, %pred.load.continue103 ]
  %vec.phi = phi i64 [ 0, %vector.ph92 ], [ %predphi, %pred.load.continue103 ]
  %vec.phi101 = phi i64 [ 0, %vector.ph92 ], [ %predphi104, %pred.load.continue103 ]
  %induction100 = or i64 %index95, 1
  %78 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %77, i64 %index95, i32 2
  %79 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %77, i64 %induction100, i32 2
  %80 = load i32, i32* %78, align 4, !tbaa !185
  %81 = load i32, i32* %79, align 4, !tbaa !185
  %82 = icmp sgt i32 %80, 0
  %83 = icmp sgt i32 %81, 0
  %84 = zext i32 %80 to i64
  %85 = zext i32 %81 to i64
  br i1 %82, label %pred.load.if, label %pred.load.continue

pred.load.if:                                     ; preds = %vector.body90
  %86 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %77, i64 %index95, i32 1
  %87 = load i32, i32* %86, align 4, !tbaa !189
  br label %pred.load.continue

pred.load.continue:                               ; preds = %pred.load.if, %vector.body90
  %88 = phi i32 [ poison, %vector.body90 ], [ %87, %pred.load.if ]
  br i1 %83, label %pred.load.if102, label %pred.load.continue103

pred.load.if102:                                  ; preds = %pred.load.continue
  %89 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %77, i64 %induction100, i32 1
  %90 = load i32, i32* %89, align 4, !tbaa !189
  br label %pred.load.continue103

pred.load.continue103:                            ; preds = %pred.load.if102, %pred.load.continue
  %91 = phi i32 [ poison, %pred.load.continue ], [ %90, %pred.load.if102 ]
  %92 = add nsw i32 %88, -1
  %93 = add nsw i32 %91, -1
  %94 = sext i32 %92 to i64
  %95 = sext i32 %93 to i64
  %96 = mul nsw i64 %94, %84
  %97 = mul nsw i64 %95, %85
  %98 = select i1 %82, i64 %96, i64 0
  %predphi = add i64 %vec.phi, %98
  %99 = select i1 %83, i64 %97, i64 0
  %predphi104 = add i64 %vec.phi101, %99
  %index.next96 = add i64 %index95, 2
  %100 = icmp eq i64 %index.next96, %n.vec94
  br i1 %100, label %middle.block88, label %vector.body90, !llvm.loop !217

middle.block88:                                   ; preds = %pred.load.continue103
  %bin.rdx = add i64 %predphi104, %predphi
  %cmp.n98 = icmp eq i64 %n.vec94, %wide.trip.count.i.i
  br i1 %cmp.n98, label %for.body.i13.i.preheader, label %for.body.i.i.preheader

for.body.i.i.preheader:                           ; preds = %for.body.lr.ph.i.i, %middle.block88
  %indvars.iv.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %n.vec94, %middle.block88 ]
  %index.021.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %bin.rdx, %middle.block88 ]
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.body.i.i.preheader, %if.end.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %if.end.i.i ], [ %indvars.iv.i.i.ph, %for.body.i.i.preheader ]
  %index.021.i.i = phi i64 [ %index.1.i.i, %if.end.i.i ], [ %index.021.i.i.ph, %for.body.i.i.preheader ]
  %stride2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %77, i64 %indvars.iv.i.i, i32 2
  %101 = load i32, i32* %stride2.i.i, align 4, !tbaa !185
  %cmp3.i.i = icmp sgt i32 %101, 0
  br i1 %cmp3.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %conv18.i.i = zext i32 %101 to i64
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %77, i64 %indvars.iv.i.i, i32 1
  %102 = load i32, i32* %extent.i.i, align 4, !tbaa !189
  %sub.i.i = add nsw i32 %102, -1
  %conv7.i.i = sext i32 %sub.i.i to i64
  %mul.i.i = mul nsw i64 %conv7.i.i, %conv18.i.i
  %add.i.i693 = add nsw i64 %mul.i.i, %index.021.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i64 [ %add.i.i693, %if.then.i.i ], [ %index.021.i.i, %for.body.i.i ]
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %exitcond.not.i.i = icmp eq i64 %indvars.iv.next.i.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i.i, label %for.body.i13.i.preheader, label %for.body.i.i, !llvm.loop !218

for.body.i13.i.preheader:                         ; preds = %if.end.i.i, %middle.block88
  %index.1.i.i.lcssa = phi i64 [ %bin.rdx, %middle.block88 ], [ %index.1.i.i, %if.end.i.i ]
  %min.iters.check108 = icmp ult i32 %76, 3
  br i1 %min.iters.check108, label %for.body.i13.i.preheader157, label %vector.ph109

vector.ph109:                                     ; preds = %for.body.i13.i.preheader
  %n.vec111 = and i64 %wide.trip.count.i.i, 4294967294
  br label %vector.body107

vector.body107:                                   ; preds = %pred.load.continue123, %vector.ph109
  %index112 = phi i64 [ 0, %vector.ph109 ], [ %index.next113, %pred.load.continue123 ]
  %vec.phi118 = phi i64 [ 0, %vector.ph109 ], [ %predphi124, %pred.load.continue123 ]
  %vec.phi119 = phi i64 [ 0, %vector.ph109 ], [ %predphi125, %pred.load.continue123 ]
  %induction117 = or i64 %index112, 1
  %103 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %77, i64 %index112, i32 2
  %104 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %77, i64 %induction117, i32 2
  %105 = load i32, i32* %103, align 4, !tbaa !185
  %106 = load i32, i32* %104, align 4, !tbaa !185
  %107 = icmp slt i32 %105, 0
  %108 = icmp slt i32 %106, 0
  %109 = sext i32 %105 to i64
  %110 = sext i32 %106 to i64
  br i1 %107, label %pred.load.if120, label %pred.load.continue121

pred.load.if120:                                  ; preds = %vector.body107
  %111 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %77, i64 %index112, i32 1
  %112 = load i32, i32* %111, align 4, !tbaa !189
  br label %pred.load.continue121

pred.load.continue121:                            ; preds = %pred.load.if120, %vector.body107
  %113 = phi i32 [ poison, %vector.body107 ], [ %112, %pred.load.if120 ]
  br i1 %108, label %pred.load.if122, label %pred.load.continue123

pred.load.if122:                                  ; preds = %pred.load.continue121
  %114 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %77, i64 %induction117, i32 1
  %115 = load i32, i32* %114, align 4, !tbaa !189
  br label %pred.load.continue123

pred.load.continue123:                            ; preds = %pred.load.if122, %pred.load.continue121
  %116 = phi i32 [ poison, %pred.load.continue121 ], [ %115, %pred.load.if122 ]
  %117 = add nsw i32 %113, -1
  %118 = add nsw i32 %116, -1
  %119 = sext i32 %117 to i64
  %120 = sext i32 %118 to i64
  %121 = mul nsw i64 %119, %109
  %122 = mul nsw i64 %120, %110
  %123 = select i1 %107, i64 %121, i64 0
  %predphi124 = add i64 %vec.phi118, %123
  %124 = select i1 %108, i64 %122, i64 0
  %predphi125 = add i64 %vec.phi119, %124
  %index.next113 = add i64 %index112, 2
  %125 = icmp eq i64 %index.next113, %n.vec111
  br i1 %125, label %middle.block105, label %vector.body107, !llvm.loop !219

middle.block105:                                  ; preds = %pred.load.continue123
  %bin.rdx126 = add i64 %predphi125, %predphi124
  %cmp.n115 = icmp eq i64 %n.vec111, %wide.trip.count.i.i
  br i1 %cmp.n115, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i.preheader157

for.body.i13.i.preheader157:                      ; preds = %for.body.i13.i.preheader, %middle.block105
  %indvars.iv.i10.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %n.vec111, %middle.block105 ]
  %index.018.i.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %bin.rdx126, %middle.block105 ]
  br label %for.body.i13.i

for.body.i13.i:                                   ; preds = %for.body.i13.i.preheader157, %if.end.i24.i
  %indvars.iv.i10.i = phi i64 [ %indvars.iv.next.i22.i, %if.end.i24.i ], [ %indvars.iv.i10.i.ph, %for.body.i13.i.preheader157 ]
  %index.018.i.i = phi i64 [ %index.1.i21.i, %if.end.i24.i ], [ %index.018.i.i.ph, %for.body.i13.i.preheader157 ]
  %stride2.i11.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %77, i64 %indvars.iv.i10.i, i32 2
  %126 = load i32, i32* %stride2.i11.i, align 4, !tbaa !185
  %cmp3.i12.i = icmp slt i32 %126, 0
  br i1 %cmp3.i12.i, label %if.then.i20.i, label %if.end.i24.i

if.then.i20.i:                                    ; preds = %for.body.i13.i
  %conv.i14.i = sext i32 %126 to i64
  %extent.i15.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %77, i64 %indvars.iv.i10.i, i32 1
  %127 = load i32, i32* %extent.i15.i, align 4, !tbaa !189
  %sub.i16.i = add nsw i32 %127, -1
  %conv7.i17.i = sext i32 %sub.i16.i to i64
  %mul.i18.i = mul nsw i64 %conv7.i17.i, %conv.i14.i
  %add.i19.i = add nsw i64 %mul.i18.i, %index.018.i.i
  br label %if.end.i24.i

if.end.i24.i:                                     ; preds = %if.then.i20.i, %for.body.i13.i
  %index.1.i21.i = phi i64 [ %add.i19.i, %if.then.i20.i ], [ %index.018.i.i, %for.body.i13.i ]
  %indvars.iv.next.i22.i = add nuw nsw i64 %indvars.iv.i10.i, 1
  %exitcond.not.i23.i = icmp eq i64 %indvars.iv.next.i22.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i23.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i, !llvm.loop !220

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %if.end.i24.i, %middle.block105
  %index.1.i21.i.lcssa = phi i64 [ %bin.rdx126, %middle.block105 ], [ %index.1.i21.i, %if.end.i24.i ]
  %add8.i.i = add nsw i64 %index.1.i.i.lcssa, 1
  %sub.i694.1 = sub nsw i64 %add8.i.i, %index.1.i21.i.lcssa
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit
  %add8.i27.i = phi i64 [ 1, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge ], [ %add8.i.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %sub.i694.phi = phi i64 [ %sub.i694.0, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge ], [ %sub.i694.1, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %128 = load i8, i8* %bits.i, align 1, !tbaa !144
  %conv.i.i696 = zext i8 %128 to i64
  %add.i4.i = add nuw nsw i64 %conv.i.i696, 7
  %div.i.i697 = lshr i64 %add.i4.i, 3
  %mul.i698 = mul i64 %div.i.i697, %sub.i694.phi
  %129 = trunc i64 %mul.i698 to i32
  %130 = add i32 %129, 7
  %131 = and i32 %130, 7
  %conv204 = xor i32 %131, 7
  %conv205 = zext i32 %conv204 to i64
  %add206 = add i64 %mul.i698, %conv205
  %tobool207.not = icmp ult i64 %add206, 4294967296
  br i1 %tobool207.not, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687, label %cleanup278.thread

cleanup278.thread:                                ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.6.40, i64 0, i64 0)) #14
  call void @llvm.lifetime.end.p0i8(i64 129, i8* nonnull %75) #11
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %55) #11
  br label %cleanup433

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687: ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  %132 = icmp sgt i32 %76, 2
  %spec.store.select = select i1 %132, i32 %76, i32 2
  %133 = bitcast [8 x i32]* %tags to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %133) #11
  %arrayinit.begin = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 0
  store i32 14, i32* %arrayinit.begin, align 4, !tbaa !41
  %arrayinit.element = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 1
  %add214 = shl i32 %spec.store.select, 2
  %and215 = add i32 %add214, 4
  %mul216 = and i32 %and215, -8
  %add217 = add i32 %and, 40
  %add218 = add i32 %add217, %mul216
  %add220 = add i32 %add218, %129
  %add221 = add i32 %add220, %conv204
  store i32 %add221, i32* %arrayinit.element, align 4, !tbaa !41
  %arrayinit.element222 = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 2
  %134 = bitcast i32* %arrayinit.element222 to <2 x i32>*
  store <2 x i32> <i32 6, i32 8>, <2 x i32>* %134, align 4, !tbaa !41
  %arrayinit.element224 = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 4
  %idxprom225 = sext i32 %type_code to i64
  %arrayidx226 = getelementptr inbounds [10 x i8], [10 x i8]* @_ZN6Halide7Runtime8Internal31pixel_type_to_matlab_class_codeE, i64 0, i64 %idxprom225
  %135 = load i8, i8* %arrayidx226, align 1, !tbaa !18
  %conv227 = zext i8 %135 to i32
  store i32 %conv227, i32* %arrayinit.element224, align 4, !tbaa !41
  %arrayinit.element228 = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 5
  %136 = bitcast i32* %arrayinit.element228 to <2 x i32>*
  store <2 x i32> <i32 1, i32 5>, <2 x i32>* %136, align 4, !tbaa !41
  %arrayinit.element230 = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 7
  store i32 %add214, i32* %arrayinit.element230, align 4, !tbaa !41
  %call.i683 = call i64 @fwrite(i8* nonnull %133, i64 32, i64 1, i8* nonnull %call.i598) #14
  %cmp.i684.not = icmp eq i64 %call.i683, 0
  br i1 %cmp.i684.not, label %cleanup278, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676: ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687
  %137 = bitcast [4 x i32]* %extents to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %137) #11
  %arrayinit.begin235 = getelementptr inbounds [4 x i32], [4 x i32]* %extents, i64 0, i64 0
  %138 = load i32, i32* %extent.i, align 4, !tbaa !189
  store i32 %138, i32* %arrayinit.begin235, align 4, !tbaa !41
  %arrayinit.element238 = getelementptr inbounds [4 x i32], [4 x i32]* %extents, i64 0, i64 1
  %139 = load i32, i32* %extent.i.1, align 4, !tbaa !189
  store i32 %139, i32* %arrayinit.element238, align 4, !tbaa !41
  %arrayinit.element241 = getelementptr inbounds [4 x i32], [4 x i32]* %extents, i64 0, i64 2
  %140 = load i32, i32* %extent.i.2, align 4, !tbaa !189
  store i32 %140, i32* %arrayinit.element241, align 4, !tbaa !41
  %arrayinit.element244 = getelementptr inbounds [4 x i32], [4 x i32]* %extents, i64 0, i64 3
  %141 = load i32, i32* %extent.i.3, align 4, !tbaa !189
  store i32 %141, i32* %arrayinit.element244, align 4, !tbaa !41
  %conv248 = sext i32 %mul216 to i64
  %call.i672 = call i64 @fwrite(i8* nonnull %137, i64 %conv248, i64 1, i8* nonnull %call.i598) #14
  %cmp.i673.not = icmp eq i64 %call.i672, 0
  br i1 %cmp.i673.not, label %cleanup274, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664: ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676
  %142 = bitcast [2 x i32]* %name_header to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %142) #11
  %arrayinit.begin252 = getelementptr inbounds [2 x i32], [2 x i32]* %name_header, i64 0, i64 0
  store i32 1, i32* %arrayinit.begin252, align 4, !tbaa !41
  %arrayinit.element253 = getelementptr inbounds [2 x i32], [2 x i32]* %name_header, i64 0, i64 1
  store i32 %conv184, i32* %arrayinit.element253, align 4, !tbaa !41
  %call.i660 = call i64 @fwrite(i8* nonnull %142, i64 8, i64 1, i8* nonnull %call.i598) #14
  %cmp.i661.not = icmp eq i64 %call.i660, 0
  br i1 %cmp.i661.not, label %cleanup273, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652: ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664
  %conv258 = zext i32 %and to i64
  %call.i648 = call i64 @fwrite(i8* nonnull %55, i64 %conv258, i64 1, i8* nonnull %call.i598) #14
  %cmp.i649.not = icmp eq i64 %call.i648, 0
  br i1 %cmp.i649.not, label %cleanup273, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit642

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit642: ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652
  %143 = bitcast [2 x i32]* %payload_header to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %143) #11
  %arrayinit.begin262 = getelementptr inbounds [2 x i32], [2 x i32]* %payload_header, i64 0, i64 0
  %arrayidx264 = getelementptr inbounds [10 x i8], [10 x i8]* @_ZN6Halide7Runtime8Internal30pixel_type_to_matlab_type_codeE, i64 0, i64 %idxprom225
  %144 = load i8, i8* %arrayidx264, align 1, !tbaa !18
  %conv265 = zext i8 %144 to i32
  store i32 %conv265, i32* %arrayinit.begin262, align 4, !tbaa !41
  %arrayinit.element266 = getelementptr inbounds [2 x i32], [2 x i32]* %payload_header, i64 0, i64 1
  store i32 %129, i32* %arrayinit.element266, align 4, !tbaa !41
  %call.i638 = call i64 @fwrite(i8* nonnull %143, i64 8, i64 1, i8* nonnull %call.i598) #14
  %cmp.i639.not = icmp eq i64 %call.i638, 0
  %cleanup.dest.slot.5 = zext i1 %cmp.i639.not to i32
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %143) #11
  br label %cleanup273

cleanup273:                                       ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit642, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664
  %cleanup.dest.slot.6 = phi i32 [ %cleanup.dest.slot.5, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit642 ], [ 1, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664 ], [ 1, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652 ]
  %retval.6 = phi i32 [ -11, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit642 ], [ -9, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664 ], [ -10, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %142) #11
  br label %cleanup274

cleanup274:                                       ; preds = %cleanup273, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676
  %cleanup.dest.slot.7 = phi i32 [ %cleanup.dest.slot.6, %cleanup273 ], [ 1, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676 ]
  %retval.7 = phi i32 [ %retval.6, %cleanup273 ], [ -8, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %137) #11
  br label %cleanup278

cleanup278:                                       ; preds = %cleanup274, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687
  %cleanup.dest.slot.8 = phi i32 [ %cleanup.dest.slot.7, %cleanup274 ], [ 1, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687 ]
  %retval.8 = phi i32 [ %retval.7, %cleanup274 ], [ -7, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %133) #11
  call void @llvm.lifetime.end.p0i8(i64 129, i8* nonnull %75) #11
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %55) #11
  %cond442 = icmp eq i32 %cleanup.dest.slot.8, 0
  br i1 %cond442, label %if.end311, label %cleanup433

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631: ; preds = %if.else164
  %145 = bitcast [5 x i32]* %header289 to i8*
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %145) #11
  %arrayinit.begin290 = getelementptr inbounds [5 x i32], [5 x i32]* %header289, i64 0, i64 0
  %146 = load i32, i32* %extent.i, align 4, !tbaa !189
  store i32 %146, i32* %arrayinit.begin290, align 4, !tbaa !41
  %arrayinit.element293 = getelementptr inbounds [5 x i32], [5 x i32]* %header289, i64 0, i64 1
  %147 = load i32, i32* %extent.i.1, align 4, !tbaa !189
  store i32 %147, i32* %arrayinit.element293, align 4, !tbaa !41
  %arrayinit.element296 = getelementptr inbounds [5 x i32], [5 x i32]* %header289, i64 0, i64 2
  %148 = load i32, i32* %extent.i.2, align 4, !tbaa !189
  store i32 %148, i32* %arrayinit.element296, align 4, !tbaa !41
  %arrayinit.element299 = getelementptr inbounds [5 x i32], [5 x i32]* %header289, i64 0, i64 3
  %149 = load i32, i32* %extent.i.3, align 4, !tbaa !189
  store i32 %149, i32* %arrayinit.element299, align 4, !tbaa !41
  %arrayinit.element302 = getelementptr inbounds [5 x i32], [5 x i32]* %header289, i64 0, i64 4
  store i32 %type_code, i32* %arrayinit.element302, align 4, !tbaa !41
  %call.i627 = call i64 @fwrite(i8* nonnull %145, i64 20, i64 1, i8* nonnull %call.i598) #14
  %cmp.i628.not = icmp eq i64 %call.i627, 0
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %145) #11
  br i1 %cmp.i628.not, label %cleanup433, label %if.end311

if.end311:                                        ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631, %cleanup278, %cleanup154.thread
  %final_padding_bytes.0 = phi i32 [ %conv204, %cleanup278 ], [ 0, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631 ], [ 0, %cleanup154.thread ]
  %150 = getelementptr inbounds [4096 x i8], [4096 x i8]* %temp, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %150) #11
  %div = udiv i32 4096, %div.i
  %151 = load i32, i32* %extent.i.3, align 4, !tbaa !189
  %cmp320856 = icmp sgt i32 %151, 0
  br i1 %cmp320856, label %for.body322.lr.ph, label %if.end412

for.body322.lr.ph:                                ; preds = %if.end311
  %152 = load i32, i32* %min.i.3, align 16, !tbaa !221
  %153 = bitcast [4 x i32]* %idx to i8*
  %arrayinit.begin357 = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 0
  %arrayinit.element358 = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 1
  %arrayinit.element359 = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 2
  %arrayinit.element360 = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 3
  %dim.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  %conv368 = zext i32 %div.i to i64
  %mul373 = mul nuw nsw i32 %div, %div.i
  %conv374 = zext i32 %mul373 to i64
  %.pre891 = load i32, i32* %min.i.2, align 16, !tbaa !221
  %.pre892 = load i32, i32* %extent.i.2, align 4, !tbaa !189
  %.pre893 = load i32, i32* %min.i.1, align 16
  %.pre894 = load i32, i32* %extent.i.1, align 4
  %.pre = load i32, i32* %extent.i, align 4
  %154 = load i32, i32* %min.i, align 16
  %155 = load i32, i32* %extent.i, align 4
  %156 = load i32, i32* %min.i, align 16
  %add352 = add nsw i32 %156, %155
  %.pre15 = load i32, i32* %extent.i.1, align 4
  %.pre16 = load i32, i32* %min.i.1, align 16
  %.pre896 = load i32, i32* %extent.i.2, align 4
  %.pre897 = load i32, i32* %min.i.2, align 16
  %.pre898 = load i32, i32* %extent.i.3, align 4
  %.pre899 = load i32, i32* %min.i.3, align 16
  br label %for.body322

for.body322:                                      ; preds = %for.inc399, %for.body322.lr.ph
  %157 = phi i32 [ %152, %for.body322.lr.ph ], [ %218, %for.inc399 ]
  %158 = phi i32 [ %151, %for.body322.lr.ph ], [ %219, %for.inc399 ]
  %159 = phi i32 [ %.pre891, %for.body322.lr.ph ], [ %220, %for.inc399 ]
  %160 = phi i32 [ %.pre892, %for.body322.lr.ph ], [ %221, %for.inc399 ]
  %161 = phi i32 [ %.pre892, %for.body322.lr.ph ], [ %222, %for.inc399 ]
  %162 = phi i32 [ %.pre891, %for.body322.lr.ph ], [ %223, %for.inc399 ]
  %dim3.0858 = phi i32 [ %152, %for.body322.lr.ph ], [ %inc400, %for.inc399 ]
  %counter.0857 = phi i32 [ 0, %for.body322.lr.ph ], [ %counter.1.lcssa, %for.inc399 ]
  %cmp331848 = icmp sgt i32 %161, 0
  br i1 %cmp331848, label %for.body333, label %for.inc399

for.body333:                                      ; preds = %for.body322, %for.inc394
  %163 = phi i32 [ %212, %for.inc394 ], [ %.pre893, %for.body322 ]
  %164 = phi i32 [ %213, %for.inc394 ], [ %.pre894, %for.body322 ]
  %165 = phi i32 [ %214, %for.inc394 ], [ %159, %for.body322 ]
  %166 = phi i32 [ %215, %for.inc394 ], [ %160, %for.body322 ]
  %167 = phi i32 [ %216, %for.inc394 ], [ %.pre894, %for.body322 ]
  %168 = phi i32 [ %217, %for.inc394 ], [ %.pre893, %for.body322 ]
  %dim2.0850 = phi i32 [ %inc395, %for.inc394 ], [ %162, %for.body322 ]
  %counter.1849 = phi i32 [ %counter.2.lcssa, %for.inc394 ], [ %counter.0857, %for.body322 ]
  %cmp342839 = icmp sgt i32 %167, 0
  br i1 %cmp342839, label %for.body344, label %for.inc394

for.body344:                                      ; preds = %for.body333, %for.inc389
  %169 = phi i32 [ %209, %for.inc389 ], [ %163, %for.body333 ]
  %170 = phi i32 [ %210, %for.inc389 ], [ %164, %for.body333 ]
  %171 = phi i32 [ %211, %for.inc389 ], [ %.pre, %for.body333 ]
  %dim1.0841 = phi i32 [ %inc390, %for.inc389 ], [ %168, %for.body333 ]
  %counter.2840 = phi i32 [ %counter.6797, %for.inc389 ], [ %counter.1849, %for.body333 ]
  %cmp353834 = icmp sgt i32 %171, 0
  br i1 %cmp353834, label %for.body355, label %for.inc389

for.body355:                                      ; preds = %for.body344, %for.inc384
  %dim0.0836 = phi i32 [ %inc385, %for.inc384 ], [ %154, %for.body344 ]
  %counter.3835 = phi i32 [ %counter.4, %for.inc384 ], [ %counter.2840, %for.body344 ]
  %inc356 = add nsw i32 %counter.3835, 1
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %153) #11
  store i32 %dim0.0836, i32* %arrayinit.begin357, align 4, !tbaa !41
  store i32 %dim1.0841, i32* %arrayinit.element358, align 4, !tbaa !41
  store i32 %dim2.0850, i32* %arrayinit.element359, align 4, !tbaa !41
  store i32 %dim3.0858, i32* %arrayinit.element360, align 4, !tbaa !41
  %172 = load i32, i32* %dimensions, align 4, !tbaa !183
  %cmp17.i = icmp sgt i32 %172, 0
  br i1 %cmp17.i, label %for.body.lr.ph.i, label %_ZNK15halide_buffer_t10address_ofEPKi.exit

for.body.lr.ph.i:                                 ; preds = %for.body355
  %173 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i, align 8, !tbaa !184
  %wide.trip.count.i = zext i32 %172 to i64
  %stride.i621920 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %173, i64 0, i32 2
  %174 = load i32, i32* %stride.i621920, align 4, !tbaa !185
  %conv.i622921 = sext i32 %174 to i64
  %min.i623922 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %173, i64 0, i32 0
  %175 = load i32, i32* %min.i623922, align 4, !tbaa !221
  %sub.i923 = sub nsw i32 %dim0.0836, %175
  %conv7.i924 = sext i32 %sub.i923 to i64
  %mul.i925 = mul nsw i64 %conv7.i924, %conv.i622921
  %exitcond.not.i927 = icmp eq i32 %172, 1
  br i1 %exitcond.not.i927, label %_ZNK15halide_buffer_t10address_ofEPKi.exit, label %for.body.i.for.body.i_crit_edge.preheader, !llvm.loop !222

for.body.i.for.body.i_crit_edge.preheader:        ; preds = %for.body.lr.ph.i
  %stride.i62126 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %173, i64 1, i32 2
  %176 = load i32, i32* %stride.i62126, align 4, !tbaa !185
  %conv.i62227 = sext i32 %176 to i64
  %min.i62328 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %173, i64 1, i32 0
  %177 = load i32, i32* %min.i62328, align 4, !tbaa !221
  %sub.i29 = sub nsw i32 %dim1.0841, %177
  %conv7.i30 = sext i32 %sub.i29 to i64
  %mul.i31 = mul nsw i64 %conv7.i30, %conv.i62227
  %add.i62432 = add nsw i64 %mul.i31, %mul.i925
  %exitcond.not.i33 = icmp eq i32 %172, 2
  br i1 %exitcond.not.i33, label %_ZNK15halide_buffer_t10address_ofEPKi.exit, label %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph, !llvm.loop !222

for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph: ; preds = %for.body.i.for.body.i_crit_edge.preheader
  %178 = add nsw i64 %wide.trip.count.i, -2
  %min.iters.check131 = icmp ult i64 %178, 5
  br i1 %min.iters.check131, label %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader, label %vector.ph132

vector.ph132:                                     ; preds = %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph
  %n.mod.vf133 = and i64 %178, 3
  %179 = icmp eq i64 %n.mod.vf133, 0
  %180 = select i1 %179, i64 4, i64 %n.mod.vf133
  %n.vec134 = sub nsw i64 %178, %180
  %ind.end138 = add nsw i64 %n.vec134, 2
  %181 = insertelement <2 x i64> <i64 poison, i64 0>, i64 %add.i62432, i32 0
  br label %vector.body130

vector.body130:                                   ; preds = %vector.body130, %vector.ph132
  %index135 = phi i64 [ 0, %vector.ph132 ], [ %index.next136, %vector.body130 ]
  %vec.phi141 = phi <2 x i64> [ %181, %vector.ph132 ], [ %201, %vector.body130 ]
  %vec.phi142 = phi <2 x i64> [ zeroinitializer, %vector.ph132 ], [ %202, %vector.body130 ]
  %offset.idx140 = or i64 %index135, 2
  %182 = add i64 %offset.idx140, 2
  %183 = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 %offset.idx140
  %184 = bitcast i32* %183 to <2 x i32>*
  %wide.load143 = load <2 x i32>, <2 x i32>* %184, align 4, !tbaa !41
  %185 = getelementptr inbounds i32, i32* %183, i64 2
  %186 = bitcast i32* %185 to <2 x i32>*
  %wide.load144 = load <2 x i32>, <2 x i32>* %186, align 4, !tbaa !41
  %187 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %173, i64 %offset.idx140, i32 2
  %188 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %173, i64 %182, i32 2
  %189 = getelementptr inbounds i32, i32* %187, i64 -2
  %190 = bitcast i32* %189 to <8 x i32>*
  %191 = getelementptr inbounds i32, i32* %188, i64 -2
  %192 = bitcast i32* %191 to <8 x i32>*
  %wide.vec = load <8 x i32>, <8 x i32>* %190, align 4, !tbaa !41
  %wide.vec145 = load <8 x i32>, <8 x i32>* %192, align 4, !tbaa !41
  %strided.vec = shufflevector <8 x i32> %wide.vec, <8 x i32> poison, <2 x i32> <i32 0, i32 4>
  %strided.vec146 = shufflevector <8 x i32> %wide.vec145, <8 x i32> poison, <2 x i32> <i32 0, i32 4>
  %strided.vec147 = shufflevector <8 x i32> %wide.vec, <8 x i32> poison, <2 x i32> <i32 2, i32 6>
  %strided.vec148 = shufflevector <8 x i32> %wide.vec145, <8 x i32> poison, <2 x i32> <i32 2, i32 6>
  %193 = sext <2 x i32> %strided.vec147 to <2 x i64>
  %194 = sext <2 x i32> %strided.vec148 to <2 x i64>
  %195 = sub nsw <2 x i32> %wide.load143, %strided.vec
  %196 = sub nsw <2 x i32> %wide.load144, %strided.vec146
  %197 = sext <2 x i32> %195 to <2 x i64>
  %198 = sext <2 x i32> %196 to <2 x i64>
  %199 = mul nsw <2 x i64> %197, %193
  %200 = mul nsw <2 x i64> %198, %194
  %201 = add <2 x i64> %199, %vec.phi141
  %202 = add <2 x i64> %200, %vec.phi142
  %index.next136 = add i64 %index135, 4
  %203 = icmp eq i64 %index.next136, %n.vec134
  br i1 %203, label %middle.block128, label %vector.body130, !llvm.loop !223

middle.block128:                                  ; preds = %vector.body130
  %bin.rdx149 = add <2 x i64> %202, %201
  %204 = call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %bin.rdx149)
  br label %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader

for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader: ; preds = %middle.block128, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph
  %indvars.iv.next.i35.ph = phi i64 [ 2, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph ], [ %ind.end138, %middle.block128 ]
  %add.i62434.ph = phi i64 [ %add.i62432, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph ], [ %204, %middle.block128 ]
  br label %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge

for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge: ; preds = %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge
  %indvars.iv.next.i35 = phi i64 [ %indvars.iv.next.i, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge ], [ %indvars.iv.next.i35.ph, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader ]
  %add.i62434 = phi i64 [ %add.i624, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge ], [ %add.i62434.ph, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader ]
  %arrayidx3.i.phi.trans.insert.phi.trans.insert = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 %indvars.iv.next.i35
  %.pre895.pre = load i32, i32* %arrayidx3.i.phi.trans.insert.phi.trans.insert, align 4, !tbaa !41
  %stride.i621 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %173, i64 %indvars.iv.next.i35, i32 2
  %205 = load i32, i32* %stride.i621, align 4, !tbaa !185
  %conv.i622 = sext i32 %205 to i64
  %min.i623 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %173, i64 %indvars.iv.next.i35, i32 0
  %206 = load i32, i32* %min.i623, align 4, !tbaa !221
  %sub.i = sub nsw i32 %.pre895.pre, %206
  %conv7.i = sext i32 %sub.i to i64
  %mul.i = mul nsw i64 %conv7.i, %conv.i622
  %add.i624 = add nsw i64 %mul.i, %add.i62434
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.next.i35, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.next.i, %wide.trip.count.i
  br i1 %exitcond.not.i, label %_ZNK15halide_buffer_t10address_ofEPKi.exit, label %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge, !llvm.loop !224

_ZNK15halide_buffer_t10address_ofEPKi.exit:       ; preds = %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge, %for.body.i.for.body.i_crit_edge.preheader, %for.body.lr.ph.i, %for.body355
  %index.0.lcssa.i = phi i64 [ 0, %for.body355 ], [ %mul.i925, %for.body.lr.ph.i ], [ %add.i62432, %for.body.i.for.body.i_crit_edge.preheader ], [ %add.i624, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge ]
  %207 = load i8*, i8** %host.i, align 8, !tbaa !180
  %208 = load i8, i8* %bits.i, align 1, !tbaa !144
  %conv.i.i = zext i8 %208 to i64
  %add.i.i = add nuw nsw i64 %conv.i.i, 7
  %div.i.i = lshr i64 %add.i.i, 3
  %mul9.i = mul nsw i64 %div.i.i, %index.0.lcssa.i
  %add.ptr.i = getelementptr inbounds i8, i8* %207, i64 %mul9.i
  %mul366 = mul nsw i32 %counter.3835, %div.i
  %idx.ext = sext i32 %mul366 to i64
  %add.ptr367 = getelementptr inbounds [4096 x i8], [4096 x i8]* %temp, i64 0, i64 %idx.ext
  %call369 = call i8* @memcpy(i8* nonnull %add.ptr367, i8* %add.ptr.i, i64 %conv368) #14
  %cmp370 = icmp eq i32 %inc356, %div
  br i1 %cmp370, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit619, label %for.inc384

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit619: ; preds = %_ZNK15halide_buffer_t10address_ofEPKi.exit
  %call.i615 = call i64 @fwrite(i8* nonnull %150, i64 %conv374, i64 1, i8* nonnull %call.i598) #14
  %cmp.i616.not = icmp eq i64 %call.i615, 0
  br i1 %cmp.i616.not, label %cleanup425.loopexit, label %for.inc384

for.inc384:                                       ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit619, %_ZNK15halide_buffer_t10address_ofEPKi.exit
  %counter.4 = phi i32 [ 0, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit619 ], [ %inc356, %_ZNK15halide_buffer_t10address_ofEPKi.exit ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %153) #11
  %inc385 = add nsw i32 %dim0.0836, 1
  %cmp353 = icmp slt i32 %inc385, %add352
  br i1 %cmp353, label %for.body355, label %for.inc389, !llvm.loop !225

for.inc389:                                       ; preds = %for.inc384, %for.body344
  %209 = phi i32 [ %169, %for.body344 ], [ %.pre16, %for.inc384 ]
  %210 = phi i32 [ %170, %for.body344 ], [ %.pre15, %for.inc384 ]
  %211 = phi i32 [ %171, %for.body344 ], [ %155, %for.inc384 ]
  %counter.6797 = phi i32 [ %counter.2840, %for.body344 ], [ %counter.4, %for.inc384 ]
  %inc390 = add nsw i32 %dim1.0841, 1
  %add341 = add nsw i32 %209, %210
  %cmp342 = icmp slt i32 %inc390, %add341
  br i1 %cmp342, label %for.body344, label %for.inc394, !llvm.loop !226

for.inc394:                                       ; preds = %for.inc389, %for.body333
  %212 = phi i32 [ %163, %for.body333 ], [ %209, %for.inc389 ]
  %213 = phi i32 [ %164, %for.body333 ], [ %210, %for.inc389 ]
  %214 = phi i32 [ %165, %for.body333 ], [ %.pre897, %for.inc389 ]
  %215 = phi i32 [ %166, %for.body333 ], [ %.pre896, %for.inc389 ]
  %216 = phi i32 [ %167, %for.body333 ], [ %210, %for.inc389 ]
  %217 = phi i32 [ %168, %for.body333 ], [ %209, %for.inc389 ]
  %counter.2.lcssa = phi i32 [ %counter.1849, %for.body333 ], [ %counter.6797, %for.inc389 ]
  %inc395 = add nsw i32 %dim2.0850, 1
  %add330 = add nsw i32 %215, %214
  %cmp331 = icmp slt i32 %inc395, %add330
  br i1 %cmp331, label %for.body333, label %for.inc399, !llvm.loop !227

for.inc399:                                       ; preds = %for.inc394, %for.body322
  %218 = phi i32 [ %157, %for.body322 ], [ %.pre899, %for.inc394 ]
  %219 = phi i32 [ %158, %for.body322 ], [ %.pre898, %for.inc394 ]
  %220 = phi i32 [ %159, %for.body322 ], [ %214, %for.inc394 ]
  %221 = phi i32 [ %160, %for.body322 ], [ %215, %for.inc394 ]
  %222 = phi i32 [ %161, %for.body322 ], [ %215, %for.inc394 ]
  %223 = phi i32 [ %162, %for.body322 ], [ %214, %for.inc394 ]
  %counter.1.lcssa = phi i32 [ %counter.0857, %for.body322 ], [ %counter.2.lcssa, %for.inc394 ]
  %inc400 = add nsw i32 %dim3.0858, 1
  %add319 = add nsw i32 %219, %218
  %cmp320 = icmp slt i32 %inc400, %add319
  br i1 %cmp320, label %for.body322, label %for.end403, !llvm.loop !228

for.end403:                                       ; preds = %for.inc399
  %cmp404 = icmp sgt i32 %counter.1.lcssa, 0
  br i1 %cmp404, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit612, label %if.end412

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit612: ; preds = %for.end403
  %mul407 = mul nsw i32 %counter.1.lcssa, %div.i
  %conv408 = sext i32 %mul407 to i64
  %call.i608 = call i64 @fwrite(i8* nonnull %150, i64 %conv408, i64 1, i8* nonnull %call.i598) #14
  %cmp.i609.not = icmp eq i64 %call.i608, 0
  br i1 %cmp.i609.not, label %cleanup425, label %if.end412

if.end412:                                        ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit612, %for.end403, %if.end311
  %224 = bitcast i64* %zero to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %224) #11
  store i64 0, i64* %zero, align 8, !tbaa !22
  %tobool413.not = icmp eq i32 %final_padding_bytes.0, 0
  br i1 %tobool413.not, label %if.end423, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit: ; preds = %if.end412
  %conv415 = zext i32 %final_padding_bytes.0 to i64
  %call.i604 = call i64 @fwrite(i8* nonnull %224, i64 %conv415, i64 1, i8* nonnull %call.i598) #14
  %cmp.i605.not = icmp eq i64 %call.i604, 0
  br i1 %cmp.i605.not, label %cleanup424, label %if.end423

if.end423:                                        ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit, %if.end412
  br label %cleanup424

cleanup424:                                       ; preds = %if.end423, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit
  %retval.21 = phi i32 [ 0, %if.end423 ], [ -16, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %224) #11
  br label %cleanup425

cleanup425.loopexit:                              ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit619
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %153) #11
  br label %cleanup425

cleanup425:                                       ; preds = %cleanup425.loopexit, %cleanup424, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit612
  %retval.22 = phi i32 [ %retval.21, %cleanup424 ], [ -14, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit612 ], [ -13, %cleanup425.loopexit ]
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %150) #11
  br label %cleanup433

cleanup433:                                       ; preds = %cleanup425, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631, %cleanup278, %cleanup278.thread, %cleanup154
  %retval.23 = phi i32 [ %retval.22, %cleanup425 ], [ %retval.4, %cleanup154 ], [ %retval.8, %cleanup278 ], [ -12, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631 ], [ -6, %cleanup278.thread ]
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %3) #11
  %call.i = call i32 @fclose(i8* nonnull %call.i598) #14
  br label %return

return:                                           ; preds = %cleanup433, %if.end6, %if.end2, %if.then1, %if.then
  %retval.26 = phi i32 [ -1, %if.then ], [ -1, %if.then1 ], [ %call3, %if.end2 ], [ %retval.23, %cleanup433 ], [ -2, %if.end6 ]
  ret i32 %retval.26
}

declare i64 @fwrite(i8*, i64, i64, i8*) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_cache_cleanup() #0 {
entry:
  tail call void @halide_memoization_cache_cleanup() #15
  ret void
}

; Function Attrs: nounwind mustprogress
define weak void @halide_memoization_cache_cleanup() local_unnamed_addr #0 {
entry:
  br label %for.body

for.cond.cleanup:                                 ; preds = %while.end
  store i64 0, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !22
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !14
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !14
  ret void

for.body:                                         ; preds = %while.end, %entry
  %__begin1.018 = phi %"struct.Halide::Runtime::Internal::CacheEntry"** [ getelementptr inbounds ([256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 0, i64 0), %entry ], [ %incdec.ptr, %while.end ]
  %0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %__begin1.018, align 8, !tbaa !14
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %__begin1.018, align 8, !tbaa !14
  %cmp2.not16 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %0, null
  br i1 %cmp2.not16, label %while.end, label %while.body

while.body:                                       ; preds = %for.body, %while.body
  %entry1.017 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %1, %while.body ], [ %0, %for.body ]
  %next3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.017, i64 0, i32 0
  %1 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next3, align 8, !tbaa !229
  tail call void @_ZN6Halide7Runtime8Internal10CacheEntry7destroyEv(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %entry1.017) #15
  %2 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.017 to i8*
  tail call void @halide_free(i8* null, i8* nonnull %2) #14
  %cmp2.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %1, null
  br i1 %cmp2.not, label %while.end, label %while.body, !llvm.loop !231

while.end:                                        ; preds = %while.body, %for.body
  %incdec.ptr = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %__begin1.018, i64 1
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"** %incdec.ptr, getelementptr inbounds ([256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 1, i64 0)
  br i1 %cmp.not, label %for.cond.cleanup, label %for.body
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal10CacheEntry7destroyEv(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %this) local_unnamed_addr #0 align 2 {
entry:
  %tuple_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 8
  %0 = load i32, i32* %tuple_count, align 8, !tbaa !232
  %cmp11.not = icmp eq i32 %0, 0
  br i1 %cmp11.not, label %for.cond.cleanup, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %entry
  %buf = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 11
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %entry
  %metadata_storage = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 3
  %1 = load i8*, i8** %metadata_storage, align 8, !tbaa !233
  tail call void @halide_free(i8* null, i8* %1) #14
  ret void

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.body ]
  %2 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !234
  %arrayidx = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %2, i64 %indvars.iv
  %call = tail call i32 @halide_device_free(i8* null, %struct.halide_buffer_t* %arrayidx) #14
  %3 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !234
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %3, i64 %indvars.iv, i32 2
  %4 = load i8*, i8** %host, align 8, !tbaa !180
  %call6 = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %4) #15
  %5 = bitcast %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call6 to i8*
  tail call void @halide_free(i8* null, i8* %5) #14
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %6 = load i32, i32* %tuple_count, align 8, !tbaa !232
  %7 = zext i32 %6 to i64
  %cmp = icmp ult i64 %indvars.iv.next, %7
  br i1 %cmp, label %for.body, label %for.cond.cleanup, !llvm.loop !235
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %host) local_unnamed_addr #2 {
entry:
  %add.ptr = getelementptr inbounds i8, i8* %host, i64 -32
  %0 = bitcast i8* %add.ptr to %"struct.Halide::Runtime::Internal::CacheBlockHeader"*
  ret %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %0
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal18copy_memory_helperERKNS1_11device_copyEixx(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i32 %d, i64 %src_off, i64 %dst_off) local_unnamed_addr #0 {
entry:
  %cmp41 = icmp sgt i32 %d, -1
  br i1 %cmp41, label %land.rhs, label %while.end

land.rhs:                                         ; preds = %entry, %while.body
  %d.addr.042 = phi i32 [ %dec, %while.body ], [ %d, %entry ]
  %idxprom36 = zext i32 %d.addr.042 to i64
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 3, i64 %idxprom36
  %0 = load i64, i64* %arrayidx, align 8, !tbaa !22
  %cmp1 = icmp eq i64 %0, 1
  br i1 %cmp1, label %while.body, label %while.end

while.body:                                       ; preds = %land.rhs
  %dec = add nsw i32 %d.addr.042, -1
  %cmp = icmp sgt i32 %d.addr.042, 0
  br i1 %cmp, label %land.rhs, label %if.then, !llvm.loop !236

while.end:                                        ; preds = %land.rhs, %entry
  %d.addr.0.lcssa = phi i32 [ %d, %entry ], [ %d.addr.042, %land.rhs ]
  %cmp2 = icmp eq i32 %d.addr.0.lcssa, -1
  br i1 %cmp2, label %if.then, label %for.cond.preheader

for.cond.preheader:                               ; preds = %while.end
  %idxprom5 = sext i32 %d.addr.0.lcssa to i64
  %arrayidx6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 3, i64 %idxprom5
  %1 = load i64, i64* %arrayidx6, align 8, !tbaa !22
  %cmp737.not = icmp eq i64 %1, 0
  br i1 %cmp737.not, label %if.end, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %for.cond.preheader
  %sub = add nsw i32 %d.addr.0.lcssa, -1
  %arrayidx9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 4, i64 %idxprom5
  %arrayidx12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 5, i64 %idxprom5
  %inc.0 = add nuw i64 0, 1
  br label %for.body

if.then:                                          ; preds = %while.body, %while.end
  %src = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 0
  %2 = load i64, i64* %src, align 8, !tbaa !237
  %add = add i64 %2, %src_off
  %3 = inttoptr i64 %add to i8*
  %dst = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 1
  %4 = load i64, i64* %dst, align 8, !tbaa !239
  %add3 = add i64 %4, %dst_off
  %5 = inttoptr i64 %add3 to i8*
  %chunk_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 6
  %6 = load i64, i64* %chunk_size, align 8, !tbaa !240
  %call = tail call i8* @memcpy(i8* %5, i8* %3, i64 %6) #14
  br label %if.end

for.body:                                         ; preds = %for.body.for.body_crit_edge, %for.body.lr.ph
  %inc.phi = phi i64 [ %inc.0, %for.body.lr.ph ], [ %inc.1, %for.body.for.body_crit_edge ]
  %src_off.addr.039 = phi i64 [ %src_off, %for.body.lr.ph ], [ %add10, %for.body.for.body_crit_edge ]
  %dst_off.addr.038 = phi i64 [ %dst_off, %for.body.lr.ph ], [ %add13, %for.body.for.body_crit_edge ]
  tail call void @_ZN6Halide7Runtime8Internal18copy_memory_helperERKNS1_11device_copyEixx(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i32 %sub, i64 %src_off.addr.039, i64 %dst_off.addr.038) #15
  %7 = load i64, i64* %arrayidx9, align 8, !tbaa !22
  %add10 = add i64 %7, %src_off.addr.039
  %8 = load i64, i64* %arrayidx12, align 8, !tbaa !22
  %add13 = add i64 %8, %dst_off.addr.038
  %9 = load i64, i64* %arrayidx6, align 8, !tbaa !22
  %cmp7 = icmp ult i64 %inc.phi, %9
  br i1 %cmp7, label %for.body.for.body_crit_edge, label %if.end, !llvm.loop !241

for.body.for.body_crit_edge:                      ; preds = %for.body
  %inc.1 = add nuw i64 %inc.phi, 1
  br label %for.body

if.end:                                           ; preds = %for.body, %if.then, %for.cond.preheader
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal11copy_memoryERKNS1_11device_copyEPv(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i8* %user_context) local_unnamed_addr #0 {
entry:
  %src = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 0
  %0 = load i64, i64* %src, align 8, !tbaa !237
  %dst = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 1
  %1 = load i64, i64* %dst, align 8, !tbaa !239
  %cmp.not = icmp eq i64 %0, %1
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %src_begin = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 2
  %2 = load i64, i64* %src_begin, align 8, !tbaa !242
  tail call void @_ZN6Halide7Runtime8Internal18copy_memory_helperERKNS1_11device_copyEixx(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i32 15, i64 %2, i64 0) #15
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal16make_buffer_copyEPK15halide_buffer_tbS4_b(%"struct.Halide::Runtime::Internal::device_copy"* noalias sret(%"struct.Halide::Runtime::Internal::device_copy") align 8 %agg.result, %struct.halide_buffer_t* %src, i1 zeroext %src_host, %struct.halide_buffer_t* %dst, i1 zeroext %dst_host) local_unnamed_addr #0 {
entry:
  %c = alloca %"struct.Halide::Runtime::Internal::device_copy", align 8
  %0 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %c to i8*
  call void @llvm.lifetime.start.p0i8(i64 416, i8* nonnull %0) #11
  br i1 %src_host, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 2
  %1 = load i8*, i8** %host, align 8, !tbaa !180
  %2 = ptrtoint i8* %1 to i64
  br label %cond.end

cond.false:                                       ; preds = %entry
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 0
  %3 = load i64, i64* %device, align 8, !tbaa !182
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %2, %cond.true ], [ %3, %cond.false ]
  %src2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 0
  store i64 %cond, i64* %src2, align 8, !tbaa !237
  br i1 %dst_host, label %cond.true4, label %cond.false6

cond.true4:                                       ; preds = %cond.end
  %host5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 2
  %4 = load i8*, i8** %host5, align 8, !tbaa !180
  %5 = ptrtoint i8* %4 to i64
  br label %cond.end8

cond.false6:                                      ; preds = %cond.end
  %device7 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 0
  %6 = load i64, i64* %device7, align 8, !tbaa !182
  br label %cond.end8

cond.end8:                                        ; preds = %cond.false6, %cond.true4
  %cond9 = phi i64 [ %5, %cond.true4 ], [ %6, %cond.false6 ]
  %dst10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 1
  store i64 %cond9, i64* %dst10, align 8, !tbaa !239
  %bits.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 4, i32 1
  %7 = load i8, i8* %bits.i, align 1, !tbaa !144
  %conv.i = zext i8 %7 to i32
  %add.i = add nuw nsw i32 %conv.i, 7
  %div.i = lshr i32 %add.i, 3
  %conv = zext i32 %div.i to i64
  %chunk_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 6
  store i64 %conv, i64* %chunk_size, align 8, !tbaa !240
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 0
  %arrayidx12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 0
  %arrayidx14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 0
  %arrayidx.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 1
  %8 = bitcast i64* %arrayidx to <2 x i64>*
  store <2 x i64> <i64 1, i64 1>, <2 x i64>* %8, align 8, !tbaa !22
  %arrayidx12.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 1
  %9 = bitcast i64* %arrayidx12 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %9, align 8, !tbaa !22
  %arrayidx14.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 1
  %10 = bitcast i64* %arrayidx14 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %10, align 8, !tbaa !22
  %arrayidx.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 2
  %arrayidx12.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 2
  %arrayidx14.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 2
  %arrayidx.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 3
  %11 = bitcast i64* %arrayidx.2 to <2 x i64>*
  store <2 x i64> <i64 1, i64 1>, <2 x i64>* %11, align 8, !tbaa !22
  %arrayidx12.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 3
  %12 = bitcast i64* %arrayidx12.2 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %12, align 8, !tbaa !22
  %arrayidx14.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 3
  %13 = bitcast i64* %arrayidx14.2 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %13, align 8, !tbaa !22
  %arrayidx.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 4
  %arrayidx12.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 4
  %arrayidx14.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 4
  %arrayidx.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 5
  %14 = bitcast i64* %arrayidx.4 to <2 x i64>*
  store <2 x i64> <i64 1, i64 1>, <2 x i64>* %14, align 8, !tbaa !22
  %arrayidx12.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 5
  %15 = bitcast i64* %arrayidx12.4 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %15, align 8, !tbaa !22
  %arrayidx14.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 5
  %16 = bitcast i64* %arrayidx14.4 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %16, align 8, !tbaa !22
  %arrayidx.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 6
  %arrayidx12.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 6
  %arrayidx14.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 6
  %arrayidx.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 7
  %17 = bitcast i64* %arrayidx.6 to <2 x i64>*
  store <2 x i64> <i64 1, i64 1>, <2 x i64>* %17, align 8, !tbaa !22
  %arrayidx12.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 7
  %18 = bitcast i64* %arrayidx12.6 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %18, align 8, !tbaa !22
  %arrayidx14.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 7
  %19 = bitcast i64* %arrayidx14.6 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %19, align 8, !tbaa !22
  %arrayidx.8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 8
  %arrayidx12.8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 8
  %arrayidx14.8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 8
  %arrayidx.9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 9
  %20 = bitcast i64* %arrayidx.8 to <2 x i64>*
  store <2 x i64> <i64 1, i64 1>, <2 x i64>* %20, align 8, !tbaa !22
  %arrayidx12.9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 9
  %21 = bitcast i64* %arrayidx12.8 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %21, align 8, !tbaa !22
  %arrayidx14.9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 9
  %22 = bitcast i64* %arrayidx14.8 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %22, align 8, !tbaa !22
  %arrayidx.10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 10
  %arrayidx12.10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 10
  %arrayidx14.10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 10
  %arrayidx.11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 11
  %23 = bitcast i64* %arrayidx.10 to <2 x i64>*
  store <2 x i64> <i64 1, i64 1>, <2 x i64>* %23, align 8, !tbaa !22
  %arrayidx12.11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 11
  %24 = bitcast i64* %arrayidx12.10 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %24, align 8, !tbaa !22
  %arrayidx14.11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 11
  %25 = bitcast i64* %arrayidx14.10 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %25, align 8, !tbaa !22
  %arrayidx.12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 12
  %arrayidx12.12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 12
  %arrayidx14.12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 12
  %arrayidx.13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 13
  %26 = bitcast i64* %arrayidx.12 to <2 x i64>*
  store <2 x i64> <i64 1, i64 1>, <2 x i64>* %26, align 8, !tbaa !22
  %arrayidx12.13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 13
  %27 = bitcast i64* %arrayidx12.12 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %27, align 8, !tbaa !22
  %arrayidx14.13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 13
  %28 = bitcast i64* %arrayidx14.12 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %28, align 8, !tbaa !22
  %arrayidx.14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 14
  %arrayidx12.14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 14
  %arrayidx14.14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 14
  %arrayidx.15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 15
  %29 = bitcast i64* %arrayidx.14 to <2 x i64>*
  store <2 x i64> <i64 1, i64 1>, <2 x i64>* %29, align 8, !tbaa !22
  %arrayidx12.15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 15
  %30 = bitcast i64* %arrayidx12.14 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %30, align 8, !tbaa !22
  %arrayidx14.15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 15
  %31 = bitcast i64* %arrayidx14.14 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %31, align 8, !tbaa !22
  %src_begin = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 2
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 5
  %32 = load i32, i32* %dimensions, align 4, !tbaa !183
  %cmp17272 = icmp sgt i32 %32, 0
  br i1 %cmp17272, label %for.body19.lr.ph, label %cond.end8.for.cond.cleanup18_crit_edge

cond.end8.for.cond.cleanup18_crit_edge:           ; preds = %cond.end8
  %mul37.0 = mul i64 %conv, 0
  br label %for.cond.cleanup18

for.body19.lr.ph:                                 ; preds = %cond.end8
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 6
  %33 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !184
  %dim23 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 6
  %34 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim23, align 8, !tbaa !184
  %wide.trip.count = zext i32 %32 to i64
  %min.iters.check = icmp ult i32 %32, 5
  br i1 %min.iters.check, label %for.body19.preheader, label %vector.ph

for.body19.preheader:                             ; preds = %middle.block, %for.body19.lr.ph
  %indvars.iv284.ph = phi i64 [ 0, %for.body19.lr.ph ], [ %n.vec, %middle.block ]
  %.ph = phi i64 [ 0, %for.body19.lr.ph ], [ %61, %middle.block ]
  br label %for.body19

vector.ph:                                        ; preds = %for.body19.lr.ph
  %n.mod.vf = and i64 %wide.trip.count, 3
  %35 = icmp eq i64 %n.mod.vf, 0
  %36 = select i1 %35, i64 4, i64 %n.mod.vf
  %n.vec = sub nsw i64 %wide.trip.count, %36
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %vec.phi = phi <2 x i64> [ zeroinitializer, %vector.ph ], [ %58, %vector.body ]
  %vec.phi2 = phi <2 x i64> [ zeroinitializer, %vector.ph ], [ %59, %vector.body ]
  %37 = or i64 %index, 2
  %38 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %33, i64 %index, i32 2
  %39 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %33, i64 %37, i32 2
  %40 = getelementptr inbounds i32, i32* %38, i64 -2
  %41 = bitcast i32* %40 to <8 x i32>*
  %42 = getelementptr inbounds i32, i32* %39, i64 -2
  %43 = bitcast i32* %42 to <8 x i32>*
  %wide.vec = load <8 x i32>, <8 x i32>* %41, align 4, !tbaa !41
  %wide.vec3 = load <8 x i32>, <8 x i32>* %43, align 4, !tbaa !41
  %strided.vec5 = shufflevector <8 x i32> %wide.vec, <8 x i32> poison, <2 x i32> <i32 2, i32 6>
  %strided.vec6 = shufflevector <8 x i32> %wide.vec3, <8 x i32> poison, <2 x i32> <i32 2, i32 6>
  %44 = sext <2 x i32> %strided.vec5 to <2 x i64>
  %45 = sext <2 x i32> %strided.vec6 to <2 x i64>
  %46 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %34, i64 %index, i32 0
  %47 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %34, i64 %37, i32 0
  %48 = bitcast i32* %46 to <8 x i32>*
  %49 = bitcast i32* %47 to <8 x i32>*
  %wide.vec7 = load <8 x i32>, <8 x i32>* %48, align 4, !tbaa !221
  %wide.vec8 = load <8 x i32>, <8 x i32>* %49, align 4, !tbaa !221
  %50 = sub nsw <8 x i32> %wide.vec7, %wide.vec
  %51 = shufflevector <8 x i32> %50, <8 x i32> undef, <2 x i32> <i32 0, i32 4>
  %52 = sub nsw <8 x i32> %wide.vec8, %wide.vec3
  %53 = shufflevector <8 x i32> %52, <8 x i32> undef, <2 x i32> <i32 0, i32 4>
  %54 = sext <2 x i32> %51 to <2 x i64>
  %55 = sext <2 x i32> %53 to <2 x i64>
  %56 = mul nsw <2 x i64> %54, %44
  %57 = mul nsw <2 x i64> %55, %45
  %58 = add <2 x i64> %56, %vec.phi
  %59 = add <2 x i64> %57, %vec.phi2
  %index.next = add i64 %index, 4
  %60 = icmp eq i64 %index.next, %n.vec
  br i1 %60, label %middle.block, label %vector.body, !llvm.loop !243

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <2 x i64> %59, %58
  %61 = call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %bin.rdx)
  br label %for.body19.preheader

for.cond.cleanup18:                               ; preds = %for.body19.for.cond.cleanup18_crit_edge, %cond.end8.for.cond.cleanup18_crit_edge
  %mul37.phi = phi i64 [ %mul37.0, %cond.end8.for.cond.cleanup18_crit_edge ], [ %mul37.1, %for.body19.for.cond.cleanup18_crit_edge ]
  store i64 %mul37.phi, i64* %src_begin, align 8, !tbaa !242
  %dimensions39 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 5
  %62 = load i32, i32* %dimensions39, align 4, !tbaa !183
  %cmp40.not = icmp eq i32 %32, %62
  br i1 %cmp40.not, label %lor.lhs.false, label %if.then

for.body19:                                       ; preds = %for.body19.preheader, %for.body19
  %indvars.iv284 = phi i64 [ %indvars.iv.next285, %for.body19 ], [ %indvars.iv284.ph, %for.body19.preheader ]
  %63 = phi i64 [ %add, %for.body19 ], [ %.ph, %for.body19.preheader ]
  %stride = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %33, i64 %indvars.iv284, i32 2
  %64 = load i32, i32* %stride, align 4, !tbaa !185
  %conv22 = sext i32 %64 to i64
  %min = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %34, i64 %indvars.iv284, i32 0
  %65 = load i32, i32* %min, align 4, !tbaa !221
  %min29 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %33, i64 %indvars.iv284, i32 0
  %66 = load i32, i32* %min29, align 4, !tbaa !221
  %sub = sub nsw i32 %65, %66
  %conv30 = sext i32 %sub to i64
  %mul = mul nsw i64 %conv30, %conv22
  %add = add i64 %mul, %63
  %indvars.iv.next285 = add nuw nsw i64 %indvars.iv284, 1
  %exitcond286.not = icmp eq i64 %indvars.iv.next285, %wide.trip.count
  br i1 %exitcond286.not, label %for.body19.for.cond.cleanup18_crit_edge, label %for.body19, !llvm.loop !244

for.body19.for.cond.cleanup18_crit_edge:          ; preds = %for.body19
  %mul37.1 = mul i64 %add, %conv
  br label %for.cond.cleanup18

lor.lhs.false:                                    ; preds = %for.cond.cleanup18
  %bits.i253 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 4, i32 1
  %67 = load i8, i8* %bits.i253, align 1, !tbaa !144
  %conv.i254 = zext i8 %67 to i32
  %add.i255 = add nuw nsw i32 %conv.i254, 7
  %div.i256 = lshr i32 %add.i255, 3
  %cmp45.not = icmp ne i32 %div.i, %div.i256
  %cmp48 = icmp sgt i32 %32, 16
  %or.cond261 = or i1 %cmp48, %cmp45.not
  br i1 %or.cond261, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %for.cond.cleanup18
  %68 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %agg.result to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(416) %68, i8 0, i64 416, i1 false)
  br label %cleanup

if.end:                                           ; preds = %lor.lhs.false
  %cmp50 = icmp eq i32 %div.i, 0
  br i1 %cmp50, label %if.then51, label %for.cond54.preheader

for.cond54.preheader:                             ; preds = %if.end
  br i1 %cmp17272, label %for.body58.lr.ph, label %while.end

for.body58.lr.ph:                                 ; preds = %for.cond54.preheader
  %dim60 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 6
  %69 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim60, align 8, !tbaa !184
  %dim70 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 6
  %70 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim70, align 8, !tbaa !184
  %wide.trip.count282 = zext i32 %32 to i64
  br label %for.body58

if.then51:                                        ; preds = %if.end
  %71 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %agg.result to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(416) %71, i8 0, i64 416, i1 false)
  br label %cleanup

while.cond.preheader:                             ; preds = %for.cond.cleanup94
  %.pre = load i64, i64* %chunk_size, align 8, !tbaa !240
  %.pre290 = load i64, i64* %arrayidx12, align 8, !tbaa !22
  %cmp139263 = icmp eq i64 %.pre, %.pre290
  br i1 %cmp139263, label %land.rhs.lr.ph, label %while.end

land.rhs.lr.ph:                                   ; preds = %while.cond.preheader
  %.pre291 = load i64, i64* %arrayidx14, align 8, !tbaa !22
  %72 = bitcast i64* %arrayidx.1 to <2 x i64>*
  %73 = bitcast i64* %arrayidx to <2 x i64>*
  %74 = bitcast i64* %arrayidx12.1 to <2 x i64>*
  %75 = bitcast i64* %arrayidx12 to <2 x i64>*
  %76 = bitcast i64* %arrayidx14.1 to <2 x i64>*
  %77 = bitcast i64* %arrayidx14 to <2 x i64>*
  %78 = bitcast i64* %arrayidx.3 to <2 x i64>*
  %79 = bitcast i64* %arrayidx.2 to <2 x i64>*
  %80 = bitcast i64* %arrayidx12.3 to <2 x i64>*
  %81 = bitcast i64* %arrayidx12.2 to <2 x i64>*
  %82 = bitcast i64* %arrayidx14.3 to <2 x i64>*
  %83 = bitcast i64* %arrayidx14.2 to <2 x i64>*
  %84 = bitcast i64* %arrayidx.5 to <2 x i64>*
  %85 = bitcast i64* %arrayidx.4 to <2 x i64>*
  %86 = bitcast i64* %arrayidx12.5 to <2 x i64>*
  %87 = bitcast i64* %arrayidx12.4 to <2 x i64>*
  %88 = bitcast i64* %arrayidx14.5 to <2 x i64>*
  %89 = bitcast i64* %arrayidx14.4 to <2 x i64>*
  %90 = bitcast i64* %arrayidx.7 to <2 x i64>*
  %91 = bitcast i64* %arrayidx.6 to <2 x i64>*
  %92 = bitcast i64* %arrayidx12.7 to <2 x i64>*
  %93 = bitcast i64* %arrayidx12.6 to <2 x i64>*
  %94 = bitcast i64* %arrayidx14.7 to <2 x i64>*
  %95 = bitcast i64* %arrayidx14.6 to <2 x i64>*
  %96 = bitcast i64* %arrayidx.9 to <2 x i64>*
  %97 = bitcast i64* %arrayidx.8 to <2 x i64>*
  %98 = bitcast i64* %arrayidx12.9 to <2 x i64>*
  %99 = bitcast i64* %arrayidx12.8 to <2 x i64>*
  %100 = bitcast i64* %arrayidx14.9 to <2 x i64>*
  %101 = bitcast i64* %arrayidx14.8 to <2 x i64>*
  %102 = bitcast i64* %arrayidx.11 to <2 x i64>*
  %103 = bitcast i64* %arrayidx.10 to <2 x i64>*
  %104 = bitcast i64* %arrayidx12.11 to <2 x i64>*
  %105 = bitcast i64* %arrayidx12.10 to <2 x i64>*
  %106 = bitcast i64* %arrayidx14.11 to <2 x i64>*
  %107 = bitcast i64* %arrayidx14.10 to <2 x i64>*
  %108 = bitcast i64* %arrayidx.13 to <2 x i64>*
  %109 = bitcast i64* %arrayidx.12 to <2 x i64>*
  %110 = bitcast i64* %arrayidx12.13 to <2 x i64>*
  %111 = bitcast i64* %arrayidx12.12 to <2 x i64>*
  %112 = bitcast i64* %arrayidx14.13 to <2 x i64>*
  %113 = bitcast i64* %arrayidx14.12 to <2 x i64>*
  br label %land.rhs

for.body58:                                       ; preds = %for.cond.cleanup94, %for.body58.lr.ph
  %indvars.iv278 = phi i64 [ 0, %for.body58.lr.ph ], [ %indvars.iv.next279, %for.cond.cleanup94 ]
  %stride63 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %69, i64 %indvars.iv278, i32 2
  %114 = load i32, i32* %stride63, align 4, !tbaa !185
  %conv64 = sext i32 %114 to i64
  %mul68 = mul nsw i64 %conv64, %conv
  %stride73 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %70, i64 %indvars.iv278, i32 2
  %115 = load i32, i32* %stride73, align 4, !tbaa !185
  %conv74 = sext i32 %115 to i64
  %mul78 = mul nsw i64 %conv74, %conv
  %cmp80264.not = icmp eq i64 %indvars.iv278, 0
  br i1 %cmp80264.not, label %for.end91, label %for.body81.lr.ph

for.body81.lr.ph:                                 ; preds = %for.body58
  %cmp86.not = icmp eq i64 %mul68, 0
  br i1 %cmp86.not, label %for.body81.preheader, label %for.body81.us

for.body81.preheader:                             ; preds = %for.body81.lr.ph
  %116 = trunc i64 %indvars.iv278 to i32
  br label %for.end91

for.body81.us:                                    ; preds = %for.body81.lr.ph, %for.inc89.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc89.us ], [ 0, %for.body81.lr.ph ]
  %arrayidx84.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv
  %117 = load i64, i64* %arrayidx84.us, align 8, !tbaa !22
  %cmp85.us = icmp ult i64 %mul68, %117
  br i1 %cmp85.us, label %for.end91.loopexit, label %for.inc89.us

for.inc89.us:                                     ; preds = %for.body81.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %indvars.iv278
  br i1 %exitcond.not, label %for.end91.loopexit, label %for.body81.us, !llvm.loop !245

for.end91.loopexit:                               ; preds = %for.inc89.us, %for.body81.us
  %insert.0.lcssa.ph.in = phi i64 [ %indvars.iv278, %for.inc89.us ], [ %indvars.iv, %for.body81.us ]
  %insert.0.lcssa.ph = trunc i64 %insert.0.lcssa.ph.in to i32
  br label %for.end91

for.end91:                                        ; preds = %for.end91.loopexit, %for.body81.preheader, %for.body58
  %insert.0.lcssa = phi i32 [ 0, %for.body58 ], [ %insert.0.lcssa.ph, %for.end91.loopexit ], [ %116, %for.body81.preheader ]
  %118 = zext i32 %insert.0.lcssa to i64
  %cmp93267 = icmp ugt i64 %indvars.iv278, %118
  br i1 %cmp93267, label %for.body95.preheader, label %for.cond.cleanup94

for.body95.preheader:                             ; preds = %for.end91
  %119 = sext i32 %insert.0.lcssa to i64
  br label %for.body95

for.cond.cleanup94:                               ; preds = %for.body95, %for.end91
  %extent122 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %69, i64 %indvars.iv278, i32 1
  %120 = load i32, i32* %extent122, align 4, !tbaa !189
  %conv123 = sext i32 %120 to i64
  %arrayidx126 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %118
  store i64 %conv123, i64* %arrayidx126, align 8, !tbaa !22
  %arrayidx129 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %118
  store i64 %mul68, i64* %arrayidx129, align 8, !tbaa !22
  %arrayidx132 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %118
  store i64 %mul78, i64* %arrayidx132, align 8, !tbaa !22
  %indvars.iv.next279 = add nuw nsw i64 %indvars.iv278, 1
  %exitcond283.not = icmp eq i64 %indvars.iv.next279, %wide.trip.count282
  br i1 %exitcond283.not, label %while.cond.preheader, label %for.body58, !llvm.loop !246

for.body95:                                       ; preds = %for.body95, %for.body95.preheader
  %indvars.iv280 = phi i64 [ %indvars.iv278, %for.body95.preheader ], [ %indvars.iv.next281, %for.body95 ]
  %indvars.iv.next281 = add nsw i64 %indvars.iv280, -1
  %arrayidx99 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv.next281
  %121 = load i64, i64* %arrayidx99, align 8, !tbaa !22
  %arrayidx102 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv280
  store i64 %121, i64* %arrayidx102, align 8, !tbaa !22
  %arrayidx106 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv.next281
  %122 = load i64, i64* %arrayidx106, align 8, !tbaa !22
  %arrayidx109 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv280
  store i64 %122, i64* %arrayidx109, align 8, !tbaa !22
  %arrayidx113 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv.next281
  %123 = load i64, i64* %arrayidx113, align 8, !tbaa !22
  %arrayidx116 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv280
  store i64 %123, i64* %arrayidx116, align 8, !tbaa !22
  %cmp93 = icmp sgt i64 %indvars.iv.next281, %119
  br i1 %cmp93, label %for.body95, label %for.cond.cleanup94, !llvm.loop !247

land.rhs:                                         ; preds = %while.body, %land.rhs.lr.ph
  %124 = phi i64 [ %.pre291, %land.rhs.lr.ph ], [ %152, %while.body ]
  %125 = phi i64 [ %.pre, %land.rhs.lr.ph ], [ %mul147, %while.body ]
  %cmp143 = icmp eq i64 %125, %124
  br i1 %cmp143, label %while.body, label %while.end

while.body:                                       ; preds = %land.rhs
  %126 = load i64, i64* %arrayidx, align 8, !tbaa !22
  %mul147 = mul i64 %126, %124
  store i64 %mul147, i64* %chunk_size, align 8, !tbaa !240
  %127 = load <2 x i64>, <2 x i64>* %72, align 8, !tbaa !22
  store <2 x i64> %127, <2 x i64>* %73, align 8, !tbaa !22
  %128 = load <2 x i64>, <2 x i64>* %74, align 8, !tbaa !22
  store <2 x i64> %128, <2 x i64>* %75, align 8, !tbaa !22
  %129 = load <2 x i64>, <2 x i64>* %76, align 8, !tbaa !22
  store <2 x i64> %129, <2 x i64>* %77, align 8, !tbaa !22
  %130 = load <2 x i64>, <2 x i64>* %78, align 8, !tbaa !22
  store <2 x i64> %130, <2 x i64>* %79, align 8, !tbaa !22
  %131 = load <2 x i64>, <2 x i64>* %80, align 8, !tbaa !22
  store <2 x i64> %131, <2 x i64>* %81, align 8, !tbaa !22
  %132 = load <2 x i64>, <2 x i64>* %82, align 8, !tbaa !22
  store <2 x i64> %132, <2 x i64>* %83, align 8, !tbaa !22
  %133 = load <2 x i64>, <2 x i64>* %84, align 8, !tbaa !22
  store <2 x i64> %133, <2 x i64>* %85, align 8, !tbaa !22
  %134 = load <2 x i64>, <2 x i64>* %86, align 8, !tbaa !22
  store <2 x i64> %134, <2 x i64>* %87, align 8, !tbaa !22
  %135 = load <2 x i64>, <2 x i64>* %88, align 8, !tbaa !22
  store <2 x i64> %135, <2 x i64>* %89, align 8, !tbaa !22
  %136 = load <2 x i64>, <2 x i64>* %90, align 8, !tbaa !22
  store <2 x i64> %136, <2 x i64>* %91, align 8, !tbaa !22
  %137 = load <2 x i64>, <2 x i64>* %92, align 8, !tbaa !22
  store <2 x i64> %137, <2 x i64>* %93, align 8, !tbaa !22
  %138 = load <2 x i64>, <2 x i64>* %94, align 8, !tbaa !22
  store <2 x i64> %138, <2 x i64>* %95, align 8, !tbaa !22
  %139 = load <2 x i64>, <2 x i64>* %96, align 8, !tbaa !22
  store <2 x i64> %139, <2 x i64>* %97, align 8, !tbaa !22
  %140 = load <2 x i64>, <2 x i64>* %98, align 8, !tbaa !22
  store <2 x i64> %140, <2 x i64>* %99, align 8, !tbaa !22
  %141 = load <2 x i64>, <2 x i64>* %100, align 8, !tbaa !22
  store <2 x i64> %141, <2 x i64>* %101, align 8, !tbaa !22
  %142 = load <2 x i64>, <2 x i64>* %102, align 8, !tbaa !22
  store <2 x i64> %142, <2 x i64>* %103, align 8, !tbaa !22
  %143 = load <2 x i64>, <2 x i64>* %104, align 8, !tbaa !22
  store <2 x i64> %143, <2 x i64>* %105, align 8, !tbaa !22
  %144 = load <2 x i64>, <2 x i64>* %106, align 8, !tbaa !22
  store <2 x i64> %144, <2 x i64>* %107, align 8, !tbaa !22
  %145 = load <2 x i64>, <2 x i64>* %108, align 8, !tbaa !22
  store <2 x i64> %145, <2 x i64>* %109, align 8, !tbaa !22
  %146 = load <2 x i64>, <2 x i64>* %110, align 8, !tbaa !22
  store <2 x i64> %146, <2 x i64>* %111, align 8, !tbaa !22
  %147 = load <2 x i64>, <2 x i64>* %112, align 8, !tbaa !22
  store <2 x i64> %147, <2 x i64>* %113, align 8, !tbaa !22
  %148 = load i64, i64* %arrayidx.15, align 8, !tbaa !22
  store i64 %148, i64* %arrayidx.14, align 8, !tbaa !22
  %149 = load i64, i64* %arrayidx12.15, align 8, !tbaa !22
  store i64 %149, i64* %arrayidx12.14, align 8, !tbaa !22
  %150 = load i64, i64* %arrayidx14.15, align 8, !tbaa !22
  store i64 %150, i64* %arrayidx14.14, align 8, !tbaa !22
  store i64 1, i64* %arrayidx.15, align 8, !tbaa !22
  store i64 0, i64* %arrayidx12.15, align 8, !tbaa !22
  store i64 0, i64* %arrayidx14.15, align 8, !tbaa !22
  %151 = extractelement <2 x i64> %128, i32 0
  %cmp139 = icmp eq i64 %mul147, %151
  %152 = extractelement <2 x i64> %129, i32 0
  br i1 %cmp139, label %land.rhs, label %while.end, !llvm.loop !248

while.end:                                        ; preds = %while.body, %land.rhs, %while.cond.preheader, %for.cond54.preheader
  %153 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %agg.result to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(416) %153, i8* nonnull align 8 dereferenceable(416) %0, i64 416, i1 false), !tbaa.struct !249
  br label %cleanup

cleanup:                                          ; preds = %while.end, %if.then51, %if.then
  call void @llvm.lifetime.end.p0i8(i64 416, i8* nonnull %0) #11
  ret void
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #5

; Function Attrs: nounwind mustprogress
define linkonce zeroext i1 @_ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m(i8* %key1, i8* %key2, i64 %key_size) local_unnamed_addr #0 {
entry:
  %call = tail call i32 @memcmp(i8* %key1, i8* %key2, i64 %key_size) #14
  %cmp = icmp eq i32 %call, 0
  ret i1 %cmp
}

declare i32 @memcmp(i8*, i8*, i64) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define linkonce zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %buf, %struct.halide_dimension_t* %shape) local_unnamed_addr #0 {
entry:
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 5
  %0 = load i32, i32* %dimensions, align 4, !tbaa !183
  %cmp9 = icmp sgt i32 %0, 0
  br i1 %cmp9, label %for.body.lr.ph, label %return

for.body.lr.ph:                                   ; preds = %entry
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  %1 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !184
  %2 = zext i32 %0 to i64
  br label %for.body

for.cond:                                         ; preds = %_ZNK18halide_dimension_tneERKS_.exit
  %exitcond.not = icmp eq i64 %indvars.iv.next, %2
  br i1 %exitcond.not, label %return, label %for.body, !llvm.loop !250

for.body:                                         ; preds = %for.cond, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.cond ]
  %min.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %1, i64 %indvars.iv, i32 0
  %3 = load i32, i32* %min.i.i, align 4, !tbaa !221
  %min2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %shape, i64 %indvars.iv, i32 0
  %4 = load i32, i32* %min2.i.i, align 4, !tbaa !221
  %cmp.i.i = icmp eq i32 %3, %4
  br i1 %cmp.i.i, label %land.lhs.true.i.i, label %return

land.lhs.true.i.i:                                ; preds = %for.body
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %1, i64 %indvars.iv, i32 1
  %5 = load i32, i32* %extent.i.i, align 4, !tbaa !189
  %extent3.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %shape, i64 %indvars.iv, i32 1
  %6 = load i32, i32* %extent3.i.i, align 4, !tbaa !189
  %cmp4.i.i = icmp eq i32 %5, %6
  br i1 %cmp4.i.i, label %land.lhs.true5.i.i, label %return

land.lhs.true5.i.i:                               ; preds = %land.lhs.true.i.i
  %stride.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %1, i64 %indvars.iv, i32 2
  %7 = load i32, i32* %stride.i.i, align 4, !tbaa !185
  %stride6.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %shape, i64 %indvars.iv, i32 2
  %8 = load i32, i32* %stride6.i.i, align 4, !tbaa !185
  %cmp7.i.i = icmp eq i32 %7, %8
  br i1 %cmp7.i.i, label %_ZNK18halide_dimension_tneERKS_.exit, label %return

_ZNK18halide_dimension_tneERKS_.exit:             ; preds = %land.lhs.true5.i.i
  %flags.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %1, i64 %indvars.iv, i32 3
  %9 = load i32, i32* %flags.i.i, align 4, !tbaa !251
  %flags8.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %shape, i64 %indvars.iv, i32 3
  %10 = load i32, i32* %flags8.i.i, align 4, !tbaa !251
  %cmp9.i.i.not = icmp eq i32 %9, %10
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  br i1 %cmp9.i.i.not, label %for.cond, label %return

return:                                           ; preds = %_ZNK18halide_dimension_tneERKS_.exit, %land.lhs.true5.i.i, %land.lhs.true.i.i, %for.body, %for.cond, %entry
  %cmp.lcssa = phi i1 [ true, %entry ], [ false, %_ZNK18halide_dimension_tneERKS_.exit ], [ true, %for.cond ], [ false, %land.lhs.true5.i.i ], [ false, %land.lhs.true.i.i ], [ false, %for.body ]
  ret i1 %cmp.lcssa
}

; Function Attrs: nounwind mustprogress
define linkonce zeroext i1 @_ZN6Halide7Runtime8Internal10CacheEntry4initEPKhmjPK15halide_buffer_tiPPS5_by(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %this, i8* %cache_key, i64 %cache_key_size, i32 %key_hash, %struct.halide_buffer_t* %computed_bounds_buf, i32 %tuples, %struct.halide_buffer_t** %tuple_buffers, i1 zeroext %has_eviction_key_arg, i64 %eviction_key_arg) local_unnamed_addr #0 align 2 {
entry:
  %frombool = zext i1 %has_eviction_key_arg to i8
  %0 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"* %this to <2 x %"struct.Halide::Runtime::Internal::CacheEntry"*>*
  store <2 x %"struct.Halide::Runtime::Internal::CacheEntry"*> zeroinitializer, <2 x %"struct.Halide::Runtime::Internal::CacheEntry"*>* %0, align 8, !tbaa !14
  %less_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent, align 8, !tbaa !252
  %key_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 4
  store i64 %cache_key_size, i64* %key_size, align 8, !tbaa !253
  %hash = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 6
  store i32 %key_hash, i32* %hash, align 8, !tbaa !254
  %in_use_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 7
  store i32 0, i32* %in_use_count, align 4, !tbaa !255
  %tuple_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 8
  store i32 %tuples, i32* %tuple_count, align 8, !tbaa !232
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %computed_bounds_buf, i64 0, i32 5
  %1 = load i32, i32* %dimensions, align 4, !tbaa !183
  %dimensions2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 9
  store i32 %1, i32* %dimensions2, align 4, !tbaa !256
  %conv = zext i32 %tuples to i64
  %mul = mul nuw nsw i64 %conv, 56
  %conv5 = sext i32 %1 to i64
  %add8 = add i32 %tuples, 1
  %conv9 = zext i32 %add8 to i64
  %mul6 = shl nuw nsw i64 %conv9, 4
  %mul10 = mul i64 %mul6, %conv5
  %add11 = add i64 %mul10, %mul
  %add13 = add i64 %add11, %cache_key_size
  %call = tail call i8* @halide_malloc(i8* null, i64 %add13) #14
  %metadata_storage = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 3
  store i8* %call, i8** %metadata_storage, align 8, !tbaa !233
  %tobool.not = icmp eq i8* %call, null
  br i1 %tobool.not, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %buf = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 11
  %2 = bitcast %struct.halide_buffer_t** %buf to i8**
  store i8* %call, i8** %2, align 8, !tbaa !234
  %add.ptr = getelementptr inbounds i8, i8* %call, i64 %mul
  %computed_bounds = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 10
  %3 = bitcast %struct.halide_dimension_t** %computed_bounds to i8**
  store i8* %add.ptr, i8** %3, align 8, !tbaa !257
  %add.ptr18 = getelementptr inbounds i8, i8* %call, i64 %add11
  %key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 5
  store i8* %add.ptr18, i8** %key, align 8, !tbaa !258
  %4 = load i64, i64* %key_size, align 8, !tbaa !253
  %cmp117.not = icmp eq i64 %4, 0
  br i1 %cmp117.not, label %for.cond23.preheader, label %for.body.preheader

for.body.preheader:                               ; preds = %if.end
  %5 = load i8, i8* %cache_key, align 1, !tbaa !18
  store i8 %5, i8* %add.ptr18, align 1, !tbaa !18
  %cmp130.not = icmp eq i64 %4, 1
  br i1 %cmp130.not, label %for.cond23.preheader, label %for.body.for.body_crit_edge.preheader, !llvm.loop !259

for.body.for.body_crit_edge.preheader:            ; preds = %for.body.preheader
  %arrayidx2 = getelementptr inbounds i8, i8* %cache_key, i64 1
  %6 = load i8, i8* %arrayidx2, align 1, !tbaa !18
  %arrayidx213 = getelementptr inbounds i8, i8* %add.ptr18, i64 1
  store i8 %6, i8* %arrayidx213, align 1, !tbaa !18
  %7 = load i64, i64* %key_size, align 8, !tbaa !253
  %cmp4 = icmp ugt i64 %7, 2
  br i1 %cmp4, label %for.body.for.body_crit_edge.for.body.for.body_crit_edge_crit_edge, label %for.cond23.preheader, !llvm.loop !259

for.cond23.preheader:                             ; preds = %for.body.for.body_crit_edge.for.body.for.body_crit_edge_crit_edge, %for.body.for.body_crit_edge.preheader, %for.body.preheader, %if.end
  %8 = load i32, i32* %dimensions2, align 4, !tbaa !256
  %cmp25115 = icmp sgt i32 %8, 0
  br i1 %cmp25115, label %for.body27.lr.ph, label %for.cond36.preheader

for.body27.lr.ph:                                 ; preds = %for.cond23.preheader
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %computed_bounds_buf, i64 0, i32 6
  br label %for.body27

for.body.for.body_crit_edge.for.body.for.body_crit_edge_crit_edge: ; preds = %for.body.for.body_crit_edge.preheader, %for.body.for.body_crit_edge.for.body.for.body_crit_edge_crit_edge
  %inc5 = phi i64 [ %inc, %for.body.for.body_crit_edge.for.body.for.body_crit_edge_crit_edge ], [ 2, %for.body.for.body_crit_edge.preheader ]
  %.pre.pre = load i8*, i8** %key, align 8, !tbaa !258
  %arrayidx = getelementptr inbounds i8, i8* %cache_key, i64 %inc5
  %9 = load i8, i8* %arrayidx, align 1, !tbaa !18
  %arrayidx21 = getelementptr inbounds i8, i8* %.pre.pre, i64 %inc5
  store i8 %9, i8* %arrayidx21, align 1, !tbaa !18
  %inc = add nuw i64 %inc5, 1
  %10 = load i64, i64* %key_size, align 8, !tbaa !253
  %cmp = icmp ult i64 %inc, %10
  br i1 %cmp, label %for.body.for.body_crit_edge.for.body.for.body_crit_edge_crit_edge, label %for.cond23.preheader, !llvm.loop !259

for.cond36.preheader:                             ; preds = %for.body27, %for.cond23.preheader
  %11 = load i32, i32* %tuple_count, align 8, !tbaa !232
  %cmp38113.not = icmp eq i32 %11, 0
  br i1 %cmp38113.not, label %for.cond.cleanup39, label %for.body40

for.body27:                                       ; preds = %for.body27, %for.body27.lr.ph
  %indvars.iv121 = phi i64 [ 0, %for.body27.lr.ph ], [ %indvars.iv.next122, %for.body27 ]
  %12 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !184
  %arrayidx28 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i64 %indvars.iv121
  %13 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds, align 8, !tbaa !257
  %arrayidx31 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %13, i64 %indvars.iv121
  %14 = bitcast %struct.halide_dimension_t* %arrayidx31 to i8*
  %15 = bitcast %struct.halide_dimension_t* %arrayidx28 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %14, i8* nonnull align 4 dereferenceable(16) %15, i64 16, i1 false), !tbaa.struct !188
  %indvars.iv.next122 = add nuw nsw i64 %indvars.iv121, 1
  %16 = load i32, i32* %dimensions2, align 4, !tbaa !256
  %17 = sext i32 %16 to i64
  %cmp25 = icmp slt i64 %indvars.iv.next122, %17
  br i1 %cmp25, label %for.body27, label %for.cond36.preheader, !llvm.loop !260

for.cond36.loopexit:                              ; preds = %for.body59.for.body59_crit_edge, %for.body59.preheader, %for.body40
  %18 = load i32, i32* %tuple_count, align 8, !tbaa !232
  %19 = zext i32 %18 to i64
  %cmp38 = icmp ult i64 %indvars.iv.next120, %19
  br i1 %cmp38, label %for.body40, label %for.cond.cleanup39, !llvm.loop !261

for.cond.cleanup39:                               ; preds = %for.cond36.loopexit, %for.cond36.preheader
  %has_eviction_key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 13
  store i8 %frombool, i8* %has_eviction_key, align 8, !tbaa !262
  %eviction_key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 12
  store i64 %eviction_key_arg, i64* %eviction_key, align 8, !tbaa !263
  br label %cleanup

for.body40:                                       ; preds = %for.cond36.preheader, %for.cond36.loopexit
  %indvars.iv119 = phi i64 [ %indvars.iv.next120, %for.cond36.loopexit ], [ 0, %for.cond36.preheader ]
  %arrayidx42 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv119
  %20 = bitcast %struct.halide_buffer_t** %arrayidx42 to i8**
  %21 = load i8*, i8** %20, align 8, !tbaa !14
  %22 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !234
  %arrayidx45 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %22, i64 %indvars.iv119
  %23 = bitcast %struct.halide_buffer_t* %arrayidx45 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(56) %23, i8* nonnull align 8 dereferenceable(56) %21, i64 56, i1 false), !tbaa.struct !264
  %24 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds, align 8, !tbaa !257
  %indvars.iv.next120 = add nuw nsw i64 %indvars.iv119, 1
  %25 = load i32, i32* %dimensions2, align 4, !tbaa !256
  %26 = trunc i64 %indvars.iv.next120 to i32
  %mul49 = mul i32 %25, %26
  %idx.ext = zext i32 %mul49 to i64
  %add.ptr50 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %24, i64 %idx.ext
  %27 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !234
  %dim54 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %27, i64 %indvars.iv119, i32 6
  store %struct.halide_dimension_t* %add.ptr50, %struct.halide_dimension_t** %dim54, align 8, !tbaa !184
  %cmp57111 = icmp sgt i32 %25, 0
  br i1 %cmp57111, label %for.body59.preheader, label %for.cond36.loopexit

for.body59.preheader:                             ; preds = %for.body40
  %28 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx42, align 8, !tbaa !14
  %dim62125 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %28, i64 0, i32 6
  %29 = bitcast %struct.halide_dimension_t** %dim62125 to i8**
  %30 = load i8*, i8** %29, align 8, !tbaa !184
  %31 = bitcast %struct.halide_dimension_t* %add.ptr50 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %31, i8* nonnull align 4 dereferenceable(16) %30, i64 16, i1 false), !tbaa.struct !188
  %32 = load i32, i32* %dimensions2, align 4, !tbaa !256
  %cmp57128 = icmp sgt i32 %32, 1
  br i1 %cmp57128, label %for.body59.for.body59_crit_edge, label %for.cond36.loopexit, !llvm.loop !266

for.body59.for.body59_crit_edge:                  ; preds = %for.body59.preheader, %for.body59.for.body59_crit_edge
  %indvars.iv.next129 = phi i64 [ %indvars.iv.next, %for.body59.for.body59_crit_edge ], [ 1, %for.body59.preheader ]
  %.pre123 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !234
  %dim68.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %.pre123, i64 %indvars.iv119, i32 6
  %.pre124 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim68.phi.trans.insert, align 8, !tbaa !184
  %33 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx42, align 8, !tbaa !14
  %dim62 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %33, i64 0, i32 6
  %34 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim62, align 8, !tbaa !184
  %arrayidx64 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %34, i64 %indvars.iv.next129
  %arrayidx70 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %.pre124, i64 %indvars.iv.next129
  %35 = bitcast %struct.halide_dimension_t* %arrayidx70 to i8*
  %36 = bitcast %struct.halide_dimension_t* %arrayidx64 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %35, i8* nonnull align 4 dereferenceable(16) %36, i64 16, i1 false), !tbaa.struct !188
  %indvars.iv.next = add nuw nsw i64 %indvars.iv.next129, 1
  %37 = load i32, i32* %dimensions2, align 4, !tbaa !256
  %38 = sext i32 %37 to i64
  %cmp57 = icmp slt i64 %indvars.iv.next, %38
  br i1 %cmp57, label %for.body59.for.body59_crit_edge, label %for.cond36.loopexit, !llvm.loop !266

cleanup:                                          ; preds = %for.cond.cleanup39, %entry
  %39 = xor i1 %tobool.not, true
  ret i1 %39
}

; Function Attrs: nounwind mustprogress
define linkonce i32 @_ZN6Halide7Runtime8Internal8djb_hashEPKhm(i8* %key, i64 %key_size) local_unnamed_addr #0 {
entry:
  %cmp8.not = icmp eq i64 %key_size, 0
  br i1 %cmp8.not, label %for.cond.cleanup, label %entry.for.body_crit_edge

entry.for.body_crit_edge:                         ; preds = %entry
  %inc.1 = add nuw i64 0, 1
  %arrayidx.1 = getelementptr inbounds i8, i8* %key, i64 0
  %add.1 = mul i32 5381, 33
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %entry
  %h.0.lcssa = phi i32 [ 5381, %entry ], [ %add1, %for.body ]
  ret i32 %h.0.lcssa

for.body:                                         ; preds = %entry.for.body_crit_edge, %for.body.for.body_crit_edge
  %add.phi = phi i32 [ %add.0, %for.body.for.body_crit_edge ], [ %add.1, %entry.for.body_crit_edge ]
  %arrayidx.phi = phi i8* [ %arrayidx.0, %for.body.for.body_crit_edge ], [ %arrayidx.1, %entry.for.body_crit_edge ]
  %inc.phi = phi i64 [ %inc.0, %for.body.for.body_crit_edge ], [ %inc.1, %entry.for.body_crit_edge ]
  %0 = load i8, i8* %arrayidx.phi, align 1, !tbaa !18
  %conv = zext i8 %0 to i32
  %add1 = add i32 %add.phi, %conv
  %exitcond.not = icmp eq i64 %inc.phi, %key_size
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body.for.body_crit_edge, !llvm.loop !267

for.body.for.body_crit_edge:                      ; preds = %for.body
  %inc.0 = add nuw i64 %inc.phi, 1
  %arrayidx.0 = getelementptr inbounds i8, i8* %key, i64 %inc.phi
  %add.0 = mul i32 %add1, 33
  br label %for.body
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal11prune_cacheEv() local_unnamed_addr #0 {
entry:
  %0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !14
  %1 = load i64, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !22
  %2 = load i64, i64* @_ZN6Halide7Runtime8Internal14max_cache_sizeE, align 8, !tbaa !22
  %cmp84 = icmp sgt i64 %1, %2
  %cmp185 = icmp ne %"struct.Halide::Runtime::Internal::CacheEntry"* %0, null
  %3 = and i1 %cmp185, %cmp84
  br i1 %3, label %while.body, label %while.end42

while.body:                                       ; preds = %entry, %if.end41
  %4 = phi i64 [ %74, %if.end41 ], [ %2, %entry ]
  %5 = phi i64 [ %75, %if.end41 ], [ %1, %entry ]
  %prune_candidate.086 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %6, %if.end41 ], [ %0, %entry ]
  %more_recent2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 1
  %6 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent2, align 8, !tbaa !268
  %in_use_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 7
  %7 = load i32, i32* %in_use_count, align 4, !tbaa !255
  %cmp3 = icmp eq i32 %7, 0
  br i1 %cmp3, label %if.then, label %if.end41

if.then:                                          ; preds = %while.body
  %hash = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 6
  %8 = load i32, i32* %hash, align 8, !tbaa !254
  %9 = and i32 %8, 255
  %idxprom = zext i32 %9 to i64
  %arrayidx = getelementptr inbounds [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 0, i64 %idxprom
  %10 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx, align 8, !tbaa !14
  %cmp5 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %10, %prune_candidate.086
  br i1 %cmp5, label %if.then6, label %while.cond9

if.then6:                                         ; preds = %if.then
  %next = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 0
  %11 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next, align 8, !tbaa !229
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %11, %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx, align 8, !tbaa !14
  br label %if.end21

while.cond9:                                      ; preds = %if.then, %land.rhs11
  %prev_hash_entry.0 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %12, %land.rhs11 ], [ %10, %if.then ]
  %cmp10.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %prev_hash_entry.0, null
  br i1 %cmp10.not, label %if.then18, label %land.rhs11

land.rhs11:                                       ; preds = %while.cond9
  %next12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prev_hash_entry.0, i64 0, i32 0
  %12 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next12, align 8, !tbaa !229
  %cmp13.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %12, %prune_candidate.086
  br i1 %cmp13.not, label %do.end, label %while.cond9, !llvm.loop !269

if.then18:                                        ; preds = %while.cond9
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([126 x i8], [126 x i8]* @.str.2.42, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %do.end

do.end:                                           ; preds = %land.rhs11, %if.then18
  %next19 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 0
  %13 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next19, align 8, !tbaa !229
  %next20 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prev_hash_entry.0, i64 0, i32 0
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %13, %"struct.Halide::Runtime::Internal::CacheEntry"** %next20, align 8, !tbaa !229
  br label %if.end21

if.end21:                                         ; preds = %do.end, %if.then6
  %14 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !14
  %cmp22 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %14, %prune_candidate.086
  br i1 %cmp22, label %if.then23, label %if.end24

if.then23:                                        ; preds = %if.end21
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %6, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !14
  br label %if.end24

if.end24:                                         ; preds = %if.then23, %if.end21
  %cmp25.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %6, null
  br i1 %cmp25.not, label %if.end28, label %if.then26

if.then26:                                        ; preds = %if.end24
  %less_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 2
  %15 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent, align 8, !tbaa !252
  %less_recent27 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %6, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %15, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent27, align 8, !tbaa !252
  br label %if.end28

if.end28:                                         ; preds = %if.then26, %if.end24
  %16 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !14
  %cmp29 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %16, %prune_candidate.086
  %less_recent31 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 2
  %17 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent31, align 8, !tbaa !252
  br i1 %cmp29, label %if.then30, label %if.end32

if.then30:                                        ; preds = %if.end28
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %17, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !14
  br label %if.end32

if.end32:                                         ; preds = %if.then30, %if.end28
  %cmp34.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %17, null
  br i1 %cmp34.not, label %if.end37, label %if.then35

if.then35:                                        ; preds = %if.end32
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %6, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent31, align 8, !tbaa !252
  br label %if.end37

if.end37:                                         ; preds = %if.then35, %if.end32
  %tuple_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 8
  %18 = load i32, i32* %tuple_count, align 8, !tbaa !232
  %cmp3882.not = icmp eq i32 %18, 0
  br i1 %cmp3882.not, label %for.cond.cleanup, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %if.end37
  %buf = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 11
  %19 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !234
  %_ZN6Halide7Runtime8Internal18current_cache_sizeE.promoted = load i64, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !22
  %wide.trip.count = zext i32 %18 to i64
  br label %for.body

for.cond.for.cond.cleanup_crit_edge:              ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  store i64 %sub, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !22
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.for.cond.cleanup_crit_edge, %if.end37
  tail call void @_ZN6Halide7Runtime8Internal10CacheEntry7destroyEv(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %prune_candidate.086) #15
  %20 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086 to i8*
  tail call void @halide_free(i8* null, i8* nonnull %20) #14
  %.pre92 = load i64, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !22
  %.pre93 = load i64, i64* @_ZN6Halide7Runtime8Internal14max_cache_sizeE, align 8, !tbaa !22
  br label %if.end41

for.body:                                         ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ]
  %sub89 = phi i64 [ %_ZN6Halide7Runtime8Internal18current_cache_sizeE.promoted, %for.body.lr.ph ], [ %sub, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ]
  %dimensions.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %19, i64 %indvars.iv, i32 5
  %21 = load i32, i32* %dimensions.i.i, align 4, !tbaa !183
  %cmp19.i.i = icmp sgt i32 %21, 0
  br i1 %cmp19.i.i, label %for.body.lr.ph.i.i, label %for.body._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge

for.body._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge: ; preds = %for.body
  %sub.i.neg.0 = add i64 0, -1
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.lr.ph.i.i:                               ; preds = %for.body
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %19, i64 %indvars.iv, i32 6
  %22 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8, !tbaa !184
  %wide.trip.count.i.i = zext i32 %21 to i64
  %min.iters.check28 = icmp ult i32 %21, 3
  br i1 %min.iters.check28, label %for.body.i.i.preheader, label %vector.ph29

vector.ph29:                                      ; preds = %for.body.lr.ph.i.i
  %n.vec31 = and i64 %wide.trip.count.i.i, 4294967294
  br label %vector.body27

vector.body27:                                    ; preds = %pred.load.continue43, %vector.ph29
  %index32 = phi i64 [ 0, %vector.ph29 ], [ %index.next33, %pred.load.continue43 ]
  %vec.phi38 = phi i64 [ 0, %vector.ph29 ], [ %predphi44, %pred.load.continue43 ]
  %vec.phi39 = phi i64 [ 0, %vector.ph29 ], [ %predphi45, %pred.load.continue43 ]
  %induction37 = or i64 %index32, 1
  %23 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %index32, i32 2
  %24 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %induction37, i32 2
  %25 = load i32, i32* %23, align 4, !tbaa !185
  %26 = load i32, i32* %24, align 4, !tbaa !185
  %27 = icmp sgt i32 %25, 0
  %28 = icmp sgt i32 %26, 0
  %29 = zext i32 %25 to i64
  %30 = zext i32 %26 to i64
  br i1 %27, label %pred.load.if40, label %pred.load.continue41

pred.load.if40:                                   ; preds = %vector.body27
  %31 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %index32, i32 1
  %32 = load i32, i32* %31, align 4, !tbaa !189
  br label %pred.load.continue41

pred.load.continue41:                             ; preds = %pred.load.if40, %vector.body27
  %33 = phi i32 [ poison, %vector.body27 ], [ %32, %pred.load.if40 ]
  br i1 %28, label %pred.load.if42, label %pred.load.continue43

pred.load.if42:                                   ; preds = %pred.load.continue41
  %34 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %induction37, i32 1
  %35 = load i32, i32* %34, align 4, !tbaa !189
  br label %pred.load.continue43

pred.load.continue43:                             ; preds = %pred.load.if42, %pred.load.continue41
  %36 = phi i32 [ poison, %pred.load.continue41 ], [ %35, %pred.load.if42 ]
  %37 = add nsw i32 %33, -1
  %38 = add nsw i32 %36, -1
  %39 = sext i32 %37 to i64
  %40 = sext i32 %38 to i64
  %41 = mul nsw i64 %39, %29
  %42 = mul nsw i64 %40, %30
  %43 = select i1 %27, i64 %41, i64 0
  %predphi44 = add i64 %vec.phi38, %43
  %44 = select i1 %28, i64 %42, i64 0
  %predphi45 = add i64 %vec.phi39, %44
  %index.next33 = add i64 %index32, 2
  %45 = icmp eq i64 %index.next33, %n.vec31
  br i1 %45, label %middle.block25, label %vector.body27, !llvm.loop !270

middle.block25:                                   ; preds = %pred.load.continue43
  %bin.rdx46 = add i64 %predphi45, %predphi44
  %cmp.n35 = icmp eq i64 %n.vec31, %wide.trip.count.i.i
  br i1 %cmp.n35, label %for.body.i13.i.preheader, label %for.body.i.i.preheader

for.body.i.i.preheader:                           ; preds = %for.body.lr.ph.i.i, %middle.block25
  %indvars.iv.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %n.vec31, %middle.block25 ]
  %index.021.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %bin.rdx46, %middle.block25 ]
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.body.i.i.preheader, %if.end.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %if.end.i.i ], [ %indvars.iv.i.i.ph, %for.body.i.i.preheader ]
  %index.021.i.i = phi i64 [ %index.1.i.i, %if.end.i.i ], [ %index.021.i.i.ph, %for.body.i.i.preheader ]
  %stride2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %indvars.iv.i.i, i32 2
  %46 = load i32, i32* %stride2.i.i, align 4, !tbaa !185
  %cmp3.i.i = icmp sgt i32 %46, 0
  br i1 %cmp3.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %conv18.i.i = zext i32 %46 to i64
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %indvars.iv.i.i, i32 1
  %47 = load i32, i32* %extent.i.i, align 4, !tbaa !189
  %sub.i.i = add nsw i32 %47, -1
  %conv7.i.i = sext i32 %sub.i.i to i64
  %mul.i.i = mul nsw i64 %conv7.i.i, %conv18.i.i
  %add.i.i = add nsw i64 %mul.i.i, %index.021.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i64 [ %add.i.i, %if.then.i.i ], [ %index.021.i.i, %for.body.i.i ]
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %exitcond.not.i.i = icmp eq i64 %indvars.iv.next.i.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i.i, label %for.body.i13.i.preheader, label %for.body.i.i, !llvm.loop !271

for.body.i13.i.preheader:                         ; preds = %if.end.i.i, %middle.block25
  %index.1.i.i.lcssa = phi i64 [ %bin.rdx46, %middle.block25 ], [ %index.1.i.i, %if.end.i.i ]
  %min.iters.check = icmp ult i32 %21, 3
  br i1 %min.iters.check, label %for.body.i13.i.preheader48, label %vector.ph

vector.ph:                                        ; preds = %for.body.i13.i.preheader
  %n.vec = and i64 %wide.trip.count.i.i, 4294967294
  br label %vector.body

vector.body:                                      ; preds = %pred.load.continue23, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %pred.load.continue23 ]
  %vec.phi = phi i64 [ 0, %vector.ph ], [ %predphi, %pred.load.continue23 ]
  %vec.phi21 = phi i64 [ 0, %vector.ph ], [ %predphi24, %pred.load.continue23 ]
  %induction20 = or i64 %index, 1
  %48 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %index, i32 2
  %49 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %induction20, i32 2
  %50 = load i32, i32* %48, align 4, !tbaa !185
  %51 = load i32, i32* %49, align 4, !tbaa !185
  %52 = icmp slt i32 %50, 0
  %53 = icmp slt i32 %51, 0
  %54 = sext i32 %50 to i64
  %55 = sext i32 %51 to i64
  br i1 %52, label %pred.load.if, label %pred.load.continue

pred.load.if:                                     ; preds = %vector.body
  %56 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %index, i32 1
  %57 = load i32, i32* %56, align 4, !tbaa !189
  br label %pred.load.continue

pred.load.continue:                               ; preds = %pred.load.if, %vector.body
  %58 = phi i32 [ poison, %vector.body ], [ %57, %pred.load.if ]
  br i1 %53, label %pred.load.if22, label %pred.load.continue23

pred.load.if22:                                   ; preds = %pred.load.continue
  %59 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %induction20, i32 1
  %60 = load i32, i32* %59, align 4, !tbaa !189
  br label %pred.load.continue23

pred.load.continue23:                             ; preds = %pred.load.if22, %pred.load.continue
  %61 = phi i32 [ poison, %pred.load.continue ], [ %60, %pred.load.if22 ]
  %62 = add nsw i32 %58, -1
  %63 = add nsw i32 %61, -1
  %64 = sext i32 %62 to i64
  %65 = sext i32 %63 to i64
  %66 = mul nsw i64 %64, %54
  %67 = mul nsw i64 %65, %55
  %68 = select i1 %52, i64 %66, i64 0
  %predphi = add i64 %vec.phi, %68
  %69 = select i1 %53, i64 %67, i64 0
  %predphi24 = add i64 %vec.phi21, %69
  %index.next = add i64 %index, 2
  %70 = icmp eq i64 %index.next, %n.vec
  br i1 %70, label %middle.block, label %vector.body, !llvm.loop !272

middle.block:                                     ; preds = %pred.load.continue23
  %bin.rdx = add i64 %predphi24, %predphi
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count.i.i
  br i1 %cmp.n, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i.preheader48

for.body.i13.i.preheader48:                       ; preds = %for.body.i13.i.preheader, %middle.block
  %indvars.iv.i10.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %n.vec, %middle.block ]
  %index.018.i.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %bin.rdx, %middle.block ]
  br label %for.body.i13.i

for.body.i13.i:                                   ; preds = %for.body.i13.i.preheader48, %if.end.i24.i
  %indvars.iv.i10.i = phi i64 [ %indvars.iv.next.i22.i, %if.end.i24.i ], [ %indvars.iv.i10.i.ph, %for.body.i13.i.preheader48 ]
  %index.018.i.i = phi i64 [ %index.1.i21.i, %if.end.i24.i ], [ %index.018.i.i.ph, %for.body.i13.i.preheader48 ]
  %stride2.i11.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %indvars.iv.i10.i, i32 2
  %71 = load i32, i32* %stride2.i11.i, align 4, !tbaa !185
  %cmp3.i12.i = icmp slt i32 %71, 0
  br i1 %cmp3.i12.i, label %if.then.i20.i, label %if.end.i24.i

if.then.i20.i:                                    ; preds = %for.body.i13.i
  %conv.i14.i = sext i32 %71 to i64
  %extent.i15.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %indvars.iv.i10.i, i32 1
  %72 = load i32, i32* %extent.i15.i, align 4, !tbaa !189
  %sub.i16.i = add nsw i32 %72, -1
  %conv7.i17.i = sext i32 %sub.i16.i to i64
  %mul.i18.i = mul nsw i64 %conv7.i17.i, %conv.i14.i
  %add.i19.i = add nsw i64 %mul.i18.i, %index.018.i.i
  br label %if.end.i24.i

if.end.i24.i:                                     ; preds = %if.then.i20.i, %for.body.i13.i
  %index.1.i21.i = phi i64 [ %add.i19.i, %if.then.i20.i ], [ %index.018.i.i, %for.body.i13.i ]
  %indvars.iv.next.i22.i = add nuw nsw i64 %indvars.iv.i10.i, 1
  %exitcond.not.i23.i = icmp eq i64 %indvars.iv.next.i22.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i23.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i, !llvm.loop !273

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %if.end.i24.i, %middle.block
  %index.1.i21.i.lcssa = phi i64 [ %bin.rdx, %middle.block ], [ %index.1.i21.i, %if.end.i24.i ]
  %add8.i.i.neg = xor i64 %index.1.i.i.lcssa, -1
  %sub.i.neg.1 = add i64 %index.1.i21.i.lcssa, %add8.i.i.neg
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %for.body._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit
  %sub.i.neg.phi = phi i64 [ %sub.i.neg.0, %for.body._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge ], [ %sub.i.neg.1, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %bits.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %19, i64 %indvars.iv, i32 4, i32 1
  %73 = load i8, i8* %bits.i.i, align 1, !tbaa !144
  %conv.i.i = zext i8 %73 to i64
  %add.i4.i = add nuw nsw i64 %conv.i.i, 7
  %div.i.i = lshr i64 %add.i4.i, 3
  %mul.i.neg = mul i64 %div.i.i, %sub.i.neg.phi
  %sub = add i64 %mul.i.neg, %sub89
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.for.cond.cleanup_crit_edge, label %for.body, !llvm.loop !274

if.end41:                                         ; preds = %for.cond.cleanup, %while.body
  %74 = phi i64 [ %.pre93, %for.cond.cleanup ], [ %4, %while.body ]
  %75 = phi i64 [ %.pre92, %for.cond.cleanup ], [ %5, %while.body ]
  %cmp = icmp sgt i64 %75, %74
  %cmp1 = icmp ne %"struct.Halide::Runtime::Internal::CacheEntry"* %6, null
  %76 = and i1 %cmp1, %cmp
  br i1 %76, label %while.body, label %while.end42, !llvm.loop !275

while.end42:                                      ; preds = %if.end41, %entry
  ret void
}

; Function Attrs: nounwind
define weak void @halide_memoization_cache_set_size(i64 %size) local_unnamed_addr #4 {
entry:
  %cmp = icmp eq i64 %size, 0
  %spec.store.select = select i1 %cmp, i64 1048576, i64 %size
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #14
  store i64 %spec.store.select, i64* @_ZN6Halide7Runtime8Internal14max_cache_sizeE, align 8, !tbaa !22
  tail call void @_ZN6Halide7Runtime8Internal11prune_cacheEv() #15
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #14
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_memoization_cache_lookup(i8* %user_context, i8* %cache_key, i32 %size, %struct.halide_buffer_t* %computed_bounds, i32 %tuple_count, %struct.halide_buffer_t** %tuple_buffers) local_unnamed_addr #4 {
entry:
  %conv = sext i32 %size to i64
  %call = tail call i32 @_ZN6Halide7Runtime8Internal8djb_hashEPKhm(i8* %cache_key, i64 %conv) #15
  %0 = and i32 %call, 255
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #14
  %idxprom = zext i32 %0 to i64
  %arrayidx = getelementptr inbounds [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 0, i64 %idxprom
  %entry3.0220 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx, align 8, !tbaa !14
  %cmp.not221 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0220, null
  br i1 %cmp.not221, label %for.cond75.preheader, label %while.body.lr.ph

while.body.lr.ph:                                 ; preds = %entry
  %cmp16215 = icmp sgt i32 %tuple_count, 0
  %1 = sext i32 %tuple_count to i64
  br i1 %cmp16215, label %while.body.us, label %while.body

while.body.us:                                    ; preds = %while.body.lr.ph, %if.end73.us
  %entry3.0222.us = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %entry3.0.us, %if.end73.us ], [ %entry3.0220, %while.body.lr.ph ]
  %hash.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 6
  %2 = load i32, i32* %hash.us, align 8, !tbaa !254
  %cmp4.us = icmp eq i32 %2, %call
  br i1 %cmp4.us, label %land.lhs.true.us, label %if.end73.us

land.lhs.true.us:                                 ; preds = %while.body.us
  %key_size.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 4
  %3 = load i64, i64* %key_size.us, align 8, !tbaa !253
  %cmp6.us = icmp eq i64 %3, %conv
  br i1 %cmp6.us, label %land.lhs.true7.us, label %if.end73.us

land.lhs.true7.us:                                ; preds = %land.lhs.true.us
  %key.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 5
  %4 = load i8*, i8** %key.us, align 8, !tbaa !258
  %call9.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m(i8* %4, i8* %cache_key, i64 %conv) #15
  br i1 %call9.us, label %land.lhs.true10.us, label %if.end73.us

land.lhs.true10.us:                               ; preds = %land.lhs.true7.us
  %computed_bounds11.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 10
  %5 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds11.us, align 8, !tbaa !257
  %call12.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %computed_bounds, %struct.halide_dimension_t* %5) #15
  br i1 %call12.us, label %land.lhs.true13.us, label %if.end73.us

land.lhs.true13.us:                               ; preds = %land.lhs.true10.us
  %tuple_count14.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 8
  %6 = load i32, i32* %tuple_count14.us, align 8, !tbaa !232
  %cmp15.us = icmp eq i32 %6, %tuple_count
  br i1 %cmp15.us, label %for.cond.preheader.us, label %if.end73.us

for.cond.preheader.us:                            ; preds = %land.lhs.true13.us
  %buf.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 11
  br label %for.body.us

for.body.us:                                      ; preds = %for.body.us, %for.cond.preheader.us
  %indvars.iv226.us = phi i64 [ 0, %for.cond.preheader.us ], [ %indvars.iv.next227.us, %for.body.us ]
  %arrayidx18.us = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv226.us
  %7 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx18.us, align 8, !tbaa !14
  %8 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf.us, align 8, !tbaa !234
  %dim.us = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %8, i64 %indvars.iv226.us, i32 6
  %9 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.us, align 8, !tbaa !184
  %call21.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %7, %struct.halide_dimension_t* %9) #15
  %indvars.iv.next227.us = add nuw nsw i64 %indvars.iv226.us, 1
  %cmp16.us = icmp slt i64 %indvars.iv.next227.us, %1
  %10 = and i1 %cmp16.us, %call21.us
  br i1 %10, label %for.body.us, label %for.cond.cleanup.us, !llvm.loop !276

for.cond.cleanup.us:                              ; preds = %for.body.us
  br i1 %call21.us, label %if.then23, label %if.end73.us

if.end73.us:                                      ; preds = %for.cond.cleanup.us, %land.lhs.true13.us, %land.lhs.true10.us, %land.lhs.true7.us, %land.lhs.true.us, %while.body.us
  %next.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 0
  %entry3.0.us = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next.us, align 8, !tbaa !14
  %cmp.not.us = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0.us, null
  br i1 %cmp.not.us, label %for.cond75.preheader, label %while.body.us, !llvm.loop !277

for.cond75.preheader:                             ; preds = %if.end73, %if.end73.us, %entry
  %cmp76210 = icmp sgt i32 %tuple_count, 0
  br i1 %cmp76210, label %for.body78.preheader, label %cleanup119

for.body78.preheader:                             ; preds = %for.cond75.preheader
  %wide.trip.count = zext i32 %tuple_count to i64
  br label %for.body78

while.body:                                       ; preds = %while.body.lr.ph, %if.end73
  %entry3.0222 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %entry3.0, %if.end73 ], [ %entry3.0220, %while.body.lr.ph ]
  %hash = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 6
  %11 = load i32, i32* %hash, align 8, !tbaa !254
  %cmp4 = icmp eq i32 %11, %call
  br i1 %cmp4, label %land.lhs.true, label %if.end73

land.lhs.true:                                    ; preds = %while.body
  %key_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 4
  %12 = load i64, i64* %key_size, align 8, !tbaa !253
  %cmp6 = icmp eq i64 %12, %conv
  br i1 %cmp6, label %land.lhs.true7, label %if.end73

land.lhs.true7:                                   ; preds = %land.lhs.true
  %key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 5
  %13 = load i8*, i8** %key, align 8, !tbaa !258
  %call9 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m(i8* %13, i8* %cache_key, i64 %conv) #15
  br i1 %call9, label %land.lhs.true10, label %if.end73

land.lhs.true10:                                  ; preds = %land.lhs.true7
  %computed_bounds11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 10
  %14 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds11, align 8, !tbaa !257
  %call12 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %computed_bounds, %struct.halide_dimension_t* %14) #15
  br i1 %call12, label %land.lhs.true13, label %if.end73

land.lhs.true13:                                  ; preds = %land.lhs.true10
  %tuple_count14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 8
  %15 = load i32, i32* %tuple_count14, align 8, !tbaa !232
  %cmp15 = icmp eq i32 %15, %tuple_count
  br i1 %cmp15, label %if.then23, label %if.end73

if.then23:                                        ; preds = %land.lhs.true13, %for.cond.cleanup.us
  %.us-phi = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %entry3.0222.us, %for.cond.cleanup.us ], [ %entry3.0222, %land.lhs.true13 ]
  %16 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !14
  %cmp24.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, %16
  br i1 %cmp24.not, label %if.end57, label %do.body

do.body:                                          ; preds = %if.then23
  %more_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, i64 0, i32 1
  %17 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !268
  %cmp26.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %17, null
  br i1 %cmp26.not, label %if.then27, label %do.end

if.then27:                                        ; preds = %do.body
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([129 x i8], [129 x i8]* @.str.3.43, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %do.end

do.end:                                           ; preds = %if.then27, %do.body
  %less_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, i64 0, i32 2
  %18 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent, align 8, !tbaa !252
  %cmp28.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %18, null
  br i1 %cmp28.not, label %do.body33, label %if.then29

if.then29:                                        ; preds = %do.end
  %19 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !268
  %more_recent32 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %18, i64 0, i32 1
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %19, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent32, align 8, !tbaa !268
  %.pr = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !268
  br label %do.body41

do.body33:                                        ; preds = %do.end
  %20 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !14
  %cmp34 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %20, %.us-phi
  br i1 %cmp34, label %do.end38, label %if.then35

if.then35:                                        ; preds = %do.body33
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @.str.4.44, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %do.end38

do.end38:                                         ; preds = %if.then35, %do.body33
  %21 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !268
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %21, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !14
  br label %do.body41

do.body41:                                        ; preds = %do.end38, %if.then29
  %22 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %.pr, %if.then29 ], [ %21, %do.end38 ]
  %cmp43.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %22, null
  br i1 %cmp43.not, label %if.then44, label %do.end47

if.then44:                                        ; preds = %do.body41
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([129 x i8], [129 x i8]* @.str.5.45, i64 0, i64 0)) #14
  tail call void @abort() #14
  %.pre = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !268
  br label %do.end47

do.end47:                                         ; preds = %if.then44, %do.body41
  %23 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %.pre, %if.then44 ], [ %22, %do.body41 ]
  %24 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent, align 8, !tbaa !252
  %less_recent50 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %23, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %24, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent50, align 8, !tbaa !252
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !268
  %25 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !14
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %25, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent, align 8, !tbaa !252
  %cmp53.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %25, null
  br i1 %cmp53.not, label %if.end56, label %if.then54

if.then54:                                        ; preds = %do.end47
  %more_recent55 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %25, i64 0, i32 1
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent55, align 8, !tbaa !268
  br label %if.end56

if.end56:                                         ; preds = %if.then54, %do.end47
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !14
  br label %if.end57

if.end57:                                         ; preds = %if.end56, %if.then23
  br i1 %cmp16215, label %for.body62.lr.ph, label %cleanup119.loopexit223

for.body62.lr.ph:                                 ; preds = %if.end57
  %buf66 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, i64 0, i32 11
  %wide.trip.count230 = zext i32 %tuple_count to i64
  br label %for.body62

for.body62:                                       ; preds = %for.body62, %for.body62.lr.ph
  %indvars.iv228 = phi i64 [ 0, %for.body62.lr.ph ], [ %indvars.iv.next229, %for.body62 ]
  %arrayidx65 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv228
  %26 = bitcast %struct.halide_buffer_t** %arrayidx65 to i8**
  %27 = load i8*, i8** %26, align 8, !tbaa !14
  %28 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf66, align 8, !tbaa !234
  %arrayidx68 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %28, i64 %indvars.iv228
  %29 = bitcast %struct.halide_buffer_t* %arrayidx68 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(56) %27, i8* nonnull align 8 dereferenceable(56) %29, i64 56, i1 false), !tbaa.struct !264
  %indvars.iv.next229 = add nuw nsw i64 %indvars.iv228, 1
  %exitcond231.not = icmp eq i64 %indvars.iv.next229, %wide.trip.count230
  br i1 %exitcond231.not, label %cleanup119.loopexit223, label %for.body62, !llvm.loop !278

if.end73:                                         ; preds = %land.lhs.true13, %land.lhs.true10, %land.lhs.true7, %land.lhs.true, %while.body
  %next = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 0
  %entry3.0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next, align 8, !tbaa !14
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0, null
  br i1 %cmp.not, label %for.cond75.preheader, label %while.body, !llvm.loop !277

for.body78:                                       ; preds = %for.inc114, %for.body78.preheader
  %indvars.iv = phi i64 [ 0, %for.body78.preheader ], [ %indvars.iv.next, %for.inc114 ]
  %arrayidx81 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv
  %30 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx81, align 8, !tbaa !14
  %dimensions.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %30, i64 0, i32 5
  %31 = load i32, i32* %dimensions.i.i, align 4, !tbaa !183
  %cmp19.i.i = icmp sgt i32 %31, 0
  br i1 %cmp19.i.i, label %for.body.lr.ph.i.i, label %for.body78._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge

for.body78._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge: ; preds = %for.body78
  %sub.i.0 = sub nsw i64 1, 0
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.lr.ph.i.i:                               ; preds = %for.body78
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %30, i64 0, i32 6
  %32 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8, !tbaa !184
  %wide.trip.count.i.i = zext i32 %31 to i64
  %min.iters.check38 = icmp ult i32 %31, 3
  br i1 %min.iters.check38, label %for.body.i.i.preheader, label %vector.ph39

vector.ph39:                                      ; preds = %for.body.lr.ph.i.i
  %n.vec41 = and i64 %wide.trip.count.i.i, 4294967294
  br label %vector.body37

vector.body37:                                    ; preds = %pred.load.continue53, %vector.ph39
  %index42 = phi i64 [ 0, %vector.ph39 ], [ %index.next43, %pred.load.continue53 ]
  %vec.phi48 = phi i64 [ 0, %vector.ph39 ], [ %predphi54, %pred.load.continue53 ]
  %vec.phi49 = phi i64 [ 0, %vector.ph39 ], [ %predphi55, %pred.load.continue53 ]
  %induction47 = or i64 %index42, 1
  %33 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %32, i64 %index42, i32 2
  %34 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %32, i64 %induction47, i32 2
  %35 = load i32, i32* %33, align 4, !tbaa !185
  %36 = load i32, i32* %34, align 4, !tbaa !185
  %37 = icmp sgt i32 %35, 0
  %38 = icmp sgt i32 %36, 0
  %39 = zext i32 %35 to i64
  %40 = zext i32 %36 to i64
  br i1 %37, label %pred.load.if50, label %pred.load.continue51

pred.load.if50:                                   ; preds = %vector.body37
  %41 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %32, i64 %index42, i32 1
  %42 = load i32, i32* %41, align 4, !tbaa !189
  br label %pred.load.continue51

pred.load.continue51:                             ; preds = %pred.load.if50, %vector.body37
  %43 = phi i32 [ poison, %vector.body37 ], [ %42, %pred.load.if50 ]
  br i1 %38, label %pred.load.if52, label %pred.load.continue53

pred.load.if52:                                   ; preds = %pred.load.continue51
  %44 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %32, i64 %induction47, i32 1
  %45 = load i32, i32* %44, align 4, !tbaa !189
  br label %pred.load.continue53

pred.load.continue53:                             ; preds = %pred.load.if52, %pred.load.continue51
  %46 = phi i32 [ poison, %pred.load.continue51 ], [ %45, %pred.load.if52 ]
  %47 = add nsw i32 %43, -1
  %48 = add nsw i32 %46, -1
  %49 = sext i32 %47 to i64
  %50 = sext i32 %48 to i64
  %51 = mul nsw i64 %49, %39
  %52 = mul nsw i64 %50, %40
  %53 = select i1 %37, i64 %51, i64 0
  %predphi54 = add i64 %vec.phi48, %53
  %54 = select i1 %38, i64 %52, i64 0
  %predphi55 = add i64 %vec.phi49, %54
  %index.next43 = add i64 %index42, 2
  %55 = icmp eq i64 %index.next43, %n.vec41
  br i1 %55, label %middle.block35, label %vector.body37, !llvm.loop !279

middle.block35:                                   ; preds = %pred.load.continue53
  %bin.rdx56 = add i64 %predphi55, %predphi54
  %cmp.n45 = icmp eq i64 %n.vec41, %wide.trip.count.i.i
  br i1 %cmp.n45, label %for.body.i13.i.preheader, label %for.body.i.i.preheader

for.body.i.i.preheader:                           ; preds = %for.body.lr.ph.i.i, %middle.block35
  %indvars.iv.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %n.vec41, %middle.block35 ]
  %index.021.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %bin.rdx56, %middle.block35 ]
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.body.i.i.preheader, %if.end.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %if.end.i.i ], [ %indvars.iv.i.i.ph, %for.body.i.i.preheader ]
  %index.021.i.i = phi i64 [ %index.1.i.i, %if.end.i.i ], [ %index.021.i.i.ph, %for.body.i.i.preheader ]
  %stride2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %32, i64 %indvars.iv.i.i, i32 2
  %56 = load i32, i32* %stride2.i.i, align 4, !tbaa !185
  %cmp3.i.i = icmp sgt i32 %56, 0
  br i1 %cmp3.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %conv18.i.i = zext i32 %56 to i64
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %32, i64 %indvars.iv.i.i, i32 1
  %57 = load i32, i32* %extent.i.i, align 4, !tbaa !189
  %sub.i.i = add nsw i32 %57, -1
  %conv7.i.i = sext i32 %sub.i.i to i64
  %mul.i.i = mul nsw i64 %conv7.i.i, %conv18.i.i
  %add.i.i = add nsw i64 %mul.i.i, %index.021.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i64 [ %add.i.i, %if.then.i.i ], [ %index.021.i.i, %for.body.i.i ]
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %exitcond.not.i.i = icmp eq i64 %indvars.iv.next.i.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i.i, label %for.body.i13.i.preheader, label %for.body.i.i, !llvm.loop !280

for.body.i13.i.preheader:                         ; preds = %if.end.i.i, %middle.block35
  %index.1.i.i.lcssa = phi i64 [ %bin.rdx56, %middle.block35 ], [ %index.1.i.i, %if.end.i.i ]
  %min.iters.check = icmp ult i32 %31, 3
  br i1 %min.iters.check, label %for.body.i13.i.preheader58, label %vector.ph

vector.ph:                                        ; preds = %for.body.i13.i.preheader
  %n.vec = and i64 %wide.trip.count.i.i, 4294967294
  br label %vector.body

vector.body:                                      ; preds = %pred.load.continue33, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %pred.load.continue33 ]
  %vec.phi = phi i64 [ 0, %vector.ph ], [ %predphi, %pred.load.continue33 ]
  %vec.phi31 = phi i64 [ 0, %vector.ph ], [ %predphi34, %pred.load.continue33 ]
  %induction30 = or i64 %index, 1
  %58 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %32, i64 %index, i32 2
  %59 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %32, i64 %induction30, i32 2
  %60 = load i32, i32* %58, align 4, !tbaa !185
  %61 = load i32, i32* %59, align 4, !tbaa !185
  %62 = icmp slt i32 %60, 0
  %63 = icmp slt i32 %61, 0
  %64 = sext i32 %60 to i64
  %65 = sext i32 %61 to i64
  br i1 %62, label %pred.load.if, label %pred.load.continue

pred.load.if:                                     ; preds = %vector.body
  %66 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %32, i64 %index, i32 1
  %67 = load i32, i32* %66, align 4, !tbaa !189
  br label %pred.load.continue

pred.load.continue:                               ; preds = %pred.load.if, %vector.body
  %68 = phi i32 [ poison, %vector.body ], [ %67, %pred.load.if ]
  br i1 %63, label %pred.load.if32, label %pred.load.continue33

pred.load.if32:                                   ; preds = %pred.load.continue
  %69 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %32, i64 %induction30, i32 1
  %70 = load i32, i32* %69, align 4, !tbaa !189
  br label %pred.load.continue33

pred.load.continue33:                             ; preds = %pred.load.if32, %pred.load.continue
  %71 = phi i32 [ poison, %pred.load.continue ], [ %70, %pred.load.if32 ]
  %72 = add nsw i32 %68, -1
  %73 = add nsw i32 %71, -1
  %74 = sext i32 %72 to i64
  %75 = sext i32 %73 to i64
  %76 = mul nsw i64 %74, %64
  %77 = mul nsw i64 %75, %65
  %78 = select i1 %62, i64 %76, i64 0
  %predphi = add i64 %vec.phi, %78
  %79 = select i1 %63, i64 %77, i64 0
  %predphi34 = add i64 %vec.phi31, %79
  %index.next = add i64 %index, 2
  %80 = icmp eq i64 %index.next, %n.vec
  br i1 %80, label %middle.block, label %vector.body, !llvm.loop !281

middle.block:                                     ; preds = %pred.load.continue33
  %bin.rdx = add i64 %predphi34, %predphi
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count.i.i
  br i1 %cmp.n, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i.preheader58

for.body.i13.i.preheader58:                       ; preds = %for.body.i13.i.preheader, %middle.block
  %indvars.iv.i10.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %n.vec, %middle.block ]
  %index.018.i.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %bin.rdx, %middle.block ]
  br label %for.body.i13.i

for.body.i13.i:                                   ; preds = %for.body.i13.i.preheader58, %if.end.i24.i
  %indvars.iv.i10.i = phi i64 [ %indvars.iv.next.i22.i, %if.end.i24.i ], [ %indvars.iv.i10.i.ph, %for.body.i13.i.preheader58 ]
  %index.018.i.i = phi i64 [ %index.1.i21.i, %if.end.i24.i ], [ %index.018.i.i.ph, %for.body.i13.i.preheader58 ]
  %stride2.i11.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %32, i64 %indvars.iv.i10.i, i32 2
  %81 = load i32, i32* %stride2.i11.i, align 4, !tbaa !185
  %cmp3.i12.i = icmp slt i32 %81, 0
  br i1 %cmp3.i12.i, label %if.then.i20.i, label %if.end.i24.i

if.then.i20.i:                                    ; preds = %for.body.i13.i
  %conv.i14.i = sext i32 %81 to i64
  %extent.i15.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %32, i64 %indvars.iv.i10.i, i32 1
  %82 = load i32, i32* %extent.i15.i, align 4, !tbaa !189
  %sub.i16.i = add nsw i32 %82, -1
  %conv7.i17.i = sext i32 %sub.i16.i to i64
  %mul.i18.i = mul nsw i64 %conv7.i17.i, %conv.i14.i
  %add.i19.i = add nsw i64 %mul.i18.i, %index.018.i.i
  br label %if.end.i24.i

if.end.i24.i:                                     ; preds = %if.then.i20.i, %for.body.i13.i
  %index.1.i21.i = phi i64 [ %add.i19.i, %if.then.i20.i ], [ %index.018.i.i, %for.body.i13.i ]
  %indvars.iv.next.i22.i = add nuw nsw i64 %indvars.iv.i10.i, 1
  %exitcond.not.i23.i = icmp eq i64 %indvars.iv.next.i22.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i23.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i, !llvm.loop !282

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %if.end.i24.i, %middle.block
  %index.1.i21.i.lcssa = phi i64 [ %bin.rdx, %middle.block ], [ %index.1.i21.i, %if.end.i24.i ]
  %add8.i.i = add nsw i64 %index.1.i.i.lcssa, 1
  %sub.i.1 = sub nsw i64 %add8.i.i, %index.1.i21.i.lcssa
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %for.body78._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit
  %add8.i27.i = phi i64 [ 1, %for.body78._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge ], [ %add8.i.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %sub.i.phi = phi i64 [ %sub.i.0, %for.body78._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge ], [ %sub.i.1, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %bits.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %30, i64 0, i32 4, i32 1
  %83 = load i8, i8* %bits.i.i, align 1, !tbaa !144
  %conv.i.i = zext i8 %83 to i64
  %add.i4.i = add nuw nsw i64 %conv.i.i, 7
  %div.i.i = lshr i64 %add.i4.i, 3
  %mul.i = mul i64 %div.i.i, %sub.i.phi
  %add84 = add i64 %mul.i, 32
  %call85 = tail call i8* @halide_malloc(i8* %user_context, i64 %add84) #14
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %30, i64 0, i32 2
  store i8* %call85, i8** %host, align 8, !tbaa !180
  %cmp87 = icmp eq i8* %call85, null
  br i1 %cmp87, label %for.cond89.preheader, label %for.inc114

for.cond89.preheader:                             ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  %cmp90208.not = icmp eq i64 %indvars.iv, 0
  br i1 %cmp90208.not, label %cleanup119, label %for.body92

for.body92:                                       ; preds = %for.cond89.preheader, %for.body92
  %indvars.iv224 = phi i64 [ %indvars.iv.next225, %for.body92 ], [ %indvars.iv, %for.cond89.preheader ]
  %sub = add nuw nsw i64 %indvars.iv224, 4294967295
  %84 = and i64 %sub, 4294967295
  %arrayidx94 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %84
  %85 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx94, align 8, !tbaa !14
  %host95 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %85, i64 0, i32 2
  %86 = load i8*, i8** %host95, align 8, !tbaa !180
  %call96 = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %86) #15
  %87 = bitcast %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call96 to i8*
  tail call void @halide_free(i8* %user_context, i8* %87) #14
  %88 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx94, align 8, !tbaa !14
  %host100 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %88, i64 0, i32 2
  store i8* null, i8** %host100, align 8, !tbaa !180
  %89 = icmp sgt i64 %indvars.iv224, 1
  %indvars.iv.next225 = add nsw i64 %indvars.iv224, -1
  br i1 %89, label %for.body92, label %cleanup119, !llvm.loop !283

for.inc114:                                       ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  %add.ptr = getelementptr inbounds i8, i8* %call85, i64 32
  store i8* %add.ptr, i8** %host, align 8, !tbaa !180
  %call108 = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* nonnull %add.ptr) #15
  %hash109 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call108, i64 0, i32 1
  store i32 %call, i32* %hash109, align 8, !tbaa !284
  %entry110 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call108, i64 0, i32 0
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %entry110, align 8, !tbaa !286
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %cleanup119, label %for.body78, !llvm.loop !287

cleanup119.loopexit223:                           ; preds = %for.body62, %if.end57
  %in_use_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, i64 0, i32 7
  %90 = load i32, i32* %in_use_count, align 4, !tbaa !255
  %add = add i32 %90, %tuple_count
  store i32 %add, i32* %in_use_count, align 4, !tbaa !255
  br label %cleanup119

cleanup119:                                       ; preds = %for.inc114, %for.body92, %cleanup119.loopexit223, %for.cond89.preheader, %for.cond75.preheader
  %retval.6 = phi i32 [ 1, %for.cond75.preheader ], [ 0, %cleanup119.loopexit223 ], [ -1, %for.cond89.preheader ], [ -1, %for.body92 ], [ 1, %for.inc114 ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #14
  ret i32 %retval.6
}

; Function Attrs: nounwind
define weak i32 @halide_memoization_cache_store(i8* %user_context, i8* %cache_key, i32 %size, %struct.halide_buffer_t* %computed_bounds, i32 %tuple_count, %struct.halide_buffer_t** %tuple_buffers, i1 zeroext %has_eviction_key, i64 %eviction_key) local_unnamed_addr #4 {
entry:
  %0 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, align 8, !tbaa !14
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %0, i64 0, i32 2
  %1 = load i8*, i8** %host, align 8, !tbaa !180
  %call = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %1) #15
  %hash = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call, i64 0, i32 1
  %2 = load i32, i32* %hash, align 8, !tbaa !284
  %3 = and i32 %2, 255
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #14
  %idxprom = zext i32 %3 to i64
  %arrayidx7 = getelementptr inbounds [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 0, i64 %idxprom
  %entry6.0228 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx7, align 8, !tbaa !14
  %cmp.not229 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0228, null
  br i1 %cmp.not229, label %for.cond61.preheader, label %while.body.lr.ph

while.body.lr.ph:                                 ; preds = %entry
  %conv10 = sext i32 %size to i64
  %cmp22221 = icmp sgt i32 %tuple_count, 0
  br i1 %cmp22221, label %while.body.us.preheader, label %while.body

while.body.us.preheader:                          ; preds = %while.body.lr.ph
  %4 = zext i32 %tuple_count to i64
  br label %while.body.us

while.body.us:                                    ; preds = %if.end59.us, %while.body.us.preheader
  %entry6.0230.us = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %entry6.0.us, %if.end59.us ], [ %entry6.0228, %while.body.us.preheader ]
  %hash8.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 6
  %5 = load i32, i32* %hash8.us, align 8, !tbaa !254
  %cmp9.us = icmp eq i32 %5, %2
  br i1 %cmp9.us, label %land.lhs.true.us, label %if.end59.us

land.lhs.true.us:                                 ; preds = %while.body.us
  %key_size.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 4
  %6 = load i64, i64* %key_size.us, align 8, !tbaa !253
  %cmp11.us = icmp eq i64 %6, %conv10
  br i1 %cmp11.us, label %land.lhs.true12.us, label %if.end59.us

land.lhs.true12.us:                               ; preds = %land.lhs.true.us
  %key.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 5
  %7 = load i8*, i8** %key.us, align 8, !tbaa !258
  %call14.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m(i8* %7, i8* %cache_key, i64 %conv10) #15
  br i1 %call14.us, label %land.lhs.true15.us, label %if.end59.us

land.lhs.true15.us:                               ; preds = %land.lhs.true12.us
  %computed_bounds16.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 10
  %8 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds16.us, align 8, !tbaa !257
  %call17.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %computed_bounds, %struct.halide_dimension_t* %8) #15
  br i1 %call17.us, label %land.lhs.true18.us, label %if.end59.us

land.lhs.true18.us:                               ; preds = %land.lhs.true15.us
  %tuple_count19.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 8
  %9 = load i32, i32* %tuple_count19.us, align 8, !tbaa !232
  %cmp20.us = icmp eq i32 %9, %tuple_count
  br i1 %cmp20.us, label %for.body.lr.ph.us, label %if.end59.us

for.cond.cleanup.us:                              ; preds = %for.body.us
  br i1 %call30.us, label %do.body.us, label %if.end59.us

do.body.us:                                       ; preds = %for.cond.cleanup.us
  %10 = and i8 %spec.select.us, 1
  %tobool41.not.us = icmp eq i8 %10, 0
  br i1 %tobool41.not.us, label %if.then42.us, label %for.body48.us.preheader

for.body48.us.preheader:                          ; preds = %if.then42.us, %do.body.us
  %indvars.iv.next245.1 = add nuw nsw i64 0, 1
  %arrayidx50.us.1 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 0
  br label %for.body48.us

if.then42.us:                                     ; preds = %do.body.us
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([122 x i8], [122 x i8]* @.str.9.46, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %for.body48.us.preheader

if.end59.us:                                      ; preds = %for.cond.cleanup.us, %land.lhs.true18.us, %land.lhs.true15.us, %land.lhs.true12.us, %land.lhs.true.us, %while.body.us
  %next.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 0
  %entry6.0.us = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next.us, align 8, !tbaa !14
  %cmp.not.us = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0.us, null
  br i1 %cmp.not.us, label %for.cond61.preheader, label %while.body.us, !llvm.loop !288

for.body48.us:                                    ; preds = %for.body48.us.for.body48.us_crit_edge, %for.body48.us.preheader
  %arrayidx50.us.phi = phi %struct.halide_buffer_t** [ %arrayidx50.us.0, %for.body48.us.for.body48.us_crit_edge ], [ %arrayidx50.us.1, %for.body48.us.preheader ]
  %indvars.iv.next245.phi = phi i64 [ %indvars.iv.next245.0, %for.body48.us.for.body48.us_crit_edge ], [ %indvars.iv.next245.1, %for.body48.us.preheader ]
  %11 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx50.us.phi, align 8, !tbaa !14
  %host51.us = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %11, i64 0, i32 2
  %12 = load i8*, i8** %host51.us, align 8, !tbaa !180
  %call52.us = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %12) #15
  %entry53.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call52.us, i64 0, i32 0
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %entry53.us, align 8, !tbaa !286
  %exitcond247.not = icmp eq i64 %indvars.iv.next245.phi, %4
  br i1 %exitcond247.not, label %cleanup132, label %for.body48.us.for.body48.us_crit_edge, !llvm.loop !289

for.body48.us.for.body48.us_crit_edge:            ; preds = %for.body48.us
  %indvars.iv.next245.0 = add nuw nsw i64 %indvars.iv.next245.phi, 1
  %arrayidx50.us.0 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv.next245.phi
  br label %for.body48.us

for.body.us:                                      ; preds = %for.body.lr.ph.us, %for.body.us
  %13 = phi %struct.halide_buffer_t* [ %.pre, %for.body.lr.ph.us ], [ %16, %for.body.us ]
  %indvars.iv242 = phi i64 [ 0, %for.body.lr.ph.us ], [ %indvars.iv.next243, %for.body.us ]
  %no_host_pointers_equal.0222.us = phi i8 [ 1, %for.body.lr.ph.us ], [ %spec.select.us, %for.body.us ]
  %arrayidx24.us = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv242
  %14 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx24.us, align 8, !tbaa !14
  %dim.us = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %13, i64 %indvars.iv242, i32 6
  %15 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.us, align 8, !tbaa !184
  %call30.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %14, %struct.halide_dimension_t* %15) #15
  %16 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf27.us, align 8, !tbaa !234
  %host35.us = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %16, i64 %indvars.iv242, i32 2
  %17 = load i8*, i8** %host35.us, align 8, !tbaa !180
  %host36.us = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %14, i64 0, i32 2
  %18 = load i8*, i8** %host36.us, align 8, !tbaa !180
  %cmp37.us = icmp eq i8* %17, %18
  %spec.select.us = select i1 %cmp37.us, i8 0, i8 %no_host_pointers_equal.0222.us
  %indvars.iv.next243 = add nuw nsw i64 %indvars.iv242, 1
  %cmp22.us = icmp ult i64 %indvars.iv.next243, %4
  %19 = and i1 %cmp22.us, %call30.us
  br i1 %19, label %for.body.us, label %for.cond.cleanup.us, !llvm.loop !290

for.body.lr.ph.us:                                ; preds = %land.lhs.true18.us
  %buf27.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 11
  %.pre = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf27.us, align 8, !tbaa !234
  br label %for.body.us

for.cond61.preheader:                             ; preds = %if.end59, %if.end59.us, %entry
  %cmp62218 = icmp sgt i32 %tuple_count, 0
  br i1 %cmp62218, label %for.body64.preheader, label %for.cond.cleanup63

for.body64.preheader:                             ; preds = %for.cond61.preheader
  %wide.trip.count240 = zext i32 %tuple_count to i64
  br label %for.body64

while.body:                                       ; preds = %while.body.lr.ph, %if.end59
  %entry6.0230 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %entry6.0, %if.end59 ], [ %entry6.0228, %while.body.lr.ph ]
  %hash8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 6
  %20 = load i32, i32* %hash8, align 8, !tbaa !254
  %cmp9 = icmp eq i32 %20, %2
  br i1 %cmp9, label %land.lhs.true, label %if.end59

land.lhs.true:                                    ; preds = %while.body
  %key_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 4
  %21 = load i64, i64* %key_size, align 8, !tbaa !253
  %cmp11 = icmp eq i64 %21, %conv10
  br i1 %cmp11, label %land.lhs.true12, label %if.end59

land.lhs.true12:                                  ; preds = %land.lhs.true
  %key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 5
  %22 = load i8*, i8** %key, align 8, !tbaa !258
  %call14 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m(i8* %22, i8* %cache_key, i64 %conv10) #15
  br i1 %call14, label %land.lhs.true15, label %if.end59

land.lhs.true15:                                  ; preds = %land.lhs.true12
  %computed_bounds16 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 10
  %23 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds16, align 8, !tbaa !257
  %call17 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %computed_bounds, %struct.halide_dimension_t* %23) #15
  br i1 %call17, label %land.lhs.true18, label %if.end59

land.lhs.true18:                                  ; preds = %land.lhs.true15
  %tuple_count19 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 8
  %24 = load i32, i32* %tuple_count19, align 8, !tbaa !232
  %cmp20 = icmp eq i32 %24, %tuple_count
  br i1 %cmp20, label %cleanup132, label %if.end59

if.end59:                                         ; preds = %land.lhs.true18, %land.lhs.true15, %land.lhs.true12, %land.lhs.true, %while.body
  %next = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 0
  %entry6.0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next, align 8, !tbaa !14
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0, null
  br i1 %cmp.not, label %for.cond61.preheader, label %while.body, !llvm.loop !288

for.cond.cleanup63:                               ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit, %for.cond61.preheader
  %added_size.0.lcssa = phi i64 [ 0, %for.cond61.preheader ], [ %add, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ]
  %25 = load i64, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !22
  %add73 = add i64 %25, %added_size.0.lcssa
  store i64 %add73, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !22
  tail call void @_ZN6Halide7Runtime8Internal11prune_cacheEv() #15
  %call74 = tail call i8* @halide_malloc(i8* null, i64 96) #14
  %tobool75.not = icmp eq i8* %call74, null
  br i1 %tobool75.not, label %if.then83, label %if.then76

for.body64:                                       ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit, %for.body64.preheader
  %indvars.iv238 = phi i64 [ 0, %for.body64.preheader ], [ %indvars.iv.next239, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ]
  %added_size.0219 = phi i64 [ 0, %for.body64.preheader ], [ %add, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ]
  %arrayidx67 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv238
  %26 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx67, align 8, !tbaa !14
  %dimensions.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %26, i64 0, i32 5
  %27 = load i32, i32* %dimensions.i.i, align 4, !tbaa !183
  %cmp19.i.i = icmp sgt i32 %27, 0
  br i1 %cmp19.i.i, label %for.body.lr.ph.i.i, label %for.body64._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge

for.body64._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge: ; preds = %for.body64
  %sub.i.0 = sub nsw i64 1, 0
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.lr.ph.i.i:                               ; preds = %for.body64
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %26, i64 0, i32 6
  %28 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8, !tbaa !184
  %wide.trip.count.i.i = zext i32 %27 to i64
  %min.iters.check24 = icmp ult i32 %27, 3
  br i1 %min.iters.check24, label %for.body.i.i.preheader, label %vector.ph25

vector.ph25:                                      ; preds = %for.body.lr.ph.i.i
  %n.vec27 = and i64 %wide.trip.count.i.i, 4294967294
  br label %vector.body23

vector.body23:                                    ; preds = %pred.load.continue39, %vector.ph25
  %index28 = phi i64 [ 0, %vector.ph25 ], [ %index.next29, %pred.load.continue39 ]
  %vec.phi34 = phi i64 [ 0, %vector.ph25 ], [ %predphi40, %pred.load.continue39 ]
  %vec.phi35 = phi i64 [ 0, %vector.ph25 ], [ %predphi41, %pred.load.continue39 ]
  %induction33 = or i64 %index28, 1
  %29 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %index28, i32 2
  %30 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %induction33, i32 2
  %31 = load i32, i32* %29, align 4, !tbaa !185
  %32 = load i32, i32* %30, align 4, !tbaa !185
  %33 = icmp sgt i32 %31, 0
  %34 = icmp sgt i32 %32, 0
  %35 = zext i32 %31 to i64
  %36 = zext i32 %32 to i64
  br i1 %33, label %pred.load.if36, label %pred.load.continue37

pred.load.if36:                                   ; preds = %vector.body23
  %37 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %index28, i32 1
  %38 = load i32, i32* %37, align 4, !tbaa !189
  br label %pred.load.continue37

pred.load.continue37:                             ; preds = %pred.load.if36, %vector.body23
  %39 = phi i32 [ poison, %vector.body23 ], [ %38, %pred.load.if36 ]
  br i1 %34, label %pred.load.if38, label %pred.load.continue39

pred.load.if38:                                   ; preds = %pred.load.continue37
  %40 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %induction33, i32 1
  %41 = load i32, i32* %40, align 4, !tbaa !189
  br label %pred.load.continue39

pred.load.continue39:                             ; preds = %pred.load.if38, %pred.load.continue37
  %42 = phi i32 [ poison, %pred.load.continue37 ], [ %41, %pred.load.if38 ]
  %43 = add nsw i32 %39, -1
  %44 = add nsw i32 %42, -1
  %45 = sext i32 %43 to i64
  %46 = sext i32 %44 to i64
  %47 = mul nsw i64 %45, %35
  %48 = mul nsw i64 %46, %36
  %49 = select i1 %33, i64 %47, i64 0
  %predphi40 = add i64 %vec.phi34, %49
  %50 = select i1 %34, i64 %48, i64 0
  %predphi41 = add i64 %vec.phi35, %50
  %index.next29 = add i64 %index28, 2
  %51 = icmp eq i64 %index.next29, %n.vec27
  br i1 %51, label %middle.block21, label %vector.body23, !llvm.loop !291

middle.block21:                                   ; preds = %pred.load.continue39
  %bin.rdx42 = add i64 %predphi41, %predphi40
  %cmp.n31 = icmp eq i64 %n.vec27, %wide.trip.count.i.i
  br i1 %cmp.n31, label %for.body.i13.i.preheader, label %for.body.i.i.preheader

for.body.i.i.preheader:                           ; preds = %for.body.lr.ph.i.i, %middle.block21
  %indvars.iv.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %n.vec27, %middle.block21 ]
  %index.021.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %bin.rdx42, %middle.block21 ]
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.body.i.i.preheader, %if.end.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %if.end.i.i ], [ %indvars.iv.i.i.ph, %for.body.i.i.preheader ]
  %index.021.i.i = phi i64 [ %index.1.i.i, %if.end.i.i ], [ %index.021.i.i.ph, %for.body.i.i.preheader ]
  %stride2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %indvars.iv.i.i, i32 2
  %52 = load i32, i32* %stride2.i.i, align 4, !tbaa !185
  %cmp3.i.i = icmp sgt i32 %52, 0
  br i1 %cmp3.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %conv18.i.i = zext i32 %52 to i64
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %indvars.iv.i.i, i32 1
  %53 = load i32, i32* %extent.i.i, align 4, !tbaa !189
  %sub.i.i = add nsw i32 %53, -1
  %conv7.i.i = sext i32 %sub.i.i to i64
  %mul.i.i = mul nsw i64 %conv7.i.i, %conv18.i.i
  %add.i.i = add nsw i64 %mul.i.i, %index.021.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i64 [ %add.i.i, %if.then.i.i ], [ %index.021.i.i, %for.body.i.i ]
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %exitcond.not.i.i = icmp eq i64 %indvars.iv.next.i.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i.i, label %for.body.i13.i.preheader, label %for.body.i.i, !llvm.loop !292

for.body.i13.i.preheader:                         ; preds = %if.end.i.i, %middle.block21
  %index.1.i.i.lcssa = phi i64 [ %bin.rdx42, %middle.block21 ], [ %index.1.i.i, %if.end.i.i ]
  %min.iters.check = icmp ult i32 %27, 3
  br i1 %min.iters.check, label %for.body.i13.i.preheader44, label %vector.ph

vector.ph:                                        ; preds = %for.body.i13.i.preheader
  %n.vec = and i64 %wide.trip.count.i.i, 4294967294
  br label %vector.body

vector.body:                                      ; preds = %pred.load.continue19, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %pred.load.continue19 ]
  %vec.phi = phi i64 [ 0, %vector.ph ], [ %predphi, %pred.load.continue19 ]
  %vec.phi17 = phi i64 [ 0, %vector.ph ], [ %predphi20, %pred.load.continue19 ]
  %induction16 = or i64 %index, 1
  %54 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %index, i32 2
  %55 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %induction16, i32 2
  %56 = load i32, i32* %54, align 4, !tbaa !185
  %57 = load i32, i32* %55, align 4, !tbaa !185
  %58 = icmp slt i32 %56, 0
  %59 = icmp slt i32 %57, 0
  %60 = sext i32 %56 to i64
  %61 = sext i32 %57 to i64
  br i1 %58, label %pred.load.if, label %pred.load.continue

pred.load.if:                                     ; preds = %vector.body
  %62 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %index, i32 1
  %63 = load i32, i32* %62, align 4, !tbaa !189
  br label %pred.load.continue

pred.load.continue:                               ; preds = %pred.load.if, %vector.body
  %64 = phi i32 [ poison, %vector.body ], [ %63, %pred.load.if ]
  br i1 %59, label %pred.load.if18, label %pred.load.continue19

pred.load.if18:                                   ; preds = %pred.load.continue
  %65 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %induction16, i32 1
  %66 = load i32, i32* %65, align 4, !tbaa !189
  br label %pred.load.continue19

pred.load.continue19:                             ; preds = %pred.load.if18, %pred.load.continue
  %67 = phi i32 [ poison, %pred.load.continue ], [ %66, %pred.load.if18 ]
  %68 = add nsw i32 %64, -1
  %69 = add nsw i32 %67, -1
  %70 = sext i32 %68 to i64
  %71 = sext i32 %69 to i64
  %72 = mul nsw i64 %70, %60
  %73 = mul nsw i64 %71, %61
  %74 = select i1 %58, i64 %72, i64 0
  %predphi = add i64 %vec.phi, %74
  %75 = select i1 %59, i64 %73, i64 0
  %predphi20 = add i64 %vec.phi17, %75
  %index.next = add i64 %index, 2
  %76 = icmp eq i64 %index.next, %n.vec
  br i1 %76, label %middle.block, label %vector.body, !llvm.loop !293

middle.block:                                     ; preds = %pred.load.continue19
  %bin.rdx = add i64 %predphi20, %predphi
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count.i.i
  br i1 %cmp.n, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i.preheader44

for.body.i13.i.preheader44:                       ; preds = %for.body.i13.i.preheader, %middle.block
  %indvars.iv.i10.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %n.vec, %middle.block ]
  %index.018.i.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %bin.rdx, %middle.block ]
  br label %for.body.i13.i

for.body.i13.i:                                   ; preds = %for.body.i13.i.preheader44, %if.end.i24.i
  %indvars.iv.i10.i = phi i64 [ %indvars.iv.next.i22.i, %if.end.i24.i ], [ %indvars.iv.i10.i.ph, %for.body.i13.i.preheader44 ]
  %index.018.i.i = phi i64 [ %index.1.i21.i, %if.end.i24.i ], [ %index.018.i.i.ph, %for.body.i13.i.preheader44 ]
  %stride2.i11.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %indvars.iv.i10.i, i32 2
  %77 = load i32, i32* %stride2.i11.i, align 4, !tbaa !185
  %cmp3.i12.i = icmp slt i32 %77, 0
  br i1 %cmp3.i12.i, label %if.then.i20.i, label %if.end.i24.i

if.then.i20.i:                                    ; preds = %for.body.i13.i
  %conv.i14.i = sext i32 %77 to i64
  %extent.i15.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %indvars.iv.i10.i, i32 1
  %78 = load i32, i32* %extent.i15.i, align 4, !tbaa !189
  %sub.i16.i = add nsw i32 %78, -1
  %conv7.i17.i = sext i32 %sub.i16.i to i64
  %mul.i18.i = mul nsw i64 %conv7.i17.i, %conv.i14.i
  %add.i19.i = add nsw i64 %mul.i18.i, %index.018.i.i
  br label %if.end.i24.i

if.end.i24.i:                                     ; preds = %if.then.i20.i, %for.body.i13.i
  %index.1.i21.i = phi i64 [ %add.i19.i, %if.then.i20.i ], [ %index.018.i.i, %for.body.i13.i ]
  %indvars.iv.next.i22.i = add nuw nsw i64 %indvars.iv.i10.i, 1
  %exitcond.not.i23.i = icmp eq i64 %indvars.iv.next.i22.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i23.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i, !llvm.loop !294

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %if.end.i24.i, %middle.block
  %index.1.i21.i.lcssa = phi i64 [ %bin.rdx, %middle.block ], [ %index.1.i21.i, %if.end.i24.i ]
  %add8.i.i = add nsw i64 %index.1.i.i.lcssa, 1
  %sub.i.1 = sub nsw i64 %add8.i.i, %index.1.i21.i.lcssa
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %for.body64._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit
  %add8.i27.i = phi i64 [ 1, %for.body64._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge ], [ %add8.i.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %sub.i.phi = phi i64 [ %sub.i.0, %for.body64._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge ], [ %sub.i.1, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %bits.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %26, i64 0, i32 4, i32 1
  %79 = load i8, i8* %bits.i.i, align 1, !tbaa !144
  %conv.i.i = zext i8 %79 to i64
  %add.i4.i = add nuw nsw i64 %conv.i.i, 7
  %div.i.i = lshr i64 %add.i4.i, 3
  %mul.i = mul i64 %div.i.i, %sub.i.phi
  %add = add i64 %mul.i, %added_size.0219
  %indvars.iv.next239 = add nuw nsw i64 %indvars.iv238, 1
  %exitcond241.not = icmp eq i64 %indvars.iv.next239, %wide.trip.count240
  br i1 %exitcond241.not, label %for.cond.cleanup63, label %for.body64, !llvm.loop !295

if.then76:                                        ; preds = %for.cond.cleanup63
  %80 = bitcast i8* %call74 to %"struct.Halide::Runtime::Internal::CacheEntry"*
  %conv77 = sext i32 %size to i64
  %call79 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal10CacheEntry4initEPKhmjPK15halide_buffer_tiPPS5_by(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %80, i8* %cache_key, i64 %conv77, i32 %2, %struct.halide_buffer_t* %computed_bounds, i32 %tuple_count, %struct.halide_buffer_t** nonnull %tuple_buffers, i1 zeroext %has_eviction_key, i64 %eviction_key) #15
  br i1 %call79, label %if.end101, label %if.then83

if.then83:                                        ; preds = %if.then76, %for.cond.cleanup63
  %81 = load i64, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !22
  %sub = sub i64 %81, %added_size.0.lcssa
  store i64 %sub, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !22
  br i1 %cmp62218, label %for.body88.preheader, label %for.cond.cleanup87

for.body88.preheader:                             ; preds = %if.then83
  %wide.trip.count = zext i32 %tuple_count to i64
  %indvars.iv.next.0 = add nuw nsw i64 0, 1
  %arrayidx90.0 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 0
  br label %for.body88

for.cond.cleanup87:                               ; preds = %for.body88, %if.then83
  br i1 %tobool75.not, label %cleanup132, label %if.then99

for.body88:                                       ; preds = %for.body88.for.body88_crit_edge, %for.body88.preheader
  %arrayidx90.phi = phi %struct.halide_buffer_t** [ %arrayidx90.0, %for.body88.preheader ], [ %arrayidx90.1, %for.body88.for.body88_crit_edge ]
  %indvars.iv.next.phi = phi i64 [ %indvars.iv.next.0, %for.body88.preheader ], [ %indvars.iv.next.1, %for.body88.for.body88_crit_edge ]
  %82 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx90.phi, align 8, !tbaa !14
  %host91 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %82, i64 0, i32 2
  %83 = load i8*, i8** %host91, align 8, !tbaa !180
  %call92 = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %83) #15
  %entry93 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call92, i64 0, i32 0
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %entry93, align 8, !tbaa !286
  %exitcond.not = icmp eq i64 %indvars.iv.next.phi, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.cleanup87, label %for.body88.for.body88_crit_edge, !llvm.loop !296

for.body88.for.body88_crit_edge:                  ; preds = %for.body88
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv.next.phi, 1
  %arrayidx90.1 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv.next.phi
  br label %for.body88

if.then99:                                        ; preds = %for.cond.cleanup87
  tail call void @halide_free(i8* %user_context, i8* nonnull %call74) #14
  br label %cleanup132

if.end101:                                        ; preds = %if.then76
  %84 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx7, align 8, !tbaa !14
  %next104 = bitcast i8* %call74 to %"struct.Halide::Runtime::Internal::CacheEntry"**
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %84, %"struct.Halide::Runtime::Internal::CacheEntry"** %next104, align 8, !tbaa !229
  %85 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !14
  %less_recent = getelementptr inbounds i8, i8* %call74, i64 16
  %86 = bitcast i8* %less_recent to %"struct.Halide::Runtime::Internal::CacheEntry"**
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %85, %"struct.Halide::Runtime::Internal::CacheEntry"** %86, align 8, !tbaa !252
  %cmp105.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %85, null
  br i1 %cmp105.not, label %if.end107, label %if.then106

if.then106:                                       ; preds = %if.end101
  %more_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %85, i64 0, i32 1
  %87 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent to i8**
  store i8* %call74, i8** %87, align 8, !tbaa !268
  br label %if.end107

if.end107:                                        ; preds = %if.then106, %if.end101
  store i8* %call74, i8** bitcast (%"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE to i8**), align 8, !tbaa !14
  %88 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !14
  %cmp108 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %88, null
  br i1 %cmp108, label %if.then109, label %if.end110

if.then109:                                       ; preds = %if.end107
  store i8* %call74, i8** bitcast (%"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE to i8**), align 8, !tbaa !14
  br label %if.end110

if.end110:                                        ; preds = %if.then109, %if.end107
  %89 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx7 to i8**
  store i8* %call74, i8** %89, align 8, !tbaa !14
  %in_use_count = getelementptr inbounds i8, i8* %call74, i64 52
  %90 = bitcast i8* %in_use_count to i32*
  store i32 %tuple_count, i32* %90, align 4, !tbaa !255
  br i1 %cmp62218, label %for.body117.preheader, label %cleanup132

for.body117.preheader:                            ; preds = %if.end110
  %wide.trip.count236 = zext i32 %tuple_count to i64
  %indvars.iv.next235.0 = add nuw nsw i64 0, 1
  %arrayidx119.0 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 0
  br label %for.body117

for.body117:                                      ; preds = %for.body117.for.body117_crit_edge, %for.body117.preheader
  %arrayidx119.phi = phi %struct.halide_buffer_t** [ %arrayidx119.0, %for.body117.preheader ], [ %arrayidx119.1, %for.body117.for.body117_crit_edge ]
  %indvars.iv.next235.phi = phi i64 [ %indvars.iv.next235.0, %for.body117.preheader ], [ %indvars.iv.next235.1, %for.body117.for.body117_crit_edge ]
  %91 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx119.phi, align 8, !tbaa !14
  %host120 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %91, i64 0, i32 2
  %92 = load i8*, i8** %host120, align 8, !tbaa !180
  %call121 = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %92) #15
  %93 = bitcast %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call121 to i8**
  store i8* %call74, i8** %93, align 8, !tbaa !286
  %exitcond237.not = icmp eq i64 %indvars.iv.next235.phi, %wide.trip.count236
  br i1 %exitcond237.not, label %cleanup132, label %for.body117.for.body117_crit_edge, !llvm.loop !297

for.body117.for.body117_crit_edge:                ; preds = %for.body117
  %indvars.iv.next235.1 = add nuw nsw i64 %indvars.iv.next235.phi, 1
  %arrayidx119.1 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv.next235.phi
  br label %for.body117

cleanup132:                                       ; preds = %land.lhs.true18, %for.body48.us, %for.body117, %if.end110, %if.then99, %for.cond.cleanup87
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #14
  ret i32 0
}

; Function Attrs: nounwind
define weak void @halide_memoization_cache_release(i8* %user_context, i8* %host) local_unnamed_addr #4 {
entry:
  %call = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %host) #15
  %entry2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call, i64 0, i32 0
  %0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %entry2, align 8, !tbaa !286
  %cmp = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %0, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = bitcast %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call to i8*
  tail call void @halide_free(i8* %user_context, i8* %1) #14
  br label %if.end6

if.else:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #14
  %in_use_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %0, i64 0, i32 7
  %2 = load i32, i32* %in_use_count, align 4, !tbaa !255
  %cmp3.not = icmp eq i32 %2, 0
  br i1 %cmp3.not, label %if.then4, label %do.end

if.then4:                                         ; preds = %if.else
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([123 x i8], [123 x i8]* @.str.12.47, i64 0, i64 0)) #14
  tail call void @abort() #14
  %.pre = load i32, i32* %in_use_count, align 4, !tbaa !255
  br label %do.end

do.end:                                           ; preds = %if.then4, %if.else
  %3 = phi i32 [ %.pre, %if.then4 ], [ %2, %if.else ]
  %dec = add i32 %3, -1
  store i32 %dec, i32* %in_use_count, align 4, !tbaa !255
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #14
  br label %if.end6

if.end6:                                          ; preds = %do.end, %if.then
  ret void
}

; Function Attrs: nounwind
define weak void @halide_memoization_cache_evict(i8* %user_context, i64 %eviction_key) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #14
  br label %for.body

for.cond.cleanup:                                 ; preds = %if.end25
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #14
  ret void

for.body:                                         ; preds = %if.end25, %entry
  %__begin1.059 = phi %"struct.Halide::Runtime::Internal::CacheEntry"** [ getelementptr inbounds ([256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 0, i64 0), %entry ], [ %incdec.ptr, %if.end25 ]
  %0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %__begin1.059, align 8, !tbaa !14
  %cmp2.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %0, null
  br i1 %cmp2.not, label %if.end25, label %while.body

while.body:                                       ; preds = %for.body, %if.end24
  %prev.058 = phi %"struct.Halide::Runtime::Internal::CacheEntry"** [ %prev.1, %if.end24 ], [ %__begin1.059, %for.body ]
  %entry1.056 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %1, %if.end24 ], [ %0, %for.body ]
  %next4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056, i64 0, i32 0
  %1 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next4, align 8, !tbaa !229
  %has_eviction_key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056, i64 0, i32 13
  %2 = load i8, i8* %has_eviction_key, align 8, !tbaa !262, !range !21
  %tobool.not = icmp eq i8 %2, 0
  br i1 %tobool.not, label %if.end24, label %land.lhs.true

land.lhs.true:                                    ; preds = %while.body
  %eviction_key5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056, i64 0, i32 12
  %3 = load i64, i64* %eviction_key5, align 8, !tbaa !263
  %cmp6 = icmp eq i64 %3, %eviction_key
  br i1 %cmp6, label %if.then7, label %if.end24

if.then7:                                         ; preds = %land.lhs.true
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %1, %"struct.Halide::Runtime::Internal::CacheEntry"** %prev.058, align 8, !tbaa !14
  %more_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056, i64 0, i32 1
  %4 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !268
  %cmp8.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %4, null
  %less_recent12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056, i64 0, i32 2
  %5 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent12, align 8, !tbaa !252
  br i1 %cmp8.not, label %if.else, label %if.then9

if.then9:                                         ; preds = %if.then7
  %less_recent11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %4, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %5, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent11, align 8, !tbaa !252
  %.pre = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent12, align 8, !tbaa !252
  br label %if.end

if.else:                                          ; preds = %if.then7
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %5, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !14
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then9
  %6 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %5, %if.else ], [ %.pre, %if.then9 ]
  %cmp14.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %6, null
  %more_recent18 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %6, i64 0, i32 1
  %_ZN6Halide7Runtime8Internal19least_recently_usedE.sink = select i1 %cmp14.not, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent18
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %4, %"struct.Halide::Runtime::Internal::CacheEntry"** %_ZN6Halide7Runtime8Internal19least_recently_usedE.sink, align 8, !tbaa !14
  tail call void @_ZN6Halide7Runtime8Internal10CacheEntry7destroyEv(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %entry1.056) #15
  %7 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056 to i8*
  tail call void @halide_free(i8* %user_context, i8* nonnull %7) #14
  br label %if.end24

if.end24:                                         ; preds = %if.end, %land.lhs.true, %while.body
  %prev.1 = phi %"struct.Halide::Runtime::Internal::CacheEntry"** [ %prev.058, %if.end ], [ %next4, %land.lhs.true ], [ %next4, %while.body ]
  %cmp3.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %1, null
  br i1 %cmp3.not, label %if.end25, label %while.body, !llvm.loop !298

if.end25:                                         ; preds = %if.end24, %for.body
  %incdec.ptr = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %__begin1.059, i64 1
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"** %incdec.ptr, getelementptr inbounds ([256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 1, i64 0)
  br i1 %cmp.not, label %for.cond.cleanup, label %for.body
}

; Function Attrs: nounwind
define weak i8* @halide_string_to_string(i8* %dst, i8* %end, i8* %arg) local_unnamed_addr #4 {
entry:
  %cmp.not = icmp ult i8* %dst, %end
  br i1 %cmp.not, label %if.end, label %return

if.end:                                           ; preds = %entry
  %tobool.not = icmp eq i8* %arg, null
  %spec.select = select i1 %tobool.not, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.50, i64 0, i64 0), i8* %arg
  br label %if.end5

if.then4:                                         ; preds = %if.end8
  store i8 0, i8* %dst.addr.023, align 1, !tbaa !18
  br label %return

if.end5:                                          ; preds = %if.end8, %if.end
  %arg.addr.124 = phi i8* [ %spec.select, %if.end ], [ %incdec.ptr9, %if.end8 ]
  %dst.addr.023 = phi i8* [ %dst, %if.end ], [ %incdec.ptr, %if.end8 ]
  %0 = load i8, i8* %arg.addr.124, align 1, !tbaa !18
  store i8 %0, i8* %dst.addr.023, align 1, !tbaa !18
  %cmp6 = icmp eq i8 %0, 0
  br i1 %cmp6, label %return, label %if.end8

if.end8:                                          ; preds = %if.end5
  %incdec.ptr = getelementptr inbounds i8, i8* %dst.addr.023, i64 1
  %incdec.ptr9 = getelementptr inbounds i8, i8* %arg.addr.124, i64 1
  %cmp3 = icmp eq i8* %incdec.ptr, %end
  br i1 %cmp3, label %if.then4, label %if.end5

return:                                           ; preds = %if.end5, %if.then4, %entry
  %retval.0 = phi i8* [ %end, %if.then4 ], [ %dst, %entry ], [ %dst.addr.023, %if.end5 ]
  ret i8* %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_uint64_to_string(i8* %dst, i8* %end, i64 %arg, i32 %min_digits) local_unnamed_addr #0 {
entry:
  %buf = alloca [32 x i8], align 1
  %0 = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %0) #11
  %arrayidx = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i64 0, i64 31
  store i8 0, i8* %arrayidx, align 1, !tbaa !18
  %add.ptr = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i64 0, i64 30
  %cmp13 = icmp sgt i32 %min_digits, 0
  %tobool14 = icmp ne i64 %arg, 0
  %1 = or i1 %tobool14, %cmp13
  br i1 %1, label %entry.for.body_crit_edge, label %for.cond.cleanup

entry.for.body_crit_edge:                         ; preds = %entry
  %inc.1 = add nuw nsw i32 0, 1
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %entry
  %digits.0.lcssa = phi i8* [ %add.ptr, %entry ], [ %incdec.ptr, %for.body ]
  %incdec.ptr1 = getelementptr inbounds i8, i8* %digits.0.lcssa, i64 1
  %call = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* nonnull %incdec.ptr1) #15
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %0) #11
  ret i8* %call

for.body:                                         ; preds = %entry.for.body_crit_edge, %for.body.for.body_crit_edge
  %arg.addr.017 = phi i64 [ %div, %for.body.for.body_crit_edge ], [ %arg, %entry.for.body_crit_edge ]
  %digits.016 = phi i8* [ %incdec.ptr, %for.body.for.body_crit_edge ], [ %add.ptr, %entry.for.body_crit_edge ]
  %inc.phi = phi i32 [ %inc.0, %for.body.for.body_crit_edge ], [ %inc.1, %entry.for.body_crit_edge ]
  %div = udiv i64 %arg.addr.017, 10
  %mul.neg = mul i64 %div, -10
  %sub = add i64 %mul.neg, %arg.addr.017
  %2 = trunc i64 %sub to i8
  %conv = add i8 %2, 48
  store i8 %conv, i8* %digits.016, align 1, !tbaa !18
  %incdec.ptr = getelementptr inbounds i8, i8* %digits.016, i64 -1
  %cmp = icmp slt i32 %inc.phi, %min_digits
  %3 = icmp ugt i64 %arg.addr.017, 9
  %4 = or i1 %3, %cmp
  br i1 %4, label %for.body.for.body_crit_edge, label %for.cond.cleanup, !llvm.loop !299

for.body.for.body_crit_edge:                      ; preds = %for.body
  %inc.0 = add nuw nsw i32 %inc.phi, 1
  br label %for.body
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_int64_to_string(i8* %dst, i8* %end, i64 %arg, i32 %min_digits) local_unnamed_addr #0 {
entry:
  %cmp = icmp slt i64 %arg, 0
  %cmp1 = icmp ult i8* %dst, %end
  %or.cond = and i1 %cmp1, %cmp
  br i1 %or.cond, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %incdec.ptr = getelementptr inbounds i8, i8* %dst, i64 1
  store i8 45, i8* %dst, align 1, !tbaa !18
  %sub = sub nsw i64 0, %arg
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %arg.addr.0 = phi i64 [ %sub, %if.then ], [ %arg, %entry ]
  %dst.addr.0 = phi i8* [ %incdec.ptr, %if.then ], [ %dst, %entry ]
  %call = tail call i8* @halide_uint64_to_string(i8* %dst.addr.0, i8* %end, i64 %arg.addr.0, i32 %min_digits) #15
  ret i8* %call
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_double_to_string(i8* %dst, i8* %end, double %arg, i32 %scientific) local_unnamed_addr #0 {
entry:
  %arg.addr = alloca double, align 8
  %bits = alloca i64, align 8
  %buf = alloca [512 x i8], align 1
  store double %arg, double* %arg.addr, align 8, !tbaa !172
  %0 = bitcast i64* %bits to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #11
  store i64 0, i64* %bits, align 8, !tbaa !22
  %1 = bitcast double* %arg.addr to i8*
  %call = call i8* @memcpy(i8* nonnull %0, i8* nonnull %1, i64 8) #14
  %2 = load i64, i64* %bits, align 8, !tbaa !22
  %and = and i64 %2, 4503599627370495
  %shr = lshr i64 %2, 52
  %3 = trunc i64 %shr to i32
  %conv = and i32 %3, 2047
  %cmp = icmp eq i32 %conv, 2047
  br i1 %cmp, label %if.then, label %if.else15

if.then:                                          ; preds = %entry
  %tobool.not = icmp eq i64 %and, 0
  %tobool10.not = icmp sgt i64 %2, -1
  br i1 %tobool.not, label %if.else9, label %if.then4

if.then4:                                         ; preds = %if.then
  br i1 %tobool10.not, label %if.else, label %if.then6

if.then6:                                         ; preds = %if.then4
  %call7 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1.57, i64 0, i64 0)) #15
  br label %cleanup147

if.else:                                          ; preds = %if.then4
  %call8 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.58, i64 0, i64 0)) #15
  br label %cleanup147

if.else9:                                         ; preds = %if.then
  br i1 %tobool10.not, label %if.else13, label %if.then11

if.then11:                                        ; preds = %if.else9
  %call12 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3.59, i64 0, i64 0)) #15
  br label %cleanup147

if.else13:                                        ; preds = %if.else9
  %call14 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4.60, i64 0, i64 0)) #15
  br label %cleanup147

if.else15:                                        ; preds = %entry
  %cmp16 = icmp eq i32 %conv, 0
  %cmp17 = icmp eq i64 %and, 0
  %or.cond = and i1 %cmp17, %cmp16
  br i1 %or.cond, label %if.then18, label %if.end32

if.then18:                                        ; preds = %if.else15
  %tobool19.not = icmp eq i32 %scientific, 0
  %tobool27.not = icmp sgt i64 %2, -1
  br i1 %tobool19.not, label %if.else26, label %if.then20

if.then20:                                        ; preds = %if.then18
  br i1 %tobool27.not, label %if.else24, label %if.then22

if.then22:                                        ; preds = %if.then20
  %call23 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.5.61, i64 0, i64 0)) #15
  br label %cleanup147

if.else24:                                        ; preds = %if.then20
  %call25 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.6.62, i64 0, i64 0)) #15
  br label %cleanup147

if.else26:                                        ; preds = %if.then18
  br i1 %tobool27.not, label %if.else30, label %if.then28

if.then28:                                        ; preds = %if.else26
  %call29 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.7.63, i64 0, i64 0)) #15
  br label %cleanup147

if.else30:                                        ; preds = %if.else26
  %call31 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.8.64, i64 0, i64 0)) #15
  br label %cleanup147

if.end32:                                         ; preds = %if.else15
  %tobool33.not = icmp sgt i64 %2, -1
  br i1 %tobool33.not, label %if.end36, label %if.then34

if.then34:                                        ; preds = %if.end32
  %call35 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9.65, i64 0, i64 0)) #15
  %4 = load double, double* %arg.addr, align 8, !tbaa !172
  %fneg = fneg double %4
  store double %fneg, double* %arg.addr, align 8, !tbaa !172
  br label %if.end36

if.end36:                                         ; preds = %if.then34, %if.end32
  %dst.addr.0 = phi i8* [ %call35, %if.then34 ], [ %dst, %if.end32 ]
  %tobool37.not = icmp eq i32 %scientific, 0
  br i1 %tobool37.not, label %if.else61, label %while.condthread-pre-split

while.condthread-pre-split:                       ; preds = %if.end36
  %.pr = load double, double* %arg.addr, align 8, !tbaa !172
  %cmp39276 = fcmp olt double %.pr, 1.000000e+00
  br i1 %cmp39276, label %while.condthread-pre-split.while.body_crit_edge, label %while.cond40thread-pre-split

while.condthread-pre-split.while.body_crit_edge:  ; preds = %while.condthread-pre-split
  %dec.1 = add nsw i32 0, -1
  br label %while.body

while.body:                                       ; preds = %while.condthread-pre-split.while.body_crit_edge, %while.body.while.body_crit_edge
  %dec.phi = phi i32 [ %dec.0, %while.body.while.body_crit_edge ], [ %dec.1, %while.condthread-pre-split.while.body_crit_edge ]
  %5 = phi double [ %mul, %while.body.while.body_crit_edge ], [ %.pr, %while.condthread-pre-split.while.body_crit_edge ]
  %mul = fmul double %5, 1.000000e+01
  %cmp39 = fcmp olt double %mul, 1.000000e+00
  br i1 %cmp39, label %while.body.while.body_crit_edge, label %while.cond.while.cond40thread-pre-split_crit_edge, !llvm.loop !300

while.body.while.body_crit_edge:                  ; preds = %while.body
  %dec.0 = add nsw i32 %dec.phi, -1
  br label %while.body

while.cond.while.cond40thread-pre-split_crit_edge: ; preds = %while.body
  store double %mul, double* %arg.addr, align 8, !tbaa !172
  br label %while.cond40thread-pre-split

while.cond40thread-pre-split:                     ; preds = %while.cond.while.cond40thread-pre-split_crit_edge, %while.condthread-pre-split
  %.pr261 = phi double [ %mul, %while.cond.while.cond40thread-pre-split_crit_edge ], [ %.pr, %while.condthread-pre-split ]
  %exponent_base_10.0.lcssa = phi i32 [ %dec.phi, %while.cond.while.cond40thread-pre-split_crit_edge ], [ 0, %while.condthread-pre-split ]
  %cmp41272 = fcmp ult double %.pr261, 1.000000e+01
  br i1 %cmp41272, label %while.end43, label %while.body42

while.body42:                                     ; preds = %while.cond40thread-pre-split, %while.body42
  %exponent_base_10.1273 = phi i32 [ %inc, %while.body42 ], [ %exponent_base_10.0.lcssa, %while.cond40thread-pre-split ]
  %6 = phi double [ %div, %while.body42 ], [ %.pr261, %while.cond40thread-pre-split ]
  %div = fdiv double %6, 1.000000e+01
  %inc = add nsw i32 %exponent_base_10.1273, 1
  %cmp41 = fcmp ult double %div, 1.000000e+01
  br i1 %cmp41, label %while.cond40.while.end43_crit_edge, label %while.body42, !llvm.loop !301

while.cond40.while.end43_crit_edge:               ; preds = %while.body42
  store double %div, double* %arg.addr, align 8, !tbaa !172
  br label %while.end43

while.end43:                                      ; preds = %while.cond40.while.end43_crit_edge, %while.cond40thread-pre-split
  %.lcssa = phi double [ %div, %while.cond40.while.end43_crit_edge ], [ %.pr261, %while.cond40thread-pre-split ]
  %exponent_base_10.1.lcssa = phi i32 [ %inc, %while.cond40.while.end43_crit_edge ], [ %exponent_base_10.0.lcssa, %while.cond40thread-pre-split ]
  %mul44 = fmul double %.lcssa, 1.000000e+06
  %add = fadd double %mul44, 5.000000e-01
  %conv45 = fptoui double %add to i64
  %div46 = udiv i64 %conv45, 1000000
  %mul47.neg = mul i64 %div46, -1000000
  %sub48 = add i64 %mul47.neg, %conv45
  %call49 = call i8* @halide_int64_to_string(i8* %dst.addr.0, i8* %end, i64 %div46, i32 1) #15
  %call50 = call i8* @halide_string_to_string(i8* %call49, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #15
  %call51 = call i8* @halide_int64_to_string(i8* %call50, i8* %end, i64 %sub48, i32 6) #15
  %cmp52 = icmp sgt i32 %exponent_base_10.1.lcssa, -1
  br i1 %cmp52, label %if.then53, label %if.else55

if.then53:                                        ; preds = %while.end43
  %call54 = call i8* @halide_string_to_string(i8* %call51, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11.67, i64 0, i64 0)) #15
  br label %if.end58

if.else55:                                        ; preds = %while.end43
  %call56 = call i8* @halide_string_to_string(i8* %call51, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12.68, i64 0, i64 0)) #15
  %sub57 = sub nsw i32 0, %exponent_base_10.1.lcssa
  br label %if.end58

if.end58:                                         ; preds = %if.else55, %if.then53
  %exponent_base_10.2 = phi i32 [ %exponent_base_10.1.lcssa, %if.then53 ], [ %sub57, %if.else55 ]
  %dst.addr.1 = phi i8* [ %call54, %if.then53 ], [ %call56, %if.else55 ]
  %conv59262 = zext i32 %exponent_base_10.2 to i64
  %call60 = call i8* @halide_int64_to_string(i8* %dst.addr.1, i8* %end, i64 %conv59262, i32 2) #15
  br label %cleanup147

if.else61:                                        ; preds = %if.end36
  br i1 %cmp16, label %if.then63, label %if.end65

if.then63:                                        ; preds = %if.else61
  %call64 = call i8* @halide_double_to_string(i8* %dst.addr.0, i8* %end, double 0.000000e+00, i32 0) #15
  br label %cleanup147

if.end65:                                         ; preds = %if.else61
  %add67 = or i64 %and, 4503599627370496
  %sub69 = add nsw i32 %conv, -1075
  %cmp70 = icmp ult i32 %conv, 1075
  br i1 %cmp70, label %if.then71, label %if.end104

if.then71:                                        ; preds = %if.end65
  %cmp72 = icmp ult i32 %conv, 1023
  %sub76 = sub nuw nsw i32 1075, %conv
  %sh_prom = zext i32 %sub76 to i64
  %shr77 = lshr i64 %add67, %sh_prom
  %shl80 = shl i64 %shr77, %sh_prom
  %integer_part.0 = select i1 %cmp72, i64 0, i64 %shr77
  %sub81 = select i1 %cmp72, i64 0, i64 %shl80
  %f.0.in = sub i64 %add67, %sub81
  %f.0 = uitofp i64 %f.0.in to double
  %conv84258 = zext i32 %sub69 to i64
  %shl85 = shl i64 %conv84258, 52
  %add87 = add i64 %shl85, 4696837146684686336
  %7 = bitcast i64 %add87 to double
  %mul89 = fmul double %7, %f.0
  %add90 = fadd double %mul89, 5.000000e-01
  %conv91 = fptoui double %add90 to i64
  %conv92 = uitofp i64 %conv91 to double
  %cmp93 = fcmp oeq double %add90, %conv92
  %and95 = and i64 %conv91, 1
  %tobool96.not = icmp ne i64 %and95, 0
  %not.or.cond259 = and i1 %cmp93, %tobool96.not
  %dec98 = sext i1 %not.or.cond259 to i64
  %fractional_part.0 = add i64 %dec98, %conv91
  %cmp100 = icmp eq i64 %fractional_part.0, 1000000
  %inc102 = zext i1 %cmp100 to i64
  %spec.select = add nuw i64 %integer_part.0, %inc102
  %spec.select260 = select i1 %cmp100, i64 0, i64 %fractional_part.0
  br label %if.end104

if.end104:                                        ; preds = %if.then71, %if.end65
  %integer_part.2 = phi i64 [ %spec.select, %if.then71 ], [ %add67, %if.end65 ]
  %integer_exponent.0 = phi i32 [ 0, %if.then71 ], [ %sub69, %if.end65 ]
  %fractional_part.2 = phi i64 [ %spec.select260, %if.then71 ], [ 0, %if.end65 ]
  %8 = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %8) #11
  %add.ptr = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i64 0, i64 512
  %add.ptr105 = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i64 0, i64 480
  %call108 = call i8* @halide_int64_to_string(i8* nonnull %add.ptr105, i8* nonnull %add.ptr, i64 %integer_part.2, i32 1) #15
  %cmp109267 = icmp sgt i32 %integer_exponent.0, 0
  br i1 %cmp109267, label %for.cond111.preheader, label %for.cond.cleanup

for.cond111.preheader:                            ; preds = %if.end104, %if.end137
  %i.0270 = phi i32 [ %inc139, %if.end137 ], [ 0, %if.end104 ]
  %int_part_ptr.0268 = phi i8* [ %int_part_ptr.1, %if.end137 ], [ %add.ptr105, %if.end104 ]
  %cmp113.not264 = icmp eq i8* %call108, %int_part_ptr.0268
  br i1 %cmp113.not264, label %if.end137, label %for.body115

for.cond.cleanup:                                 ; preds = %if.end137, %if.end104
  %int_part_ptr.0.lcssa = phi i8* [ %add.ptr105, %if.end104 ], [ %int_part_ptr.1, %if.end137 ]
  %call141 = call i8* @halide_string_to_string(i8* %dst.addr.0, i8* %end, i8* %int_part_ptr.0.lcssa) #15
  %call142 = call i8* @halide_string_to_string(i8* %call141, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #15
  %call143 = call i8* @halide_int64_to_string(i8* %call142, i8* %end, i64 %fractional_part.2, i32 6) #15
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %8) #11
  br label %cleanup147

for.cond.cleanup114:                              ; preds = %for.body115
  br i1 %cmp124, label %if.then135, label %if.end137

for.body115:                                      ; preds = %for.cond111.preheader, %for.body115
  %p.0266.pn = phi i8* [ %p.0266, %for.body115 ], [ %call108, %for.cond111.preheader ]
  %carry.0265 = phi i32 [ %carry.1, %for.body115 ], [ 0, %for.cond111.preheader ]
  %p.0266 = getelementptr inbounds i8, i8* %p.0266.pn, i64 -1
  %9 = load i8, i8* %p.0266, align 1, !tbaa !18
  %sub117 = add i8 %9, -48
  %conv119 = sext i8 %sub117 to i32
  %mul120 = shl nsw i32 %conv119, 1
  %add121 = or i32 %mul120, %carry.0265
  %10 = trunc i32 %add121 to i8
  %cmp124 = icmp sgt i8 %10, 9
  %sub127 = add nsw i32 %add121, 246
  %carry.1 = zext i1 %cmp124 to i32
  %new_digit.0.in = select i1 %cmp124, i32 %sub127, i32 %add121
  %11 = trunc i32 %new_digit.0.in to i8
  %conv133 = add i8 %11, 48
  store i8 %conv133, i8* %p.0266, align 1, !tbaa !18
  %cmp113.not = icmp eq i8* %p.0266, %int_part_ptr.0268
  br i1 %cmp113.not, label %for.cond.cleanup114, label %for.body115, !llvm.loop !302

if.then135:                                       ; preds = %for.cond.cleanup114
  %incdec.ptr136 = getelementptr inbounds i8, i8* %int_part_ptr.0268, i64 -1
  store i8 49, i8* %incdec.ptr136, align 1, !tbaa !18
  br label %if.end137

if.end137:                                        ; preds = %if.then135, %for.cond.cleanup114, %for.cond111.preheader
  %int_part_ptr.1 = phi i8* [ %incdec.ptr136, %if.then135 ], [ %int_part_ptr.0268, %for.cond.cleanup114 ], [ %call108, %for.cond111.preheader ]
  %inc139 = add nuw nsw i32 %i.0270, 1
  %exitcond.not = icmp eq i32 %inc139, %integer_exponent.0
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond111.preheader, !llvm.loop !303

cleanup147:                                       ; preds = %for.cond.cleanup, %if.then63, %if.end58, %if.else30, %if.then28, %if.else24, %if.then22, %if.else13, %if.then11, %if.else, %if.then6
  %retval.1 = phi i8* [ %call7, %if.then6 ], [ %call8, %if.else ], [ %call12, %if.then11 ], [ %call14, %if.else13 ], [ %call23, %if.then22 ], [ %call25, %if.else24 ], [ %call29, %if.then28 ], [ %call31, %if.else30 ], [ %call64, %if.then63 ], [ %call60, %if.end58 ], [ %call143, %for.cond.cleanup ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #11
  ret i8* %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_pointer_to_string(i8* %dst, i8* %end, i8* %arg) local_unnamed_addr #0 {
entry:
  %buf = alloca [20 x i8], align 1
  %0 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(20) %0, i8 0, i64 20, i1 false)
  %add.ptr = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 18
  %1 = ptrtoint i8* %arg to i64
  %and = and i64 %1, 15
  %arrayidx = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and
  %2 = load i8, i8* %arrayidx, align 1, !tbaa !18
  %incdec.ptr = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 17
  store i8 %2, i8* %add.ptr, align 1, !tbaa !18
  %shr = lshr i64 %1, 4
  %tobool.not = icmp eq i64 %shr, 0
  br i1 %tobool.not, label %cleanup, label %for.cond

for.cond:                                         ; preds = %entry
  %and.1 = and i64 %shr, 15
  %arrayidx.1 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.1
  %3 = load i8, i8* %arrayidx.1, align 1, !tbaa !18
  %incdec.ptr.1 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 16
  store i8 %3, i8* %incdec.ptr, align 1, !tbaa !18
  %shr.1 = lshr i64 %1, 8
  %tobool.not.1 = icmp eq i64 %shr.1, 0
  br i1 %tobool.not.1, label %cleanup, label %for.cond.1

cleanup:                                          ; preds = %for.cond.14, %for.cond.13, %for.cond.12, %for.cond.11, %for.cond.10, %for.cond.9, %for.cond.8, %for.cond.7, %for.cond.6, %for.cond.5, %for.cond.4, %for.cond.3, %for.cond.2, %for.cond.1, %for.cond, %entry
  %buf_ptr.016.lcssa = phi i8* [ %add.ptr, %entry ], [ %incdec.ptr, %for.cond ], [ %incdec.ptr.1, %for.cond.1 ], [ %incdec.ptr.2, %for.cond.2 ], [ %incdec.ptr.3, %for.cond.3 ], [ %incdec.ptr.4, %for.cond.4 ], [ %incdec.ptr.5, %for.cond.5 ], [ %incdec.ptr.6, %for.cond.6 ], [ %incdec.ptr.7, %for.cond.7 ], [ %incdec.ptr.8, %for.cond.8 ], [ %incdec.ptr.9, %for.cond.9 ], [ %incdec.ptr.10, %for.cond.10 ], [ %incdec.ptr.11, %for.cond.11 ], [ %incdec.ptr.12, %for.cond.12 ], [ %incdec.ptr.13, %for.cond.13 ], [ %incdec.ptr.14, %for.cond.14 ]
  %incdec.ptr.lcssa = phi i8* [ %incdec.ptr, %entry ], [ %incdec.ptr.1, %for.cond ], [ %incdec.ptr.2, %for.cond.1 ], [ %incdec.ptr.3, %for.cond.2 ], [ %incdec.ptr.4, %for.cond.3 ], [ %incdec.ptr.5, %for.cond.4 ], [ %incdec.ptr.6, %for.cond.5 ], [ %incdec.ptr.7, %for.cond.6 ], [ %incdec.ptr.8, %for.cond.7 ], [ %incdec.ptr.9, %for.cond.8 ], [ %incdec.ptr.10, %for.cond.9 ], [ %incdec.ptr.11, %for.cond.10 ], [ %incdec.ptr.12, %for.cond.11 ], [ %incdec.ptr.13, %for.cond.12 ], [ %incdec.ptr.14, %for.cond.13 ], [ %incdec.ptr.15, %for.cond.14 ]
  %incdec.ptr1 = getelementptr inbounds i8, i8* %buf_ptr.016.lcssa, i64 -2
  store i8 120, i8* %incdec.ptr.lcssa, align 1, !tbaa !18
  store i8 48, i8* %incdec.ptr1, align 1, !tbaa !18
  %call = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* nonnull %incdec.ptr1) #15
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %0) #11
  ret i8* %call

for.cond.1:                                       ; preds = %for.cond
  %and.2 = and i64 %shr.1, 15
  %arrayidx.2 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.2
  %4 = load i8, i8* %arrayidx.2, align 1, !tbaa !18
  %incdec.ptr.2 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 15
  store i8 %4, i8* %incdec.ptr.1, align 1, !tbaa !18
  %shr.2 = lshr i64 %1, 12
  %tobool.not.2 = icmp eq i64 %shr.2, 0
  br i1 %tobool.not.2, label %cleanup, label %for.cond.2

for.cond.2:                                       ; preds = %for.cond.1
  %and.3 = and i64 %shr.2, 15
  %arrayidx.3 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.3
  %5 = load i8, i8* %arrayidx.3, align 1, !tbaa !18
  %incdec.ptr.3 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 14
  store i8 %5, i8* %incdec.ptr.2, align 1, !tbaa !18
  %shr.3 = lshr i64 %1, 16
  %tobool.not.3 = icmp eq i64 %shr.3, 0
  br i1 %tobool.not.3, label %cleanup, label %for.cond.3

for.cond.3:                                       ; preds = %for.cond.2
  %and.4 = and i64 %shr.3, 15
  %arrayidx.4 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.4
  %6 = load i8, i8* %arrayidx.4, align 1, !tbaa !18
  %incdec.ptr.4 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 13
  store i8 %6, i8* %incdec.ptr.3, align 1, !tbaa !18
  %shr.4 = lshr i64 %1, 20
  %tobool.not.4 = icmp eq i64 %shr.4, 0
  br i1 %tobool.not.4, label %cleanup, label %for.cond.4

for.cond.4:                                       ; preds = %for.cond.3
  %and.5 = and i64 %shr.4, 15
  %arrayidx.5 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.5
  %7 = load i8, i8* %arrayidx.5, align 1, !tbaa !18
  %incdec.ptr.5 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 12
  store i8 %7, i8* %incdec.ptr.4, align 1, !tbaa !18
  %shr.5 = lshr i64 %1, 24
  %tobool.not.5 = icmp eq i64 %shr.5, 0
  br i1 %tobool.not.5, label %cleanup, label %for.cond.5

for.cond.5:                                       ; preds = %for.cond.4
  %and.6 = and i64 %shr.5, 15
  %arrayidx.6 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.6
  %8 = load i8, i8* %arrayidx.6, align 1, !tbaa !18
  %incdec.ptr.6 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 11
  store i8 %8, i8* %incdec.ptr.5, align 1, !tbaa !18
  %shr.6 = lshr i64 %1, 28
  %tobool.not.6 = icmp eq i64 %shr.6, 0
  br i1 %tobool.not.6, label %cleanup, label %for.cond.6

for.cond.6:                                       ; preds = %for.cond.5
  %and.7 = and i64 %shr.6, 15
  %arrayidx.7 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.7
  %9 = load i8, i8* %arrayidx.7, align 1, !tbaa !18
  %incdec.ptr.7 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 10
  store i8 %9, i8* %incdec.ptr.6, align 1, !tbaa !18
  %shr.7 = lshr i64 %1, 32
  %tobool.not.7 = icmp eq i64 %shr.7, 0
  br i1 %tobool.not.7, label %cleanup, label %for.cond.7

for.cond.7:                                       ; preds = %for.cond.6
  %and.8 = and i64 %shr.7, 15
  %arrayidx.8 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.8
  %10 = load i8, i8* %arrayidx.8, align 1, !tbaa !18
  %incdec.ptr.8 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 9
  store i8 %10, i8* %incdec.ptr.7, align 1, !tbaa !18
  %shr.8 = lshr i64 %1, 36
  %tobool.not.8 = icmp eq i64 %shr.8, 0
  br i1 %tobool.not.8, label %cleanup, label %for.cond.8

for.cond.8:                                       ; preds = %for.cond.7
  %and.9 = and i64 %shr.8, 15
  %arrayidx.9 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.9
  %11 = load i8, i8* %arrayidx.9, align 1, !tbaa !18
  %incdec.ptr.9 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 8
  store i8 %11, i8* %incdec.ptr.8, align 1, !tbaa !18
  %shr.9 = lshr i64 %1, 40
  %tobool.not.9 = icmp eq i64 %shr.9, 0
  br i1 %tobool.not.9, label %cleanup, label %for.cond.9

for.cond.9:                                       ; preds = %for.cond.8
  %and.10 = and i64 %shr.9, 15
  %arrayidx.10 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.10
  %12 = load i8, i8* %arrayidx.10, align 1, !tbaa !18
  %incdec.ptr.10 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 7
  store i8 %12, i8* %incdec.ptr.9, align 1, !tbaa !18
  %shr.10 = lshr i64 %1, 44
  %tobool.not.10 = icmp eq i64 %shr.10, 0
  br i1 %tobool.not.10, label %cleanup, label %for.cond.10

for.cond.10:                                      ; preds = %for.cond.9
  %and.11 = and i64 %shr.10, 15
  %arrayidx.11 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.11
  %13 = load i8, i8* %arrayidx.11, align 1, !tbaa !18
  %incdec.ptr.11 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 6
  store i8 %13, i8* %incdec.ptr.10, align 1, !tbaa !18
  %shr.11 = lshr i64 %1, 48
  %tobool.not.11 = icmp eq i64 %shr.11, 0
  br i1 %tobool.not.11, label %cleanup, label %for.cond.11

for.cond.11:                                      ; preds = %for.cond.10
  %and.12 = and i64 %shr.11, 15
  %arrayidx.12 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.12
  %14 = load i8, i8* %arrayidx.12, align 1, !tbaa !18
  %incdec.ptr.12 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 5
  store i8 %14, i8* %incdec.ptr.11, align 1, !tbaa !18
  %shr.12 = lshr i64 %1, 52
  %tobool.not.12 = icmp eq i64 %shr.12, 0
  br i1 %tobool.not.12, label %cleanup, label %for.cond.12

for.cond.12:                                      ; preds = %for.cond.11
  %and.13 = and i64 %shr.12, 15
  %arrayidx.13 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.13
  %15 = load i8, i8* %arrayidx.13, align 1, !tbaa !18
  %incdec.ptr.13 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 4
  store i8 %15, i8* %incdec.ptr.12, align 1, !tbaa !18
  %shr.13 = lshr i64 %1, 56
  %tobool.not.13 = icmp eq i64 %shr.13, 0
  br i1 %tobool.not.13, label %cleanup, label %for.cond.13

for.cond.13:                                      ; preds = %for.cond.12
  %and.14 = and i64 %shr.13, 15
  %arrayidx.14 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.14
  %16 = load i8, i8* %arrayidx.14, align 1, !tbaa !18
  %incdec.ptr.14 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 3
  store i8 %16, i8* %incdec.ptr.13, align 1, !tbaa !18
  %shr.14 = lshr i64 %1, 60
  %tobool.not.14 = icmp eq i64 %shr.14, 0
  br i1 %tobool.not.14, label %cleanup, label %for.cond.14

for.cond.14:                                      ; preds = %for.cond.13
  %arrayidx.15 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %shr.14
  %17 = load i8, i8* %arrayidx.15, align 1, !tbaa !18
  %incdec.ptr.15 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 2
  store i8 %17, i8* %incdec.ptr.14, align 1, !tbaa !18
  br label %cleanup
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_type_to_string(i8* %dst, i8* %end, %struct.halide_type_t* %t) local_unnamed_addr #0 {
entry:
  %code = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %t, i64 0, i32 0
  %0 = load i8, i8* %code, align 2, !tbaa !304
  %1 = icmp ult i8 %0, 4
  br i1 %1, label %switch.lookup, label %sw.epilog

switch.lookup:                                    ; preds = %entry
  %2 = sext i8 %0 to i64
  %switch.gep = getelementptr inbounds [4 x i8*], [4 x i8*]* @switch.table.halide_type_to_string, i64 0, i64 %2
  %switch.load = load i8*, i8** %switch.gep, align 8
  br label %sw.epilog

sw.epilog:                                        ; preds = %entry, %switch.lookup
  %code_name.0 = phi i8* [ %switch.load, %switch.lookup ], [ getelementptr inbounds ([14 x i8], [14 x i8]* @.str.18.72, i64 0, i64 0), %entry ]
  %call = tail call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* nonnull %code_name.0) #15
  %bits = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %t, i64 0, i32 1
  %3 = load i8, i8* %bits, align 1, !tbaa !144
  %conv4 = zext i8 %3 to i64
  %call5 = tail call i8* @halide_uint64_to_string(i8* %call, i8* %end, i64 %conv4, i32 1) #15
  %lanes = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %t, i64 0, i32 2
  %4 = load i16, i16* %lanes, align 2, !tbaa !305
  %cmp.not = icmp eq i16 %4, 1
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %sw.epilog
  %call7 = tail call i8* @halide_string_to_string(i8* %call5, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.19.77, i64 0, i64 0)) #15
  %5 = load i16, i16* %lanes, align 2, !tbaa !305
  %conv9 = zext i16 %5 to i64
  %call10 = tail call i8* @halide_uint64_to_string(i8* %call7, i8* %end, i64 %conv9, i32 1) #15
  br label %if.end

if.end:                                           ; preds = %if.then, %sw.epilog
  %dst.addr.0 = phi i8* [ %call10, %if.then ], [ %call5, %sw.epilog ]
  ret i8* %dst.addr.0
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_buffer_to_string(i8* %dst, i8* %end, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = tail call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.20.78, i64 0, i64 0)) #15
  br label %return

if.end:                                           ; preds = %entry
  %call1 = tail call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.21.79, i64 0, i64 0)) #15
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !182
  %call2 = tail call i8* @halide_uint64_to_string(i8* %call1, i8* %end, i64 %0, i32 1) #15
  %call3 = tail call i8* @halide_string_to_string(i8* %call2, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #15
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %1 = bitcast %struct.halide_device_interface_t** %device_interface to i8**
  %2 = load i8*, i8** %1, align 8, !tbaa !306
  %call4 = tail call i8* @halide_pointer_to_string(i8* %call3, i8* %end, i8* %2) #15
  %call5 = tail call i8* @halide_string_to_string(i8* %call4, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #15
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 2
  %3 = load i8*, i8** %host, align 8, !tbaa !180
  %call6 = tail call i8* @halide_pointer_to_string(i8* %call5, i8* %end, i8* %3) #15
  %call7 = tail call i8* @halide_string_to_string(i8* %call6, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #15
  %flags = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %4 = load i64, i64* %flags, align 8, !tbaa !307
  %call8 = tail call i8* @halide_uint64_to_string(i8* %call7, i8* %end, i64 %4, i32 1) #15
  %call9 = tail call i8* @halide_string_to_string(i8* %call8, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #15
  %type = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 4
  %call10 = tail call i8* @halide_type_to_string(i8* %call9, i8* %end, %struct.halide_type_t* nonnull %type) #15
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 5
  %5 = load i32, i32* %dimensions, align 4, !tbaa !183
  %cmp1179 = icmp sgt i32 %5, 0
  br i1 %cmp1179, label %for.body.lr.ph, label %for.cond.cleanup

for.body.lr.ph:                                   ; preds = %if.end
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %if.end
  %dst.addr.0.lcssa = phi i8* [ %call10, %if.end ], [ %call26, %for.body ]
  %call27 = tail call i8* @halide_string_to_string(i8* %dst.addr.0.lcssa, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.119, i64 0, i64 0)) #15
  br label %return

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.body ]
  %dst.addr.080 = phi i8* [ %call10, %for.body.lr.ph ], [ %call26, %for.body ]
  %call12 = tail call i8* @halide_string_to_string(i8* %dst.addr.080, i8* %end, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.23.82, i64 0, i64 0)) #15
  %6 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !184
  %min = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %6, i64 %indvars.iv, i32 0
  %7 = load i32, i32* %min, align 4, !tbaa !221
  %conv = sext i32 %7 to i64
  %call13 = tail call i8* @halide_int64_to_string(i8* %call12, i8* %end, i64 %conv, i32 1) #15
  %call14 = tail call i8* @halide_string_to_string(i8* %call13, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #15
  %8 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !184
  %extent = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %8, i64 %indvars.iv, i32 1
  %9 = load i32, i32* %extent, align 4, !tbaa !189
  %conv18 = sext i32 %9 to i64
  %call19 = tail call i8* @halide_int64_to_string(i8* %call14, i8* %end, i64 %conv18, i32 1) #15
  %call20 = tail call i8* @halide_string_to_string(i8* %call19, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #15
  %10 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !184
  %stride = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %10, i64 %indvars.iv, i32 2
  %11 = load i32, i32* %stride, align 4, !tbaa !185
  %conv24 = sext i32 %11 to i64
  %call25 = tail call i8* @halide_int64_to_string(i8* %call20, i8* %end, i64 %conv24, i32 1) #15
  %call26 = tail call i8* @halide_string_to_string(i8* %call25, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.24.83, i64 0, i64 0)) #15
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %12 = load i32, i32* %dimensions, align 4, !tbaa !183
  %13 = sext i32 %12 to i64
  %cmp11 = icmp slt i64 %indvars.iv.next, %13
  br i1 %cmp11, label %for.body, label %for.cond.cleanup, !llvm.loop !308

return:                                           ; preds = %for.cond.cleanup, %if.then
  %retval.0 = phi i8* [ %call, %if.then ], [ %call27, %for.cond.cleanup ]
  ret i8* %retval.0
}

; Function Attrs: alwaysinline nounwind willreturn mustprogress
define weak i32 @halide_malloc_alignment() local_unnamed_addr #6 {
entry:
  ret i32 32
}

; Function Attrs: nounwind
define weak i32 @halide_reuse_device_allocations(i8* %user_context, i1 zeroext %flag) local_unnamed_addr #4 {
entry:
  %frombool = zext i1 %flag to i8
  store i8 %frombool, i8* @_ZN6Halide7Runtime8Internal36halide_reuse_device_allocations_flagE, align 1, !tbaa !19
  br i1 %flag, label %if.end5, label %if.then

if.then:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #14
  %p.014 = load %struct.halide_device_allocation_pool*, %struct.halide_device_allocation_pool** @_ZN6Halide7Runtime8Internal23device_allocation_poolsE, align 8, !tbaa !14
  %cmp.not15 = icmp eq %struct.halide_device_allocation_pool* %p.014, null
  br i1 %cmp.not15, label %for.cond.cleanup, label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %if.then
  %err.0.lcssa = phi i32 [ 0, %if.then ], [ %spec.select, %for.body ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #14
  br label %if.end5

for.body:                                         ; preds = %if.then, %for.body
  %p.017 = phi %struct.halide_device_allocation_pool* [ %p.0, %for.body ], [ %p.014, %if.then ]
  %err.016 = phi i32 [ %spec.select, %for.body ], [ 0, %if.then ]
  %release_unused = getelementptr inbounds %struct.halide_device_allocation_pool, %struct.halide_device_allocation_pool* %p.017, i64 0, i32 0
  %0 = load i32 (i8*)*, i32 (i8*)** %release_unused, align 8, !tbaa !309
  %call = tail call i32 %0(i8* %user_context) #14
  %tobool3.not = icmp eq i32 %call, 0
  %spec.select = select i1 %tobool3.not, i32 %err.016, i32 %call
  %next = getelementptr inbounds %struct.halide_device_allocation_pool, %struct.halide_device_allocation_pool* %p.017, i64 0, i32 1
  %p.0 = load %struct.halide_device_allocation_pool*, %struct.halide_device_allocation_pool** %next, align 8, !tbaa !14
  %cmp.not = icmp eq %struct.halide_device_allocation_pool* %p.0, null
  br i1 %cmp.not, label %for.cond.cleanup, label %for.body, !llvm.loop !311

if.end5:                                          ; preds = %for.cond.cleanup, %entry
  %err.2 = phi i32 [ 0, %entry ], [ %err.0.lcssa, %for.cond.cleanup ]
  ret i32 %err.2
}

; Function Attrs: nounwind willreturn mustprogress
define weak zeroext i1 @halide_can_reuse_device_allocations(i8* %user_context) local_unnamed_addr #2 {
entry:
  %0 = load i8, i8* @_ZN6Halide7Runtime8Internal36halide_reuse_device_allocations_flagE, align 1, !tbaa !19, !range !21
  %tobool = icmp ne i8 %0, 0
  ret i1 %tobool
}

; Function Attrs: nounwind
define weak void @halide_register_device_allocation_pool(%struct.halide_device_allocation_pool* %pool) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #14
  %0 = load %struct.halide_device_allocation_pool*, %struct.halide_device_allocation_pool** @_ZN6Halide7Runtime8Internal23device_allocation_poolsE, align 8, !tbaa !14
  %next = getelementptr inbounds %struct.halide_device_allocation_pool, %struct.halide_device_allocation_pool* %pool, i64 0, i32 1
  store %struct.halide_device_allocation_pool* %0, %struct.halide_device_allocation_pool** %next, align 8, !tbaa !312
  store %struct.halide_device_allocation_pool* %pool, %struct.halide_device_allocation_pool** @_ZN6Halide7Runtime8Internal23device_allocation_poolsE, align 8, !tbaa !14
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #14
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %flags.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %0 = load i64, i64* %flags.i.i, align 8, !tbaa !307
  %and.i.i = and i64 %0, 2
  %cmp.i.i.not = icmp eq i64 %and.i.i, 0
  br i1 %cmp.i.i.not, label %return, label %if.end

if.end:                                           ; preds = %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %1 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !306
  %and.i.i46 = and i64 %0, 1
  %cmp.i.i47.not = icmp eq i64 %and.i.i46, 0
  br i1 %cmp.i.i47.not, label %if.end9, label %return

if.end9:                                          ; preds = %if.end
  %cmp = icmp eq %struct.halide_device_interface_t* %1, null
  br i1 %cmp, label %return, label %if.end15

if.end15:                                         ; preds = %if.end9
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %1, i64 0, i32 15
  %2 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %copy_to_host = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %2, i64 0, i32 6
  %3 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %copy_to_host, align 8, !tbaa !315
  %call16 = tail call i32 %3(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #14
  %cmp17.not = icmp eq i32 %call16, 0
  br i1 %cmp17.not, label %if.end23, label %return

if.end23:                                         ; preds = %if.end15
  %4 = load i64, i64* %flags.i.i, align 8, !tbaa !307
  %and.i.i44 = and i64 %4, -3
  store i64 %and.i.i44, i64* %flags.i.i, align 8, !tbaa !307
  %call24 = tail call i32 @halide_msan_annotate_buffer_is_initialized(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #14
  br label %return

return:                                           ; preds = %if.end23, %if.end15, %if.end9, %if.end, %entry
  %retval.2 = phi i32 [ 0, %entry ], [ 0, %if.end23 ], [ -14, %if.end ], [ -19, %if.end9 ], [ -14, %if.end15 ]
  ret i32 %retval.2
}

; Function Attrs: nounwind mustprogress
define weak void @halide_device_release(i8* %user_context, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i64 0, i32 15
  %0 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %device_release = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %0, i64 0, i32 5
  %1 = load i32 (i8*)*, i32 (i8*)** %device_release, align 8, !tbaa !317
  %call = tail call i32 %1(i8* %user_context) #14
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_copy_to_host(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #14
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.6.88, i64 0, i64 0)) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !306
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !182
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !307
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end16.i.split

if.end16.i.split:                                 ; preds = %if.end16.i
  %call11 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #15
  br label %cleanup

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %call12 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* %buf) #15
  br label %cleanup

cleanup:                                          ; preds = %if.end16.i.split, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ %call11, %if.end16.i.split ], [ %call12, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #14
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define linkonce i32 @copy_to_device_already_locked(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7.89, i64 0, i64 0)) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !306
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !182
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !307
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %if.end, label %cleanup

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit, %if.end16.i
  %cmp1 = icmp eq %struct.halide_device_interface_t* %device_interface, null
  br i1 %cmp1, label %if.then2, label %if.end11

if.then2:                                         ; preds = %if.end
  %device_interface5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %4 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface5, align 8, !tbaa !306
  %cmp6 = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp6, label %if.then7, label %if.end11

if.then7:                                         ; preds = %if.then2
  %call8 = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %cleanup

if.end11:                                         ; preds = %if.then2, %if.end
  %device_interface.addr.0 = phi %struct.halide_device_interface_t* [ %device_interface, %if.end ], [ %4, %if.then2 ]
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %5 = load i64, i64* %device, align 8, !tbaa !182
  %tobool.not = icmp eq i64 %5, 0
  br i1 %tobool.not, label %if.then18, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end11
  %device_interface12 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %6 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface12, align 8, !tbaa !306
  %cmp13.not = icmp eq %struct.halide_device_interface_t* %6, %device_interface.addr.0
  br i1 %cmp13.not, label %if.end27, label %if.then14

if.then14:                                        ; preds = %land.lhs.true
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.9.90, i64 0, i64 0)) #14
  br label %cleanup

if.then18:                                        ; preds = %if.end11
  %call19 = tail call i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* nonnull %buf, %struct.halide_device_interface_t* nonnull %device_interface.addr.0) #15
  %cmp20.not = icmp eq i32 %call19, 0
  br i1 %cmp20.not, label %if.end27, label %cleanup

if.end27:                                         ; preds = %if.then18, %land.lhs.true
  %flags.i.i97 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %7 = load i64, i64* %flags.i.i97, align 8, !tbaa !307
  %and.i.i98 = and i64 %7, 1
  %cmp.i.i99.not = icmp eq i64 %and.i.i98, 0
  br i1 %cmp.i.i99.not, label %cleanup, label %if.then29

if.then29:                                        ; preds = %if.end27
  %and.i.i96 = and i64 %7, 2
  %cmp.i.i.not = icmp eq i64 %and.i.i96, 0
  br i1 %cmp.i.i.not, label %if.else, label %cleanup

if.else:                                          ; preds = %if.then29
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface.addr.0, i64 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %copy_to_device = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i64 0, i32 7
  %9 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %copy_to_device, align 8, !tbaa !318
  %call44 = tail call i32 %9(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #14
  %cmp45 = icmp eq i32 %call44, 0
  br i1 %cmp45, label %if.then46, label %cleanup

if.then46:                                        ; preds = %if.else
  %10 = load i64, i64* %flags.i.i97, align 8, !tbaa !307
  %and.i.i = and i64 %10, -2
  store i64 %and.i.i, i64* %flags.i.i97, align 8, !tbaa !307
  br label %cleanup

cleanup:                                          ; preds = %if.then46, %if.else, %if.then29, %if.end27, %if.then18, %if.then14, %if.then7, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %call8, %if.then7 ], [ -42, %if.then14 ], [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.then46 ], [ %call19, %if.then18 ], [ -15, %if.then29 ], [ -15, %if.else ], [ 0, %if.end27 ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.17.91, i64 0, i64 0)) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !306
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !182
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !307
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup12

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface3.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface3.phi.trans.insert, align 8, !tbaa !306
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp4.not = icmp eq %struct.halide_device_interface_t* %4, null
  %cmp5.not = icmp eq %struct.halide_device_interface_t* %4, %device_interface
  %or.cond = or i1 %cmp4.not, %cmp5.not
  br i1 %or.cond, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.20.92, i64 0, i64 0)) #14
  br label %cleanup12

if.end7:                                          ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !319
  tail call void %6() #14
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %device_malloc = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 2
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_malloc, align 8, !tbaa !320
  %call9 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #14
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !321
  tail call void %10() #14
  %tobool.not = icmp eq i32 %call9, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -16
  ret i32 %spec.select

cleanup12:                                        ; preds = %if.then6, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -42, %if.then6 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind
define weak i32 @halide_copy_to_device(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #14
  %call = tail call i32 @copy_to_device_already_locked(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) #15
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #14
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_sync(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.16.93, i64 0, i64 0)) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !306
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !182
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !307
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup8

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !306
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2 = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %if.end
  %call4 = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %cleanup8

if.end5:                                          ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %device_sync = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 4
  %6 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_sync, align 8, !tbaa !322
  %call6 = tail call i32 %6(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #14
  %tobool.not = icmp eq i32 %call6, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -17
  ret i32 %spec.select

cleanup8:                                         ; preds = %if.then3, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ %call4, %if.then3 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.21.96, i64 0, i64 0)) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !306
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !182
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !307
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup12

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !306
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2.not, label %if.end11, label %if.then3

if.then3:                                         ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !319
  tail call void %6() #14
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %device_free = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 3
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_free, align 8, !tbaa !323
  %call5 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #14
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !321
  tail call void %10() #14
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %11 = load i64, i64* %device, align 8, !tbaa !182
  %cmp7 = icmp eq i64 %11, 0
  br i1 %cmp7, label %do.end, label %if.then8

if.then8:                                         ; preds = %if.then3
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([127 x i8], [127 x i8]* @.str.22.97, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %do.end

do.end:                                           ; preds = %if.then8, %if.then3
  %tobool.not = icmp eq i32 %call5, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -18
  ret i32 %spec.select

if.end11:                                         ; preds = %if.end
  %flags3.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %12 = load i64, i64* %flags3.i.i, align 8, !tbaa !307
  %and.i.i = and i64 %12, -3
  store i64 %and.i.i, i64* %flags3.i.i, align 8, !tbaa !307
  br label %cleanup12

cleanup12:                                        ; preds = %if.end11, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end11 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak void @halide_device_free_as_destructor(i8* %user_context, i8* %obj) local_unnamed_addr #0 {
entry:
  %0 = bitcast i8* %obj to %struct.halide_buffer_t*
  %call = tail call i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* %0) #15
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_and_host_malloc(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.23.98, i64 0, i64 0)) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !306
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !182
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !307
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup14

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface3.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface3.phi.trans.insert, align 8, !tbaa !306
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp4.not = icmp eq %struct.halide_device_interface_t* %4, null
  %cmp5.not = icmp eq %struct.halide_device_interface_t* %4, %device_interface
  %or.cond = or i1 %cmp4.not, %cmp5.not
  br i1 %or.cond, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.25.99, i64 0, i64 0)) #14
  br label %cleanup14

if.end7:                                          ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !319
  tail call void %6() #14
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %device_and_host_malloc = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 8
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_and_host_malloc, align 8, !tbaa !324
  %call9 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #14
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !321
  tail call void %10() #14
  %cmp11.not = icmp eq i32 %call9, 0
  br i1 %cmp11.not, label %cleanup14, label %if.then12

if.then12:                                        ; preds = %if.end7
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.26.100, i64 0, i64 0)) #14
  br label %cleanup14

cleanup14:                                        ; preds = %if.then12, %if.end7, %if.then6, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -42, %if.then6 ], [ -16, %if.then12 ], [ 0, %if.end7 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_and_host_free(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.27.101, i64 0, i64 0)) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !306
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !182
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !307
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup18

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !306
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2.not, label %if.else11, label %if.then3

if.then3:                                         ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !319
  tail call void %6() #14
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %device_and_host_free = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 9
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_and_host_free, align 8, !tbaa !325
  %call5 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #14
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !321
  tail call void %10() #14
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %11 = load i64, i64* %device, align 8, !tbaa !182
  %cmp7 = icmp eq i64 %11, 0
  br i1 %cmp7, label %do.end, label %if.then8

if.then8:                                         ; preds = %if.then3
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([127 x i8], [127 x i8]* @.str.28.102, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %do.end

do.end:                                           ; preds = %if.then8, %if.then3
  %tobool.not = icmp eq i32 %call5, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -18
  ret i32 %spec.select

if.else11:                                        ; preds = %if.end
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 2
  %12 = load i8*, i8** %host, align 8, !tbaa !180
  %tobool12.not = icmp eq i8* %12, null
  br i1 %tobool12.not, label %if.end17, label %if.then13

if.then13:                                        ; preds = %if.else11
  tail call void @halide_free(i8* %user_context, i8* nonnull %12) #14
  store i8* null, i8** %host, align 8, !tbaa !180
  br label %if.end17

if.end17:                                         ; preds = %if.then13, %if.else11
  %flags3.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %13 = load i64, i64* %flags3.i.i, align 8, !tbaa !307
  %and.i.i = and i64 %13, -3
  store i64 %and.i.i, i64* %flags3.i.i, align 8, !tbaa !307
  br label %cleanup18

cleanup18:                                        ; preds = %if.end17, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end17 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_and_host_malloc(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.29.103, i64 0, i64 0)) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !306
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !182
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !307
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %if.end, label %cleanup13

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit, %if.end16.i
  %dimensions.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 5
  %4 = load i32, i32* %dimensions.i.i, align 4, !tbaa !183
  %cmp19.i.i = icmp sgt i32 %4, 0
  br i1 %cmp19.i.i, label %for.body.lr.ph.i.i, label %if.end._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge

if.end._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge: ; preds = %if.end
  %sub.i.0 = sub nsw i64 1, 0
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.lr.ph.i.i:                               ; preds = %if.end
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  %5 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8, !tbaa !184
  %wide.trip.count.i.i = zext i32 %4 to i64
  %min.iters.check = icmp ult i32 %4, 3
  br i1 %min.iters.check, label %for.body.i.i.preheader, label %vector.ph

vector.ph:                                        ; preds = %for.body.lr.ph.i.i
  %n.vec = and i64 %wide.trip.count.i.i, 4294967294
  br label %vector.body

vector.body:                                      ; preds = %pred.load.continue6, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %pred.load.continue6 ]
  %vec.phi = phi i64 [ 0, %vector.ph ], [ %predphi, %pred.load.continue6 ]
  %vec.phi4 = phi i64 [ 0, %vector.ph ], [ %predphi7, %pred.load.continue6 ]
  %induction3 = or i64 %index, 1
  %6 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %index, i32 2
  %7 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %induction3, i32 2
  %8 = load i32, i32* %6, align 4, !tbaa !185
  %9 = load i32, i32* %7, align 4, !tbaa !185
  %10 = icmp sgt i32 %8, 0
  %11 = icmp sgt i32 %9, 0
  %12 = zext i32 %8 to i64
  %13 = zext i32 %9 to i64
  br i1 %10, label %pred.load.if, label %pred.load.continue

pred.load.if:                                     ; preds = %vector.body
  %14 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %index, i32 1
  %15 = load i32, i32* %14, align 4, !tbaa !189
  br label %pred.load.continue

pred.load.continue:                               ; preds = %pred.load.if, %vector.body
  %16 = phi i32 [ poison, %vector.body ], [ %15, %pred.load.if ]
  br i1 %11, label %pred.load.if5, label %pred.load.continue6

pred.load.if5:                                    ; preds = %pred.load.continue
  %17 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %induction3, i32 1
  %18 = load i32, i32* %17, align 4, !tbaa !189
  br label %pred.load.continue6

pred.load.continue6:                              ; preds = %pred.load.if5, %pred.load.continue
  %19 = phi i32 [ poison, %pred.load.continue ], [ %18, %pred.load.if5 ]
  %20 = add nsw i32 %16, -1
  %21 = add nsw i32 %19, -1
  %22 = sext i32 %20 to i64
  %23 = sext i32 %21 to i64
  %24 = mul nsw i64 %22, %12
  %25 = mul nsw i64 %23, %13
  %26 = select i1 %10, i64 %24, i64 0
  %predphi = add i64 %vec.phi, %26
  %27 = select i1 %11, i64 %25, i64 0
  %predphi7 = add i64 %vec.phi4, %27
  %index.next = add i64 %index, 2
  %28 = icmp eq i64 %index.next, %n.vec
  br i1 %28, label %middle.block, label %vector.body, !llvm.loop !326

middle.block:                                     ; preds = %pred.load.continue6
  %bin.rdx = add i64 %predphi7, %predphi
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count.i.i
  br i1 %cmp.n, label %for.body.i13.i.preheader, label %for.body.i.i.preheader

for.body.i.i.preheader:                           ; preds = %for.body.lr.ph.i.i, %middle.block
  %indvars.iv.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %n.vec, %middle.block ]
  %index.021.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %bin.rdx, %middle.block ]
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.body.i.i.preheader, %if.end.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %if.end.i.i ], [ %indvars.iv.i.i.ph, %for.body.i.i.preheader ]
  %index.021.i.i = phi i64 [ %index.1.i.i, %if.end.i.i ], [ %index.021.i.i.ph, %for.body.i.i.preheader ]
  %stride2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %indvars.iv.i.i, i32 2
  %29 = load i32, i32* %stride2.i.i, align 4, !tbaa !185
  %cmp3.i.i = icmp sgt i32 %29, 0
  br i1 %cmp3.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %conv18.i.i = zext i32 %29 to i64
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %indvars.iv.i.i, i32 1
  %30 = load i32, i32* %extent.i.i, align 4, !tbaa !189
  %sub.i.i = add nsw i32 %30, -1
  %conv7.i.i = sext i32 %sub.i.i to i64
  %mul.i.i = mul nsw i64 %conv7.i.i, %conv18.i.i
  %add.i.i = add nsw i64 %mul.i.i, %index.021.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i64 [ %add.i.i, %if.then.i.i ], [ %index.021.i.i, %for.body.i.i ]
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %exitcond.not.i.i = icmp eq i64 %indvars.iv.next.i.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i.i, label %for.body.i13.i.preheader, label %for.body.i.i, !llvm.loop !327

for.body.i13.i.preheader:                         ; preds = %if.end.i.i, %middle.block
  %index.1.i.i.lcssa = phi i64 [ %bin.rdx, %middle.block ], [ %index.1.i.i, %if.end.i.i ]
  %min.iters.check11 = icmp ult i32 %4, 3
  br i1 %min.iters.check11, label %for.body.i13.i.preheader31, label %vector.ph12

vector.ph12:                                      ; preds = %for.body.i13.i.preheader
  %n.vec14 = and i64 %wide.trip.count.i.i, 4294967294
  br label %vector.body10

vector.body10:                                    ; preds = %pred.load.continue26, %vector.ph12
  %index15 = phi i64 [ 0, %vector.ph12 ], [ %index.next16, %pred.load.continue26 ]
  %vec.phi21 = phi i64 [ 0, %vector.ph12 ], [ %predphi27, %pred.load.continue26 ]
  %vec.phi22 = phi i64 [ 0, %vector.ph12 ], [ %predphi28, %pred.load.continue26 ]
  %induction20 = or i64 %index15, 1
  %31 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %index15, i32 2
  %32 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %induction20, i32 2
  %33 = load i32, i32* %31, align 4, !tbaa !185
  %34 = load i32, i32* %32, align 4, !tbaa !185
  %35 = icmp slt i32 %33, 0
  %36 = icmp slt i32 %34, 0
  %37 = sext i32 %33 to i64
  %38 = sext i32 %34 to i64
  br i1 %35, label %pred.load.if23, label %pred.load.continue24

pred.load.if23:                                   ; preds = %vector.body10
  %39 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %index15, i32 1
  %40 = load i32, i32* %39, align 4, !tbaa !189
  br label %pred.load.continue24

pred.load.continue24:                             ; preds = %pred.load.if23, %vector.body10
  %41 = phi i32 [ poison, %vector.body10 ], [ %40, %pred.load.if23 ]
  br i1 %36, label %pred.load.if25, label %pred.load.continue26

pred.load.if25:                                   ; preds = %pred.load.continue24
  %42 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %induction20, i32 1
  %43 = load i32, i32* %42, align 4, !tbaa !189
  br label %pred.load.continue26

pred.load.continue26:                             ; preds = %pred.load.if25, %pred.load.continue24
  %44 = phi i32 [ poison, %pred.load.continue24 ], [ %43, %pred.load.if25 ]
  %45 = add nsw i32 %41, -1
  %46 = add nsw i32 %44, -1
  %47 = sext i32 %45 to i64
  %48 = sext i32 %46 to i64
  %49 = mul nsw i64 %47, %37
  %50 = mul nsw i64 %48, %38
  %51 = select i1 %35, i64 %49, i64 0
  %predphi27 = add i64 %vec.phi21, %51
  %52 = select i1 %36, i64 %50, i64 0
  %predphi28 = add i64 %vec.phi22, %52
  %index.next16 = add i64 %index15, 2
  %53 = icmp eq i64 %index.next16, %n.vec14
  br i1 %53, label %middle.block8, label %vector.body10, !llvm.loop !328

middle.block8:                                    ; preds = %pred.load.continue26
  %bin.rdx29 = add i64 %predphi28, %predphi27
  %cmp.n18 = icmp eq i64 %n.vec14, %wide.trip.count.i.i
  br i1 %cmp.n18, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i.preheader31

for.body.i13.i.preheader31:                       ; preds = %for.body.i13.i.preheader, %middle.block8
  %indvars.iv.i10.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %n.vec14, %middle.block8 ]
  %index.018.i.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %bin.rdx29, %middle.block8 ]
  br label %for.body.i13.i

for.body.i13.i:                                   ; preds = %for.body.i13.i.preheader31, %if.end.i24.i
  %indvars.iv.i10.i = phi i64 [ %indvars.iv.next.i22.i, %if.end.i24.i ], [ %indvars.iv.i10.i.ph, %for.body.i13.i.preheader31 ]
  %index.018.i.i = phi i64 [ %index.1.i21.i, %if.end.i24.i ], [ %index.018.i.i.ph, %for.body.i13.i.preheader31 ]
  %stride2.i11.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %indvars.iv.i10.i, i32 2
  %54 = load i32, i32* %stride2.i11.i, align 4, !tbaa !185
  %cmp3.i12.i = icmp slt i32 %54, 0
  br i1 %cmp3.i12.i, label %if.then.i20.i, label %if.end.i24.i

if.then.i20.i:                                    ; preds = %for.body.i13.i
  %conv.i14.i = sext i32 %54 to i64
  %extent.i15.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %indvars.iv.i10.i, i32 1
  %55 = load i32, i32* %extent.i15.i, align 4, !tbaa !189
  %sub.i16.i = add nsw i32 %55, -1
  %conv7.i17.i = sext i32 %sub.i16.i to i64
  %mul.i18.i = mul nsw i64 %conv7.i17.i, %conv.i14.i
  %add.i19.i = add nsw i64 %mul.i18.i, %index.018.i.i
  br label %if.end.i24.i

if.end.i24.i:                                     ; preds = %if.then.i20.i, %for.body.i13.i
  %index.1.i21.i = phi i64 [ %add.i19.i, %if.then.i20.i ], [ %index.018.i.i, %for.body.i13.i ]
  %indvars.iv.next.i22.i = add nuw nsw i64 %indvars.iv.i10.i, 1
  %exitcond.not.i23.i = icmp eq i64 %indvars.iv.next.i22.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i23.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i, !llvm.loop !329

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %if.end.i24.i, %middle.block8
  %index.1.i21.i.lcssa = phi i64 [ %bin.rdx29, %middle.block8 ], [ %index.1.i21.i, %if.end.i24.i ]
  %add8.i.i = add nsw i64 %index.1.i.i.lcssa, 1
  %sub.i.1 = sub nsw i64 %add8.i.i, %index.1.i21.i.lcssa
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %if.end._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit
  %add8.i27.i = phi i64 [ 1, %if.end._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge ], [ %add8.i.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %sub.i.phi = phi i64 [ %sub.i.0, %if.end._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge ], [ %sub.i.1, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %bits.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 4, i32 1
  %56 = load i8, i8* %bits.i.i, align 1, !tbaa !144
  %conv.i.i = zext i8 %56 to i64
  %add.i4.i = add nuw nsw i64 %conv.i.i, 7
  %div.i.i = lshr i64 %add.i4.i, 3
  %mul.i = mul i64 %div.i.i, %sub.i.phi
  %call2 = tail call i8* @halide_malloc(i8* %user_context, i64 %mul.i) #14
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 2
  store i8* %call2, i8** %host, align 8, !tbaa !180
  %cmp4 = icmp eq i8* %call2, null
  br i1 %cmp4, label %cleanup13, label %if.end6

if.end6:                                          ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  %call7 = tail call i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* nonnull %buf, %struct.halide_device_interface_t* %device_interface) #15
  %cmp8.not = icmp eq i32 %call7, 0
  br i1 %cmp8.not, label %cleanup13, label %if.then9

if.then9:                                         ; preds = %if.end6
  %57 = load i8*, i8** %host, align 8, !tbaa !180
  tail call void @halide_free(i8* %user_context, i8* %57) #14
  store i8* null, i8** %host, align 8, !tbaa !180
  br label %cleanup13

cleanup13:                                        ; preds = %if.then9, %if.end6, %_ZNK15halide_buffer_t13size_in_bytesEv.exit, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -1, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ], [ %call7, %if.then9 ], [ 0, %if.end6 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_and_host_free(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.30.104, i64 0, i64 0)) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !306
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !182
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !307
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end16.i.split

if.end16.i.split:                                 ; preds = %if.end16.i
  %call11 = tail call i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #15
  br label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %call12 = tail call i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* %buf) #15
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, %if.end16.i.split
  %phi.call = phi i32 [ %call11, %if.end16.i.split ], [ %call12, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split ]
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 2
  %4 = load i8*, i8** %host, align 8, !tbaa !180
  %tobool.not = icmp eq i8* %4, null
  br i1 %tobool.not, label %if.end5, label %if.then2

if.then2:                                         ; preds = %if.end
  tail call void @halide_free(i8* %user_context, i8* nonnull %4) #14
  store i8* null, i8** %host, align 8, !tbaa !180
  br label %if.end5

if.end5:                                          ; preds = %if.then2, %if.end
  %flags3.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %5 = load i64, i64* %flags3.i.i, align 8, !tbaa !307
  %and.i.i18 = and i64 %5, -4
  store i64 %and.i.i18, i64* %flags3.i.i, align 8, !tbaa !307
  br label %cleanup

cleanup:                                          ; preds = %if.end5, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %phi.call, %if.end5 ], [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_wrap_native(i8* %user_context, %struct.halide_buffer_t* %buf, i64 %handle, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.31.105, i64 0, i64 0)) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !306
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !182
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !307
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup12

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !306
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  %cmp3.not = icmp eq %struct.halide_device_interface_t* %4, %device_interface
  %or.cond = or i1 %cmp2.not, %cmp3.not
  br i1 %or.cond, label %if.end5, label %if.then4

if.then4:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.32.106, i64 0, i64 0)) #14
  br label %cleanup12

if.end5:                                          ; preds = %if.end
  %device_interface1 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !319
  tail call void %6() #14
  store %struct.halide_device_interface_t* %device_interface, %struct.halide_device_interface_t** %device_interface1, align 8, !tbaa !306
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %wrap_native = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 14
  %8 = load i32 (i8*, %struct.halide_buffer_t*, i64)*, i32 (i8*, %struct.halide_buffer_t*, i64)** %wrap_native, align 8, !tbaa !330
  %call8 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf, i64 %handle) #14
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !321
  tail call void %10() #14
  %tobool.not = icmp eq i32 %call8, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -16
  ret i32 %spec.select

cleanup12:                                        ; preds = %if.then4, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -42, %if.then4 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_detach_native(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.33.107, i64 0, i64 0)) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !306
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !182
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !307
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !306
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2.not, label %cleanup, label %if.then3

if.then3:                                         ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !319
  tail call void %6() #14
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %detach_native = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 15
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %detach_native, align 8, !tbaa !331
  %call5 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #14
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !321
  tail call void %10() #14
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %11 = load i64, i64* %device, align 8, !tbaa !182
  %cmp7 = icmp eq i64 %11, 0
  br i1 %cmp7, label %do.end, label %if.then8

if.then8:                                         ; preds = %if.then3
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([127 x i8], [127 x i8]* @.str.34.108, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %do.end

do.end:                                           ; preds = %if.then8, %if.then3
  %tobool.not = icmp eq i32 %call5, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -33
  ret i32 %spec.select

cleanup:                                          ; preds = %if.end, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_wrap_native(i8* %user_context, %struct.halide_buffer_t* %buf, i64 %handle) local_unnamed_addr #0 {
entry:
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !182
  %cmp.not = icmp eq i64 %0, 0
  br i1 %cmp.not, label %if.end, label %return

if.end:                                           ; preds = %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %1 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !306
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %1, i64 0, i32 15
  %2 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %2, i64 0, i32 0
  %3 = load void ()*, void ()** %use_module, align 8, !tbaa !319
  tail call void %3() #14
  store i64 %handle, i64* %device, align 8, !tbaa !182
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i32 [ 0, %if.end ], [ -32, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_detach_native(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.35, i64 0, i64 0)) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !306
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !182
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !307
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %.pre = load i64, i64* %device.phi.trans.insert, align 8, !tbaa !182
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi i64 [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %1, %if.end16.i ]
  %cmp1 = icmp eq i64 %4, 0
  br i1 %cmp1, label %cleanup, label %if.end3

if.end3:                                          ; preds = %if.end
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %5 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !306
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %5, i64 0, i32 15
  %6 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %6, i64 0, i32 1
  %7 = load void ()*, void ()** %release_module, align 8, !tbaa !321
  tail call void %7() #14
  store i64 0, i64* %device, align 8, !tbaa !182
  store %struct.halide_device_interface_t* null, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !306
  br label %cleanup

cleanup:                                          ; preds = %if.end3, %if.end, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ 0, %if.end3 ], [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak void @halide_device_and_host_free_as_destructor(i8* %user_context, i8* %obj) local_unnamed_addr #0 {
entry:
  %0 = bitcast i8* %obj to %struct.halide_buffer_t*
  %call = tail call i32 @halide_device_and_host_free(i8* %user_context, %struct.halide_buffer_t* %0) #15
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_device_host_nop_free(i8* %user_context, i8* %obj) local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_default_buffer_copy(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) local_unnamed_addr #2 {
entry:
  ret i32 -39
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_buffer_copy_already_locked(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) local_unnamed_addr #0 {
entry:
  %c = alloca %"struct.Halide::Runtime::Internal::device_copy", align 8
  %tobool.not = icmp eq %struct.halide_device_interface_t* %dst_device_interface, null
  br i1 %tobool.not, label %if.end13, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !306
  %tobool1.not = icmp eq %struct.halide_device_interface_t* %0, null
  %cmp.not = icmp eq %struct.halide_device_interface_t* %0, %dst_device_interface
  %or.cond = or i1 %tobool1.not, %cmp.not
  br i1 %or.cond, label %land.lhs.true5, label %if.then

if.then:                                          ; preds = %land.lhs.true
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.41, i64 0, i64 0)) #14
  br label %cleanup143

land.lhs.true5:                                   ; preds = %land.lhs.true
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 0
  %1 = load i64, i64* %device, align 8, !tbaa !182
  %tobool6.not = icmp eq i64 %1, 0
  br i1 %tobool6.not, label %if.then7, label %if.end13

if.then7:                                         ; preds = %land.lhs.true5
  %call = tail call i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* nonnull %dst, %struct.halide_device_interface_t* nonnull %dst_device_interface) #15
  %tobool10.not = icmp eq i32 %call, 0
  br i1 %tobool10.not, label %if.end13, label %cleanup143

if.end13:                                         ; preds = %if.then7, %land.lhs.true5, %entry
  %device14 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 0
  %2 = load i64, i64* %device14, align 8, !tbaa !182
  %cmp15.not = icmp eq i64 %2, 0
  %host22.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 2
  %.pre = load i8*, i8** %host22.phi.trans.insert, align 8, !tbaa !180
  %cmp23.not = icmp eq i8* %.pre, null
  br i1 %cmp15.not, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %if.end13
  br i1 %cmp23.not, label %land.end32, label %land.end.thread264

land.end.thread264:                               ; preds = %land.rhs
  %flags.i.i243 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 3
  %3 = load i64, i64* %flags.i.i243, align 8, !tbaa !307
  %and.i.i244 = and i64 %3, 1
  %cmp.i.i.not = icmp ne i64 %and.i.i244, 0
  br label %land.rhs26

land.end:                                         ; preds = %if.end13
  br i1 %cmp23.not, label %land.end32, label %land.end.land.rhs26_crit_edge

land.end.land.rhs26_crit_edge:                    ; preds = %land.end
  %flags.i.i247.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 3
  %.pre1 = load i64, i64* %flags.i.i247.phi.trans.insert, align 8, !tbaa !307
  br label %land.rhs26

land.rhs26:                                       ; preds = %land.end.land.rhs26_crit_edge, %land.end.thread264
  %4 = phi i64 [ %3, %land.end.thread264 ], [ %.pre1, %land.end.land.rhs26_crit_edge ]
  %5 = phi i1 [ %cmp.i.i.not, %land.end.thread264 ], [ true, %land.end.land.rhs26_crit_edge ]
  %and.i.i248 = and i64 %4, 2
  %cmp.i.i249.not = icmp eq i64 %and.i.i248, 0
  br i1 %cmp.i.i249.not, label %land.end32, label %lor.rhs28

lor.rhs28:                                        ; preds = %land.rhs26
  %device_interface29 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %6 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface29, align 8, !tbaa !306
  %cmp30 = icmp ne %struct.halide_device_interface_t* %6, null
  br label %land.end32

land.end32:                                       ; preds = %lor.rhs28, %land.rhs26, %land.end, %land.rhs
  %cmp23.not263 = phi i1 [ true, %land.end ], [ false, %land.rhs26 ], [ false, %lor.rhs28 ], [ true, %land.rhs ]
  %7 = phi i1 [ true, %land.end ], [ %5, %land.rhs26 ], [ %5, %lor.rhs28 ], [ false, %land.rhs ]
  %8 = phi i1 [ true, %land.end ], [ false, %land.rhs26 ], [ %cmp30, %lor.rhs28 ], [ true, %land.rhs ]
  %host34 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 2
  %9 = load i8*, i8** %host34, align 8, !tbaa !180
  %cmp35.not = icmp eq i8* %9, null
  %cmp20.not = xor i1 %tobool.not, true
  %10 = and i1 %tobool.not, %cmp35.not
  br i1 %10, label %cleanup143, label %if.end41

if.end41:                                         ; preds = %land.end32
  %brmerge229 = or i1 %tobool.not, %7
  br i1 %brmerge229, label %if.then51, label %if.end49

if.end49:                                         ; preds = %if.end41
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i64 0, i32 15
  %11 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %buffer_copy = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %11, i64 0, i32 10
  %12 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy, align 8, !tbaa !332
  %call48 = tail call i32 %12(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* nonnull %dst_device_interface, %struct.halide_buffer_t* nonnull %dst) #14
  %cmp50 = icmp eq i32 %call48, -42
  br i1 %cmp50, label %if.then51, label %if.end117

if.then51:                                        ; preds = %if.end49, %if.end41
  %brmerge231.demorgan = and i1 %cmp23.not263, %cmp35.not
  br i1 %brmerge231.demorgan, label %cleanup143, label %if.end58

if.end58:                                         ; preds = %if.then51
  %brmerge234 = or i1 %8, %cmp20.not
  br i1 %brmerge234, label %if.else, label %if.end117.thread258

if.end117.thread258:                              ; preds = %if.end58
  %13 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %c to i8*
  call void @llvm.lifetime.start.p0i8(i64 416, i8* nonnull %13) #11
  call void @_ZN6Halide7Runtime8Internal16make_buffer_copyEPK15halide_buffer_tbS4_b(%"struct.Halide::Runtime::Internal::device_copy"* nonnull sret(%"struct.Halide::Runtime::Internal::device_copy") align 8 %c, %struct.halide_buffer_t* nonnull %src, i1 zeroext true, %struct.halide_buffer_t* nonnull %dst, i1 zeroext true) #15
  call void @_ZN6Halide7Runtime8Internal11copy_memoryERKNS1_11device_copyEPv(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %c, i8* %user_context) #15
  call void @llvm.lifetime.end.p0i8(i64 416, i8* nonnull %13) #11
  br label %land.lhs.true126

if.else:                                          ; preds = %if.end58
  %brmerge237 = or i1 %7, %cmp20.not
  br i1 %brmerge237, label %if.else81, label %if.then66

if.then66:                                        ; preds = %if.else
  %device_interface69 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %14 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface69, align 8, !tbaa !306
  %impl70 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %14, i64 0, i32 15
  %15 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl70, align 8, !tbaa !313
  %buffer_copy71 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %15, i64 0, i32 10
  %16 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy71, align 8, !tbaa !332
  %call72 = tail call i32 %16(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* null, %struct.halide_buffer_t* nonnull %dst) #14
  %cmp73 = icmp eq i32 %call72, -42
  br i1 %cmp73, label %if.then74, label %if.end117

if.then74:                                        ; preds = %if.then66
  %call75 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* nonnull %src) #15
  %tobool76.not = icmp eq i32 %call75, 0
  br i1 %tobool76.not, label %if.then77, label %cleanup143

if.then77:                                        ; preds = %if.then74
  %call78 = tail call i32 @halide_buffer_copy_already_locked(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* null, %struct.halide_buffer_t* nonnull %dst) #15
  br label %if.end117

if.else81:                                        ; preds = %if.else
  %brmerge239 = or i1 %7, %cmp35.not
  br i1 %brmerge239, label %if.else98, label %if.then85

if.then85:                                        ; preds = %if.else81
  %device_interface90 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %17 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface90, align 8, !tbaa !306
  %impl91 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %17, i64 0, i32 15
  %18 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl91, align 8, !tbaa !313
  %buffer_copy92 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %18, i64 0, i32 10
  %19 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy92, align 8, !tbaa !332
  %call93 = tail call i32 %19(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* null, %struct.halide_buffer_t* nonnull %dst) #14
  %cmp94 = icmp eq i32 %call93, 0
  br i1 %cmp94, label %if.then95, label %cleanup143

if.then95:                                        ; preds = %if.then85
  %flags.i.i245 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 3
  %20 = load i64, i64* %flags.i.i245, align 8, !tbaa !307
  %or.i.i246 = or i64 %20, 1
  store i64 %or.i.i246, i64* %flags.i.i245, align 8, !tbaa !307
  %call96 = tail call i32 @copy_to_device_already_locked(i8* %user_context, %struct.halide_buffer_t* nonnull %dst, %struct.halide_device_interface_t* %dst_device_interface) #15
  br label %if.end117

if.else98:                                        ; preds = %if.else81
  br i1 %tobool.not, label %cleanup143, label %if.then100

if.then100:                                       ; preds = %if.else98
  %call103 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* nonnull %src) #15
  %cmp104 = icmp eq i32 %call103, 0
  br i1 %cmp104, label %if.then105, label %cleanup143

if.then105:                                       ; preds = %if.then100
  %impl106 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i64 0, i32 15
  %21 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl106, align 8, !tbaa !313
  %buffer_copy107 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %21, i64 0, i32 10
  %22 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy107, align 8, !tbaa !332
  %call108 = tail call i32 %22(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* nonnull %dst_device_interface, %struct.halide_buffer_t* nonnull %dst) #14
  br label %if.end117

if.end117:                                        ; preds = %if.then105, %if.then95, %if.then77, %if.then66, %if.end49
  %err.1 = phi i32 [ %call78, %if.then77 ], [ %call72, %if.then66 ], [ %call96, %if.then95 ], [ %call108, %if.then105 ], [ %call48, %if.end49 ]
  %cond = icmp eq i32 %err.1, 0
  br i1 %cond, label %land.lhs.true126, label %cleanup143

land.lhs.true126:                                 ; preds = %if.end117, %if.end117.thread258
  %cmp127.not.old = icmp eq %struct.halide_buffer_t* %dst, %src
  br i1 %cmp127.not.old, label %cleanup143, label %if.then128

if.then128:                                       ; preds = %land.lhs.true126
  %flags.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 3
  %23 = load i64, i64* %flags.i.i, align 8, !tbaa !307
  %or.i.i = and i64 %23, -4
  br i1 %tobool.not, label %if.else133, label %if.then130

if.then130:                                       ; preds = %if.then128
  %or.i.i242 = or i64 %or.i.i, 2
  store i64 %or.i.i242, i64* %flags.i.i, align 8, !tbaa !307
  br label %cleanup143

if.else133:                                       ; preds = %if.then128
  %and.i.i251 = or i64 %or.i.i, 1
  store i64 %and.i.i251, i64* %flags.i.i, align 8, !tbaa !307
  br label %cleanup143

cleanup143:                                       ; preds = %if.else133, %if.then130, %land.lhs.true126, %if.end117, %if.then100, %if.else98, %if.then85, %if.then74, %if.then51, %land.end32, %if.then7, %if.then
  %retval.1 = phi i32 [ -42, %if.then ], [ %call, %if.then7 ], [ -34, %land.end32 ], [ 0, %if.then130 ], [ 0, %if.else133 ], [ 0, %land.lhs.true126 ], [ -42, %if.then51 ], [ %err.1, %if.end117 ], [ -42, %if.else98 ], [ %call103, %if.then100 ], [ %call93, %if.then85 ], [ %call75, %if.then74 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind
define weak i32 @halide_buffer_copy(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #14
  %tobool.not = icmp eq %struct.halide_device_interface_t* %dst_device_interface, null
  br i1 %tobool.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i64 0, i32 15
  %0 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %0, i64 0, i32 0
  %1 = load void ()*, void ()** %use_module, align 8, !tbaa !319
  tail call void %1() #14
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %2 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !306
  %tobool11.not = icmp eq %struct.halide_device_interface_t* %2, null
  br i1 %tobool11.not, label %if.end16, label %if.then12

if.then12:                                        ; preds = %if.end
  %impl14 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %2, i64 0, i32 15
  %3 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl14, align 8, !tbaa !313
  %use_module15 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %3, i64 0, i32 0
  %4 = load void ()*, void ()** %use_module15, align 8, !tbaa !319
  tail call void %4() #14
  br label %if.end16

if.end16:                                         ; preds = %if.then12, %if.end
  %call = tail call i32 @halide_buffer_copy_already_locked(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) #15
  br i1 %tobool.not, label %if.end20, label %if.then18

if.then18:                                        ; preds = %if.end16
  %impl19 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl19, align 8, !tbaa !313
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 1
  %6 = load void ()*, void ()** %release_module, align 8, !tbaa !321
  tail call void %6() #14
  br label %if.end20

if.end20:                                         ; preds = %if.then18, %if.end16
  %7 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !306
  %tobool22.not = icmp eq %struct.halide_device_interface_t* %7, null
  br i1 %tobool22.not, label %if.end27, label %if.then23

if.then23:                                        ; preds = %if.end20
  %impl25 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %7, i64 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl25, align 8, !tbaa !313
  %release_module26 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i64 0, i32 1
  %9 = load void ()*, void ()** %release_module26, align 8, !tbaa !321
  tail call void %9() #14
  br label %if.end27

if.end27:                                         ; preds = %if.then23, %if.end20
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #14
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_crop(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_buffer_t* %dst) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.58, i64 0, i64 0)) #14
  ret i32 -40
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_slice(i8* %user_context, %struct.halide_buffer_t* %src, i32 %slice_dim, i32 %slice_pos, %struct.halide_buffer_t* %dst) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.59, i64 0, i64 0)) #14
  ret i32 -40
}

; Function Attrs: nounwind
define weak i32 @halide_device_crop(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_buffer_t* %dst) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #14
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !182
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %device1 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 0
  %1 = load i64, i64* %device1, align 8, !tbaa !182
  %tobool2.not = icmp eq i64 %1, 0
  br i1 %tobool2.not, label %if.end4, label %if.then3

if.then3:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.60, i64 0, i64 0)) #14
  br label %cleanup

if.end4:                                          ; preds = %if.end
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 5
  %2 = load i32, i32* %dimensions, align 4, !tbaa !183
  %dimensions5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 5
  %3 = load i32, i32* %dimensions5, align 4, !tbaa !183
  %cmp.not = icmp eq i32 %2, %3
  br i1 %cmp.not, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end4
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.61, i64 0, i64 0)) #14
  br label %cleanup

if.end7:                                          ; preds = %if.end4
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %4 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !306
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !319
  tail call void %6() #14
  %7 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !306
  %impl9 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %7, i64 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl9, align 8, !tbaa !313
  %device_crop = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i64 0, i32 11
  %9 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)** %device_crop, align 8, !tbaa !333
  %call = tail call i32 %9(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_buffer_t* nonnull %dst) #14
  br label %cleanup

cleanup:                                          ; preds = %if.end7, %if.then6, %if.then3, %entry
  %retval.0 = phi i32 [ -41, %if.then3 ], [ -41, %if.then6 ], [ %call, %if.end7 ], [ 0, %entry ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #14
  ret i32 %retval.0
}

; Function Attrs: nounwind
define weak i32 @halide_device_slice(i8* %user_context, %struct.halide_buffer_t* %src, i32 %slice_dim, i32 %slice_pos, %struct.halide_buffer_t* %dst) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #14
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !182
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %device1 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 0
  %1 = load i64, i64* %device1, align 8, !tbaa !182
  %tobool2.not = icmp eq i64 %1, 0
  br i1 %tobool2.not, label %if.end4, label %if.then3

if.then3:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.60, i64 0, i64 0)) #14
  br label %cleanup

if.end4:                                          ; preds = %if.end
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 5
  %2 = load i32, i32* %dimensions, align 4, !tbaa !183
  %dimensions5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 5
  %3 = load i32, i32* %dimensions5, align 4, !tbaa !183
  %add = add nsw i32 %3, 1
  %cmp.not = icmp eq i32 %2, %add
  br i1 %cmp.not, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end4
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.64, i64 0, i64 0)) #14
  br label %cleanup

if.end7:                                          ; preds = %if.end4
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %4 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !306
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !319
  tail call void %6() #14
  %7 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !306
  %impl9 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %7, i64 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl9, align 8, !tbaa !313
  %device_slice = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i64 0, i32 12
  %9 = load i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)** %device_slice, align 8, !tbaa !334
  %call = tail call i32 %9(i8* %user_context, %struct.halide_buffer_t* nonnull %src, i32 %slice_dim, i32 %slice_pos, %struct.halide_buffer_t* nonnull %dst) #14
  br label %cleanup

cleanup:                                          ; preds = %if.end7, %if.then6, %if.then3, %entry
  %retval.0 = phi i32 [ -41, %if.then3 ], [ -41, %if.then6 ], [ %call, %if.end7 ], [ 0, %entry ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #14
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_release_crop(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !182
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %return, label %if.end

if.end:                                           ; preds = %entry
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.58, i64 0, i64 0)) #14
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i32 [ -40, %if.end ], [ 0, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind
define weak i32 @halide_device_release_crop(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #4 {
entry:
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !182
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %return, label %if.then

if.then:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #14
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %1 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !306
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %1, i64 0, i32 15
  %2 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %device_release_crop = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %2, i64 0, i32 13
  %3 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_release_crop, align 8, !tbaa !335
  %call = tail call i32 %3(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #14
  store i64 0, i64* %device, align 8, !tbaa !182
  %4 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %4, i64 0, i32 1
  %5 = load void ()*, void ()** %release_module, align 8, !tbaa !321
  tail call void %5() #14
  store %struct.halide_device_interface_t* null, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !306
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #14
  br label %return

return:                                           ; preds = %if.then, %entry
  %retval.0 = phi i32 [ %call, %if.then ], [ 0, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind willreturn mustprogress
define weak float @halide_float16_bits_to_float(i16 zeroext %bits) local_unnamed_addr #2 {
entry:
  %conv = zext i16 %bits to i32
  %and2 = and i32 %conv, 1023
  %and4 = lshr i32 %conv, 10
  %0 = and i32 %and4, 31
  %cmp = icmp eq i32 %0, 0
  %cmp5 = icmp ne i32 %and2, 0
  %or.cond = and i1 %cmp5, %cmp
  br i1 %or.cond, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = tail call i32 @llvm.ctlz.i32(i32 %and2, i1 true), !range !336
  %sub6 = xor i32 %1, 31
  %shl7 = shl nuw i32 1, %sub6
  %neg = xor i32 %shl7, -1
  %and8 = and i32 %and2, %neg
  %sub9 = sub nsw i32 23, %sub6
  %shl10 = shl i32 %and8, %sub9
  %add11.neg = mul nsw i32 %1, -8388608
  %shl12 = add i32 %add11.neg, 1124073472
  br label %if.end28

if.else:                                          ; preds = %entry
  %shl14 = shl nuw nsw i32 %and2, 13
  br i1 %cmp, label %if.end28, label %if.else18

if.else18:                                        ; preds = %if.else
  %cmp19 = icmp eq i32 %0, 31
  br i1 %cmp19, label %if.end28, label %if.else21

if.else21:                                        ; preds = %if.else18
  %add22 = shl nuw nsw i32 %0, 23
  %phi.bo = add nuw nsw i32 %add22, 939524096
  br label %if.end28

if.end28:                                         ; preds = %if.else21, %if.else18, %if.else, %if.then
  %shl14.sink = phi i32 [ %shl12, %if.then ], [ %shl14, %if.else18 ], [ %shl14, %if.else ], [ %shl14, %if.else21 ]
  %reEncodedExponent15.0.sink = phi i32 [ %shl10, %if.then ], [ 2139095040, %if.else18 ], [ 0, %if.else ], [ %phi.bo, %if.else21 ]
  %bits.signext = sext i16 %bits to i32
  %shl = and i32 %bits.signext, -2147483648
  %or25 = or i32 %shl14.sink, %shl
  %or26 = or i32 %or25, %reEncodedExponent15.0.sink
  %result.sroa.0.0 = bitcast i32 %or26 to float
  ret float %result.sroa.0.0
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #7

; Function Attrs: nounwind willreturn mustprogress
define weak double @halide_float16_bits_to_double(i16 zeroext %bits) local_unnamed_addr #2 {
entry:
  %call = tail call float @halide_float16_bits_to_float(i16 zeroext %bits) #15
  %conv = fpext float %call to double
  ret double %conv
}

; Function Attrs: nounwind
define weak i32 @halide_error_bounds_inference_call_failed(i8* %user_context, i8* %extern_stage_name, i32 %result) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i71 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.111, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i72 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.111, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i71, %entry.split ], [ %call.i72, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i10 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %extern_stage_name) #14
  %call.i13 = tail call i8* @halide_string_to_string(i8* %call.i10, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1.112, i64 0, i64 0)) #14
  %conv.i = sext i32 %result to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %call.i13, i8* %ref.tmp.sroa.16.0, i64 %conv.i, i32 1) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i16 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 %result
}

; Function Attrs: nounwind
define weak i32 @halide_error_extern_stage_failed(i8* %user_context, i8* %extern_stage_name, i32 %result) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i71 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2.113, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i72 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2.113, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i71, %entry.split ], [ %call.i72, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i10 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %extern_stage_name) #14
  %call.i13 = tail call i8* @halide_string_to_string(i8* %call.i10, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1.112, i64 0, i64 0)) #14
  %conv.i = sext i32 %result to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %call.i13, i8* %ref.tmp.sroa.16.0, i64 %conv.i, i32 1) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i16 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 %result
}

; Function Attrs: nounwind
define weak i32 @halide_error_explicit_bounds_too_small(i8* %user_context, i8* %func_name, i8* %var_name, i32 %min_bound, i32 %max_bound, i32 %min_required, i32 %max_required) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i151 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3.114, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i152 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3.114, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i151, %entry.split ], [ %call.i152, %if.then6.i ]
  %ref.tmp.sroa.34.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i18 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.34.0, i8* %var_name) #14
  %call.i21 = tail call i8* @halide_string_to_string(i8* %call.i18, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4.115, i64 0, i64 0)) #14
  %call.i24 = tail call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.34.0, i8* %func_name) #14
  %call.i27 = tail call i8* @halide_string_to_string(i8* %call.i24, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5.116, i64 0, i64 0)) #14
  %conv.i = sext i32 %min_bound to i64
  %call.i30 = tail call i8* @halide_int64_to_string(i8* %call.i27, i8* %ref.tmp.sroa.34.0, i64 %conv.i, i32 1) #14
  %call.i33 = tail call i8* @halide_string_to_string(i8* %call.i30, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.117, i64 0, i64 0)) #14
  %conv.i36 = sext i32 %max_bound to i64
  %call.i37 = tail call i8* @halide_int64_to_string(i8* %call.i33, i8* %ref.tmp.sroa.34.0, i64 %conv.i36, i32 1) #14
  %call.i40 = tail call i8* @halide_string_to_string(i8* %call.i37, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.7.118, i64 0, i64 0)) #14
  %conv.i43 = sext i32 %min_required to i64
  %call.i44 = tail call i8* @halide_int64_to_string(i8* %call.i40, i8* %ref.tmp.sroa.34.0, i64 %conv.i43, i32 1) #14
  %call.i47 = tail call i8* @halide_string_to_string(i8* %call.i44, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.117, i64 0, i64 0)) #14
  %conv.i50 = sext i32 %max_required to i64
  %call.i51 = tail call i8* @halide_int64_to_string(i8* %call.i47, i8* %ref.tmp.sroa.34.0, i64 %conv.i50, i32 1) #14
  %call.i54 = tail call i8* @halide_string_to_string(i8* %call.i51, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.119, i64 0, i64 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i54 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -2
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_type(i8* %user_context, i8* %func_name, i32 %type_given_bits, i32 %correct_type_bits) local_unnamed_addr #4 {
entry:
  %type_given_bits.addr = alloca i32, align 4
  %correct_type_bits.addr = alloca i32, align 4
  %correct_type = alloca %struct.halide_type_t, align 2
  %type_given = alloca %struct.halide_type_t, align 2
  store i32 %type_given_bits, i32* %type_given_bits.addr, align 4, !tbaa !41
  store i32 %correct_type_bits, i32* %correct_type_bits.addr, align 4, !tbaa !41
  %0 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %correct_type, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0) #11
  store i8 0, i8* %0, align 2, !tbaa !304
  %bits.i = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %correct_type, i64 0, i32 1
  store i8 0, i8* %bits.i, align 1, !tbaa !144
  %lanes.i = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %correct_type, i64 0, i32 2
  store i16 0, i16* %lanes.i, align 2, !tbaa !305
  %1 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %type_given, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1) #11
  store i8 0, i8* %1, align 2, !tbaa !304
  %bits.i8 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %type_given, i64 0, i32 1
  store i8 0, i8* %bits.i8, align 1, !tbaa !144
  %lanes.i9 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %type_given, i64 0, i32 2
  store i16 0, i16* %lanes.i9, align 2, !tbaa !305
  %2 = bitcast i32* %correct_type_bits.addr to i8*
  %call = call i8* @memcpy(i8* nonnull %0, i8* nonnull %2, i64 4) #14
  %3 = bitcast i32* %type_given_bits.addr to i8*
  %call1 = call i8* @memcpy(i8* nonnull %1, i8* nonnull %3, i64 4) #14
  %call.i = call i8* @malloc(i64 1024) #14
  %tobool.not.i12 = icmp eq i8* %call.i, null
  br i1 %tobool.not.i12, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i151 = call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i152 = call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* %func_name) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i151, %entry.split ], [ %call.i152, %if.then6.i ]
  %ref.tmp.sroa.18.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i18 = call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.9.120, i64 0, i64 0)) #14
  %call.i21 = call i8* @halide_type_to_string(i8* %call.i18, i8* %ref.tmp.sroa.18.0, %struct.halide_type_t* nonnull %correct_type) #14
  %call.i24 = call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.10.121, i64 0, i64 0)) #14
  %call.i27 = call i8* @halide_type_to_string(i8* %call.i24, i8* %ref.tmp.sroa.18.0, %struct.halide_type_t* nonnull %type_given) #14
  br i1 %tobool.not.i12, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i27 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  call void @free(i8* %call.i) #14
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0) #11
  ret i32 -3
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_dimensions(i8* %user_context, i8* %func_name, i32 %dimensions_given, i32 %correct_dimensions) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* %func_name) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.11.122, i64 0, i64 0)) #14
  %conv.i = sext i32 %correct_dimensions to i64
  %call.i14 = tail call i8* @halide_int64_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i64 %conv.i, i32 1) #14
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.12.123, i64 0, i64 0)) #14
  %conv.i20 = sext i32 %dimensions_given to i64
  %call.i21 = tail call i8* @halide_int64_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i64 %conv.i20, i32 1) #14
  %call.i24 = tail call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.13.124, i64 0, i64 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i24 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -43
}

; Function Attrs: nounwind
define weak i32 @halide_error_access_out_of_bounds(i8* %user_context, i8* %func_name, i32 %dimension, i32 %min_touched, i32 %max_touched, i32 %min_valid, i32 %max_valid) local_unnamed_addr #4 {
entry:
  %cmp = icmp slt i32 %min_touched, %min_valid
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.split, label %if.then6.i

if.then.split:                                    ; preds = %if.then
  %call.i271 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %if.then
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i272 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* %func_name) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %if.then.split, %if.then6.i
  %phi.call = phi i8* [ %call.i271, %if.then.split ], [ %call.i272, %if.then6.i ]
  %ref.tmp.sroa.22.0 = phi i8* [ null, %if.then.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i30 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.14.125, i64 0, i64 0)) #14
  %conv.i = sext i32 %min_touched to i64
  %call.i33 = tail call i8* @halide_int64_to_string(i8* %call.i30, i8* %ref.tmp.sroa.22.0, i64 %conv.i, i32 1) #14
  %call.i36 = tail call i8* @halide_string_to_string(i8* %call.i33, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.15.126, i64 0, i64 0)) #14
  %conv.i39 = sext i32 %min_valid to i64
  %call.i40 = tail call i8* @halide_int64_to_string(i8* %call.i36, i8* %ref.tmp.sroa.22.0, i64 %conv.i39, i32 1) #14
  %call.i43 = tail call i8* @halide_string_to_string(i8* %call.i40, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.16.127, i64 0, i64 0)) #14
  %conv.i46 = sext i32 %dimension to i64
  %call.i47 = tail call i8* @halide_int64_to_string(i8* %call.i43, i8* %ref.tmp.sroa.22.0, i64 %conv.i46, i32 1) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %if.end17.sink.split

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i47 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %if.end17.sink.split

if.else:                                          ; preds = %entry
  %cmp7 = icmp sgt i32 %max_touched, %max_valid
  br i1 %cmp7, label %if.then8, label %if.end17

if.then8:                                         ; preds = %if.else
  %call.i53 = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i56 = icmp eq i8* %call.i53, null
  br i1 %tobool.not.i56, label %if.then8.split, label %if.then6.i59

if.then8.split:                                   ; preds = %if.then8
  %call.i653 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62

if.then6.i59:                                     ; preds = %if.then8
  %add.ptr.i57 = getelementptr inbounds i8, i8* %call.i53, i64 1023
  store i8 0, i8* %add.ptr.i57, align 1, !tbaa !18
  %call.i654 = tail call i8* @halide_string_to_string(i8* nonnull %call.i53, i8* nonnull %add.ptr.i57, i8* %func_name) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62: ; preds = %if.then8.split, %if.then6.i59
  %phi.call5 = phi i8* [ %call.i653, %if.then8.split ], [ %call.i654, %if.then6.i59 ]
  %ref.tmp9.sroa.22.0 = phi i8* [ null, %if.then8.split ], [ %add.ptr.i57, %if.then6.i59 ]
  %call.i68 = tail call i8* @halide_string_to_string(i8* %phi.call5, i8* %ref.tmp9.sroa.22.0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.14.125, i64 0, i64 0)) #14
  %conv.i71 = sext i32 %max_touched to i64
  %call.i72 = tail call i8* @halide_int64_to_string(i8* %call.i68, i8* %ref.tmp9.sroa.22.0, i64 %conv.i71, i32 1) #14
  %call.i75 = tail call i8* @halide_string_to_string(i8* %call.i72, i8* %ref.tmp9.sroa.22.0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.17.128, i64 0, i64 0)) #14
  %conv.i78 = sext i32 %max_valid to i64
  %call.i79 = tail call i8* @halide_int64_to_string(i8* %call.i75, i8* %ref.tmp9.sroa.22.0, i64 %conv.i78, i32 1) #14
  %call.i82 = tail call i8* @halide_string_to_string(i8* %call.i79, i8* %ref.tmp9.sroa.22.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.16.127, i64 0, i64 0)) #14
  %conv.i85 = sext i32 %dimension to i64
  %call.i86 = tail call i8* @halide_int64_to_string(i8* %call.i82, i8* %ref.tmp9.sroa.22.0, i64 %conv.i85, i32 1) #14
  br i1 %tobool.not.i56, label %if.then.i90, label %if.else.i100

if.then.i90:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %if.end17.sink.split

if.else.i100:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62
  %sub.ptr.lhs.cast.i.i95 = ptrtoint i8* %call.i86 to i64
  %sub.ptr.rhs.cast.i.i96 = ptrtoint i8* %call.i53 to i64
  %sub.ptr.sub.i.i97 = sub i64 1, %sub.ptr.rhs.cast.i.i96
  %add.i.i98 = add i64 %sub.ptr.sub.i.i97, %sub.ptr.lhs.cast.i.i95
  %call.i.i99 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i53, i64 %add.i.i98) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i53) #14
  br label %if.end17.sink.split

if.end17.sink.split:                              ; preds = %if.else.i100, %if.then.i90, %if.else.i, %if.then.i
  %call.i53.sink = phi i8* [ %call.i, %if.else.i ], [ null, %if.then.i ], [ %call.i53, %if.else.i100 ], [ null, %if.then.i90 ]
  tail call void @free(i8* %call.i53.sink) #14
  br label %if.end17

if.end17:                                         ; preds = %if.end17.sink.split, %if.else
  ret i32 -4
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_allocation_too_large(i8* %user_context, i8* %buffer_name, i64 %allocation_size, i64 %max_size) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.18.129, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.18.129, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %buffer_name) #14
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #14
  %call.i17 = tail call i8* @halide_uint64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %allocation_size, i32 1) #14
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.20.131, i64 0, i64 0)) #14
  %call.i23 = tail call i8* @halide_uint64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_size, i32 1) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -5
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_extents_negative(i8* %user_context, i8* %buffer_name, i32 %dimension, i32 %extent) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i91 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.21.132, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i92 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.21.132, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i91, %entry.split ], [ %call.i92, %if.then6.i ]
  %ref.tmp.sroa.22.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i12 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.22.0, i8* %buffer_name) #14
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.22.133, i64 0, i64 0)) #14
  %conv.i = sext i32 %dimension to i64
  %call.i18 = tail call i8* @halide_int64_to_string(i8* %call.i15, i8* %ref.tmp.sroa.22.0, i64 %conv.i, i32 1) #14
  %call.i21 = tail call i8* @halide_string_to_string(i8* %call.i18, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.23.134, i64 0, i64 0)) #14
  %conv.i24 = sext i32 %extent to i64
  %call.i25 = tail call i8* @halide_int64_to_string(i8* %call.i21, i8* %ref.tmp.sroa.22.0, i64 %conv.i24, i32 1) #14
  %call.i28 = tail call i8* @halide_string_to_string(i8* %call.i25, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.119, i64 0, i64 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i28 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -28
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_extents_too_large(i8* %user_context, i8* %buffer_name, i64 %actual_size, i64 %max_size) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.24.135, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.24.135, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %buffer_name) #14
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #14
  %call.i17 = tail call i8* @halide_int64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %actual_size, i32 1) #14
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.20.131, i64 0, i64 0)) #14
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_size, i32 1) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -6
}

; Function Attrs: nounwind
define weak i32 @halide_error_constraints_make_required_region_smaller(i8* %user_context, i8* %buffer_name, i32 %dimension, i32 %constrained_min, i32 %constrained_extent, i32 %required_min, i32 %required_extent) local_unnamed_addr #4 {
entry:
  %add = add i32 %required_min, -1
  %sub = add i32 %add, %required_extent
  %add1 = add i32 %constrained_min, -1
  %sub2 = add i32 %add1, %constrained_extent
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i231 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.25.136, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i232 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.25.136, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i231, %entry.split ], [ %call.i232, %if.then6.i ]
  %ref.tmp.sroa.38.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i26 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.38.0, i8* %buffer_name) #14
  %call.i29 = tail call i8* @halide_string_to_string(i8* %call.i26, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.26.137, i64 0, i64 0)) #14
  %conv.i = sext i32 %dimension to i64
  %call.i32 = tail call i8* @halide_int64_to_string(i8* %call.i29, i8* %ref.tmp.sroa.38.0, i64 %conv.i, i32 1) #14
  %call.i35 = tail call i8* @halide_string_to_string(i8* %call.i32, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.27.138, i64 0, i64 0)) #14
  %call.i38 = tail call i8* @halide_string_to_string(i8* %call.i35, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.28.139, i64 0, i64 0)) #14
  %conv.i41 = sext i32 %required_min to i64
  %call.i42 = tail call i8* @halide_int64_to_string(i8* %call.i38, i8* %ref.tmp.sroa.38.0, i64 %conv.i41, i32 1) #14
  %call.i45 = tail call i8* @halide_string_to_string(i8* %call.i42, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.117, i64 0, i64 0)) #14
  %conv.i48 = sext i32 %sub to i64
  %call.i49 = tail call i8* @halide_int64_to_string(i8* %call.i45, i8* %ref.tmp.sroa.38.0, i64 %conv.i48, i32 1) #14
  %call.i52 = tail call i8* @halide_string_to_string(i8* %call.i49, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.27.138, i64 0, i64 0)) #14
  %call.i55 = tail call i8* @halide_string_to_string(i8* %call.i52, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.29.140, i64 0, i64 0)) #14
  %conv.i58 = sext i32 %constrained_min to i64
  %call.i59 = tail call i8* @halide_int64_to_string(i8* %call.i55, i8* %ref.tmp.sroa.38.0, i64 %conv.i58, i32 1) #14
  %call.i62 = tail call i8* @halide_string_to_string(i8* %call.i59, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.117, i64 0, i64 0)) #14
  %conv.i65 = sext i32 %sub2 to i64
  %call.i66 = tail call i8* @halide_int64_to_string(i8* %call.i62, i8* %ref.tmp.sroa.38.0, i64 %conv.i65, i32 1) #14
  %call.i69 = tail call i8* @halide_string_to_string(i8* %call.i66, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i69 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -7
}

; Function Attrs: nounwind
define weak i32 @halide_error_constraint_violated(i8* %user_context, i8* %var, i32 %val, i8* %constrained_var, i32 %constrained_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i111 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.31.142, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i112 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.31.142, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i111, %entry.split ], [ %call.i112, %if.then6.i ]
  %ref.tmp.sroa.26.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i14 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.26.0, i8* %var) #14
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32.143, i64 0, i64 0)) #14
  %conv.i = sext i32 %val to i64
  %call.i20 = tail call i8* @halide_int64_to_string(i8* %call.i17, i8* %ref.tmp.sroa.26.0, i64 %conv.i, i32 1) #14
  %call.i23 = tail call i8* @halide_string_to_string(i8* %call.i20, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.33.144, i64 0, i64 0)) #14
  %call.i26 = tail call i8* @halide_string_to_string(i8* %call.i23, i8* %ref.tmp.sroa.26.0, i8* %constrained_var) #14
  %call.i29 = tail call i8* @halide_string_to_string(i8* %call.i26, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32.143, i64 0, i64 0)) #14
  %conv.i32 = sext i32 %constrained_val to i64
  %call.i33 = tail call i8* @halide_int64_to_string(i8* %call.i29, i8* %ref.tmp.sroa.26.0, i64 %conv.i32, i32 1) #14
  %call.i36 = tail call i8* @halide_string_to_string(i8* %call.i33, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.119, i64 0, i64 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i36 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -8
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_small_i64(i8* %user_context, i8* %param_name, i64 %val, i64 %min_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #14
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #14
  %call.i17 = tail call i8* @halide_int64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #14
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.35.146, i64 0, i64 0)) #14
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %min_val, i32 1) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -9
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_small_u64(i8* %user_context, i8* %param_name, i64 %val, i64 %min_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #14
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #14
  %call.i17 = tail call i8* @halide_uint64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #14
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.35.146, i64 0, i64 0)) #14
  %call.i23 = tail call i8* @halide_uint64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %min_val, i32 1) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -9
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_small_f64(i8* %user_context, i8* %param_name, double %val, double %min_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #14
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #14
  %call.i17 = tail call i8* @halide_double_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, double %val, i32 1) #14
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.35.146, i64 0, i64 0)) #14
  %call.i23 = tail call i8* @halide_double_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, double %min_val, i32 1) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -9
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_large_i64(i8* %user_context, i8* %param_name, i64 %val, i64 %max_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #14
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #14
  %call.i17 = tail call i8* @halide_int64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #14
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.36, i64 0, i64 0)) #14
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_val, i32 1) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -10
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_large_u64(i8* %user_context, i8* %param_name, i64 %val, i64 %max_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #14
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #14
  %call.i17 = tail call i8* @halide_uint64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #14
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.36, i64 0, i64 0)) #14
  %call.i23 = tail call i8* @halide_uint64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_val, i32 1) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -10
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_large_f64(i8* %user_context, i8* %param_name, double %val, double %max_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #14
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #14
  %call.i17 = tail call i8* @halide_double_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, double %val, i32 1) #14
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.36, i64 0, i64 0)) #14
  %call.i23 = tail call i8* @halide_double_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, double %max_val, i32 1) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -10
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_error_out_of_memory(i8* %user_context) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.37, i64 0, i64 0)) #14
  ret i32 -11
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_argument_is_null(i8* %user_context, i8* %buffer_name) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i51 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.38, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i52 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.38, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i51, %entry.split ], [ %call.i52, %if.then6.i ]
  %ref.tmp.sroa.14.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i8 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.14.0, i8* %buffer_name) #14
  %call.i11 = tail call i8* @halide_string_to_string(i8* %call.i8, i8* %ref.tmp.sroa.14.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.39, i64 0, i64 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i11 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -12
}

; Function Attrs: nounwind
define weak i32 @halide_error_debug_to_file_failed(i8* %user_context, i8* %func, i8* %filename, i32 %error_code) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.40, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.40, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %func) #14
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.41.147, i64 0, i64 0)) #14
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i8* %filename) #14
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.42, i64 0, i64 0)) #14
  %conv.i = sext i32 %error_code to i64
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %conv.i, i32 1) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -13
}

; Function Attrs: nounwind
define weak i32 @halide_error_unaligned_host_ptr(i8* %user_context, i8* %func, i32 %alignment) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i71 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i72 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i71, %entry.split ], [ %call.i72, %if.then6.i ]
  %ref.tmp.sroa.18.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i10 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.18.0, i8* %func) #14
  %call.i13 = tail call i8* @halide_string_to_string(i8* %call.i10, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.44, i64 0, i64 0)) #14
  %conv.i = sext i32 %alignment to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %call.i13, i8* %ref.tmp.sroa.18.0, i64 %conv.i, i32 1) #14
  %call.i19 = tail call i8* @halide_string_to_string(i8* %call.i16, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.45, i64 0, i64 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i19 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -24
}

; Function Attrs: nounwind
define weak i32 @halide_error_device_dirty_with_no_device_support(i8* %user_context, i8* %func) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i61 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.46, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i62 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.46, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i61, %entry.split ], [ %call.i62, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i9 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %func) #14
  %call.i12 = tail call i8* @halide_string_to_string(i8* %call.i9, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.47, i64 0, i64 0)) #14
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.48, i64 0, i64 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i15 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -44
}

; Function Attrs: nounwind
define weak i32 @halide_error_host_is_null(i8* %user_context, i8* %func) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i51 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i52 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i51, %entry.split ], [ %call.i52, %if.then6.i ]
  %ref.tmp.sroa.14.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i8 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.14.0, i8* %func) #14
  %call.i11 = tail call i8* @halide_string_to_string(i8* %call.i8, i8* %ref.tmp.sroa.14.0, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.49, i64 0, i64 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i11 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -34
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_fold(i8* %user_context, i8* %func_name, i8* %var_name, i8* %loop_name) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i91 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.50.148, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i92 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.50.148, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i91, %entry.split ], [ %call.i92, %if.then6.i ]
  %ref.tmp.sroa.22.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i12 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.22.0, i8* %var_name) #14
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i64 0, i64 0)) #14
  %call.i18 = tail call i8* @halide_string_to_string(i8* %call.i15, i8* %ref.tmp.sroa.22.0, i8* %func_name) #14
  %call.i21 = tail call i8* @halide_string_to_string(i8* %call.i18, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.52, i64 0, i64 0)) #14
  %call.i24 = tail call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.22.0, i8* %loop_name) #14
  %call.i27 = tail call i8* @halide_string_to_string(i8* %call.i24, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i27 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -25
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_extern_fold(i8* %user_context, i8* %func_name, i32 %dim, i32 %min, i32 %extent, i32 %valid_min, i32 %fold_factor) local_unnamed_addr #4 {
entry:
  %cmp = icmp slt i32 %min, %valid_min
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %add = add nsw i32 %extent, %min
  %add1 = add nsw i32 %fold_factor, %valid_min
  %cmp2 = icmp sgt i32 %add, %add1
  br i1 %cmp2, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false, %entry
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.split, label %if.then6.i

if.then.split:                                    ; preds = %if.then
  %call.i521 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %if.then
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i522 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %if.then.split, %if.then6.i
  %phi.call = phi i8* [ %call.i521, %if.then.split ], [ %call.i522, %if.then6.i ]
  %ref.tmp.sroa.36.0 = phi i8* [ null, %if.then.split ], [ %add.ptr.i, %if.then6.i ]
  %conv.i = sext i32 %dim to i64
  %call.i55 = tail call i8* @halide_int64_to_string(i8* %phi.call, i8* %ref.tmp.sroa.36.0, i64 %conv.i, i32 1) #14
  %call.i58 = tail call i8* @halide_string_to_string(i8* %call.i55, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i64 0, i64 0)) #14
  %call.i61 = tail call i8* @halide_string_to_string(i8* %call.i58, i8* %ref.tmp.sroa.36.0, i8* %func_name) #14
  %call.i64 = tail call i8* @halide_string_to_string(i8* %call.i61, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.54, i64 0, i64 0)) #14
  %conv.i67 = sext i32 %min to i64
  %call.i68 = tail call i8* @halide_int64_to_string(i8* %call.i64, i8* %ref.tmp.sroa.36.0, i64 %conv.i67, i32 1) #14
  %call.i71 = tail call i8* @halide_string_to_string(i8* %call.i68, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #14
  %add9 = add nsw i32 %extent, %min
  %sub = add nsw i32 %add9, -1
  %conv.i74 = sext i32 %sub to i64
  %call.i75 = tail call i8* @halide_int64_to_string(i8* %call.i71, i8* %ref.tmp.sroa.36.0, i64 %conv.i74, i32 1) #14
  %call.i78 = tail call i8* @halide_string_to_string(i8* %call.i75, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.56, i64 0, i64 0)) #14
  %call.i81 = tail call i8* @halide_string_to_string(i8* %call.i78, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.57, i64 0, i64 0)) #14
  %conv.i84 = sext i32 %valid_min to i64
  %call.i85 = tail call i8* @halide_int64_to_string(i8* %call.i81, i8* %ref.tmp.sroa.36.0, i64 %conv.i84, i32 1) #14
  %call.i88 = tail call i8* @halide_string_to_string(i8* %call.i85, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #14
  %add15 = add nsw i32 %fold_factor, %valid_min
  %sub16 = add nsw i32 %add15, -1
  %conv.i91 = sext i32 %sub16 to i64
  %call.i92 = tail call i8* @halide_int64_to_string(i8* %call.i88, i8* %ref.tmp.sroa.36.0, i64 %conv.i91, i32 1) #14
  %call.i95 = tail call i8* @halide_string_to_string(i8* %call.i92, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.58.149, i64 0, i64 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %if.end

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i95 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %if.end

if.else:                                          ; preds = %lor.lhs.false
  %call.i101 = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i104 = icmp eq i8* %call.i101, null
  br i1 %tobool.not.i104, label %if.else.split, label %if.then6.i107

if.else.split:                                    ; preds = %if.else
  %call.i1133 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110

if.then6.i107:                                    ; preds = %if.else
  %add.ptr.i105 = getelementptr inbounds i8, i8* %call.i101, i64 1023
  store i8 0, i8* %add.ptr.i105, align 1, !tbaa !18
  %call.i1134 = tail call i8* @halide_string_to_string(i8* nonnull %call.i101, i8* nonnull %add.ptr.i105, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110: ; preds = %if.else.split, %if.then6.i107
  %phi.call5 = phi i8* [ %call.i1133, %if.else.split ], [ %call.i1134, %if.then6.i107 ]
  %ref.tmp19.sroa.34.0 = phi i8* [ null, %if.else.split ], [ %add.ptr.i105, %if.then6.i107 ]
  %conv.i116 = sext i32 %dim to i64
  %call.i117 = tail call i8* @halide_int64_to_string(i8* %phi.call5, i8* %ref.tmp19.sroa.34.0, i64 %conv.i116, i32 1) #14
  %call.i120 = tail call i8* @halide_string_to_string(i8* %call.i117, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i64 0, i64 0)) #14
  %call.i123 = tail call i8* @halide_string_to_string(i8* %call.i120, i8* %ref.tmp19.sroa.34.0, i8* %func_name) #14
  %call.i126 = tail call i8* @halide_string_to_string(i8* %call.i123, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.54, i64 0, i64 0)) #14
  %conv.i129 = sext i32 %min to i64
  %call.i130 = tail call i8* @halide_int64_to_string(i8* %call.i126, i8* %ref.tmp19.sroa.34.0, i64 %conv.i129, i32 1) #14
  %call.i133 = tail call i8* @halide_string_to_string(i8* %call.i130, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #14
  %sub28 = add nsw i32 %add, -1
  %conv.i136 = sext i32 %sub28 to i64
  %call.i137 = tail call i8* @halide_int64_to_string(i8* %call.i133, i8* %ref.tmp19.sroa.34.0, i64 %conv.i136, i32 1) #14
  %call.i140 = tail call i8* @halide_string_to_string(i8* %call.i137, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.56, i64 0, i64 0)) #14
  %call.i143 = tail call i8* @halide_string_to_string(i8* %call.i140, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.59.150, i64 0, i64 0)) #14
  %call.i146 = tail call i8* @halide_string_to_string(i8* %call.i143, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.60.151, i64 0, i64 0)) #14
  %conv.i149 = sext i32 %fold_factor to i64
  %call.i150 = tail call i8* @halide_int64_to_string(i8* %call.i146, i8* %ref.tmp19.sroa.34.0, i64 %conv.i149, i32 1) #14
  %call.i153 = tail call i8* @halide_string_to_string(i8* %call.i150, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #14
  br i1 %tobool.not.i104, label %if.then.i157, label %if.else.i167

if.then.i157:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %if.end

if.else.i167:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110
  %sub.ptr.lhs.cast.i.i162 = ptrtoint i8* %call.i153 to i64
  %sub.ptr.rhs.cast.i.i163 = ptrtoint i8* %call.i101 to i64
  %sub.ptr.sub.i.i164 = sub i64 1, %sub.ptr.rhs.cast.i.i163
  %add.i.i165 = add i64 %sub.ptr.sub.i.i164, %sub.ptr.lhs.cast.i.i162
  %call.i.i166 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i101, i64 %add.i.i165) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i101) #14
  br label %if.end

if.end:                                           ; preds = %if.else.i167, %if.then.i157, %if.else.i, %if.then.i
  %call.i101.sink = phi i8* [ %call.i, %if.else.i ], [ null, %if.then.i ], [ %call.i101, %if.else.i167 ], [ null, %if.then.i157 ]
  tail call void @free(i8* %call.i101.sink) #14
  ret i32 -35
}

; Function Attrs: nounwind
define weak i32 @halide_error_fold_factor_too_small(i8* %user_context, i8* %func_name, i8* %var_name, i32 %fold_factor, i8* %loop_name, i32 %required_extent) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i131 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.61.152, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i132 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.61.152, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i131, %entry.split ], [ %call.i132, %if.then6.i ]
  %ref.tmp.sroa.30.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %conv.i = sext i32 %fold_factor to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %phi.call, i8* %ref.tmp.sroa.30.0, i64 %conv.i, i32 1) #14
  %call.i19 = tail call i8* @halide_string_to_string(i8* %call.i16, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.62, i64 0, i64 0)) #14
  %call.i22 = tail call i8* @halide_string_to_string(i8* %call.i19, i8* %ref.tmp.sroa.30.0, i8* %var_name) #14
  %call.i25 = tail call i8* @halide_string_to_string(i8* %call.i22, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i64 0, i64 0)) #14
  %call.i28 = tail call i8* @halide_string_to_string(i8* %call.i25, i8* %ref.tmp.sroa.30.0, i8* %func_name) #14
  %call.i31 = tail call i8* @halide_string_to_string(i8* %call.i28, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.63, i64 0, i64 0)) #14
  %call.i34 = tail call i8* @halide_string_to_string(i8* %call.i31, i8* %ref.tmp.sroa.30.0, i8* %loop_name) #14
  %call.i37 = tail call i8* @halide_string_to_string(i8* %call.i34, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32.143, i64 0, i64 0)) #14
  %conv.i40 = sext i32 %required_extent to i64
  %call.i41 = tail call i8* @halide_int64_to_string(i8* %call.i37, i8* %ref.tmp.sroa.30.0, i64 %conv.i40, i32 1) #14
  %call.i44 = tail call i8* @halide_string_to_string(i8* %call.i41, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.64.153, i64 0, i64 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i44 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -26
}

; Function Attrs: nounwind
define weak i32 @halide_error_requirement_failed(i8* %user_context, i8* %condition, i8* %message) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i61 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.65, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i62 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.65, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i61, %entry.split ], [ %call.i62, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i9 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %condition) #14
  %call.i12 = tail call i8* @halide_string_to_string(i8* %call.i9, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.66, i64 0, i64 0)) #14
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.16.0, i8* %message) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i15 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -27
}

; Function Attrs: nounwind
define weak i32 @halide_error_specialize_fail(i8* %user_context, i8* %message) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i41 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.67, i64 0, i64 0)) #14
  %call.i75 = tail call i8* @halide_string_to_string(i8* %call.i41, i8* null, i8* %message) #14
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i42 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.67, i64 0, i64 0)) #14
  %call.i7 = tail call i8* @halide_string_to_string(i8* %call.i42, i8* nonnull %add.ptr.i, i8* %message) #14
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i7 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -31
}

; Function Attrs: nounwind
define weak i32 @halide_error_no_device_interface(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.68, i64 0, i64 0)) #14
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.68, i64 0, i64 0)) #14
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -19
}

; Function Attrs: nounwind
define weak i32 @halide_error_device_interface_no_device(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.69, i64 0, i64 0)) #14
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.69, i64 0, i64 0)) #14
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -36
}

; Function Attrs: nounwind
define weak i32 @halide_error_host_and_device_dirty(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.70, i64 0, i64 0)) #14
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.70, i64 0, i64 0)) #14
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -37
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_is_null(i8* %user_context, i8* %routine) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i51 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.71, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i52 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.71, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i51, %entry.split ], [ %call.i52, %if.then6.i ]
  %ref.tmp.sroa.14.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i8 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.14.0, i8* %routine) #14
  %call.i11 = tail call i8* @halide_string_to_string(i8* %call.i8, i8* %ref.tmp.sroa.14.0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.72, i64 0, i64 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i11 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -38
}

; Function Attrs: nounwind
define weak i32 @halide_error_storage_bound_too_small(i8* %user_context, i8* %func_name, i8* %var_name, i32 %provided_size, i32 %required_size) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i111 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.73, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i112 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.73, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i111, %entry.split ], [ %call.i112, %if.then6.i ]
  %ref.tmp.sroa.26.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %conv.i = sext i32 %provided_size to i64
  %call.i14 = tail call i8* @halide_int64_to_string(i8* %phi.call, i8* %ref.tmp.sroa.26.0, i64 %conv.i, i32 1) #14
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.62, i64 0, i64 0)) #14
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.26.0, i8* %var_name) #14
  %call.i23 = tail call i8* @halide_string_to_string(i8* %call.i20, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i64 0, i64 0)) #14
  %call.i26 = tail call i8* @halide_string_to_string(i8* %call.i23, i8* %ref.tmp.sroa.26.0, i8* %func_name) #14
  %call.i29 = tail call i8* @halide_string_to_string(i8* %call.i26, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.74, i64 0, i64 0)) #14
  %conv.i32 = sext i32 %required_size to i64
  %call.i33 = tail call i8* @halide_int64_to_string(i8* %call.i29, i8* %ref.tmp.sroa.26.0, i64 %conv.i32, i32 1) #14
  %call.i36 = tail call i8* @halide_string_to_string(i8* %call.i33, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.64.153, i64 0, i64 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i36 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -45
}

; Function Attrs: nounwind
define weak i32 @halide_error_device_crop_failed(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.75, i64 0, i64 0)) #14
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.75, i64 0, i64 0)) #14
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -41
}

; Function Attrs: nounwind mustprogress
define weak void @halide_profiler_shutdown() #0 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #15
  %sampling_thread = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 7
  %0 = load %struct.halide_thread*, %struct.halide_thread** %sampling_thread, align 8, !tbaa !337
  %tobool.not = icmp eq %struct.halide_thread* %0, null
  br i1 %tobool.not, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %current_func = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 3
  store i32 -2, i32* %current_func, align 8, !tbaa !339
  tail call void @halide_join_thread(%struct.halide_thread* nonnull %0) #14
  store %struct.halide_thread* null, %struct.halide_thread** %sampling_thread, align 8, !tbaa !337
  store i32 -1, i32* %current_func, align 8, !tbaa !339
  tail call void @halide_profiler_report_unlocked(i8* null, %struct.halide_profiler_state* nonnull %call) #15
  tail call void @halide_profiler_reset_unlocked(%struct.halide_profiler_state* nonnull %call) #15
  br label %cleanup

cleanup:                                          ; preds = %if.end, %entry
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak %struct.halide_profiler_state* @halide_profiler_get_state() local_unnamed_addr #2 {
entry:
  ret %struct.halide_profiler_state* @_ZZ25halide_profiler_get_stateE1s
}

; Function Attrs: nounwind
define weak void @halide_profiler_report_unlocked(i8* %user_context, %struct.halide_profiler_state* %s) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit, label %if.then6.i

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit: ; preds = %if.then6.i, %entry
  %sstr.sroa.125.0 = phi i8* [ %add.ptr.i, %if.then6.i ], [ null, %entry ]
  %pipelines = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 5
  %p.0624 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !14
  %tobool.not625 = icmp eq %struct.halide_profiler_pipeline_stats* %p.0624, null
  br i1 %tobool.not625, label %for.cond.cleanup, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit
  %sub.ptr.rhs.cast.i.i348 = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i349 = sub i64 1, %sub.ptr.rhs.cast.i.i348
  br label %for.body

for.cond.cleanup:                                 ; preds = %cleanup181, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit
  %sstr.sroa.19.0.lcssa = phi i8* [ %call.i, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit ], [ %sstr.sroa.19.15, %cleanup181 ]
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %for.cond.cleanup
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %for.cond.cleanup
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %sstr.sroa.19.0.lcssa to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret void

for.body:                                         ; preds = %cleanup181, %for.body.lr.ph
  %p.0627 = phi %struct.halide_profiler_pipeline_stats* [ %p.0624, %for.body.lr.ph ], [ %p.0, %cleanup181 ]
  %sstr.sroa.19.0626 = phi i8* [ %call.i, %for.body.lr.ph ], [ %sstr.sroa.19.15, %cleanup181 ]
  %time = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 0
  %0 = load i64, i64* %time, align 8, !tbaa !340
  %conv = uitofp i64 %0 to float
  %div = fdiv float %conv, 1.000000e+06
  %runs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 11
  %1 = load i32, i32* %runs, align 8, !tbaa !342
  %tobool1.not = icmp eq i32 %1, 0
  br i1 %tobool1.not, label %cleanup181, label %if.end

if.end:                                           ; preds = %for.body
  br i1 %tobool.not.i, label %if.end.split, label %if.then.i278

if.end.split:                                     ; preds = %if.end
  %active_threads_numerator1 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 4
  %2 = load i64, i64* %active_threads_numerator1, align 8, !tbaa !343
  %active_threads_denominator2 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 5
  %3 = load i64, i64* %active_threads_denominator2, align 8, !tbaa !344
  %cmp3 = icmp eq i64 %2, %3
  %name4 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 6
  %4 = load i8*, i8** %name4, align 8, !tbaa !345
  %call.i2825 = tail call i8* @halide_string_to_string(i8* null, i8* %sstr.sroa.125.0, i8* %4) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit

if.then.i278:                                     ; preds = %if.end
  store i8 0, i8* %call.i, align 1, !tbaa !18
  %active_threads_numerator6 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 4
  %5 = load i64, i64* %active_threads_numerator6, align 8, !tbaa !343
  %active_threads_denominator7 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 5
  %6 = load i64, i64* %active_threads_denominator7, align 8, !tbaa !344
  %cmp8 = icmp eq i64 %5, %6
  %name9 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 6
  %7 = load i8*, i8** %name9, align 8, !tbaa !345
  %call.i28210 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* %sstr.sroa.125.0, i8* %7) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit: ; preds = %if.end.split, %if.then.i278
  %8 = phi i64 [ %2, %if.end.split ], [ %5, %if.then.i278 ]
  %9 = phi i64 [ %3, %if.end.split ], [ %6, %if.then.i278 ]
  %10 = phi i1 [ %cmp3, %if.end.split ], [ %cmp8, %if.then.i278 ]
  %phi.call = phi i8* [ %call.i2825, %if.end.split ], [ %call.i28210, %if.then.i278 ]
  %call.i285 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #14
  %call.i288 = tail call i8* @halide_string_to_string(i8* %call.i285, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.8.165, i64 0, i64 0)) #14
  %conv.i = fpext float %div to double
  %call.i291 = tail call i8* @halide_double_to_string(i8* %call.i288, i8* %sstr.sroa.125.0, double %conv.i, i32 0) #14
  %call.i294 = tail call i8* @halide_string_to_string(i8* %call.i291, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9.166, i64 0, i64 0)) #14
  %call.i297 = tail call i8* @halide_string_to_string(i8* %call.i294, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.10.167, i64 0, i64 0)) #14
  %samples = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 12
  %11 = load i32, i32* %samples, align 4, !tbaa !346
  %conv.i300 = sext i32 %11 to i64
  %call.i301 = tail call i8* @halide_int64_to_string(i8* %call.i297, i8* %sstr.sroa.125.0, i64 %conv.i300, i32 1) #14
  %call.i304 = tail call i8* @halide_string_to_string(i8* %call.i301, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.11.168, i64 0, i64 0)) #14
  %12 = load i32, i32* %runs, align 8, !tbaa !342
  %conv.i307 = sext i32 %12 to i64
  %call.i308 = tail call i8* @halide_int64_to_string(i8* %call.i304, i8* %sstr.sroa.125.0, i64 %conv.i307, i32 1) #14
  %call.i311 = tail call i8* @halide_string_to_string(i8* %call.i308, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.12.169, i64 0, i64 0)) #14
  %13 = load i32, i32* %runs, align 8, !tbaa !342
  %conv19 = sitofp i32 %13 to float
  %div20 = fdiv float %div, %conv19
  %conv.i314 = fpext float %div20 to double
  %call.i315 = tail call i8* @halide_double_to_string(i8* %call.i311, i8* %sstr.sroa.125.0, double %conv.i314, i32 0) #14
  %call.i318 = tail call i8* @halide_string_to_string(i8* %call.i315, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.13.170, i64 0, i64 0)) #14
  br i1 %10, label %if.end28, label %if.then24

if.then24:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit
  %conv3 = uitofp i64 %8 to double
  %conv5 = uitofp i64 %9 to double
  %add = fadd double %conv5, 1.000000e-10
  %div6 = fdiv double %conv3, %add
  %conv7 = fptrunc double %div6 to float
  %call.i321 = tail call i8* @halide_string_to_string(i8* %call.i318, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.14.171, i64 0, i64 0)) #14
  %conv.i324 = fpext float %conv7 to double
  %call.i325 = tail call i8* @halide_double_to_string(i8* %call.i321, i8* %sstr.sroa.125.0, double %conv.i324, i32 0) #14
  %call.i328 = tail call i8* @halide_string_to_string(i8* %call.i325, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #14
  br label %if.end28

if.end28:                                         ; preds = %if.then24, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit
  %sstr.sroa.19.1 = phi i8* [ %call.i318, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit ], [ %call.i328, %if.then24 ]
  %call.i331 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.1, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.15.172, i64 0, i64 0)) #14
  %num_allocs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 13
  %14 = load i32, i32* %num_allocs, align 8, !tbaa !347
  %conv.i334 = sext i32 %14 to i64
  %call.i335 = tail call i8* @halide_int64_to_string(i8* %call.i331, i8* %sstr.sroa.125.0, i64 %conv.i334, i32 1) #14
  %call.i338 = tail call i8* @halide_string_to_string(i8* %call.i335, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.16.173, i64 0, i64 0)) #14
  %memory_peak = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 2
  %15 = load i64, i64* %memory_peak, align 8, !tbaa !348
  %call.i341 = tail call i8* @halide_uint64_to_string(i8* %call.i338, i8* %sstr.sroa.125.0, i64 %15, i32 1) #14
  %call.i344 = tail call i8* @halide_string_to_string(i8* %call.i341, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.17.174, i64 0, i64 0)) #14
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit, label %if.then.i352

if.then.i352:                                     ; preds = %if.end28
  %sub.ptr.lhs.cast.i.i347 = ptrtoint i8* %call.i344 to i64
  %add.i.i350 = add i64 %sub.ptr.sub.i.i349, %sub.ptr.lhs.cast.i.i347
  %call.i.i351 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i350) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit: ; preds = %if.then.i352, %if.end28
  %retval.0.i = phi i8* [ %call.i, %if.then.i352 ], [ getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0), %if.end28 ]
  tail call void @halide_print(i8* %user_context, i8* nonnull %retval.0.i) #14
  %16 = load i64, i64* %time, align 8, !tbaa !340
  %tobool36.not = icmp eq i64 %16, 0
  br i1 %tobool36.not, label %lor.end, label %for.cond53.preheader

lor.end:                                          ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit
  %memory_total = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 3
  %17 = load i64, i64* %memory_total, align 8, !tbaa !349
  %tobool37.not = icmp eq i64 %17, 0
  br i1 %tobool37.not, label %for.cond41.preheader, label %for.cond53.preheader

for.cond41.preheader:                             ; preds = %lor.end
  %num_funcs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 9
  %18 = load i32, i32* %num_funcs, align 8, !tbaa !350
  %cmp42589 = icmp sgt i32 %18, 0
  br i1 %cmp42589, label %for.body44.lr.ph, label %cleanup181

for.body44.lr.ph:                                 ; preds = %for.cond41.preheader
  %funcs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 7
  %19 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %funcs, align 8, !tbaa !351
  %20 = zext i32 %18 to i64
  br label %for.body44

for.cond41:                                       ; preds = %for.body44
  %exitcond.not = icmp eq i64 %indvars.iv.next, %20
  br i1 %exitcond.not, label %cleanup181, label %for.body44, !llvm.loop !352

for.body44:                                       ; preds = %for.cond41, %for.body44.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body44.lr.ph ], [ %indvars.iv.next, %for.cond41 ]
  %stack_peak = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %19, i64 %indvars.iv, i32 4
  %21 = load i64, i64* %stack_peak, align 8, !tbaa !353
  %tobool45.not = icmp eq i64 %21, 0
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  br i1 %tobool45.not, label %for.cond41, label %for.cond53.preheader

for.cond53.preheader:                             ; preds = %for.body44, %lor.end, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit
  %num_funcs54 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 9
  %22 = load i32, i32* %num_funcs54, align 8, !tbaa !350
  %cmp55621 = icmp sgt i32 %22, 0
  br i1 %cmp55621, label %for.body57.lr.ph, label %cleanup181

for.body57.lr.ph:                                 ; preds = %for.cond53.preheader
  %funcs59 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 7
  br label %for.body57

for.body57:                                       ; preds = %cleanup172, %for.body57.lr.ph
  %indvars.iv630 = phi i64 [ 0, %for.body57.lr.ph ], [ %indvars.iv.next631, %cleanup172 ]
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit358, label %if.then.i356

if.then.i356:                                     ; preds = %for.body57
  store i8 0, i8* %call.i, align 1, !tbaa !18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit358

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit358: ; preds = %if.then.i356, %for.body57
  %23 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %funcs59, align 8, !tbaa !351
  %add.ptr61 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630
  %cmp62 = icmp eq i64 %indvars.iv630, 0
  br i1 %cmp62, label %land.lhs.true, label %if.end66

land.lhs.true:                                    ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit358
  %time63 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %add.ptr61, i64 0, i32 0
  %24 = load i64, i64* %time63, align 8, !tbaa !355
  %cmp64 = icmp eq i64 %24, 0
  br i1 %cmp64, label %cleanup172, label %if.end66

if.end66:                                         ; preds = %land.lhs.true, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit358
  %call.i361 = tail call i8* @halide_string_to_string(i8* %call.i, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.18.175, i64 0, i64 0)) #14
  %name68 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 7
  %25 = load i8*, i8** %name68, align 8, !tbaa !356
  %call.i364 = tail call i8* @halide_string_to_string(i8* %call.i361, i8* %sstr.sroa.125.0, i8* %25) #14
  %call.i367 = tail call i8* @halide_string_to_string(i8* %call.i364, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.19.176, i64 0, i64 0)) #14
  %sub.ptr.lhs.cast.i591 = ptrtoint i8* %call.i367 to i64
  %sub.ptr.sub.i592 = sub i64 %sub.ptr.lhs.cast.i591, %sub.ptr.rhs.cast.i.i348
  %cmp73593 = icmp ult i64 %sub.ptr.sub.i592, 25
  br i1 %cmp73593, label %while.body, label %while.end

while.body:                                       ; preds = %if.end66, %while.body
  %sstr.sroa.19.3594 = phi i8* [ %call.i384, %while.body ], [ %call.i367, %if.end66 ]
  %call.i384 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.3594, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #14
  %sub.ptr.lhs.cast.i = ptrtoint i8* %call.i384 to i64
  %sub.ptr.sub.i = sub i64 %sub.ptr.lhs.cast.i, %sub.ptr.rhs.cast.i.i348
  %cmp73 = icmp ult i64 %sub.ptr.sub.i, 25
  br i1 %cmp73, label %while.body, label %while.end, !llvm.loop !357

while.end:                                        ; preds = %while.body, %if.end66
  %sstr.sroa.19.3.lcssa = phi i8* [ %call.i367, %if.end66 ], [ %call.i384, %while.body ]
  %time75 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %add.ptr61, i64 0, i32 0
  %26 = load i64, i64* %time75, align 8, !tbaa !355
  %conv76 = uitofp i64 %26 to float
  %27 = load i32, i32* %runs, align 8, !tbaa !342
  %conv78 = sitofp i32 %27 to float
  %mul = fmul float %conv78, 1.000000e+06
  %div79 = fdiv float %conv76, %mul
  %conv.i387 = fpext float %div79 to double
  %call.i388 = tail call i8* @halide_double_to_string(i8* %sstr.sroa.19.3.lcssa, i8* %sstr.sroa.125.0, double %conv.i387, i32 0) #14
  %tobool.not.i390 = icmp eq i8* %call.i388, null
  br i1 %tobool.not.i390, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit, label %if.then.i393

if.then.i393:                                     ; preds = %while.end
  %add.ptr.i391 = getelementptr inbounds i8, i8* %call.i388, i64 -3
  %cmp.i = icmp ult i8* %add.ptr.i391, %call.i
  %spec.store.select.i = select i1 %cmp.i, i8* %call.i, i8* %add.ptr.i391
  store i8 0, i8* %spec.store.select.i, align 1, !tbaa !18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit: ; preds = %if.then.i393, %while.end
  %sstr.sroa.19.4 = phi i8* [ null, %while.end ], [ %spec.store.select.i, %if.then.i393 ]
  %call.i399 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.4, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.21.178, i64 0, i64 0)) #14
  %sub.ptr.lhs.cast.i400596 = ptrtoint i8* %call.i399 to i64
  %sub.ptr.sub.i402597 = sub i64 %sub.ptr.lhs.cast.i400596, %sub.ptr.rhs.cast.i.i348
  %cmp85598 = icmp ult i64 %sub.ptr.sub.i402597, 35
  br i1 %cmp85598, label %while.body86, label %while.end88

while.body86:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit, %while.body86
  %sstr.sroa.19.5599 = phi i8* [ %call.i408, %while.body86 ], [ %call.i399, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit ]
  %call.i408 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.5599, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #14
  %sub.ptr.lhs.cast.i400 = ptrtoint i8* %call.i408 to i64
  %sub.ptr.sub.i402 = sub i64 %sub.ptr.lhs.cast.i400, %sub.ptr.rhs.cast.i.i348
  %cmp85 = icmp ult i64 %sub.ptr.sub.i402, 35
  br i1 %cmp85, label %while.body86, label %while.end88, !llvm.loop !358

while.end88:                                      ; preds = %while.body86, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit
  %sstr.sroa.19.5.lcssa = phi i8* [ %call.i399, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit ], [ %call.i408, %while.body86 ]
  %28 = load i64, i64* %time, align 8, !tbaa !340
  %cmp90.not = icmp eq i64 %28, 0
  br i1 %cmp90.not, label %if.end97, label %if.then91

if.then91:                                        ; preds = %while.end88
  %29 = load i64, i64* %time75, align 8, !tbaa !355
  %mul93 = mul i64 %29, 100
  %div95 = udiv i64 %mul93, %28
  br label %if.end97

if.end97:                                         ; preds = %if.then91, %while.end88
  %percent.0 = phi i64 [ %div95, %if.then91 ], [ 0, %while.end88 ]
  %call.i411 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.5.lcssa, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.22.179, i64 0, i64 0)) #14
  %sext = shl i64 %percent.0, 32
  %conv.i414 = ashr exact i64 %sext, 32
  %call.i415 = tail call i8* @halide_int64_to_string(i8* %call.i411, i8* %sstr.sroa.125.0, i64 %conv.i414, i32 1) #14
  %call.i418 = tail call i8* @halide_string_to_string(i8* %call.i415, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.23.180, i64 0, i64 0)) #14
  %sub.ptr.lhs.cast.i419601 = ptrtoint i8* %call.i418 to i64
  %sub.ptr.sub.i421602 = sub i64 %sub.ptr.lhs.cast.i419601, %sub.ptr.rhs.cast.i.i348
  %cmp104603 = icmp ult i64 %sub.ptr.sub.i421602, 43
  br i1 %cmp104603, label %while.body105, label %while.end107

while.body105:                                    ; preds = %if.end97, %while.body105
  %sstr.sroa.19.6604 = phi i8* [ %call.i427, %while.body105 ], [ %call.i418, %if.end97 ]
  %call.i427 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.6604, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #14
  %sub.ptr.lhs.cast.i419 = ptrtoint i8* %call.i427 to i64
  %sub.ptr.sub.i421 = sub i64 %sub.ptr.lhs.cast.i419, %sub.ptr.rhs.cast.i.i348
  %cmp104 = icmp ult i64 %sub.ptr.sub.i421, 43
  br i1 %cmp104, label %while.body105, label %while.end107, !llvm.loop !359

while.end107:                                     ; preds = %while.body105, %if.end97
  %sstr.sroa.19.6.lcssa = phi i8* [ %call.i418, %if.end97 ], [ %call.i427, %while.body105 ]
  br i1 %10, label %if.end127, label %if.then109

if.then109:                                       ; preds = %while.end107
  %active_threads_numerator111 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 5
  %30 = load i64, i64* %active_threads_numerator111, align 8, !tbaa !360
  %conv112 = uitofp i64 %30 to double
  %active_threads_denominator113 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 6
  %31 = load i64, i64* %active_threads_denominator113, align 8, !tbaa !361
  %conv114 = uitofp i64 %31 to double
  %add115 = fadd double %conv114, 1.000000e-10
  %div116 = fdiv double %conv112, %add115
  %conv117 = fptrunc double %div116 to float
  %call.i430 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.6.lcssa, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.24.181, i64 0, i64 0)) #14
  %conv.i433 = fpext float %conv117 to double
  %call.i434 = tail call i8* @halide_double_to_string(i8* %call.i430, i8* %sstr.sroa.125.0, double %conv.i433, i32 0) #14
  %tobool.not.i436 = icmp eq i8* %call.i434, null
  br i1 %tobool.not.i436, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442, label %if.then.i441

if.then.i441:                                     ; preds = %if.then109
  %add.ptr.i437 = getelementptr inbounds i8, i8* %call.i434, i64 -3
  %cmp.i439 = icmp ult i8* %add.ptr.i437, %call.i
  %spec.store.select.i440 = select i1 %cmp.i439, i8* %call.i, i8* %add.ptr.i437
  store i8 0, i8* %spec.store.select.i440, align 1, !tbaa !18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442: ; preds = %if.then.i441, %if.then109
  %sstr.sroa.19.7 = phi i8* [ null, %if.then109 ], [ %spec.store.select.i440, %if.then.i441 ]
  %sub.ptr.lhs.cast.i447606 = ptrtoint i8* %sstr.sroa.19.7 to i64
  %sub.ptr.sub.i449607 = sub i64 %sub.ptr.lhs.cast.i447606, %sub.ptr.rhs.cast.i.i348
  %cmp123608 = icmp ult i64 %sub.ptr.sub.i449607, 58
  br i1 %cmp123608, label %while.body124, label %if.end127

while.body124:                                    ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442, %while.body124
  %sstr.sroa.19.8609 = phi i8* [ %call.i455, %while.body124 ], [ %sstr.sroa.19.7, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442 ]
  %call.i455 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.8609, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #14
  %sub.ptr.lhs.cast.i447 = ptrtoint i8* %call.i455 to i64
  %sub.ptr.sub.i449 = sub i64 %sub.ptr.lhs.cast.i447, %sub.ptr.rhs.cast.i.i348
  %cmp123 = icmp ult i64 %sub.ptr.sub.i449, 58
  br i1 %cmp123, label %while.body124, label %if.end127, !llvm.loop !362

if.end127:                                        ; preds = %while.body124, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442, %while.end107
  %sstr.sroa.19.9 = phi i8* [ %sstr.sroa.19.6.lcssa, %while.end107 ], [ %sstr.sroa.19.7, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442 ], [ %call.i455, %while.body124 ]
  %cursor.0 = phi i64 [ 58, %while.end107 ], [ 73, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442 ], [ 73, %while.body124 ]
  %memory_peak128 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 2
  %32 = load i64, i64* %memory_peak128, align 8, !tbaa !363
  %tobool129.not = icmp eq i64 %32, 0
  br i1 %tobool129.not, label %if.end162, label %if.then130

if.then130:                                       ; preds = %if.end127
  %call.i458 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.9, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.25.182, i64 0, i64 0)) #14
  %33 = load i64, i64* %memory_peak128, align 8, !tbaa !363
  %call.i461 = tail call i8* @halide_uint64_to_string(i8* %call.i458, i8* %sstr.sroa.125.0, i64 %33, i32 1) #14
  %sub.ptr.lhs.cast.i462611 = ptrtoint i8* %call.i461 to i64
  %sub.ptr.sub.i464612 = sub i64 %sub.ptr.lhs.cast.i462611, %sub.ptr.rhs.cast.i.i348
  %cmp137613 = icmp ult i64 %sub.ptr.sub.i464612, %cursor.0
  br i1 %cmp137613, label %while.body138, label %while.end140

while.body138:                                    ; preds = %if.then130, %while.body138
  %sstr.sroa.19.10614 = phi i8* [ %call.i470, %while.body138 ], [ %call.i461, %if.then130 ]
  %call.i470 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.10614, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #14
  %sub.ptr.lhs.cast.i462 = ptrtoint i8* %call.i470 to i64
  %sub.ptr.sub.i464 = sub i64 %sub.ptr.lhs.cast.i462, %sub.ptr.rhs.cast.i.i348
  %cmp137 = icmp ult i64 %sub.ptr.sub.i464, %cursor.0
  br i1 %cmp137, label %while.body138, label %while.end140, !llvm.loop !364

while.end140:                                     ; preds = %while.body138, %if.then130
  %sstr.sroa.19.10.lcssa = phi i8* [ %call.i461, %if.then130 ], [ %call.i470, %while.body138 ]
  %call.i473 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.10.lcssa, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.26.183, i64 0, i64 0)) #14
  %num_allocs142 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 8
  %34 = load i32, i32* %num_allocs142, align 8, !tbaa !365
  %conv.i476 = sext i32 %34 to i64
  %call.i477 = tail call i8* @halide_int64_to_string(i8* %call.i473, i8* %sstr.sroa.125.0, i64 %conv.i476, i32 1) #14
  %add144 = add nuw nsw i64 %cursor.0, 15
  %sub.ptr.lhs.cast.i478616 = ptrtoint i8* %call.i477 to i64
  %sub.ptr.sub.i480617 = sub i64 %sub.ptr.lhs.cast.i478616, %sub.ptr.rhs.cast.i.i348
  %cmp147618 = icmp ult i64 %sub.ptr.sub.i480617, %add144
  br i1 %cmp147618, label %while.body148, label %while.end150

while.body148:                                    ; preds = %while.end140, %while.body148
  %sstr.sroa.19.11619 = phi i8* [ %call.i467, %while.body148 ], [ %call.i477, %while.end140 ]
  %call.i467 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.11619, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #14
  %sub.ptr.lhs.cast.i478 = ptrtoint i8* %call.i467 to i64
  %sub.ptr.sub.i480 = sub i64 %sub.ptr.lhs.cast.i478, %sub.ptr.rhs.cast.i.i348
  %cmp147 = icmp ult i64 %sub.ptr.sub.i480, %add144
  br i1 %cmp147, label %while.body148, label %while.end150, !llvm.loop !366

while.end150:                                     ; preds = %while.body148, %while.end140
  %sstr.sroa.19.11.lcssa = phi i8* [ %call.i477, %while.end140 ], [ %call.i467, %while.body148 ]
  %35 = load i32, i32* %num_allocs142, align 8, !tbaa !365
  %cmp152.not = icmp eq i32 %35, 0
  br i1 %cmp152.not, label %if.end159, label %if.then153

if.then153:                                       ; preds = %while.end150
  %memory_total154 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 3
  %36 = load i64, i64* %memory_total154, align 8, !tbaa !367
  %conv156 = sext i32 %35 to i64
  %div157 = udiv i64 %36, %conv156
  br label %if.end159

if.end159:                                        ; preds = %if.then153, %while.end150
  %alloc_avg.0 = phi i64 [ %div157, %if.then153 ], [ 0, %while.end150 ]
  %call.i452 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.11.lcssa, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.27.184, i64 0, i64 0)) #14
  %sext586 = shl i64 %alloc_avg.0, 32
  %conv.i445 = ashr exact i64 %sext586, 32
  %call.i446 = tail call i8* @halide_int64_to_string(i8* %call.i452, i8* %sstr.sroa.125.0, i64 %conv.i445, i32 1) #14
  br label %if.end162

if.end162:                                        ; preds = %if.end159, %if.end127
  %sstr.sroa.19.12 = phi i8* [ %sstr.sroa.19.9, %if.end127 ], [ %call.i446, %if.end159 ]
  %stack_peak163 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 4
  %37 = load i64, i64* %stack_peak163, align 8, !tbaa !353
  %cmp164.not = icmp eq i64 %37, 0
  br i1 %cmp164.not, label %if.end169, label %if.then165

if.then165:                                       ; preds = %if.end162
  %call.i424 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.12, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.28.185, i64 0, i64 0)) #14
  %38 = load i64, i64* %stack_peak163, align 8, !tbaa !353
  %call.i405 = tail call i8* @halide_uint64_to_string(i8* %call.i424, i8* %sstr.sroa.125.0, i64 %38, i32 1) #14
  br label %if.end169

if.end169:                                        ; preds = %if.then165, %if.end162
  %sstr.sroa.19.13 = phi i8* [ %sstr.sroa.19.12, %if.end162 ], [ %call.i405, %if.then165 ]
  %call.i396 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.13, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #14
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit381, label %if.then.i379

if.then.i379:                                     ; preds = %if.end169
  %sub.ptr.lhs.cast.i.i374 = ptrtoint i8* %call.i396 to i64
  %add.i.i377 = add i64 %sub.ptr.sub.i.i349, %sub.ptr.lhs.cast.i.i374
  %call.i.i378 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i377) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit381

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit381: ; preds = %if.then.i379, %if.end169
  %retval.0.i380 = phi i8* [ %call.i, %if.then.i379 ], [ getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0), %if.end169 ]
  tail call void @halide_print(i8* %user_context, i8* nonnull %retval.0.i380) #14
  br label %cleanup172

cleanup172:                                       ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit381, %land.lhs.true
  %sstr.sroa.19.14 = phi i8* [ %call.i, %land.lhs.true ], [ %call.i396, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit381 ]
  %indvars.iv.next631 = add nuw nsw i64 %indvars.iv630, 1
  %39 = load i32, i32* %num_funcs54, align 8, !tbaa !350
  %40 = sext i32 %39 to i64
  %cmp55 = icmp slt i64 %indvars.iv.next631, %40
  br i1 %cmp55, label %for.body57, label %cleanup181, !llvm.loop !368

cleanup181:                                       ; preds = %for.cond41, %cleanup172, %for.cond53.preheader, %for.cond41.preheader, %for.body
  %sstr.sroa.19.15 = phi i8* [ %sstr.sroa.19.0626, %for.body ], [ %call.i344, %for.cond53.preheader ], [ %call.i344, %for.cond41.preheader ], [ %sstr.sroa.19.14, %cleanup172 ], [ %call.i344, %for.cond41 ]
  %next = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 8
  %41 = bitcast i8** %next to %struct.halide_profiler_pipeline_stats**
  %p.0 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %41, align 8, !tbaa !14
  %tobool.not = icmp eq %struct.halide_profiler_pipeline_stats* %p.0, null
  br i1 %tobool.not, label %for.cond.cleanup, label %for.body, !llvm.loop !369
}

; Function Attrs: nounwind mustprogress
define weak void @halide_profiler_reset_unlocked(%struct.halide_profiler_state* %s) local_unnamed_addr #0 {
entry:
  %pipelines = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 5
  %0 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !370
  %tobool.not9 = icmp eq %struct.halide_profiler_pipeline_stats* %0, null
  br i1 %tobool.not9, label %while.end, label %while.body

while.body:                                       ; preds = %entry, %while.body
  %1 = phi %struct.halide_profiler_pipeline_stats* [ %7, %while.body ], [ %0, %entry ]
  %next = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %1, i64 0, i32 8
  %2 = bitcast i8** %next to %struct.halide_profiler_pipeline_stats**
  %3 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %2, align 8, !tbaa !371
  store %struct.halide_profiler_pipeline_stats* %3, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !370
  %funcs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %1, i64 0, i32 7
  %4 = bitcast %struct.halide_profiler_func_stats** %funcs to i8**
  %5 = load i8*, i8** %4, align 8, !tbaa !351
  tail call void @free(i8* %5) #14
  %6 = bitcast %struct.halide_profiler_pipeline_stats* %1 to i8*
  tail call void @free(i8* nonnull %6) #14
  %7 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !370
  %tobool.not = icmp eq %struct.halide_profiler_pipeline_stats* %7, null
  br i1 %tobool.not, label %while.end, label %while.body, !llvm.loop !372

while.end:                                        ; preds = %while.body, %entry
  %first_free_id = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 2
  store i32 0, i32* %first_free_id, align 4, !tbaa !373
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce %struct.halide_profiler_pipeline_stats* @_ZN6Halide7Runtime8Internal23find_or_create_pipelineEPKciPKy(i8* %pipeline_name, i32 %num_funcs, i64* %func_names) local_unnamed_addr #0 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #15
  %pipelines = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 5
  %p.0121 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !14
  %tobool.not122 = icmp eq %struct.halide_profiler_pipeline_stats* %p.0121, null
  br i1 %tobool.not122, label %for.end, label %for.body

for.body:                                         ; preds = %entry, %for.inc
  %p.0123 = phi %struct.halide_profiler_pipeline_stats* [ %p.0, %for.inc ], [ %p.0121, %entry ]
  %name = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0123, i64 0, i32 6
  %0 = load i8*, i8** %name, align 8, !tbaa !345
  %cmp = icmp eq i8* %0, %pipeline_name
  br i1 %cmp, label %land.lhs.true, label %for.inc

land.lhs.true:                                    ; preds = %for.body
  %num_funcs1 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0123, i64 0, i32 9
  %1 = load i32, i32* %num_funcs1, align 8, !tbaa !350
  %cmp2 = icmp eq i32 %1, %num_funcs
  br i1 %cmp2, label %cleanup62, label %for.inc

for.inc:                                          ; preds = %land.lhs.true, %for.body
  %next = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0123, i64 0, i32 8
  %2 = bitcast i8** %next to %struct.halide_profiler_pipeline_stats**
  %p.0 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %2, align 8, !tbaa !14
  %tobool.not = icmp eq %struct.halide_profiler_pipeline_stats* %p.0, null
  br i1 %tobool.not, label %for.end, label %for.body, !llvm.loop !374

for.end:                                          ; preds = %for.inc, %entry
  %call4 = tail call i8* @malloc(i64 96) #14
  %3 = bitcast i8* %call4 to %struct.halide_profiler_pipeline_stats*
  %tobool5.not = icmp eq i8* %call4, null
  br i1 %tobool5.not, label %cleanup62, label %if.end7

if.end7:                                          ; preds = %for.end
  %4 = bitcast %struct.halide_profiler_pipeline_stats** %pipelines to i8**
  %5 = load i8*, i8** %4, align 8, !tbaa !370
  %next9 = getelementptr inbounds i8, i8* %call4, i64 64
  %6 = bitcast i8* %next9 to i8**
  store i8* %5, i8** %6, align 8, !tbaa !371
  %name10 = getelementptr inbounds i8, i8* %call4, i64 48
  %7 = bitcast i8* %name10 to i8**
  store i8* %pipeline_name, i8** %7, align 8, !tbaa !345
  %first_free_id = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 2
  %8 = load i32, i32* %first_free_id, align 4, !tbaa !373
  %first_func_id = getelementptr inbounds i8, i8* %call4, i64 76
  %9 = bitcast i8* %first_func_id to i32*
  store i32 %8, i32* %9, align 4, !tbaa !375
  %num_funcs11 = getelementptr inbounds i8, i8* %call4, i64 72
  %10 = bitcast i8* %num_funcs11 to i32*
  store i32 %num_funcs, i32* %10, align 8, !tbaa !350
  %runs = getelementptr inbounds i8, i8* %call4, i64 80
  %11 = bitcast i8* %runs to <2 x i32>*
  store <2 x i32> zeroinitializer, <2 x i32>* %11, align 8, !tbaa !41
  %12 = bitcast i8* %call4 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %12, align 8, !tbaa !22
  %memory_peak = getelementptr inbounds i8, i8* %call4, i64 16
  %13 = bitcast i8* %memory_peak to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %13, align 8, !tbaa !22
  %num_allocs = getelementptr inbounds i8, i8* %call4, i64 88
  %14 = bitcast i8* %num_allocs to i32*
  store i32 0, i32* %14, align 8, !tbaa !347
  %active_threads_numerator = getelementptr inbounds i8, i8* %call4, i64 32
  %15 = bitcast i8* %active_threads_numerator to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %15, align 8, !tbaa !22
  %conv = sext i32 %num_funcs to i64
  %mul = mul nsw i64 %conv, 72
  %call12 = tail call i8* @malloc(i64 %mul) #14
  %funcs = getelementptr inbounds i8, i8* %call4, i64 56
  %16 = bitcast i8* %funcs to i8**
  store i8* %call12, i8** %16, align 8, !tbaa !351
  %tobool14.not = icmp eq i8* %call12, null
  %17 = bitcast i8* %call12 to %struct.halide_profiler_func_stats*
  br i1 %tobool14.not, label %if.then15, label %for.cond17.preheader

for.cond17.preheader:                             ; preds = %if.end7
  %cmp18119 = icmp sgt i32 %num_funcs, 0
  br i1 %cmp18119, label %for.body20.lr.ph, label %for.cond.cleanup19

for.body20.lr.ph:                                 ; preds = %for.cond17.preheader
  %wide.trip.count = zext i32 %num_funcs to i64
  br label %for.body20

if.then15:                                        ; preds = %if.end7
  tail call void @free(i8* nonnull %call4) #14
  br label %cleanup62

for.cond.cleanup19:                               ; preds = %for.body20, %for.cond17.preheader
  %18 = load i32, i32* %first_free_id, align 4, !tbaa !373
  %add = add nsw i32 %18, %num_funcs
  store i32 %add, i32* %first_free_id, align 4, !tbaa !373
  store i8* %call4, i8** %4, align 8, !tbaa !370
  br label %cleanup62

for.body20:                                       ; preds = %for.body20, %for.body20.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body20.lr.ph ], [ %indvars.iv.next, %for.body20 ]
  %time22 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv, i32 0
  store i64 0, i64* %time22, align 8, !tbaa !355
  %arrayidx24 = getelementptr inbounds i64, i64* %func_names, i64 %indvars.iv
  %19 = load i64, i64* %arrayidx24, align 8, !tbaa !22
  %20 = inttoptr i64 %19 to i8*
  %name28 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv, i32 7
  store i8* %20, i8** %name28, align 8, !tbaa !356
  %memory_current32 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv, i32 1
  %21 = bitcast i64* %memory_current32 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %21, align 8, !tbaa !22
  %memory_total40 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv, i32 3
  %num_allocs44 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv, i32 8
  store i32 0, i32* %num_allocs44, align 8, !tbaa !365
  %22 = bitcast i64* %memory_total40 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %22, align 8, !tbaa !22
  %active_threads_numerator51 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv, i32 5
  %23 = bitcast i64* %active_threads_numerator51 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %23, align 8, !tbaa !22
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.cleanup19, label %for.body20, !llvm.loop !376

cleanup62:                                        ; preds = %land.lhs.true, %for.cond.cleanup19, %if.then15, %for.end
  %retval.2 = phi %struct.halide_profiler_pipeline_stats* [ %3, %for.cond.cleanup19 ], [ null, %if.then15 ], [ null, %for.end ], [ %p.0123, %land.lhs.true ]
  ret %struct.halide_profiler_pipeline_stats* %retval.2
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal9bill_funcEP21halide_profiler_stateiyi(%struct.halide_profiler_state* %s, i32 %func_id, i64 %time, i32 %active_threads) local_unnamed_addr #0 {
entry:
  %pipelines = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 5
  %p.055 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !14
  %tobool.not56 = icmp eq %struct.halide_profiler_pipeline_stats* %p.055, null
  br i1 %tobool.not56, label %cleanup25, label %for.body

for.body:                                         ; preds = %entry, %if.end23
  %p.058 = phi %struct.halide_profiler_pipeline_stats* [ %p.0, %if.end23 ], [ %p.055, %entry ]
  %p_prev.057 = phi %struct.halide_profiler_pipeline_stats* [ %p.058, %if.end23 ], [ null, %entry ]
  %first_func_id = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 10
  %0 = load i32, i32* %first_func_id, align 4, !tbaa !375
  %cmp.not = icmp sgt i32 %0, %func_id
  br i1 %cmp.not, label %if.end23, label %land.lhs.true

land.lhs.true:                                    ; preds = %for.body
  %num_funcs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 9
  %1 = load i32, i32* %num_funcs, align 8, !tbaa !350
  %add = add nsw i32 %1, %0
  %cmp2 = icmp sgt i32 %add, %func_id
  br i1 %cmp2, label %if.then, label %if.end23

if.then:                                          ; preds = %land.lhs.true
  %tobool3.not = icmp eq %struct.halide_profiler_pipeline_stats* %p_prev.057, null
  br i1 %tobool3.not, label %if.end, label %if.then4

if.then4:                                         ; preds = %if.then
  %next = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 8
  %2 = load i8*, i8** %next, align 8, !tbaa !371
  %next5 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p_prev.057, i64 0, i32 8
  store i8* %2, i8** %next5, align 8, !tbaa !371
  %3 = bitcast i8** %next to %struct.halide_profiler_pipeline_stats**
  store %struct.halide_profiler_pipeline_stats* %p.055, %struct.halide_profiler_pipeline_stats** %3, align 8, !tbaa !371
  store %struct.halide_profiler_pipeline_stats* %p.058, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !370
  br label %if.end

if.end:                                           ; preds = %if.then4, %if.then
  %funcs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 7
  %4 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %funcs, align 8, !tbaa !351
  %idx.ext = sext i32 %func_id to i64
  %add.ptr = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %4, i64 %idx.ext
  %idx.ext10 = sext i32 %0 to i64
  %idx.neg = sub nsw i64 0, %idx.ext10
  %add.ptr11 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %add.ptr, i64 %idx.neg
  %time12 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %add.ptr11, i64 0, i32 0
  %5 = load i64, i64* %time12, align 8, !tbaa !355
  %add13 = add i64 %5, %time
  store i64 %add13, i64* %time12, align 8, !tbaa !355
  %conv = sext i32 %active_threads to i64
  %active_threads_numerator = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %add.ptr11, i64 0, i32 5
  %6 = load i64, i64* %active_threads_numerator, align 8, !tbaa !360
  %add14 = add i64 %6, %conv
  store i64 %add14, i64* %active_threads_numerator, align 8, !tbaa !360
  %active_threads_denominator = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %add.ptr11, i64 0, i32 6
  %7 = load i64, i64* %active_threads_denominator, align 8, !tbaa !361
  %add15 = add i64 %7, 1
  store i64 %add15, i64* %active_threads_denominator, align 8, !tbaa !361
  %time16 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 0
  %8 = load i64, i64* %time16, align 8, !tbaa !340
  %add17 = add i64 %8, %time
  store i64 %add17, i64* %time16, align 8, !tbaa !340
  %samples = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 12
  %9 = load i32, i32* %samples, align 4, !tbaa !346
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %samples, align 4, !tbaa !346
  %active_threads_numerator19 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 4
  %10 = load i64, i64* %active_threads_numerator19, align 8, !tbaa !343
  %add20 = add i64 %10, %conv
  store i64 %add20, i64* %active_threads_numerator19, align 8, !tbaa !343
  %active_threads_denominator21 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 5
  %11 = load i64, i64* %active_threads_denominator21, align 8, !tbaa !344
  %add22 = add i64 %11, 1
  store i64 %add22, i64* %active_threads_denominator21, align 8, !tbaa !344
  ret void

if.end23:                                         ; preds = %land.lhs.true, %for.body
  %next24 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 8
  %12 = bitcast i8** %next24 to %struct.halide_profiler_pipeline_stats**
  %p.0 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %12, align 8, !tbaa !14
  %tobool.not = icmp eq %struct.halide_profiler_pipeline_stats* %p.0, null
  br i1 %tobool.not, label %cleanup25, label %for.body, !llvm.loop !377

cleanup25:                                        ; preds = %if.end23, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_profiler_sample(%struct.halide_profiler_state* %s, i64* %prev_t) local_unnamed_addr #0 {
entry:
  %func = alloca i32, align 4
  %active_threads = alloca i32, align 4
  %0 = bitcast i32* %func to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0) #11
  %1 = bitcast i32* %active_threads to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1) #11
  %get_remote_profiler_state = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 6
  %2 = load void (i32*, i32*)*, void (i32*, i32*)** %get_remote_profiler_state, align 8, !tbaa !378
  %tobool.not = icmp eq void (i32*, i32*)* %2, null
  br i1 %tobool.not, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  call void %2(i32* nonnull %func, i32* nonnull %active_threads) #14
  br label %if.end

if.else:                                          ; preds = %entry
  %current_func = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 3
  %3 = load i32, i32* %current_func, align 8, !tbaa !339
  store i32 %3, i32* %func, align 4, !tbaa !41
  %active_threads2 = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 4
  %4 = load i32, i32* %active_threads2, align 4, !tbaa !379
  store i32 %4, i32* %active_threads, align 4, !tbaa !41
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %call = call i64 @halide_current_time_ns(i8* null) #14
  %5 = load i32, i32* %func, align 4, !tbaa !41
  %cmp = icmp eq i32 %5, -2
  br i1 %cmp, label %cleanup, label %if.else4

if.else4:                                         ; preds = %if.end
  %cmp5 = icmp sgt i32 %5, -1
  br i1 %cmp5, label %if.then6, label %if.end8

if.then6:                                         ; preds = %if.else4
  %6 = load i64, i64* %prev_t, align 8, !tbaa !22
  %sub = sub i64 %call, %6
  %7 = load i32, i32* %active_threads, align 4, !tbaa !41
  call void @_ZN6Halide7Runtime8Internal9bill_funcEP21halide_profiler_stateiyi(%struct.halide_profiler_state* nonnull %s, i32 %5, i64 %sub, i32 %7) #15
  br label %if.end8

if.end8:                                          ; preds = %if.then6, %if.else4
  store i64 %call, i64* %prev_t, align 8, !tbaa !22
  %sleep_time = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 1
  %8 = load i32, i32* %sleep_time, align 8, !tbaa !380
  br label %cleanup

cleanup:                                          ; preds = %if.end8, %if.end
  %retval.0 = phi i32 [ %8, %if.end8 ], [ -1, %if.end ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0) #11
  ret i32 %retval.0
}

; Function Attrs: nounwind
define linkonce void @_ZN6Halide7Runtime8Internal24sampling_profiler_threadEPv(i8* %0) #4 {
entry:
  %t = alloca i64, align 8
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #15
  %lock = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 0
  tail call void @halide_mutex_lock(%struct.halide_mutex* %lock) #14
  %current_func = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 3
  %1 = load i32, i32* %current_func, align 8, !tbaa !339
  %cmp.not23 = icmp eq i32 %1, -2
  br i1 %cmp.not23, label %while.end8, label %while.body.lr.ph

while.body.lr.ph:                                 ; preds = %entry
  %2 = bitcast i64* %t to i8*
  br label %while.body

while.body:                                       ; preds = %while.end, %while.body.lr.ph
  %call1 = call i64 @halide_current_time_ns(i8* null) #14
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %2) #11
  store i64 %call1, i64* %t, align 8, !tbaa !22
  %call420 = call i32 @halide_profiler_sample(%struct.halide_profiler_state* nonnull %call, i64* nonnull %t) #15
  %cmp521 = icmp slt i32 %call420, 0
  br i1 %cmp521, label %while.end, label %if.end

if.end:                                           ; preds = %while.body, %if.end
  %call422 = phi i32 [ %call4, %if.end ], [ %call420, %while.body ]
  call void @halide_mutex_unlock(%struct.halide_mutex* %lock) #14
  call void @halide_sleep_ms(i8* null, i32 %call422) #14
  call void @halide_mutex_lock(%struct.halide_mutex* %lock) #14
  %call4 = call i32 @halide_profiler_sample(%struct.halide_profiler_state* %call, i64* nonnull %t) #15
  %cmp5 = icmp slt i32 %call4, 0
  br i1 %cmp5, label %while.end, label %if.end

while.end:                                        ; preds = %if.end, %while.body
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %2) #11
  %3 = load i32, i32* %current_func, align 8, !tbaa !339
  %cmp.not = icmp eq i32 %3, -2
  br i1 %cmp.not, label %while.end8, label %while.body, !llvm.loop !381

while.end8:                                       ; preds = %while.end, %entry
  call void @halide_mutex_unlock(%struct.halide_mutex* nonnull %lock) #14
  ret void
}

; Function Attrs: nounwind
define weak %struct.halide_profiler_pipeline_stats* @halide_profiler_get_pipeline_state(i8* %pipeline_name) local_unnamed_addr #4 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #15
  %lock.i = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 0
  tail call void @halide_mutex_lock(%struct.halide_mutex* %lock.i) #14
  %pipelines = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 5
  %p.013 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !14
  %tobool.not14 = icmp eq %struct.halide_profiler_pipeline_stats* %p.013, null
  br i1 %tobool.not14, label %cleanup, label %for.body

for.body:                                         ; preds = %entry, %for.inc
  %p.015 = phi %struct.halide_profiler_pipeline_stats* [ %p.0, %for.inc ], [ %p.013, %entry ]
  %name = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.015, i64 0, i32 6
  %0 = load i8*, i8** %name, align 8, !tbaa !345
  %cmp = icmp eq i8* %0, %pipeline_name
  br i1 %cmp, label %cleanup, label %for.inc

for.inc:                                          ; preds = %for.body
  %next = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.015, i64 0, i32 8
  %1 = bitcast i8** %next to %struct.halide_profiler_pipeline_stats**
  %p.0 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %1, align 8, !tbaa !14
  %tobool.not = icmp eq %struct.halide_profiler_pipeline_stats* %p.0, null
  br i1 %tobool.not, label %cleanup, label %for.body, !llvm.loop !382

cleanup:                                          ; preds = %for.inc, %for.body, %entry
  %p.0.lcssa = phi %struct.halide_profiler_pipeline_stats* [ null, %entry ], [ null, %for.inc ], [ %p.015, %for.body ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* %lock.i) #14
  ret %struct.halide_profiler_pipeline_stats* %p.0.lcssa
}

; Function Attrs: nounwind
define weak i32 @halide_profiler_pipeline_start(i8* %user_context, i8* %pipeline_name, i32 %num_funcs, i64* %func_names) local_unnamed_addr #4 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #15
  %lock.i = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 0
  tail call void @halide_mutex_lock(%struct.halide_mutex* %lock.i) #14
  %sampling_thread = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 7
  %0 = load %struct.halide_thread*, %struct.halide_thread** %sampling_thread, align 8, !tbaa !337
  %tobool.not = icmp eq %struct.halide_thread* %0, null
  br i1 %tobool.not, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call1 = tail call i32 @halide_start_clock(i8* %user_context) #14
  %call2 = tail call %struct.halide_thread* @halide_spawn_thread(void (i8*)* nonnull @_ZN6Halide7Runtime8Internal24sampling_profiler_threadEPv, i8* null) #14
  store %struct.halide_thread* %call2, %struct.halide_thread** %sampling_thread, align 8, !tbaa !337
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %call4 = tail call %struct.halide_profiler_pipeline_stats* @_ZN6Halide7Runtime8Internal23find_or_create_pipelineEPKciPKy(i8* %pipeline_name, i32 %num_funcs, i64* %func_names) #15
  %tobool5.not = icmp eq %struct.halide_profiler_pipeline_stats* %call4, null
  br i1 %tobool5.not, label %if.then6, label %if.end8

if.then6:                                         ; preds = %if.end
  %call7 = tail call i32 @halide_error_out_of_memory(i8* %user_context) #14
  br label %cleanup

if.end8:                                          ; preds = %if.end
  %runs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %call4, i64 0, i32 11
  %1 = load i32, i32* %runs, align 8, !tbaa !342
  %inc = add nsw i32 %1, 1
  store i32 %inc, i32* %runs, align 8, !tbaa !342
  %first_func_id = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %call4, i64 0, i32 10
  %2 = load i32, i32* %first_func_id, align 4, !tbaa !375
  br label %cleanup

cleanup:                                          ; preds = %if.end8, %if.then6
  %retval.0 = phi i32 [ %2, %if.end8 ], [ %call7, %if.then6 ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull %lock.i) #14
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak void @halide_profiler_stack_peak_update(i8* %user_context, i8* %pipeline_state, i64* %f_values) local_unnamed_addr #0 {
entry:
  %cmp.not = icmp eq i8* %pipeline_state, null
  br i1 %cmp.not, label %if.then, label %do.end

if.then:                                          ; preds = %entry
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @.str.186, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %do.end

do.end:                                           ; preds = %if.then, %entry
  %num_funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 72
  %0 = bitcast i8* %num_funcs to i32*
  %1 = load i32, i32* %0, align 8, !tbaa !350
  %cmp118 = icmp sgt i32 %1, 0
  br i1 %cmp118, label %for.body.lr.ph, label %for.cond.cleanup

for.body.lr.ph:                                   ; preds = %do.end
  %funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 56
  %2 = bitcast i8* %funcs to %struct.halide_profiler_func_stats**
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.inc, %do.end
  ret void

for.body:                                         ; preds = %for.inc, %for.body.lr.ph
  %3 = phi i32 [ %1, %for.body.lr.ph ], [ %9, %for.inc ]
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.inc ]
  %arrayidx = getelementptr inbounds i64, i64* %f_values, i64 %indvars.iv
  %4 = load i64, i64* %arrayidx, align 8, !tbaa !22
  %cmp2.not = icmp eq i64 %4, 0
  br i1 %cmp2.not, label %for.inc, label %if.then3

if.then3:                                         ; preds = %for.body
  %5 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %2, align 8, !tbaa !351
  %stack_peak = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %5, i64 %indvars.iv, i32 4
  %6 = load i64, i64* %stack_peak, align 8, !tbaa !22
  br label %while.cond.i

while.cond.i:                                     ; preds = %while.body.i, %if.then3
  %old_val.0.i = phi i64 [ %6, %if.then3 ], [ %8, %while.body.i ]
  %cmp.i = icmp ult i64 %old_val.0.i, %4
  br i1 %cmp.i, label %while.body.i, label %for.inc.loopexit

while.body.i:                                     ; preds = %while.cond.i
  %7 = cmpxchg i64* %stack_peak, i64 %old_val.0.i, i64 %4 seq_cst seq_cst
  %8 = extractvalue { i64, i1 } %7, 0
  %cmp1.i = icmp eq i64 %old_val.0.i, %8
  br i1 %cmp1.i, label %for.inc.loopexit, label %while.cond.i, !llvm.loop !383

for.inc.loopexit:                                 ; preds = %while.body.i, %while.cond.i
  %.pre = load i32, i32* %0, align 8, !tbaa !350
  br label %for.inc

for.inc:                                          ; preds = %for.inc.loopexit, %for.body
  %9 = phi i32 [ %.pre, %for.inc.loopexit ], [ %3, %for.body ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %10 = sext i32 %9 to i64
  %cmp1 = icmp slt i64 %indvars.iv.next, %10
  br i1 %cmp1, label %for.body, label %for.cond.cleanup, !llvm.loop !384
}

; Function Attrs: nounwind mustprogress
define weak void @halide_profiler_memory_allocate(i8* %user_context, i8* %pipeline_state, i32 %func_id, i64 %incr) local_unnamed_addr #0 {
entry:
  %cmp = icmp eq i64 %incr, 0
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %cmp1.not = icmp eq i8* %pipeline_state, null
  br i1 %cmp1.not, label %if.then2, label %do.body4

if.then2:                                         ; preds = %if.end
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @.str.1.187, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %do.body4

do.body4:                                         ; preds = %if.then2, %if.end
  %cmp5 = icmp sgt i32 %func_id, -1
  br i1 %cmp5, label %do.body10, label %if.then6

if.then6:                                         ; preds = %do.body4
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([122 x i8], [122 x i8]* @.str.2.188, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %do.body10

do.body10:                                        ; preds = %if.then6, %do.body4
  %num_funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 72
  %0 = bitcast i8* %num_funcs to i32*
  %1 = load i32, i32* %0, align 8, !tbaa !350
  %cmp11 = icmp sgt i32 %1, %func_id
  br i1 %cmp11, label %do.end15, label %if.then12

if.then12:                                        ; preds = %do.body10
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([138 x i8], [138 x i8]* @.str.3.189, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %do.end15

do.end15:                                         ; preds = %if.then12, %do.body10
  %funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 56
  %2 = bitcast i8* %funcs to %struct.halide_profiler_func_stats**
  %3 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %2, align 8, !tbaa !351
  %idxprom = sext i32 %func_id to i64
  %num_allocs = getelementptr inbounds i8, i8* %pipeline_state, i64 88
  %4 = bitcast i8* %num_allocs to i32*
  %5 = atomicrmw add i32* %4, i32 1 seq_cst
  %memory_total = getelementptr inbounds i8, i8* %pipeline_state, i64 24
  %6 = bitcast i8* %memory_total to i64*
  %7 = atomicrmw add i64* %6, i64 %incr seq_cst
  %memory_current = getelementptr inbounds i8, i8* %pipeline_state, i64 8
  %8 = bitcast i8* %memory_current to i64*
  %9 = atomicrmw add i64* %8, i64 %incr seq_cst
  %10 = add i64 %9, %incr
  %memory_peak = getelementptr inbounds i8, i8* %pipeline_state, i64 16
  %11 = bitcast i8* %memory_peak to i64*
  %12 = load i64, i64* %11, align 8, !tbaa !22
  br label %while.cond.i

while.cond.i:                                     ; preds = %while.body.i, %do.end15
  %old_val.0.i = phi i64 [ %12, %do.end15 ], [ %14, %while.body.i ]
  %cmp.i = icmp ult i64 %old_val.0.i, %10
  br i1 %cmp.i, label %while.body.i, label %_ZN12_GLOBAL__N_125sync_compare_max_and_swapIyEEvPT_S1_.exit

while.body.i:                                     ; preds = %while.cond.i
  %13 = cmpxchg i64* %11, i64 %old_val.0.i, i64 %10 seq_cst seq_cst
  %14 = extractvalue { i64, i1 } %13, 0
  %cmp1.i = icmp eq i64 %old_val.0.i, %14
  br i1 %cmp1.i, label %_ZN12_GLOBAL__N_125sync_compare_max_and_swapIyEEvPT_S1_.exit, label %while.cond.i, !llvm.loop !383

_ZN12_GLOBAL__N_125sync_compare_max_and_swapIyEEvPT_S1_.exit: ; preds = %while.body.i, %while.cond.i
  %num_allocs16 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %3, i64 %idxprom, i32 8
  %15 = atomicrmw add i32* %num_allocs16, i32 1 seq_cst
  %memory_total17 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %3, i64 %idxprom, i32 3
  %16 = atomicrmw add i64* %memory_total17, i64 %incr seq_cst
  %memory_current18 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %3, i64 %idxprom, i32 1
  %17 = atomicrmw add i64* %memory_current18, i64 %incr seq_cst
  %18 = add i64 %17, %incr
  %memory_peak19 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %3, i64 %idxprom, i32 2
  %19 = load i64, i64* %memory_peak19, align 8, !tbaa !22
  br label %while.cond.i43

while.cond.i43:                                   ; preds = %while.body.i45, %_ZN12_GLOBAL__N_125sync_compare_max_and_swapIyEEvPT_S1_.exit
  %old_val.0.i41 = phi i64 [ %19, %_ZN12_GLOBAL__N_125sync_compare_max_and_swapIyEEvPT_S1_.exit ], [ %21, %while.body.i45 ]
  %cmp.i42 = icmp ult i64 %old_val.0.i41, %18
  br i1 %cmp.i42, label %while.body.i45, label %return

while.body.i45:                                   ; preds = %while.cond.i43
  %20 = cmpxchg i64* %memory_peak19, i64 %old_val.0.i41, i64 %18 seq_cst seq_cst
  %21 = extractvalue { i64, i1 } %20, 0
  %cmp1.i44 = icmp eq i64 %old_val.0.i41, %21
  br i1 %cmp1.i44, label %return, label %while.cond.i43, !llvm.loop !383

return:                                           ; preds = %while.body.i45, %while.cond.i43, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define weak void @halide_profiler_memory_free(i8* %user_context, i8* %pipeline_state, i32 %func_id, i64 %decr) local_unnamed_addr #0 {
entry:
  %cmp = icmp eq i64 %decr, 0
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %cmp1.not = icmp eq i8* %pipeline_state, null
  br i1 %cmp1.not, label %if.then2, label %do.body4

if.then2:                                         ; preds = %if.end
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @.str.4.190, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %do.body4

do.body4:                                         ; preds = %if.then2, %if.end
  %cmp5 = icmp sgt i32 %func_id, -1
  br i1 %cmp5, label %do.body10, label %if.then6

if.then6:                                         ; preds = %do.body4
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([122 x i8], [122 x i8]* @.str.5.191, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %do.body10

do.body10:                                        ; preds = %if.then6, %do.body4
  %num_funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 72
  %0 = bitcast i8* %num_funcs to i32*
  %1 = load i32, i32* %0, align 8, !tbaa !350
  %cmp11 = icmp sgt i32 %1, %func_id
  br i1 %cmp11, label %do.end15, label %if.then12

if.then12:                                        ; preds = %do.body10
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([138 x i8], [138 x i8]* @.str.6.192, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %do.end15

do.end15:                                         ; preds = %if.then12, %do.body10
  %funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 56
  %2 = bitcast i8* %funcs to %struct.halide_profiler_func_stats**
  %3 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %2, align 8, !tbaa !351
  %idxprom = sext i32 %func_id to i64
  %memory_current = getelementptr inbounds i8, i8* %pipeline_state, i64 8
  %4 = bitcast i8* %memory_current to i64*
  %5 = atomicrmw sub i64* %4, i64 %decr seq_cst
  %memory_current16 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %3, i64 %idxprom, i32 1
  %6 = atomicrmw sub i64* %memory_current16, i64 %decr seq_cst
  br label %return

return:                                           ; preds = %do.end15, %entry
  ret void
}

; Function Attrs: nounwind
define weak void @halide_profiler_report(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #15
  %lock.i = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 0
  tail call void @halide_mutex_lock(%struct.halide_mutex* %lock.i) #14
  tail call void @halide_profiler_report_unlocked(i8* %user_context, %struct.halide_profiler_state* %call) #15
  tail call void @halide_mutex_unlock(%struct.halide_mutex* %lock.i) #14
  ret void
}

; Function Attrs: nounwind
define weak void @halide_profiler_reset() local_unnamed_addr #4 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #15
  %lock.i = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 0
  tail call void @halide_mutex_lock(%struct.halide_mutex* %lock.i) #14
  tail call void @halide_profiler_reset_unlocked(%struct.halide_profiler_state* %call) #15
  tail call void @halide_mutex_unlock(%struct.halide_mutex* %lock.i) #14
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_profiler_pipeline_end(i8* %user_context, i8* %state) local_unnamed_addr #2 {
entry:
  %current_func = getelementptr inbounds i8, i8* %state, i64 16
  %0 = bitcast i8* %current_func to i32*
  store i32 -1, i32* %0, align 8, !tbaa !339
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* %ptr, i64 %len) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_check_memory_is_initialized(i8* %user_context, i8* %ptr, i64 %len, i8* %name) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_check_buffer_is_initialized(i8* %user_context, %struct.halide_buffer_t* %b, i8* %buf_name) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_annotate_buffer_is_initialized(i8* %user_context, %struct.halide_buffer_t* %b) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_msan_annotate_buffer_is_initialized_as_destructor(i8* %user_context, i8* %b) local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_default_can_use_target_features(i32 %count, i64* %features) #4 {
entry:
  %tmp = alloca %"struct.Halide::Runtime::Internal::CpuFeatures", align 8
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal36halide_cpu_features_initialized_lockE) #14
  %0 = load i8, i8* @_ZN6Halide7Runtime8Internal31halide_cpu_features_initializedE, align 1, !tbaa !19, !range !21
  %tobool.not = icmp eq i8 %0, 0
  br i1 %tobool.not, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = bitcast %"struct.Halide::Runtime::Internal::CpuFeatures"* %tmp to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1) #11
  call void @_ZN6Halide7Runtime8Internal23halide_get_cpu_featuresEv(%"struct.Halide::Runtime::Internal::CpuFeatures"* nonnull sret(%"struct.Halide::Runtime::Internal::CpuFeatures") align 8 %tmp) #14
  %call = call i8* @memcpy(i8* bitcast ([4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE to i8*), i8* nonnull %1, i64 32) #14
  store i8 1, i8* @_ZN6Halide7Runtime8Internal31halide_cpu_features_initializedE, align 1, !tbaa !19
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1) #11
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal36halide_cpu_features_initialized_lockE) #14
  %cmp.not = icmp eq i32 %count, 2
  br i1 %cmp.not, label %if.end2, label %if.then1

if.then1:                                         ; preds = %if.end
  call void @halide_error(i8* null, i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.197, i64 0, i64 0)) #14
  br label %if.end2

if.end2:                                          ; preds = %if.then1, %if.end
  %2 = load i64, i64* %features, align 8, !tbaa !22
  %3 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i64 0, i64 0), align 8, !tbaa !22
  %and = and i64 %3, %2
  %cmp6.not = icmp eq i64 %and, 0
  br i1 %cmp6.not, label %for.inc.critedge, label %if.then7

if.then7:                                         ; preds = %if.end2
  %4 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i64 0, i64 2), align 8, !tbaa !22
  %and10 = and i64 %4, %and
  %cmp11.not = icmp eq i64 %and10, %and
  br i1 %cmp11.not, label %for.inc.critedge, label %cleanup15

for.inc.critedge:                                 ; preds = %if.then7, %if.end2
  %arrayidx.1 = getelementptr inbounds i64, i64* %features, i64 1
  %5 = load i64, i64* %arrayidx.1, align 8, !tbaa !22
  %6 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i64 0, i64 1), align 8, !tbaa !22
  %and.1 = and i64 %6, %5
  %cmp6.not.1 = icmp eq i64 %and.1, 0
  br i1 %cmp6.not.1, label %for.inc.critedge.1, label %if.then7.1

cleanup15:                                        ; preds = %for.inc.critedge.1, %if.then7.1, %if.then7
  %cmp3.lcssa = phi i32 [ 0, %if.then7 ], [ 0, %if.then7.1 ], [ 1, %for.inc.critedge.1 ]
  ret i32 %cmp3.lcssa

if.then7.1:                                       ; preds = %for.inc.critedge
  %7 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i64 0, i64 3), align 8, !tbaa !22
  %and10.1 = and i64 %7, %and.1
  %cmp11.not.1 = icmp eq i64 %and10.1, %and.1
  br i1 %cmp11.not.1, label %for.inc.critedge.1, label %cleanup15

for.inc.critedge.1:                               ; preds = %if.then7.1, %for.inc.critedge
  br label %cleanup15
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i32, i64*)* @halide_set_custom_can_use_target_features(i32 (i32, i64*)* %fn) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i32, i64*)*, i32 (i32, i64*)** @_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE, align 8, !tbaa !14
  store i32 (i32, i64*)* %fn, i32 (i32, i64*)** @_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE, align 8, !tbaa !14
  ret i32 (i32, i64*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_can_use_target_features(i32 %count, i64* %features) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i32, i64*)*, i32 (i32, i64*)** @_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE, align 8, !tbaa !14
  %call = tail call i32 %0(i32 %count, i64* %features) #14
  ret i32 %call
}

; Function Attrs: nounwind willreturn
define linkonce void @_ZN6Halide7Runtime8Internal23halide_get_cpu_featuresEv(%"struct.Halide::Runtime::Internal::CpuFeatures"* noalias sret(%"struct.Halide::Runtime::Internal::CpuFeatures") align 8 %agg.result) local_unnamed_addr #8 {
entry:
  %arrayidx3.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::CpuFeatures", %"struct.Halide::Runtime::Internal::CpuFeatures"* %agg.result, i64 0, i32 1, i64 0
  %0 = bitcast %"struct.Halide::Runtime::Internal::CpuFeatures"* %agg.result to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %0, align 8, !tbaa !22
  %1 = bitcast i64* %arrayidx3.i to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %1, align 8, !tbaa !22
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_use_jit_module() local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_release_jit_module() local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nofree nosync nounwind readnone willreturn
declare <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16>, <4 x i16>) #9

; Function Attrs: nofree nosync nounwind readnone willreturn
declare <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32>, <4 x i32>) #9

; Function Attrs: nofree nosync nounwind readnone willreturn
declare <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32>, <4 x i32>) #9

; Function Attrs: nofree nosync nounwind readnone willreturn
declare <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32>) #9

; Function Attrs: nounwind
define i32 @blur5x5_par_for_blur_y_s0_y_y(i8* %__user_context, i32 %blur_y.s0.y.y, i8* readonly %closure_arg) #10 {
entry:
  %0 = bitcast i8* %closure_arg to i16**
  %blur_y285 = load i16*, i16** %0, align 8
  %1 = getelementptr inbounds i8, i8* %closure_arg, i64 8
  %2 = bitcast i8* %1 to i16**
  %input286 = load i16*, i16** %2, align 8
  %3 = getelementptr inbounds i8, i8* %closure_arg, i64 16
  %4 = bitcast i8* %3 to i32*
  %blur_y.extent.1 = load i32, i32* %4, align 4
  %5 = getelementptr inbounds i8, i8* %closure_arg, i64 20
  %6 = bitcast i8* %5 to i32*
  %blur_y.min.1 = load i32, i32* %6, align 4
  %7 = getelementptr inbounds i8, i8* %closure_arg, i64 24
  %8 = bitcast i8* %7 to i32*
  %blur_y.stride.1 = load i32, i32* %8, align 4
  %9 = getelementptr inbounds i8, i8* %closure_arg, i64 28
  %10 = bitcast i8* %9 to i32*
  %input.extent.1 = load i32, i32* %10, align 4
  %11 = getelementptr inbounds i8, i8* %closure_arg, i64 32
  %12 = bitcast i8* %11 to i32*
  %input.min.0 = load i32, i32* %12, align 4
  %13 = getelementptr inbounds i8, i8* %closure_arg, i64 36
  %14 = bitcast i8* %13 to i32*
  %a17 = load i32, i32* %14, align 4
  %15 = getelementptr inbounds i8, i8* %closure_arg, i64 40
  %16 = bitcast i8* %15 to i32*
  %input.stride.1 = load i32, i32* %16, align 4
  %17 = getelementptr inbounds i8, i8* %closure_arg, i64 44
  %18 = bitcast i8* %17 to i32*
  %t293 = load i32, i32* %18, align 4
  %19 = getelementptr inbounds i8, i8* %closure_arg, i64 48
  %20 = bitcast i8* %19 to i32*
  %t298 = load i32, i32* %20, align 4
  %21 = getelementptr inbounds i8, i8* %closure_arg, i64 52
  %22 = bitcast i8* %21 to i32*
  %t302 = load i32, i32* %22, align 4
  %23 = getelementptr inbounds i8, i8* %closure_arg, i64 56
  %24 = bitcast i8* %23 to i32*
  %t303 = load i32, i32* %24, align 4
  %25 = getelementptr inbounds i8, i8* %closure_arg, i64 60
  %26 = bitcast i8* %25 to i32*
  %t304 = load i32, i32* %26, align 4
  %27 = getelementptr inbounds i8, i8* %closure_arg, i64 64
  %28 = bitcast i8* %27 to i32*
  %b25 = load i32, i32* %28, align 4
  %29 = getelementptr inbounds i8, i8* %closure_arg, i64 68
  %30 = bitcast i8* %29 to i32*
  %t306 = load i32, i32* %30, align 4
  %31 = getelementptr inbounds i8, i8* %closure_arg, i64 72
  %32 = bitcast i8* %31 to i32*
  %t307 = load i32, i32* %32, align 4
  %33 = getelementptr inbounds i8, i8* %closure_arg, i64 76
  %34 = bitcast i8* %33 to i32*
  %a15 = load i32, i32* %34, align 4
  %35 = getelementptr inbounds i8, i8* %closure_arg, i64 80
  %36 = bitcast i8* %35 to i32*
  %t310 = load i32, i32* %36, align 4
  %37 = getelementptr inbounds i8, i8* %closure_arg, i64 84
  %38 = bitcast i8* %37 to i32*
  %a2 = load i32, i32* %38, align 4
  %39 = getelementptr inbounds i8, i8* %closure_arg, i64 88
  %40 = bitcast i8* %39 to i32*
  %t312 = load i32, i32* %40, align 4
  %41 = getelementptr inbounds i8, i8* %closure_arg, i64 92
  %42 = bitcast i8* %41 to i32*
  %t313 = load i32, i32* %42, align 4
  %a0 = shl nsw i32 %blur_y.s0.y.y, 7
  %b2 = add nsw i32 %blur_y.extent.1, -128
  %43 = icmp slt i32 %a0, %b2
  %blur_y.s0.y.yi.base.s = select i1 %43, i32 %a0, i32 %b2
  %44 = icmp sgt i32 %a2, 0
  %45 = select i1 %44, i32 %a2, i32 0
  %t355 = zext i32 %45 to i64
  %46 = shl nuw nsw i64 %t355, 4
  %47 = or i64 %46, 6
  %48 = tail call i8* @halide_malloc(i8* %__user_context, i64 %47)
  %blur_x = bitcast i8* %48 to i16*
  %b9 = add nsw i32 %a17, %input.extent.1
  %49 = add i32 %blur_y.s0.y.yi.base.s, %blur_y.min.1
  %t317 = sub i32 %a17, %49
  %b13 = add nsw i32 %input.extent.1, -1
  %50 = icmp sgt i32 %t312, 0
  %51 = add nsw i32 %t306, -1
  %52 = insertelement <64 x i32> undef, i32 %51, i32 0
  %53 = shufflevector <64 x i32> %52, <64 x i32> undef, <4 x i32> zeroinitializer
  %54 = insertelement <64 x i32> undef, i32 %input.min.0, i32 0
  %55 = shufflevector <64 x i32> %54, <64 x i32> undef, <4 x i32> zeroinitializer
  %t331 = sub nsw i32 %t312, %t298
  %56 = icmp sgt i32 %t313, 0
  %t336 = sub nsw i32 %t298, %t313
  %57 = icmp sgt i32 %t336, 0
  %58 = icmp sgt i32 %t331, 0
  %59 = icmp sgt i32 %t310, 0
  %60 = sext i32 %a2 to i64
  %61 = sext i32 %blur_y.stride.1 to i64
  %62 = sext i32 %t302 to i64
  %63 = icmp sgt i32 %t303, 0
  %64 = sext i32 %t304 to i64
  %65 = zext i32 %t336 to i64
  %66 = zext i32 %t310 to i64
  %67 = sext i32 %t307 to i64
  br label %"for blur_y.s0.y.yi.yi.$n.rebased"

"for blur_y.s0.y.yi.yi.$n.rebased":               ; preds = %entry, %after_bb
  %indvars.iv247 = phi i64 [ 0, %entry ], [ %indvars.iv.next248, %after_bb ]
  %indvars.iv247.tr = trunc i64 %indvars.iv247 to i32
  %68 = shl i32 %indvars.iv247.tr, 2
  %t318 = add i32 %68, %blur_y.s0.y.yi.base.s
  %a5 = add i32 %t318, %blur_y.min.1
  %69 = icmp sgt i32 %a5, %a17
  %a4 = select i1 %69, i32 %a5, i32 %a17
  %b6 = add nsw i32 %a5, 4
  %70 = icmp slt i32 %a4, %b6
  %blur_x.s0.y.prologue = select i1 %70, i32 %a4, i32 %b6
  %71 = icmp sgt i32 %a4, %b9
  %a6 = select i1 %71, i32 %a4, i32 %b9
  %72 = icmp slt i32 %a6, %b6
  %blur_x.s0.y.epilogue = select i1 %72, i32 %a6, i32 %b6
  %a10 = sub i32 %t317, %68
  %73 = icmp slt i32 %a10, 4
  %a9 = select i1 %73, i32 %a10, i32 4
  %74 = icmp sgt i32 %a10, 0
  %t323 = select i1 %74, i32 %a9, i32 0
  br i1 %74, label %"for blur_x.s0.y.rebased.preheader", label %"end for blur_x.s0.y.rebased", !prof !385

"for blur_x.s0.y.rebased.preheader":              ; preds = %"for blur_y.s0.y.yi.yi.$n.rebased"
  %75 = sub nsw i32 %a5, %a17
  br label %"for blur_x.s0.y.rebased"

"end for blur_y.s0.y.yi.yi.$n.rebased":           ; preds = %after_bb
  %tobool.not.i.not = icmp eq i8* %48, null
  br i1 %tobool.not.i.not, label %call_destructor.exit, label %if.then.i

if.then.i:                                        ; preds = %"end for blur_y.s0.y.yi.yi.$n.rebased"
  tail call void @halide_free(i8* %__user_context, i8* nonnull %48) #14
  br label %call_destructor.exit

call_destructor.exit:                             ; preds = %"end for blur_y.s0.y.yi.yi.$n.rebased", %if.then.i
  %76 = bitcast i8* %closure_arg to i16**
  %blur_y42287 = load i16*, i16** %76, align 8
  %77 = bitcast i8* %1 to i16**
  %input43288 = load i16*, i16** %77, align 8
  %blur_y.extent.144 = load i32, i32* %4, align 4
  %blur_y.min.145 = load i32, i32* %6, align 4
  %blur_y.stride.146 = load i32, i32* %8, align 4
  %input.extent.147 = load i32, i32* %10, align 4
  %input.min.048 = load i32, i32* %12, align 4
  %b100 = load i32, i32* %14, align 4
  %input.stride.149 = load i32, i32* %16, align 4
  %t29350 = load i32, i32* %18, align 4
  %t29851 = load i32, i32* %20, align 4
  %t30252 = load i32, i32* %22, align 4
  %t30353 = load i32, i32* %24, align 4
  %t30454 = load i32, i32* %26, align 4
  %b101 = load i32, i32* %28, align 4
  %t30655 = load i32, i32* %30, align 4
  %t30756 = load i32, i32* %32, align 4
  %a54 = load i32, i32* %34, align 4
  %t31057 = load i32, i32* %36, align 4
  %a27 = load i32, i32* %38, align 4
  %t31258 = load i32, i32* %40, align 4
  %t31359 = load i32, i32* %42, align 4
  %b27 = add nsw i32 %blur_y.extent.144, -128
  %78 = icmp slt i32 %a0, %b27
  %79 = icmp sgt i32 %a27, 0
  %80 = select i1 %79, i32 %a27, i32 0
  %t413 = zext i32 %80 to i64
  %81 = shl nuw nsw i64 %t413, 4
  %82 = or i64 %81, 6
  %83 = tail call i8* @halide_malloc(i8* %__user_context, i64 %82)
  %blur_x61 = bitcast i8* %83 to i16*
  %84 = select i1 %78, i32 %a0, i32 %b27
  %b40 = add nsw i32 %b100, %input.extent.147
  %85 = add i32 %84, %blur_y.min.145
  %86 = sub i32 %b100, %85
  %b46 = add nsw i32 %input.extent.147, -1
  %87 = icmp sgt i32 %t31258, 0
  %88 = add nsw i32 %t30655, -1
  %89 = insertelement <4 x i32> undef, i32 %88, i32 0
  %90 = shufflevector <4 x i32> %89, <4 x i32> undef, <4 x i32> zeroinitializer
  %91 = insertelement <4 x i32> undef, i32 %input.min.048, i32 0
  %92 = shufflevector <4 x i32> %91, <4 x i32> undef, <4 x i32> zeroinitializer
  %t33186 = sub nsw i32 %t31258, %t29851
  %93 = icmp sgt i32 %t31359, 0
  %t336100 = sub nsw i32 %t29851, %t31359
  %94 = icmp sgt i32 %t336100, 0
  %95 = icmp sgt i32 %t33186, 0
  %96 = icmp sgt i32 %t31057, 0
  %97 = sext i32 %blur_y.stride.146 to i64
  %98 = sext i32 %t30252 to i64
  %99 = icmp sgt i32 %t30353, 0
  %100 = sext i32 %t30454 to i64
  %101 = zext i32 %t336100 to i64
  %102 = zext i32 %t31057 to i64
  %103 = sext i32 %t30756 to i64
  %104 = insertelement <4 x i32> poison, i32 %a27, i32 0
  %105 = shufflevector <4 x i32> %104, <4 x i32> undef, <4 x i32> zeroinitializer
  %106 = insertelement <4 x i32> poison, i32 %a27, i32 0
  %107 = shufflevector <4 x i32> %106, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %"for blur_y.s0.y.yi.yi.$n.rebased67"

"for blur_x.s0.y.rebased":                        ; preds = %"for blur_x.s0.y.rebased.preheader", %"end for blur_x.s0.x.x"
  %blur_x.s0.y.rebased = phi i32 [ %2169, %"end for blur_x.s0.x.x" ], [ 0, %"for blur_x.s0.y.rebased.preheader" ]
  %a11 = add nsw i32 %blur_x.s0.y.rebased, %75
  %108 = icmp slt i32 %a11, %b13
  %a13 = select i1 %108, i32 %a11, i32 %b13
  br i1 %50, label %"for blur_x.s0.x.x.preheader", label %"end for blur_x.s0.x.x", !prof !385

"for blur_x.s0.x.x.preheader":                    ; preds = %"for blur_x.s0.y.rebased"
  %109 = add nsw i32 %blur_x.s0.y.rebased, %a5
  %110 = and i32 %109, 7
  %111 = mul nsw i32 %110, %a2
  %t327 = sub nsw i32 %111, %t293
  %112 = icmp sgt i32 %a13, 0
  %113 = select i1 %112, i32 %a13, i32 0
  %114 = mul nsw i32 %113, %input.stride.1
  %115 = sub nsw i32 %114, %input.min.0
  %116 = insertelement <64 x i32> undef, i32 %115, i32 0
  %t266 = shufflevector <64 x i32> %116, <64 x i32> undef, <64 x i32> zeroinitializer
  %117 = sext i32 %t327 to i64
  br label %"for blur_x.s0.x.x"

"end for blur_x.s0.y.rebased":                    ; preds = %"end for blur_x.s0.x.x", %"for blur_y.s0.y.yi.yi.$n.rebased"
  %118 = icmp slt i32 %a5, %a15
  %a14 = select i1 %118, i32 %a15, i32 %a5
  %119 = icmp slt i32 %a14, %b6
  %120 = select i1 %119, i32 %a14, i32 %b6
  %t328 = sub nsw i32 %120, %blur_x.s0.y.prologue
  %t329 = sub i32 %blur_x.s0.y.prologue, %a17
  %121 = icmp sgt i32 %t328, 0
  br i1 %121, label %"for blur_x.s0.y.rebased1", label %"end for blur_x.s0.y.rebased2", !prof !385

"for blur_x.s0.x.x":                              ; preds = %"for blur_x.s0.x.x.preheader", %"for blur_x.s0.x.x"
  %blur_x.s0.x.x = phi i32 [ %2168, %"for blur_x.s0.x.x" ], [ 0, %"for blur_x.s0.x.x.preheader" ]
  %122 = shl nsw i32 %blur_x.s0.x.x, 6
  %a12 = add nsw i32 %122, %t293
  %123 = icmp slt i32 %a12, %b25
  %blur_x.s0.x.v2.base.s = select i1 %123, i32 %a12, i32 %b25
  %124 = add nsw i32 %blur_x.s0.x.v2.base.s, -63
  %125 = insertelement <64 x i32> undef, i32 %124, i32 0
  %126 = shufflevector <64 x i32> %125, <64 x i32> undef, <64 x i32> zeroinitializer
  %127 = add nsw <64 x i32> %126, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %128 = shufflevector <64 x i32> %127, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %129 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %128, <4 x i32> %53)
  %130 = shufflevector <64 x i32> %127, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %131 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %130, <4 x i32> %53)
  %132 = shufflevector <64 x i32> %127, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %133 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %132, <4 x i32> %53)
  %134 = shufflevector <64 x i32> %127, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %135 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %134, <4 x i32> %53)
  %136 = shufflevector <64 x i32> %127, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %137 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %136, <4 x i32> %53)
  %138 = shufflevector <64 x i32> %127, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %139 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %138, <4 x i32> %53)
  %140 = shufflevector <64 x i32> %127, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %141 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %140, <4 x i32> %53)
  %142 = shufflevector <64 x i32> %127, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %143 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %142, <4 x i32> %53)
  %144 = shufflevector <64 x i32> %127, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %145 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %144, <4 x i32> %53)
  %146 = shufflevector <64 x i32> %127, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %147 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %146, <4 x i32> %53)
  %148 = shufflevector <64 x i32> %127, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %149 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %148, <4 x i32> %53)
  %150 = shufflevector <64 x i32> %127, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %151 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %150, <4 x i32> %53)
  %152 = shufflevector <64 x i32> %127, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %153 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %152, <4 x i32> %53)
  %154 = shufflevector <64 x i32> %127, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %155 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %154, <4 x i32> %53)
  %156 = shufflevector <64 x i32> %127, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %157 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %156, <4 x i32> %53)
  %158 = shufflevector <64 x i32> %127, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %159 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %158, <4 x i32> %53)
  %160 = shufflevector <4 x i32> %159, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %161 = shufflevector <8 x i32> %160, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %162 = shufflevector <16 x i32> %161, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %163 = shufflevector <32 x i32> %162, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %164 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %129, <4 x i32> %55)
  %165 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %131, <4 x i32> %55)
  %166 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %133, <4 x i32> %55)
  %167 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %135, <4 x i32> %55)
  %168 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %137, <4 x i32> %55)
  %169 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %139, <4 x i32> %55)
  %170 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %141, <4 x i32> %55)
  %171 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %143, <4 x i32> %55)
  %172 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %145, <4 x i32> %55)
  %173 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %147, <4 x i32> %55)
  %174 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %149, <4 x i32> %55)
  %175 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %151, <4 x i32> %55)
  %176 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %153, <4 x i32> %55)
  %177 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %155, <4 x i32> %55)
  %178 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %157, <4 x i32> %55)
  %179 = shufflevector <64 x i32> %163, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %180 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %179, <4 x i32> %55)
  %181 = shufflevector <4 x i32> %164, <4 x i32> %165, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %182 = shufflevector <4 x i32> %166, <4 x i32> %167, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %183 = shufflevector <4 x i32> %168, <4 x i32> %169, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %184 = shufflevector <4 x i32> %170, <4 x i32> %171, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %185 = shufflevector <4 x i32> %172, <4 x i32> %173, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %186 = shufflevector <4 x i32> %174, <4 x i32> %175, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %187 = shufflevector <4 x i32> %176, <4 x i32> %177, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %188 = shufflevector <4 x i32> %178, <4 x i32> %180, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %189 = shufflevector <8 x i32> %181, <8 x i32> %182, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %190 = shufflevector <8 x i32> %183, <8 x i32> %184, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %191 = shufflevector <8 x i32> %185, <8 x i32> %186, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %192 = shufflevector <8 x i32> %187, <8 x i32> %188, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %193 = shufflevector <16 x i32> %189, <16 x i32> %190, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %194 = shufflevector <16 x i32> %191, <16 x i32> %192, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %195 = shufflevector <32 x i32> %193, <32 x i32> %194, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %196 = add nsw <64 x i32> %195, %t266
  %197 = extractelement <64 x i32> %196, i32 0
  %198 = sext i32 %197 to i64
  %199 = getelementptr inbounds i16, i16* %input286, i64 %198
  %200 = load i16, i16* %199, align 2, !tbaa !386
  %201 = insertelement <64 x i16> undef, i16 %200, i32 0
  %202 = extractelement <64 x i32> %196, i32 1
  %203 = sext i32 %202 to i64
  %204 = getelementptr inbounds i16, i16* %input286, i64 %203
  %205 = load i16, i16* %204, align 2, !tbaa !386
  %206 = insertelement <64 x i16> %201, i16 %205, i32 1
  %207 = extractelement <64 x i32> %196, i32 2
  %208 = sext i32 %207 to i64
  %209 = getelementptr inbounds i16, i16* %input286, i64 %208
  %210 = load i16, i16* %209, align 2, !tbaa !386
  %211 = insertelement <64 x i16> %206, i16 %210, i32 2
  %212 = extractelement <64 x i32> %196, i32 3
  %213 = sext i32 %212 to i64
  %214 = getelementptr inbounds i16, i16* %input286, i64 %213
  %215 = load i16, i16* %214, align 2, !tbaa !386
  %216 = insertelement <64 x i16> %211, i16 %215, i32 3
  %217 = extractelement <64 x i32> %196, i32 4
  %218 = sext i32 %217 to i64
  %219 = getelementptr inbounds i16, i16* %input286, i64 %218
  %220 = load i16, i16* %219, align 2, !tbaa !386
  %221 = insertelement <64 x i16> %216, i16 %220, i32 4
  %222 = extractelement <64 x i32> %196, i32 5
  %223 = sext i32 %222 to i64
  %224 = getelementptr inbounds i16, i16* %input286, i64 %223
  %225 = load i16, i16* %224, align 2, !tbaa !386
  %226 = insertelement <64 x i16> %221, i16 %225, i32 5
  %227 = extractelement <64 x i32> %196, i32 6
  %228 = sext i32 %227 to i64
  %229 = getelementptr inbounds i16, i16* %input286, i64 %228
  %230 = load i16, i16* %229, align 2, !tbaa !386
  %231 = insertelement <64 x i16> %226, i16 %230, i32 6
  %232 = extractelement <64 x i32> %196, i32 7
  %233 = sext i32 %232 to i64
  %234 = getelementptr inbounds i16, i16* %input286, i64 %233
  %235 = load i16, i16* %234, align 2, !tbaa !386
  %236 = insertelement <64 x i16> %231, i16 %235, i32 7
  %237 = extractelement <64 x i32> %196, i32 8
  %238 = sext i32 %237 to i64
  %239 = getelementptr inbounds i16, i16* %input286, i64 %238
  %240 = load i16, i16* %239, align 2, !tbaa !386
  %241 = insertelement <64 x i16> %236, i16 %240, i32 8
  %242 = extractelement <64 x i32> %196, i32 9
  %243 = sext i32 %242 to i64
  %244 = getelementptr inbounds i16, i16* %input286, i64 %243
  %245 = load i16, i16* %244, align 2, !tbaa !386
  %246 = insertelement <64 x i16> %241, i16 %245, i32 9
  %247 = extractelement <64 x i32> %196, i32 10
  %248 = sext i32 %247 to i64
  %249 = getelementptr inbounds i16, i16* %input286, i64 %248
  %250 = load i16, i16* %249, align 2, !tbaa !386
  %251 = insertelement <64 x i16> %246, i16 %250, i32 10
  %252 = extractelement <64 x i32> %196, i32 11
  %253 = sext i32 %252 to i64
  %254 = getelementptr inbounds i16, i16* %input286, i64 %253
  %255 = load i16, i16* %254, align 2, !tbaa !386
  %256 = insertelement <64 x i16> %251, i16 %255, i32 11
  %257 = extractelement <64 x i32> %196, i32 12
  %258 = sext i32 %257 to i64
  %259 = getelementptr inbounds i16, i16* %input286, i64 %258
  %260 = load i16, i16* %259, align 2, !tbaa !386
  %261 = insertelement <64 x i16> %256, i16 %260, i32 12
  %262 = extractelement <64 x i32> %196, i32 13
  %263 = sext i32 %262 to i64
  %264 = getelementptr inbounds i16, i16* %input286, i64 %263
  %265 = load i16, i16* %264, align 2, !tbaa !386
  %266 = insertelement <64 x i16> %261, i16 %265, i32 13
  %267 = extractelement <64 x i32> %196, i32 14
  %268 = sext i32 %267 to i64
  %269 = getelementptr inbounds i16, i16* %input286, i64 %268
  %270 = load i16, i16* %269, align 2, !tbaa !386
  %271 = insertelement <64 x i16> %266, i16 %270, i32 14
  %272 = extractelement <64 x i32> %196, i32 15
  %273 = sext i32 %272 to i64
  %274 = getelementptr inbounds i16, i16* %input286, i64 %273
  %275 = load i16, i16* %274, align 2, !tbaa !386
  %276 = insertelement <64 x i16> %271, i16 %275, i32 15
  %277 = extractelement <64 x i32> %196, i32 16
  %278 = sext i32 %277 to i64
  %279 = getelementptr inbounds i16, i16* %input286, i64 %278
  %280 = load i16, i16* %279, align 2, !tbaa !386
  %281 = insertelement <64 x i16> %276, i16 %280, i32 16
  %282 = extractelement <64 x i32> %196, i32 17
  %283 = sext i32 %282 to i64
  %284 = getelementptr inbounds i16, i16* %input286, i64 %283
  %285 = load i16, i16* %284, align 2, !tbaa !386
  %286 = insertelement <64 x i16> %281, i16 %285, i32 17
  %287 = extractelement <64 x i32> %196, i32 18
  %288 = sext i32 %287 to i64
  %289 = getelementptr inbounds i16, i16* %input286, i64 %288
  %290 = load i16, i16* %289, align 2, !tbaa !386
  %291 = insertelement <64 x i16> %286, i16 %290, i32 18
  %292 = extractelement <64 x i32> %196, i32 19
  %293 = sext i32 %292 to i64
  %294 = getelementptr inbounds i16, i16* %input286, i64 %293
  %295 = load i16, i16* %294, align 2, !tbaa !386
  %296 = insertelement <64 x i16> %291, i16 %295, i32 19
  %297 = extractelement <64 x i32> %196, i32 20
  %298 = sext i32 %297 to i64
  %299 = getelementptr inbounds i16, i16* %input286, i64 %298
  %300 = load i16, i16* %299, align 2, !tbaa !386
  %301 = insertelement <64 x i16> %296, i16 %300, i32 20
  %302 = extractelement <64 x i32> %196, i32 21
  %303 = sext i32 %302 to i64
  %304 = getelementptr inbounds i16, i16* %input286, i64 %303
  %305 = load i16, i16* %304, align 2, !tbaa !386
  %306 = insertelement <64 x i16> %301, i16 %305, i32 21
  %307 = extractelement <64 x i32> %196, i32 22
  %308 = sext i32 %307 to i64
  %309 = getelementptr inbounds i16, i16* %input286, i64 %308
  %310 = load i16, i16* %309, align 2, !tbaa !386
  %311 = insertelement <64 x i16> %306, i16 %310, i32 22
  %312 = extractelement <64 x i32> %196, i32 23
  %313 = sext i32 %312 to i64
  %314 = getelementptr inbounds i16, i16* %input286, i64 %313
  %315 = load i16, i16* %314, align 2, !tbaa !386
  %316 = insertelement <64 x i16> %311, i16 %315, i32 23
  %317 = extractelement <64 x i32> %196, i32 24
  %318 = sext i32 %317 to i64
  %319 = getelementptr inbounds i16, i16* %input286, i64 %318
  %320 = load i16, i16* %319, align 2, !tbaa !386
  %321 = insertelement <64 x i16> %316, i16 %320, i32 24
  %322 = extractelement <64 x i32> %196, i32 25
  %323 = sext i32 %322 to i64
  %324 = getelementptr inbounds i16, i16* %input286, i64 %323
  %325 = load i16, i16* %324, align 2, !tbaa !386
  %326 = insertelement <64 x i16> %321, i16 %325, i32 25
  %327 = extractelement <64 x i32> %196, i32 26
  %328 = sext i32 %327 to i64
  %329 = getelementptr inbounds i16, i16* %input286, i64 %328
  %330 = load i16, i16* %329, align 2, !tbaa !386
  %331 = insertelement <64 x i16> %326, i16 %330, i32 26
  %332 = extractelement <64 x i32> %196, i32 27
  %333 = sext i32 %332 to i64
  %334 = getelementptr inbounds i16, i16* %input286, i64 %333
  %335 = load i16, i16* %334, align 2, !tbaa !386
  %336 = insertelement <64 x i16> %331, i16 %335, i32 27
  %337 = extractelement <64 x i32> %196, i32 28
  %338 = sext i32 %337 to i64
  %339 = getelementptr inbounds i16, i16* %input286, i64 %338
  %340 = load i16, i16* %339, align 2, !tbaa !386
  %341 = insertelement <64 x i16> %336, i16 %340, i32 28
  %342 = extractelement <64 x i32> %196, i32 29
  %343 = sext i32 %342 to i64
  %344 = getelementptr inbounds i16, i16* %input286, i64 %343
  %345 = load i16, i16* %344, align 2, !tbaa !386
  %346 = insertelement <64 x i16> %341, i16 %345, i32 29
  %347 = extractelement <64 x i32> %196, i32 30
  %348 = sext i32 %347 to i64
  %349 = getelementptr inbounds i16, i16* %input286, i64 %348
  %350 = load i16, i16* %349, align 2, !tbaa !386
  %351 = insertelement <64 x i16> %346, i16 %350, i32 30
  %352 = extractelement <64 x i32> %196, i32 31
  %353 = sext i32 %352 to i64
  %354 = getelementptr inbounds i16, i16* %input286, i64 %353
  %355 = load i16, i16* %354, align 2, !tbaa !386
  %356 = insertelement <64 x i16> %351, i16 %355, i32 31
  %357 = extractelement <64 x i32> %196, i32 32
  %358 = sext i32 %357 to i64
  %359 = getelementptr inbounds i16, i16* %input286, i64 %358
  %360 = load i16, i16* %359, align 2, !tbaa !386
  %361 = insertelement <64 x i16> %356, i16 %360, i32 32
  %362 = extractelement <64 x i32> %196, i32 33
  %363 = sext i32 %362 to i64
  %364 = getelementptr inbounds i16, i16* %input286, i64 %363
  %365 = load i16, i16* %364, align 2, !tbaa !386
  %366 = insertelement <64 x i16> %361, i16 %365, i32 33
  %367 = extractelement <64 x i32> %196, i32 34
  %368 = sext i32 %367 to i64
  %369 = getelementptr inbounds i16, i16* %input286, i64 %368
  %370 = load i16, i16* %369, align 2, !tbaa !386
  %371 = insertelement <64 x i16> %366, i16 %370, i32 34
  %372 = extractelement <64 x i32> %196, i32 35
  %373 = sext i32 %372 to i64
  %374 = getelementptr inbounds i16, i16* %input286, i64 %373
  %375 = load i16, i16* %374, align 2, !tbaa !386
  %376 = insertelement <64 x i16> %371, i16 %375, i32 35
  %377 = extractelement <64 x i32> %196, i32 36
  %378 = sext i32 %377 to i64
  %379 = getelementptr inbounds i16, i16* %input286, i64 %378
  %380 = load i16, i16* %379, align 2, !tbaa !386
  %381 = insertelement <64 x i16> %376, i16 %380, i32 36
  %382 = extractelement <64 x i32> %196, i32 37
  %383 = sext i32 %382 to i64
  %384 = getelementptr inbounds i16, i16* %input286, i64 %383
  %385 = load i16, i16* %384, align 2, !tbaa !386
  %386 = insertelement <64 x i16> %381, i16 %385, i32 37
  %387 = extractelement <64 x i32> %196, i32 38
  %388 = sext i32 %387 to i64
  %389 = getelementptr inbounds i16, i16* %input286, i64 %388
  %390 = load i16, i16* %389, align 2, !tbaa !386
  %391 = insertelement <64 x i16> %386, i16 %390, i32 38
  %392 = extractelement <64 x i32> %196, i32 39
  %393 = sext i32 %392 to i64
  %394 = getelementptr inbounds i16, i16* %input286, i64 %393
  %395 = load i16, i16* %394, align 2, !tbaa !386
  %396 = insertelement <64 x i16> %391, i16 %395, i32 39
  %397 = extractelement <64 x i32> %196, i32 40
  %398 = sext i32 %397 to i64
  %399 = getelementptr inbounds i16, i16* %input286, i64 %398
  %400 = load i16, i16* %399, align 2, !tbaa !386
  %401 = insertelement <64 x i16> %396, i16 %400, i32 40
  %402 = extractelement <64 x i32> %196, i32 41
  %403 = sext i32 %402 to i64
  %404 = getelementptr inbounds i16, i16* %input286, i64 %403
  %405 = load i16, i16* %404, align 2, !tbaa !386
  %406 = insertelement <64 x i16> %401, i16 %405, i32 41
  %407 = extractelement <64 x i32> %196, i32 42
  %408 = sext i32 %407 to i64
  %409 = getelementptr inbounds i16, i16* %input286, i64 %408
  %410 = load i16, i16* %409, align 2, !tbaa !386
  %411 = insertelement <64 x i16> %406, i16 %410, i32 42
  %412 = extractelement <64 x i32> %196, i32 43
  %413 = sext i32 %412 to i64
  %414 = getelementptr inbounds i16, i16* %input286, i64 %413
  %415 = load i16, i16* %414, align 2, !tbaa !386
  %416 = insertelement <64 x i16> %411, i16 %415, i32 43
  %417 = extractelement <64 x i32> %196, i32 44
  %418 = sext i32 %417 to i64
  %419 = getelementptr inbounds i16, i16* %input286, i64 %418
  %420 = load i16, i16* %419, align 2, !tbaa !386
  %421 = insertelement <64 x i16> %416, i16 %420, i32 44
  %422 = extractelement <64 x i32> %196, i32 45
  %423 = sext i32 %422 to i64
  %424 = getelementptr inbounds i16, i16* %input286, i64 %423
  %425 = load i16, i16* %424, align 2, !tbaa !386
  %426 = insertelement <64 x i16> %421, i16 %425, i32 45
  %427 = extractelement <64 x i32> %196, i32 46
  %428 = sext i32 %427 to i64
  %429 = getelementptr inbounds i16, i16* %input286, i64 %428
  %430 = load i16, i16* %429, align 2, !tbaa !386
  %431 = insertelement <64 x i16> %426, i16 %430, i32 46
  %432 = extractelement <64 x i32> %196, i32 47
  %433 = sext i32 %432 to i64
  %434 = getelementptr inbounds i16, i16* %input286, i64 %433
  %435 = load i16, i16* %434, align 2, !tbaa !386
  %436 = insertelement <64 x i16> %431, i16 %435, i32 47
  %437 = extractelement <64 x i32> %196, i32 48
  %438 = sext i32 %437 to i64
  %439 = getelementptr inbounds i16, i16* %input286, i64 %438
  %440 = load i16, i16* %439, align 2, !tbaa !386
  %441 = insertelement <64 x i16> %436, i16 %440, i32 48
  %442 = extractelement <64 x i32> %196, i32 49
  %443 = sext i32 %442 to i64
  %444 = getelementptr inbounds i16, i16* %input286, i64 %443
  %445 = load i16, i16* %444, align 2, !tbaa !386
  %446 = insertelement <64 x i16> %441, i16 %445, i32 49
  %447 = extractelement <64 x i32> %196, i32 50
  %448 = sext i32 %447 to i64
  %449 = getelementptr inbounds i16, i16* %input286, i64 %448
  %450 = load i16, i16* %449, align 2, !tbaa !386
  %451 = insertelement <64 x i16> %446, i16 %450, i32 50
  %452 = extractelement <64 x i32> %196, i32 51
  %453 = sext i32 %452 to i64
  %454 = getelementptr inbounds i16, i16* %input286, i64 %453
  %455 = load i16, i16* %454, align 2, !tbaa !386
  %456 = insertelement <64 x i16> %451, i16 %455, i32 51
  %457 = extractelement <64 x i32> %196, i32 52
  %458 = sext i32 %457 to i64
  %459 = getelementptr inbounds i16, i16* %input286, i64 %458
  %460 = load i16, i16* %459, align 2, !tbaa !386
  %461 = insertelement <64 x i16> %456, i16 %460, i32 52
  %462 = extractelement <64 x i32> %196, i32 53
  %463 = sext i32 %462 to i64
  %464 = getelementptr inbounds i16, i16* %input286, i64 %463
  %465 = load i16, i16* %464, align 2, !tbaa !386
  %466 = insertelement <64 x i16> %461, i16 %465, i32 53
  %467 = extractelement <64 x i32> %196, i32 54
  %468 = sext i32 %467 to i64
  %469 = getelementptr inbounds i16, i16* %input286, i64 %468
  %470 = load i16, i16* %469, align 2, !tbaa !386
  %471 = insertelement <64 x i16> %466, i16 %470, i32 54
  %472 = extractelement <64 x i32> %196, i32 55
  %473 = sext i32 %472 to i64
  %474 = getelementptr inbounds i16, i16* %input286, i64 %473
  %475 = load i16, i16* %474, align 2, !tbaa !386
  %476 = insertelement <64 x i16> %471, i16 %475, i32 55
  %477 = extractelement <64 x i32> %196, i32 56
  %478 = sext i32 %477 to i64
  %479 = getelementptr inbounds i16, i16* %input286, i64 %478
  %480 = load i16, i16* %479, align 2, !tbaa !386
  %481 = insertelement <64 x i16> %476, i16 %480, i32 56
  %482 = extractelement <64 x i32> %196, i32 57
  %483 = sext i32 %482 to i64
  %484 = getelementptr inbounds i16, i16* %input286, i64 %483
  %485 = load i16, i16* %484, align 2, !tbaa !386
  %486 = insertelement <64 x i16> %481, i16 %485, i32 57
  %487 = extractelement <64 x i32> %196, i32 58
  %488 = sext i32 %487 to i64
  %489 = getelementptr inbounds i16, i16* %input286, i64 %488
  %490 = load i16, i16* %489, align 2, !tbaa !386
  %491 = insertelement <64 x i16> %486, i16 %490, i32 58
  %492 = extractelement <64 x i32> %196, i32 59
  %493 = sext i32 %492 to i64
  %494 = getelementptr inbounds i16, i16* %input286, i64 %493
  %495 = load i16, i16* %494, align 2, !tbaa !386
  %496 = insertelement <64 x i16> %491, i16 %495, i32 59
  %497 = extractelement <64 x i32> %196, i32 60
  %498 = sext i32 %497 to i64
  %499 = getelementptr inbounds i16, i16* %input286, i64 %498
  %500 = load i16, i16* %499, align 2, !tbaa !386
  %501 = insertelement <64 x i16> %496, i16 %500, i32 60
  %502 = extractelement <64 x i32> %196, i32 61
  %503 = sext i32 %502 to i64
  %504 = getelementptr inbounds i16, i16* %input286, i64 %503
  %505 = load i16, i16* %504, align 2, !tbaa !386
  %506 = insertelement <64 x i16> %501, i16 %505, i32 61
  %507 = extractelement <64 x i32> %196, i32 62
  %508 = sext i32 %507 to i64
  %509 = getelementptr inbounds i16, i16* %input286, i64 %508
  %510 = load i16, i16* %509, align 2, !tbaa !386
  %511 = insertelement <64 x i16> %506, i16 %510, i32 62
  %512 = extractelement <64 x i32> %196, i32 63
  %513 = sext i32 %512 to i64
  %514 = getelementptr inbounds i16, i16* %input286, i64 %513
  %515 = load i16, i16* %514, align 2, !tbaa !386
  %516 = insertelement <64 x i16> %511, i16 %515, i32 63
  %517 = add nsw i32 %blur_x.s0.x.v2.base.s, -64
  %518 = insertelement <64 x i32> undef, i32 %517, i32 0
  %519 = shufflevector <64 x i32> %518, <64 x i32> undef, <64 x i32> zeroinitializer
  %520 = add nsw <64 x i32> %519, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %521 = shufflevector <64 x i32> %520, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %522 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %521, <4 x i32> %53)
  %523 = shufflevector <64 x i32> %520, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %524 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %523, <4 x i32> %53)
  %525 = shufflevector <64 x i32> %520, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %526 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %525, <4 x i32> %53)
  %527 = shufflevector <64 x i32> %520, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %528 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %527, <4 x i32> %53)
  %529 = shufflevector <64 x i32> %520, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %530 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %529, <4 x i32> %53)
  %531 = shufflevector <64 x i32> %520, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %532 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %531, <4 x i32> %53)
  %533 = shufflevector <64 x i32> %520, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %534 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %533, <4 x i32> %53)
  %535 = shufflevector <64 x i32> %520, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %536 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %535, <4 x i32> %53)
  %537 = shufflevector <64 x i32> %520, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %538 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %537, <4 x i32> %53)
  %539 = shufflevector <64 x i32> %520, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %540 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %539, <4 x i32> %53)
  %541 = shufflevector <64 x i32> %520, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %542 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %541, <4 x i32> %53)
  %543 = shufflevector <64 x i32> %520, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %544 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %543, <4 x i32> %53)
  %545 = shufflevector <64 x i32> %520, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %546 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %545, <4 x i32> %53)
  %547 = shufflevector <64 x i32> %520, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %548 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %547, <4 x i32> %53)
  %549 = shufflevector <64 x i32> %520, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %550 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %549, <4 x i32> %53)
  %551 = shufflevector <64 x i32> %520, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %552 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %551, <4 x i32> %53)
  %553 = shufflevector <4 x i32> %552, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %554 = shufflevector <8 x i32> %553, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %555 = shufflevector <16 x i32> %554, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %556 = shufflevector <32 x i32> %555, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %557 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %522, <4 x i32> %55)
  %558 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %524, <4 x i32> %55)
  %559 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %526, <4 x i32> %55)
  %560 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %528, <4 x i32> %55)
  %561 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %530, <4 x i32> %55)
  %562 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %532, <4 x i32> %55)
  %563 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %534, <4 x i32> %55)
  %564 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %536, <4 x i32> %55)
  %565 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %538, <4 x i32> %55)
  %566 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %540, <4 x i32> %55)
  %567 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %542, <4 x i32> %55)
  %568 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %544, <4 x i32> %55)
  %569 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %546, <4 x i32> %55)
  %570 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %548, <4 x i32> %55)
  %571 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %550, <4 x i32> %55)
  %572 = shufflevector <64 x i32> %556, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %573 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %572, <4 x i32> %55)
  %574 = shufflevector <4 x i32> %557, <4 x i32> %558, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %575 = shufflevector <4 x i32> %559, <4 x i32> %560, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %576 = shufflevector <4 x i32> %561, <4 x i32> %562, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %577 = shufflevector <4 x i32> %563, <4 x i32> %564, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %578 = shufflevector <4 x i32> %565, <4 x i32> %566, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %579 = shufflevector <4 x i32> %567, <4 x i32> %568, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %580 = shufflevector <4 x i32> %569, <4 x i32> %570, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %581 = shufflevector <4 x i32> %571, <4 x i32> %573, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %582 = shufflevector <8 x i32> %574, <8 x i32> %575, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %583 = shufflevector <8 x i32> %576, <8 x i32> %577, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %584 = shufflevector <8 x i32> %578, <8 x i32> %579, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %585 = shufflevector <8 x i32> %580, <8 x i32> %581, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %586 = shufflevector <16 x i32> %582, <16 x i32> %583, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %587 = shufflevector <16 x i32> %584, <16 x i32> %585, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %588 = shufflevector <32 x i32> %586, <32 x i32> %587, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %589 = add nsw <64 x i32> %588, %t266
  %590 = extractelement <64 x i32> %589, i32 0
  %591 = sext i32 %590 to i64
  %592 = getelementptr inbounds i16, i16* %input286, i64 %591
  %593 = load i16, i16* %592, align 2, !tbaa !386
  %594 = insertelement <64 x i16> undef, i16 %593, i32 0
  %595 = extractelement <64 x i32> %589, i32 1
  %596 = sext i32 %595 to i64
  %597 = getelementptr inbounds i16, i16* %input286, i64 %596
  %598 = load i16, i16* %597, align 2, !tbaa !386
  %599 = insertelement <64 x i16> %594, i16 %598, i32 1
  %600 = extractelement <64 x i32> %589, i32 2
  %601 = sext i32 %600 to i64
  %602 = getelementptr inbounds i16, i16* %input286, i64 %601
  %603 = load i16, i16* %602, align 2, !tbaa !386
  %604 = insertelement <64 x i16> %599, i16 %603, i32 2
  %605 = extractelement <64 x i32> %589, i32 3
  %606 = sext i32 %605 to i64
  %607 = getelementptr inbounds i16, i16* %input286, i64 %606
  %608 = load i16, i16* %607, align 2, !tbaa !386
  %609 = insertelement <64 x i16> %604, i16 %608, i32 3
  %610 = extractelement <64 x i32> %589, i32 4
  %611 = sext i32 %610 to i64
  %612 = getelementptr inbounds i16, i16* %input286, i64 %611
  %613 = load i16, i16* %612, align 2, !tbaa !386
  %614 = insertelement <64 x i16> %609, i16 %613, i32 4
  %615 = extractelement <64 x i32> %589, i32 5
  %616 = sext i32 %615 to i64
  %617 = getelementptr inbounds i16, i16* %input286, i64 %616
  %618 = load i16, i16* %617, align 2, !tbaa !386
  %619 = insertelement <64 x i16> %614, i16 %618, i32 5
  %620 = extractelement <64 x i32> %589, i32 6
  %621 = sext i32 %620 to i64
  %622 = getelementptr inbounds i16, i16* %input286, i64 %621
  %623 = load i16, i16* %622, align 2, !tbaa !386
  %624 = insertelement <64 x i16> %619, i16 %623, i32 6
  %625 = extractelement <64 x i32> %589, i32 7
  %626 = sext i32 %625 to i64
  %627 = getelementptr inbounds i16, i16* %input286, i64 %626
  %628 = load i16, i16* %627, align 2, !tbaa !386
  %629 = insertelement <64 x i16> %624, i16 %628, i32 7
  %630 = extractelement <64 x i32> %589, i32 8
  %631 = sext i32 %630 to i64
  %632 = getelementptr inbounds i16, i16* %input286, i64 %631
  %633 = load i16, i16* %632, align 2, !tbaa !386
  %634 = insertelement <64 x i16> %629, i16 %633, i32 8
  %635 = extractelement <64 x i32> %589, i32 9
  %636 = sext i32 %635 to i64
  %637 = getelementptr inbounds i16, i16* %input286, i64 %636
  %638 = load i16, i16* %637, align 2, !tbaa !386
  %639 = insertelement <64 x i16> %634, i16 %638, i32 9
  %640 = extractelement <64 x i32> %589, i32 10
  %641 = sext i32 %640 to i64
  %642 = getelementptr inbounds i16, i16* %input286, i64 %641
  %643 = load i16, i16* %642, align 2, !tbaa !386
  %644 = insertelement <64 x i16> %639, i16 %643, i32 10
  %645 = extractelement <64 x i32> %589, i32 11
  %646 = sext i32 %645 to i64
  %647 = getelementptr inbounds i16, i16* %input286, i64 %646
  %648 = load i16, i16* %647, align 2, !tbaa !386
  %649 = insertelement <64 x i16> %644, i16 %648, i32 11
  %650 = extractelement <64 x i32> %589, i32 12
  %651 = sext i32 %650 to i64
  %652 = getelementptr inbounds i16, i16* %input286, i64 %651
  %653 = load i16, i16* %652, align 2, !tbaa !386
  %654 = insertelement <64 x i16> %649, i16 %653, i32 12
  %655 = extractelement <64 x i32> %589, i32 13
  %656 = sext i32 %655 to i64
  %657 = getelementptr inbounds i16, i16* %input286, i64 %656
  %658 = load i16, i16* %657, align 2, !tbaa !386
  %659 = insertelement <64 x i16> %654, i16 %658, i32 13
  %660 = extractelement <64 x i32> %589, i32 14
  %661 = sext i32 %660 to i64
  %662 = getelementptr inbounds i16, i16* %input286, i64 %661
  %663 = load i16, i16* %662, align 2, !tbaa !386
  %664 = insertelement <64 x i16> %659, i16 %663, i32 14
  %665 = extractelement <64 x i32> %589, i32 15
  %666 = sext i32 %665 to i64
  %667 = getelementptr inbounds i16, i16* %input286, i64 %666
  %668 = load i16, i16* %667, align 2, !tbaa !386
  %669 = insertelement <64 x i16> %664, i16 %668, i32 15
  %670 = extractelement <64 x i32> %589, i32 16
  %671 = sext i32 %670 to i64
  %672 = getelementptr inbounds i16, i16* %input286, i64 %671
  %673 = load i16, i16* %672, align 2, !tbaa !386
  %674 = insertelement <64 x i16> %669, i16 %673, i32 16
  %675 = extractelement <64 x i32> %589, i32 17
  %676 = sext i32 %675 to i64
  %677 = getelementptr inbounds i16, i16* %input286, i64 %676
  %678 = load i16, i16* %677, align 2, !tbaa !386
  %679 = insertelement <64 x i16> %674, i16 %678, i32 17
  %680 = extractelement <64 x i32> %589, i32 18
  %681 = sext i32 %680 to i64
  %682 = getelementptr inbounds i16, i16* %input286, i64 %681
  %683 = load i16, i16* %682, align 2, !tbaa !386
  %684 = insertelement <64 x i16> %679, i16 %683, i32 18
  %685 = extractelement <64 x i32> %589, i32 19
  %686 = sext i32 %685 to i64
  %687 = getelementptr inbounds i16, i16* %input286, i64 %686
  %688 = load i16, i16* %687, align 2, !tbaa !386
  %689 = insertelement <64 x i16> %684, i16 %688, i32 19
  %690 = extractelement <64 x i32> %589, i32 20
  %691 = sext i32 %690 to i64
  %692 = getelementptr inbounds i16, i16* %input286, i64 %691
  %693 = load i16, i16* %692, align 2, !tbaa !386
  %694 = insertelement <64 x i16> %689, i16 %693, i32 20
  %695 = extractelement <64 x i32> %589, i32 21
  %696 = sext i32 %695 to i64
  %697 = getelementptr inbounds i16, i16* %input286, i64 %696
  %698 = load i16, i16* %697, align 2, !tbaa !386
  %699 = insertelement <64 x i16> %694, i16 %698, i32 21
  %700 = extractelement <64 x i32> %589, i32 22
  %701 = sext i32 %700 to i64
  %702 = getelementptr inbounds i16, i16* %input286, i64 %701
  %703 = load i16, i16* %702, align 2, !tbaa !386
  %704 = insertelement <64 x i16> %699, i16 %703, i32 22
  %705 = extractelement <64 x i32> %589, i32 23
  %706 = sext i32 %705 to i64
  %707 = getelementptr inbounds i16, i16* %input286, i64 %706
  %708 = load i16, i16* %707, align 2, !tbaa !386
  %709 = insertelement <64 x i16> %704, i16 %708, i32 23
  %710 = extractelement <64 x i32> %589, i32 24
  %711 = sext i32 %710 to i64
  %712 = getelementptr inbounds i16, i16* %input286, i64 %711
  %713 = load i16, i16* %712, align 2, !tbaa !386
  %714 = insertelement <64 x i16> %709, i16 %713, i32 24
  %715 = extractelement <64 x i32> %589, i32 25
  %716 = sext i32 %715 to i64
  %717 = getelementptr inbounds i16, i16* %input286, i64 %716
  %718 = load i16, i16* %717, align 2, !tbaa !386
  %719 = insertelement <64 x i16> %714, i16 %718, i32 25
  %720 = extractelement <64 x i32> %589, i32 26
  %721 = sext i32 %720 to i64
  %722 = getelementptr inbounds i16, i16* %input286, i64 %721
  %723 = load i16, i16* %722, align 2, !tbaa !386
  %724 = insertelement <64 x i16> %719, i16 %723, i32 26
  %725 = extractelement <64 x i32> %589, i32 27
  %726 = sext i32 %725 to i64
  %727 = getelementptr inbounds i16, i16* %input286, i64 %726
  %728 = load i16, i16* %727, align 2, !tbaa !386
  %729 = insertelement <64 x i16> %724, i16 %728, i32 27
  %730 = extractelement <64 x i32> %589, i32 28
  %731 = sext i32 %730 to i64
  %732 = getelementptr inbounds i16, i16* %input286, i64 %731
  %733 = load i16, i16* %732, align 2, !tbaa !386
  %734 = insertelement <64 x i16> %729, i16 %733, i32 28
  %735 = extractelement <64 x i32> %589, i32 29
  %736 = sext i32 %735 to i64
  %737 = getelementptr inbounds i16, i16* %input286, i64 %736
  %738 = load i16, i16* %737, align 2, !tbaa !386
  %739 = insertelement <64 x i16> %734, i16 %738, i32 29
  %740 = extractelement <64 x i32> %589, i32 30
  %741 = sext i32 %740 to i64
  %742 = getelementptr inbounds i16, i16* %input286, i64 %741
  %743 = load i16, i16* %742, align 2, !tbaa !386
  %744 = insertelement <64 x i16> %739, i16 %743, i32 30
  %745 = extractelement <64 x i32> %589, i32 31
  %746 = sext i32 %745 to i64
  %747 = getelementptr inbounds i16, i16* %input286, i64 %746
  %748 = load i16, i16* %747, align 2, !tbaa !386
  %749 = insertelement <64 x i16> %744, i16 %748, i32 31
  %750 = extractelement <64 x i32> %589, i32 32
  %751 = sext i32 %750 to i64
  %752 = getelementptr inbounds i16, i16* %input286, i64 %751
  %753 = load i16, i16* %752, align 2, !tbaa !386
  %754 = insertelement <64 x i16> %749, i16 %753, i32 32
  %755 = extractelement <64 x i32> %589, i32 33
  %756 = sext i32 %755 to i64
  %757 = getelementptr inbounds i16, i16* %input286, i64 %756
  %758 = load i16, i16* %757, align 2, !tbaa !386
  %759 = insertelement <64 x i16> %754, i16 %758, i32 33
  %760 = extractelement <64 x i32> %589, i32 34
  %761 = sext i32 %760 to i64
  %762 = getelementptr inbounds i16, i16* %input286, i64 %761
  %763 = load i16, i16* %762, align 2, !tbaa !386
  %764 = insertelement <64 x i16> %759, i16 %763, i32 34
  %765 = extractelement <64 x i32> %589, i32 35
  %766 = sext i32 %765 to i64
  %767 = getelementptr inbounds i16, i16* %input286, i64 %766
  %768 = load i16, i16* %767, align 2, !tbaa !386
  %769 = insertelement <64 x i16> %764, i16 %768, i32 35
  %770 = extractelement <64 x i32> %589, i32 36
  %771 = sext i32 %770 to i64
  %772 = getelementptr inbounds i16, i16* %input286, i64 %771
  %773 = load i16, i16* %772, align 2, !tbaa !386
  %774 = insertelement <64 x i16> %769, i16 %773, i32 36
  %775 = extractelement <64 x i32> %589, i32 37
  %776 = sext i32 %775 to i64
  %777 = getelementptr inbounds i16, i16* %input286, i64 %776
  %778 = load i16, i16* %777, align 2, !tbaa !386
  %779 = insertelement <64 x i16> %774, i16 %778, i32 37
  %780 = extractelement <64 x i32> %589, i32 38
  %781 = sext i32 %780 to i64
  %782 = getelementptr inbounds i16, i16* %input286, i64 %781
  %783 = load i16, i16* %782, align 2, !tbaa !386
  %784 = insertelement <64 x i16> %779, i16 %783, i32 38
  %785 = extractelement <64 x i32> %589, i32 39
  %786 = sext i32 %785 to i64
  %787 = getelementptr inbounds i16, i16* %input286, i64 %786
  %788 = load i16, i16* %787, align 2, !tbaa !386
  %789 = insertelement <64 x i16> %784, i16 %788, i32 39
  %790 = extractelement <64 x i32> %589, i32 40
  %791 = sext i32 %790 to i64
  %792 = getelementptr inbounds i16, i16* %input286, i64 %791
  %793 = load i16, i16* %792, align 2, !tbaa !386
  %794 = insertelement <64 x i16> %789, i16 %793, i32 40
  %795 = extractelement <64 x i32> %589, i32 41
  %796 = sext i32 %795 to i64
  %797 = getelementptr inbounds i16, i16* %input286, i64 %796
  %798 = load i16, i16* %797, align 2, !tbaa !386
  %799 = insertelement <64 x i16> %794, i16 %798, i32 41
  %800 = extractelement <64 x i32> %589, i32 42
  %801 = sext i32 %800 to i64
  %802 = getelementptr inbounds i16, i16* %input286, i64 %801
  %803 = load i16, i16* %802, align 2, !tbaa !386
  %804 = insertelement <64 x i16> %799, i16 %803, i32 42
  %805 = extractelement <64 x i32> %589, i32 43
  %806 = sext i32 %805 to i64
  %807 = getelementptr inbounds i16, i16* %input286, i64 %806
  %808 = load i16, i16* %807, align 2, !tbaa !386
  %809 = insertelement <64 x i16> %804, i16 %808, i32 43
  %810 = extractelement <64 x i32> %589, i32 44
  %811 = sext i32 %810 to i64
  %812 = getelementptr inbounds i16, i16* %input286, i64 %811
  %813 = load i16, i16* %812, align 2, !tbaa !386
  %814 = insertelement <64 x i16> %809, i16 %813, i32 44
  %815 = extractelement <64 x i32> %589, i32 45
  %816 = sext i32 %815 to i64
  %817 = getelementptr inbounds i16, i16* %input286, i64 %816
  %818 = load i16, i16* %817, align 2, !tbaa !386
  %819 = insertelement <64 x i16> %814, i16 %818, i32 45
  %820 = extractelement <64 x i32> %589, i32 46
  %821 = sext i32 %820 to i64
  %822 = getelementptr inbounds i16, i16* %input286, i64 %821
  %823 = load i16, i16* %822, align 2, !tbaa !386
  %824 = insertelement <64 x i16> %819, i16 %823, i32 46
  %825 = extractelement <64 x i32> %589, i32 47
  %826 = sext i32 %825 to i64
  %827 = getelementptr inbounds i16, i16* %input286, i64 %826
  %828 = load i16, i16* %827, align 2, !tbaa !386
  %829 = insertelement <64 x i16> %824, i16 %828, i32 47
  %830 = extractelement <64 x i32> %589, i32 48
  %831 = sext i32 %830 to i64
  %832 = getelementptr inbounds i16, i16* %input286, i64 %831
  %833 = load i16, i16* %832, align 2, !tbaa !386
  %834 = insertelement <64 x i16> %829, i16 %833, i32 48
  %835 = extractelement <64 x i32> %589, i32 49
  %836 = sext i32 %835 to i64
  %837 = getelementptr inbounds i16, i16* %input286, i64 %836
  %838 = load i16, i16* %837, align 2, !tbaa !386
  %839 = insertelement <64 x i16> %834, i16 %838, i32 49
  %840 = extractelement <64 x i32> %589, i32 50
  %841 = sext i32 %840 to i64
  %842 = getelementptr inbounds i16, i16* %input286, i64 %841
  %843 = load i16, i16* %842, align 2, !tbaa !386
  %844 = insertelement <64 x i16> %839, i16 %843, i32 50
  %845 = extractelement <64 x i32> %589, i32 51
  %846 = sext i32 %845 to i64
  %847 = getelementptr inbounds i16, i16* %input286, i64 %846
  %848 = load i16, i16* %847, align 2, !tbaa !386
  %849 = insertelement <64 x i16> %844, i16 %848, i32 51
  %850 = extractelement <64 x i32> %589, i32 52
  %851 = sext i32 %850 to i64
  %852 = getelementptr inbounds i16, i16* %input286, i64 %851
  %853 = load i16, i16* %852, align 2, !tbaa !386
  %854 = insertelement <64 x i16> %849, i16 %853, i32 52
  %855 = extractelement <64 x i32> %589, i32 53
  %856 = sext i32 %855 to i64
  %857 = getelementptr inbounds i16, i16* %input286, i64 %856
  %858 = load i16, i16* %857, align 2, !tbaa !386
  %859 = insertelement <64 x i16> %854, i16 %858, i32 53
  %860 = extractelement <64 x i32> %589, i32 54
  %861 = sext i32 %860 to i64
  %862 = getelementptr inbounds i16, i16* %input286, i64 %861
  %863 = load i16, i16* %862, align 2, !tbaa !386
  %864 = insertelement <64 x i16> %859, i16 %863, i32 54
  %865 = extractelement <64 x i32> %589, i32 55
  %866 = sext i32 %865 to i64
  %867 = getelementptr inbounds i16, i16* %input286, i64 %866
  %868 = load i16, i16* %867, align 2, !tbaa !386
  %869 = insertelement <64 x i16> %864, i16 %868, i32 55
  %870 = extractelement <64 x i32> %589, i32 56
  %871 = sext i32 %870 to i64
  %872 = getelementptr inbounds i16, i16* %input286, i64 %871
  %873 = load i16, i16* %872, align 2, !tbaa !386
  %874 = insertelement <64 x i16> %869, i16 %873, i32 56
  %875 = extractelement <64 x i32> %589, i32 57
  %876 = sext i32 %875 to i64
  %877 = getelementptr inbounds i16, i16* %input286, i64 %876
  %878 = load i16, i16* %877, align 2, !tbaa !386
  %879 = insertelement <64 x i16> %874, i16 %878, i32 57
  %880 = extractelement <64 x i32> %589, i32 58
  %881 = sext i32 %880 to i64
  %882 = getelementptr inbounds i16, i16* %input286, i64 %881
  %883 = load i16, i16* %882, align 2, !tbaa !386
  %884 = insertelement <64 x i16> %879, i16 %883, i32 58
  %885 = extractelement <64 x i32> %589, i32 59
  %886 = sext i32 %885 to i64
  %887 = getelementptr inbounds i16, i16* %input286, i64 %886
  %888 = load i16, i16* %887, align 2, !tbaa !386
  %889 = insertelement <64 x i16> %884, i16 %888, i32 59
  %890 = extractelement <64 x i32> %589, i32 60
  %891 = sext i32 %890 to i64
  %892 = getelementptr inbounds i16, i16* %input286, i64 %891
  %893 = load i16, i16* %892, align 2, !tbaa !386
  %894 = insertelement <64 x i16> %889, i16 %893, i32 60
  %895 = extractelement <64 x i32> %589, i32 61
  %896 = sext i32 %895 to i64
  %897 = getelementptr inbounds i16, i16* %input286, i64 %896
  %898 = load i16, i16* %897, align 2, !tbaa !386
  %899 = insertelement <64 x i16> %894, i16 %898, i32 61
  %900 = extractelement <64 x i32> %589, i32 62
  %901 = sext i32 %900 to i64
  %902 = getelementptr inbounds i16, i16* %input286, i64 %901
  %903 = load i16, i16* %902, align 2, !tbaa !386
  %904 = insertelement <64 x i16> %899, i16 %903, i32 62
  %905 = extractelement <64 x i32> %589, i32 63
  %906 = sext i32 %905 to i64
  %907 = getelementptr inbounds i16, i16* %input286, i64 %906
  %908 = load i16, i16* %907, align 2, !tbaa !386
  %909 = insertelement <64 x i16> %904, i16 %908, i32 63
  %910 = add nsw i32 %blur_x.s0.x.v2.base.s, -62
  %911 = insertelement <64 x i32> undef, i32 %910, i32 0
  %912 = shufflevector <64 x i32> %911, <64 x i32> undef, <64 x i32> zeroinitializer
  %913 = add nsw <64 x i32> %912, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %914 = shufflevector <64 x i32> %913, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %915 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %914, <4 x i32> %53)
  %916 = shufflevector <64 x i32> %913, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %917 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %916, <4 x i32> %53)
  %918 = shufflevector <64 x i32> %913, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %919 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %918, <4 x i32> %53)
  %920 = shufflevector <64 x i32> %913, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %921 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %920, <4 x i32> %53)
  %922 = shufflevector <64 x i32> %913, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %923 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %922, <4 x i32> %53)
  %924 = shufflevector <64 x i32> %913, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %925 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %924, <4 x i32> %53)
  %926 = shufflevector <64 x i32> %913, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %927 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %926, <4 x i32> %53)
  %928 = shufflevector <64 x i32> %913, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %929 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %928, <4 x i32> %53)
  %930 = shufflevector <64 x i32> %913, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %931 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %930, <4 x i32> %53)
  %932 = shufflevector <64 x i32> %913, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %933 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %932, <4 x i32> %53)
  %934 = shufflevector <64 x i32> %913, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %935 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %934, <4 x i32> %53)
  %936 = shufflevector <64 x i32> %913, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %937 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %936, <4 x i32> %53)
  %938 = shufflevector <64 x i32> %913, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %939 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %938, <4 x i32> %53)
  %940 = shufflevector <64 x i32> %913, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %941 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %940, <4 x i32> %53)
  %942 = shufflevector <64 x i32> %913, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %943 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %942, <4 x i32> %53)
  %944 = shufflevector <64 x i32> %913, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %945 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %944, <4 x i32> %53)
  %946 = shufflevector <4 x i32> %945, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %947 = shufflevector <8 x i32> %946, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %948 = shufflevector <16 x i32> %947, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %949 = shufflevector <32 x i32> %948, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %950 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %915, <4 x i32> %55)
  %951 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %917, <4 x i32> %55)
  %952 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %919, <4 x i32> %55)
  %953 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %921, <4 x i32> %55)
  %954 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %923, <4 x i32> %55)
  %955 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %925, <4 x i32> %55)
  %956 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %927, <4 x i32> %55)
  %957 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %929, <4 x i32> %55)
  %958 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %931, <4 x i32> %55)
  %959 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %933, <4 x i32> %55)
  %960 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %935, <4 x i32> %55)
  %961 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %937, <4 x i32> %55)
  %962 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %939, <4 x i32> %55)
  %963 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %941, <4 x i32> %55)
  %964 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %943, <4 x i32> %55)
  %965 = shufflevector <64 x i32> %949, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %966 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %965, <4 x i32> %55)
  %967 = shufflevector <4 x i32> %950, <4 x i32> %951, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %968 = shufflevector <4 x i32> %952, <4 x i32> %953, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %969 = shufflevector <4 x i32> %954, <4 x i32> %955, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %970 = shufflevector <4 x i32> %956, <4 x i32> %957, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %971 = shufflevector <4 x i32> %958, <4 x i32> %959, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %972 = shufflevector <4 x i32> %960, <4 x i32> %961, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %973 = shufflevector <4 x i32> %962, <4 x i32> %963, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %974 = shufflevector <4 x i32> %964, <4 x i32> %966, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %975 = shufflevector <8 x i32> %967, <8 x i32> %968, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %976 = shufflevector <8 x i32> %969, <8 x i32> %970, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %977 = shufflevector <8 x i32> %971, <8 x i32> %972, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %978 = shufflevector <8 x i32> %973, <8 x i32> %974, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %979 = shufflevector <16 x i32> %975, <16 x i32> %976, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %980 = shufflevector <16 x i32> %977, <16 x i32> %978, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %981 = shufflevector <32 x i32> %979, <32 x i32> %980, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %982 = add nsw <64 x i32> %981, %t266
  %983 = extractelement <64 x i32> %982, i32 0
  %984 = sext i32 %983 to i64
  %985 = getelementptr inbounds i16, i16* %input286, i64 %984
  %986 = load i16, i16* %985, align 2, !tbaa !386
  %987 = insertelement <64 x i16> undef, i16 %986, i32 0
  %988 = extractelement <64 x i32> %982, i32 1
  %989 = sext i32 %988 to i64
  %990 = getelementptr inbounds i16, i16* %input286, i64 %989
  %991 = load i16, i16* %990, align 2, !tbaa !386
  %992 = insertelement <64 x i16> %987, i16 %991, i32 1
  %993 = extractelement <64 x i32> %982, i32 2
  %994 = sext i32 %993 to i64
  %995 = getelementptr inbounds i16, i16* %input286, i64 %994
  %996 = load i16, i16* %995, align 2, !tbaa !386
  %997 = insertelement <64 x i16> %992, i16 %996, i32 2
  %998 = extractelement <64 x i32> %982, i32 3
  %999 = sext i32 %998 to i64
  %1000 = getelementptr inbounds i16, i16* %input286, i64 %999
  %1001 = load i16, i16* %1000, align 2, !tbaa !386
  %1002 = insertelement <64 x i16> %997, i16 %1001, i32 3
  %1003 = extractelement <64 x i32> %982, i32 4
  %1004 = sext i32 %1003 to i64
  %1005 = getelementptr inbounds i16, i16* %input286, i64 %1004
  %1006 = load i16, i16* %1005, align 2, !tbaa !386
  %1007 = insertelement <64 x i16> %1002, i16 %1006, i32 4
  %1008 = extractelement <64 x i32> %982, i32 5
  %1009 = sext i32 %1008 to i64
  %1010 = getelementptr inbounds i16, i16* %input286, i64 %1009
  %1011 = load i16, i16* %1010, align 2, !tbaa !386
  %1012 = insertelement <64 x i16> %1007, i16 %1011, i32 5
  %1013 = extractelement <64 x i32> %982, i32 6
  %1014 = sext i32 %1013 to i64
  %1015 = getelementptr inbounds i16, i16* %input286, i64 %1014
  %1016 = load i16, i16* %1015, align 2, !tbaa !386
  %1017 = insertelement <64 x i16> %1012, i16 %1016, i32 6
  %1018 = extractelement <64 x i32> %982, i32 7
  %1019 = sext i32 %1018 to i64
  %1020 = getelementptr inbounds i16, i16* %input286, i64 %1019
  %1021 = load i16, i16* %1020, align 2, !tbaa !386
  %1022 = insertelement <64 x i16> %1017, i16 %1021, i32 7
  %1023 = extractelement <64 x i32> %982, i32 8
  %1024 = sext i32 %1023 to i64
  %1025 = getelementptr inbounds i16, i16* %input286, i64 %1024
  %1026 = load i16, i16* %1025, align 2, !tbaa !386
  %1027 = insertelement <64 x i16> %1022, i16 %1026, i32 8
  %1028 = extractelement <64 x i32> %982, i32 9
  %1029 = sext i32 %1028 to i64
  %1030 = getelementptr inbounds i16, i16* %input286, i64 %1029
  %1031 = load i16, i16* %1030, align 2, !tbaa !386
  %1032 = insertelement <64 x i16> %1027, i16 %1031, i32 9
  %1033 = extractelement <64 x i32> %982, i32 10
  %1034 = sext i32 %1033 to i64
  %1035 = getelementptr inbounds i16, i16* %input286, i64 %1034
  %1036 = load i16, i16* %1035, align 2, !tbaa !386
  %1037 = insertelement <64 x i16> %1032, i16 %1036, i32 10
  %1038 = extractelement <64 x i32> %982, i32 11
  %1039 = sext i32 %1038 to i64
  %1040 = getelementptr inbounds i16, i16* %input286, i64 %1039
  %1041 = load i16, i16* %1040, align 2, !tbaa !386
  %1042 = insertelement <64 x i16> %1037, i16 %1041, i32 11
  %1043 = extractelement <64 x i32> %982, i32 12
  %1044 = sext i32 %1043 to i64
  %1045 = getelementptr inbounds i16, i16* %input286, i64 %1044
  %1046 = load i16, i16* %1045, align 2, !tbaa !386
  %1047 = insertelement <64 x i16> %1042, i16 %1046, i32 12
  %1048 = extractelement <64 x i32> %982, i32 13
  %1049 = sext i32 %1048 to i64
  %1050 = getelementptr inbounds i16, i16* %input286, i64 %1049
  %1051 = load i16, i16* %1050, align 2, !tbaa !386
  %1052 = insertelement <64 x i16> %1047, i16 %1051, i32 13
  %1053 = extractelement <64 x i32> %982, i32 14
  %1054 = sext i32 %1053 to i64
  %1055 = getelementptr inbounds i16, i16* %input286, i64 %1054
  %1056 = load i16, i16* %1055, align 2, !tbaa !386
  %1057 = insertelement <64 x i16> %1052, i16 %1056, i32 14
  %1058 = extractelement <64 x i32> %982, i32 15
  %1059 = sext i32 %1058 to i64
  %1060 = getelementptr inbounds i16, i16* %input286, i64 %1059
  %1061 = load i16, i16* %1060, align 2, !tbaa !386
  %1062 = insertelement <64 x i16> %1057, i16 %1061, i32 15
  %1063 = extractelement <64 x i32> %982, i32 16
  %1064 = sext i32 %1063 to i64
  %1065 = getelementptr inbounds i16, i16* %input286, i64 %1064
  %1066 = load i16, i16* %1065, align 2, !tbaa !386
  %1067 = insertelement <64 x i16> %1062, i16 %1066, i32 16
  %1068 = extractelement <64 x i32> %982, i32 17
  %1069 = sext i32 %1068 to i64
  %1070 = getelementptr inbounds i16, i16* %input286, i64 %1069
  %1071 = load i16, i16* %1070, align 2, !tbaa !386
  %1072 = insertelement <64 x i16> %1067, i16 %1071, i32 17
  %1073 = extractelement <64 x i32> %982, i32 18
  %1074 = sext i32 %1073 to i64
  %1075 = getelementptr inbounds i16, i16* %input286, i64 %1074
  %1076 = load i16, i16* %1075, align 2, !tbaa !386
  %1077 = insertelement <64 x i16> %1072, i16 %1076, i32 18
  %1078 = extractelement <64 x i32> %982, i32 19
  %1079 = sext i32 %1078 to i64
  %1080 = getelementptr inbounds i16, i16* %input286, i64 %1079
  %1081 = load i16, i16* %1080, align 2, !tbaa !386
  %1082 = insertelement <64 x i16> %1077, i16 %1081, i32 19
  %1083 = extractelement <64 x i32> %982, i32 20
  %1084 = sext i32 %1083 to i64
  %1085 = getelementptr inbounds i16, i16* %input286, i64 %1084
  %1086 = load i16, i16* %1085, align 2, !tbaa !386
  %1087 = insertelement <64 x i16> %1082, i16 %1086, i32 20
  %1088 = extractelement <64 x i32> %982, i32 21
  %1089 = sext i32 %1088 to i64
  %1090 = getelementptr inbounds i16, i16* %input286, i64 %1089
  %1091 = load i16, i16* %1090, align 2, !tbaa !386
  %1092 = insertelement <64 x i16> %1087, i16 %1091, i32 21
  %1093 = extractelement <64 x i32> %982, i32 22
  %1094 = sext i32 %1093 to i64
  %1095 = getelementptr inbounds i16, i16* %input286, i64 %1094
  %1096 = load i16, i16* %1095, align 2, !tbaa !386
  %1097 = insertelement <64 x i16> %1092, i16 %1096, i32 22
  %1098 = extractelement <64 x i32> %982, i32 23
  %1099 = sext i32 %1098 to i64
  %1100 = getelementptr inbounds i16, i16* %input286, i64 %1099
  %1101 = load i16, i16* %1100, align 2, !tbaa !386
  %1102 = insertelement <64 x i16> %1097, i16 %1101, i32 23
  %1103 = extractelement <64 x i32> %982, i32 24
  %1104 = sext i32 %1103 to i64
  %1105 = getelementptr inbounds i16, i16* %input286, i64 %1104
  %1106 = load i16, i16* %1105, align 2, !tbaa !386
  %1107 = insertelement <64 x i16> %1102, i16 %1106, i32 24
  %1108 = extractelement <64 x i32> %982, i32 25
  %1109 = sext i32 %1108 to i64
  %1110 = getelementptr inbounds i16, i16* %input286, i64 %1109
  %1111 = load i16, i16* %1110, align 2, !tbaa !386
  %1112 = insertelement <64 x i16> %1107, i16 %1111, i32 25
  %1113 = extractelement <64 x i32> %982, i32 26
  %1114 = sext i32 %1113 to i64
  %1115 = getelementptr inbounds i16, i16* %input286, i64 %1114
  %1116 = load i16, i16* %1115, align 2, !tbaa !386
  %1117 = insertelement <64 x i16> %1112, i16 %1116, i32 26
  %1118 = extractelement <64 x i32> %982, i32 27
  %1119 = sext i32 %1118 to i64
  %1120 = getelementptr inbounds i16, i16* %input286, i64 %1119
  %1121 = load i16, i16* %1120, align 2, !tbaa !386
  %1122 = insertelement <64 x i16> %1117, i16 %1121, i32 27
  %1123 = extractelement <64 x i32> %982, i32 28
  %1124 = sext i32 %1123 to i64
  %1125 = getelementptr inbounds i16, i16* %input286, i64 %1124
  %1126 = load i16, i16* %1125, align 2, !tbaa !386
  %1127 = insertelement <64 x i16> %1122, i16 %1126, i32 28
  %1128 = extractelement <64 x i32> %982, i32 29
  %1129 = sext i32 %1128 to i64
  %1130 = getelementptr inbounds i16, i16* %input286, i64 %1129
  %1131 = load i16, i16* %1130, align 2, !tbaa !386
  %1132 = insertelement <64 x i16> %1127, i16 %1131, i32 29
  %1133 = extractelement <64 x i32> %982, i32 30
  %1134 = sext i32 %1133 to i64
  %1135 = getelementptr inbounds i16, i16* %input286, i64 %1134
  %1136 = load i16, i16* %1135, align 2, !tbaa !386
  %1137 = insertelement <64 x i16> %1132, i16 %1136, i32 30
  %1138 = extractelement <64 x i32> %982, i32 31
  %1139 = sext i32 %1138 to i64
  %1140 = getelementptr inbounds i16, i16* %input286, i64 %1139
  %1141 = load i16, i16* %1140, align 2, !tbaa !386
  %1142 = insertelement <64 x i16> %1137, i16 %1141, i32 31
  %1143 = extractelement <64 x i32> %982, i32 32
  %1144 = sext i32 %1143 to i64
  %1145 = getelementptr inbounds i16, i16* %input286, i64 %1144
  %1146 = load i16, i16* %1145, align 2, !tbaa !386
  %1147 = insertelement <64 x i16> %1142, i16 %1146, i32 32
  %1148 = extractelement <64 x i32> %982, i32 33
  %1149 = sext i32 %1148 to i64
  %1150 = getelementptr inbounds i16, i16* %input286, i64 %1149
  %1151 = load i16, i16* %1150, align 2, !tbaa !386
  %1152 = insertelement <64 x i16> %1147, i16 %1151, i32 33
  %1153 = extractelement <64 x i32> %982, i32 34
  %1154 = sext i32 %1153 to i64
  %1155 = getelementptr inbounds i16, i16* %input286, i64 %1154
  %1156 = load i16, i16* %1155, align 2, !tbaa !386
  %1157 = insertelement <64 x i16> %1152, i16 %1156, i32 34
  %1158 = extractelement <64 x i32> %982, i32 35
  %1159 = sext i32 %1158 to i64
  %1160 = getelementptr inbounds i16, i16* %input286, i64 %1159
  %1161 = load i16, i16* %1160, align 2, !tbaa !386
  %1162 = insertelement <64 x i16> %1157, i16 %1161, i32 35
  %1163 = extractelement <64 x i32> %982, i32 36
  %1164 = sext i32 %1163 to i64
  %1165 = getelementptr inbounds i16, i16* %input286, i64 %1164
  %1166 = load i16, i16* %1165, align 2, !tbaa !386
  %1167 = insertelement <64 x i16> %1162, i16 %1166, i32 36
  %1168 = extractelement <64 x i32> %982, i32 37
  %1169 = sext i32 %1168 to i64
  %1170 = getelementptr inbounds i16, i16* %input286, i64 %1169
  %1171 = load i16, i16* %1170, align 2, !tbaa !386
  %1172 = insertelement <64 x i16> %1167, i16 %1171, i32 37
  %1173 = extractelement <64 x i32> %982, i32 38
  %1174 = sext i32 %1173 to i64
  %1175 = getelementptr inbounds i16, i16* %input286, i64 %1174
  %1176 = load i16, i16* %1175, align 2, !tbaa !386
  %1177 = insertelement <64 x i16> %1172, i16 %1176, i32 38
  %1178 = extractelement <64 x i32> %982, i32 39
  %1179 = sext i32 %1178 to i64
  %1180 = getelementptr inbounds i16, i16* %input286, i64 %1179
  %1181 = load i16, i16* %1180, align 2, !tbaa !386
  %1182 = insertelement <64 x i16> %1177, i16 %1181, i32 39
  %1183 = extractelement <64 x i32> %982, i32 40
  %1184 = sext i32 %1183 to i64
  %1185 = getelementptr inbounds i16, i16* %input286, i64 %1184
  %1186 = load i16, i16* %1185, align 2, !tbaa !386
  %1187 = insertelement <64 x i16> %1182, i16 %1186, i32 40
  %1188 = extractelement <64 x i32> %982, i32 41
  %1189 = sext i32 %1188 to i64
  %1190 = getelementptr inbounds i16, i16* %input286, i64 %1189
  %1191 = load i16, i16* %1190, align 2, !tbaa !386
  %1192 = insertelement <64 x i16> %1187, i16 %1191, i32 41
  %1193 = extractelement <64 x i32> %982, i32 42
  %1194 = sext i32 %1193 to i64
  %1195 = getelementptr inbounds i16, i16* %input286, i64 %1194
  %1196 = load i16, i16* %1195, align 2, !tbaa !386
  %1197 = insertelement <64 x i16> %1192, i16 %1196, i32 42
  %1198 = extractelement <64 x i32> %982, i32 43
  %1199 = sext i32 %1198 to i64
  %1200 = getelementptr inbounds i16, i16* %input286, i64 %1199
  %1201 = load i16, i16* %1200, align 2, !tbaa !386
  %1202 = insertelement <64 x i16> %1197, i16 %1201, i32 43
  %1203 = extractelement <64 x i32> %982, i32 44
  %1204 = sext i32 %1203 to i64
  %1205 = getelementptr inbounds i16, i16* %input286, i64 %1204
  %1206 = load i16, i16* %1205, align 2, !tbaa !386
  %1207 = insertelement <64 x i16> %1202, i16 %1206, i32 44
  %1208 = extractelement <64 x i32> %982, i32 45
  %1209 = sext i32 %1208 to i64
  %1210 = getelementptr inbounds i16, i16* %input286, i64 %1209
  %1211 = load i16, i16* %1210, align 2, !tbaa !386
  %1212 = insertelement <64 x i16> %1207, i16 %1211, i32 45
  %1213 = extractelement <64 x i32> %982, i32 46
  %1214 = sext i32 %1213 to i64
  %1215 = getelementptr inbounds i16, i16* %input286, i64 %1214
  %1216 = load i16, i16* %1215, align 2, !tbaa !386
  %1217 = insertelement <64 x i16> %1212, i16 %1216, i32 46
  %1218 = extractelement <64 x i32> %982, i32 47
  %1219 = sext i32 %1218 to i64
  %1220 = getelementptr inbounds i16, i16* %input286, i64 %1219
  %1221 = load i16, i16* %1220, align 2, !tbaa !386
  %1222 = insertelement <64 x i16> %1217, i16 %1221, i32 47
  %1223 = extractelement <64 x i32> %982, i32 48
  %1224 = sext i32 %1223 to i64
  %1225 = getelementptr inbounds i16, i16* %input286, i64 %1224
  %1226 = load i16, i16* %1225, align 2, !tbaa !386
  %1227 = insertelement <64 x i16> %1222, i16 %1226, i32 48
  %1228 = extractelement <64 x i32> %982, i32 49
  %1229 = sext i32 %1228 to i64
  %1230 = getelementptr inbounds i16, i16* %input286, i64 %1229
  %1231 = load i16, i16* %1230, align 2, !tbaa !386
  %1232 = insertelement <64 x i16> %1227, i16 %1231, i32 49
  %1233 = extractelement <64 x i32> %982, i32 50
  %1234 = sext i32 %1233 to i64
  %1235 = getelementptr inbounds i16, i16* %input286, i64 %1234
  %1236 = load i16, i16* %1235, align 2, !tbaa !386
  %1237 = insertelement <64 x i16> %1232, i16 %1236, i32 50
  %1238 = extractelement <64 x i32> %982, i32 51
  %1239 = sext i32 %1238 to i64
  %1240 = getelementptr inbounds i16, i16* %input286, i64 %1239
  %1241 = load i16, i16* %1240, align 2, !tbaa !386
  %1242 = insertelement <64 x i16> %1237, i16 %1241, i32 51
  %1243 = extractelement <64 x i32> %982, i32 52
  %1244 = sext i32 %1243 to i64
  %1245 = getelementptr inbounds i16, i16* %input286, i64 %1244
  %1246 = load i16, i16* %1245, align 2, !tbaa !386
  %1247 = insertelement <64 x i16> %1242, i16 %1246, i32 52
  %1248 = extractelement <64 x i32> %982, i32 53
  %1249 = sext i32 %1248 to i64
  %1250 = getelementptr inbounds i16, i16* %input286, i64 %1249
  %1251 = load i16, i16* %1250, align 2, !tbaa !386
  %1252 = insertelement <64 x i16> %1247, i16 %1251, i32 53
  %1253 = extractelement <64 x i32> %982, i32 54
  %1254 = sext i32 %1253 to i64
  %1255 = getelementptr inbounds i16, i16* %input286, i64 %1254
  %1256 = load i16, i16* %1255, align 2, !tbaa !386
  %1257 = insertelement <64 x i16> %1252, i16 %1256, i32 54
  %1258 = extractelement <64 x i32> %982, i32 55
  %1259 = sext i32 %1258 to i64
  %1260 = getelementptr inbounds i16, i16* %input286, i64 %1259
  %1261 = load i16, i16* %1260, align 2, !tbaa !386
  %1262 = insertelement <64 x i16> %1257, i16 %1261, i32 55
  %1263 = extractelement <64 x i32> %982, i32 56
  %1264 = sext i32 %1263 to i64
  %1265 = getelementptr inbounds i16, i16* %input286, i64 %1264
  %1266 = load i16, i16* %1265, align 2, !tbaa !386
  %1267 = insertelement <64 x i16> %1262, i16 %1266, i32 56
  %1268 = extractelement <64 x i32> %982, i32 57
  %1269 = sext i32 %1268 to i64
  %1270 = getelementptr inbounds i16, i16* %input286, i64 %1269
  %1271 = load i16, i16* %1270, align 2, !tbaa !386
  %1272 = insertelement <64 x i16> %1267, i16 %1271, i32 57
  %1273 = extractelement <64 x i32> %982, i32 58
  %1274 = sext i32 %1273 to i64
  %1275 = getelementptr inbounds i16, i16* %input286, i64 %1274
  %1276 = load i16, i16* %1275, align 2, !tbaa !386
  %1277 = insertelement <64 x i16> %1272, i16 %1276, i32 58
  %1278 = extractelement <64 x i32> %982, i32 59
  %1279 = sext i32 %1278 to i64
  %1280 = getelementptr inbounds i16, i16* %input286, i64 %1279
  %1281 = load i16, i16* %1280, align 2, !tbaa !386
  %1282 = insertelement <64 x i16> %1277, i16 %1281, i32 59
  %1283 = extractelement <64 x i32> %982, i32 60
  %1284 = sext i32 %1283 to i64
  %1285 = getelementptr inbounds i16, i16* %input286, i64 %1284
  %1286 = load i16, i16* %1285, align 2, !tbaa !386
  %1287 = insertelement <64 x i16> %1282, i16 %1286, i32 60
  %1288 = extractelement <64 x i32> %982, i32 61
  %1289 = sext i32 %1288 to i64
  %1290 = getelementptr inbounds i16, i16* %input286, i64 %1289
  %1291 = load i16, i16* %1290, align 2, !tbaa !386
  %1292 = insertelement <64 x i16> %1287, i16 %1291, i32 61
  %1293 = extractelement <64 x i32> %982, i32 62
  %1294 = sext i32 %1293 to i64
  %1295 = getelementptr inbounds i16, i16* %input286, i64 %1294
  %1296 = load i16, i16* %1295, align 2, !tbaa !386
  %1297 = insertelement <64 x i16> %1292, i16 %1296, i32 62
  %1298 = extractelement <64 x i32> %982, i32 63
  %1299 = sext i32 %1298 to i64
  %1300 = getelementptr inbounds i16, i16* %input286, i64 %1299
  %1301 = load i16, i16* %1300, align 2, !tbaa !386
  %1302 = insertelement <64 x i16> %1297, i16 %1301, i32 63
  %1303 = add nsw i32 %blur_x.s0.x.v2.base.s, -60
  %1304 = insertelement <64 x i32> undef, i32 %1303, i32 0
  %1305 = shufflevector <64 x i32> %1304, <64 x i32> undef, <64 x i32> zeroinitializer
  %1306 = add nsw <64 x i32> %1305, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1307 = shufflevector <64 x i32> %1306, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1308 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1307, <4 x i32> %53)
  %1309 = shufflevector <64 x i32> %1306, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1310 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1309, <4 x i32> %53)
  %1311 = shufflevector <64 x i32> %1306, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %1312 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1311, <4 x i32> %53)
  %1313 = shufflevector <64 x i32> %1306, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %1314 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1313, <4 x i32> %53)
  %1315 = shufflevector <64 x i32> %1306, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %1316 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1315, <4 x i32> %53)
  %1317 = shufflevector <64 x i32> %1306, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %1318 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1317, <4 x i32> %53)
  %1319 = shufflevector <64 x i32> %1306, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %1320 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1319, <4 x i32> %53)
  %1321 = shufflevector <64 x i32> %1306, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %1322 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1321, <4 x i32> %53)
  %1323 = shufflevector <64 x i32> %1306, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %1324 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1323, <4 x i32> %53)
  %1325 = shufflevector <64 x i32> %1306, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %1326 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1325, <4 x i32> %53)
  %1327 = shufflevector <64 x i32> %1306, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %1328 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1327, <4 x i32> %53)
  %1329 = shufflevector <64 x i32> %1306, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %1330 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1329, <4 x i32> %53)
  %1331 = shufflevector <64 x i32> %1306, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %1332 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1331, <4 x i32> %53)
  %1333 = shufflevector <64 x i32> %1306, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %1334 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1333, <4 x i32> %53)
  %1335 = shufflevector <64 x i32> %1306, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %1336 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1335, <4 x i32> %53)
  %1337 = shufflevector <64 x i32> %1306, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %1338 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1337, <4 x i32> %53)
  %1339 = shufflevector <4 x i32> %1338, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %1340 = shufflevector <8 x i32> %1339, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %1341 = shufflevector <16 x i32> %1340, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %1342 = shufflevector <32 x i32> %1341, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %1343 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1308, <4 x i32> %55)
  %1344 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1310, <4 x i32> %55)
  %1345 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1312, <4 x i32> %55)
  %1346 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1314, <4 x i32> %55)
  %1347 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1316, <4 x i32> %55)
  %1348 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1318, <4 x i32> %55)
  %1349 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1320, <4 x i32> %55)
  %1350 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1322, <4 x i32> %55)
  %1351 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1324, <4 x i32> %55)
  %1352 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1326, <4 x i32> %55)
  %1353 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1328, <4 x i32> %55)
  %1354 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1330, <4 x i32> %55)
  %1355 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1332, <4 x i32> %55)
  %1356 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1334, <4 x i32> %55)
  %1357 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1336, <4 x i32> %55)
  %1358 = shufflevector <64 x i32> %1342, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %1359 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1358, <4 x i32> %55)
  %1360 = shufflevector <4 x i32> %1343, <4 x i32> %1344, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1361 = shufflevector <4 x i32> %1345, <4 x i32> %1346, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1362 = shufflevector <4 x i32> %1347, <4 x i32> %1348, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1363 = shufflevector <4 x i32> %1349, <4 x i32> %1350, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1364 = shufflevector <4 x i32> %1351, <4 x i32> %1352, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1365 = shufflevector <4 x i32> %1353, <4 x i32> %1354, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1366 = shufflevector <4 x i32> %1355, <4 x i32> %1356, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1367 = shufflevector <4 x i32> %1357, <4 x i32> %1359, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1368 = shufflevector <8 x i32> %1360, <8 x i32> %1361, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1369 = shufflevector <8 x i32> %1362, <8 x i32> %1363, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1370 = shufflevector <8 x i32> %1364, <8 x i32> %1365, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1371 = shufflevector <8 x i32> %1366, <8 x i32> %1367, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1372 = shufflevector <16 x i32> %1368, <16 x i32> %1369, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1373 = shufflevector <16 x i32> %1370, <16 x i32> %1371, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1374 = shufflevector <32 x i32> %1372, <32 x i32> %1373, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1375 = add nsw <64 x i32> %1374, %t266
  %1376 = extractelement <64 x i32> %1375, i32 0
  %1377 = sext i32 %1376 to i64
  %1378 = getelementptr inbounds i16, i16* %input286, i64 %1377
  %1379 = load i16, i16* %1378, align 2, !tbaa !386
  %1380 = insertelement <64 x i16> undef, i16 %1379, i32 0
  %1381 = extractelement <64 x i32> %1375, i32 1
  %1382 = sext i32 %1381 to i64
  %1383 = getelementptr inbounds i16, i16* %input286, i64 %1382
  %1384 = load i16, i16* %1383, align 2, !tbaa !386
  %1385 = insertelement <64 x i16> %1380, i16 %1384, i32 1
  %1386 = extractelement <64 x i32> %1375, i32 2
  %1387 = sext i32 %1386 to i64
  %1388 = getelementptr inbounds i16, i16* %input286, i64 %1387
  %1389 = load i16, i16* %1388, align 2, !tbaa !386
  %1390 = insertelement <64 x i16> %1385, i16 %1389, i32 2
  %1391 = extractelement <64 x i32> %1375, i32 3
  %1392 = sext i32 %1391 to i64
  %1393 = getelementptr inbounds i16, i16* %input286, i64 %1392
  %1394 = load i16, i16* %1393, align 2, !tbaa !386
  %1395 = insertelement <64 x i16> %1390, i16 %1394, i32 3
  %1396 = extractelement <64 x i32> %1375, i32 4
  %1397 = sext i32 %1396 to i64
  %1398 = getelementptr inbounds i16, i16* %input286, i64 %1397
  %1399 = load i16, i16* %1398, align 2, !tbaa !386
  %1400 = insertelement <64 x i16> %1395, i16 %1399, i32 4
  %1401 = extractelement <64 x i32> %1375, i32 5
  %1402 = sext i32 %1401 to i64
  %1403 = getelementptr inbounds i16, i16* %input286, i64 %1402
  %1404 = load i16, i16* %1403, align 2, !tbaa !386
  %1405 = insertelement <64 x i16> %1400, i16 %1404, i32 5
  %1406 = extractelement <64 x i32> %1375, i32 6
  %1407 = sext i32 %1406 to i64
  %1408 = getelementptr inbounds i16, i16* %input286, i64 %1407
  %1409 = load i16, i16* %1408, align 2, !tbaa !386
  %1410 = insertelement <64 x i16> %1405, i16 %1409, i32 6
  %1411 = extractelement <64 x i32> %1375, i32 7
  %1412 = sext i32 %1411 to i64
  %1413 = getelementptr inbounds i16, i16* %input286, i64 %1412
  %1414 = load i16, i16* %1413, align 2, !tbaa !386
  %1415 = insertelement <64 x i16> %1410, i16 %1414, i32 7
  %1416 = extractelement <64 x i32> %1375, i32 8
  %1417 = sext i32 %1416 to i64
  %1418 = getelementptr inbounds i16, i16* %input286, i64 %1417
  %1419 = load i16, i16* %1418, align 2, !tbaa !386
  %1420 = insertelement <64 x i16> %1415, i16 %1419, i32 8
  %1421 = extractelement <64 x i32> %1375, i32 9
  %1422 = sext i32 %1421 to i64
  %1423 = getelementptr inbounds i16, i16* %input286, i64 %1422
  %1424 = load i16, i16* %1423, align 2, !tbaa !386
  %1425 = insertelement <64 x i16> %1420, i16 %1424, i32 9
  %1426 = extractelement <64 x i32> %1375, i32 10
  %1427 = sext i32 %1426 to i64
  %1428 = getelementptr inbounds i16, i16* %input286, i64 %1427
  %1429 = load i16, i16* %1428, align 2, !tbaa !386
  %1430 = insertelement <64 x i16> %1425, i16 %1429, i32 10
  %1431 = extractelement <64 x i32> %1375, i32 11
  %1432 = sext i32 %1431 to i64
  %1433 = getelementptr inbounds i16, i16* %input286, i64 %1432
  %1434 = load i16, i16* %1433, align 2, !tbaa !386
  %1435 = insertelement <64 x i16> %1430, i16 %1434, i32 11
  %1436 = extractelement <64 x i32> %1375, i32 12
  %1437 = sext i32 %1436 to i64
  %1438 = getelementptr inbounds i16, i16* %input286, i64 %1437
  %1439 = load i16, i16* %1438, align 2, !tbaa !386
  %1440 = insertelement <64 x i16> %1435, i16 %1439, i32 12
  %1441 = extractelement <64 x i32> %1375, i32 13
  %1442 = sext i32 %1441 to i64
  %1443 = getelementptr inbounds i16, i16* %input286, i64 %1442
  %1444 = load i16, i16* %1443, align 2, !tbaa !386
  %1445 = insertelement <64 x i16> %1440, i16 %1444, i32 13
  %1446 = extractelement <64 x i32> %1375, i32 14
  %1447 = sext i32 %1446 to i64
  %1448 = getelementptr inbounds i16, i16* %input286, i64 %1447
  %1449 = load i16, i16* %1448, align 2, !tbaa !386
  %1450 = insertelement <64 x i16> %1445, i16 %1449, i32 14
  %1451 = extractelement <64 x i32> %1375, i32 15
  %1452 = sext i32 %1451 to i64
  %1453 = getelementptr inbounds i16, i16* %input286, i64 %1452
  %1454 = load i16, i16* %1453, align 2, !tbaa !386
  %1455 = insertelement <64 x i16> %1450, i16 %1454, i32 15
  %1456 = extractelement <64 x i32> %1375, i32 16
  %1457 = sext i32 %1456 to i64
  %1458 = getelementptr inbounds i16, i16* %input286, i64 %1457
  %1459 = load i16, i16* %1458, align 2, !tbaa !386
  %1460 = insertelement <64 x i16> %1455, i16 %1459, i32 16
  %1461 = extractelement <64 x i32> %1375, i32 17
  %1462 = sext i32 %1461 to i64
  %1463 = getelementptr inbounds i16, i16* %input286, i64 %1462
  %1464 = load i16, i16* %1463, align 2, !tbaa !386
  %1465 = insertelement <64 x i16> %1460, i16 %1464, i32 17
  %1466 = extractelement <64 x i32> %1375, i32 18
  %1467 = sext i32 %1466 to i64
  %1468 = getelementptr inbounds i16, i16* %input286, i64 %1467
  %1469 = load i16, i16* %1468, align 2, !tbaa !386
  %1470 = insertelement <64 x i16> %1465, i16 %1469, i32 18
  %1471 = extractelement <64 x i32> %1375, i32 19
  %1472 = sext i32 %1471 to i64
  %1473 = getelementptr inbounds i16, i16* %input286, i64 %1472
  %1474 = load i16, i16* %1473, align 2, !tbaa !386
  %1475 = insertelement <64 x i16> %1470, i16 %1474, i32 19
  %1476 = extractelement <64 x i32> %1375, i32 20
  %1477 = sext i32 %1476 to i64
  %1478 = getelementptr inbounds i16, i16* %input286, i64 %1477
  %1479 = load i16, i16* %1478, align 2, !tbaa !386
  %1480 = insertelement <64 x i16> %1475, i16 %1479, i32 20
  %1481 = extractelement <64 x i32> %1375, i32 21
  %1482 = sext i32 %1481 to i64
  %1483 = getelementptr inbounds i16, i16* %input286, i64 %1482
  %1484 = load i16, i16* %1483, align 2, !tbaa !386
  %1485 = insertelement <64 x i16> %1480, i16 %1484, i32 21
  %1486 = extractelement <64 x i32> %1375, i32 22
  %1487 = sext i32 %1486 to i64
  %1488 = getelementptr inbounds i16, i16* %input286, i64 %1487
  %1489 = load i16, i16* %1488, align 2, !tbaa !386
  %1490 = insertelement <64 x i16> %1485, i16 %1489, i32 22
  %1491 = extractelement <64 x i32> %1375, i32 23
  %1492 = sext i32 %1491 to i64
  %1493 = getelementptr inbounds i16, i16* %input286, i64 %1492
  %1494 = load i16, i16* %1493, align 2, !tbaa !386
  %1495 = insertelement <64 x i16> %1490, i16 %1494, i32 23
  %1496 = extractelement <64 x i32> %1375, i32 24
  %1497 = sext i32 %1496 to i64
  %1498 = getelementptr inbounds i16, i16* %input286, i64 %1497
  %1499 = load i16, i16* %1498, align 2, !tbaa !386
  %1500 = insertelement <64 x i16> %1495, i16 %1499, i32 24
  %1501 = extractelement <64 x i32> %1375, i32 25
  %1502 = sext i32 %1501 to i64
  %1503 = getelementptr inbounds i16, i16* %input286, i64 %1502
  %1504 = load i16, i16* %1503, align 2, !tbaa !386
  %1505 = insertelement <64 x i16> %1500, i16 %1504, i32 25
  %1506 = extractelement <64 x i32> %1375, i32 26
  %1507 = sext i32 %1506 to i64
  %1508 = getelementptr inbounds i16, i16* %input286, i64 %1507
  %1509 = load i16, i16* %1508, align 2, !tbaa !386
  %1510 = insertelement <64 x i16> %1505, i16 %1509, i32 26
  %1511 = extractelement <64 x i32> %1375, i32 27
  %1512 = sext i32 %1511 to i64
  %1513 = getelementptr inbounds i16, i16* %input286, i64 %1512
  %1514 = load i16, i16* %1513, align 2, !tbaa !386
  %1515 = insertelement <64 x i16> %1510, i16 %1514, i32 27
  %1516 = extractelement <64 x i32> %1375, i32 28
  %1517 = sext i32 %1516 to i64
  %1518 = getelementptr inbounds i16, i16* %input286, i64 %1517
  %1519 = load i16, i16* %1518, align 2, !tbaa !386
  %1520 = insertelement <64 x i16> %1515, i16 %1519, i32 28
  %1521 = extractelement <64 x i32> %1375, i32 29
  %1522 = sext i32 %1521 to i64
  %1523 = getelementptr inbounds i16, i16* %input286, i64 %1522
  %1524 = load i16, i16* %1523, align 2, !tbaa !386
  %1525 = insertelement <64 x i16> %1520, i16 %1524, i32 29
  %1526 = extractelement <64 x i32> %1375, i32 30
  %1527 = sext i32 %1526 to i64
  %1528 = getelementptr inbounds i16, i16* %input286, i64 %1527
  %1529 = load i16, i16* %1528, align 2, !tbaa !386
  %1530 = insertelement <64 x i16> %1525, i16 %1529, i32 30
  %1531 = extractelement <64 x i32> %1375, i32 31
  %1532 = sext i32 %1531 to i64
  %1533 = getelementptr inbounds i16, i16* %input286, i64 %1532
  %1534 = load i16, i16* %1533, align 2, !tbaa !386
  %1535 = insertelement <64 x i16> %1530, i16 %1534, i32 31
  %1536 = extractelement <64 x i32> %1375, i32 32
  %1537 = sext i32 %1536 to i64
  %1538 = getelementptr inbounds i16, i16* %input286, i64 %1537
  %1539 = load i16, i16* %1538, align 2, !tbaa !386
  %1540 = insertelement <64 x i16> %1535, i16 %1539, i32 32
  %1541 = extractelement <64 x i32> %1375, i32 33
  %1542 = sext i32 %1541 to i64
  %1543 = getelementptr inbounds i16, i16* %input286, i64 %1542
  %1544 = load i16, i16* %1543, align 2, !tbaa !386
  %1545 = insertelement <64 x i16> %1540, i16 %1544, i32 33
  %1546 = extractelement <64 x i32> %1375, i32 34
  %1547 = sext i32 %1546 to i64
  %1548 = getelementptr inbounds i16, i16* %input286, i64 %1547
  %1549 = load i16, i16* %1548, align 2, !tbaa !386
  %1550 = insertelement <64 x i16> %1545, i16 %1549, i32 34
  %1551 = extractelement <64 x i32> %1375, i32 35
  %1552 = sext i32 %1551 to i64
  %1553 = getelementptr inbounds i16, i16* %input286, i64 %1552
  %1554 = load i16, i16* %1553, align 2, !tbaa !386
  %1555 = insertelement <64 x i16> %1550, i16 %1554, i32 35
  %1556 = extractelement <64 x i32> %1375, i32 36
  %1557 = sext i32 %1556 to i64
  %1558 = getelementptr inbounds i16, i16* %input286, i64 %1557
  %1559 = load i16, i16* %1558, align 2, !tbaa !386
  %1560 = insertelement <64 x i16> %1555, i16 %1559, i32 36
  %1561 = extractelement <64 x i32> %1375, i32 37
  %1562 = sext i32 %1561 to i64
  %1563 = getelementptr inbounds i16, i16* %input286, i64 %1562
  %1564 = load i16, i16* %1563, align 2, !tbaa !386
  %1565 = insertelement <64 x i16> %1560, i16 %1564, i32 37
  %1566 = extractelement <64 x i32> %1375, i32 38
  %1567 = sext i32 %1566 to i64
  %1568 = getelementptr inbounds i16, i16* %input286, i64 %1567
  %1569 = load i16, i16* %1568, align 2, !tbaa !386
  %1570 = insertelement <64 x i16> %1565, i16 %1569, i32 38
  %1571 = extractelement <64 x i32> %1375, i32 39
  %1572 = sext i32 %1571 to i64
  %1573 = getelementptr inbounds i16, i16* %input286, i64 %1572
  %1574 = load i16, i16* %1573, align 2, !tbaa !386
  %1575 = insertelement <64 x i16> %1570, i16 %1574, i32 39
  %1576 = extractelement <64 x i32> %1375, i32 40
  %1577 = sext i32 %1576 to i64
  %1578 = getelementptr inbounds i16, i16* %input286, i64 %1577
  %1579 = load i16, i16* %1578, align 2, !tbaa !386
  %1580 = insertelement <64 x i16> %1575, i16 %1579, i32 40
  %1581 = extractelement <64 x i32> %1375, i32 41
  %1582 = sext i32 %1581 to i64
  %1583 = getelementptr inbounds i16, i16* %input286, i64 %1582
  %1584 = load i16, i16* %1583, align 2, !tbaa !386
  %1585 = insertelement <64 x i16> %1580, i16 %1584, i32 41
  %1586 = extractelement <64 x i32> %1375, i32 42
  %1587 = sext i32 %1586 to i64
  %1588 = getelementptr inbounds i16, i16* %input286, i64 %1587
  %1589 = load i16, i16* %1588, align 2, !tbaa !386
  %1590 = insertelement <64 x i16> %1585, i16 %1589, i32 42
  %1591 = extractelement <64 x i32> %1375, i32 43
  %1592 = sext i32 %1591 to i64
  %1593 = getelementptr inbounds i16, i16* %input286, i64 %1592
  %1594 = load i16, i16* %1593, align 2, !tbaa !386
  %1595 = insertelement <64 x i16> %1590, i16 %1594, i32 43
  %1596 = extractelement <64 x i32> %1375, i32 44
  %1597 = sext i32 %1596 to i64
  %1598 = getelementptr inbounds i16, i16* %input286, i64 %1597
  %1599 = load i16, i16* %1598, align 2, !tbaa !386
  %1600 = insertelement <64 x i16> %1595, i16 %1599, i32 44
  %1601 = extractelement <64 x i32> %1375, i32 45
  %1602 = sext i32 %1601 to i64
  %1603 = getelementptr inbounds i16, i16* %input286, i64 %1602
  %1604 = load i16, i16* %1603, align 2, !tbaa !386
  %1605 = insertelement <64 x i16> %1600, i16 %1604, i32 45
  %1606 = extractelement <64 x i32> %1375, i32 46
  %1607 = sext i32 %1606 to i64
  %1608 = getelementptr inbounds i16, i16* %input286, i64 %1607
  %1609 = load i16, i16* %1608, align 2, !tbaa !386
  %1610 = insertelement <64 x i16> %1605, i16 %1609, i32 46
  %1611 = extractelement <64 x i32> %1375, i32 47
  %1612 = sext i32 %1611 to i64
  %1613 = getelementptr inbounds i16, i16* %input286, i64 %1612
  %1614 = load i16, i16* %1613, align 2, !tbaa !386
  %1615 = insertelement <64 x i16> %1610, i16 %1614, i32 47
  %1616 = extractelement <64 x i32> %1375, i32 48
  %1617 = sext i32 %1616 to i64
  %1618 = getelementptr inbounds i16, i16* %input286, i64 %1617
  %1619 = load i16, i16* %1618, align 2, !tbaa !386
  %1620 = insertelement <64 x i16> %1615, i16 %1619, i32 48
  %1621 = extractelement <64 x i32> %1375, i32 49
  %1622 = sext i32 %1621 to i64
  %1623 = getelementptr inbounds i16, i16* %input286, i64 %1622
  %1624 = load i16, i16* %1623, align 2, !tbaa !386
  %1625 = insertelement <64 x i16> %1620, i16 %1624, i32 49
  %1626 = extractelement <64 x i32> %1375, i32 50
  %1627 = sext i32 %1626 to i64
  %1628 = getelementptr inbounds i16, i16* %input286, i64 %1627
  %1629 = load i16, i16* %1628, align 2, !tbaa !386
  %1630 = insertelement <64 x i16> %1625, i16 %1629, i32 50
  %1631 = extractelement <64 x i32> %1375, i32 51
  %1632 = sext i32 %1631 to i64
  %1633 = getelementptr inbounds i16, i16* %input286, i64 %1632
  %1634 = load i16, i16* %1633, align 2, !tbaa !386
  %1635 = insertelement <64 x i16> %1630, i16 %1634, i32 51
  %1636 = extractelement <64 x i32> %1375, i32 52
  %1637 = sext i32 %1636 to i64
  %1638 = getelementptr inbounds i16, i16* %input286, i64 %1637
  %1639 = load i16, i16* %1638, align 2, !tbaa !386
  %1640 = insertelement <64 x i16> %1635, i16 %1639, i32 52
  %1641 = extractelement <64 x i32> %1375, i32 53
  %1642 = sext i32 %1641 to i64
  %1643 = getelementptr inbounds i16, i16* %input286, i64 %1642
  %1644 = load i16, i16* %1643, align 2, !tbaa !386
  %1645 = insertelement <64 x i16> %1640, i16 %1644, i32 53
  %1646 = extractelement <64 x i32> %1375, i32 54
  %1647 = sext i32 %1646 to i64
  %1648 = getelementptr inbounds i16, i16* %input286, i64 %1647
  %1649 = load i16, i16* %1648, align 2, !tbaa !386
  %1650 = insertelement <64 x i16> %1645, i16 %1649, i32 54
  %1651 = extractelement <64 x i32> %1375, i32 55
  %1652 = sext i32 %1651 to i64
  %1653 = getelementptr inbounds i16, i16* %input286, i64 %1652
  %1654 = load i16, i16* %1653, align 2, !tbaa !386
  %1655 = insertelement <64 x i16> %1650, i16 %1654, i32 55
  %1656 = extractelement <64 x i32> %1375, i32 56
  %1657 = sext i32 %1656 to i64
  %1658 = getelementptr inbounds i16, i16* %input286, i64 %1657
  %1659 = load i16, i16* %1658, align 2, !tbaa !386
  %1660 = insertelement <64 x i16> %1655, i16 %1659, i32 56
  %1661 = extractelement <64 x i32> %1375, i32 57
  %1662 = sext i32 %1661 to i64
  %1663 = getelementptr inbounds i16, i16* %input286, i64 %1662
  %1664 = load i16, i16* %1663, align 2, !tbaa !386
  %1665 = insertelement <64 x i16> %1660, i16 %1664, i32 57
  %1666 = extractelement <64 x i32> %1375, i32 58
  %1667 = sext i32 %1666 to i64
  %1668 = getelementptr inbounds i16, i16* %input286, i64 %1667
  %1669 = load i16, i16* %1668, align 2, !tbaa !386
  %1670 = insertelement <64 x i16> %1665, i16 %1669, i32 58
  %1671 = extractelement <64 x i32> %1375, i32 59
  %1672 = sext i32 %1671 to i64
  %1673 = getelementptr inbounds i16, i16* %input286, i64 %1672
  %1674 = load i16, i16* %1673, align 2, !tbaa !386
  %1675 = insertelement <64 x i16> %1670, i16 %1674, i32 59
  %1676 = extractelement <64 x i32> %1375, i32 60
  %1677 = sext i32 %1676 to i64
  %1678 = getelementptr inbounds i16, i16* %input286, i64 %1677
  %1679 = load i16, i16* %1678, align 2, !tbaa !386
  %1680 = insertelement <64 x i16> %1675, i16 %1679, i32 60
  %1681 = extractelement <64 x i32> %1375, i32 61
  %1682 = sext i32 %1681 to i64
  %1683 = getelementptr inbounds i16, i16* %input286, i64 %1682
  %1684 = load i16, i16* %1683, align 2, !tbaa !386
  %1685 = insertelement <64 x i16> %1680, i16 %1684, i32 61
  %1686 = extractelement <64 x i32> %1375, i32 62
  %1687 = sext i32 %1686 to i64
  %1688 = getelementptr inbounds i16, i16* %input286, i64 %1687
  %1689 = load i16, i16* %1688, align 2, !tbaa !386
  %1690 = insertelement <64 x i16> %1685, i16 %1689, i32 62
  %1691 = extractelement <64 x i32> %1375, i32 63
  %1692 = sext i32 %1691 to i64
  %1693 = getelementptr inbounds i16, i16* %input286, i64 %1692
  %1694 = load i16, i16* %1693, align 2, !tbaa !386
  %1695 = insertelement <64 x i16> %1690, i16 %1694, i32 63
  %1696 = add nsw i32 %blur_x.s0.x.v2.base.s, -61
  %1697 = insertelement <64 x i32> undef, i32 %1696, i32 0
  %1698 = shufflevector <64 x i32> %1697, <64 x i32> undef, <64 x i32> zeroinitializer
  %1699 = add nsw <64 x i32> %1698, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1700 = shufflevector <64 x i32> %1699, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1701 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1700, <4 x i32> %53)
  %1702 = shufflevector <64 x i32> %1699, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1703 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1702, <4 x i32> %53)
  %1704 = shufflevector <64 x i32> %1699, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %1705 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1704, <4 x i32> %53)
  %1706 = shufflevector <64 x i32> %1699, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %1707 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1706, <4 x i32> %53)
  %1708 = shufflevector <64 x i32> %1699, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %1709 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1708, <4 x i32> %53)
  %1710 = shufflevector <64 x i32> %1699, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %1711 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1710, <4 x i32> %53)
  %1712 = shufflevector <64 x i32> %1699, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %1713 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1712, <4 x i32> %53)
  %1714 = shufflevector <64 x i32> %1699, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %1715 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1714, <4 x i32> %53)
  %1716 = shufflevector <64 x i32> %1699, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %1717 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1716, <4 x i32> %53)
  %1718 = shufflevector <64 x i32> %1699, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %1719 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1718, <4 x i32> %53)
  %1720 = shufflevector <64 x i32> %1699, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %1721 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1720, <4 x i32> %53)
  %1722 = shufflevector <64 x i32> %1699, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %1723 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1722, <4 x i32> %53)
  %1724 = shufflevector <64 x i32> %1699, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %1725 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1724, <4 x i32> %53)
  %1726 = shufflevector <64 x i32> %1699, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %1727 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1726, <4 x i32> %53)
  %1728 = shufflevector <64 x i32> %1699, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %1729 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1728, <4 x i32> %53)
  %1730 = shufflevector <64 x i32> %1699, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %1731 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1730, <4 x i32> %53)
  %1732 = shufflevector <4 x i32> %1731, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %1733 = shufflevector <8 x i32> %1732, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %1734 = shufflevector <16 x i32> %1733, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %1735 = shufflevector <32 x i32> %1734, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %1736 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1701, <4 x i32> %55)
  %1737 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1703, <4 x i32> %55)
  %1738 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1705, <4 x i32> %55)
  %1739 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1707, <4 x i32> %55)
  %1740 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1709, <4 x i32> %55)
  %1741 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1711, <4 x i32> %55)
  %1742 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1713, <4 x i32> %55)
  %1743 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1715, <4 x i32> %55)
  %1744 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1717, <4 x i32> %55)
  %1745 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1719, <4 x i32> %55)
  %1746 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1721, <4 x i32> %55)
  %1747 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1723, <4 x i32> %55)
  %1748 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1725, <4 x i32> %55)
  %1749 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1727, <4 x i32> %55)
  %1750 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1729, <4 x i32> %55)
  %1751 = shufflevector <64 x i32> %1735, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %1752 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1751, <4 x i32> %55)
  %1753 = shufflevector <4 x i32> %1736, <4 x i32> %1737, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1754 = shufflevector <4 x i32> %1738, <4 x i32> %1739, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1755 = shufflevector <4 x i32> %1740, <4 x i32> %1741, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1756 = shufflevector <4 x i32> %1742, <4 x i32> %1743, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1757 = shufflevector <4 x i32> %1744, <4 x i32> %1745, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1758 = shufflevector <4 x i32> %1746, <4 x i32> %1747, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1759 = shufflevector <4 x i32> %1748, <4 x i32> %1749, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1760 = shufflevector <4 x i32> %1750, <4 x i32> %1752, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1761 = shufflevector <8 x i32> %1753, <8 x i32> %1754, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1762 = shufflevector <8 x i32> %1755, <8 x i32> %1756, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1763 = shufflevector <8 x i32> %1757, <8 x i32> %1758, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1764 = shufflevector <8 x i32> %1759, <8 x i32> %1760, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1765 = shufflevector <16 x i32> %1761, <16 x i32> %1762, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1766 = shufflevector <16 x i32> %1763, <16 x i32> %1764, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1767 = shufflevector <32 x i32> %1765, <32 x i32> %1766, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1768 = add nsw <64 x i32> %1767, %t266
  %1769 = extractelement <64 x i32> %1768, i32 0
  %1770 = sext i32 %1769 to i64
  %1771 = getelementptr inbounds i16, i16* %input286, i64 %1770
  %1772 = load i16, i16* %1771, align 2, !tbaa !386
  %1773 = insertelement <64 x i16> undef, i16 %1772, i32 0
  %1774 = extractelement <64 x i32> %1768, i32 1
  %1775 = sext i32 %1774 to i64
  %1776 = getelementptr inbounds i16, i16* %input286, i64 %1775
  %1777 = load i16, i16* %1776, align 2, !tbaa !386
  %1778 = insertelement <64 x i16> %1773, i16 %1777, i32 1
  %1779 = extractelement <64 x i32> %1768, i32 2
  %1780 = sext i32 %1779 to i64
  %1781 = getelementptr inbounds i16, i16* %input286, i64 %1780
  %1782 = load i16, i16* %1781, align 2, !tbaa !386
  %1783 = insertelement <64 x i16> %1778, i16 %1782, i32 2
  %1784 = extractelement <64 x i32> %1768, i32 3
  %1785 = sext i32 %1784 to i64
  %1786 = getelementptr inbounds i16, i16* %input286, i64 %1785
  %1787 = load i16, i16* %1786, align 2, !tbaa !386
  %1788 = insertelement <64 x i16> %1783, i16 %1787, i32 3
  %1789 = extractelement <64 x i32> %1768, i32 4
  %1790 = sext i32 %1789 to i64
  %1791 = getelementptr inbounds i16, i16* %input286, i64 %1790
  %1792 = load i16, i16* %1791, align 2, !tbaa !386
  %1793 = insertelement <64 x i16> %1788, i16 %1792, i32 4
  %1794 = extractelement <64 x i32> %1768, i32 5
  %1795 = sext i32 %1794 to i64
  %1796 = getelementptr inbounds i16, i16* %input286, i64 %1795
  %1797 = load i16, i16* %1796, align 2, !tbaa !386
  %1798 = insertelement <64 x i16> %1793, i16 %1797, i32 5
  %1799 = extractelement <64 x i32> %1768, i32 6
  %1800 = sext i32 %1799 to i64
  %1801 = getelementptr inbounds i16, i16* %input286, i64 %1800
  %1802 = load i16, i16* %1801, align 2, !tbaa !386
  %1803 = insertelement <64 x i16> %1798, i16 %1802, i32 6
  %1804 = extractelement <64 x i32> %1768, i32 7
  %1805 = sext i32 %1804 to i64
  %1806 = getelementptr inbounds i16, i16* %input286, i64 %1805
  %1807 = load i16, i16* %1806, align 2, !tbaa !386
  %1808 = insertelement <64 x i16> %1803, i16 %1807, i32 7
  %1809 = extractelement <64 x i32> %1768, i32 8
  %1810 = sext i32 %1809 to i64
  %1811 = getelementptr inbounds i16, i16* %input286, i64 %1810
  %1812 = load i16, i16* %1811, align 2, !tbaa !386
  %1813 = insertelement <64 x i16> %1808, i16 %1812, i32 8
  %1814 = extractelement <64 x i32> %1768, i32 9
  %1815 = sext i32 %1814 to i64
  %1816 = getelementptr inbounds i16, i16* %input286, i64 %1815
  %1817 = load i16, i16* %1816, align 2, !tbaa !386
  %1818 = insertelement <64 x i16> %1813, i16 %1817, i32 9
  %1819 = extractelement <64 x i32> %1768, i32 10
  %1820 = sext i32 %1819 to i64
  %1821 = getelementptr inbounds i16, i16* %input286, i64 %1820
  %1822 = load i16, i16* %1821, align 2, !tbaa !386
  %1823 = insertelement <64 x i16> %1818, i16 %1822, i32 10
  %1824 = extractelement <64 x i32> %1768, i32 11
  %1825 = sext i32 %1824 to i64
  %1826 = getelementptr inbounds i16, i16* %input286, i64 %1825
  %1827 = load i16, i16* %1826, align 2, !tbaa !386
  %1828 = insertelement <64 x i16> %1823, i16 %1827, i32 11
  %1829 = extractelement <64 x i32> %1768, i32 12
  %1830 = sext i32 %1829 to i64
  %1831 = getelementptr inbounds i16, i16* %input286, i64 %1830
  %1832 = load i16, i16* %1831, align 2, !tbaa !386
  %1833 = insertelement <64 x i16> %1828, i16 %1832, i32 12
  %1834 = extractelement <64 x i32> %1768, i32 13
  %1835 = sext i32 %1834 to i64
  %1836 = getelementptr inbounds i16, i16* %input286, i64 %1835
  %1837 = load i16, i16* %1836, align 2, !tbaa !386
  %1838 = insertelement <64 x i16> %1833, i16 %1837, i32 13
  %1839 = extractelement <64 x i32> %1768, i32 14
  %1840 = sext i32 %1839 to i64
  %1841 = getelementptr inbounds i16, i16* %input286, i64 %1840
  %1842 = load i16, i16* %1841, align 2, !tbaa !386
  %1843 = insertelement <64 x i16> %1838, i16 %1842, i32 14
  %1844 = extractelement <64 x i32> %1768, i32 15
  %1845 = sext i32 %1844 to i64
  %1846 = getelementptr inbounds i16, i16* %input286, i64 %1845
  %1847 = load i16, i16* %1846, align 2, !tbaa !386
  %1848 = insertelement <64 x i16> %1843, i16 %1847, i32 15
  %1849 = extractelement <64 x i32> %1768, i32 16
  %1850 = sext i32 %1849 to i64
  %1851 = getelementptr inbounds i16, i16* %input286, i64 %1850
  %1852 = load i16, i16* %1851, align 2, !tbaa !386
  %1853 = insertelement <64 x i16> %1848, i16 %1852, i32 16
  %1854 = extractelement <64 x i32> %1768, i32 17
  %1855 = sext i32 %1854 to i64
  %1856 = getelementptr inbounds i16, i16* %input286, i64 %1855
  %1857 = load i16, i16* %1856, align 2, !tbaa !386
  %1858 = insertelement <64 x i16> %1853, i16 %1857, i32 17
  %1859 = extractelement <64 x i32> %1768, i32 18
  %1860 = sext i32 %1859 to i64
  %1861 = getelementptr inbounds i16, i16* %input286, i64 %1860
  %1862 = load i16, i16* %1861, align 2, !tbaa !386
  %1863 = insertelement <64 x i16> %1858, i16 %1862, i32 18
  %1864 = extractelement <64 x i32> %1768, i32 19
  %1865 = sext i32 %1864 to i64
  %1866 = getelementptr inbounds i16, i16* %input286, i64 %1865
  %1867 = load i16, i16* %1866, align 2, !tbaa !386
  %1868 = insertelement <64 x i16> %1863, i16 %1867, i32 19
  %1869 = extractelement <64 x i32> %1768, i32 20
  %1870 = sext i32 %1869 to i64
  %1871 = getelementptr inbounds i16, i16* %input286, i64 %1870
  %1872 = load i16, i16* %1871, align 2, !tbaa !386
  %1873 = insertelement <64 x i16> %1868, i16 %1872, i32 20
  %1874 = extractelement <64 x i32> %1768, i32 21
  %1875 = sext i32 %1874 to i64
  %1876 = getelementptr inbounds i16, i16* %input286, i64 %1875
  %1877 = load i16, i16* %1876, align 2, !tbaa !386
  %1878 = insertelement <64 x i16> %1873, i16 %1877, i32 21
  %1879 = extractelement <64 x i32> %1768, i32 22
  %1880 = sext i32 %1879 to i64
  %1881 = getelementptr inbounds i16, i16* %input286, i64 %1880
  %1882 = load i16, i16* %1881, align 2, !tbaa !386
  %1883 = insertelement <64 x i16> %1878, i16 %1882, i32 22
  %1884 = extractelement <64 x i32> %1768, i32 23
  %1885 = sext i32 %1884 to i64
  %1886 = getelementptr inbounds i16, i16* %input286, i64 %1885
  %1887 = load i16, i16* %1886, align 2, !tbaa !386
  %1888 = insertelement <64 x i16> %1883, i16 %1887, i32 23
  %1889 = extractelement <64 x i32> %1768, i32 24
  %1890 = sext i32 %1889 to i64
  %1891 = getelementptr inbounds i16, i16* %input286, i64 %1890
  %1892 = load i16, i16* %1891, align 2, !tbaa !386
  %1893 = insertelement <64 x i16> %1888, i16 %1892, i32 24
  %1894 = extractelement <64 x i32> %1768, i32 25
  %1895 = sext i32 %1894 to i64
  %1896 = getelementptr inbounds i16, i16* %input286, i64 %1895
  %1897 = load i16, i16* %1896, align 2, !tbaa !386
  %1898 = insertelement <64 x i16> %1893, i16 %1897, i32 25
  %1899 = extractelement <64 x i32> %1768, i32 26
  %1900 = sext i32 %1899 to i64
  %1901 = getelementptr inbounds i16, i16* %input286, i64 %1900
  %1902 = load i16, i16* %1901, align 2, !tbaa !386
  %1903 = insertelement <64 x i16> %1898, i16 %1902, i32 26
  %1904 = extractelement <64 x i32> %1768, i32 27
  %1905 = sext i32 %1904 to i64
  %1906 = getelementptr inbounds i16, i16* %input286, i64 %1905
  %1907 = load i16, i16* %1906, align 2, !tbaa !386
  %1908 = insertelement <64 x i16> %1903, i16 %1907, i32 27
  %1909 = extractelement <64 x i32> %1768, i32 28
  %1910 = sext i32 %1909 to i64
  %1911 = getelementptr inbounds i16, i16* %input286, i64 %1910
  %1912 = load i16, i16* %1911, align 2, !tbaa !386
  %1913 = insertelement <64 x i16> %1908, i16 %1912, i32 28
  %1914 = extractelement <64 x i32> %1768, i32 29
  %1915 = sext i32 %1914 to i64
  %1916 = getelementptr inbounds i16, i16* %input286, i64 %1915
  %1917 = load i16, i16* %1916, align 2, !tbaa !386
  %1918 = insertelement <64 x i16> %1913, i16 %1917, i32 29
  %1919 = extractelement <64 x i32> %1768, i32 30
  %1920 = sext i32 %1919 to i64
  %1921 = getelementptr inbounds i16, i16* %input286, i64 %1920
  %1922 = load i16, i16* %1921, align 2, !tbaa !386
  %1923 = insertelement <64 x i16> %1918, i16 %1922, i32 30
  %1924 = extractelement <64 x i32> %1768, i32 31
  %1925 = sext i32 %1924 to i64
  %1926 = getelementptr inbounds i16, i16* %input286, i64 %1925
  %1927 = load i16, i16* %1926, align 2, !tbaa !386
  %1928 = insertelement <64 x i16> %1923, i16 %1927, i32 31
  %1929 = extractelement <64 x i32> %1768, i32 32
  %1930 = sext i32 %1929 to i64
  %1931 = getelementptr inbounds i16, i16* %input286, i64 %1930
  %1932 = load i16, i16* %1931, align 2, !tbaa !386
  %1933 = insertelement <64 x i16> %1928, i16 %1932, i32 32
  %1934 = extractelement <64 x i32> %1768, i32 33
  %1935 = sext i32 %1934 to i64
  %1936 = getelementptr inbounds i16, i16* %input286, i64 %1935
  %1937 = load i16, i16* %1936, align 2, !tbaa !386
  %1938 = insertelement <64 x i16> %1933, i16 %1937, i32 33
  %1939 = extractelement <64 x i32> %1768, i32 34
  %1940 = sext i32 %1939 to i64
  %1941 = getelementptr inbounds i16, i16* %input286, i64 %1940
  %1942 = load i16, i16* %1941, align 2, !tbaa !386
  %1943 = insertelement <64 x i16> %1938, i16 %1942, i32 34
  %1944 = extractelement <64 x i32> %1768, i32 35
  %1945 = sext i32 %1944 to i64
  %1946 = getelementptr inbounds i16, i16* %input286, i64 %1945
  %1947 = load i16, i16* %1946, align 2, !tbaa !386
  %1948 = insertelement <64 x i16> %1943, i16 %1947, i32 35
  %1949 = extractelement <64 x i32> %1768, i32 36
  %1950 = sext i32 %1949 to i64
  %1951 = getelementptr inbounds i16, i16* %input286, i64 %1950
  %1952 = load i16, i16* %1951, align 2, !tbaa !386
  %1953 = insertelement <64 x i16> %1948, i16 %1952, i32 36
  %1954 = extractelement <64 x i32> %1768, i32 37
  %1955 = sext i32 %1954 to i64
  %1956 = getelementptr inbounds i16, i16* %input286, i64 %1955
  %1957 = load i16, i16* %1956, align 2, !tbaa !386
  %1958 = insertelement <64 x i16> %1953, i16 %1957, i32 37
  %1959 = extractelement <64 x i32> %1768, i32 38
  %1960 = sext i32 %1959 to i64
  %1961 = getelementptr inbounds i16, i16* %input286, i64 %1960
  %1962 = load i16, i16* %1961, align 2, !tbaa !386
  %1963 = insertelement <64 x i16> %1958, i16 %1962, i32 38
  %1964 = extractelement <64 x i32> %1768, i32 39
  %1965 = sext i32 %1964 to i64
  %1966 = getelementptr inbounds i16, i16* %input286, i64 %1965
  %1967 = load i16, i16* %1966, align 2, !tbaa !386
  %1968 = insertelement <64 x i16> %1963, i16 %1967, i32 39
  %1969 = extractelement <64 x i32> %1768, i32 40
  %1970 = sext i32 %1969 to i64
  %1971 = getelementptr inbounds i16, i16* %input286, i64 %1970
  %1972 = load i16, i16* %1971, align 2, !tbaa !386
  %1973 = insertelement <64 x i16> %1968, i16 %1972, i32 40
  %1974 = extractelement <64 x i32> %1768, i32 41
  %1975 = sext i32 %1974 to i64
  %1976 = getelementptr inbounds i16, i16* %input286, i64 %1975
  %1977 = load i16, i16* %1976, align 2, !tbaa !386
  %1978 = insertelement <64 x i16> %1973, i16 %1977, i32 41
  %1979 = extractelement <64 x i32> %1768, i32 42
  %1980 = sext i32 %1979 to i64
  %1981 = getelementptr inbounds i16, i16* %input286, i64 %1980
  %1982 = load i16, i16* %1981, align 2, !tbaa !386
  %1983 = insertelement <64 x i16> %1978, i16 %1982, i32 42
  %1984 = extractelement <64 x i32> %1768, i32 43
  %1985 = sext i32 %1984 to i64
  %1986 = getelementptr inbounds i16, i16* %input286, i64 %1985
  %1987 = load i16, i16* %1986, align 2, !tbaa !386
  %1988 = insertelement <64 x i16> %1983, i16 %1987, i32 43
  %1989 = extractelement <64 x i32> %1768, i32 44
  %1990 = sext i32 %1989 to i64
  %1991 = getelementptr inbounds i16, i16* %input286, i64 %1990
  %1992 = load i16, i16* %1991, align 2, !tbaa !386
  %1993 = insertelement <64 x i16> %1988, i16 %1992, i32 44
  %1994 = extractelement <64 x i32> %1768, i32 45
  %1995 = sext i32 %1994 to i64
  %1996 = getelementptr inbounds i16, i16* %input286, i64 %1995
  %1997 = load i16, i16* %1996, align 2, !tbaa !386
  %1998 = insertelement <64 x i16> %1993, i16 %1997, i32 45
  %1999 = extractelement <64 x i32> %1768, i32 46
  %2000 = sext i32 %1999 to i64
  %2001 = getelementptr inbounds i16, i16* %input286, i64 %2000
  %2002 = load i16, i16* %2001, align 2, !tbaa !386
  %2003 = insertelement <64 x i16> %1998, i16 %2002, i32 46
  %2004 = extractelement <64 x i32> %1768, i32 47
  %2005 = sext i32 %2004 to i64
  %2006 = getelementptr inbounds i16, i16* %input286, i64 %2005
  %2007 = load i16, i16* %2006, align 2, !tbaa !386
  %2008 = insertelement <64 x i16> %2003, i16 %2007, i32 47
  %2009 = extractelement <64 x i32> %1768, i32 48
  %2010 = sext i32 %2009 to i64
  %2011 = getelementptr inbounds i16, i16* %input286, i64 %2010
  %2012 = load i16, i16* %2011, align 2, !tbaa !386
  %2013 = insertelement <64 x i16> %2008, i16 %2012, i32 48
  %2014 = extractelement <64 x i32> %1768, i32 49
  %2015 = sext i32 %2014 to i64
  %2016 = getelementptr inbounds i16, i16* %input286, i64 %2015
  %2017 = load i16, i16* %2016, align 2, !tbaa !386
  %2018 = insertelement <64 x i16> %2013, i16 %2017, i32 49
  %2019 = extractelement <64 x i32> %1768, i32 50
  %2020 = sext i32 %2019 to i64
  %2021 = getelementptr inbounds i16, i16* %input286, i64 %2020
  %2022 = load i16, i16* %2021, align 2, !tbaa !386
  %2023 = insertelement <64 x i16> %2018, i16 %2022, i32 50
  %2024 = extractelement <64 x i32> %1768, i32 51
  %2025 = sext i32 %2024 to i64
  %2026 = getelementptr inbounds i16, i16* %input286, i64 %2025
  %2027 = load i16, i16* %2026, align 2, !tbaa !386
  %2028 = insertelement <64 x i16> %2023, i16 %2027, i32 51
  %2029 = extractelement <64 x i32> %1768, i32 52
  %2030 = sext i32 %2029 to i64
  %2031 = getelementptr inbounds i16, i16* %input286, i64 %2030
  %2032 = load i16, i16* %2031, align 2, !tbaa !386
  %2033 = insertelement <64 x i16> %2028, i16 %2032, i32 52
  %2034 = extractelement <64 x i32> %1768, i32 53
  %2035 = sext i32 %2034 to i64
  %2036 = getelementptr inbounds i16, i16* %input286, i64 %2035
  %2037 = load i16, i16* %2036, align 2, !tbaa !386
  %2038 = insertelement <64 x i16> %2033, i16 %2037, i32 53
  %2039 = extractelement <64 x i32> %1768, i32 54
  %2040 = sext i32 %2039 to i64
  %2041 = getelementptr inbounds i16, i16* %input286, i64 %2040
  %2042 = load i16, i16* %2041, align 2, !tbaa !386
  %2043 = insertelement <64 x i16> %2038, i16 %2042, i32 54
  %2044 = extractelement <64 x i32> %1768, i32 55
  %2045 = sext i32 %2044 to i64
  %2046 = getelementptr inbounds i16, i16* %input286, i64 %2045
  %2047 = load i16, i16* %2046, align 2, !tbaa !386
  %2048 = insertelement <64 x i16> %2043, i16 %2047, i32 55
  %2049 = extractelement <64 x i32> %1768, i32 56
  %2050 = sext i32 %2049 to i64
  %2051 = getelementptr inbounds i16, i16* %input286, i64 %2050
  %2052 = load i16, i16* %2051, align 2, !tbaa !386
  %2053 = insertelement <64 x i16> %2048, i16 %2052, i32 56
  %2054 = extractelement <64 x i32> %1768, i32 57
  %2055 = sext i32 %2054 to i64
  %2056 = getelementptr inbounds i16, i16* %input286, i64 %2055
  %2057 = load i16, i16* %2056, align 2, !tbaa !386
  %2058 = insertelement <64 x i16> %2053, i16 %2057, i32 57
  %2059 = extractelement <64 x i32> %1768, i32 58
  %2060 = sext i32 %2059 to i64
  %2061 = getelementptr inbounds i16, i16* %input286, i64 %2060
  %2062 = load i16, i16* %2061, align 2, !tbaa !386
  %2063 = insertelement <64 x i16> %2058, i16 %2062, i32 58
  %2064 = extractelement <64 x i32> %1768, i32 59
  %2065 = sext i32 %2064 to i64
  %2066 = getelementptr inbounds i16, i16* %input286, i64 %2065
  %2067 = load i16, i16* %2066, align 2, !tbaa !386
  %2068 = insertelement <64 x i16> %2063, i16 %2067, i32 59
  %2069 = extractelement <64 x i32> %1768, i32 60
  %2070 = sext i32 %2069 to i64
  %2071 = getelementptr inbounds i16, i16* %input286, i64 %2070
  %2072 = load i16, i16* %2071, align 2, !tbaa !386
  %2073 = insertelement <64 x i16> %2068, i16 %2072, i32 60
  %2074 = extractelement <64 x i32> %1768, i32 61
  %2075 = sext i32 %2074 to i64
  %2076 = getelementptr inbounds i16, i16* %input286, i64 %2075
  %2077 = load i16, i16* %2076, align 2, !tbaa !386
  %2078 = insertelement <64 x i16> %2073, i16 %2077, i32 61
  %2079 = extractelement <64 x i32> %1768, i32 62
  %2080 = sext i32 %2079 to i64
  %2081 = getelementptr inbounds i16, i16* %input286, i64 %2080
  %2082 = load i16, i16* %2081, align 2, !tbaa !386
  %2083 = insertelement <64 x i16> %2078, i16 %2082, i32 62
  %2084 = extractelement <64 x i32> %1768, i32 63
  %2085 = sext i32 %2084 to i64
  %2086 = getelementptr inbounds i16, i16* %input286, i64 %2085
  %2087 = load i16, i16* %2086, align 2, !tbaa !386
  %2088 = insertelement <64 x i16> %2083, i16 %2087, i32 63
  %2089 = add <64 x i16> %909, %516
  %2090 = add <64 x i16> %2089, %1302
  %2091 = add <64 x i16> %2090, %1695
  %2092 = add <64 x i16> %2091, %2088
  %2093 = shufflevector <64 x i16> %2092, <64 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2094 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %2093, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2095 = shufflevector <64 x i16> %2092, <64 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %2096 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %2095, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2097 = shufflevector <64 x i16> %2092, <64 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %2098 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %2097, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2099 = shufflevector <64 x i16> %2092, <64 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %2100 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %2099, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2101 = shufflevector <64 x i16> %2092, <64 x i16> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %2102 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %2101, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2103 = shufflevector <64 x i16> %2092, <64 x i16> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %2104 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %2103, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2105 = shufflevector <64 x i16> %2092, <64 x i16> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %2106 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %2105, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2107 = shufflevector <64 x i16> %2092, <64 x i16> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %2108 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %2107, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2109 = shufflevector <64 x i16> %2092, <64 x i16> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %2110 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %2109, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2111 = shufflevector <64 x i16> %2092, <64 x i16> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %2112 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %2111, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2113 = shufflevector <64 x i16> %2092, <64 x i16> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %2114 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %2113, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2115 = shufflevector <64 x i16> %2092, <64 x i16> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %2116 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %2115, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2117 = shufflevector <64 x i16> %2092, <64 x i16> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %2118 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %2117, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2119 = shufflevector <64 x i16> %2092, <64 x i16> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %2120 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %2119, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2121 = shufflevector <64 x i16> %2092, <64 x i16> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %2122 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %2121, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2123 = shufflevector <64 x i16> %2092, <64 x i16> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %2124 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %2123, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2125 = shufflevector <4 x i32> %2094, <4 x i32> %2096, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2126 = shufflevector <4 x i32> %2098, <4 x i32> %2100, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2127 = shufflevector <4 x i32> %2102, <4 x i32> %2104, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2128 = shufflevector <4 x i32> %2106, <4 x i32> %2108, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2129 = shufflevector <4 x i32> %2110, <4 x i32> %2112, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2130 = shufflevector <4 x i32> %2114, <4 x i32> %2116, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2131 = shufflevector <4 x i32> %2118, <4 x i32> %2120, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2132 = shufflevector <4 x i32> %2122, <4 x i32> %2124, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2133 = shufflevector <8 x i32> %2125, <8 x i32> %2126, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2134 = shufflevector <8 x i32> %2127, <8 x i32> %2128, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2135 = shufflevector <8 x i32> %2129, <8 x i32> %2130, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2136 = shufflevector <8 x i32> %2131, <8 x i32> %2132, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2137 = shufflevector <16 x i32> %2133, <16 x i32> %2134, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2138 = shufflevector <16 x i32> %2135, <16 x i32> %2136, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2139 = shufflevector <32 x i32> %2137, <32 x i32> %2138, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2140 = lshr <64 x i32> %2139, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %2141 = trunc <64 x i32> %2140 to <64 x i16>
  %2142 = shufflevector <64 x i16> %2141, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2143 = sext i32 %blur_x.s0.x.v2.base.s to i64
  %2144 = add nsw i64 %2143, %117
  %2145 = getelementptr inbounds i16, i16* %blur_x, i64 %2144
  %2146 = bitcast i16* %2145 to <8 x i16>*
  store <8 x i16> %2142, <8 x i16>* %2146, align 2, !tbaa !389
  %2147 = shufflevector <64 x i16> %2141, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2148 = getelementptr inbounds i16, i16* %2145, i64 8
  %2149 = bitcast i16* %2148 to <8 x i16>*
  store <8 x i16> %2147, <8 x i16>* %2149, align 2, !tbaa !389
  %2150 = shufflevector <64 x i16> %2141, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %2151 = getelementptr inbounds i16, i16* %2145, i64 16
  %2152 = bitcast i16* %2151 to <8 x i16>*
  store <8 x i16> %2150, <8 x i16>* %2152, align 2, !tbaa !389
  %2153 = shufflevector <64 x i16> %2141, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2154 = getelementptr inbounds i16, i16* %2145, i64 24
  %2155 = bitcast i16* %2154 to <8 x i16>*
  store <8 x i16> %2153, <8 x i16>* %2155, align 2, !tbaa !389
  %2156 = shufflevector <64 x i16> %2141, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %2157 = getelementptr inbounds i16, i16* %2145, i64 32
  %2158 = bitcast i16* %2157 to <8 x i16>*
  store <8 x i16> %2156, <8 x i16>* %2158, align 2, !tbaa !389
  %2159 = shufflevector <64 x i16> %2141, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %2160 = getelementptr inbounds i16, i16* %2145, i64 40
  %2161 = bitcast i16* %2160 to <8 x i16>*
  store <8 x i16> %2159, <8 x i16>* %2161, align 2, !tbaa !389
  %2162 = shufflevector <64 x i16> %2141, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %2163 = getelementptr inbounds i16, i16* %2145, i64 48
  %2164 = bitcast i16* %2163 to <8 x i16>*
  store <8 x i16> %2162, <8 x i16>* %2164, align 2, !tbaa !389
  %2165 = shufflevector <64 x i16> %2141, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2166 = getelementptr inbounds i16, i16* %2145, i64 56
  %2167 = bitcast i16* %2166 to <8 x i16>*
  store <8 x i16> %2165, <8 x i16>* %2167, align 2, !tbaa !389
  %2168 = add nuw nsw i32 %blur_x.s0.x.x, 1
  %.not224 = icmp eq i32 %2168, %t312
  br i1 %.not224, label %"end for blur_x.s0.x.x", label %"for blur_x.s0.x.x"

"end for blur_x.s0.x.x":                          ; preds = %"for blur_x.s0.x.x", %"for blur_x.s0.y.rebased"
  %2169 = add nuw nsw i32 %blur_x.s0.y.rebased, 1
  %.not223 = icmp eq i32 %2169, %t323
  br i1 %.not223, label %"end for blur_x.s0.y.rebased", label %"for blur_x.s0.y.rebased"

"for blur_x.s0.y.rebased1":                       ; preds = %"end for blur_x.s0.y.rebased", %"end for blur_x.s0.x.x.rebased10"
  %blur_x.s0.y.rebased3 = phi i32 [ %6512, %"end for blur_x.s0.x.x.rebased10" ], [ 0, %"end for blur_x.s0.y.rebased" ]
  %2170 = add nsw i32 %blur_x.s0.y.rebased3, %blur_x.s0.y.prologue
  %2171 = and i32 %2170, 7
  %2172 = mul nsw i32 %2171, %a2
  %t335 = sub nsw i32 %2172, %t293
  %2173 = add nsw i32 %t329, %blur_x.s0.y.rebased3
  %2174 = mul nsw i32 %2173, %input.stride.1
  %t334 = sub nsw i32 %2174, %input.min.0
  br i1 %56, label %"for blur_x.s0.x.x4.preheader", label %"end for blur_x.s0.x.x5", !prof !385

"for blur_x.s0.x.x4.preheader":                   ; preds = %"for blur_x.s0.y.rebased1"
  %2175 = insertelement <64 x i32> undef, i32 %t334, i32 0
  %t273 = shufflevector <64 x i32> %2175, <64 x i32> undef, <64 x i32> zeroinitializer
  %2176 = sext i32 %t335 to i64
  br label %"for blur_x.s0.x.x4"

"end for blur_x.s0.y.rebased2":                   ; preds = %"end for blur_x.s0.x.x.rebased10", %"end for blur_x.s0.y.rebased"
  %a21 = sub i32 %a5, %a15
  %2177 = icmp slt i32 %a21, 0
  %a20 = select i1 %2177, i32 %a21, i32 0
  %2178 = icmp sgt i32 %a20, -4
  %t342 = sub nsw i32 %blur_x.s0.y.epilogue, %a17
  br i1 %2178, label %"for blur_x.s0.y.rebased13.preheader", label %"end for blur_x.s0.y.rebased14", !prof !385

"for blur_x.s0.y.rebased13.preheader":            ; preds = %"end for blur_x.s0.y.rebased2"
  %a20.op = add nsw i32 %a20, 3
  br label %"for blur_x.s0.y.rebased13"

"for blur_x.s0.x.x4":                             ; preds = %"for blur_x.s0.x.x4.preheader", %"for blur_x.s0.x.x4"
  %blur_x.s0.x.x6 = phi i32 [ %4225, %"for blur_x.s0.x.x4" ], [ 0, %"for blur_x.s0.x.x4.preheader" ]
  %2179 = shl nsw i32 %blur_x.s0.x.x6, 6
  %a18 = add nsw i32 %2179, %t293
  %2180 = icmp slt i32 %a18, %b25
  %blur_x.s0.x.v2.base.s7 = select i1 %2180, i32 %a18, i32 %b25
  %2181 = add nsw i32 %blur_x.s0.x.v2.base.s7, -63
  %2182 = insertelement <64 x i32> undef, i32 %2181, i32 0
  %2183 = shufflevector <64 x i32> %2182, <64 x i32> undef, <64 x i32> zeroinitializer
  %2184 = add nsw <64 x i32> %2183, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2185 = shufflevector <64 x i32> %2184, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2186 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2185, <4 x i32> %53)
  %2187 = shufflevector <64 x i32> %2184, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %2188 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2187, <4 x i32> %53)
  %2189 = shufflevector <64 x i32> %2184, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %2190 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2189, <4 x i32> %53)
  %2191 = shufflevector <64 x i32> %2184, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %2192 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2191, <4 x i32> %53)
  %2193 = shufflevector <64 x i32> %2184, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %2194 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2193, <4 x i32> %53)
  %2195 = shufflevector <64 x i32> %2184, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %2196 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2195, <4 x i32> %53)
  %2197 = shufflevector <64 x i32> %2184, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %2198 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2197, <4 x i32> %53)
  %2199 = shufflevector <64 x i32> %2184, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %2200 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2199, <4 x i32> %53)
  %2201 = shufflevector <64 x i32> %2184, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %2202 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2201, <4 x i32> %53)
  %2203 = shufflevector <64 x i32> %2184, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %2204 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2203, <4 x i32> %53)
  %2205 = shufflevector <64 x i32> %2184, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %2206 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2205, <4 x i32> %53)
  %2207 = shufflevector <64 x i32> %2184, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %2208 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2207, <4 x i32> %53)
  %2209 = shufflevector <64 x i32> %2184, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %2210 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2209, <4 x i32> %53)
  %2211 = shufflevector <64 x i32> %2184, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %2212 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2211, <4 x i32> %53)
  %2213 = shufflevector <64 x i32> %2184, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %2214 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2213, <4 x i32> %53)
  %2215 = shufflevector <64 x i32> %2184, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %2216 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2215, <4 x i32> %53)
  %2217 = shufflevector <4 x i32> %2216, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %2218 = shufflevector <8 x i32> %2217, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %2219 = shufflevector <16 x i32> %2218, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %2220 = shufflevector <32 x i32> %2219, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %2221 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2186, <4 x i32> %55)
  %2222 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2188, <4 x i32> %55)
  %2223 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2190, <4 x i32> %55)
  %2224 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2192, <4 x i32> %55)
  %2225 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2194, <4 x i32> %55)
  %2226 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2196, <4 x i32> %55)
  %2227 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2198, <4 x i32> %55)
  %2228 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2200, <4 x i32> %55)
  %2229 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2202, <4 x i32> %55)
  %2230 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2204, <4 x i32> %55)
  %2231 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2206, <4 x i32> %55)
  %2232 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2208, <4 x i32> %55)
  %2233 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2210, <4 x i32> %55)
  %2234 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2212, <4 x i32> %55)
  %2235 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2214, <4 x i32> %55)
  %2236 = shufflevector <64 x i32> %2220, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %2237 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2236, <4 x i32> %55)
  %2238 = shufflevector <4 x i32> %2221, <4 x i32> %2222, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2239 = shufflevector <4 x i32> %2223, <4 x i32> %2224, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2240 = shufflevector <4 x i32> %2225, <4 x i32> %2226, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2241 = shufflevector <4 x i32> %2227, <4 x i32> %2228, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2242 = shufflevector <4 x i32> %2229, <4 x i32> %2230, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2243 = shufflevector <4 x i32> %2231, <4 x i32> %2232, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2244 = shufflevector <4 x i32> %2233, <4 x i32> %2234, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2245 = shufflevector <4 x i32> %2235, <4 x i32> %2237, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2246 = shufflevector <8 x i32> %2238, <8 x i32> %2239, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2247 = shufflevector <8 x i32> %2240, <8 x i32> %2241, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2248 = shufflevector <8 x i32> %2242, <8 x i32> %2243, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2249 = shufflevector <8 x i32> %2244, <8 x i32> %2245, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2250 = shufflevector <16 x i32> %2246, <16 x i32> %2247, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2251 = shufflevector <16 x i32> %2248, <16 x i32> %2249, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2252 = shufflevector <32 x i32> %2250, <32 x i32> %2251, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2253 = add nsw <64 x i32> %2252, %t273
  %2254 = extractelement <64 x i32> %2253, i32 0
  %2255 = sext i32 %2254 to i64
  %2256 = getelementptr inbounds i16, i16* %input286, i64 %2255
  %2257 = load i16, i16* %2256, align 2, !tbaa !386
  %2258 = insertelement <64 x i16> undef, i16 %2257, i32 0
  %2259 = extractelement <64 x i32> %2253, i32 1
  %2260 = sext i32 %2259 to i64
  %2261 = getelementptr inbounds i16, i16* %input286, i64 %2260
  %2262 = load i16, i16* %2261, align 2, !tbaa !386
  %2263 = insertelement <64 x i16> %2258, i16 %2262, i32 1
  %2264 = extractelement <64 x i32> %2253, i32 2
  %2265 = sext i32 %2264 to i64
  %2266 = getelementptr inbounds i16, i16* %input286, i64 %2265
  %2267 = load i16, i16* %2266, align 2, !tbaa !386
  %2268 = insertelement <64 x i16> %2263, i16 %2267, i32 2
  %2269 = extractelement <64 x i32> %2253, i32 3
  %2270 = sext i32 %2269 to i64
  %2271 = getelementptr inbounds i16, i16* %input286, i64 %2270
  %2272 = load i16, i16* %2271, align 2, !tbaa !386
  %2273 = insertelement <64 x i16> %2268, i16 %2272, i32 3
  %2274 = extractelement <64 x i32> %2253, i32 4
  %2275 = sext i32 %2274 to i64
  %2276 = getelementptr inbounds i16, i16* %input286, i64 %2275
  %2277 = load i16, i16* %2276, align 2, !tbaa !386
  %2278 = insertelement <64 x i16> %2273, i16 %2277, i32 4
  %2279 = extractelement <64 x i32> %2253, i32 5
  %2280 = sext i32 %2279 to i64
  %2281 = getelementptr inbounds i16, i16* %input286, i64 %2280
  %2282 = load i16, i16* %2281, align 2, !tbaa !386
  %2283 = insertelement <64 x i16> %2278, i16 %2282, i32 5
  %2284 = extractelement <64 x i32> %2253, i32 6
  %2285 = sext i32 %2284 to i64
  %2286 = getelementptr inbounds i16, i16* %input286, i64 %2285
  %2287 = load i16, i16* %2286, align 2, !tbaa !386
  %2288 = insertelement <64 x i16> %2283, i16 %2287, i32 6
  %2289 = extractelement <64 x i32> %2253, i32 7
  %2290 = sext i32 %2289 to i64
  %2291 = getelementptr inbounds i16, i16* %input286, i64 %2290
  %2292 = load i16, i16* %2291, align 2, !tbaa !386
  %2293 = insertelement <64 x i16> %2288, i16 %2292, i32 7
  %2294 = extractelement <64 x i32> %2253, i32 8
  %2295 = sext i32 %2294 to i64
  %2296 = getelementptr inbounds i16, i16* %input286, i64 %2295
  %2297 = load i16, i16* %2296, align 2, !tbaa !386
  %2298 = insertelement <64 x i16> %2293, i16 %2297, i32 8
  %2299 = extractelement <64 x i32> %2253, i32 9
  %2300 = sext i32 %2299 to i64
  %2301 = getelementptr inbounds i16, i16* %input286, i64 %2300
  %2302 = load i16, i16* %2301, align 2, !tbaa !386
  %2303 = insertelement <64 x i16> %2298, i16 %2302, i32 9
  %2304 = extractelement <64 x i32> %2253, i32 10
  %2305 = sext i32 %2304 to i64
  %2306 = getelementptr inbounds i16, i16* %input286, i64 %2305
  %2307 = load i16, i16* %2306, align 2, !tbaa !386
  %2308 = insertelement <64 x i16> %2303, i16 %2307, i32 10
  %2309 = extractelement <64 x i32> %2253, i32 11
  %2310 = sext i32 %2309 to i64
  %2311 = getelementptr inbounds i16, i16* %input286, i64 %2310
  %2312 = load i16, i16* %2311, align 2, !tbaa !386
  %2313 = insertelement <64 x i16> %2308, i16 %2312, i32 11
  %2314 = extractelement <64 x i32> %2253, i32 12
  %2315 = sext i32 %2314 to i64
  %2316 = getelementptr inbounds i16, i16* %input286, i64 %2315
  %2317 = load i16, i16* %2316, align 2, !tbaa !386
  %2318 = insertelement <64 x i16> %2313, i16 %2317, i32 12
  %2319 = extractelement <64 x i32> %2253, i32 13
  %2320 = sext i32 %2319 to i64
  %2321 = getelementptr inbounds i16, i16* %input286, i64 %2320
  %2322 = load i16, i16* %2321, align 2, !tbaa !386
  %2323 = insertelement <64 x i16> %2318, i16 %2322, i32 13
  %2324 = extractelement <64 x i32> %2253, i32 14
  %2325 = sext i32 %2324 to i64
  %2326 = getelementptr inbounds i16, i16* %input286, i64 %2325
  %2327 = load i16, i16* %2326, align 2, !tbaa !386
  %2328 = insertelement <64 x i16> %2323, i16 %2327, i32 14
  %2329 = extractelement <64 x i32> %2253, i32 15
  %2330 = sext i32 %2329 to i64
  %2331 = getelementptr inbounds i16, i16* %input286, i64 %2330
  %2332 = load i16, i16* %2331, align 2, !tbaa !386
  %2333 = insertelement <64 x i16> %2328, i16 %2332, i32 15
  %2334 = extractelement <64 x i32> %2253, i32 16
  %2335 = sext i32 %2334 to i64
  %2336 = getelementptr inbounds i16, i16* %input286, i64 %2335
  %2337 = load i16, i16* %2336, align 2, !tbaa !386
  %2338 = insertelement <64 x i16> %2333, i16 %2337, i32 16
  %2339 = extractelement <64 x i32> %2253, i32 17
  %2340 = sext i32 %2339 to i64
  %2341 = getelementptr inbounds i16, i16* %input286, i64 %2340
  %2342 = load i16, i16* %2341, align 2, !tbaa !386
  %2343 = insertelement <64 x i16> %2338, i16 %2342, i32 17
  %2344 = extractelement <64 x i32> %2253, i32 18
  %2345 = sext i32 %2344 to i64
  %2346 = getelementptr inbounds i16, i16* %input286, i64 %2345
  %2347 = load i16, i16* %2346, align 2, !tbaa !386
  %2348 = insertelement <64 x i16> %2343, i16 %2347, i32 18
  %2349 = extractelement <64 x i32> %2253, i32 19
  %2350 = sext i32 %2349 to i64
  %2351 = getelementptr inbounds i16, i16* %input286, i64 %2350
  %2352 = load i16, i16* %2351, align 2, !tbaa !386
  %2353 = insertelement <64 x i16> %2348, i16 %2352, i32 19
  %2354 = extractelement <64 x i32> %2253, i32 20
  %2355 = sext i32 %2354 to i64
  %2356 = getelementptr inbounds i16, i16* %input286, i64 %2355
  %2357 = load i16, i16* %2356, align 2, !tbaa !386
  %2358 = insertelement <64 x i16> %2353, i16 %2357, i32 20
  %2359 = extractelement <64 x i32> %2253, i32 21
  %2360 = sext i32 %2359 to i64
  %2361 = getelementptr inbounds i16, i16* %input286, i64 %2360
  %2362 = load i16, i16* %2361, align 2, !tbaa !386
  %2363 = insertelement <64 x i16> %2358, i16 %2362, i32 21
  %2364 = extractelement <64 x i32> %2253, i32 22
  %2365 = sext i32 %2364 to i64
  %2366 = getelementptr inbounds i16, i16* %input286, i64 %2365
  %2367 = load i16, i16* %2366, align 2, !tbaa !386
  %2368 = insertelement <64 x i16> %2363, i16 %2367, i32 22
  %2369 = extractelement <64 x i32> %2253, i32 23
  %2370 = sext i32 %2369 to i64
  %2371 = getelementptr inbounds i16, i16* %input286, i64 %2370
  %2372 = load i16, i16* %2371, align 2, !tbaa !386
  %2373 = insertelement <64 x i16> %2368, i16 %2372, i32 23
  %2374 = extractelement <64 x i32> %2253, i32 24
  %2375 = sext i32 %2374 to i64
  %2376 = getelementptr inbounds i16, i16* %input286, i64 %2375
  %2377 = load i16, i16* %2376, align 2, !tbaa !386
  %2378 = insertelement <64 x i16> %2373, i16 %2377, i32 24
  %2379 = extractelement <64 x i32> %2253, i32 25
  %2380 = sext i32 %2379 to i64
  %2381 = getelementptr inbounds i16, i16* %input286, i64 %2380
  %2382 = load i16, i16* %2381, align 2, !tbaa !386
  %2383 = insertelement <64 x i16> %2378, i16 %2382, i32 25
  %2384 = extractelement <64 x i32> %2253, i32 26
  %2385 = sext i32 %2384 to i64
  %2386 = getelementptr inbounds i16, i16* %input286, i64 %2385
  %2387 = load i16, i16* %2386, align 2, !tbaa !386
  %2388 = insertelement <64 x i16> %2383, i16 %2387, i32 26
  %2389 = extractelement <64 x i32> %2253, i32 27
  %2390 = sext i32 %2389 to i64
  %2391 = getelementptr inbounds i16, i16* %input286, i64 %2390
  %2392 = load i16, i16* %2391, align 2, !tbaa !386
  %2393 = insertelement <64 x i16> %2388, i16 %2392, i32 27
  %2394 = extractelement <64 x i32> %2253, i32 28
  %2395 = sext i32 %2394 to i64
  %2396 = getelementptr inbounds i16, i16* %input286, i64 %2395
  %2397 = load i16, i16* %2396, align 2, !tbaa !386
  %2398 = insertelement <64 x i16> %2393, i16 %2397, i32 28
  %2399 = extractelement <64 x i32> %2253, i32 29
  %2400 = sext i32 %2399 to i64
  %2401 = getelementptr inbounds i16, i16* %input286, i64 %2400
  %2402 = load i16, i16* %2401, align 2, !tbaa !386
  %2403 = insertelement <64 x i16> %2398, i16 %2402, i32 29
  %2404 = extractelement <64 x i32> %2253, i32 30
  %2405 = sext i32 %2404 to i64
  %2406 = getelementptr inbounds i16, i16* %input286, i64 %2405
  %2407 = load i16, i16* %2406, align 2, !tbaa !386
  %2408 = insertelement <64 x i16> %2403, i16 %2407, i32 30
  %2409 = extractelement <64 x i32> %2253, i32 31
  %2410 = sext i32 %2409 to i64
  %2411 = getelementptr inbounds i16, i16* %input286, i64 %2410
  %2412 = load i16, i16* %2411, align 2, !tbaa !386
  %2413 = insertelement <64 x i16> %2408, i16 %2412, i32 31
  %2414 = extractelement <64 x i32> %2253, i32 32
  %2415 = sext i32 %2414 to i64
  %2416 = getelementptr inbounds i16, i16* %input286, i64 %2415
  %2417 = load i16, i16* %2416, align 2, !tbaa !386
  %2418 = insertelement <64 x i16> %2413, i16 %2417, i32 32
  %2419 = extractelement <64 x i32> %2253, i32 33
  %2420 = sext i32 %2419 to i64
  %2421 = getelementptr inbounds i16, i16* %input286, i64 %2420
  %2422 = load i16, i16* %2421, align 2, !tbaa !386
  %2423 = insertelement <64 x i16> %2418, i16 %2422, i32 33
  %2424 = extractelement <64 x i32> %2253, i32 34
  %2425 = sext i32 %2424 to i64
  %2426 = getelementptr inbounds i16, i16* %input286, i64 %2425
  %2427 = load i16, i16* %2426, align 2, !tbaa !386
  %2428 = insertelement <64 x i16> %2423, i16 %2427, i32 34
  %2429 = extractelement <64 x i32> %2253, i32 35
  %2430 = sext i32 %2429 to i64
  %2431 = getelementptr inbounds i16, i16* %input286, i64 %2430
  %2432 = load i16, i16* %2431, align 2, !tbaa !386
  %2433 = insertelement <64 x i16> %2428, i16 %2432, i32 35
  %2434 = extractelement <64 x i32> %2253, i32 36
  %2435 = sext i32 %2434 to i64
  %2436 = getelementptr inbounds i16, i16* %input286, i64 %2435
  %2437 = load i16, i16* %2436, align 2, !tbaa !386
  %2438 = insertelement <64 x i16> %2433, i16 %2437, i32 36
  %2439 = extractelement <64 x i32> %2253, i32 37
  %2440 = sext i32 %2439 to i64
  %2441 = getelementptr inbounds i16, i16* %input286, i64 %2440
  %2442 = load i16, i16* %2441, align 2, !tbaa !386
  %2443 = insertelement <64 x i16> %2438, i16 %2442, i32 37
  %2444 = extractelement <64 x i32> %2253, i32 38
  %2445 = sext i32 %2444 to i64
  %2446 = getelementptr inbounds i16, i16* %input286, i64 %2445
  %2447 = load i16, i16* %2446, align 2, !tbaa !386
  %2448 = insertelement <64 x i16> %2443, i16 %2447, i32 38
  %2449 = extractelement <64 x i32> %2253, i32 39
  %2450 = sext i32 %2449 to i64
  %2451 = getelementptr inbounds i16, i16* %input286, i64 %2450
  %2452 = load i16, i16* %2451, align 2, !tbaa !386
  %2453 = insertelement <64 x i16> %2448, i16 %2452, i32 39
  %2454 = extractelement <64 x i32> %2253, i32 40
  %2455 = sext i32 %2454 to i64
  %2456 = getelementptr inbounds i16, i16* %input286, i64 %2455
  %2457 = load i16, i16* %2456, align 2, !tbaa !386
  %2458 = insertelement <64 x i16> %2453, i16 %2457, i32 40
  %2459 = extractelement <64 x i32> %2253, i32 41
  %2460 = sext i32 %2459 to i64
  %2461 = getelementptr inbounds i16, i16* %input286, i64 %2460
  %2462 = load i16, i16* %2461, align 2, !tbaa !386
  %2463 = insertelement <64 x i16> %2458, i16 %2462, i32 41
  %2464 = extractelement <64 x i32> %2253, i32 42
  %2465 = sext i32 %2464 to i64
  %2466 = getelementptr inbounds i16, i16* %input286, i64 %2465
  %2467 = load i16, i16* %2466, align 2, !tbaa !386
  %2468 = insertelement <64 x i16> %2463, i16 %2467, i32 42
  %2469 = extractelement <64 x i32> %2253, i32 43
  %2470 = sext i32 %2469 to i64
  %2471 = getelementptr inbounds i16, i16* %input286, i64 %2470
  %2472 = load i16, i16* %2471, align 2, !tbaa !386
  %2473 = insertelement <64 x i16> %2468, i16 %2472, i32 43
  %2474 = extractelement <64 x i32> %2253, i32 44
  %2475 = sext i32 %2474 to i64
  %2476 = getelementptr inbounds i16, i16* %input286, i64 %2475
  %2477 = load i16, i16* %2476, align 2, !tbaa !386
  %2478 = insertelement <64 x i16> %2473, i16 %2477, i32 44
  %2479 = extractelement <64 x i32> %2253, i32 45
  %2480 = sext i32 %2479 to i64
  %2481 = getelementptr inbounds i16, i16* %input286, i64 %2480
  %2482 = load i16, i16* %2481, align 2, !tbaa !386
  %2483 = insertelement <64 x i16> %2478, i16 %2482, i32 45
  %2484 = extractelement <64 x i32> %2253, i32 46
  %2485 = sext i32 %2484 to i64
  %2486 = getelementptr inbounds i16, i16* %input286, i64 %2485
  %2487 = load i16, i16* %2486, align 2, !tbaa !386
  %2488 = insertelement <64 x i16> %2483, i16 %2487, i32 46
  %2489 = extractelement <64 x i32> %2253, i32 47
  %2490 = sext i32 %2489 to i64
  %2491 = getelementptr inbounds i16, i16* %input286, i64 %2490
  %2492 = load i16, i16* %2491, align 2, !tbaa !386
  %2493 = insertelement <64 x i16> %2488, i16 %2492, i32 47
  %2494 = extractelement <64 x i32> %2253, i32 48
  %2495 = sext i32 %2494 to i64
  %2496 = getelementptr inbounds i16, i16* %input286, i64 %2495
  %2497 = load i16, i16* %2496, align 2, !tbaa !386
  %2498 = insertelement <64 x i16> %2493, i16 %2497, i32 48
  %2499 = extractelement <64 x i32> %2253, i32 49
  %2500 = sext i32 %2499 to i64
  %2501 = getelementptr inbounds i16, i16* %input286, i64 %2500
  %2502 = load i16, i16* %2501, align 2, !tbaa !386
  %2503 = insertelement <64 x i16> %2498, i16 %2502, i32 49
  %2504 = extractelement <64 x i32> %2253, i32 50
  %2505 = sext i32 %2504 to i64
  %2506 = getelementptr inbounds i16, i16* %input286, i64 %2505
  %2507 = load i16, i16* %2506, align 2, !tbaa !386
  %2508 = insertelement <64 x i16> %2503, i16 %2507, i32 50
  %2509 = extractelement <64 x i32> %2253, i32 51
  %2510 = sext i32 %2509 to i64
  %2511 = getelementptr inbounds i16, i16* %input286, i64 %2510
  %2512 = load i16, i16* %2511, align 2, !tbaa !386
  %2513 = insertelement <64 x i16> %2508, i16 %2512, i32 51
  %2514 = extractelement <64 x i32> %2253, i32 52
  %2515 = sext i32 %2514 to i64
  %2516 = getelementptr inbounds i16, i16* %input286, i64 %2515
  %2517 = load i16, i16* %2516, align 2, !tbaa !386
  %2518 = insertelement <64 x i16> %2513, i16 %2517, i32 52
  %2519 = extractelement <64 x i32> %2253, i32 53
  %2520 = sext i32 %2519 to i64
  %2521 = getelementptr inbounds i16, i16* %input286, i64 %2520
  %2522 = load i16, i16* %2521, align 2, !tbaa !386
  %2523 = insertelement <64 x i16> %2518, i16 %2522, i32 53
  %2524 = extractelement <64 x i32> %2253, i32 54
  %2525 = sext i32 %2524 to i64
  %2526 = getelementptr inbounds i16, i16* %input286, i64 %2525
  %2527 = load i16, i16* %2526, align 2, !tbaa !386
  %2528 = insertelement <64 x i16> %2523, i16 %2527, i32 54
  %2529 = extractelement <64 x i32> %2253, i32 55
  %2530 = sext i32 %2529 to i64
  %2531 = getelementptr inbounds i16, i16* %input286, i64 %2530
  %2532 = load i16, i16* %2531, align 2, !tbaa !386
  %2533 = insertelement <64 x i16> %2528, i16 %2532, i32 55
  %2534 = extractelement <64 x i32> %2253, i32 56
  %2535 = sext i32 %2534 to i64
  %2536 = getelementptr inbounds i16, i16* %input286, i64 %2535
  %2537 = load i16, i16* %2536, align 2, !tbaa !386
  %2538 = insertelement <64 x i16> %2533, i16 %2537, i32 56
  %2539 = extractelement <64 x i32> %2253, i32 57
  %2540 = sext i32 %2539 to i64
  %2541 = getelementptr inbounds i16, i16* %input286, i64 %2540
  %2542 = load i16, i16* %2541, align 2, !tbaa !386
  %2543 = insertelement <64 x i16> %2538, i16 %2542, i32 57
  %2544 = extractelement <64 x i32> %2253, i32 58
  %2545 = sext i32 %2544 to i64
  %2546 = getelementptr inbounds i16, i16* %input286, i64 %2545
  %2547 = load i16, i16* %2546, align 2, !tbaa !386
  %2548 = insertelement <64 x i16> %2543, i16 %2547, i32 58
  %2549 = extractelement <64 x i32> %2253, i32 59
  %2550 = sext i32 %2549 to i64
  %2551 = getelementptr inbounds i16, i16* %input286, i64 %2550
  %2552 = load i16, i16* %2551, align 2, !tbaa !386
  %2553 = insertelement <64 x i16> %2548, i16 %2552, i32 59
  %2554 = extractelement <64 x i32> %2253, i32 60
  %2555 = sext i32 %2554 to i64
  %2556 = getelementptr inbounds i16, i16* %input286, i64 %2555
  %2557 = load i16, i16* %2556, align 2, !tbaa !386
  %2558 = insertelement <64 x i16> %2553, i16 %2557, i32 60
  %2559 = extractelement <64 x i32> %2253, i32 61
  %2560 = sext i32 %2559 to i64
  %2561 = getelementptr inbounds i16, i16* %input286, i64 %2560
  %2562 = load i16, i16* %2561, align 2, !tbaa !386
  %2563 = insertelement <64 x i16> %2558, i16 %2562, i32 61
  %2564 = extractelement <64 x i32> %2253, i32 62
  %2565 = sext i32 %2564 to i64
  %2566 = getelementptr inbounds i16, i16* %input286, i64 %2565
  %2567 = load i16, i16* %2566, align 2, !tbaa !386
  %2568 = insertelement <64 x i16> %2563, i16 %2567, i32 62
  %2569 = extractelement <64 x i32> %2253, i32 63
  %2570 = sext i32 %2569 to i64
  %2571 = getelementptr inbounds i16, i16* %input286, i64 %2570
  %2572 = load i16, i16* %2571, align 2, !tbaa !386
  %2573 = insertelement <64 x i16> %2568, i16 %2572, i32 63
  %2574 = add nsw i32 %blur_x.s0.x.v2.base.s7, -64
  %2575 = insertelement <64 x i32> undef, i32 %2574, i32 0
  %2576 = shufflevector <64 x i32> %2575, <64 x i32> undef, <64 x i32> zeroinitializer
  %2577 = add nsw <64 x i32> %2576, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2578 = shufflevector <64 x i32> %2577, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2579 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2578, <4 x i32> %53)
  %2580 = shufflevector <64 x i32> %2577, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %2581 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2580, <4 x i32> %53)
  %2582 = shufflevector <64 x i32> %2577, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %2583 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2582, <4 x i32> %53)
  %2584 = shufflevector <64 x i32> %2577, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %2585 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2584, <4 x i32> %53)
  %2586 = shufflevector <64 x i32> %2577, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %2587 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2586, <4 x i32> %53)
  %2588 = shufflevector <64 x i32> %2577, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %2589 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2588, <4 x i32> %53)
  %2590 = shufflevector <64 x i32> %2577, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %2591 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2590, <4 x i32> %53)
  %2592 = shufflevector <64 x i32> %2577, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %2593 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2592, <4 x i32> %53)
  %2594 = shufflevector <64 x i32> %2577, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %2595 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2594, <4 x i32> %53)
  %2596 = shufflevector <64 x i32> %2577, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %2597 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2596, <4 x i32> %53)
  %2598 = shufflevector <64 x i32> %2577, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %2599 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2598, <4 x i32> %53)
  %2600 = shufflevector <64 x i32> %2577, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %2601 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2600, <4 x i32> %53)
  %2602 = shufflevector <64 x i32> %2577, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %2603 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2602, <4 x i32> %53)
  %2604 = shufflevector <64 x i32> %2577, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %2605 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2604, <4 x i32> %53)
  %2606 = shufflevector <64 x i32> %2577, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %2607 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2606, <4 x i32> %53)
  %2608 = shufflevector <64 x i32> %2577, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %2609 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2608, <4 x i32> %53)
  %2610 = shufflevector <4 x i32> %2609, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %2611 = shufflevector <8 x i32> %2610, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %2612 = shufflevector <16 x i32> %2611, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %2613 = shufflevector <32 x i32> %2612, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %2614 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2579, <4 x i32> %55)
  %2615 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2581, <4 x i32> %55)
  %2616 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2583, <4 x i32> %55)
  %2617 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2585, <4 x i32> %55)
  %2618 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2587, <4 x i32> %55)
  %2619 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2589, <4 x i32> %55)
  %2620 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2591, <4 x i32> %55)
  %2621 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2593, <4 x i32> %55)
  %2622 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2595, <4 x i32> %55)
  %2623 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2597, <4 x i32> %55)
  %2624 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2599, <4 x i32> %55)
  %2625 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2601, <4 x i32> %55)
  %2626 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2603, <4 x i32> %55)
  %2627 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2605, <4 x i32> %55)
  %2628 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2607, <4 x i32> %55)
  %2629 = shufflevector <64 x i32> %2613, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %2630 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2629, <4 x i32> %55)
  %2631 = shufflevector <4 x i32> %2614, <4 x i32> %2615, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2632 = shufflevector <4 x i32> %2616, <4 x i32> %2617, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2633 = shufflevector <4 x i32> %2618, <4 x i32> %2619, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2634 = shufflevector <4 x i32> %2620, <4 x i32> %2621, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2635 = shufflevector <4 x i32> %2622, <4 x i32> %2623, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2636 = shufflevector <4 x i32> %2624, <4 x i32> %2625, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2637 = shufflevector <4 x i32> %2626, <4 x i32> %2627, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2638 = shufflevector <4 x i32> %2628, <4 x i32> %2630, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2639 = shufflevector <8 x i32> %2631, <8 x i32> %2632, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2640 = shufflevector <8 x i32> %2633, <8 x i32> %2634, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2641 = shufflevector <8 x i32> %2635, <8 x i32> %2636, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2642 = shufflevector <8 x i32> %2637, <8 x i32> %2638, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2643 = shufflevector <16 x i32> %2639, <16 x i32> %2640, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2644 = shufflevector <16 x i32> %2641, <16 x i32> %2642, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2645 = shufflevector <32 x i32> %2643, <32 x i32> %2644, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2646 = add nsw <64 x i32> %2645, %t273
  %2647 = extractelement <64 x i32> %2646, i32 0
  %2648 = sext i32 %2647 to i64
  %2649 = getelementptr inbounds i16, i16* %input286, i64 %2648
  %2650 = load i16, i16* %2649, align 2, !tbaa !386
  %2651 = insertelement <64 x i16> undef, i16 %2650, i32 0
  %2652 = extractelement <64 x i32> %2646, i32 1
  %2653 = sext i32 %2652 to i64
  %2654 = getelementptr inbounds i16, i16* %input286, i64 %2653
  %2655 = load i16, i16* %2654, align 2, !tbaa !386
  %2656 = insertelement <64 x i16> %2651, i16 %2655, i32 1
  %2657 = extractelement <64 x i32> %2646, i32 2
  %2658 = sext i32 %2657 to i64
  %2659 = getelementptr inbounds i16, i16* %input286, i64 %2658
  %2660 = load i16, i16* %2659, align 2, !tbaa !386
  %2661 = insertelement <64 x i16> %2656, i16 %2660, i32 2
  %2662 = extractelement <64 x i32> %2646, i32 3
  %2663 = sext i32 %2662 to i64
  %2664 = getelementptr inbounds i16, i16* %input286, i64 %2663
  %2665 = load i16, i16* %2664, align 2, !tbaa !386
  %2666 = insertelement <64 x i16> %2661, i16 %2665, i32 3
  %2667 = extractelement <64 x i32> %2646, i32 4
  %2668 = sext i32 %2667 to i64
  %2669 = getelementptr inbounds i16, i16* %input286, i64 %2668
  %2670 = load i16, i16* %2669, align 2, !tbaa !386
  %2671 = insertelement <64 x i16> %2666, i16 %2670, i32 4
  %2672 = extractelement <64 x i32> %2646, i32 5
  %2673 = sext i32 %2672 to i64
  %2674 = getelementptr inbounds i16, i16* %input286, i64 %2673
  %2675 = load i16, i16* %2674, align 2, !tbaa !386
  %2676 = insertelement <64 x i16> %2671, i16 %2675, i32 5
  %2677 = extractelement <64 x i32> %2646, i32 6
  %2678 = sext i32 %2677 to i64
  %2679 = getelementptr inbounds i16, i16* %input286, i64 %2678
  %2680 = load i16, i16* %2679, align 2, !tbaa !386
  %2681 = insertelement <64 x i16> %2676, i16 %2680, i32 6
  %2682 = extractelement <64 x i32> %2646, i32 7
  %2683 = sext i32 %2682 to i64
  %2684 = getelementptr inbounds i16, i16* %input286, i64 %2683
  %2685 = load i16, i16* %2684, align 2, !tbaa !386
  %2686 = insertelement <64 x i16> %2681, i16 %2685, i32 7
  %2687 = extractelement <64 x i32> %2646, i32 8
  %2688 = sext i32 %2687 to i64
  %2689 = getelementptr inbounds i16, i16* %input286, i64 %2688
  %2690 = load i16, i16* %2689, align 2, !tbaa !386
  %2691 = insertelement <64 x i16> %2686, i16 %2690, i32 8
  %2692 = extractelement <64 x i32> %2646, i32 9
  %2693 = sext i32 %2692 to i64
  %2694 = getelementptr inbounds i16, i16* %input286, i64 %2693
  %2695 = load i16, i16* %2694, align 2, !tbaa !386
  %2696 = insertelement <64 x i16> %2691, i16 %2695, i32 9
  %2697 = extractelement <64 x i32> %2646, i32 10
  %2698 = sext i32 %2697 to i64
  %2699 = getelementptr inbounds i16, i16* %input286, i64 %2698
  %2700 = load i16, i16* %2699, align 2, !tbaa !386
  %2701 = insertelement <64 x i16> %2696, i16 %2700, i32 10
  %2702 = extractelement <64 x i32> %2646, i32 11
  %2703 = sext i32 %2702 to i64
  %2704 = getelementptr inbounds i16, i16* %input286, i64 %2703
  %2705 = load i16, i16* %2704, align 2, !tbaa !386
  %2706 = insertelement <64 x i16> %2701, i16 %2705, i32 11
  %2707 = extractelement <64 x i32> %2646, i32 12
  %2708 = sext i32 %2707 to i64
  %2709 = getelementptr inbounds i16, i16* %input286, i64 %2708
  %2710 = load i16, i16* %2709, align 2, !tbaa !386
  %2711 = insertelement <64 x i16> %2706, i16 %2710, i32 12
  %2712 = extractelement <64 x i32> %2646, i32 13
  %2713 = sext i32 %2712 to i64
  %2714 = getelementptr inbounds i16, i16* %input286, i64 %2713
  %2715 = load i16, i16* %2714, align 2, !tbaa !386
  %2716 = insertelement <64 x i16> %2711, i16 %2715, i32 13
  %2717 = extractelement <64 x i32> %2646, i32 14
  %2718 = sext i32 %2717 to i64
  %2719 = getelementptr inbounds i16, i16* %input286, i64 %2718
  %2720 = load i16, i16* %2719, align 2, !tbaa !386
  %2721 = insertelement <64 x i16> %2716, i16 %2720, i32 14
  %2722 = extractelement <64 x i32> %2646, i32 15
  %2723 = sext i32 %2722 to i64
  %2724 = getelementptr inbounds i16, i16* %input286, i64 %2723
  %2725 = load i16, i16* %2724, align 2, !tbaa !386
  %2726 = insertelement <64 x i16> %2721, i16 %2725, i32 15
  %2727 = extractelement <64 x i32> %2646, i32 16
  %2728 = sext i32 %2727 to i64
  %2729 = getelementptr inbounds i16, i16* %input286, i64 %2728
  %2730 = load i16, i16* %2729, align 2, !tbaa !386
  %2731 = insertelement <64 x i16> %2726, i16 %2730, i32 16
  %2732 = extractelement <64 x i32> %2646, i32 17
  %2733 = sext i32 %2732 to i64
  %2734 = getelementptr inbounds i16, i16* %input286, i64 %2733
  %2735 = load i16, i16* %2734, align 2, !tbaa !386
  %2736 = insertelement <64 x i16> %2731, i16 %2735, i32 17
  %2737 = extractelement <64 x i32> %2646, i32 18
  %2738 = sext i32 %2737 to i64
  %2739 = getelementptr inbounds i16, i16* %input286, i64 %2738
  %2740 = load i16, i16* %2739, align 2, !tbaa !386
  %2741 = insertelement <64 x i16> %2736, i16 %2740, i32 18
  %2742 = extractelement <64 x i32> %2646, i32 19
  %2743 = sext i32 %2742 to i64
  %2744 = getelementptr inbounds i16, i16* %input286, i64 %2743
  %2745 = load i16, i16* %2744, align 2, !tbaa !386
  %2746 = insertelement <64 x i16> %2741, i16 %2745, i32 19
  %2747 = extractelement <64 x i32> %2646, i32 20
  %2748 = sext i32 %2747 to i64
  %2749 = getelementptr inbounds i16, i16* %input286, i64 %2748
  %2750 = load i16, i16* %2749, align 2, !tbaa !386
  %2751 = insertelement <64 x i16> %2746, i16 %2750, i32 20
  %2752 = extractelement <64 x i32> %2646, i32 21
  %2753 = sext i32 %2752 to i64
  %2754 = getelementptr inbounds i16, i16* %input286, i64 %2753
  %2755 = load i16, i16* %2754, align 2, !tbaa !386
  %2756 = insertelement <64 x i16> %2751, i16 %2755, i32 21
  %2757 = extractelement <64 x i32> %2646, i32 22
  %2758 = sext i32 %2757 to i64
  %2759 = getelementptr inbounds i16, i16* %input286, i64 %2758
  %2760 = load i16, i16* %2759, align 2, !tbaa !386
  %2761 = insertelement <64 x i16> %2756, i16 %2760, i32 22
  %2762 = extractelement <64 x i32> %2646, i32 23
  %2763 = sext i32 %2762 to i64
  %2764 = getelementptr inbounds i16, i16* %input286, i64 %2763
  %2765 = load i16, i16* %2764, align 2, !tbaa !386
  %2766 = insertelement <64 x i16> %2761, i16 %2765, i32 23
  %2767 = extractelement <64 x i32> %2646, i32 24
  %2768 = sext i32 %2767 to i64
  %2769 = getelementptr inbounds i16, i16* %input286, i64 %2768
  %2770 = load i16, i16* %2769, align 2, !tbaa !386
  %2771 = insertelement <64 x i16> %2766, i16 %2770, i32 24
  %2772 = extractelement <64 x i32> %2646, i32 25
  %2773 = sext i32 %2772 to i64
  %2774 = getelementptr inbounds i16, i16* %input286, i64 %2773
  %2775 = load i16, i16* %2774, align 2, !tbaa !386
  %2776 = insertelement <64 x i16> %2771, i16 %2775, i32 25
  %2777 = extractelement <64 x i32> %2646, i32 26
  %2778 = sext i32 %2777 to i64
  %2779 = getelementptr inbounds i16, i16* %input286, i64 %2778
  %2780 = load i16, i16* %2779, align 2, !tbaa !386
  %2781 = insertelement <64 x i16> %2776, i16 %2780, i32 26
  %2782 = extractelement <64 x i32> %2646, i32 27
  %2783 = sext i32 %2782 to i64
  %2784 = getelementptr inbounds i16, i16* %input286, i64 %2783
  %2785 = load i16, i16* %2784, align 2, !tbaa !386
  %2786 = insertelement <64 x i16> %2781, i16 %2785, i32 27
  %2787 = extractelement <64 x i32> %2646, i32 28
  %2788 = sext i32 %2787 to i64
  %2789 = getelementptr inbounds i16, i16* %input286, i64 %2788
  %2790 = load i16, i16* %2789, align 2, !tbaa !386
  %2791 = insertelement <64 x i16> %2786, i16 %2790, i32 28
  %2792 = extractelement <64 x i32> %2646, i32 29
  %2793 = sext i32 %2792 to i64
  %2794 = getelementptr inbounds i16, i16* %input286, i64 %2793
  %2795 = load i16, i16* %2794, align 2, !tbaa !386
  %2796 = insertelement <64 x i16> %2791, i16 %2795, i32 29
  %2797 = extractelement <64 x i32> %2646, i32 30
  %2798 = sext i32 %2797 to i64
  %2799 = getelementptr inbounds i16, i16* %input286, i64 %2798
  %2800 = load i16, i16* %2799, align 2, !tbaa !386
  %2801 = insertelement <64 x i16> %2796, i16 %2800, i32 30
  %2802 = extractelement <64 x i32> %2646, i32 31
  %2803 = sext i32 %2802 to i64
  %2804 = getelementptr inbounds i16, i16* %input286, i64 %2803
  %2805 = load i16, i16* %2804, align 2, !tbaa !386
  %2806 = insertelement <64 x i16> %2801, i16 %2805, i32 31
  %2807 = extractelement <64 x i32> %2646, i32 32
  %2808 = sext i32 %2807 to i64
  %2809 = getelementptr inbounds i16, i16* %input286, i64 %2808
  %2810 = load i16, i16* %2809, align 2, !tbaa !386
  %2811 = insertelement <64 x i16> %2806, i16 %2810, i32 32
  %2812 = extractelement <64 x i32> %2646, i32 33
  %2813 = sext i32 %2812 to i64
  %2814 = getelementptr inbounds i16, i16* %input286, i64 %2813
  %2815 = load i16, i16* %2814, align 2, !tbaa !386
  %2816 = insertelement <64 x i16> %2811, i16 %2815, i32 33
  %2817 = extractelement <64 x i32> %2646, i32 34
  %2818 = sext i32 %2817 to i64
  %2819 = getelementptr inbounds i16, i16* %input286, i64 %2818
  %2820 = load i16, i16* %2819, align 2, !tbaa !386
  %2821 = insertelement <64 x i16> %2816, i16 %2820, i32 34
  %2822 = extractelement <64 x i32> %2646, i32 35
  %2823 = sext i32 %2822 to i64
  %2824 = getelementptr inbounds i16, i16* %input286, i64 %2823
  %2825 = load i16, i16* %2824, align 2, !tbaa !386
  %2826 = insertelement <64 x i16> %2821, i16 %2825, i32 35
  %2827 = extractelement <64 x i32> %2646, i32 36
  %2828 = sext i32 %2827 to i64
  %2829 = getelementptr inbounds i16, i16* %input286, i64 %2828
  %2830 = load i16, i16* %2829, align 2, !tbaa !386
  %2831 = insertelement <64 x i16> %2826, i16 %2830, i32 36
  %2832 = extractelement <64 x i32> %2646, i32 37
  %2833 = sext i32 %2832 to i64
  %2834 = getelementptr inbounds i16, i16* %input286, i64 %2833
  %2835 = load i16, i16* %2834, align 2, !tbaa !386
  %2836 = insertelement <64 x i16> %2831, i16 %2835, i32 37
  %2837 = extractelement <64 x i32> %2646, i32 38
  %2838 = sext i32 %2837 to i64
  %2839 = getelementptr inbounds i16, i16* %input286, i64 %2838
  %2840 = load i16, i16* %2839, align 2, !tbaa !386
  %2841 = insertelement <64 x i16> %2836, i16 %2840, i32 38
  %2842 = extractelement <64 x i32> %2646, i32 39
  %2843 = sext i32 %2842 to i64
  %2844 = getelementptr inbounds i16, i16* %input286, i64 %2843
  %2845 = load i16, i16* %2844, align 2, !tbaa !386
  %2846 = insertelement <64 x i16> %2841, i16 %2845, i32 39
  %2847 = extractelement <64 x i32> %2646, i32 40
  %2848 = sext i32 %2847 to i64
  %2849 = getelementptr inbounds i16, i16* %input286, i64 %2848
  %2850 = load i16, i16* %2849, align 2, !tbaa !386
  %2851 = insertelement <64 x i16> %2846, i16 %2850, i32 40
  %2852 = extractelement <64 x i32> %2646, i32 41
  %2853 = sext i32 %2852 to i64
  %2854 = getelementptr inbounds i16, i16* %input286, i64 %2853
  %2855 = load i16, i16* %2854, align 2, !tbaa !386
  %2856 = insertelement <64 x i16> %2851, i16 %2855, i32 41
  %2857 = extractelement <64 x i32> %2646, i32 42
  %2858 = sext i32 %2857 to i64
  %2859 = getelementptr inbounds i16, i16* %input286, i64 %2858
  %2860 = load i16, i16* %2859, align 2, !tbaa !386
  %2861 = insertelement <64 x i16> %2856, i16 %2860, i32 42
  %2862 = extractelement <64 x i32> %2646, i32 43
  %2863 = sext i32 %2862 to i64
  %2864 = getelementptr inbounds i16, i16* %input286, i64 %2863
  %2865 = load i16, i16* %2864, align 2, !tbaa !386
  %2866 = insertelement <64 x i16> %2861, i16 %2865, i32 43
  %2867 = extractelement <64 x i32> %2646, i32 44
  %2868 = sext i32 %2867 to i64
  %2869 = getelementptr inbounds i16, i16* %input286, i64 %2868
  %2870 = load i16, i16* %2869, align 2, !tbaa !386
  %2871 = insertelement <64 x i16> %2866, i16 %2870, i32 44
  %2872 = extractelement <64 x i32> %2646, i32 45
  %2873 = sext i32 %2872 to i64
  %2874 = getelementptr inbounds i16, i16* %input286, i64 %2873
  %2875 = load i16, i16* %2874, align 2, !tbaa !386
  %2876 = insertelement <64 x i16> %2871, i16 %2875, i32 45
  %2877 = extractelement <64 x i32> %2646, i32 46
  %2878 = sext i32 %2877 to i64
  %2879 = getelementptr inbounds i16, i16* %input286, i64 %2878
  %2880 = load i16, i16* %2879, align 2, !tbaa !386
  %2881 = insertelement <64 x i16> %2876, i16 %2880, i32 46
  %2882 = extractelement <64 x i32> %2646, i32 47
  %2883 = sext i32 %2882 to i64
  %2884 = getelementptr inbounds i16, i16* %input286, i64 %2883
  %2885 = load i16, i16* %2884, align 2, !tbaa !386
  %2886 = insertelement <64 x i16> %2881, i16 %2885, i32 47
  %2887 = extractelement <64 x i32> %2646, i32 48
  %2888 = sext i32 %2887 to i64
  %2889 = getelementptr inbounds i16, i16* %input286, i64 %2888
  %2890 = load i16, i16* %2889, align 2, !tbaa !386
  %2891 = insertelement <64 x i16> %2886, i16 %2890, i32 48
  %2892 = extractelement <64 x i32> %2646, i32 49
  %2893 = sext i32 %2892 to i64
  %2894 = getelementptr inbounds i16, i16* %input286, i64 %2893
  %2895 = load i16, i16* %2894, align 2, !tbaa !386
  %2896 = insertelement <64 x i16> %2891, i16 %2895, i32 49
  %2897 = extractelement <64 x i32> %2646, i32 50
  %2898 = sext i32 %2897 to i64
  %2899 = getelementptr inbounds i16, i16* %input286, i64 %2898
  %2900 = load i16, i16* %2899, align 2, !tbaa !386
  %2901 = insertelement <64 x i16> %2896, i16 %2900, i32 50
  %2902 = extractelement <64 x i32> %2646, i32 51
  %2903 = sext i32 %2902 to i64
  %2904 = getelementptr inbounds i16, i16* %input286, i64 %2903
  %2905 = load i16, i16* %2904, align 2, !tbaa !386
  %2906 = insertelement <64 x i16> %2901, i16 %2905, i32 51
  %2907 = extractelement <64 x i32> %2646, i32 52
  %2908 = sext i32 %2907 to i64
  %2909 = getelementptr inbounds i16, i16* %input286, i64 %2908
  %2910 = load i16, i16* %2909, align 2, !tbaa !386
  %2911 = insertelement <64 x i16> %2906, i16 %2910, i32 52
  %2912 = extractelement <64 x i32> %2646, i32 53
  %2913 = sext i32 %2912 to i64
  %2914 = getelementptr inbounds i16, i16* %input286, i64 %2913
  %2915 = load i16, i16* %2914, align 2, !tbaa !386
  %2916 = insertelement <64 x i16> %2911, i16 %2915, i32 53
  %2917 = extractelement <64 x i32> %2646, i32 54
  %2918 = sext i32 %2917 to i64
  %2919 = getelementptr inbounds i16, i16* %input286, i64 %2918
  %2920 = load i16, i16* %2919, align 2, !tbaa !386
  %2921 = insertelement <64 x i16> %2916, i16 %2920, i32 54
  %2922 = extractelement <64 x i32> %2646, i32 55
  %2923 = sext i32 %2922 to i64
  %2924 = getelementptr inbounds i16, i16* %input286, i64 %2923
  %2925 = load i16, i16* %2924, align 2, !tbaa !386
  %2926 = insertelement <64 x i16> %2921, i16 %2925, i32 55
  %2927 = extractelement <64 x i32> %2646, i32 56
  %2928 = sext i32 %2927 to i64
  %2929 = getelementptr inbounds i16, i16* %input286, i64 %2928
  %2930 = load i16, i16* %2929, align 2, !tbaa !386
  %2931 = insertelement <64 x i16> %2926, i16 %2930, i32 56
  %2932 = extractelement <64 x i32> %2646, i32 57
  %2933 = sext i32 %2932 to i64
  %2934 = getelementptr inbounds i16, i16* %input286, i64 %2933
  %2935 = load i16, i16* %2934, align 2, !tbaa !386
  %2936 = insertelement <64 x i16> %2931, i16 %2935, i32 57
  %2937 = extractelement <64 x i32> %2646, i32 58
  %2938 = sext i32 %2937 to i64
  %2939 = getelementptr inbounds i16, i16* %input286, i64 %2938
  %2940 = load i16, i16* %2939, align 2, !tbaa !386
  %2941 = insertelement <64 x i16> %2936, i16 %2940, i32 58
  %2942 = extractelement <64 x i32> %2646, i32 59
  %2943 = sext i32 %2942 to i64
  %2944 = getelementptr inbounds i16, i16* %input286, i64 %2943
  %2945 = load i16, i16* %2944, align 2, !tbaa !386
  %2946 = insertelement <64 x i16> %2941, i16 %2945, i32 59
  %2947 = extractelement <64 x i32> %2646, i32 60
  %2948 = sext i32 %2947 to i64
  %2949 = getelementptr inbounds i16, i16* %input286, i64 %2948
  %2950 = load i16, i16* %2949, align 2, !tbaa !386
  %2951 = insertelement <64 x i16> %2946, i16 %2950, i32 60
  %2952 = extractelement <64 x i32> %2646, i32 61
  %2953 = sext i32 %2952 to i64
  %2954 = getelementptr inbounds i16, i16* %input286, i64 %2953
  %2955 = load i16, i16* %2954, align 2, !tbaa !386
  %2956 = insertelement <64 x i16> %2951, i16 %2955, i32 61
  %2957 = extractelement <64 x i32> %2646, i32 62
  %2958 = sext i32 %2957 to i64
  %2959 = getelementptr inbounds i16, i16* %input286, i64 %2958
  %2960 = load i16, i16* %2959, align 2, !tbaa !386
  %2961 = insertelement <64 x i16> %2956, i16 %2960, i32 62
  %2962 = extractelement <64 x i32> %2646, i32 63
  %2963 = sext i32 %2962 to i64
  %2964 = getelementptr inbounds i16, i16* %input286, i64 %2963
  %2965 = load i16, i16* %2964, align 2, !tbaa !386
  %2966 = insertelement <64 x i16> %2961, i16 %2965, i32 63
  %2967 = add nsw i32 %blur_x.s0.x.v2.base.s7, -62
  %2968 = insertelement <64 x i32> undef, i32 %2967, i32 0
  %2969 = shufflevector <64 x i32> %2968, <64 x i32> undef, <64 x i32> zeroinitializer
  %2970 = add nsw <64 x i32> %2969, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2971 = shufflevector <64 x i32> %2970, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2972 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2971, <4 x i32> %53)
  %2973 = shufflevector <64 x i32> %2970, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %2974 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2973, <4 x i32> %53)
  %2975 = shufflevector <64 x i32> %2970, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %2976 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2975, <4 x i32> %53)
  %2977 = shufflevector <64 x i32> %2970, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %2978 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2977, <4 x i32> %53)
  %2979 = shufflevector <64 x i32> %2970, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %2980 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2979, <4 x i32> %53)
  %2981 = shufflevector <64 x i32> %2970, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %2982 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2981, <4 x i32> %53)
  %2983 = shufflevector <64 x i32> %2970, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %2984 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2983, <4 x i32> %53)
  %2985 = shufflevector <64 x i32> %2970, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %2986 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2985, <4 x i32> %53)
  %2987 = shufflevector <64 x i32> %2970, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %2988 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2987, <4 x i32> %53)
  %2989 = shufflevector <64 x i32> %2970, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %2990 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2989, <4 x i32> %53)
  %2991 = shufflevector <64 x i32> %2970, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %2992 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2991, <4 x i32> %53)
  %2993 = shufflevector <64 x i32> %2970, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %2994 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2993, <4 x i32> %53)
  %2995 = shufflevector <64 x i32> %2970, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %2996 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2995, <4 x i32> %53)
  %2997 = shufflevector <64 x i32> %2970, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %2998 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2997, <4 x i32> %53)
  %2999 = shufflevector <64 x i32> %2970, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %3000 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %2999, <4 x i32> %53)
  %3001 = shufflevector <64 x i32> %2970, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %3002 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3001, <4 x i32> %53)
  %3003 = shufflevector <4 x i32> %3002, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %3004 = shufflevector <8 x i32> %3003, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %3005 = shufflevector <16 x i32> %3004, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %3006 = shufflevector <32 x i32> %3005, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %3007 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2972, <4 x i32> %55)
  %3008 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2974, <4 x i32> %55)
  %3009 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2976, <4 x i32> %55)
  %3010 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2978, <4 x i32> %55)
  %3011 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2980, <4 x i32> %55)
  %3012 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2982, <4 x i32> %55)
  %3013 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2984, <4 x i32> %55)
  %3014 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2986, <4 x i32> %55)
  %3015 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2988, <4 x i32> %55)
  %3016 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2990, <4 x i32> %55)
  %3017 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2992, <4 x i32> %55)
  %3018 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2994, <4 x i32> %55)
  %3019 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2996, <4 x i32> %55)
  %3020 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %2998, <4 x i32> %55)
  %3021 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3000, <4 x i32> %55)
  %3022 = shufflevector <64 x i32> %3006, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %3023 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3022, <4 x i32> %55)
  %3024 = shufflevector <4 x i32> %3007, <4 x i32> %3008, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3025 = shufflevector <4 x i32> %3009, <4 x i32> %3010, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3026 = shufflevector <4 x i32> %3011, <4 x i32> %3012, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3027 = shufflevector <4 x i32> %3013, <4 x i32> %3014, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3028 = shufflevector <4 x i32> %3015, <4 x i32> %3016, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3029 = shufflevector <4 x i32> %3017, <4 x i32> %3018, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3030 = shufflevector <4 x i32> %3019, <4 x i32> %3020, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3031 = shufflevector <4 x i32> %3021, <4 x i32> %3023, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3032 = shufflevector <8 x i32> %3024, <8 x i32> %3025, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3033 = shufflevector <8 x i32> %3026, <8 x i32> %3027, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3034 = shufflevector <8 x i32> %3028, <8 x i32> %3029, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3035 = shufflevector <8 x i32> %3030, <8 x i32> %3031, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3036 = shufflevector <16 x i32> %3032, <16 x i32> %3033, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3037 = shufflevector <16 x i32> %3034, <16 x i32> %3035, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3038 = shufflevector <32 x i32> %3036, <32 x i32> %3037, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3039 = add nsw <64 x i32> %3038, %t273
  %3040 = extractelement <64 x i32> %3039, i32 0
  %3041 = sext i32 %3040 to i64
  %3042 = getelementptr inbounds i16, i16* %input286, i64 %3041
  %3043 = load i16, i16* %3042, align 2, !tbaa !386
  %3044 = insertelement <64 x i16> undef, i16 %3043, i32 0
  %3045 = extractelement <64 x i32> %3039, i32 1
  %3046 = sext i32 %3045 to i64
  %3047 = getelementptr inbounds i16, i16* %input286, i64 %3046
  %3048 = load i16, i16* %3047, align 2, !tbaa !386
  %3049 = insertelement <64 x i16> %3044, i16 %3048, i32 1
  %3050 = extractelement <64 x i32> %3039, i32 2
  %3051 = sext i32 %3050 to i64
  %3052 = getelementptr inbounds i16, i16* %input286, i64 %3051
  %3053 = load i16, i16* %3052, align 2, !tbaa !386
  %3054 = insertelement <64 x i16> %3049, i16 %3053, i32 2
  %3055 = extractelement <64 x i32> %3039, i32 3
  %3056 = sext i32 %3055 to i64
  %3057 = getelementptr inbounds i16, i16* %input286, i64 %3056
  %3058 = load i16, i16* %3057, align 2, !tbaa !386
  %3059 = insertelement <64 x i16> %3054, i16 %3058, i32 3
  %3060 = extractelement <64 x i32> %3039, i32 4
  %3061 = sext i32 %3060 to i64
  %3062 = getelementptr inbounds i16, i16* %input286, i64 %3061
  %3063 = load i16, i16* %3062, align 2, !tbaa !386
  %3064 = insertelement <64 x i16> %3059, i16 %3063, i32 4
  %3065 = extractelement <64 x i32> %3039, i32 5
  %3066 = sext i32 %3065 to i64
  %3067 = getelementptr inbounds i16, i16* %input286, i64 %3066
  %3068 = load i16, i16* %3067, align 2, !tbaa !386
  %3069 = insertelement <64 x i16> %3064, i16 %3068, i32 5
  %3070 = extractelement <64 x i32> %3039, i32 6
  %3071 = sext i32 %3070 to i64
  %3072 = getelementptr inbounds i16, i16* %input286, i64 %3071
  %3073 = load i16, i16* %3072, align 2, !tbaa !386
  %3074 = insertelement <64 x i16> %3069, i16 %3073, i32 6
  %3075 = extractelement <64 x i32> %3039, i32 7
  %3076 = sext i32 %3075 to i64
  %3077 = getelementptr inbounds i16, i16* %input286, i64 %3076
  %3078 = load i16, i16* %3077, align 2, !tbaa !386
  %3079 = insertelement <64 x i16> %3074, i16 %3078, i32 7
  %3080 = extractelement <64 x i32> %3039, i32 8
  %3081 = sext i32 %3080 to i64
  %3082 = getelementptr inbounds i16, i16* %input286, i64 %3081
  %3083 = load i16, i16* %3082, align 2, !tbaa !386
  %3084 = insertelement <64 x i16> %3079, i16 %3083, i32 8
  %3085 = extractelement <64 x i32> %3039, i32 9
  %3086 = sext i32 %3085 to i64
  %3087 = getelementptr inbounds i16, i16* %input286, i64 %3086
  %3088 = load i16, i16* %3087, align 2, !tbaa !386
  %3089 = insertelement <64 x i16> %3084, i16 %3088, i32 9
  %3090 = extractelement <64 x i32> %3039, i32 10
  %3091 = sext i32 %3090 to i64
  %3092 = getelementptr inbounds i16, i16* %input286, i64 %3091
  %3093 = load i16, i16* %3092, align 2, !tbaa !386
  %3094 = insertelement <64 x i16> %3089, i16 %3093, i32 10
  %3095 = extractelement <64 x i32> %3039, i32 11
  %3096 = sext i32 %3095 to i64
  %3097 = getelementptr inbounds i16, i16* %input286, i64 %3096
  %3098 = load i16, i16* %3097, align 2, !tbaa !386
  %3099 = insertelement <64 x i16> %3094, i16 %3098, i32 11
  %3100 = extractelement <64 x i32> %3039, i32 12
  %3101 = sext i32 %3100 to i64
  %3102 = getelementptr inbounds i16, i16* %input286, i64 %3101
  %3103 = load i16, i16* %3102, align 2, !tbaa !386
  %3104 = insertelement <64 x i16> %3099, i16 %3103, i32 12
  %3105 = extractelement <64 x i32> %3039, i32 13
  %3106 = sext i32 %3105 to i64
  %3107 = getelementptr inbounds i16, i16* %input286, i64 %3106
  %3108 = load i16, i16* %3107, align 2, !tbaa !386
  %3109 = insertelement <64 x i16> %3104, i16 %3108, i32 13
  %3110 = extractelement <64 x i32> %3039, i32 14
  %3111 = sext i32 %3110 to i64
  %3112 = getelementptr inbounds i16, i16* %input286, i64 %3111
  %3113 = load i16, i16* %3112, align 2, !tbaa !386
  %3114 = insertelement <64 x i16> %3109, i16 %3113, i32 14
  %3115 = extractelement <64 x i32> %3039, i32 15
  %3116 = sext i32 %3115 to i64
  %3117 = getelementptr inbounds i16, i16* %input286, i64 %3116
  %3118 = load i16, i16* %3117, align 2, !tbaa !386
  %3119 = insertelement <64 x i16> %3114, i16 %3118, i32 15
  %3120 = extractelement <64 x i32> %3039, i32 16
  %3121 = sext i32 %3120 to i64
  %3122 = getelementptr inbounds i16, i16* %input286, i64 %3121
  %3123 = load i16, i16* %3122, align 2, !tbaa !386
  %3124 = insertelement <64 x i16> %3119, i16 %3123, i32 16
  %3125 = extractelement <64 x i32> %3039, i32 17
  %3126 = sext i32 %3125 to i64
  %3127 = getelementptr inbounds i16, i16* %input286, i64 %3126
  %3128 = load i16, i16* %3127, align 2, !tbaa !386
  %3129 = insertelement <64 x i16> %3124, i16 %3128, i32 17
  %3130 = extractelement <64 x i32> %3039, i32 18
  %3131 = sext i32 %3130 to i64
  %3132 = getelementptr inbounds i16, i16* %input286, i64 %3131
  %3133 = load i16, i16* %3132, align 2, !tbaa !386
  %3134 = insertelement <64 x i16> %3129, i16 %3133, i32 18
  %3135 = extractelement <64 x i32> %3039, i32 19
  %3136 = sext i32 %3135 to i64
  %3137 = getelementptr inbounds i16, i16* %input286, i64 %3136
  %3138 = load i16, i16* %3137, align 2, !tbaa !386
  %3139 = insertelement <64 x i16> %3134, i16 %3138, i32 19
  %3140 = extractelement <64 x i32> %3039, i32 20
  %3141 = sext i32 %3140 to i64
  %3142 = getelementptr inbounds i16, i16* %input286, i64 %3141
  %3143 = load i16, i16* %3142, align 2, !tbaa !386
  %3144 = insertelement <64 x i16> %3139, i16 %3143, i32 20
  %3145 = extractelement <64 x i32> %3039, i32 21
  %3146 = sext i32 %3145 to i64
  %3147 = getelementptr inbounds i16, i16* %input286, i64 %3146
  %3148 = load i16, i16* %3147, align 2, !tbaa !386
  %3149 = insertelement <64 x i16> %3144, i16 %3148, i32 21
  %3150 = extractelement <64 x i32> %3039, i32 22
  %3151 = sext i32 %3150 to i64
  %3152 = getelementptr inbounds i16, i16* %input286, i64 %3151
  %3153 = load i16, i16* %3152, align 2, !tbaa !386
  %3154 = insertelement <64 x i16> %3149, i16 %3153, i32 22
  %3155 = extractelement <64 x i32> %3039, i32 23
  %3156 = sext i32 %3155 to i64
  %3157 = getelementptr inbounds i16, i16* %input286, i64 %3156
  %3158 = load i16, i16* %3157, align 2, !tbaa !386
  %3159 = insertelement <64 x i16> %3154, i16 %3158, i32 23
  %3160 = extractelement <64 x i32> %3039, i32 24
  %3161 = sext i32 %3160 to i64
  %3162 = getelementptr inbounds i16, i16* %input286, i64 %3161
  %3163 = load i16, i16* %3162, align 2, !tbaa !386
  %3164 = insertelement <64 x i16> %3159, i16 %3163, i32 24
  %3165 = extractelement <64 x i32> %3039, i32 25
  %3166 = sext i32 %3165 to i64
  %3167 = getelementptr inbounds i16, i16* %input286, i64 %3166
  %3168 = load i16, i16* %3167, align 2, !tbaa !386
  %3169 = insertelement <64 x i16> %3164, i16 %3168, i32 25
  %3170 = extractelement <64 x i32> %3039, i32 26
  %3171 = sext i32 %3170 to i64
  %3172 = getelementptr inbounds i16, i16* %input286, i64 %3171
  %3173 = load i16, i16* %3172, align 2, !tbaa !386
  %3174 = insertelement <64 x i16> %3169, i16 %3173, i32 26
  %3175 = extractelement <64 x i32> %3039, i32 27
  %3176 = sext i32 %3175 to i64
  %3177 = getelementptr inbounds i16, i16* %input286, i64 %3176
  %3178 = load i16, i16* %3177, align 2, !tbaa !386
  %3179 = insertelement <64 x i16> %3174, i16 %3178, i32 27
  %3180 = extractelement <64 x i32> %3039, i32 28
  %3181 = sext i32 %3180 to i64
  %3182 = getelementptr inbounds i16, i16* %input286, i64 %3181
  %3183 = load i16, i16* %3182, align 2, !tbaa !386
  %3184 = insertelement <64 x i16> %3179, i16 %3183, i32 28
  %3185 = extractelement <64 x i32> %3039, i32 29
  %3186 = sext i32 %3185 to i64
  %3187 = getelementptr inbounds i16, i16* %input286, i64 %3186
  %3188 = load i16, i16* %3187, align 2, !tbaa !386
  %3189 = insertelement <64 x i16> %3184, i16 %3188, i32 29
  %3190 = extractelement <64 x i32> %3039, i32 30
  %3191 = sext i32 %3190 to i64
  %3192 = getelementptr inbounds i16, i16* %input286, i64 %3191
  %3193 = load i16, i16* %3192, align 2, !tbaa !386
  %3194 = insertelement <64 x i16> %3189, i16 %3193, i32 30
  %3195 = extractelement <64 x i32> %3039, i32 31
  %3196 = sext i32 %3195 to i64
  %3197 = getelementptr inbounds i16, i16* %input286, i64 %3196
  %3198 = load i16, i16* %3197, align 2, !tbaa !386
  %3199 = insertelement <64 x i16> %3194, i16 %3198, i32 31
  %3200 = extractelement <64 x i32> %3039, i32 32
  %3201 = sext i32 %3200 to i64
  %3202 = getelementptr inbounds i16, i16* %input286, i64 %3201
  %3203 = load i16, i16* %3202, align 2, !tbaa !386
  %3204 = insertelement <64 x i16> %3199, i16 %3203, i32 32
  %3205 = extractelement <64 x i32> %3039, i32 33
  %3206 = sext i32 %3205 to i64
  %3207 = getelementptr inbounds i16, i16* %input286, i64 %3206
  %3208 = load i16, i16* %3207, align 2, !tbaa !386
  %3209 = insertelement <64 x i16> %3204, i16 %3208, i32 33
  %3210 = extractelement <64 x i32> %3039, i32 34
  %3211 = sext i32 %3210 to i64
  %3212 = getelementptr inbounds i16, i16* %input286, i64 %3211
  %3213 = load i16, i16* %3212, align 2, !tbaa !386
  %3214 = insertelement <64 x i16> %3209, i16 %3213, i32 34
  %3215 = extractelement <64 x i32> %3039, i32 35
  %3216 = sext i32 %3215 to i64
  %3217 = getelementptr inbounds i16, i16* %input286, i64 %3216
  %3218 = load i16, i16* %3217, align 2, !tbaa !386
  %3219 = insertelement <64 x i16> %3214, i16 %3218, i32 35
  %3220 = extractelement <64 x i32> %3039, i32 36
  %3221 = sext i32 %3220 to i64
  %3222 = getelementptr inbounds i16, i16* %input286, i64 %3221
  %3223 = load i16, i16* %3222, align 2, !tbaa !386
  %3224 = insertelement <64 x i16> %3219, i16 %3223, i32 36
  %3225 = extractelement <64 x i32> %3039, i32 37
  %3226 = sext i32 %3225 to i64
  %3227 = getelementptr inbounds i16, i16* %input286, i64 %3226
  %3228 = load i16, i16* %3227, align 2, !tbaa !386
  %3229 = insertelement <64 x i16> %3224, i16 %3228, i32 37
  %3230 = extractelement <64 x i32> %3039, i32 38
  %3231 = sext i32 %3230 to i64
  %3232 = getelementptr inbounds i16, i16* %input286, i64 %3231
  %3233 = load i16, i16* %3232, align 2, !tbaa !386
  %3234 = insertelement <64 x i16> %3229, i16 %3233, i32 38
  %3235 = extractelement <64 x i32> %3039, i32 39
  %3236 = sext i32 %3235 to i64
  %3237 = getelementptr inbounds i16, i16* %input286, i64 %3236
  %3238 = load i16, i16* %3237, align 2, !tbaa !386
  %3239 = insertelement <64 x i16> %3234, i16 %3238, i32 39
  %3240 = extractelement <64 x i32> %3039, i32 40
  %3241 = sext i32 %3240 to i64
  %3242 = getelementptr inbounds i16, i16* %input286, i64 %3241
  %3243 = load i16, i16* %3242, align 2, !tbaa !386
  %3244 = insertelement <64 x i16> %3239, i16 %3243, i32 40
  %3245 = extractelement <64 x i32> %3039, i32 41
  %3246 = sext i32 %3245 to i64
  %3247 = getelementptr inbounds i16, i16* %input286, i64 %3246
  %3248 = load i16, i16* %3247, align 2, !tbaa !386
  %3249 = insertelement <64 x i16> %3244, i16 %3248, i32 41
  %3250 = extractelement <64 x i32> %3039, i32 42
  %3251 = sext i32 %3250 to i64
  %3252 = getelementptr inbounds i16, i16* %input286, i64 %3251
  %3253 = load i16, i16* %3252, align 2, !tbaa !386
  %3254 = insertelement <64 x i16> %3249, i16 %3253, i32 42
  %3255 = extractelement <64 x i32> %3039, i32 43
  %3256 = sext i32 %3255 to i64
  %3257 = getelementptr inbounds i16, i16* %input286, i64 %3256
  %3258 = load i16, i16* %3257, align 2, !tbaa !386
  %3259 = insertelement <64 x i16> %3254, i16 %3258, i32 43
  %3260 = extractelement <64 x i32> %3039, i32 44
  %3261 = sext i32 %3260 to i64
  %3262 = getelementptr inbounds i16, i16* %input286, i64 %3261
  %3263 = load i16, i16* %3262, align 2, !tbaa !386
  %3264 = insertelement <64 x i16> %3259, i16 %3263, i32 44
  %3265 = extractelement <64 x i32> %3039, i32 45
  %3266 = sext i32 %3265 to i64
  %3267 = getelementptr inbounds i16, i16* %input286, i64 %3266
  %3268 = load i16, i16* %3267, align 2, !tbaa !386
  %3269 = insertelement <64 x i16> %3264, i16 %3268, i32 45
  %3270 = extractelement <64 x i32> %3039, i32 46
  %3271 = sext i32 %3270 to i64
  %3272 = getelementptr inbounds i16, i16* %input286, i64 %3271
  %3273 = load i16, i16* %3272, align 2, !tbaa !386
  %3274 = insertelement <64 x i16> %3269, i16 %3273, i32 46
  %3275 = extractelement <64 x i32> %3039, i32 47
  %3276 = sext i32 %3275 to i64
  %3277 = getelementptr inbounds i16, i16* %input286, i64 %3276
  %3278 = load i16, i16* %3277, align 2, !tbaa !386
  %3279 = insertelement <64 x i16> %3274, i16 %3278, i32 47
  %3280 = extractelement <64 x i32> %3039, i32 48
  %3281 = sext i32 %3280 to i64
  %3282 = getelementptr inbounds i16, i16* %input286, i64 %3281
  %3283 = load i16, i16* %3282, align 2, !tbaa !386
  %3284 = insertelement <64 x i16> %3279, i16 %3283, i32 48
  %3285 = extractelement <64 x i32> %3039, i32 49
  %3286 = sext i32 %3285 to i64
  %3287 = getelementptr inbounds i16, i16* %input286, i64 %3286
  %3288 = load i16, i16* %3287, align 2, !tbaa !386
  %3289 = insertelement <64 x i16> %3284, i16 %3288, i32 49
  %3290 = extractelement <64 x i32> %3039, i32 50
  %3291 = sext i32 %3290 to i64
  %3292 = getelementptr inbounds i16, i16* %input286, i64 %3291
  %3293 = load i16, i16* %3292, align 2, !tbaa !386
  %3294 = insertelement <64 x i16> %3289, i16 %3293, i32 50
  %3295 = extractelement <64 x i32> %3039, i32 51
  %3296 = sext i32 %3295 to i64
  %3297 = getelementptr inbounds i16, i16* %input286, i64 %3296
  %3298 = load i16, i16* %3297, align 2, !tbaa !386
  %3299 = insertelement <64 x i16> %3294, i16 %3298, i32 51
  %3300 = extractelement <64 x i32> %3039, i32 52
  %3301 = sext i32 %3300 to i64
  %3302 = getelementptr inbounds i16, i16* %input286, i64 %3301
  %3303 = load i16, i16* %3302, align 2, !tbaa !386
  %3304 = insertelement <64 x i16> %3299, i16 %3303, i32 52
  %3305 = extractelement <64 x i32> %3039, i32 53
  %3306 = sext i32 %3305 to i64
  %3307 = getelementptr inbounds i16, i16* %input286, i64 %3306
  %3308 = load i16, i16* %3307, align 2, !tbaa !386
  %3309 = insertelement <64 x i16> %3304, i16 %3308, i32 53
  %3310 = extractelement <64 x i32> %3039, i32 54
  %3311 = sext i32 %3310 to i64
  %3312 = getelementptr inbounds i16, i16* %input286, i64 %3311
  %3313 = load i16, i16* %3312, align 2, !tbaa !386
  %3314 = insertelement <64 x i16> %3309, i16 %3313, i32 54
  %3315 = extractelement <64 x i32> %3039, i32 55
  %3316 = sext i32 %3315 to i64
  %3317 = getelementptr inbounds i16, i16* %input286, i64 %3316
  %3318 = load i16, i16* %3317, align 2, !tbaa !386
  %3319 = insertelement <64 x i16> %3314, i16 %3318, i32 55
  %3320 = extractelement <64 x i32> %3039, i32 56
  %3321 = sext i32 %3320 to i64
  %3322 = getelementptr inbounds i16, i16* %input286, i64 %3321
  %3323 = load i16, i16* %3322, align 2, !tbaa !386
  %3324 = insertelement <64 x i16> %3319, i16 %3323, i32 56
  %3325 = extractelement <64 x i32> %3039, i32 57
  %3326 = sext i32 %3325 to i64
  %3327 = getelementptr inbounds i16, i16* %input286, i64 %3326
  %3328 = load i16, i16* %3327, align 2, !tbaa !386
  %3329 = insertelement <64 x i16> %3324, i16 %3328, i32 57
  %3330 = extractelement <64 x i32> %3039, i32 58
  %3331 = sext i32 %3330 to i64
  %3332 = getelementptr inbounds i16, i16* %input286, i64 %3331
  %3333 = load i16, i16* %3332, align 2, !tbaa !386
  %3334 = insertelement <64 x i16> %3329, i16 %3333, i32 58
  %3335 = extractelement <64 x i32> %3039, i32 59
  %3336 = sext i32 %3335 to i64
  %3337 = getelementptr inbounds i16, i16* %input286, i64 %3336
  %3338 = load i16, i16* %3337, align 2, !tbaa !386
  %3339 = insertelement <64 x i16> %3334, i16 %3338, i32 59
  %3340 = extractelement <64 x i32> %3039, i32 60
  %3341 = sext i32 %3340 to i64
  %3342 = getelementptr inbounds i16, i16* %input286, i64 %3341
  %3343 = load i16, i16* %3342, align 2, !tbaa !386
  %3344 = insertelement <64 x i16> %3339, i16 %3343, i32 60
  %3345 = extractelement <64 x i32> %3039, i32 61
  %3346 = sext i32 %3345 to i64
  %3347 = getelementptr inbounds i16, i16* %input286, i64 %3346
  %3348 = load i16, i16* %3347, align 2, !tbaa !386
  %3349 = insertelement <64 x i16> %3344, i16 %3348, i32 61
  %3350 = extractelement <64 x i32> %3039, i32 62
  %3351 = sext i32 %3350 to i64
  %3352 = getelementptr inbounds i16, i16* %input286, i64 %3351
  %3353 = load i16, i16* %3352, align 2, !tbaa !386
  %3354 = insertelement <64 x i16> %3349, i16 %3353, i32 62
  %3355 = extractelement <64 x i32> %3039, i32 63
  %3356 = sext i32 %3355 to i64
  %3357 = getelementptr inbounds i16, i16* %input286, i64 %3356
  %3358 = load i16, i16* %3357, align 2, !tbaa !386
  %3359 = insertelement <64 x i16> %3354, i16 %3358, i32 63
  %3360 = add nsw i32 %blur_x.s0.x.v2.base.s7, -60
  %3361 = insertelement <64 x i32> undef, i32 %3360, i32 0
  %3362 = shufflevector <64 x i32> %3361, <64 x i32> undef, <64 x i32> zeroinitializer
  %3363 = add nsw <64 x i32> %3362, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3364 = shufflevector <64 x i32> %3363, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3365 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3364, <4 x i32> %53)
  %3366 = shufflevector <64 x i32> %3363, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3367 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3366, <4 x i32> %53)
  %3368 = shufflevector <64 x i32> %3363, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %3369 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3368, <4 x i32> %53)
  %3370 = shufflevector <64 x i32> %3363, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %3371 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3370, <4 x i32> %53)
  %3372 = shufflevector <64 x i32> %3363, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %3373 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3372, <4 x i32> %53)
  %3374 = shufflevector <64 x i32> %3363, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %3375 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3374, <4 x i32> %53)
  %3376 = shufflevector <64 x i32> %3363, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %3377 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3376, <4 x i32> %53)
  %3378 = shufflevector <64 x i32> %3363, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %3379 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3378, <4 x i32> %53)
  %3380 = shufflevector <64 x i32> %3363, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %3381 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3380, <4 x i32> %53)
  %3382 = shufflevector <64 x i32> %3363, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %3383 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3382, <4 x i32> %53)
  %3384 = shufflevector <64 x i32> %3363, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %3385 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3384, <4 x i32> %53)
  %3386 = shufflevector <64 x i32> %3363, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %3387 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3386, <4 x i32> %53)
  %3388 = shufflevector <64 x i32> %3363, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %3389 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3388, <4 x i32> %53)
  %3390 = shufflevector <64 x i32> %3363, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %3391 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3390, <4 x i32> %53)
  %3392 = shufflevector <64 x i32> %3363, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %3393 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3392, <4 x i32> %53)
  %3394 = shufflevector <64 x i32> %3363, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %3395 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3394, <4 x i32> %53)
  %3396 = shufflevector <4 x i32> %3395, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %3397 = shufflevector <8 x i32> %3396, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %3398 = shufflevector <16 x i32> %3397, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %3399 = shufflevector <32 x i32> %3398, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %3400 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3365, <4 x i32> %55)
  %3401 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3367, <4 x i32> %55)
  %3402 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3369, <4 x i32> %55)
  %3403 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3371, <4 x i32> %55)
  %3404 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3373, <4 x i32> %55)
  %3405 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3375, <4 x i32> %55)
  %3406 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3377, <4 x i32> %55)
  %3407 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3379, <4 x i32> %55)
  %3408 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3381, <4 x i32> %55)
  %3409 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3383, <4 x i32> %55)
  %3410 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3385, <4 x i32> %55)
  %3411 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3387, <4 x i32> %55)
  %3412 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3389, <4 x i32> %55)
  %3413 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3391, <4 x i32> %55)
  %3414 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3393, <4 x i32> %55)
  %3415 = shufflevector <64 x i32> %3399, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %3416 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3415, <4 x i32> %55)
  %3417 = shufflevector <4 x i32> %3400, <4 x i32> %3401, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3418 = shufflevector <4 x i32> %3402, <4 x i32> %3403, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3419 = shufflevector <4 x i32> %3404, <4 x i32> %3405, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3420 = shufflevector <4 x i32> %3406, <4 x i32> %3407, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3421 = shufflevector <4 x i32> %3408, <4 x i32> %3409, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3422 = shufflevector <4 x i32> %3410, <4 x i32> %3411, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3423 = shufflevector <4 x i32> %3412, <4 x i32> %3413, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3424 = shufflevector <4 x i32> %3414, <4 x i32> %3416, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3425 = shufflevector <8 x i32> %3417, <8 x i32> %3418, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3426 = shufflevector <8 x i32> %3419, <8 x i32> %3420, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3427 = shufflevector <8 x i32> %3421, <8 x i32> %3422, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3428 = shufflevector <8 x i32> %3423, <8 x i32> %3424, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3429 = shufflevector <16 x i32> %3425, <16 x i32> %3426, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3430 = shufflevector <16 x i32> %3427, <16 x i32> %3428, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3431 = shufflevector <32 x i32> %3429, <32 x i32> %3430, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3432 = add nsw <64 x i32> %3431, %t273
  %3433 = extractelement <64 x i32> %3432, i32 0
  %3434 = sext i32 %3433 to i64
  %3435 = getelementptr inbounds i16, i16* %input286, i64 %3434
  %3436 = load i16, i16* %3435, align 2, !tbaa !386
  %3437 = insertelement <64 x i16> undef, i16 %3436, i32 0
  %3438 = extractelement <64 x i32> %3432, i32 1
  %3439 = sext i32 %3438 to i64
  %3440 = getelementptr inbounds i16, i16* %input286, i64 %3439
  %3441 = load i16, i16* %3440, align 2, !tbaa !386
  %3442 = insertelement <64 x i16> %3437, i16 %3441, i32 1
  %3443 = extractelement <64 x i32> %3432, i32 2
  %3444 = sext i32 %3443 to i64
  %3445 = getelementptr inbounds i16, i16* %input286, i64 %3444
  %3446 = load i16, i16* %3445, align 2, !tbaa !386
  %3447 = insertelement <64 x i16> %3442, i16 %3446, i32 2
  %3448 = extractelement <64 x i32> %3432, i32 3
  %3449 = sext i32 %3448 to i64
  %3450 = getelementptr inbounds i16, i16* %input286, i64 %3449
  %3451 = load i16, i16* %3450, align 2, !tbaa !386
  %3452 = insertelement <64 x i16> %3447, i16 %3451, i32 3
  %3453 = extractelement <64 x i32> %3432, i32 4
  %3454 = sext i32 %3453 to i64
  %3455 = getelementptr inbounds i16, i16* %input286, i64 %3454
  %3456 = load i16, i16* %3455, align 2, !tbaa !386
  %3457 = insertelement <64 x i16> %3452, i16 %3456, i32 4
  %3458 = extractelement <64 x i32> %3432, i32 5
  %3459 = sext i32 %3458 to i64
  %3460 = getelementptr inbounds i16, i16* %input286, i64 %3459
  %3461 = load i16, i16* %3460, align 2, !tbaa !386
  %3462 = insertelement <64 x i16> %3457, i16 %3461, i32 5
  %3463 = extractelement <64 x i32> %3432, i32 6
  %3464 = sext i32 %3463 to i64
  %3465 = getelementptr inbounds i16, i16* %input286, i64 %3464
  %3466 = load i16, i16* %3465, align 2, !tbaa !386
  %3467 = insertelement <64 x i16> %3462, i16 %3466, i32 6
  %3468 = extractelement <64 x i32> %3432, i32 7
  %3469 = sext i32 %3468 to i64
  %3470 = getelementptr inbounds i16, i16* %input286, i64 %3469
  %3471 = load i16, i16* %3470, align 2, !tbaa !386
  %3472 = insertelement <64 x i16> %3467, i16 %3471, i32 7
  %3473 = extractelement <64 x i32> %3432, i32 8
  %3474 = sext i32 %3473 to i64
  %3475 = getelementptr inbounds i16, i16* %input286, i64 %3474
  %3476 = load i16, i16* %3475, align 2, !tbaa !386
  %3477 = insertelement <64 x i16> %3472, i16 %3476, i32 8
  %3478 = extractelement <64 x i32> %3432, i32 9
  %3479 = sext i32 %3478 to i64
  %3480 = getelementptr inbounds i16, i16* %input286, i64 %3479
  %3481 = load i16, i16* %3480, align 2, !tbaa !386
  %3482 = insertelement <64 x i16> %3477, i16 %3481, i32 9
  %3483 = extractelement <64 x i32> %3432, i32 10
  %3484 = sext i32 %3483 to i64
  %3485 = getelementptr inbounds i16, i16* %input286, i64 %3484
  %3486 = load i16, i16* %3485, align 2, !tbaa !386
  %3487 = insertelement <64 x i16> %3482, i16 %3486, i32 10
  %3488 = extractelement <64 x i32> %3432, i32 11
  %3489 = sext i32 %3488 to i64
  %3490 = getelementptr inbounds i16, i16* %input286, i64 %3489
  %3491 = load i16, i16* %3490, align 2, !tbaa !386
  %3492 = insertelement <64 x i16> %3487, i16 %3491, i32 11
  %3493 = extractelement <64 x i32> %3432, i32 12
  %3494 = sext i32 %3493 to i64
  %3495 = getelementptr inbounds i16, i16* %input286, i64 %3494
  %3496 = load i16, i16* %3495, align 2, !tbaa !386
  %3497 = insertelement <64 x i16> %3492, i16 %3496, i32 12
  %3498 = extractelement <64 x i32> %3432, i32 13
  %3499 = sext i32 %3498 to i64
  %3500 = getelementptr inbounds i16, i16* %input286, i64 %3499
  %3501 = load i16, i16* %3500, align 2, !tbaa !386
  %3502 = insertelement <64 x i16> %3497, i16 %3501, i32 13
  %3503 = extractelement <64 x i32> %3432, i32 14
  %3504 = sext i32 %3503 to i64
  %3505 = getelementptr inbounds i16, i16* %input286, i64 %3504
  %3506 = load i16, i16* %3505, align 2, !tbaa !386
  %3507 = insertelement <64 x i16> %3502, i16 %3506, i32 14
  %3508 = extractelement <64 x i32> %3432, i32 15
  %3509 = sext i32 %3508 to i64
  %3510 = getelementptr inbounds i16, i16* %input286, i64 %3509
  %3511 = load i16, i16* %3510, align 2, !tbaa !386
  %3512 = insertelement <64 x i16> %3507, i16 %3511, i32 15
  %3513 = extractelement <64 x i32> %3432, i32 16
  %3514 = sext i32 %3513 to i64
  %3515 = getelementptr inbounds i16, i16* %input286, i64 %3514
  %3516 = load i16, i16* %3515, align 2, !tbaa !386
  %3517 = insertelement <64 x i16> %3512, i16 %3516, i32 16
  %3518 = extractelement <64 x i32> %3432, i32 17
  %3519 = sext i32 %3518 to i64
  %3520 = getelementptr inbounds i16, i16* %input286, i64 %3519
  %3521 = load i16, i16* %3520, align 2, !tbaa !386
  %3522 = insertelement <64 x i16> %3517, i16 %3521, i32 17
  %3523 = extractelement <64 x i32> %3432, i32 18
  %3524 = sext i32 %3523 to i64
  %3525 = getelementptr inbounds i16, i16* %input286, i64 %3524
  %3526 = load i16, i16* %3525, align 2, !tbaa !386
  %3527 = insertelement <64 x i16> %3522, i16 %3526, i32 18
  %3528 = extractelement <64 x i32> %3432, i32 19
  %3529 = sext i32 %3528 to i64
  %3530 = getelementptr inbounds i16, i16* %input286, i64 %3529
  %3531 = load i16, i16* %3530, align 2, !tbaa !386
  %3532 = insertelement <64 x i16> %3527, i16 %3531, i32 19
  %3533 = extractelement <64 x i32> %3432, i32 20
  %3534 = sext i32 %3533 to i64
  %3535 = getelementptr inbounds i16, i16* %input286, i64 %3534
  %3536 = load i16, i16* %3535, align 2, !tbaa !386
  %3537 = insertelement <64 x i16> %3532, i16 %3536, i32 20
  %3538 = extractelement <64 x i32> %3432, i32 21
  %3539 = sext i32 %3538 to i64
  %3540 = getelementptr inbounds i16, i16* %input286, i64 %3539
  %3541 = load i16, i16* %3540, align 2, !tbaa !386
  %3542 = insertelement <64 x i16> %3537, i16 %3541, i32 21
  %3543 = extractelement <64 x i32> %3432, i32 22
  %3544 = sext i32 %3543 to i64
  %3545 = getelementptr inbounds i16, i16* %input286, i64 %3544
  %3546 = load i16, i16* %3545, align 2, !tbaa !386
  %3547 = insertelement <64 x i16> %3542, i16 %3546, i32 22
  %3548 = extractelement <64 x i32> %3432, i32 23
  %3549 = sext i32 %3548 to i64
  %3550 = getelementptr inbounds i16, i16* %input286, i64 %3549
  %3551 = load i16, i16* %3550, align 2, !tbaa !386
  %3552 = insertelement <64 x i16> %3547, i16 %3551, i32 23
  %3553 = extractelement <64 x i32> %3432, i32 24
  %3554 = sext i32 %3553 to i64
  %3555 = getelementptr inbounds i16, i16* %input286, i64 %3554
  %3556 = load i16, i16* %3555, align 2, !tbaa !386
  %3557 = insertelement <64 x i16> %3552, i16 %3556, i32 24
  %3558 = extractelement <64 x i32> %3432, i32 25
  %3559 = sext i32 %3558 to i64
  %3560 = getelementptr inbounds i16, i16* %input286, i64 %3559
  %3561 = load i16, i16* %3560, align 2, !tbaa !386
  %3562 = insertelement <64 x i16> %3557, i16 %3561, i32 25
  %3563 = extractelement <64 x i32> %3432, i32 26
  %3564 = sext i32 %3563 to i64
  %3565 = getelementptr inbounds i16, i16* %input286, i64 %3564
  %3566 = load i16, i16* %3565, align 2, !tbaa !386
  %3567 = insertelement <64 x i16> %3562, i16 %3566, i32 26
  %3568 = extractelement <64 x i32> %3432, i32 27
  %3569 = sext i32 %3568 to i64
  %3570 = getelementptr inbounds i16, i16* %input286, i64 %3569
  %3571 = load i16, i16* %3570, align 2, !tbaa !386
  %3572 = insertelement <64 x i16> %3567, i16 %3571, i32 27
  %3573 = extractelement <64 x i32> %3432, i32 28
  %3574 = sext i32 %3573 to i64
  %3575 = getelementptr inbounds i16, i16* %input286, i64 %3574
  %3576 = load i16, i16* %3575, align 2, !tbaa !386
  %3577 = insertelement <64 x i16> %3572, i16 %3576, i32 28
  %3578 = extractelement <64 x i32> %3432, i32 29
  %3579 = sext i32 %3578 to i64
  %3580 = getelementptr inbounds i16, i16* %input286, i64 %3579
  %3581 = load i16, i16* %3580, align 2, !tbaa !386
  %3582 = insertelement <64 x i16> %3577, i16 %3581, i32 29
  %3583 = extractelement <64 x i32> %3432, i32 30
  %3584 = sext i32 %3583 to i64
  %3585 = getelementptr inbounds i16, i16* %input286, i64 %3584
  %3586 = load i16, i16* %3585, align 2, !tbaa !386
  %3587 = insertelement <64 x i16> %3582, i16 %3586, i32 30
  %3588 = extractelement <64 x i32> %3432, i32 31
  %3589 = sext i32 %3588 to i64
  %3590 = getelementptr inbounds i16, i16* %input286, i64 %3589
  %3591 = load i16, i16* %3590, align 2, !tbaa !386
  %3592 = insertelement <64 x i16> %3587, i16 %3591, i32 31
  %3593 = extractelement <64 x i32> %3432, i32 32
  %3594 = sext i32 %3593 to i64
  %3595 = getelementptr inbounds i16, i16* %input286, i64 %3594
  %3596 = load i16, i16* %3595, align 2, !tbaa !386
  %3597 = insertelement <64 x i16> %3592, i16 %3596, i32 32
  %3598 = extractelement <64 x i32> %3432, i32 33
  %3599 = sext i32 %3598 to i64
  %3600 = getelementptr inbounds i16, i16* %input286, i64 %3599
  %3601 = load i16, i16* %3600, align 2, !tbaa !386
  %3602 = insertelement <64 x i16> %3597, i16 %3601, i32 33
  %3603 = extractelement <64 x i32> %3432, i32 34
  %3604 = sext i32 %3603 to i64
  %3605 = getelementptr inbounds i16, i16* %input286, i64 %3604
  %3606 = load i16, i16* %3605, align 2, !tbaa !386
  %3607 = insertelement <64 x i16> %3602, i16 %3606, i32 34
  %3608 = extractelement <64 x i32> %3432, i32 35
  %3609 = sext i32 %3608 to i64
  %3610 = getelementptr inbounds i16, i16* %input286, i64 %3609
  %3611 = load i16, i16* %3610, align 2, !tbaa !386
  %3612 = insertelement <64 x i16> %3607, i16 %3611, i32 35
  %3613 = extractelement <64 x i32> %3432, i32 36
  %3614 = sext i32 %3613 to i64
  %3615 = getelementptr inbounds i16, i16* %input286, i64 %3614
  %3616 = load i16, i16* %3615, align 2, !tbaa !386
  %3617 = insertelement <64 x i16> %3612, i16 %3616, i32 36
  %3618 = extractelement <64 x i32> %3432, i32 37
  %3619 = sext i32 %3618 to i64
  %3620 = getelementptr inbounds i16, i16* %input286, i64 %3619
  %3621 = load i16, i16* %3620, align 2, !tbaa !386
  %3622 = insertelement <64 x i16> %3617, i16 %3621, i32 37
  %3623 = extractelement <64 x i32> %3432, i32 38
  %3624 = sext i32 %3623 to i64
  %3625 = getelementptr inbounds i16, i16* %input286, i64 %3624
  %3626 = load i16, i16* %3625, align 2, !tbaa !386
  %3627 = insertelement <64 x i16> %3622, i16 %3626, i32 38
  %3628 = extractelement <64 x i32> %3432, i32 39
  %3629 = sext i32 %3628 to i64
  %3630 = getelementptr inbounds i16, i16* %input286, i64 %3629
  %3631 = load i16, i16* %3630, align 2, !tbaa !386
  %3632 = insertelement <64 x i16> %3627, i16 %3631, i32 39
  %3633 = extractelement <64 x i32> %3432, i32 40
  %3634 = sext i32 %3633 to i64
  %3635 = getelementptr inbounds i16, i16* %input286, i64 %3634
  %3636 = load i16, i16* %3635, align 2, !tbaa !386
  %3637 = insertelement <64 x i16> %3632, i16 %3636, i32 40
  %3638 = extractelement <64 x i32> %3432, i32 41
  %3639 = sext i32 %3638 to i64
  %3640 = getelementptr inbounds i16, i16* %input286, i64 %3639
  %3641 = load i16, i16* %3640, align 2, !tbaa !386
  %3642 = insertelement <64 x i16> %3637, i16 %3641, i32 41
  %3643 = extractelement <64 x i32> %3432, i32 42
  %3644 = sext i32 %3643 to i64
  %3645 = getelementptr inbounds i16, i16* %input286, i64 %3644
  %3646 = load i16, i16* %3645, align 2, !tbaa !386
  %3647 = insertelement <64 x i16> %3642, i16 %3646, i32 42
  %3648 = extractelement <64 x i32> %3432, i32 43
  %3649 = sext i32 %3648 to i64
  %3650 = getelementptr inbounds i16, i16* %input286, i64 %3649
  %3651 = load i16, i16* %3650, align 2, !tbaa !386
  %3652 = insertelement <64 x i16> %3647, i16 %3651, i32 43
  %3653 = extractelement <64 x i32> %3432, i32 44
  %3654 = sext i32 %3653 to i64
  %3655 = getelementptr inbounds i16, i16* %input286, i64 %3654
  %3656 = load i16, i16* %3655, align 2, !tbaa !386
  %3657 = insertelement <64 x i16> %3652, i16 %3656, i32 44
  %3658 = extractelement <64 x i32> %3432, i32 45
  %3659 = sext i32 %3658 to i64
  %3660 = getelementptr inbounds i16, i16* %input286, i64 %3659
  %3661 = load i16, i16* %3660, align 2, !tbaa !386
  %3662 = insertelement <64 x i16> %3657, i16 %3661, i32 45
  %3663 = extractelement <64 x i32> %3432, i32 46
  %3664 = sext i32 %3663 to i64
  %3665 = getelementptr inbounds i16, i16* %input286, i64 %3664
  %3666 = load i16, i16* %3665, align 2, !tbaa !386
  %3667 = insertelement <64 x i16> %3662, i16 %3666, i32 46
  %3668 = extractelement <64 x i32> %3432, i32 47
  %3669 = sext i32 %3668 to i64
  %3670 = getelementptr inbounds i16, i16* %input286, i64 %3669
  %3671 = load i16, i16* %3670, align 2, !tbaa !386
  %3672 = insertelement <64 x i16> %3667, i16 %3671, i32 47
  %3673 = extractelement <64 x i32> %3432, i32 48
  %3674 = sext i32 %3673 to i64
  %3675 = getelementptr inbounds i16, i16* %input286, i64 %3674
  %3676 = load i16, i16* %3675, align 2, !tbaa !386
  %3677 = insertelement <64 x i16> %3672, i16 %3676, i32 48
  %3678 = extractelement <64 x i32> %3432, i32 49
  %3679 = sext i32 %3678 to i64
  %3680 = getelementptr inbounds i16, i16* %input286, i64 %3679
  %3681 = load i16, i16* %3680, align 2, !tbaa !386
  %3682 = insertelement <64 x i16> %3677, i16 %3681, i32 49
  %3683 = extractelement <64 x i32> %3432, i32 50
  %3684 = sext i32 %3683 to i64
  %3685 = getelementptr inbounds i16, i16* %input286, i64 %3684
  %3686 = load i16, i16* %3685, align 2, !tbaa !386
  %3687 = insertelement <64 x i16> %3682, i16 %3686, i32 50
  %3688 = extractelement <64 x i32> %3432, i32 51
  %3689 = sext i32 %3688 to i64
  %3690 = getelementptr inbounds i16, i16* %input286, i64 %3689
  %3691 = load i16, i16* %3690, align 2, !tbaa !386
  %3692 = insertelement <64 x i16> %3687, i16 %3691, i32 51
  %3693 = extractelement <64 x i32> %3432, i32 52
  %3694 = sext i32 %3693 to i64
  %3695 = getelementptr inbounds i16, i16* %input286, i64 %3694
  %3696 = load i16, i16* %3695, align 2, !tbaa !386
  %3697 = insertelement <64 x i16> %3692, i16 %3696, i32 52
  %3698 = extractelement <64 x i32> %3432, i32 53
  %3699 = sext i32 %3698 to i64
  %3700 = getelementptr inbounds i16, i16* %input286, i64 %3699
  %3701 = load i16, i16* %3700, align 2, !tbaa !386
  %3702 = insertelement <64 x i16> %3697, i16 %3701, i32 53
  %3703 = extractelement <64 x i32> %3432, i32 54
  %3704 = sext i32 %3703 to i64
  %3705 = getelementptr inbounds i16, i16* %input286, i64 %3704
  %3706 = load i16, i16* %3705, align 2, !tbaa !386
  %3707 = insertelement <64 x i16> %3702, i16 %3706, i32 54
  %3708 = extractelement <64 x i32> %3432, i32 55
  %3709 = sext i32 %3708 to i64
  %3710 = getelementptr inbounds i16, i16* %input286, i64 %3709
  %3711 = load i16, i16* %3710, align 2, !tbaa !386
  %3712 = insertelement <64 x i16> %3707, i16 %3711, i32 55
  %3713 = extractelement <64 x i32> %3432, i32 56
  %3714 = sext i32 %3713 to i64
  %3715 = getelementptr inbounds i16, i16* %input286, i64 %3714
  %3716 = load i16, i16* %3715, align 2, !tbaa !386
  %3717 = insertelement <64 x i16> %3712, i16 %3716, i32 56
  %3718 = extractelement <64 x i32> %3432, i32 57
  %3719 = sext i32 %3718 to i64
  %3720 = getelementptr inbounds i16, i16* %input286, i64 %3719
  %3721 = load i16, i16* %3720, align 2, !tbaa !386
  %3722 = insertelement <64 x i16> %3717, i16 %3721, i32 57
  %3723 = extractelement <64 x i32> %3432, i32 58
  %3724 = sext i32 %3723 to i64
  %3725 = getelementptr inbounds i16, i16* %input286, i64 %3724
  %3726 = load i16, i16* %3725, align 2, !tbaa !386
  %3727 = insertelement <64 x i16> %3722, i16 %3726, i32 58
  %3728 = extractelement <64 x i32> %3432, i32 59
  %3729 = sext i32 %3728 to i64
  %3730 = getelementptr inbounds i16, i16* %input286, i64 %3729
  %3731 = load i16, i16* %3730, align 2, !tbaa !386
  %3732 = insertelement <64 x i16> %3727, i16 %3731, i32 59
  %3733 = extractelement <64 x i32> %3432, i32 60
  %3734 = sext i32 %3733 to i64
  %3735 = getelementptr inbounds i16, i16* %input286, i64 %3734
  %3736 = load i16, i16* %3735, align 2, !tbaa !386
  %3737 = insertelement <64 x i16> %3732, i16 %3736, i32 60
  %3738 = extractelement <64 x i32> %3432, i32 61
  %3739 = sext i32 %3738 to i64
  %3740 = getelementptr inbounds i16, i16* %input286, i64 %3739
  %3741 = load i16, i16* %3740, align 2, !tbaa !386
  %3742 = insertelement <64 x i16> %3737, i16 %3741, i32 61
  %3743 = extractelement <64 x i32> %3432, i32 62
  %3744 = sext i32 %3743 to i64
  %3745 = getelementptr inbounds i16, i16* %input286, i64 %3744
  %3746 = load i16, i16* %3745, align 2, !tbaa !386
  %3747 = insertelement <64 x i16> %3742, i16 %3746, i32 62
  %3748 = extractelement <64 x i32> %3432, i32 63
  %3749 = sext i32 %3748 to i64
  %3750 = getelementptr inbounds i16, i16* %input286, i64 %3749
  %3751 = load i16, i16* %3750, align 2, !tbaa !386
  %3752 = insertelement <64 x i16> %3747, i16 %3751, i32 63
  %3753 = add nsw i32 %blur_x.s0.x.v2.base.s7, -61
  %3754 = insertelement <64 x i32> undef, i32 %3753, i32 0
  %3755 = shufflevector <64 x i32> %3754, <64 x i32> undef, <64 x i32> zeroinitializer
  %3756 = add nsw <64 x i32> %3755, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3757 = shufflevector <64 x i32> %3756, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3758 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3757, <4 x i32> %53)
  %3759 = shufflevector <64 x i32> %3756, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3760 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3759, <4 x i32> %53)
  %3761 = shufflevector <64 x i32> %3756, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %3762 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3761, <4 x i32> %53)
  %3763 = shufflevector <64 x i32> %3756, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %3764 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3763, <4 x i32> %53)
  %3765 = shufflevector <64 x i32> %3756, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %3766 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3765, <4 x i32> %53)
  %3767 = shufflevector <64 x i32> %3756, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %3768 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3767, <4 x i32> %53)
  %3769 = shufflevector <64 x i32> %3756, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %3770 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3769, <4 x i32> %53)
  %3771 = shufflevector <64 x i32> %3756, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %3772 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3771, <4 x i32> %53)
  %3773 = shufflevector <64 x i32> %3756, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %3774 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3773, <4 x i32> %53)
  %3775 = shufflevector <64 x i32> %3756, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %3776 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3775, <4 x i32> %53)
  %3777 = shufflevector <64 x i32> %3756, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %3778 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3777, <4 x i32> %53)
  %3779 = shufflevector <64 x i32> %3756, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %3780 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3779, <4 x i32> %53)
  %3781 = shufflevector <64 x i32> %3756, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %3782 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3781, <4 x i32> %53)
  %3783 = shufflevector <64 x i32> %3756, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %3784 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3783, <4 x i32> %53)
  %3785 = shufflevector <64 x i32> %3756, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %3786 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3785, <4 x i32> %53)
  %3787 = shufflevector <64 x i32> %3756, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %3788 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3787, <4 x i32> %53)
  %3789 = shufflevector <4 x i32> %3788, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %3790 = shufflevector <8 x i32> %3789, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %3791 = shufflevector <16 x i32> %3790, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %3792 = shufflevector <32 x i32> %3791, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %3793 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3758, <4 x i32> %55)
  %3794 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3760, <4 x i32> %55)
  %3795 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3762, <4 x i32> %55)
  %3796 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3764, <4 x i32> %55)
  %3797 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3766, <4 x i32> %55)
  %3798 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3768, <4 x i32> %55)
  %3799 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3770, <4 x i32> %55)
  %3800 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3772, <4 x i32> %55)
  %3801 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3774, <4 x i32> %55)
  %3802 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3776, <4 x i32> %55)
  %3803 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3778, <4 x i32> %55)
  %3804 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3780, <4 x i32> %55)
  %3805 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3782, <4 x i32> %55)
  %3806 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3784, <4 x i32> %55)
  %3807 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3786, <4 x i32> %55)
  %3808 = shufflevector <64 x i32> %3792, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %3809 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3808, <4 x i32> %55)
  %3810 = shufflevector <4 x i32> %3793, <4 x i32> %3794, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3811 = shufflevector <4 x i32> %3795, <4 x i32> %3796, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3812 = shufflevector <4 x i32> %3797, <4 x i32> %3798, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3813 = shufflevector <4 x i32> %3799, <4 x i32> %3800, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3814 = shufflevector <4 x i32> %3801, <4 x i32> %3802, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3815 = shufflevector <4 x i32> %3803, <4 x i32> %3804, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3816 = shufflevector <4 x i32> %3805, <4 x i32> %3806, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3817 = shufflevector <4 x i32> %3807, <4 x i32> %3809, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3818 = shufflevector <8 x i32> %3810, <8 x i32> %3811, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3819 = shufflevector <8 x i32> %3812, <8 x i32> %3813, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3820 = shufflevector <8 x i32> %3814, <8 x i32> %3815, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3821 = shufflevector <8 x i32> %3816, <8 x i32> %3817, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3822 = shufflevector <16 x i32> %3818, <16 x i32> %3819, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3823 = shufflevector <16 x i32> %3820, <16 x i32> %3821, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3824 = shufflevector <32 x i32> %3822, <32 x i32> %3823, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3825 = add nsw <64 x i32> %3824, %t273
  %3826 = extractelement <64 x i32> %3825, i32 0
  %3827 = sext i32 %3826 to i64
  %3828 = getelementptr inbounds i16, i16* %input286, i64 %3827
  %3829 = load i16, i16* %3828, align 2, !tbaa !386
  %3830 = insertelement <64 x i16> undef, i16 %3829, i32 0
  %3831 = extractelement <64 x i32> %3825, i32 1
  %3832 = sext i32 %3831 to i64
  %3833 = getelementptr inbounds i16, i16* %input286, i64 %3832
  %3834 = load i16, i16* %3833, align 2, !tbaa !386
  %3835 = insertelement <64 x i16> %3830, i16 %3834, i32 1
  %3836 = extractelement <64 x i32> %3825, i32 2
  %3837 = sext i32 %3836 to i64
  %3838 = getelementptr inbounds i16, i16* %input286, i64 %3837
  %3839 = load i16, i16* %3838, align 2, !tbaa !386
  %3840 = insertelement <64 x i16> %3835, i16 %3839, i32 2
  %3841 = extractelement <64 x i32> %3825, i32 3
  %3842 = sext i32 %3841 to i64
  %3843 = getelementptr inbounds i16, i16* %input286, i64 %3842
  %3844 = load i16, i16* %3843, align 2, !tbaa !386
  %3845 = insertelement <64 x i16> %3840, i16 %3844, i32 3
  %3846 = extractelement <64 x i32> %3825, i32 4
  %3847 = sext i32 %3846 to i64
  %3848 = getelementptr inbounds i16, i16* %input286, i64 %3847
  %3849 = load i16, i16* %3848, align 2, !tbaa !386
  %3850 = insertelement <64 x i16> %3845, i16 %3849, i32 4
  %3851 = extractelement <64 x i32> %3825, i32 5
  %3852 = sext i32 %3851 to i64
  %3853 = getelementptr inbounds i16, i16* %input286, i64 %3852
  %3854 = load i16, i16* %3853, align 2, !tbaa !386
  %3855 = insertelement <64 x i16> %3850, i16 %3854, i32 5
  %3856 = extractelement <64 x i32> %3825, i32 6
  %3857 = sext i32 %3856 to i64
  %3858 = getelementptr inbounds i16, i16* %input286, i64 %3857
  %3859 = load i16, i16* %3858, align 2, !tbaa !386
  %3860 = insertelement <64 x i16> %3855, i16 %3859, i32 6
  %3861 = extractelement <64 x i32> %3825, i32 7
  %3862 = sext i32 %3861 to i64
  %3863 = getelementptr inbounds i16, i16* %input286, i64 %3862
  %3864 = load i16, i16* %3863, align 2, !tbaa !386
  %3865 = insertelement <64 x i16> %3860, i16 %3864, i32 7
  %3866 = extractelement <64 x i32> %3825, i32 8
  %3867 = sext i32 %3866 to i64
  %3868 = getelementptr inbounds i16, i16* %input286, i64 %3867
  %3869 = load i16, i16* %3868, align 2, !tbaa !386
  %3870 = insertelement <64 x i16> %3865, i16 %3869, i32 8
  %3871 = extractelement <64 x i32> %3825, i32 9
  %3872 = sext i32 %3871 to i64
  %3873 = getelementptr inbounds i16, i16* %input286, i64 %3872
  %3874 = load i16, i16* %3873, align 2, !tbaa !386
  %3875 = insertelement <64 x i16> %3870, i16 %3874, i32 9
  %3876 = extractelement <64 x i32> %3825, i32 10
  %3877 = sext i32 %3876 to i64
  %3878 = getelementptr inbounds i16, i16* %input286, i64 %3877
  %3879 = load i16, i16* %3878, align 2, !tbaa !386
  %3880 = insertelement <64 x i16> %3875, i16 %3879, i32 10
  %3881 = extractelement <64 x i32> %3825, i32 11
  %3882 = sext i32 %3881 to i64
  %3883 = getelementptr inbounds i16, i16* %input286, i64 %3882
  %3884 = load i16, i16* %3883, align 2, !tbaa !386
  %3885 = insertelement <64 x i16> %3880, i16 %3884, i32 11
  %3886 = extractelement <64 x i32> %3825, i32 12
  %3887 = sext i32 %3886 to i64
  %3888 = getelementptr inbounds i16, i16* %input286, i64 %3887
  %3889 = load i16, i16* %3888, align 2, !tbaa !386
  %3890 = insertelement <64 x i16> %3885, i16 %3889, i32 12
  %3891 = extractelement <64 x i32> %3825, i32 13
  %3892 = sext i32 %3891 to i64
  %3893 = getelementptr inbounds i16, i16* %input286, i64 %3892
  %3894 = load i16, i16* %3893, align 2, !tbaa !386
  %3895 = insertelement <64 x i16> %3890, i16 %3894, i32 13
  %3896 = extractelement <64 x i32> %3825, i32 14
  %3897 = sext i32 %3896 to i64
  %3898 = getelementptr inbounds i16, i16* %input286, i64 %3897
  %3899 = load i16, i16* %3898, align 2, !tbaa !386
  %3900 = insertelement <64 x i16> %3895, i16 %3899, i32 14
  %3901 = extractelement <64 x i32> %3825, i32 15
  %3902 = sext i32 %3901 to i64
  %3903 = getelementptr inbounds i16, i16* %input286, i64 %3902
  %3904 = load i16, i16* %3903, align 2, !tbaa !386
  %3905 = insertelement <64 x i16> %3900, i16 %3904, i32 15
  %3906 = extractelement <64 x i32> %3825, i32 16
  %3907 = sext i32 %3906 to i64
  %3908 = getelementptr inbounds i16, i16* %input286, i64 %3907
  %3909 = load i16, i16* %3908, align 2, !tbaa !386
  %3910 = insertelement <64 x i16> %3905, i16 %3909, i32 16
  %3911 = extractelement <64 x i32> %3825, i32 17
  %3912 = sext i32 %3911 to i64
  %3913 = getelementptr inbounds i16, i16* %input286, i64 %3912
  %3914 = load i16, i16* %3913, align 2, !tbaa !386
  %3915 = insertelement <64 x i16> %3910, i16 %3914, i32 17
  %3916 = extractelement <64 x i32> %3825, i32 18
  %3917 = sext i32 %3916 to i64
  %3918 = getelementptr inbounds i16, i16* %input286, i64 %3917
  %3919 = load i16, i16* %3918, align 2, !tbaa !386
  %3920 = insertelement <64 x i16> %3915, i16 %3919, i32 18
  %3921 = extractelement <64 x i32> %3825, i32 19
  %3922 = sext i32 %3921 to i64
  %3923 = getelementptr inbounds i16, i16* %input286, i64 %3922
  %3924 = load i16, i16* %3923, align 2, !tbaa !386
  %3925 = insertelement <64 x i16> %3920, i16 %3924, i32 19
  %3926 = extractelement <64 x i32> %3825, i32 20
  %3927 = sext i32 %3926 to i64
  %3928 = getelementptr inbounds i16, i16* %input286, i64 %3927
  %3929 = load i16, i16* %3928, align 2, !tbaa !386
  %3930 = insertelement <64 x i16> %3925, i16 %3929, i32 20
  %3931 = extractelement <64 x i32> %3825, i32 21
  %3932 = sext i32 %3931 to i64
  %3933 = getelementptr inbounds i16, i16* %input286, i64 %3932
  %3934 = load i16, i16* %3933, align 2, !tbaa !386
  %3935 = insertelement <64 x i16> %3930, i16 %3934, i32 21
  %3936 = extractelement <64 x i32> %3825, i32 22
  %3937 = sext i32 %3936 to i64
  %3938 = getelementptr inbounds i16, i16* %input286, i64 %3937
  %3939 = load i16, i16* %3938, align 2, !tbaa !386
  %3940 = insertelement <64 x i16> %3935, i16 %3939, i32 22
  %3941 = extractelement <64 x i32> %3825, i32 23
  %3942 = sext i32 %3941 to i64
  %3943 = getelementptr inbounds i16, i16* %input286, i64 %3942
  %3944 = load i16, i16* %3943, align 2, !tbaa !386
  %3945 = insertelement <64 x i16> %3940, i16 %3944, i32 23
  %3946 = extractelement <64 x i32> %3825, i32 24
  %3947 = sext i32 %3946 to i64
  %3948 = getelementptr inbounds i16, i16* %input286, i64 %3947
  %3949 = load i16, i16* %3948, align 2, !tbaa !386
  %3950 = insertelement <64 x i16> %3945, i16 %3949, i32 24
  %3951 = extractelement <64 x i32> %3825, i32 25
  %3952 = sext i32 %3951 to i64
  %3953 = getelementptr inbounds i16, i16* %input286, i64 %3952
  %3954 = load i16, i16* %3953, align 2, !tbaa !386
  %3955 = insertelement <64 x i16> %3950, i16 %3954, i32 25
  %3956 = extractelement <64 x i32> %3825, i32 26
  %3957 = sext i32 %3956 to i64
  %3958 = getelementptr inbounds i16, i16* %input286, i64 %3957
  %3959 = load i16, i16* %3958, align 2, !tbaa !386
  %3960 = insertelement <64 x i16> %3955, i16 %3959, i32 26
  %3961 = extractelement <64 x i32> %3825, i32 27
  %3962 = sext i32 %3961 to i64
  %3963 = getelementptr inbounds i16, i16* %input286, i64 %3962
  %3964 = load i16, i16* %3963, align 2, !tbaa !386
  %3965 = insertelement <64 x i16> %3960, i16 %3964, i32 27
  %3966 = extractelement <64 x i32> %3825, i32 28
  %3967 = sext i32 %3966 to i64
  %3968 = getelementptr inbounds i16, i16* %input286, i64 %3967
  %3969 = load i16, i16* %3968, align 2, !tbaa !386
  %3970 = insertelement <64 x i16> %3965, i16 %3969, i32 28
  %3971 = extractelement <64 x i32> %3825, i32 29
  %3972 = sext i32 %3971 to i64
  %3973 = getelementptr inbounds i16, i16* %input286, i64 %3972
  %3974 = load i16, i16* %3973, align 2, !tbaa !386
  %3975 = insertelement <64 x i16> %3970, i16 %3974, i32 29
  %3976 = extractelement <64 x i32> %3825, i32 30
  %3977 = sext i32 %3976 to i64
  %3978 = getelementptr inbounds i16, i16* %input286, i64 %3977
  %3979 = load i16, i16* %3978, align 2, !tbaa !386
  %3980 = insertelement <64 x i16> %3975, i16 %3979, i32 30
  %3981 = extractelement <64 x i32> %3825, i32 31
  %3982 = sext i32 %3981 to i64
  %3983 = getelementptr inbounds i16, i16* %input286, i64 %3982
  %3984 = load i16, i16* %3983, align 2, !tbaa !386
  %3985 = insertelement <64 x i16> %3980, i16 %3984, i32 31
  %3986 = extractelement <64 x i32> %3825, i32 32
  %3987 = sext i32 %3986 to i64
  %3988 = getelementptr inbounds i16, i16* %input286, i64 %3987
  %3989 = load i16, i16* %3988, align 2, !tbaa !386
  %3990 = insertelement <64 x i16> %3985, i16 %3989, i32 32
  %3991 = extractelement <64 x i32> %3825, i32 33
  %3992 = sext i32 %3991 to i64
  %3993 = getelementptr inbounds i16, i16* %input286, i64 %3992
  %3994 = load i16, i16* %3993, align 2, !tbaa !386
  %3995 = insertelement <64 x i16> %3990, i16 %3994, i32 33
  %3996 = extractelement <64 x i32> %3825, i32 34
  %3997 = sext i32 %3996 to i64
  %3998 = getelementptr inbounds i16, i16* %input286, i64 %3997
  %3999 = load i16, i16* %3998, align 2, !tbaa !386
  %4000 = insertelement <64 x i16> %3995, i16 %3999, i32 34
  %4001 = extractelement <64 x i32> %3825, i32 35
  %4002 = sext i32 %4001 to i64
  %4003 = getelementptr inbounds i16, i16* %input286, i64 %4002
  %4004 = load i16, i16* %4003, align 2, !tbaa !386
  %4005 = insertelement <64 x i16> %4000, i16 %4004, i32 35
  %4006 = extractelement <64 x i32> %3825, i32 36
  %4007 = sext i32 %4006 to i64
  %4008 = getelementptr inbounds i16, i16* %input286, i64 %4007
  %4009 = load i16, i16* %4008, align 2, !tbaa !386
  %4010 = insertelement <64 x i16> %4005, i16 %4009, i32 36
  %4011 = extractelement <64 x i32> %3825, i32 37
  %4012 = sext i32 %4011 to i64
  %4013 = getelementptr inbounds i16, i16* %input286, i64 %4012
  %4014 = load i16, i16* %4013, align 2, !tbaa !386
  %4015 = insertelement <64 x i16> %4010, i16 %4014, i32 37
  %4016 = extractelement <64 x i32> %3825, i32 38
  %4017 = sext i32 %4016 to i64
  %4018 = getelementptr inbounds i16, i16* %input286, i64 %4017
  %4019 = load i16, i16* %4018, align 2, !tbaa !386
  %4020 = insertelement <64 x i16> %4015, i16 %4019, i32 38
  %4021 = extractelement <64 x i32> %3825, i32 39
  %4022 = sext i32 %4021 to i64
  %4023 = getelementptr inbounds i16, i16* %input286, i64 %4022
  %4024 = load i16, i16* %4023, align 2, !tbaa !386
  %4025 = insertelement <64 x i16> %4020, i16 %4024, i32 39
  %4026 = extractelement <64 x i32> %3825, i32 40
  %4027 = sext i32 %4026 to i64
  %4028 = getelementptr inbounds i16, i16* %input286, i64 %4027
  %4029 = load i16, i16* %4028, align 2, !tbaa !386
  %4030 = insertelement <64 x i16> %4025, i16 %4029, i32 40
  %4031 = extractelement <64 x i32> %3825, i32 41
  %4032 = sext i32 %4031 to i64
  %4033 = getelementptr inbounds i16, i16* %input286, i64 %4032
  %4034 = load i16, i16* %4033, align 2, !tbaa !386
  %4035 = insertelement <64 x i16> %4030, i16 %4034, i32 41
  %4036 = extractelement <64 x i32> %3825, i32 42
  %4037 = sext i32 %4036 to i64
  %4038 = getelementptr inbounds i16, i16* %input286, i64 %4037
  %4039 = load i16, i16* %4038, align 2, !tbaa !386
  %4040 = insertelement <64 x i16> %4035, i16 %4039, i32 42
  %4041 = extractelement <64 x i32> %3825, i32 43
  %4042 = sext i32 %4041 to i64
  %4043 = getelementptr inbounds i16, i16* %input286, i64 %4042
  %4044 = load i16, i16* %4043, align 2, !tbaa !386
  %4045 = insertelement <64 x i16> %4040, i16 %4044, i32 43
  %4046 = extractelement <64 x i32> %3825, i32 44
  %4047 = sext i32 %4046 to i64
  %4048 = getelementptr inbounds i16, i16* %input286, i64 %4047
  %4049 = load i16, i16* %4048, align 2, !tbaa !386
  %4050 = insertelement <64 x i16> %4045, i16 %4049, i32 44
  %4051 = extractelement <64 x i32> %3825, i32 45
  %4052 = sext i32 %4051 to i64
  %4053 = getelementptr inbounds i16, i16* %input286, i64 %4052
  %4054 = load i16, i16* %4053, align 2, !tbaa !386
  %4055 = insertelement <64 x i16> %4050, i16 %4054, i32 45
  %4056 = extractelement <64 x i32> %3825, i32 46
  %4057 = sext i32 %4056 to i64
  %4058 = getelementptr inbounds i16, i16* %input286, i64 %4057
  %4059 = load i16, i16* %4058, align 2, !tbaa !386
  %4060 = insertelement <64 x i16> %4055, i16 %4059, i32 46
  %4061 = extractelement <64 x i32> %3825, i32 47
  %4062 = sext i32 %4061 to i64
  %4063 = getelementptr inbounds i16, i16* %input286, i64 %4062
  %4064 = load i16, i16* %4063, align 2, !tbaa !386
  %4065 = insertelement <64 x i16> %4060, i16 %4064, i32 47
  %4066 = extractelement <64 x i32> %3825, i32 48
  %4067 = sext i32 %4066 to i64
  %4068 = getelementptr inbounds i16, i16* %input286, i64 %4067
  %4069 = load i16, i16* %4068, align 2, !tbaa !386
  %4070 = insertelement <64 x i16> %4065, i16 %4069, i32 48
  %4071 = extractelement <64 x i32> %3825, i32 49
  %4072 = sext i32 %4071 to i64
  %4073 = getelementptr inbounds i16, i16* %input286, i64 %4072
  %4074 = load i16, i16* %4073, align 2, !tbaa !386
  %4075 = insertelement <64 x i16> %4070, i16 %4074, i32 49
  %4076 = extractelement <64 x i32> %3825, i32 50
  %4077 = sext i32 %4076 to i64
  %4078 = getelementptr inbounds i16, i16* %input286, i64 %4077
  %4079 = load i16, i16* %4078, align 2, !tbaa !386
  %4080 = insertelement <64 x i16> %4075, i16 %4079, i32 50
  %4081 = extractelement <64 x i32> %3825, i32 51
  %4082 = sext i32 %4081 to i64
  %4083 = getelementptr inbounds i16, i16* %input286, i64 %4082
  %4084 = load i16, i16* %4083, align 2, !tbaa !386
  %4085 = insertelement <64 x i16> %4080, i16 %4084, i32 51
  %4086 = extractelement <64 x i32> %3825, i32 52
  %4087 = sext i32 %4086 to i64
  %4088 = getelementptr inbounds i16, i16* %input286, i64 %4087
  %4089 = load i16, i16* %4088, align 2, !tbaa !386
  %4090 = insertelement <64 x i16> %4085, i16 %4089, i32 52
  %4091 = extractelement <64 x i32> %3825, i32 53
  %4092 = sext i32 %4091 to i64
  %4093 = getelementptr inbounds i16, i16* %input286, i64 %4092
  %4094 = load i16, i16* %4093, align 2, !tbaa !386
  %4095 = insertelement <64 x i16> %4090, i16 %4094, i32 53
  %4096 = extractelement <64 x i32> %3825, i32 54
  %4097 = sext i32 %4096 to i64
  %4098 = getelementptr inbounds i16, i16* %input286, i64 %4097
  %4099 = load i16, i16* %4098, align 2, !tbaa !386
  %4100 = insertelement <64 x i16> %4095, i16 %4099, i32 54
  %4101 = extractelement <64 x i32> %3825, i32 55
  %4102 = sext i32 %4101 to i64
  %4103 = getelementptr inbounds i16, i16* %input286, i64 %4102
  %4104 = load i16, i16* %4103, align 2, !tbaa !386
  %4105 = insertelement <64 x i16> %4100, i16 %4104, i32 55
  %4106 = extractelement <64 x i32> %3825, i32 56
  %4107 = sext i32 %4106 to i64
  %4108 = getelementptr inbounds i16, i16* %input286, i64 %4107
  %4109 = load i16, i16* %4108, align 2, !tbaa !386
  %4110 = insertelement <64 x i16> %4105, i16 %4109, i32 56
  %4111 = extractelement <64 x i32> %3825, i32 57
  %4112 = sext i32 %4111 to i64
  %4113 = getelementptr inbounds i16, i16* %input286, i64 %4112
  %4114 = load i16, i16* %4113, align 2, !tbaa !386
  %4115 = insertelement <64 x i16> %4110, i16 %4114, i32 57
  %4116 = extractelement <64 x i32> %3825, i32 58
  %4117 = sext i32 %4116 to i64
  %4118 = getelementptr inbounds i16, i16* %input286, i64 %4117
  %4119 = load i16, i16* %4118, align 2, !tbaa !386
  %4120 = insertelement <64 x i16> %4115, i16 %4119, i32 58
  %4121 = extractelement <64 x i32> %3825, i32 59
  %4122 = sext i32 %4121 to i64
  %4123 = getelementptr inbounds i16, i16* %input286, i64 %4122
  %4124 = load i16, i16* %4123, align 2, !tbaa !386
  %4125 = insertelement <64 x i16> %4120, i16 %4124, i32 59
  %4126 = extractelement <64 x i32> %3825, i32 60
  %4127 = sext i32 %4126 to i64
  %4128 = getelementptr inbounds i16, i16* %input286, i64 %4127
  %4129 = load i16, i16* %4128, align 2, !tbaa !386
  %4130 = insertelement <64 x i16> %4125, i16 %4129, i32 60
  %4131 = extractelement <64 x i32> %3825, i32 61
  %4132 = sext i32 %4131 to i64
  %4133 = getelementptr inbounds i16, i16* %input286, i64 %4132
  %4134 = load i16, i16* %4133, align 2, !tbaa !386
  %4135 = insertelement <64 x i16> %4130, i16 %4134, i32 61
  %4136 = extractelement <64 x i32> %3825, i32 62
  %4137 = sext i32 %4136 to i64
  %4138 = getelementptr inbounds i16, i16* %input286, i64 %4137
  %4139 = load i16, i16* %4138, align 2, !tbaa !386
  %4140 = insertelement <64 x i16> %4135, i16 %4139, i32 62
  %4141 = extractelement <64 x i32> %3825, i32 63
  %4142 = sext i32 %4141 to i64
  %4143 = getelementptr inbounds i16, i16* %input286, i64 %4142
  %4144 = load i16, i16* %4143, align 2, !tbaa !386
  %4145 = insertelement <64 x i16> %4140, i16 %4144, i32 63
  %4146 = add <64 x i16> %2966, %2573
  %4147 = add <64 x i16> %4146, %3359
  %4148 = add <64 x i16> %4147, %3752
  %4149 = add <64 x i16> %4148, %4145
  %4150 = shufflevector <64 x i16> %4149, <64 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4151 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %4150, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4152 = shufflevector <64 x i16> %4149, <64 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4153 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %4152, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4154 = shufflevector <64 x i16> %4149, <64 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %4155 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %4154, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4156 = shufflevector <64 x i16> %4149, <64 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %4157 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %4156, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4158 = shufflevector <64 x i16> %4149, <64 x i16> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %4159 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %4158, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4160 = shufflevector <64 x i16> %4149, <64 x i16> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %4161 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %4160, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4162 = shufflevector <64 x i16> %4149, <64 x i16> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %4163 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %4162, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4164 = shufflevector <64 x i16> %4149, <64 x i16> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %4165 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %4164, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4166 = shufflevector <64 x i16> %4149, <64 x i16> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %4167 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %4166, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4168 = shufflevector <64 x i16> %4149, <64 x i16> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %4169 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %4168, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4170 = shufflevector <64 x i16> %4149, <64 x i16> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %4171 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %4170, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4172 = shufflevector <64 x i16> %4149, <64 x i16> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %4173 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %4172, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4174 = shufflevector <64 x i16> %4149, <64 x i16> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %4175 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %4174, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4176 = shufflevector <64 x i16> %4149, <64 x i16> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %4177 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %4176, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4178 = shufflevector <64 x i16> %4149, <64 x i16> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %4179 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %4178, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4180 = shufflevector <64 x i16> %4149, <64 x i16> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %4181 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %4180, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4182 = shufflevector <4 x i32> %4151, <4 x i32> %4153, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4183 = shufflevector <4 x i32> %4155, <4 x i32> %4157, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4184 = shufflevector <4 x i32> %4159, <4 x i32> %4161, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4185 = shufflevector <4 x i32> %4163, <4 x i32> %4165, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4186 = shufflevector <4 x i32> %4167, <4 x i32> %4169, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4187 = shufflevector <4 x i32> %4171, <4 x i32> %4173, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4188 = shufflevector <4 x i32> %4175, <4 x i32> %4177, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4189 = shufflevector <4 x i32> %4179, <4 x i32> %4181, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4190 = shufflevector <8 x i32> %4182, <8 x i32> %4183, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4191 = shufflevector <8 x i32> %4184, <8 x i32> %4185, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4192 = shufflevector <8 x i32> %4186, <8 x i32> %4187, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4193 = shufflevector <8 x i32> %4188, <8 x i32> %4189, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4194 = shufflevector <16 x i32> %4190, <16 x i32> %4191, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4195 = shufflevector <16 x i32> %4192, <16 x i32> %4193, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4196 = shufflevector <32 x i32> %4194, <32 x i32> %4195, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %4197 = lshr <64 x i32> %4196, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %4198 = trunc <64 x i32> %4197 to <64 x i16>
  %4199 = shufflevector <64 x i16> %4198, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4200 = sext i32 %blur_x.s0.x.v2.base.s7 to i64
  %4201 = add nsw i64 %4200, %2176
  %4202 = getelementptr inbounds i16, i16* %blur_x, i64 %4201
  %4203 = bitcast i16* %4202 to <8 x i16>*
  store <8 x i16> %4199, <8 x i16>* %4203, align 2, !tbaa !389
  %4204 = shufflevector <64 x i16> %4198, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4205 = getelementptr inbounds i16, i16* %4202, i64 8
  %4206 = bitcast i16* %4205 to <8 x i16>*
  store <8 x i16> %4204, <8 x i16>* %4206, align 2, !tbaa !389
  %4207 = shufflevector <64 x i16> %4198, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %4208 = getelementptr inbounds i16, i16* %4202, i64 16
  %4209 = bitcast i16* %4208 to <8 x i16>*
  store <8 x i16> %4207, <8 x i16>* %4209, align 2, !tbaa !389
  %4210 = shufflevector <64 x i16> %4198, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4211 = getelementptr inbounds i16, i16* %4202, i64 24
  %4212 = bitcast i16* %4211 to <8 x i16>*
  store <8 x i16> %4210, <8 x i16>* %4212, align 2, !tbaa !389
  %4213 = shufflevector <64 x i16> %4198, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %4214 = getelementptr inbounds i16, i16* %4202, i64 32
  %4215 = bitcast i16* %4214 to <8 x i16>*
  store <8 x i16> %4213, <8 x i16>* %4215, align 2, !tbaa !389
  %4216 = shufflevector <64 x i16> %4198, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %4217 = getelementptr inbounds i16, i16* %4202, i64 40
  %4218 = bitcast i16* %4217 to <8 x i16>*
  store <8 x i16> %4216, <8 x i16>* %4218, align 2, !tbaa !389
  %4219 = shufflevector <64 x i16> %4198, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %4220 = getelementptr inbounds i16, i16* %4202, i64 48
  %4221 = bitcast i16* %4220 to <8 x i16>*
  store <8 x i16> %4219, <8 x i16>* %4221, align 2, !tbaa !389
  %4222 = shufflevector <64 x i16> %4198, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %4223 = getelementptr inbounds i16, i16* %4202, i64 56
  %4224 = bitcast i16* %4223 to <8 x i16>*
  store <8 x i16> %4222, <8 x i16>* %4224, align 2, !tbaa !389
  %4225 = add nuw nsw i32 %blur_x.s0.x.x6, 1
  %.not222 = icmp eq i32 %4225, %t313
  br i1 %.not222, label %"end for blur_x.s0.x.x5", label %"for blur_x.s0.x.x4"

"end for blur_x.s0.x.x5":                         ; preds = %"for blur_x.s0.x.x4", %"for blur_x.s0.y.rebased1"
  br i1 %57, label %"for blur_x.s0.x.x.rebased.preheader", label %"end for blur_x.s0.x.x.rebased", !prof !385

"for blur_x.s0.x.x.rebased.preheader":            ; preds = %"end for blur_x.s0.x.x5"
  %4226 = sext i32 %t335 to i64
  %indvars.iv.next.0 = add nuw nsw i64 0, 1
  br label %"for blur_x.s0.x.x.rebased"

"for blur_x.s0.x.x.rebased":                      ; preds = %"for blur_x.s0.x.x.rebased.for blur_x.s0.x.x.rebased_crit_edge", %"for blur_x.s0.x.x.rebased.preheader"
  %indvars.iv.next.phi = phi i64 [ %indvars.iv.next.0, %"for blur_x.s0.x.x.rebased.preheader" ], [ %indvars.iv.next.1, %"for blur_x.s0.x.x.rebased.for blur_x.s0.x.x.rebased_crit_edge" ]
  %blur_x.s0.x.x.rebased = phi i32 [ 0, %"for blur_x.s0.x.x.rebased.preheader" ], [ %4461, %"for blur_x.s0.x.x.rebased.for blur_x.s0.x.x.rebased_crit_edge" ]
  %4227 = add nsw i32 %blur_x.s0.x.x.rebased, %t313
  %4228 = shl nsw i32 %4227, 6
  %blur_x.s0.x.v2.base.s8 = add nsw i32 %4228, %t293
  %t275 = add nsw i32 %blur_x.s0.x.v2.base.s8, %t334
  %4229 = sext i32 %t275 to i64
  %4230 = getelementptr inbounds i16, i16* %input286, i64 %4229
  %4231 = getelementptr inbounds i16, i16* %4230, i64 -63
  %4232 = bitcast i16* %4231 to <8 x i16>*
  %4233 = load <8 x i16>, <8 x i16>* %4232, align 2, !tbaa !386
  %4234 = getelementptr inbounds i16, i16* %4230, i64 -55
  %4235 = bitcast i16* %4234 to <8 x i16>*
  %4236 = load <8 x i16>, <8 x i16>* %4235, align 2, !tbaa !386
  %4237 = getelementptr inbounds i16, i16* %4230, i64 -47
  %4238 = bitcast i16* %4237 to <8 x i16>*
  %4239 = load <8 x i16>, <8 x i16>* %4238, align 2, !tbaa !386
  %4240 = getelementptr inbounds i16, i16* %4230, i64 -39
  %4241 = bitcast i16* %4240 to <8 x i16>*
  %4242 = load <8 x i16>, <8 x i16>* %4241, align 2, !tbaa !386
  %4243 = getelementptr inbounds i16, i16* %4230, i64 -31
  %4244 = bitcast i16* %4243 to <8 x i16>*
  %4245 = load <8 x i16>, <8 x i16>* %4244, align 2, !tbaa !386
  %4246 = getelementptr inbounds i16, i16* %4230, i64 -23
  %4247 = bitcast i16* %4246 to <8 x i16>*
  %4248 = load <8 x i16>, <8 x i16>* %4247, align 2, !tbaa !386
  %4249 = getelementptr inbounds i16, i16* %4230, i64 -15
  %4250 = bitcast i16* %4249 to <8 x i16>*
  %4251 = load <8 x i16>, <8 x i16>* %4250, align 2, !tbaa !386
  %4252 = getelementptr inbounds i16, i16* %4230, i64 -7
  %4253 = bitcast i16* %4252 to <8 x i16>*
  %4254 = load <8 x i16>, <8 x i16>* %4253, align 2, !tbaa !386
  %4255 = getelementptr inbounds i16, i16* %4230, i64 -64
  %4256 = bitcast i16* %4255 to <8 x i16>*
  %4257 = load <8 x i16>, <8 x i16>* %4256, align 2, !tbaa !386
  %4258 = getelementptr inbounds i16, i16* %4230, i64 -56
  %4259 = bitcast i16* %4258 to <8 x i16>*
  %4260 = load <8 x i16>, <8 x i16>* %4259, align 2, !tbaa !386
  %4261 = getelementptr inbounds i16, i16* %4230, i64 -48
  %4262 = bitcast i16* %4261 to <8 x i16>*
  %4263 = load <8 x i16>, <8 x i16>* %4262, align 2, !tbaa !386
  %4264 = getelementptr inbounds i16, i16* %4230, i64 -40
  %4265 = bitcast i16* %4264 to <8 x i16>*
  %4266 = load <8 x i16>, <8 x i16>* %4265, align 2, !tbaa !386
  %4267 = getelementptr inbounds i16, i16* %4230, i64 -32
  %4268 = bitcast i16* %4267 to <8 x i16>*
  %4269 = load <8 x i16>, <8 x i16>* %4268, align 2, !tbaa !386
  %4270 = getelementptr inbounds i16, i16* %4230, i64 -24
  %4271 = bitcast i16* %4270 to <8 x i16>*
  %4272 = load <8 x i16>, <8 x i16>* %4271, align 2, !tbaa !386
  %4273 = getelementptr inbounds i16, i16* %4230, i64 -16
  %4274 = bitcast i16* %4273 to <8 x i16>*
  %4275 = load <8 x i16>, <8 x i16>* %4274, align 2, !tbaa !386
  %4276 = getelementptr inbounds i16, i16* %4230, i64 -8
  %4277 = bitcast i16* %4276 to <8 x i16>*
  %4278 = load <8 x i16>, <8 x i16>* %4277, align 2, !tbaa !386
  %4279 = getelementptr inbounds i16, i16* %4230, i64 -62
  %4280 = bitcast i16* %4279 to <8 x i16>*
  %4281 = load <8 x i16>, <8 x i16>* %4280, align 2, !tbaa !386
  %4282 = getelementptr inbounds i16, i16* %4230, i64 -54
  %4283 = bitcast i16* %4282 to <8 x i16>*
  %4284 = load <8 x i16>, <8 x i16>* %4283, align 2, !tbaa !386
  %4285 = getelementptr inbounds i16, i16* %4230, i64 -46
  %4286 = bitcast i16* %4285 to <8 x i16>*
  %4287 = load <8 x i16>, <8 x i16>* %4286, align 2, !tbaa !386
  %4288 = getelementptr inbounds i16, i16* %4230, i64 -38
  %4289 = bitcast i16* %4288 to <8 x i16>*
  %4290 = load <8 x i16>, <8 x i16>* %4289, align 2, !tbaa !386
  %4291 = getelementptr inbounds i16, i16* %4230, i64 -30
  %4292 = bitcast i16* %4291 to <8 x i16>*
  %4293 = load <8 x i16>, <8 x i16>* %4292, align 2, !tbaa !386
  %4294 = getelementptr inbounds i16, i16* %4230, i64 -22
  %4295 = bitcast i16* %4294 to <8 x i16>*
  %4296 = load <8 x i16>, <8 x i16>* %4295, align 2, !tbaa !386
  %4297 = getelementptr inbounds i16, i16* %4230, i64 -14
  %4298 = bitcast i16* %4297 to <8 x i16>*
  %4299 = load <8 x i16>, <8 x i16>* %4298, align 2, !tbaa !386
  %4300 = getelementptr inbounds i16, i16* %4230, i64 -6
  %4301 = bitcast i16* %4300 to <8 x i16>*
  %4302 = load <8 x i16>, <8 x i16>* %4301, align 2, !tbaa !386
  %4303 = getelementptr inbounds i16, i16* %4230, i64 -60
  %4304 = bitcast i16* %4303 to <8 x i16>*
  %4305 = load <8 x i16>, <8 x i16>* %4304, align 2, !tbaa !386
  %4306 = getelementptr inbounds i16, i16* %4230, i64 -52
  %4307 = bitcast i16* %4306 to <8 x i16>*
  %4308 = load <8 x i16>, <8 x i16>* %4307, align 2, !tbaa !386
  %4309 = getelementptr inbounds i16, i16* %4230, i64 -44
  %4310 = bitcast i16* %4309 to <8 x i16>*
  %4311 = load <8 x i16>, <8 x i16>* %4310, align 2, !tbaa !386
  %4312 = getelementptr inbounds i16, i16* %4230, i64 -36
  %4313 = bitcast i16* %4312 to <8 x i16>*
  %4314 = load <8 x i16>, <8 x i16>* %4313, align 2, !tbaa !386
  %4315 = getelementptr inbounds i16, i16* %4230, i64 -28
  %4316 = bitcast i16* %4315 to <8 x i16>*
  %4317 = load <8 x i16>, <8 x i16>* %4316, align 2, !tbaa !386
  %4318 = getelementptr inbounds i16, i16* %4230, i64 -20
  %4319 = bitcast i16* %4318 to <8 x i16>*
  %4320 = load <8 x i16>, <8 x i16>* %4319, align 2, !tbaa !386
  %4321 = getelementptr inbounds i16, i16* %4230, i64 -12
  %4322 = bitcast i16* %4321 to <8 x i16>*
  %4323 = load <8 x i16>, <8 x i16>* %4322, align 2, !tbaa !386
  %4324 = getelementptr inbounds i16, i16* %4230, i64 -4
  %4325 = bitcast i16* %4324 to <8 x i16>*
  %4326 = load <8 x i16>, <8 x i16>* %4325, align 2, !tbaa !386
  %4327 = getelementptr inbounds i16, i16* %4230, i64 -61
  %4328 = bitcast i16* %4327 to <8 x i16>*
  %4329 = load <8 x i16>, <8 x i16>* %4328, align 2, !tbaa !386
  %4330 = getelementptr inbounds i16, i16* %4230, i64 -53
  %4331 = bitcast i16* %4330 to <8 x i16>*
  %4332 = load <8 x i16>, <8 x i16>* %4331, align 2, !tbaa !386
  %4333 = getelementptr inbounds i16, i16* %4230, i64 -45
  %4334 = bitcast i16* %4333 to <8 x i16>*
  %4335 = load <8 x i16>, <8 x i16>* %4334, align 2, !tbaa !386
  %4336 = getelementptr inbounds i16, i16* %4230, i64 -37
  %4337 = bitcast i16* %4336 to <8 x i16>*
  %4338 = load <8 x i16>, <8 x i16>* %4337, align 2, !tbaa !386
  %4339 = getelementptr inbounds i16, i16* %4230, i64 -29
  %4340 = bitcast i16* %4339 to <8 x i16>*
  %4341 = load <8 x i16>, <8 x i16>* %4340, align 2, !tbaa !386
  %4342 = getelementptr inbounds i16, i16* %4230, i64 -21
  %4343 = bitcast i16* %4342 to <8 x i16>*
  %4344 = load <8 x i16>, <8 x i16>* %4343, align 2, !tbaa !386
  %4345 = getelementptr inbounds i16, i16* %4230, i64 -13
  %4346 = bitcast i16* %4345 to <8 x i16>*
  %4347 = load <8 x i16>, <8 x i16>* %4346, align 2, !tbaa !386
  %4348 = getelementptr inbounds i16, i16* %4230, i64 -5
  %4349 = bitcast i16* %4348 to <8 x i16>*
  %4350 = load <8 x i16>, <8 x i16>* %4349, align 2, !tbaa !386
  %4351 = add <8 x i16> %4257, %4233
  %4352 = add <8 x i16> %4351, %4281
  %4353 = add <8 x i16> %4352, %4305
  %4354 = add <8 x i16> %4353, %4329
  %4355 = add <8 x i16> %4260, %4236
  %4356 = add <8 x i16> %4355, %4284
  %4357 = add <8 x i16> %4356, %4308
  %4358 = add <8 x i16> %4357, %4332
  %4359 = add <8 x i16> %4263, %4239
  %4360 = add <8 x i16> %4359, %4287
  %4361 = add <8 x i16> %4360, %4311
  %4362 = add <8 x i16> %4361, %4335
  %4363 = add <8 x i16> %4266, %4242
  %4364 = add <8 x i16> %4363, %4290
  %4365 = add <8 x i16> %4364, %4314
  %4366 = add <8 x i16> %4365, %4338
  %4367 = add <8 x i16> %4269, %4245
  %4368 = add <8 x i16> %4367, %4293
  %4369 = add <8 x i16> %4368, %4317
  %4370 = add <8 x i16> %4369, %4341
  %4371 = add <8 x i16> %4272, %4248
  %4372 = add <8 x i16> %4371, %4296
  %4373 = add <8 x i16> %4372, %4320
  %4374 = add <8 x i16> %4373, %4344
  %4375 = add <8 x i16> %4275, %4251
  %4376 = add <8 x i16> %4375, %4299
  %4377 = add <8 x i16> %4376, %4323
  %4378 = add <8 x i16> %4377, %4347
  %4379 = add <8 x i16> %4278, %4254
  %4380 = add <8 x i16> %4379, %4302
  %4381 = add <8 x i16> %4380, %4326
  %4382 = add <8 x i16> %4381, %4350
  %4383 = shufflevector <8 x i16> %4382, <8 x i16> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %4384 = shufflevector <16 x i16> %4383, <16 x i16> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %4385 = shufflevector <32 x i16> %4384, <32 x i16> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %4386 = shufflevector <8 x i16> %4354, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4387 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %4386, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4388 = shufflevector <8 x i16> %4354, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4389 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %4388, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4390 = shufflevector <8 x i16> %4358, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4391 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %4390, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4392 = shufflevector <8 x i16> %4358, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4393 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %4392, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4394 = shufflevector <8 x i16> %4362, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4395 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %4394, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4396 = shufflevector <8 x i16> %4362, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4397 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %4396, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4398 = shufflevector <8 x i16> %4366, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4399 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %4398, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4400 = shufflevector <8 x i16> %4366, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4401 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %4400, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4402 = shufflevector <8 x i16> %4370, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4403 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %4402, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4404 = shufflevector <8 x i16> %4370, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4405 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %4404, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4406 = shufflevector <8 x i16> %4374, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4407 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %4406, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4408 = shufflevector <8 x i16> %4374, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4409 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %4408, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4410 = shufflevector <8 x i16> %4378, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4411 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %4410, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4412 = shufflevector <8 x i16> %4378, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4413 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %4412, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4414 = shufflevector <8 x i16> %4382, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4415 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %4414, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4416 = shufflevector <64 x i16> %4385, <64 x i16> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %4417 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %4416, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4418 = shufflevector <4 x i32> %4387, <4 x i32> %4389, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4419 = shufflevector <4 x i32> %4391, <4 x i32> %4393, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4420 = shufflevector <4 x i32> %4395, <4 x i32> %4397, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4421 = shufflevector <4 x i32> %4399, <4 x i32> %4401, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4422 = shufflevector <4 x i32> %4403, <4 x i32> %4405, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4423 = shufflevector <4 x i32> %4407, <4 x i32> %4409, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4424 = shufflevector <4 x i32> %4411, <4 x i32> %4413, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4425 = shufflevector <4 x i32> %4415, <4 x i32> %4417, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4426 = shufflevector <8 x i32> %4418, <8 x i32> %4419, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4427 = shufflevector <8 x i32> %4420, <8 x i32> %4421, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4428 = shufflevector <8 x i32> %4422, <8 x i32> %4423, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4429 = shufflevector <8 x i32> %4424, <8 x i32> %4425, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4430 = shufflevector <16 x i32> %4426, <16 x i32> %4427, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4431 = shufflevector <16 x i32> %4428, <16 x i32> %4429, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4432 = shufflevector <32 x i32> %4430, <32 x i32> %4431, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %4433 = lshr <64 x i32> %4432, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %4434 = trunc <64 x i32> %4433 to <64 x i16>
  %4435 = shufflevector <64 x i16> %4434, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4436 = sext i32 %blur_x.s0.x.v2.base.s8 to i64
  %4437 = add nsw i64 %4436, %4226
  %4438 = getelementptr inbounds i16, i16* %blur_x, i64 %4437
  %4439 = bitcast i16* %4438 to <8 x i16>*
  store <8 x i16> %4435, <8 x i16>* %4439, align 2, !tbaa !389
  %4440 = shufflevector <64 x i16> %4434, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4441 = getelementptr inbounds i16, i16* %4438, i64 8
  %4442 = bitcast i16* %4441 to <8 x i16>*
  store <8 x i16> %4440, <8 x i16>* %4442, align 2, !tbaa !389
  %4443 = shufflevector <64 x i16> %4434, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %4444 = getelementptr inbounds i16, i16* %4438, i64 16
  %4445 = bitcast i16* %4444 to <8 x i16>*
  store <8 x i16> %4443, <8 x i16>* %4445, align 2, !tbaa !389
  %4446 = shufflevector <64 x i16> %4434, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4447 = getelementptr inbounds i16, i16* %4438, i64 24
  %4448 = bitcast i16* %4447 to <8 x i16>*
  store <8 x i16> %4446, <8 x i16>* %4448, align 2, !tbaa !389
  %4449 = shufflevector <64 x i16> %4434, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %4450 = getelementptr inbounds i16, i16* %4438, i64 32
  %4451 = bitcast i16* %4450 to <8 x i16>*
  store <8 x i16> %4449, <8 x i16>* %4451, align 2, !tbaa !389
  %4452 = shufflevector <64 x i16> %4434, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %4453 = getelementptr inbounds i16, i16* %4438, i64 40
  %4454 = bitcast i16* %4453 to <8 x i16>*
  store <8 x i16> %4452, <8 x i16>* %4454, align 2, !tbaa !389
  %4455 = shufflevector <64 x i16> %4434, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %4456 = getelementptr inbounds i16, i16* %4438, i64 48
  %4457 = bitcast i16* %4456 to <8 x i16>*
  store <8 x i16> %4455, <8 x i16>* %4457, align 2, !tbaa !389
  %4458 = shufflevector <64 x i16> %4434, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %4459 = getelementptr inbounds i16, i16* %4438, i64 56
  %4460 = bitcast i16* %4459 to <8 x i16>*
  store <8 x i16> %4458, <8 x i16>* %4460, align 2, !tbaa !389
  %4461 = add nuw nsw i32 %blur_x.s0.x.x.rebased, 1
  %.not221 = icmp eq i64 %indvars.iv.next.phi, %65
  br i1 %.not221, label %"end for blur_x.s0.x.x.rebased", label %"for blur_x.s0.x.x.rebased.for blur_x.s0.x.x.rebased_crit_edge"

"for blur_x.s0.x.x.rebased.for blur_x.s0.x.x.rebased_crit_edge": ; preds = %"for blur_x.s0.x.x.rebased"
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv.next.phi, 1
  br label %"for blur_x.s0.x.x.rebased"

"end for blur_x.s0.x.x.rebased":                  ; preds = %"for blur_x.s0.x.x.rebased", %"end for blur_x.s0.x.x5"
  br i1 %58, label %"for blur_x.s0.x.x.rebased9.preheader", label %"end for blur_x.s0.x.x.rebased10", !prof !385

"for blur_x.s0.x.x.rebased9.preheader":           ; preds = %"end for blur_x.s0.x.x.rebased"
  %4462 = insertelement <64 x i32> undef, i32 %t334, i32 0
  %t276 = shufflevector <64 x i32> %4462, <64 x i32> undef, <64 x i32> zeroinitializer
  %4463 = sext i32 %t335 to i64
  br label %"for blur_x.s0.x.x.rebased9"

"for blur_x.s0.x.x.rebased9":                     ; preds = %"for blur_x.s0.x.x.rebased9.preheader", %"for blur_x.s0.x.x.rebased9"
  %blur_x.s0.x.x.rebased11 = phi i32 [ %6511, %"for blur_x.s0.x.x.rebased9" ], [ 0, %"for blur_x.s0.x.x.rebased9.preheader" ]
  %4464 = add nsw i32 %blur_x.s0.x.x.rebased11, %t298
  %4465 = shl nsw i32 %4464, 6
  %a19 = add nsw i32 %4465, %t293
  %4466 = icmp slt i32 %a19, %b25
  %blur_x.s0.x.v2.base.s12 = select i1 %4466, i32 %a19, i32 %b25
  %4467 = add nsw i32 %blur_x.s0.x.v2.base.s12, -63
  %4468 = insertelement <64 x i32> undef, i32 %4467, i32 0
  %4469 = shufflevector <64 x i32> %4468, <64 x i32> undef, <64 x i32> zeroinitializer
  %4470 = add nsw <64 x i32> %4469, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %4471 = shufflevector <64 x i32> %4470, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4472 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4471, <4 x i32> %53)
  %4473 = shufflevector <64 x i32> %4470, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4474 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4473, <4 x i32> %53)
  %4475 = shufflevector <64 x i32> %4470, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %4476 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4475, <4 x i32> %53)
  %4477 = shufflevector <64 x i32> %4470, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %4478 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4477, <4 x i32> %53)
  %4479 = shufflevector <64 x i32> %4470, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %4480 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4479, <4 x i32> %53)
  %4481 = shufflevector <64 x i32> %4470, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %4482 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4481, <4 x i32> %53)
  %4483 = shufflevector <64 x i32> %4470, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %4484 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4483, <4 x i32> %53)
  %4485 = shufflevector <64 x i32> %4470, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %4486 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4485, <4 x i32> %53)
  %4487 = shufflevector <64 x i32> %4470, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %4488 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4487, <4 x i32> %53)
  %4489 = shufflevector <64 x i32> %4470, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %4490 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4489, <4 x i32> %53)
  %4491 = shufflevector <64 x i32> %4470, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %4492 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4491, <4 x i32> %53)
  %4493 = shufflevector <64 x i32> %4470, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %4494 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4493, <4 x i32> %53)
  %4495 = shufflevector <64 x i32> %4470, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %4496 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4495, <4 x i32> %53)
  %4497 = shufflevector <64 x i32> %4470, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %4498 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4497, <4 x i32> %53)
  %4499 = shufflevector <64 x i32> %4470, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %4500 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4499, <4 x i32> %53)
  %4501 = shufflevector <64 x i32> %4470, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %4502 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4501, <4 x i32> %53)
  %4503 = shufflevector <4 x i32> %4502, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %4504 = shufflevector <8 x i32> %4503, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %4505 = shufflevector <16 x i32> %4504, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %4506 = shufflevector <32 x i32> %4505, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %4507 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4472, <4 x i32> %55)
  %4508 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4474, <4 x i32> %55)
  %4509 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4476, <4 x i32> %55)
  %4510 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4478, <4 x i32> %55)
  %4511 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4480, <4 x i32> %55)
  %4512 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4482, <4 x i32> %55)
  %4513 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4484, <4 x i32> %55)
  %4514 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4486, <4 x i32> %55)
  %4515 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4488, <4 x i32> %55)
  %4516 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4490, <4 x i32> %55)
  %4517 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4492, <4 x i32> %55)
  %4518 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4494, <4 x i32> %55)
  %4519 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4496, <4 x i32> %55)
  %4520 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4498, <4 x i32> %55)
  %4521 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4500, <4 x i32> %55)
  %4522 = shufflevector <64 x i32> %4506, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %4523 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4522, <4 x i32> %55)
  %4524 = shufflevector <4 x i32> %4507, <4 x i32> %4508, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4525 = shufflevector <4 x i32> %4509, <4 x i32> %4510, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4526 = shufflevector <4 x i32> %4511, <4 x i32> %4512, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4527 = shufflevector <4 x i32> %4513, <4 x i32> %4514, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4528 = shufflevector <4 x i32> %4515, <4 x i32> %4516, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4529 = shufflevector <4 x i32> %4517, <4 x i32> %4518, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4530 = shufflevector <4 x i32> %4519, <4 x i32> %4520, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4531 = shufflevector <4 x i32> %4521, <4 x i32> %4523, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4532 = shufflevector <8 x i32> %4524, <8 x i32> %4525, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4533 = shufflevector <8 x i32> %4526, <8 x i32> %4527, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4534 = shufflevector <8 x i32> %4528, <8 x i32> %4529, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4535 = shufflevector <8 x i32> %4530, <8 x i32> %4531, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4536 = shufflevector <16 x i32> %4532, <16 x i32> %4533, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4537 = shufflevector <16 x i32> %4534, <16 x i32> %4535, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4538 = shufflevector <32 x i32> %4536, <32 x i32> %4537, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %4539 = add nsw <64 x i32> %4538, %t276
  %4540 = extractelement <64 x i32> %4539, i32 0
  %4541 = sext i32 %4540 to i64
  %4542 = getelementptr inbounds i16, i16* %input286, i64 %4541
  %4543 = load i16, i16* %4542, align 2, !tbaa !386
  %4544 = insertelement <64 x i16> undef, i16 %4543, i32 0
  %4545 = extractelement <64 x i32> %4539, i32 1
  %4546 = sext i32 %4545 to i64
  %4547 = getelementptr inbounds i16, i16* %input286, i64 %4546
  %4548 = load i16, i16* %4547, align 2, !tbaa !386
  %4549 = insertelement <64 x i16> %4544, i16 %4548, i32 1
  %4550 = extractelement <64 x i32> %4539, i32 2
  %4551 = sext i32 %4550 to i64
  %4552 = getelementptr inbounds i16, i16* %input286, i64 %4551
  %4553 = load i16, i16* %4552, align 2, !tbaa !386
  %4554 = insertelement <64 x i16> %4549, i16 %4553, i32 2
  %4555 = extractelement <64 x i32> %4539, i32 3
  %4556 = sext i32 %4555 to i64
  %4557 = getelementptr inbounds i16, i16* %input286, i64 %4556
  %4558 = load i16, i16* %4557, align 2, !tbaa !386
  %4559 = insertelement <64 x i16> %4554, i16 %4558, i32 3
  %4560 = extractelement <64 x i32> %4539, i32 4
  %4561 = sext i32 %4560 to i64
  %4562 = getelementptr inbounds i16, i16* %input286, i64 %4561
  %4563 = load i16, i16* %4562, align 2, !tbaa !386
  %4564 = insertelement <64 x i16> %4559, i16 %4563, i32 4
  %4565 = extractelement <64 x i32> %4539, i32 5
  %4566 = sext i32 %4565 to i64
  %4567 = getelementptr inbounds i16, i16* %input286, i64 %4566
  %4568 = load i16, i16* %4567, align 2, !tbaa !386
  %4569 = insertelement <64 x i16> %4564, i16 %4568, i32 5
  %4570 = extractelement <64 x i32> %4539, i32 6
  %4571 = sext i32 %4570 to i64
  %4572 = getelementptr inbounds i16, i16* %input286, i64 %4571
  %4573 = load i16, i16* %4572, align 2, !tbaa !386
  %4574 = insertelement <64 x i16> %4569, i16 %4573, i32 6
  %4575 = extractelement <64 x i32> %4539, i32 7
  %4576 = sext i32 %4575 to i64
  %4577 = getelementptr inbounds i16, i16* %input286, i64 %4576
  %4578 = load i16, i16* %4577, align 2, !tbaa !386
  %4579 = insertelement <64 x i16> %4574, i16 %4578, i32 7
  %4580 = extractelement <64 x i32> %4539, i32 8
  %4581 = sext i32 %4580 to i64
  %4582 = getelementptr inbounds i16, i16* %input286, i64 %4581
  %4583 = load i16, i16* %4582, align 2, !tbaa !386
  %4584 = insertelement <64 x i16> %4579, i16 %4583, i32 8
  %4585 = extractelement <64 x i32> %4539, i32 9
  %4586 = sext i32 %4585 to i64
  %4587 = getelementptr inbounds i16, i16* %input286, i64 %4586
  %4588 = load i16, i16* %4587, align 2, !tbaa !386
  %4589 = insertelement <64 x i16> %4584, i16 %4588, i32 9
  %4590 = extractelement <64 x i32> %4539, i32 10
  %4591 = sext i32 %4590 to i64
  %4592 = getelementptr inbounds i16, i16* %input286, i64 %4591
  %4593 = load i16, i16* %4592, align 2, !tbaa !386
  %4594 = insertelement <64 x i16> %4589, i16 %4593, i32 10
  %4595 = extractelement <64 x i32> %4539, i32 11
  %4596 = sext i32 %4595 to i64
  %4597 = getelementptr inbounds i16, i16* %input286, i64 %4596
  %4598 = load i16, i16* %4597, align 2, !tbaa !386
  %4599 = insertelement <64 x i16> %4594, i16 %4598, i32 11
  %4600 = extractelement <64 x i32> %4539, i32 12
  %4601 = sext i32 %4600 to i64
  %4602 = getelementptr inbounds i16, i16* %input286, i64 %4601
  %4603 = load i16, i16* %4602, align 2, !tbaa !386
  %4604 = insertelement <64 x i16> %4599, i16 %4603, i32 12
  %4605 = extractelement <64 x i32> %4539, i32 13
  %4606 = sext i32 %4605 to i64
  %4607 = getelementptr inbounds i16, i16* %input286, i64 %4606
  %4608 = load i16, i16* %4607, align 2, !tbaa !386
  %4609 = insertelement <64 x i16> %4604, i16 %4608, i32 13
  %4610 = extractelement <64 x i32> %4539, i32 14
  %4611 = sext i32 %4610 to i64
  %4612 = getelementptr inbounds i16, i16* %input286, i64 %4611
  %4613 = load i16, i16* %4612, align 2, !tbaa !386
  %4614 = insertelement <64 x i16> %4609, i16 %4613, i32 14
  %4615 = extractelement <64 x i32> %4539, i32 15
  %4616 = sext i32 %4615 to i64
  %4617 = getelementptr inbounds i16, i16* %input286, i64 %4616
  %4618 = load i16, i16* %4617, align 2, !tbaa !386
  %4619 = insertelement <64 x i16> %4614, i16 %4618, i32 15
  %4620 = extractelement <64 x i32> %4539, i32 16
  %4621 = sext i32 %4620 to i64
  %4622 = getelementptr inbounds i16, i16* %input286, i64 %4621
  %4623 = load i16, i16* %4622, align 2, !tbaa !386
  %4624 = insertelement <64 x i16> %4619, i16 %4623, i32 16
  %4625 = extractelement <64 x i32> %4539, i32 17
  %4626 = sext i32 %4625 to i64
  %4627 = getelementptr inbounds i16, i16* %input286, i64 %4626
  %4628 = load i16, i16* %4627, align 2, !tbaa !386
  %4629 = insertelement <64 x i16> %4624, i16 %4628, i32 17
  %4630 = extractelement <64 x i32> %4539, i32 18
  %4631 = sext i32 %4630 to i64
  %4632 = getelementptr inbounds i16, i16* %input286, i64 %4631
  %4633 = load i16, i16* %4632, align 2, !tbaa !386
  %4634 = insertelement <64 x i16> %4629, i16 %4633, i32 18
  %4635 = extractelement <64 x i32> %4539, i32 19
  %4636 = sext i32 %4635 to i64
  %4637 = getelementptr inbounds i16, i16* %input286, i64 %4636
  %4638 = load i16, i16* %4637, align 2, !tbaa !386
  %4639 = insertelement <64 x i16> %4634, i16 %4638, i32 19
  %4640 = extractelement <64 x i32> %4539, i32 20
  %4641 = sext i32 %4640 to i64
  %4642 = getelementptr inbounds i16, i16* %input286, i64 %4641
  %4643 = load i16, i16* %4642, align 2, !tbaa !386
  %4644 = insertelement <64 x i16> %4639, i16 %4643, i32 20
  %4645 = extractelement <64 x i32> %4539, i32 21
  %4646 = sext i32 %4645 to i64
  %4647 = getelementptr inbounds i16, i16* %input286, i64 %4646
  %4648 = load i16, i16* %4647, align 2, !tbaa !386
  %4649 = insertelement <64 x i16> %4644, i16 %4648, i32 21
  %4650 = extractelement <64 x i32> %4539, i32 22
  %4651 = sext i32 %4650 to i64
  %4652 = getelementptr inbounds i16, i16* %input286, i64 %4651
  %4653 = load i16, i16* %4652, align 2, !tbaa !386
  %4654 = insertelement <64 x i16> %4649, i16 %4653, i32 22
  %4655 = extractelement <64 x i32> %4539, i32 23
  %4656 = sext i32 %4655 to i64
  %4657 = getelementptr inbounds i16, i16* %input286, i64 %4656
  %4658 = load i16, i16* %4657, align 2, !tbaa !386
  %4659 = insertelement <64 x i16> %4654, i16 %4658, i32 23
  %4660 = extractelement <64 x i32> %4539, i32 24
  %4661 = sext i32 %4660 to i64
  %4662 = getelementptr inbounds i16, i16* %input286, i64 %4661
  %4663 = load i16, i16* %4662, align 2, !tbaa !386
  %4664 = insertelement <64 x i16> %4659, i16 %4663, i32 24
  %4665 = extractelement <64 x i32> %4539, i32 25
  %4666 = sext i32 %4665 to i64
  %4667 = getelementptr inbounds i16, i16* %input286, i64 %4666
  %4668 = load i16, i16* %4667, align 2, !tbaa !386
  %4669 = insertelement <64 x i16> %4664, i16 %4668, i32 25
  %4670 = extractelement <64 x i32> %4539, i32 26
  %4671 = sext i32 %4670 to i64
  %4672 = getelementptr inbounds i16, i16* %input286, i64 %4671
  %4673 = load i16, i16* %4672, align 2, !tbaa !386
  %4674 = insertelement <64 x i16> %4669, i16 %4673, i32 26
  %4675 = extractelement <64 x i32> %4539, i32 27
  %4676 = sext i32 %4675 to i64
  %4677 = getelementptr inbounds i16, i16* %input286, i64 %4676
  %4678 = load i16, i16* %4677, align 2, !tbaa !386
  %4679 = insertelement <64 x i16> %4674, i16 %4678, i32 27
  %4680 = extractelement <64 x i32> %4539, i32 28
  %4681 = sext i32 %4680 to i64
  %4682 = getelementptr inbounds i16, i16* %input286, i64 %4681
  %4683 = load i16, i16* %4682, align 2, !tbaa !386
  %4684 = insertelement <64 x i16> %4679, i16 %4683, i32 28
  %4685 = extractelement <64 x i32> %4539, i32 29
  %4686 = sext i32 %4685 to i64
  %4687 = getelementptr inbounds i16, i16* %input286, i64 %4686
  %4688 = load i16, i16* %4687, align 2, !tbaa !386
  %4689 = insertelement <64 x i16> %4684, i16 %4688, i32 29
  %4690 = extractelement <64 x i32> %4539, i32 30
  %4691 = sext i32 %4690 to i64
  %4692 = getelementptr inbounds i16, i16* %input286, i64 %4691
  %4693 = load i16, i16* %4692, align 2, !tbaa !386
  %4694 = insertelement <64 x i16> %4689, i16 %4693, i32 30
  %4695 = extractelement <64 x i32> %4539, i32 31
  %4696 = sext i32 %4695 to i64
  %4697 = getelementptr inbounds i16, i16* %input286, i64 %4696
  %4698 = load i16, i16* %4697, align 2, !tbaa !386
  %4699 = insertelement <64 x i16> %4694, i16 %4698, i32 31
  %4700 = extractelement <64 x i32> %4539, i32 32
  %4701 = sext i32 %4700 to i64
  %4702 = getelementptr inbounds i16, i16* %input286, i64 %4701
  %4703 = load i16, i16* %4702, align 2, !tbaa !386
  %4704 = insertelement <64 x i16> %4699, i16 %4703, i32 32
  %4705 = extractelement <64 x i32> %4539, i32 33
  %4706 = sext i32 %4705 to i64
  %4707 = getelementptr inbounds i16, i16* %input286, i64 %4706
  %4708 = load i16, i16* %4707, align 2, !tbaa !386
  %4709 = insertelement <64 x i16> %4704, i16 %4708, i32 33
  %4710 = extractelement <64 x i32> %4539, i32 34
  %4711 = sext i32 %4710 to i64
  %4712 = getelementptr inbounds i16, i16* %input286, i64 %4711
  %4713 = load i16, i16* %4712, align 2, !tbaa !386
  %4714 = insertelement <64 x i16> %4709, i16 %4713, i32 34
  %4715 = extractelement <64 x i32> %4539, i32 35
  %4716 = sext i32 %4715 to i64
  %4717 = getelementptr inbounds i16, i16* %input286, i64 %4716
  %4718 = load i16, i16* %4717, align 2, !tbaa !386
  %4719 = insertelement <64 x i16> %4714, i16 %4718, i32 35
  %4720 = extractelement <64 x i32> %4539, i32 36
  %4721 = sext i32 %4720 to i64
  %4722 = getelementptr inbounds i16, i16* %input286, i64 %4721
  %4723 = load i16, i16* %4722, align 2, !tbaa !386
  %4724 = insertelement <64 x i16> %4719, i16 %4723, i32 36
  %4725 = extractelement <64 x i32> %4539, i32 37
  %4726 = sext i32 %4725 to i64
  %4727 = getelementptr inbounds i16, i16* %input286, i64 %4726
  %4728 = load i16, i16* %4727, align 2, !tbaa !386
  %4729 = insertelement <64 x i16> %4724, i16 %4728, i32 37
  %4730 = extractelement <64 x i32> %4539, i32 38
  %4731 = sext i32 %4730 to i64
  %4732 = getelementptr inbounds i16, i16* %input286, i64 %4731
  %4733 = load i16, i16* %4732, align 2, !tbaa !386
  %4734 = insertelement <64 x i16> %4729, i16 %4733, i32 38
  %4735 = extractelement <64 x i32> %4539, i32 39
  %4736 = sext i32 %4735 to i64
  %4737 = getelementptr inbounds i16, i16* %input286, i64 %4736
  %4738 = load i16, i16* %4737, align 2, !tbaa !386
  %4739 = insertelement <64 x i16> %4734, i16 %4738, i32 39
  %4740 = extractelement <64 x i32> %4539, i32 40
  %4741 = sext i32 %4740 to i64
  %4742 = getelementptr inbounds i16, i16* %input286, i64 %4741
  %4743 = load i16, i16* %4742, align 2, !tbaa !386
  %4744 = insertelement <64 x i16> %4739, i16 %4743, i32 40
  %4745 = extractelement <64 x i32> %4539, i32 41
  %4746 = sext i32 %4745 to i64
  %4747 = getelementptr inbounds i16, i16* %input286, i64 %4746
  %4748 = load i16, i16* %4747, align 2, !tbaa !386
  %4749 = insertelement <64 x i16> %4744, i16 %4748, i32 41
  %4750 = extractelement <64 x i32> %4539, i32 42
  %4751 = sext i32 %4750 to i64
  %4752 = getelementptr inbounds i16, i16* %input286, i64 %4751
  %4753 = load i16, i16* %4752, align 2, !tbaa !386
  %4754 = insertelement <64 x i16> %4749, i16 %4753, i32 42
  %4755 = extractelement <64 x i32> %4539, i32 43
  %4756 = sext i32 %4755 to i64
  %4757 = getelementptr inbounds i16, i16* %input286, i64 %4756
  %4758 = load i16, i16* %4757, align 2, !tbaa !386
  %4759 = insertelement <64 x i16> %4754, i16 %4758, i32 43
  %4760 = extractelement <64 x i32> %4539, i32 44
  %4761 = sext i32 %4760 to i64
  %4762 = getelementptr inbounds i16, i16* %input286, i64 %4761
  %4763 = load i16, i16* %4762, align 2, !tbaa !386
  %4764 = insertelement <64 x i16> %4759, i16 %4763, i32 44
  %4765 = extractelement <64 x i32> %4539, i32 45
  %4766 = sext i32 %4765 to i64
  %4767 = getelementptr inbounds i16, i16* %input286, i64 %4766
  %4768 = load i16, i16* %4767, align 2, !tbaa !386
  %4769 = insertelement <64 x i16> %4764, i16 %4768, i32 45
  %4770 = extractelement <64 x i32> %4539, i32 46
  %4771 = sext i32 %4770 to i64
  %4772 = getelementptr inbounds i16, i16* %input286, i64 %4771
  %4773 = load i16, i16* %4772, align 2, !tbaa !386
  %4774 = insertelement <64 x i16> %4769, i16 %4773, i32 46
  %4775 = extractelement <64 x i32> %4539, i32 47
  %4776 = sext i32 %4775 to i64
  %4777 = getelementptr inbounds i16, i16* %input286, i64 %4776
  %4778 = load i16, i16* %4777, align 2, !tbaa !386
  %4779 = insertelement <64 x i16> %4774, i16 %4778, i32 47
  %4780 = extractelement <64 x i32> %4539, i32 48
  %4781 = sext i32 %4780 to i64
  %4782 = getelementptr inbounds i16, i16* %input286, i64 %4781
  %4783 = load i16, i16* %4782, align 2, !tbaa !386
  %4784 = insertelement <64 x i16> %4779, i16 %4783, i32 48
  %4785 = extractelement <64 x i32> %4539, i32 49
  %4786 = sext i32 %4785 to i64
  %4787 = getelementptr inbounds i16, i16* %input286, i64 %4786
  %4788 = load i16, i16* %4787, align 2, !tbaa !386
  %4789 = insertelement <64 x i16> %4784, i16 %4788, i32 49
  %4790 = extractelement <64 x i32> %4539, i32 50
  %4791 = sext i32 %4790 to i64
  %4792 = getelementptr inbounds i16, i16* %input286, i64 %4791
  %4793 = load i16, i16* %4792, align 2, !tbaa !386
  %4794 = insertelement <64 x i16> %4789, i16 %4793, i32 50
  %4795 = extractelement <64 x i32> %4539, i32 51
  %4796 = sext i32 %4795 to i64
  %4797 = getelementptr inbounds i16, i16* %input286, i64 %4796
  %4798 = load i16, i16* %4797, align 2, !tbaa !386
  %4799 = insertelement <64 x i16> %4794, i16 %4798, i32 51
  %4800 = extractelement <64 x i32> %4539, i32 52
  %4801 = sext i32 %4800 to i64
  %4802 = getelementptr inbounds i16, i16* %input286, i64 %4801
  %4803 = load i16, i16* %4802, align 2, !tbaa !386
  %4804 = insertelement <64 x i16> %4799, i16 %4803, i32 52
  %4805 = extractelement <64 x i32> %4539, i32 53
  %4806 = sext i32 %4805 to i64
  %4807 = getelementptr inbounds i16, i16* %input286, i64 %4806
  %4808 = load i16, i16* %4807, align 2, !tbaa !386
  %4809 = insertelement <64 x i16> %4804, i16 %4808, i32 53
  %4810 = extractelement <64 x i32> %4539, i32 54
  %4811 = sext i32 %4810 to i64
  %4812 = getelementptr inbounds i16, i16* %input286, i64 %4811
  %4813 = load i16, i16* %4812, align 2, !tbaa !386
  %4814 = insertelement <64 x i16> %4809, i16 %4813, i32 54
  %4815 = extractelement <64 x i32> %4539, i32 55
  %4816 = sext i32 %4815 to i64
  %4817 = getelementptr inbounds i16, i16* %input286, i64 %4816
  %4818 = load i16, i16* %4817, align 2, !tbaa !386
  %4819 = insertelement <64 x i16> %4814, i16 %4818, i32 55
  %4820 = extractelement <64 x i32> %4539, i32 56
  %4821 = sext i32 %4820 to i64
  %4822 = getelementptr inbounds i16, i16* %input286, i64 %4821
  %4823 = load i16, i16* %4822, align 2, !tbaa !386
  %4824 = insertelement <64 x i16> %4819, i16 %4823, i32 56
  %4825 = extractelement <64 x i32> %4539, i32 57
  %4826 = sext i32 %4825 to i64
  %4827 = getelementptr inbounds i16, i16* %input286, i64 %4826
  %4828 = load i16, i16* %4827, align 2, !tbaa !386
  %4829 = insertelement <64 x i16> %4824, i16 %4828, i32 57
  %4830 = extractelement <64 x i32> %4539, i32 58
  %4831 = sext i32 %4830 to i64
  %4832 = getelementptr inbounds i16, i16* %input286, i64 %4831
  %4833 = load i16, i16* %4832, align 2, !tbaa !386
  %4834 = insertelement <64 x i16> %4829, i16 %4833, i32 58
  %4835 = extractelement <64 x i32> %4539, i32 59
  %4836 = sext i32 %4835 to i64
  %4837 = getelementptr inbounds i16, i16* %input286, i64 %4836
  %4838 = load i16, i16* %4837, align 2, !tbaa !386
  %4839 = insertelement <64 x i16> %4834, i16 %4838, i32 59
  %4840 = extractelement <64 x i32> %4539, i32 60
  %4841 = sext i32 %4840 to i64
  %4842 = getelementptr inbounds i16, i16* %input286, i64 %4841
  %4843 = load i16, i16* %4842, align 2, !tbaa !386
  %4844 = insertelement <64 x i16> %4839, i16 %4843, i32 60
  %4845 = extractelement <64 x i32> %4539, i32 61
  %4846 = sext i32 %4845 to i64
  %4847 = getelementptr inbounds i16, i16* %input286, i64 %4846
  %4848 = load i16, i16* %4847, align 2, !tbaa !386
  %4849 = insertelement <64 x i16> %4844, i16 %4848, i32 61
  %4850 = extractelement <64 x i32> %4539, i32 62
  %4851 = sext i32 %4850 to i64
  %4852 = getelementptr inbounds i16, i16* %input286, i64 %4851
  %4853 = load i16, i16* %4852, align 2, !tbaa !386
  %4854 = insertelement <64 x i16> %4849, i16 %4853, i32 62
  %4855 = extractelement <64 x i32> %4539, i32 63
  %4856 = sext i32 %4855 to i64
  %4857 = getelementptr inbounds i16, i16* %input286, i64 %4856
  %4858 = load i16, i16* %4857, align 2, !tbaa !386
  %4859 = insertelement <64 x i16> %4854, i16 %4858, i32 63
  %4860 = add nsw i32 %blur_x.s0.x.v2.base.s12, -64
  %4861 = insertelement <64 x i32> undef, i32 %4860, i32 0
  %4862 = shufflevector <64 x i32> %4861, <64 x i32> undef, <64 x i32> zeroinitializer
  %4863 = add nsw <64 x i32> %4862, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %4864 = shufflevector <64 x i32> %4863, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4865 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4864, <4 x i32> %53)
  %4866 = shufflevector <64 x i32> %4863, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4867 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4866, <4 x i32> %53)
  %4868 = shufflevector <64 x i32> %4863, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %4869 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4868, <4 x i32> %53)
  %4870 = shufflevector <64 x i32> %4863, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %4871 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4870, <4 x i32> %53)
  %4872 = shufflevector <64 x i32> %4863, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %4873 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4872, <4 x i32> %53)
  %4874 = shufflevector <64 x i32> %4863, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %4875 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4874, <4 x i32> %53)
  %4876 = shufflevector <64 x i32> %4863, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %4877 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4876, <4 x i32> %53)
  %4878 = shufflevector <64 x i32> %4863, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %4879 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4878, <4 x i32> %53)
  %4880 = shufflevector <64 x i32> %4863, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %4881 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4880, <4 x i32> %53)
  %4882 = shufflevector <64 x i32> %4863, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %4883 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4882, <4 x i32> %53)
  %4884 = shufflevector <64 x i32> %4863, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %4885 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4884, <4 x i32> %53)
  %4886 = shufflevector <64 x i32> %4863, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %4887 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4886, <4 x i32> %53)
  %4888 = shufflevector <64 x i32> %4863, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %4889 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4888, <4 x i32> %53)
  %4890 = shufflevector <64 x i32> %4863, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %4891 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4890, <4 x i32> %53)
  %4892 = shufflevector <64 x i32> %4863, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %4893 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4892, <4 x i32> %53)
  %4894 = shufflevector <64 x i32> %4863, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %4895 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4894, <4 x i32> %53)
  %4896 = shufflevector <4 x i32> %4895, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %4897 = shufflevector <8 x i32> %4896, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %4898 = shufflevector <16 x i32> %4897, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %4899 = shufflevector <32 x i32> %4898, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %4900 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4865, <4 x i32> %55)
  %4901 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4867, <4 x i32> %55)
  %4902 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4869, <4 x i32> %55)
  %4903 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4871, <4 x i32> %55)
  %4904 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4873, <4 x i32> %55)
  %4905 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4875, <4 x i32> %55)
  %4906 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4877, <4 x i32> %55)
  %4907 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4879, <4 x i32> %55)
  %4908 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4881, <4 x i32> %55)
  %4909 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4883, <4 x i32> %55)
  %4910 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4885, <4 x i32> %55)
  %4911 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4887, <4 x i32> %55)
  %4912 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4889, <4 x i32> %55)
  %4913 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4891, <4 x i32> %55)
  %4914 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4893, <4 x i32> %55)
  %4915 = shufflevector <64 x i32> %4899, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %4916 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4915, <4 x i32> %55)
  %4917 = shufflevector <4 x i32> %4900, <4 x i32> %4901, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4918 = shufflevector <4 x i32> %4902, <4 x i32> %4903, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4919 = shufflevector <4 x i32> %4904, <4 x i32> %4905, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4920 = shufflevector <4 x i32> %4906, <4 x i32> %4907, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4921 = shufflevector <4 x i32> %4908, <4 x i32> %4909, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4922 = shufflevector <4 x i32> %4910, <4 x i32> %4911, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4923 = shufflevector <4 x i32> %4912, <4 x i32> %4913, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4924 = shufflevector <4 x i32> %4914, <4 x i32> %4916, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4925 = shufflevector <8 x i32> %4917, <8 x i32> %4918, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4926 = shufflevector <8 x i32> %4919, <8 x i32> %4920, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4927 = shufflevector <8 x i32> %4921, <8 x i32> %4922, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4928 = shufflevector <8 x i32> %4923, <8 x i32> %4924, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4929 = shufflevector <16 x i32> %4925, <16 x i32> %4926, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4930 = shufflevector <16 x i32> %4927, <16 x i32> %4928, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4931 = shufflevector <32 x i32> %4929, <32 x i32> %4930, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %4932 = add nsw <64 x i32> %4931, %t276
  %4933 = extractelement <64 x i32> %4932, i32 0
  %4934 = sext i32 %4933 to i64
  %4935 = getelementptr inbounds i16, i16* %input286, i64 %4934
  %4936 = load i16, i16* %4935, align 2, !tbaa !386
  %4937 = insertelement <64 x i16> undef, i16 %4936, i32 0
  %4938 = extractelement <64 x i32> %4932, i32 1
  %4939 = sext i32 %4938 to i64
  %4940 = getelementptr inbounds i16, i16* %input286, i64 %4939
  %4941 = load i16, i16* %4940, align 2, !tbaa !386
  %4942 = insertelement <64 x i16> %4937, i16 %4941, i32 1
  %4943 = extractelement <64 x i32> %4932, i32 2
  %4944 = sext i32 %4943 to i64
  %4945 = getelementptr inbounds i16, i16* %input286, i64 %4944
  %4946 = load i16, i16* %4945, align 2, !tbaa !386
  %4947 = insertelement <64 x i16> %4942, i16 %4946, i32 2
  %4948 = extractelement <64 x i32> %4932, i32 3
  %4949 = sext i32 %4948 to i64
  %4950 = getelementptr inbounds i16, i16* %input286, i64 %4949
  %4951 = load i16, i16* %4950, align 2, !tbaa !386
  %4952 = insertelement <64 x i16> %4947, i16 %4951, i32 3
  %4953 = extractelement <64 x i32> %4932, i32 4
  %4954 = sext i32 %4953 to i64
  %4955 = getelementptr inbounds i16, i16* %input286, i64 %4954
  %4956 = load i16, i16* %4955, align 2, !tbaa !386
  %4957 = insertelement <64 x i16> %4952, i16 %4956, i32 4
  %4958 = extractelement <64 x i32> %4932, i32 5
  %4959 = sext i32 %4958 to i64
  %4960 = getelementptr inbounds i16, i16* %input286, i64 %4959
  %4961 = load i16, i16* %4960, align 2, !tbaa !386
  %4962 = insertelement <64 x i16> %4957, i16 %4961, i32 5
  %4963 = extractelement <64 x i32> %4932, i32 6
  %4964 = sext i32 %4963 to i64
  %4965 = getelementptr inbounds i16, i16* %input286, i64 %4964
  %4966 = load i16, i16* %4965, align 2, !tbaa !386
  %4967 = insertelement <64 x i16> %4962, i16 %4966, i32 6
  %4968 = extractelement <64 x i32> %4932, i32 7
  %4969 = sext i32 %4968 to i64
  %4970 = getelementptr inbounds i16, i16* %input286, i64 %4969
  %4971 = load i16, i16* %4970, align 2, !tbaa !386
  %4972 = insertelement <64 x i16> %4967, i16 %4971, i32 7
  %4973 = extractelement <64 x i32> %4932, i32 8
  %4974 = sext i32 %4973 to i64
  %4975 = getelementptr inbounds i16, i16* %input286, i64 %4974
  %4976 = load i16, i16* %4975, align 2, !tbaa !386
  %4977 = insertelement <64 x i16> %4972, i16 %4976, i32 8
  %4978 = extractelement <64 x i32> %4932, i32 9
  %4979 = sext i32 %4978 to i64
  %4980 = getelementptr inbounds i16, i16* %input286, i64 %4979
  %4981 = load i16, i16* %4980, align 2, !tbaa !386
  %4982 = insertelement <64 x i16> %4977, i16 %4981, i32 9
  %4983 = extractelement <64 x i32> %4932, i32 10
  %4984 = sext i32 %4983 to i64
  %4985 = getelementptr inbounds i16, i16* %input286, i64 %4984
  %4986 = load i16, i16* %4985, align 2, !tbaa !386
  %4987 = insertelement <64 x i16> %4982, i16 %4986, i32 10
  %4988 = extractelement <64 x i32> %4932, i32 11
  %4989 = sext i32 %4988 to i64
  %4990 = getelementptr inbounds i16, i16* %input286, i64 %4989
  %4991 = load i16, i16* %4990, align 2, !tbaa !386
  %4992 = insertelement <64 x i16> %4987, i16 %4991, i32 11
  %4993 = extractelement <64 x i32> %4932, i32 12
  %4994 = sext i32 %4993 to i64
  %4995 = getelementptr inbounds i16, i16* %input286, i64 %4994
  %4996 = load i16, i16* %4995, align 2, !tbaa !386
  %4997 = insertelement <64 x i16> %4992, i16 %4996, i32 12
  %4998 = extractelement <64 x i32> %4932, i32 13
  %4999 = sext i32 %4998 to i64
  %5000 = getelementptr inbounds i16, i16* %input286, i64 %4999
  %5001 = load i16, i16* %5000, align 2, !tbaa !386
  %5002 = insertelement <64 x i16> %4997, i16 %5001, i32 13
  %5003 = extractelement <64 x i32> %4932, i32 14
  %5004 = sext i32 %5003 to i64
  %5005 = getelementptr inbounds i16, i16* %input286, i64 %5004
  %5006 = load i16, i16* %5005, align 2, !tbaa !386
  %5007 = insertelement <64 x i16> %5002, i16 %5006, i32 14
  %5008 = extractelement <64 x i32> %4932, i32 15
  %5009 = sext i32 %5008 to i64
  %5010 = getelementptr inbounds i16, i16* %input286, i64 %5009
  %5011 = load i16, i16* %5010, align 2, !tbaa !386
  %5012 = insertelement <64 x i16> %5007, i16 %5011, i32 15
  %5013 = extractelement <64 x i32> %4932, i32 16
  %5014 = sext i32 %5013 to i64
  %5015 = getelementptr inbounds i16, i16* %input286, i64 %5014
  %5016 = load i16, i16* %5015, align 2, !tbaa !386
  %5017 = insertelement <64 x i16> %5012, i16 %5016, i32 16
  %5018 = extractelement <64 x i32> %4932, i32 17
  %5019 = sext i32 %5018 to i64
  %5020 = getelementptr inbounds i16, i16* %input286, i64 %5019
  %5021 = load i16, i16* %5020, align 2, !tbaa !386
  %5022 = insertelement <64 x i16> %5017, i16 %5021, i32 17
  %5023 = extractelement <64 x i32> %4932, i32 18
  %5024 = sext i32 %5023 to i64
  %5025 = getelementptr inbounds i16, i16* %input286, i64 %5024
  %5026 = load i16, i16* %5025, align 2, !tbaa !386
  %5027 = insertelement <64 x i16> %5022, i16 %5026, i32 18
  %5028 = extractelement <64 x i32> %4932, i32 19
  %5029 = sext i32 %5028 to i64
  %5030 = getelementptr inbounds i16, i16* %input286, i64 %5029
  %5031 = load i16, i16* %5030, align 2, !tbaa !386
  %5032 = insertelement <64 x i16> %5027, i16 %5031, i32 19
  %5033 = extractelement <64 x i32> %4932, i32 20
  %5034 = sext i32 %5033 to i64
  %5035 = getelementptr inbounds i16, i16* %input286, i64 %5034
  %5036 = load i16, i16* %5035, align 2, !tbaa !386
  %5037 = insertelement <64 x i16> %5032, i16 %5036, i32 20
  %5038 = extractelement <64 x i32> %4932, i32 21
  %5039 = sext i32 %5038 to i64
  %5040 = getelementptr inbounds i16, i16* %input286, i64 %5039
  %5041 = load i16, i16* %5040, align 2, !tbaa !386
  %5042 = insertelement <64 x i16> %5037, i16 %5041, i32 21
  %5043 = extractelement <64 x i32> %4932, i32 22
  %5044 = sext i32 %5043 to i64
  %5045 = getelementptr inbounds i16, i16* %input286, i64 %5044
  %5046 = load i16, i16* %5045, align 2, !tbaa !386
  %5047 = insertelement <64 x i16> %5042, i16 %5046, i32 22
  %5048 = extractelement <64 x i32> %4932, i32 23
  %5049 = sext i32 %5048 to i64
  %5050 = getelementptr inbounds i16, i16* %input286, i64 %5049
  %5051 = load i16, i16* %5050, align 2, !tbaa !386
  %5052 = insertelement <64 x i16> %5047, i16 %5051, i32 23
  %5053 = extractelement <64 x i32> %4932, i32 24
  %5054 = sext i32 %5053 to i64
  %5055 = getelementptr inbounds i16, i16* %input286, i64 %5054
  %5056 = load i16, i16* %5055, align 2, !tbaa !386
  %5057 = insertelement <64 x i16> %5052, i16 %5056, i32 24
  %5058 = extractelement <64 x i32> %4932, i32 25
  %5059 = sext i32 %5058 to i64
  %5060 = getelementptr inbounds i16, i16* %input286, i64 %5059
  %5061 = load i16, i16* %5060, align 2, !tbaa !386
  %5062 = insertelement <64 x i16> %5057, i16 %5061, i32 25
  %5063 = extractelement <64 x i32> %4932, i32 26
  %5064 = sext i32 %5063 to i64
  %5065 = getelementptr inbounds i16, i16* %input286, i64 %5064
  %5066 = load i16, i16* %5065, align 2, !tbaa !386
  %5067 = insertelement <64 x i16> %5062, i16 %5066, i32 26
  %5068 = extractelement <64 x i32> %4932, i32 27
  %5069 = sext i32 %5068 to i64
  %5070 = getelementptr inbounds i16, i16* %input286, i64 %5069
  %5071 = load i16, i16* %5070, align 2, !tbaa !386
  %5072 = insertelement <64 x i16> %5067, i16 %5071, i32 27
  %5073 = extractelement <64 x i32> %4932, i32 28
  %5074 = sext i32 %5073 to i64
  %5075 = getelementptr inbounds i16, i16* %input286, i64 %5074
  %5076 = load i16, i16* %5075, align 2, !tbaa !386
  %5077 = insertelement <64 x i16> %5072, i16 %5076, i32 28
  %5078 = extractelement <64 x i32> %4932, i32 29
  %5079 = sext i32 %5078 to i64
  %5080 = getelementptr inbounds i16, i16* %input286, i64 %5079
  %5081 = load i16, i16* %5080, align 2, !tbaa !386
  %5082 = insertelement <64 x i16> %5077, i16 %5081, i32 29
  %5083 = extractelement <64 x i32> %4932, i32 30
  %5084 = sext i32 %5083 to i64
  %5085 = getelementptr inbounds i16, i16* %input286, i64 %5084
  %5086 = load i16, i16* %5085, align 2, !tbaa !386
  %5087 = insertelement <64 x i16> %5082, i16 %5086, i32 30
  %5088 = extractelement <64 x i32> %4932, i32 31
  %5089 = sext i32 %5088 to i64
  %5090 = getelementptr inbounds i16, i16* %input286, i64 %5089
  %5091 = load i16, i16* %5090, align 2, !tbaa !386
  %5092 = insertelement <64 x i16> %5087, i16 %5091, i32 31
  %5093 = extractelement <64 x i32> %4932, i32 32
  %5094 = sext i32 %5093 to i64
  %5095 = getelementptr inbounds i16, i16* %input286, i64 %5094
  %5096 = load i16, i16* %5095, align 2, !tbaa !386
  %5097 = insertelement <64 x i16> %5092, i16 %5096, i32 32
  %5098 = extractelement <64 x i32> %4932, i32 33
  %5099 = sext i32 %5098 to i64
  %5100 = getelementptr inbounds i16, i16* %input286, i64 %5099
  %5101 = load i16, i16* %5100, align 2, !tbaa !386
  %5102 = insertelement <64 x i16> %5097, i16 %5101, i32 33
  %5103 = extractelement <64 x i32> %4932, i32 34
  %5104 = sext i32 %5103 to i64
  %5105 = getelementptr inbounds i16, i16* %input286, i64 %5104
  %5106 = load i16, i16* %5105, align 2, !tbaa !386
  %5107 = insertelement <64 x i16> %5102, i16 %5106, i32 34
  %5108 = extractelement <64 x i32> %4932, i32 35
  %5109 = sext i32 %5108 to i64
  %5110 = getelementptr inbounds i16, i16* %input286, i64 %5109
  %5111 = load i16, i16* %5110, align 2, !tbaa !386
  %5112 = insertelement <64 x i16> %5107, i16 %5111, i32 35
  %5113 = extractelement <64 x i32> %4932, i32 36
  %5114 = sext i32 %5113 to i64
  %5115 = getelementptr inbounds i16, i16* %input286, i64 %5114
  %5116 = load i16, i16* %5115, align 2, !tbaa !386
  %5117 = insertelement <64 x i16> %5112, i16 %5116, i32 36
  %5118 = extractelement <64 x i32> %4932, i32 37
  %5119 = sext i32 %5118 to i64
  %5120 = getelementptr inbounds i16, i16* %input286, i64 %5119
  %5121 = load i16, i16* %5120, align 2, !tbaa !386
  %5122 = insertelement <64 x i16> %5117, i16 %5121, i32 37
  %5123 = extractelement <64 x i32> %4932, i32 38
  %5124 = sext i32 %5123 to i64
  %5125 = getelementptr inbounds i16, i16* %input286, i64 %5124
  %5126 = load i16, i16* %5125, align 2, !tbaa !386
  %5127 = insertelement <64 x i16> %5122, i16 %5126, i32 38
  %5128 = extractelement <64 x i32> %4932, i32 39
  %5129 = sext i32 %5128 to i64
  %5130 = getelementptr inbounds i16, i16* %input286, i64 %5129
  %5131 = load i16, i16* %5130, align 2, !tbaa !386
  %5132 = insertelement <64 x i16> %5127, i16 %5131, i32 39
  %5133 = extractelement <64 x i32> %4932, i32 40
  %5134 = sext i32 %5133 to i64
  %5135 = getelementptr inbounds i16, i16* %input286, i64 %5134
  %5136 = load i16, i16* %5135, align 2, !tbaa !386
  %5137 = insertelement <64 x i16> %5132, i16 %5136, i32 40
  %5138 = extractelement <64 x i32> %4932, i32 41
  %5139 = sext i32 %5138 to i64
  %5140 = getelementptr inbounds i16, i16* %input286, i64 %5139
  %5141 = load i16, i16* %5140, align 2, !tbaa !386
  %5142 = insertelement <64 x i16> %5137, i16 %5141, i32 41
  %5143 = extractelement <64 x i32> %4932, i32 42
  %5144 = sext i32 %5143 to i64
  %5145 = getelementptr inbounds i16, i16* %input286, i64 %5144
  %5146 = load i16, i16* %5145, align 2, !tbaa !386
  %5147 = insertelement <64 x i16> %5142, i16 %5146, i32 42
  %5148 = extractelement <64 x i32> %4932, i32 43
  %5149 = sext i32 %5148 to i64
  %5150 = getelementptr inbounds i16, i16* %input286, i64 %5149
  %5151 = load i16, i16* %5150, align 2, !tbaa !386
  %5152 = insertelement <64 x i16> %5147, i16 %5151, i32 43
  %5153 = extractelement <64 x i32> %4932, i32 44
  %5154 = sext i32 %5153 to i64
  %5155 = getelementptr inbounds i16, i16* %input286, i64 %5154
  %5156 = load i16, i16* %5155, align 2, !tbaa !386
  %5157 = insertelement <64 x i16> %5152, i16 %5156, i32 44
  %5158 = extractelement <64 x i32> %4932, i32 45
  %5159 = sext i32 %5158 to i64
  %5160 = getelementptr inbounds i16, i16* %input286, i64 %5159
  %5161 = load i16, i16* %5160, align 2, !tbaa !386
  %5162 = insertelement <64 x i16> %5157, i16 %5161, i32 45
  %5163 = extractelement <64 x i32> %4932, i32 46
  %5164 = sext i32 %5163 to i64
  %5165 = getelementptr inbounds i16, i16* %input286, i64 %5164
  %5166 = load i16, i16* %5165, align 2, !tbaa !386
  %5167 = insertelement <64 x i16> %5162, i16 %5166, i32 46
  %5168 = extractelement <64 x i32> %4932, i32 47
  %5169 = sext i32 %5168 to i64
  %5170 = getelementptr inbounds i16, i16* %input286, i64 %5169
  %5171 = load i16, i16* %5170, align 2, !tbaa !386
  %5172 = insertelement <64 x i16> %5167, i16 %5171, i32 47
  %5173 = extractelement <64 x i32> %4932, i32 48
  %5174 = sext i32 %5173 to i64
  %5175 = getelementptr inbounds i16, i16* %input286, i64 %5174
  %5176 = load i16, i16* %5175, align 2, !tbaa !386
  %5177 = insertelement <64 x i16> %5172, i16 %5176, i32 48
  %5178 = extractelement <64 x i32> %4932, i32 49
  %5179 = sext i32 %5178 to i64
  %5180 = getelementptr inbounds i16, i16* %input286, i64 %5179
  %5181 = load i16, i16* %5180, align 2, !tbaa !386
  %5182 = insertelement <64 x i16> %5177, i16 %5181, i32 49
  %5183 = extractelement <64 x i32> %4932, i32 50
  %5184 = sext i32 %5183 to i64
  %5185 = getelementptr inbounds i16, i16* %input286, i64 %5184
  %5186 = load i16, i16* %5185, align 2, !tbaa !386
  %5187 = insertelement <64 x i16> %5182, i16 %5186, i32 50
  %5188 = extractelement <64 x i32> %4932, i32 51
  %5189 = sext i32 %5188 to i64
  %5190 = getelementptr inbounds i16, i16* %input286, i64 %5189
  %5191 = load i16, i16* %5190, align 2, !tbaa !386
  %5192 = insertelement <64 x i16> %5187, i16 %5191, i32 51
  %5193 = extractelement <64 x i32> %4932, i32 52
  %5194 = sext i32 %5193 to i64
  %5195 = getelementptr inbounds i16, i16* %input286, i64 %5194
  %5196 = load i16, i16* %5195, align 2, !tbaa !386
  %5197 = insertelement <64 x i16> %5192, i16 %5196, i32 52
  %5198 = extractelement <64 x i32> %4932, i32 53
  %5199 = sext i32 %5198 to i64
  %5200 = getelementptr inbounds i16, i16* %input286, i64 %5199
  %5201 = load i16, i16* %5200, align 2, !tbaa !386
  %5202 = insertelement <64 x i16> %5197, i16 %5201, i32 53
  %5203 = extractelement <64 x i32> %4932, i32 54
  %5204 = sext i32 %5203 to i64
  %5205 = getelementptr inbounds i16, i16* %input286, i64 %5204
  %5206 = load i16, i16* %5205, align 2, !tbaa !386
  %5207 = insertelement <64 x i16> %5202, i16 %5206, i32 54
  %5208 = extractelement <64 x i32> %4932, i32 55
  %5209 = sext i32 %5208 to i64
  %5210 = getelementptr inbounds i16, i16* %input286, i64 %5209
  %5211 = load i16, i16* %5210, align 2, !tbaa !386
  %5212 = insertelement <64 x i16> %5207, i16 %5211, i32 55
  %5213 = extractelement <64 x i32> %4932, i32 56
  %5214 = sext i32 %5213 to i64
  %5215 = getelementptr inbounds i16, i16* %input286, i64 %5214
  %5216 = load i16, i16* %5215, align 2, !tbaa !386
  %5217 = insertelement <64 x i16> %5212, i16 %5216, i32 56
  %5218 = extractelement <64 x i32> %4932, i32 57
  %5219 = sext i32 %5218 to i64
  %5220 = getelementptr inbounds i16, i16* %input286, i64 %5219
  %5221 = load i16, i16* %5220, align 2, !tbaa !386
  %5222 = insertelement <64 x i16> %5217, i16 %5221, i32 57
  %5223 = extractelement <64 x i32> %4932, i32 58
  %5224 = sext i32 %5223 to i64
  %5225 = getelementptr inbounds i16, i16* %input286, i64 %5224
  %5226 = load i16, i16* %5225, align 2, !tbaa !386
  %5227 = insertelement <64 x i16> %5222, i16 %5226, i32 58
  %5228 = extractelement <64 x i32> %4932, i32 59
  %5229 = sext i32 %5228 to i64
  %5230 = getelementptr inbounds i16, i16* %input286, i64 %5229
  %5231 = load i16, i16* %5230, align 2, !tbaa !386
  %5232 = insertelement <64 x i16> %5227, i16 %5231, i32 59
  %5233 = extractelement <64 x i32> %4932, i32 60
  %5234 = sext i32 %5233 to i64
  %5235 = getelementptr inbounds i16, i16* %input286, i64 %5234
  %5236 = load i16, i16* %5235, align 2, !tbaa !386
  %5237 = insertelement <64 x i16> %5232, i16 %5236, i32 60
  %5238 = extractelement <64 x i32> %4932, i32 61
  %5239 = sext i32 %5238 to i64
  %5240 = getelementptr inbounds i16, i16* %input286, i64 %5239
  %5241 = load i16, i16* %5240, align 2, !tbaa !386
  %5242 = insertelement <64 x i16> %5237, i16 %5241, i32 61
  %5243 = extractelement <64 x i32> %4932, i32 62
  %5244 = sext i32 %5243 to i64
  %5245 = getelementptr inbounds i16, i16* %input286, i64 %5244
  %5246 = load i16, i16* %5245, align 2, !tbaa !386
  %5247 = insertelement <64 x i16> %5242, i16 %5246, i32 62
  %5248 = extractelement <64 x i32> %4932, i32 63
  %5249 = sext i32 %5248 to i64
  %5250 = getelementptr inbounds i16, i16* %input286, i64 %5249
  %5251 = load i16, i16* %5250, align 2, !tbaa !386
  %5252 = insertelement <64 x i16> %5247, i16 %5251, i32 63
  %5253 = add nsw i32 %blur_x.s0.x.v2.base.s12, -62
  %5254 = insertelement <64 x i32> undef, i32 %5253, i32 0
  %5255 = shufflevector <64 x i32> %5254, <64 x i32> undef, <64 x i32> zeroinitializer
  %5256 = add nsw <64 x i32> %5255, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %5257 = shufflevector <64 x i32> %5256, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %5258 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5257, <4 x i32> %53)
  %5259 = shufflevector <64 x i32> %5256, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5260 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5259, <4 x i32> %53)
  %5261 = shufflevector <64 x i32> %5256, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %5262 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5261, <4 x i32> %53)
  %5263 = shufflevector <64 x i32> %5256, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %5264 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5263, <4 x i32> %53)
  %5265 = shufflevector <64 x i32> %5256, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %5266 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5265, <4 x i32> %53)
  %5267 = shufflevector <64 x i32> %5256, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %5268 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5267, <4 x i32> %53)
  %5269 = shufflevector <64 x i32> %5256, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %5270 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5269, <4 x i32> %53)
  %5271 = shufflevector <64 x i32> %5256, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %5272 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5271, <4 x i32> %53)
  %5273 = shufflevector <64 x i32> %5256, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %5274 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5273, <4 x i32> %53)
  %5275 = shufflevector <64 x i32> %5256, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %5276 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5275, <4 x i32> %53)
  %5277 = shufflevector <64 x i32> %5256, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %5278 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5277, <4 x i32> %53)
  %5279 = shufflevector <64 x i32> %5256, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %5280 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5279, <4 x i32> %53)
  %5281 = shufflevector <64 x i32> %5256, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %5282 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5281, <4 x i32> %53)
  %5283 = shufflevector <64 x i32> %5256, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %5284 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5283, <4 x i32> %53)
  %5285 = shufflevector <64 x i32> %5256, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %5286 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5285, <4 x i32> %53)
  %5287 = shufflevector <64 x i32> %5256, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %5288 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5287, <4 x i32> %53)
  %5289 = shufflevector <4 x i32> %5288, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %5290 = shufflevector <8 x i32> %5289, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %5291 = shufflevector <16 x i32> %5290, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %5292 = shufflevector <32 x i32> %5291, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %5293 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5258, <4 x i32> %55)
  %5294 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5260, <4 x i32> %55)
  %5295 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5262, <4 x i32> %55)
  %5296 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5264, <4 x i32> %55)
  %5297 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5266, <4 x i32> %55)
  %5298 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5268, <4 x i32> %55)
  %5299 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5270, <4 x i32> %55)
  %5300 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5272, <4 x i32> %55)
  %5301 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5274, <4 x i32> %55)
  %5302 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5276, <4 x i32> %55)
  %5303 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5278, <4 x i32> %55)
  %5304 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5280, <4 x i32> %55)
  %5305 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5282, <4 x i32> %55)
  %5306 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5284, <4 x i32> %55)
  %5307 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5286, <4 x i32> %55)
  %5308 = shufflevector <64 x i32> %5292, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %5309 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5308, <4 x i32> %55)
  %5310 = shufflevector <4 x i32> %5293, <4 x i32> %5294, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %5311 = shufflevector <4 x i32> %5295, <4 x i32> %5296, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %5312 = shufflevector <4 x i32> %5297, <4 x i32> %5298, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %5313 = shufflevector <4 x i32> %5299, <4 x i32> %5300, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %5314 = shufflevector <4 x i32> %5301, <4 x i32> %5302, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %5315 = shufflevector <4 x i32> %5303, <4 x i32> %5304, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %5316 = shufflevector <4 x i32> %5305, <4 x i32> %5306, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %5317 = shufflevector <4 x i32> %5307, <4 x i32> %5309, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %5318 = shufflevector <8 x i32> %5310, <8 x i32> %5311, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5319 = shufflevector <8 x i32> %5312, <8 x i32> %5313, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5320 = shufflevector <8 x i32> %5314, <8 x i32> %5315, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5321 = shufflevector <8 x i32> %5316, <8 x i32> %5317, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5322 = shufflevector <16 x i32> %5318, <16 x i32> %5319, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5323 = shufflevector <16 x i32> %5320, <16 x i32> %5321, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5324 = shufflevector <32 x i32> %5322, <32 x i32> %5323, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %5325 = add nsw <64 x i32> %5324, %t276
  %5326 = extractelement <64 x i32> %5325, i32 0
  %5327 = sext i32 %5326 to i64
  %5328 = getelementptr inbounds i16, i16* %input286, i64 %5327
  %5329 = load i16, i16* %5328, align 2, !tbaa !386
  %5330 = insertelement <64 x i16> undef, i16 %5329, i32 0
  %5331 = extractelement <64 x i32> %5325, i32 1
  %5332 = sext i32 %5331 to i64
  %5333 = getelementptr inbounds i16, i16* %input286, i64 %5332
  %5334 = load i16, i16* %5333, align 2, !tbaa !386
  %5335 = insertelement <64 x i16> %5330, i16 %5334, i32 1
  %5336 = extractelement <64 x i32> %5325, i32 2
  %5337 = sext i32 %5336 to i64
  %5338 = getelementptr inbounds i16, i16* %input286, i64 %5337
  %5339 = load i16, i16* %5338, align 2, !tbaa !386
  %5340 = insertelement <64 x i16> %5335, i16 %5339, i32 2
  %5341 = extractelement <64 x i32> %5325, i32 3
  %5342 = sext i32 %5341 to i64
  %5343 = getelementptr inbounds i16, i16* %input286, i64 %5342
  %5344 = load i16, i16* %5343, align 2, !tbaa !386
  %5345 = insertelement <64 x i16> %5340, i16 %5344, i32 3
  %5346 = extractelement <64 x i32> %5325, i32 4
  %5347 = sext i32 %5346 to i64
  %5348 = getelementptr inbounds i16, i16* %input286, i64 %5347
  %5349 = load i16, i16* %5348, align 2, !tbaa !386
  %5350 = insertelement <64 x i16> %5345, i16 %5349, i32 4
  %5351 = extractelement <64 x i32> %5325, i32 5
  %5352 = sext i32 %5351 to i64
  %5353 = getelementptr inbounds i16, i16* %input286, i64 %5352
  %5354 = load i16, i16* %5353, align 2, !tbaa !386
  %5355 = insertelement <64 x i16> %5350, i16 %5354, i32 5
  %5356 = extractelement <64 x i32> %5325, i32 6
  %5357 = sext i32 %5356 to i64
  %5358 = getelementptr inbounds i16, i16* %input286, i64 %5357
  %5359 = load i16, i16* %5358, align 2, !tbaa !386
  %5360 = insertelement <64 x i16> %5355, i16 %5359, i32 6
  %5361 = extractelement <64 x i32> %5325, i32 7
  %5362 = sext i32 %5361 to i64
  %5363 = getelementptr inbounds i16, i16* %input286, i64 %5362
  %5364 = load i16, i16* %5363, align 2, !tbaa !386
  %5365 = insertelement <64 x i16> %5360, i16 %5364, i32 7
  %5366 = extractelement <64 x i32> %5325, i32 8
  %5367 = sext i32 %5366 to i64
  %5368 = getelementptr inbounds i16, i16* %input286, i64 %5367
  %5369 = load i16, i16* %5368, align 2, !tbaa !386
  %5370 = insertelement <64 x i16> %5365, i16 %5369, i32 8
  %5371 = extractelement <64 x i32> %5325, i32 9
  %5372 = sext i32 %5371 to i64
  %5373 = getelementptr inbounds i16, i16* %input286, i64 %5372
  %5374 = load i16, i16* %5373, align 2, !tbaa !386
  %5375 = insertelement <64 x i16> %5370, i16 %5374, i32 9
  %5376 = extractelement <64 x i32> %5325, i32 10
  %5377 = sext i32 %5376 to i64
  %5378 = getelementptr inbounds i16, i16* %input286, i64 %5377
  %5379 = load i16, i16* %5378, align 2, !tbaa !386
  %5380 = insertelement <64 x i16> %5375, i16 %5379, i32 10
  %5381 = extractelement <64 x i32> %5325, i32 11
  %5382 = sext i32 %5381 to i64
  %5383 = getelementptr inbounds i16, i16* %input286, i64 %5382
  %5384 = load i16, i16* %5383, align 2, !tbaa !386
  %5385 = insertelement <64 x i16> %5380, i16 %5384, i32 11
  %5386 = extractelement <64 x i32> %5325, i32 12
  %5387 = sext i32 %5386 to i64
  %5388 = getelementptr inbounds i16, i16* %input286, i64 %5387
  %5389 = load i16, i16* %5388, align 2, !tbaa !386
  %5390 = insertelement <64 x i16> %5385, i16 %5389, i32 12
  %5391 = extractelement <64 x i32> %5325, i32 13
  %5392 = sext i32 %5391 to i64
  %5393 = getelementptr inbounds i16, i16* %input286, i64 %5392
  %5394 = load i16, i16* %5393, align 2, !tbaa !386
  %5395 = insertelement <64 x i16> %5390, i16 %5394, i32 13
  %5396 = extractelement <64 x i32> %5325, i32 14
  %5397 = sext i32 %5396 to i64
  %5398 = getelementptr inbounds i16, i16* %input286, i64 %5397
  %5399 = load i16, i16* %5398, align 2, !tbaa !386
  %5400 = insertelement <64 x i16> %5395, i16 %5399, i32 14
  %5401 = extractelement <64 x i32> %5325, i32 15
  %5402 = sext i32 %5401 to i64
  %5403 = getelementptr inbounds i16, i16* %input286, i64 %5402
  %5404 = load i16, i16* %5403, align 2, !tbaa !386
  %5405 = insertelement <64 x i16> %5400, i16 %5404, i32 15
  %5406 = extractelement <64 x i32> %5325, i32 16
  %5407 = sext i32 %5406 to i64
  %5408 = getelementptr inbounds i16, i16* %input286, i64 %5407
  %5409 = load i16, i16* %5408, align 2, !tbaa !386
  %5410 = insertelement <64 x i16> %5405, i16 %5409, i32 16
  %5411 = extractelement <64 x i32> %5325, i32 17
  %5412 = sext i32 %5411 to i64
  %5413 = getelementptr inbounds i16, i16* %input286, i64 %5412
  %5414 = load i16, i16* %5413, align 2, !tbaa !386
  %5415 = insertelement <64 x i16> %5410, i16 %5414, i32 17
  %5416 = extractelement <64 x i32> %5325, i32 18
  %5417 = sext i32 %5416 to i64
  %5418 = getelementptr inbounds i16, i16* %input286, i64 %5417
  %5419 = load i16, i16* %5418, align 2, !tbaa !386
  %5420 = insertelement <64 x i16> %5415, i16 %5419, i32 18
  %5421 = extractelement <64 x i32> %5325, i32 19
  %5422 = sext i32 %5421 to i64
  %5423 = getelementptr inbounds i16, i16* %input286, i64 %5422
  %5424 = load i16, i16* %5423, align 2, !tbaa !386
  %5425 = insertelement <64 x i16> %5420, i16 %5424, i32 19
  %5426 = extractelement <64 x i32> %5325, i32 20
  %5427 = sext i32 %5426 to i64
  %5428 = getelementptr inbounds i16, i16* %input286, i64 %5427
  %5429 = load i16, i16* %5428, align 2, !tbaa !386
  %5430 = insertelement <64 x i16> %5425, i16 %5429, i32 20
  %5431 = extractelement <64 x i32> %5325, i32 21
  %5432 = sext i32 %5431 to i64
  %5433 = getelementptr inbounds i16, i16* %input286, i64 %5432
  %5434 = load i16, i16* %5433, align 2, !tbaa !386
  %5435 = insertelement <64 x i16> %5430, i16 %5434, i32 21
  %5436 = extractelement <64 x i32> %5325, i32 22
  %5437 = sext i32 %5436 to i64
  %5438 = getelementptr inbounds i16, i16* %input286, i64 %5437
  %5439 = load i16, i16* %5438, align 2, !tbaa !386
  %5440 = insertelement <64 x i16> %5435, i16 %5439, i32 22
  %5441 = extractelement <64 x i32> %5325, i32 23
  %5442 = sext i32 %5441 to i64
  %5443 = getelementptr inbounds i16, i16* %input286, i64 %5442
  %5444 = load i16, i16* %5443, align 2, !tbaa !386
  %5445 = insertelement <64 x i16> %5440, i16 %5444, i32 23
  %5446 = extractelement <64 x i32> %5325, i32 24
  %5447 = sext i32 %5446 to i64
  %5448 = getelementptr inbounds i16, i16* %input286, i64 %5447
  %5449 = load i16, i16* %5448, align 2, !tbaa !386
  %5450 = insertelement <64 x i16> %5445, i16 %5449, i32 24
  %5451 = extractelement <64 x i32> %5325, i32 25
  %5452 = sext i32 %5451 to i64
  %5453 = getelementptr inbounds i16, i16* %input286, i64 %5452
  %5454 = load i16, i16* %5453, align 2, !tbaa !386
  %5455 = insertelement <64 x i16> %5450, i16 %5454, i32 25
  %5456 = extractelement <64 x i32> %5325, i32 26
  %5457 = sext i32 %5456 to i64
  %5458 = getelementptr inbounds i16, i16* %input286, i64 %5457
  %5459 = load i16, i16* %5458, align 2, !tbaa !386
  %5460 = insertelement <64 x i16> %5455, i16 %5459, i32 26
  %5461 = extractelement <64 x i32> %5325, i32 27
  %5462 = sext i32 %5461 to i64
  %5463 = getelementptr inbounds i16, i16* %input286, i64 %5462
  %5464 = load i16, i16* %5463, align 2, !tbaa !386
  %5465 = insertelement <64 x i16> %5460, i16 %5464, i32 27
  %5466 = extractelement <64 x i32> %5325, i32 28
  %5467 = sext i32 %5466 to i64
  %5468 = getelementptr inbounds i16, i16* %input286, i64 %5467
  %5469 = load i16, i16* %5468, align 2, !tbaa !386
  %5470 = insertelement <64 x i16> %5465, i16 %5469, i32 28
  %5471 = extractelement <64 x i32> %5325, i32 29
  %5472 = sext i32 %5471 to i64
  %5473 = getelementptr inbounds i16, i16* %input286, i64 %5472
  %5474 = load i16, i16* %5473, align 2, !tbaa !386
  %5475 = insertelement <64 x i16> %5470, i16 %5474, i32 29
  %5476 = extractelement <64 x i32> %5325, i32 30
  %5477 = sext i32 %5476 to i64
  %5478 = getelementptr inbounds i16, i16* %input286, i64 %5477
  %5479 = load i16, i16* %5478, align 2, !tbaa !386
  %5480 = insertelement <64 x i16> %5475, i16 %5479, i32 30
  %5481 = extractelement <64 x i32> %5325, i32 31
  %5482 = sext i32 %5481 to i64
  %5483 = getelementptr inbounds i16, i16* %input286, i64 %5482
  %5484 = load i16, i16* %5483, align 2, !tbaa !386
  %5485 = insertelement <64 x i16> %5480, i16 %5484, i32 31
  %5486 = extractelement <64 x i32> %5325, i32 32
  %5487 = sext i32 %5486 to i64
  %5488 = getelementptr inbounds i16, i16* %input286, i64 %5487
  %5489 = load i16, i16* %5488, align 2, !tbaa !386
  %5490 = insertelement <64 x i16> %5485, i16 %5489, i32 32
  %5491 = extractelement <64 x i32> %5325, i32 33
  %5492 = sext i32 %5491 to i64
  %5493 = getelementptr inbounds i16, i16* %input286, i64 %5492
  %5494 = load i16, i16* %5493, align 2, !tbaa !386
  %5495 = insertelement <64 x i16> %5490, i16 %5494, i32 33
  %5496 = extractelement <64 x i32> %5325, i32 34
  %5497 = sext i32 %5496 to i64
  %5498 = getelementptr inbounds i16, i16* %input286, i64 %5497
  %5499 = load i16, i16* %5498, align 2, !tbaa !386
  %5500 = insertelement <64 x i16> %5495, i16 %5499, i32 34
  %5501 = extractelement <64 x i32> %5325, i32 35
  %5502 = sext i32 %5501 to i64
  %5503 = getelementptr inbounds i16, i16* %input286, i64 %5502
  %5504 = load i16, i16* %5503, align 2, !tbaa !386
  %5505 = insertelement <64 x i16> %5500, i16 %5504, i32 35
  %5506 = extractelement <64 x i32> %5325, i32 36
  %5507 = sext i32 %5506 to i64
  %5508 = getelementptr inbounds i16, i16* %input286, i64 %5507
  %5509 = load i16, i16* %5508, align 2, !tbaa !386
  %5510 = insertelement <64 x i16> %5505, i16 %5509, i32 36
  %5511 = extractelement <64 x i32> %5325, i32 37
  %5512 = sext i32 %5511 to i64
  %5513 = getelementptr inbounds i16, i16* %input286, i64 %5512
  %5514 = load i16, i16* %5513, align 2, !tbaa !386
  %5515 = insertelement <64 x i16> %5510, i16 %5514, i32 37
  %5516 = extractelement <64 x i32> %5325, i32 38
  %5517 = sext i32 %5516 to i64
  %5518 = getelementptr inbounds i16, i16* %input286, i64 %5517
  %5519 = load i16, i16* %5518, align 2, !tbaa !386
  %5520 = insertelement <64 x i16> %5515, i16 %5519, i32 38
  %5521 = extractelement <64 x i32> %5325, i32 39
  %5522 = sext i32 %5521 to i64
  %5523 = getelementptr inbounds i16, i16* %input286, i64 %5522
  %5524 = load i16, i16* %5523, align 2, !tbaa !386
  %5525 = insertelement <64 x i16> %5520, i16 %5524, i32 39
  %5526 = extractelement <64 x i32> %5325, i32 40
  %5527 = sext i32 %5526 to i64
  %5528 = getelementptr inbounds i16, i16* %input286, i64 %5527
  %5529 = load i16, i16* %5528, align 2, !tbaa !386
  %5530 = insertelement <64 x i16> %5525, i16 %5529, i32 40
  %5531 = extractelement <64 x i32> %5325, i32 41
  %5532 = sext i32 %5531 to i64
  %5533 = getelementptr inbounds i16, i16* %input286, i64 %5532
  %5534 = load i16, i16* %5533, align 2, !tbaa !386
  %5535 = insertelement <64 x i16> %5530, i16 %5534, i32 41
  %5536 = extractelement <64 x i32> %5325, i32 42
  %5537 = sext i32 %5536 to i64
  %5538 = getelementptr inbounds i16, i16* %input286, i64 %5537
  %5539 = load i16, i16* %5538, align 2, !tbaa !386
  %5540 = insertelement <64 x i16> %5535, i16 %5539, i32 42
  %5541 = extractelement <64 x i32> %5325, i32 43
  %5542 = sext i32 %5541 to i64
  %5543 = getelementptr inbounds i16, i16* %input286, i64 %5542
  %5544 = load i16, i16* %5543, align 2, !tbaa !386
  %5545 = insertelement <64 x i16> %5540, i16 %5544, i32 43
  %5546 = extractelement <64 x i32> %5325, i32 44
  %5547 = sext i32 %5546 to i64
  %5548 = getelementptr inbounds i16, i16* %input286, i64 %5547
  %5549 = load i16, i16* %5548, align 2, !tbaa !386
  %5550 = insertelement <64 x i16> %5545, i16 %5549, i32 44
  %5551 = extractelement <64 x i32> %5325, i32 45
  %5552 = sext i32 %5551 to i64
  %5553 = getelementptr inbounds i16, i16* %input286, i64 %5552
  %5554 = load i16, i16* %5553, align 2, !tbaa !386
  %5555 = insertelement <64 x i16> %5550, i16 %5554, i32 45
  %5556 = extractelement <64 x i32> %5325, i32 46
  %5557 = sext i32 %5556 to i64
  %5558 = getelementptr inbounds i16, i16* %input286, i64 %5557
  %5559 = load i16, i16* %5558, align 2, !tbaa !386
  %5560 = insertelement <64 x i16> %5555, i16 %5559, i32 46
  %5561 = extractelement <64 x i32> %5325, i32 47
  %5562 = sext i32 %5561 to i64
  %5563 = getelementptr inbounds i16, i16* %input286, i64 %5562
  %5564 = load i16, i16* %5563, align 2, !tbaa !386
  %5565 = insertelement <64 x i16> %5560, i16 %5564, i32 47
  %5566 = extractelement <64 x i32> %5325, i32 48
  %5567 = sext i32 %5566 to i64
  %5568 = getelementptr inbounds i16, i16* %input286, i64 %5567
  %5569 = load i16, i16* %5568, align 2, !tbaa !386
  %5570 = insertelement <64 x i16> %5565, i16 %5569, i32 48
  %5571 = extractelement <64 x i32> %5325, i32 49
  %5572 = sext i32 %5571 to i64
  %5573 = getelementptr inbounds i16, i16* %input286, i64 %5572
  %5574 = load i16, i16* %5573, align 2, !tbaa !386
  %5575 = insertelement <64 x i16> %5570, i16 %5574, i32 49
  %5576 = extractelement <64 x i32> %5325, i32 50
  %5577 = sext i32 %5576 to i64
  %5578 = getelementptr inbounds i16, i16* %input286, i64 %5577
  %5579 = load i16, i16* %5578, align 2, !tbaa !386
  %5580 = insertelement <64 x i16> %5575, i16 %5579, i32 50
  %5581 = extractelement <64 x i32> %5325, i32 51
  %5582 = sext i32 %5581 to i64
  %5583 = getelementptr inbounds i16, i16* %input286, i64 %5582
  %5584 = load i16, i16* %5583, align 2, !tbaa !386
  %5585 = insertelement <64 x i16> %5580, i16 %5584, i32 51
  %5586 = extractelement <64 x i32> %5325, i32 52
  %5587 = sext i32 %5586 to i64
  %5588 = getelementptr inbounds i16, i16* %input286, i64 %5587
  %5589 = load i16, i16* %5588, align 2, !tbaa !386
  %5590 = insertelement <64 x i16> %5585, i16 %5589, i32 52
  %5591 = extractelement <64 x i32> %5325, i32 53
  %5592 = sext i32 %5591 to i64
  %5593 = getelementptr inbounds i16, i16* %input286, i64 %5592
  %5594 = load i16, i16* %5593, align 2, !tbaa !386
  %5595 = insertelement <64 x i16> %5590, i16 %5594, i32 53
  %5596 = extractelement <64 x i32> %5325, i32 54
  %5597 = sext i32 %5596 to i64
  %5598 = getelementptr inbounds i16, i16* %input286, i64 %5597
  %5599 = load i16, i16* %5598, align 2, !tbaa !386
  %5600 = insertelement <64 x i16> %5595, i16 %5599, i32 54
  %5601 = extractelement <64 x i32> %5325, i32 55
  %5602 = sext i32 %5601 to i64
  %5603 = getelementptr inbounds i16, i16* %input286, i64 %5602
  %5604 = load i16, i16* %5603, align 2, !tbaa !386
  %5605 = insertelement <64 x i16> %5600, i16 %5604, i32 55
  %5606 = extractelement <64 x i32> %5325, i32 56
  %5607 = sext i32 %5606 to i64
  %5608 = getelementptr inbounds i16, i16* %input286, i64 %5607
  %5609 = load i16, i16* %5608, align 2, !tbaa !386
  %5610 = insertelement <64 x i16> %5605, i16 %5609, i32 56
  %5611 = extractelement <64 x i32> %5325, i32 57
  %5612 = sext i32 %5611 to i64
  %5613 = getelementptr inbounds i16, i16* %input286, i64 %5612
  %5614 = load i16, i16* %5613, align 2, !tbaa !386
  %5615 = insertelement <64 x i16> %5610, i16 %5614, i32 57
  %5616 = extractelement <64 x i32> %5325, i32 58
  %5617 = sext i32 %5616 to i64
  %5618 = getelementptr inbounds i16, i16* %input286, i64 %5617
  %5619 = load i16, i16* %5618, align 2, !tbaa !386
  %5620 = insertelement <64 x i16> %5615, i16 %5619, i32 58
  %5621 = extractelement <64 x i32> %5325, i32 59
  %5622 = sext i32 %5621 to i64
  %5623 = getelementptr inbounds i16, i16* %input286, i64 %5622
  %5624 = load i16, i16* %5623, align 2, !tbaa !386
  %5625 = insertelement <64 x i16> %5620, i16 %5624, i32 59
  %5626 = extractelement <64 x i32> %5325, i32 60
  %5627 = sext i32 %5626 to i64
  %5628 = getelementptr inbounds i16, i16* %input286, i64 %5627
  %5629 = load i16, i16* %5628, align 2, !tbaa !386
  %5630 = insertelement <64 x i16> %5625, i16 %5629, i32 60
  %5631 = extractelement <64 x i32> %5325, i32 61
  %5632 = sext i32 %5631 to i64
  %5633 = getelementptr inbounds i16, i16* %input286, i64 %5632
  %5634 = load i16, i16* %5633, align 2, !tbaa !386
  %5635 = insertelement <64 x i16> %5630, i16 %5634, i32 61
  %5636 = extractelement <64 x i32> %5325, i32 62
  %5637 = sext i32 %5636 to i64
  %5638 = getelementptr inbounds i16, i16* %input286, i64 %5637
  %5639 = load i16, i16* %5638, align 2, !tbaa !386
  %5640 = insertelement <64 x i16> %5635, i16 %5639, i32 62
  %5641 = extractelement <64 x i32> %5325, i32 63
  %5642 = sext i32 %5641 to i64
  %5643 = getelementptr inbounds i16, i16* %input286, i64 %5642
  %5644 = load i16, i16* %5643, align 2, !tbaa !386
  %5645 = insertelement <64 x i16> %5640, i16 %5644, i32 63
  %5646 = add nsw i32 %blur_x.s0.x.v2.base.s12, -60
  %5647 = insertelement <64 x i32> undef, i32 %5646, i32 0
  %5648 = shufflevector <64 x i32> %5647, <64 x i32> undef, <64 x i32> zeroinitializer
  %5649 = add nsw <64 x i32> %5648, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %5650 = shufflevector <64 x i32> %5649, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %5651 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5650, <4 x i32> %53)
  %5652 = shufflevector <64 x i32> %5649, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5653 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5652, <4 x i32> %53)
  %5654 = shufflevector <64 x i32> %5649, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %5655 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5654, <4 x i32> %53)
  %5656 = shufflevector <64 x i32> %5649, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %5657 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5656, <4 x i32> %53)
  %5658 = shufflevector <64 x i32> %5649, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %5659 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5658, <4 x i32> %53)
  %5660 = shufflevector <64 x i32> %5649, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %5661 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5660, <4 x i32> %53)
  %5662 = shufflevector <64 x i32> %5649, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %5663 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5662, <4 x i32> %53)
  %5664 = shufflevector <64 x i32> %5649, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %5665 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5664, <4 x i32> %53)
  %5666 = shufflevector <64 x i32> %5649, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %5667 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5666, <4 x i32> %53)
  %5668 = shufflevector <64 x i32> %5649, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %5669 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5668, <4 x i32> %53)
  %5670 = shufflevector <64 x i32> %5649, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %5671 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5670, <4 x i32> %53)
  %5672 = shufflevector <64 x i32> %5649, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %5673 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5672, <4 x i32> %53)
  %5674 = shufflevector <64 x i32> %5649, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %5675 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5674, <4 x i32> %53)
  %5676 = shufflevector <64 x i32> %5649, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %5677 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5676, <4 x i32> %53)
  %5678 = shufflevector <64 x i32> %5649, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %5679 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5678, <4 x i32> %53)
  %5680 = shufflevector <64 x i32> %5649, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %5681 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %5680, <4 x i32> %53)
  %5682 = shufflevector <4 x i32> %5681, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %5683 = shufflevector <8 x i32> %5682, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %5684 = shufflevector <16 x i32> %5683, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %5685 = shufflevector <32 x i32> %5684, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %5686 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5651, <4 x i32> %55)
  %5687 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5653, <4 x i32> %55)
  %5688 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5655, <4 x i32> %55)
  %5689 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5657, <4 x i32> %55)
  %5690 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5659, <4 x i32> %55)
  %5691 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5661, <4 x i32> %55)
  %5692 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5663, <4 x i32> %55)
  %5693 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5665, <4 x i32> %55)
  %5694 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5667, <4 x i32> %55)
  %5695 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5669, <4 x i32> %55)
  %5696 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5671, <4 x i32> %55)
  %5697 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5673, <4 x i32> %55)
  %5698 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5675, <4 x i32> %55)
  %5699 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5677, <4 x i32> %55)
  %5700 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5679, <4 x i32> %55)
  %5701 = shufflevector <64 x i32> %5685, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %5702 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %5701, <4 x i32> %55)
  %5703 = shufflevector <4 x i32> %5686, <4 x i32> %5687, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %5704 = shufflevector <4 x i32> %5688, <4 x i32> %5689, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %5705 = shufflevector <4 x i32> %5690, <4 x i32> %5691, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %5706 = shufflevector <4 x i32> %5692, <4 x i32> %5693, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %5707 = shufflevector <4 x i32> %5694, <4 x i32> %5695, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %5708 = shufflevector <4 x i32> %5696, <4 x i32> %5697, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %5709 = shufflevector <4 x i32> %5698, <4 x i32> %5699, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %5710 = shufflevector <4 x i32> %5700, <4 x i32> %5702, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %5711 = shufflevector <8 x i32> %5703, <8 x i32> %5704, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5712 = shufflevector <8 x i32> %5705, <8 x i32> %5706, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5713 = shufflevector <8 x i32> %5707, <8 x i32> %5708, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5714 = shufflevector <8 x i32> %5709, <8 x i32> %5710, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5715 = shufflevector <16 x i32> %5711, <16 x i32> %5712, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5716 = shufflevector <16 x i32> %5713, <16 x i32> %5714, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5717 = shufflevector <32 x i32> %5715, <32 x i32> %5716, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %5718 = add nsw <64 x i32> %5717, %t276
  %5719 = extractelement <64 x i32> %5718, i32 0
  %5720 = sext i32 %5719 to i64
  %5721 = getelementptr inbounds i16, i16* %input286, i64 %5720
  %5722 = load i16, i16* %5721, align 2, !tbaa !386
  %5723 = insertelement <64 x i16> undef, i16 %5722, i32 0
  %5724 = extractelement <64 x i32> %5718, i32 1
  %5725 = sext i32 %5724 to i64
  %5726 = getelementptr inbounds i16, i16* %input286, i64 %5725
  %5727 = load i16, i16* %5726, align 2, !tbaa !386
  %5728 = insertelement <64 x i16> %5723, i16 %5727, i32 1
  %5729 = extractelement <64 x i32> %5718, i32 2
  %5730 = sext i32 %5729 to i64
  %5731 = getelementptr inbounds i16, i16* %input286, i64 %5730
  %5732 = load i16, i16* %5731, align 2, !tbaa !386
  %5733 = insertelement <64 x i16> %5728, i16 %5732, i32 2
  %5734 = extractelement <64 x i32> %5718, i32 3
  %5735 = sext i32 %5734 to i64
  %5736 = getelementptr inbounds i16, i16* %input286, i64 %5735
  %5737 = load i16, i16* %5736, align 2, !tbaa !386
  %5738 = insertelement <64 x i16> %5733, i16 %5737, i32 3
  %5739 = extractelement <64 x i32> %5718, i32 4
  %5740 = sext i32 %5739 to i64
  %5741 = getelementptr inbounds i16, i16* %input286, i64 %5740
  %5742 = load i16, i16* %5741, align 2, !tbaa !386
  %5743 = insertelement <64 x i16> %5738, i16 %5742, i32 4
  %5744 = extractelement <64 x i32> %5718, i32 5
  %5745 = sext i32 %5744 to i64
  %5746 = getelementptr inbounds i16, i16* %input286, i64 %5745
  %5747 = load i16, i16* %5746, align 2, !tbaa !386
  %5748 = insertelement <64 x i16> %5743, i16 %5747, i32 5
  %5749 = extractelement <64 x i32> %5718, i32 6
  %5750 = sext i32 %5749 to i64
  %5751 = getelementptr inbounds i16, i16* %input286, i64 %5750
  %5752 = load i16, i16* %5751, align 2, !tbaa !386
  %5753 = insertelement <64 x i16> %5748, i16 %5752, i32 6
  %5754 = extractelement <64 x i32> %5718, i32 7
  %5755 = sext i32 %5754 to i64
  %5756 = getelementptr inbounds i16, i16* %input286, i64 %5755
  %5757 = load i16, i16* %5756, align 2, !tbaa !386
  %5758 = insertelement <64 x i16> %5753, i16 %5757, i32 7
  %5759 = extractelement <64 x i32> %5718, i32 8
  %5760 = sext i32 %5759 to i64
  %5761 = getelementptr inbounds i16, i16* %input286, i64 %5760
  %5762 = load i16, i16* %5761, align 2, !tbaa !386
  %5763 = insertelement <64 x i16> %5758, i16 %5762, i32 8
  %5764 = extractelement <64 x i32> %5718, i32 9
  %5765 = sext i32 %5764 to i64
  %5766 = getelementptr inbounds i16, i16* %input286, i64 %5765
  %5767 = load i16, i16* %5766, align 2, !tbaa !386
  %5768 = insertelement <64 x i16> %5763, i16 %5767, i32 9
  %5769 = extractelement <64 x i32> %5718, i32 10
  %5770 = sext i32 %5769 to i64
  %5771 = getelementptr inbounds i16, i16* %input286, i64 %5770
  %5772 = load i16, i16* %5771, align 2, !tbaa !386
  %5773 = insertelement <64 x i16> %5768, i16 %5772, i32 10
  %5774 = extractelement <64 x i32> %5718, i32 11
  %5775 = sext i32 %5774 to i64
  %5776 = getelementptr inbounds i16, i16* %input286, i64 %5775
  %5777 = load i16, i16* %5776, align 2, !tbaa !386
  %5778 = insertelement <64 x i16> %5773, i16 %5777, i32 11
  %5779 = extractelement <64 x i32> %5718, i32 12
  %5780 = sext i32 %5779 to i64
  %5781 = getelementptr inbounds i16, i16* %input286, i64 %5780
  %5782 = load i16, i16* %5781, align 2, !tbaa !386
  %5783 = insertelement <64 x i16> %5778, i16 %5782, i32 12
  %5784 = extractelement <64 x i32> %5718, i32 13
  %5785 = sext i32 %5784 to i64
  %5786 = getelementptr inbounds i16, i16* %input286, i64 %5785
  %5787 = load i16, i16* %5786, align 2, !tbaa !386
  %5788 = insertelement <64 x i16> %5783, i16 %5787, i32 13
  %5789 = extractelement <64 x i32> %5718, i32 14
  %5790 = sext i32 %5789 to i64
  %5791 = getelementptr inbounds i16, i16* %input286, i64 %5790
  %5792 = load i16, i16* %5791, align 2, !tbaa !386
  %5793 = insertelement <64 x i16> %5788, i16 %5792, i32 14
  %5794 = extractelement <64 x i32> %5718, i32 15
  %5795 = sext i32 %5794 to i64
  %5796 = getelementptr inbounds i16, i16* %input286, i64 %5795
  %5797 = load i16, i16* %5796, align 2, !tbaa !386
  %5798 = insertelement <64 x i16> %5793, i16 %5797, i32 15
  %5799 = extractelement <64 x i32> %5718, i32 16
  %5800 = sext i32 %5799 to i64
  %5801 = getelementptr inbounds i16, i16* %input286, i64 %5800
  %5802 = load i16, i16* %5801, align 2, !tbaa !386
  %5803 = insertelement <64 x i16> %5798, i16 %5802, i32 16
  %5804 = extractelement <64 x i32> %5718, i32 17
  %5805 = sext i32 %5804 to i64
  %5806 = getelementptr inbounds i16, i16* %input286, i64 %5805
  %5807 = load i16, i16* %5806, align 2, !tbaa !386
  %5808 = insertelement <64 x i16> %5803, i16 %5807, i32 17
  %5809 = extractelement <64 x i32> %5718, i32 18
  %5810 = sext i32 %5809 to i64
  %5811 = getelementptr inbounds i16, i16* %input286, i64 %5810
  %5812 = load i16, i16* %5811, align 2, !tbaa !386
  %5813 = insertelement <64 x i16> %5808, i16 %5812, i32 18
  %5814 = extractelement <64 x i32> %5718, i32 19
  %5815 = sext i32 %5814 to i64
  %5816 = getelementptr inbounds i16, i16* %input286, i64 %5815
  %5817 = load i16, i16* %5816, align 2, !tbaa !386
  %5818 = insertelement <64 x i16> %5813, i16 %5817, i32 19
  %5819 = extractelement <64 x i32> %5718, i32 20
  %5820 = sext i32 %5819 to i64
  %5821 = getelementptr inbounds i16, i16* %input286, i64 %5820
  %5822 = load i16, i16* %5821, align 2, !tbaa !386
  %5823 = insertelement <64 x i16> %5818, i16 %5822, i32 20
  %5824 = extractelement <64 x i32> %5718, i32 21
  %5825 = sext i32 %5824 to i64
  %5826 = getelementptr inbounds i16, i16* %input286, i64 %5825
  %5827 = load i16, i16* %5826, align 2, !tbaa !386
  %5828 = insertelement <64 x i16> %5823, i16 %5827, i32 21
  %5829 = extractelement <64 x i32> %5718, i32 22
  %5830 = sext i32 %5829 to i64
  %5831 = getelementptr inbounds i16, i16* %input286, i64 %5830
  %5832 = load i16, i16* %5831, align 2, !tbaa !386
  %5833 = insertelement <64 x i16> %5828, i16 %5832, i32 22
  %5834 = extractelement <64 x i32> %5718, i32 23
  %5835 = sext i32 %5834 to i64
  %5836 = getelementptr inbounds i16, i16* %input286, i64 %5835
  %5837 = load i16, i16* %5836, align 2, !tbaa !386
  %5838 = insertelement <64 x i16> %5833, i16 %5837, i32 23
  %5839 = extractelement <64 x i32> %5718, i32 24
  %5840 = sext i32 %5839 to i64
  %5841 = getelementptr inbounds i16, i16* %input286, i64 %5840
  %5842 = load i16, i16* %5841, align 2, !tbaa !386
  %5843 = insertelement <64 x i16> %5838, i16 %5842, i32 24
  %5844 = extractelement <64 x i32> %5718, i32 25
  %5845 = sext i32 %5844 to i64
  %5846 = getelementptr inbounds i16, i16* %input286, i64 %5845
  %5847 = load i16, i16* %5846, align 2, !tbaa !386
  %5848 = insertelement <64 x i16> %5843, i16 %5847, i32 25
  %5849 = extractelement <64 x i32> %5718, i32 26
  %5850 = sext i32 %5849 to i64
  %5851 = getelementptr inbounds i16, i16* %input286, i64 %5850
  %5852 = load i16, i16* %5851, align 2, !tbaa !386
  %5853 = insertelement <64 x i16> %5848, i16 %5852, i32 26
  %5854 = extractelement <64 x i32> %5718, i32 27
  %5855 = sext i32 %5854 to i64
  %5856 = getelementptr inbounds i16, i16* %input286, i64 %5855
  %5857 = load i16, i16* %5856, align 2, !tbaa !386
  %5858 = insertelement <64 x i16> %5853, i16 %5857, i32 27
  %5859 = extractelement <64 x i32> %5718, i32 28
  %5860 = sext i32 %5859 to i64
  %5861 = getelementptr inbounds i16, i16* %input286, i64 %5860
  %5862 = load i16, i16* %5861, align 2, !tbaa !386
  %5863 = insertelement <64 x i16> %5858, i16 %5862, i32 28
  %5864 = extractelement <64 x i32> %5718, i32 29
  %5865 = sext i32 %5864 to i64
  %5866 = getelementptr inbounds i16, i16* %input286, i64 %5865
  %5867 = load i16, i16* %5866, align 2, !tbaa !386
  %5868 = insertelement <64 x i16> %5863, i16 %5867, i32 29
  %5869 = extractelement <64 x i32> %5718, i32 30
  %5870 = sext i32 %5869 to i64
  %5871 = getelementptr inbounds i16, i16* %input286, i64 %5870
  %5872 = load i16, i16* %5871, align 2, !tbaa !386
  %5873 = insertelement <64 x i16> %5868, i16 %5872, i32 30
  %5874 = extractelement <64 x i32> %5718, i32 31
  %5875 = sext i32 %5874 to i64
  %5876 = getelementptr inbounds i16, i16* %input286, i64 %5875
  %5877 = load i16, i16* %5876, align 2, !tbaa !386
  %5878 = insertelement <64 x i16> %5873, i16 %5877, i32 31
  %5879 = extractelement <64 x i32> %5718, i32 32
  %5880 = sext i32 %5879 to i64
  %5881 = getelementptr inbounds i16, i16* %input286, i64 %5880
  %5882 = load i16, i16* %5881, align 2, !tbaa !386
  %5883 = insertelement <64 x i16> %5878, i16 %5882, i32 32
  %5884 = extractelement <64 x i32> %5718, i32 33
  %5885 = sext i32 %5884 to i64
  %5886 = getelementptr inbounds i16, i16* %input286, i64 %5885
  %5887 = load i16, i16* %5886, align 2, !tbaa !386
  %5888 = insertelement <64 x i16> %5883, i16 %5887, i32 33
  %5889 = extractelement <64 x i32> %5718, i32 34
  %5890 = sext i32 %5889 to i64
  %5891 = getelementptr inbounds i16, i16* %input286, i64 %5890
  %5892 = load i16, i16* %5891, align 2, !tbaa !386
  %5893 = insertelement <64 x i16> %5888, i16 %5892, i32 34
  %5894 = extractelement <64 x i32> %5718, i32 35
  %5895 = sext i32 %5894 to i64
  %5896 = getelementptr inbounds i16, i16* %input286, i64 %5895
  %5897 = load i16, i16* %5896, align 2, !tbaa !386
  %5898 = insertelement <64 x i16> %5893, i16 %5897, i32 35
  %5899 = extractelement <64 x i32> %5718, i32 36
  %5900 = sext i32 %5899 to i64
  %5901 = getelementptr inbounds i16, i16* %input286, i64 %5900
  %5902 = load i16, i16* %5901, align 2, !tbaa !386
  %5903 = insertelement <64 x i16> %5898, i16 %5902, i32 36
  %5904 = extractelement <64 x i32> %5718, i32 37
  %5905 = sext i32 %5904 to i64
  %5906 = getelementptr inbounds i16, i16* %input286, i64 %5905
  %5907 = load i16, i16* %5906, align 2, !tbaa !386
  %5908 = insertelement <64 x i16> %5903, i16 %5907, i32 37
  %5909 = extractelement <64 x i32> %5718, i32 38
  %5910 = sext i32 %5909 to i64
  %5911 = getelementptr inbounds i16, i16* %input286, i64 %5910
  %5912 = load i16, i16* %5911, align 2, !tbaa !386
  %5913 = insertelement <64 x i16> %5908, i16 %5912, i32 38
  %5914 = extractelement <64 x i32> %5718, i32 39
  %5915 = sext i32 %5914 to i64
  %5916 = getelementptr inbounds i16, i16* %input286, i64 %5915
  %5917 = load i16, i16* %5916, align 2, !tbaa !386
  %5918 = insertelement <64 x i16> %5913, i16 %5917, i32 39
  %5919 = extractelement <64 x i32> %5718, i32 40
  %5920 = sext i32 %5919 to i64
  %5921 = getelementptr inbounds i16, i16* %input286, i64 %5920
  %5922 = load i16, i16* %5921, align 2, !tbaa !386
  %5923 = insertelement <64 x i16> %5918, i16 %5922, i32 40
  %5924 = extractelement <64 x i32> %5718, i32 41
  %5925 = sext i32 %5924 to i64
  %5926 = getelementptr inbounds i16, i16* %input286, i64 %5925
  %5927 = load i16, i16* %5926, align 2, !tbaa !386
  %5928 = insertelement <64 x i16> %5923, i16 %5927, i32 41
  %5929 = extractelement <64 x i32> %5718, i32 42
  %5930 = sext i32 %5929 to i64
  %5931 = getelementptr inbounds i16, i16* %input286, i64 %5930
  %5932 = load i16, i16* %5931, align 2, !tbaa !386
  %5933 = insertelement <64 x i16> %5928, i16 %5932, i32 42
  %5934 = extractelement <64 x i32> %5718, i32 43
  %5935 = sext i32 %5934 to i64
  %5936 = getelementptr inbounds i16, i16* %input286, i64 %5935
  %5937 = load i16, i16* %5936, align 2, !tbaa !386
  %5938 = insertelement <64 x i16> %5933, i16 %5937, i32 43
  %5939 = extractelement <64 x i32> %5718, i32 44
  %5940 = sext i32 %5939 to i64
  %5941 = getelementptr inbounds i16, i16* %input286, i64 %5940
  %5942 = load i16, i16* %5941, align 2, !tbaa !386
  %5943 = insertelement <64 x i16> %5938, i16 %5942, i32 44
  %5944 = extractelement <64 x i32> %5718, i32 45
  %5945 = sext i32 %5944 to i64
  %5946 = getelementptr inbounds i16, i16* %input286, i64 %5945
  %5947 = load i16, i16* %5946, align 2, !tbaa !386
  %5948 = insertelement <64 x i16> %5943, i16 %5947, i32 45
  %5949 = extractelement <64 x i32> %5718, i32 46
  %5950 = sext i32 %5949 to i64
  %5951 = getelementptr inbounds i16, i16* %input286, i64 %5950
  %5952 = load i16, i16* %5951, align 2, !tbaa !386
  %5953 = insertelement <64 x i16> %5948, i16 %5952, i32 46
  %5954 = extractelement <64 x i32> %5718, i32 47
  %5955 = sext i32 %5954 to i64
  %5956 = getelementptr inbounds i16, i16* %input286, i64 %5955
  %5957 = load i16, i16* %5956, align 2, !tbaa !386
  %5958 = insertelement <64 x i16> %5953, i16 %5957, i32 47
  %5959 = extractelement <64 x i32> %5718, i32 48
  %5960 = sext i32 %5959 to i64
  %5961 = getelementptr inbounds i16, i16* %input286, i64 %5960
  %5962 = load i16, i16* %5961, align 2, !tbaa !386
  %5963 = insertelement <64 x i16> %5958, i16 %5962, i32 48
  %5964 = extractelement <64 x i32> %5718, i32 49
  %5965 = sext i32 %5964 to i64
  %5966 = getelementptr inbounds i16, i16* %input286, i64 %5965
  %5967 = load i16, i16* %5966, align 2, !tbaa !386
  %5968 = insertelement <64 x i16> %5963, i16 %5967, i32 49
  %5969 = extractelement <64 x i32> %5718, i32 50
  %5970 = sext i32 %5969 to i64
  %5971 = getelementptr inbounds i16, i16* %input286, i64 %5970
  %5972 = load i16, i16* %5971, align 2, !tbaa !386
  %5973 = insertelement <64 x i16> %5968, i16 %5972, i32 50
  %5974 = extractelement <64 x i32> %5718, i32 51
  %5975 = sext i32 %5974 to i64
  %5976 = getelementptr inbounds i16, i16* %input286, i64 %5975
  %5977 = load i16, i16* %5976, align 2, !tbaa !386
  %5978 = insertelement <64 x i16> %5973, i16 %5977, i32 51
  %5979 = extractelement <64 x i32> %5718, i32 52
  %5980 = sext i32 %5979 to i64
  %5981 = getelementptr inbounds i16, i16* %input286, i64 %5980
  %5982 = load i16, i16* %5981, align 2, !tbaa !386
  %5983 = insertelement <64 x i16> %5978, i16 %5982, i32 52
  %5984 = extractelement <64 x i32> %5718, i32 53
  %5985 = sext i32 %5984 to i64
  %5986 = getelementptr inbounds i16, i16* %input286, i64 %5985
  %5987 = load i16, i16* %5986, align 2, !tbaa !386
  %5988 = insertelement <64 x i16> %5983, i16 %5987, i32 53
  %5989 = extractelement <64 x i32> %5718, i32 54
  %5990 = sext i32 %5989 to i64
  %5991 = getelementptr inbounds i16, i16* %input286, i64 %5990
  %5992 = load i16, i16* %5991, align 2, !tbaa !386
  %5993 = insertelement <64 x i16> %5988, i16 %5992, i32 54
  %5994 = extractelement <64 x i32> %5718, i32 55
  %5995 = sext i32 %5994 to i64
  %5996 = getelementptr inbounds i16, i16* %input286, i64 %5995
  %5997 = load i16, i16* %5996, align 2, !tbaa !386
  %5998 = insertelement <64 x i16> %5993, i16 %5997, i32 55
  %5999 = extractelement <64 x i32> %5718, i32 56
  %6000 = sext i32 %5999 to i64
  %6001 = getelementptr inbounds i16, i16* %input286, i64 %6000
  %6002 = load i16, i16* %6001, align 2, !tbaa !386
  %6003 = insertelement <64 x i16> %5998, i16 %6002, i32 56
  %6004 = extractelement <64 x i32> %5718, i32 57
  %6005 = sext i32 %6004 to i64
  %6006 = getelementptr inbounds i16, i16* %input286, i64 %6005
  %6007 = load i16, i16* %6006, align 2, !tbaa !386
  %6008 = insertelement <64 x i16> %6003, i16 %6007, i32 57
  %6009 = extractelement <64 x i32> %5718, i32 58
  %6010 = sext i32 %6009 to i64
  %6011 = getelementptr inbounds i16, i16* %input286, i64 %6010
  %6012 = load i16, i16* %6011, align 2, !tbaa !386
  %6013 = insertelement <64 x i16> %6008, i16 %6012, i32 58
  %6014 = extractelement <64 x i32> %5718, i32 59
  %6015 = sext i32 %6014 to i64
  %6016 = getelementptr inbounds i16, i16* %input286, i64 %6015
  %6017 = load i16, i16* %6016, align 2, !tbaa !386
  %6018 = insertelement <64 x i16> %6013, i16 %6017, i32 59
  %6019 = extractelement <64 x i32> %5718, i32 60
  %6020 = sext i32 %6019 to i64
  %6021 = getelementptr inbounds i16, i16* %input286, i64 %6020
  %6022 = load i16, i16* %6021, align 2, !tbaa !386
  %6023 = insertelement <64 x i16> %6018, i16 %6022, i32 60
  %6024 = extractelement <64 x i32> %5718, i32 61
  %6025 = sext i32 %6024 to i64
  %6026 = getelementptr inbounds i16, i16* %input286, i64 %6025
  %6027 = load i16, i16* %6026, align 2, !tbaa !386
  %6028 = insertelement <64 x i16> %6023, i16 %6027, i32 61
  %6029 = extractelement <64 x i32> %5718, i32 62
  %6030 = sext i32 %6029 to i64
  %6031 = getelementptr inbounds i16, i16* %input286, i64 %6030
  %6032 = load i16, i16* %6031, align 2, !tbaa !386
  %6033 = insertelement <64 x i16> %6028, i16 %6032, i32 62
  %6034 = extractelement <64 x i32> %5718, i32 63
  %6035 = sext i32 %6034 to i64
  %6036 = getelementptr inbounds i16, i16* %input286, i64 %6035
  %6037 = load i16, i16* %6036, align 2, !tbaa !386
  %6038 = insertelement <64 x i16> %6033, i16 %6037, i32 63
  %6039 = add nsw i32 %blur_x.s0.x.v2.base.s12, -61
  %6040 = insertelement <64 x i32> undef, i32 %6039, i32 0
  %6041 = shufflevector <64 x i32> %6040, <64 x i32> undef, <64 x i32> zeroinitializer
  %6042 = add nsw <64 x i32> %6041, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %6043 = shufflevector <64 x i32> %6042, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %6044 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6043, <4 x i32> %53)
  %6045 = shufflevector <64 x i32> %6042, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %6046 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6045, <4 x i32> %53)
  %6047 = shufflevector <64 x i32> %6042, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %6048 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6047, <4 x i32> %53)
  %6049 = shufflevector <64 x i32> %6042, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %6050 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6049, <4 x i32> %53)
  %6051 = shufflevector <64 x i32> %6042, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %6052 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6051, <4 x i32> %53)
  %6053 = shufflevector <64 x i32> %6042, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %6054 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6053, <4 x i32> %53)
  %6055 = shufflevector <64 x i32> %6042, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %6056 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6055, <4 x i32> %53)
  %6057 = shufflevector <64 x i32> %6042, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %6058 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6057, <4 x i32> %53)
  %6059 = shufflevector <64 x i32> %6042, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %6060 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6059, <4 x i32> %53)
  %6061 = shufflevector <64 x i32> %6042, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %6062 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6061, <4 x i32> %53)
  %6063 = shufflevector <64 x i32> %6042, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %6064 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6063, <4 x i32> %53)
  %6065 = shufflevector <64 x i32> %6042, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %6066 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6065, <4 x i32> %53)
  %6067 = shufflevector <64 x i32> %6042, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %6068 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6067, <4 x i32> %53)
  %6069 = shufflevector <64 x i32> %6042, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %6070 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6069, <4 x i32> %53)
  %6071 = shufflevector <64 x i32> %6042, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %6072 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6071, <4 x i32> %53)
  %6073 = shufflevector <64 x i32> %6042, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %6074 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6073, <4 x i32> %53)
  %6075 = shufflevector <4 x i32> %6074, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %6076 = shufflevector <8 x i32> %6075, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %6077 = shufflevector <16 x i32> %6076, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %6078 = shufflevector <32 x i32> %6077, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %6079 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6044, <4 x i32> %55)
  %6080 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6046, <4 x i32> %55)
  %6081 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6048, <4 x i32> %55)
  %6082 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6050, <4 x i32> %55)
  %6083 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6052, <4 x i32> %55)
  %6084 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6054, <4 x i32> %55)
  %6085 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6056, <4 x i32> %55)
  %6086 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6058, <4 x i32> %55)
  %6087 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6060, <4 x i32> %55)
  %6088 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6062, <4 x i32> %55)
  %6089 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6064, <4 x i32> %55)
  %6090 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6066, <4 x i32> %55)
  %6091 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6068, <4 x i32> %55)
  %6092 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6070, <4 x i32> %55)
  %6093 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6072, <4 x i32> %55)
  %6094 = shufflevector <64 x i32> %6078, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %6095 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6094, <4 x i32> %55)
  %6096 = shufflevector <4 x i32> %6079, <4 x i32> %6080, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6097 = shufflevector <4 x i32> %6081, <4 x i32> %6082, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6098 = shufflevector <4 x i32> %6083, <4 x i32> %6084, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6099 = shufflevector <4 x i32> %6085, <4 x i32> %6086, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6100 = shufflevector <4 x i32> %6087, <4 x i32> %6088, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6101 = shufflevector <4 x i32> %6089, <4 x i32> %6090, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6102 = shufflevector <4 x i32> %6091, <4 x i32> %6092, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6103 = shufflevector <4 x i32> %6093, <4 x i32> %6095, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6104 = shufflevector <8 x i32> %6096, <8 x i32> %6097, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6105 = shufflevector <8 x i32> %6098, <8 x i32> %6099, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6106 = shufflevector <8 x i32> %6100, <8 x i32> %6101, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6107 = shufflevector <8 x i32> %6102, <8 x i32> %6103, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6108 = shufflevector <16 x i32> %6104, <16 x i32> %6105, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6109 = shufflevector <16 x i32> %6106, <16 x i32> %6107, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6110 = shufflevector <32 x i32> %6108, <32 x i32> %6109, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %6111 = add nsw <64 x i32> %6110, %t276
  %6112 = extractelement <64 x i32> %6111, i32 0
  %6113 = sext i32 %6112 to i64
  %6114 = getelementptr inbounds i16, i16* %input286, i64 %6113
  %6115 = load i16, i16* %6114, align 2, !tbaa !386
  %6116 = insertelement <64 x i16> undef, i16 %6115, i32 0
  %6117 = extractelement <64 x i32> %6111, i32 1
  %6118 = sext i32 %6117 to i64
  %6119 = getelementptr inbounds i16, i16* %input286, i64 %6118
  %6120 = load i16, i16* %6119, align 2, !tbaa !386
  %6121 = insertelement <64 x i16> %6116, i16 %6120, i32 1
  %6122 = extractelement <64 x i32> %6111, i32 2
  %6123 = sext i32 %6122 to i64
  %6124 = getelementptr inbounds i16, i16* %input286, i64 %6123
  %6125 = load i16, i16* %6124, align 2, !tbaa !386
  %6126 = insertelement <64 x i16> %6121, i16 %6125, i32 2
  %6127 = extractelement <64 x i32> %6111, i32 3
  %6128 = sext i32 %6127 to i64
  %6129 = getelementptr inbounds i16, i16* %input286, i64 %6128
  %6130 = load i16, i16* %6129, align 2, !tbaa !386
  %6131 = insertelement <64 x i16> %6126, i16 %6130, i32 3
  %6132 = extractelement <64 x i32> %6111, i32 4
  %6133 = sext i32 %6132 to i64
  %6134 = getelementptr inbounds i16, i16* %input286, i64 %6133
  %6135 = load i16, i16* %6134, align 2, !tbaa !386
  %6136 = insertelement <64 x i16> %6131, i16 %6135, i32 4
  %6137 = extractelement <64 x i32> %6111, i32 5
  %6138 = sext i32 %6137 to i64
  %6139 = getelementptr inbounds i16, i16* %input286, i64 %6138
  %6140 = load i16, i16* %6139, align 2, !tbaa !386
  %6141 = insertelement <64 x i16> %6136, i16 %6140, i32 5
  %6142 = extractelement <64 x i32> %6111, i32 6
  %6143 = sext i32 %6142 to i64
  %6144 = getelementptr inbounds i16, i16* %input286, i64 %6143
  %6145 = load i16, i16* %6144, align 2, !tbaa !386
  %6146 = insertelement <64 x i16> %6141, i16 %6145, i32 6
  %6147 = extractelement <64 x i32> %6111, i32 7
  %6148 = sext i32 %6147 to i64
  %6149 = getelementptr inbounds i16, i16* %input286, i64 %6148
  %6150 = load i16, i16* %6149, align 2, !tbaa !386
  %6151 = insertelement <64 x i16> %6146, i16 %6150, i32 7
  %6152 = extractelement <64 x i32> %6111, i32 8
  %6153 = sext i32 %6152 to i64
  %6154 = getelementptr inbounds i16, i16* %input286, i64 %6153
  %6155 = load i16, i16* %6154, align 2, !tbaa !386
  %6156 = insertelement <64 x i16> %6151, i16 %6155, i32 8
  %6157 = extractelement <64 x i32> %6111, i32 9
  %6158 = sext i32 %6157 to i64
  %6159 = getelementptr inbounds i16, i16* %input286, i64 %6158
  %6160 = load i16, i16* %6159, align 2, !tbaa !386
  %6161 = insertelement <64 x i16> %6156, i16 %6160, i32 9
  %6162 = extractelement <64 x i32> %6111, i32 10
  %6163 = sext i32 %6162 to i64
  %6164 = getelementptr inbounds i16, i16* %input286, i64 %6163
  %6165 = load i16, i16* %6164, align 2, !tbaa !386
  %6166 = insertelement <64 x i16> %6161, i16 %6165, i32 10
  %6167 = extractelement <64 x i32> %6111, i32 11
  %6168 = sext i32 %6167 to i64
  %6169 = getelementptr inbounds i16, i16* %input286, i64 %6168
  %6170 = load i16, i16* %6169, align 2, !tbaa !386
  %6171 = insertelement <64 x i16> %6166, i16 %6170, i32 11
  %6172 = extractelement <64 x i32> %6111, i32 12
  %6173 = sext i32 %6172 to i64
  %6174 = getelementptr inbounds i16, i16* %input286, i64 %6173
  %6175 = load i16, i16* %6174, align 2, !tbaa !386
  %6176 = insertelement <64 x i16> %6171, i16 %6175, i32 12
  %6177 = extractelement <64 x i32> %6111, i32 13
  %6178 = sext i32 %6177 to i64
  %6179 = getelementptr inbounds i16, i16* %input286, i64 %6178
  %6180 = load i16, i16* %6179, align 2, !tbaa !386
  %6181 = insertelement <64 x i16> %6176, i16 %6180, i32 13
  %6182 = extractelement <64 x i32> %6111, i32 14
  %6183 = sext i32 %6182 to i64
  %6184 = getelementptr inbounds i16, i16* %input286, i64 %6183
  %6185 = load i16, i16* %6184, align 2, !tbaa !386
  %6186 = insertelement <64 x i16> %6181, i16 %6185, i32 14
  %6187 = extractelement <64 x i32> %6111, i32 15
  %6188 = sext i32 %6187 to i64
  %6189 = getelementptr inbounds i16, i16* %input286, i64 %6188
  %6190 = load i16, i16* %6189, align 2, !tbaa !386
  %6191 = insertelement <64 x i16> %6186, i16 %6190, i32 15
  %6192 = extractelement <64 x i32> %6111, i32 16
  %6193 = sext i32 %6192 to i64
  %6194 = getelementptr inbounds i16, i16* %input286, i64 %6193
  %6195 = load i16, i16* %6194, align 2, !tbaa !386
  %6196 = insertelement <64 x i16> %6191, i16 %6195, i32 16
  %6197 = extractelement <64 x i32> %6111, i32 17
  %6198 = sext i32 %6197 to i64
  %6199 = getelementptr inbounds i16, i16* %input286, i64 %6198
  %6200 = load i16, i16* %6199, align 2, !tbaa !386
  %6201 = insertelement <64 x i16> %6196, i16 %6200, i32 17
  %6202 = extractelement <64 x i32> %6111, i32 18
  %6203 = sext i32 %6202 to i64
  %6204 = getelementptr inbounds i16, i16* %input286, i64 %6203
  %6205 = load i16, i16* %6204, align 2, !tbaa !386
  %6206 = insertelement <64 x i16> %6201, i16 %6205, i32 18
  %6207 = extractelement <64 x i32> %6111, i32 19
  %6208 = sext i32 %6207 to i64
  %6209 = getelementptr inbounds i16, i16* %input286, i64 %6208
  %6210 = load i16, i16* %6209, align 2, !tbaa !386
  %6211 = insertelement <64 x i16> %6206, i16 %6210, i32 19
  %6212 = extractelement <64 x i32> %6111, i32 20
  %6213 = sext i32 %6212 to i64
  %6214 = getelementptr inbounds i16, i16* %input286, i64 %6213
  %6215 = load i16, i16* %6214, align 2, !tbaa !386
  %6216 = insertelement <64 x i16> %6211, i16 %6215, i32 20
  %6217 = extractelement <64 x i32> %6111, i32 21
  %6218 = sext i32 %6217 to i64
  %6219 = getelementptr inbounds i16, i16* %input286, i64 %6218
  %6220 = load i16, i16* %6219, align 2, !tbaa !386
  %6221 = insertelement <64 x i16> %6216, i16 %6220, i32 21
  %6222 = extractelement <64 x i32> %6111, i32 22
  %6223 = sext i32 %6222 to i64
  %6224 = getelementptr inbounds i16, i16* %input286, i64 %6223
  %6225 = load i16, i16* %6224, align 2, !tbaa !386
  %6226 = insertelement <64 x i16> %6221, i16 %6225, i32 22
  %6227 = extractelement <64 x i32> %6111, i32 23
  %6228 = sext i32 %6227 to i64
  %6229 = getelementptr inbounds i16, i16* %input286, i64 %6228
  %6230 = load i16, i16* %6229, align 2, !tbaa !386
  %6231 = insertelement <64 x i16> %6226, i16 %6230, i32 23
  %6232 = extractelement <64 x i32> %6111, i32 24
  %6233 = sext i32 %6232 to i64
  %6234 = getelementptr inbounds i16, i16* %input286, i64 %6233
  %6235 = load i16, i16* %6234, align 2, !tbaa !386
  %6236 = insertelement <64 x i16> %6231, i16 %6235, i32 24
  %6237 = extractelement <64 x i32> %6111, i32 25
  %6238 = sext i32 %6237 to i64
  %6239 = getelementptr inbounds i16, i16* %input286, i64 %6238
  %6240 = load i16, i16* %6239, align 2, !tbaa !386
  %6241 = insertelement <64 x i16> %6236, i16 %6240, i32 25
  %6242 = extractelement <64 x i32> %6111, i32 26
  %6243 = sext i32 %6242 to i64
  %6244 = getelementptr inbounds i16, i16* %input286, i64 %6243
  %6245 = load i16, i16* %6244, align 2, !tbaa !386
  %6246 = insertelement <64 x i16> %6241, i16 %6245, i32 26
  %6247 = extractelement <64 x i32> %6111, i32 27
  %6248 = sext i32 %6247 to i64
  %6249 = getelementptr inbounds i16, i16* %input286, i64 %6248
  %6250 = load i16, i16* %6249, align 2, !tbaa !386
  %6251 = insertelement <64 x i16> %6246, i16 %6250, i32 27
  %6252 = extractelement <64 x i32> %6111, i32 28
  %6253 = sext i32 %6252 to i64
  %6254 = getelementptr inbounds i16, i16* %input286, i64 %6253
  %6255 = load i16, i16* %6254, align 2, !tbaa !386
  %6256 = insertelement <64 x i16> %6251, i16 %6255, i32 28
  %6257 = extractelement <64 x i32> %6111, i32 29
  %6258 = sext i32 %6257 to i64
  %6259 = getelementptr inbounds i16, i16* %input286, i64 %6258
  %6260 = load i16, i16* %6259, align 2, !tbaa !386
  %6261 = insertelement <64 x i16> %6256, i16 %6260, i32 29
  %6262 = extractelement <64 x i32> %6111, i32 30
  %6263 = sext i32 %6262 to i64
  %6264 = getelementptr inbounds i16, i16* %input286, i64 %6263
  %6265 = load i16, i16* %6264, align 2, !tbaa !386
  %6266 = insertelement <64 x i16> %6261, i16 %6265, i32 30
  %6267 = extractelement <64 x i32> %6111, i32 31
  %6268 = sext i32 %6267 to i64
  %6269 = getelementptr inbounds i16, i16* %input286, i64 %6268
  %6270 = load i16, i16* %6269, align 2, !tbaa !386
  %6271 = insertelement <64 x i16> %6266, i16 %6270, i32 31
  %6272 = extractelement <64 x i32> %6111, i32 32
  %6273 = sext i32 %6272 to i64
  %6274 = getelementptr inbounds i16, i16* %input286, i64 %6273
  %6275 = load i16, i16* %6274, align 2, !tbaa !386
  %6276 = insertelement <64 x i16> %6271, i16 %6275, i32 32
  %6277 = extractelement <64 x i32> %6111, i32 33
  %6278 = sext i32 %6277 to i64
  %6279 = getelementptr inbounds i16, i16* %input286, i64 %6278
  %6280 = load i16, i16* %6279, align 2, !tbaa !386
  %6281 = insertelement <64 x i16> %6276, i16 %6280, i32 33
  %6282 = extractelement <64 x i32> %6111, i32 34
  %6283 = sext i32 %6282 to i64
  %6284 = getelementptr inbounds i16, i16* %input286, i64 %6283
  %6285 = load i16, i16* %6284, align 2, !tbaa !386
  %6286 = insertelement <64 x i16> %6281, i16 %6285, i32 34
  %6287 = extractelement <64 x i32> %6111, i32 35
  %6288 = sext i32 %6287 to i64
  %6289 = getelementptr inbounds i16, i16* %input286, i64 %6288
  %6290 = load i16, i16* %6289, align 2, !tbaa !386
  %6291 = insertelement <64 x i16> %6286, i16 %6290, i32 35
  %6292 = extractelement <64 x i32> %6111, i32 36
  %6293 = sext i32 %6292 to i64
  %6294 = getelementptr inbounds i16, i16* %input286, i64 %6293
  %6295 = load i16, i16* %6294, align 2, !tbaa !386
  %6296 = insertelement <64 x i16> %6291, i16 %6295, i32 36
  %6297 = extractelement <64 x i32> %6111, i32 37
  %6298 = sext i32 %6297 to i64
  %6299 = getelementptr inbounds i16, i16* %input286, i64 %6298
  %6300 = load i16, i16* %6299, align 2, !tbaa !386
  %6301 = insertelement <64 x i16> %6296, i16 %6300, i32 37
  %6302 = extractelement <64 x i32> %6111, i32 38
  %6303 = sext i32 %6302 to i64
  %6304 = getelementptr inbounds i16, i16* %input286, i64 %6303
  %6305 = load i16, i16* %6304, align 2, !tbaa !386
  %6306 = insertelement <64 x i16> %6301, i16 %6305, i32 38
  %6307 = extractelement <64 x i32> %6111, i32 39
  %6308 = sext i32 %6307 to i64
  %6309 = getelementptr inbounds i16, i16* %input286, i64 %6308
  %6310 = load i16, i16* %6309, align 2, !tbaa !386
  %6311 = insertelement <64 x i16> %6306, i16 %6310, i32 39
  %6312 = extractelement <64 x i32> %6111, i32 40
  %6313 = sext i32 %6312 to i64
  %6314 = getelementptr inbounds i16, i16* %input286, i64 %6313
  %6315 = load i16, i16* %6314, align 2, !tbaa !386
  %6316 = insertelement <64 x i16> %6311, i16 %6315, i32 40
  %6317 = extractelement <64 x i32> %6111, i32 41
  %6318 = sext i32 %6317 to i64
  %6319 = getelementptr inbounds i16, i16* %input286, i64 %6318
  %6320 = load i16, i16* %6319, align 2, !tbaa !386
  %6321 = insertelement <64 x i16> %6316, i16 %6320, i32 41
  %6322 = extractelement <64 x i32> %6111, i32 42
  %6323 = sext i32 %6322 to i64
  %6324 = getelementptr inbounds i16, i16* %input286, i64 %6323
  %6325 = load i16, i16* %6324, align 2, !tbaa !386
  %6326 = insertelement <64 x i16> %6321, i16 %6325, i32 42
  %6327 = extractelement <64 x i32> %6111, i32 43
  %6328 = sext i32 %6327 to i64
  %6329 = getelementptr inbounds i16, i16* %input286, i64 %6328
  %6330 = load i16, i16* %6329, align 2, !tbaa !386
  %6331 = insertelement <64 x i16> %6326, i16 %6330, i32 43
  %6332 = extractelement <64 x i32> %6111, i32 44
  %6333 = sext i32 %6332 to i64
  %6334 = getelementptr inbounds i16, i16* %input286, i64 %6333
  %6335 = load i16, i16* %6334, align 2, !tbaa !386
  %6336 = insertelement <64 x i16> %6331, i16 %6335, i32 44
  %6337 = extractelement <64 x i32> %6111, i32 45
  %6338 = sext i32 %6337 to i64
  %6339 = getelementptr inbounds i16, i16* %input286, i64 %6338
  %6340 = load i16, i16* %6339, align 2, !tbaa !386
  %6341 = insertelement <64 x i16> %6336, i16 %6340, i32 45
  %6342 = extractelement <64 x i32> %6111, i32 46
  %6343 = sext i32 %6342 to i64
  %6344 = getelementptr inbounds i16, i16* %input286, i64 %6343
  %6345 = load i16, i16* %6344, align 2, !tbaa !386
  %6346 = insertelement <64 x i16> %6341, i16 %6345, i32 46
  %6347 = extractelement <64 x i32> %6111, i32 47
  %6348 = sext i32 %6347 to i64
  %6349 = getelementptr inbounds i16, i16* %input286, i64 %6348
  %6350 = load i16, i16* %6349, align 2, !tbaa !386
  %6351 = insertelement <64 x i16> %6346, i16 %6350, i32 47
  %6352 = extractelement <64 x i32> %6111, i32 48
  %6353 = sext i32 %6352 to i64
  %6354 = getelementptr inbounds i16, i16* %input286, i64 %6353
  %6355 = load i16, i16* %6354, align 2, !tbaa !386
  %6356 = insertelement <64 x i16> %6351, i16 %6355, i32 48
  %6357 = extractelement <64 x i32> %6111, i32 49
  %6358 = sext i32 %6357 to i64
  %6359 = getelementptr inbounds i16, i16* %input286, i64 %6358
  %6360 = load i16, i16* %6359, align 2, !tbaa !386
  %6361 = insertelement <64 x i16> %6356, i16 %6360, i32 49
  %6362 = extractelement <64 x i32> %6111, i32 50
  %6363 = sext i32 %6362 to i64
  %6364 = getelementptr inbounds i16, i16* %input286, i64 %6363
  %6365 = load i16, i16* %6364, align 2, !tbaa !386
  %6366 = insertelement <64 x i16> %6361, i16 %6365, i32 50
  %6367 = extractelement <64 x i32> %6111, i32 51
  %6368 = sext i32 %6367 to i64
  %6369 = getelementptr inbounds i16, i16* %input286, i64 %6368
  %6370 = load i16, i16* %6369, align 2, !tbaa !386
  %6371 = insertelement <64 x i16> %6366, i16 %6370, i32 51
  %6372 = extractelement <64 x i32> %6111, i32 52
  %6373 = sext i32 %6372 to i64
  %6374 = getelementptr inbounds i16, i16* %input286, i64 %6373
  %6375 = load i16, i16* %6374, align 2, !tbaa !386
  %6376 = insertelement <64 x i16> %6371, i16 %6375, i32 52
  %6377 = extractelement <64 x i32> %6111, i32 53
  %6378 = sext i32 %6377 to i64
  %6379 = getelementptr inbounds i16, i16* %input286, i64 %6378
  %6380 = load i16, i16* %6379, align 2, !tbaa !386
  %6381 = insertelement <64 x i16> %6376, i16 %6380, i32 53
  %6382 = extractelement <64 x i32> %6111, i32 54
  %6383 = sext i32 %6382 to i64
  %6384 = getelementptr inbounds i16, i16* %input286, i64 %6383
  %6385 = load i16, i16* %6384, align 2, !tbaa !386
  %6386 = insertelement <64 x i16> %6381, i16 %6385, i32 54
  %6387 = extractelement <64 x i32> %6111, i32 55
  %6388 = sext i32 %6387 to i64
  %6389 = getelementptr inbounds i16, i16* %input286, i64 %6388
  %6390 = load i16, i16* %6389, align 2, !tbaa !386
  %6391 = insertelement <64 x i16> %6386, i16 %6390, i32 55
  %6392 = extractelement <64 x i32> %6111, i32 56
  %6393 = sext i32 %6392 to i64
  %6394 = getelementptr inbounds i16, i16* %input286, i64 %6393
  %6395 = load i16, i16* %6394, align 2, !tbaa !386
  %6396 = insertelement <64 x i16> %6391, i16 %6395, i32 56
  %6397 = extractelement <64 x i32> %6111, i32 57
  %6398 = sext i32 %6397 to i64
  %6399 = getelementptr inbounds i16, i16* %input286, i64 %6398
  %6400 = load i16, i16* %6399, align 2, !tbaa !386
  %6401 = insertelement <64 x i16> %6396, i16 %6400, i32 57
  %6402 = extractelement <64 x i32> %6111, i32 58
  %6403 = sext i32 %6402 to i64
  %6404 = getelementptr inbounds i16, i16* %input286, i64 %6403
  %6405 = load i16, i16* %6404, align 2, !tbaa !386
  %6406 = insertelement <64 x i16> %6401, i16 %6405, i32 58
  %6407 = extractelement <64 x i32> %6111, i32 59
  %6408 = sext i32 %6407 to i64
  %6409 = getelementptr inbounds i16, i16* %input286, i64 %6408
  %6410 = load i16, i16* %6409, align 2, !tbaa !386
  %6411 = insertelement <64 x i16> %6406, i16 %6410, i32 59
  %6412 = extractelement <64 x i32> %6111, i32 60
  %6413 = sext i32 %6412 to i64
  %6414 = getelementptr inbounds i16, i16* %input286, i64 %6413
  %6415 = load i16, i16* %6414, align 2, !tbaa !386
  %6416 = insertelement <64 x i16> %6411, i16 %6415, i32 60
  %6417 = extractelement <64 x i32> %6111, i32 61
  %6418 = sext i32 %6417 to i64
  %6419 = getelementptr inbounds i16, i16* %input286, i64 %6418
  %6420 = load i16, i16* %6419, align 2, !tbaa !386
  %6421 = insertelement <64 x i16> %6416, i16 %6420, i32 61
  %6422 = extractelement <64 x i32> %6111, i32 62
  %6423 = sext i32 %6422 to i64
  %6424 = getelementptr inbounds i16, i16* %input286, i64 %6423
  %6425 = load i16, i16* %6424, align 2, !tbaa !386
  %6426 = insertelement <64 x i16> %6421, i16 %6425, i32 62
  %6427 = extractelement <64 x i32> %6111, i32 63
  %6428 = sext i32 %6427 to i64
  %6429 = getelementptr inbounds i16, i16* %input286, i64 %6428
  %6430 = load i16, i16* %6429, align 2, !tbaa !386
  %6431 = insertelement <64 x i16> %6426, i16 %6430, i32 63
  %6432 = add <64 x i16> %5252, %4859
  %6433 = add <64 x i16> %6432, %5645
  %6434 = add <64 x i16> %6433, %6038
  %6435 = add <64 x i16> %6434, %6431
  %6436 = shufflevector <64 x i16> %6435, <64 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %6437 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6436, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6438 = shufflevector <64 x i16> %6435, <64 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %6439 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6438, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6440 = shufflevector <64 x i16> %6435, <64 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %6441 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6440, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6442 = shufflevector <64 x i16> %6435, <64 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %6443 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6442, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6444 = shufflevector <64 x i16> %6435, <64 x i16> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %6445 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6444, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6446 = shufflevector <64 x i16> %6435, <64 x i16> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %6447 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6446, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6448 = shufflevector <64 x i16> %6435, <64 x i16> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %6449 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6448, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6450 = shufflevector <64 x i16> %6435, <64 x i16> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %6451 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6450, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6452 = shufflevector <64 x i16> %6435, <64 x i16> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %6453 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6452, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6454 = shufflevector <64 x i16> %6435, <64 x i16> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %6455 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6454, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6456 = shufflevector <64 x i16> %6435, <64 x i16> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %6457 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6456, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6458 = shufflevector <64 x i16> %6435, <64 x i16> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %6459 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6458, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6460 = shufflevector <64 x i16> %6435, <64 x i16> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %6461 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6460, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6462 = shufflevector <64 x i16> %6435, <64 x i16> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %6463 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6462, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6464 = shufflevector <64 x i16> %6435, <64 x i16> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %6465 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6464, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6466 = shufflevector <64 x i16> %6435, <64 x i16> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %6467 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6466, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6468 = shufflevector <4 x i32> %6437, <4 x i32> %6439, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6469 = shufflevector <4 x i32> %6441, <4 x i32> %6443, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6470 = shufflevector <4 x i32> %6445, <4 x i32> %6447, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6471 = shufflevector <4 x i32> %6449, <4 x i32> %6451, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6472 = shufflevector <4 x i32> %6453, <4 x i32> %6455, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6473 = shufflevector <4 x i32> %6457, <4 x i32> %6459, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6474 = shufflevector <4 x i32> %6461, <4 x i32> %6463, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6475 = shufflevector <4 x i32> %6465, <4 x i32> %6467, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6476 = shufflevector <8 x i32> %6468, <8 x i32> %6469, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6477 = shufflevector <8 x i32> %6470, <8 x i32> %6471, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6478 = shufflevector <8 x i32> %6472, <8 x i32> %6473, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6479 = shufflevector <8 x i32> %6474, <8 x i32> %6475, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6480 = shufflevector <16 x i32> %6476, <16 x i32> %6477, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6481 = shufflevector <16 x i32> %6478, <16 x i32> %6479, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6482 = shufflevector <32 x i32> %6480, <32 x i32> %6481, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %6483 = lshr <64 x i32> %6482, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %6484 = trunc <64 x i32> %6483 to <64 x i16>
  %6485 = shufflevector <64 x i16> %6484, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6486 = sext i32 %blur_x.s0.x.v2.base.s12 to i64
  %6487 = add nsw i64 %6486, %4463
  %6488 = getelementptr inbounds i16, i16* %blur_x, i64 %6487
  %6489 = bitcast i16* %6488 to <8 x i16>*
  store <8 x i16> %6485, <8 x i16>* %6489, align 2, !tbaa !389
  %6490 = shufflevector <64 x i16> %6484, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6491 = getelementptr inbounds i16, i16* %6488, i64 8
  %6492 = bitcast i16* %6491 to <8 x i16>*
  store <8 x i16> %6490, <8 x i16>* %6492, align 2, !tbaa !389
  %6493 = shufflevector <64 x i16> %6484, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %6494 = getelementptr inbounds i16, i16* %6488, i64 16
  %6495 = bitcast i16* %6494 to <8 x i16>*
  store <8 x i16> %6493, <8 x i16>* %6495, align 2, !tbaa !389
  %6496 = shufflevector <64 x i16> %6484, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6497 = getelementptr inbounds i16, i16* %6488, i64 24
  %6498 = bitcast i16* %6497 to <8 x i16>*
  store <8 x i16> %6496, <8 x i16>* %6498, align 2, !tbaa !389
  %6499 = shufflevector <64 x i16> %6484, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %6500 = getelementptr inbounds i16, i16* %6488, i64 32
  %6501 = bitcast i16* %6500 to <8 x i16>*
  store <8 x i16> %6499, <8 x i16>* %6501, align 2, !tbaa !389
  %6502 = shufflevector <64 x i16> %6484, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %6503 = getelementptr inbounds i16, i16* %6488, i64 40
  %6504 = bitcast i16* %6503 to <8 x i16>*
  store <8 x i16> %6502, <8 x i16>* %6504, align 2, !tbaa !389
  %6505 = shufflevector <64 x i16> %6484, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %6506 = getelementptr inbounds i16, i16* %6488, i64 48
  %6507 = bitcast i16* %6506 to <8 x i16>*
  store <8 x i16> %6505, <8 x i16>* %6507, align 2, !tbaa !389
  %6508 = shufflevector <64 x i16> %6484, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %6509 = getelementptr inbounds i16, i16* %6488, i64 56
  %6510 = bitcast i16* %6509 to <8 x i16>*
  store <8 x i16> %6508, <8 x i16>* %6510, align 2, !tbaa !389
  %6511 = add nuw nsw i32 %blur_x.s0.x.x.rebased11, 1
  %.not220 = icmp eq i32 %6511, %t331
  br i1 %.not220, label %"end for blur_x.s0.x.x.rebased10", label %"for blur_x.s0.x.x.rebased9"

"end for blur_x.s0.x.x.rebased10":                ; preds = %"for blur_x.s0.x.x.rebased9", %"end for blur_x.s0.x.x.rebased"
  %6512 = add nuw nsw i32 %blur_x.s0.y.rebased3, 1
  %.not219 = icmp eq i32 %6512, %t328
  br i1 %.not219, label %"end for blur_x.s0.y.rebased2", label %"for blur_x.s0.y.rebased1"

"for blur_x.s0.y.rebased13":                      ; preds = %"for blur_x.s0.y.rebased13.preheader", %"end for blur_x.s0.x.x17"
  %blur_x.s0.y.rebased15 = phi i32 [ %8570, %"end for blur_x.s0.x.x17" ], [ 0, %"for blur_x.s0.y.rebased13.preheader" ]
  %a22 = add nsw i32 %blur_x.s0.y.rebased15, %t342
  %6513 = icmp slt i32 %a22, %b13
  %a24 = select i1 %6513, i32 %a22, i32 %b13
  br i1 %50, label %"for blur_x.s0.x.x16.preheader", label %"end for blur_x.s0.x.x17", !prof !385

"for blur_x.s0.x.x16.preheader":                  ; preds = %"for blur_x.s0.y.rebased13"
  %6514 = add nsw i32 %blur_x.s0.y.rebased15, %blur_x.s0.y.epilogue
  %6515 = and i32 %6514, 7
  %6516 = mul nsw i32 %6515, %a2
  %t344 = sub nsw i32 %6516, %t293
  %6517 = icmp sgt i32 %a24, 0
  %6518 = select i1 %6517, i32 %a24, i32 0
  %6519 = mul nsw i32 %6518, %input.stride.1
  %6520 = sub nsw i32 %6519, %input.min.0
  %6521 = insertelement <64 x i32> undef, i32 %6520, i32 0
  %t278 = shufflevector <64 x i32> %6521, <64 x i32> undef, <64 x i32> zeroinitializer
  %6522 = sext i32 %t344 to i64
  br label %"for blur_x.s0.x.x16"

"end for blur_x.s0.y.rebased14":                  ; preds = %"end for blur_x.s0.x.x17", %"end for blur_x.s0.y.rebased2"
  %.not = icmp eq i64 %indvars.iv247, 0
  br i1 %.not, label %after_bb, label %"consume blur_x"

"for blur_x.s0.x.x16":                            ; preds = %"for blur_x.s0.x.x16.preheader", %"for blur_x.s0.x.x16"
  %blur_x.s0.x.x18 = phi i32 [ %8569, %"for blur_x.s0.x.x16" ], [ 0, %"for blur_x.s0.x.x16.preheader" ]
  %6523 = shl nsw i32 %blur_x.s0.x.x18, 6
  %a23 = add nsw i32 %6523, %t293
  %6524 = icmp slt i32 %a23, %b25
  %blur_x.s0.x.v2.base.s19 = select i1 %6524, i32 %a23, i32 %b25
  %6525 = add nsw i32 %blur_x.s0.x.v2.base.s19, -63
  %6526 = insertelement <64 x i32> undef, i32 %6525, i32 0
  %6527 = shufflevector <64 x i32> %6526, <64 x i32> undef, <64 x i32> zeroinitializer
  %6528 = add nsw <64 x i32> %6527, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %6529 = shufflevector <64 x i32> %6528, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %6530 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6529, <4 x i32> %53)
  %6531 = shufflevector <64 x i32> %6528, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %6532 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6531, <4 x i32> %53)
  %6533 = shufflevector <64 x i32> %6528, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %6534 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6533, <4 x i32> %53)
  %6535 = shufflevector <64 x i32> %6528, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %6536 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6535, <4 x i32> %53)
  %6537 = shufflevector <64 x i32> %6528, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %6538 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6537, <4 x i32> %53)
  %6539 = shufflevector <64 x i32> %6528, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %6540 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6539, <4 x i32> %53)
  %6541 = shufflevector <64 x i32> %6528, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %6542 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6541, <4 x i32> %53)
  %6543 = shufflevector <64 x i32> %6528, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %6544 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6543, <4 x i32> %53)
  %6545 = shufflevector <64 x i32> %6528, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %6546 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6545, <4 x i32> %53)
  %6547 = shufflevector <64 x i32> %6528, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %6548 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6547, <4 x i32> %53)
  %6549 = shufflevector <64 x i32> %6528, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %6550 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6549, <4 x i32> %53)
  %6551 = shufflevector <64 x i32> %6528, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %6552 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6551, <4 x i32> %53)
  %6553 = shufflevector <64 x i32> %6528, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %6554 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6553, <4 x i32> %53)
  %6555 = shufflevector <64 x i32> %6528, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %6556 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6555, <4 x i32> %53)
  %6557 = shufflevector <64 x i32> %6528, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %6558 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6557, <4 x i32> %53)
  %6559 = shufflevector <64 x i32> %6528, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %6560 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6559, <4 x i32> %53)
  %6561 = shufflevector <4 x i32> %6560, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %6562 = shufflevector <8 x i32> %6561, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %6563 = shufflevector <16 x i32> %6562, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %6564 = shufflevector <32 x i32> %6563, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %6565 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6530, <4 x i32> %55)
  %6566 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6532, <4 x i32> %55)
  %6567 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6534, <4 x i32> %55)
  %6568 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6536, <4 x i32> %55)
  %6569 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6538, <4 x i32> %55)
  %6570 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6540, <4 x i32> %55)
  %6571 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6542, <4 x i32> %55)
  %6572 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6544, <4 x i32> %55)
  %6573 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6546, <4 x i32> %55)
  %6574 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6548, <4 x i32> %55)
  %6575 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6550, <4 x i32> %55)
  %6576 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6552, <4 x i32> %55)
  %6577 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6554, <4 x i32> %55)
  %6578 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6556, <4 x i32> %55)
  %6579 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6558, <4 x i32> %55)
  %6580 = shufflevector <64 x i32> %6564, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %6581 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6580, <4 x i32> %55)
  %6582 = shufflevector <4 x i32> %6565, <4 x i32> %6566, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6583 = shufflevector <4 x i32> %6567, <4 x i32> %6568, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6584 = shufflevector <4 x i32> %6569, <4 x i32> %6570, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6585 = shufflevector <4 x i32> %6571, <4 x i32> %6572, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6586 = shufflevector <4 x i32> %6573, <4 x i32> %6574, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6587 = shufflevector <4 x i32> %6575, <4 x i32> %6576, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6588 = shufflevector <4 x i32> %6577, <4 x i32> %6578, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6589 = shufflevector <4 x i32> %6579, <4 x i32> %6581, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6590 = shufflevector <8 x i32> %6582, <8 x i32> %6583, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6591 = shufflevector <8 x i32> %6584, <8 x i32> %6585, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6592 = shufflevector <8 x i32> %6586, <8 x i32> %6587, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6593 = shufflevector <8 x i32> %6588, <8 x i32> %6589, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6594 = shufflevector <16 x i32> %6590, <16 x i32> %6591, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6595 = shufflevector <16 x i32> %6592, <16 x i32> %6593, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6596 = shufflevector <32 x i32> %6594, <32 x i32> %6595, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %6597 = add nsw <64 x i32> %6596, %t278
  %6598 = extractelement <64 x i32> %6597, i32 0
  %6599 = sext i32 %6598 to i64
  %6600 = getelementptr inbounds i16, i16* %input286, i64 %6599
  %6601 = load i16, i16* %6600, align 2, !tbaa !386
  %6602 = insertelement <64 x i16> undef, i16 %6601, i32 0
  %6603 = extractelement <64 x i32> %6597, i32 1
  %6604 = sext i32 %6603 to i64
  %6605 = getelementptr inbounds i16, i16* %input286, i64 %6604
  %6606 = load i16, i16* %6605, align 2, !tbaa !386
  %6607 = insertelement <64 x i16> %6602, i16 %6606, i32 1
  %6608 = extractelement <64 x i32> %6597, i32 2
  %6609 = sext i32 %6608 to i64
  %6610 = getelementptr inbounds i16, i16* %input286, i64 %6609
  %6611 = load i16, i16* %6610, align 2, !tbaa !386
  %6612 = insertelement <64 x i16> %6607, i16 %6611, i32 2
  %6613 = extractelement <64 x i32> %6597, i32 3
  %6614 = sext i32 %6613 to i64
  %6615 = getelementptr inbounds i16, i16* %input286, i64 %6614
  %6616 = load i16, i16* %6615, align 2, !tbaa !386
  %6617 = insertelement <64 x i16> %6612, i16 %6616, i32 3
  %6618 = extractelement <64 x i32> %6597, i32 4
  %6619 = sext i32 %6618 to i64
  %6620 = getelementptr inbounds i16, i16* %input286, i64 %6619
  %6621 = load i16, i16* %6620, align 2, !tbaa !386
  %6622 = insertelement <64 x i16> %6617, i16 %6621, i32 4
  %6623 = extractelement <64 x i32> %6597, i32 5
  %6624 = sext i32 %6623 to i64
  %6625 = getelementptr inbounds i16, i16* %input286, i64 %6624
  %6626 = load i16, i16* %6625, align 2, !tbaa !386
  %6627 = insertelement <64 x i16> %6622, i16 %6626, i32 5
  %6628 = extractelement <64 x i32> %6597, i32 6
  %6629 = sext i32 %6628 to i64
  %6630 = getelementptr inbounds i16, i16* %input286, i64 %6629
  %6631 = load i16, i16* %6630, align 2, !tbaa !386
  %6632 = insertelement <64 x i16> %6627, i16 %6631, i32 6
  %6633 = extractelement <64 x i32> %6597, i32 7
  %6634 = sext i32 %6633 to i64
  %6635 = getelementptr inbounds i16, i16* %input286, i64 %6634
  %6636 = load i16, i16* %6635, align 2, !tbaa !386
  %6637 = insertelement <64 x i16> %6632, i16 %6636, i32 7
  %6638 = extractelement <64 x i32> %6597, i32 8
  %6639 = sext i32 %6638 to i64
  %6640 = getelementptr inbounds i16, i16* %input286, i64 %6639
  %6641 = load i16, i16* %6640, align 2, !tbaa !386
  %6642 = insertelement <64 x i16> %6637, i16 %6641, i32 8
  %6643 = extractelement <64 x i32> %6597, i32 9
  %6644 = sext i32 %6643 to i64
  %6645 = getelementptr inbounds i16, i16* %input286, i64 %6644
  %6646 = load i16, i16* %6645, align 2, !tbaa !386
  %6647 = insertelement <64 x i16> %6642, i16 %6646, i32 9
  %6648 = extractelement <64 x i32> %6597, i32 10
  %6649 = sext i32 %6648 to i64
  %6650 = getelementptr inbounds i16, i16* %input286, i64 %6649
  %6651 = load i16, i16* %6650, align 2, !tbaa !386
  %6652 = insertelement <64 x i16> %6647, i16 %6651, i32 10
  %6653 = extractelement <64 x i32> %6597, i32 11
  %6654 = sext i32 %6653 to i64
  %6655 = getelementptr inbounds i16, i16* %input286, i64 %6654
  %6656 = load i16, i16* %6655, align 2, !tbaa !386
  %6657 = insertelement <64 x i16> %6652, i16 %6656, i32 11
  %6658 = extractelement <64 x i32> %6597, i32 12
  %6659 = sext i32 %6658 to i64
  %6660 = getelementptr inbounds i16, i16* %input286, i64 %6659
  %6661 = load i16, i16* %6660, align 2, !tbaa !386
  %6662 = insertelement <64 x i16> %6657, i16 %6661, i32 12
  %6663 = extractelement <64 x i32> %6597, i32 13
  %6664 = sext i32 %6663 to i64
  %6665 = getelementptr inbounds i16, i16* %input286, i64 %6664
  %6666 = load i16, i16* %6665, align 2, !tbaa !386
  %6667 = insertelement <64 x i16> %6662, i16 %6666, i32 13
  %6668 = extractelement <64 x i32> %6597, i32 14
  %6669 = sext i32 %6668 to i64
  %6670 = getelementptr inbounds i16, i16* %input286, i64 %6669
  %6671 = load i16, i16* %6670, align 2, !tbaa !386
  %6672 = insertelement <64 x i16> %6667, i16 %6671, i32 14
  %6673 = extractelement <64 x i32> %6597, i32 15
  %6674 = sext i32 %6673 to i64
  %6675 = getelementptr inbounds i16, i16* %input286, i64 %6674
  %6676 = load i16, i16* %6675, align 2, !tbaa !386
  %6677 = insertelement <64 x i16> %6672, i16 %6676, i32 15
  %6678 = extractelement <64 x i32> %6597, i32 16
  %6679 = sext i32 %6678 to i64
  %6680 = getelementptr inbounds i16, i16* %input286, i64 %6679
  %6681 = load i16, i16* %6680, align 2, !tbaa !386
  %6682 = insertelement <64 x i16> %6677, i16 %6681, i32 16
  %6683 = extractelement <64 x i32> %6597, i32 17
  %6684 = sext i32 %6683 to i64
  %6685 = getelementptr inbounds i16, i16* %input286, i64 %6684
  %6686 = load i16, i16* %6685, align 2, !tbaa !386
  %6687 = insertelement <64 x i16> %6682, i16 %6686, i32 17
  %6688 = extractelement <64 x i32> %6597, i32 18
  %6689 = sext i32 %6688 to i64
  %6690 = getelementptr inbounds i16, i16* %input286, i64 %6689
  %6691 = load i16, i16* %6690, align 2, !tbaa !386
  %6692 = insertelement <64 x i16> %6687, i16 %6691, i32 18
  %6693 = extractelement <64 x i32> %6597, i32 19
  %6694 = sext i32 %6693 to i64
  %6695 = getelementptr inbounds i16, i16* %input286, i64 %6694
  %6696 = load i16, i16* %6695, align 2, !tbaa !386
  %6697 = insertelement <64 x i16> %6692, i16 %6696, i32 19
  %6698 = extractelement <64 x i32> %6597, i32 20
  %6699 = sext i32 %6698 to i64
  %6700 = getelementptr inbounds i16, i16* %input286, i64 %6699
  %6701 = load i16, i16* %6700, align 2, !tbaa !386
  %6702 = insertelement <64 x i16> %6697, i16 %6701, i32 20
  %6703 = extractelement <64 x i32> %6597, i32 21
  %6704 = sext i32 %6703 to i64
  %6705 = getelementptr inbounds i16, i16* %input286, i64 %6704
  %6706 = load i16, i16* %6705, align 2, !tbaa !386
  %6707 = insertelement <64 x i16> %6702, i16 %6706, i32 21
  %6708 = extractelement <64 x i32> %6597, i32 22
  %6709 = sext i32 %6708 to i64
  %6710 = getelementptr inbounds i16, i16* %input286, i64 %6709
  %6711 = load i16, i16* %6710, align 2, !tbaa !386
  %6712 = insertelement <64 x i16> %6707, i16 %6711, i32 22
  %6713 = extractelement <64 x i32> %6597, i32 23
  %6714 = sext i32 %6713 to i64
  %6715 = getelementptr inbounds i16, i16* %input286, i64 %6714
  %6716 = load i16, i16* %6715, align 2, !tbaa !386
  %6717 = insertelement <64 x i16> %6712, i16 %6716, i32 23
  %6718 = extractelement <64 x i32> %6597, i32 24
  %6719 = sext i32 %6718 to i64
  %6720 = getelementptr inbounds i16, i16* %input286, i64 %6719
  %6721 = load i16, i16* %6720, align 2, !tbaa !386
  %6722 = insertelement <64 x i16> %6717, i16 %6721, i32 24
  %6723 = extractelement <64 x i32> %6597, i32 25
  %6724 = sext i32 %6723 to i64
  %6725 = getelementptr inbounds i16, i16* %input286, i64 %6724
  %6726 = load i16, i16* %6725, align 2, !tbaa !386
  %6727 = insertelement <64 x i16> %6722, i16 %6726, i32 25
  %6728 = extractelement <64 x i32> %6597, i32 26
  %6729 = sext i32 %6728 to i64
  %6730 = getelementptr inbounds i16, i16* %input286, i64 %6729
  %6731 = load i16, i16* %6730, align 2, !tbaa !386
  %6732 = insertelement <64 x i16> %6727, i16 %6731, i32 26
  %6733 = extractelement <64 x i32> %6597, i32 27
  %6734 = sext i32 %6733 to i64
  %6735 = getelementptr inbounds i16, i16* %input286, i64 %6734
  %6736 = load i16, i16* %6735, align 2, !tbaa !386
  %6737 = insertelement <64 x i16> %6732, i16 %6736, i32 27
  %6738 = extractelement <64 x i32> %6597, i32 28
  %6739 = sext i32 %6738 to i64
  %6740 = getelementptr inbounds i16, i16* %input286, i64 %6739
  %6741 = load i16, i16* %6740, align 2, !tbaa !386
  %6742 = insertelement <64 x i16> %6737, i16 %6741, i32 28
  %6743 = extractelement <64 x i32> %6597, i32 29
  %6744 = sext i32 %6743 to i64
  %6745 = getelementptr inbounds i16, i16* %input286, i64 %6744
  %6746 = load i16, i16* %6745, align 2, !tbaa !386
  %6747 = insertelement <64 x i16> %6742, i16 %6746, i32 29
  %6748 = extractelement <64 x i32> %6597, i32 30
  %6749 = sext i32 %6748 to i64
  %6750 = getelementptr inbounds i16, i16* %input286, i64 %6749
  %6751 = load i16, i16* %6750, align 2, !tbaa !386
  %6752 = insertelement <64 x i16> %6747, i16 %6751, i32 30
  %6753 = extractelement <64 x i32> %6597, i32 31
  %6754 = sext i32 %6753 to i64
  %6755 = getelementptr inbounds i16, i16* %input286, i64 %6754
  %6756 = load i16, i16* %6755, align 2, !tbaa !386
  %6757 = insertelement <64 x i16> %6752, i16 %6756, i32 31
  %6758 = extractelement <64 x i32> %6597, i32 32
  %6759 = sext i32 %6758 to i64
  %6760 = getelementptr inbounds i16, i16* %input286, i64 %6759
  %6761 = load i16, i16* %6760, align 2, !tbaa !386
  %6762 = insertelement <64 x i16> %6757, i16 %6761, i32 32
  %6763 = extractelement <64 x i32> %6597, i32 33
  %6764 = sext i32 %6763 to i64
  %6765 = getelementptr inbounds i16, i16* %input286, i64 %6764
  %6766 = load i16, i16* %6765, align 2, !tbaa !386
  %6767 = insertelement <64 x i16> %6762, i16 %6766, i32 33
  %6768 = extractelement <64 x i32> %6597, i32 34
  %6769 = sext i32 %6768 to i64
  %6770 = getelementptr inbounds i16, i16* %input286, i64 %6769
  %6771 = load i16, i16* %6770, align 2, !tbaa !386
  %6772 = insertelement <64 x i16> %6767, i16 %6771, i32 34
  %6773 = extractelement <64 x i32> %6597, i32 35
  %6774 = sext i32 %6773 to i64
  %6775 = getelementptr inbounds i16, i16* %input286, i64 %6774
  %6776 = load i16, i16* %6775, align 2, !tbaa !386
  %6777 = insertelement <64 x i16> %6772, i16 %6776, i32 35
  %6778 = extractelement <64 x i32> %6597, i32 36
  %6779 = sext i32 %6778 to i64
  %6780 = getelementptr inbounds i16, i16* %input286, i64 %6779
  %6781 = load i16, i16* %6780, align 2, !tbaa !386
  %6782 = insertelement <64 x i16> %6777, i16 %6781, i32 36
  %6783 = extractelement <64 x i32> %6597, i32 37
  %6784 = sext i32 %6783 to i64
  %6785 = getelementptr inbounds i16, i16* %input286, i64 %6784
  %6786 = load i16, i16* %6785, align 2, !tbaa !386
  %6787 = insertelement <64 x i16> %6782, i16 %6786, i32 37
  %6788 = extractelement <64 x i32> %6597, i32 38
  %6789 = sext i32 %6788 to i64
  %6790 = getelementptr inbounds i16, i16* %input286, i64 %6789
  %6791 = load i16, i16* %6790, align 2, !tbaa !386
  %6792 = insertelement <64 x i16> %6787, i16 %6791, i32 38
  %6793 = extractelement <64 x i32> %6597, i32 39
  %6794 = sext i32 %6793 to i64
  %6795 = getelementptr inbounds i16, i16* %input286, i64 %6794
  %6796 = load i16, i16* %6795, align 2, !tbaa !386
  %6797 = insertelement <64 x i16> %6792, i16 %6796, i32 39
  %6798 = extractelement <64 x i32> %6597, i32 40
  %6799 = sext i32 %6798 to i64
  %6800 = getelementptr inbounds i16, i16* %input286, i64 %6799
  %6801 = load i16, i16* %6800, align 2, !tbaa !386
  %6802 = insertelement <64 x i16> %6797, i16 %6801, i32 40
  %6803 = extractelement <64 x i32> %6597, i32 41
  %6804 = sext i32 %6803 to i64
  %6805 = getelementptr inbounds i16, i16* %input286, i64 %6804
  %6806 = load i16, i16* %6805, align 2, !tbaa !386
  %6807 = insertelement <64 x i16> %6802, i16 %6806, i32 41
  %6808 = extractelement <64 x i32> %6597, i32 42
  %6809 = sext i32 %6808 to i64
  %6810 = getelementptr inbounds i16, i16* %input286, i64 %6809
  %6811 = load i16, i16* %6810, align 2, !tbaa !386
  %6812 = insertelement <64 x i16> %6807, i16 %6811, i32 42
  %6813 = extractelement <64 x i32> %6597, i32 43
  %6814 = sext i32 %6813 to i64
  %6815 = getelementptr inbounds i16, i16* %input286, i64 %6814
  %6816 = load i16, i16* %6815, align 2, !tbaa !386
  %6817 = insertelement <64 x i16> %6812, i16 %6816, i32 43
  %6818 = extractelement <64 x i32> %6597, i32 44
  %6819 = sext i32 %6818 to i64
  %6820 = getelementptr inbounds i16, i16* %input286, i64 %6819
  %6821 = load i16, i16* %6820, align 2, !tbaa !386
  %6822 = insertelement <64 x i16> %6817, i16 %6821, i32 44
  %6823 = extractelement <64 x i32> %6597, i32 45
  %6824 = sext i32 %6823 to i64
  %6825 = getelementptr inbounds i16, i16* %input286, i64 %6824
  %6826 = load i16, i16* %6825, align 2, !tbaa !386
  %6827 = insertelement <64 x i16> %6822, i16 %6826, i32 45
  %6828 = extractelement <64 x i32> %6597, i32 46
  %6829 = sext i32 %6828 to i64
  %6830 = getelementptr inbounds i16, i16* %input286, i64 %6829
  %6831 = load i16, i16* %6830, align 2, !tbaa !386
  %6832 = insertelement <64 x i16> %6827, i16 %6831, i32 46
  %6833 = extractelement <64 x i32> %6597, i32 47
  %6834 = sext i32 %6833 to i64
  %6835 = getelementptr inbounds i16, i16* %input286, i64 %6834
  %6836 = load i16, i16* %6835, align 2, !tbaa !386
  %6837 = insertelement <64 x i16> %6832, i16 %6836, i32 47
  %6838 = extractelement <64 x i32> %6597, i32 48
  %6839 = sext i32 %6838 to i64
  %6840 = getelementptr inbounds i16, i16* %input286, i64 %6839
  %6841 = load i16, i16* %6840, align 2, !tbaa !386
  %6842 = insertelement <64 x i16> %6837, i16 %6841, i32 48
  %6843 = extractelement <64 x i32> %6597, i32 49
  %6844 = sext i32 %6843 to i64
  %6845 = getelementptr inbounds i16, i16* %input286, i64 %6844
  %6846 = load i16, i16* %6845, align 2, !tbaa !386
  %6847 = insertelement <64 x i16> %6842, i16 %6846, i32 49
  %6848 = extractelement <64 x i32> %6597, i32 50
  %6849 = sext i32 %6848 to i64
  %6850 = getelementptr inbounds i16, i16* %input286, i64 %6849
  %6851 = load i16, i16* %6850, align 2, !tbaa !386
  %6852 = insertelement <64 x i16> %6847, i16 %6851, i32 50
  %6853 = extractelement <64 x i32> %6597, i32 51
  %6854 = sext i32 %6853 to i64
  %6855 = getelementptr inbounds i16, i16* %input286, i64 %6854
  %6856 = load i16, i16* %6855, align 2, !tbaa !386
  %6857 = insertelement <64 x i16> %6852, i16 %6856, i32 51
  %6858 = extractelement <64 x i32> %6597, i32 52
  %6859 = sext i32 %6858 to i64
  %6860 = getelementptr inbounds i16, i16* %input286, i64 %6859
  %6861 = load i16, i16* %6860, align 2, !tbaa !386
  %6862 = insertelement <64 x i16> %6857, i16 %6861, i32 52
  %6863 = extractelement <64 x i32> %6597, i32 53
  %6864 = sext i32 %6863 to i64
  %6865 = getelementptr inbounds i16, i16* %input286, i64 %6864
  %6866 = load i16, i16* %6865, align 2, !tbaa !386
  %6867 = insertelement <64 x i16> %6862, i16 %6866, i32 53
  %6868 = extractelement <64 x i32> %6597, i32 54
  %6869 = sext i32 %6868 to i64
  %6870 = getelementptr inbounds i16, i16* %input286, i64 %6869
  %6871 = load i16, i16* %6870, align 2, !tbaa !386
  %6872 = insertelement <64 x i16> %6867, i16 %6871, i32 54
  %6873 = extractelement <64 x i32> %6597, i32 55
  %6874 = sext i32 %6873 to i64
  %6875 = getelementptr inbounds i16, i16* %input286, i64 %6874
  %6876 = load i16, i16* %6875, align 2, !tbaa !386
  %6877 = insertelement <64 x i16> %6872, i16 %6876, i32 55
  %6878 = extractelement <64 x i32> %6597, i32 56
  %6879 = sext i32 %6878 to i64
  %6880 = getelementptr inbounds i16, i16* %input286, i64 %6879
  %6881 = load i16, i16* %6880, align 2, !tbaa !386
  %6882 = insertelement <64 x i16> %6877, i16 %6881, i32 56
  %6883 = extractelement <64 x i32> %6597, i32 57
  %6884 = sext i32 %6883 to i64
  %6885 = getelementptr inbounds i16, i16* %input286, i64 %6884
  %6886 = load i16, i16* %6885, align 2, !tbaa !386
  %6887 = insertelement <64 x i16> %6882, i16 %6886, i32 57
  %6888 = extractelement <64 x i32> %6597, i32 58
  %6889 = sext i32 %6888 to i64
  %6890 = getelementptr inbounds i16, i16* %input286, i64 %6889
  %6891 = load i16, i16* %6890, align 2, !tbaa !386
  %6892 = insertelement <64 x i16> %6887, i16 %6891, i32 58
  %6893 = extractelement <64 x i32> %6597, i32 59
  %6894 = sext i32 %6893 to i64
  %6895 = getelementptr inbounds i16, i16* %input286, i64 %6894
  %6896 = load i16, i16* %6895, align 2, !tbaa !386
  %6897 = insertelement <64 x i16> %6892, i16 %6896, i32 59
  %6898 = extractelement <64 x i32> %6597, i32 60
  %6899 = sext i32 %6898 to i64
  %6900 = getelementptr inbounds i16, i16* %input286, i64 %6899
  %6901 = load i16, i16* %6900, align 2, !tbaa !386
  %6902 = insertelement <64 x i16> %6897, i16 %6901, i32 60
  %6903 = extractelement <64 x i32> %6597, i32 61
  %6904 = sext i32 %6903 to i64
  %6905 = getelementptr inbounds i16, i16* %input286, i64 %6904
  %6906 = load i16, i16* %6905, align 2, !tbaa !386
  %6907 = insertelement <64 x i16> %6902, i16 %6906, i32 61
  %6908 = extractelement <64 x i32> %6597, i32 62
  %6909 = sext i32 %6908 to i64
  %6910 = getelementptr inbounds i16, i16* %input286, i64 %6909
  %6911 = load i16, i16* %6910, align 2, !tbaa !386
  %6912 = insertelement <64 x i16> %6907, i16 %6911, i32 62
  %6913 = extractelement <64 x i32> %6597, i32 63
  %6914 = sext i32 %6913 to i64
  %6915 = getelementptr inbounds i16, i16* %input286, i64 %6914
  %6916 = load i16, i16* %6915, align 2, !tbaa !386
  %6917 = insertelement <64 x i16> %6912, i16 %6916, i32 63
  %6918 = add nsw i32 %blur_x.s0.x.v2.base.s19, -64
  %6919 = insertelement <64 x i32> undef, i32 %6918, i32 0
  %6920 = shufflevector <64 x i32> %6919, <64 x i32> undef, <64 x i32> zeroinitializer
  %6921 = add nsw <64 x i32> %6920, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %6922 = shufflevector <64 x i32> %6921, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %6923 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6922, <4 x i32> %53)
  %6924 = shufflevector <64 x i32> %6921, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %6925 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6924, <4 x i32> %53)
  %6926 = shufflevector <64 x i32> %6921, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %6927 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6926, <4 x i32> %53)
  %6928 = shufflevector <64 x i32> %6921, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %6929 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6928, <4 x i32> %53)
  %6930 = shufflevector <64 x i32> %6921, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %6931 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6930, <4 x i32> %53)
  %6932 = shufflevector <64 x i32> %6921, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %6933 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6932, <4 x i32> %53)
  %6934 = shufflevector <64 x i32> %6921, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %6935 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6934, <4 x i32> %53)
  %6936 = shufflevector <64 x i32> %6921, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %6937 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6936, <4 x i32> %53)
  %6938 = shufflevector <64 x i32> %6921, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %6939 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6938, <4 x i32> %53)
  %6940 = shufflevector <64 x i32> %6921, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %6941 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6940, <4 x i32> %53)
  %6942 = shufflevector <64 x i32> %6921, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %6943 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6942, <4 x i32> %53)
  %6944 = shufflevector <64 x i32> %6921, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %6945 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6944, <4 x i32> %53)
  %6946 = shufflevector <64 x i32> %6921, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %6947 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6946, <4 x i32> %53)
  %6948 = shufflevector <64 x i32> %6921, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %6949 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6948, <4 x i32> %53)
  %6950 = shufflevector <64 x i32> %6921, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %6951 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6950, <4 x i32> %53)
  %6952 = shufflevector <64 x i32> %6921, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %6953 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6952, <4 x i32> %53)
  %6954 = shufflevector <4 x i32> %6953, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %6955 = shufflevector <8 x i32> %6954, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %6956 = shufflevector <16 x i32> %6955, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %6957 = shufflevector <32 x i32> %6956, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %6958 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6923, <4 x i32> %55)
  %6959 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6925, <4 x i32> %55)
  %6960 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6927, <4 x i32> %55)
  %6961 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6929, <4 x i32> %55)
  %6962 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6931, <4 x i32> %55)
  %6963 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6933, <4 x i32> %55)
  %6964 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6935, <4 x i32> %55)
  %6965 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6937, <4 x i32> %55)
  %6966 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6939, <4 x i32> %55)
  %6967 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6941, <4 x i32> %55)
  %6968 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6943, <4 x i32> %55)
  %6969 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6945, <4 x i32> %55)
  %6970 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6947, <4 x i32> %55)
  %6971 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6949, <4 x i32> %55)
  %6972 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6951, <4 x i32> %55)
  %6973 = shufflevector <64 x i32> %6957, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %6974 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6973, <4 x i32> %55)
  %6975 = shufflevector <4 x i32> %6958, <4 x i32> %6959, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6976 = shufflevector <4 x i32> %6960, <4 x i32> %6961, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6977 = shufflevector <4 x i32> %6962, <4 x i32> %6963, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6978 = shufflevector <4 x i32> %6964, <4 x i32> %6965, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6979 = shufflevector <4 x i32> %6966, <4 x i32> %6967, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6980 = shufflevector <4 x i32> %6968, <4 x i32> %6969, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6981 = shufflevector <4 x i32> %6970, <4 x i32> %6971, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6982 = shufflevector <4 x i32> %6972, <4 x i32> %6974, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6983 = shufflevector <8 x i32> %6975, <8 x i32> %6976, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6984 = shufflevector <8 x i32> %6977, <8 x i32> %6978, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6985 = shufflevector <8 x i32> %6979, <8 x i32> %6980, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6986 = shufflevector <8 x i32> %6981, <8 x i32> %6982, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6987 = shufflevector <16 x i32> %6983, <16 x i32> %6984, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6988 = shufflevector <16 x i32> %6985, <16 x i32> %6986, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6989 = shufflevector <32 x i32> %6987, <32 x i32> %6988, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %6990 = add nsw <64 x i32> %6989, %t278
  %6991 = extractelement <64 x i32> %6990, i32 0
  %6992 = sext i32 %6991 to i64
  %6993 = getelementptr inbounds i16, i16* %input286, i64 %6992
  %6994 = load i16, i16* %6993, align 2, !tbaa !386
  %6995 = insertelement <64 x i16> undef, i16 %6994, i32 0
  %6996 = extractelement <64 x i32> %6990, i32 1
  %6997 = sext i32 %6996 to i64
  %6998 = getelementptr inbounds i16, i16* %input286, i64 %6997
  %6999 = load i16, i16* %6998, align 2, !tbaa !386
  %7000 = insertelement <64 x i16> %6995, i16 %6999, i32 1
  %7001 = extractelement <64 x i32> %6990, i32 2
  %7002 = sext i32 %7001 to i64
  %7003 = getelementptr inbounds i16, i16* %input286, i64 %7002
  %7004 = load i16, i16* %7003, align 2, !tbaa !386
  %7005 = insertelement <64 x i16> %7000, i16 %7004, i32 2
  %7006 = extractelement <64 x i32> %6990, i32 3
  %7007 = sext i32 %7006 to i64
  %7008 = getelementptr inbounds i16, i16* %input286, i64 %7007
  %7009 = load i16, i16* %7008, align 2, !tbaa !386
  %7010 = insertelement <64 x i16> %7005, i16 %7009, i32 3
  %7011 = extractelement <64 x i32> %6990, i32 4
  %7012 = sext i32 %7011 to i64
  %7013 = getelementptr inbounds i16, i16* %input286, i64 %7012
  %7014 = load i16, i16* %7013, align 2, !tbaa !386
  %7015 = insertelement <64 x i16> %7010, i16 %7014, i32 4
  %7016 = extractelement <64 x i32> %6990, i32 5
  %7017 = sext i32 %7016 to i64
  %7018 = getelementptr inbounds i16, i16* %input286, i64 %7017
  %7019 = load i16, i16* %7018, align 2, !tbaa !386
  %7020 = insertelement <64 x i16> %7015, i16 %7019, i32 5
  %7021 = extractelement <64 x i32> %6990, i32 6
  %7022 = sext i32 %7021 to i64
  %7023 = getelementptr inbounds i16, i16* %input286, i64 %7022
  %7024 = load i16, i16* %7023, align 2, !tbaa !386
  %7025 = insertelement <64 x i16> %7020, i16 %7024, i32 6
  %7026 = extractelement <64 x i32> %6990, i32 7
  %7027 = sext i32 %7026 to i64
  %7028 = getelementptr inbounds i16, i16* %input286, i64 %7027
  %7029 = load i16, i16* %7028, align 2, !tbaa !386
  %7030 = insertelement <64 x i16> %7025, i16 %7029, i32 7
  %7031 = extractelement <64 x i32> %6990, i32 8
  %7032 = sext i32 %7031 to i64
  %7033 = getelementptr inbounds i16, i16* %input286, i64 %7032
  %7034 = load i16, i16* %7033, align 2, !tbaa !386
  %7035 = insertelement <64 x i16> %7030, i16 %7034, i32 8
  %7036 = extractelement <64 x i32> %6990, i32 9
  %7037 = sext i32 %7036 to i64
  %7038 = getelementptr inbounds i16, i16* %input286, i64 %7037
  %7039 = load i16, i16* %7038, align 2, !tbaa !386
  %7040 = insertelement <64 x i16> %7035, i16 %7039, i32 9
  %7041 = extractelement <64 x i32> %6990, i32 10
  %7042 = sext i32 %7041 to i64
  %7043 = getelementptr inbounds i16, i16* %input286, i64 %7042
  %7044 = load i16, i16* %7043, align 2, !tbaa !386
  %7045 = insertelement <64 x i16> %7040, i16 %7044, i32 10
  %7046 = extractelement <64 x i32> %6990, i32 11
  %7047 = sext i32 %7046 to i64
  %7048 = getelementptr inbounds i16, i16* %input286, i64 %7047
  %7049 = load i16, i16* %7048, align 2, !tbaa !386
  %7050 = insertelement <64 x i16> %7045, i16 %7049, i32 11
  %7051 = extractelement <64 x i32> %6990, i32 12
  %7052 = sext i32 %7051 to i64
  %7053 = getelementptr inbounds i16, i16* %input286, i64 %7052
  %7054 = load i16, i16* %7053, align 2, !tbaa !386
  %7055 = insertelement <64 x i16> %7050, i16 %7054, i32 12
  %7056 = extractelement <64 x i32> %6990, i32 13
  %7057 = sext i32 %7056 to i64
  %7058 = getelementptr inbounds i16, i16* %input286, i64 %7057
  %7059 = load i16, i16* %7058, align 2, !tbaa !386
  %7060 = insertelement <64 x i16> %7055, i16 %7059, i32 13
  %7061 = extractelement <64 x i32> %6990, i32 14
  %7062 = sext i32 %7061 to i64
  %7063 = getelementptr inbounds i16, i16* %input286, i64 %7062
  %7064 = load i16, i16* %7063, align 2, !tbaa !386
  %7065 = insertelement <64 x i16> %7060, i16 %7064, i32 14
  %7066 = extractelement <64 x i32> %6990, i32 15
  %7067 = sext i32 %7066 to i64
  %7068 = getelementptr inbounds i16, i16* %input286, i64 %7067
  %7069 = load i16, i16* %7068, align 2, !tbaa !386
  %7070 = insertelement <64 x i16> %7065, i16 %7069, i32 15
  %7071 = extractelement <64 x i32> %6990, i32 16
  %7072 = sext i32 %7071 to i64
  %7073 = getelementptr inbounds i16, i16* %input286, i64 %7072
  %7074 = load i16, i16* %7073, align 2, !tbaa !386
  %7075 = insertelement <64 x i16> %7070, i16 %7074, i32 16
  %7076 = extractelement <64 x i32> %6990, i32 17
  %7077 = sext i32 %7076 to i64
  %7078 = getelementptr inbounds i16, i16* %input286, i64 %7077
  %7079 = load i16, i16* %7078, align 2, !tbaa !386
  %7080 = insertelement <64 x i16> %7075, i16 %7079, i32 17
  %7081 = extractelement <64 x i32> %6990, i32 18
  %7082 = sext i32 %7081 to i64
  %7083 = getelementptr inbounds i16, i16* %input286, i64 %7082
  %7084 = load i16, i16* %7083, align 2, !tbaa !386
  %7085 = insertelement <64 x i16> %7080, i16 %7084, i32 18
  %7086 = extractelement <64 x i32> %6990, i32 19
  %7087 = sext i32 %7086 to i64
  %7088 = getelementptr inbounds i16, i16* %input286, i64 %7087
  %7089 = load i16, i16* %7088, align 2, !tbaa !386
  %7090 = insertelement <64 x i16> %7085, i16 %7089, i32 19
  %7091 = extractelement <64 x i32> %6990, i32 20
  %7092 = sext i32 %7091 to i64
  %7093 = getelementptr inbounds i16, i16* %input286, i64 %7092
  %7094 = load i16, i16* %7093, align 2, !tbaa !386
  %7095 = insertelement <64 x i16> %7090, i16 %7094, i32 20
  %7096 = extractelement <64 x i32> %6990, i32 21
  %7097 = sext i32 %7096 to i64
  %7098 = getelementptr inbounds i16, i16* %input286, i64 %7097
  %7099 = load i16, i16* %7098, align 2, !tbaa !386
  %7100 = insertelement <64 x i16> %7095, i16 %7099, i32 21
  %7101 = extractelement <64 x i32> %6990, i32 22
  %7102 = sext i32 %7101 to i64
  %7103 = getelementptr inbounds i16, i16* %input286, i64 %7102
  %7104 = load i16, i16* %7103, align 2, !tbaa !386
  %7105 = insertelement <64 x i16> %7100, i16 %7104, i32 22
  %7106 = extractelement <64 x i32> %6990, i32 23
  %7107 = sext i32 %7106 to i64
  %7108 = getelementptr inbounds i16, i16* %input286, i64 %7107
  %7109 = load i16, i16* %7108, align 2, !tbaa !386
  %7110 = insertelement <64 x i16> %7105, i16 %7109, i32 23
  %7111 = extractelement <64 x i32> %6990, i32 24
  %7112 = sext i32 %7111 to i64
  %7113 = getelementptr inbounds i16, i16* %input286, i64 %7112
  %7114 = load i16, i16* %7113, align 2, !tbaa !386
  %7115 = insertelement <64 x i16> %7110, i16 %7114, i32 24
  %7116 = extractelement <64 x i32> %6990, i32 25
  %7117 = sext i32 %7116 to i64
  %7118 = getelementptr inbounds i16, i16* %input286, i64 %7117
  %7119 = load i16, i16* %7118, align 2, !tbaa !386
  %7120 = insertelement <64 x i16> %7115, i16 %7119, i32 25
  %7121 = extractelement <64 x i32> %6990, i32 26
  %7122 = sext i32 %7121 to i64
  %7123 = getelementptr inbounds i16, i16* %input286, i64 %7122
  %7124 = load i16, i16* %7123, align 2, !tbaa !386
  %7125 = insertelement <64 x i16> %7120, i16 %7124, i32 26
  %7126 = extractelement <64 x i32> %6990, i32 27
  %7127 = sext i32 %7126 to i64
  %7128 = getelementptr inbounds i16, i16* %input286, i64 %7127
  %7129 = load i16, i16* %7128, align 2, !tbaa !386
  %7130 = insertelement <64 x i16> %7125, i16 %7129, i32 27
  %7131 = extractelement <64 x i32> %6990, i32 28
  %7132 = sext i32 %7131 to i64
  %7133 = getelementptr inbounds i16, i16* %input286, i64 %7132
  %7134 = load i16, i16* %7133, align 2, !tbaa !386
  %7135 = insertelement <64 x i16> %7130, i16 %7134, i32 28
  %7136 = extractelement <64 x i32> %6990, i32 29
  %7137 = sext i32 %7136 to i64
  %7138 = getelementptr inbounds i16, i16* %input286, i64 %7137
  %7139 = load i16, i16* %7138, align 2, !tbaa !386
  %7140 = insertelement <64 x i16> %7135, i16 %7139, i32 29
  %7141 = extractelement <64 x i32> %6990, i32 30
  %7142 = sext i32 %7141 to i64
  %7143 = getelementptr inbounds i16, i16* %input286, i64 %7142
  %7144 = load i16, i16* %7143, align 2, !tbaa !386
  %7145 = insertelement <64 x i16> %7140, i16 %7144, i32 30
  %7146 = extractelement <64 x i32> %6990, i32 31
  %7147 = sext i32 %7146 to i64
  %7148 = getelementptr inbounds i16, i16* %input286, i64 %7147
  %7149 = load i16, i16* %7148, align 2, !tbaa !386
  %7150 = insertelement <64 x i16> %7145, i16 %7149, i32 31
  %7151 = extractelement <64 x i32> %6990, i32 32
  %7152 = sext i32 %7151 to i64
  %7153 = getelementptr inbounds i16, i16* %input286, i64 %7152
  %7154 = load i16, i16* %7153, align 2, !tbaa !386
  %7155 = insertelement <64 x i16> %7150, i16 %7154, i32 32
  %7156 = extractelement <64 x i32> %6990, i32 33
  %7157 = sext i32 %7156 to i64
  %7158 = getelementptr inbounds i16, i16* %input286, i64 %7157
  %7159 = load i16, i16* %7158, align 2, !tbaa !386
  %7160 = insertelement <64 x i16> %7155, i16 %7159, i32 33
  %7161 = extractelement <64 x i32> %6990, i32 34
  %7162 = sext i32 %7161 to i64
  %7163 = getelementptr inbounds i16, i16* %input286, i64 %7162
  %7164 = load i16, i16* %7163, align 2, !tbaa !386
  %7165 = insertelement <64 x i16> %7160, i16 %7164, i32 34
  %7166 = extractelement <64 x i32> %6990, i32 35
  %7167 = sext i32 %7166 to i64
  %7168 = getelementptr inbounds i16, i16* %input286, i64 %7167
  %7169 = load i16, i16* %7168, align 2, !tbaa !386
  %7170 = insertelement <64 x i16> %7165, i16 %7169, i32 35
  %7171 = extractelement <64 x i32> %6990, i32 36
  %7172 = sext i32 %7171 to i64
  %7173 = getelementptr inbounds i16, i16* %input286, i64 %7172
  %7174 = load i16, i16* %7173, align 2, !tbaa !386
  %7175 = insertelement <64 x i16> %7170, i16 %7174, i32 36
  %7176 = extractelement <64 x i32> %6990, i32 37
  %7177 = sext i32 %7176 to i64
  %7178 = getelementptr inbounds i16, i16* %input286, i64 %7177
  %7179 = load i16, i16* %7178, align 2, !tbaa !386
  %7180 = insertelement <64 x i16> %7175, i16 %7179, i32 37
  %7181 = extractelement <64 x i32> %6990, i32 38
  %7182 = sext i32 %7181 to i64
  %7183 = getelementptr inbounds i16, i16* %input286, i64 %7182
  %7184 = load i16, i16* %7183, align 2, !tbaa !386
  %7185 = insertelement <64 x i16> %7180, i16 %7184, i32 38
  %7186 = extractelement <64 x i32> %6990, i32 39
  %7187 = sext i32 %7186 to i64
  %7188 = getelementptr inbounds i16, i16* %input286, i64 %7187
  %7189 = load i16, i16* %7188, align 2, !tbaa !386
  %7190 = insertelement <64 x i16> %7185, i16 %7189, i32 39
  %7191 = extractelement <64 x i32> %6990, i32 40
  %7192 = sext i32 %7191 to i64
  %7193 = getelementptr inbounds i16, i16* %input286, i64 %7192
  %7194 = load i16, i16* %7193, align 2, !tbaa !386
  %7195 = insertelement <64 x i16> %7190, i16 %7194, i32 40
  %7196 = extractelement <64 x i32> %6990, i32 41
  %7197 = sext i32 %7196 to i64
  %7198 = getelementptr inbounds i16, i16* %input286, i64 %7197
  %7199 = load i16, i16* %7198, align 2, !tbaa !386
  %7200 = insertelement <64 x i16> %7195, i16 %7199, i32 41
  %7201 = extractelement <64 x i32> %6990, i32 42
  %7202 = sext i32 %7201 to i64
  %7203 = getelementptr inbounds i16, i16* %input286, i64 %7202
  %7204 = load i16, i16* %7203, align 2, !tbaa !386
  %7205 = insertelement <64 x i16> %7200, i16 %7204, i32 42
  %7206 = extractelement <64 x i32> %6990, i32 43
  %7207 = sext i32 %7206 to i64
  %7208 = getelementptr inbounds i16, i16* %input286, i64 %7207
  %7209 = load i16, i16* %7208, align 2, !tbaa !386
  %7210 = insertelement <64 x i16> %7205, i16 %7209, i32 43
  %7211 = extractelement <64 x i32> %6990, i32 44
  %7212 = sext i32 %7211 to i64
  %7213 = getelementptr inbounds i16, i16* %input286, i64 %7212
  %7214 = load i16, i16* %7213, align 2, !tbaa !386
  %7215 = insertelement <64 x i16> %7210, i16 %7214, i32 44
  %7216 = extractelement <64 x i32> %6990, i32 45
  %7217 = sext i32 %7216 to i64
  %7218 = getelementptr inbounds i16, i16* %input286, i64 %7217
  %7219 = load i16, i16* %7218, align 2, !tbaa !386
  %7220 = insertelement <64 x i16> %7215, i16 %7219, i32 45
  %7221 = extractelement <64 x i32> %6990, i32 46
  %7222 = sext i32 %7221 to i64
  %7223 = getelementptr inbounds i16, i16* %input286, i64 %7222
  %7224 = load i16, i16* %7223, align 2, !tbaa !386
  %7225 = insertelement <64 x i16> %7220, i16 %7224, i32 46
  %7226 = extractelement <64 x i32> %6990, i32 47
  %7227 = sext i32 %7226 to i64
  %7228 = getelementptr inbounds i16, i16* %input286, i64 %7227
  %7229 = load i16, i16* %7228, align 2, !tbaa !386
  %7230 = insertelement <64 x i16> %7225, i16 %7229, i32 47
  %7231 = extractelement <64 x i32> %6990, i32 48
  %7232 = sext i32 %7231 to i64
  %7233 = getelementptr inbounds i16, i16* %input286, i64 %7232
  %7234 = load i16, i16* %7233, align 2, !tbaa !386
  %7235 = insertelement <64 x i16> %7230, i16 %7234, i32 48
  %7236 = extractelement <64 x i32> %6990, i32 49
  %7237 = sext i32 %7236 to i64
  %7238 = getelementptr inbounds i16, i16* %input286, i64 %7237
  %7239 = load i16, i16* %7238, align 2, !tbaa !386
  %7240 = insertelement <64 x i16> %7235, i16 %7239, i32 49
  %7241 = extractelement <64 x i32> %6990, i32 50
  %7242 = sext i32 %7241 to i64
  %7243 = getelementptr inbounds i16, i16* %input286, i64 %7242
  %7244 = load i16, i16* %7243, align 2, !tbaa !386
  %7245 = insertelement <64 x i16> %7240, i16 %7244, i32 50
  %7246 = extractelement <64 x i32> %6990, i32 51
  %7247 = sext i32 %7246 to i64
  %7248 = getelementptr inbounds i16, i16* %input286, i64 %7247
  %7249 = load i16, i16* %7248, align 2, !tbaa !386
  %7250 = insertelement <64 x i16> %7245, i16 %7249, i32 51
  %7251 = extractelement <64 x i32> %6990, i32 52
  %7252 = sext i32 %7251 to i64
  %7253 = getelementptr inbounds i16, i16* %input286, i64 %7252
  %7254 = load i16, i16* %7253, align 2, !tbaa !386
  %7255 = insertelement <64 x i16> %7250, i16 %7254, i32 52
  %7256 = extractelement <64 x i32> %6990, i32 53
  %7257 = sext i32 %7256 to i64
  %7258 = getelementptr inbounds i16, i16* %input286, i64 %7257
  %7259 = load i16, i16* %7258, align 2, !tbaa !386
  %7260 = insertelement <64 x i16> %7255, i16 %7259, i32 53
  %7261 = extractelement <64 x i32> %6990, i32 54
  %7262 = sext i32 %7261 to i64
  %7263 = getelementptr inbounds i16, i16* %input286, i64 %7262
  %7264 = load i16, i16* %7263, align 2, !tbaa !386
  %7265 = insertelement <64 x i16> %7260, i16 %7264, i32 54
  %7266 = extractelement <64 x i32> %6990, i32 55
  %7267 = sext i32 %7266 to i64
  %7268 = getelementptr inbounds i16, i16* %input286, i64 %7267
  %7269 = load i16, i16* %7268, align 2, !tbaa !386
  %7270 = insertelement <64 x i16> %7265, i16 %7269, i32 55
  %7271 = extractelement <64 x i32> %6990, i32 56
  %7272 = sext i32 %7271 to i64
  %7273 = getelementptr inbounds i16, i16* %input286, i64 %7272
  %7274 = load i16, i16* %7273, align 2, !tbaa !386
  %7275 = insertelement <64 x i16> %7270, i16 %7274, i32 56
  %7276 = extractelement <64 x i32> %6990, i32 57
  %7277 = sext i32 %7276 to i64
  %7278 = getelementptr inbounds i16, i16* %input286, i64 %7277
  %7279 = load i16, i16* %7278, align 2, !tbaa !386
  %7280 = insertelement <64 x i16> %7275, i16 %7279, i32 57
  %7281 = extractelement <64 x i32> %6990, i32 58
  %7282 = sext i32 %7281 to i64
  %7283 = getelementptr inbounds i16, i16* %input286, i64 %7282
  %7284 = load i16, i16* %7283, align 2, !tbaa !386
  %7285 = insertelement <64 x i16> %7280, i16 %7284, i32 58
  %7286 = extractelement <64 x i32> %6990, i32 59
  %7287 = sext i32 %7286 to i64
  %7288 = getelementptr inbounds i16, i16* %input286, i64 %7287
  %7289 = load i16, i16* %7288, align 2, !tbaa !386
  %7290 = insertelement <64 x i16> %7285, i16 %7289, i32 59
  %7291 = extractelement <64 x i32> %6990, i32 60
  %7292 = sext i32 %7291 to i64
  %7293 = getelementptr inbounds i16, i16* %input286, i64 %7292
  %7294 = load i16, i16* %7293, align 2, !tbaa !386
  %7295 = insertelement <64 x i16> %7290, i16 %7294, i32 60
  %7296 = extractelement <64 x i32> %6990, i32 61
  %7297 = sext i32 %7296 to i64
  %7298 = getelementptr inbounds i16, i16* %input286, i64 %7297
  %7299 = load i16, i16* %7298, align 2, !tbaa !386
  %7300 = insertelement <64 x i16> %7295, i16 %7299, i32 61
  %7301 = extractelement <64 x i32> %6990, i32 62
  %7302 = sext i32 %7301 to i64
  %7303 = getelementptr inbounds i16, i16* %input286, i64 %7302
  %7304 = load i16, i16* %7303, align 2, !tbaa !386
  %7305 = insertelement <64 x i16> %7300, i16 %7304, i32 62
  %7306 = extractelement <64 x i32> %6990, i32 63
  %7307 = sext i32 %7306 to i64
  %7308 = getelementptr inbounds i16, i16* %input286, i64 %7307
  %7309 = load i16, i16* %7308, align 2, !tbaa !386
  %7310 = insertelement <64 x i16> %7305, i16 %7309, i32 63
  %7311 = add nsw i32 %blur_x.s0.x.v2.base.s19, -62
  %7312 = insertelement <64 x i32> undef, i32 %7311, i32 0
  %7313 = shufflevector <64 x i32> %7312, <64 x i32> undef, <64 x i32> zeroinitializer
  %7314 = add nsw <64 x i32> %7313, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %7315 = shufflevector <64 x i32> %7314, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %7316 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7315, <4 x i32> %53)
  %7317 = shufflevector <64 x i32> %7314, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %7318 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7317, <4 x i32> %53)
  %7319 = shufflevector <64 x i32> %7314, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %7320 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7319, <4 x i32> %53)
  %7321 = shufflevector <64 x i32> %7314, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %7322 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7321, <4 x i32> %53)
  %7323 = shufflevector <64 x i32> %7314, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %7324 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7323, <4 x i32> %53)
  %7325 = shufflevector <64 x i32> %7314, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %7326 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7325, <4 x i32> %53)
  %7327 = shufflevector <64 x i32> %7314, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %7328 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7327, <4 x i32> %53)
  %7329 = shufflevector <64 x i32> %7314, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %7330 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7329, <4 x i32> %53)
  %7331 = shufflevector <64 x i32> %7314, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %7332 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7331, <4 x i32> %53)
  %7333 = shufflevector <64 x i32> %7314, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %7334 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7333, <4 x i32> %53)
  %7335 = shufflevector <64 x i32> %7314, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %7336 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7335, <4 x i32> %53)
  %7337 = shufflevector <64 x i32> %7314, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %7338 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7337, <4 x i32> %53)
  %7339 = shufflevector <64 x i32> %7314, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %7340 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7339, <4 x i32> %53)
  %7341 = shufflevector <64 x i32> %7314, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %7342 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7341, <4 x i32> %53)
  %7343 = shufflevector <64 x i32> %7314, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %7344 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7343, <4 x i32> %53)
  %7345 = shufflevector <64 x i32> %7314, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %7346 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7345, <4 x i32> %53)
  %7347 = shufflevector <4 x i32> %7346, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %7348 = shufflevector <8 x i32> %7347, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %7349 = shufflevector <16 x i32> %7348, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %7350 = shufflevector <32 x i32> %7349, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %7351 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7316, <4 x i32> %55)
  %7352 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7318, <4 x i32> %55)
  %7353 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7320, <4 x i32> %55)
  %7354 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7322, <4 x i32> %55)
  %7355 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7324, <4 x i32> %55)
  %7356 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7326, <4 x i32> %55)
  %7357 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7328, <4 x i32> %55)
  %7358 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7330, <4 x i32> %55)
  %7359 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7332, <4 x i32> %55)
  %7360 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7334, <4 x i32> %55)
  %7361 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7336, <4 x i32> %55)
  %7362 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7338, <4 x i32> %55)
  %7363 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7340, <4 x i32> %55)
  %7364 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7342, <4 x i32> %55)
  %7365 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7344, <4 x i32> %55)
  %7366 = shufflevector <64 x i32> %7350, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %7367 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7366, <4 x i32> %55)
  %7368 = shufflevector <4 x i32> %7351, <4 x i32> %7352, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7369 = shufflevector <4 x i32> %7353, <4 x i32> %7354, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7370 = shufflevector <4 x i32> %7355, <4 x i32> %7356, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7371 = shufflevector <4 x i32> %7357, <4 x i32> %7358, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7372 = shufflevector <4 x i32> %7359, <4 x i32> %7360, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7373 = shufflevector <4 x i32> %7361, <4 x i32> %7362, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7374 = shufflevector <4 x i32> %7363, <4 x i32> %7364, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7375 = shufflevector <4 x i32> %7365, <4 x i32> %7367, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7376 = shufflevector <8 x i32> %7368, <8 x i32> %7369, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7377 = shufflevector <8 x i32> %7370, <8 x i32> %7371, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7378 = shufflevector <8 x i32> %7372, <8 x i32> %7373, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7379 = shufflevector <8 x i32> %7374, <8 x i32> %7375, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7380 = shufflevector <16 x i32> %7376, <16 x i32> %7377, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7381 = shufflevector <16 x i32> %7378, <16 x i32> %7379, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7382 = shufflevector <32 x i32> %7380, <32 x i32> %7381, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %7383 = add nsw <64 x i32> %7382, %t278
  %7384 = extractelement <64 x i32> %7383, i32 0
  %7385 = sext i32 %7384 to i64
  %7386 = getelementptr inbounds i16, i16* %input286, i64 %7385
  %7387 = load i16, i16* %7386, align 2, !tbaa !386
  %7388 = insertelement <64 x i16> undef, i16 %7387, i32 0
  %7389 = extractelement <64 x i32> %7383, i32 1
  %7390 = sext i32 %7389 to i64
  %7391 = getelementptr inbounds i16, i16* %input286, i64 %7390
  %7392 = load i16, i16* %7391, align 2, !tbaa !386
  %7393 = insertelement <64 x i16> %7388, i16 %7392, i32 1
  %7394 = extractelement <64 x i32> %7383, i32 2
  %7395 = sext i32 %7394 to i64
  %7396 = getelementptr inbounds i16, i16* %input286, i64 %7395
  %7397 = load i16, i16* %7396, align 2, !tbaa !386
  %7398 = insertelement <64 x i16> %7393, i16 %7397, i32 2
  %7399 = extractelement <64 x i32> %7383, i32 3
  %7400 = sext i32 %7399 to i64
  %7401 = getelementptr inbounds i16, i16* %input286, i64 %7400
  %7402 = load i16, i16* %7401, align 2, !tbaa !386
  %7403 = insertelement <64 x i16> %7398, i16 %7402, i32 3
  %7404 = extractelement <64 x i32> %7383, i32 4
  %7405 = sext i32 %7404 to i64
  %7406 = getelementptr inbounds i16, i16* %input286, i64 %7405
  %7407 = load i16, i16* %7406, align 2, !tbaa !386
  %7408 = insertelement <64 x i16> %7403, i16 %7407, i32 4
  %7409 = extractelement <64 x i32> %7383, i32 5
  %7410 = sext i32 %7409 to i64
  %7411 = getelementptr inbounds i16, i16* %input286, i64 %7410
  %7412 = load i16, i16* %7411, align 2, !tbaa !386
  %7413 = insertelement <64 x i16> %7408, i16 %7412, i32 5
  %7414 = extractelement <64 x i32> %7383, i32 6
  %7415 = sext i32 %7414 to i64
  %7416 = getelementptr inbounds i16, i16* %input286, i64 %7415
  %7417 = load i16, i16* %7416, align 2, !tbaa !386
  %7418 = insertelement <64 x i16> %7413, i16 %7417, i32 6
  %7419 = extractelement <64 x i32> %7383, i32 7
  %7420 = sext i32 %7419 to i64
  %7421 = getelementptr inbounds i16, i16* %input286, i64 %7420
  %7422 = load i16, i16* %7421, align 2, !tbaa !386
  %7423 = insertelement <64 x i16> %7418, i16 %7422, i32 7
  %7424 = extractelement <64 x i32> %7383, i32 8
  %7425 = sext i32 %7424 to i64
  %7426 = getelementptr inbounds i16, i16* %input286, i64 %7425
  %7427 = load i16, i16* %7426, align 2, !tbaa !386
  %7428 = insertelement <64 x i16> %7423, i16 %7427, i32 8
  %7429 = extractelement <64 x i32> %7383, i32 9
  %7430 = sext i32 %7429 to i64
  %7431 = getelementptr inbounds i16, i16* %input286, i64 %7430
  %7432 = load i16, i16* %7431, align 2, !tbaa !386
  %7433 = insertelement <64 x i16> %7428, i16 %7432, i32 9
  %7434 = extractelement <64 x i32> %7383, i32 10
  %7435 = sext i32 %7434 to i64
  %7436 = getelementptr inbounds i16, i16* %input286, i64 %7435
  %7437 = load i16, i16* %7436, align 2, !tbaa !386
  %7438 = insertelement <64 x i16> %7433, i16 %7437, i32 10
  %7439 = extractelement <64 x i32> %7383, i32 11
  %7440 = sext i32 %7439 to i64
  %7441 = getelementptr inbounds i16, i16* %input286, i64 %7440
  %7442 = load i16, i16* %7441, align 2, !tbaa !386
  %7443 = insertelement <64 x i16> %7438, i16 %7442, i32 11
  %7444 = extractelement <64 x i32> %7383, i32 12
  %7445 = sext i32 %7444 to i64
  %7446 = getelementptr inbounds i16, i16* %input286, i64 %7445
  %7447 = load i16, i16* %7446, align 2, !tbaa !386
  %7448 = insertelement <64 x i16> %7443, i16 %7447, i32 12
  %7449 = extractelement <64 x i32> %7383, i32 13
  %7450 = sext i32 %7449 to i64
  %7451 = getelementptr inbounds i16, i16* %input286, i64 %7450
  %7452 = load i16, i16* %7451, align 2, !tbaa !386
  %7453 = insertelement <64 x i16> %7448, i16 %7452, i32 13
  %7454 = extractelement <64 x i32> %7383, i32 14
  %7455 = sext i32 %7454 to i64
  %7456 = getelementptr inbounds i16, i16* %input286, i64 %7455
  %7457 = load i16, i16* %7456, align 2, !tbaa !386
  %7458 = insertelement <64 x i16> %7453, i16 %7457, i32 14
  %7459 = extractelement <64 x i32> %7383, i32 15
  %7460 = sext i32 %7459 to i64
  %7461 = getelementptr inbounds i16, i16* %input286, i64 %7460
  %7462 = load i16, i16* %7461, align 2, !tbaa !386
  %7463 = insertelement <64 x i16> %7458, i16 %7462, i32 15
  %7464 = extractelement <64 x i32> %7383, i32 16
  %7465 = sext i32 %7464 to i64
  %7466 = getelementptr inbounds i16, i16* %input286, i64 %7465
  %7467 = load i16, i16* %7466, align 2, !tbaa !386
  %7468 = insertelement <64 x i16> %7463, i16 %7467, i32 16
  %7469 = extractelement <64 x i32> %7383, i32 17
  %7470 = sext i32 %7469 to i64
  %7471 = getelementptr inbounds i16, i16* %input286, i64 %7470
  %7472 = load i16, i16* %7471, align 2, !tbaa !386
  %7473 = insertelement <64 x i16> %7468, i16 %7472, i32 17
  %7474 = extractelement <64 x i32> %7383, i32 18
  %7475 = sext i32 %7474 to i64
  %7476 = getelementptr inbounds i16, i16* %input286, i64 %7475
  %7477 = load i16, i16* %7476, align 2, !tbaa !386
  %7478 = insertelement <64 x i16> %7473, i16 %7477, i32 18
  %7479 = extractelement <64 x i32> %7383, i32 19
  %7480 = sext i32 %7479 to i64
  %7481 = getelementptr inbounds i16, i16* %input286, i64 %7480
  %7482 = load i16, i16* %7481, align 2, !tbaa !386
  %7483 = insertelement <64 x i16> %7478, i16 %7482, i32 19
  %7484 = extractelement <64 x i32> %7383, i32 20
  %7485 = sext i32 %7484 to i64
  %7486 = getelementptr inbounds i16, i16* %input286, i64 %7485
  %7487 = load i16, i16* %7486, align 2, !tbaa !386
  %7488 = insertelement <64 x i16> %7483, i16 %7487, i32 20
  %7489 = extractelement <64 x i32> %7383, i32 21
  %7490 = sext i32 %7489 to i64
  %7491 = getelementptr inbounds i16, i16* %input286, i64 %7490
  %7492 = load i16, i16* %7491, align 2, !tbaa !386
  %7493 = insertelement <64 x i16> %7488, i16 %7492, i32 21
  %7494 = extractelement <64 x i32> %7383, i32 22
  %7495 = sext i32 %7494 to i64
  %7496 = getelementptr inbounds i16, i16* %input286, i64 %7495
  %7497 = load i16, i16* %7496, align 2, !tbaa !386
  %7498 = insertelement <64 x i16> %7493, i16 %7497, i32 22
  %7499 = extractelement <64 x i32> %7383, i32 23
  %7500 = sext i32 %7499 to i64
  %7501 = getelementptr inbounds i16, i16* %input286, i64 %7500
  %7502 = load i16, i16* %7501, align 2, !tbaa !386
  %7503 = insertelement <64 x i16> %7498, i16 %7502, i32 23
  %7504 = extractelement <64 x i32> %7383, i32 24
  %7505 = sext i32 %7504 to i64
  %7506 = getelementptr inbounds i16, i16* %input286, i64 %7505
  %7507 = load i16, i16* %7506, align 2, !tbaa !386
  %7508 = insertelement <64 x i16> %7503, i16 %7507, i32 24
  %7509 = extractelement <64 x i32> %7383, i32 25
  %7510 = sext i32 %7509 to i64
  %7511 = getelementptr inbounds i16, i16* %input286, i64 %7510
  %7512 = load i16, i16* %7511, align 2, !tbaa !386
  %7513 = insertelement <64 x i16> %7508, i16 %7512, i32 25
  %7514 = extractelement <64 x i32> %7383, i32 26
  %7515 = sext i32 %7514 to i64
  %7516 = getelementptr inbounds i16, i16* %input286, i64 %7515
  %7517 = load i16, i16* %7516, align 2, !tbaa !386
  %7518 = insertelement <64 x i16> %7513, i16 %7517, i32 26
  %7519 = extractelement <64 x i32> %7383, i32 27
  %7520 = sext i32 %7519 to i64
  %7521 = getelementptr inbounds i16, i16* %input286, i64 %7520
  %7522 = load i16, i16* %7521, align 2, !tbaa !386
  %7523 = insertelement <64 x i16> %7518, i16 %7522, i32 27
  %7524 = extractelement <64 x i32> %7383, i32 28
  %7525 = sext i32 %7524 to i64
  %7526 = getelementptr inbounds i16, i16* %input286, i64 %7525
  %7527 = load i16, i16* %7526, align 2, !tbaa !386
  %7528 = insertelement <64 x i16> %7523, i16 %7527, i32 28
  %7529 = extractelement <64 x i32> %7383, i32 29
  %7530 = sext i32 %7529 to i64
  %7531 = getelementptr inbounds i16, i16* %input286, i64 %7530
  %7532 = load i16, i16* %7531, align 2, !tbaa !386
  %7533 = insertelement <64 x i16> %7528, i16 %7532, i32 29
  %7534 = extractelement <64 x i32> %7383, i32 30
  %7535 = sext i32 %7534 to i64
  %7536 = getelementptr inbounds i16, i16* %input286, i64 %7535
  %7537 = load i16, i16* %7536, align 2, !tbaa !386
  %7538 = insertelement <64 x i16> %7533, i16 %7537, i32 30
  %7539 = extractelement <64 x i32> %7383, i32 31
  %7540 = sext i32 %7539 to i64
  %7541 = getelementptr inbounds i16, i16* %input286, i64 %7540
  %7542 = load i16, i16* %7541, align 2, !tbaa !386
  %7543 = insertelement <64 x i16> %7538, i16 %7542, i32 31
  %7544 = extractelement <64 x i32> %7383, i32 32
  %7545 = sext i32 %7544 to i64
  %7546 = getelementptr inbounds i16, i16* %input286, i64 %7545
  %7547 = load i16, i16* %7546, align 2, !tbaa !386
  %7548 = insertelement <64 x i16> %7543, i16 %7547, i32 32
  %7549 = extractelement <64 x i32> %7383, i32 33
  %7550 = sext i32 %7549 to i64
  %7551 = getelementptr inbounds i16, i16* %input286, i64 %7550
  %7552 = load i16, i16* %7551, align 2, !tbaa !386
  %7553 = insertelement <64 x i16> %7548, i16 %7552, i32 33
  %7554 = extractelement <64 x i32> %7383, i32 34
  %7555 = sext i32 %7554 to i64
  %7556 = getelementptr inbounds i16, i16* %input286, i64 %7555
  %7557 = load i16, i16* %7556, align 2, !tbaa !386
  %7558 = insertelement <64 x i16> %7553, i16 %7557, i32 34
  %7559 = extractelement <64 x i32> %7383, i32 35
  %7560 = sext i32 %7559 to i64
  %7561 = getelementptr inbounds i16, i16* %input286, i64 %7560
  %7562 = load i16, i16* %7561, align 2, !tbaa !386
  %7563 = insertelement <64 x i16> %7558, i16 %7562, i32 35
  %7564 = extractelement <64 x i32> %7383, i32 36
  %7565 = sext i32 %7564 to i64
  %7566 = getelementptr inbounds i16, i16* %input286, i64 %7565
  %7567 = load i16, i16* %7566, align 2, !tbaa !386
  %7568 = insertelement <64 x i16> %7563, i16 %7567, i32 36
  %7569 = extractelement <64 x i32> %7383, i32 37
  %7570 = sext i32 %7569 to i64
  %7571 = getelementptr inbounds i16, i16* %input286, i64 %7570
  %7572 = load i16, i16* %7571, align 2, !tbaa !386
  %7573 = insertelement <64 x i16> %7568, i16 %7572, i32 37
  %7574 = extractelement <64 x i32> %7383, i32 38
  %7575 = sext i32 %7574 to i64
  %7576 = getelementptr inbounds i16, i16* %input286, i64 %7575
  %7577 = load i16, i16* %7576, align 2, !tbaa !386
  %7578 = insertelement <64 x i16> %7573, i16 %7577, i32 38
  %7579 = extractelement <64 x i32> %7383, i32 39
  %7580 = sext i32 %7579 to i64
  %7581 = getelementptr inbounds i16, i16* %input286, i64 %7580
  %7582 = load i16, i16* %7581, align 2, !tbaa !386
  %7583 = insertelement <64 x i16> %7578, i16 %7582, i32 39
  %7584 = extractelement <64 x i32> %7383, i32 40
  %7585 = sext i32 %7584 to i64
  %7586 = getelementptr inbounds i16, i16* %input286, i64 %7585
  %7587 = load i16, i16* %7586, align 2, !tbaa !386
  %7588 = insertelement <64 x i16> %7583, i16 %7587, i32 40
  %7589 = extractelement <64 x i32> %7383, i32 41
  %7590 = sext i32 %7589 to i64
  %7591 = getelementptr inbounds i16, i16* %input286, i64 %7590
  %7592 = load i16, i16* %7591, align 2, !tbaa !386
  %7593 = insertelement <64 x i16> %7588, i16 %7592, i32 41
  %7594 = extractelement <64 x i32> %7383, i32 42
  %7595 = sext i32 %7594 to i64
  %7596 = getelementptr inbounds i16, i16* %input286, i64 %7595
  %7597 = load i16, i16* %7596, align 2, !tbaa !386
  %7598 = insertelement <64 x i16> %7593, i16 %7597, i32 42
  %7599 = extractelement <64 x i32> %7383, i32 43
  %7600 = sext i32 %7599 to i64
  %7601 = getelementptr inbounds i16, i16* %input286, i64 %7600
  %7602 = load i16, i16* %7601, align 2, !tbaa !386
  %7603 = insertelement <64 x i16> %7598, i16 %7602, i32 43
  %7604 = extractelement <64 x i32> %7383, i32 44
  %7605 = sext i32 %7604 to i64
  %7606 = getelementptr inbounds i16, i16* %input286, i64 %7605
  %7607 = load i16, i16* %7606, align 2, !tbaa !386
  %7608 = insertelement <64 x i16> %7603, i16 %7607, i32 44
  %7609 = extractelement <64 x i32> %7383, i32 45
  %7610 = sext i32 %7609 to i64
  %7611 = getelementptr inbounds i16, i16* %input286, i64 %7610
  %7612 = load i16, i16* %7611, align 2, !tbaa !386
  %7613 = insertelement <64 x i16> %7608, i16 %7612, i32 45
  %7614 = extractelement <64 x i32> %7383, i32 46
  %7615 = sext i32 %7614 to i64
  %7616 = getelementptr inbounds i16, i16* %input286, i64 %7615
  %7617 = load i16, i16* %7616, align 2, !tbaa !386
  %7618 = insertelement <64 x i16> %7613, i16 %7617, i32 46
  %7619 = extractelement <64 x i32> %7383, i32 47
  %7620 = sext i32 %7619 to i64
  %7621 = getelementptr inbounds i16, i16* %input286, i64 %7620
  %7622 = load i16, i16* %7621, align 2, !tbaa !386
  %7623 = insertelement <64 x i16> %7618, i16 %7622, i32 47
  %7624 = extractelement <64 x i32> %7383, i32 48
  %7625 = sext i32 %7624 to i64
  %7626 = getelementptr inbounds i16, i16* %input286, i64 %7625
  %7627 = load i16, i16* %7626, align 2, !tbaa !386
  %7628 = insertelement <64 x i16> %7623, i16 %7627, i32 48
  %7629 = extractelement <64 x i32> %7383, i32 49
  %7630 = sext i32 %7629 to i64
  %7631 = getelementptr inbounds i16, i16* %input286, i64 %7630
  %7632 = load i16, i16* %7631, align 2, !tbaa !386
  %7633 = insertelement <64 x i16> %7628, i16 %7632, i32 49
  %7634 = extractelement <64 x i32> %7383, i32 50
  %7635 = sext i32 %7634 to i64
  %7636 = getelementptr inbounds i16, i16* %input286, i64 %7635
  %7637 = load i16, i16* %7636, align 2, !tbaa !386
  %7638 = insertelement <64 x i16> %7633, i16 %7637, i32 50
  %7639 = extractelement <64 x i32> %7383, i32 51
  %7640 = sext i32 %7639 to i64
  %7641 = getelementptr inbounds i16, i16* %input286, i64 %7640
  %7642 = load i16, i16* %7641, align 2, !tbaa !386
  %7643 = insertelement <64 x i16> %7638, i16 %7642, i32 51
  %7644 = extractelement <64 x i32> %7383, i32 52
  %7645 = sext i32 %7644 to i64
  %7646 = getelementptr inbounds i16, i16* %input286, i64 %7645
  %7647 = load i16, i16* %7646, align 2, !tbaa !386
  %7648 = insertelement <64 x i16> %7643, i16 %7647, i32 52
  %7649 = extractelement <64 x i32> %7383, i32 53
  %7650 = sext i32 %7649 to i64
  %7651 = getelementptr inbounds i16, i16* %input286, i64 %7650
  %7652 = load i16, i16* %7651, align 2, !tbaa !386
  %7653 = insertelement <64 x i16> %7648, i16 %7652, i32 53
  %7654 = extractelement <64 x i32> %7383, i32 54
  %7655 = sext i32 %7654 to i64
  %7656 = getelementptr inbounds i16, i16* %input286, i64 %7655
  %7657 = load i16, i16* %7656, align 2, !tbaa !386
  %7658 = insertelement <64 x i16> %7653, i16 %7657, i32 54
  %7659 = extractelement <64 x i32> %7383, i32 55
  %7660 = sext i32 %7659 to i64
  %7661 = getelementptr inbounds i16, i16* %input286, i64 %7660
  %7662 = load i16, i16* %7661, align 2, !tbaa !386
  %7663 = insertelement <64 x i16> %7658, i16 %7662, i32 55
  %7664 = extractelement <64 x i32> %7383, i32 56
  %7665 = sext i32 %7664 to i64
  %7666 = getelementptr inbounds i16, i16* %input286, i64 %7665
  %7667 = load i16, i16* %7666, align 2, !tbaa !386
  %7668 = insertelement <64 x i16> %7663, i16 %7667, i32 56
  %7669 = extractelement <64 x i32> %7383, i32 57
  %7670 = sext i32 %7669 to i64
  %7671 = getelementptr inbounds i16, i16* %input286, i64 %7670
  %7672 = load i16, i16* %7671, align 2, !tbaa !386
  %7673 = insertelement <64 x i16> %7668, i16 %7672, i32 57
  %7674 = extractelement <64 x i32> %7383, i32 58
  %7675 = sext i32 %7674 to i64
  %7676 = getelementptr inbounds i16, i16* %input286, i64 %7675
  %7677 = load i16, i16* %7676, align 2, !tbaa !386
  %7678 = insertelement <64 x i16> %7673, i16 %7677, i32 58
  %7679 = extractelement <64 x i32> %7383, i32 59
  %7680 = sext i32 %7679 to i64
  %7681 = getelementptr inbounds i16, i16* %input286, i64 %7680
  %7682 = load i16, i16* %7681, align 2, !tbaa !386
  %7683 = insertelement <64 x i16> %7678, i16 %7682, i32 59
  %7684 = extractelement <64 x i32> %7383, i32 60
  %7685 = sext i32 %7684 to i64
  %7686 = getelementptr inbounds i16, i16* %input286, i64 %7685
  %7687 = load i16, i16* %7686, align 2, !tbaa !386
  %7688 = insertelement <64 x i16> %7683, i16 %7687, i32 60
  %7689 = extractelement <64 x i32> %7383, i32 61
  %7690 = sext i32 %7689 to i64
  %7691 = getelementptr inbounds i16, i16* %input286, i64 %7690
  %7692 = load i16, i16* %7691, align 2, !tbaa !386
  %7693 = insertelement <64 x i16> %7688, i16 %7692, i32 61
  %7694 = extractelement <64 x i32> %7383, i32 62
  %7695 = sext i32 %7694 to i64
  %7696 = getelementptr inbounds i16, i16* %input286, i64 %7695
  %7697 = load i16, i16* %7696, align 2, !tbaa !386
  %7698 = insertelement <64 x i16> %7693, i16 %7697, i32 62
  %7699 = extractelement <64 x i32> %7383, i32 63
  %7700 = sext i32 %7699 to i64
  %7701 = getelementptr inbounds i16, i16* %input286, i64 %7700
  %7702 = load i16, i16* %7701, align 2, !tbaa !386
  %7703 = insertelement <64 x i16> %7698, i16 %7702, i32 63
  %7704 = add nsw i32 %blur_x.s0.x.v2.base.s19, -60
  %7705 = insertelement <64 x i32> undef, i32 %7704, i32 0
  %7706 = shufflevector <64 x i32> %7705, <64 x i32> undef, <64 x i32> zeroinitializer
  %7707 = add nsw <64 x i32> %7706, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %7708 = shufflevector <64 x i32> %7707, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %7709 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7708, <4 x i32> %53)
  %7710 = shufflevector <64 x i32> %7707, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %7711 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7710, <4 x i32> %53)
  %7712 = shufflevector <64 x i32> %7707, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %7713 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7712, <4 x i32> %53)
  %7714 = shufflevector <64 x i32> %7707, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %7715 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7714, <4 x i32> %53)
  %7716 = shufflevector <64 x i32> %7707, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %7717 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7716, <4 x i32> %53)
  %7718 = shufflevector <64 x i32> %7707, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %7719 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7718, <4 x i32> %53)
  %7720 = shufflevector <64 x i32> %7707, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %7721 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7720, <4 x i32> %53)
  %7722 = shufflevector <64 x i32> %7707, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %7723 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7722, <4 x i32> %53)
  %7724 = shufflevector <64 x i32> %7707, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %7725 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7724, <4 x i32> %53)
  %7726 = shufflevector <64 x i32> %7707, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %7727 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7726, <4 x i32> %53)
  %7728 = shufflevector <64 x i32> %7707, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %7729 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7728, <4 x i32> %53)
  %7730 = shufflevector <64 x i32> %7707, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %7731 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7730, <4 x i32> %53)
  %7732 = shufflevector <64 x i32> %7707, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %7733 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7732, <4 x i32> %53)
  %7734 = shufflevector <64 x i32> %7707, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %7735 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7734, <4 x i32> %53)
  %7736 = shufflevector <64 x i32> %7707, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %7737 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7736, <4 x i32> %53)
  %7738 = shufflevector <64 x i32> %7707, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %7739 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7738, <4 x i32> %53)
  %7740 = shufflevector <4 x i32> %7739, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %7741 = shufflevector <8 x i32> %7740, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %7742 = shufflevector <16 x i32> %7741, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %7743 = shufflevector <32 x i32> %7742, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %7744 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7709, <4 x i32> %55)
  %7745 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7711, <4 x i32> %55)
  %7746 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7713, <4 x i32> %55)
  %7747 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7715, <4 x i32> %55)
  %7748 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7717, <4 x i32> %55)
  %7749 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7719, <4 x i32> %55)
  %7750 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7721, <4 x i32> %55)
  %7751 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7723, <4 x i32> %55)
  %7752 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7725, <4 x i32> %55)
  %7753 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7727, <4 x i32> %55)
  %7754 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7729, <4 x i32> %55)
  %7755 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7731, <4 x i32> %55)
  %7756 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7733, <4 x i32> %55)
  %7757 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7735, <4 x i32> %55)
  %7758 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7737, <4 x i32> %55)
  %7759 = shufflevector <64 x i32> %7743, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %7760 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7759, <4 x i32> %55)
  %7761 = shufflevector <4 x i32> %7744, <4 x i32> %7745, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7762 = shufflevector <4 x i32> %7746, <4 x i32> %7747, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7763 = shufflevector <4 x i32> %7748, <4 x i32> %7749, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7764 = shufflevector <4 x i32> %7750, <4 x i32> %7751, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7765 = shufflevector <4 x i32> %7752, <4 x i32> %7753, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7766 = shufflevector <4 x i32> %7754, <4 x i32> %7755, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7767 = shufflevector <4 x i32> %7756, <4 x i32> %7757, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7768 = shufflevector <4 x i32> %7758, <4 x i32> %7760, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7769 = shufflevector <8 x i32> %7761, <8 x i32> %7762, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7770 = shufflevector <8 x i32> %7763, <8 x i32> %7764, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7771 = shufflevector <8 x i32> %7765, <8 x i32> %7766, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7772 = shufflevector <8 x i32> %7767, <8 x i32> %7768, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7773 = shufflevector <16 x i32> %7769, <16 x i32> %7770, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7774 = shufflevector <16 x i32> %7771, <16 x i32> %7772, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7775 = shufflevector <32 x i32> %7773, <32 x i32> %7774, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %7776 = add nsw <64 x i32> %7775, %t278
  %7777 = extractelement <64 x i32> %7776, i32 0
  %7778 = sext i32 %7777 to i64
  %7779 = getelementptr inbounds i16, i16* %input286, i64 %7778
  %7780 = load i16, i16* %7779, align 2, !tbaa !386
  %7781 = insertelement <64 x i16> undef, i16 %7780, i32 0
  %7782 = extractelement <64 x i32> %7776, i32 1
  %7783 = sext i32 %7782 to i64
  %7784 = getelementptr inbounds i16, i16* %input286, i64 %7783
  %7785 = load i16, i16* %7784, align 2, !tbaa !386
  %7786 = insertelement <64 x i16> %7781, i16 %7785, i32 1
  %7787 = extractelement <64 x i32> %7776, i32 2
  %7788 = sext i32 %7787 to i64
  %7789 = getelementptr inbounds i16, i16* %input286, i64 %7788
  %7790 = load i16, i16* %7789, align 2, !tbaa !386
  %7791 = insertelement <64 x i16> %7786, i16 %7790, i32 2
  %7792 = extractelement <64 x i32> %7776, i32 3
  %7793 = sext i32 %7792 to i64
  %7794 = getelementptr inbounds i16, i16* %input286, i64 %7793
  %7795 = load i16, i16* %7794, align 2, !tbaa !386
  %7796 = insertelement <64 x i16> %7791, i16 %7795, i32 3
  %7797 = extractelement <64 x i32> %7776, i32 4
  %7798 = sext i32 %7797 to i64
  %7799 = getelementptr inbounds i16, i16* %input286, i64 %7798
  %7800 = load i16, i16* %7799, align 2, !tbaa !386
  %7801 = insertelement <64 x i16> %7796, i16 %7800, i32 4
  %7802 = extractelement <64 x i32> %7776, i32 5
  %7803 = sext i32 %7802 to i64
  %7804 = getelementptr inbounds i16, i16* %input286, i64 %7803
  %7805 = load i16, i16* %7804, align 2, !tbaa !386
  %7806 = insertelement <64 x i16> %7801, i16 %7805, i32 5
  %7807 = extractelement <64 x i32> %7776, i32 6
  %7808 = sext i32 %7807 to i64
  %7809 = getelementptr inbounds i16, i16* %input286, i64 %7808
  %7810 = load i16, i16* %7809, align 2, !tbaa !386
  %7811 = insertelement <64 x i16> %7806, i16 %7810, i32 6
  %7812 = extractelement <64 x i32> %7776, i32 7
  %7813 = sext i32 %7812 to i64
  %7814 = getelementptr inbounds i16, i16* %input286, i64 %7813
  %7815 = load i16, i16* %7814, align 2, !tbaa !386
  %7816 = insertelement <64 x i16> %7811, i16 %7815, i32 7
  %7817 = extractelement <64 x i32> %7776, i32 8
  %7818 = sext i32 %7817 to i64
  %7819 = getelementptr inbounds i16, i16* %input286, i64 %7818
  %7820 = load i16, i16* %7819, align 2, !tbaa !386
  %7821 = insertelement <64 x i16> %7816, i16 %7820, i32 8
  %7822 = extractelement <64 x i32> %7776, i32 9
  %7823 = sext i32 %7822 to i64
  %7824 = getelementptr inbounds i16, i16* %input286, i64 %7823
  %7825 = load i16, i16* %7824, align 2, !tbaa !386
  %7826 = insertelement <64 x i16> %7821, i16 %7825, i32 9
  %7827 = extractelement <64 x i32> %7776, i32 10
  %7828 = sext i32 %7827 to i64
  %7829 = getelementptr inbounds i16, i16* %input286, i64 %7828
  %7830 = load i16, i16* %7829, align 2, !tbaa !386
  %7831 = insertelement <64 x i16> %7826, i16 %7830, i32 10
  %7832 = extractelement <64 x i32> %7776, i32 11
  %7833 = sext i32 %7832 to i64
  %7834 = getelementptr inbounds i16, i16* %input286, i64 %7833
  %7835 = load i16, i16* %7834, align 2, !tbaa !386
  %7836 = insertelement <64 x i16> %7831, i16 %7835, i32 11
  %7837 = extractelement <64 x i32> %7776, i32 12
  %7838 = sext i32 %7837 to i64
  %7839 = getelementptr inbounds i16, i16* %input286, i64 %7838
  %7840 = load i16, i16* %7839, align 2, !tbaa !386
  %7841 = insertelement <64 x i16> %7836, i16 %7840, i32 12
  %7842 = extractelement <64 x i32> %7776, i32 13
  %7843 = sext i32 %7842 to i64
  %7844 = getelementptr inbounds i16, i16* %input286, i64 %7843
  %7845 = load i16, i16* %7844, align 2, !tbaa !386
  %7846 = insertelement <64 x i16> %7841, i16 %7845, i32 13
  %7847 = extractelement <64 x i32> %7776, i32 14
  %7848 = sext i32 %7847 to i64
  %7849 = getelementptr inbounds i16, i16* %input286, i64 %7848
  %7850 = load i16, i16* %7849, align 2, !tbaa !386
  %7851 = insertelement <64 x i16> %7846, i16 %7850, i32 14
  %7852 = extractelement <64 x i32> %7776, i32 15
  %7853 = sext i32 %7852 to i64
  %7854 = getelementptr inbounds i16, i16* %input286, i64 %7853
  %7855 = load i16, i16* %7854, align 2, !tbaa !386
  %7856 = insertelement <64 x i16> %7851, i16 %7855, i32 15
  %7857 = extractelement <64 x i32> %7776, i32 16
  %7858 = sext i32 %7857 to i64
  %7859 = getelementptr inbounds i16, i16* %input286, i64 %7858
  %7860 = load i16, i16* %7859, align 2, !tbaa !386
  %7861 = insertelement <64 x i16> %7856, i16 %7860, i32 16
  %7862 = extractelement <64 x i32> %7776, i32 17
  %7863 = sext i32 %7862 to i64
  %7864 = getelementptr inbounds i16, i16* %input286, i64 %7863
  %7865 = load i16, i16* %7864, align 2, !tbaa !386
  %7866 = insertelement <64 x i16> %7861, i16 %7865, i32 17
  %7867 = extractelement <64 x i32> %7776, i32 18
  %7868 = sext i32 %7867 to i64
  %7869 = getelementptr inbounds i16, i16* %input286, i64 %7868
  %7870 = load i16, i16* %7869, align 2, !tbaa !386
  %7871 = insertelement <64 x i16> %7866, i16 %7870, i32 18
  %7872 = extractelement <64 x i32> %7776, i32 19
  %7873 = sext i32 %7872 to i64
  %7874 = getelementptr inbounds i16, i16* %input286, i64 %7873
  %7875 = load i16, i16* %7874, align 2, !tbaa !386
  %7876 = insertelement <64 x i16> %7871, i16 %7875, i32 19
  %7877 = extractelement <64 x i32> %7776, i32 20
  %7878 = sext i32 %7877 to i64
  %7879 = getelementptr inbounds i16, i16* %input286, i64 %7878
  %7880 = load i16, i16* %7879, align 2, !tbaa !386
  %7881 = insertelement <64 x i16> %7876, i16 %7880, i32 20
  %7882 = extractelement <64 x i32> %7776, i32 21
  %7883 = sext i32 %7882 to i64
  %7884 = getelementptr inbounds i16, i16* %input286, i64 %7883
  %7885 = load i16, i16* %7884, align 2, !tbaa !386
  %7886 = insertelement <64 x i16> %7881, i16 %7885, i32 21
  %7887 = extractelement <64 x i32> %7776, i32 22
  %7888 = sext i32 %7887 to i64
  %7889 = getelementptr inbounds i16, i16* %input286, i64 %7888
  %7890 = load i16, i16* %7889, align 2, !tbaa !386
  %7891 = insertelement <64 x i16> %7886, i16 %7890, i32 22
  %7892 = extractelement <64 x i32> %7776, i32 23
  %7893 = sext i32 %7892 to i64
  %7894 = getelementptr inbounds i16, i16* %input286, i64 %7893
  %7895 = load i16, i16* %7894, align 2, !tbaa !386
  %7896 = insertelement <64 x i16> %7891, i16 %7895, i32 23
  %7897 = extractelement <64 x i32> %7776, i32 24
  %7898 = sext i32 %7897 to i64
  %7899 = getelementptr inbounds i16, i16* %input286, i64 %7898
  %7900 = load i16, i16* %7899, align 2, !tbaa !386
  %7901 = insertelement <64 x i16> %7896, i16 %7900, i32 24
  %7902 = extractelement <64 x i32> %7776, i32 25
  %7903 = sext i32 %7902 to i64
  %7904 = getelementptr inbounds i16, i16* %input286, i64 %7903
  %7905 = load i16, i16* %7904, align 2, !tbaa !386
  %7906 = insertelement <64 x i16> %7901, i16 %7905, i32 25
  %7907 = extractelement <64 x i32> %7776, i32 26
  %7908 = sext i32 %7907 to i64
  %7909 = getelementptr inbounds i16, i16* %input286, i64 %7908
  %7910 = load i16, i16* %7909, align 2, !tbaa !386
  %7911 = insertelement <64 x i16> %7906, i16 %7910, i32 26
  %7912 = extractelement <64 x i32> %7776, i32 27
  %7913 = sext i32 %7912 to i64
  %7914 = getelementptr inbounds i16, i16* %input286, i64 %7913
  %7915 = load i16, i16* %7914, align 2, !tbaa !386
  %7916 = insertelement <64 x i16> %7911, i16 %7915, i32 27
  %7917 = extractelement <64 x i32> %7776, i32 28
  %7918 = sext i32 %7917 to i64
  %7919 = getelementptr inbounds i16, i16* %input286, i64 %7918
  %7920 = load i16, i16* %7919, align 2, !tbaa !386
  %7921 = insertelement <64 x i16> %7916, i16 %7920, i32 28
  %7922 = extractelement <64 x i32> %7776, i32 29
  %7923 = sext i32 %7922 to i64
  %7924 = getelementptr inbounds i16, i16* %input286, i64 %7923
  %7925 = load i16, i16* %7924, align 2, !tbaa !386
  %7926 = insertelement <64 x i16> %7921, i16 %7925, i32 29
  %7927 = extractelement <64 x i32> %7776, i32 30
  %7928 = sext i32 %7927 to i64
  %7929 = getelementptr inbounds i16, i16* %input286, i64 %7928
  %7930 = load i16, i16* %7929, align 2, !tbaa !386
  %7931 = insertelement <64 x i16> %7926, i16 %7930, i32 30
  %7932 = extractelement <64 x i32> %7776, i32 31
  %7933 = sext i32 %7932 to i64
  %7934 = getelementptr inbounds i16, i16* %input286, i64 %7933
  %7935 = load i16, i16* %7934, align 2, !tbaa !386
  %7936 = insertelement <64 x i16> %7931, i16 %7935, i32 31
  %7937 = extractelement <64 x i32> %7776, i32 32
  %7938 = sext i32 %7937 to i64
  %7939 = getelementptr inbounds i16, i16* %input286, i64 %7938
  %7940 = load i16, i16* %7939, align 2, !tbaa !386
  %7941 = insertelement <64 x i16> %7936, i16 %7940, i32 32
  %7942 = extractelement <64 x i32> %7776, i32 33
  %7943 = sext i32 %7942 to i64
  %7944 = getelementptr inbounds i16, i16* %input286, i64 %7943
  %7945 = load i16, i16* %7944, align 2, !tbaa !386
  %7946 = insertelement <64 x i16> %7941, i16 %7945, i32 33
  %7947 = extractelement <64 x i32> %7776, i32 34
  %7948 = sext i32 %7947 to i64
  %7949 = getelementptr inbounds i16, i16* %input286, i64 %7948
  %7950 = load i16, i16* %7949, align 2, !tbaa !386
  %7951 = insertelement <64 x i16> %7946, i16 %7950, i32 34
  %7952 = extractelement <64 x i32> %7776, i32 35
  %7953 = sext i32 %7952 to i64
  %7954 = getelementptr inbounds i16, i16* %input286, i64 %7953
  %7955 = load i16, i16* %7954, align 2, !tbaa !386
  %7956 = insertelement <64 x i16> %7951, i16 %7955, i32 35
  %7957 = extractelement <64 x i32> %7776, i32 36
  %7958 = sext i32 %7957 to i64
  %7959 = getelementptr inbounds i16, i16* %input286, i64 %7958
  %7960 = load i16, i16* %7959, align 2, !tbaa !386
  %7961 = insertelement <64 x i16> %7956, i16 %7960, i32 36
  %7962 = extractelement <64 x i32> %7776, i32 37
  %7963 = sext i32 %7962 to i64
  %7964 = getelementptr inbounds i16, i16* %input286, i64 %7963
  %7965 = load i16, i16* %7964, align 2, !tbaa !386
  %7966 = insertelement <64 x i16> %7961, i16 %7965, i32 37
  %7967 = extractelement <64 x i32> %7776, i32 38
  %7968 = sext i32 %7967 to i64
  %7969 = getelementptr inbounds i16, i16* %input286, i64 %7968
  %7970 = load i16, i16* %7969, align 2, !tbaa !386
  %7971 = insertelement <64 x i16> %7966, i16 %7970, i32 38
  %7972 = extractelement <64 x i32> %7776, i32 39
  %7973 = sext i32 %7972 to i64
  %7974 = getelementptr inbounds i16, i16* %input286, i64 %7973
  %7975 = load i16, i16* %7974, align 2, !tbaa !386
  %7976 = insertelement <64 x i16> %7971, i16 %7975, i32 39
  %7977 = extractelement <64 x i32> %7776, i32 40
  %7978 = sext i32 %7977 to i64
  %7979 = getelementptr inbounds i16, i16* %input286, i64 %7978
  %7980 = load i16, i16* %7979, align 2, !tbaa !386
  %7981 = insertelement <64 x i16> %7976, i16 %7980, i32 40
  %7982 = extractelement <64 x i32> %7776, i32 41
  %7983 = sext i32 %7982 to i64
  %7984 = getelementptr inbounds i16, i16* %input286, i64 %7983
  %7985 = load i16, i16* %7984, align 2, !tbaa !386
  %7986 = insertelement <64 x i16> %7981, i16 %7985, i32 41
  %7987 = extractelement <64 x i32> %7776, i32 42
  %7988 = sext i32 %7987 to i64
  %7989 = getelementptr inbounds i16, i16* %input286, i64 %7988
  %7990 = load i16, i16* %7989, align 2, !tbaa !386
  %7991 = insertelement <64 x i16> %7986, i16 %7990, i32 42
  %7992 = extractelement <64 x i32> %7776, i32 43
  %7993 = sext i32 %7992 to i64
  %7994 = getelementptr inbounds i16, i16* %input286, i64 %7993
  %7995 = load i16, i16* %7994, align 2, !tbaa !386
  %7996 = insertelement <64 x i16> %7991, i16 %7995, i32 43
  %7997 = extractelement <64 x i32> %7776, i32 44
  %7998 = sext i32 %7997 to i64
  %7999 = getelementptr inbounds i16, i16* %input286, i64 %7998
  %8000 = load i16, i16* %7999, align 2, !tbaa !386
  %8001 = insertelement <64 x i16> %7996, i16 %8000, i32 44
  %8002 = extractelement <64 x i32> %7776, i32 45
  %8003 = sext i32 %8002 to i64
  %8004 = getelementptr inbounds i16, i16* %input286, i64 %8003
  %8005 = load i16, i16* %8004, align 2, !tbaa !386
  %8006 = insertelement <64 x i16> %8001, i16 %8005, i32 45
  %8007 = extractelement <64 x i32> %7776, i32 46
  %8008 = sext i32 %8007 to i64
  %8009 = getelementptr inbounds i16, i16* %input286, i64 %8008
  %8010 = load i16, i16* %8009, align 2, !tbaa !386
  %8011 = insertelement <64 x i16> %8006, i16 %8010, i32 46
  %8012 = extractelement <64 x i32> %7776, i32 47
  %8013 = sext i32 %8012 to i64
  %8014 = getelementptr inbounds i16, i16* %input286, i64 %8013
  %8015 = load i16, i16* %8014, align 2, !tbaa !386
  %8016 = insertelement <64 x i16> %8011, i16 %8015, i32 47
  %8017 = extractelement <64 x i32> %7776, i32 48
  %8018 = sext i32 %8017 to i64
  %8019 = getelementptr inbounds i16, i16* %input286, i64 %8018
  %8020 = load i16, i16* %8019, align 2, !tbaa !386
  %8021 = insertelement <64 x i16> %8016, i16 %8020, i32 48
  %8022 = extractelement <64 x i32> %7776, i32 49
  %8023 = sext i32 %8022 to i64
  %8024 = getelementptr inbounds i16, i16* %input286, i64 %8023
  %8025 = load i16, i16* %8024, align 2, !tbaa !386
  %8026 = insertelement <64 x i16> %8021, i16 %8025, i32 49
  %8027 = extractelement <64 x i32> %7776, i32 50
  %8028 = sext i32 %8027 to i64
  %8029 = getelementptr inbounds i16, i16* %input286, i64 %8028
  %8030 = load i16, i16* %8029, align 2, !tbaa !386
  %8031 = insertelement <64 x i16> %8026, i16 %8030, i32 50
  %8032 = extractelement <64 x i32> %7776, i32 51
  %8033 = sext i32 %8032 to i64
  %8034 = getelementptr inbounds i16, i16* %input286, i64 %8033
  %8035 = load i16, i16* %8034, align 2, !tbaa !386
  %8036 = insertelement <64 x i16> %8031, i16 %8035, i32 51
  %8037 = extractelement <64 x i32> %7776, i32 52
  %8038 = sext i32 %8037 to i64
  %8039 = getelementptr inbounds i16, i16* %input286, i64 %8038
  %8040 = load i16, i16* %8039, align 2, !tbaa !386
  %8041 = insertelement <64 x i16> %8036, i16 %8040, i32 52
  %8042 = extractelement <64 x i32> %7776, i32 53
  %8043 = sext i32 %8042 to i64
  %8044 = getelementptr inbounds i16, i16* %input286, i64 %8043
  %8045 = load i16, i16* %8044, align 2, !tbaa !386
  %8046 = insertelement <64 x i16> %8041, i16 %8045, i32 53
  %8047 = extractelement <64 x i32> %7776, i32 54
  %8048 = sext i32 %8047 to i64
  %8049 = getelementptr inbounds i16, i16* %input286, i64 %8048
  %8050 = load i16, i16* %8049, align 2, !tbaa !386
  %8051 = insertelement <64 x i16> %8046, i16 %8050, i32 54
  %8052 = extractelement <64 x i32> %7776, i32 55
  %8053 = sext i32 %8052 to i64
  %8054 = getelementptr inbounds i16, i16* %input286, i64 %8053
  %8055 = load i16, i16* %8054, align 2, !tbaa !386
  %8056 = insertelement <64 x i16> %8051, i16 %8055, i32 55
  %8057 = extractelement <64 x i32> %7776, i32 56
  %8058 = sext i32 %8057 to i64
  %8059 = getelementptr inbounds i16, i16* %input286, i64 %8058
  %8060 = load i16, i16* %8059, align 2, !tbaa !386
  %8061 = insertelement <64 x i16> %8056, i16 %8060, i32 56
  %8062 = extractelement <64 x i32> %7776, i32 57
  %8063 = sext i32 %8062 to i64
  %8064 = getelementptr inbounds i16, i16* %input286, i64 %8063
  %8065 = load i16, i16* %8064, align 2, !tbaa !386
  %8066 = insertelement <64 x i16> %8061, i16 %8065, i32 57
  %8067 = extractelement <64 x i32> %7776, i32 58
  %8068 = sext i32 %8067 to i64
  %8069 = getelementptr inbounds i16, i16* %input286, i64 %8068
  %8070 = load i16, i16* %8069, align 2, !tbaa !386
  %8071 = insertelement <64 x i16> %8066, i16 %8070, i32 58
  %8072 = extractelement <64 x i32> %7776, i32 59
  %8073 = sext i32 %8072 to i64
  %8074 = getelementptr inbounds i16, i16* %input286, i64 %8073
  %8075 = load i16, i16* %8074, align 2, !tbaa !386
  %8076 = insertelement <64 x i16> %8071, i16 %8075, i32 59
  %8077 = extractelement <64 x i32> %7776, i32 60
  %8078 = sext i32 %8077 to i64
  %8079 = getelementptr inbounds i16, i16* %input286, i64 %8078
  %8080 = load i16, i16* %8079, align 2, !tbaa !386
  %8081 = insertelement <64 x i16> %8076, i16 %8080, i32 60
  %8082 = extractelement <64 x i32> %7776, i32 61
  %8083 = sext i32 %8082 to i64
  %8084 = getelementptr inbounds i16, i16* %input286, i64 %8083
  %8085 = load i16, i16* %8084, align 2, !tbaa !386
  %8086 = insertelement <64 x i16> %8081, i16 %8085, i32 61
  %8087 = extractelement <64 x i32> %7776, i32 62
  %8088 = sext i32 %8087 to i64
  %8089 = getelementptr inbounds i16, i16* %input286, i64 %8088
  %8090 = load i16, i16* %8089, align 2, !tbaa !386
  %8091 = insertelement <64 x i16> %8086, i16 %8090, i32 62
  %8092 = extractelement <64 x i32> %7776, i32 63
  %8093 = sext i32 %8092 to i64
  %8094 = getelementptr inbounds i16, i16* %input286, i64 %8093
  %8095 = load i16, i16* %8094, align 2, !tbaa !386
  %8096 = insertelement <64 x i16> %8091, i16 %8095, i32 63
  %8097 = add nsw i32 %blur_x.s0.x.v2.base.s19, -61
  %8098 = insertelement <64 x i32> undef, i32 %8097, i32 0
  %8099 = shufflevector <64 x i32> %8098, <64 x i32> undef, <64 x i32> zeroinitializer
  %8100 = add nsw <64 x i32> %8099, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %8101 = shufflevector <64 x i32> %8100, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %8102 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8101, <4 x i32> %53)
  %8103 = shufflevector <64 x i32> %8100, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %8104 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8103, <4 x i32> %53)
  %8105 = shufflevector <64 x i32> %8100, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %8106 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8105, <4 x i32> %53)
  %8107 = shufflevector <64 x i32> %8100, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %8108 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8107, <4 x i32> %53)
  %8109 = shufflevector <64 x i32> %8100, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %8110 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8109, <4 x i32> %53)
  %8111 = shufflevector <64 x i32> %8100, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %8112 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8111, <4 x i32> %53)
  %8113 = shufflevector <64 x i32> %8100, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %8114 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8113, <4 x i32> %53)
  %8115 = shufflevector <64 x i32> %8100, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %8116 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8115, <4 x i32> %53)
  %8117 = shufflevector <64 x i32> %8100, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %8118 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8117, <4 x i32> %53)
  %8119 = shufflevector <64 x i32> %8100, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %8120 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8119, <4 x i32> %53)
  %8121 = shufflevector <64 x i32> %8100, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %8122 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8121, <4 x i32> %53)
  %8123 = shufflevector <64 x i32> %8100, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %8124 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8123, <4 x i32> %53)
  %8125 = shufflevector <64 x i32> %8100, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %8126 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8125, <4 x i32> %53)
  %8127 = shufflevector <64 x i32> %8100, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %8128 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8127, <4 x i32> %53)
  %8129 = shufflevector <64 x i32> %8100, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %8130 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8129, <4 x i32> %53)
  %8131 = shufflevector <64 x i32> %8100, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %8132 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %8131, <4 x i32> %53)
  %8133 = shufflevector <4 x i32> %8132, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %8134 = shufflevector <8 x i32> %8133, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %8135 = shufflevector <16 x i32> %8134, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %8136 = shufflevector <32 x i32> %8135, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %8137 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8102, <4 x i32> %55)
  %8138 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8104, <4 x i32> %55)
  %8139 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8106, <4 x i32> %55)
  %8140 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8108, <4 x i32> %55)
  %8141 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8110, <4 x i32> %55)
  %8142 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8112, <4 x i32> %55)
  %8143 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8114, <4 x i32> %55)
  %8144 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8116, <4 x i32> %55)
  %8145 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8118, <4 x i32> %55)
  %8146 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8120, <4 x i32> %55)
  %8147 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8122, <4 x i32> %55)
  %8148 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8124, <4 x i32> %55)
  %8149 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8126, <4 x i32> %55)
  %8150 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8128, <4 x i32> %55)
  %8151 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8130, <4 x i32> %55)
  %8152 = shufflevector <64 x i32> %8136, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %8153 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %8152, <4 x i32> %55)
  %8154 = shufflevector <4 x i32> %8137, <4 x i32> %8138, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %8155 = shufflevector <4 x i32> %8139, <4 x i32> %8140, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %8156 = shufflevector <4 x i32> %8141, <4 x i32> %8142, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %8157 = shufflevector <4 x i32> %8143, <4 x i32> %8144, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %8158 = shufflevector <4 x i32> %8145, <4 x i32> %8146, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %8159 = shufflevector <4 x i32> %8147, <4 x i32> %8148, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %8160 = shufflevector <4 x i32> %8149, <4 x i32> %8150, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %8161 = shufflevector <4 x i32> %8151, <4 x i32> %8153, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %8162 = shufflevector <8 x i32> %8154, <8 x i32> %8155, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8163 = shufflevector <8 x i32> %8156, <8 x i32> %8157, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8164 = shufflevector <8 x i32> %8158, <8 x i32> %8159, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8165 = shufflevector <8 x i32> %8160, <8 x i32> %8161, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8166 = shufflevector <16 x i32> %8162, <16 x i32> %8163, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8167 = shufflevector <16 x i32> %8164, <16 x i32> %8165, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8168 = shufflevector <32 x i32> %8166, <32 x i32> %8167, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %8169 = add nsw <64 x i32> %8168, %t278
  %8170 = extractelement <64 x i32> %8169, i32 0
  %8171 = sext i32 %8170 to i64
  %8172 = getelementptr inbounds i16, i16* %input286, i64 %8171
  %8173 = load i16, i16* %8172, align 2, !tbaa !386
  %8174 = insertelement <64 x i16> undef, i16 %8173, i32 0
  %8175 = extractelement <64 x i32> %8169, i32 1
  %8176 = sext i32 %8175 to i64
  %8177 = getelementptr inbounds i16, i16* %input286, i64 %8176
  %8178 = load i16, i16* %8177, align 2, !tbaa !386
  %8179 = insertelement <64 x i16> %8174, i16 %8178, i32 1
  %8180 = extractelement <64 x i32> %8169, i32 2
  %8181 = sext i32 %8180 to i64
  %8182 = getelementptr inbounds i16, i16* %input286, i64 %8181
  %8183 = load i16, i16* %8182, align 2, !tbaa !386
  %8184 = insertelement <64 x i16> %8179, i16 %8183, i32 2
  %8185 = extractelement <64 x i32> %8169, i32 3
  %8186 = sext i32 %8185 to i64
  %8187 = getelementptr inbounds i16, i16* %input286, i64 %8186
  %8188 = load i16, i16* %8187, align 2, !tbaa !386
  %8189 = insertelement <64 x i16> %8184, i16 %8188, i32 3
  %8190 = extractelement <64 x i32> %8169, i32 4
  %8191 = sext i32 %8190 to i64
  %8192 = getelementptr inbounds i16, i16* %input286, i64 %8191
  %8193 = load i16, i16* %8192, align 2, !tbaa !386
  %8194 = insertelement <64 x i16> %8189, i16 %8193, i32 4
  %8195 = extractelement <64 x i32> %8169, i32 5
  %8196 = sext i32 %8195 to i64
  %8197 = getelementptr inbounds i16, i16* %input286, i64 %8196
  %8198 = load i16, i16* %8197, align 2, !tbaa !386
  %8199 = insertelement <64 x i16> %8194, i16 %8198, i32 5
  %8200 = extractelement <64 x i32> %8169, i32 6
  %8201 = sext i32 %8200 to i64
  %8202 = getelementptr inbounds i16, i16* %input286, i64 %8201
  %8203 = load i16, i16* %8202, align 2, !tbaa !386
  %8204 = insertelement <64 x i16> %8199, i16 %8203, i32 6
  %8205 = extractelement <64 x i32> %8169, i32 7
  %8206 = sext i32 %8205 to i64
  %8207 = getelementptr inbounds i16, i16* %input286, i64 %8206
  %8208 = load i16, i16* %8207, align 2, !tbaa !386
  %8209 = insertelement <64 x i16> %8204, i16 %8208, i32 7
  %8210 = extractelement <64 x i32> %8169, i32 8
  %8211 = sext i32 %8210 to i64
  %8212 = getelementptr inbounds i16, i16* %input286, i64 %8211
  %8213 = load i16, i16* %8212, align 2, !tbaa !386
  %8214 = insertelement <64 x i16> %8209, i16 %8213, i32 8
  %8215 = extractelement <64 x i32> %8169, i32 9
  %8216 = sext i32 %8215 to i64
  %8217 = getelementptr inbounds i16, i16* %input286, i64 %8216
  %8218 = load i16, i16* %8217, align 2, !tbaa !386
  %8219 = insertelement <64 x i16> %8214, i16 %8218, i32 9
  %8220 = extractelement <64 x i32> %8169, i32 10
  %8221 = sext i32 %8220 to i64
  %8222 = getelementptr inbounds i16, i16* %input286, i64 %8221
  %8223 = load i16, i16* %8222, align 2, !tbaa !386
  %8224 = insertelement <64 x i16> %8219, i16 %8223, i32 10
  %8225 = extractelement <64 x i32> %8169, i32 11
  %8226 = sext i32 %8225 to i64
  %8227 = getelementptr inbounds i16, i16* %input286, i64 %8226
  %8228 = load i16, i16* %8227, align 2, !tbaa !386
  %8229 = insertelement <64 x i16> %8224, i16 %8228, i32 11
  %8230 = extractelement <64 x i32> %8169, i32 12
  %8231 = sext i32 %8230 to i64
  %8232 = getelementptr inbounds i16, i16* %input286, i64 %8231
  %8233 = load i16, i16* %8232, align 2, !tbaa !386
  %8234 = insertelement <64 x i16> %8229, i16 %8233, i32 12
  %8235 = extractelement <64 x i32> %8169, i32 13
  %8236 = sext i32 %8235 to i64
  %8237 = getelementptr inbounds i16, i16* %input286, i64 %8236
  %8238 = load i16, i16* %8237, align 2, !tbaa !386
  %8239 = insertelement <64 x i16> %8234, i16 %8238, i32 13
  %8240 = extractelement <64 x i32> %8169, i32 14
  %8241 = sext i32 %8240 to i64
  %8242 = getelementptr inbounds i16, i16* %input286, i64 %8241
  %8243 = load i16, i16* %8242, align 2, !tbaa !386
  %8244 = insertelement <64 x i16> %8239, i16 %8243, i32 14
  %8245 = extractelement <64 x i32> %8169, i32 15
  %8246 = sext i32 %8245 to i64
  %8247 = getelementptr inbounds i16, i16* %input286, i64 %8246
  %8248 = load i16, i16* %8247, align 2, !tbaa !386
  %8249 = insertelement <64 x i16> %8244, i16 %8248, i32 15
  %8250 = extractelement <64 x i32> %8169, i32 16
  %8251 = sext i32 %8250 to i64
  %8252 = getelementptr inbounds i16, i16* %input286, i64 %8251
  %8253 = load i16, i16* %8252, align 2, !tbaa !386
  %8254 = insertelement <64 x i16> %8249, i16 %8253, i32 16
  %8255 = extractelement <64 x i32> %8169, i32 17
  %8256 = sext i32 %8255 to i64
  %8257 = getelementptr inbounds i16, i16* %input286, i64 %8256
  %8258 = load i16, i16* %8257, align 2, !tbaa !386
  %8259 = insertelement <64 x i16> %8254, i16 %8258, i32 17
  %8260 = extractelement <64 x i32> %8169, i32 18
  %8261 = sext i32 %8260 to i64
  %8262 = getelementptr inbounds i16, i16* %input286, i64 %8261
  %8263 = load i16, i16* %8262, align 2, !tbaa !386
  %8264 = insertelement <64 x i16> %8259, i16 %8263, i32 18
  %8265 = extractelement <64 x i32> %8169, i32 19
  %8266 = sext i32 %8265 to i64
  %8267 = getelementptr inbounds i16, i16* %input286, i64 %8266
  %8268 = load i16, i16* %8267, align 2, !tbaa !386
  %8269 = insertelement <64 x i16> %8264, i16 %8268, i32 19
  %8270 = extractelement <64 x i32> %8169, i32 20
  %8271 = sext i32 %8270 to i64
  %8272 = getelementptr inbounds i16, i16* %input286, i64 %8271
  %8273 = load i16, i16* %8272, align 2, !tbaa !386
  %8274 = insertelement <64 x i16> %8269, i16 %8273, i32 20
  %8275 = extractelement <64 x i32> %8169, i32 21
  %8276 = sext i32 %8275 to i64
  %8277 = getelementptr inbounds i16, i16* %input286, i64 %8276
  %8278 = load i16, i16* %8277, align 2, !tbaa !386
  %8279 = insertelement <64 x i16> %8274, i16 %8278, i32 21
  %8280 = extractelement <64 x i32> %8169, i32 22
  %8281 = sext i32 %8280 to i64
  %8282 = getelementptr inbounds i16, i16* %input286, i64 %8281
  %8283 = load i16, i16* %8282, align 2, !tbaa !386
  %8284 = insertelement <64 x i16> %8279, i16 %8283, i32 22
  %8285 = extractelement <64 x i32> %8169, i32 23
  %8286 = sext i32 %8285 to i64
  %8287 = getelementptr inbounds i16, i16* %input286, i64 %8286
  %8288 = load i16, i16* %8287, align 2, !tbaa !386
  %8289 = insertelement <64 x i16> %8284, i16 %8288, i32 23
  %8290 = extractelement <64 x i32> %8169, i32 24
  %8291 = sext i32 %8290 to i64
  %8292 = getelementptr inbounds i16, i16* %input286, i64 %8291
  %8293 = load i16, i16* %8292, align 2, !tbaa !386
  %8294 = insertelement <64 x i16> %8289, i16 %8293, i32 24
  %8295 = extractelement <64 x i32> %8169, i32 25
  %8296 = sext i32 %8295 to i64
  %8297 = getelementptr inbounds i16, i16* %input286, i64 %8296
  %8298 = load i16, i16* %8297, align 2, !tbaa !386
  %8299 = insertelement <64 x i16> %8294, i16 %8298, i32 25
  %8300 = extractelement <64 x i32> %8169, i32 26
  %8301 = sext i32 %8300 to i64
  %8302 = getelementptr inbounds i16, i16* %input286, i64 %8301
  %8303 = load i16, i16* %8302, align 2, !tbaa !386
  %8304 = insertelement <64 x i16> %8299, i16 %8303, i32 26
  %8305 = extractelement <64 x i32> %8169, i32 27
  %8306 = sext i32 %8305 to i64
  %8307 = getelementptr inbounds i16, i16* %input286, i64 %8306
  %8308 = load i16, i16* %8307, align 2, !tbaa !386
  %8309 = insertelement <64 x i16> %8304, i16 %8308, i32 27
  %8310 = extractelement <64 x i32> %8169, i32 28
  %8311 = sext i32 %8310 to i64
  %8312 = getelementptr inbounds i16, i16* %input286, i64 %8311
  %8313 = load i16, i16* %8312, align 2, !tbaa !386
  %8314 = insertelement <64 x i16> %8309, i16 %8313, i32 28
  %8315 = extractelement <64 x i32> %8169, i32 29
  %8316 = sext i32 %8315 to i64
  %8317 = getelementptr inbounds i16, i16* %input286, i64 %8316
  %8318 = load i16, i16* %8317, align 2, !tbaa !386
  %8319 = insertelement <64 x i16> %8314, i16 %8318, i32 29
  %8320 = extractelement <64 x i32> %8169, i32 30
  %8321 = sext i32 %8320 to i64
  %8322 = getelementptr inbounds i16, i16* %input286, i64 %8321
  %8323 = load i16, i16* %8322, align 2, !tbaa !386
  %8324 = insertelement <64 x i16> %8319, i16 %8323, i32 30
  %8325 = extractelement <64 x i32> %8169, i32 31
  %8326 = sext i32 %8325 to i64
  %8327 = getelementptr inbounds i16, i16* %input286, i64 %8326
  %8328 = load i16, i16* %8327, align 2, !tbaa !386
  %8329 = insertelement <64 x i16> %8324, i16 %8328, i32 31
  %8330 = extractelement <64 x i32> %8169, i32 32
  %8331 = sext i32 %8330 to i64
  %8332 = getelementptr inbounds i16, i16* %input286, i64 %8331
  %8333 = load i16, i16* %8332, align 2, !tbaa !386
  %8334 = insertelement <64 x i16> %8329, i16 %8333, i32 32
  %8335 = extractelement <64 x i32> %8169, i32 33
  %8336 = sext i32 %8335 to i64
  %8337 = getelementptr inbounds i16, i16* %input286, i64 %8336
  %8338 = load i16, i16* %8337, align 2, !tbaa !386
  %8339 = insertelement <64 x i16> %8334, i16 %8338, i32 33
  %8340 = extractelement <64 x i32> %8169, i32 34
  %8341 = sext i32 %8340 to i64
  %8342 = getelementptr inbounds i16, i16* %input286, i64 %8341
  %8343 = load i16, i16* %8342, align 2, !tbaa !386
  %8344 = insertelement <64 x i16> %8339, i16 %8343, i32 34
  %8345 = extractelement <64 x i32> %8169, i32 35
  %8346 = sext i32 %8345 to i64
  %8347 = getelementptr inbounds i16, i16* %input286, i64 %8346
  %8348 = load i16, i16* %8347, align 2, !tbaa !386
  %8349 = insertelement <64 x i16> %8344, i16 %8348, i32 35
  %8350 = extractelement <64 x i32> %8169, i32 36
  %8351 = sext i32 %8350 to i64
  %8352 = getelementptr inbounds i16, i16* %input286, i64 %8351
  %8353 = load i16, i16* %8352, align 2, !tbaa !386
  %8354 = insertelement <64 x i16> %8349, i16 %8353, i32 36
  %8355 = extractelement <64 x i32> %8169, i32 37
  %8356 = sext i32 %8355 to i64
  %8357 = getelementptr inbounds i16, i16* %input286, i64 %8356
  %8358 = load i16, i16* %8357, align 2, !tbaa !386
  %8359 = insertelement <64 x i16> %8354, i16 %8358, i32 37
  %8360 = extractelement <64 x i32> %8169, i32 38
  %8361 = sext i32 %8360 to i64
  %8362 = getelementptr inbounds i16, i16* %input286, i64 %8361
  %8363 = load i16, i16* %8362, align 2, !tbaa !386
  %8364 = insertelement <64 x i16> %8359, i16 %8363, i32 38
  %8365 = extractelement <64 x i32> %8169, i32 39
  %8366 = sext i32 %8365 to i64
  %8367 = getelementptr inbounds i16, i16* %input286, i64 %8366
  %8368 = load i16, i16* %8367, align 2, !tbaa !386
  %8369 = insertelement <64 x i16> %8364, i16 %8368, i32 39
  %8370 = extractelement <64 x i32> %8169, i32 40
  %8371 = sext i32 %8370 to i64
  %8372 = getelementptr inbounds i16, i16* %input286, i64 %8371
  %8373 = load i16, i16* %8372, align 2, !tbaa !386
  %8374 = insertelement <64 x i16> %8369, i16 %8373, i32 40
  %8375 = extractelement <64 x i32> %8169, i32 41
  %8376 = sext i32 %8375 to i64
  %8377 = getelementptr inbounds i16, i16* %input286, i64 %8376
  %8378 = load i16, i16* %8377, align 2, !tbaa !386
  %8379 = insertelement <64 x i16> %8374, i16 %8378, i32 41
  %8380 = extractelement <64 x i32> %8169, i32 42
  %8381 = sext i32 %8380 to i64
  %8382 = getelementptr inbounds i16, i16* %input286, i64 %8381
  %8383 = load i16, i16* %8382, align 2, !tbaa !386
  %8384 = insertelement <64 x i16> %8379, i16 %8383, i32 42
  %8385 = extractelement <64 x i32> %8169, i32 43
  %8386 = sext i32 %8385 to i64
  %8387 = getelementptr inbounds i16, i16* %input286, i64 %8386
  %8388 = load i16, i16* %8387, align 2, !tbaa !386
  %8389 = insertelement <64 x i16> %8384, i16 %8388, i32 43
  %8390 = extractelement <64 x i32> %8169, i32 44
  %8391 = sext i32 %8390 to i64
  %8392 = getelementptr inbounds i16, i16* %input286, i64 %8391
  %8393 = load i16, i16* %8392, align 2, !tbaa !386
  %8394 = insertelement <64 x i16> %8389, i16 %8393, i32 44
  %8395 = extractelement <64 x i32> %8169, i32 45
  %8396 = sext i32 %8395 to i64
  %8397 = getelementptr inbounds i16, i16* %input286, i64 %8396
  %8398 = load i16, i16* %8397, align 2, !tbaa !386
  %8399 = insertelement <64 x i16> %8394, i16 %8398, i32 45
  %8400 = extractelement <64 x i32> %8169, i32 46
  %8401 = sext i32 %8400 to i64
  %8402 = getelementptr inbounds i16, i16* %input286, i64 %8401
  %8403 = load i16, i16* %8402, align 2, !tbaa !386
  %8404 = insertelement <64 x i16> %8399, i16 %8403, i32 46
  %8405 = extractelement <64 x i32> %8169, i32 47
  %8406 = sext i32 %8405 to i64
  %8407 = getelementptr inbounds i16, i16* %input286, i64 %8406
  %8408 = load i16, i16* %8407, align 2, !tbaa !386
  %8409 = insertelement <64 x i16> %8404, i16 %8408, i32 47
  %8410 = extractelement <64 x i32> %8169, i32 48
  %8411 = sext i32 %8410 to i64
  %8412 = getelementptr inbounds i16, i16* %input286, i64 %8411
  %8413 = load i16, i16* %8412, align 2, !tbaa !386
  %8414 = insertelement <64 x i16> %8409, i16 %8413, i32 48
  %8415 = extractelement <64 x i32> %8169, i32 49
  %8416 = sext i32 %8415 to i64
  %8417 = getelementptr inbounds i16, i16* %input286, i64 %8416
  %8418 = load i16, i16* %8417, align 2, !tbaa !386
  %8419 = insertelement <64 x i16> %8414, i16 %8418, i32 49
  %8420 = extractelement <64 x i32> %8169, i32 50
  %8421 = sext i32 %8420 to i64
  %8422 = getelementptr inbounds i16, i16* %input286, i64 %8421
  %8423 = load i16, i16* %8422, align 2, !tbaa !386
  %8424 = insertelement <64 x i16> %8419, i16 %8423, i32 50
  %8425 = extractelement <64 x i32> %8169, i32 51
  %8426 = sext i32 %8425 to i64
  %8427 = getelementptr inbounds i16, i16* %input286, i64 %8426
  %8428 = load i16, i16* %8427, align 2, !tbaa !386
  %8429 = insertelement <64 x i16> %8424, i16 %8428, i32 51
  %8430 = extractelement <64 x i32> %8169, i32 52
  %8431 = sext i32 %8430 to i64
  %8432 = getelementptr inbounds i16, i16* %input286, i64 %8431
  %8433 = load i16, i16* %8432, align 2, !tbaa !386
  %8434 = insertelement <64 x i16> %8429, i16 %8433, i32 52
  %8435 = extractelement <64 x i32> %8169, i32 53
  %8436 = sext i32 %8435 to i64
  %8437 = getelementptr inbounds i16, i16* %input286, i64 %8436
  %8438 = load i16, i16* %8437, align 2, !tbaa !386
  %8439 = insertelement <64 x i16> %8434, i16 %8438, i32 53
  %8440 = extractelement <64 x i32> %8169, i32 54
  %8441 = sext i32 %8440 to i64
  %8442 = getelementptr inbounds i16, i16* %input286, i64 %8441
  %8443 = load i16, i16* %8442, align 2, !tbaa !386
  %8444 = insertelement <64 x i16> %8439, i16 %8443, i32 54
  %8445 = extractelement <64 x i32> %8169, i32 55
  %8446 = sext i32 %8445 to i64
  %8447 = getelementptr inbounds i16, i16* %input286, i64 %8446
  %8448 = load i16, i16* %8447, align 2, !tbaa !386
  %8449 = insertelement <64 x i16> %8444, i16 %8448, i32 55
  %8450 = extractelement <64 x i32> %8169, i32 56
  %8451 = sext i32 %8450 to i64
  %8452 = getelementptr inbounds i16, i16* %input286, i64 %8451
  %8453 = load i16, i16* %8452, align 2, !tbaa !386
  %8454 = insertelement <64 x i16> %8449, i16 %8453, i32 56
  %8455 = extractelement <64 x i32> %8169, i32 57
  %8456 = sext i32 %8455 to i64
  %8457 = getelementptr inbounds i16, i16* %input286, i64 %8456
  %8458 = load i16, i16* %8457, align 2, !tbaa !386
  %8459 = insertelement <64 x i16> %8454, i16 %8458, i32 57
  %8460 = extractelement <64 x i32> %8169, i32 58
  %8461 = sext i32 %8460 to i64
  %8462 = getelementptr inbounds i16, i16* %input286, i64 %8461
  %8463 = load i16, i16* %8462, align 2, !tbaa !386
  %8464 = insertelement <64 x i16> %8459, i16 %8463, i32 58
  %8465 = extractelement <64 x i32> %8169, i32 59
  %8466 = sext i32 %8465 to i64
  %8467 = getelementptr inbounds i16, i16* %input286, i64 %8466
  %8468 = load i16, i16* %8467, align 2, !tbaa !386
  %8469 = insertelement <64 x i16> %8464, i16 %8468, i32 59
  %8470 = extractelement <64 x i32> %8169, i32 60
  %8471 = sext i32 %8470 to i64
  %8472 = getelementptr inbounds i16, i16* %input286, i64 %8471
  %8473 = load i16, i16* %8472, align 2, !tbaa !386
  %8474 = insertelement <64 x i16> %8469, i16 %8473, i32 60
  %8475 = extractelement <64 x i32> %8169, i32 61
  %8476 = sext i32 %8475 to i64
  %8477 = getelementptr inbounds i16, i16* %input286, i64 %8476
  %8478 = load i16, i16* %8477, align 2, !tbaa !386
  %8479 = insertelement <64 x i16> %8474, i16 %8478, i32 61
  %8480 = extractelement <64 x i32> %8169, i32 62
  %8481 = sext i32 %8480 to i64
  %8482 = getelementptr inbounds i16, i16* %input286, i64 %8481
  %8483 = load i16, i16* %8482, align 2, !tbaa !386
  %8484 = insertelement <64 x i16> %8479, i16 %8483, i32 62
  %8485 = extractelement <64 x i32> %8169, i32 63
  %8486 = sext i32 %8485 to i64
  %8487 = getelementptr inbounds i16, i16* %input286, i64 %8486
  %8488 = load i16, i16* %8487, align 2, !tbaa !386
  %8489 = insertelement <64 x i16> %8484, i16 %8488, i32 63
  %8490 = add <64 x i16> %7310, %6917
  %8491 = add <64 x i16> %8490, %7703
  %8492 = add <64 x i16> %8491, %8096
  %8493 = add <64 x i16> %8492, %8489
  %8494 = shufflevector <64 x i16> %8493, <64 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %8495 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %8494, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8496 = shufflevector <64 x i16> %8493, <64 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %8497 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %8496, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8498 = shufflevector <64 x i16> %8493, <64 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %8499 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %8498, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8500 = shufflevector <64 x i16> %8493, <64 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %8501 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %8500, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8502 = shufflevector <64 x i16> %8493, <64 x i16> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %8503 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %8502, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8504 = shufflevector <64 x i16> %8493, <64 x i16> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %8505 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %8504, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8506 = shufflevector <64 x i16> %8493, <64 x i16> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %8507 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %8506, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8508 = shufflevector <64 x i16> %8493, <64 x i16> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %8509 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %8508, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8510 = shufflevector <64 x i16> %8493, <64 x i16> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %8511 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %8510, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8512 = shufflevector <64 x i16> %8493, <64 x i16> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %8513 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %8512, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8514 = shufflevector <64 x i16> %8493, <64 x i16> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %8515 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %8514, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8516 = shufflevector <64 x i16> %8493, <64 x i16> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %8517 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %8516, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8518 = shufflevector <64 x i16> %8493, <64 x i16> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %8519 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %8518, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8520 = shufflevector <64 x i16> %8493, <64 x i16> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %8521 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %8520, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8522 = shufflevector <64 x i16> %8493, <64 x i16> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %8523 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %8522, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8524 = shufflevector <64 x i16> %8493, <64 x i16> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %8525 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %8524, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8526 = shufflevector <4 x i32> %8495, <4 x i32> %8497, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %8527 = shufflevector <4 x i32> %8499, <4 x i32> %8501, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %8528 = shufflevector <4 x i32> %8503, <4 x i32> %8505, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %8529 = shufflevector <4 x i32> %8507, <4 x i32> %8509, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %8530 = shufflevector <4 x i32> %8511, <4 x i32> %8513, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %8531 = shufflevector <4 x i32> %8515, <4 x i32> %8517, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %8532 = shufflevector <4 x i32> %8519, <4 x i32> %8521, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %8533 = shufflevector <4 x i32> %8523, <4 x i32> %8525, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %8534 = shufflevector <8 x i32> %8526, <8 x i32> %8527, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8535 = shufflevector <8 x i32> %8528, <8 x i32> %8529, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8536 = shufflevector <8 x i32> %8530, <8 x i32> %8531, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8537 = shufflevector <8 x i32> %8532, <8 x i32> %8533, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8538 = shufflevector <16 x i32> %8534, <16 x i32> %8535, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8539 = shufflevector <16 x i32> %8536, <16 x i32> %8537, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8540 = shufflevector <32 x i32> %8538, <32 x i32> %8539, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %8541 = lshr <64 x i32> %8540, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %8542 = trunc <64 x i32> %8541 to <64 x i16>
  %8543 = shufflevector <64 x i16> %8542, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %8544 = sext i32 %blur_x.s0.x.v2.base.s19 to i64
  %8545 = add nsw i64 %8544, %6522
  %8546 = getelementptr inbounds i16, i16* %blur_x, i64 %8545
  %8547 = bitcast i16* %8546 to <8 x i16>*
  store <8 x i16> %8543, <8 x i16>* %8547, align 2, !tbaa !389
  %8548 = shufflevector <64 x i16> %8542, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8549 = getelementptr inbounds i16, i16* %8546, i64 8
  %8550 = bitcast i16* %8549 to <8 x i16>*
  store <8 x i16> %8548, <8 x i16>* %8550, align 2, !tbaa !389
  %8551 = shufflevector <64 x i16> %8542, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %8552 = getelementptr inbounds i16, i16* %8546, i64 16
  %8553 = bitcast i16* %8552 to <8 x i16>*
  store <8 x i16> %8551, <8 x i16>* %8553, align 2, !tbaa !389
  %8554 = shufflevector <64 x i16> %8542, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8555 = getelementptr inbounds i16, i16* %8546, i64 24
  %8556 = bitcast i16* %8555 to <8 x i16>*
  store <8 x i16> %8554, <8 x i16>* %8556, align 2, !tbaa !389
  %8557 = shufflevector <64 x i16> %8542, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %8558 = getelementptr inbounds i16, i16* %8546, i64 32
  %8559 = bitcast i16* %8558 to <8 x i16>*
  store <8 x i16> %8557, <8 x i16>* %8559, align 2, !tbaa !389
  %8560 = shufflevector <64 x i16> %8542, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %8561 = getelementptr inbounds i16, i16* %8546, i64 40
  %8562 = bitcast i16* %8561 to <8 x i16>*
  store <8 x i16> %8560, <8 x i16>* %8562, align 2, !tbaa !389
  %8563 = shufflevector <64 x i16> %8542, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %8564 = getelementptr inbounds i16, i16* %8546, i64 48
  %8565 = bitcast i16* %8564 to <8 x i16>*
  store <8 x i16> %8563, <8 x i16>* %8565, align 2, !tbaa !389
  %8566 = shufflevector <64 x i16> %8542, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %8567 = getelementptr inbounds i16, i16* %8546, i64 56
  %8568 = bitcast i16* %8567 to <8 x i16>*
  store <8 x i16> %8566, <8 x i16>* %8568, align 2, !tbaa !389
  %8569 = add nuw nsw i32 %blur_x.s0.x.x18, 1
  %.not218 = icmp eq i32 %8569, %t312
  br i1 %.not218, label %"end for blur_x.s0.x.x17", label %"for blur_x.s0.x.x16"

"end for blur_x.s0.x.x17":                        ; preds = %"for blur_x.s0.x.x16", %"for blur_x.s0.y.rebased13"
  %8570 = add nuw nsw i32 %blur_x.s0.y.rebased15, 1
  %.not217 = icmp eq i32 %blur_x.s0.y.rebased15, %a20.op
  br i1 %.not217, label %"end for blur_x.s0.y.rebased14", label %"for blur_x.s0.y.rebased13"

after_bb:                                         ; preds = %"for blur_y.s0.x.x38.preheader", %"end for blur_y.s0.x.x36", %"end for blur_x.s0.y.rebased14"
  %indvars.iv.next248 = add nuw nsw i64 %indvars.iv247, 1
  %.not171 = icmp eq i64 %indvars.iv.next248, 33
  br i1 %.not171, label %"end for blur_y.s0.y.yi.yi.$n.rebased", label %"for blur_y.s0.y.yi.yi.$n.rebased"

"consume blur_x":                                 ; preds = %"end for blur_x.s0.y.rebased14"
  br i1 %59, label %"for blur_y.s0.x.x.preheader", label %"end for blur_y.s0.x.x", !prof !385

"for blur_y.s0.x.x.preheader":                    ; preds = %"consume blur_x"
  %8571 = add nsw i32 %a5, 5
  %8572 = and i32 %8571, 7
  %8573 = zext i32 %8572 to i64
  %8574 = mul nsw i64 %60, %8573
  %8575 = and i32 %b6, 7
  %8576 = zext i32 %8575 to i64
  %8577 = mul nsw i64 %60, %8576
  %8578 = add nsw i32 %a5, 6
  %8579 = and i32 %8578, 7
  %8580 = zext i32 %8579 to i64
  %8581 = mul nsw i64 %60, %8580
  %8582 = and i32 %a5, 7
  %8583 = zext i32 %8582 to i64
  %8584 = mul nsw i64 %60, %8583
  %8585 = add nsw i32 %a5, 7
  %8586 = and i32 %8585, 7
  %8587 = zext i32 %8586 to i64
  %8588 = mul nsw i64 %60, %8587
  %8589 = sext i32 %a5 to i64
  %8590 = add nsw i64 %8589, -4
  %8591 = mul nsw i64 %8590, %61
  %8592 = add nsw i64 %8591, %62
  br label %"for blur_y.s0.x.x"

"for blur_y.s0.x.x":                              ; preds = %"for blur_y.s0.x.x.preheader", %"for blur_y.s0.x.x"
  %indvars.iv235 = phi i64 [ 0, %"for blur_y.s0.x.x.preheader" ], [ %indvars.iv.next236, %"for blur_y.s0.x.x" ]
  %8593 = shl nsw i64 %indvars.iv235, 6
  %8594 = sub nsw i64 %8593, %67
  %8595 = add nsw i64 %8574, %8594
  %8596 = getelementptr inbounds i16, i16* %blur_x, i64 %8595
  %8597 = getelementptr inbounds i16, i16* %8596, i64 64
  %8598 = bitcast i16* %8597 to <8 x i16>*
  %8599 = load <8 x i16>, <8 x i16>* %8598, align 2, !tbaa !389
  %8600 = getelementptr inbounds i16, i16* %8596, i64 72
  %8601 = bitcast i16* %8600 to <8 x i16>*
  %8602 = load <8 x i16>, <8 x i16>* %8601, align 2, !tbaa !389
  %8603 = getelementptr inbounds i16, i16* %8596, i64 80
  %8604 = bitcast i16* %8603 to <8 x i16>*
  %8605 = load <8 x i16>, <8 x i16>* %8604, align 2, !tbaa !389
  %8606 = getelementptr inbounds i16, i16* %8596, i64 88
  %8607 = bitcast i16* %8606 to <8 x i16>*
  %8608 = load <8 x i16>, <8 x i16>* %8607, align 2, !tbaa !389
  %8609 = getelementptr inbounds i16, i16* %8596, i64 96
  %8610 = bitcast i16* %8609 to <8 x i16>*
  %8611 = load <8 x i16>, <8 x i16>* %8610, align 2, !tbaa !389
  %8612 = getelementptr inbounds i16, i16* %8596, i64 104
  %8613 = bitcast i16* %8612 to <8 x i16>*
  %8614 = load <8 x i16>, <8 x i16>* %8613, align 2, !tbaa !389
  %8615 = getelementptr inbounds i16, i16* %8596, i64 112
  %8616 = bitcast i16* %8615 to <8 x i16>*
  %8617 = load <8 x i16>, <8 x i16>* %8616, align 2, !tbaa !389
  %8618 = getelementptr inbounds i16, i16* %8596, i64 120
  %8619 = bitcast i16* %8618 to <8 x i16>*
  %8620 = load <8 x i16>, <8 x i16>* %8619, align 2, !tbaa !389
  %8621 = add nsw i64 %8577, %8594
  %8622 = getelementptr inbounds i16, i16* %blur_x, i64 %8621
  %8623 = getelementptr inbounds i16, i16* %8622, i64 64
  %8624 = bitcast i16* %8623 to <8 x i16>*
  %8625 = load <8 x i16>, <8 x i16>* %8624, align 2, !tbaa !389
  %8626 = getelementptr inbounds i16, i16* %8622, i64 72
  %8627 = bitcast i16* %8626 to <8 x i16>*
  %8628 = load <8 x i16>, <8 x i16>* %8627, align 2, !tbaa !389
  %8629 = getelementptr inbounds i16, i16* %8622, i64 80
  %8630 = bitcast i16* %8629 to <8 x i16>*
  %8631 = load <8 x i16>, <8 x i16>* %8630, align 2, !tbaa !389
  %8632 = getelementptr inbounds i16, i16* %8622, i64 88
  %8633 = bitcast i16* %8632 to <8 x i16>*
  %8634 = load <8 x i16>, <8 x i16>* %8633, align 2, !tbaa !389
  %8635 = getelementptr inbounds i16, i16* %8622, i64 96
  %8636 = bitcast i16* %8635 to <8 x i16>*
  %8637 = load <8 x i16>, <8 x i16>* %8636, align 2, !tbaa !389
  %8638 = getelementptr inbounds i16, i16* %8622, i64 104
  %8639 = bitcast i16* %8638 to <8 x i16>*
  %8640 = load <8 x i16>, <8 x i16>* %8639, align 2, !tbaa !389
  %8641 = getelementptr inbounds i16, i16* %8622, i64 112
  %8642 = bitcast i16* %8641 to <8 x i16>*
  %8643 = load <8 x i16>, <8 x i16>* %8642, align 2, !tbaa !389
  %8644 = getelementptr inbounds i16, i16* %8622, i64 120
  %8645 = bitcast i16* %8644 to <8 x i16>*
  %8646 = load <8 x i16>, <8 x i16>* %8645, align 2, !tbaa !389
  %8647 = add nsw i64 %8581, %8594
  %8648 = getelementptr inbounds i16, i16* %blur_x, i64 %8647
  %8649 = getelementptr inbounds i16, i16* %8648, i64 64
  %8650 = bitcast i16* %8649 to <8 x i16>*
  %8651 = load <8 x i16>, <8 x i16>* %8650, align 2, !tbaa !389
  %8652 = getelementptr inbounds i16, i16* %8648, i64 72
  %8653 = bitcast i16* %8652 to <8 x i16>*
  %8654 = load <8 x i16>, <8 x i16>* %8653, align 2, !tbaa !389
  %8655 = getelementptr inbounds i16, i16* %8648, i64 80
  %8656 = bitcast i16* %8655 to <8 x i16>*
  %8657 = load <8 x i16>, <8 x i16>* %8656, align 2, !tbaa !389
  %8658 = getelementptr inbounds i16, i16* %8648, i64 88
  %8659 = bitcast i16* %8658 to <8 x i16>*
  %8660 = load <8 x i16>, <8 x i16>* %8659, align 2, !tbaa !389
  %8661 = getelementptr inbounds i16, i16* %8648, i64 96
  %8662 = bitcast i16* %8661 to <8 x i16>*
  %8663 = load <8 x i16>, <8 x i16>* %8662, align 2, !tbaa !389
  %8664 = getelementptr inbounds i16, i16* %8648, i64 104
  %8665 = bitcast i16* %8664 to <8 x i16>*
  %8666 = load <8 x i16>, <8 x i16>* %8665, align 2, !tbaa !389
  %8667 = getelementptr inbounds i16, i16* %8648, i64 112
  %8668 = bitcast i16* %8667 to <8 x i16>*
  %8669 = load <8 x i16>, <8 x i16>* %8668, align 2, !tbaa !389
  %8670 = getelementptr inbounds i16, i16* %8648, i64 120
  %8671 = bitcast i16* %8670 to <8 x i16>*
  %8672 = load <8 x i16>, <8 x i16>* %8671, align 2, !tbaa !389
  %8673 = add nsw i64 %8584, %8594
  %8674 = getelementptr inbounds i16, i16* %blur_x, i64 %8673
  %8675 = getelementptr inbounds i16, i16* %8674, i64 64
  %8676 = bitcast i16* %8675 to <8 x i16>*
  %8677 = load <8 x i16>, <8 x i16>* %8676, align 2, !tbaa !389
  %8678 = getelementptr inbounds i16, i16* %8674, i64 72
  %8679 = bitcast i16* %8678 to <8 x i16>*
  %8680 = load <8 x i16>, <8 x i16>* %8679, align 2, !tbaa !389
  %8681 = getelementptr inbounds i16, i16* %8674, i64 80
  %8682 = bitcast i16* %8681 to <8 x i16>*
  %8683 = load <8 x i16>, <8 x i16>* %8682, align 2, !tbaa !389
  %8684 = getelementptr inbounds i16, i16* %8674, i64 88
  %8685 = bitcast i16* %8684 to <8 x i16>*
  %8686 = load <8 x i16>, <8 x i16>* %8685, align 2, !tbaa !389
  %8687 = getelementptr inbounds i16, i16* %8674, i64 96
  %8688 = bitcast i16* %8687 to <8 x i16>*
  %8689 = load <8 x i16>, <8 x i16>* %8688, align 2, !tbaa !389
  %8690 = getelementptr inbounds i16, i16* %8674, i64 104
  %8691 = bitcast i16* %8690 to <8 x i16>*
  %8692 = load <8 x i16>, <8 x i16>* %8691, align 2, !tbaa !389
  %8693 = getelementptr inbounds i16, i16* %8674, i64 112
  %8694 = bitcast i16* %8693 to <8 x i16>*
  %8695 = load <8 x i16>, <8 x i16>* %8694, align 2, !tbaa !389
  %8696 = getelementptr inbounds i16, i16* %8674, i64 120
  %8697 = bitcast i16* %8696 to <8 x i16>*
  %8698 = load <8 x i16>, <8 x i16>* %8697, align 2, !tbaa !389
  %8699 = add nsw i64 %8588, %8594
  %8700 = getelementptr inbounds i16, i16* %blur_x, i64 %8699
  %8701 = getelementptr inbounds i16, i16* %8700, i64 64
  %8702 = bitcast i16* %8701 to <8 x i16>*
  %8703 = load <8 x i16>, <8 x i16>* %8702, align 2, !tbaa !389
  %8704 = getelementptr inbounds i16, i16* %8700, i64 72
  %8705 = bitcast i16* %8704 to <8 x i16>*
  %8706 = load <8 x i16>, <8 x i16>* %8705, align 2, !tbaa !389
  %8707 = getelementptr inbounds i16, i16* %8700, i64 80
  %8708 = bitcast i16* %8707 to <8 x i16>*
  %8709 = load <8 x i16>, <8 x i16>* %8708, align 2, !tbaa !389
  %8710 = getelementptr inbounds i16, i16* %8700, i64 88
  %8711 = bitcast i16* %8710 to <8 x i16>*
  %8712 = load <8 x i16>, <8 x i16>* %8711, align 2, !tbaa !389
  %8713 = getelementptr inbounds i16, i16* %8700, i64 96
  %8714 = bitcast i16* %8713 to <8 x i16>*
  %8715 = load <8 x i16>, <8 x i16>* %8714, align 2, !tbaa !389
  %8716 = getelementptr inbounds i16, i16* %8700, i64 104
  %8717 = bitcast i16* %8716 to <8 x i16>*
  %8718 = load <8 x i16>, <8 x i16>* %8717, align 2, !tbaa !389
  %8719 = getelementptr inbounds i16, i16* %8700, i64 112
  %8720 = bitcast i16* %8719 to <8 x i16>*
  %8721 = load <8 x i16>, <8 x i16>* %8720, align 2, !tbaa !389
  %8722 = getelementptr inbounds i16, i16* %8700, i64 120
  %8723 = bitcast i16* %8722 to <8 x i16>*
  %8724 = load <8 x i16>, <8 x i16>* %8723, align 2, !tbaa !389
  %8725 = add <8 x i16> %8625, %8599
  %8726 = add <8 x i16> %8725, %8651
  %8727 = add <8 x i16> %8726, %8677
  %8728 = add <8 x i16> %8727, %8703
  %8729 = add <8 x i16> %8628, %8602
  %8730 = add <8 x i16> %8729, %8654
  %8731 = add <8 x i16> %8730, %8680
  %8732 = add <8 x i16> %8731, %8706
  %8733 = add <8 x i16> %8631, %8605
  %8734 = add <8 x i16> %8733, %8657
  %8735 = add <8 x i16> %8734, %8683
  %8736 = add <8 x i16> %8735, %8709
  %8737 = add <8 x i16> %8634, %8608
  %8738 = add <8 x i16> %8737, %8660
  %8739 = add <8 x i16> %8738, %8686
  %8740 = add <8 x i16> %8739, %8712
  %8741 = add <8 x i16> %8637, %8611
  %8742 = add <8 x i16> %8741, %8663
  %8743 = add <8 x i16> %8742, %8689
  %8744 = add <8 x i16> %8743, %8715
  %8745 = add <8 x i16> %8640, %8614
  %8746 = add <8 x i16> %8745, %8666
  %8747 = add <8 x i16> %8746, %8692
  %8748 = add <8 x i16> %8747, %8718
  %8749 = add <8 x i16> %8643, %8617
  %8750 = add <8 x i16> %8749, %8669
  %8751 = add <8 x i16> %8750, %8695
  %8752 = add <8 x i16> %8751, %8721
  %8753 = add <8 x i16> %8646, %8620
  %8754 = add <8 x i16> %8753, %8672
  %8755 = add <8 x i16> %8754, %8698
  %8756 = add <8 x i16> %8755, %8724
  %8757 = shufflevector <8 x i16> %8756, <8 x i16> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %8758 = shufflevector <16 x i16> %8757, <16 x i16> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %8759 = shufflevector <32 x i16> %8758, <32 x i16> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %8760 = shufflevector <8 x i16> %8728, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %8761 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %8760, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8762 = shufflevector <8 x i16> %8728, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %8763 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %8762, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8764 = shufflevector <8 x i16> %8732, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %8765 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %8764, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8766 = shufflevector <8 x i16> %8732, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %8767 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %8766, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8768 = shufflevector <8 x i16> %8736, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %8769 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %8768, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8770 = shufflevector <8 x i16> %8736, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %8771 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %8770, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8772 = shufflevector <8 x i16> %8740, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %8773 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %8772, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8774 = shufflevector <8 x i16> %8740, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %8775 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %8774, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8776 = shufflevector <8 x i16> %8744, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %8777 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %8776, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8778 = shufflevector <8 x i16> %8744, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %8779 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %8778, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8780 = shufflevector <8 x i16> %8748, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %8781 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %8780, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8782 = shufflevector <8 x i16> %8748, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %8783 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %8782, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8784 = shufflevector <8 x i16> %8752, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %8785 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %8784, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8786 = shufflevector <8 x i16> %8752, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %8787 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %8786, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8788 = shufflevector <8 x i16> %8756, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %8789 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %8788, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8790 = shufflevector <64 x i16> %8759, <64 x i16> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %8791 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %8790, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8792 = shufflevector <4 x i32> %8761, <4 x i32> %8763, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %8793 = shufflevector <4 x i32> %8765, <4 x i32> %8767, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %8794 = shufflevector <4 x i32> %8769, <4 x i32> %8771, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %8795 = shufflevector <4 x i32> %8773, <4 x i32> %8775, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %8796 = shufflevector <4 x i32> %8777, <4 x i32> %8779, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %8797 = shufflevector <4 x i32> %8781, <4 x i32> %8783, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %8798 = shufflevector <4 x i32> %8785, <4 x i32> %8787, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %8799 = shufflevector <4 x i32> %8789, <4 x i32> %8791, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %8800 = shufflevector <8 x i32> %8792, <8 x i32> %8793, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8801 = shufflevector <8 x i32> %8794, <8 x i32> %8795, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8802 = shufflevector <8 x i32> %8796, <8 x i32> %8797, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8803 = shufflevector <8 x i32> %8798, <8 x i32> %8799, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8804 = shufflevector <16 x i32> %8800, <16 x i32> %8801, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8805 = shufflevector <16 x i32> %8802, <16 x i32> %8803, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8806 = shufflevector <32 x i32> %8804, <32 x i32> %8805, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %8807 = lshr <64 x i32> %8806, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %8808 = trunc <64 x i32> %8807 to <64 x i16>
  %8809 = shufflevector <64 x i16> %8808, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %8810 = add nsw i64 %8592, %8593
  %8811 = getelementptr inbounds i16, i16* %blur_y285, i64 %8810
  %8812 = bitcast i16* %8811 to <8 x i16>*
  store <8 x i16> %8809, <8 x i16>* %8812, align 2, !tbaa !391
  %8813 = shufflevector <64 x i16> %8808, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8814 = getelementptr inbounds i16, i16* %8811, i64 8
  %8815 = bitcast i16* %8814 to <8 x i16>*
  store <8 x i16> %8813, <8 x i16>* %8815, align 2, !tbaa !391
  %8816 = shufflevector <64 x i16> %8808, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %8817 = getelementptr inbounds i16, i16* %8811, i64 16
  %8818 = bitcast i16* %8817 to <8 x i16>*
  store <8 x i16> %8816, <8 x i16>* %8818, align 2, !tbaa !391
  %8819 = shufflevector <64 x i16> %8808, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8820 = getelementptr inbounds i16, i16* %8811, i64 24
  %8821 = bitcast i16* %8820 to <8 x i16>*
  store <8 x i16> %8819, <8 x i16>* %8821, align 2, !tbaa !391
  %8822 = shufflevector <64 x i16> %8808, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %8823 = getelementptr inbounds i16, i16* %8811, i64 32
  %8824 = bitcast i16* %8823 to <8 x i16>*
  store <8 x i16> %8822, <8 x i16>* %8824, align 2, !tbaa !391
  %8825 = shufflevector <64 x i16> %8808, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %8826 = getelementptr inbounds i16, i16* %8811, i64 40
  %8827 = bitcast i16* %8826 to <8 x i16>*
  store <8 x i16> %8825, <8 x i16>* %8827, align 2, !tbaa !391
  %8828 = shufflevector <64 x i16> %8808, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %8829 = getelementptr inbounds i16, i16* %8811, i64 48
  %8830 = bitcast i16* %8829 to <8 x i16>*
  store <8 x i16> %8828, <8 x i16>* %8830, align 2, !tbaa !391
  %8831 = shufflevector <64 x i16> %8808, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %8832 = getelementptr inbounds i16, i16* %8811, i64 56
  %8833 = bitcast i16* %8832 to <8 x i16>*
  store <8 x i16> %8831, <8 x i16>* %8833, align 2, !tbaa !391
  %indvars.iv.next236 = add nuw nsw i64 %indvars.iv235, 1
  %.not216 = icmp eq i64 %indvars.iv.next236, %66
  br i1 %.not216, label %"end for blur_y.s0.x.x", label %"for blur_y.s0.x.x"

"end for blur_y.s0.x.x":                          ; preds = %"for blur_y.s0.x.x", %"consume blur_x"
  br i1 %63, label %"for blur_y.s0.x.x20.preheader", label %"end for blur_y.s0.x.x21", !prof !385

"for blur_y.s0.x.x20.preheader":                  ; preds = %"end for blur_y.s0.x.x"
  %8834 = add nsw i32 %a5, 5
  %8835 = and i32 %8834, 7
  %narrow210 = add nuw nsw i32 %8835, 1
  %8836 = zext i32 %narrow210 to i64
  %8837 = mul nsw i64 %60, %8836
  %8838 = getelementptr inbounds i16, i16* %blur_x, i64 %8837
  %8839 = getelementptr inbounds i16, i16* %8838, i64 -64
  %8840 = bitcast i16* %8839 to <8 x i16>*
  %8841 = load <8 x i16>, <8 x i16>* %8840, align 2, !tbaa !389
  %8842 = getelementptr inbounds i16, i16* %8838, i64 -56
  %8843 = bitcast i16* %8842 to <8 x i16>*
  %8844 = load <8 x i16>, <8 x i16>* %8843, align 2, !tbaa !389
  %8845 = getelementptr inbounds i16, i16* %8838, i64 -48
  %8846 = bitcast i16* %8845 to <8 x i16>*
  %8847 = load <8 x i16>, <8 x i16>* %8846, align 2, !tbaa !389
  %8848 = getelementptr inbounds i16, i16* %8838, i64 -40
  %8849 = bitcast i16* %8848 to <8 x i16>*
  %8850 = load <8 x i16>, <8 x i16>* %8849, align 2, !tbaa !389
  %8851 = getelementptr inbounds i16, i16* %8838, i64 -32
  %8852 = bitcast i16* %8851 to <8 x i16>*
  %8853 = load <8 x i16>, <8 x i16>* %8852, align 2, !tbaa !389
  %8854 = getelementptr inbounds i16, i16* %8838, i64 -24
  %8855 = bitcast i16* %8854 to <8 x i16>*
  %8856 = load <8 x i16>, <8 x i16>* %8855, align 2, !tbaa !389
  %8857 = getelementptr inbounds i16, i16* %8838, i64 -16
  %8858 = bitcast i16* %8857 to <8 x i16>*
  %8859 = load <8 x i16>, <8 x i16>* %8858, align 2, !tbaa !389
  %8860 = getelementptr inbounds i16, i16* %8838, i64 -8
  %8861 = bitcast i16* %8860 to <8 x i16>*
  %8862 = load <8 x i16>, <8 x i16>* %8861, align 2, !tbaa !389
  %8863 = and i32 %b6, 7
  %narrow211 = add nuw nsw i32 %8863, 1
  %8864 = zext i32 %narrow211 to i64
  %8865 = mul nsw i64 %60, %8864
  %8866 = getelementptr inbounds i16, i16* %blur_x, i64 %8865
  %8867 = getelementptr inbounds i16, i16* %8866, i64 -64
  %8868 = bitcast i16* %8867 to <8 x i16>*
  %8869 = load <8 x i16>, <8 x i16>* %8868, align 2, !tbaa !389
  %8870 = getelementptr inbounds i16, i16* %8866, i64 -56
  %8871 = bitcast i16* %8870 to <8 x i16>*
  %8872 = load <8 x i16>, <8 x i16>* %8871, align 2, !tbaa !389
  %8873 = getelementptr inbounds i16, i16* %8866, i64 -48
  %8874 = bitcast i16* %8873 to <8 x i16>*
  %8875 = load <8 x i16>, <8 x i16>* %8874, align 2, !tbaa !389
  %8876 = getelementptr inbounds i16, i16* %8866, i64 -40
  %8877 = bitcast i16* %8876 to <8 x i16>*
  %8878 = load <8 x i16>, <8 x i16>* %8877, align 2, !tbaa !389
  %8879 = getelementptr inbounds i16, i16* %8866, i64 -32
  %8880 = bitcast i16* %8879 to <8 x i16>*
  %8881 = load <8 x i16>, <8 x i16>* %8880, align 2, !tbaa !389
  %8882 = getelementptr inbounds i16, i16* %8866, i64 -24
  %8883 = bitcast i16* %8882 to <8 x i16>*
  %8884 = load <8 x i16>, <8 x i16>* %8883, align 2, !tbaa !389
  %8885 = getelementptr inbounds i16, i16* %8866, i64 -16
  %8886 = bitcast i16* %8885 to <8 x i16>*
  %8887 = load <8 x i16>, <8 x i16>* %8886, align 2, !tbaa !389
  %8888 = getelementptr inbounds i16, i16* %8866, i64 -8
  %8889 = bitcast i16* %8888 to <8 x i16>*
  %8890 = load <8 x i16>, <8 x i16>* %8889, align 2, !tbaa !389
  %8891 = add nsw i32 %a5, 6
  %8892 = and i32 %8891, 7
  %narrow212 = add nuw nsw i32 %8892, 1
  %8893 = zext i32 %narrow212 to i64
  %8894 = mul nsw i64 %60, %8893
  %8895 = getelementptr inbounds i16, i16* %blur_x, i64 %8894
  %8896 = getelementptr inbounds i16, i16* %8895, i64 -64
  %8897 = bitcast i16* %8896 to <8 x i16>*
  %8898 = load <8 x i16>, <8 x i16>* %8897, align 2, !tbaa !389
  %8899 = getelementptr inbounds i16, i16* %8895, i64 -56
  %8900 = bitcast i16* %8899 to <8 x i16>*
  %8901 = load <8 x i16>, <8 x i16>* %8900, align 2, !tbaa !389
  %8902 = getelementptr inbounds i16, i16* %8895, i64 -48
  %8903 = bitcast i16* %8902 to <8 x i16>*
  %8904 = load <8 x i16>, <8 x i16>* %8903, align 2, !tbaa !389
  %8905 = getelementptr inbounds i16, i16* %8895, i64 -40
  %8906 = bitcast i16* %8905 to <8 x i16>*
  %8907 = load <8 x i16>, <8 x i16>* %8906, align 2, !tbaa !389
  %8908 = getelementptr inbounds i16, i16* %8895, i64 -32
  %8909 = bitcast i16* %8908 to <8 x i16>*
  %8910 = load <8 x i16>, <8 x i16>* %8909, align 2, !tbaa !389
  %8911 = getelementptr inbounds i16, i16* %8895, i64 -24
  %8912 = bitcast i16* %8911 to <8 x i16>*
  %8913 = load <8 x i16>, <8 x i16>* %8912, align 2, !tbaa !389
  %8914 = getelementptr inbounds i16, i16* %8895, i64 -16
  %8915 = bitcast i16* %8914 to <8 x i16>*
  %8916 = load <8 x i16>, <8 x i16>* %8915, align 2, !tbaa !389
  %8917 = getelementptr inbounds i16, i16* %8895, i64 -8
  %8918 = bitcast i16* %8917 to <8 x i16>*
  %8919 = load <8 x i16>, <8 x i16>* %8918, align 2, !tbaa !389
  %8920 = and i32 %a5, 7
  %narrow213 = add nuw nsw i32 %8920, 1
  %8921 = zext i32 %narrow213 to i64
  %8922 = mul nsw i64 %60, %8921
  %8923 = getelementptr inbounds i16, i16* %blur_x, i64 %8922
  %8924 = getelementptr inbounds i16, i16* %8923, i64 -64
  %8925 = bitcast i16* %8924 to <8 x i16>*
  %8926 = load <8 x i16>, <8 x i16>* %8925, align 2, !tbaa !389
  %8927 = getelementptr inbounds i16, i16* %8923, i64 -56
  %8928 = bitcast i16* %8927 to <8 x i16>*
  %8929 = load <8 x i16>, <8 x i16>* %8928, align 2, !tbaa !389
  %8930 = getelementptr inbounds i16, i16* %8923, i64 -48
  %8931 = bitcast i16* %8930 to <8 x i16>*
  %8932 = load <8 x i16>, <8 x i16>* %8931, align 2, !tbaa !389
  %8933 = getelementptr inbounds i16, i16* %8923, i64 -40
  %8934 = bitcast i16* %8933 to <8 x i16>*
  %8935 = load <8 x i16>, <8 x i16>* %8934, align 2, !tbaa !389
  %8936 = getelementptr inbounds i16, i16* %8923, i64 -32
  %8937 = bitcast i16* %8936 to <8 x i16>*
  %8938 = load <8 x i16>, <8 x i16>* %8937, align 2, !tbaa !389
  %8939 = getelementptr inbounds i16, i16* %8923, i64 -24
  %8940 = bitcast i16* %8939 to <8 x i16>*
  %8941 = load <8 x i16>, <8 x i16>* %8940, align 2, !tbaa !389
  %8942 = getelementptr inbounds i16, i16* %8923, i64 -16
  %8943 = bitcast i16* %8942 to <8 x i16>*
  %8944 = load <8 x i16>, <8 x i16>* %8943, align 2, !tbaa !389
  %8945 = getelementptr inbounds i16, i16* %8923, i64 -8
  %8946 = bitcast i16* %8945 to <8 x i16>*
  %8947 = load <8 x i16>, <8 x i16>* %8946, align 2, !tbaa !389
  %8948 = add nsw i32 %a5, 7
  %8949 = and i32 %8948, 7
  %narrow214 = add nuw nsw i32 %8949, 1
  %8950 = zext i32 %narrow214 to i64
  %8951 = mul nsw i64 %60, %8950
  %8952 = getelementptr inbounds i16, i16* %blur_x, i64 %8951
  %8953 = getelementptr inbounds i16, i16* %8952, i64 -64
  %8954 = bitcast i16* %8953 to <8 x i16>*
  %8955 = load <8 x i16>, <8 x i16>* %8954, align 2, !tbaa !389
  %8956 = getelementptr inbounds i16, i16* %8952, i64 -56
  %8957 = bitcast i16* %8956 to <8 x i16>*
  %8958 = load <8 x i16>, <8 x i16>* %8957, align 2, !tbaa !389
  %8959 = getelementptr inbounds i16, i16* %8952, i64 -48
  %8960 = bitcast i16* %8959 to <8 x i16>*
  %8961 = load <8 x i16>, <8 x i16>* %8960, align 2, !tbaa !389
  %8962 = getelementptr inbounds i16, i16* %8952, i64 -40
  %8963 = bitcast i16* %8962 to <8 x i16>*
  %8964 = load <8 x i16>, <8 x i16>* %8963, align 2, !tbaa !389
  %8965 = getelementptr inbounds i16, i16* %8952, i64 -32
  %8966 = bitcast i16* %8965 to <8 x i16>*
  %8967 = load <8 x i16>, <8 x i16>* %8966, align 2, !tbaa !389
  %8968 = getelementptr inbounds i16, i16* %8952, i64 -24
  %8969 = bitcast i16* %8968 to <8 x i16>*
  %8970 = load <8 x i16>, <8 x i16>* %8969, align 2, !tbaa !389
  %8971 = getelementptr inbounds i16, i16* %8952, i64 -16
  %8972 = bitcast i16* %8971 to <8 x i16>*
  %8973 = load <8 x i16>, <8 x i16>* %8972, align 2, !tbaa !389
  %8974 = getelementptr inbounds i16, i16* %8952, i64 -8
  %8975 = bitcast i16* %8974 to <8 x i16>*
  %8976 = load <8 x i16>, <8 x i16>* %8975, align 2, !tbaa !389
  %8977 = add <8 x i16> %8869, %8841
  %8978 = add <8 x i16> %8977, %8898
  %8979 = add <8 x i16> %8978, %8926
  %8980 = add <8 x i16> %8979, %8955
  %8981 = add <8 x i16> %8872, %8844
  %8982 = add <8 x i16> %8981, %8901
  %8983 = add <8 x i16> %8982, %8929
  %8984 = add <8 x i16> %8983, %8958
  %8985 = add <8 x i16> %8875, %8847
  %8986 = add <8 x i16> %8985, %8904
  %8987 = add <8 x i16> %8986, %8932
  %8988 = add <8 x i16> %8987, %8961
  %8989 = add <8 x i16> %8878, %8850
  %8990 = add <8 x i16> %8989, %8907
  %8991 = add <8 x i16> %8990, %8935
  %8992 = add <8 x i16> %8991, %8964
  %8993 = add <8 x i16> %8881, %8853
  %8994 = add <8 x i16> %8993, %8910
  %8995 = add <8 x i16> %8994, %8938
  %8996 = add <8 x i16> %8995, %8967
  %8997 = add <8 x i16> %8884, %8856
  %8998 = add <8 x i16> %8997, %8913
  %8999 = add <8 x i16> %8998, %8941
  %9000 = add <8 x i16> %8999, %8970
  %9001 = add <8 x i16> %8887, %8859
  %9002 = add <8 x i16> %9001, %8916
  %9003 = add <8 x i16> %9002, %8944
  %9004 = add <8 x i16> %9003, %8973
  %9005 = add <8 x i16> %8890, %8862
  %9006 = add <8 x i16> %9005, %8919
  %9007 = add <8 x i16> %9006, %8947
  %9008 = add <8 x i16> %9007, %8976
  %9009 = shufflevector <8 x i16> %9008, <8 x i16> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %9010 = shufflevector <16 x i16> %9009, <16 x i16> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %9011 = shufflevector <32 x i16> %9010, <32 x i16> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %9012 = shufflevector <8 x i16> %8980, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %9013 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9012, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9014 = shufflevector <8 x i16> %8980, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %9015 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9014, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9016 = shufflevector <8 x i16> %8984, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %9017 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9016, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9018 = shufflevector <8 x i16> %8984, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %9019 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9018, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9020 = shufflevector <8 x i16> %8988, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %9021 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9020, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9022 = shufflevector <8 x i16> %8988, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %9023 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9022, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9024 = shufflevector <8 x i16> %8992, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %9025 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9024, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9026 = shufflevector <8 x i16> %8992, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %9027 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9026, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9028 = shufflevector <8 x i16> %8996, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %9029 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9028, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9030 = shufflevector <8 x i16> %8996, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %9031 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9030, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9032 = shufflevector <8 x i16> %9000, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %9033 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9032, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9034 = shufflevector <8 x i16> %9000, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %9035 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9034, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9036 = shufflevector <8 x i16> %9004, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %9037 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9036, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9038 = shufflevector <8 x i16> %9004, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %9039 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9038, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9040 = shufflevector <8 x i16> %9008, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %9041 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9040, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9042 = shufflevector <64 x i16> %9011, <64 x i16> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %9043 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9042, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9044 = shufflevector <4 x i32> %9013, <4 x i32> %9015, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9045 = shufflevector <4 x i32> %9017, <4 x i32> %9019, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9046 = shufflevector <4 x i32> %9021, <4 x i32> %9023, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9047 = shufflevector <4 x i32> %9025, <4 x i32> %9027, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9048 = shufflevector <4 x i32> %9029, <4 x i32> %9031, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9049 = shufflevector <4 x i32> %9033, <4 x i32> %9035, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9050 = shufflevector <4 x i32> %9037, <4 x i32> %9039, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9051 = shufflevector <4 x i32> %9041, <4 x i32> %9043, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9052 = shufflevector <8 x i32> %9044, <8 x i32> %9045, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9053 = shufflevector <8 x i32> %9046, <8 x i32> %9047, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9054 = shufflevector <8 x i32> %9048, <8 x i32> %9049, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9055 = shufflevector <8 x i32> %9050, <8 x i32> %9051, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9056 = shufflevector <16 x i32> %9052, <16 x i32> %9053, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9057 = shufflevector <16 x i32> %9054, <16 x i32> %9055, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9058 = shufflevector <32 x i32> %9056, <32 x i32> %9057, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %9059 = lshr <64 x i32> %9058, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %9060 = trunc <64 x i32> %9059 to <64 x i16>
  %9061 = sext i32 %a5 to i64
  %9062 = add nsw i64 %9061, -4
  %9063 = mul nsw i64 %9062, %61
  %9064 = add nsw i64 %9063, %64
  %9065 = getelementptr inbounds i16, i16* %blur_y285, i64 %9064
  %9066 = getelementptr inbounds i16, i16* %9065, i64 -64
  %9067 = bitcast i16* %9066 to <8 x i16>*
  %9068 = getelementptr inbounds i16, i16* %9065, i64 -56
  %9069 = bitcast i16* %9068 to <8 x i16>*
  %9070 = getelementptr inbounds i16, i16* %9065, i64 -48
  %9071 = bitcast i16* %9070 to <8 x i16>*
  %9072 = getelementptr inbounds i16, i16* %9065, i64 -40
  %9073 = bitcast i16* %9072 to <8 x i16>*
  %9074 = getelementptr inbounds i16, i16* %9065, i64 -32
  %9075 = bitcast i16* %9074 to <8 x i16>*
  %9076 = getelementptr inbounds i16, i16* %9065, i64 -24
  %9077 = bitcast i16* %9076 to <8 x i16>*
  %9078 = getelementptr inbounds i16, i16* %9065, i64 -16
  %9079 = bitcast i16* %9078 to <8 x i16>*
  %9080 = getelementptr inbounds i16, i16* %9065, i64 -8
  %9081 = shufflevector <64 x i16> %9060, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9082 = shufflevector <64 x i16> %9060, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9083 = shufflevector <64 x i16> %9060, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %9084 = shufflevector <64 x i16> %9060, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9085 = shufflevector <64 x i16> %9060, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %9086 = shufflevector <64 x i16> %9060, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %9087 = shufflevector <64 x i16> %9060, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %9088 = shufflevector <64 x i16> %9060, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %9089 = bitcast i16* %9080 to <8 x i16>*
  store <8 x i16> %9081, <8 x i16>* %9067, align 2, !tbaa !391
  store <8 x i16> %9082, <8 x i16>* %9069, align 2, !tbaa !391
  store <8 x i16> %9083, <8 x i16>* %9071, align 2, !tbaa !391
  store <8 x i16> %9084, <8 x i16>* %9073, align 2, !tbaa !391
  store <8 x i16> %9085, <8 x i16>* %9075, align 2, !tbaa !391
  store <8 x i16> %9086, <8 x i16>* %9077, align 2, !tbaa !391
  store <8 x i16> %9087, <8 x i16>* %9079, align 2, !tbaa !391
  store <8 x i16> %9088, <8 x i16>* %9089, align 2, !tbaa !391
  br label %"end for blur_y.s0.x.x21"

"end for blur_y.s0.x.x21":                        ; preds = %"for blur_y.s0.x.x20.preheader", %"end for blur_y.s0.x.x"
  br i1 %59, label %"for blur_y.s0.x.x23.preheader", label %"end for blur_y.s0.x.x24", !prof !385

"for blur_y.s0.x.x23.preheader":                  ; preds = %"end for blur_y.s0.x.x21"
  %9090 = add nsw i32 %a5, 6
  %9091 = and i32 %9090, 7
  %9092 = zext i32 %9091 to i64
  %9093 = mul nsw i64 %60, %9092
  %9094 = add nsw i32 %a5, 5
  %9095 = and i32 %9094, 7
  %9096 = zext i32 %9095 to i64
  %9097 = mul nsw i64 %60, %9096
  %9098 = add nsw i32 %a5, 7
  %9099 = and i32 %9098, 7
  %9100 = zext i32 %9099 to i64
  %9101 = mul nsw i64 %60, %9100
  %9102 = add nsw i32 %a5, 1
  %9103 = and i32 %9102, 7
  %9104 = zext i32 %9103 to i64
  %9105 = mul nsw i64 %60, %9104
  %9106 = and i32 %a5, 7
  %9107 = zext i32 %9106 to i64
  %9108 = mul nsw i64 %60, %9107
  %9109 = sext i32 %a5 to i64
  %9110 = add nsw i64 %9109, -3
  %9111 = mul nsw i64 %9110, %61
  %9112 = add nsw i64 %9111, %62
  br label %"for blur_y.s0.x.x23"

"for blur_y.s0.x.x23":                            ; preds = %"for blur_y.s0.x.x23.preheader", %"for blur_y.s0.x.x23"
  %indvars.iv238 = phi i64 [ 0, %"for blur_y.s0.x.x23.preheader" ], [ %indvars.iv.next239, %"for blur_y.s0.x.x23" ]
  %9113 = shl nsw i64 %indvars.iv238, 6
  %9114 = sub nsw i64 %9113, %67
  %9115 = add nsw i64 %9093, %9114
  %9116 = getelementptr inbounds i16, i16* %blur_x, i64 %9115
  %9117 = getelementptr inbounds i16, i16* %9116, i64 64
  %9118 = bitcast i16* %9117 to <8 x i16>*
  %9119 = load <8 x i16>, <8 x i16>* %9118, align 2, !tbaa !389
  %9120 = getelementptr inbounds i16, i16* %9116, i64 72
  %9121 = bitcast i16* %9120 to <8 x i16>*
  %9122 = load <8 x i16>, <8 x i16>* %9121, align 2, !tbaa !389
  %9123 = getelementptr inbounds i16, i16* %9116, i64 80
  %9124 = bitcast i16* %9123 to <8 x i16>*
  %9125 = load <8 x i16>, <8 x i16>* %9124, align 2, !tbaa !389
  %9126 = getelementptr inbounds i16, i16* %9116, i64 88
  %9127 = bitcast i16* %9126 to <8 x i16>*
  %9128 = load <8 x i16>, <8 x i16>* %9127, align 2, !tbaa !389
  %9129 = getelementptr inbounds i16, i16* %9116, i64 96
  %9130 = bitcast i16* %9129 to <8 x i16>*
  %9131 = load <8 x i16>, <8 x i16>* %9130, align 2, !tbaa !389
  %9132 = getelementptr inbounds i16, i16* %9116, i64 104
  %9133 = bitcast i16* %9132 to <8 x i16>*
  %9134 = load <8 x i16>, <8 x i16>* %9133, align 2, !tbaa !389
  %9135 = getelementptr inbounds i16, i16* %9116, i64 112
  %9136 = bitcast i16* %9135 to <8 x i16>*
  %9137 = load <8 x i16>, <8 x i16>* %9136, align 2, !tbaa !389
  %9138 = getelementptr inbounds i16, i16* %9116, i64 120
  %9139 = bitcast i16* %9138 to <8 x i16>*
  %9140 = load <8 x i16>, <8 x i16>* %9139, align 2, !tbaa !389
  %9141 = add nsw i64 %9097, %9114
  %9142 = getelementptr inbounds i16, i16* %blur_x, i64 %9141
  %9143 = getelementptr inbounds i16, i16* %9142, i64 64
  %9144 = bitcast i16* %9143 to <8 x i16>*
  %9145 = load <8 x i16>, <8 x i16>* %9144, align 2, !tbaa !389
  %9146 = getelementptr inbounds i16, i16* %9142, i64 72
  %9147 = bitcast i16* %9146 to <8 x i16>*
  %9148 = load <8 x i16>, <8 x i16>* %9147, align 2, !tbaa !389
  %9149 = getelementptr inbounds i16, i16* %9142, i64 80
  %9150 = bitcast i16* %9149 to <8 x i16>*
  %9151 = load <8 x i16>, <8 x i16>* %9150, align 2, !tbaa !389
  %9152 = getelementptr inbounds i16, i16* %9142, i64 88
  %9153 = bitcast i16* %9152 to <8 x i16>*
  %9154 = load <8 x i16>, <8 x i16>* %9153, align 2, !tbaa !389
  %9155 = getelementptr inbounds i16, i16* %9142, i64 96
  %9156 = bitcast i16* %9155 to <8 x i16>*
  %9157 = load <8 x i16>, <8 x i16>* %9156, align 2, !tbaa !389
  %9158 = getelementptr inbounds i16, i16* %9142, i64 104
  %9159 = bitcast i16* %9158 to <8 x i16>*
  %9160 = load <8 x i16>, <8 x i16>* %9159, align 2, !tbaa !389
  %9161 = getelementptr inbounds i16, i16* %9142, i64 112
  %9162 = bitcast i16* %9161 to <8 x i16>*
  %9163 = load <8 x i16>, <8 x i16>* %9162, align 2, !tbaa !389
  %9164 = getelementptr inbounds i16, i16* %9142, i64 120
  %9165 = bitcast i16* %9164 to <8 x i16>*
  %9166 = load <8 x i16>, <8 x i16>* %9165, align 2, !tbaa !389
  %9167 = add nsw i64 %9101, %9114
  %9168 = getelementptr inbounds i16, i16* %blur_x, i64 %9167
  %9169 = getelementptr inbounds i16, i16* %9168, i64 64
  %9170 = bitcast i16* %9169 to <8 x i16>*
  %9171 = load <8 x i16>, <8 x i16>* %9170, align 2, !tbaa !389
  %9172 = getelementptr inbounds i16, i16* %9168, i64 72
  %9173 = bitcast i16* %9172 to <8 x i16>*
  %9174 = load <8 x i16>, <8 x i16>* %9173, align 2, !tbaa !389
  %9175 = getelementptr inbounds i16, i16* %9168, i64 80
  %9176 = bitcast i16* %9175 to <8 x i16>*
  %9177 = load <8 x i16>, <8 x i16>* %9176, align 2, !tbaa !389
  %9178 = getelementptr inbounds i16, i16* %9168, i64 88
  %9179 = bitcast i16* %9178 to <8 x i16>*
  %9180 = load <8 x i16>, <8 x i16>* %9179, align 2, !tbaa !389
  %9181 = getelementptr inbounds i16, i16* %9168, i64 96
  %9182 = bitcast i16* %9181 to <8 x i16>*
  %9183 = load <8 x i16>, <8 x i16>* %9182, align 2, !tbaa !389
  %9184 = getelementptr inbounds i16, i16* %9168, i64 104
  %9185 = bitcast i16* %9184 to <8 x i16>*
  %9186 = load <8 x i16>, <8 x i16>* %9185, align 2, !tbaa !389
  %9187 = getelementptr inbounds i16, i16* %9168, i64 112
  %9188 = bitcast i16* %9187 to <8 x i16>*
  %9189 = load <8 x i16>, <8 x i16>* %9188, align 2, !tbaa !389
  %9190 = getelementptr inbounds i16, i16* %9168, i64 120
  %9191 = bitcast i16* %9190 to <8 x i16>*
  %9192 = load <8 x i16>, <8 x i16>* %9191, align 2, !tbaa !389
  %9193 = add nsw i64 %9105, %9114
  %9194 = getelementptr inbounds i16, i16* %blur_x, i64 %9193
  %9195 = getelementptr inbounds i16, i16* %9194, i64 64
  %9196 = bitcast i16* %9195 to <8 x i16>*
  %9197 = load <8 x i16>, <8 x i16>* %9196, align 2, !tbaa !389
  %9198 = getelementptr inbounds i16, i16* %9194, i64 72
  %9199 = bitcast i16* %9198 to <8 x i16>*
  %9200 = load <8 x i16>, <8 x i16>* %9199, align 2, !tbaa !389
  %9201 = getelementptr inbounds i16, i16* %9194, i64 80
  %9202 = bitcast i16* %9201 to <8 x i16>*
  %9203 = load <8 x i16>, <8 x i16>* %9202, align 2, !tbaa !389
  %9204 = getelementptr inbounds i16, i16* %9194, i64 88
  %9205 = bitcast i16* %9204 to <8 x i16>*
  %9206 = load <8 x i16>, <8 x i16>* %9205, align 2, !tbaa !389
  %9207 = getelementptr inbounds i16, i16* %9194, i64 96
  %9208 = bitcast i16* %9207 to <8 x i16>*
  %9209 = load <8 x i16>, <8 x i16>* %9208, align 2, !tbaa !389
  %9210 = getelementptr inbounds i16, i16* %9194, i64 104
  %9211 = bitcast i16* %9210 to <8 x i16>*
  %9212 = load <8 x i16>, <8 x i16>* %9211, align 2, !tbaa !389
  %9213 = getelementptr inbounds i16, i16* %9194, i64 112
  %9214 = bitcast i16* %9213 to <8 x i16>*
  %9215 = load <8 x i16>, <8 x i16>* %9214, align 2, !tbaa !389
  %9216 = getelementptr inbounds i16, i16* %9194, i64 120
  %9217 = bitcast i16* %9216 to <8 x i16>*
  %9218 = load <8 x i16>, <8 x i16>* %9217, align 2, !tbaa !389
  %9219 = add nsw i64 %9108, %9114
  %9220 = getelementptr inbounds i16, i16* %blur_x, i64 %9219
  %9221 = getelementptr inbounds i16, i16* %9220, i64 64
  %9222 = bitcast i16* %9221 to <8 x i16>*
  %9223 = load <8 x i16>, <8 x i16>* %9222, align 2, !tbaa !389
  %9224 = getelementptr inbounds i16, i16* %9220, i64 72
  %9225 = bitcast i16* %9224 to <8 x i16>*
  %9226 = load <8 x i16>, <8 x i16>* %9225, align 2, !tbaa !389
  %9227 = getelementptr inbounds i16, i16* %9220, i64 80
  %9228 = bitcast i16* %9227 to <8 x i16>*
  %9229 = load <8 x i16>, <8 x i16>* %9228, align 2, !tbaa !389
  %9230 = getelementptr inbounds i16, i16* %9220, i64 88
  %9231 = bitcast i16* %9230 to <8 x i16>*
  %9232 = load <8 x i16>, <8 x i16>* %9231, align 2, !tbaa !389
  %9233 = getelementptr inbounds i16, i16* %9220, i64 96
  %9234 = bitcast i16* %9233 to <8 x i16>*
  %9235 = load <8 x i16>, <8 x i16>* %9234, align 2, !tbaa !389
  %9236 = getelementptr inbounds i16, i16* %9220, i64 104
  %9237 = bitcast i16* %9236 to <8 x i16>*
  %9238 = load <8 x i16>, <8 x i16>* %9237, align 2, !tbaa !389
  %9239 = getelementptr inbounds i16, i16* %9220, i64 112
  %9240 = bitcast i16* %9239 to <8 x i16>*
  %9241 = load <8 x i16>, <8 x i16>* %9240, align 2, !tbaa !389
  %9242 = getelementptr inbounds i16, i16* %9220, i64 120
  %9243 = bitcast i16* %9242 to <8 x i16>*
  %9244 = load <8 x i16>, <8 x i16>* %9243, align 2, !tbaa !389
  %9245 = add <8 x i16> %9145, %9119
  %9246 = add <8 x i16> %9245, %9171
  %9247 = add <8 x i16> %9246, %9197
  %9248 = add <8 x i16> %9247, %9223
  %9249 = add <8 x i16> %9148, %9122
  %9250 = add <8 x i16> %9249, %9174
  %9251 = add <8 x i16> %9250, %9200
  %9252 = add <8 x i16> %9251, %9226
  %9253 = add <8 x i16> %9151, %9125
  %9254 = add <8 x i16> %9253, %9177
  %9255 = add <8 x i16> %9254, %9203
  %9256 = add <8 x i16> %9255, %9229
  %9257 = add <8 x i16> %9154, %9128
  %9258 = add <8 x i16> %9257, %9180
  %9259 = add <8 x i16> %9258, %9206
  %9260 = add <8 x i16> %9259, %9232
  %9261 = add <8 x i16> %9157, %9131
  %9262 = add <8 x i16> %9261, %9183
  %9263 = add <8 x i16> %9262, %9209
  %9264 = add <8 x i16> %9263, %9235
  %9265 = add <8 x i16> %9160, %9134
  %9266 = add <8 x i16> %9265, %9186
  %9267 = add <8 x i16> %9266, %9212
  %9268 = add <8 x i16> %9267, %9238
  %9269 = add <8 x i16> %9163, %9137
  %9270 = add <8 x i16> %9269, %9189
  %9271 = add <8 x i16> %9270, %9215
  %9272 = add <8 x i16> %9271, %9241
  %9273 = add <8 x i16> %9166, %9140
  %9274 = add <8 x i16> %9273, %9192
  %9275 = add <8 x i16> %9274, %9218
  %9276 = add <8 x i16> %9275, %9244
  %9277 = shufflevector <8 x i16> %9276, <8 x i16> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %9278 = shufflevector <16 x i16> %9277, <16 x i16> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %9279 = shufflevector <32 x i16> %9278, <32 x i16> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %9280 = shufflevector <8 x i16> %9248, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %9281 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9280, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9282 = shufflevector <8 x i16> %9248, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %9283 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9282, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9284 = shufflevector <8 x i16> %9252, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %9285 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9284, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9286 = shufflevector <8 x i16> %9252, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %9287 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9286, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9288 = shufflevector <8 x i16> %9256, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %9289 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9288, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9290 = shufflevector <8 x i16> %9256, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %9291 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9290, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9292 = shufflevector <8 x i16> %9260, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %9293 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9292, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9294 = shufflevector <8 x i16> %9260, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %9295 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9294, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9296 = shufflevector <8 x i16> %9264, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %9297 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9296, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9298 = shufflevector <8 x i16> %9264, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %9299 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9298, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9300 = shufflevector <8 x i16> %9268, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %9301 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9300, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9302 = shufflevector <8 x i16> %9268, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %9303 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9302, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9304 = shufflevector <8 x i16> %9272, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %9305 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9304, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9306 = shufflevector <8 x i16> %9272, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %9307 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9306, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9308 = shufflevector <8 x i16> %9276, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %9309 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9308, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9310 = shufflevector <64 x i16> %9279, <64 x i16> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %9311 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9310, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9312 = shufflevector <4 x i32> %9281, <4 x i32> %9283, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9313 = shufflevector <4 x i32> %9285, <4 x i32> %9287, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9314 = shufflevector <4 x i32> %9289, <4 x i32> %9291, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9315 = shufflevector <4 x i32> %9293, <4 x i32> %9295, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9316 = shufflevector <4 x i32> %9297, <4 x i32> %9299, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9317 = shufflevector <4 x i32> %9301, <4 x i32> %9303, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9318 = shufflevector <4 x i32> %9305, <4 x i32> %9307, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9319 = shufflevector <4 x i32> %9309, <4 x i32> %9311, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9320 = shufflevector <8 x i32> %9312, <8 x i32> %9313, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9321 = shufflevector <8 x i32> %9314, <8 x i32> %9315, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9322 = shufflevector <8 x i32> %9316, <8 x i32> %9317, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9323 = shufflevector <8 x i32> %9318, <8 x i32> %9319, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9324 = shufflevector <16 x i32> %9320, <16 x i32> %9321, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9325 = shufflevector <16 x i32> %9322, <16 x i32> %9323, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9326 = shufflevector <32 x i32> %9324, <32 x i32> %9325, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %9327 = lshr <64 x i32> %9326, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %9328 = trunc <64 x i32> %9327 to <64 x i16>
  %9329 = shufflevector <64 x i16> %9328, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9330 = add nsw i64 %9112, %9113
  %9331 = getelementptr inbounds i16, i16* %blur_y285, i64 %9330
  %9332 = bitcast i16* %9331 to <8 x i16>*
  store <8 x i16> %9329, <8 x i16>* %9332, align 2, !tbaa !391
  %9333 = shufflevector <64 x i16> %9328, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9334 = getelementptr inbounds i16, i16* %9331, i64 8
  %9335 = bitcast i16* %9334 to <8 x i16>*
  store <8 x i16> %9333, <8 x i16>* %9335, align 2, !tbaa !391
  %9336 = shufflevector <64 x i16> %9328, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %9337 = getelementptr inbounds i16, i16* %9331, i64 16
  %9338 = bitcast i16* %9337 to <8 x i16>*
  store <8 x i16> %9336, <8 x i16>* %9338, align 2, !tbaa !391
  %9339 = shufflevector <64 x i16> %9328, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9340 = getelementptr inbounds i16, i16* %9331, i64 24
  %9341 = bitcast i16* %9340 to <8 x i16>*
  store <8 x i16> %9339, <8 x i16>* %9341, align 2, !tbaa !391
  %9342 = shufflevector <64 x i16> %9328, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %9343 = getelementptr inbounds i16, i16* %9331, i64 32
  %9344 = bitcast i16* %9343 to <8 x i16>*
  store <8 x i16> %9342, <8 x i16>* %9344, align 2, !tbaa !391
  %9345 = shufflevector <64 x i16> %9328, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %9346 = getelementptr inbounds i16, i16* %9331, i64 40
  %9347 = bitcast i16* %9346 to <8 x i16>*
  store <8 x i16> %9345, <8 x i16>* %9347, align 2, !tbaa !391
  %9348 = shufflevector <64 x i16> %9328, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %9349 = getelementptr inbounds i16, i16* %9331, i64 48
  %9350 = bitcast i16* %9349 to <8 x i16>*
  store <8 x i16> %9348, <8 x i16>* %9350, align 2, !tbaa !391
  %9351 = shufflevector <64 x i16> %9328, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %9352 = getelementptr inbounds i16, i16* %9331, i64 56
  %9353 = bitcast i16* %9352 to <8 x i16>*
  store <8 x i16> %9351, <8 x i16>* %9353, align 2, !tbaa !391
  %indvars.iv.next239 = add nuw nsw i64 %indvars.iv238, 1
  %.not209 = icmp eq i64 %indvars.iv.next239, %66
  br i1 %.not209, label %"end for blur_y.s0.x.x24", label %"for blur_y.s0.x.x23"

"end for blur_y.s0.x.x24":                        ; preds = %"for blur_y.s0.x.x23", %"end for blur_y.s0.x.x21"
  br i1 %63, label %"for blur_y.s0.x.x26.preheader", label %"end for blur_y.s0.x.x27", !prof !385

"for blur_y.s0.x.x26.preheader":                  ; preds = %"end for blur_y.s0.x.x24"
  %9354 = add nsw i32 %a5, 6
  %9355 = and i32 %9354, 7
  %narrow203 = add nuw nsw i32 %9355, 1
  %9356 = zext i32 %narrow203 to i64
  %9357 = mul nsw i64 %60, %9356
  %9358 = getelementptr inbounds i16, i16* %blur_x, i64 %9357
  %9359 = getelementptr inbounds i16, i16* %9358, i64 -64
  %9360 = bitcast i16* %9359 to <8 x i16>*
  %9361 = load <8 x i16>, <8 x i16>* %9360, align 2, !tbaa !389
  %9362 = getelementptr inbounds i16, i16* %9358, i64 -56
  %9363 = bitcast i16* %9362 to <8 x i16>*
  %9364 = load <8 x i16>, <8 x i16>* %9363, align 2, !tbaa !389
  %9365 = getelementptr inbounds i16, i16* %9358, i64 -48
  %9366 = bitcast i16* %9365 to <8 x i16>*
  %9367 = load <8 x i16>, <8 x i16>* %9366, align 2, !tbaa !389
  %9368 = getelementptr inbounds i16, i16* %9358, i64 -40
  %9369 = bitcast i16* %9368 to <8 x i16>*
  %9370 = load <8 x i16>, <8 x i16>* %9369, align 2, !tbaa !389
  %9371 = getelementptr inbounds i16, i16* %9358, i64 -32
  %9372 = bitcast i16* %9371 to <8 x i16>*
  %9373 = load <8 x i16>, <8 x i16>* %9372, align 2, !tbaa !389
  %9374 = getelementptr inbounds i16, i16* %9358, i64 -24
  %9375 = bitcast i16* %9374 to <8 x i16>*
  %9376 = load <8 x i16>, <8 x i16>* %9375, align 2, !tbaa !389
  %9377 = getelementptr inbounds i16, i16* %9358, i64 -16
  %9378 = bitcast i16* %9377 to <8 x i16>*
  %9379 = load <8 x i16>, <8 x i16>* %9378, align 2, !tbaa !389
  %9380 = getelementptr inbounds i16, i16* %9358, i64 -8
  %9381 = bitcast i16* %9380 to <8 x i16>*
  %9382 = load <8 x i16>, <8 x i16>* %9381, align 2, !tbaa !389
  %9383 = add nsw i32 %a5, 5
  %9384 = and i32 %9383, 7
  %narrow204 = add nuw nsw i32 %9384, 1
  %9385 = zext i32 %narrow204 to i64
  %9386 = mul nsw i64 %60, %9385
  %9387 = getelementptr inbounds i16, i16* %blur_x, i64 %9386
  %9388 = getelementptr inbounds i16, i16* %9387, i64 -64
  %9389 = bitcast i16* %9388 to <8 x i16>*
  %9390 = load <8 x i16>, <8 x i16>* %9389, align 2, !tbaa !389
  %9391 = getelementptr inbounds i16, i16* %9387, i64 -56
  %9392 = bitcast i16* %9391 to <8 x i16>*
  %9393 = load <8 x i16>, <8 x i16>* %9392, align 2, !tbaa !389
  %9394 = getelementptr inbounds i16, i16* %9387, i64 -48
  %9395 = bitcast i16* %9394 to <8 x i16>*
  %9396 = load <8 x i16>, <8 x i16>* %9395, align 2, !tbaa !389
  %9397 = getelementptr inbounds i16, i16* %9387, i64 -40
  %9398 = bitcast i16* %9397 to <8 x i16>*
  %9399 = load <8 x i16>, <8 x i16>* %9398, align 2, !tbaa !389
  %9400 = getelementptr inbounds i16, i16* %9387, i64 -32
  %9401 = bitcast i16* %9400 to <8 x i16>*
  %9402 = load <8 x i16>, <8 x i16>* %9401, align 2, !tbaa !389
  %9403 = getelementptr inbounds i16, i16* %9387, i64 -24
  %9404 = bitcast i16* %9403 to <8 x i16>*
  %9405 = load <8 x i16>, <8 x i16>* %9404, align 2, !tbaa !389
  %9406 = getelementptr inbounds i16, i16* %9387, i64 -16
  %9407 = bitcast i16* %9406 to <8 x i16>*
  %9408 = load <8 x i16>, <8 x i16>* %9407, align 2, !tbaa !389
  %9409 = getelementptr inbounds i16, i16* %9387, i64 -8
  %9410 = bitcast i16* %9409 to <8 x i16>*
  %9411 = load <8 x i16>, <8 x i16>* %9410, align 2, !tbaa !389
  %9412 = add nsw i32 %a5, 7
  %9413 = and i32 %9412, 7
  %narrow205 = add nuw nsw i32 %9413, 1
  %9414 = zext i32 %narrow205 to i64
  %9415 = mul nsw i64 %60, %9414
  %9416 = getelementptr inbounds i16, i16* %blur_x, i64 %9415
  %9417 = getelementptr inbounds i16, i16* %9416, i64 -64
  %9418 = bitcast i16* %9417 to <8 x i16>*
  %9419 = load <8 x i16>, <8 x i16>* %9418, align 2, !tbaa !389
  %9420 = getelementptr inbounds i16, i16* %9416, i64 -56
  %9421 = bitcast i16* %9420 to <8 x i16>*
  %9422 = load <8 x i16>, <8 x i16>* %9421, align 2, !tbaa !389
  %9423 = getelementptr inbounds i16, i16* %9416, i64 -48
  %9424 = bitcast i16* %9423 to <8 x i16>*
  %9425 = load <8 x i16>, <8 x i16>* %9424, align 2, !tbaa !389
  %9426 = getelementptr inbounds i16, i16* %9416, i64 -40
  %9427 = bitcast i16* %9426 to <8 x i16>*
  %9428 = load <8 x i16>, <8 x i16>* %9427, align 2, !tbaa !389
  %9429 = getelementptr inbounds i16, i16* %9416, i64 -32
  %9430 = bitcast i16* %9429 to <8 x i16>*
  %9431 = load <8 x i16>, <8 x i16>* %9430, align 2, !tbaa !389
  %9432 = getelementptr inbounds i16, i16* %9416, i64 -24
  %9433 = bitcast i16* %9432 to <8 x i16>*
  %9434 = load <8 x i16>, <8 x i16>* %9433, align 2, !tbaa !389
  %9435 = getelementptr inbounds i16, i16* %9416, i64 -16
  %9436 = bitcast i16* %9435 to <8 x i16>*
  %9437 = load <8 x i16>, <8 x i16>* %9436, align 2, !tbaa !389
  %9438 = getelementptr inbounds i16, i16* %9416, i64 -8
  %9439 = bitcast i16* %9438 to <8 x i16>*
  %9440 = load <8 x i16>, <8 x i16>* %9439, align 2, !tbaa !389
  %9441 = add nsw i32 %a5, 1
  %9442 = and i32 %9441, 7
  %narrow206 = add nuw nsw i32 %9442, 1
  %9443 = zext i32 %narrow206 to i64
  %9444 = mul nsw i64 %60, %9443
  %9445 = getelementptr inbounds i16, i16* %blur_x, i64 %9444
  %9446 = getelementptr inbounds i16, i16* %9445, i64 -64
  %9447 = bitcast i16* %9446 to <8 x i16>*
  %9448 = load <8 x i16>, <8 x i16>* %9447, align 2, !tbaa !389
  %9449 = getelementptr inbounds i16, i16* %9445, i64 -56
  %9450 = bitcast i16* %9449 to <8 x i16>*
  %9451 = load <8 x i16>, <8 x i16>* %9450, align 2, !tbaa !389
  %9452 = getelementptr inbounds i16, i16* %9445, i64 -48
  %9453 = bitcast i16* %9452 to <8 x i16>*
  %9454 = load <8 x i16>, <8 x i16>* %9453, align 2, !tbaa !389
  %9455 = getelementptr inbounds i16, i16* %9445, i64 -40
  %9456 = bitcast i16* %9455 to <8 x i16>*
  %9457 = load <8 x i16>, <8 x i16>* %9456, align 2, !tbaa !389
  %9458 = getelementptr inbounds i16, i16* %9445, i64 -32
  %9459 = bitcast i16* %9458 to <8 x i16>*
  %9460 = load <8 x i16>, <8 x i16>* %9459, align 2, !tbaa !389
  %9461 = getelementptr inbounds i16, i16* %9445, i64 -24
  %9462 = bitcast i16* %9461 to <8 x i16>*
  %9463 = load <8 x i16>, <8 x i16>* %9462, align 2, !tbaa !389
  %9464 = getelementptr inbounds i16, i16* %9445, i64 -16
  %9465 = bitcast i16* %9464 to <8 x i16>*
  %9466 = load <8 x i16>, <8 x i16>* %9465, align 2, !tbaa !389
  %9467 = getelementptr inbounds i16, i16* %9445, i64 -8
  %9468 = bitcast i16* %9467 to <8 x i16>*
  %9469 = load <8 x i16>, <8 x i16>* %9468, align 2, !tbaa !389
  %9470 = and i32 %a5, 7
  %narrow207 = add nuw nsw i32 %9470, 1
  %9471 = zext i32 %narrow207 to i64
  %9472 = mul nsw i64 %60, %9471
  %9473 = getelementptr inbounds i16, i16* %blur_x, i64 %9472
  %9474 = getelementptr inbounds i16, i16* %9473, i64 -64
  %9475 = bitcast i16* %9474 to <8 x i16>*
  %9476 = load <8 x i16>, <8 x i16>* %9475, align 2, !tbaa !389
  %9477 = getelementptr inbounds i16, i16* %9473, i64 -56
  %9478 = bitcast i16* %9477 to <8 x i16>*
  %9479 = load <8 x i16>, <8 x i16>* %9478, align 2, !tbaa !389
  %9480 = getelementptr inbounds i16, i16* %9473, i64 -48
  %9481 = bitcast i16* %9480 to <8 x i16>*
  %9482 = load <8 x i16>, <8 x i16>* %9481, align 2, !tbaa !389
  %9483 = getelementptr inbounds i16, i16* %9473, i64 -40
  %9484 = bitcast i16* %9483 to <8 x i16>*
  %9485 = load <8 x i16>, <8 x i16>* %9484, align 2, !tbaa !389
  %9486 = getelementptr inbounds i16, i16* %9473, i64 -32
  %9487 = bitcast i16* %9486 to <8 x i16>*
  %9488 = load <8 x i16>, <8 x i16>* %9487, align 2, !tbaa !389
  %9489 = getelementptr inbounds i16, i16* %9473, i64 -24
  %9490 = bitcast i16* %9489 to <8 x i16>*
  %9491 = load <8 x i16>, <8 x i16>* %9490, align 2, !tbaa !389
  %9492 = getelementptr inbounds i16, i16* %9473, i64 -16
  %9493 = bitcast i16* %9492 to <8 x i16>*
  %9494 = load <8 x i16>, <8 x i16>* %9493, align 2, !tbaa !389
  %9495 = getelementptr inbounds i16, i16* %9473, i64 -8
  %9496 = bitcast i16* %9495 to <8 x i16>*
  %9497 = load <8 x i16>, <8 x i16>* %9496, align 2, !tbaa !389
  %9498 = add <8 x i16> %9390, %9361
  %9499 = add <8 x i16> %9498, %9419
  %9500 = add <8 x i16> %9499, %9448
  %9501 = add <8 x i16> %9500, %9476
  %9502 = add <8 x i16> %9393, %9364
  %9503 = add <8 x i16> %9502, %9422
  %9504 = add <8 x i16> %9503, %9451
  %9505 = add <8 x i16> %9504, %9479
  %9506 = add <8 x i16> %9396, %9367
  %9507 = add <8 x i16> %9506, %9425
  %9508 = add <8 x i16> %9507, %9454
  %9509 = add <8 x i16> %9508, %9482
  %9510 = add <8 x i16> %9399, %9370
  %9511 = add <8 x i16> %9510, %9428
  %9512 = add <8 x i16> %9511, %9457
  %9513 = add <8 x i16> %9512, %9485
  %9514 = add <8 x i16> %9402, %9373
  %9515 = add <8 x i16> %9514, %9431
  %9516 = add <8 x i16> %9515, %9460
  %9517 = add <8 x i16> %9516, %9488
  %9518 = add <8 x i16> %9405, %9376
  %9519 = add <8 x i16> %9518, %9434
  %9520 = add <8 x i16> %9519, %9463
  %9521 = add <8 x i16> %9520, %9491
  %9522 = add <8 x i16> %9408, %9379
  %9523 = add <8 x i16> %9522, %9437
  %9524 = add <8 x i16> %9523, %9466
  %9525 = add <8 x i16> %9524, %9494
  %9526 = add <8 x i16> %9411, %9382
  %9527 = add <8 x i16> %9526, %9440
  %9528 = add <8 x i16> %9527, %9469
  %9529 = add <8 x i16> %9528, %9497
  %9530 = shufflevector <8 x i16> %9529, <8 x i16> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %9531 = shufflevector <16 x i16> %9530, <16 x i16> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %9532 = shufflevector <32 x i16> %9531, <32 x i16> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %9533 = shufflevector <8 x i16> %9501, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %9534 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9533, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9535 = shufflevector <8 x i16> %9501, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %9536 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9535, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9537 = shufflevector <8 x i16> %9505, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %9538 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9537, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9539 = shufflevector <8 x i16> %9505, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %9540 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9539, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9541 = shufflevector <8 x i16> %9509, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %9542 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9541, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9543 = shufflevector <8 x i16> %9509, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %9544 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9543, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9545 = shufflevector <8 x i16> %9513, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %9546 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9545, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9547 = shufflevector <8 x i16> %9513, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %9548 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9547, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9549 = shufflevector <8 x i16> %9517, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %9550 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9549, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9551 = shufflevector <8 x i16> %9517, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %9552 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9551, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9553 = shufflevector <8 x i16> %9521, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %9554 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9553, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9555 = shufflevector <8 x i16> %9521, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %9556 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9555, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9557 = shufflevector <8 x i16> %9525, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %9558 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9557, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9559 = shufflevector <8 x i16> %9525, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %9560 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9559, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9561 = shufflevector <8 x i16> %9529, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %9562 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9561, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9563 = shufflevector <64 x i16> %9532, <64 x i16> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %9564 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9563, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9565 = shufflevector <4 x i32> %9534, <4 x i32> %9536, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9566 = shufflevector <4 x i32> %9538, <4 x i32> %9540, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9567 = shufflevector <4 x i32> %9542, <4 x i32> %9544, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9568 = shufflevector <4 x i32> %9546, <4 x i32> %9548, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9569 = shufflevector <4 x i32> %9550, <4 x i32> %9552, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9570 = shufflevector <4 x i32> %9554, <4 x i32> %9556, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9571 = shufflevector <4 x i32> %9558, <4 x i32> %9560, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9572 = shufflevector <4 x i32> %9562, <4 x i32> %9564, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9573 = shufflevector <8 x i32> %9565, <8 x i32> %9566, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9574 = shufflevector <8 x i32> %9567, <8 x i32> %9568, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9575 = shufflevector <8 x i32> %9569, <8 x i32> %9570, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9576 = shufflevector <8 x i32> %9571, <8 x i32> %9572, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9577 = shufflevector <16 x i32> %9573, <16 x i32> %9574, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9578 = shufflevector <16 x i32> %9575, <16 x i32> %9576, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9579 = shufflevector <32 x i32> %9577, <32 x i32> %9578, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %9580 = lshr <64 x i32> %9579, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %9581 = trunc <64 x i32> %9580 to <64 x i16>
  %9582 = sext i32 %a5 to i64
  %9583 = add nsw i64 %9582, -3
  %9584 = mul nsw i64 %9583, %61
  %9585 = add nsw i64 %9584, %64
  %9586 = getelementptr inbounds i16, i16* %blur_y285, i64 %9585
  %9587 = getelementptr inbounds i16, i16* %9586, i64 -64
  %9588 = bitcast i16* %9587 to <8 x i16>*
  %9589 = getelementptr inbounds i16, i16* %9586, i64 -56
  %9590 = bitcast i16* %9589 to <8 x i16>*
  %9591 = getelementptr inbounds i16, i16* %9586, i64 -48
  %9592 = bitcast i16* %9591 to <8 x i16>*
  %9593 = getelementptr inbounds i16, i16* %9586, i64 -40
  %9594 = bitcast i16* %9593 to <8 x i16>*
  %9595 = getelementptr inbounds i16, i16* %9586, i64 -32
  %9596 = bitcast i16* %9595 to <8 x i16>*
  %9597 = getelementptr inbounds i16, i16* %9586, i64 -24
  %9598 = bitcast i16* %9597 to <8 x i16>*
  %9599 = getelementptr inbounds i16, i16* %9586, i64 -16
  %9600 = bitcast i16* %9599 to <8 x i16>*
  %9601 = getelementptr inbounds i16, i16* %9586, i64 -8
  %9602 = shufflevector <64 x i16> %9581, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9603 = shufflevector <64 x i16> %9581, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9604 = shufflevector <64 x i16> %9581, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %9605 = shufflevector <64 x i16> %9581, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9606 = shufflevector <64 x i16> %9581, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %9607 = shufflevector <64 x i16> %9581, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %9608 = shufflevector <64 x i16> %9581, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %9609 = shufflevector <64 x i16> %9581, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %9610 = bitcast i16* %9601 to <8 x i16>*
  store <8 x i16> %9602, <8 x i16>* %9588, align 2, !tbaa !391
  store <8 x i16> %9603, <8 x i16>* %9590, align 2, !tbaa !391
  store <8 x i16> %9604, <8 x i16>* %9592, align 2, !tbaa !391
  store <8 x i16> %9605, <8 x i16>* %9594, align 2, !tbaa !391
  store <8 x i16> %9606, <8 x i16>* %9596, align 2, !tbaa !391
  store <8 x i16> %9607, <8 x i16>* %9598, align 2, !tbaa !391
  store <8 x i16> %9608, <8 x i16>* %9600, align 2, !tbaa !391
  store <8 x i16> %9609, <8 x i16>* %9610, align 2, !tbaa !391
  br label %"end for blur_y.s0.x.x27"

"end for blur_y.s0.x.x27":                        ; preds = %"for blur_y.s0.x.x26.preheader", %"end for blur_y.s0.x.x24"
  br i1 %59, label %"for blur_y.s0.x.x29.preheader", label %"end for blur_y.s0.x.x30", !prof !385

"for blur_y.s0.x.x29.preheader":                  ; preds = %"end for blur_y.s0.x.x27"
  %9611 = add nsw i32 %a5, 7
  %9612 = and i32 %9611, 7
  %9613 = zext i32 %9612 to i64
  %9614 = mul nsw i64 %60, %9613
  %9615 = add nsw i32 %a5, 6
  %9616 = and i32 %9615, 7
  %9617 = zext i32 %9616 to i64
  %9618 = mul nsw i64 %60, %9617
  %9619 = and i32 %a5, 7
  %9620 = zext i32 %9619 to i64
  %9621 = mul nsw i64 %60, %9620
  %9622 = add nsw i32 %a5, 2
  %9623 = and i32 %9622, 7
  %9624 = zext i32 %9623 to i64
  %9625 = mul nsw i64 %60, %9624
  %9626 = add nsw i32 %a5, 1
  %9627 = and i32 %9626, 7
  %9628 = zext i32 %9627 to i64
  %9629 = mul nsw i64 %60, %9628
  %9630 = sext i32 %a5 to i64
  %9631 = add nsw i64 %9630, -2
  %9632 = mul nsw i64 %9631, %61
  %9633 = add nsw i64 %9632, %62
  br label %"for blur_y.s0.x.x29"

"for blur_y.s0.x.x29":                            ; preds = %"for blur_y.s0.x.x29.preheader", %"for blur_y.s0.x.x29"
  %indvars.iv241 = phi i64 [ 0, %"for blur_y.s0.x.x29.preheader" ], [ %indvars.iv.next242, %"for blur_y.s0.x.x29" ]
  %9634 = shl nsw i64 %indvars.iv241, 6
  %9635 = sub nsw i64 %9634, %67
  %9636 = add nsw i64 %9614, %9635
  %9637 = getelementptr inbounds i16, i16* %blur_x, i64 %9636
  %9638 = getelementptr inbounds i16, i16* %9637, i64 64
  %9639 = bitcast i16* %9638 to <8 x i16>*
  %9640 = load <8 x i16>, <8 x i16>* %9639, align 2, !tbaa !389
  %9641 = getelementptr inbounds i16, i16* %9637, i64 72
  %9642 = bitcast i16* %9641 to <8 x i16>*
  %9643 = load <8 x i16>, <8 x i16>* %9642, align 2, !tbaa !389
  %9644 = getelementptr inbounds i16, i16* %9637, i64 80
  %9645 = bitcast i16* %9644 to <8 x i16>*
  %9646 = load <8 x i16>, <8 x i16>* %9645, align 2, !tbaa !389
  %9647 = getelementptr inbounds i16, i16* %9637, i64 88
  %9648 = bitcast i16* %9647 to <8 x i16>*
  %9649 = load <8 x i16>, <8 x i16>* %9648, align 2, !tbaa !389
  %9650 = getelementptr inbounds i16, i16* %9637, i64 96
  %9651 = bitcast i16* %9650 to <8 x i16>*
  %9652 = load <8 x i16>, <8 x i16>* %9651, align 2, !tbaa !389
  %9653 = getelementptr inbounds i16, i16* %9637, i64 104
  %9654 = bitcast i16* %9653 to <8 x i16>*
  %9655 = load <8 x i16>, <8 x i16>* %9654, align 2, !tbaa !389
  %9656 = getelementptr inbounds i16, i16* %9637, i64 112
  %9657 = bitcast i16* %9656 to <8 x i16>*
  %9658 = load <8 x i16>, <8 x i16>* %9657, align 2, !tbaa !389
  %9659 = getelementptr inbounds i16, i16* %9637, i64 120
  %9660 = bitcast i16* %9659 to <8 x i16>*
  %9661 = load <8 x i16>, <8 x i16>* %9660, align 2, !tbaa !389
  %9662 = add nsw i64 %9618, %9635
  %9663 = getelementptr inbounds i16, i16* %blur_x, i64 %9662
  %9664 = getelementptr inbounds i16, i16* %9663, i64 64
  %9665 = bitcast i16* %9664 to <8 x i16>*
  %9666 = load <8 x i16>, <8 x i16>* %9665, align 2, !tbaa !389
  %9667 = getelementptr inbounds i16, i16* %9663, i64 72
  %9668 = bitcast i16* %9667 to <8 x i16>*
  %9669 = load <8 x i16>, <8 x i16>* %9668, align 2, !tbaa !389
  %9670 = getelementptr inbounds i16, i16* %9663, i64 80
  %9671 = bitcast i16* %9670 to <8 x i16>*
  %9672 = load <8 x i16>, <8 x i16>* %9671, align 2, !tbaa !389
  %9673 = getelementptr inbounds i16, i16* %9663, i64 88
  %9674 = bitcast i16* %9673 to <8 x i16>*
  %9675 = load <8 x i16>, <8 x i16>* %9674, align 2, !tbaa !389
  %9676 = getelementptr inbounds i16, i16* %9663, i64 96
  %9677 = bitcast i16* %9676 to <8 x i16>*
  %9678 = load <8 x i16>, <8 x i16>* %9677, align 2, !tbaa !389
  %9679 = getelementptr inbounds i16, i16* %9663, i64 104
  %9680 = bitcast i16* %9679 to <8 x i16>*
  %9681 = load <8 x i16>, <8 x i16>* %9680, align 2, !tbaa !389
  %9682 = getelementptr inbounds i16, i16* %9663, i64 112
  %9683 = bitcast i16* %9682 to <8 x i16>*
  %9684 = load <8 x i16>, <8 x i16>* %9683, align 2, !tbaa !389
  %9685 = getelementptr inbounds i16, i16* %9663, i64 120
  %9686 = bitcast i16* %9685 to <8 x i16>*
  %9687 = load <8 x i16>, <8 x i16>* %9686, align 2, !tbaa !389
  %9688 = add nsw i64 %9621, %9635
  %9689 = getelementptr inbounds i16, i16* %blur_x, i64 %9688
  %9690 = getelementptr inbounds i16, i16* %9689, i64 64
  %9691 = bitcast i16* %9690 to <8 x i16>*
  %9692 = load <8 x i16>, <8 x i16>* %9691, align 2, !tbaa !389
  %9693 = getelementptr inbounds i16, i16* %9689, i64 72
  %9694 = bitcast i16* %9693 to <8 x i16>*
  %9695 = load <8 x i16>, <8 x i16>* %9694, align 2, !tbaa !389
  %9696 = getelementptr inbounds i16, i16* %9689, i64 80
  %9697 = bitcast i16* %9696 to <8 x i16>*
  %9698 = load <8 x i16>, <8 x i16>* %9697, align 2, !tbaa !389
  %9699 = getelementptr inbounds i16, i16* %9689, i64 88
  %9700 = bitcast i16* %9699 to <8 x i16>*
  %9701 = load <8 x i16>, <8 x i16>* %9700, align 2, !tbaa !389
  %9702 = getelementptr inbounds i16, i16* %9689, i64 96
  %9703 = bitcast i16* %9702 to <8 x i16>*
  %9704 = load <8 x i16>, <8 x i16>* %9703, align 2, !tbaa !389
  %9705 = getelementptr inbounds i16, i16* %9689, i64 104
  %9706 = bitcast i16* %9705 to <8 x i16>*
  %9707 = load <8 x i16>, <8 x i16>* %9706, align 2, !tbaa !389
  %9708 = getelementptr inbounds i16, i16* %9689, i64 112
  %9709 = bitcast i16* %9708 to <8 x i16>*
  %9710 = load <8 x i16>, <8 x i16>* %9709, align 2, !tbaa !389
  %9711 = getelementptr inbounds i16, i16* %9689, i64 120
  %9712 = bitcast i16* %9711 to <8 x i16>*
  %9713 = load <8 x i16>, <8 x i16>* %9712, align 2, !tbaa !389
  %9714 = add nsw i64 %9625, %9635
  %9715 = getelementptr inbounds i16, i16* %blur_x, i64 %9714
  %9716 = getelementptr inbounds i16, i16* %9715, i64 64
  %9717 = bitcast i16* %9716 to <8 x i16>*
  %9718 = load <8 x i16>, <8 x i16>* %9717, align 2, !tbaa !389
  %9719 = getelementptr inbounds i16, i16* %9715, i64 72
  %9720 = bitcast i16* %9719 to <8 x i16>*
  %9721 = load <8 x i16>, <8 x i16>* %9720, align 2, !tbaa !389
  %9722 = getelementptr inbounds i16, i16* %9715, i64 80
  %9723 = bitcast i16* %9722 to <8 x i16>*
  %9724 = load <8 x i16>, <8 x i16>* %9723, align 2, !tbaa !389
  %9725 = getelementptr inbounds i16, i16* %9715, i64 88
  %9726 = bitcast i16* %9725 to <8 x i16>*
  %9727 = load <8 x i16>, <8 x i16>* %9726, align 2, !tbaa !389
  %9728 = getelementptr inbounds i16, i16* %9715, i64 96
  %9729 = bitcast i16* %9728 to <8 x i16>*
  %9730 = load <8 x i16>, <8 x i16>* %9729, align 2, !tbaa !389
  %9731 = getelementptr inbounds i16, i16* %9715, i64 104
  %9732 = bitcast i16* %9731 to <8 x i16>*
  %9733 = load <8 x i16>, <8 x i16>* %9732, align 2, !tbaa !389
  %9734 = getelementptr inbounds i16, i16* %9715, i64 112
  %9735 = bitcast i16* %9734 to <8 x i16>*
  %9736 = load <8 x i16>, <8 x i16>* %9735, align 2, !tbaa !389
  %9737 = getelementptr inbounds i16, i16* %9715, i64 120
  %9738 = bitcast i16* %9737 to <8 x i16>*
  %9739 = load <8 x i16>, <8 x i16>* %9738, align 2, !tbaa !389
  %9740 = add nsw i64 %9629, %9635
  %9741 = getelementptr inbounds i16, i16* %blur_x, i64 %9740
  %9742 = getelementptr inbounds i16, i16* %9741, i64 64
  %9743 = bitcast i16* %9742 to <8 x i16>*
  %9744 = load <8 x i16>, <8 x i16>* %9743, align 2, !tbaa !389
  %9745 = getelementptr inbounds i16, i16* %9741, i64 72
  %9746 = bitcast i16* %9745 to <8 x i16>*
  %9747 = load <8 x i16>, <8 x i16>* %9746, align 2, !tbaa !389
  %9748 = getelementptr inbounds i16, i16* %9741, i64 80
  %9749 = bitcast i16* %9748 to <8 x i16>*
  %9750 = load <8 x i16>, <8 x i16>* %9749, align 2, !tbaa !389
  %9751 = getelementptr inbounds i16, i16* %9741, i64 88
  %9752 = bitcast i16* %9751 to <8 x i16>*
  %9753 = load <8 x i16>, <8 x i16>* %9752, align 2, !tbaa !389
  %9754 = getelementptr inbounds i16, i16* %9741, i64 96
  %9755 = bitcast i16* %9754 to <8 x i16>*
  %9756 = load <8 x i16>, <8 x i16>* %9755, align 2, !tbaa !389
  %9757 = getelementptr inbounds i16, i16* %9741, i64 104
  %9758 = bitcast i16* %9757 to <8 x i16>*
  %9759 = load <8 x i16>, <8 x i16>* %9758, align 2, !tbaa !389
  %9760 = getelementptr inbounds i16, i16* %9741, i64 112
  %9761 = bitcast i16* %9760 to <8 x i16>*
  %9762 = load <8 x i16>, <8 x i16>* %9761, align 2, !tbaa !389
  %9763 = getelementptr inbounds i16, i16* %9741, i64 120
  %9764 = bitcast i16* %9763 to <8 x i16>*
  %9765 = load <8 x i16>, <8 x i16>* %9764, align 2, !tbaa !389
  %9766 = add <8 x i16> %9666, %9640
  %9767 = add <8 x i16> %9766, %9692
  %9768 = add <8 x i16> %9767, %9718
  %9769 = add <8 x i16> %9768, %9744
  %9770 = add <8 x i16> %9669, %9643
  %9771 = add <8 x i16> %9770, %9695
  %9772 = add <8 x i16> %9771, %9721
  %9773 = add <8 x i16> %9772, %9747
  %9774 = add <8 x i16> %9672, %9646
  %9775 = add <8 x i16> %9774, %9698
  %9776 = add <8 x i16> %9775, %9724
  %9777 = add <8 x i16> %9776, %9750
  %9778 = add <8 x i16> %9675, %9649
  %9779 = add <8 x i16> %9778, %9701
  %9780 = add <8 x i16> %9779, %9727
  %9781 = add <8 x i16> %9780, %9753
  %9782 = add <8 x i16> %9678, %9652
  %9783 = add <8 x i16> %9782, %9704
  %9784 = add <8 x i16> %9783, %9730
  %9785 = add <8 x i16> %9784, %9756
  %9786 = add <8 x i16> %9681, %9655
  %9787 = add <8 x i16> %9786, %9707
  %9788 = add <8 x i16> %9787, %9733
  %9789 = add <8 x i16> %9788, %9759
  %9790 = add <8 x i16> %9684, %9658
  %9791 = add <8 x i16> %9790, %9710
  %9792 = add <8 x i16> %9791, %9736
  %9793 = add <8 x i16> %9792, %9762
  %9794 = add <8 x i16> %9687, %9661
  %9795 = add <8 x i16> %9794, %9713
  %9796 = add <8 x i16> %9795, %9739
  %9797 = add <8 x i16> %9796, %9765
  %9798 = shufflevector <8 x i16> %9797, <8 x i16> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %9799 = shufflevector <16 x i16> %9798, <16 x i16> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %9800 = shufflevector <32 x i16> %9799, <32 x i16> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %9801 = shufflevector <8 x i16> %9769, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %9802 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9801, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9803 = shufflevector <8 x i16> %9769, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %9804 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9803, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9805 = shufflevector <8 x i16> %9773, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %9806 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9805, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9807 = shufflevector <8 x i16> %9773, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %9808 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9807, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9809 = shufflevector <8 x i16> %9777, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %9810 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9809, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9811 = shufflevector <8 x i16> %9777, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %9812 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9811, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9813 = shufflevector <8 x i16> %9781, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %9814 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9813, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9815 = shufflevector <8 x i16> %9781, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %9816 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9815, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9817 = shufflevector <8 x i16> %9785, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %9818 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9817, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9819 = shufflevector <8 x i16> %9785, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %9820 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9819, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9821 = shufflevector <8 x i16> %9789, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %9822 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9821, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9823 = shufflevector <8 x i16> %9789, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %9824 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9823, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9825 = shufflevector <8 x i16> %9793, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %9826 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9825, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9827 = shufflevector <8 x i16> %9793, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %9828 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9827, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9829 = shufflevector <8 x i16> %9797, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %9830 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9829, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9831 = shufflevector <64 x i16> %9800, <64 x i16> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %9832 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9831, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9833 = shufflevector <4 x i32> %9802, <4 x i32> %9804, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9834 = shufflevector <4 x i32> %9806, <4 x i32> %9808, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9835 = shufflevector <4 x i32> %9810, <4 x i32> %9812, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9836 = shufflevector <4 x i32> %9814, <4 x i32> %9816, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9837 = shufflevector <4 x i32> %9818, <4 x i32> %9820, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9838 = shufflevector <4 x i32> %9822, <4 x i32> %9824, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9839 = shufflevector <4 x i32> %9826, <4 x i32> %9828, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9840 = shufflevector <4 x i32> %9830, <4 x i32> %9832, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9841 = shufflevector <8 x i32> %9833, <8 x i32> %9834, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9842 = shufflevector <8 x i32> %9835, <8 x i32> %9836, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9843 = shufflevector <8 x i32> %9837, <8 x i32> %9838, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9844 = shufflevector <8 x i32> %9839, <8 x i32> %9840, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9845 = shufflevector <16 x i32> %9841, <16 x i32> %9842, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9846 = shufflevector <16 x i32> %9843, <16 x i32> %9844, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9847 = shufflevector <32 x i32> %9845, <32 x i32> %9846, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %9848 = lshr <64 x i32> %9847, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %9849 = trunc <64 x i32> %9848 to <64 x i16>
  %9850 = shufflevector <64 x i16> %9849, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9851 = add nsw i64 %9633, %9634
  %9852 = getelementptr inbounds i16, i16* %blur_y285, i64 %9851
  %9853 = bitcast i16* %9852 to <8 x i16>*
  store <8 x i16> %9850, <8 x i16>* %9853, align 2, !tbaa !391
  %9854 = shufflevector <64 x i16> %9849, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9855 = getelementptr inbounds i16, i16* %9852, i64 8
  %9856 = bitcast i16* %9855 to <8 x i16>*
  store <8 x i16> %9854, <8 x i16>* %9856, align 2, !tbaa !391
  %9857 = shufflevector <64 x i16> %9849, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %9858 = getelementptr inbounds i16, i16* %9852, i64 16
  %9859 = bitcast i16* %9858 to <8 x i16>*
  store <8 x i16> %9857, <8 x i16>* %9859, align 2, !tbaa !391
  %9860 = shufflevector <64 x i16> %9849, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9861 = getelementptr inbounds i16, i16* %9852, i64 24
  %9862 = bitcast i16* %9861 to <8 x i16>*
  store <8 x i16> %9860, <8 x i16>* %9862, align 2, !tbaa !391
  %9863 = shufflevector <64 x i16> %9849, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %9864 = getelementptr inbounds i16, i16* %9852, i64 32
  %9865 = bitcast i16* %9864 to <8 x i16>*
  store <8 x i16> %9863, <8 x i16>* %9865, align 2, !tbaa !391
  %9866 = shufflevector <64 x i16> %9849, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %9867 = getelementptr inbounds i16, i16* %9852, i64 40
  %9868 = bitcast i16* %9867 to <8 x i16>*
  store <8 x i16> %9866, <8 x i16>* %9868, align 2, !tbaa !391
  %9869 = shufflevector <64 x i16> %9849, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %9870 = getelementptr inbounds i16, i16* %9852, i64 48
  %9871 = bitcast i16* %9870 to <8 x i16>*
  store <8 x i16> %9869, <8 x i16>* %9871, align 2, !tbaa !391
  %9872 = shufflevector <64 x i16> %9849, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %9873 = getelementptr inbounds i16, i16* %9852, i64 56
  %9874 = bitcast i16* %9873 to <8 x i16>*
  store <8 x i16> %9872, <8 x i16>* %9874, align 2, !tbaa !391
  %indvars.iv.next242 = add nuw nsw i64 %indvars.iv241, 1
  %.not202 = icmp eq i64 %indvars.iv.next242, %66
  br i1 %.not202, label %"end for blur_y.s0.x.x30", label %"for blur_y.s0.x.x29"

"end for blur_y.s0.x.x30":                        ; preds = %"for blur_y.s0.x.x29", %"end for blur_y.s0.x.x27"
  br i1 %63, label %"for blur_y.s0.x.x32.preheader", label %"end for blur_y.s0.x.x33", !prof !385

"for blur_y.s0.x.x32.preheader":                  ; preds = %"end for blur_y.s0.x.x30"
  %9875 = add nsw i32 %a5, 7
  %9876 = and i32 %9875, 7
  %narrow196 = add nuw nsw i32 %9876, 1
  %9877 = zext i32 %narrow196 to i64
  %9878 = mul nsw i64 %60, %9877
  %9879 = getelementptr inbounds i16, i16* %blur_x, i64 %9878
  %9880 = getelementptr inbounds i16, i16* %9879, i64 -64
  %9881 = bitcast i16* %9880 to <8 x i16>*
  %9882 = load <8 x i16>, <8 x i16>* %9881, align 2, !tbaa !389
  %9883 = getelementptr inbounds i16, i16* %9879, i64 -56
  %9884 = bitcast i16* %9883 to <8 x i16>*
  %9885 = load <8 x i16>, <8 x i16>* %9884, align 2, !tbaa !389
  %9886 = getelementptr inbounds i16, i16* %9879, i64 -48
  %9887 = bitcast i16* %9886 to <8 x i16>*
  %9888 = load <8 x i16>, <8 x i16>* %9887, align 2, !tbaa !389
  %9889 = getelementptr inbounds i16, i16* %9879, i64 -40
  %9890 = bitcast i16* %9889 to <8 x i16>*
  %9891 = load <8 x i16>, <8 x i16>* %9890, align 2, !tbaa !389
  %9892 = getelementptr inbounds i16, i16* %9879, i64 -32
  %9893 = bitcast i16* %9892 to <8 x i16>*
  %9894 = load <8 x i16>, <8 x i16>* %9893, align 2, !tbaa !389
  %9895 = getelementptr inbounds i16, i16* %9879, i64 -24
  %9896 = bitcast i16* %9895 to <8 x i16>*
  %9897 = load <8 x i16>, <8 x i16>* %9896, align 2, !tbaa !389
  %9898 = getelementptr inbounds i16, i16* %9879, i64 -16
  %9899 = bitcast i16* %9898 to <8 x i16>*
  %9900 = load <8 x i16>, <8 x i16>* %9899, align 2, !tbaa !389
  %9901 = getelementptr inbounds i16, i16* %9879, i64 -8
  %9902 = bitcast i16* %9901 to <8 x i16>*
  %9903 = load <8 x i16>, <8 x i16>* %9902, align 2, !tbaa !389
  %9904 = add nsw i32 %a5, 6
  %9905 = and i32 %9904, 7
  %narrow197 = add nuw nsw i32 %9905, 1
  %9906 = zext i32 %narrow197 to i64
  %9907 = mul nsw i64 %60, %9906
  %9908 = getelementptr inbounds i16, i16* %blur_x, i64 %9907
  %9909 = getelementptr inbounds i16, i16* %9908, i64 -64
  %9910 = bitcast i16* %9909 to <8 x i16>*
  %9911 = load <8 x i16>, <8 x i16>* %9910, align 2, !tbaa !389
  %9912 = getelementptr inbounds i16, i16* %9908, i64 -56
  %9913 = bitcast i16* %9912 to <8 x i16>*
  %9914 = load <8 x i16>, <8 x i16>* %9913, align 2, !tbaa !389
  %9915 = getelementptr inbounds i16, i16* %9908, i64 -48
  %9916 = bitcast i16* %9915 to <8 x i16>*
  %9917 = load <8 x i16>, <8 x i16>* %9916, align 2, !tbaa !389
  %9918 = getelementptr inbounds i16, i16* %9908, i64 -40
  %9919 = bitcast i16* %9918 to <8 x i16>*
  %9920 = load <8 x i16>, <8 x i16>* %9919, align 2, !tbaa !389
  %9921 = getelementptr inbounds i16, i16* %9908, i64 -32
  %9922 = bitcast i16* %9921 to <8 x i16>*
  %9923 = load <8 x i16>, <8 x i16>* %9922, align 2, !tbaa !389
  %9924 = getelementptr inbounds i16, i16* %9908, i64 -24
  %9925 = bitcast i16* %9924 to <8 x i16>*
  %9926 = load <8 x i16>, <8 x i16>* %9925, align 2, !tbaa !389
  %9927 = getelementptr inbounds i16, i16* %9908, i64 -16
  %9928 = bitcast i16* %9927 to <8 x i16>*
  %9929 = load <8 x i16>, <8 x i16>* %9928, align 2, !tbaa !389
  %9930 = getelementptr inbounds i16, i16* %9908, i64 -8
  %9931 = bitcast i16* %9930 to <8 x i16>*
  %9932 = load <8 x i16>, <8 x i16>* %9931, align 2, !tbaa !389
  %9933 = and i32 %a5, 7
  %narrow198 = add nuw nsw i32 %9933, 1
  %9934 = zext i32 %narrow198 to i64
  %9935 = mul nsw i64 %60, %9934
  %9936 = getelementptr inbounds i16, i16* %blur_x, i64 %9935
  %9937 = getelementptr inbounds i16, i16* %9936, i64 -64
  %9938 = bitcast i16* %9937 to <8 x i16>*
  %9939 = load <8 x i16>, <8 x i16>* %9938, align 2, !tbaa !389
  %9940 = getelementptr inbounds i16, i16* %9936, i64 -56
  %9941 = bitcast i16* %9940 to <8 x i16>*
  %9942 = load <8 x i16>, <8 x i16>* %9941, align 2, !tbaa !389
  %9943 = getelementptr inbounds i16, i16* %9936, i64 -48
  %9944 = bitcast i16* %9943 to <8 x i16>*
  %9945 = load <8 x i16>, <8 x i16>* %9944, align 2, !tbaa !389
  %9946 = getelementptr inbounds i16, i16* %9936, i64 -40
  %9947 = bitcast i16* %9946 to <8 x i16>*
  %9948 = load <8 x i16>, <8 x i16>* %9947, align 2, !tbaa !389
  %9949 = getelementptr inbounds i16, i16* %9936, i64 -32
  %9950 = bitcast i16* %9949 to <8 x i16>*
  %9951 = load <8 x i16>, <8 x i16>* %9950, align 2, !tbaa !389
  %9952 = getelementptr inbounds i16, i16* %9936, i64 -24
  %9953 = bitcast i16* %9952 to <8 x i16>*
  %9954 = load <8 x i16>, <8 x i16>* %9953, align 2, !tbaa !389
  %9955 = getelementptr inbounds i16, i16* %9936, i64 -16
  %9956 = bitcast i16* %9955 to <8 x i16>*
  %9957 = load <8 x i16>, <8 x i16>* %9956, align 2, !tbaa !389
  %9958 = getelementptr inbounds i16, i16* %9936, i64 -8
  %9959 = bitcast i16* %9958 to <8 x i16>*
  %9960 = load <8 x i16>, <8 x i16>* %9959, align 2, !tbaa !389
  %9961 = add nsw i32 %a5, 2
  %9962 = and i32 %9961, 7
  %narrow199 = add nuw nsw i32 %9962, 1
  %9963 = zext i32 %narrow199 to i64
  %9964 = mul nsw i64 %60, %9963
  %9965 = getelementptr inbounds i16, i16* %blur_x, i64 %9964
  %9966 = getelementptr inbounds i16, i16* %9965, i64 -64
  %9967 = bitcast i16* %9966 to <8 x i16>*
  %9968 = load <8 x i16>, <8 x i16>* %9967, align 2, !tbaa !389
  %9969 = getelementptr inbounds i16, i16* %9965, i64 -56
  %9970 = bitcast i16* %9969 to <8 x i16>*
  %9971 = load <8 x i16>, <8 x i16>* %9970, align 2, !tbaa !389
  %9972 = getelementptr inbounds i16, i16* %9965, i64 -48
  %9973 = bitcast i16* %9972 to <8 x i16>*
  %9974 = load <8 x i16>, <8 x i16>* %9973, align 2, !tbaa !389
  %9975 = getelementptr inbounds i16, i16* %9965, i64 -40
  %9976 = bitcast i16* %9975 to <8 x i16>*
  %9977 = load <8 x i16>, <8 x i16>* %9976, align 2, !tbaa !389
  %9978 = getelementptr inbounds i16, i16* %9965, i64 -32
  %9979 = bitcast i16* %9978 to <8 x i16>*
  %9980 = load <8 x i16>, <8 x i16>* %9979, align 2, !tbaa !389
  %9981 = getelementptr inbounds i16, i16* %9965, i64 -24
  %9982 = bitcast i16* %9981 to <8 x i16>*
  %9983 = load <8 x i16>, <8 x i16>* %9982, align 2, !tbaa !389
  %9984 = getelementptr inbounds i16, i16* %9965, i64 -16
  %9985 = bitcast i16* %9984 to <8 x i16>*
  %9986 = load <8 x i16>, <8 x i16>* %9985, align 2, !tbaa !389
  %9987 = getelementptr inbounds i16, i16* %9965, i64 -8
  %9988 = bitcast i16* %9987 to <8 x i16>*
  %9989 = load <8 x i16>, <8 x i16>* %9988, align 2, !tbaa !389
  %9990 = add nsw i32 %a5, 1
  %9991 = and i32 %9990, 7
  %narrow200 = add nuw nsw i32 %9991, 1
  %9992 = zext i32 %narrow200 to i64
  %9993 = mul nsw i64 %60, %9992
  %9994 = getelementptr inbounds i16, i16* %blur_x, i64 %9993
  %9995 = getelementptr inbounds i16, i16* %9994, i64 -64
  %9996 = bitcast i16* %9995 to <8 x i16>*
  %9997 = load <8 x i16>, <8 x i16>* %9996, align 2, !tbaa !389
  %9998 = getelementptr inbounds i16, i16* %9994, i64 -56
  %9999 = bitcast i16* %9998 to <8 x i16>*
  %10000 = load <8 x i16>, <8 x i16>* %9999, align 2, !tbaa !389
  %10001 = getelementptr inbounds i16, i16* %9994, i64 -48
  %10002 = bitcast i16* %10001 to <8 x i16>*
  %10003 = load <8 x i16>, <8 x i16>* %10002, align 2, !tbaa !389
  %10004 = getelementptr inbounds i16, i16* %9994, i64 -40
  %10005 = bitcast i16* %10004 to <8 x i16>*
  %10006 = load <8 x i16>, <8 x i16>* %10005, align 2, !tbaa !389
  %10007 = getelementptr inbounds i16, i16* %9994, i64 -32
  %10008 = bitcast i16* %10007 to <8 x i16>*
  %10009 = load <8 x i16>, <8 x i16>* %10008, align 2, !tbaa !389
  %10010 = getelementptr inbounds i16, i16* %9994, i64 -24
  %10011 = bitcast i16* %10010 to <8 x i16>*
  %10012 = load <8 x i16>, <8 x i16>* %10011, align 2, !tbaa !389
  %10013 = getelementptr inbounds i16, i16* %9994, i64 -16
  %10014 = bitcast i16* %10013 to <8 x i16>*
  %10015 = load <8 x i16>, <8 x i16>* %10014, align 2, !tbaa !389
  %10016 = getelementptr inbounds i16, i16* %9994, i64 -8
  %10017 = bitcast i16* %10016 to <8 x i16>*
  %10018 = load <8 x i16>, <8 x i16>* %10017, align 2, !tbaa !389
  %10019 = add <8 x i16> %9911, %9882
  %10020 = add <8 x i16> %10019, %9939
  %10021 = add <8 x i16> %10020, %9968
  %10022 = add <8 x i16> %10021, %9997
  %10023 = add <8 x i16> %9914, %9885
  %10024 = add <8 x i16> %10023, %9942
  %10025 = add <8 x i16> %10024, %9971
  %10026 = add <8 x i16> %10025, %10000
  %10027 = add <8 x i16> %9917, %9888
  %10028 = add <8 x i16> %10027, %9945
  %10029 = add <8 x i16> %10028, %9974
  %10030 = add <8 x i16> %10029, %10003
  %10031 = add <8 x i16> %9920, %9891
  %10032 = add <8 x i16> %10031, %9948
  %10033 = add <8 x i16> %10032, %9977
  %10034 = add <8 x i16> %10033, %10006
  %10035 = add <8 x i16> %9923, %9894
  %10036 = add <8 x i16> %10035, %9951
  %10037 = add <8 x i16> %10036, %9980
  %10038 = add <8 x i16> %10037, %10009
  %10039 = add <8 x i16> %9926, %9897
  %10040 = add <8 x i16> %10039, %9954
  %10041 = add <8 x i16> %10040, %9983
  %10042 = add <8 x i16> %10041, %10012
  %10043 = add <8 x i16> %9929, %9900
  %10044 = add <8 x i16> %10043, %9957
  %10045 = add <8 x i16> %10044, %9986
  %10046 = add <8 x i16> %10045, %10015
  %10047 = add <8 x i16> %9932, %9903
  %10048 = add <8 x i16> %10047, %9960
  %10049 = add <8 x i16> %10048, %9989
  %10050 = add <8 x i16> %10049, %10018
  %10051 = shufflevector <8 x i16> %10050, <8 x i16> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %10052 = shufflevector <16 x i16> %10051, <16 x i16> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %10053 = shufflevector <32 x i16> %10052, <32 x i16> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %10054 = shufflevector <8 x i16> %10022, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %10055 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %10054, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10056 = shufflevector <8 x i16> %10022, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %10057 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %10056, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10058 = shufflevector <8 x i16> %10026, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %10059 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %10058, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10060 = shufflevector <8 x i16> %10026, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %10061 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %10060, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10062 = shufflevector <8 x i16> %10030, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %10063 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %10062, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10064 = shufflevector <8 x i16> %10030, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %10065 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %10064, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10066 = shufflevector <8 x i16> %10034, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %10067 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %10066, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10068 = shufflevector <8 x i16> %10034, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %10069 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %10068, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10070 = shufflevector <8 x i16> %10038, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %10071 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %10070, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10072 = shufflevector <8 x i16> %10038, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %10073 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %10072, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10074 = shufflevector <8 x i16> %10042, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %10075 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %10074, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10076 = shufflevector <8 x i16> %10042, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %10077 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %10076, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10078 = shufflevector <8 x i16> %10046, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %10079 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %10078, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10080 = shufflevector <8 x i16> %10046, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %10081 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %10080, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10082 = shufflevector <8 x i16> %10050, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %10083 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %10082, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10084 = shufflevector <64 x i16> %10053, <64 x i16> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %10085 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %10084, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10086 = shufflevector <4 x i32> %10055, <4 x i32> %10057, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10087 = shufflevector <4 x i32> %10059, <4 x i32> %10061, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10088 = shufflevector <4 x i32> %10063, <4 x i32> %10065, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10089 = shufflevector <4 x i32> %10067, <4 x i32> %10069, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10090 = shufflevector <4 x i32> %10071, <4 x i32> %10073, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10091 = shufflevector <4 x i32> %10075, <4 x i32> %10077, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10092 = shufflevector <4 x i32> %10079, <4 x i32> %10081, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10093 = shufflevector <4 x i32> %10083, <4 x i32> %10085, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10094 = shufflevector <8 x i32> %10086, <8 x i32> %10087, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10095 = shufflevector <8 x i32> %10088, <8 x i32> %10089, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10096 = shufflevector <8 x i32> %10090, <8 x i32> %10091, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10097 = shufflevector <8 x i32> %10092, <8 x i32> %10093, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10098 = shufflevector <16 x i32> %10094, <16 x i32> %10095, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10099 = shufflevector <16 x i32> %10096, <16 x i32> %10097, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10100 = shufflevector <32 x i32> %10098, <32 x i32> %10099, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %10101 = lshr <64 x i32> %10100, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %10102 = trunc <64 x i32> %10101 to <64 x i16>
  %10103 = sext i32 %a5 to i64
  %10104 = add nsw i64 %10103, -2
  %10105 = mul nsw i64 %10104, %61
  %10106 = add nsw i64 %10105, %64
  %10107 = getelementptr inbounds i16, i16* %blur_y285, i64 %10106
  %10108 = getelementptr inbounds i16, i16* %10107, i64 -64
  %10109 = bitcast i16* %10108 to <8 x i16>*
  %10110 = getelementptr inbounds i16, i16* %10107, i64 -56
  %10111 = bitcast i16* %10110 to <8 x i16>*
  %10112 = getelementptr inbounds i16, i16* %10107, i64 -48
  %10113 = bitcast i16* %10112 to <8 x i16>*
  %10114 = getelementptr inbounds i16, i16* %10107, i64 -40
  %10115 = bitcast i16* %10114 to <8 x i16>*
  %10116 = getelementptr inbounds i16, i16* %10107, i64 -32
  %10117 = bitcast i16* %10116 to <8 x i16>*
  %10118 = getelementptr inbounds i16, i16* %10107, i64 -24
  %10119 = bitcast i16* %10118 to <8 x i16>*
  %10120 = getelementptr inbounds i16, i16* %10107, i64 -16
  %10121 = bitcast i16* %10120 to <8 x i16>*
  %10122 = getelementptr inbounds i16, i16* %10107, i64 -8
  %10123 = shufflevector <64 x i16> %10102, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10124 = shufflevector <64 x i16> %10102, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10125 = shufflevector <64 x i16> %10102, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %10126 = shufflevector <64 x i16> %10102, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10127 = shufflevector <64 x i16> %10102, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %10128 = shufflevector <64 x i16> %10102, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %10129 = shufflevector <64 x i16> %10102, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %10130 = shufflevector <64 x i16> %10102, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %10131 = bitcast i16* %10122 to <8 x i16>*
  store <8 x i16> %10123, <8 x i16>* %10109, align 2, !tbaa !391
  store <8 x i16> %10124, <8 x i16>* %10111, align 2, !tbaa !391
  store <8 x i16> %10125, <8 x i16>* %10113, align 2, !tbaa !391
  store <8 x i16> %10126, <8 x i16>* %10115, align 2, !tbaa !391
  store <8 x i16> %10127, <8 x i16>* %10117, align 2, !tbaa !391
  store <8 x i16> %10128, <8 x i16>* %10119, align 2, !tbaa !391
  store <8 x i16> %10129, <8 x i16>* %10121, align 2, !tbaa !391
  store <8 x i16> %10130, <8 x i16>* %10131, align 2, !tbaa !391
  br label %"end for blur_y.s0.x.x33"

"end for blur_y.s0.x.x33":                        ; preds = %"for blur_y.s0.x.x32.preheader", %"end for blur_y.s0.x.x30"
  br i1 %59, label %"for blur_y.s0.x.x35.preheader", label %"end for blur_y.s0.x.x36", !prof !385

"for blur_y.s0.x.x35.preheader":                  ; preds = %"end for blur_y.s0.x.x33"
  %10132 = and i32 %a5, 7
  %10133 = zext i32 %10132 to i64
  %10134 = mul nsw i64 %60, %10133
  %10135 = add nsw i32 %a5, 7
  %10136 = and i32 %10135, 7
  %10137 = zext i32 %10136 to i64
  %10138 = mul nsw i64 %60, %10137
  %10139 = add nsw i32 %a5, 1
  %10140 = and i32 %10139, 7
  %10141 = zext i32 %10140 to i64
  %10142 = mul nsw i64 %60, %10141
  %10143 = add nsw i32 %a5, 3
  %10144 = and i32 %10143, 7
  %10145 = zext i32 %10144 to i64
  %10146 = mul nsw i64 %60, %10145
  %10147 = add nsw i32 %a5, 2
  %10148 = and i32 %10147, 7
  %10149 = zext i32 %10148 to i64
  %10150 = mul nsw i64 %60, %10149
  %10151 = sext i32 %a5 to i64
  %10152 = add nsw i64 %10151, -1
  %10153 = mul nsw i64 %10152, %61
  %10154 = add nsw i64 %10153, %62
  br label %"for blur_y.s0.x.x35"

"for blur_y.s0.x.x35":                            ; preds = %"for blur_y.s0.x.x35.preheader", %"for blur_y.s0.x.x35"
  %indvars.iv244 = phi i64 [ 0, %"for blur_y.s0.x.x35.preheader" ], [ %indvars.iv.next245, %"for blur_y.s0.x.x35" ]
  %10155 = shl nsw i64 %indvars.iv244, 6
  %10156 = sub nsw i64 %10155, %67
  %10157 = add nsw i64 %10134, %10156
  %10158 = getelementptr inbounds i16, i16* %blur_x, i64 %10157
  %10159 = getelementptr inbounds i16, i16* %10158, i64 64
  %10160 = bitcast i16* %10159 to <8 x i16>*
  %10161 = load <8 x i16>, <8 x i16>* %10160, align 2, !tbaa !389
  %10162 = getelementptr inbounds i16, i16* %10158, i64 72
  %10163 = bitcast i16* %10162 to <8 x i16>*
  %10164 = load <8 x i16>, <8 x i16>* %10163, align 2, !tbaa !389
  %10165 = getelementptr inbounds i16, i16* %10158, i64 80
  %10166 = bitcast i16* %10165 to <8 x i16>*
  %10167 = load <8 x i16>, <8 x i16>* %10166, align 2, !tbaa !389
  %10168 = getelementptr inbounds i16, i16* %10158, i64 88
  %10169 = bitcast i16* %10168 to <8 x i16>*
  %10170 = load <8 x i16>, <8 x i16>* %10169, align 2, !tbaa !389
  %10171 = getelementptr inbounds i16, i16* %10158, i64 96
  %10172 = bitcast i16* %10171 to <8 x i16>*
  %10173 = load <8 x i16>, <8 x i16>* %10172, align 2, !tbaa !389
  %10174 = getelementptr inbounds i16, i16* %10158, i64 104
  %10175 = bitcast i16* %10174 to <8 x i16>*
  %10176 = load <8 x i16>, <8 x i16>* %10175, align 2, !tbaa !389
  %10177 = getelementptr inbounds i16, i16* %10158, i64 112
  %10178 = bitcast i16* %10177 to <8 x i16>*
  %10179 = load <8 x i16>, <8 x i16>* %10178, align 2, !tbaa !389
  %10180 = getelementptr inbounds i16, i16* %10158, i64 120
  %10181 = bitcast i16* %10180 to <8 x i16>*
  %10182 = load <8 x i16>, <8 x i16>* %10181, align 2, !tbaa !389
  %10183 = add nsw i64 %10138, %10156
  %10184 = getelementptr inbounds i16, i16* %blur_x, i64 %10183
  %10185 = getelementptr inbounds i16, i16* %10184, i64 64
  %10186 = bitcast i16* %10185 to <8 x i16>*
  %10187 = load <8 x i16>, <8 x i16>* %10186, align 2, !tbaa !389
  %10188 = getelementptr inbounds i16, i16* %10184, i64 72
  %10189 = bitcast i16* %10188 to <8 x i16>*
  %10190 = load <8 x i16>, <8 x i16>* %10189, align 2, !tbaa !389
  %10191 = getelementptr inbounds i16, i16* %10184, i64 80
  %10192 = bitcast i16* %10191 to <8 x i16>*
  %10193 = load <8 x i16>, <8 x i16>* %10192, align 2, !tbaa !389
  %10194 = getelementptr inbounds i16, i16* %10184, i64 88
  %10195 = bitcast i16* %10194 to <8 x i16>*
  %10196 = load <8 x i16>, <8 x i16>* %10195, align 2, !tbaa !389
  %10197 = getelementptr inbounds i16, i16* %10184, i64 96
  %10198 = bitcast i16* %10197 to <8 x i16>*
  %10199 = load <8 x i16>, <8 x i16>* %10198, align 2, !tbaa !389
  %10200 = getelementptr inbounds i16, i16* %10184, i64 104
  %10201 = bitcast i16* %10200 to <8 x i16>*
  %10202 = load <8 x i16>, <8 x i16>* %10201, align 2, !tbaa !389
  %10203 = getelementptr inbounds i16, i16* %10184, i64 112
  %10204 = bitcast i16* %10203 to <8 x i16>*
  %10205 = load <8 x i16>, <8 x i16>* %10204, align 2, !tbaa !389
  %10206 = getelementptr inbounds i16, i16* %10184, i64 120
  %10207 = bitcast i16* %10206 to <8 x i16>*
  %10208 = load <8 x i16>, <8 x i16>* %10207, align 2, !tbaa !389
  %10209 = add nsw i64 %10142, %10156
  %10210 = getelementptr inbounds i16, i16* %blur_x, i64 %10209
  %10211 = getelementptr inbounds i16, i16* %10210, i64 64
  %10212 = bitcast i16* %10211 to <8 x i16>*
  %10213 = load <8 x i16>, <8 x i16>* %10212, align 2, !tbaa !389
  %10214 = getelementptr inbounds i16, i16* %10210, i64 72
  %10215 = bitcast i16* %10214 to <8 x i16>*
  %10216 = load <8 x i16>, <8 x i16>* %10215, align 2, !tbaa !389
  %10217 = getelementptr inbounds i16, i16* %10210, i64 80
  %10218 = bitcast i16* %10217 to <8 x i16>*
  %10219 = load <8 x i16>, <8 x i16>* %10218, align 2, !tbaa !389
  %10220 = getelementptr inbounds i16, i16* %10210, i64 88
  %10221 = bitcast i16* %10220 to <8 x i16>*
  %10222 = load <8 x i16>, <8 x i16>* %10221, align 2, !tbaa !389
  %10223 = getelementptr inbounds i16, i16* %10210, i64 96
  %10224 = bitcast i16* %10223 to <8 x i16>*
  %10225 = load <8 x i16>, <8 x i16>* %10224, align 2, !tbaa !389
  %10226 = getelementptr inbounds i16, i16* %10210, i64 104
  %10227 = bitcast i16* %10226 to <8 x i16>*
  %10228 = load <8 x i16>, <8 x i16>* %10227, align 2, !tbaa !389
  %10229 = getelementptr inbounds i16, i16* %10210, i64 112
  %10230 = bitcast i16* %10229 to <8 x i16>*
  %10231 = load <8 x i16>, <8 x i16>* %10230, align 2, !tbaa !389
  %10232 = getelementptr inbounds i16, i16* %10210, i64 120
  %10233 = bitcast i16* %10232 to <8 x i16>*
  %10234 = load <8 x i16>, <8 x i16>* %10233, align 2, !tbaa !389
  %10235 = add nsw i64 %10146, %10156
  %10236 = getelementptr inbounds i16, i16* %blur_x, i64 %10235
  %10237 = getelementptr inbounds i16, i16* %10236, i64 64
  %10238 = bitcast i16* %10237 to <8 x i16>*
  %10239 = load <8 x i16>, <8 x i16>* %10238, align 2, !tbaa !389
  %10240 = getelementptr inbounds i16, i16* %10236, i64 72
  %10241 = bitcast i16* %10240 to <8 x i16>*
  %10242 = load <8 x i16>, <8 x i16>* %10241, align 2, !tbaa !389
  %10243 = getelementptr inbounds i16, i16* %10236, i64 80
  %10244 = bitcast i16* %10243 to <8 x i16>*
  %10245 = load <8 x i16>, <8 x i16>* %10244, align 2, !tbaa !389
  %10246 = getelementptr inbounds i16, i16* %10236, i64 88
  %10247 = bitcast i16* %10246 to <8 x i16>*
  %10248 = load <8 x i16>, <8 x i16>* %10247, align 2, !tbaa !389
  %10249 = getelementptr inbounds i16, i16* %10236, i64 96
  %10250 = bitcast i16* %10249 to <8 x i16>*
  %10251 = load <8 x i16>, <8 x i16>* %10250, align 2, !tbaa !389
  %10252 = getelementptr inbounds i16, i16* %10236, i64 104
  %10253 = bitcast i16* %10252 to <8 x i16>*
  %10254 = load <8 x i16>, <8 x i16>* %10253, align 2, !tbaa !389
  %10255 = getelementptr inbounds i16, i16* %10236, i64 112
  %10256 = bitcast i16* %10255 to <8 x i16>*
  %10257 = load <8 x i16>, <8 x i16>* %10256, align 2, !tbaa !389
  %10258 = getelementptr inbounds i16, i16* %10236, i64 120
  %10259 = bitcast i16* %10258 to <8 x i16>*
  %10260 = load <8 x i16>, <8 x i16>* %10259, align 2, !tbaa !389
  %10261 = add nsw i64 %10150, %10156
  %10262 = getelementptr inbounds i16, i16* %blur_x, i64 %10261
  %10263 = getelementptr inbounds i16, i16* %10262, i64 64
  %10264 = bitcast i16* %10263 to <8 x i16>*
  %10265 = load <8 x i16>, <8 x i16>* %10264, align 2, !tbaa !389
  %10266 = getelementptr inbounds i16, i16* %10262, i64 72
  %10267 = bitcast i16* %10266 to <8 x i16>*
  %10268 = load <8 x i16>, <8 x i16>* %10267, align 2, !tbaa !389
  %10269 = getelementptr inbounds i16, i16* %10262, i64 80
  %10270 = bitcast i16* %10269 to <8 x i16>*
  %10271 = load <8 x i16>, <8 x i16>* %10270, align 2, !tbaa !389
  %10272 = getelementptr inbounds i16, i16* %10262, i64 88
  %10273 = bitcast i16* %10272 to <8 x i16>*
  %10274 = load <8 x i16>, <8 x i16>* %10273, align 2, !tbaa !389
  %10275 = getelementptr inbounds i16, i16* %10262, i64 96
  %10276 = bitcast i16* %10275 to <8 x i16>*
  %10277 = load <8 x i16>, <8 x i16>* %10276, align 2, !tbaa !389
  %10278 = getelementptr inbounds i16, i16* %10262, i64 104
  %10279 = bitcast i16* %10278 to <8 x i16>*
  %10280 = load <8 x i16>, <8 x i16>* %10279, align 2, !tbaa !389
  %10281 = getelementptr inbounds i16, i16* %10262, i64 112
  %10282 = bitcast i16* %10281 to <8 x i16>*
  %10283 = load <8 x i16>, <8 x i16>* %10282, align 2, !tbaa !389
  %10284 = getelementptr inbounds i16, i16* %10262, i64 120
  %10285 = bitcast i16* %10284 to <8 x i16>*
  %10286 = load <8 x i16>, <8 x i16>* %10285, align 2, !tbaa !389
  %10287 = add <8 x i16> %10187, %10161
  %10288 = add <8 x i16> %10287, %10213
  %10289 = add <8 x i16> %10288, %10239
  %10290 = add <8 x i16> %10289, %10265
  %10291 = add <8 x i16> %10190, %10164
  %10292 = add <8 x i16> %10291, %10216
  %10293 = add <8 x i16> %10292, %10242
  %10294 = add <8 x i16> %10293, %10268
  %10295 = add <8 x i16> %10193, %10167
  %10296 = add <8 x i16> %10295, %10219
  %10297 = add <8 x i16> %10296, %10245
  %10298 = add <8 x i16> %10297, %10271
  %10299 = add <8 x i16> %10196, %10170
  %10300 = add <8 x i16> %10299, %10222
  %10301 = add <8 x i16> %10300, %10248
  %10302 = add <8 x i16> %10301, %10274
  %10303 = add <8 x i16> %10199, %10173
  %10304 = add <8 x i16> %10303, %10225
  %10305 = add <8 x i16> %10304, %10251
  %10306 = add <8 x i16> %10305, %10277
  %10307 = add <8 x i16> %10202, %10176
  %10308 = add <8 x i16> %10307, %10228
  %10309 = add <8 x i16> %10308, %10254
  %10310 = add <8 x i16> %10309, %10280
  %10311 = add <8 x i16> %10205, %10179
  %10312 = add <8 x i16> %10311, %10231
  %10313 = add <8 x i16> %10312, %10257
  %10314 = add <8 x i16> %10313, %10283
  %10315 = add <8 x i16> %10208, %10182
  %10316 = add <8 x i16> %10315, %10234
  %10317 = add <8 x i16> %10316, %10260
  %10318 = add <8 x i16> %10317, %10286
  %10319 = shufflevector <8 x i16> %10318, <8 x i16> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %10320 = shufflevector <16 x i16> %10319, <16 x i16> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %10321 = shufflevector <32 x i16> %10320, <32 x i16> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %10322 = shufflevector <8 x i16> %10290, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %10323 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %10322, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10324 = shufflevector <8 x i16> %10290, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %10325 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %10324, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10326 = shufflevector <8 x i16> %10294, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %10327 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %10326, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10328 = shufflevector <8 x i16> %10294, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %10329 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %10328, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10330 = shufflevector <8 x i16> %10298, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %10331 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %10330, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10332 = shufflevector <8 x i16> %10298, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %10333 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %10332, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10334 = shufflevector <8 x i16> %10302, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %10335 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %10334, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10336 = shufflevector <8 x i16> %10302, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %10337 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %10336, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10338 = shufflevector <8 x i16> %10306, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %10339 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %10338, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10340 = shufflevector <8 x i16> %10306, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %10341 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %10340, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10342 = shufflevector <8 x i16> %10310, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %10343 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %10342, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10344 = shufflevector <8 x i16> %10310, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %10345 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %10344, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10346 = shufflevector <8 x i16> %10314, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %10347 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %10346, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10348 = shufflevector <8 x i16> %10314, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %10349 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %10348, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10350 = shufflevector <8 x i16> %10318, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %10351 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %10350, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10352 = shufflevector <64 x i16> %10321, <64 x i16> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %10353 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %10352, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10354 = shufflevector <4 x i32> %10323, <4 x i32> %10325, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10355 = shufflevector <4 x i32> %10327, <4 x i32> %10329, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10356 = shufflevector <4 x i32> %10331, <4 x i32> %10333, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10357 = shufflevector <4 x i32> %10335, <4 x i32> %10337, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10358 = shufflevector <4 x i32> %10339, <4 x i32> %10341, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10359 = shufflevector <4 x i32> %10343, <4 x i32> %10345, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10360 = shufflevector <4 x i32> %10347, <4 x i32> %10349, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10361 = shufflevector <4 x i32> %10351, <4 x i32> %10353, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10362 = shufflevector <8 x i32> %10354, <8 x i32> %10355, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10363 = shufflevector <8 x i32> %10356, <8 x i32> %10357, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10364 = shufflevector <8 x i32> %10358, <8 x i32> %10359, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10365 = shufflevector <8 x i32> %10360, <8 x i32> %10361, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10366 = shufflevector <16 x i32> %10362, <16 x i32> %10363, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10367 = shufflevector <16 x i32> %10364, <16 x i32> %10365, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10368 = shufflevector <32 x i32> %10366, <32 x i32> %10367, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %10369 = lshr <64 x i32> %10368, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %10370 = trunc <64 x i32> %10369 to <64 x i16>
  %10371 = shufflevector <64 x i16> %10370, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10372 = add nsw i64 %10154, %10155
  %10373 = getelementptr inbounds i16, i16* %blur_y285, i64 %10372
  %10374 = bitcast i16* %10373 to <8 x i16>*
  store <8 x i16> %10371, <8 x i16>* %10374, align 2, !tbaa !391
  %10375 = shufflevector <64 x i16> %10370, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10376 = getelementptr inbounds i16, i16* %10373, i64 8
  %10377 = bitcast i16* %10376 to <8 x i16>*
  store <8 x i16> %10375, <8 x i16>* %10377, align 2, !tbaa !391
  %10378 = shufflevector <64 x i16> %10370, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %10379 = getelementptr inbounds i16, i16* %10373, i64 16
  %10380 = bitcast i16* %10379 to <8 x i16>*
  store <8 x i16> %10378, <8 x i16>* %10380, align 2, !tbaa !391
  %10381 = shufflevector <64 x i16> %10370, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10382 = getelementptr inbounds i16, i16* %10373, i64 24
  %10383 = bitcast i16* %10382 to <8 x i16>*
  store <8 x i16> %10381, <8 x i16>* %10383, align 2, !tbaa !391
  %10384 = shufflevector <64 x i16> %10370, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %10385 = getelementptr inbounds i16, i16* %10373, i64 32
  %10386 = bitcast i16* %10385 to <8 x i16>*
  store <8 x i16> %10384, <8 x i16>* %10386, align 2, !tbaa !391
  %10387 = shufflevector <64 x i16> %10370, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %10388 = getelementptr inbounds i16, i16* %10373, i64 40
  %10389 = bitcast i16* %10388 to <8 x i16>*
  store <8 x i16> %10387, <8 x i16>* %10389, align 2, !tbaa !391
  %10390 = shufflevector <64 x i16> %10370, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %10391 = getelementptr inbounds i16, i16* %10373, i64 48
  %10392 = bitcast i16* %10391 to <8 x i16>*
  store <8 x i16> %10390, <8 x i16>* %10392, align 2, !tbaa !391
  %10393 = shufflevector <64 x i16> %10370, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %10394 = getelementptr inbounds i16, i16* %10373, i64 56
  %10395 = bitcast i16* %10394 to <8 x i16>*
  store <8 x i16> %10393, <8 x i16>* %10395, align 2, !tbaa !391
  %indvars.iv.next245 = add nuw nsw i64 %indvars.iv244, 1
  %.not195 = icmp eq i64 %indvars.iv.next245, %66
  br i1 %.not195, label %"end for blur_y.s0.x.x36", label %"for blur_y.s0.x.x35"

"end for blur_y.s0.x.x36":                        ; preds = %"for blur_y.s0.x.x35", %"end for blur_y.s0.x.x33"
  br i1 %63, label %"for blur_y.s0.x.x38.preheader", label %after_bb, !prof !385

"for blur_y.s0.x.x38.preheader":                  ; preds = %"end for blur_y.s0.x.x36"
  %10396 = and i32 %a5, 7
  %narrow = add nuw nsw i32 %10396, 1
  %10397 = zext i32 %narrow to i64
  %10398 = mul nsw i64 %60, %10397
  %10399 = getelementptr inbounds i16, i16* %blur_x, i64 %10398
  %10400 = getelementptr inbounds i16, i16* %10399, i64 -64
  %10401 = bitcast i16* %10400 to <8 x i16>*
  %10402 = load <8 x i16>, <8 x i16>* %10401, align 2, !tbaa !389
  %10403 = getelementptr inbounds i16, i16* %10399, i64 -56
  %10404 = bitcast i16* %10403 to <8 x i16>*
  %10405 = load <8 x i16>, <8 x i16>* %10404, align 2, !tbaa !389
  %10406 = getelementptr inbounds i16, i16* %10399, i64 -48
  %10407 = bitcast i16* %10406 to <8 x i16>*
  %10408 = load <8 x i16>, <8 x i16>* %10407, align 2, !tbaa !389
  %10409 = getelementptr inbounds i16, i16* %10399, i64 -40
  %10410 = bitcast i16* %10409 to <8 x i16>*
  %10411 = load <8 x i16>, <8 x i16>* %10410, align 2, !tbaa !389
  %10412 = getelementptr inbounds i16, i16* %10399, i64 -32
  %10413 = bitcast i16* %10412 to <8 x i16>*
  %10414 = load <8 x i16>, <8 x i16>* %10413, align 2, !tbaa !389
  %10415 = getelementptr inbounds i16, i16* %10399, i64 -24
  %10416 = bitcast i16* %10415 to <8 x i16>*
  %10417 = load <8 x i16>, <8 x i16>* %10416, align 2, !tbaa !389
  %10418 = getelementptr inbounds i16, i16* %10399, i64 -16
  %10419 = bitcast i16* %10418 to <8 x i16>*
  %10420 = load <8 x i16>, <8 x i16>* %10419, align 2, !tbaa !389
  %10421 = getelementptr inbounds i16, i16* %10399, i64 -8
  %10422 = bitcast i16* %10421 to <8 x i16>*
  %10423 = load <8 x i16>, <8 x i16>* %10422, align 2, !tbaa !389
  %10424 = add nsw i32 %a5, 7
  %10425 = and i32 %10424, 7
  %narrow190 = add nuw nsw i32 %10425, 1
  %10426 = zext i32 %narrow190 to i64
  %10427 = mul nsw i64 %60, %10426
  %10428 = getelementptr inbounds i16, i16* %blur_x, i64 %10427
  %10429 = getelementptr inbounds i16, i16* %10428, i64 -64
  %10430 = bitcast i16* %10429 to <8 x i16>*
  %10431 = load <8 x i16>, <8 x i16>* %10430, align 2, !tbaa !389
  %10432 = getelementptr inbounds i16, i16* %10428, i64 -56
  %10433 = bitcast i16* %10432 to <8 x i16>*
  %10434 = load <8 x i16>, <8 x i16>* %10433, align 2, !tbaa !389
  %10435 = getelementptr inbounds i16, i16* %10428, i64 -48
  %10436 = bitcast i16* %10435 to <8 x i16>*
  %10437 = load <8 x i16>, <8 x i16>* %10436, align 2, !tbaa !389
  %10438 = getelementptr inbounds i16, i16* %10428, i64 -40
  %10439 = bitcast i16* %10438 to <8 x i16>*
  %10440 = load <8 x i16>, <8 x i16>* %10439, align 2, !tbaa !389
  %10441 = getelementptr inbounds i16, i16* %10428, i64 -32
  %10442 = bitcast i16* %10441 to <8 x i16>*
  %10443 = load <8 x i16>, <8 x i16>* %10442, align 2, !tbaa !389
  %10444 = getelementptr inbounds i16, i16* %10428, i64 -24
  %10445 = bitcast i16* %10444 to <8 x i16>*
  %10446 = load <8 x i16>, <8 x i16>* %10445, align 2, !tbaa !389
  %10447 = getelementptr inbounds i16, i16* %10428, i64 -16
  %10448 = bitcast i16* %10447 to <8 x i16>*
  %10449 = load <8 x i16>, <8 x i16>* %10448, align 2, !tbaa !389
  %10450 = getelementptr inbounds i16, i16* %10428, i64 -8
  %10451 = bitcast i16* %10450 to <8 x i16>*
  %10452 = load <8 x i16>, <8 x i16>* %10451, align 2, !tbaa !389
  %10453 = add nsw i32 %a5, 1
  %10454 = and i32 %10453, 7
  %narrow191 = add nuw nsw i32 %10454, 1
  %10455 = zext i32 %narrow191 to i64
  %10456 = mul nsw i64 %60, %10455
  %10457 = getelementptr inbounds i16, i16* %blur_x, i64 %10456
  %10458 = getelementptr inbounds i16, i16* %10457, i64 -64
  %10459 = bitcast i16* %10458 to <8 x i16>*
  %10460 = load <8 x i16>, <8 x i16>* %10459, align 2, !tbaa !389
  %10461 = getelementptr inbounds i16, i16* %10457, i64 -56
  %10462 = bitcast i16* %10461 to <8 x i16>*
  %10463 = load <8 x i16>, <8 x i16>* %10462, align 2, !tbaa !389
  %10464 = getelementptr inbounds i16, i16* %10457, i64 -48
  %10465 = bitcast i16* %10464 to <8 x i16>*
  %10466 = load <8 x i16>, <8 x i16>* %10465, align 2, !tbaa !389
  %10467 = getelementptr inbounds i16, i16* %10457, i64 -40
  %10468 = bitcast i16* %10467 to <8 x i16>*
  %10469 = load <8 x i16>, <8 x i16>* %10468, align 2, !tbaa !389
  %10470 = getelementptr inbounds i16, i16* %10457, i64 -32
  %10471 = bitcast i16* %10470 to <8 x i16>*
  %10472 = load <8 x i16>, <8 x i16>* %10471, align 2, !tbaa !389
  %10473 = getelementptr inbounds i16, i16* %10457, i64 -24
  %10474 = bitcast i16* %10473 to <8 x i16>*
  %10475 = load <8 x i16>, <8 x i16>* %10474, align 2, !tbaa !389
  %10476 = getelementptr inbounds i16, i16* %10457, i64 -16
  %10477 = bitcast i16* %10476 to <8 x i16>*
  %10478 = load <8 x i16>, <8 x i16>* %10477, align 2, !tbaa !389
  %10479 = getelementptr inbounds i16, i16* %10457, i64 -8
  %10480 = bitcast i16* %10479 to <8 x i16>*
  %10481 = load <8 x i16>, <8 x i16>* %10480, align 2, !tbaa !389
  %10482 = add nsw i32 %a5, 3
  %10483 = and i32 %10482, 7
  %narrow192 = add nuw nsw i32 %10483, 1
  %10484 = zext i32 %narrow192 to i64
  %10485 = mul nsw i64 %60, %10484
  %10486 = getelementptr inbounds i16, i16* %blur_x, i64 %10485
  %10487 = getelementptr inbounds i16, i16* %10486, i64 -64
  %10488 = bitcast i16* %10487 to <8 x i16>*
  %10489 = load <8 x i16>, <8 x i16>* %10488, align 2, !tbaa !389
  %10490 = getelementptr inbounds i16, i16* %10486, i64 -56
  %10491 = bitcast i16* %10490 to <8 x i16>*
  %10492 = load <8 x i16>, <8 x i16>* %10491, align 2, !tbaa !389
  %10493 = getelementptr inbounds i16, i16* %10486, i64 -48
  %10494 = bitcast i16* %10493 to <8 x i16>*
  %10495 = load <8 x i16>, <8 x i16>* %10494, align 2, !tbaa !389
  %10496 = getelementptr inbounds i16, i16* %10486, i64 -40
  %10497 = bitcast i16* %10496 to <8 x i16>*
  %10498 = load <8 x i16>, <8 x i16>* %10497, align 2, !tbaa !389
  %10499 = getelementptr inbounds i16, i16* %10486, i64 -32
  %10500 = bitcast i16* %10499 to <8 x i16>*
  %10501 = load <8 x i16>, <8 x i16>* %10500, align 2, !tbaa !389
  %10502 = getelementptr inbounds i16, i16* %10486, i64 -24
  %10503 = bitcast i16* %10502 to <8 x i16>*
  %10504 = load <8 x i16>, <8 x i16>* %10503, align 2, !tbaa !389
  %10505 = getelementptr inbounds i16, i16* %10486, i64 -16
  %10506 = bitcast i16* %10505 to <8 x i16>*
  %10507 = load <8 x i16>, <8 x i16>* %10506, align 2, !tbaa !389
  %10508 = getelementptr inbounds i16, i16* %10486, i64 -8
  %10509 = bitcast i16* %10508 to <8 x i16>*
  %10510 = load <8 x i16>, <8 x i16>* %10509, align 2, !tbaa !389
  %10511 = add nsw i32 %a5, 2
  %10512 = and i32 %10511, 7
  %narrow193 = add nuw nsw i32 %10512, 1
  %10513 = zext i32 %narrow193 to i64
  %10514 = mul nsw i64 %60, %10513
  %10515 = getelementptr inbounds i16, i16* %blur_x, i64 %10514
  %10516 = getelementptr inbounds i16, i16* %10515, i64 -64
  %10517 = bitcast i16* %10516 to <8 x i16>*
  %10518 = load <8 x i16>, <8 x i16>* %10517, align 2, !tbaa !389
  %10519 = getelementptr inbounds i16, i16* %10515, i64 -56
  %10520 = bitcast i16* %10519 to <8 x i16>*
  %10521 = load <8 x i16>, <8 x i16>* %10520, align 2, !tbaa !389
  %10522 = getelementptr inbounds i16, i16* %10515, i64 -48
  %10523 = bitcast i16* %10522 to <8 x i16>*
  %10524 = load <8 x i16>, <8 x i16>* %10523, align 2, !tbaa !389
  %10525 = getelementptr inbounds i16, i16* %10515, i64 -40
  %10526 = bitcast i16* %10525 to <8 x i16>*
  %10527 = load <8 x i16>, <8 x i16>* %10526, align 2, !tbaa !389
  %10528 = getelementptr inbounds i16, i16* %10515, i64 -32
  %10529 = bitcast i16* %10528 to <8 x i16>*
  %10530 = load <8 x i16>, <8 x i16>* %10529, align 2, !tbaa !389
  %10531 = getelementptr inbounds i16, i16* %10515, i64 -24
  %10532 = bitcast i16* %10531 to <8 x i16>*
  %10533 = load <8 x i16>, <8 x i16>* %10532, align 2, !tbaa !389
  %10534 = getelementptr inbounds i16, i16* %10515, i64 -16
  %10535 = bitcast i16* %10534 to <8 x i16>*
  %10536 = load <8 x i16>, <8 x i16>* %10535, align 2, !tbaa !389
  %10537 = getelementptr inbounds i16, i16* %10515, i64 -8
  %10538 = bitcast i16* %10537 to <8 x i16>*
  %10539 = load <8 x i16>, <8 x i16>* %10538, align 2, !tbaa !389
  %10540 = add <8 x i16> %10431, %10402
  %10541 = add <8 x i16> %10540, %10460
  %10542 = add <8 x i16> %10541, %10489
  %10543 = add <8 x i16> %10542, %10518
  %10544 = add <8 x i16> %10434, %10405
  %10545 = add <8 x i16> %10544, %10463
  %10546 = add <8 x i16> %10545, %10492
  %10547 = add <8 x i16> %10546, %10521
  %10548 = add <8 x i16> %10437, %10408
  %10549 = add <8 x i16> %10548, %10466
  %10550 = add <8 x i16> %10549, %10495
  %10551 = add <8 x i16> %10550, %10524
  %10552 = add <8 x i16> %10440, %10411
  %10553 = add <8 x i16> %10552, %10469
  %10554 = add <8 x i16> %10553, %10498
  %10555 = add <8 x i16> %10554, %10527
  %10556 = add <8 x i16> %10443, %10414
  %10557 = add <8 x i16> %10556, %10472
  %10558 = add <8 x i16> %10557, %10501
  %10559 = add <8 x i16> %10558, %10530
  %10560 = add <8 x i16> %10446, %10417
  %10561 = add <8 x i16> %10560, %10475
  %10562 = add <8 x i16> %10561, %10504
  %10563 = add <8 x i16> %10562, %10533
  %10564 = add <8 x i16> %10449, %10420
  %10565 = add <8 x i16> %10564, %10478
  %10566 = add <8 x i16> %10565, %10507
  %10567 = add <8 x i16> %10566, %10536
  %10568 = add <8 x i16> %10452, %10423
  %10569 = add <8 x i16> %10568, %10481
  %10570 = add <8 x i16> %10569, %10510
  %10571 = add <8 x i16> %10570, %10539
  %10572 = shufflevector <8 x i16> %10571, <8 x i16> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %10573 = shufflevector <16 x i16> %10572, <16 x i16> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %10574 = shufflevector <32 x i16> %10573, <32 x i16> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %10575 = shufflevector <8 x i16> %10543, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %10576 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %10575, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10577 = shufflevector <8 x i16> %10543, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %10578 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %10577, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10579 = shufflevector <8 x i16> %10547, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %10580 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %10579, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10581 = shufflevector <8 x i16> %10547, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %10582 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %10581, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10583 = shufflevector <8 x i16> %10551, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %10584 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %10583, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10585 = shufflevector <8 x i16> %10551, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %10586 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %10585, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10587 = shufflevector <8 x i16> %10555, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %10588 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %10587, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10589 = shufflevector <8 x i16> %10555, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %10590 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %10589, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10591 = shufflevector <8 x i16> %10559, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %10592 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %10591, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10593 = shufflevector <8 x i16> %10559, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %10594 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %10593, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10595 = shufflevector <8 x i16> %10563, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %10596 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %10595, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10597 = shufflevector <8 x i16> %10563, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %10598 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %10597, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10599 = shufflevector <8 x i16> %10567, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %10600 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %10599, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10601 = shufflevector <8 x i16> %10567, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %10602 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %10601, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10603 = shufflevector <8 x i16> %10571, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %10604 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %10603, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10605 = shufflevector <64 x i16> %10574, <64 x i16> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %10606 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %10605, <4 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10607 = shufflevector <4 x i32> %10576, <4 x i32> %10578, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10608 = shufflevector <4 x i32> %10580, <4 x i32> %10582, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10609 = shufflevector <4 x i32> %10584, <4 x i32> %10586, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10610 = shufflevector <4 x i32> %10588, <4 x i32> %10590, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10611 = shufflevector <4 x i32> %10592, <4 x i32> %10594, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10612 = shufflevector <4 x i32> %10596, <4 x i32> %10598, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10613 = shufflevector <4 x i32> %10600, <4 x i32> %10602, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10614 = shufflevector <4 x i32> %10604, <4 x i32> %10606, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10615 = shufflevector <8 x i32> %10607, <8 x i32> %10608, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10616 = shufflevector <8 x i32> %10609, <8 x i32> %10610, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10617 = shufflevector <8 x i32> %10611, <8 x i32> %10612, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10618 = shufflevector <8 x i32> %10613, <8 x i32> %10614, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10619 = shufflevector <16 x i32> %10615, <16 x i32> %10616, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10620 = shufflevector <16 x i32> %10617, <16 x i32> %10618, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10621 = shufflevector <32 x i32> %10619, <32 x i32> %10620, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %10622 = lshr <64 x i32> %10621, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %10623 = trunc <64 x i32> %10622 to <64 x i16>
  %10624 = sext i32 %a5 to i64
  %10625 = add nsw i64 %10624, -1
  %10626 = mul nsw i64 %10625, %61
  %10627 = add nsw i64 %10626, %64
  %10628 = getelementptr inbounds i16, i16* %blur_y285, i64 %10627
  %10629 = getelementptr inbounds i16, i16* %10628, i64 -64
  %10630 = bitcast i16* %10629 to <8 x i16>*
  %10631 = getelementptr inbounds i16, i16* %10628, i64 -56
  %10632 = bitcast i16* %10631 to <8 x i16>*
  %10633 = getelementptr inbounds i16, i16* %10628, i64 -48
  %10634 = bitcast i16* %10633 to <8 x i16>*
  %10635 = getelementptr inbounds i16, i16* %10628, i64 -40
  %10636 = bitcast i16* %10635 to <8 x i16>*
  %10637 = getelementptr inbounds i16, i16* %10628, i64 -32
  %10638 = bitcast i16* %10637 to <8 x i16>*
  %10639 = getelementptr inbounds i16, i16* %10628, i64 -24
  %10640 = bitcast i16* %10639 to <8 x i16>*
  %10641 = getelementptr inbounds i16, i16* %10628, i64 -16
  %10642 = bitcast i16* %10641 to <8 x i16>*
  %10643 = getelementptr inbounds i16, i16* %10628, i64 -8
  %10644 = shufflevector <64 x i16> %10623, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10645 = shufflevector <64 x i16> %10623, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10646 = shufflevector <64 x i16> %10623, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %10647 = shufflevector <64 x i16> %10623, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10648 = shufflevector <64 x i16> %10623, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %10649 = shufflevector <64 x i16> %10623, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %10650 = shufflevector <64 x i16> %10623, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %10651 = shufflevector <64 x i16> %10623, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %10652 = bitcast i16* %10643 to <8 x i16>*
  store <8 x i16> %10644, <8 x i16>* %10630, align 2, !tbaa !391
  store <8 x i16> %10645, <8 x i16>* %10632, align 2, !tbaa !391
  store <8 x i16> %10646, <8 x i16>* %10634, align 2, !tbaa !391
  store <8 x i16> %10647, <8 x i16>* %10636, align 2, !tbaa !391
  store <8 x i16> %10648, <8 x i16>* %10638, align 2, !tbaa !391
  store <8 x i16> %10649, <8 x i16>* %10640, align 2, !tbaa !391
  store <8 x i16> %10650, <8 x i16>* %10642, align 2, !tbaa !391
  store <8 x i16> %10651, <8 x i16>* %10652, align 2, !tbaa !391
  br label %after_bb

"for blur_y.s0.y.yi.yi.$n.rebased67":             ; preds = %call_destructor.exit, %after_bb124
  %indvars.iv283 = phi i64 [ 0, %call_destructor.exit ], [ %indvars.iv.next284, %after_bb124 ]
  %indvars.iv283.tr = trunc i64 %indvars.iv283 to i32
  %10653 = shl i32 %indvars.iv283.tr, 2
  %10654 = add i32 %10653, %84
  %a35 = add i32 %10654, %blur_y.min.145
  %10655 = icmp sgt i32 %a35, %b100
  %a34 = select i1 %10655, i32 %a35, i32 %b100
  %b36 = add nsw i32 %a35, 4
  %10656 = icmp slt i32 %a34, %b36
  %10657 = icmp sgt i32 %a34, %b40
  %a37 = select i1 %10657, i32 %a34, i32 %b40
  %10658 = icmp slt i32 %a37, %b36
  %a41 = sub i32 %86, %10653
  %10659 = icmp slt i32 %a41, 4
  %a40 = select i1 %10659, i32 %a41, i32 4
  %10660 = icmp sgt i32 %a41, 0
  %t32374 = select i1 %10660, i32 %a40, i32 0
  br i1 %10660, label %"for blur_x.s0.y.rebased76.preheader", label %"end for blur_x.s0.y.rebased77", !prof !385

"for blur_x.s0.y.rebased76.preheader":            ; preds = %"for blur_y.s0.y.yi.yi.$n.rebased67"
  %10661 = sub nsw i32 %a35, %b100
  br label %"for blur_x.s0.y.rebased76"

"end for blur_y.s0.y.yi.yi.$n.rebased68":         ; preds = %after_bb124
  %tobool.not.i225.not = icmp eq i8* %83, null
  br i1 %tobool.not.i225.not, label %call_destructor.exit227, label %if.then.i226

if.then.i226:                                     ; preds = %"end for blur_y.s0.y.yi.yi.$n.rebased68"
  tail call void @halide_free(i8* %__user_context, i8* nonnull %83) #14
  br label %call_destructor.exit227

call_destructor.exit227:                          ; preds = %"end for blur_y.s0.y.yi.yi.$n.rebased68", %if.then.i226
  ret i32 0

"for blur_x.s0.y.rebased76":                      ; preds = %"for blur_x.s0.y.rebased76.preheader", %"end for blur_x.s0.x.x81"
  %blur_x.s0.y.rebased78 = phi i32 [ %12592, %"end for blur_x.s0.x.x81" ], [ 0, %"for blur_x.s0.y.rebased76.preheader" ]
  %a44 = add nsw i32 %blur_x.s0.y.rebased78, %10661
  %10662 = icmp slt i32 %a44, %b46
  %a49 = select i1 %10662, i32 %a44, i32 %b46
  br i1 %87, label %"for blur_x.s0.x.x80.preheader", label %"end for blur_x.s0.x.x81", !prof !385

"for blur_x.s0.x.x80.preheader":                  ; preds = %"for blur_x.s0.y.rebased76"
  %10663 = add nsw i32 %blur_x.s0.y.rebased78, %a35
  %10664 = and i32 %10663, 7
  %10665 = mul nsw i32 %10664, %a27
  %t32779 = sub nsw i32 %10665, %t29350
  %10666 = icmp sgt i32 %a49, 0
  %10667 = select i1 %10666, i32 %a49, i32 0
  %10668 = mul nsw i32 %10667, %input.stride.149
  %10669 = sub nsw i32 %10668, %input.min.048
  %10670 = insertelement <4 x i32> undef, i32 %10669, i32 0
  %t359 = shufflevector <4 x i32> %10670, <4 x i32> undef, <4 x i32> zeroinitializer
  %10671 = sext i32 %t32779 to i64
  br label %"for blur_x.s0.x.x80"

"end for blur_x.s0.y.rebased77":                  ; preds = %"end for blur_x.s0.x.x81", %"for blur_y.s0.y.yi.yi.$n.rebased67"
  %10672 = icmp slt i32 %a35, %a54
  %a53 = select i1 %10672, i32 %a54, i32 %a35
  %10673 = icmp slt i32 %a53, %b36
  %10674 = select i1 %10673, i32 %a53, i32 %b36
  %10675 = select i1 %10656, i32 %a34, i32 %b36
  %t32885 = sub nsw i32 %10674, %10675
  %10676 = icmp sgt i32 %t32885, 0
  br i1 %10676, label %"for blur_x.s0.y.rebased88.preheader", label %"end for blur_x.s0.y.rebased89", !prof !385

"for blur_x.s0.y.rebased88.preheader":            ; preds = %"end for blur_x.s0.y.rebased77"
  %10677 = sub i32 %10675, %b100
  br label %"for blur_x.s0.y.rebased88"

"for blur_x.s0.x.x80":                            ; preds = %"for blur_x.s0.x.x80.preheader", %"for blur_x.s0.x.x80"
  %blur_x.s0.x.x82 = phi i32 [ %12591, %"for blur_x.s0.x.x80" ], [ 0, %"for blur_x.s0.x.x80.preheader" ]
  %10678 = shl nsw i32 %blur_x.s0.x.x82, 6
  %a47 = add nsw i32 %10678, %t29350
  %10679 = icmp slt i32 %a47, %b101
  %blur_x.s0.x.v2.base.s83 = select i1 %10679, i32 %a47, i32 %b101
  %10680 = add nsw i32 %blur_x.s0.x.v2.base.s83, -63
  %10681 = insertelement <4 x i32> undef, i32 %10680, i32 0
  %10682 = shufflevector <4 x i32> %10681, <4 x i32> undef, <4 x i32> zeroinitializer
  %10683 = add nsw <4 x i32> %10682, <i32 0, i32 1, i32 2, i32 3>
  %10684 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10683, <4 x i32> %90) #11
  %10685 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10684, <4 x i32> %92) #11
  %10686 = add <4 x i32> %10685, %t359
  %10687 = extractelement <4 x i32> %10686, i32 0
  %10688 = sext i32 %10687 to i64
  %10689 = getelementptr inbounds i16, i16* %input43288, i64 %10688
  %10690 = load i16, i16* %10689, align 2, !tbaa !386
  %10691 = insertelement <4 x i16> undef, i16 %10690, i32 0
  %10692 = extractelement <4 x i32> %10686, i32 1
  %10693 = sext i32 %10692 to i64
  %10694 = getelementptr inbounds i16, i16* %input43288, i64 %10693
  %10695 = load i16, i16* %10694, align 2, !tbaa !386
  %10696 = insertelement <4 x i16> %10691, i16 %10695, i32 1
  %10697 = extractelement <4 x i32> %10686, i32 2
  %10698 = sext i32 %10697 to i64
  %10699 = getelementptr inbounds i16, i16* %input43288, i64 %10698
  %10700 = load i16, i16* %10699, align 2, !tbaa !386
  %10701 = insertelement <4 x i16> %10696, i16 %10700, i32 2
  %10702 = extractelement <4 x i32> %10686, i32 3
  %10703 = sext i32 %10702 to i64
  %10704 = getelementptr inbounds i16, i16* %input43288, i64 %10703
  %10705 = load i16, i16* %10704, align 2, !tbaa !386
  %10706 = insertelement <4 x i16> %10701, i16 %10705, i32 3
  %10707 = add nsw i32 %blur_x.s0.x.v2.base.s83, -59
  %10708 = insertelement <4 x i32> undef, i32 %10707, i32 0
  %10709 = shufflevector <4 x i32> %10708, <4 x i32> undef, <4 x i32> zeroinitializer
  %10710 = add nsw <4 x i32> %10709, <i32 0, i32 1, i32 2, i32 3>
  %10711 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10710, <4 x i32> %90) #11
  %10712 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10711, <4 x i32> %92) #11
  %10713 = add <4 x i32> %10712, %t359
  %10714 = extractelement <4 x i32> %10713, i32 0
  %10715 = sext i32 %10714 to i64
  %10716 = getelementptr inbounds i16, i16* %input43288, i64 %10715
  %10717 = load i16, i16* %10716, align 2, !tbaa !386
  %10718 = insertelement <4 x i16> undef, i16 %10717, i32 0
  %10719 = extractelement <4 x i32> %10713, i32 1
  %10720 = sext i32 %10719 to i64
  %10721 = getelementptr inbounds i16, i16* %input43288, i64 %10720
  %10722 = load i16, i16* %10721, align 2, !tbaa !386
  %10723 = insertelement <4 x i16> %10718, i16 %10722, i32 1
  %10724 = extractelement <4 x i32> %10713, i32 2
  %10725 = sext i32 %10724 to i64
  %10726 = getelementptr inbounds i16, i16* %input43288, i64 %10725
  %10727 = load i16, i16* %10726, align 2, !tbaa !386
  %10728 = insertelement <4 x i16> %10723, i16 %10727, i32 2
  %10729 = extractelement <4 x i32> %10713, i32 3
  %10730 = sext i32 %10729 to i64
  %10731 = getelementptr inbounds i16, i16* %input43288, i64 %10730
  %10732 = load i16, i16* %10731, align 2, !tbaa !386
  %10733 = insertelement <4 x i16> %10728, i16 %10732, i32 3
  %10734 = add nsw i32 %blur_x.s0.x.v2.base.s83, -64
  %10735 = insertelement <4 x i32> undef, i32 %10734, i32 0
  %10736 = shufflevector <4 x i32> %10735, <4 x i32> undef, <4 x i32> zeroinitializer
  %10737 = add nsw <4 x i32> %10736, <i32 0, i32 1, i32 2, i32 3>
  %10738 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10737, <4 x i32> %90) #11
  %10739 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10738, <4 x i32> %92) #11
  %10740 = add <4 x i32> %10739, %t359
  %10741 = extractelement <4 x i32> %10740, i32 0
  %10742 = sext i32 %10741 to i64
  %10743 = getelementptr inbounds i16, i16* %input43288, i64 %10742
  %10744 = load i16, i16* %10743, align 2, !tbaa !386
  %10745 = insertelement <4 x i16> undef, i16 %10744, i32 0
  %10746 = extractelement <4 x i32> %10740, i32 1
  %10747 = sext i32 %10746 to i64
  %10748 = getelementptr inbounds i16, i16* %input43288, i64 %10747
  %10749 = load i16, i16* %10748, align 2, !tbaa !386
  %10750 = insertelement <4 x i16> %10745, i16 %10749, i32 1
  %10751 = extractelement <4 x i32> %10740, i32 2
  %10752 = sext i32 %10751 to i64
  %10753 = getelementptr inbounds i16, i16* %input43288, i64 %10752
  %10754 = load i16, i16* %10753, align 2, !tbaa !386
  %10755 = insertelement <4 x i16> %10750, i16 %10754, i32 2
  %10756 = extractelement <4 x i32> %10740, i32 3
  %10757 = sext i32 %10756 to i64
  %10758 = getelementptr inbounds i16, i16* %input43288, i64 %10757
  %10759 = load i16, i16* %10758, align 2, !tbaa !386
  %10760 = insertelement <4 x i16> %10755, i16 %10759, i32 3
  %10761 = add nsw i32 %blur_x.s0.x.v2.base.s83, -60
  %10762 = insertelement <4 x i32> undef, i32 %10761, i32 0
  %10763 = shufflevector <4 x i32> %10762, <4 x i32> undef, <4 x i32> zeroinitializer
  %10764 = add nsw <4 x i32> %10763, <i32 0, i32 1, i32 2, i32 3>
  %10765 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10764, <4 x i32> %90) #11
  %10766 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10765, <4 x i32> %92) #11
  %10767 = add <4 x i32> %10766, %t359
  %10768 = extractelement <4 x i32> %10767, i32 0
  %10769 = sext i32 %10768 to i64
  %10770 = getelementptr inbounds i16, i16* %input43288, i64 %10769
  %10771 = load i16, i16* %10770, align 2, !tbaa !386
  %10772 = insertelement <4 x i16> undef, i16 %10771, i32 0
  %10773 = extractelement <4 x i32> %10767, i32 1
  %10774 = sext i32 %10773 to i64
  %10775 = getelementptr inbounds i16, i16* %input43288, i64 %10774
  %10776 = load i16, i16* %10775, align 2, !tbaa !386
  %10777 = insertelement <4 x i16> %10772, i16 %10776, i32 1
  %10778 = extractelement <4 x i32> %10767, i32 2
  %10779 = sext i32 %10778 to i64
  %10780 = getelementptr inbounds i16, i16* %input43288, i64 %10779
  %10781 = load i16, i16* %10780, align 2, !tbaa !386
  %10782 = insertelement <4 x i16> %10777, i16 %10781, i32 2
  %10783 = extractelement <4 x i32> %10767, i32 3
  %10784 = sext i32 %10783 to i64
  %10785 = getelementptr inbounds i16, i16* %input43288, i64 %10784
  %10786 = load i16, i16* %10785, align 2, !tbaa !386
  %10787 = insertelement <4 x i16> %10782, i16 %10786, i32 3
  %10788 = add nsw i32 %blur_x.s0.x.v2.base.s83, -62
  %10789 = insertelement <4 x i32> undef, i32 %10788, i32 0
  %10790 = shufflevector <4 x i32> %10789, <4 x i32> undef, <4 x i32> zeroinitializer
  %10791 = add nsw <4 x i32> %10790, <i32 0, i32 1, i32 2, i32 3>
  %10792 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10791, <4 x i32> %90) #11
  %10793 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10792, <4 x i32> %92) #11
  %10794 = add <4 x i32> %10793, %t359
  %10795 = extractelement <4 x i32> %10794, i32 0
  %10796 = sext i32 %10795 to i64
  %10797 = getelementptr inbounds i16, i16* %input43288, i64 %10796
  %10798 = load i16, i16* %10797, align 2, !tbaa !386
  %10799 = insertelement <4 x i16> undef, i16 %10798, i32 0
  %10800 = extractelement <4 x i32> %10794, i32 1
  %10801 = sext i32 %10800 to i64
  %10802 = getelementptr inbounds i16, i16* %input43288, i64 %10801
  %10803 = load i16, i16* %10802, align 2, !tbaa !386
  %10804 = insertelement <4 x i16> %10799, i16 %10803, i32 1
  %10805 = extractelement <4 x i32> %10794, i32 2
  %10806 = sext i32 %10805 to i64
  %10807 = getelementptr inbounds i16, i16* %input43288, i64 %10806
  %10808 = load i16, i16* %10807, align 2, !tbaa !386
  %10809 = insertelement <4 x i16> %10804, i16 %10808, i32 2
  %10810 = extractelement <4 x i32> %10794, i32 3
  %10811 = sext i32 %10810 to i64
  %10812 = getelementptr inbounds i16, i16* %input43288, i64 %10811
  %10813 = load i16, i16* %10812, align 2, !tbaa !386
  %10814 = insertelement <4 x i16> %10809, i16 %10813, i32 3
  %10815 = add nsw i32 %blur_x.s0.x.v2.base.s83, -58
  %10816 = insertelement <4 x i32> undef, i32 %10815, i32 0
  %10817 = shufflevector <4 x i32> %10816, <4 x i32> undef, <4 x i32> zeroinitializer
  %10818 = add nsw <4 x i32> %10817, <i32 0, i32 1, i32 2, i32 3>
  %10819 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10818, <4 x i32> %90) #11
  %10820 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10819, <4 x i32> %92) #11
  %10821 = add <4 x i32> %10820, %t359
  %10822 = extractelement <4 x i32> %10821, i32 0
  %10823 = sext i32 %10822 to i64
  %10824 = getelementptr inbounds i16, i16* %input43288, i64 %10823
  %10825 = load i16, i16* %10824, align 2, !tbaa !386
  %10826 = insertelement <4 x i16> undef, i16 %10825, i32 0
  %10827 = extractelement <4 x i32> %10821, i32 1
  %10828 = sext i32 %10827 to i64
  %10829 = getelementptr inbounds i16, i16* %input43288, i64 %10828
  %10830 = load i16, i16* %10829, align 2, !tbaa !386
  %10831 = insertelement <4 x i16> %10826, i16 %10830, i32 1
  %10832 = extractelement <4 x i32> %10821, i32 2
  %10833 = sext i32 %10832 to i64
  %10834 = getelementptr inbounds i16, i16* %input43288, i64 %10833
  %10835 = load i16, i16* %10834, align 2, !tbaa !386
  %10836 = insertelement <4 x i16> %10831, i16 %10835, i32 2
  %10837 = extractelement <4 x i32> %10821, i32 3
  %10838 = sext i32 %10837 to i64
  %10839 = getelementptr inbounds i16, i16* %input43288, i64 %10838
  %10840 = load i16, i16* %10839, align 2, !tbaa !386
  %10841 = insertelement <4 x i16> %10836, i16 %10840, i32 3
  %10842 = add nsw i32 %blur_x.s0.x.v2.base.s83, -56
  %10843 = insertelement <4 x i32> undef, i32 %10842, i32 0
  %10844 = shufflevector <4 x i32> %10843, <4 x i32> undef, <4 x i32> zeroinitializer
  %10845 = add nsw <4 x i32> %10844, <i32 0, i32 1, i32 2, i32 3>
  %10846 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10845, <4 x i32> %90) #11
  %10847 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10846, <4 x i32> %92) #11
  %10848 = add <4 x i32> %10847, %t359
  %10849 = extractelement <4 x i32> %10848, i32 0
  %10850 = sext i32 %10849 to i64
  %10851 = getelementptr inbounds i16, i16* %input43288, i64 %10850
  %10852 = load i16, i16* %10851, align 2, !tbaa !386
  %10853 = insertelement <4 x i16> undef, i16 %10852, i32 0
  %10854 = extractelement <4 x i32> %10848, i32 1
  %10855 = sext i32 %10854 to i64
  %10856 = getelementptr inbounds i16, i16* %input43288, i64 %10855
  %10857 = load i16, i16* %10856, align 2, !tbaa !386
  %10858 = insertelement <4 x i16> %10853, i16 %10857, i32 1
  %10859 = extractelement <4 x i32> %10848, i32 2
  %10860 = sext i32 %10859 to i64
  %10861 = getelementptr inbounds i16, i16* %input43288, i64 %10860
  %10862 = load i16, i16* %10861, align 2, !tbaa !386
  %10863 = insertelement <4 x i16> %10858, i16 %10862, i32 2
  %10864 = extractelement <4 x i32> %10848, i32 3
  %10865 = sext i32 %10864 to i64
  %10866 = getelementptr inbounds i16, i16* %input43288, i64 %10865
  %10867 = load i16, i16* %10866, align 2, !tbaa !386
  %10868 = insertelement <4 x i16> %10863, i16 %10867, i32 3
  %10869 = add nsw i32 %blur_x.s0.x.v2.base.s83, -61
  %10870 = insertelement <4 x i32> undef, i32 %10869, i32 0
  %10871 = shufflevector <4 x i32> %10870, <4 x i32> undef, <4 x i32> zeroinitializer
  %10872 = add nsw <4 x i32> %10871, <i32 0, i32 1, i32 2, i32 3>
  %10873 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10872, <4 x i32> %90) #11
  %10874 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10873, <4 x i32> %92) #11
  %10875 = add <4 x i32> %10874, %t359
  %10876 = extractelement <4 x i32> %10875, i32 0
  %10877 = sext i32 %10876 to i64
  %10878 = getelementptr inbounds i16, i16* %input43288, i64 %10877
  %10879 = load i16, i16* %10878, align 2, !tbaa !386
  %10880 = insertelement <4 x i16> undef, i16 %10879, i32 0
  %10881 = extractelement <4 x i32> %10875, i32 1
  %10882 = sext i32 %10881 to i64
  %10883 = getelementptr inbounds i16, i16* %input43288, i64 %10882
  %10884 = load i16, i16* %10883, align 2, !tbaa !386
  %10885 = insertelement <4 x i16> %10880, i16 %10884, i32 1
  %10886 = extractelement <4 x i32> %10875, i32 2
  %10887 = sext i32 %10886 to i64
  %10888 = getelementptr inbounds i16, i16* %input43288, i64 %10887
  %10889 = load i16, i16* %10888, align 2, !tbaa !386
  %10890 = insertelement <4 x i16> %10885, i16 %10889, i32 2
  %10891 = extractelement <4 x i32> %10875, i32 3
  %10892 = sext i32 %10891 to i64
  %10893 = getelementptr inbounds i16, i16* %input43288, i64 %10892
  %10894 = load i16, i16* %10893, align 2, !tbaa !386
  %10895 = insertelement <4 x i16> %10890, i16 %10894, i32 3
  %10896 = add nsw i32 %blur_x.s0.x.v2.base.s83, -57
  %10897 = insertelement <4 x i32> undef, i32 %10896, i32 0
  %10898 = shufflevector <4 x i32> %10897, <4 x i32> undef, <4 x i32> zeroinitializer
  %10899 = add nsw <4 x i32> %10898, <i32 0, i32 1, i32 2, i32 3>
  %10900 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10899, <4 x i32> %90) #11
  %10901 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10900, <4 x i32> %92) #11
  %10902 = add <4 x i32> %10901, %t359
  %10903 = extractelement <4 x i32> %10902, i32 0
  %10904 = sext i32 %10903 to i64
  %10905 = getelementptr inbounds i16, i16* %input43288, i64 %10904
  %10906 = load i16, i16* %10905, align 2, !tbaa !386
  %10907 = insertelement <4 x i16> undef, i16 %10906, i32 0
  %10908 = extractelement <4 x i32> %10902, i32 1
  %10909 = sext i32 %10908 to i64
  %10910 = getelementptr inbounds i16, i16* %input43288, i64 %10909
  %10911 = load i16, i16* %10910, align 2, !tbaa !386
  %10912 = insertelement <4 x i16> %10907, i16 %10911, i32 1
  %10913 = extractelement <4 x i32> %10902, i32 2
  %10914 = sext i32 %10913 to i64
  %10915 = getelementptr inbounds i16, i16* %input43288, i64 %10914
  %10916 = load i16, i16* %10915, align 2, !tbaa !386
  %10917 = insertelement <4 x i16> %10912, i16 %10916, i32 2
  %10918 = extractelement <4 x i32> %10902, i32 3
  %10919 = sext i32 %10918 to i64
  %10920 = getelementptr inbounds i16, i16* %input43288, i64 %10919
  %10921 = load i16, i16* %10920, align 2, !tbaa !386
  %10922 = insertelement <4 x i16> %10917, i16 %10921, i32 3
  %10923 = add <4 x i16> %10760, %10706
  %10924 = add <4 x i16> %10923, %10787
  %10925 = add <4 x i16> %10924, %10814
  %10926 = add <4 x i16> %10925, %10895
  %10927 = add <4 x i16> %10787, %10733
  %10928 = add <4 x i16> %10927, %10841
  %10929 = add <4 x i16> %10928, %10868
  %10930 = add <4 x i16> %10929, %10922
  %10931 = shufflevector <4 x i16> %10926, <4 x i16> %10930, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10932 = zext <8 x i16> %10931 to <8 x i32>
  %10933 = mul nuw <8 x i32> %10932, <i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429>
  %10934 = lshr <8 x i32> %10933, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %10935 = shufflevector <8 x i32> %10934, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %10936 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %10935)
  %10937 = shufflevector <8 x i32> %10934, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %10938 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %10937)
  %10939 = shufflevector <4 x i16> %10936, <4 x i16> %10938, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10940 = add nsw i32 %blur_x.s0.x.v2.base.s83, -55
  %10941 = insertelement <4 x i32> undef, i32 %10940, i32 0
  %10942 = shufflevector <4 x i32> %10941, <4 x i32> undef, <4 x i32> zeroinitializer
  %10943 = add nsw <4 x i32> %10942, <i32 0, i32 1, i32 2, i32 3>
  %10944 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10943, <4 x i32> %90) #11
  %10945 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10944, <4 x i32> %92) #11
  %10946 = add <4 x i32> %10945, %t359
  %10947 = extractelement <4 x i32> %10946, i32 0
  %10948 = sext i32 %10947 to i64
  %10949 = getelementptr inbounds i16, i16* %input43288, i64 %10948
  %10950 = load i16, i16* %10949, align 2, !tbaa !386
  %10951 = insertelement <4 x i16> undef, i16 %10950, i32 0
  %10952 = extractelement <4 x i32> %10946, i32 1
  %10953 = sext i32 %10952 to i64
  %10954 = getelementptr inbounds i16, i16* %input43288, i64 %10953
  %10955 = load i16, i16* %10954, align 2, !tbaa !386
  %10956 = insertelement <4 x i16> %10951, i16 %10955, i32 1
  %10957 = extractelement <4 x i32> %10946, i32 2
  %10958 = sext i32 %10957 to i64
  %10959 = getelementptr inbounds i16, i16* %input43288, i64 %10958
  %10960 = load i16, i16* %10959, align 2, !tbaa !386
  %10961 = insertelement <4 x i16> %10956, i16 %10960, i32 2
  %10962 = extractelement <4 x i32> %10946, i32 3
  %10963 = sext i32 %10962 to i64
  %10964 = getelementptr inbounds i16, i16* %input43288, i64 %10963
  %10965 = load i16, i16* %10964, align 2, !tbaa !386
  %10966 = insertelement <4 x i16> %10961, i16 %10965, i32 3
  %10967 = add nsw i32 %blur_x.s0.x.v2.base.s83, -51
  %10968 = insertelement <4 x i32> undef, i32 %10967, i32 0
  %10969 = shufflevector <4 x i32> %10968, <4 x i32> undef, <4 x i32> zeroinitializer
  %10970 = add nsw <4 x i32> %10969, <i32 0, i32 1, i32 2, i32 3>
  %10971 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10970, <4 x i32> %90) #11
  %10972 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10971, <4 x i32> %92) #11
  %10973 = add <4 x i32> %10972, %t359
  %10974 = extractelement <4 x i32> %10973, i32 0
  %10975 = sext i32 %10974 to i64
  %10976 = getelementptr inbounds i16, i16* %input43288, i64 %10975
  %10977 = load i16, i16* %10976, align 2, !tbaa !386
  %10978 = insertelement <4 x i16> undef, i16 %10977, i32 0
  %10979 = extractelement <4 x i32> %10973, i32 1
  %10980 = sext i32 %10979 to i64
  %10981 = getelementptr inbounds i16, i16* %input43288, i64 %10980
  %10982 = load i16, i16* %10981, align 2, !tbaa !386
  %10983 = insertelement <4 x i16> %10978, i16 %10982, i32 1
  %10984 = extractelement <4 x i32> %10973, i32 2
  %10985 = sext i32 %10984 to i64
  %10986 = getelementptr inbounds i16, i16* %input43288, i64 %10985
  %10987 = load i16, i16* %10986, align 2, !tbaa !386
  %10988 = insertelement <4 x i16> %10983, i16 %10987, i32 2
  %10989 = extractelement <4 x i32> %10973, i32 3
  %10990 = sext i32 %10989 to i64
  %10991 = getelementptr inbounds i16, i16* %input43288, i64 %10990
  %10992 = load i16, i16* %10991, align 2, !tbaa !386
  %10993 = insertelement <4 x i16> %10988, i16 %10992, i32 3
  %10994 = add nsw i32 %blur_x.s0.x.v2.base.s83, -52
  %10995 = insertelement <4 x i32> undef, i32 %10994, i32 0
  %10996 = shufflevector <4 x i32> %10995, <4 x i32> undef, <4 x i32> zeroinitializer
  %10997 = add nsw <4 x i32> %10996, <i32 0, i32 1, i32 2, i32 3>
  %10998 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10997, <4 x i32> %90) #11
  %10999 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10998, <4 x i32> %92) #11
  %11000 = add <4 x i32> %10999, %t359
  %11001 = extractelement <4 x i32> %11000, i32 0
  %11002 = sext i32 %11001 to i64
  %11003 = getelementptr inbounds i16, i16* %input43288, i64 %11002
  %11004 = load i16, i16* %11003, align 2, !tbaa !386
  %11005 = insertelement <4 x i16> undef, i16 %11004, i32 0
  %11006 = extractelement <4 x i32> %11000, i32 1
  %11007 = sext i32 %11006 to i64
  %11008 = getelementptr inbounds i16, i16* %input43288, i64 %11007
  %11009 = load i16, i16* %11008, align 2, !tbaa !386
  %11010 = insertelement <4 x i16> %11005, i16 %11009, i32 1
  %11011 = extractelement <4 x i32> %11000, i32 2
  %11012 = sext i32 %11011 to i64
  %11013 = getelementptr inbounds i16, i16* %input43288, i64 %11012
  %11014 = load i16, i16* %11013, align 2, !tbaa !386
  %11015 = insertelement <4 x i16> %11010, i16 %11014, i32 2
  %11016 = extractelement <4 x i32> %11000, i32 3
  %11017 = sext i32 %11016 to i64
  %11018 = getelementptr inbounds i16, i16* %input43288, i64 %11017
  %11019 = load i16, i16* %11018, align 2, !tbaa !386
  %11020 = insertelement <4 x i16> %11015, i16 %11019, i32 3
  %11021 = add nsw i32 %blur_x.s0.x.v2.base.s83, -54
  %11022 = insertelement <4 x i32> undef, i32 %11021, i32 0
  %11023 = shufflevector <4 x i32> %11022, <4 x i32> undef, <4 x i32> zeroinitializer
  %11024 = add nsw <4 x i32> %11023, <i32 0, i32 1, i32 2, i32 3>
  %11025 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %11024, <4 x i32> %90) #11
  %11026 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %11025, <4 x i32> %92) #11
  %11027 = add <4 x i32> %11026, %t359
  %11028 = extractelement <4 x i32> %11027, i32 0
  %11029 = sext i32 %11028 to i64
  %11030 = getelementptr inbounds i16, i16* %input43288, i64 %11029
  %11031 = load i16, i16* %11030, align 2, !tbaa !386
  %11032 = insertelement <4 x i16> undef, i16 %11031, i32 0
  %11033 = extractelement <4 x i32> %11027, i32 1
  %11034 = sext i32 %11033 to i64
  %11035 = getelementptr inbounds i16, i16* %input43288, i64 %11034
  %11036 = load i16, i16* %11035, align 2, !tbaa !386
  %11037 = insertelement <4 x i16> %11032, i16 %11036, i32 1
  %11038 = extractelement <4 x i32> %11027, i32 2
  %11039 = sext i32 %11038 to i64
  %11040 = getelementptr inbounds i16, i16* %input43288, i64 %11039
  %11041 = load i16, i16* %11040, align 2, !tbaa !386
  %11042 = insertelement <4 x i16> %11037, i16 %11041, i32 2
  %11043 = extractelement <4 x i32> %11027, i32 3
  %11044 = sext i32 %11043 to i64
  %11045 = getelementptr inbounds i16, i16* %input43288, i64 %11044
  %11046 = load i16, i16* %11045, align 2, !tbaa !386
  %11047 = insertelement <4 x i16> %11042, i16 %11046, i32 3
  %11048 = add nsw i32 %blur_x.s0.x.v2.base.s83, -50
  %11049 = insertelement <4 x i32> undef, i32 %11048, i32 0
  %11050 = shufflevector <4 x i32> %11049, <4 x i32> undef, <4 x i32> zeroinitializer
  %11051 = add nsw <4 x i32> %11050, <i32 0, i32 1, i32 2, i32 3>
  %11052 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %11051, <4 x i32> %90) #11
  %11053 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %11052, <4 x i32> %92) #11
  %11054 = add <4 x i32> %11053, %t359
  %11055 = extractelement <4 x i32> %11054, i32 0
  %11056 = sext i32 %11055 to i64
  %11057 = getelementptr inbounds i16, i16* %input43288, i64 %11056
  %11058 = load i16, i16* %11057, align 2, !tbaa !386
  %11059 = insertelement <4 x i16> undef, i16 %11058, i32 0
  %11060 = extractelement <4 x i32> %11054, i32 1
  %11061 = sext i32 %11060 to i64
  %11062 = getelementptr inbounds i16, i16* %input43288, i64 %11061
  %11063 = load i16, i16* %11062, align 2, !tbaa !386
  %11064 = insertelement <4 x i16> %11059, i16 %11063, i32 1
  %11065 = extractelement <4 x i32> %11054, i32 2
  %11066 = sext i32 %11065 to i64
  %11067 = getelementptr inbounds i16, i16* %input43288, i64 %11066
  %11068 = load i16, i16* %11067, align 2, !tbaa !386
  %11069 = insertelement <4 x i16> %11064, i16 %11068, i32 2
  %11070 = extractelement <4 x i32> %11054, i32 3
  %11071 = sext i32 %11070 to i64
  %11072 = getelementptr inbounds i16, i16* %input43288, i64 %11071
  %11073 = load i16, i16* %11072, align 2, !tbaa !386
  %11074 = insertelement <4 x i16> %11069, i16 %11073, i32 3
  %11075 = add nsw i32 %blur_x.s0.x.v2.base.s83, -48
  %11076 = insertelement <4 x i32> undef, i32 %11075, i32 0
  %11077 = shufflevector <4 x i32> %11076, <4 x i32> undef, <4 x i32> zeroinitializer
  %11078 = add nsw <4 x i32> %11077, <i32 0, i32 1, i32 2, i32 3>
  %11079 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %11078, <4 x i32> %90) #11
  %11080 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %11079, <4 x i32> %92) #11
  %11081 = add <4 x i32> %11080, %t359
  %11082 = extractelement <4 x i32> %11081, i32 0
  %11083 = sext i32 %11082 to i64
  %11084 = getelementptr inbounds i16, i16* %input43288, i64 %11083
  %11085 = load i16, i16* %11084, align 2, !tbaa !386
  %11086 = insertelement <4 x i16> undef, i16 %11085, i32 0
  %11087 = extractelement <4 x i32> %11081, i32 1
  %11088 = sext i32 %11087 to i64
  %11089 = getelementptr inbounds i16, i16* %input43288, i64 %11088
  %11090 = load i16, i16* %11089, align 2, !tbaa !386
  %11091 = insertelement <4 x i16> %11086, i16 %11090, i32 1
  %11092 = extractelement <4 x i32> %11081, i32 2
  %11093 = sext i32 %11092 to i64
  %11094 = getelementptr inbounds i16, i16* %input43288, i64 %11093
  %11095 = load i16, i16* %11094, align 2, !tbaa !386
  %11096 = insertelement <4 x i16> %11091, i16 %11095, i32 2
  %11097 = extractelement <4 x i32> %11081, i32 3
  %11098 = sext i32 %11097 to i64
  %11099 = getelementptr inbounds i16, i16* %input43288, i64 %11098
  %11100 = load i16, i16* %11099, align 2, !tbaa !386
  %11101 = insertelement <4 x i16> %11096, i16 %11100, i32 3
  %11102 = add nsw i32 %blur_x.s0.x.v2.base.s83, -53
  %11103 = insertelement <4 x i32> undef, i32 %11102, i32 0
  %11104 = shufflevector <4 x i32> %11103, <4 x i32> undef, <4 x i32> zeroinitializer
  %11105 = add nsw <4 x i32> %11104, <i32 0, i32 1, i32 2, i32 3>
  %11106 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %11105, <4 x i32> %90) #11
  %11107 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %11106, <4 x i32> %92) #11
  %11108 = add <4 x i32> %11107, %t359
  %11109 = extractelement <4 x i32> %11108, i32 0
  %11110 = sext i32 %11109 to i64
  %11111 = getelementptr inbounds i16, i16* %input43288, i64 %11110
  %11112 = load i16, i16* %11111, align 2, !tbaa !386
  %11113 = insertelement <4 x i16> undef, i16 %11112, i32 0
  %11114 = extractelement <4 x i32> %11108, i32 1
  %11115 = sext i32 %11114 to i64
  %11116 = getelementptr inbounds i16, i16* %input43288, i64 %11115
  %11117 = load i16, i16* %11116, align 2, !tbaa !386
  %11118 = insertelement <4 x i16> %11113, i16 %11117, i32 1
  %11119 = extractelement <4 x i32> %11108, i32 2
  %11120 = sext i32 %11119 to i64
  %11121 = getelementptr inbounds i16, i16* %input43288, i64 %11120
  %11122 = load i16, i16* %11121, align 2, !tbaa !386
  %11123 = insertelement <4 x i16> %11118, i16 %11122, i32 2
  %11124 = extractelement <4 x i32> %11108, i32 3
  %11125 = sext i32 %11124 to i64
  %11126 = getelementptr inbounds i16, i16* %input43288, i64 %11125
  %11127 = load i16, i16* %11126, align 2, !tbaa !386
  %11128 = insertelement <4 x i16> %11123, i16 %11127, i32 3
  %11129 = add nsw i32 %blur_x.s0.x.v2.base.s83, -49
  %11130 = insertelement <4 x i32> undef, i32 %11129, i32 0
  %11131 = shufflevector <4 x i32> %11130, <4 x i32> undef, <4 x i32> zeroinitializer
  %11132 = add nsw <4 x i32> %11131, <i32 0, i32 1, i32 2, i32 3>
  %11133 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %11132, <4 x i32> %90) #11
  %11134 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %11133, <4 x i32> %92) #11
  %11135 = add <4 x i32> %11134, %t359
  %11136 = extractelement <4 x i32> %11135, i32 0
  %11137 = sext i32 %11136 to i64
  %11138 = getelementptr inbounds i16, i16* %input43288, i64 %11137
  %11139 = load i16, i16* %11138, align 2, !tbaa !386
  %11140 = insertelement <4 x i16> undef, i16 %11139, i32 0
  %11141 = extractelement <4 x i32> %11135, i32 1
  %11142 = sext i32 %11141 to i64
  %11143 = getelementptr inbounds i16, i16* %input43288, i64 %11142
  %11144 = load i16, i16* %11143, align 2, !tbaa !386
  %11145 = insertelement <4 x i16> %11140, i16 %11144, i32 1
  %11146 = extractelement <4 x i32> %11135, i32 2
  %11147 = sext i32 %11146 to i64
  %11148 = getelementptr inbounds i16, i16* %input43288, i64 %11147
  %11149 = load i16, i16* %11148, align 2, !tbaa !386
  %11150 = insertelement <4 x i16> %11145, i16 %11149, i32 2
  %11151 = extractelement <4 x i32> %11135, i32 3
  %11152 = sext i32 %11151 to i64
  %11153 = getelementptr inbounds i16, i16* %input43288, i64 %11152
  %11154 = load i16, i16* %11153, align 2, !tbaa !386
  %11155 = insertelement <4 x i16> %11150, i16 %11154, i32 3
  %11156 = add <4 x i16> %10966, %10868
  %11157 = add <4 x i16> %11156, %11020
  %11158 = add <4 x i16> %11157, %11047
  %11159 = add <4 x i16> %11158, %11128
  %11160 = add <4 x i16> %11020, %10993
  %11161 = add <4 x i16> %11160, %11074
  %11162 = add <4 x i16> %11161, %11101
  %11163 = add <4 x i16> %11162, %11155
  %11164 = shufflevector <4 x i16> %11159, <4 x i16> %11163, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %11165 = zext <8 x i16> %11164 to <8 x i32>
  %11166 = mul nuw <8 x i32> %11165, <i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429>
  %11167 = lshr <8 x i32> %11166, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %11168 = shufflevector <8 x i32> %11167, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %11169 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %11168)
  %11170 = shufflevector <8 x i32> %11167, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %11171 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %11170)
  %11172 = shufflevector <4 x i16> %11169, <4 x i16> %11171, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %11173 = add nsw i32 %blur_x.s0.x.v2.base.s83, -47
  %11174 = insertelement <4 x i32> undef, i32 %11173, i32 0
  %11175 = shufflevector <4 x i32> %11174, <4 x i32> undef, <4 x i32> zeroinitializer
  %11176 = add nsw <4 x i32> %11175, <i32 0, i32 1, i32 2, i32 3>
  %11177 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %11176, <4 x i32> %90) #11
  %11178 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %11177, <4 x i32> %92) #11
  %11179 = add <4 x i32> %11178, %t359
  %11180 = extractelement <4 x i32> %11179, i32 0
  %11181 = sext i32 %11180 to i64
  %11182 = getelementptr inbounds i16, i16* %input43288, i64 %11181
  %11183 = load i16, i16* %11182, align 2, !tbaa !386
  %11184 = insertelement <4 x i16> undef, i16 %11183, i32 0
  %11185 = extractelement <4 x i32> %11179, i32 1
  %11186 = sext i32 %11185 to i64
  %11187 = getelementptr inbounds i16, i16* %input43288, i64 %11186
  %11188 = load i16, i16* %11187, align 2, !tbaa !386
  %11189 = insertelement <4 x i16> %11184, i16 %11188, i32 1
  %11190 = extractelement <4 x i32> %11179, i32 2
  %11191 = sext i32 %11190 to i64
  %11192 = getelementptr inbounds i16, i16* %input43288, i64 %11191
  %11193 = load i16, i16* %11192, align 2, !tbaa !386
  %11194 = insertelement <4 x i16> %11189, i16 %11193, i32 2
  %11195 = extractelement <4 x i32> %11179, i32 3
  %11196 = sext i32 %11195 to i64
  %11197 = getelementptr inbounds i16, i16* %input43288, i64 %11196
  %11198 = load i16, i16* %11197, align 2, !tbaa !386
  %11199 = insertelement <4 x i16> %11194, i16 %11198, i32 3
  %11200 = add nsw i32 %blur_x.s0.x.v2.base.s83, -43
  %11201 = insertelement <4 x i32> undef, i32 %11200, i32 0
  %11202 = shufflevector <4 x i32> %11201, <4 x i32> undef, <4 x i32> zeroinitializer
  %11203 = add nsw <4 x i32> %11202, <i32 0, i32 1, i32 2, i32 3>
  %11204 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %11203, <4 x i32> %90) #11
  %11205 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %11204, <4 x i32> %92) #11
  %11206 = add <4 x i32> %11205, %t359
  %11207 = extractelement <4 x i32> %11206, i32 0
  %11208 = sext i32 %11207 to i64
  %11209 = getelementptr inbounds i16, i16* %input43288, i64 %11208
  %11210 = load i16, i16* %11209, align 2, !tbaa !386
  %11211 = insertelement <4 x i16> undef, i16 %11210, i32 0
  %11212 = extractelement <4 x i32> %11206, i32 1
  %11213 = sext i32 %11212 to i64
  %11214 = getelementptr inbounds i16, i16* %input43288, i64 %11213
  %11215 = load i16, i16* %11214, align 2, !tbaa !386
  %11216 = insertelement <4 x i16> %11211, i16 %11215, i32 1
  %11217 = extractelement <4 x i32> %11206, i32 2
  %11218 = sext i32 %11217 to i64
  %11219 = getelementptr inbounds i16, i16* %input43288, i64 %11218
  %11220 = load i16, i16* %11219, align 2, !tbaa !386
  %11221 = insertelement <4 x i16> %11216, i16 %11220, i32 2
  %11222 = extractelement <4 x i32> %11206, i32 3
  %11223 = sext i32 %11222 to i64
  %11224 = getelementptr inbounds i16, i16* %input43288, i64 %11223
  %11225 = load i16, i16* %11224, align 2, !tbaa !386
  %11226 = insertelement <4 x i16> %11221, i16 %11225, i32 3
  %11227 = add nsw i32 %blur_x.s0.x.v2.base.s83, -44
  %11228 = insertelement <4 x i32> undef, i32 %11227, i32 0
  %11229 = shufflevector <4 x i32> %11228, <4 x i32> undef, <4 x i32> zeroinitializer
  %11230 = add nsw <4 x i32> %11229, <i32 0, i32 1, i32 2, i32 3>
  %11231 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %11230, <4 x i32> %90) #11
  %11232 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %11231, <4 x i32> %92) #11
  %11233 = add <4 x i32> %11232, %t359
  %11234 = extractelement <4 x i32> %11233, i32 0
  %11235 = sext i32 %11234 to i64
  %11236 = getelementptr inbounds i16, i16* %input43288, i64 %11235
  %11237 = load i16, i16* %11236, align 2, !tbaa !386
  %11238 = insertelement <4 x i16> undef, i16 %11237, i32 0
  %11239 = extractelement <4 x i32> %11233, i32 1
  %11240 = sext i32 %11239 to i64
  %11241 = getelementptr inbounds i16, i16* %input43288, i64 %11240
  %11242 = load i16, i16* %11241, align 2, !tbaa !386
  %11243 = insertelement <4 x i16> %11238, i16 %11242, i32 1
  %11244 = extractelement <4 x i32> %11233, i32 2
  %11245 = sext i32 %11244 to i64
  %11246 = getelementptr inbounds i16, i16* %input43288, i64 %11245
  %11247 = load i16, i16* %11246, align 2, !tbaa !386
  %11248 = insertelement <4 x i16> %11243, i16 %11247, i32 2
  %11249 = extractelement <4 x i32> %11233, i32 3
  %11250 = sext i32 %11249 to i64
  %11251 = getelementptr inbounds i16, i16* %input43288, i64 %11250
  %11252 = load i16, i16* %11251, align 2, !tbaa !386
  %11253 = insertelement <4 x i16> %11248, i16 %11252, i32 3
  %11254 = add nsw i32 %blur_x.s0.x.v2.base.s83, -46
  %11255 = insertelement <4 x i32> undef, i32 %11254, i32 0
  %11256 = shufflevector <4 x i32> %11255, <4 x i32> undef, <4 x i32> zeroinitializer
  %11257 = add nsw <4 x i32> %11256, <i32 0, i32 1, i32 2, i32 3>
  %11258 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %11257, <4 x i32> %90) #11
  %11259 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %11258, <4 x i32> %92) #11
  %11260 = add <4 x i32> %11259, %t359
  %11261 = extractelement <4 x i32> %11260, i32 0
  %11262 = sext i32 %11261 to i64
  %11263 = getelementptr inbounds i16, i16* %input43288, i64 %11262
  %11264 = load i16, i16* %11263, align 2, !tbaa !386
  %11265 = insertelement <4 x i16> undef, i16 %11264, i32 0
  %11266 = extractelement <4 x i32> %11260, i32 1
  %11267 = sext i32 %11266 to i64
  %11268 = getelementptr inbounds i16, i16* %input43288, i64 %11267
  %11269 = load i16, i16* %11268, align 2, !tbaa !386
  %11270 = insertelement <4 x i16> %11265, i16 %11269, i32 1
  %11271 = extractelement <4 x i32> %11260, i32 2
  %11272 = sext i32 %11271 to i64
  %11273 = getelementptr inbounds i16, i16* %input43288, i64 %11272
  %11274 = load i16, i16* %11273, align 2, !tbaa !386
  %11275 = insertelement <4 x i16> %11270, i16 %11274, i32 2
  %11276 = extractelement <4 x i32> %11260, i32 3
  %11277 = sext i32 %11276 to i64
  %11278 = getelementptr inbounds i16, i16* %input43288, i64 %11277
  %11279 = load i16, i16* %11278, align 2, !tbaa !386
  %11280 = insertelement <4 x i16> %11275, i16 %11279, i32 3
  %11281 = add nsw i32 %blur_x.s0.x.v2.base.s83, -42
  %11282 = insertelement <4 x i32> undef, i32 %11281, i32 0
  %11283 = shufflevector <4 x i32> %11282, <4 x i32> undef, <4 x i32> zeroinitializer
  %11284 = add nsw <4 x i32> %11283, <i32 0, i32 1, i32 2, i32 3>
  %11285 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %11284, <4 x i32> %90) #11
  %11286 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %11285, <4 x i32> %92) #11
  %11287 = add <4 x i32> %11286, %t359
  %11288 = extractelement <4 x i32> %11287, i32 0
  %11289 = sext i32 %11288 to i64
  %11290 = getelementptr inbounds i16, i16* %input43288, i64 %11289
  %11291 = load i16, i16* %11290, align 2, !tbaa !386
  %11292 = insertelement <4 x i16> undef, i16 %11291, i32 0
  %11293 = extractelement <4 x i32> %11287, i32 1
  %11294 = sext i32 %11293 to i64
  %11295 = getelementptr inbounds i16, i16* %input43288, i64 %11294
  %11296 = load i16, i16* %11295, align 2, !tbaa !386
  %11297 = insertelement <4 x i16> %11292, i16 %11296, i32 1
  %11298 = extractelement <4 x i32> %11287, i32 2
  %11299 = sext i32 %11298 to i64
  %11300 = getelementptr inbounds i16, i16* %input43288, i64 %11299
  %11301 = load i16, i16* %11300, align 2, !tbaa !386
  %11302 = insertelement <4 x i16> %11297, i16 %11301, i32 2
  %11303 = extractelement <4 x i32> %11287, i32 3
  %11304 = sext i32 %11303 to i64
  %11305 = getelementptr inbounds i16, i16* %input43288, i64 %11304
  %11306 = load i16, i16* %11305, align 2, !tbaa !386
  %11307 = insertelement <4 x i16> %11302, i16 %11306, i32 3
  %11308 = add nsw i32 %blur_x.s0.x.v2.base.s83, -40
  %11309 = insertelement <4 x i32> undef, i32 %11308, i32 0
  %11310 = shufflevector <4 x i32> %11309, <4 x i32> undef, <4 x i32> zeroinitializer
  %11311 = add nsw <4 x i32> %11310, <i32 0, i32 1, i32 2, i32 3>
  %11312 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %11311, <4 x i32> %90) #11
  %11313 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %11312, <4 x i32> %92) #11
  %11314 = add <4 x i32> %11313, %t359
  %11315 = extractelement <4 x i32> %11314, i32 0
  %11316 = sext i32 %11315 to i64
  %11317 = getelementptr inbounds i16, i16* %input43288, i64 %11316
  %11318 = load i16, i16* %11317, align 2, !tbaa !386
  %11319 = insertelement <4 x i16> undef, i16 %11318, i32 0
  %11320 = extractelement <4 x i32> %11314, i32 1
  %11321 = sext i32 %11320 to i64
  %11322 = getelementptr inbounds i16, i16* %input43288, i64 %11321
  %11323 = load i16, i16* %11322, align 2, !tbaa !386
  %11324 = insertelement <4 x i16> %11319, i16 %11323, i32 1
  %11325 = extractelement <4 x i32> %11314, i32 2
  %11326 = sext i32 %11325 to i64
  %11327 = getelementptr inbounds i16, i16* %input43288, i64 %11326
  %11328 = load i16, i16* %11327, align 2, !tbaa !386
  %11329 = insertelement <4 x i16> %11324, i16 %11328, i32 2
  %11330 = extractelement <4 x i32> %11314, i32 3
  %11331 = sext i32 %11330 to i64
  %11332 = getelementptr inbounds i16, i16* %input43288, i64 %11331
  %11333 = load i16, i16* %11332, align 2, !tbaa !386
  %11334 = insertelement <4 x i16> %11329, i16 %11333, i32 3
  %11335 = add nsw i32 %blur_x.s0.x.v2.base.s83, -45
  %11336 = insertelement <4 x i32> undef, i32 %11335, i32 0
  %11337 = shufflevector <4 x i32> %11336, <4 x i32> undef, <4 x i32> zeroinitializer
  %11338 = add nsw <4 x i32> %11337, <i32 0, i32 1, i32 2, i32 3>
  %11339 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %11338, <4 x i32> %90) #11
  %11340 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %11339, <4 x i32> %92) #11
  %11341 = add <4 x i32> %11340, %t359
  %11342 = extractelement <4 x i32> %11341, i32 0
  %11343 = sext i32 %11342 to i64
  %11344 = getelementptr inbounds i16, i16* %input43288, i64 %11343
  %11345 = load i16, i16* %11344, align 2, !tbaa !386
  %11346 = insertelement <4 x i16> undef, i16 %11345, i32 0
  %11347 = extractelement <4 x i32> %11341, i32 1
  %11348 = sext i32 %11347 to i64
  %11349 = getelementptr inbounds i16, i16* %input43288, i64 %11348
  %11350 = load i16, i16* %11349, align 2, !tbaa !386
  %11351 = insertelement <4 x i16> %11346, i16 %11350, i32 1
  %11352 = extractelement <4 x i32> %11341, i32 2
  %11353 = sext i32 %11352 to i64
  %11354 = getelementptr inbounds i16, i16* %input43288, i64 %11353
  %11355 = load i16, i16* %11354, align 2, !tbaa !386
  %11356 = insertelement <4 x i16> %11351, i16 %11355, i32 2
  %11357 = extractelement <4 x i32> %11341, i32 3
  %11358 = sext i32 %11357 to i64
  %11359 = getelementptr inbounds i16, i16* %input43288, i64 %11358
  %11360 = load i16, i16* %11359, align 2, !tbaa !386
  %11361 = insertelement <4 x i16> %11356, i16 %11360, i32 3
  %11362 = add nsw i32 %blur_x.s0.x.v2.base.s83, -41
  %11363 = insertelement <4 x i32> undef, i32 %11362, i32 0
  %11364 = shufflevector <4 x i32> %11363, <4 x i32> undef, <4 x i32> zeroinitializer
  %11365 = add nsw <4 x i32> %11364, <i32 0, i32 1, i32 2, i32 3>
  %11366 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %11365, <4 x i32> %90) #11
  %11367 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %11366, <4 x i32> %92) #11
  %11368 = add <4 x i32> %11367, %t359
  %11369 = extractelement <4 x i32> %11368, i32 0
  %11370 = sext i32 %11369 to i64
  %11371 = getelementptr inbounds i16, i16* %input43288, i64 %11370
  %11372 = load i16, i16* %11371, align 2, !tbaa !386
  %11373 = insertelement <4 x i16> undef, i16 %11372, i32 0
  %11374 = extractelement <4 x i32> %11368, i32 1
  %11375 = sext i32 %11374 to i64
  %11376 = getelementptr inbounds i16, i16* %input43288, i64 %11375
  %11377 = load i16, i16* %11376, align 2, !tbaa !386
  %11378 = insertelement <4 x i16> %11373, i16 %11377, i32 1
  %11379 = extractelement <4 x i32> %11368, i32 2
  %11380 = sext i32 %11379 to i64
  %11381 = getelementptr inbounds i16, i16* %input43288, i64 %11380
  %11382 = load i16, i16* %11381, align 2, !tbaa !386
  %11383 = insertelement <4 x i16> %11378, i16 %11382, i32 2
  %11384 = extractelement <4 x i32> %11368, i32 3
  %11385 = sext i32 %11384 to i64
  %11386 = getelementptr inbounds i16, i16* %input43288, i64 %11385
  %11387 = load i16, i16* %11386, align 2, !tbaa !386
  %11388 = insertelement <4 x i16> %11383, i16 %11387, i32 3
  %11389 = add <4 x i16> %11199, %11101
  %11390 = add <4 x i16> %11389, %11253
  %11391 = add <4 x i16> %11390, %11280
  %11392 = add <4 x i16> %11391, %11361
  %11393 = add <4 x i16> %11253, %11226
  %11394 = add <4 x i16> %11393, %11307
  %11395 = add <4 x i16> %11394, %11334
  %11396 = add <4 x i16> %11395, %11388
  %11397 = shufflevector <4 x i16> %11392, <4 x i16> %11396, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %11398 = zext <8 x i16> %11397 to <8 x i32>
  %11399 = mul nuw <8 x i32> %11398, <i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429>
  %11400 = lshr <8 x i32> %11399, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %11401 = shufflevector <8 x i32> %11400, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %11402 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %11401)
  %11403 = shufflevector <8 x i32> %11400, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %11404 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %11403)
  %11405 = shufflevector <4 x i16> %11402, <4 x i16> %11404, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %11406 = add nsw i32 %blur_x.s0.x.v2.base.s83, -39
  %11407 = insertelement <4 x i32> undef, i32 %11406, i32 0
  %11408 = shufflevector <4 x i32> %11407, <4 x i32> undef, <4 x i32> zeroinitializer
  %11409 = add nsw <4 x i32> %11408, <i32 0, i32 1, i32 2, i32 3>
  %11410 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %11409, <4 x i32> %90) #11
  %11411 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %11410, <4 x i32> %92) #11
  %11412 = add <4 x i32> %11411, %t359
  %11413 = extractelement <4 x i32> %11412, i32 0
  %11414 = sext i32 %11413 to i64
  %11415 = getelementptr inbounds i16, i16* %input43288, i64 %11414
  %11416 = load i16, i16* %11415, align 2, !tbaa !386
  %11417 = insertelement <4 x i16> undef, i16 %11416, i32 0
  %11418 = extractelement <4 x i32> %11412, i32 1
  %11419 = sext i32 %11418 to i64
  %11420 = getelementptr inbounds i16, i16* %input43288, i64 %11419
  %11421 = load i16, i16* %11420, align 2, !tbaa !386
  %11422 = insertelement <4 x i16> %11417, i16 %11421, i32 1
  %11423 = extractelement <4 x i32> %11412, i32 2
  %11424 = sext i32 %11423 to i64
  %11425 = getelementptr inbounds i16, i16* %input43288, i64 %11424
  %11426 = load i16, i16* %11425, align 2, !tbaa !386
  %11427 = insertelement <4 x i16> %11422, i16 %11426, i32 2
  %11428 = extractelement <4 x i32> %11412, i32 3
  %11429 = sext i32 %11428 to i64
  %11430 = getelementptr inbounds i16, i16* %input43288, i64 %11429
  %11431 = load i16, i16* %11430, align 2, !tbaa !386
  %11432 = insertelement <4 x i16> %11427, i16 %11431, i32 3
  %11433 = add nsw i32 %blur_x.s0.x.v2.base.s83, -35
  %11434 = insertelement <4 x i32> undef, i32 %11433, i32 0
  %11435 = shufflevector <4 x i32> %11434, <4 x i32> undef, <4 x i32> zeroinitializer
  %11436 = add nsw <4 x i32> %11435, <i32 0, i32 1, i32 2, i32 3>
  %11437 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %11436, <4 x i32> %90) #11
  %11438 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %11437, <4 x i32> %92) #11
  %11439 = add <4 x i32> %11438, %t359
  %11440 = extractelement <4 x i32> %11439, i32 0
  %11441 = sext i32 %11440 to i64
  %11442 = getelementptr inbounds i16, i16* %input43288, i64 %11441
  %11443 = load i16, i16* %11442, align 2, !tbaa !386
  %11444 = insertelement <4 x i16> undef, i16 %11443, i32 0
  %11445 = extractelement <4 x i32> %11439, i32 1
  %11446 = sext i32 %11445 to i64
  %11447 = getelementptr inbounds i16, i16* %input43288, i64 %11446
  %11448 = load i16, i16* %11447, align 2, !tbaa !386
  %11449 = insertelement <4 x i16> %11444, i16 %11448, i32 1
  %11450 = extractelement <4 x i32> %11439, i32 2
  %11451 = sext i32 %11450 to i64
  %11452 = getelementptr inbounds i16, i16* %input43288, i64 %11451
  %11453 = load i16, i16* %11452, align 2, !tbaa !386
  %11454 = insertelement <4 x i16> %11449, i16 %11453, i32 2
  %11455 = extractelement <4 x i32> %11439, i32 3
  %11456 = sext i32 %11455 to i64
  %11457 = getelementptr inbounds i16, i16* %input43288, i64 %11456
  %11458 = load i16, i16* %11457, align 2, !tbaa !386
  %11459 = insertelement <4 x i16> %11454, i16 %11458, i32 3
  %11460 = add nsw i32 %blur_x.s0.x.v2.base.s83, -36
  %11461 = insertelement <4 x i32> undef, i32 %11460, i32 0
  %11462 = shufflevector <4 x i32> %11461, <4 x i32> undef, <4 x i32> zeroinitializer
  %11463 = add nsw <4 x i32> %11462, <i32 0, i32 1, i32 2, i32 3>
  %11464 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %11463, <4 x i32> %90) #11
  %11465 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %11464, <4 x i32> %92) #11
  %11466 = add <4 x i32> %11465, %t359
  %11467 = extractelement <4 x i32> %11466, i32 0
  %11468 = sext i32 %11467 to i64
  %11469 = getelementptr inbounds i16, i16* %input43288, i64 %11468
  %11470 = load i16, i16* %11469, align 2, !tbaa !386
  %11471 = insertelement <4 x i16> undef, i16 %11470, i32 0
  %11472 = extractelement <4 x i32> %11466, i32 1
  %11473 = sext i32 %11472 to i64
  %11474 = getelementptr inbounds i16, i16* %input43288, i64 %11473
  %11475 = load i16, i16* %11474, align 2, !tbaa !386
  %11476 = insertelement <4 x i16> %11471, i16 %11475, i32 1
  %11477 = extractelement <4 x i32> %11466, i32 2
  %11478 = sext i32 %11477 to i64
  %11479 = getelementptr inbounds i16, i16* %input43288, i64 %11478
  %11480 = load i16, i16* %11479, align 2, !tbaa !386
  %11481 = insertelement <4 x i16> %11476, i16 %11480, i32 2
  %11482 = extractelement <4 x i32> %11466, i32 3
  %11483 = sext i32 %11482 to i64
  %11484 = getelementptr inbounds i16, i16* %input43288, i64 %11483
  %11485 = load i16, i16* %11484, align 2, !tbaa !386
  %11486 = insertelement <4 x i16> %11481, i16 %11485, i32 3
  %11487 = add nsw i32 %blur_x.s0.x.v2.base.s83, -38
  %11488 = insertelement <4 x i32> undef, i32 %11487, i32 0
  %11489 = shufflevector <4 x i32> %11488, <4 x i32> undef, <4 x i32> zeroinitializer
  %11490 = add nsw <4 x i32> %11489, <i32 0, i32 1, i32 2, i32 3>
  %11491 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %11490, <4 x i32> %90) #11
  %11492 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %11491, <4 x i32> %92) #11
  %11493 = add <4 x i32> %11492, %t359
  %11494 = extractelement <4 x i32> %11493, i32 0
  %11495 = sext i32 %11494 to i64
  %11496 = getelementptr inbounds i16, i16* %input43288, i64 %11495
  %11497 = load i16, i16* %11496, align 2, !tbaa !386
  %11498 = insertelement <4 x i16> undef, i16 %11497, i32 0
  %11499 = extractelement <4 x i32> %11493, i32 1
  %11500 = sext i32 %11499 to i64
  %11501 = getelementptr inbounds i16, i16* %input43288, i64 %11500
  %11502 = load i16, i16* %11501, align 2, !tbaa !386
  %11503 = insertelement <4 x i16> %11498, i16 %11502, i32 1
  %11504 = extractelement <4 x i32> %11493, i32 2
  %11505 = sext i32 %11504 to i64
  %11506 = getelementptr inbounds i16, i16* %input43288, i64 %11505
  %11507 = load i16, i16* %11506, align 2, !tbaa !386
  %11508 = insertelement <4 x i16> %11503, i16 %11507, i32 2
  %11509 = extractelement <4 x i32> %11493, i32 3
  %11510 = sext i32 %11509 to i64
  %11511 = getelementptr inbounds i16, i16* %input43288, i64 %11510
  %11512 = load i16, i16* %11511, align 2, !tbaa !386
  %11513 = insertelement <4 x i16> %11508, i16 %11512, i32 3
  %11514 = add nsw i32 %blur_x.s0.x.v2.base.s83, -34
  %11515 = insertelement <4 x i32> undef, i32 %11514, i32 0
  %11516 = shufflevector <4 x i32> %11515, <4 x i32> undef, <4 x i32> zeroinitializer
  %11517 = add nsw <4 x i32> %11516, <i32 0, i32 1, i32 2, i32 3>
  %11518 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %11517, <4 x i32> %90) #11
  %11519 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %11518, <4 x i32> %92) #11
  %11520 = add <4 x i32> %11519, %t359
  %11521 = extractelement <4 x i32> %11520, i32 0
  %11522 = sext i32 %11521 to i64
  %11523 = getelementptr inbounds i16, i16* %input43288, i64 %11522
  %11524 = load i16, i16* %11523, align 2, !tbaa !386
  %11525 = insertelement <4 x i16> undef, i16 %11524, i32 0
  %11526 = extractelement <4 x i32> %11520, i32 1
  %11527 = sext i32 %11526 to i64
  %11528 = getelementptr inbounds i16, i16* %input43288, i64 %11527
  %11529 = load i16, i16* %11528, align 2, !tbaa !386
  %11530 = insertelement <4 x i16> %11525, i16 %11529, i32 1
  %11531 = extractelement <4 x i32> %11520, i32 2
  %11532 = sext i32 %11531 to i64
  %11533 = getelementptr inbounds i16, i16* %input43288, i64 %11532
  %11534 = load i16, i16* %11533, align 2, !tbaa !386
  %11535 = insertelement <4 x i16> %11530, i16 %11534, i32 2
  %11536 = extractelement <4 x i32> %11520, i32 3
  %11537 = sext i32 %11536 to i64
  %11538 = getelementptr inbounds i16, i16* %input43288, i64 %11537
  %11539 = load i16, i16* %11538, align 2, !tbaa !386
  %11540 = insertelement <4 x i16> %11535, i16 %11539, i32 3
  %11541 = add nsw i32 %blur_x.s0.x.v2.base.s83, -32
  %11542 = insertelement <4 x i32> undef, i32 %11541, i32 0
  %11543 = shufflevector <4 x i32> %11542, <4 x i32> undef, <4 x i32> zeroinitializer
  %11544 = add nsw <4 x i32> %11543, <i32 0, i32 1, i32 2, i32 3>
  %11545 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %11544, <4 x i32> %90) #11
  %11546 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %11545, <4 x i32> %92) #11
  %11547 = add <4 x i32> %11546, %t359
  %11548 = extractelement <4 x i32> %11547, i32 0
  %11549 = sext i32 %11548 to i64
  %11550 = getelementptr inbounds i16, i16* %input43288, i64 %11549
  %11551 = load i16, i16* %11550, align 2, !tbaa !386
  %11552 = insertelement <4 x i16> undef, i16 %11551, i32 0
  %11553 = extractelement <4 x i32> %11547, i32 1
  %11554 = sext i32 %11553 to i64
  %11555 = getelementptr inbounds i16, i16* %input43288, i64 %11554
  %11556 = load i16, i16* %11555, align 2, !tbaa !386
  %11557 = insertelement <4 x i16> %11552, i16 %11556, i32 1
  %11558 = extractelement <4 x i32> %11547, i32 2
  %11559 = sext i32 %11558 to i64
  %11560 = getelementptr inbounds i16, i16* %input43288, i64 %11559
  %11561 = load i16, i16* %11560, align 2, !tbaa !386
  %11562 = insertelement <4 x i16> %11557, i16 %11561, i32 2
  %11563 = extractelement <4 x i32> %11547, i32 3
  %11564 = sext i32 %11563 to i64
  %11565 = getelementptr inbounds i16, i16* %input43288, i64 %11564
  %11566 = load i16, i16* %11565, align 2, !tbaa !386
  %11567 = insertelement <4 x i16> %11562, i16 %11566, i32 3
  %11568 = add nsw i32 %blur_x.s0.x.v2.base.s83, -37
  %11569 = insertelement <4 x i32> undef, i32 %11568, i32 0
  %11570 = shufflevector <4 x i32> %11569, <4 x i32> undef, <4 x i32> zeroinitializer
  %11571 = add nsw <4 x i32> %11570, <i32 0, i32 1, i32 2, i32 3>
  %11572 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %11571, <4 x i32> %90) #11
  %11573 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %11572, <4 x i32> %92) #11
  %11574 = add <4 x i32> %11573, %t359
  %11575 = extractelement <4 x i32> %11574, i32 0
  %11576 = sext i32 %11575 to i64
  %11577 = getelementptr inbounds i16, i16* %input43288, i64 %11576
  %11578 = load i16, i16* %11577, align 2, !tbaa !386
  %11579 = insertelement <4 x i16> undef, i16 %11578, i32 0
  %11580 = extractelement <4 x i32> %11574, i32 1
  %11581 = sext i32 %11580 to i64
  %11582 = getelementptr inbounds i16, i16* %input43288, i64 %11581
  %11583 = load i16, i16* %11582, align 2, !tbaa !386
  %11584 = insertelement <4 x i16> %11579, i16 %11583, i32 1
  %11585 = extractelement <4 x i32> %11574, i32 2
  %11586 = sext i32 %11585 to i64
  %11587 = getelementptr inbounds i16, i16* %input43288, i64 %11586
  %11588 = load i16, i16* %11587, align 2, !tbaa !386
  %11589 = insertelement <4 x i16> %11584, i16 %11588, i32 2
  %11590 = extractelement <4 x i32> %11574, i32 3
  %11591 = sext i32 %11590 to i64
  %11592 = getelementptr inbounds i16, i16* %input43288, i64 %11591
  %11593 = load i16, i16* %11592, align 2, !tbaa !386
  %11594 = insertelement <4 x i16> %11589, i16 %11593, i32 3
  %11595 = add nsw i32 %blur_x.s0.x.v2.base.s83, -33
  %11596 = insertelement <4 x i32> undef, i32 %11595, i32 0
  %11597 = shufflevector <4 x i32> %11596, <4 x i32> undef, <4 x i32> zeroinitializer
  %11598 = add nsw <4 x i32> %11597, <i32 0, i32 1, i32 2, i32 3>
  %11599 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %11598, <4 x i32> %90) #11
  %11600 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %11599, <4 x i32> %92) #11
  %11601 = add <4 x i32> %11600, %t359
  %11602 = extractelement <4 x i32> %11601, i32 0
  %11603 = sext i32 %11602 to i64
  %11604 = getelementptr inbounds i16, i16* %input43288, i64 %11603
  %11605 = load i16, i16* %11604, align 2, !tbaa !386
  %11606 = insertelement <4 x i16> undef, i16 %11605, i32 0
  %11607 = extractelement <4 x i32> %11601, i32 1
  %11608 = sext i32 %11607 to i64
  %11609 = getelementptr inbounds i16, i16* %input43288, i64 %11608
  %11610 = load i16, i16* %11609, align 2, !tbaa !386
  %11611 = insertelement <4 x i16> %11606, i16 %11610, i32 1
  %11612 = extractelement <4 x i32> %11601, i32 2
  %11613 = sext i32 %11612 to i64
  %11614 = getelementptr inbounds i16, i16* %input43288, i64 %11613
  %11615 = load i16, i16* %11614, align 2, !tbaa !386
  %11616 = insertelement <4 x i16> %11611, i16 %11615, i32 2
  %11617 = extractelement <4 x i32> %11601, i32 3
  %11618 = sext i32 %11617 to i64
  %11619 = getelementptr inbounds i16, i16* %input43288, i64 %11618
  %11620 = load i16, i16* %11619, align 2, !tbaa !386
  %11621 = insertelement <4 x i16> %11616, i16 %11620, i32 3
  %11622 = add <4 x i16> %11432, %11334
  %11623 = add <4 x i16> %11622, %11486
  %11624 = add <4 x i16> %11623, %11513
  %11625 = add <4 x i16> %11624, %11594
  %11626 = add <4 x i16> %11486, %11459
  %11627 = add <4 x i16> %11626, %11540
  %11628 = add <4 x i16> %11627, %11567
  %11629 = add <4 x i16> %11628, %11621
  %11630 = shufflevector <4 x i16> %11625, <4 x i16> %11629, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %11631 = zext <8 x i16> %11630 to <8 x i32>
  %11632 = mul nuw <8 x i32> %11631, <i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429>
  %11633 = lshr <8 x i32> %11632, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %11634 = shufflevector <8 x i32> %11633, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %11635 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %11634)
  %11636 = shufflevector <8 x i32> %11633, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %11637 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %11636)
  %11638 = shufflevector <4 x i16> %11635, <4 x i16> %11637, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %11639 = add nsw i32 %blur_x.s0.x.v2.base.s83, -31
  %11640 = insertelement <4 x i32> undef, i32 %11639, i32 0
  %11641 = shufflevector <4 x i32> %11640, <4 x i32> undef, <4 x i32> zeroinitializer
  %11642 = add nsw <4 x i32> %11641, <i32 0, i32 1, i32 2, i32 3>
  %11643 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %11642, <4 x i32> %90) #11
  %11644 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %11643, <4 x i32> %92) #11
  %11645 = add <4 x i32> %11644, %t359
  %11646 = extractelement <4 x i32> %11645, i32 0
  %11647 = sext i32 %11646 to i64
  %11648 = getelementptr inbounds i16, i16* %input43288, i64 %11647
  %11649 = load i16, i16* %11648, align 2, !tbaa !386
  %11650 = insertelement <4 x i16> undef, i16 %11649, i32 0
  %11651 = extractelement <4 x i32> %11645, i32 1
  %11652 = sext i32 %11651 to i64
  %11653 = getelementptr inbounds i16, i16* %input43288, i64 %11652
  %11654 = load i16, i16* %11653, align 2, !tbaa !386
  %11655 = insertelement <4 x i16> %11650, i16 %11654, i32 1
  %11656 = extractelement <4 x i32> %11645, i32 2
  %11657 = sext i32 %11656 to i64
  %11658 = getelementptr inbounds i16, i16* %input43288, i64 %11657
  %11659 = load i16, i16* %11658, align 2, !tbaa !386
  %11660 = insertelement <4 x i16> %11655, i16 %11659, i32 2
  %11661 = extractelement <4 x i32> %11645, i32 3
  %11662 = sext i32 %11661 to i64
  %11663 = getelementptr inbounds i16, i16* %input43288, i64 %11662
  %11664 = load i16, i16* %11663, align 2, !tbaa !386
  %11665 = insertelement <4 x i16> %11660, i16 %11664, i32 3
  %11666 = add nsw i32 %blur_x.s0.x.v2.base.s83, -27
  %11667 = insertelement <4 x i32> undef, i32 %11666, i32 0
  %11668 = shufflevector <4 x i32> %11667, <4 x i32> undef, <4 x i32> zeroinitializer
  %11669 = add nsw <4 x i32> %11668, <i32 0, i32 1, i32 2, i32 3>
  %11670 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %11669, <4 x i32> %90) #11
  %11671 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %11670, <4 x i32> %92) #11
  %11672 = add <4 x i32> %11671, %t359
  %11673 = extractelement <4 x i32> %11672, i32 0
  %11674 = sext i32 %11673 to i64
  %11675 = getelementptr inbounds i16, i16* %input43288, i64 %11674
  %11676 = load i16, i16* %11675, align 2, !tbaa !386
  %11677 = insertelement <4 x i16> undef, i16 %11676, i32 0
  %11678 = extractelement <4 x i32> %11672, i32 1
  %11679 = sext i32 %11678 to i64
  %11680 = getelementptr inbounds i16, i16* %input43288, i64 %11679
  %11681 = load i16, i16* %11680, align 2, !tbaa !386
  %11682 = insertelement <4 x i16> %11677, i16 %11681, i32 1
  %11683 = extractelement <4 x i32> %11672, i32 2
  %11684 = sext i32 %11683 to i64
  %11685 = getelementptr inbounds i16, i16* %input43288, i64 %11684
  %11686 = load i16, i16* %11685, align 2, !tbaa !386
  %11687 = insertelement <4 x i16> %11682, i16 %11686, i32 2
  %11688 = extractelement <4 x i32> %11672, i32 3
  %11689 = sext i32 %11688 to i64
  %11690 = getelementptr inbounds i16, i16* %input43288, i64 %11689
  %11691 = load i16, i16* %11690, align 2, !tbaa !386
  %11692 = insertelement <4 x i16> %11687, i16 %11691, i32 3
  %11693 = add nsw i32 %blur_x.s0.x.v2.base.s83, -28
  %11694 = insertelement <4 x i32> undef, i32 %11693, i32 0
  %11695 = shufflevector <4 x i32> %11694, <4 x i32> undef, <4 x i32> zeroinitializer
  %11696 = add nsw <4 x i32> %11695, <i32 0, i32 1, i32 2, i32 3>
  %11697 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %11696, <4 x i32> %90) #11
  %11698 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %11697, <4 x i32> %92) #11
  %11699 = add <4 x i32> %11698, %t359
  %11700 = extractelement <4 x i32> %11699, i32 0
  %11701 = sext i32 %11700 to i64
  %11702 = getelementptr inbounds i16, i16* %input43288, i64 %11701
  %11703 = load i16, i16* %11702, align 2, !tbaa !386
  %11704 = insertelement <4 x i16> undef, i16 %11703, i32 0
  %11705 = extractelement <4 x i32> %11699, i32 1
  %11706 = sext i32 %11705 to i64
  %11707 = getelementptr inbounds i16, i16* %input43288, i64 %11706
  %11708 = load i16, i16* %11707, align 2, !tbaa !386
  %11709 = insertelement <4 x i16> %11704, i16 %11708, i32 1
  %11710 = extractelement <4 x i32> %11699, i32 2
  %11711 = sext i32 %11710 to i64
  %11712 = getelementptr inbounds i16, i16* %input43288, i64 %11711
  %11713 = load i16, i16* %11712, align 2, !tbaa !386
  %11714 = insertelement <4 x i16> %11709, i16 %11713, i32 2
  %11715 = extractelement <4 x i32> %11699, i32 3
  %11716 = sext i32 %11715 to i64
  %11717 = getelementptr inbounds i16, i16* %input43288, i64 %11716
  %11718 = load i16, i16* %11717, align 2, !tbaa !386
  %11719 = insertelement <4 x i16> %11714, i16 %11718, i32 3
  %11720 = add nsw i32 %blur_x.s0.x.v2.base.s83, -30
  %11721 = insertelement <4 x i32> undef, i32 %11720, i32 0
  %11722 = shufflevector <4 x i32> %11721, <4 x i32> undef, <4 x i32> zeroinitializer
  %11723 = add nsw <4 x i32> %11722, <i32 0, i32 1, i32 2, i32 3>
  %11724 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %11723, <4 x i32> %90) #11
  %11725 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %11724, <4 x i32> %92) #11
  %11726 = add <4 x i32> %11725, %t359
  %11727 = extractelement <4 x i32> %11726, i32 0
  %11728 = sext i32 %11727 to i64
  %11729 = getelementptr inbounds i16, i16* %input43288, i64 %11728
  %11730 = load i16, i16* %11729, align 2, !tbaa !386
  %11731 = insertelement <4 x i16> undef, i16 %11730, i32 0
  %11732 = extractelement <4 x i32> %11726, i32 1
  %11733 = sext i32 %11732 to i64
  %11734 = getelementptr inbounds i16, i16* %input43288, i64 %11733
  %11735 = load i16, i16* %11734, align 2, !tbaa !386
  %11736 = insertelement <4 x i16> %11731, i16 %11735, i32 1
  %11737 = extractelement <4 x i32> %11726, i32 2
  %11738 = sext i32 %11737 to i64
  %11739 = getelementptr inbounds i16, i16* %input43288, i64 %11738
  %11740 = load i16, i16* %11739, align 2, !tbaa !386
  %11741 = insertelement <4 x i16> %11736, i16 %11740, i32 2
  %11742 = extractelement <4 x i32> %11726, i32 3
  %11743 = sext i32 %11742 to i64
  %11744 = getelementptr inbounds i16, i16* %input43288, i64 %11743
  %11745 = load i16, i16* %11744, align 2, !tbaa !386
  %11746 = insertelement <4 x i16> %11741, i16 %11745, i32 3
  %11747 = add nsw i32 %blur_x.s0.x.v2.base.s83, -26
  %11748 = insertelement <4 x i32> undef, i32 %11747, i32 0
  %11749 = shufflevector <4 x i32> %11748, <4 x i32> undef, <4 x i32> zeroinitializer
  %11750 = add nsw <4 x i32> %11749, <i32 0, i32 1, i32 2, i32 3>
  %11751 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %11750, <4 x i32> %90) #11
  %11752 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %11751, <4 x i32> %92) #11
  %11753 = add <4 x i32> %11752, %t359
  %11754 = extractelement <4 x i32> %11753, i32 0
  %11755 = sext i32 %11754 to i64
  %11756 = getelementptr inbounds i16, i16* %input43288, i64 %11755
  %11757 = load i16, i16* %11756, align 2, !tbaa !386
  %11758 = insertelement <4 x i16> undef, i16 %11757, i32 0
  %11759 = extractelement <4 x i32> %11753, i32 1
  %11760 = sext i32 %11759 to i64
  %11761 = getelementptr inbounds i16, i16* %input43288, i64 %11760
  %11762 = load i16, i16* %11761, align 2, !tbaa !386
  %11763 = insertelement <4 x i16> %11758, i16 %11762, i32 1
  %11764 = extractelement <4 x i32> %11753, i32 2
  %11765 = sext i32 %11764 to i64
  %11766 = getelementptr inbounds i16, i16* %input43288, i64 %11765
  %11767 = load i16, i16* %11766, align 2, !tbaa !386
  %11768 = insertelement <4 x i16> %11763, i16 %11767, i32 2
  %11769 = extractelement <4 x i32> %11753, i32 3
  %11770 = sext i32 %11769 to i64
  %11771 = getelementptr inbounds i16, i16* %input43288, i64 %11770
  %11772 = load i16, i16* %11771, align 2, !tbaa !386
  %11773 = insertelement <4 x i16> %11768, i16 %11772, i32 3
  %11774 = add nsw i32 %blur_x.s0.x.v2.base.s83, -24
  %11775 = insertelement <4 x i32> undef, i32 %11774, i32 0
  %11776 = shufflevector <4 x i32> %11775, <4 x i32> undef, <4 x i32> zeroinitializer
  %11777 = add nsw <4 x i32> %11776, <i32 0, i32 1, i32 2, i32 3>
  %11778 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %11777, <4 x i32> %90) #11
  %11779 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %11778, <4 x i32> %92) #11
  %11780 = add <4 x i32> %11779, %t359
  %11781 = extractelement <4 x i32> %11780, i32 0
  %11782 = sext i32 %11781 to i64
  %11783 = getelementptr inbounds i16, i16* %input43288, i64 %11782
  %11784 = load i16, i16* %11783, align 2, !tbaa !386
  %11785 = insertelement <4 x i16> undef, i16 %11784, i32 0
  %11786 = extractelement <4 x i32> %11780, i32 1
  %11787 = sext i32 %11786 to i64
  %11788 = getelementptr inbounds i16, i16* %input43288, i64 %11787
  %11789 = load i16, i16* %11788, align 2, !tbaa !386
  %11790 = insertelement <4 x i16> %11785, i16 %11789, i32 1
  %11791 = extractelement <4 x i32> %11780, i32 2
  %11792 = sext i32 %11791 to i64
  %11793 = getelementptr inbounds i16, i16* %input43288, i64 %11792
  %11794 = load i16, i16* %11793, align 2, !tbaa !386
  %11795 = insertelement <4 x i16> %11790, i16 %11794, i32 2
  %11796 = extractelement <4 x i32> %11780, i32 3
  %11797 = sext i32 %11796 to i64
  %11798 = getelementptr inbounds i16, i16* %input43288, i64 %11797
  %11799 = load i16, i16* %11798, align 2, !tbaa !386
  %11800 = insertelement <4 x i16> %11795, i16 %11799, i32 3
  %11801 = add nsw i32 %blur_x.s0.x.v2.base.s83, -29
  %11802 = insertelement <4 x i32> undef, i32 %11801, i32 0
  %11803 = shufflevector <4 x i32> %11802, <4 x i32> undef, <4 x i32> zeroinitializer
  %11804 = add nsw <4 x i32> %11803, <i32 0, i32 1, i32 2, i32 3>
  %11805 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %11804, <4 x i32> %90) #11
  %11806 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %11805, <4 x i32> %92) #11
  %11807 = add <4 x i32> %11806, %t359
  %11808 = extractelement <4 x i32> %11807, i32 0
  %11809 = sext i32 %11808 to i64
  %11810 = getelementptr inbounds i16, i16* %input43288, i64 %11809
  %11811 = load i16, i16* %11810, align 2, !tbaa !386
  %11812 = insertelement <4 x i16> undef, i16 %11811, i32 0
  %11813 = extractelement <4 x i32> %11807, i32 1
  %11814 = sext i32 %11813 to i64
  %11815 = getelementptr inbounds i16, i16* %input43288, i64 %11814
  %11816 = load i16, i16* %11815, align 2, !tbaa !386
  %11817 = insertelement <4 x i16> %11812, i16 %11816, i32 1
  %11818 = extractelement <4 x i32> %11807, i32 2
  %11819 = sext i32 %11818 to i64
  %11820 = getelementptr inbounds i16, i16* %input43288, i64 %11819
  %11821 = load i16, i16* %11820, align 2, !tbaa !386
  %11822 = insertelement <4 x i16> %11817, i16 %11821, i32 2
  %11823 = extractelement <4 x i32> %11807, i32 3
  %11824 = sext i32 %11823 to i64
  %11825 = getelementptr inbounds i16, i16* %input43288, i64 %11824
  %11826 = load i16, i16* %11825, align 2, !tbaa !386
  %11827 = insertelement <4 x i16> %11822, i16 %11826, i32 3
  %11828 = add nsw i32 %blur_x.s0.x.v2.base.s83, -25
  %11829 = insertelement <4 x i32> undef, i32 %11828, i32 0
  %11830 = shufflevector <4 x i32> %11829, <4 x i32> undef, <4 x i32> zeroinitializer
  %11831 = add nsw <4 x i32> %11830, <i32 0, i32 1, i32 2, i32 3>
  %11832 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %11831, <4 x i32> %90) #11
  %11833 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %11832, <4 x i32> %92) #11
  %11834 = add <4 x i32> %11833, %t359
  %11835 = extractelement <4 x i32> %11834, i32 0
  %11836 = sext i32 %11835 to i64
  %11837 = getelementptr inbounds i16, i16* %input43288, i64 %11836
  %11838 = load i16, i16* %11837, align 2, !tbaa !386
  %11839 = insertelement <4 x i16> undef, i16 %11838, i32 0
  %11840 = extractelement <4 x i32> %11834, i32 1
  %11841 = sext i32 %11840 to i64
  %11842 = getelementptr inbounds i16, i16* %input43288, i64 %11841
  %11843 = load i16, i16* %11842, align 2, !tbaa !386
  %11844 = insertelement <4 x i16> %11839, i16 %11843, i32 1
  %11845 = extractelement <4 x i32> %11834, i32 2
  %11846 = sext i32 %11845 to i64
  %11847 = getelementptr inbounds i16, i16* %input43288, i64 %11846
  %11848 = load i16, i16* %11847, align 2, !tbaa !386
  %11849 = insertelement <4 x i16> %11844, i16 %11848, i32 2
  %11850 = extractelement <4 x i32> %11834, i32 3
  %11851 = sext i32 %11850 to i64
  %11852 = getelementptr inbounds i16, i16* %input43288, i64 %11851
  %11853 = load i16, i16* %11852, align 2, !tbaa !386
  %11854 = insertelement <4 x i16> %11849, i16 %11853, i32 3
  %11855 = add <4 x i16> %11665, %11567
  %11856 = add <4 x i16> %11855, %11719
  %11857 = add <4 x i16> %11856, %11746
  %11858 = add <4 x i16> %11857, %11827
  %11859 = add <4 x i16> %11719, %11692
  %11860 = add <4 x i16> %11859, %11773
  %11861 = add <4 x i16> %11860, %11800
  %11862 = add <4 x i16> %11861, %11854
  %11863 = shufflevector <4 x i16> %11858, <4 x i16> %11862, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %11864 = zext <8 x i16> %11863 to <8 x i32>
  %11865 = mul nuw <8 x i32> %11864, <i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429>
  %11866 = lshr <8 x i32> %11865, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %11867 = shufflevector <8 x i32> %11866, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %11868 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %11867)
  %11869 = shufflevector <8 x i32> %11866, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %11870 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %11869)
  %11871 = shufflevector <4 x i16> %11868, <4 x i16> %11870, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %11872 = add nsw i32 %blur_x.s0.x.v2.base.s83, -23
  %11873 = insertelement <4 x i32> undef, i32 %11872, i32 0
  %11874 = shufflevector <4 x i32> %11873, <4 x i32> undef, <4 x i32> zeroinitializer
  %11875 = add nsw <4 x i32> %11874, <i32 0, i32 1, i32 2, i32 3>
  %11876 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %11875, <4 x i32> %90) #11
  %11877 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %11876, <4 x i32> %92) #11
  %11878 = add <4 x i32> %11877, %t359
  %11879 = extractelement <4 x i32> %11878, i32 0
  %11880 = sext i32 %11879 to i64
  %11881 = getelementptr inbounds i16, i16* %input43288, i64 %11880
  %11882 = load i16, i16* %11881, align 2, !tbaa !386
  %11883 = insertelement <4 x i16> undef, i16 %11882, i32 0
  %11884 = extractelement <4 x i32> %11878, i32 1
  %11885 = sext i32 %11884 to i64
  %11886 = getelementptr inbounds i16, i16* %input43288, i64 %11885
  %11887 = load i16, i16* %11886, align 2, !tbaa !386
  %11888 = insertelement <4 x i16> %11883, i16 %11887, i32 1
  %11889 = extractelement <4 x i32> %11878, i32 2
  %11890 = sext i32 %11889 to i64
  %11891 = getelementptr inbounds i16, i16* %input43288, i64 %11890
  %11892 = load i16, i16* %11891, align 2, !tbaa !386
  %11893 = insertelement <4 x i16> %11888, i16 %11892, i32 2
  %11894 = extractelement <4 x i32> %11878, i32 3
  %11895 = sext i32 %11894 to i64
  %11896 = getelementptr inbounds i16, i16* %input43288, i64 %11895
  %11897 = load i16, i16* %11896, align 2, !tbaa !386
  %11898 = insertelement <4 x i16> %11893, i16 %11897, i32 3
  %11899 = add nsw i32 %blur_x.s0.x.v2.base.s83, -19
  %11900 = insertelement <4 x i32> undef, i32 %11899, i32 0
  %11901 = shufflevector <4 x i32> %11900, <4 x i32> undef, <4 x i32> zeroinitializer
  %11902 = add nsw <4 x i32> %11901, <i32 0, i32 1, i32 2, i32 3>
  %11903 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %11902, <4 x i32> %90) #11
  %11904 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %11903, <4 x i32> %92) #11
  %11905 = add <4 x i32> %11904, %t359
  %11906 = extractelement <4 x i32> %11905, i32 0
  %11907 = sext i32 %11906 to i64
  %11908 = getelementptr inbounds i16, i16* %input43288, i64 %11907
  %11909 = load i16, i16* %11908, align 2, !tbaa !386
  %11910 = insertelement <4 x i16> undef, i16 %11909, i32 0
  %11911 = extractelement <4 x i32> %11905, i32 1
  %11912 = sext i32 %11911 to i64
  %11913 = getelementptr inbounds i16, i16* %input43288, i64 %11912
  %11914 = load i16, i16* %11913, align 2, !tbaa !386
  %11915 = insertelement <4 x i16> %11910, i16 %11914, i32 1
  %11916 = extractelement <4 x i32> %11905, i32 2
  %11917 = sext i32 %11916 to i64
  %11918 = getelementptr inbounds i16, i16* %input43288, i64 %11917
  %11919 = load i16, i16* %11918, align 2, !tbaa !386
  %11920 = insertelement <4 x i16> %11915, i16 %11919, i32 2
  %11921 = extractelement <4 x i32> %11905, i32 3
  %11922 = sext i32 %11921 to i64
  %11923 = getelementptr inbounds i16, i16* %input43288, i64 %11922
  %11924 = load i16, i16* %11923, align 2, !tbaa !386
  %11925 = insertelement <4 x i16> %11920, i16 %11924, i32 3
  %11926 = add nsw i32 %blur_x.s0.x.v2.base.s83, -20
  %11927 = insertelement <4 x i32> undef, i32 %11926, i32 0
  %11928 = shufflevector <4 x i32> %11927, <4 x i32> undef, <4 x i32> zeroinitializer
  %11929 = add nsw <4 x i32> %11928, <i32 0, i32 1, i32 2, i32 3>
  %11930 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %11929, <4 x i32> %90) #11
  %11931 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %11930, <4 x i32> %92) #11
  %11932 = add <4 x i32> %11931, %t359
  %11933 = extractelement <4 x i32> %11932, i32 0
  %11934 = sext i32 %11933 to i64
  %11935 = getelementptr inbounds i16, i16* %input43288, i64 %11934
  %11936 = load i16, i16* %11935, align 2, !tbaa !386
  %11937 = insertelement <4 x i16> undef, i16 %11936, i32 0
  %11938 = extractelement <4 x i32> %11932, i32 1
  %11939 = sext i32 %11938 to i64
  %11940 = getelementptr inbounds i16, i16* %input43288, i64 %11939
  %11941 = load i16, i16* %11940, align 2, !tbaa !386
  %11942 = insertelement <4 x i16> %11937, i16 %11941, i32 1
  %11943 = extractelement <4 x i32> %11932, i32 2
  %11944 = sext i32 %11943 to i64
  %11945 = getelementptr inbounds i16, i16* %input43288, i64 %11944
  %11946 = load i16, i16* %11945, align 2, !tbaa !386
  %11947 = insertelement <4 x i16> %11942, i16 %11946, i32 2
  %11948 = extractelement <4 x i32> %11932, i32 3
  %11949 = sext i32 %11948 to i64
  %11950 = getelementptr inbounds i16, i16* %input43288, i64 %11949
  %11951 = load i16, i16* %11950, align 2, !tbaa !386
  %11952 = insertelement <4 x i16> %11947, i16 %11951, i32 3
  %11953 = add nsw i32 %blur_x.s0.x.v2.base.s83, -22
  %11954 = insertelement <4 x i32> undef, i32 %11953, i32 0
  %11955 = shufflevector <4 x i32> %11954, <4 x i32> undef, <4 x i32> zeroinitializer
  %11956 = add nsw <4 x i32> %11955, <i32 0, i32 1, i32 2, i32 3>
  %11957 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %11956, <4 x i32> %90) #11
  %11958 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %11957, <4 x i32> %92) #11
  %11959 = add <4 x i32> %11958, %t359
  %11960 = extractelement <4 x i32> %11959, i32 0
  %11961 = sext i32 %11960 to i64
  %11962 = getelementptr inbounds i16, i16* %input43288, i64 %11961
  %11963 = load i16, i16* %11962, align 2, !tbaa !386
  %11964 = insertelement <4 x i16> undef, i16 %11963, i32 0
  %11965 = extractelement <4 x i32> %11959, i32 1
  %11966 = sext i32 %11965 to i64
  %11967 = getelementptr inbounds i16, i16* %input43288, i64 %11966
  %11968 = load i16, i16* %11967, align 2, !tbaa !386
  %11969 = insertelement <4 x i16> %11964, i16 %11968, i32 1
  %11970 = extractelement <4 x i32> %11959, i32 2
  %11971 = sext i32 %11970 to i64
  %11972 = getelementptr inbounds i16, i16* %input43288, i64 %11971
  %11973 = load i16, i16* %11972, align 2, !tbaa !386
  %11974 = insertelement <4 x i16> %11969, i16 %11973, i32 2
  %11975 = extractelement <4 x i32> %11959, i32 3
  %11976 = sext i32 %11975 to i64
  %11977 = getelementptr inbounds i16, i16* %input43288, i64 %11976
  %11978 = load i16, i16* %11977, align 2, !tbaa !386
  %11979 = insertelement <4 x i16> %11974, i16 %11978, i32 3
  %11980 = add nsw i32 %blur_x.s0.x.v2.base.s83, -18
  %11981 = insertelement <4 x i32> undef, i32 %11980, i32 0
  %11982 = shufflevector <4 x i32> %11981, <4 x i32> undef, <4 x i32> zeroinitializer
  %11983 = add nsw <4 x i32> %11982, <i32 0, i32 1, i32 2, i32 3>
  %11984 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %11983, <4 x i32> %90) #11
  %11985 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %11984, <4 x i32> %92) #11
  %11986 = add <4 x i32> %11985, %t359
  %11987 = extractelement <4 x i32> %11986, i32 0
  %11988 = sext i32 %11987 to i64
  %11989 = getelementptr inbounds i16, i16* %input43288, i64 %11988
  %11990 = load i16, i16* %11989, align 2, !tbaa !386
  %11991 = insertelement <4 x i16> undef, i16 %11990, i32 0
  %11992 = extractelement <4 x i32> %11986, i32 1
  %11993 = sext i32 %11992 to i64
  %11994 = getelementptr inbounds i16, i16* %input43288, i64 %11993
  %11995 = load i16, i16* %11994, align 2, !tbaa !386
  %11996 = insertelement <4 x i16> %11991, i16 %11995, i32 1
  %11997 = extractelement <4 x i32> %11986, i32 2
  %11998 = sext i32 %11997 to i64
  %11999 = getelementptr inbounds i16, i16* %input43288, i64 %11998
  %12000 = load i16, i16* %11999, align 2, !tbaa !386
  %12001 = insertelement <4 x i16> %11996, i16 %12000, i32 2
  %12002 = extractelement <4 x i32> %11986, i32 3
  %12003 = sext i32 %12002 to i64
  %12004 = getelementptr inbounds i16, i16* %input43288, i64 %12003
  %12005 = load i16, i16* %12004, align 2, !tbaa !386
  %12006 = insertelement <4 x i16> %12001, i16 %12005, i32 3
  %12007 = add nsw i32 %blur_x.s0.x.v2.base.s83, -16
  %12008 = insertelement <4 x i32> undef, i32 %12007, i32 0
  %12009 = shufflevector <4 x i32> %12008, <4 x i32> undef, <4 x i32> zeroinitializer
  %12010 = add nsw <4 x i32> %12009, <i32 0, i32 1, i32 2, i32 3>
  %12011 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12010, <4 x i32> %90) #11
  %12012 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12011, <4 x i32> %92) #11
  %12013 = add <4 x i32> %12012, %t359
  %12014 = extractelement <4 x i32> %12013, i32 0
  %12015 = sext i32 %12014 to i64
  %12016 = getelementptr inbounds i16, i16* %input43288, i64 %12015
  %12017 = load i16, i16* %12016, align 2, !tbaa !386
  %12018 = insertelement <4 x i16> undef, i16 %12017, i32 0
  %12019 = extractelement <4 x i32> %12013, i32 1
  %12020 = sext i32 %12019 to i64
  %12021 = getelementptr inbounds i16, i16* %input43288, i64 %12020
  %12022 = load i16, i16* %12021, align 2, !tbaa !386
  %12023 = insertelement <4 x i16> %12018, i16 %12022, i32 1
  %12024 = extractelement <4 x i32> %12013, i32 2
  %12025 = sext i32 %12024 to i64
  %12026 = getelementptr inbounds i16, i16* %input43288, i64 %12025
  %12027 = load i16, i16* %12026, align 2, !tbaa !386
  %12028 = insertelement <4 x i16> %12023, i16 %12027, i32 2
  %12029 = extractelement <4 x i32> %12013, i32 3
  %12030 = sext i32 %12029 to i64
  %12031 = getelementptr inbounds i16, i16* %input43288, i64 %12030
  %12032 = load i16, i16* %12031, align 2, !tbaa !386
  %12033 = insertelement <4 x i16> %12028, i16 %12032, i32 3
  %12034 = add nsw i32 %blur_x.s0.x.v2.base.s83, -21
  %12035 = insertelement <4 x i32> undef, i32 %12034, i32 0
  %12036 = shufflevector <4 x i32> %12035, <4 x i32> undef, <4 x i32> zeroinitializer
  %12037 = add nsw <4 x i32> %12036, <i32 0, i32 1, i32 2, i32 3>
  %12038 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12037, <4 x i32> %90) #11
  %12039 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12038, <4 x i32> %92) #11
  %12040 = add <4 x i32> %12039, %t359
  %12041 = extractelement <4 x i32> %12040, i32 0
  %12042 = sext i32 %12041 to i64
  %12043 = getelementptr inbounds i16, i16* %input43288, i64 %12042
  %12044 = load i16, i16* %12043, align 2, !tbaa !386
  %12045 = insertelement <4 x i16> undef, i16 %12044, i32 0
  %12046 = extractelement <4 x i32> %12040, i32 1
  %12047 = sext i32 %12046 to i64
  %12048 = getelementptr inbounds i16, i16* %input43288, i64 %12047
  %12049 = load i16, i16* %12048, align 2, !tbaa !386
  %12050 = insertelement <4 x i16> %12045, i16 %12049, i32 1
  %12051 = extractelement <4 x i32> %12040, i32 2
  %12052 = sext i32 %12051 to i64
  %12053 = getelementptr inbounds i16, i16* %input43288, i64 %12052
  %12054 = load i16, i16* %12053, align 2, !tbaa !386
  %12055 = insertelement <4 x i16> %12050, i16 %12054, i32 2
  %12056 = extractelement <4 x i32> %12040, i32 3
  %12057 = sext i32 %12056 to i64
  %12058 = getelementptr inbounds i16, i16* %input43288, i64 %12057
  %12059 = load i16, i16* %12058, align 2, !tbaa !386
  %12060 = insertelement <4 x i16> %12055, i16 %12059, i32 3
  %12061 = add nsw i32 %blur_x.s0.x.v2.base.s83, -17
  %12062 = insertelement <4 x i32> undef, i32 %12061, i32 0
  %12063 = shufflevector <4 x i32> %12062, <4 x i32> undef, <4 x i32> zeroinitializer
  %12064 = add nsw <4 x i32> %12063, <i32 0, i32 1, i32 2, i32 3>
  %12065 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12064, <4 x i32> %90) #11
  %12066 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12065, <4 x i32> %92) #11
  %12067 = add <4 x i32> %12066, %t359
  %12068 = extractelement <4 x i32> %12067, i32 0
  %12069 = sext i32 %12068 to i64
  %12070 = getelementptr inbounds i16, i16* %input43288, i64 %12069
  %12071 = load i16, i16* %12070, align 2, !tbaa !386
  %12072 = insertelement <4 x i16> undef, i16 %12071, i32 0
  %12073 = extractelement <4 x i32> %12067, i32 1
  %12074 = sext i32 %12073 to i64
  %12075 = getelementptr inbounds i16, i16* %input43288, i64 %12074
  %12076 = load i16, i16* %12075, align 2, !tbaa !386
  %12077 = insertelement <4 x i16> %12072, i16 %12076, i32 1
  %12078 = extractelement <4 x i32> %12067, i32 2
  %12079 = sext i32 %12078 to i64
  %12080 = getelementptr inbounds i16, i16* %input43288, i64 %12079
  %12081 = load i16, i16* %12080, align 2, !tbaa !386
  %12082 = insertelement <4 x i16> %12077, i16 %12081, i32 2
  %12083 = extractelement <4 x i32> %12067, i32 3
  %12084 = sext i32 %12083 to i64
  %12085 = getelementptr inbounds i16, i16* %input43288, i64 %12084
  %12086 = load i16, i16* %12085, align 2, !tbaa !386
  %12087 = insertelement <4 x i16> %12082, i16 %12086, i32 3
  %12088 = add <4 x i16> %11898, %11800
  %12089 = add <4 x i16> %12088, %11952
  %12090 = add <4 x i16> %12089, %11979
  %12091 = add <4 x i16> %12090, %12060
  %12092 = add <4 x i16> %11952, %11925
  %12093 = add <4 x i16> %12092, %12006
  %12094 = add <4 x i16> %12093, %12033
  %12095 = add <4 x i16> %12094, %12087
  %12096 = shufflevector <4 x i16> %12091, <4 x i16> %12095, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %12097 = zext <8 x i16> %12096 to <8 x i32>
  %12098 = mul nuw <8 x i32> %12097, <i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429>
  %12099 = lshr <8 x i32> %12098, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %12100 = shufflevector <8 x i32> %12099, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %12101 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %12100)
  %12102 = shufflevector <8 x i32> %12099, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %12103 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %12102)
  %12104 = shufflevector <4 x i16> %12101, <4 x i16> %12103, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %12105 = add nsw i32 %blur_x.s0.x.v2.base.s83, -15
  %12106 = insertelement <4 x i32> undef, i32 %12105, i32 0
  %12107 = shufflevector <4 x i32> %12106, <4 x i32> undef, <4 x i32> zeroinitializer
  %12108 = add nsw <4 x i32> %12107, <i32 0, i32 1, i32 2, i32 3>
  %12109 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12108, <4 x i32> %90) #11
  %12110 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12109, <4 x i32> %92) #11
  %12111 = add <4 x i32> %12110, %t359
  %12112 = extractelement <4 x i32> %12111, i32 0
  %12113 = sext i32 %12112 to i64
  %12114 = getelementptr inbounds i16, i16* %input43288, i64 %12113
  %12115 = load i16, i16* %12114, align 2, !tbaa !386
  %12116 = insertelement <4 x i16> undef, i16 %12115, i32 0
  %12117 = extractelement <4 x i32> %12111, i32 1
  %12118 = sext i32 %12117 to i64
  %12119 = getelementptr inbounds i16, i16* %input43288, i64 %12118
  %12120 = load i16, i16* %12119, align 2, !tbaa !386
  %12121 = insertelement <4 x i16> %12116, i16 %12120, i32 1
  %12122 = extractelement <4 x i32> %12111, i32 2
  %12123 = sext i32 %12122 to i64
  %12124 = getelementptr inbounds i16, i16* %input43288, i64 %12123
  %12125 = load i16, i16* %12124, align 2, !tbaa !386
  %12126 = insertelement <4 x i16> %12121, i16 %12125, i32 2
  %12127 = extractelement <4 x i32> %12111, i32 3
  %12128 = sext i32 %12127 to i64
  %12129 = getelementptr inbounds i16, i16* %input43288, i64 %12128
  %12130 = load i16, i16* %12129, align 2, !tbaa !386
  %12131 = insertelement <4 x i16> %12126, i16 %12130, i32 3
  %12132 = add nsw i32 %blur_x.s0.x.v2.base.s83, -11
  %12133 = insertelement <4 x i32> undef, i32 %12132, i32 0
  %12134 = shufflevector <4 x i32> %12133, <4 x i32> undef, <4 x i32> zeroinitializer
  %12135 = add nsw <4 x i32> %12134, <i32 0, i32 1, i32 2, i32 3>
  %12136 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12135, <4 x i32> %90) #11
  %12137 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12136, <4 x i32> %92) #11
  %12138 = add <4 x i32> %12137, %t359
  %12139 = extractelement <4 x i32> %12138, i32 0
  %12140 = sext i32 %12139 to i64
  %12141 = getelementptr inbounds i16, i16* %input43288, i64 %12140
  %12142 = load i16, i16* %12141, align 2, !tbaa !386
  %12143 = insertelement <4 x i16> undef, i16 %12142, i32 0
  %12144 = extractelement <4 x i32> %12138, i32 1
  %12145 = sext i32 %12144 to i64
  %12146 = getelementptr inbounds i16, i16* %input43288, i64 %12145
  %12147 = load i16, i16* %12146, align 2, !tbaa !386
  %12148 = insertelement <4 x i16> %12143, i16 %12147, i32 1
  %12149 = extractelement <4 x i32> %12138, i32 2
  %12150 = sext i32 %12149 to i64
  %12151 = getelementptr inbounds i16, i16* %input43288, i64 %12150
  %12152 = load i16, i16* %12151, align 2, !tbaa !386
  %12153 = insertelement <4 x i16> %12148, i16 %12152, i32 2
  %12154 = extractelement <4 x i32> %12138, i32 3
  %12155 = sext i32 %12154 to i64
  %12156 = getelementptr inbounds i16, i16* %input43288, i64 %12155
  %12157 = load i16, i16* %12156, align 2, !tbaa !386
  %12158 = insertelement <4 x i16> %12153, i16 %12157, i32 3
  %12159 = add nsw i32 %blur_x.s0.x.v2.base.s83, -12
  %12160 = insertelement <4 x i32> undef, i32 %12159, i32 0
  %12161 = shufflevector <4 x i32> %12160, <4 x i32> undef, <4 x i32> zeroinitializer
  %12162 = add nsw <4 x i32> %12161, <i32 0, i32 1, i32 2, i32 3>
  %12163 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12162, <4 x i32> %90) #11
  %12164 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12163, <4 x i32> %92) #11
  %12165 = add <4 x i32> %12164, %t359
  %12166 = extractelement <4 x i32> %12165, i32 0
  %12167 = sext i32 %12166 to i64
  %12168 = getelementptr inbounds i16, i16* %input43288, i64 %12167
  %12169 = load i16, i16* %12168, align 2, !tbaa !386
  %12170 = insertelement <4 x i16> undef, i16 %12169, i32 0
  %12171 = extractelement <4 x i32> %12165, i32 1
  %12172 = sext i32 %12171 to i64
  %12173 = getelementptr inbounds i16, i16* %input43288, i64 %12172
  %12174 = load i16, i16* %12173, align 2, !tbaa !386
  %12175 = insertelement <4 x i16> %12170, i16 %12174, i32 1
  %12176 = extractelement <4 x i32> %12165, i32 2
  %12177 = sext i32 %12176 to i64
  %12178 = getelementptr inbounds i16, i16* %input43288, i64 %12177
  %12179 = load i16, i16* %12178, align 2, !tbaa !386
  %12180 = insertelement <4 x i16> %12175, i16 %12179, i32 2
  %12181 = extractelement <4 x i32> %12165, i32 3
  %12182 = sext i32 %12181 to i64
  %12183 = getelementptr inbounds i16, i16* %input43288, i64 %12182
  %12184 = load i16, i16* %12183, align 2, !tbaa !386
  %12185 = insertelement <4 x i16> %12180, i16 %12184, i32 3
  %12186 = add nsw i32 %blur_x.s0.x.v2.base.s83, -14
  %12187 = insertelement <4 x i32> undef, i32 %12186, i32 0
  %12188 = shufflevector <4 x i32> %12187, <4 x i32> undef, <4 x i32> zeroinitializer
  %12189 = add nsw <4 x i32> %12188, <i32 0, i32 1, i32 2, i32 3>
  %12190 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12189, <4 x i32> %90) #11
  %12191 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12190, <4 x i32> %92) #11
  %12192 = add <4 x i32> %12191, %t359
  %12193 = extractelement <4 x i32> %12192, i32 0
  %12194 = sext i32 %12193 to i64
  %12195 = getelementptr inbounds i16, i16* %input43288, i64 %12194
  %12196 = load i16, i16* %12195, align 2, !tbaa !386
  %12197 = insertelement <4 x i16> undef, i16 %12196, i32 0
  %12198 = extractelement <4 x i32> %12192, i32 1
  %12199 = sext i32 %12198 to i64
  %12200 = getelementptr inbounds i16, i16* %input43288, i64 %12199
  %12201 = load i16, i16* %12200, align 2, !tbaa !386
  %12202 = insertelement <4 x i16> %12197, i16 %12201, i32 1
  %12203 = extractelement <4 x i32> %12192, i32 2
  %12204 = sext i32 %12203 to i64
  %12205 = getelementptr inbounds i16, i16* %input43288, i64 %12204
  %12206 = load i16, i16* %12205, align 2, !tbaa !386
  %12207 = insertelement <4 x i16> %12202, i16 %12206, i32 2
  %12208 = extractelement <4 x i32> %12192, i32 3
  %12209 = sext i32 %12208 to i64
  %12210 = getelementptr inbounds i16, i16* %input43288, i64 %12209
  %12211 = load i16, i16* %12210, align 2, !tbaa !386
  %12212 = insertelement <4 x i16> %12207, i16 %12211, i32 3
  %12213 = add nsw i32 %blur_x.s0.x.v2.base.s83, -10
  %12214 = insertelement <4 x i32> undef, i32 %12213, i32 0
  %12215 = shufflevector <4 x i32> %12214, <4 x i32> undef, <4 x i32> zeroinitializer
  %12216 = add nsw <4 x i32> %12215, <i32 0, i32 1, i32 2, i32 3>
  %12217 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12216, <4 x i32> %90) #11
  %12218 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12217, <4 x i32> %92) #11
  %12219 = add <4 x i32> %12218, %t359
  %12220 = extractelement <4 x i32> %12219, i32 0
  %12221 = sext i32 %12220 to i64
  %12222 = getelementptr inbounds i16, i16* %input43288, i64 %12221
  %12223 = load i16, i16* %12222, align 2, !tbaa !386
  %12224 = insertelement <4 x i16> undef, i16 %12223, i32 0
  %12225 = extractelement <4 x i32> %12219, i32 1
  %12226 = sext i32 %12225 to i64
  %12227 = getelementptr inbounds i16, i16* %input43288, i64 %12226
  %12228 = load i16, i16* %12227, align 2, !tbaa !386
  %12229 = insertelement <4 x i16> %12224, i16 %12228, i32 1
  %12230 = extractelement <4 x i32> %12219, i32 2
  %12231 = sext i32 %12230 to i64
  %12232 = getelementptr inbounds i16, i16* %input43288, i64 %12231
  %12233 = load i16, i16* %12232, align 2, !tbaa !386
  %12234 = insertelement <4 x i16> %12229, i16 %12233, i32 2
  %12235 = extractelement <4 x i32> %12219, i32 3
  %12236 = sext i32 %12235 to i64
  %12237 = getelementptr inbounds i16, i16* %input43288, i64 %12236
  %12238 = load i16, i16* %12237, align 2, !tbaa !386
  %12239 = insertelement <4 x i16> %12234, i16 %12238, i32 3
  %12240 = add nsw i32 %blur_x.s0.x.v2.base.s83, -8
  %12241 = insertelement <4 x i32> undef, i32 %12240, i32 0
  %12242 = shufflevector <4 x i32> %12241, <4 x i32> undef, <4 x i32> zeroinitializer
  %12243 = add nsw <4 x i32> %12242, <i32 0, i32 1, i32 2, i32 3>
  %12244 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12243, <4 x i32> %90) #11
  %12245 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12244, <4 x i32> %92) #11
  %12246 = add <4 x i32> %12245, %t359
  %12247 = extractelement <4 x i32> %12246, i32 0
  %12248 = sext i32 %12247 to i64
  %12249 = getelementptr inbounds i16, i16* %input43288, i64 %12248
  %12250 = load i16, i16* %12249, align 2, !tbaa !386
  %12251 = insertelement <4 x i16> undef, i16 %12250, i32 0
  %12252 = extractelement <4 x i32> %12246, i32 1
  %12253 = sext i32 %12252 to i64
  %12254 = getelementptr inbounds i16, i16* %input43288, i64 %12253
  %12255 = load i16, i16* %12254, align 2, !tbaa !386
  %12256 = insertelement <4 x i16> %12251, i16 %12255, i32 1
  %12257 = extractelement <4 x i32> %12246, i32 2
  %12258 = sext i32 %12257 to i64
  %12259 = getelementptr inbounds i16, i16* %input43288, i64 %12258
  %12260 = load i16, i16* %12259, align 2, !tbaa !386
  %12261 = insertelement <4 x i16> %12256, i16 %12260, i32 2
  %12262 = extractelement <4 x i32> %12246, i32 3
  %12263 = sext i32 %12262 to i64
  %12264 = getelementptr inbounds i16, i16* %input43288, i64 %12263
  %12265 = load i16, i16* %12264, align 2, !tbaa !386
  %12266 = insertelement <4 x i16> %12261, i16 %12265, i32 3
  %12267 = add nsw i32 %blur_x.s0.x.v2.base.s83, -13
  %12268 = insertelement <4 x i32> undef, i32 %12267, i32 0
  %12269 = shufflevector <4 x i32> %12268, <4 x i32> undef, <4 x i32> zeroinitializer
  %12270 = add nsw <4 x i32> %12269, <i32 0, i32 1, i32 2, i32 3>
  %12271 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12270, <4 x i32> %90) #11
  %12272 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12271, <4 x i32> %92) #11
  %12273 = add <4 x i32> %12272, %t359
  %12274 = extractelement <4 x i32> %12273, i32 0
  %12275 = sext i32 %12274 to i64
  %12276 = getelementptr inbounds i16, i16* %input43288, i64 %12275
  %12277 = load i16, i16* %12276, align 2, !tbaa !386
  %12278 = insertelement <4 x i16> undef, i16 %12277, i32 0
  %12279 = extractelement <4 x i32> %12273, i32 1
  %12280 = sext i32 %12279 to i64
  %12281 = getelementptr inbounds i16, i16* %input43288, i64 %12280
  %12282 = load i16, i16* %12281, align 2, !tbaa !386
  %12283 = insertelement <4 x i16> %12278, i16 %12282, i32 1
  %12284 = extractelement <4 x i32> %12273, i32 2
  %12285 = sext i32 %12284 to i64
  %12286 = getelementptr inbounds i16, i16* %input43288, i64 %12285
  %12287 = load i16, i16* %12286, align 2, !tbaa !386
  %12288 = insertelement <4 x i16> %12283, i16 %12287, i32 2
  %12289 = extractelement <4 x i32> %12273, i32 3
  %12290 = sext i32 %12289 to i64
  %12291 = getelementptr inbounds i16, i16* %input43288, i64 %12290
  %12292 = load i16, i16* %12291, align 2, !tbaa !386
  %12293 = insertelement <4 x i16> %12288, i16 %12292, i32 3
  %12294 = add nsw i32 %blur_x.s0.x.v2.base.s83, -9
  %12295 = insertelement <4 x i32> undef, i32 %12294, i32 0
  %12296 = shufflevector <4 x i32> %12295, <4 x i32> undef, <4 x i32> zeroinitializer
  %12297 = add nsw <4 x i32> %12296, <i32 0, i32 1, i32 2, i32 3>
  %12298 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12297, <4 x i32> %90) #11
  %12299 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12298, <4 x i32> %92) #11
  %12300 = add <4 x i32> %12299, %t359
  %12301 = extractelement <4 x i32> %12300, i32 0
  %12302 = sext i32 %12301 to i64
  %12303 = getelementptr inbounds i16, i16* %input43288, i64 %12302
  %12304 = load i16, i16* %12303, align 2, !tbaa !386
  %12305 = insertelement <4 x i16> undef, i16 %12304, i32 0
  %12306 = extractelement <4 x i32> %12300, i32 1
  %12307 = sext i32 %12306 to i64
  %12308 = getelementptr inbounds i16, i16* %input43288, i64 %12307
  %12309 = load i16, i16* %12308, align 2, !tbaa !386
  %12310 = insertelement <4 x i16> %12305, i16 %12309, i32 1
  %12311 = extractelement <4 x i32> %12300, i32 2
  %12312 = sext i32 %12311 to i64
  %12313 = getelementptr inbounds i16, i16* %input43288, i64 %12312
  %12314 = load i16, i16* %12313, align 2, !tbaa !386
  %12315 = insertelement <4 x i16> %12310, i16 %12314, i32 2
  %12316 = extractelement <4 x i32> %12300, i32 3
  %12317 = sext i32 %12316 to i64
  %12318 = getelementptr inbounds i16, i16* %input43288, i64 %12317
  %12319 = load i16, i16* %12318, align 2, !tbaa !386
  %12320 = insertelement <4 x i16> %12315, i16 %12319, i32 3
  %12321 = add <4 x i16> %12131, %12033
  %12322 = add <4 x i16> %12321, %12185
  %12323 = add <4 x i16> %12322, %12212
  %12324 = add <4 x i16> %12323, %12293
  %12325 = add <4 x i16> %12185, %12158
  %12326 = add <4 x i16> %12325, %12239
  %12327 = add <4 x i16> %12326, %12266
  %12328 = add <4 x i16> %12327, %12320
  %12329 = shufflevector <4 x i16> %12324, <4 x i16> %12328, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %12330 = zext <8 x i16> %12329 to <8 x i32>
  %12331 = mul nuw <8 x i32> %12330, <i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429>
  %12332 = lshr <8 x i32> %12331, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %12333 = shufflevector <8 x i32> %12332, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %12334 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %12333)
  %12335 = shufflevector <8 x i32> %12332, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %12336 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %12335)
  %12337 = shufflevector <4 x i16> %12334, <4 x i16> %12336, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %12338 = add nsw i32 %blur_x.s0.x.v2.base.s83, -7
  %12339 = insertelement <4 x i32> undef, i32 %12338, i32 0
  %12340 = shufflevector <4 x i32> %12339, <4 x i32> undef, <4 x i32> zeroinitializer
  %12341 = add nsw <4 x i32> %12340, <i32 0, i32 1, i32 2, i32 3>
  %12342 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12341, <4 x i32> %90) #11
  %12343 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12342, <4 x i32> %92) #11
  %12344 = add <4 x i32> %12343, %t359
  %12345 = extractelement <4 x i32> %12344, i32 0
  %12346 = sext i32 %12345 to i64
  %12347 = getelementptr inbounds i16, i16* %input43288, i64 %12346
  %12348 = load i16, i16* %12347, align 2, !tbaa !386
  %12349 = insertelement <4 x i16> undef, i16 %12348, i32 0
  %12350 = extractelement <4 x i32> %12344, i32 1
  %12351 = sext i32 %12350 to i64
  %12352 = getelementptr inbounds i16, i16* %input43288, i64 %12351
  %12353 = load i16, i16* %12352, align 2, !tbaa !386
  %12354 = insertelement <4 x i16> %12349, i16 %12353, i32 1
  %12355 = extractelement <4 x i32> %12344, i32 2
  %12356 = sext i32 %12355 to i64
  %12357 = getelementptr inbounds i16, i16* %input43288, i64 %12356
  %12358 = load i16, i16* %12357, align 2, !tbaa !386
  %12359 = insertelement <4 x i16> %12354, i16 %12358, i32 2
  %12360 = extractelement <4 x i32> %12344, i32 3
  %12361 = sext i32 %12360 to i64
  %12362 = getelementptr inbounds i16, i16* %input43288, i64 %12361
  %12363 = load i16, i16* %12362, align 2, !tbaa !386
  %12364 = insertelement <4 x i16> %12359, i16 %12363, i32 3
  %12365 = add nsw i32 %blur_x.s0.x.v2.base.s83, -3
  %12366 = insertelement <4 x i32> undef, i32 %12365, i32 0
  %12367 = shufflevector <4 x i32> %12366, <4 x i32> undef, <4 x i32> zeroinitializer
  %12368 = add nsw <4 x i32> %12367, <i32 0, i32 1, i32 2, i32 3>
  %12369 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12368, <4 x i32> %90) #11
  %12370 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12369, <4 x i32> %92) #11
  %12371 = add <4 x i32> %12370, %t359
  %12372 = extractelement <4 x i32> %12371, i32 0
  %12373 = sext i32 %12372 to i64
  %12374 = getelementptr inbounds i16, i16* %input43288, i64 %12373
  %12375 = load i16, i16* %12374, align 2, !tbaa !386
  %12376 = insertelement <4 x i16> undef, i16 %12375, i32 0
  %12377 = extractelement <4 x i32> %12371, i32 1
  %12378 = sext i32 %12377 to i64
  %12379 = getelementptr inbounds i16, i16* %input43288, i64 %12378
  %12380 = load i16, i16* %12379, align 2, !tbaa !386
  %12381 = insertelement <4 x i16> %12376, i16 %12380, i32 1
  %12382 = extractelement <4 x i32> %12371, i32 2
  %12383 = sext i32 %12382 to i64
  %12384 = getelementptr inbounds i16, i16* %input43288, i64 %12383
  %12385 = load i16, i16* %12384, align 2, !tbaa !386
  %12386 = insertelement <4 x i16> %12381, i16 %12385, i32 2
  %12387 = extractelement <4 x i32> %12371, i32 3
  %12388 = sext i32 %12387 to i64
  %12389 = getelementptr inbounds i16, i16* %input43288, i64 %12388
  %12390 = load i16, i16* %12389, align 2, !tbaa !386
  %12391 = insertelement <4 x i16> %12386, i16 %12390, i32 3
  %12392 = add nsw i32 %blur_x.s0.x.v2.base.s83, -4
  %12393 = insertelement <4 x i32> undef, i32 %12392, i32 0
  %12394 = shufflevector <4 x i32> %12393, <4 x i32> undef, <4 x i32> zeroinitializer
  %12395 = add nsw <4 x i32> %12394, <i32 0, i32 1, i32 2, i32 3>
  %12396 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12395, <4 x i32> %90) #11
  %12397 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12396, <4 x i32> %92) #11
  %12398 = add <4 x i32> %12397, %t359
  %12399 = extractelement <4 x i32> %12398, i32 0
  %12400 = sext i32 %12399 to i64
  %12401 = getelementptr inbounds i16, i16* %input43288, i64 %12400
  %12402 = load i16, i16* %12401, align 2, !tbaa !386
  %12403 = insertelement <4 x i16> undef, i16 %12402, i32 0
  %12404 = extractelement <4 x i32> %12398, i32 1
  %12405 = sext i32 %12404 to i64
  %12406 = getelementptr inbounds i16, i16* %input43288, i64 %12405
  %12407 = load i16, i16* %12406, align 2, !tbaa !386
  %12408 = insertelement <4 x i16> %12403, i16 %12407, i32 1
  %12409 = extractelement <4 x i32> %12398, i32 2
  %12410 = sext i32 %12409 to i64
  %12411 = getelementptr inbounds i16, i16* %input43288, i64 %12410
  %12412 = load i16, i16* %12411, align 2, !tbaa !386
  %12413 = insertelement <4 x i16> %12408, i16 %12412, i32 2
  %12414 = extractelement <4 x i32> %12398, i32 3
  %12415 = sext i32 %12414 to i64
  %12416 = getelementptr inbounds i16, i16* %input43288, i64 %12415
  %12417 = load i16, i16* %12416, align 2, !tbaa !386
  %12418 = insertelement <4 x i16> %12413, i16 %12417, i32 3
  %12419 = add nsw i32 %blur_x.s0.x.v2.base.s83, -6
  %12420 = insertelement <4 x i32> undef, i32 %12419, i32 0
  %12421 = shufflevector <4 x i32> %12420, <4 x i32> undef, <4 x i32> zeroinitializer
  %12422 = add nsw <4 x i32> %12421, <i32 0, i32 1, i32 2, i32 3>
  %12423 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12422, <4 x i32> %90) #11
  %12424 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12423, <4 x i32> %92) #11
  %12425 = add <4 x i32> %12424, %t359
  %12426 = extractelement <4 x i32> %12425, i32 0
  %12427 = sext i32 %12426 to i64
  %12428 = getelementptr inbounds i16, i16* %input43288, i64 %12427
  %12429 = load i16, i16* %12428, align 2, !tbaa !386
  %12430 = insertelement <4 x i16> undef, i16 %12429, i32 0
  %12431 = extractelement <4 x i32> %12425, i32 1
  %12432 = sext i32 %12431 to i64
  %12433 = getelementptr inbounds i16, i16* %input43288, i64 %12432
  %12434 = load i16, i16* %12433, align 2, !tbaa !386
  %12435 = insertelement <4 x i16> %12430, i16 %12434, i32 1
  %12436 = extractelement <4 x i32> %12425, i32 2
  %12437 = sext i32 %12436 to i64
  %12438 = getelementptr inbounds i16, i16* %input43288, i64 %12437
  %12439 = load i16, i16* %12438, align 2, !tbaa !386
  %12440 = insertelement <4 x i16> %12435, i16 %12439, i32 2
  %12441 = extractelement <4 x i32> %12425, i32 3
  %12442 = sext i32 %12441 to i64
  %12443 = getelementptr inbounds i16, i16* %input43288, i64 %12442
  %12444 = load i16, i16* %12443, align 2, !tbaa !386
  %12445 = insertelement <4 x i16> %12440, i16 %12444, i32 3
  %12446 = add nsw i32 %blur_x.s0.x.v2.base.s83, -2
  %12447 = insertelement <4 x i32> undef, i32 %12446, i32 0
  %12448 = shufflevector <4 x i32> %12447, <4 x i32> undef, <4 x i32> zeroinitializer
  %12449 = add nsw <4 x i32> %12448, <i32 0, i32 1, i32 2, i32 3>
  %12450 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12449, <4 x i32> %90) #11
  %12451 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12450, <4 x i32> %92) #11
  %12452 = add <4 x i32> %12451, %t359
  %12453 = extractelement <4 x i32> %12452, i32 0
  %12454 = sext i32 %12453 to i64
  %12455 = getelementptr inbounds i16, i16* %input43288, i64 %12454
  %12456 = load i16, i16* %12455, align 2, !tbaa !386
  %12457 = insertelement <4 x i16> undef, i16 %12456, i32 0
  %12458 = extractelement <4 x i32> %12452, i32 1
  %12459 = sext i32 %12458 to i64
  %12460 = getelementptr inbounds i16, i16* %input43288, i64 %12459
  %12461 = load i16, i16* %12460, align 2, !tbaa !386
  %12462 = insertelement <4 x i16> %12457, i16 %12461, i32 1
  %12463 = extractelement <4 x i32> %12452, i32 2
  %12464 = sext i32 %12463 to i64
  %12465 = getelementptr inbounds i16, i16* %input43288, i64 %12464
  %12466 = load i16, i16* %12465, align 2, !tbaa !386
  %12467 = insertelement <4 x i16> %12462, i16 %12466, i32 2
  %12468 = extractelement <4 x i32> %12452, i32 3
  %12469 = sext i32 %12468 to i64
  %12470 = getelementptr inbounds i16, i16* %input43288, i64 %12469
  %12471 = load i16, i16* %12470, align 2, !tbaa !386
  %12472 = insertelement <4 x i16> %12467, i16 %12471, i32 3
  %12473 = insertelement <4 x i32> undef, i32 %blur_x.s0.x.v2.base.s83, i32 0
  %12474 = shufflevector <4 x i32> %12473, <4 x i32> undef, <4 x i32> zeroinitializer
  %12475 = add nsw <4 x i32> %12474, <i32 0, i32 1, i32 2, i32 3>
  %12476 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12475, <4 x i32> %90) #11
  %12477 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12476, <4 x i32> %92) #11
  %12478 = add <4 x i32> %12477, %t359
  %12479 = extractelement <4 x i32> %12478, i32 0
  %12480 = sext i32 %12479 to i64
  %12481 = getelementptr inbounds i16, i16* %input43288, i64 %12480
  %12482 = load i16, i16* %12481, align 2, !tbaa !386
  %12483 = insertelement <4 x i16> undef, i16 %12482, i32 0
  %12484 = extractelement <4 x i32> %12478, i32 1
  %12485 = sext i32 %12484 to i64
  %12486 = getelementptr inbounds i16, i16* %input43288, i64 %12485
  %12487 = load i16, i16* %12486, align 2, !tbaa !386
  %12488 = insertelement <4 x i16> %12483, i16 %12487, i32 1
  %12489 = extractelement <4 x i32> %12478, i32 2
  %12490 = sext i32 %12489 to i64
  %12491 = getelementptr inbounds i16, i16* %input43288, i64 %12490
  %12492 = load i16, i16* %12491, align 2, !tbaa !386
  %12493 = insertelement <4 x i16> %12488, i16 %12492, i32 2
  %12494 = extractelement <4 x i32> %12478, i32 3
  %12495 = sext i32 %12494 to i64
  %12496 = getelementptr inbounds i16, i16* %input43288, i64 %12495
  %12497 = load i16, i16* %12496, align 2, !tbaa !386
  %12498 = insertelement <4 x i16> %12493, i16 %12497, i32 3
  %12499 = add nsw i32 %blur_x.s0.x.v2.base.s83, -5
  %12500 = insertelement <4 x i32> undef, i32 %12499, i32 0
  %12501 = shufflevector <4 x i32> %12500, <4 x i32> undef, <4 x i32> zeroinitializer
  %12502 = add nsw <4 x i32> %12501, <i32 0, i32 1, i32 2, i32 3>
  %12503 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12502, <4 x i32> %90) #11
  %12504 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12503, <4 x i32> %92) #11
  %12505 = add <4 x i32> %12504, %t359
  %12506 = extractelement <4 x i32> %12505, i32 0
  %12507 = sext i32 %12506 to i64
  %12508 = getelementptr inbounds i16, i16* %input43288, i64 %12507
  %12509 = load i16, i16* %12508, align 2, !tbaa !386
  %12510 = insertelement <4 x i16> undef, i16 %12509, i32 0
  %12511 = extractelement <4 x i32> %12505, i32 1
  %12512 = sext i32 %12511 to i64
  %12513 = getelementptr inbounds i16, i16* %input43288, i64 %12512
  %12514 = load i16, i16* %12513, align 2, !tbaa !386
  %12515 = insertelement <4 x i16> %12510, i16 %12514, i32 1
  %12516 = extractelement <4 x i32> %12505, i32 2
  %12517 = sext i32 %12516 to i64
  %12518 = getelementptr inbounds i16, i16* %input43288, i64 %12517
  %12519 = load i16, i16* %12518, align 2, !tbaa !386
  %12520 = insertelement <4 x i16> %12515, i16 %12519, i32 2
  %12521 = extractelement <4 x i32> %12505, i32 3
  %12522 = sext i32 %12521 to i64
  %12523 = getelementptr inbounds i16, i16* %input43288, i64 %12522
  %12524 = load i16, i16* %12523, align 2, !tbaa !386
  %12525 = insertelement <4 x i16> %12520, i16 %12524, i32 3
  %12526 = add nsw i32 %blur_x.s0.x.v2.base.s83, -1
  %12527 = insertelement <4 x i32> undef, i32 %12526, i32 0
  %12528 = shufflevector <4 x i32> %12527, <4 x i32> undef, <4 x i32> zeroinitializer
  %12529 = add nsw <4 x i32> %12528, <i32 0, i32 1, i32 2, i32 3>
  %12530 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12529, <4 x i32> %90) #11
  %12531 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12530, <4 x i32> %92) #11
  %12532 = add <4 x i32> %12531, %t359
  %12533 = extractelement <4 x i32> %12532, i32 0
  %12534 = sext i32 %12533 to i64
  %12535 = getelementptr inbounds i16, i16* %input43288, i64 %12534
  %12536 = load i16, i16* %12535, align 2, !tbaa !386
  %12537 = insertelement <4 x i16> undef, i16 %12536, i32 0
  %12538 = extractelement <4 x i32> %12532, i32 1
  %12539 = sext i32 %12538 to i64
  %12540 = getelementptr inbounds i16, i16* %input43288, i64 %12539
  %12541 = load i16, i16* %12540, align 2, !tbaa !386
  %12542 = insertelement <4 x i16> %12537, i16 %12541, i32 1
  %12543 = extractelement <4 x i32> %12532, i32 2
  %12544 = sext i32 %12543 to i64
  %12545 = getelementptr inbounds i16, i16* %input43288, i64 %12544
  %12546 = load i16, i16* %12545, align 2, !tbaa !386
  %12547 = insertelement <4 x i16> %12542, i16 %12546, i32 2
  %12548 = extractelement <4 x i32> %12532, i32 3
  %12549 = sext i32 %12548 to i64
  %12550 = getelementptr inbounds i16, i16* %input43288, i64 %12549
  %12551 = load i16, i16* %12550, align 2, !tbaa !386
  %12552 = insertelement <4 x i16> %12547, i16 %12551, i32 3
  %12553 = add <4 x i16> %12364, %12266
  %12554 = add <4 x i16> %12553, %12418
  %12555 = add <4 x i16> %12554, %12445
  %12556 = add <4 x i16> %12555, %12525
  %12557 = add <4 x i16> %12418, %12391
  %12558 = add <4 x i16> %12557, %12472
  %12559 = add <4 x i16> %12558, %12498
  %12560 = add <4 x i16> %12559, %12552
  %12561 = shufflevector <4 x i16> %12556, <4 x i16> %12560, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %12562 = zext <8 x i16> %12561 to <8 x i32>
  %12563 = mul nuw <8 x i32> %12562, <i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429>
  %12564 = lshr <8 x i32> %12563, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %12565 = shufflevector <8 x i32> %12564, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %12566 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %12565)
  %12567 = shufflevector <8 x i32> %12564, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %12568 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %12567)
  %12569 = shufflevector <4 x i16> %12566, <4 x i16> %12568, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %12570 = shufflevector <16 x i16> %12569, <16 x i16> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12571 = shufflevector <32 x i16> %12570, <32 x i16> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12572 = sext i32 %blur_x.s0.x.v2.base.s83 to i64
  %12573 = add nsw i64 %12572, %10671
  %12574 = getelementptr inbounds i16, i16* %blur_x61, i64 %12573
  %12575 = bitcast i16* %12574 to <8 x i16>*
  store <8 x i16> %10939, <8 x i16>* %12575, align 2, !tbaa !389
  %12576 = getelementptr inbounds i16, i16* %12574, i64 8
  %12577 = bitcast i16* %12576 to <8 x i16>*
  store <8 x i16> %11172, <8 x i16>* %12577, align 2, !tbaa !389
  %12578 = getelementptr inbounds i16, i16* %12574, i64 16
  %12579 = bitcast i16* %12578 to <8 x i16>*
  store <8 x i16> %11405, <8 x i16>* %12579, align 2, !tbaa !389
  %12580 = getelementptr inbounds i16, i16* %12574, i64 24
  %12581 = bitcast i16* %12580 to <8 x i16>*
  store <8 x i16> %11638, <8 x i16>* %12581, align 2, !tbaa !389
  %12582 = getelementptr inbounds i16, i16* %12574, i64 32
  %12583 = bitcast i16* %12582 to <8 x i16>*
  store <8 x i16> %11871, <8 x i16>* %12583, align 2, !tbaa !389
  %12584 = getelementptr inbounds i16, i16* %12574, i64 40
  %12585 = bitcast i16* %12584 to <8 x i16>*
  store <8 x i16> %12104, <8 x i16>* %12585, align 2, !tbaa !389
  %12586 = getelementptr inbounds i16, i16* %12574, i64 48
  %12587 = bitcast i16* %12586 to <8 x i16>*
  store <8 x i16> %12337, <8 x i16>* %12587, align 2, !tbaa !389
  %12588 = shufflevector <64 x i16> %12571, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %12589 = getelementptr inbounds i16, i16* %12574, i64 56
  %12590 = bitcast i16* %12589 to <8 x i16>*
  store <8 x i16> %12588, <8 x i16>* %12590, align 2, !tbaa !389
  %12591 = add nuw nsw i32 %blur_x.s0.x.x82, 1
  %.not189 = icmp eq i32 %12591, %t31258
  br i1 %.not189, label %"end for blur_x.s0.x.x81", label %"for blur_x.s0.x.x80"

"end for blur_x.s0.x.x81":                        ; preds = %"for blur_x.s0.x.x80", %"for blur_x.s0.y.rebased76"
  %12592 = add nuw nsw i32 %blur_x.s0.y.rebased78, 1
  %.not188 = icmp eq i32 %12592, %t32374
  br i1 %.not188, label %"end for blur_x.s0.y.rebased77", label %"for blur_x.s0.y.rebased76"

"for blur_x.s0.y.rebased88":                      ; preds = %"for blur_x.s0.y.rebased88.preheader", %"end for blur_x.s0.x.x.rebased109"
  %blur_x.s0.y.rebased90 = phi i32 [ %16680, %"end for blur_x.s0.x.x.rebased109" ], [ 0, %"for blur_x.s0.y.rebased88.preheader" ]
  %12593 = add nsw i32 %blur_x.s0.y.rebased90, %10675
  %12594 = and i32 %12593, 7
  %12595 = mul nsw i32 %12594, %a27
  %t33591 = sub nsw i32 %12595, %t29350
  %12596 = add nsw i32 %10677, %blur_x.s0.y.rebased90
  %12597 = mul nsw i32 %12596, %input.stride.149
  %t33492 = sub nsw i32 %12597, %input.min.048
  br i1 %93, label %"for blur_x.s0.x.x93.preheader", label %"end for blur_x.s0.x.x94", !prof !385

"for blur_x.s0.x.x93.preheader":                  ; preds = %"for blur_x.s0.y.rebased88"
  %12598 = insertelement <4 x i32> undef, i32 %t33492, i32 0
  %12599 = shufflevector <4 x i32> %12598, <4 x i32> undef, <4 x i32> zeroinitializer
  %12600 = sext i32 %t33591 to i64
  br label %"for blur_x.s0.x.x93"

"end for blur_x.s0.y.rebased89":                  ; preds = %"end for blur_x.s0.x.x.rebased109", %"end for blur_x.s0.y.rebased77"
  %a84 = sub i32 %a35, %a54
  %12601 = icmp slt i32 %a84, 0
  %a83 = select i1 %12601, i32 %a84, i32 0
  %12602 = icmp sgt i32 %a83, -4
  %12603 = select i1 %10658, i32 %a37, i32 %b36
  br i1 %12602, label %"for blur_x.s0.y.rebased115.preheader", label %"end for blur_x.s0.y.rebased116", !prof !385

"for blur_x.s0.y.rebased115.preheader":           ; preds = %"end for blur_x.s0.y.rebased89"
  %12604 = sub nsw i32 %12603, %b100
  %a83.op = add nsw i32 %a83, 3
  br label %"for blur_x.s0.y.rebased115"

"for blur_x.s0.x.x93":                            ; preds = %"for blur_x.s0.x.x93.preheader", %"for blur_x.s0.x.x93"
  %blur_x.s0.x.x95 = phi i32 [ %14518, %"for blur_x.s0.x.x93" ], [ 0, %"for blur_x.s0.x.x93.preheader" ]
  %12605 = shl nsw i32 %blur_x.s0.x.x95, 6
  %a66 = add nsw i32 %12605, %t29350
  %12606 = icmp slt i32 %a66, %b101
  %blur_x.s0.x.v2.base.s96 = select i1 %12606, i32 %a66, i32 %b101
  %12607 = add nsw i32 %blur_x.s0.x.v2.base.s96, -63
  %12608 = insertelement <4 x i32> undef, i32 %12607, i32 0
  %12609 = shufflevector <4 x i32> %12608, <4 x i32> undef, <4 x i32> zeroinitializer
  %12610 = add nsw <4 x i32> %12609, <i32 0, i32 1, i32 2, i32 3>
  %12611 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12610, <4 x i32> %90) #11
  %12612 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12611, <4 x i32> %92) #11
  %12613 = add <4 x i32> %12612, %12599
  %12614 = extractelement <4 x i32> %12613, i32 0
  %12615 = sext i32 %12614 to i64
  %12616 = getelementptr inbounds i16, i16* %input43288, i64 %12615
  %12617 = load i16, i16* %12616, align 2, !tbaa !386
  %12618 = insertelement <4 x i16> undef, i16 %12617, i32 0
  %12619 = extractelement <4 x i32> %12613, i32 1
  %12620 = sext i32 %12619 to i64
  %12621 = getelementptr inbounds i16, i16* %input43288, i64 %12620
  %12622 = load i16, i16* %12621, align 2, !tbaa !386
  %12623 = insertelement <4 x i16> %12618, i16 %12622, i32 1
  %12624 = extractelement <4 x i32> %12613, i32 2
  %12625 = sext i32 %12624 to i64
  %12626 = getelementptr inbounds i16, i16* %input43288, i64 %12625
  %12627 = load i16, i16* %12626, align 2, !tbaa !386
  %12628 = insertelement <4 x i16> %12623, i16 %12627, i32 2
  %12629 = extractelement <4 x i32> %12613, i32 3
  %12630 = sext i32 %12629 to i64
  %12631 = getelementptr inbounds i16, i16* %input43288, i64 %12630
  %12632 = load i16, i16* %12631, align 2, !tbaa !386
  %12633 = insertelement <4 x i16> %12628, i16 %12632, i32 3
  %12634 = add nsw i32 %blur_x.s0.x.v2.base.s96, -59
  %12635 = insertelement <4 x i32> undef, i32 %12634, i32 0
  %12636 = shufflevector <4 x i32> %12635, <4 x i32> undef, <4 x i32> zeroinitializer
  %12637 = add nsw <4 x i32> %12636, <i32 0, i32 1, i32 2, i32 3>
  %12638 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12637, <4 x i32> %90) #11
  %12639 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12638, <4 x i32> %92) #11
  %12640 = add <4 x i32> %12639, %12599
  %12641 = extractelement <4 x i32> %12640, i32 0
  %12642 = sext i32 %12641 to i64
  %12643 = getelementptr inbounds i16, i16* %input43288, i64 %12642
  %12644 = load i16, i16* %12643, align 2, !tbaa !386
  %12645 = insertelement <4 x i16> undef, i16 %12644, i32 0
  %12646 = extractelement <4 x i32> %12640, i32 1
  %12647 = sext i32 %12646 to i64
  %12648 = getelementptr inbounds i16, i16* %input43288, i64 %12647
  %12649 = load i16, i16* %12648, align 2, !tbaa !386
  %12650 = insertelement <4 x i16> %12645, i16 %12649, i32 1
  %12651 = extractelement <4 x i32> %12640, i32 2
  %12652 = sext i32 %12651 to i64
  %12653 = getelementptr inbounds i16, i16* %input43288, i64 %12652
  %12654 = load i16, i16* %12653, align 2, !tbaa !386
  %12655 = insertelement <4 x i16> %12650, i16 %12654, i32 2
  %12656 = extractelement <4 x i32> %12640, i32 3
  %12657 = sext i32 %12656 to i64
  %12658 = getelementptr inbounds i16, i16* %input43288, i64 %12657
  %12659 = load i16, i16* %12658, align 2, !tbaa !386
  %12660 = insertelement <4 x i16> %12655, i16 %12659, i32 3
  %12661 = add nsw i32 %blur_x.s0.x.v2.base.s96, -64
  %12662 = insertelement <4 x i32> undef, i32 %12661, i32 0
  %12663 = shufflevector <4 x i32> %12662, <4 x i32> undef, <4 x i32> zeroinitializer
  %12664 = add nsw <4 x i32> %12663, <i32 0, i32 1, i32 2, i32 3>
  %12665 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12664, <4 x i32> %90) #11
  %12666 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12665, <4 x i32> %92) #11
  %12667 = add <4 x i32> %12666, %12599
  %12668 = extractelement <4 x i32> %12667, i32 0
  %12669 = sext i32 %12668 to i64
  %12670 = getelementptr inbounds i16, i16* %input43288, i64 %12669
  %12671 = load i16, i16* %12670, align 2, !tbaa !386
  %12672 = insertelement <4 x i16> undef, i16 %12671, i32 0
  %12673 = extractelement <4 x i32> %12667, i32 1
  %12674 = sext i32 %12673 to i64
  %12675 = getelementptr inbounds i16, i16* %input43288, i64 %12674
  %12676 = load i16, i16* %12675, align 2, !tbaa !386
  %12677 = insertelement <4 x i16> %12672, i16 %12676, i32 1
  %12678 = extractelement <4 x i32> %12667, i32 2
  %12679 = sext i32 %12678 to i64
  %12680 = getelementptr inbounds i16, i16* %input43288, i64 %12679
  %12681 = load i16, i16* %12680, align 2, !tbaa !386
  %12682 = insertelement <4 x i16> %12677, i16 %12681, i32 2
  %12683 = extractelement <4 x i32> %12667, i32 3
  %12684 = sext i32 %12683 to i64
  %12685 = getelementptr inbounds i16, i16* %input43288, i64 %12684
  %12686 = load i16, i16* %12685, align 2, !tbaa !386
  %12687 = insertelement <4 x i16> %12682, i16 %12686, i32 3
  %12688 = add nsw i32 %blur_x.s0.x.v2.base.s96, -60
  %12689 = insertelement <4 x i32> undef, i32 %12688, i32 0
  %12690 = shufflevector <4 x i32> %12689, <4 x i32> undef, <4 x i32> zeroinitializer
  %12691 = add nsw <4 x i32> %12690, <i32 0, i32 1, i32 2, i32 3>
  %12692 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12691, <4 x i32> %90) #11
  %12693 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12692, <4 x i32> %92) #11
  %12694 = add <4 x i32> %12693, %12599
  %12695 = extractelement <4 x i32> %12694, i32 0
  %12696 = sext i32 %12695 to i64
  %12697 = getelementptr inbounds i16, i16* %input43288, i64 %12696
  %12698 = load i16, i16* %12697, align 2, !tbaa !386
  %12699 = insertelement <4 x i16> undef, i16 %12698, i32 0
  %12700 = extractelement <4 x i32> %12694, i32 1
  %12701 = sext i32 %12700 to i64
  %12702 = getelementptr inbounds i16, i16* %input43288, i64 %12701
  %12703 = load i16, i16* %12702, align 2, !tbaa !386
  %12704 = insertelement <4 x i16> %12699, i16 %12703, i32 1
  %12705 = extractelement <4 x i32> %12694, i32 2
  %12706 = sext i32 %12705 to i64
  %12707 = getelementptr inbounds i16, i16* %input43288, i64 %12706
  %12708 = load i16, i16* %12707, align 2, !tbaa !386
  %12709 = insertelement <4 x i16> %12704, i16 %12708, i32 2
  %12710 = extractelement <4 x i32> %12694, i32 3
  %12711 = sext i32 %12710 to i64
  %12712 = getelementptr inbounds i16, i16* %input43288, i64 %12711
  %12713 = load i16, i16* %12712, align 2, !tbaa !386
  %12714 = insertelement <4 x i16> %12709, i16 %12713, i32 3
  %12715 = add nsw i32 %blur_x.s0.x.v2.base.s96, -62
  %12716 = insertelement <4 x i32> undef, i32 %12715, i32 0
  %12717 = shufflevector <4 x i32> %12716, <4 x i32> undef, <4 x i32> zeroinitializer
  %12718 = add nsw <4 x i32> %12717, <i32 0, i32 1, i32 2, i32 3>
  %12719 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12718, <4 x i32> %90) #11
  %12720 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12719, <4 x i32> %92) #11
  %12721 = add <4 x i32> %12720, %12599
  %12722 = extractelement <4 x i32> %12721, i32 0
  %12723 = sext i32 %12722 to i64
  %12724 = getelementptr inbounds i16, i16* %input43288, i64 %12723
  %12725 = load i16, i16* %12724, align 2, !tbaa !386
  %12726 = insertelement <4 x i16> undef, i16 %12725, i32 0
  %12727 = extractelement <4 x i32> %12721, i32 1
  %12728 = sext i32 %12727 to i64
  %12729 = getelementptr inbounds i16, i16* %input43288, i64 %12728
  %12730 = load i16, i16* %12729, align 2, !tbaa !386
  %12731 = insertelement <4 x i16> %12726, i16 %12730, i32 1
  %12732 = extractelement <4 x i32> %12721, i32 2
  %12733 = sext i32 %12732 to i64
  %12734 = getelementptr inbounds i16, i16* %input43288, i64 %12733
  %12735 = load i16, i16* %12734, align 2, !tbaa !386
  %12736 = insertelement <4 x i16> %12731, i16 %12735, i32 2
  %12737 = extractelement <4 x i32> %12721, i32 3
  %12738 = sext i32 %12737 to i64
  %12739 = getelementptr inbounds i16, i16* %input43288, i64 %12738
  %12740 = load i16, i16* %12739, align 2, !tbaa !386
  %12741 = insertelement <4 x i16> %12736, i16 %12740, i32 3
  %12742 = add nsw i32 %blur_x.s0.x.v2.base.s96, -58
  %12743 = insertelement <4 x i32> undef, i32 %12742, i32 0
  %12744 = shufflevector <4 x i32> %12743, <4 x i32> undef, <4 x i32> zeroinitializer
  %12745 = add nsw <4 x i32> %12744, <i32 0, i32 1, i32 2, i32 3>
  %12746 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12745, <4 x i32> %90) #11
  %12747 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12746, <4 x i32> %92) #11
  %12748 = add <4 x i32> %12747, %12599
  %12749 = extractelement <4 x i32> %12748, i32 0
  %12750 = sext i32 %12749 to i64
  %12751 = getelementptr inbounds i16, i16* %input43288, i64 %12750
  %12752 = load i16, i16* %12751, align 2, !tbaa !386
  %12753 = insertelement <4 x i16> undef, i16 %12752, i32 0
  %12754 = extractelement <4 x i32> %12748, i32 1
  %12755 = sext i32 %12754 to i64
  %12756 = getelementptr inbounds i16, i16* %input43288, i64 %12755
  %12757 = load i16, i16* %12756, align 2, !tbaa !386
  %12758 = insertelement <4 x i16> %12753, i16 %12757, i32 1
  %12759 = extractelement <4 x i32> %12748, i32 2
  %12760 = sext i32 %12759 to i64
  %12761 = getelementptr inbounds i16, i16* %input43288, i64 %12760
  %12762 = load i16, i16* %12761, align 2, !tbaa !386
  %12763 = insertelement <4 x i16> %12758, i16 %12762, i32 2
  %12764 = extractelement <4 x i32> %12748, i32 3
  %12765 = sext i32 %12764 to i64
  %12766 = getelementptr inbounds i16, i16* %input43288, i64 %12765
  %12767 = load i16, i16* %12766, align 2, !tbaa !386
  %12768 = insertelement <4 x i16> %12763, i16 %12767, i32 3
  %12769 = add nsw i32 %blur_x.s0.x.v2.base.s96, -56
  %12770 = insertelement <4 x i32> undef, i32 %12769, i32 0
  %12771 = shufflevector <4 x i32> %12770, <4 x i32> undef, <4 x i32> zeroinitializer
  %12772 = add nsw <4 x i32> %12771, <i32 0, i32 1, i32 2, i32 3>
  %12773 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12772, <4 x i32> %90) #11
  %12774 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12773, <4 x i32> %92) #11
  %12775 = add <4 x i32> %12774, %12599
  %12776 = extractelement <4 x i32> %12775, i32 0
  %12777 = sext i32 %12776 to i64
  %12778 = getelementptr inbounds i16, i16* %input43288, i64 %12777
  %12779 = load i16, i16* %12778, align 2, !tbaa !386
  %12780 = insertelement <4 x i16> undef, i16 %12779, i32 0
  %12781 = extractelement <4 x i32> %12775, i32 1
  %12782 = sext i32 %12781 to i64
  %12783 = getelementptr inbounds i16, i16* %input43288, i64 %12782
  %12784 = load i16, i16* %12783, align 2, !tbaa !386
  %12785 = insertelement <4 x i16> %12780, i16 %12784, i32 1
  %12786 = extractelement <4 x i32> %12775, i32 2
  %12787 = sext i32 %12786 to i64
  %12788 = getelementptr inbounds i16, i16* %input43288, i64 %12787
  %12789 = load i16, i16* %12788, align 2, !tbaa !386
  %12790 = insertelement <4 x i16> %12785, i16 %12789, i32 2
  %12791 = extractelement <4 x i32> %12775, i32 3
  %12792 = sext i32 %12791 to i64
  %12793 = getelementptr inbounds i16, i16* %input43288, i64 %12792
  %12794 = load i16, i16* %12793, align 2, !tbaa !386
  %12795 = insertelement <4 x i16> %12790, i16 %12794, i32 3
  %12796 = add nsw i32 %blur_x.s0.x.v2.base.s96, -61
  %12797 = insertelement <4 x i32> undef, i32 %12796, i32 0
  %12798 = shufflevector <4 x i32> %12797, <4 x i32> undef, <4 x i32> zeroinitializer
  %12799 = add nsw <4 x i32> %12798, <i32 0, i32 1, i32 2, i32 3>
  %12800 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12799, <4 x i32> %90) #11
  %12801 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12800, <4 x i32> %92) #11
  %12802 = add <4 x i32> %12801, %12599
  %12803 = extractelement <4 x i32> %12802, i32 0
  %12804 = sext i32 %12803 to i64
  %12805 = getelementptr inbounds i16, i16* %input43288, i64 %12804
  %12806 = load i16, i16* %12805, align 2, !tbaa !386
  %12807 = insertelement <4 x i16> undef, i16 %12806, i32 0
  %12808 = extractelement <4 x i32> %12802, i32 1
  %12809 = sext i32 %12808 to i64
  %12810 = getelementptr inbounds i16, i16* %input43288, i64 %12809
  %12811 = load i16, i16* %12810, align 2, !tbaa !386
  %12812 = insertelement <4 x i16> %12807, i16 %12811, i32 1
  %12813 = extractelement <4 x i32> %12802, i32 2
  %12814 = sext i32 %12813 to i64
  %12815 = getelementptr inbounds i16, i16* %input43288, i64 %12814
  %12816 = load i16, i16* %12815, align 2, !tbaa !386
  %12817 = insertelement <4 x i16> %12812, i16 %12816, i32 2
  %12818 = extractelement <4 x i32> %12802, i32 3
  %12819 = sext i32 %12818 to i64
  %12820 = getelementptr inbounds i16, i16* %input43288, i64 %12819
  %12821 = load i16, i16* %12820, align 2, !tbaa !386
  %12822 = insertelement <4 x i16> %12817, i16 %12821, i32 3
  %12823 = add nsw i32 %blur_x.s0.x.v2.base.s96, -57
  %12824 = insertelement <4 x i32> undef, i32 %12823, i32 0
  %12825 = shufflevector <4 x i32> %12824, <4 x i32> undef, <4 x i32> zeroinitializer
  %12826 = add nsw <4 x i32> %12825, <i32 0, i32 1, i32 2, i32 3>
  %12827 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12826, <4 x i32> %90) #11
  %12828 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12827, <4 x i32> %92) #11
  %12829 = add <4 x i32> %12828, %12599
  %12830 = extractelement <4 x i32> %12829, i32 0
  %12831 = sext i32 %12830 to i64
  %12832 = getelementptr inbounds i16, i16* %input43288, i64 %12831
  %12833 = load i16, i16* %12832, align 2, !tbaa !386
  %12834 = insertelement <4 x i16> undef, i16 %12833, i32 0
  %12835 = extractelement <4 x i32> %12829, i32 1
  %12836 = sext i32 %12835 to i64
  %12837 = getelementptr inbounds i16, i16* %input43288, i64 %12836
  %12838 = load i16, i16* %12837, align 2, !tbaa !386
  %12839 = insertelement <4 x i16> %12834, i16 %12838, i32 1
  %12840 = extractelement <4 x i32> %12829, i32 2
  %12841 = sext i32 %12840 to i64
  %12842 = getelementptr inbounds i16, i16* %input43288, i64 %12841
  %12843 = load i16, i16* %12842, align 2, !tbaa !386
  %12844 = insertelement <4 x i16> %12839, i16 %12843, i32 2
  %12845 = extractelement <4 x i32> %12829, i32 3
  %12846 = sext i32 %12845 to i64
  %12847 = getelementptr inbounds i16, i16* %input43288, i64 %12846
  %12848 = load i16, i16* %12847, align 2, !tbaa !386
  %12849 = insertelement <4 x i16> %12844, i16 %12848, i32 3
  %12850 = add <4 x i16> %12687, %12633
  %12851 = add <4 x i16> %12850, %12714
  %12852 = add <4 x i16> %12851, %12741
  %12853 = add <4 x i16> %12852, %12822
  %12854 = add <4 x i16> %12714, %12660
  %12855 = add <4 x i16> %12854, %12768
  %12856 = add <4 x i16> %12855, %12795
  %12857 = add <4 x i16> %12856, %12849
  %12858 = shufflevector <4 x i16> %12853, <4 x i16> %12857, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %12859 = zext <8 x i16> %12858 to <8 x i32>
  %12860 = mul nuw <8 x i32> %12859, <i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429>
  %12861 = lshr <8 x i32> %12860, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %12862 = shufflevector <8 x i32> %12861, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %12863 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %12862)
  %12864 = shufflevector <8 x i32> %12861, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %12865 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %12864)
  %12866 = shufflevector <4 x i16> %12863, <4 x i16> %12865, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %12867 = add nsw i32 %blur_x.s0.x.v2.base.s96, -55
  %12868 = insertelement <4 x i32> undef, i32 %12867, i32 0
  %12869 = shufflevector <4 x i32> %12868, <4 x i32> undef, <4 x i32> zeroinitializer
  %12870 = add nsw <4 x i32> %12869, <i32 0, i32 1, i32 2, i32 3>
  %12871 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12870, <4 x i32> %90) #11
  %12872 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12871, <4 x i32> %92) #11
  %12873 = add <4 x i32> %12872, %12599
  %12874 = extractelement <4 x i32> %12873, i32 0
  %12875 = sext i32 %12874 to i64
  %12876 = getelementptr inbounds i16, i16* %input43288, i64 %12875
  %12877 = load i16, i16* %12876, align 2, !tbaa !386
  %12878 = insertelement <4 x i16> undef, i16 %12877, i32 0
  %12879 = extractelement <4 x i32> %12873, i32 1
  %12880 = sext i32 %12879 to i64
  %12881 = getelementptr inbounds i16, i16* %input43288, i64 %12880
  %12882 = load i16, i16* %12881, align 2, !tbaa !386
  %12883 = insertelement <4 x i16> %12878, i16 %12882, i32 1
  %12884 = extractelement <4 x i32> %12873, i32 2
  %12885 = sext i32 %12884 to i64
  %12886 = getelementptr inbounds i16, i16* %input43288, i64 %12885
  %12887 = load i16, i16* %12886, align 2, !tbaa !386
  %12888 = insertelement <4 x i16> %12883, i16 %12887, i32 2
  %12889 = extractelement <4 x i32> %12873, i32 3
  %12890 = sext i32 %12889 to i64
  %12891 = getelementptr inbounds i16, i16* %input43288, i64 %12890
  %12892 = load i16, i16* %12891, align 2, !tbaa !386
  %12893 = insertelement <4 x i16> %12888, i16 %12892, i32 3
  %12894 = add nsw i32 %blur_x.s0.x.v2.base.s96, -51
  %12895 = insertelement <4 x i32> undef, i32 %12894, i32 0
  %12896 = shufflevector <4 x i32> %12895, <4 x i32> undef, <4 x i32> zeroinitializer
  %12897 = add nsw <4 x i32> %12896, <i32 0, i32 1, i32 2, i32 3>
  %12898 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12897, <4 x i32> %90) #11
  %12899 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12898, <4 x i32> %92) #11
  %12900 = add <4 x i32> %12899, %12599
  %12901 = extractelement <4 x i32> %12900, i32 0
  %12902 = sext i32 %12901 to i64
  %12903 = getelementptr inbounds i16, i16* %input43288, i64 %12902
  %12904 = load i16, i16* %12903, align 2, !tbaa !386
  %12905 = insertelement <4 x i16> undef, i16 %12904, i32 0
  %12906 = extractelement <4 x i32> %12900, i32 1
  %12907 = sext i32 %12906 to i64
  %12908 = getelementptr inbounds i16, i16* %input43288, i64 %12907
  %12909 = load i16, i16* %12908, align 2, !tbaa !386
  %12910 = insertelement <4 x i16> %12905, i16 %12909, i32 1
  %12911 = extractelement <4 x i32> %12900, i32 2
  %12912 = sext i32 %12911 to i64
  %12913 = getelementptr inbounds i16, i16* %input43288, i64 %12912
  %12914 = load i16, i16* %12913, align 2, !tbaa !386
  %12915 = insertelement <4 x i16> %12910, i16 %12914, i32 2
  %12916 = extractelement <4 x i32> %12900, i32 3
  %12917 = sext i32 %12916 to i64
  %12918 = getelementptr inbounds i16, i16* %input43288, i64 %12917
  %12919 = load i16, i16* %12918, align 2, !tbaa !386
  %12920 = insertelement <4 x i16> %12915, i16 %12919, i32 3
  %12921 = add nsw i32 %blur_x.s0.x.v2.base.s96, -52
  %12922 = insertelement <4 x i32> undef, i32 %12921, i32 0
  %12923 = shufflevector <4 x i32> %12922, <4 x i32> undef, <4 x i32> zeroinitializer
  %12924 = add nsw <4 x i32> %12923, <i32 0, i32 1, i32 2, i32 3>
  %12925 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12924, <4 x i32> %90) #11
  %12926 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12925, <4 x i32> %92) #11
  %12927 = add <4 x i32> %12926, %12599
  %12928 = extractelement <4 x i32> %12927, i32 0
  %12929 = sext i32 %12928 to i64
  %12930 = getelementptr inbounds i16, i16* %input43288, i64 %12929
  %12931 = load i16, i16* %12930, align 2, !tbaa !386
  %12932 = insertelement <4 x i16> undef, i16 %12931, i32 0
  %12933 = extractelement <4 x i32> %12927, i32 1
  %12934 = sext i32 %12933 to i64
  %12935 = getelementptr inbounds i16, i16* %input43288, i64 %12934
  %12936 = load i16, i16* %12935, align 2, !tbaa !386
  %12937 = insertelement <4 x i16> %12932, i16 %12936, i32 1
  %12938 = extractelement <4 x i32> %12927, i32 2
  %12939 = sext i32 %12938 to i64
  %12940 = getelementptr inbounds i16, i16* %input43288, i64 %12939
  %12941 = load i16, i16* %12940, align 2, !tbaa !386
  %12942 = insertelement <4 x i16> %12937, i16 %12941, i32 2
  %12943 = extractelement <4 x i32> %12927, i32 3
  %12944 = sext i32 %12943 to i64
  %12945 = getelementptr inbounds i16, i16* %input43288, i64 %12944
  %12946 = load i16, i16* %12945, align 2, !tbaa !386
  %12947 = insertelement <4 x i16> %12942, i16 %12946, i32 3
  %12948 = add nsw i32 %blur_x.s0.x.v2.base.s96, -54
  %12949 = insertelement <4 x i32> undef, i32 %12948, i32 0
  %12950 = shufflevector <4 x i32> %12949, <4 x i32> undef, <4 x i32> zeroinitializer
  %12951 = add nsw <4 x i32> %12950, <i32 0, i32 1, i32 2, i32 3>
  %12952 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12951, <4 x i32> %90) #11
  %12953 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12952, <4 x i32> %92) #11
  %12954 = add <4 x i32> %12953, %12599
  %12955 = extractelement <4 x i32> %12954, i32 0
  %12956 = sext i32 %12955 to i64
  %12957 = getelementptr inbounds i16, i16* %input43288, i64 %12956
  %12958 = load i16, i16* %12957, align 2, !tbaa !386
  %12959 = insertelement <4 x i16> undef, i16 %12958, i32 0
  %12960 = extractelement <4 x i32> %12954, i32 1
  %12961 = sext i32 %12960 to i64
  %12962 = getelementptr inbounds i16, i16* %input43288, i64 %12961
  %12963 = load i16, i16* %12962, align 2, !tbaa !386
  %12964 = insertelement <4 x i16> %12959, i16 %12963, i32 1
  %12965 = extractelement <4 x i32> %12954, i32 2
  %12966 = sext i32 %12965 to i64
  %12967 = getelementptr inbounds i16, i16* %input43288, i64 %12966
  %12968 = load i16, i16* %12967, align 2, !tbaa !386
  %12969 = insertelement <4 x i16> %12964, i16 %12968, i32 2
  %12970 = extractelement <4 x i32> %12954, i32 3
  %12971 = sext i32 %12970 to i64
  %12972 = getelementptr inbounds i16, i16* %input43288, i64 %12971
  %12973 = load i16, i16* %12972, align 2, !tbaa !386
  %12974 = insertelement <4 x i16> %12969, i16 %12973, i32 3
  %12975 = add nsw i32 %blur_x.s0.x.v2.base.s96, -50
  %12976 = insertelement <4 x i32> undef, i32 %12975, i32 0
  %12977 = shufflevector <4 x i32> %12976, <4 x i32> undef, <4 x i32> zeroinitializer
  %12978 = add nsw <4 x i32> %12977, <i32 0, i32 1, i32 2, i32 3>
  %12979 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12978, <4 x i32> %90) #11
  %12980 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12979, <4 x i32> %92) #11
  %12981 = add <4 x i32> %12980, %12599
  %12982 = extractelement <4 x i32> %12981, i32 0
  %12983 = sext i32 %12982 to i64
  %12984 = getelementptr inbounds i16, i16* %input43288, i64 %12983
  %12985 = load i16, i16* %12984, align 2, !tbaa !386
  %12986 = insertelement <4 x i16> undef, i16 %12985, i32 0
  %12987 = extractelement <4 x i32> %12981, i32 1
  %12988 = sext i32 %12987 to i64
  %12989 = getelementptr inbounds i16, i16* %input43288, i64 %12988
  %12990 = load i16, i16* %12989, align 2, !tbaa !386
  %12991 = insertelement <4 x i16> %12986, i16 %12990, i32 1
  %12992 = extractelement <4 x i32> %12981, i32 2
  %12993 = sext i32 %12992 to i64
  %12994 = getelementptr inbounds i16, i16* %input43288, i64 %12993
  %12995 = load i16, i16* %12994, align 2, !tbaa !386
  %12996 = insertelement <4 x i16> %12991, i16 %12995, i32 2
  %12997 = extractelement <4 x i32> %12981, i32 3
  %12998 = sext i32 %12997 to i64
  %12999 = getelementptr inbounds i16, i16* %input43288, i64 %12998
  %13000 = load i16, i16* %12999, align 2, !tbaa !386
  %13001 = insertelement <4 x i16> %12996, i16 %13000, i32 3
  %13002 = add nsw i32 %blur_x.s0.x.v2.base.s96, -48
  %13003 = insertelement <4 x i32> undef, i32 %13002, i32 0
  %13004 = shufflevector <4 x i32> %13003, <4 x i32> undef, <4 x i32> zeroinitializer
  %13005 = add nsw <4 x i32> %13004, <i32 0, i32 1, i32 2, i32 3>
  %13006 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13005, <4 x i32> %90) #11
  %13007 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13006, <4 x i32> %92) #11
  %13008 = add <4 x i32> %13007, %12599
  %13009 = extractelement <4 x i32> %13008, i32 0
  %13010 = sext i32 %13009 to i64
  %13011 = getelementptr inbounds i16, i16* %input43288, i64 %13010
  %13012 = load i16, i16* %13011, align 2, !tbaa !386
  %13013 = insertelement <4 x i16> undef, i16 %13012, i32 0
  %13014 = extractelement <4 x i32> %13008, i32 1
  %13015 = sext i32 %13014 to i64
  %13016 = getelementptr inbounds i16, i16* %input43288, i64 %13015
  %13017 = load i16, i16* %13016, align 2, !tbaa !386
  %13018 = insertelement <4 x i16> %13013, i16 %13017, i32 1
  %13019 = extractelement <4 x i32> %13008, i32 2
  %13020 = sext i32 %13019 to i64
  %13021 = getelementptr inbounds i16, i16* %input43288, i64 %13020
  %13022 = load i16, i16* %13021, align 2, !tbaa !386
  %13023 = insertelement <4 x i16> %13018, i16 %13022, i32 2
  %13024 = extractelement <4 x i32> %13008, i32 3
  %13025 = sext i32 %13024 to i64
  %13026 = getelementptr inbounds i16, i16* %input43288, i64 %13025
  %13027 = load i16, i16* %13026, align 2, !tbaa !386
  %13028 = insertelement <4 x i16> %13023, i16 %13027, i32 3
  %13029 = add nsw i32 %blur_x.s0.x.v2.base.s96, -53
  %13030 = insertelement <4 x i32> undef, i32 %13029, i32 0
  %13031 = shufflevector <4 x i32> %13030, <4 x i32> undef, <4 x i32> zeroinitializer
  %13032 = add nsw <4 x i32> %13031, <i32 0, i32 1, i32 2, i32 3>
  %13033 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13032, <4 x i32> %90) #11
  %13034 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13033, <4 x i32> %92) #11
  %13035 = add <4 x i32> %13034, %12599
  %13036 = extractelement <4 x i32> %13035, i32 0
  %13037 = sext i32 %13036 to i64
  %13038 = getelementptr inbounds i16, i16* %input43288, i64 %13037
  %13039 = load i16, i16* %13038, align 2, !tbaa !386
  %13040 = insertelement <4 x i16> undef, i16 %13039, i32 0
  %13041 = extractelement <4 x i32> %13035, i32 1
  %13042 = sext i32 %13041 to i64
  %13043 = getelementptr inbounds i16, i16* %input43288, i64 %13042
  %13044 = load i16, i16* %13043, align 2, !tbaa !386
  %13045 = insertelement <4 x i16> %13040, i16 %13044, i32 1
  %13046 = extractelement <4 x i32> %13035, i32 2
  %13047 = sext i32 %13046 to i64
  %13048 = getelementptr inbounds i16, i16* %input43288, i64 %13047
  %13049 = load i16, i16* %13048, align 2, !tbaa !386
  %13050 = insertelement <4 x i16> %13045, i16 %13049, i32 2
  %13051 = extractelement <4 x i32> %13035, i32 3
  %13052 = sext i32 %13051 to i64
  %13053 = getelementptr inbounds i16, i16* %input43288, i64 %13052
  %13054 = load i16, i16* %13053, align 2, !tbaa !386
  %13055 = insertelement <4 x i16> %13050, i16 %13054, i32 3
  %13056 = add nsw i32 %blur_x.s0.x.v2.base.s96, -49
  %13057 = insertelement <4 x i32> undef, i32 %13056, i32 0
  %13058 = shufflevector <4 x i32> %13057, <4 x i32> undef, <4 x i32> zeroinitializer
  %13059 = add nsw <4 x i32> %13058, <i32 0, i32 1, i32 2, i32 3>
  %13060 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13059, <4 x i32> %90) #11
  %13061 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13060, <4 x i32> %92) #11
  %13062 = add <4 x i32> %13061, %12599
  %13063 = extractelement <4 x i32> %13062, i32 0
  %13064 = sext i32 %13063 to i64
  %13065 = getelementptr inbounds i16, i16* %input43288, i64 %13064
  %13066 = load i16, i16* %13065, align 2, !tbaa !386
  %13067 = insertelement <4 x i16> undef, i16 %13066, i32 0
  %13068 = extractelement <4 x i32> %13062, i32 1
  %13069 = sext i32 %13068 to i64
  %13070 = getelementptr inbounds i16, i16* %input43288, i64 %13069
  %13071 = load i16, i16* %13070, align 2, !tbaa !386
  %13072 = insertelement <4 x i16> %13067, i16 %13071, i32 1
  %13073 = extractelement <4 x i32> %13062, i32 2
  %13074 = sext i32 %13073 to i64
  %13075 = getelementptr inbounds i16, i16* %input43288, i64 %13074
  %13076 = load i16, i16* %13075, align 2, !tbaa !386
  %13077 = insertelement <4 x i16> %13072, i16 %13076, i32 2
  %13078 = extractelement <4 x i32> %13062, i32 3
  %13079 = sext i32 %13078 to i64
  %13080 = getelementptr inbounds i16, i16* %input43288, i64 %13079
  %13081 = load i16, i16* %13080, align 2, !tbaa !386
  %13082 = insertelement <4 x i16> %13077, i16 %13081, i32 3
  %13083 = add <4 x i16> %12893, %12795
  %13084 = add <4 x i16> %13083, %12947
  %13085 = add <4 x i16> %13084, %12974
  %13086 = add <4 x i16> %13085, %13055
  %13087 = add <4 x i16> %12947, %12920
  %13088 = add <4 x i16> %13087, %13001
  %13089 = add <4 x i16> %13088, %13028
  %13090 = add <4 x i16> %13089, %13082
  %13091 = shufflevector <4 x i16> %13086, <4 x i16> %13090, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %13092 = zext <8 x i16> %13091 to <8 x i32>
  %13093 = mul nuw <8 x i32> %13092, <i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429>
  %13094 = lshr <8 x i32> %13093, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %13095 = shufflevector <8 x i32> %13094, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %13096 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %13095)
  %13097 = shufflevector <8 x i32> %13094, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %13098 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %13097)
  %13099 = shufflevector <4 x i16> %13096, <4 x i16> %13098, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %13100 = add nsw i32 %blur_x.s0.x.v2.base.s96, -47
  %13101 = insertelement <4 x i32> undef, i32 %13100, i32 0
  %13102 = shufflevector <4 x i32> %13101, <4 x i32> undef, <4 x i32> zeroinitializer
  %13103 = add nsw <4 x i32> %13102, <i32 0, i32 1, i32 2, i32 3>
  %13104 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13103, <4 x i32> %90) #11
  %13105 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13104, <4 x i32> %92) #11
  %13106 = add <4 x i32> %13105, %12599
  %13107 = extractelement <4 x i32> %13106, i32 0
  %13108 = sext i32 %13107 to i64
  %13109 = getelementptr inbounds i16, i16* %input43288, i64 %13108
  %13110 = load i16, i16* %13109, align 2, !tbaa !386
  %13111 = insertelement <4 x i16> undef, i16 %13110, i32 0
  %13112 = extractelement <4 x i32> %13106, i32 1
  %13113 = sext i32 %13112 to i64
  %13114 = getelementptr inbounds i16, i16* %input43288, i64 %13113
  %13115 = load i16, i16* %13114, align 2, !tbaa !386
  %13116 = insertelement <4 x i16> %13111, i16 %13115, i32 1
  %13117 = extractelement <4 x i32> %13106, i32 2
  %13118 = sext i32 %13117 to i64
  %13119 = getelementptr inbounds i16, i16* %input43288, i64 %13118
  %13120 = load i16, i16* %13119, align 2, !tbaa !386
  %13121 = insertelement <4 x i16> %13116, i16 %13120, i32 2
  %13122 = extractelement <4 x i32> %13106, i32 3
  %13123 = sext i32 %13122 to i64
  %13124 = getelementptr inbounds i16, i16* %input43288, i64 %13123
  %13125 = load i16, i16* %13124, align 2, !tbaa !386
  %13126 = insertelement <4 x i16> %13121, i16 %13125, i32 3
  %13127 = add nsw i32 %blur_x.s0.x.v2.base.s96, -43
  %13128 = insertelement <4 x i32> undef, i32 %13127, i32 0
  %13129 = shufflevector <4 x i32> %13128, <4 x i32> undef, <4 x i32> zeroinitializer
  %13130 = add nsw <4 x i32> %13129, <i32 0, i32 1, i32 2, i32 3>
  %13131 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13130, <4 x i32> %90) #11
  %13132 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13131, <4 x i32> %92) #11
  %13133 = add <4 x i32> %13132, %12599
  %13134 = extractelement <4 x i32> %13133, i32 0
  %13135 = sext i32 %13134 to i64
  %13136 = getelementptr inbounds i16, i16* %input43288, i64 %13135
  %13137 = load i16, i16* %13136, align 2, !tbaa !386
  %13138 = insertelement <4 x i16> undef, i16 %13137, i32 0
  %13139 = extractelement <4 x i32> %13133, i32 1
  %13140 = sext i32 %13139 to i64
  %13141 = getelementptr inbounds i16, i16* %input43288, i64 %13140
  %13142 = load i16, i16* %13141, align 2, !tbaa !386
  %13143 = insertelement <4 x i16> %13138, i16 %13142, i32 1
  %13144 = extractelement <4 x i32> %13133, i32 2
  %13145 = sext i32 %13144 to i64
  %13146 = getelementptr inbounds i16, i16* %input43288, i64 %13145
  %13147 = load i16, i16* %13146, align 2, !tbaa !386
  %13148 = insertelement <4 x i16> %13143, i16 %13147, i32 2
  %13149 = extractelement <4 x i32> %13133, i32 3
  %13150 = sext i32 %13149 to i64
  %13151 = getelementptr inbounds i16, i16* %input43288, i64 %13150
  %13152 = load i16, i16* %13151, align 2, !tbaa !386
  %13153 = insertelement <4 x i16> %13148, i16 %13152, i32 3
  %13154 = add nsw i32 %blur_x.s0.x.v2.base.s96, -44
  %13155 = insertelement <4 x i32> undef, i32 %13154, i32 0
  %13156 = shufflevector <4 x i32> %13155, <4 x i32> undef, <4 x i32> zeroinitializer
  %13157 = add nsw <4 x i32> %13156, <i32 0, i32 1, i32 2, i32 3>
  %13158 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13157, <4 x i32> %90) #11
  %13159 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13158, <4 x i32> %92) #11
  %13160 = add <4 x i32> %13159, %12599
  %13161 = extractelement <4 x i32> %13160, i32 0
  %13162 = sext i32 %13161 to i64
  %13163 = getelementptr inbounds i16, i16* %input43288, i64 %13162
  %13164 = load i16, i16* %13163, align 2, !tbaa !386
  %13165 = insertelement <4 x i16> undef, i16 %13164, i32 0
  %13166 = extractelement <4 x i32> %13160, i32 1
  %13167 = sext i32 %13166 to i64
  %13168 = getelementptr inbounds i16, i16* %input43288, i64 %13167
  %13169 = load i16, i16* %13168, align 2, !tbaa !386
  %13170 = insertelement <4 x i16> %13165, i16 %13169, i32 1
  %13171 = extractelement <4 x i32> %13160, i32 2
  %13172 = sext i32 %13171 to i64
  %13173 = getelementptr inbounds i16, i16* %input43288, i64 %13172
  %13174 = load i16, i16* %13173, align 2, !tbaa !386
  %13175 = insertelement <4 x i16> %13170, i16 %13174, i32 2
  %13176 = extractelement <4 x i32> %13160, i32 3
  %13177 = sext i32 %13176 to i64
  %13178 = getelementptr inbounds i16, i16* %input43288, i64 %13177
  %13179 = load i16, i16* %13178, align 2, !tbaa !386
  %13180 = insertelement <4 x i16> %13175, i16 %13179, i32 3
  %13181 = add nsw i32 %blur_x.s0.x.v2.base.s96, -46
  %13182 = insertelement <4 x i32> undef, i32 %13181, i32 0
  %13183 = shufflevector <4 x i32> %13182, <4 x i32> undef, <4 x i32> zeroinitializer
  %13184 = add nsw <4 x i32> %13183, <i32 0, i32 1, i32 2, i32 3>
  %13185 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13184, <4 x i32> %90) #11
  %13186 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13185, <4 x i32> %92) #11
  %13187 = add <4 x i32> %13186, %12599
  %13188 = extractelement <4 x i32> %13187, i32 0
  %13189 = sext i32 %13188 to i64
  %13190 = getelementptr inbounds i16, i16* %input43288, i64 %13189
  %13191 = load i16, i16* %13190, align 2, !tbaa !386
  %13192 = insertelement <4 x i16> undef, i16 %13191, i32 0
  %13193 = extractelement <4 x i32> %13187, i32 1
  %13194 = sext i32 %13193 to i64
  %13195 = getelementptr inbounds i16, i16* %input43288, i64 %13194
  %13196 = load i16, i16* %13195, align 2, !tbaa !386
  %13197 = insertelement <4 x i16> %13192, i16 %13196, i32 1
  %13198 = extractelement <4 x i32> %13187, i32 2
  %13199 = sext i32 %13198 to i64
  %13200 = getelementptr inbounds i16, i16* %input43288, i64 %13199
  %13201 = load i16, i16* %13200, align 2, !tbaa !386
  %13202 = insertelement <4 x i16> %13197, i16 %13201, i32 2
  %13203 = extractelement <4 x i32> %13187, i32 3
  %13204 = sext i32 %13203 to i64
  %13205 = getelementptr inbounds i16, i16* %input43288, i64 %13204
  %13206 = load i16, i16* %13205, align 2, !tbaa !386
  %13207 = insertelement <4 x i16> %13202, i16 %13206, i32 3
  %13208 = add nsw i32 %blur_x.s0.x.v2.base.s96, -42
  %13209 = insertelement <4 x i32> undef, i32 %13208, i32 0
  %13210 = shufflevector <4 x i32> %13209, <4 x i32> undef, <4 x i32> zeroinitializer
  %13211 = add nsw <4 x i32> %13210, <i32 0, i32 1, i32 2, i32 3>
  %13212 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13211, <4 x i32> %90) #11
  %13213 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13212, <4 x i32> %92) #11
  %13214 = add <4 x i32> %13213, %12599
  %13215 = extractelement <4 x i32> %13214, i32 0
  %13216 = sext i32 %13215 to i64
  %13217 = getelementptr inbounds i16, i16* %input43288, i64 %13216
  %13218 = load i16, i16* %13217, align 2, !tbaa !386
  %13219 = insertelement <4 x i16> undef, i16 %13218, i32 0
  %13220 = extractelement <4 x i32> %13214, i32 1
  %13221 = sext i32 %13220 to i64
  %13222 = getelementptr inbounds i16, i16* %input43288, i64 %13221
  %13223 = load i16, i16* %13222, align 2, !tbaa !386
  %13224 = insertelement <4 x i16> %13219, i16 %13223, i32 1
  %13225 = extractelement <4 x i32> %13214, i32 2
  %13226 = sext i32 %13225 to i64
  %13227 = getelementptr inbounds i16, i16* %input43288, i64 %13226
  %13228 = load i16, i16* %13227, align 2, !tbaa !386
  %13229 = insertelement <4 x i16> %13224, i16 %13228, i32 2
  %13230 = extractelement <4 x i32> %13214, i32 3
  %13231 = sext i32 %13230 to i64
  %13232 = getelementptr inbounds i16, i16* %input43288, i64 %13231
  %13233 = load i16, i16* %13232, align 2, !tbaa !386
  %13234 = insertelement <4 x i16> %13229, i16 %13233, i32 3
  %13235 = add nsw i32 %blur_x.s0.x.v2.base.s96, -40
  %13236 = insertelement <4 x i32> undef, i32 %13235, i32 0
  %13237 = shufflevector <4 x i32> %13236, <4 x i32> undef, <4 x i32> zeroinitializer
  %13238 = add nsw <4 x i32> %13237, <i32 0, i32 1, i32 2, i32 3>
  %13239 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13238, <4 x i32> %90) #11
  %13240 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13239, <4 x i32> %92) #11
  %13241 = add <4 x i32> %13240, %12599
  %13242 = extractelement <4 x i32> %13241, i32 0
  %13243 = sext i32 %13242 to i64
  %13244 = getelementptr inbounds i16, i16* %input43288, i64 %13243
  %13245 = load i16, i16* %13244, align 2, !tbaa !386
  %13246 = insertelement <4 x i16> undef, i16 %13245, i32 0
  %13247 = extractelement <4 x i32> %13241, i32 1
  %13248 = sext i32 %13247 to i64
  %13249 = getelementptr inbounds i16, i16* %input43288, i64 %13248
  %13250 = load i16, i16* %13249, align 2, !tbaa !386
  %13251 = insertelement <4 x i16> %13246, i16 %13250, i32 1
  %13252 = extractelement <4 x i32> %13241, i32 2
  %13253 = sext i32 %13252 to i64
  %13254 = getelementptr inbounds i16, i16* %input43288, i64 %13253
  %13255 = load i16, i16* %13254, align 2, !tbaa !386
  %13256 = insertelement <4 x i16> %13251, i16 %13255, i32 2
  %13257 = extractelement <4 x i32> %13241, i32 3
  %13258 = sext i32 %13257 to i64
  %13259 = getelementptr inbounds i16, i16* %input43288, i64 %13258
  %13260 = load i16, i16* %13259, align 2, !tbaa !386
  %13261 = insertelement <4 x i16> %13256, i16 %13260, i32 3
  %13262 = add nsw i32 %blur_x.s0.x.v2.base.s96, -45
  %13263 = insertelement <4 x i32> undef, i32 %13262, i32 0
  %13264 = shufflevector <4 x i32> %13263, <4 x i32> undef, <4 x i32> zeroinitializer
  %13265 = add nsw <4 x i32> %13264, <i32 0, i32 1, i32 2, i32 3>
  %13266 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13265, <4 x i32> %90) #11
  %13267 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13266, <4 x i32> %92) #11
  %13268 = add <4 x i32> %13267, %12599
  %13269 = extractelement <4 x i32> %13268, i32 0
  %13270 = sext i32 %13269 to i64
  %13271 = getelementptr inbounds i16, i16* %input43288, i64 %13270
  %13272 = load i16, i16* %13271, align 2, !tbaa !386
  %13273 = insertelement <4 x i16> undef, i16 %13272, i32 0
  %13274 = extractelement <4 x i32> %13268, i32 1
  %13275 = sext i32 %13274 to i64
  %13276 = getelementptr inbounds i16, i16* %input43288, i64 %13275
  %13277 = load i16, i16* %13276, align 2, !tbaa !386
  %13278 = insertelement <4 x i16> %13273, i16 %13277, i32 1
  %13279 = extractelement <4 x i32> %13268, i32 2
  %13280 = sext i32 %13279 to i64
  %13281 = getelementptr inbounds i16, i16* %input43288, i64 %13280
  %13282 = load i16, i16* %13281, align 2, !tbaa !386
  %13283 = insertelement <4 x i16> %13278, i16 %13282, i32 2
  %13284 = extractelement <4 x i32> %13268, i32 3
  %13285 = sext i32 %13284 to i64
  %13286 = getelementptr inbounds i16, i16* %input43288, i64 %13285
  %13287 = load i16, i16* %13286, align 2, !tbaa !386
  %13288 = insertelement <4 x i16> %13283, i16 %13287, i32 3
  %13289 = add nsw i32 %blur_x.s0.x.v2.base.s96, -41
  %13290 = insertelement <4 x i32> undef, i32 %13289, i32 0
  %13291 = shufflevector <4 x i32> %13290, <4 x i32> undef, <4 x i32> zeroinitializer
  %13292 = add nsw <4 x i32> %13291, <i32 0, i32 1, i32 2, i32 3>
  %13293 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13292, <4 x i32> %90) #11
  %13294 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13293, <4 x i32> %92) #11
  %13295 = add <4 x i32> %13294, %12599
  %13296 = extractelement <4 x i32> %13295, i32 0
  %13297 = sext i32 %13296 to i64
  %13298 = getelementptr inbounds i16, i16* %input43288, i64 %13297
  %13299 = load i16, i16* %13298, align 2, !tbaa !386
  %13300 = insertelement <4 x i16> undef, i16 %13299, i32 0
  %13301 = extractelement <4 x i32> %13295, i32 1
  %13302 = sext i32 %13301 to i64
  %13303 = getelementptr inbounds i16, i16* %input43288, i64 %13302
  %13304 = load i16, i16* %13303, align 2, !tbaa !386
  %13305 = insertelement <4 x i16> %13300, i16 %13304, i32 1
  %13306 = extractelement <4 x i32> %13295, i32 2
  %13307 = sext i32 %13306 to i64
  %13308 = getelementptr inbounds i16, i16* %input43288, i64 %13307
  %13309 = load i16, i16* %13308, align 2, !tbaa !386
  %13310 = insertelement <4 x i16> %13305, i16 %13309, i32 2
  %13311 = extractelement <4 x i32> %13295, i32 3
  %13312 = sext i32 %13311 to i64
  %13313 = getelementptr inbounds i16, i16* %input43288, i64 %13312
  %13314 = load i16, i16* %13313, align 2, !tbaa !386
  %13315 = insertelement <4 x i16> %13310, i16 %13314, i32 3
  %13316 = add <4 x i16> %13126, %13028
  %13317 = add <4 x i16> %13316, %13180
  %13318 = add <4 x i16> %13317, %13207
  %13319 = add <4 x i16> %13318, %13288
  %13320 = add <4 x i16> %13180, %13153
  %13321 = add <4 x i16> %13320, %13234
  %13322 = add <4 x i16> %13321, %13261
  %13323 = add <4 x i16> %13322, %13315
  %13324 = shufflevector <4 x i16> %13319, <4 x i16> %13323, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %13325 = zext <8 x i16> %13324 to <8 x i32>
  %13326 = mul nuw <8 x i32> %13325, <i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429>
  %13327 = lshr <8 x i32> %13326, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %13328 = shufflevector <8 x i32> %13327, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %13329 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %13328)
  %13330 = shufflevector <8 x i32> %13327, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %13331 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %13330)
  %13332 = shufflevector <4 x i16> %13329, <4 x i16> %13331, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %13333 = add nsw i32 %blur_x.s0.x.v2.base.s96, -39
  %13334 = insertelement <4 x i32> undef, i32 %13333, i32 0
  %13335 = shufflevector <4 x i32> %13334, <4 x i32> undef, <4 x i32> zeroinitializer
  %13336 = add nsw <4 x i32> %13335, <i32 0, i32 1, i32 2, i32 3>
  %13337 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13336, <4 x i32> %90) #11
  %13338 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13337, <4 x i32> %92) #11
  %13339 = add <4 x i32> %13338, %12599
  %13340 = extractelement <4 x i32> %13339, i32 0
  %13341 = sext i32 %13340 to i64
  %13342 = getelementptr inbounds i16, i16* %input43288, i64 %13341
  %13343 = load i16, i16* %13342, align 2, !tbaa !386
  %13344 = insertelement <4 x i16> undef, i16 %13343, i32 0
  %13345 = extractelement <4 x i32> %13339, i32 1
  %13346 = sext i32 %13345 to i64
  %13347 = getelementptr inbounds i16, i16* %input43288, i64 %13346
  %13348 = load i16, i16* %13347, align 2, !tbaa !386
  %13349 = insertelement <4 x i16> %13344, i16 %13348, i32 1
  %13350 = extractelement <4 x i32> %13339, i32 2
  %13351 = sext i32 %13350 to i64
  %13352 = getelementptr inbounds i16, i16* %input43288, i64 %13351
  %13353 = load i16, i16* %13352, align 2, !tbaa !386
  %13354 = insertelement <4 x i16> %13349, i16 %13353, i32 2
  %13355 = extractelement <4 x i32> %13339, i32 3
  %13356 = sext i32 %13355 to i64
  %13357 = getelementptr inbounds i16, i16* %input43288, i64 %13356
  %13358 = load i16, i16* %13357, align 2, !tbaa !386
  %13359 = insertelement <4 x i16> %13354, i16 %13358, i32 3
  %13360 = add nsw i32 %blur_x.s0.x.v2.base.s96, -35
  %13361 = insertelement <4 x i32> undef, i32 %13360, i32 0
  %13362 = shufflevector <4 x i32> %13361, <4 x i32> undef, <4 x i32> zeroinitializer
  %13363 = add nsw <4 x i32> %13362, <i32 0, i32 1, i32 2, i32 3>
  %13364 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13363, <4 x i32> %90) #11
  %13365 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13364, <4 x i32> %92) #11
  %13366 = add <4 x i32> %13365, %12599
  %13367 = extractelement <4 x i32> %13366, i32 0
  %13368 = sext i32 %13367 to i64
  %13369 = getelementptr inbounds i16, i16* %input43288, i64 %13368
  %13370 = load i16, i16* %13369, align 2, !tbaa !386
  %13371 = insertelement <4 x i16> undef, i16 %13370, i32 0
  %13372 = extractelement <4 x i32> %13366, i32 1
  %13373 = sext i32 %13372 to i64
  %13374 = getelementptr inbounds i16, i16* %input43288, i64 %13373
  %13375 = load i16, i16* %13374, align 2, !tbaa !386
  %13376 = insertelement <4 x i16> %13371, i16 %13375, i32 1
  %13377 = extractelement <4 x i32> %13366, i32 2
  %13378 = sext i32 %13377 to i64
  %13379 = getelementptr inbounds i16, i16* %input43288, i64 %13378
  %13380 = load i16, i16* %13379, align 2, !tbaa !386
  %13381 = insertelement <4 x i16> %13376, i16 %13380, i32 2
  %13382 = extractelement <4 x i32> %13366, i32 3
  %13383 = sext i32 %13382 to i64
  %13384 = getelementptr inbounds i16, i16* %input43288, i64 %13383
  %13385 = load i16, i16* %13384, align 2, !tbaa !386
  %13386 = insertelement <4 x i16> %13381, i16 %13385, i32 3
  %13387 = add nsw i32 %blur_x.s0.x.v2.base.s96, -36
  %13388 = insertelement <4 x i32> undef, i32 %13387, i32 0
  %13389 = shufflevector <4 x i32> %13388, <4 x i32> undef, <4 x i32> zeroinitializer
  %13390 = add nsw <4 x i32> %13389, <i32 0, i32 1, i32 2, i32 3>
  %13391 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13390, <4 x i32> %90) #11
  %13392 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13391, <4 x i32> %92) #11
  %13393 = add <4 x i32> %13392, %12599
  %13394 = extractelement <4 x i32> %13393, i32 0
  %13395 = sext i32 %13394 to i64
  %13396 = getelementptr inbounds i16, i16* %input43288, i64 %13395
  %13397 = load i16, i16* %13396, align 2, !tbaa !386
  %13398 = insertelement <4 x i16> undef, i16 %13397, i32 0
  %13399 = extractelement <4 x i32> %13393, i32 1
  %13400 = sext i32 %13399 to i64
  %13401 = getelementptr inbounds i16, i16* %input43288, i64 %13400
  %13402 = load i16, i16* %13401, align 2, !tbaa !386
  %13403 = insertelement <4 x i16> %13398, i16 %13402, i32 1
  %13404 = extractelement <4 x i32> %13393, i32 2
  %13405 = sext i32 %13404 to i64
  %13406 = getelementptr inbounds i16, i16* %input43288, i64 %13405
  %13407 = load i16, i16* %13406, align 2, !tbaa !386
  %13408 = insertelement <4 x i16> %13403, i16 %13407, i32 2
  %13409 = extractelement <4 x i32> %13393, i32 3
  %13410 = sext i32 %13409 to i64
  %13411 = getelementptr inbounds i16, i16* %input43288, i64 %13410
  %13412 = load i16, i16* %13411, align 2, !tbaa !386
  %13413 = insertelement <4 x i16> %13408, i16 %13412, i32 3
  %13414 = add nsw i32 %blur_x.s0.x.v2.base.s96, -38
  %13415 = insertelement <4 x i32> undef, i32 %13414, i32 0
  %13416 = shufflevector <4 x i32> %13415, <4 x i32> undef, <4 x i32> zeroinitializer
  %13417 = add nsw <4 x i32> %13416, <i32 0, i32 1, i32 2, i32 3>
  %13418 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13417, <4 x i32> %90) #11
  %13419 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13418, <4 x i32> %92) #11
  %13420 = add <4 x i32> %13419, %12599
  %13421 = extractelement <4 x i32> %13420, i32 0
  %13422 = sext i32 %13421 to i64
  %13423 = getelementptr inbounds i16, i16* %input43288, i64 %13422
  %13424 = load i16, i16* %13423, align 2, !tbaa !386
  %13425 = insertelement <4 x i16> undef, i16 %13424, i32 0
  %13426 = extractelement <4 x i32> %13420, i32 1
  %13427 = sext i32 %13426 to i64
  %13428 = getelementptr inbounds i16, i16* %input43288, i64 %13427
  %13429 = load i16, i16* %13428, align 2, !tbaa !386
  %13430 = insertelement <4 x i16> %13425, i16 %13429, i32 1
  %13431 = extractelement <4 x i32> %13420, i32 2
  %13432 = sext i32 %13431 to i64
  %13433 = getelementptr inbounds i16, i16* %input43288, i64 %13432
  %13434 = load i16, i16* %13433, align 2, !tbaa !386
  %13435 = insertelement <4 x i16> %13430, i16 %13434, i32 2
  %13436 = extractelement <4 x i32> %13420, i32 3
  %13437 = sext i32 %13436 to i64
  %13438 = getelementptr inbounds i16, i16* %input43288, i64 %13437
  %13439 = load i16, i16* %13438, align 2, !tbaa !386
  %13440 = insertelement <4 x i16> %13435, i16 %13439, i32 3
  %13441 = add nsw i32 %blur_x.s0.x.v2.base.s96, -34
  %13442 = insertelement <4 x i32> undef, i32 %13441, i32 0
  %13443 = shufflevector <4 x i32> %13442, <4 x i32> undef, <4 x i32> zeroinitializer
  %13444 = add nsw <4 x i32> %13443, <i32 0, i32 1, i32 2, i32 3>
  %13445 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13444, <4 x i32> %90) #11
  %13446 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13445, <4 x i32> %92) #11
  %13447 = add <4 x i32> %13446, %12599
  %13448 = extractelement <4 x i32> %13447, i32 0
  %13449 = sext i32 %13448 to i64
  %13450 = getelementptr inbounds i16, i16* %input43288, i64 %13449
  %13451 = load i16, i16* %13450, align 2, !tbaa !386
  %13452 = insertelement <4 x i16> undef, i16 %13451, i32 0
  %13453 = extractelement <4 x i32> %13447, i32 1
  %13454 = sext i32 %13453 to i64
  %13455 = getelementptr inbounds i16, i16* %input43288, i64 %13454
  %13456 = load i16, i16* %13455, align 2, !tbaa !386
  %13457 = insertelement <4 x i16> %13452, i16 %13456, i32 1
  %13458 = extractelement <4 x i32> %13447, i32 2
  %13459 = sext i32 %13458 to i64
  %13460 = getelementptr inbounds i16, i16* %input43288, i64 %13459
  %13461 = load i16, i16* %13460, align 2, !tbaa !386
  %13462 = insertelement <4 x i16> %13457, i16 %13461, i32 2
  %13463 = extractelement <4 x i32> %13447, i32 3
  %13464 = sext i32 %13463 to i64
  %13465 = getelementptr inbounds i16, i16* %input43288, i64 %13464
  %13466 = load i16, i16* %13465, align 2, !tbaa !386
  %13467 = insertelement <4 x i16> %13462, i16 %13466, i32 3
  %13468 = add nsw i32 %blur_x.s0.x.v2.base.s96, -32
  %13469 = insertelement <4 x i32> undef, i32 %13468, i32 0
  %13470 = shufflevector <4 x i32> %13469, <4 x i32> undef, <4 x i32> zeroinitializer
  %13471 = add nsw <4 x i32> %13470, <i32 0, i32 1, i32 2, i32 3>
  %13472 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13471, <4 x i32> %90) #11
  %13473 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13472, <4 x i32> %92) #11
  %13474 = add <4 x i32> %13473, %12599
  %13475 = extractelement <4 x i32> %13474, i32 0
  %13476 = sext i32 %13475 to i64
  %13477 = getelementptr inbounds i16, i16* %input43288, i64 %13476
  %13478 = load i16, i16* %13477, align 2, !tbaa !386
  %13479 = insertelement <4 x i16> undef, i16 %13478, i32 0
  %13480 = extractelement <4 x i32> %13474, i32 1
  %13481 = sext i32 %13480 to i64
  %13482 = getelementptr inbounds i16, i16* %input43288, i64 %13481
  %13483 = load i16, i16* %13482, align 2, !tbaa !386
  %13484 = insertelement <4 x i16> %13479, i16 %13483, i32 1
  %13485 = extractelement <4 x i32> %13474, i32 2
  %13486 = sext i32 %13485 to i64
  %13487 = getelementptr inbounds i16, i16* %input43288, i64 %13486
  %13488 = load i16, i16* %13487, align 2, !tbaa !386
  %13489 = insertelement <4 x i16> %13484, i16 %13488, i32 2
  %13490 = extractelement <4 x i32> %13474, i32 3
  %13491 = sext i32 %13490 to i64
  %13492 = getelementptr inbounds i16, i16* %input43288, i64 %13491
  %13493 = load i16, i16* %13492, align 2, !tbaa !386
  %13494 = insertelement <4 x i16> %13489, i16 %13493, i32 3
  %13495 = add nsw i32 %blur_x.s0.x.v2.base.s96, -37
  %13496 = insertelement <4 x i32> undef, i32 %13495, i32 0
  %13497 = shufflevector <4 x i32> %13496, <4 x i32> undef, <4 x i32> zeroinitializer
  %13498 = add nsw <4 x i32> %13497, <i32 0, i32 1, i32 2, i32 3>
  %13499 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13498, <4 x i32> %90) #11
  %13500 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13499, <4 x i32> %92) #11
  %13501 = add <4 x i32> %13500, %12599
  %13502 = extractelement <4 x i32> %13501, i32 0
  %13503 = sext i32 %13502 to i64
  %13504 = getelementptr inbounds i16, i16* %input43288, i64 %13503
  %13505 = load i16, i16* %13504, align 2, !tbaa !386
  %13506 = insertelement <4 x i16> undef, i16 %13505, i32 0
  %13507 = extractelement <4 x i32> %13501, i32 1
  %13508 = sext i32 %13507 to i64
  %13509 = getelementptr inbounds i16, i16* %input43288, i64 %13508
  %13510 = load i16, i16* %13509, align 2, !tbaa !386
  %13511 = insertelement <4 x i16> %13506, i16 %13510, i32 1
  %13512 = extractelement <4 x i32> %13501, i32 2
  %13513 = sext i32 %13512 to i64
  %13514 = getelementptr inbounds i16, i16* %input43288, i64 %13513
  %13515 = load i16, i16* %13514, align 2, !tbaa !386
  %13516 = insertelement <4 x i16> %13511, i16 %13515, i32 2
  %13517 = extractelement <4 x i32> %13501, i32 3
  %13518 = sext i32 %13517 to i64
  %13519 = getelementptr inbounds i16, i16* %input43288, i64 %13518
  %13520 = load i16, i16* %13519, align 2, !tbaa !386
  %13521 = insertelement <4 x i16> %13516, i16 %13520, i32 3
  %13522 = add nsw i32 %blur_x.s0.x.v2.base.s96, -33
  %13523 = insertelement <4 x i32> undef, i32 %13522, i32 0
  %13524 = shufflevector <4 x i32> %13523, <4 x i32> undef, <4 x i32> zeroinitializer
  %13525 = add nsw <4 x i32> %13524, <i32 0, i32 1, i32 2, i32 3>
  %13526 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13525, <4 x i32> %90) #11
  %13527 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13526, <4 x i32> %92) #11
  %13528 = add <4 x i32> %13527, %12599
  %13529 = extractelement <4 x i32> %13528, i32 0
  %13530 = sext i32 %13529 to i64
  %13531 = getelementptr inbounds i16, i16* %input43288, i64 %13530
  %13532 = load i16, i16* %13531, align 2, !tbaa !386
  %13533 = insertelement <4 x i16> undef, i16 %13532, i32 0
  %13534 = extractelement <4 x i32> %13528, i32 1
  %13535 = sext i32 %13534 to i64
  %13536 = getelementptr inbounds i16, i16* %input43288, i64 %13535
  %13537 = load i16, i16* %13536, align 2, !tbaa !386
  %13538 = insertelement <4 x i16> %13533, i16 %13537, i32 1
  %13539 = extractelement <4 x i32> %13528, i32 2
  %13540 = sext i32 %13539 to i64
  %13541 = getelementptr inbounds i16, i16* %input43288, i64 %13540
  %13542 = load i16, i16* %13541, align 2, !tbaa !386
  %13543 = insertelement <4 x i16> %13538, i16 %13542, i32 2
  %13544 = extractelement <4 x i32> %13528, i32 3
  %13545 = sext i32 %13544 to i64
  %13546 = getelementptr inbounds i16, i16* %input43288, i64 %13545
  %13547 = load i16, i16* %13546, align 2, !tbaa !386
  %13548 = insertelement <4 x i16> %13543, i16 %13547, i32 3
  %13549 = add <4 x i16> %13359, %13261
  %13550 = add <4 x i16> %13549, %13413
  %13551 = add <4 x i16> %13550, %13440
  %13552 = add <4 x i16> %13551, %13521
  %13553 = add <4 x i16> %13413, %13386
  %13554 = add <4 x i16> %13553, %13467
  %13555 = add <4 x i16> %13554, %13494
  %13556 = add <4 x i16> %13555, %13548
  %13557 = shufflevector <4 x i16> %13552, <4 x i16> %13556, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %13558 = zext <8 x i16> %13557 to <8 x i32>
  %13559 = mul nuw <8 x i32> %13558, <i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429>
  %13560 = lshr <8 x i32> %13559, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %13561 = shufflevector <8 x i32> %13560, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %13562 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %13561)
  %13563 = shufflevector <8 x i32> %13560, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %13564 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %13563)
  %13565 = shufflevector <4 x i16> %13562, <4 x i16> %13564, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %13566 = add nsw i32 %blur_x.s0.x.v2.base.s96, -31
  %13567 = insertelement <4 x i32> undef, i32 %13566, i32 0
  %13568 = shufflevector <4 x i32> %13567, <4 x i32> undef, <4 x i32> zeroinitializer
  %13569 = add nsw <4 x i32> %13568, <i32 0, i32 1, i32 2, i32 3>
  %13570 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13569, <4 x i32> %90) #11
  %13571 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13570, <4 x i32> %92) #11
  %13572 = add <4 x i32> %13571, %12599
  %13573 = extractelement <4 x i32> %13572, i32 0
  %13574 = sext i32 %13573 to i64
  %13575 = getelementptr inbounds i16, i16* %input43288, i64 %13574
  %13576 = load i16, i16* %13575, align 2, !tbaa !386
  %13577 = insertelement <4 x i16> undef, i16 %13576, i32 0
  %13578 = extractelement <4 x i32> %13572, i32 1
  %13579 = sext i32 %13578 to i64
  %13580 = getelementptr inbounds i16, i16* %input43288, i64 %13579
  %13581 = load i16, i16* %13580, align 2, !tbaa !386
  %13582 = insertelement <4 x i16> %13577, i16 %13581, i32 1
  %13583 = extractelement <4 x i32> %13572, i32 2
  %13584 = sext i32 %13583 to i64
  %13585 = getelementptr inbounds i16, i16* %input43288, i64 %13584
  %13586 = load i16, i16* %13585, align 2, !tbaa !386
  %13587 = insertelement <4 x i16> %13582, i16 %13586, i32 2
  %13588 = extractelement <4 x i32> %13572, i32 3
  %13589 = sext i32 %13588 to i64
  %13590 = getelementptr inbounds i16, i16* %input43288, i64 %13589
  %13591 = load i16, i16* %13590, align 2, !tbaa !386
  %13592 = insertelement <4 x i16> %13587, i16 %13591, i32 3
  %13593 = add nsw i32 %blur_x.s0.x.v2.base.s96, -27
  %13594 = insertelement <4 x i32> undef, i32 %13593, i32 0
  %13595 = shufflevector <4 x i32> %13594, <4 x i32> undef, <4 x i32> zeroinitializer
  %13596 = add nsw <4 x i32> %13595, <i32 0, i32 1, i32 2, i32 3>
  %13597 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13596, <4 x i32> %90) #11
  %13598 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13597, <4 x i32> %92) #11
  %13599 = add <4 x i32> %13598, %12599
  %13600 = extractelement <4 x i32> %13599, i32 0
  %13601 = sext i32 %13600 to i64
  %13602 = getelementptr inbounds i16, i16* %input43288, i64 %13601
  %13603 = load i16, i16* %13602, align 2, !tbaa !386
  %13604 = insertelement <4 x i16> undef, i16 %13603, i32 0
  %13605 = extractelement <4 x i32> %13599, i32 1
  %13606 = sext i32 %13605 to i64
  %13607 = getelementptr inbounds i16, i16* %input43288, i64 %13606
  %13608 = load i16, i16* %13607, align 2, !tbaa !386
  %13609 = insertelement <4 x i16> %13604, i16 %13608, i32 1
  %13610 = extractelement <4 x i32> %13599, i32 2
  %13611 = sext i32 %13610 to i64
  %13612 = getelementptr inbounds i16, i16* %input43288, i64 %13611
  %13613 = load i16, i16* %13612, align 2, !tbaa !386
  %13614 = insertelement <4 x i16> %13609, i16 %13613, i32 2
  %13615 = extractelement <4 x i32> %13599, i32 3
  %13616 = sext i32 %13615 to i64
  %13617 = getelementptr inbounds i16, i16* %input43288, i64 %13616
  %13618 = load i16, i16* %13617, align 2, !tbaa !386
  %13619 = insertelement <4 x i16> %13614, i16 %13618, i32 3
  %13620 = add nsw i32 %blur_x.s0.x.v2.base.s96, -28
  %13621 = insertelement <4 x i32> undef, i32 %13620, i32 0
  %13622 = shufflevector <4 x i32> %13621, <4 x i32> undef, <4 x i32> zeroinitializer
  %13623 = add nsw <4 x i32> %13622, <i32 0, i32 1, i32 2, i32 3>
  %13624 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13623, <4 x i32> %90) #11
  %13625 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13624, <4 x i32> %92) #11
  %13626 = add <4 x i32> %13625, %12599
  %13627 = extractelement <4 x i32> %13626, i32 0
  %13628 = sext i32 %13627 to i64
  %13629 = getelementptr inbounds i16, i16* %input43288, i64 %13628
  %13630 = load i16, i16* %13629, align 2, !tbaa !386
  %13631 = insertelement <4 x i16> undef, i16 %13630, i32 0
  %13632 = extractelement <4 x i32> %13626, i32 1
  %13633 = sext i32 %13632 to i64
  %13634 = getelementptr inbounds i16, i16* %input43288, i64 %13633
  %13635 = load i16, i16* %13634, align 2, !tbaa !386
  %13636 = insertelement <4 x i16> %13631, i16 %13635, i32 1
  %13637 = extractelement <4 x i32> %13626, i32 2
  %13638 = sext i32 %13637 to i64
  %13639 = getelementptr inbounds i16, i16* %input43288, i64 %13638
  %13640 = load i16, i16* %13639, align 2, !tbaa !386
  %13641 = insertelement <4 x i16> %13636, i16 %13640, i32 2
  %13642 = extractelement <4 x i32> %13626, i32 3
  %13643 = sext i32 %13642 to i64
  %13644 = getelementptr inbounds i16, i16* %input43288, i64 %13643
  %13645 = load i16, i16* %13644, align 2, !tbaa !386
  %13646 = insertelement <4 x i16> %13641, i16 %13645, i32 3
  %13647 = add nsw i32 %blur_x.s0.x.v2.base.s96, -30
  %13648 = insertelement <4 x i32> undef, i32 %13647, i32 0
  %13649 = shufflevector <4 x i32> %13648, <4 x i32> undef, <4 x i32> zeroinitializer
  %13650 = add nsw <4 x i32> %13649, <i32 0, i32 1, i32 2, i32 3>
  %13651 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13650, <4 x i32> %90) #11
  %13652 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13651, <4 x i32> %92) #11
  %13653 = add <4 x i32> %13652, %12599
  %13654 = extractelement <4 x i32> %13653, i32 0
  %13655 = sext i32 %13654 to i64
  %13656 = getelementptr inbounds i16, i16* %input43288, i64 %13655
  %13657 = load i16, i16* %13656, align 2, !tbaa !386
  %13658 = insertelement <4 x i16> undef, i16 %13657, i32 0
  %13659 = extractelement <4 x i32> %13653, i32 1
  %13660 = sext i32 %13659 to i64
  %13661 = getelementptr inbounds i16, i16* %input43288, i64 %13660
  %13662 = load i16, i16* %13661, align 2, !tbaa !386
  %13663 = insertelement <4 x i16> %13658, i16 %13662, i32 1
  %13664 = extractelement <4 x i32> %13653, i32 2
  %13665 = sext i32 %13664 to i64
  %13666 = getelementptr inbounds i16, i16* %input43288, i64 %13665
  %13667 = load i16, i16* %13666, align 2, !tbaa !386
  %13668 = insertelement <4 x i16> %13663, i16 %13667, i32 2
  %13669 = extractelement <4 x i32> %13653, i32 3
  %13670 = sext i32 %13669 to i64
  %13671 = getelementptr inbounds i16, i16* %input43288, i64 %13670
  %13672 = load i16, i16* %13671, align 2, !tbaa !386
  %13673 = insertelement <4 x i16> %13668, i16 %13672, i32 3
  %13674 = add nsw i32 %blur_x.s0.x.v2.base.s96, -26
  %13675 = insertelement <4 x i32> undef, i32 %13674, i32 0
  %13676 = shufflevector <4 x i32> %13675, <4 x i32> undef, <4 x i32> zeroinitializer
  %13677 = add nsw <4 x i32> %13676, <i32 0, i32 1, i32 2, i32 3>
  %13678 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13677, <4 x i32> %90) #11
  %13679 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13678, <4 x i32> %92) #11
  %13680 = add <4 x i32> %13679, %12599
  %13681 = extractelement <4 x i32> %13680, i32 0
  %13682 = sext i32 %13681 to i64
  %13683 = getelementptr inbounds i16, i16* %input43288, i64 %13682
  %13684 = load i16, i16* %13683, align 2, !tbaa !386
  %13685 = insertelement <4 x i16> undef, i16 %13684, i32 0
  %13686 = extractelement <4 x i32> %13680, i32 1
  %13687 = sext i32 %13686 to i64
  %13688 = getelementptr inbounds i16, i16* %input43288, i64 %13687
  %13689 = load i16, i16* %13688, align 2, !tbaa !386
  %13690 = insertelement <4 x i16> %13685, i16 %13689, i32 1
  %13691 = extractelement <4 x i32> %13680, i32 2
  %13692 = sext i32 %13691 to i64
  %13693 = getelementptr inbounds i16, i16* %input43288, i64 %13692
  %13694 = load i16, i16* %13693, align 2, !tbaa !386
  %13695 = insertelement <4 x i16> %13690, i16 %13694, i32 2
  %13696 = extractelement <4 x i32> %13680, i32 3
  %13697 = sext i32 %13696 to i64
  %13698 = getelementptr inbounds i16, i16* %input43288, i64 %13697
  %13699 = load i16, i16* %13698, align 2, !tbaa !386
  %13700 = insertelement <4 x i16> %13695, i16 %13699, i32 3
  %13701 = add nsw i32 %blur_x.s0.x.v2.base.s96, -24
  %13702 = insertelement <4 x i32> undef, i32 %13701, i32 0
  %13703 = shufflevector <4 x i32> %13702, <4 x i32> undef, <4 x i32> zeroinitializer
  %13704 = add nsw <4 x i32> %13703, <i32 0, i32 1, i32 2, i32 3>
  %13705 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13704, <4 x i32> %90) #11
  %13706 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13705, <4 x i32> %92) #11
  %13707 = add <4 x i32> %13706, %12599
  %13708 = extractelement <4 x i32> %13707, i32 0
  %13709 = sext i32 %13708 to i64
  %13710 = getelementptr inbounds i16, i16* %input43288, i64 %13709
  %13711 = load i16, i16* %13710, align 2, !tbaa !386
  %13712 = insertelement <4 x i16> undef, i16 %13711, i32 0
  %13713 = extractelement <4 x i32> %13707, i32 1
  %13714 = sext i32 %13713 to i64
  %13715 = getelementptr inbounds i16, i16* %input43288, i64 %13714
  %13716 = load i16, i16* %13715, align 2, !tbaa !386
  %13717 = insertelement <4 x i16> %13712, i16 %13716, i32 1
  %13718 = extractelement <4 x i32> %13707, i32 2
  %13719 = sext i32 %13718 to i64
  %13720 = getelementptr inbounds i16, i16* %input43288, i64 %13719
  %13721 = load i16, i16* %13720, align 2, !tbaa !386
  %13722 = insertelement <4 x i16> %13717, i16 %13721, i32 2
  %13723 = extractelement <4 x i32> %13707, i32 3
  %13724 = sext i32 %13723 to i64
  %13725 = getelementptr inbounds i16, i16* %input43288, i64 %13724
  %13726 = load i16, i16* %13725, align 2, !tbaa !386
  %13727 = insertelement <4 x i16> %13722, i16 %13726, i32 3
  %13728 = add nsw i32 %blur_x.s0.x.v2.base.s96, -29
  %13729 = insertelement <4 x i32> undef, i32 %13728, i32 0
  %13730 = shufflevector <4 x i32> %13729, <4 x i32> undef, <4 x i32> zeroinitializer
  %13731 = add nsw <4 x i32> %13730, <i32 0, i32 1, i32 2, i32 3>
  %13732 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13731, <4 x i32> %90) #11
  %13733 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13732, <4 x i32> %92) #11
  %13734 = add <4 x i32> %13733, %12599
  %13735 = extractelement <4 x i32> %13734, i32 0
  %13736 = sext i32 %13735 to i64
  %13737 = getelementptr inbounds i16, i16* %input43288, i64 %13736
  %13738 = load i16, i16* %13737, align 2, !tbaa !386
  %13739 = insertelement <4 x i16> undef, i16 %13738, i32 0
  %13740 = extractelement <4 x i32> %13734, i32 1
  %13741 = sext i32 %13740 to i64
  %13742 = getelementptr inbounds i16, i16* %input43288, i64 %13741
  %13743 = load i16, i16* %13742, align 2, !tbaa !386
  %13744 = insertelement <4 x i16> %13739, i16 %13743, i32 1
  %13745 = extractelement <4 x i32> %13734, i32 2
  %13746 = sext i32 %13745 to i64
  %13747 = getelementptr inbounds i16, i16* %input43288, i64 %13746
  %13748 = load i16, i16* %13747, align 2, !tbaa !386
  %13749 = insertelement <4 x i16> %13744, i16 %13748, i32 2
  %13750 = extractelement <4 x i32> %13734, i32 3
  %13751 = sext i32 %13750 to i64
  %13752 = getelementptr inbounds i16, i16* %input43288, i64 %13751
  %13753 = load i16, i16* %13752, align 2, !tbaa !386
  %13754 = insertelement <4 x i16> %13749, i16 %13753, i32 3
  %13755 = add nsw i32 %blur_x.s0.x.v2.base.s96, -25
  %13756 = insertelement <4 x i32> undef, i32 %13755, i32 0
  %13757 = shufflevector <4 x i32> %13756, <4 x i32> undef, <4 x i32> zeroinitializer
  %13758 = add nsw <4 x i32> %13757, <i32 0, i32 1, i32 2, i32 3>
  %13759 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13758, <4 x i32> %90) #11
  %13760 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13759, <4 x i32> %92) #11
  %13761 = add <4 x i32> %13760, %12599
  %13762 = extractelement <4 x i32> %13761, i32 0
  %13763 = sext i32 %13762 to i64
  %13764 = getelementptr inbounds i16, i16* %input43288, i64 %13763
  %13765 = load i16, i16* %13764, align 2, !tbaa !386
  %13766 = insertelement <4 x i16> undef, i16 %13765, i32 0
  %13767 = extractelement <4 x i32> %13761, i32 1
  %13768 = sext i32 %13767 to i64
  %13769 = getelementptr inbounds i16, i16* %input43288, i64 %13768
  %13770 = load i16, i16* %13769, align 2, !tbaa !386
  %13771 = insertelement <4 x i16> %13766, i16 %13770, i32 1
  %13772 = extractelement <4 x i32> %13761, i32 2
  %13773 = sext i32 %13772 to i64
  %13774 = getelementptr inbounds i16, i16* %input43288, i64 %13773
  %13775 = load i16, i16* %13774, align 2, !tbaa !386
  %13776 = insertelement <4 x i16> %13771, i16 %13775, i32 2
  %13777 = extractelement <4 x i32> %13761, i32 3
  %13778 = sext i32 %13777 to i64
  %13779 = getelementptr inbounds i16, i16* %input43288, i64 %13778
  %13780 = load i16, i16* %13779, align 2, !tbaa !386
  %13781 = insertelement <4 x i16> %13776, i16 %13780, i32 3
  %13782 = add <4 x i16> %13592, %13494
  %13783 = add <4 x i16> %13782, %13646
  %13784 = add <4 x i16> %13783, %13673
  %13785 = add <4 x i16> %13784, %13754
  %13786 = add <4 x i16> %13646, %13619
  %13787 = add <4 x i16> %13786, %13700
  %13788 = add <4 x i16> %13787, %13727
  %13789 = add <4 x i16> %13788, %13781
  %13790 = shufflevector <4 x i16> %13785, <4 x i16> %13789, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %13791 = zext <8 x i16> %13790 to <8 x i32>
  %13792 = mul nuw <8 x i32> %13791, <i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429>
  %13793 = lshr <8 x i32> %13792, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %13794 = shufflevector <8 x i32> %13793, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %13795 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %13794)
  %13796 = shufflevector <8 x i32> %13793, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %13797 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %13796)
  %13798 = shufflevector <4 x i16> %13795, <4 x i16> %13797, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %13799 = add nsw i32 %blur_x.s0.x.v2.base.s96, -23
  %13800 = insertelement <4 x i32> undef, i32 %13799, i32 0
  %13801 = shufflevector <4 x i32> %13800, <4 x i32> undef, <4 x i32> zeroinitializer
  %13802 = add nsw <4 x i32> %13801, <i32 0, i32 1, i32 2, i32 3>
  %13803 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13802, <4 x i32> %90) #11
  %13804 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13803, <4 x i32> %92) #11
  %13805 = add <4 x i32> %13804, %12599
  %13806 = extractelement <4 x i32> %13805, i32 0
  %13807 = sext i32 %13806 to i64
  %13808 = getelementptr inbounds i16, i16* %input43288, i64 %13807
  %13809 = load i16, i16* %13808, align 2, !tbaa !386
  %13810 = insertelement <4 x i16> undef, i16 %13809, i32 0
  %13811 = extractelement <4 x i32> %13805, i32 1
  %13812 = sext i32 %13811 to i64
  %13813 = getelementptr inbounds i16, i16* %input43288, i64 %13812
  %13814 = load i16, i16* %13813, align 2, !tbaa !386
  %13815 = insertelement <4 x i16> %13810, i16 %13814, i32 1
  %13816 = extractelement <4 x i32> %13805, i32 2
  %13817 = sext i32 %13816 to i64
  %13818 = getelementptr inbounds i16, i16* %input43288, i64 %13817
  %13819 = load i16, i16* %13818, align 2, !tbaa !386
  %13820 = insertelement <4 x i16> %13815, i16 %13819, i32 2
  %13821 = extractelement <4 x i32> %13805, i32 3
  %13822 = sext i32 %13821 to i64
  %13823 = getelementptr inbounds i16, i16* %input43288, i64 %13822
  %13824 = load i16, i16* %13823, align 2, !tbaa !386
  %13825 = insertelement <4 x i16> %13820, i16 %13824, i32 3
  %13826 = add nsw i32 %blur_x.s0.x.v2.base.s96, -19
  %13827 = insertelement <4 x i32> undef, i32 %13826, i32 0
  %13828 = shufflevector <4 x i32> %13827, <4 x i32> undef, <4 x i32> zeroinitializer
  %13829 = add nsw <4 x i32> %13828, <i32 0, i32 1, i32 2, i32 3>
  %13830 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13829, <4 x i32> %90) #11
  %13831 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13830, <4 x i32> %92) #11
  %13832 = add <4 x i32> %13831, %12599
  %13833 = extractelement <4 x i32> %13832, i32 0
  %13834 = sext i32 %13833 to i64
  %13835 = getelementptr inbounds i16, i16* %input43288, i64 %13834
  %13836 = load i16, i16* %13835, align 2, !tbaa !386
  %13837 = insertelement <4 x i16> undef, i16 %13836, i32 0
  %13838 = extractelement <4 x i32> %13832, i32 1
  %13839 = sext i32 %13838 to i64
  %13840 = getelementptr inbounds i16, i16* %input43288, i64 %13839
  %13841 = load i16, i16* %13840, align 2, !tbaa !386
  %13842 = insertelement <4 x i16> %13837, i16 %13841, i32 1
  %13843 = extractelement <4 x i32> %13832, i32 2
  %13844 = sext i32 %13843 to i64
  %13845 = getelementptr inbounds i16, i16* %input43288, i64 %13844
  %13846 = load i16, i16* %13845, align 2, !tbaa !386
  %13847 = insertelement <4 x i16> %13842, i16 %13846, i32 2
  %13848 = extractelement <4 x i32> %13832, i32 3
  %13849 = sext i32 %13848 to i64
  %13850 = getelementptr inbounds i16, i16* %input43288, i64 %13849
  %13851 = load i16, i16* %13850, align 2, !tbaa !386
  %13852 = insertelement <4 x i16> %13847, i16 %13851, i32 3
  %13853 = add nsw i32 %blur_x.s0.x.v2.base.s96, -20
  %13854 = insertelement <4 x i32> undef, i32 %13853, i32 0
  %13855 = shufflevector <4 x i32> %13854, <4 x i32> undef, <4 x i32> zeroinitializer
  %13856 = add nsw <4 x i32> %13855, <i32 0, i32 1, i32 2, i32 3>
  %13857 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13856, <4 x i32> %90) #11
  %13858 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13857, <4 x i32> %92) #11
  %13859 = add <4 x i32> %13858, %12599
  %13860 = extractelement <4 x i32> %13859, i32 0
  %13861 = sext i32 %13860 to i64
  %13862 = getelementptr inbounds i16, i16* %input43288, i64 %13861
  %13863 = load i16, i16* %13862, align 2, !tbaa !386
  %13864 = insertelement <4 x i16> undef, i16 %13863, i32 0
  %13865 = extractelement <4 x i32> %13859, i32 1
  %13866 = sext i32 %13865 to i64
  %13867 = getelementptr inbounds i16, i16* %input43288, i64 %13866
  %13868 = load i16, i16* %13867, align 2, !tbaa !386
  %13869 = insertelement <4 x i16> %13864, i16 %13868, i32 1
  %13870 = extractelement <4 x i32> %13859, i32 2
  %13871 = sext i32 %13870 to i64
  %13872 = getelementptr inbounds i16, i16* %input43288, i64 %13871
  %13873 = load i16, i16* %13872, align 2, !tbaa !386
  %13874 = insertelement <4 x i16> %13869, i16 %13873, i32 2
  %13875 = extractelement <4 x i32> %13859, i32 3
  %13876 = sext i32 %13875 to i64
  %13877 = getelementptr inbounds i16, i16* %input43288, i64 %13876
  %13878 = load i16, i16* %13877, align 2, !tbaa !386
  %13879 = insertelement <4 x i16> %13874, i16 %13878, i32 3
  %13880 = add nsw i32 %blur_x.s0.x.v2.base.s96, -22
  %13881 = insertelement <4 x i32> undef, i32 %13880, i32 0
  %13882 = shufflevector <4 x i32> %13881, <4 x i32> undef, <4 x i32> zeroinitializer
  %13883 = add nsw <4 x i32> %13882, <i32 0, i32 1, i32 2, i32 3>
  %13884 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13883, <4 x i32> %90) #11
  %13885 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13884, <4 x i32> %92) #11
  %13886 = add <4 x i32> %13885, %12599
  %13887 = extractelement <4 x i32> %13886, i32 0
  %13888 = sext i32 %13887 to i64
  %13889 = getelementptr inbounds i16, i16* %input43288, i64 %13888
  %13890 = load i16, i16* %13889, align 2, !tbaa !386
  %13891 = insertelement <4 x i16> undef, i16 %13890, i32 0
  %13892 = extractelement <4 x i32> %13886, i32 1
  %13893 = sext i32 %13892 to i64
  %13894 = getelementptr inbounds i16, i16* %input43288, i64 %13893
  %13895 = load i16, i16* %13894, align 2, !tbaa !386
  %13896 = insertelement <4 x i16> %13891, i16 %13895, i32 1
  %13897 = extractelement <4 x i32> %13886, i32 2
  %13898 = sext i32 %13897 to i64
  %13899 = getelementptr inbounds i16, i16* %input43288, i64 %13898
  %13900 = load i16, i16* %13899, align 2, !tbaa !386
  %13901 = insertelement <4 x i16> %13896, i16 %13900, i32 2
  %13902 = extractelement <4 x i32> %13886, i32 3
  %13903 = sext i32 %13902 to i64
  %13904 = getelementptr inbounds i16, i16* %input43288, i64 %13903
  %13905 = load i16, i16* %13904, align 2, !tbaa !386
  %13906 = insertelement <4 x i16> %13901, i16 %13905, i32 3
  %13907 = add nsw i32 %blur_x.s0.x.v2.base.s96, -18
  %13908 = insertelement <4 x i32> undef, i32 %13907, i32 0
  %13909 = shufflevector <4 x i32> %13908, <4 x i32> undef, <4 x i32> zeroinitializer
  %13910 = add nsw <4 x i32> %13909, <i32 0, i32 1, i32 2, i32 3>
  %13911 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13910, <4 x i32> %90) #11
  %13912 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13911, <4 x i32> %92) #11
  %13913 = add <4 x i32> %13912, %12599
  %13914 = extractelement <4 x i32> %13913, i32 0
  %13915 = sext i32 %13914 to i64
  %13916 = getelementptr inbounds i16, i16* %input43288, i64 %13915
  %13917 = load i16, i16* %13916, align 2, !tbaa !386
  %13918 = insertelement <4 x i16> undef, i16 %13917, i32 0
  %13919 = extractelement <4 x i32> %13913, i32 1
  %13920 = sext i32 %13919 to i64
  %13921 = getelementptr inbounds i16, i16* %input43288, i64 %13920
  %13922 = load i16, i16* %13921, align 2, !tbaa !386
  %13923 = insertelement <4 x i16> %13918, i16 %13922, i32 1
  %13924 = extractelement <4 x i32> %13913, i32 2
  %13925 = sext i32 %13924 to i64
  %13926 = getelementptr inbounds i16, i16* %input43288, i64 %13925
  %13927 = load i16, i16* %13926, align 2, !tbaa !386
  %13928 = insertelement <4 x i16> %13923, i16 %13927, i32 2
  %13929 = extractelement <4 x i32> %13913, i32 3
  %13930 = sext i32 %13929 to i64
  %13931 = getelementptr inbounds i16, i16* %input43288, i64 %13930
  %13932 = load i16, i16* %13931, align 2, !tbaa !386
  %13933 = insertelement <4 x i16> %13928, i16 %13932, i32 3
  %13934 = add nsw i32 %blur_x.s0.x.v2.base.s96, -16
  %13935 = insertelement <4 x i32> undef, i32 %13934, i32 0
  %13936 = shufflevector <4 x i32> %13935, <4 x i32> undef, <4 x i32> zeroinitializer
  %13937 = add nsw <4 x i32> %13936, <i32 0, i32 1, i32 2, i32 3>
  %13938 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13937, <4 x i32> %90) #11
  %13939 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13938, <4 x i32> %92) #11
  %13940 = add <4 x i32> %13939, %12599
  %13941 = extractelement <4 x i32> %13940, i32 0
  %13942 = sext i32 %13941 to i64
  %13943 = getelementptr inbounds i16, i16* %input43288, i64 %13942
  %13944 = load i16, i16* %13943, align 2, !tbaa !386
  %13945 = insertelement <4 x i16> undef, i16 %13944, i32 0
  %13946 = extractelement <4 x i32> %13940, i32 1
  %13947 = sext i32 %13946 to i64
  %13948 = getelementptr inbounds i16, i16* %input43288, i64 %13947
  %13949 = load i16, i16* %13948, align 2, !tbaa !386
  %13950 = insertelement <4 x i16> %13945, i16 %13949, i32 1
  %13951 = extractelement <4 x i32> %13940, i32 2
  %13952 = sext i32 %13951 to i64
  %13953 = getelementptr inbounds i16, i16* %input43288, i64 %13952
  %13954 = load i16, i16* %13953, align 2, !tbaa !386
  %13955 = insertelement <4 x i16> %13950, i16 %13954, i32 2
  %13956 = extractelement <4 x i32> %13940, i32 3
  %13957 = sext i32 %13956 to i64
  %13958 = getelementptr inbounds i16, i16* %input43288, i64 %13957
  %13959 = load i16, i16* %13958, align 2, !tbaa !386
  %13960 = insertelement <4 x i16> %13955, i16 %13959, i32 3
  %13961 = add nsw i32 %blur_x.s0.x.v2.base.s96, -21
  %13962 = insertelement <4 x i32> undef, i32 %13961, i32 0
  %13963 = shufflevector <4 x i32> %13962, <4 x i32> undef, <4 x i32> zeroinitializer
  %13964 = add nsw <4 x i32> %13963, <i32 0, i32 1, i32 2, i32 3>
  %13965 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13964, <4 x i32> %90) #11
  %13966 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13965, <4 x i32> %92) #11
  %13967 = add <4 x i32> %13966, %12599
  %13968 = extractelement <4 x i32> %13967, i32 0
  %13969 = sext i32 %13968 to i64
  %13970 = getelementptr inbounds i16, i16* %input43288, i64 %13969
  %13971 = load i16, i16* %13970, align 2, !tbaa !386
  %13972 = insertelement <4 x i16> undef, i16 %13971, i32 0
  %13973 = extractelement <4 x i32> %13967, i32 1
  %13974 = sext i32 %13973 to i64
  %13975 = getelementptr inbounds i16, i16* %input43288, i64 %13974
  %13976 = load i16, i16* %13975, align 2, !tbaa !386
  %13977 = insertelement <4 x i16> %13972, i16 %13976, i32 1
  %13978 = extractelement <4 x i32> %13967, i32 2
  %13979 = sext i32 %13978 to i64
  %13980 = getelementptr inbounds i16, i16* %input43288, i64 %13979
  %13981 = load i16, i16* %13980, align 2, !tbaa !386
  %13982 = insertelement <4 x i16> %13977, i16 %13981, i32 2
  %13983 = extractelement <4 x i32> %13967, i32 3
  %13984 = sext i32 %13983 to i64
  %13985 = getelementptr inbounds i16, i16* %input43288, i64 %13984
  %13986 = load i16, i16* %13985, align 2, !tbaa !386
  %13987 = insertelement <4 x i16> %13982, i16 %13986, i32 3
  %13988 = add nsw i32 %blur_x.s0.x.v2.base.s96, -17
  %13989 = insertelement <4 x i32> undef, i32 %13988, i32 0
  %13990 = shufflevector <4 x i32> %13989, <4 x i32> undef, <4 x i32> zeroinitializer
  %13991 = add nsw <4 x i32> %13990, <i32 0, i32 1, i32 2, i32 3>
  %13992 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %13991, <4 x i32> %90) #11
  %13993 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %13992, <4 x i32> %92) #11
  %13994 = add <4 x i32> %13993, %12599
  %13995 = extractelement <4 x i32> %13994, i32 0
  %13996 = sext i32 %13995 to i64
  %13997 = getelementptr inbounds i16, i16* %input43288, i64 %13996
  %13998 = load i16, i16* %13997, align 2, !tbaa !386
  %13999 = insertelement <4 x i16> undef, i16 %13998, i32 0
  %14000 = extractelement <4 x i32> %13994, i32 1
  %14001 = sext i32 %14000 to i64
  %14002 = getelementptr inbounds i16, i16* %input43288, i64 %14001
  %14003 = load i16, i16* %14002, align 2, !tbaa !386
  %14004 = insertelement <4 x i16> %13999, i16 %14003, i32 1
  %14005 = extractelement <4 x i32> %13994, i32 2
  %14006 = sext i32 %14005 to i64
  %14007 = getelementptr inbounds i16, i16* %input43288, i64 %14006
  %14008 = load i16, i16* %14007, align 2, !tbaa !386
  %14009 = insertelement <4 x i16> %14004, i16 %14008, i32 2
  %14010 = extractelement <4 x i32> %13994, i32 3
  %14011 = sext i32 %14010 to i64
  %14012 = getelementptr inbounds i16, i16* %input43288, i64 %14011
  %14013 = load i16, i16* %14012, align 2, !tbaa !386
  %14014 = insertelement <4 x i16> %14009, i16 %14013, i32 3
  %14015 = add <4 x i16> %13825, %13727
  %14016 = add <4 x i16> %14015, %13879
  %14017 = add <4 x i16> %14016, %13906
  %14018 = add <4 x i16> %14017, %13987
  %14019 = add <4 x i16> %13879, %13852
  %14020 = add <4 x i16> %14019, %13933
  %14021 = add <4 x i16> %14020, %13960
  %14022 = add <4 x i16> %14021, %14014
  %14023 = shufflevector <4 x i16> %14018, <4 x i16> %14022, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %14024 = zext <8 x i16> %14023 to <8 x i32>
  %14025 = mul nuw <8 x i32> %14024, <i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429>
  %14026 = lshr <8 x i32> %14025, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %14027 = shufflevector <8 x i32> %14026, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %14028 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %14027)
  %14029 = shufflevector <8 x i32> %14026, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %14030 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %14029)
  %14031 = shufflevector <4 x i16> %14028, <4 x i16> %14030, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %14032 = add nsw i32 %blur_x.s0.x.v2.base.s96, -15
  %14033 = insertelement <4 x i32> undef, i32 %14032, i32 0
  %14034 = shufflevector <4 x i32> %14033, <4 x i32> undef, <4 x i32> zeroinitializer
  %14035 = add nsw <4 x i32> %14034, <i32 0, i32 1, i32 2, i32 3>
  %14036 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %14035, <4 x i32> %90) #11
  %14037 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %14036, <4 x i32> %92) #11
  %14038 = add <4 x i32> %14037, %12599
  %14039 = extractelement <4 x i32> %14038, i32 0
  %14040 = sext i32 %14039 to i64
  %14041 = getelementptr inbounds i16, i16* %input43288, i64 %14040
  %14042 = load i16, i16* %14041, align 2, !tbaa !386
  %14043 = insertelement <4 x i16> undef, i16 %14042, i32 0
  %14044 = extractelement <4 x i32> %14038, i32 1
  %14045 = sext i32 %14044 to i64
  %14046 = getelementptr inbounds i16, i16* %input43288, i64 %14045
  %14047 = load i16, i16* %14046, align 2, !tbaa !386
  %14048 = insertelement <4 x i16> %14043, i16 %14047, i32 1
  %14049 = extractelement <4 x i32> %14038, i32 2
  %14050 = sext i32 %14049 to i64
  %14051 = getelementptr inbounds i16, i16* %input43288, i64 %14050
  %14052 = load i16, i16* %14051, align 2, !tbaa !386
  %14053 = insertelement <4 x i16> %14048, i16 %14052, i32 2
  %14054 = extractelement <4 x i32> %14038, i32 3
  %14055 = sext i32 %14054 to i64
  %14056 = getelementptr inbounds i16, i16* %input43288, i64 %14055
  %14057 = load i16, i16* %14056, align 2, !tbaa !386
  %14058 = insertelement <4 x i16> %14053, i16 %14057, i32 3
  %14059 = add nsw i32 %blur_x.s0.x.v2.base.s96, -11
  %14060 = insertelement <4 x i32> undef, i32 %14059, i32 0
  %14061 = shufflevector <4 x i32> %14060, <4 x i32> undef, <4 x i32> zeroinitializer
  %14062 = add nsw <4 x i32> %14061, <i32 0, i32 1, i32 2, i32 3>
  %14063 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %14062, <4 x i32> %90) #11
  %14064 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %14063, <4 x i32> %92) #11
  %14065 = add <4 x i32> %14064, %12599
  %14066 = extractelement <4 x i32> %14065, i32 0
  %14067 = sext i32 %14066 to i64
  %14068 = getelementptr inbounds i16, i16* %input43288, i64 %14067
  %14069 = load i16, i16* %14068, align 2, !tbaa !386
  %14070 = insertelement <4 x i16> undef, i16 %14069, i32 0
  %14071 = extractelement <4 x i32> %14065, i32 1
  %14072 = sext i32 %14071 to i64
  %14073 = getelementptr inbounds i16, i16* %input43288, i64 %14072
  %14074 = load i16, i16* %14073, align 2, !tbaa !386
  %14075 = insertelement <4 x i16> %14070, i16 %14074, i32 1
  %14076 = extractelement <4 x i32> %14065, i32 2
  %14077 = sext i32 %14076 to i64
  %14078 = getelementptr inbounds i16, i16* %input43288, i64 %14077
  %14079 = load i16, i16* %14078, align 2, !tbaa !386
  %14080 = insertelement <4 x i16> %14075, i16 %14079, i32 2
  %14081 = extractelement <4 x i32> %14065, i32 3
  %14082 = sext i32 %14081 to i64
  %14083 = getelementptr inbounds i16, i16* %input43288, i64 %14082
  %14084 = load i16, i16* %14083, align 2, !tbaa !386
  %14085 = insertelement <4 x i16> %14080, i16 %14084, i32 3
  %14086 = add nsw i32 %blur_x.s0.x.v2.base.s96, -12
  %14087 = insertelement <4 x i32> undef, i32 %14086, i32 0
  %14088 = shufflevector <4 x i32> %14087, <4 x i32> undef, <4 x i32> zeroinitializer
  %14089 = add nsw <4 x i32> %14088, <i32 0, i32 1, i32 2, i32 3>
  %14090 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %14089, <4 x i32> %90) #11
  %14091 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %14090, <4 x i32> %92) #11
  %14092 = add <4 x i32> %14091, %12599
  %14093 = extractelement <4 x i32> %14092, i32 0
  %14094 = sext i32 %14093 to i64
  %14095 = getelementptr inbounds i16, i16* %input43288, i64 %14094
  %14096 = load i16, i16* %14095, align 2, !tbaa !386
  %14097 = insertelement <4 x i16> undef, i16 %14096, i32 0
  %14098 = extractelement <4 x i32> %14092, i32 1
  %14099 = sext i32 %14098 to i64
  %14100 = getelementptr inbounds i16, i16* %input43288, i64 %14099
  %14101 = load i16, i16* %14100, align 2, !tbaa !386
  %14102 = insertelement <4 x i16> %14097, i16 %14101, i32 1
  %14103 = extractelement <4 x i32> %14092, i32 2
  %14104 = sext i32 %14103 to i64
  %14105 = getelementptr inbounds i16, i16* %input43288, i64 %14104
  %14106 = load i16, i16* %14105, align 2, !tbaa !386
  %14107 = insertelement <4 x i16> %14102, i16 %14106, i32 2
  %14108 = extractelement <4 x i32> %14092, i32 3
  %14109 = sext i32 %14108 to i64
  %14110 = getelementptr inbounds i16, i16* %input43288, i64 %14109
  %14111 = load i16, i16* %14110, align 2, !tbaa !386
  %14112 = insertelement <4 x i16> %14107, i16 %14111, i32 3
  %14113 = add nsw i32 %blur_x.s0.x.v2.base.s96, -14
  %14114 = insertelement <4 x i32> undef, i32 %14113, i32 0
  %14115 = shufflevector <4 x i32> %14114, <4 x i32> undef, <4 x i32> zeroinitializer
  %14116 = add nsw <4 x i32> %14115, <i32 0, i32 1, i32 2, i32 3>
  %14117 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %14116, <4 x i32> %90) #11
  %14118 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %14117, <4 x i32> %92) #11
  %14119 = add <4 x i32> %14118, %12599
  %14120 = extractelement <4 x i32> %14119, i32 0
  %14121 = sext i32 %14120 to i64
  %14122 = getelementptr inbounds i16, i16* %input43288, i64 %14121
  %14123 = load i16, i16* %14122, align 2, !tbaa !386
  %14124 = insertelement <4 x i16> undef, i16 %14123, i32 0
  %14125 = extractelement <4 x i32> %14119, i32 1
  %14126 = sext i32 %14125 to i64
  %14127 = getelementptr inbounds i16, i16* %input43288, i64 %14126
  %14128 = load i16, i16* %14127, align 2, !tbaa !386
  %14129 = insertelement <4 x i16> %14124, i16 %14128, i32 1
  %14130 = extractelement <4 x i32> %14119, i32 2
  %14131 = sext i32 %14130 to i64
  %14132 = getelementptr inbounds i16, i16* %input43288, i64 %14131
  %14133 = load i16, i16* %14132, align 2, !tbaa !386
  %14134 = insertelement <4 x i16> %14129, i16 %14133, i32 2
  %14135 = extractelement <4 x i32> %14119, i32 3
  %14136 = sext i32 %14135 to i64
  %14137 = getelementptr inbounds i16, i16* %input43288, i64 %14136
  %14138 = load i16, i16* %14137, align 2, !tbaa !386
  %14139 = insertelement <4 x i16> %14134, i16 %14138, i32 3
  %14140 = add nsw i32 %blur_x.s0.x.v2.base.s96, -10
  %14141 = insertelement <4 x i32> undef, i32 %14140, i32 0
  %14142 = shufflevector <4 x i32> %14141, <4 x i32> undef, <4 x i32> zeroinitializer
  %14143 = add nsw <4 x i32> %14142, <i32 0, i32 1, i32 2, i32 3>
  %14144 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %14143, <4 x i32> %90) #11
  %14145 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %14144, <4 x i32> %92) #11
  %14146 = add <4 x i32> %14145, %12599
  %14147 = extractelement <4 x i32> %14146, i32 0
  %14148 = sext i32 %14147 to i64
  %14149 = getelementptr inbounds i16, i16* %input43288, i64 %14148
  %14150 = load i16, i16* %14149, align 2, !tbaa !386
  %14151 = insertelement <4 x i16> undef, i16 %14150, i32 0
  %14152 = extractelement <4 x i32> %14146, i32 1
  %14153 = sext i32 %14152 to i64
  %14154 = getelementptr inbounds i16, i16* %input43288, i64 %14153
  %14155 = load i16, i16* %14154, align 2, !tbaa !386
  %14156 = insertelement <4 x i16> %14151, i16 %14155, i32 1
  %14157 = extractelement <4 x i32> %14146, i32 2
  %14158 = sext i32 %14157 to i64
  %14159 = getelementptr inbounds i16, i16* %input43288, i64 %14158
  %14160 = load i16, i16* %14159, align 2, !tbaa !386
  %14161 = insertelement <4 x i16> %14156, i16 %14160, i32 2
  %14162 = extractelement <4 x i32> %14146, i32 3
  %14163 = sext i32 %14162 to i64
  %14164 = getelementptr inbounds i16, i16* %input43288, i64 %14163
  %14165 = load i16, i16* %14164, align 2, !tbaa !386
  %14166 = insertelement <4 x i16> %14161, i16 %14165, i32 3
  %14167 = add nsw i32 %blur_x.s0.x.v2.base.s96, -8
  %14168 = insertelement <4 x i32> undef, i32 %14167, i32 0
  %14169 = shufflevector <4 x i32> %14168, <4 x i32> undef, <4 x i32> zeroinitializer
  %14170 = add nsw <4 x i32> %14169, <i32 0, i32 1, i32 2, i32 3>
  %14171 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %14170, <4 x i32> %90) #11
  %14172 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %14171, <4 x i32> %92) #11
  %14173 = add <4 x i32> %14172, %12599
  %14174 = extractelement <4 x i32> %14173, i32 0
  %14175 = sext i32 %14174 to i64
  %14176 = getelementptr inbounds i16, i16* %input43288, i64 %14175
  %14177 = load i16, i16* %14176, align 2, !tbaa !386
  %14178 = insertelement <4 x i16> undef, i16 %14177, i32 0
  %14179 = extractelement <4 x i32> %14173, i32 1
  %14180 = sext i32 %14179 to i64
  %14181 = getelementptr inbounds i16, i16* %input43288, i64 %14180
  %14182 = load i16, i16* %14181, align 2, !tbaa !386
  %14183 = insertelement <4 x i16> %14178, i16 %14182, i32 1
  %14184 = extractelement <4 x i32> %14173, i32 2
  %14185 = sext i32 %14184 to i64
  %14186 = getelementptr inbounds i16, i16* %input43288, i64 %14185
  %14187 = load i16, i16* %14186, align 2, !tbaa !386
  %14188 = insertelement <4 x i16> %14183, i16 %14187, i32 2
  %14189 = extractelement <4 x i32> %14173, i32 3
  %14190 = sext i32 %14189 to i64
  %14191 = getelementptr inbounds i16, i16* %input43288, i64 %14190
  %14192 = load i16, i16* %14191, align 2, !tbaa !386
  %14193 = insertelement <4 x i16> %14188, i16 %14192, i32 3
  %14194 = add nsw i32 %blur_x.s0.x.v2.base.s96, -13
  %14195 = insertelement <4 x i32> undef, i32 %14194, i32 0
  %14196 = shufflevector <4 x i32> %14195, <4 x i32> undef, <4 x i32> zeroinitializer
  %14197 = add nsw <4 x i32> %14196, <i32 0, i32 1, i32 2, i32 3>
  %14198 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %14197, <4 x i32> %90) #11
  %14199 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %14198, <4 x i32> %92) #11
  %14200 = add <4 x i32> %14199, %12599
  %14201 = extractelement <4 x i32> %14200, i32 0
  %14202 = sext i32 %14201 to i64
  %14203 = getelementptr inbounds i16, i16* %input43288, i64 %14202
  %14204 = load i16, i16* %14203, align 2, !tbaa !386
  %14205 = insertelement <4 x i16> undef, i16 %14204, i32 0
  %14206 = extractelement <4 x i32> %14200, i32 1
  %14207 = sext i32 %14206 to i64
  %14208 = getelementptr inbounds i16, i16* %input43288, i64 %14207
  %14209 = load i16, i16* %14208, align 2, !tbaa !386
  %14210 = insertelement <4 x i16> %14205, i16 %14209, i32 1
  %14211 = extractelement <4 x i32> %14200, i32 2
  %14212 = sext i32 %14211 to i64
  %14213 = getelementptr inbounds i16, i16* %input43288, i64 %14212
  %14214 = load i16, i16* %14213, align 2, !tbaa !386
  %14215 = insertelement <4 x i16> %14210, i16 %14214, i32 2
  %14216 = extractelement <4 x i32> %14200, i32 3
  %14217 = sext i32 %14216 to i64
  %14218 = getelementptr inbounds i16, i16* %input43288, i64 %14217
  %14219 = load i16, i16* %14218, align 2, !tbaa !386
  %14220 = insertelement <4 x i16> %14215, i16 %14219, i32 3
  %14221 = add nsw i32 %blur_x.s0.x.v2.base.s96, -9
  %14222 = insertelement <4 x i32> undef, i32 %14221, i32 0
  %14223 = shufflevector <4 x i32> %14222, <4 x i32> undef, <4 x i32> zeroinitializer
  %14224 = add nsw <4 x i32> %14223, <i32 0, i32 1, i32 2, i32 3>
  %14225 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %14224, <4 x i32> %90) #11
  %14226 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %14225, <4 x i32> %92) #11
  %14227 = add <4 x i32> %14226, %12599
  %14228 = extractelement <4 x i32> %14227, i32 0
  %14229 = sext i32 %14228 to i64
  %14230 = getelementptr inbounds i16, i16* %input43288, i64 %14229
  %14231 = load i16, i16* %14230, align 2, !tbaa !386
  %14232 = insertelement <4 x i16> undef, i16 %14231, i32 0
  %14233 = extractelement <4 x i32> %14227, i32 1
  %14234 = sext i32 %14233 to i64
  %14235 = getelementptr inbounds i16, i16* %input43288, i64 %14234
  %14236 = load i16, i16* %14235, align 2, !tbaa !386
  %14237 = insertelement <4 x i16> %14232, i16 %14236, i32 1
  %14238 = extractelement <4 x i32> %14227, i32 2
  %14239 = sext i32 %14238 to i64
  %14240 = getelementptr inbounds i16, i16* %input43288, i64 %14239
  %14241 = load i16, i16* %14240, align 2, !tbaa !386
  %14242 = insertelement <4 x i16> %14237, i16 %14241, i32 2
  %14243 = extractelement <4 x i32> %14227, i32 3
  %14244 = sext i32 %14243 to i64
  %14245 = getelementptr inbounds i16, i16* %input43288, i64 %14244
  %14246 = load i16, i16* %14245, align 2, !tbaa !386
  %14247 = insertelement <4 x i16> %14242, i16 %14246, i32 3
  %14248 = add <4 x i16> %14058, %13960
  %14249 = add <4 x i16> %14248, %14112
  %14250 = add <4 x i16> %14249, %14139
  %14251 = add <4 x i16> %14250, %14220
  %14252 = add <4 x i16> %14112, %14085
  %14253 = add <4 x i16> %14252, %14166
  %14254 = add <4 x i16> %14253, %14193
  %14255 = add <4 x i16> %14254, %14247
  %14256 = shufflevector <4 x i16> %14251, <4 x i16> %14255, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %14257 = zext <8 x i16> %14256 to <8 x i32>
  %14258 = mul nuw <8 x i32> %14257, <i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429>
  %14259 = lshr <8 x i32> %14258, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %14260 = shufflevector <8 x i32> %14259, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %14261 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %14260)
  %14262 = shufflevector <8 x i32> %14259, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %14263 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %14262)
  %14264 = shufflevector <4 x i16> %14261, <4 x i16> %14263, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %14265 = add nsw i32 %blur_x.s0.x.v2.base.s96, -7
  %14266 = insertelement <4 x i32> undef, i32 %14265, i32 0
  %14267 = shufflevector <4 x i32> %14266, <4 x i32> undef, <4 x i32> zeroinitializer
  %14268 = add nsw <4 x i32> %14267, <i32 0, i32 1, i32 2, i32 3>
  %14269 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %14268, <4 x i32> %90) #11
  %14270 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %14269, <4 x i32> %92) #11
  %14271 = add <4 x i32> %14270, %12599
  %14272 = extractelement <4 x i32> %14271, i32 0
  %14273 = sext i32 %14272 to i64
  %14274 = getelementptr inbounds i16, i16* %input43288, i64 %14273
  %14275 = load i16, i16* %14274, align 2, !tbaa !386
  %14276 = insertelement <4 x i16> undef, i16 %14275, i32 0
  %14277 = extractelement <4 x i32> %14271, i32 1
  %14278 = sext i32 %14277 to i64
  %14279 = getelementptr inbounds i16, i16* %input43288, i64 %14278
  %14280 = load i16, i16* %14279, align 2, !tbaa !386
  %14281 = insertelement <4 x i16> %14276, i16 %14280, i32 1
  %14282 = extractelement <4 x i32> %14271, i32 2
  %14283 = sext i32 %14282 to i64
  %14284 = getelementptr inbounds i16, i16* %input43288, i64 %14283
  %14285 = load i16, i16* %14284, align 2, !tbaa !386
  %14286 = insertelement <4 x i16> %14281, i16 %14285, i32 2
  %14287 = extractelement <4 x i32> %14271, i32 3
  %14288 = sext i32 %14287 to i64
  %14289 = getelementptr inbounds i16, i16* %input43288, i64 %14288
  %14290 = load i16, i16* %14289, align 2, !tbaa !386
  %14291 = insertelement <4 x i16> %14286, i16 %14290, i32 3
  %14292 = add nsw i32 %blur_x.s0.x.v2.base.s96, -3
  %14293 = insertelement <4 x i32> undef, i32 %14292, i32 0
  %14294 = shufflevector <4 x i32> %14293, <4 x i32> undef, <4 x i32> zeroinitializer
  %14295 = add nsw <4 x i32> %14294, <i32 0, i32 1, i32 2, i32 3>
  %14296 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %14295, <4 x i32> %90) #11
  %14297 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %14296, <4 x i32> %92) #11
  %14298 = add <4 x i32> %14297, %12599
  %14299 = extractelement <4 x i32> %14298, i32 0
  %14300 = sext i32 %14299 to i64
  %14301 = getelementptr inbounds i16, i16* %input43288, i64 %14300
  %14302 = load i16, i16* %14301, align 2, !tbaa !386
  %14303 = insertelement <4 x i16> undef, i16 %14302, i32 0
  %14304 = extractelement <4 x i32> %14298, i32 1
  %14305 = sext i32 %14304 to i64
  %14306 = getelementptr inbounds i16, i16* %input43288, i64 %14305
  %14307 = load i16, i16* %14306, align 2, !tbaa !386
  %14308 = insertelement <4 x i16> %14303, i16 %14307, i32 1
  %14309 = extractelement <4 x i32> %14298, i32 2
  %14310 = sext i32 %14309 to i64
  %14311 = getelementptr inbounds i16, i16* %input43288, i64 %14310
  %14312 = load i16, i16* %14311, align 2, !tbaa !386
  %14313 = insertelement <4 x i16> %14308, i16 %14312, i32 2
  %14314 = extractelement <4 x i32> %14298, i32 3
  %14315 = sext i32 %14314 to i64
  %14316 = getelementptr inbounds i16, i16* %input43288, i64 %14315
  %14317 = load i16, i16* %14316, align 2, !tbaa !386
  %14318 = insertelement <4 x i16> %14313, i16 %14317, i32 3
  %14319 = add nsw i32 %blur_x.s0.x.v2.base.s96, -4
  %14320 = insertelement <4 x i32> undef, i32 %14319, i32 0
  %14321 = shufflevector <4 x i32> %14320, <4 x i32> undef, <4 x i32> zeroinitializer
  %14322 = add nsw <4 x i32> %14321, <i32 0, i32 1, i32 2, i32 3>
  %14323 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %14322, <4 x i32> %90) #11
  %14324 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %14323, <4 x i32> %92) #11
  %14325 = add <4 x i32> %14324, %12599
  %14326 = extractelement <4 x i32> %14325, i32 0
  %14327 = sext i32 %14326 to i64
  %14328 = getelementptr inbounds i16, i16* %input43288, i64 %14327
  %14329 = load i16, i16* %14328, align 2, !tbaa !386
  %14330 = insertelement <4 x i16> undef, i16 %14329, i32 0
  %14331 = extractelement <4 x i32> %14325, i32 1
  %14332 = sext i32 %14331 to i64
  %14333 = getelementptr inbounds i16, i16* %input43288, i64 %14332
  %14334 = load i16, i16* %14333, align 2, !tbaa !386
  %14335 = insertelement <4 x i16> %14330, i16 %14334, i32 1
  %14336 = extractelement <4 x i32> %14325, i32 2
  %14337 = sext i32 %14336 to i64
  %14338 = getelementptr inbounds i16, i16* %input43288, i64 %14337
  %14339 = load i16, i16* %14338, align 2, !tbaa !386
  %14340 = insertelement <4 x i16> %14335, i16 %14339, i32 2
  %14341 = extractelement <4 x i32> %14325, i32 3
  %14342 = sext i32 %14341 to i64
  %14343 = getelementptr inbounds i16, i16* %input43288, i64 %14342
  %14344 = load i16, i16* %14343, align 2, !tbaa !386
  %14345 = insertelement <4 x i16> %14340, i16 %14344, i32 3
  %14346 = add nsw i32 %blur_x.s0.x.v2.base.s96, -6
  %14347 = insertelement <4 x i32> undef, i32 %14346, i32 0
  %14348 = shufflevector <4 x i32> %14347, <4 x i32> undef, <4 x i32> zeroinitializer
  %14349 = add nsw <4 x i32> %14348, <i32 0, i32 1, i32 2, i32 3>
  %14350 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %14349, <4 x i32> %90) #11
  %14351 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %14350, <4 x i32> %92) #11
  %14352 = add <4 x i32> %14351, %12599
  %14353 = extractelement <4 x i32> %14352, i32 0
  %14354 = sext i32 %14353 to i64
  %14355 = getelementptr inbounds i16, i16* %input43288, i64 %14354
  %14356 = load i16, i16* %14355, align 2, !tbaa !386
  %14357 = insertelement <4 x i16> undef, i16 %14356, i32 0
  %14358 = extractelement <4 x i32> %14352, i32 1
  %14359 = sext i32 %14358 to i64
  %14360 = getelementptr inbounds i16, i16* %input43288, i64 %14359
  %14361 = load i16, i16* %14360, align 2, !tbaa !386
  %14362 = insertelement <4 x i16> %14357, i16 %14361, i32 1
  %14363 = extractelement <4 x i32> %14352, i32 2
  %14364 = sext i32 %14363 to i64
  %14365 = getelementptr inbounds i16, i16* %input43288, i64 %14364
  %14366 = load i16, i16* %14365, align 2, !tbaa !386
  %14367 = insertelement <4 x i16> %14362, i16 %14366, i32 2
  %14368 = extractelement <4 x i32> %14352, i32 3
  %14369 = sext i32 %14368 to i64
  %14370 = getelementptr inbounds i16, i16* %input43288, i64 %14369
  %14371 = load i16, i16* %14370, align 2, !tbaa !386
  %14372 = insertelement <4 x i16> %14367, i16 %14371, i32 3
  %14373 = add nsw i32 %blur_x.s0.x.v2.base.s96, -2
  %14374 = insertelement <4 x i32> undef, i32 %14373, i32 0
  %14375 = shufflevector <4 x i32> %14374, <4 x i32> undef, <4 x i32> zeroinitializer
  %14376 = add nsw <4 x i32> %14375, <i32 0, i32 1, i32 2, i32 3>
  %14377 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %14376, <4 x i32> %90) #11
  %14378 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %14377, <4 x i32> %92) #11
  %14379 = add <4 x i32> %14378, %12599
  %14380 = extractelement <4 x i32> %14379, i32 0
  %14381 = sext i32 %14380 to i64
  %14382 = getelementptr inbounds i16, i16* %input43288, i64 %14381
  %14383 = load i16, i16* %14382, align 2, !tbaa !386
  %14384 = insertelement <4 x i16> undef, i16 %14383, i32 0
  %14385 = extractelement <4 x i32> %14379, i32 1
  %14386 = sext i32 %14385 to i64
  %14387 = getelementptr inbounds i16, i16* %input43288, i64 %14386
  %14388 = load i16, i16* %14387, align 2, !tbaa !386
  %14389 = insertelement <4 x i16> %14384, i16 %14388, i32 1
  %14390 = extractelement <4 x i32> %14379, i32 2
  %14391 = sext i32 %14390 to i64
  %14392 = getelementptr inbounds i16, i16* %input43288, i64 %14391
  %14393 = load i16, i16* %14392, align 2, !tbaa !386
  %14394 = insertelement <4 x i16> %14389, i16 %14393, i32 2
  %14395 = extractelement <4 x i32> %14379, i32 3
  %14396 = sext i32 %14395 to i64
  %14397 = getelementptr inbounds i16, i16* %input43288, i64 %14396
  %14398 = load i16, i16* %14397, align 2, !tbaa !386
  %14399 = insertelement <4 x i16> %14394, i16 %14398, i32 3
  %14400 = insertelement <4 x i32> undef, i32 %blur_x.s0.x.v2.base.s96, i32 0
  %14401 = shufflevector <4 x i32> %14400, <4 x i32> undef, <4 x i32> zeroinitializer
  %14402 = add nsw <4 x i32> %14401, <i32 0, i32 1, i32 2, i32 3>
  %14403 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %14402, <4 x i32> %90) #11
  %14404 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %14403, <4 x i32> %92) #11
  %14405 = add <4 x i32> %14404, %12599
  %14406 = extractelement <4 x i32> %14405, i32 0
  %14407 = sext i32 %14406 to i64
  %14408 = getelementptr inbounds i16, i16* %input43288, i64 %14407
  %14409 = load i16, i16* %14408, align 2, !tbaa !386
  %14410 = insertelement <4 x i16> undef, i16 %14409, i32 0
  %14411 = extractelement <4 x i32> %14405, i32 1
  %14412 = sext i32 %14411 to i64
  %14413 = getelementptr inbounds i16, i16* %input43288, i64 %14412
  %14414 = load i16, i16* %14413, align 2, !tbaa !386
  %14415 = insertelement <4 x i16> %14410, i16 %14414, i32 1
  %14416 = extractelement <4 x i32> %14405, i32 2
  %14417 = sext i32 %14416 to i64
  %14418 = getelementptr inbounds i16, i16* %input43288, i64 %14417
  %14419 = load i16, i16* %14418, align 2, !tbaa !386
  %14420 = insertelement <4 x i16> %14415, i16 %14419, i32 2
  %14421 = extractelement <4 x i32> %14405, i32 3
  %14422 = sext i32 %14421 to i64
  %14423 = getelementptr inbounds i16, i16* %input43288, i64 %14422
  %14424 = load i16, i16* %14423, align 2, !tbaa !386
  %14425 = insertelement <4 x i16> %14420, i16 %14424, i32 3
  %14426 = add nsw i32 %blur_x.s0.x.v2.base.s96, -5
  %14427 = insertelement <4 x i32> undef, i32 %14426, i32 0
  %14428 = shufflevector <4 x i32> %14427, <4 x i32> undef, <4 x i32> zeroinitializer
  %14429 = add nsw <4 x i32> %14428, <i32 0, i32 1, i32 2, i32 3>
  %14430 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %14429, <4 x i32> %90) #11
  %14431 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %14430, <4 x i32> %92) #11
  %14432 = add <4 x i32> %14431, %12599
  %14433 = extractelement <4 x i32> %14432, i32 0
  %14434 = sext i32 %14433 to i64
  %14435 = getelementptr inbounds i16, i16* %input43288, i64 %14434
  %14436 = load i16, i16* %14435, align 2, !tbaa !386
  %14437 = insertelement <4 x i16> undef, i16 %14436, i32 0
  %14438 = extractelement <4 x i32> %14432, i32 1
  %14439 = sext i32 %14438 to i64
  %14440 = getelementptr inbounds i16, i16* %input43288, i64 %14439
  %14441 = load i16, i16* %14440, align 2, !tbaa !386
  %14442 = insertelement <4 x i16> %14437, i16 %14441, i32 1
  %14443 = extractelement <4 x i32> %14432, i32 2
  %14444 = sext i32 %14443 to i64
  %14445 = getelementptr inbounds i16, i16* %input43288, i64 %14444
  %14446 = load i16, i16* %14445, align 2, !tbaa !386
  %14447 = insertelement <4 x i16> %14442, i16 %14446, i32 2
  %14448 = extractelement <4 x i32> %14432, i32 3
  %14449 = sext i32 %14448 to i64
  %14450 = getelementptr inbounds i16, i16* %input43288, i64 %14449
  %14451 = load i16, i16* %14450, align 2, !tbaa !386
  %14452 = insertelement <4 x i16> %14447, i16 %14451, i32 3
  %14453 = add nsw i32 %blur_x.s0.x.v2.base.s96, -1
  %14454 = insertelement <4 x i32> undef, i32 %14453, i32 0
  %14455 = shufflevector <4 x i32> %14454, <4 x i32> undef, <4 x i32> zeroinitializer
  %14456 = add nsw <4 x i32> %14455, <i32 0, i32 1, i32 2, i32 3>
  %14457 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %14456, <4 x i32> %90) #11
  %14458 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %14457, <4 x i32> %92) #11
  %14459 = add <4 x i32> %14458, %12599
  %14460 = extractelement <4 x i32> %14459, i32 0
  %14461 = sext i32 %14460 to i64
  %14462 = getelementptr inbounds i16, i16* %input43288, i64 %14461
  %14463 = load i16, i16* %14462, align 2, !tbaa !386
  %14464 = insertelement <4 x i16> undef, i16 %14463, i32 0
  %14465 = extractelement <4 x i32> %14459, i32 1
  %14466 = sext i32 %14465 to i64
  %14467 = getelementptr inbounds i16, i16* %input43288, i64 %14466
  %14468 = load i16, i16* %14467, align 2, !tbaa !386
  %14469 = insertelement <4 x i16> %14464, i16 %14468, i32 1
  %14470 = extractelement <4 x i32> %14459, i32 2
  %14471 = sext i32 %14470 to i64
  %14472 = getelementptr inbounds i16, i16* %input43288, i64 %14471
  %14473 = load i16, i16* %14472, align 2, !tbaa !386
  %14474 = insertelement <4 x i16> %14469, i16 %14473, i32 2
  %14475 = extractelement <4 x i32> %14459, i32 3
  %14476 = sext i32 %14475 to i64
  %14477 = getelementptr inbounds i16, i16* %input43288, i64 %14476
  %14478 = load i16, i16* %14477, align 2, !tbaa !386
  %14479 = insertelement <4 x i16> %14474, i16 %14478, i32 3
  %14480 = add <4 x i16> %14291, %14193
  %14481 = add <4 x i16> %14480, %14345
  %14482 = add <4 x i16> %14481, %14372
  %14483 = add <4 x i16> %14482, %14452
  %14484 = add <4 x i16> %14345, %14318
  %14485 = add <4 x i16> %14484, %14399
  %14486 = add <4 x i16> %14485, %14425
  %14487 = add <4 x i16> %14486, %14479
  %14488 = shufflevector <4 x i16> %14483, <4 x i16> %14487, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %14489 = zext <8 x i16> %14488 to <8 x i32>
  %14490 = mul nuw <8 x i32> %14489, <i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429>
  %14491 = lshr <8 x i32> %14490, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %14492 = shufflevector <8 x i32> %14491, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %14493 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %14492)
  %14494 = shufflevector <8 x i32> %14491, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %14495 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %14494)
  %14496 = shufflevector <4 x i16> %14493, <4 x i16> %14495, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %14497 = shufflevector <16 x i16> %14496, <16 x i16> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14498 = shufflevector <32 x i16> %14497, <32 x i16> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14499 = sext i32 %blur_x.s0.x.v2.base.s96 to i64
  %14500 = add nsw i64 %14499, %12600
  %14501 = getelementptr inbounds i16, i16* %blur_x61, i64 %14500
  %14502 = bitcast i16* %14501 to <8 x i16>*
  store <8 x i16> %12866, <8 x i16>* %14502, align 2, !tbaa !389
  %14503 = getelementptr inbounds i16, i16* %14501, i64 8
  %14504 = bitcast i16* %14503 to <8 x i16>*
  store <8 x i16> %13099, <8 x i16>* %14504, align 2, !tbaa !389
  %14505 = getelementptr inbounds i16, i16* %14501, i64 16
  %14506 = bitcast i16* %14505 to <8 x i16>*
  store <8 x i16> %13332, <8 x i16>* %14506, align 2, !tbaa !389
  %14507 = getelementptr inbounds i16, i16* %14501, i64 24
  %14508 = bitcast i16* %14507 to <8 x i16>*
  store <8 x i16> %13565, <8 x i16>* %14508, align 2, !tbaa !389
  %14509 = getelementptr inbounds i16, i16* %14501, i64 32
  %14510 = bitcast i16* %14509 to <8 x i16>*
  store <8 x i16> %13798, <8 x i16>* %14510, align 2, !tbaa !389
  %14511 = getelementptr inbounds i16, i16* %14501, i64 40
  %14512 = bitcast i16* %14511 to <8 x i16>*
  store <8 x i16> %14031, <8 x i16>* %14512, align 2, !tbaa !389
  %14513 = getelementptr inbounds i16, i16* %14501, i64 48
  %14514 = bitcast i16* %14513 to <8 x i16>*
  store <8 x i16> %14264, <8 x i16>* %14514, align 2, !tbaa !389
  %14515 = shufflevector <64 x i16> %14498, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %14516 = getelementptr inbounds i16, i16* %14501, i64 56
  %14517 = bitcast i16* %14516 to <8 x i16>*
  store <8 x i16> %14515, <8 x i16>* %14517, align 2, !tbaa !389
  %14518 = add nuw nsw i32 %blur_x.s0.x.x95, 1
  %.not187 = icmp eq i32 %14518, %t31359
  br i1 %.not187, label %"end for blur_x.s0.x.x94", label %"for blur_x.s0.x.x93"

"end for blur_x.s0.x.x94":                        ; preds = %"for blur_x.s0.x.x93", %"for blur_x.s0.y.rebased88"
  br i1 %94, label %"for blur_x.s0.x.x.rebased101.preheader", label %"end for blur_x.s0.x.x.rebased102", !prof !385

"for blur_x.s0.x.x.rebased101.preheader":         ; preds = %"end for blur_x.s0.x.x94"
  %14519 = sext i32 %t33591 to i64
  %indvars.iv.next250.0 = add nuw nsw i64 0, 1
  br label %"for blur_x.s0.x.x.rebased101"

"for blur_x.s0.x.x.rebased101":                   ; preds = %"for blur_x.s0.x.x.rebased101.for blur_x.s0.x.x.rebased101_crit_edge", %"for blur_x.s0.x.x.rebased101.preheader"
  %indvars.iv.next250.phi = phi i64 [ %indvars.iv.next250.0, %"for blur_x.s0.x.x.rebased101.preheader" ], [ %indvars.iv.next250.1, %"for blur_x.s0.x.x.rebased101.for blur_x.s0.x.x.rebased101_crit_edge" ]
  %blur_x.s0.x.x.rebased103 = phi i32 [ 0, %"for blur_x.s0.x.x.rebased101.preheader" ], [ %14761, %"for blur_x.s0.x.x.rebased101.for blur_x.s0.x.x.rebased101_crit_edge" ]
  %14520 = add nsw i32 %blur_x.s0.x.x.rebased103, %t31359
  %14521 = shl nsw i32 %14520, 6
  %blur_x.s0.x.v2.base.s104 = add nsw i32 %14521, %t29350
  %t275105 = add nsw i32 %blur_x.s0.x.v2.base.s104, %t33492
  %14522 = sext i32 %t275105 to i64
  %14523 = getelementptr inbounds i16, i16* %input43288, i64 %14522
  %14524 = getelementptr inbounds i16, i16* %14523, i64 -63
  %14525 = bitcast i16* %14524 to <8 x i16>*
  %14526 = load <8 x i16>, <8 x i16>* %14525, align 2, !tbaa !386
  %14527 = getelementptr inbounds i16, i16* %14523, i64 -64
  %14528 = bitcast i16* %14527 to <8 x i16>*
  %14529 = load <8 x i16>, <8 x i16>* %14528, align 2, !tbaa !386
  %14530 = getelementptr inbounds i16, i16* %14523, i64 -62
  %14531 = bitcast i16* %14530 to <8 x i16>*
  %14532 = load <8 x i16>, <8 x i16>* %14531, align 2, !tbaa !386
  %14533 = getelementptr inbounds i16, i16* %14523, i64 -60
  %14534 = bitcast i16* %14533 to <8 x i16>*
  %14535 = load <8 x i16>, <8 x i16>* %14534, align 2, !tbaa !386
  %14536 = getelementptr inbounds i16, i16* %14523, i64 -61
  %14537 = bitcast i16* %14536 to <8 x i16>*
  %14538 = load <8 x i16>, <8 x i16>* %14537, align 2, !tbaa !386
  %14539 = add <8 x i16> %14529, %14526
  %14540 = add <8 x i16> %14539, %14532
  %14541 = add <8 x i16> %14540, %14535
  %14542 = add <8 x i16> %14541, %14538
  %14543 = zext <8 x i16> %14542 to <8 x i32>
  %14544 = mul nuw <8 x i32> %14543, <i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429>
  %14545 = lshr <8 x i32> %14544, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %14546 = shufflevector <8 x i32> %14545, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %14547 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %14546)
  %14548 = shufflevector <8 x i32> %14545, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %14549 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %14548)
  %14550 = shufflevector <4 x i16> %14547, <4 x i16> %14549, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %14551 = getelementptr inbounds i16, i16* %14523, i64 -55
  %14552 = bitcast i16* %14551 to <8 x i16>*
  %14553 = load <8 x i16>, <8 x i16>* %14552, align 2, !tbaa !386
  %14554 = getelementptr inbounds i16, i16* %14523, i64 -56
  %14555 = bitcast i16* %14554 to <8 x i16>*
  %14556 = load <8 x i16>, <8 x i16>* %14555, align 2, !tbaa !386
  %14557 = getelementptr inbounds i16, i16* %14523, i64 -54
  %14558 = bitcast i16* %14557 to <8 x i16>*
  %14559 = load <8 x i16>, <8 x i16>* %14558, align 2, !tbaa !386
  %14560 = getelementptr inbounds i16, i16* %14523, i64 -52
  %14561 = bitcast i16* %14560 to <8 x i16>*
  %14562 = load <8 x i16>, <8 x i16>* %14561, align 2, !tbaa !386
  %14563 = getelementptr inbounds i16, i16* %14523, i64 -53
  %14564 = bitcast i16* %14563 to <8 x i16>*
  %14565 = load <8 x i16>, <8 x i16>* %14564, align 2, !tbaa !386
  %14566 = add <8 x i16> %14556, %14553
  %14567 = add <8 x i16> %14566, %14559
  %14568 = add <8 x i16> %14567, %14562
  %14569 = add <8 x i16> %14568, %14565
  %14570 = zext <8 x i16> %14569 to <8 x i32>
  %14571 = mul nuw <8 x i32> %14570, <i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429>
  %14572 = lshr <8 x i32> %14571, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %14573 = shufflevector <8 x i32> %14572, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %14574 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %14573)
  %14575 = shufflevector <8 x i32> %14572, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %14576 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %14575)
  %14577 = shufflevector <4 x i16> %14574, <4 x i16> %14576, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %14578 = getelementptr inbounds i16, i16* %14523, i64 -47
  %14579 = bitcast i16* %14578 to <8 x i16>*
  %14580 = load <8 x i16>, <8 x i16>* %14579, align 2, !tbaa !386
  %14581 = getelementptr inbounds i16, i16* %14523, i64 -48
  %14582 = bitcast i16* %14581 to <8 x i16>*
  %14583 = load <8 x i16>, <8 x i16>* %14582, align 2, !tbaa !386
  %14584 = getelementptr inbounds i16, i16* %14523, i64 -46
  %14585 = bitcast i16* %14584 to <8 x i16>*
  %14586 = load <8 x i16>, <8 x i16>* %14585, align 2, !tbaa !386
  %14587 = getelementptr inbounds i16, i16* %14523, i64 -44
  %14588 = bitcast i16* %14587 to <8 x i16>*
  %14589 = load <8 x i16>, <8 x i16>* %14588, align 2, !tbaa !386
  %14590 = getelementptr inbounds i16, i16* %14523, i64 -45
  %14591 = bitcast i16* %14590 to <8 x i16>*
  %14592 = load <8 x i16>, <8 x i16>* %14591, align 2, !tbaa !386
  %14593 = add <8 x i16> %14583, %14580
  %14594 = add <8 x i16> %14593, %14586
  %14595 = add <8 x i16> %14594, %14589
  %14596 = add <8 x i16> %14595, %14592
  %14597 = zext <8 x i16> %14596 to <8 x i32>
  %14598 = mul nuw <8 x i32> %14597, <i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429>
  %14599 = lshr <8 x i32> %14598, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %14600 = shufflevector <8 x i32> %14599, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %14601 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %14600)
  %14602 = shufflevector <8 x i32> %14599, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %14603 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %14602)
  %14604 = shufflevector <4 x i16> %14601, <4 x i16> %14603, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %14605 = getelementptr inbounds i16, i16* %14523, i64 -39
  %14606 = bitcast i16* %14605 to <8 x i16>*
  %14607 = load <8 x i16>, <8 x i16>* %14606, align 2, !tbaa !386
  %14608 = getelementptr inbounds i16, i16* %14523, i64 -40
  %14609 = bitcast i16* %14608 to <8 x i16>*
  %14610 = load <8 x i16>, <8 x i16>* %14609, align 2, !tbaa !386
  %14611 = getelementptr inbounds i16, i16* %14523, i64 -38
  %14612 = bitcast i16* %14611 to <8 x i16>*
  %14613 = load <8 x i16>, <8 x i16>* %14612, align 2, !tbaa !386
  %14614 = getelementptr inbounds i16, i16* %14523, i64 -36
  %14615 = bitcast i16* %14614 to <8 x i16>*
  %14616 = load <8 x i16>, <8 x i16>* %14615, align 2, !tbaa !386
  %14617 = getelementptr inbounds i16, i16* %14523, i64 -37
  %14618 = bitcast i16* %14617 to <8 x i16>*
  %14619 = load <8 x i16>, <8 x i16>* %14618, align 2, !tbaa !386
  %14620 = add <8 x i16> %14610, %14607
  %14621 = add <8 x i16> %14620, %14613
  %14622 = add <8 x i16> %14621, %14616
  %14623 = add <8 x i16> %14622, %14619
  %14624 = zext <8 x i16> %14623 to <8 x i32>
  %14625 = mul nuw <8 x i32> %14624, <i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429>
  %14626 = lshr <8 x i32> %14625, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %14627 = shufflevector <8 x i32> %14626, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %14628 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %14627)
  %14629 = shufflevector <8 x i32> %14626, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %14630 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %14629)
  %14631 = shufflevector <4 x i16> %14628, <4 x i16> %14630, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %14632 = getelementptr inbounds i16, i16* %14523, i64 -31
  %14633 = bitcast i16* %14632 to <8 x i16>*
  %14634 = load <8 x i16>, <8 x i16>* %14633, align 2, !tbaa !386
  %14635 = getelementptr inbounds i16, i16* %14523, i64 -32
  %14636 = bitcast i16* %14635 to <8 x i16>*
  %14637 = load <8 x i16>, <8 x i16>* %14636, align 2, !tbaa !386
  %14638 = getelementptr inbounds i16, i16* %14523, i64 -30
  %14639 = bitcast i16* %14638 to <8 x i16>*
  %14640 = load <8 x i16>, <8 x i16>* %14639, align 2, !tbaa !386
  %14641 = getelementptr inbounds i16, i16* %14523, i64 -28
  %14642 = bitcast i16* %14641 to <8 x i16>*
  %14643 = load <8 x i16>, <8 x i16>* %14642, align 2, !tbaa !386
  %14644 = getelementptr inbounds i16, i16* %14523, i64 -29
  %14645 = bitcast i16* %14644 to <8 x i16>*
  %14646 = load <8 x i16>, <8 x i16>* %14645, align 2, !tbaa !386
  %14647 = add <8 x i16> %14637, %14634
  %14648 = add <8 x i16> %14647, %14640
  %14649 = add <8 x i16> %14648, %14643
  %14650 = add <8 x i16> %14649, %14646
  %14651 = zext <8 x i16> %14650 to <8 x i32>
  %14652 = mul nuw <8 x i32> %14651, <i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429>
  %14653 = lshr <8 x i32> %14652, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %14654 = shufflevector <8 x i32> %14653, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %14655 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %14654)
  %14656 = shufflevector <8 x i32> %14653, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %14657 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %14656)
  %14658 = shufflevector <4 x i16> %14655, <4 x i16> %14657, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %14659 = getelementptr inbounds i16, i16* %14523, i64 -23
  %14660 = bitcast i16* %14659 to <8 x i16>*
  %14661 = load <8 x i16>, <8 x i16>* %14660, align 2, !tbaa !386
  %14662 = getelementptr inbounds i16, i16* %14523, i64 -24
  %14663 = bitcast i16* %14662 to <8 x i16>*
  %14664 = load <8 x i16>, <8 x i16>* %14663, align 2, !tbaa !386
  %14665 = getelementptr inbounds i16, i16* %14523, i64 -22
  %14666 = bitcast i16* %14665 to <8 x i16>*
  %14667 = load <8 x i16>, <8 x i16>* %14666, align 2, !tbaa !386
  %14668 = getelementptr inbounds i16, i16* %14523, i64 -20
  %14669 = bitcast i16* %14668 to <8 x i16>*
  %14670 = load <8 x i16>, <8 x i16>* %14669, align 2, !tbaa !386
  %14671 = getelementptr inbounds i16, i16* %14523, i64 -21
  %14672 = bitcast i16* %14671 to <8 x i16>*
  %14673 = load <8 x i16>, <8 x i16>* %14672, align 2, !tbaa !386
  %14674 = add <8 x i16> %14664, %14661
  %14675 = add <8 x i16> %14674, %14667
  %14676 = add <8 x i16> %14675, %14670
  %14677 = add <8 x i16> %14676, %14673
  %14678 = zext <8 x i16> %14677 to <8 x i32>
  %14679 = mul nuw <8 x i32> %14678, <i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429>
  %14680 = lshr <8 x i32> %14679, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %14681 = shufflevector <8 x i32> %14680, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %14682 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %14681)
  %14683 = shufflevector <8 x i32> %14680, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %14684 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %14683)
  %14685 = shufflevector <4 x i16> %14682, <4 x i16> %14684, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %14686 = getelementptr inbounds i16, i16* %14523, i64 -15
  %14687 = bitcast i16* %14686 to <8 x i16>*
  %14688 = load <8 x i16>, <8 x i16>* %14687, align 2, !tbaa !386
  %14689 = getelementptr inbounds i16, i16* %14523, i64 -16
  %14690 = bitcast i16* %14689 to <8 x i16>*
  %14691 = load <8 x i16>, <8 x i16>* %14690, align 2, !tbaa !386
  %14692 = getelementptr inbounds i16, i16* %14523, i64 -14
  %14693 = bitcast i16* %14692 to <8 x i16>*
  %14694 = load <8 x i16>, <8 x i16>* %14693, align 2, !tbaa !386
  %14695 = getelementptr inbounds i16, i16* %14523, i64 -12
  %14696 = bitcast i16* %14695 to <8 x i16>*
  %14697 = load <8 x i16>, <8 x i16>* %14696, align 2, !tbaa !386
  %14698 = getelementptr inbounds i16, i16* %14523, i64 -13
  %14699 = bitcast i16* %14698 to <8 x i16>*
  %14700 = load <8 x i16>, <8 x i16>* %14699, align 2, !tbaa !386
  %14701 = add <8 x i16> %14691, %14688
  %14702 = add <8 x i16> %14701, %14694
  %14703 = add <8 x i16> %14702, %14697
  %14704 = add <8 x i16> %14703, %14700
  %14705 = zext <8 x i16> %14704 to <8 x i32>
  %14706 = mul nuw <8 x i32> %14705, <i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429>
  %14707 = lshr <8 x i32> %14706, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %14708 = shufflevector <8 x i32> %14707, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %14709 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %14708)
  %14710 = shufflevector <8 x i32> %14707, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %14711 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %14710)
  %14712 = shufflevector <4 x i16> %14709, <4 x i16> %14711, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %14713 = getelementptr inbounds i16, i16* %14523, i64 -7
  %14714 = bitcast i16* %14713 to <8 x i16>*
  %14715 = load <8 x i16>, <8 x i16>* %14714, align 2, !tbaa !386
  %14716 = getelementptr inbounds i16, i16* %14523, i64 -8
  %14717 = bitcast i16* %14716 to <8 x i16>*
  %14718 = load <8 x i16>, <8 x i16>* %14717, align 2, !tbaa !386
  %14719 = getelementptr inbounds i16, i16* %14523, i64 -6
  %14720 = bitcast i16* %14719 to <8 x i16>*
  %14721 = load <8 x i16>, <8 x i16>* %14720, align 2, !tbaa !386
  %14722 = getelementptr inbounds i16, i16* %14523, i64 -4
  %14723 = bitcast i16* %14722 to <8 x i16>*
  %14724 = load <8 x i16>, <8 x i16>* %14723, align 2, !tbaa !386
  %14725 = getelementptr inbounds i16, i16* %14523, i64 -5
  %14726 = bitcast i16* %14725 to <8 x i16>*
  %14727 = load <8 x i16>, <8 x i16>* %14726, align 2, !tbaa !386
  %14728 = add <8 x i16> %14718, %14715
  %14729 = add <8 x i16> %14728, %14721
  %14730 = add <8 x i16> %14729, %14724
  %14731 = add <8 x i16> %14730, %14727
  %14732 = zext <8 x i16> %14731 to <8 x i32>
  %14733 = mul nuw <8 x i32> %14732, <i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429>
  %14734 = lshr <8 x i32> %14733, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %14735 = shufflevector <8 x i32> %14734, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %14736 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %14735)
  %14737 = shufflevector <8 x i32> %14734, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %14738 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %14737)
  %14739 = shufflevector <4 x i16> %14736, <4 x i16> %14738, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %14740 = shufflevector <16 x i16> %14739, <16 x i16> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14741 = shufflevector <32 x i16> %14740, <32 x i16> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14742 = sext i32 %blur_x.s0.x.v2.base.s104 to i64
  %14743 = add nsw i64 %14742, %14519
  %14744 = getelementptr inbounds i16, i16* %blur_x61, i64 %14743
  %14745 = bitcast i16* %14744 to <8 x i16>*
  store <8 x i16> %14550, <8 x i16>* %14745, align 2, !tbaa !389
  %14746 = getelementptr inbounds i16, i16* %14744, i64 8
  %14747 = bitcast i16* %14746 to <8 x i16>*
  store <8 x i16> %14577, <8 x i16>* %14747, align 2, !tbaa !389
  %14748 = getelementptr inbounds i16, i16* %14744, i64 16
  %14749 = bitcast i16* %14748 to <8 x i16>*
  store <8 x i16> %14604, <8 x i16>* %14749, align 2, !tbaa !389
  %14750 = getelementptr inbounds i16, i16* %14744, i64 24
  %14751 = bitcast i16* %14750 to <8 x i16>*
  store <8 x i16> %14631, <8 x i16>* %14751, align 2, !tbaa !389
  %14752 = getelementptr inbounds i16, i16* %14744, i64 32
  %14753 = bitcast i16* %14752 to <8 x i16>*
  store <8 x i16> %14658, <8 x i16>* %14753, align 2, !tbaa !389
  %14754 = getelementptr inbounds i16, i16* %14744, i64 40
  %14755 = bitcast i16* %14754 to <8 x i16>*
  store <8 x i16> %14685, <8 x i16>* %14755, align 2, !tbaa !389
  %14756 = getelementptr inbounds i16, i16* %14744, i64 48
  %14757 = bitcast i16* %14756 to <8 x i16>*
  store <8 x i16> %14712, <8 x i16>* %14757, align 2, !tbaa !389
  %14758 = shufflevector <64 x i16> %14741, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %14759 = getelementptr inbounds i16, i16* %14744, i64 56
  %14760 = bitcast i16* %14759 to <8 x i16>*
  store <8 x i16> %14758, <8 x i16>* %14760, align 2, !tbaa !389
  %14761 = add nuw nsw i32 %blur_x.s0.x.x.rebased103, 1
  %.not186 = icmp eq i64 %indvars.iv.next250.phi, %101
  br i1 %.not186, label %"end for blur_x.s0.x.x.rebased102", label %"for blur_x.s0.x.x.rebased101.for blur_x.s0.x.x.rebased101_crit_edge"

"for blur_x.s0.x.x.rebased101.for blur_x.s0.x.x.rebased101_crit_edge": ; preds = %"for blur_x.s0.x.x.rebased101"
  %indvars.iv.next250.1 = add nuw nsw i64 %indvars.iv.next250.phi, 1
  br label %"for blur_x.s0.x.x.rebased101"

"end for blur_x.s0.x.x.rebased102":               ; preds = %"for blur_x.s0.x.x.rebased101", %"end for blur_x.s0.x.x94"
  br i1 %95, label %"for blur_x.s0.x.x.rebased108.preheader", label %"end for blur_x.s0.x.x.rebased109", !prof !385

"for blur_x.s0.x.x.rebased108.preheader":         ; preds = %"end for blur_x.s0.x.x.rebased102"
  %14762 = insertelement <4 x i32> undef, i32 %t33492, i32 0
  %14763 = shufflevector <4 x i32> %14762, <4 x i32> undef, <4 x i32> zeroinitializer
  %14764 = sext i32 %t33591 to i64
  br label %"for blur_x.s0.x.x.rebased108"

"for blur_x.s0.x.x.rebased108":                   ; preds = %"for blur_x.s0.x.x.rebased108.preheader", %"for blur_x.s0.x.x.rebased108"
  %blur_x.s0.x.x.rebased110 = phi i32 [ %16679, %"for blur_x.s0.x.x.rebased108" ], [ 0, %"for blur_x.s0.x.x.rebased108.preheader" ]
  %14765 = add nsw i32 %blur_x.s0.x.x.rebased110, %t29851
  %14766 = shl nsw i32 %14765, 6
  %a82 = add nsw i32 %14766, %t29350
  %14767 = icmp slt i32 %a82, %b101
  %blur_x.s0.x.v2.base.s111 = select i1 %14767, i32 %a82, i32 %b101
  %14768 = add nsw i32 %blur_x.s0.x.v2.base.s111, -63
  %14769 = insertelement <4 x i32> undef, i32 %14768, i32 0
  %14770 = shufflevector <4 x i32> %14769, <4 x i32> undef, <4 x i32> zeroinitializer
  %14771 = add nsw <4 x i32> %14770, <i32 0, i32 1, i32 2, i32 3>
  %14772 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %14771, <4 x i32> %90) #11
  %14773 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %14772, <4 x i32> %92) #11
  %14774 = add <4 x i32> %14773, %14763
  %14775 = extractelement <4 x i32> %14774, i32 0
  %14776 = sext i32 %14775 to i64
  %14777 = getelementptr inbounds i16, i16* %input43288, i64 %14776
  %14778 = load i16, i16* %14777, align 2, !tbaa !386
  %14779 = insertelement <4 x i16> undef, i16 %14778, i32 0
  %14780 = extractelement <4 x i32> %14774, i32 1
  %14781 = sext i32 %14780 to i64
  %14782 = getelementptr inbounds i16, i16* %input43288, i64 %14781
  %14783 = load i16, i16* %14782, align 2, !tbaa !386
  %14784 = insertelement <4 x i16> %14779, i16 %14783, i32 1
  %14785 = extractelement <4 x i32> %14774, i32 2
  %14786 = sext i32 %14785 to i64
  %14787 = getelementptr inbounds i16, i16* %input43288, i64 %14786
  %14788 = load i16, i16* %14787, align 2, !tbaa !386
  %14789 = insertelement <4 x i16> %14784, i16 %14788, i32 2
  %14790 = extractelement <4 x i32> %14774, i32 3
  %14791 = sext i32 %14790 to i64
  %14792 = getelementptr inbounds i16, i16* %input43288, i64 %14791
  %14793 = load i16, i16* %14792, align 2, !tbaa !386
  %14794 = insertelement <4 x i16> %14789, i16 %14793, i32 3
  %14795 = add nsw i32 %blur_x.s0.x.v2.base.s111, -59
  %14796 = insertelement <4 x i32> undef, i32 %14795, i32 0
  %14797 = shufflevector <4 x i32> %14796, <4 x i32> undef, <4 x i32> zeroinitializer
  %14798 = add nsw <4 x i32> %14797, <i32 0, i32 1, i32 2, i32 3>
  %14799 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %14798, <4 x i32> %90) #11
  %14800 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %14799, <4 x i32> %92) #11
  %14801 = add <4 x i32> %14800, %14763
  %14802 = extractelement <4 x i32> %14801, i32 0
  %14803 = sext i32 %14802 to i64
  %14804 = getelementptr inbounds i16, i16* %input43288, i64 %14803
  %14805 = load i16, i16* %14804, align 2, !tbaa !386
  %14806 = insertelement <4 x i16> undef, i16 %14805, i32 0
  %14807 = extractelement <4 x i32> %14801, i32 1
  %14808 = sext i32 %14807 to i64
  %14809 = getelementptr inbounds i16, i16* %input43288, i64 %14808
  %14810 = load i16, i16* %14809, align 2, !tbaa !386
  %14811 = insertelement <4 x i16> %14806, i16 %14810, i32 1
  %14812 = extractelement <4 x i32> %14801, i32 2
  %14813 = sext i32 %14812 to i64
  %14814 = getelementptr inbounds i16, i16* %input43288, i64 %14813
  %14815 = load i16, i16* %14814, align 2, !tbaa !386
  %14816 = insertelement <4 x i16> %14811, i16 %14815, i32 2
  %14817 = extractelement <4 x i32> %14801, i32 3
  %14818 = sext i32 %14817 to i64
  %14819 = getelementptr inbounds i16, i16* %input43288, i64 %14818
  %14820 = load i16, i16* %14819, align 2, !tbaa !386
  %14821 = insertelement <4 x i16> %14816, i16 %14820, i32 3
  %14822 = add nsw i32 %blur_x.s0.x.v2.base.s111, -64
  %14823 = insertelement <4 x i32> undef, i32 %14822, i32 0
  %14824 = shufflevector <4 x i32> %14823, <4 x i32> undef, <4 x i32> zeroinitializer
  %14825 = add nsw <4 x i32> %14824, <i32 0, i32 1, i32 2, i32 3>
  %14826 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %14825, <4 x i32> %90) #11
  %14827 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %14826, <4 x i32> %92) #11
  %14828 = add <4 x i32> %14827, %14763
  %14829 = extractelement <4 x i32> %14828, i32 0
  %14830 = sext i32 %14829 to i64
  %14831 = getelementptr inbounds i16, i16* %input43288, i64 %14830
  %14832 = load i16, i16* %14831, align 2, !tbaa !386
  %14833 = insertelement <4 x i16> undef, i16 %14832, i32 0
  %14834 = extractelement <4 x i32> %14828, i32 1
  %14835 = sext i32 %14834 to i64
  %14836 = getelementptr inbounds i16, i16* %input43288, i64 %14835
  %14837 = load i16, i16* %14836, align 2, !tbaa !386
  %14838 = insertelement <4 x i16> %14833, i16 %14837, i32 1
  %14839 = extractelement <4 x i32> %14828, i32 2
  %14840 = sext i32 %14839 to i64
  %14841 = getelementptr inbounds i16, i16* %input43288, i64 %14840
  %14842 = load i16, i16* %14841, align 2, !tbaa !386
  %14843 = insertelement <4 x i16> %14838, i16 %14842, i32 2
  %14844 = extractelement <4 x i32> %14828, i32 3
  %14845 = sext i32 %14844 to i64
  %14846 = getelementptr inbounds i16, i16* %input43288, i64 %14845
  %14847 = load i16, i16* %14846, align 2, !tbaa !386
  %14848 = insertelement <4 x i16> %14843, i16 %14847, i32 3
  %14849 = add nsw i32 %blur_x.s0.x.v2.base.s111, -60
  %14850 = insertelement <4 x i32> undef, i32 %14849, i32 0
  %14851 = shufflevector <4 x i32> %14850, <4 x i32> undef, <4 x i32> zeroinitializer
  %14852 = add nsw <4 x i32> %14851, <i32 0, i32 1, i32 2, i32 3>
  %14853 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %14852, <4 x i32> %90) #11
  %14854 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %14853, <4 x i32> %92) #11
  %14855 = add <4 x i32> %14854, %14763
  %14856 = extractelement <4 x i32> %14855, i32 0
  %14857 = sext i32 %14856 to i64
  %14858 = getelementptr inbounds i16, i16* %input43288, i64 %14857
  %14859 = load i16, i16* %14858, align 2, !tbaa !386
  %14860 = insertelement <4 x i16> undef, i16 %14859, i32 0
  %14861 = extractelement <4 x i32> %14855, i32 1
  %14862 = sext i32 %14861 to i64
  %14863 = getelementptr inbounds i16, i16* %input43288, i64 %14862
  %14864 = load i16, i16* %14863, align 2, !tbaa !386
  %14865 = insertelement <4 x i16> %14860, i16 %14864, i32 1
  %14866 = extractelement <4 x i32> %14855, i32 2
  %14867 = sext i32 %14866 to i64
  %14868 = getelementptr inbounds i16, i16* %input43288, i64 %14867
  %14869 = load i16, i16* %14868, align 2, !tbaa !386
  %14870 = insertelement <4 x i16> %14865, i16 %14869, i32 2
  %14871 = extractelement <4 x i32> %14855, i32 3
  %14872 = sext i32 %14871 to i64
  %14873 = getelementptr inbounds i16, i16* %input43288, i64 %14872
  %14874 = load i16, i16* %14873, align 2, !tbaa !386
  %14875 = insertelement <4 x i16> %14870, i16 %14874, i32 3
  %14876 = add nsw i32 %blur_x.s0.x.v2.base.s111, -62
  %14877 = insertelement <4 x i32> undef, i32 %14876, i32 0
  %14878 = shufflevector <4 x i32> %14877, <4 x i32> undef, <4 x i32> zeroinitializer
  %14879 = add nsw <4 x i32> %14878, <i32 0, i32 1, i32 2, i32 3>
  %14880 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %14879, <4 x i32> %90) #11
  %14881 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %14880, <4 x i32> %92) #11
  %14882 = add <4 x i32> %14881, %14763
  %14883 = extractelement <4 x i32> %14882, i32 0
  %14884 = sext i32 %14883 to i64
  %14885 = getelementptr inbounds i16, i16* %input43288, i64 %14884
  %14886 = load i16, i16* %14885, align 2, !tbaa !386
  %14887 = insertelement <4 x i16> undef, i16 %14886, i32 0
  %14888 = extractelement <4 x i32> %14882, i32 1
  %14889 = sext i32 %14888 to i64
  %14890 = getelementptr inbounds i16, i16* %input43288, i64 %14889
  %14891 = load i16, i16* %14890, align 2, !tbaa !386
  %14892 = insertelement <4 x i16> %14887, i16 %14891, i32 1
  %14893 = extractelement <4 x i32> %14882, i32 2
  %14894 = sext i32 %14893 to i64
  %14895 = getelementptr inbounds i16, i16* %input43288, i64 %14894
  %14896 = load i16, i16* %14895, align 2, !tbaa !386
  %14897 = insertelement <4 x i16> %14892, i16 %14896, i32 2
  %14898 = extractelement <4 x i32> %14882, i32 3
  %14899 = sext i32 %14898 to i64
  %14900 = getelementptr inbounds i16, i16* %input43288, i64 %14899
  %14901 = load i16, i16* %14900, align 2, !tbaa !386
  %14902 = insertelement <4 x i16> %14897, i16 %14901, i32 3
  %14903 = add nsw i32 %blur_x.s0.x.v2.base.s111, -58
  %14904 = insertelement <4 x i32> undef, i32 %14903, i32 0
  %14905 = shufflevector <4 x i32> %14904, <4 x i32> undef, <4 x i32> zeroinitializer
  %14906 = add nsw <4 x i32> %14905, <i32 0, i32 1, i32 2, i32 3>
  %14907 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %14906, <4 x i32> %90) #11
  %14908 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %14907, <4 x i32> %92) #11
  %14909 = add <4 x i32> %14908, %14763
  %14910 = extractelement <4 x i32> %14909, i32 0
  %14911 = sext i32 %14910 to i64
  %14912 = getelementptr inbounds i16, i16* %input43288, i64 %14911
  %14913 = load i16, i16* %14912, align 2, !tbaa !386
  %14914 = insertelement <4 x i16> undef, i16 %14913, i32 0
  %14915 = extractelement <4 x i32> %14909, i32 1
  %14916 = sext i32 %14915 to i64
  %14917 = getelementptr inbounds i16, i16* %input43288, i64 %14916
  %14918 = load i16, i16* %14917, align 2, !tbaa !386
  %14919 = insertelement <4 x i16> %14914, i16 %14918, i32 1
  %14920 = extractelement <4 x i32> %14909, i32 2
  %14921 = sext i32 %14920 to i64
  %14922 = getelementptr inbounds i16, i16* %input43288, i64 %14921
  %14923 = load i16, i16* %14922, align 2, !tbaa !386
  %14924 = insertelement <4 x i16> %14919, i16 %14923, i32 2
  %14925 = extractelement <4 x i32> %14909, i32 3
  %14926 = sext i32 %14925 to i64
  %14927 = getelementptr inbounds i16, i16* %input43288, i64 %14926
  %14928 = load i16, i16* %14927, align 2, !tbaa !386
  %14929 = insertelement <4 x i16> %14924, i16 %14928, i32 3
  %14930 = add nsw i32 %blur_x.s0.x.v2.base.s111, -56
  %14931 = insertelement <4 x i32> undef, i32 %14930, i32 0
  %14932 = shufflevector <4 x i32> %14931, <4 x i32> undef, <4 x i32> zeroinitializer
  %14933 = add nsw <4 x i32> %14932, <i32 0, i32 1, i32 2, i32 3>
  %14934 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %14933, <4 x i32> %90) #11
  %14935 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %14934, <4 x i32> %92) #11
  %14936 = add <4 x i32> %14935, %14763
  %14937 = extractelement <4 x i32> %14936, i32 0
  %14938 = sext i32 %14937 to i64
  %14939 = getelementptr inbounds i16, i16* %input43288, i64 %14938
  %14940 = load i16, i16* %14939, align 2, !tbaa !386
  %14941 = insertelement <4 x i16> undef, i16 %14940, i32 0
  %14942 = extractelement <4 x i32> %14936, i32 1
  %14943 = sext i32 %14942 to i64
  %14944 = getelementptr inbounds i16, i16* %input43288, i64 %14943
  %14945 = load i16, i16* %14944, align 2, !tbaa !386
  %14946 = insertelement <4 x i16> %14941, i16 %14945, i32 1
  %14947 = extractelement <4 x i32> %14936, i32 2
  %14948 = sext i32 %14947 to i64
  %14949 = getelementptr inbounds i16, i16* %input43288, i64 %14948
  %14950 = load i16, i16* %14949, align 2, !tbaa !386
  %14951 = insertelement <4 x i16> %14946, i16 %14950, i32 2
  %14952 = extractelement <4 x i32> %14936, i32 3
  %14953 = sext i32 %14952 to i64
  %14954 = getelementptr inbounds i16, i16* %input43288, i64 %14953
  %14955 = load i16, i16* %14954, align 2, !tbaa !386
  %14956 = insertelement <4 x i16> %14951, i16 %14955, i32 3
  %14957 = add nsw i32 %blur_x.s0.x.v2.base.s111, -61
  %14958 = insertelement <4 x i32> undef, i32 %14957, i32 0
  %14959 = shufflevector <4 x i32> %14958, <4 x i32> undef, <4 x i32> zeroinitializer
  %14960 = add nsw <4 x i32> %14959, <i32 0, i32 1, i32 2, i32 3>
  %14961 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %14960, <4 x i32> %90) #11
  %14962 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %14961, <4 x i32> %92) #11
  %14963 = add <4 x i32> %14962, %14763
  %14964 = extractelement <4 x i32> %14963, i32 0
  %14965 = sext i32 %14964 to i64
  %14966 = getelementptr inbounds i16, i16* %input43288, i64 %14965
  %14967 = load i16, i16* %14966, align 2, !tbaa !386
  %14968 = insertelement <4 x i16> undef, i16 %14967, i32 0
  %14969 = extractelement <4 x i32> %14963, i32 1
  %14970 = sext i32 %14969 to i64
  %14971 = getelementptr inbounds i16, i16* %input43288, i64 %14970
  %14972 = load i16, i16* %14971, align 2, !tbaa !386
  %14973 = insertelement <4 x i16> %14968, i16 %14972, i32 1
  %14974 = extractelement <4 x i32> %14963, i32 2
  %14975 = sext i32 %14974 to i64
  %14976 = getelementptr inbounds i16, i16* %input43288, i64 %14975
  %14977 = load i16, i16* %14976, align 2, !tbaa !386
  %14978 = insertelement <4 x i16> %14973, i16 %14977, i32 2
  %14979 = extractelement <4 x i32> %14963, i32 3
  %14980 = sext i32 %14979 to i64
  %14981 = getelementptr inbounds i16, i16* %input43288, i64 %14980
  %14982 = load i16, i16* %14981, align 2, !tbaa !386
  %14983 = insertelement <4 x i16> %14978, i16 %14982, i32 3
  %14984 = add nsw i32 %blur_x.s0.x.v2.base.s111, -57
  %14985 = insertelement <4 x i32> undef, i32 %14984, i32 0
  %14986 = shufflevector <4 x i32> %14985, <4 x i32> undef, <4 x i32> zeroinitializer
  %14987 = add nsw <4 x i32> %14986, <i32 0, i32 1, i32 2, i32 3>
  %14988 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %14987, <4 x i32> %90) #11
  %14989 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %14988, <4 x i32> %92) #11
  %14990 = add <4 x i32> %14989, %14763
  %14991 = extractelement <4 x i32> %14990, i32 0
  %14992 = sext i32 %14991 to i64
  %14993 = getelementptr inbounds i16, i16* %input43288, i64 %14992
  %14994 = load i16, i16* %14993, align 2, !tbaa !386
  %14995 = insertelement <4 x i16> undef, i16 %14994, i32 0
  %14996 = extractelement <4 x i32> %14990, i32 1
  %14997 = sext i32 %14996 to i64
  %14998 = getelementptr inbounds i16, i16* %input43288, i64 %14997
  %14999 = load i16, i16* %14998, align 2, !tbaa !386
  %15000 = insertelement <4 x i16> %14995, i16 %14999, i32 1
  %15001 = extractelement <4 x i32> %14990, i32 2
  %15002 = sext i32 %15001 to i64
  %15003 = getelementptr inbounds i16, i16* %input43288, i64 %15002
  %15004 = load i16, i16* %15003, align 2, !tbaa !386
  %15005 = insertelement <4 x i16> %15000, i16 %15004, i32 2
  %15006 = extractelement <4 x i32> %14990, i32 3
  %15007 = sext i32 %15006 to i64
  %15008 = getelementptr inbounds i16, i16* %input43288, i64 %15007
  %15009 = load i16, i16* %15008, align 2, !tbaa !386
  %15010 = insertelement <4 x i16> %15005, i16 %15009, i32 3
  %15011 = add <4 x i16> %14848, %14794
  %15012 = add <4 x i16> %15011, %14875
  %15013 = add <4 x i16> %15012, %14902
  %15014 = add <4 x i16> %15013, %14983
  %15015 = add <4 x i16> %14875, %14821
  %15016 = add <4 x i16> %15015, %14929
  %15017 = add <4 x i16> %15016, %14956
  %15018 = add <4 x i16> %15017, %15010
  %15019 = shufflevector <4 x i16> %15014, <4 x i16> %15018, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %15020 = zext <8 x i16> %15019 to <8 x i32>
  %15021 = mul nuw <8 x i32> %15020, <i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429>
  %15022 = lshr <8 x i32> %15021, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %15023 = shufflevector <8 x i32> %15022, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %15024 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %15023)
  %15025 = shufflevector <8 x i32> %15022, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %15026 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %15025)
  %15027 = shufflevector <4 x i16> %15024, <4 x i16> %15026, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %15028 = add nsw i32 %blur_x.s0.x.v2.base.s111, -55
  %15029 = insertelement <4 x i32> undef, i32 %15028, i32 0
  %15030 = shufflevector <4 x i32> %15029, <4 x i32> undef, <4 x i32> zeroinitializer
  %15031 = add nsw <4 x i32> %15030, <i32 0, i32 1, i32 2, i32 3>
  %15032 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15031, <4 x i32> %90) #11
  %15033 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15032, <4 x i32> %92) #11
  %15034 = add <4 x i32> %15033, %14763
  %15035 = extractelement <4 x i32> %15034, i32 0
  %15036 = sext i32 %15035 to i64
  %15037 = getelementptr inbounds i16, i16* %input43288, i64 %15036
  %15038 = load i16, i16* %15037, align 2, !tbaa !386
  %15039 = insertelement <4 x i16> undef, i16 %15038, i32 0
  %15040 = extractelement <4 x i32> %15034, i32 1
  %15041 = sext i32 %15040 to i64
  %15042 = getelementptr inbounds i16, i16* %input43288, i64 %15041
  %15043 = load i16, i16* %15042, align 2, !tbaa !386
  %15044 = insertelement <4 x i16> %15039, i16 %15043, i32 1
  %15045 = extractelement <4 x i32> %15034, i32 2
  %15046 = sext i32 %15045 to i64
  %15047 = getelementptr inbounds i16, i16* %input43288, i64 %15046
  %15048 = load i16, i16* %15047, align 2, !tbaa !386
  %15049 = insertelement <4 x i16> %15044, i16 %15048, i32 2
  %15050 = extractelement <4 x i32> %15034, i32 3
  %15051 = sext i32 %15050 to i64
  %15052 = getelementptr inbounds i16, i16* %input43288, i64 %15051
  %15053 = load i16, i16* %15052, align 2, !tbaa !386
  %15054 = insertelement <4 x i16> %15049, i16 %15053, i32 3
  %15055 = add nsw i32 %blur_x.s0.x.v2.base.s111, -51
  %15056 = insertelement <4 x i32> undef, i32 %15055, i32 0
  %15057 = shufflevector <4 x i32> %15056, <4 x i32> undef, <4 x i32> zeroinitializer
  %15058 = add nsw <4 x i32> %15057, <i32 0, i32 1, i32 2, i32 3>
  %15059 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15058, <4 x i32> %90) #11
  %15060 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15059, <4 x i32> %92) #11
  %15061 = add <4 x i32> %15060, %14763
  %15062 = extractelement <4 x i32> %15061, i32 0
  %15063 = sext i32 %15062 to i64
  %15064 = getelementptr inbounds i16, i16* %input43288, i64 %15063
  %15065 = load i16, i16* %15064, align 2, !tbaa !386
  %15066 = insertelement <4 x i16> undef, i16 %15065, i32 0
  %15067 = extractelement <4 x i32> %15061, i32 1
  %15068 = sext i32 %15067 to i64
  %15069 = getelementptr inbounds i16, i16* %input43288, i64 %15068
  %15070 = load i16, i16* %15069, align 2, !tbaa !386
  %15071 = insertelement <4 x i16> %15066, i16 %15070, i32 1
  %15072 = extractelement <4 x i32> %15061, i32 2
  %15073 = sext i32 %15072 to i64
  %15074 = getelementptr inbounds i16, i16* %input43288, i64 %15073
  %15075 = load i16, i16* %15074, align 2, !tbaa !386
  %15076 = insertelement <4 x i16> %15071, i16 %15075, i32 2
  %15077 = extractelement <4 x i32> %15061, i32 3
  %15078 = sext i32 %15077 to i64
  %15079 = getelementptr inbounds i16, i16* %input43288, i64 %15078
  %15080 = load i16, i16* %15079, align 2, !tbaa !386
  %15081 = insertelement <4 x i16> %15076, i16 %15080, i32 3
  %15082 = add nsw i32 %blur_x.s0.x.v2.base.s111, -52
  %15083 = insertelement <4 x i32> undef, i32 %15082, i32 0
  %15084 = shufflevector <4 x i32> %15083, <4 x i32> undef, <4 x i32> zeroinitializer
  %15085 = add nsw <4 x i32> %15084, <i32 0, i32 1, i32 2, i32 3>
  %15086 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15085, <4 x i32> %90) #11
  %15087 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15086, <4 x i32> %92) #11
  %15088 = add <4 x i32> %15087, %14763
  %15089 = extractelement <4 x i32> %15088, i32 0
  %15090 = sext i32 %15089 to i64
  %15091 = getelementptr inbounds i16, i16* %input43288, i64 %15090
  %15092 = load i16, i16* %15091, align 2, !tbaa !386
  %15093 = insertelement <4 x i16> undef, i16 %15092, i32 0
  %15094 = extractelement <4 x i32> %15088, i32 1
  %15095 = sext i32 %15094 to i64
  %15096 = getelementptr inbounds i16, i16* %input43288, i64 %15095
  %15097 = load i16, i16* %15096, align 2, !tbaa !386
  %15098 = insertelement <4 x i16> %15093, i16 %15097, i32 1
  %15099 = extractelement <4 x i32> %15088, i32 2
  %15100 = sext i32 %15099 to i64
  %15101 = getelementptr inbounds i16, i16* %input43288, i64 %15100
  %15102 = load i16, i16* %15101, align 2, !tbaa !386
  %15103 = insertelement <4 x i16> %15098, i16 %15102, i32 2
  %15104 = extractelement <4 x i32> %15088, i32 3
  %15105 = sext i32 %15104 to i64
  %15106 = getelementptr inbounds i16, i16* %input43288, i64 %15105
  %15107 = load i16, i16* %15106, align 2, !tbaa !386
  %15108 = insertelement <4 x i16> %15103, i16 %15107, i32 3
  %15109 = add nsw i32 %blur_x.s0.x.v2.base.s111, -54
  %15110 = insertelement <4 x i32> undef, i32 %15109, i32 0
  %15111 = shufflevector <4 x i32> %15110, <4 x i32> undef, <4 x i32> zeroinitializer
  %15112 = add nsw <4 x i32> %15111, <i32 0, i32 1, i32 2, i32 3>
  %15113 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15112, <4 x i32> %90) #11
  %15114 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15113, <4 x i32> %92) #11
  %15115 = add <4 x i32> %15114, %14763
  %15116 = extractelement <4 x i32> %15115, i32 0
  %15117 = sext i32 %15116 to i64
  %15118 = getelementptr inbounds i16, i16* %input43288, i64 %15117
  %15119 = load i16, i16* %15118, align 2, !tbaa !386
  %15120 = insertelement <4 x i16> undef, i16 %15119, i32 0
  %15121 = extractelement <4 x i32> %15115, i32 1
  %15122 = sext i32 %15121 to i64
  %15123 = getelementptr inbounds i16, i16* %input43288, i64 %15122
  %15124 = load i16, i16* %15123, align 2, !tbaa !386
  %15125 = insertelement <4 x i16> %15120, i16 %15124, i32 1
  %15126 = extractelement <4 x i32> %15115, i32 2
  %15127 = sext i32 %15126 to i64
  %15128 = getelementptr inbounds i16, i16* %input43288, i64 %15127
  %15129 = load i16, i16* %15128, align 2, !tbaa !386
  %15130 = insertelement <4 x i16> %15125, i16 %15129, i32 2
  %15131 = extractelement <4 x i32> %15115, i32 3
  %15132 = sext i32 %15131 to i64
  %15133 = getelementptr inbounds i16, i16* %input43288, i64 %15132
  %15134 = load i16, i16* %15133, align 2, !tbaa !386
  %15135 = insertelement <4 x i16> %15130, i16 %15134, i32 3
  %15136 = add nsw i32 %blur_x.s0.x.v2.base.s111, -50
  %15137 = insertelement <4 x i32> undef, i32 %15136, i32 0
  %15138 = shufflevector <4 x i32> %15137, <4 x i32> undef, <4 x i32> zeroinitializer
  %15139 = add nsw <4 x i32> %15138, <i32 0, i32 1, i32 2, i32 3>
  %15140 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15139, <4 x i32> %90) #11
  %15141 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15140, <4 x i32> %92) #11
  %15142 = add <4 x i32> %15141, %14763
  %15143 = extractelement <4 x i32> %15142, i32 0
  %15144 = sext i32 %15143 to i64
  %15145 = getelementptr inbounds i16, i16* %input43288, i64 %15144
  %15146 = load i16, i16* %15145, align 2, !tbaa !386
  %15147 = insertelement <4 x i16> undef, i16 %15146, i32 0
  %15148 = extractelement <4 x i32> %15142, i32 1
  %15149 = sext i32 %15148 to i64
  %15150 = getelementptr inbounds i16, i16* %input43288, i64 %15149
  %15151 = load i16, i16* %15150, align 2, !tbaa !386
  %15152 = insertelement <4 x i16> %15147, i16 %15151, i32 1
  %15153 = extractelement <4 x i32> %15142, i32 2
  %15154 = sext i32 %15153 to i64
  %15155 = getelementptr inbounds i16, i16* %input43288, i64 %15154
  %15156 = load i16, i16* %15155, align 2, !tbaa !386
  %15157 = insertelement <4 x i16> %15152, i16 %15156, i32 2
  %15158 = extractelement <4 x i32> %15142, i32 3
  %15159 = sext i32 %15158 to i64
  %15160 = getelementptr inbounds i16, i16* %input43288, i64 %15159
  %15161 = load i16, i16* %15160, align 2, !tbaa !386
  %15162 = insertelement <4 x i16> %15157, i16 %15161, i32 3
  %15163 = add nsw i32 %blur_x.s0.x.v2.base.s111, -48
  %15164 = insertelement <4 x i32> undef, i32 %15163, i32 0
  %15165 = shufflevector <4 x i32> %15164, <4 x i32> undef, <4 x i32> zeroinitializer
  %15166 = add nsw <4 x i32> %15165, <i32 0, i32 1, i32 2, i32 3>
  %15167 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15166, <4 x i32> %90) #11
  %15168 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15167, <4 x i32> %92) #11
  %15169 = add <4 x i32> %15168, %14763
  %15170 = extractelement <4 x i32> %15169, i32 0
  %15171 = sext i32 %15170 to i64
  %15172 = getelementptr inbounds i16, i16* %input43288, i64 %15171
  %15173 = load i16, i16* %15172, align 2, !tbaa !386
  %15174 = insertelement <4 x i16> undef, i16 %15173, i32 0
  %15175 = extractelement <4 x i32> %15169, i32 1
  %15176 = sext i32 %15175 to i64
  %15177 = getelementptr inbounds i16, i16* %input43288, i64 %15176
  %15178 = load i16, i16* %15177, align 2, !tbaa !386
  %15179 = insertelement <4 x i16> %15174, i16 %15178, i32 1
  %15180 = extractelement <4 x i32> %15169, i32 2
  %15181 = sext i32 %15180 to i64
  %15182 = getelementptr inbounds i16, i16* %input43288, i64 %15181
  %15183 = load i16, i16* %15182, align 2, !tbaa !386
  %15184 = insertelement <4 x i16> %15179, i16 %15183, i32 2
  %15185 = extractelement <4 x i32> %15169, i32 3
  %15186 = sext i32 %15185 to i64
  %15187 = getelementptr inbounds i16, i16* %input43288, i64 %15186
  %15188 = load i16, i16* %15187, align 2, !tbaa !386
  %15189 = insertelement <4 x i16> %15184, i16 %15188, i32 3
  %15190 = add nsw i32 %blur_x.s0.x.v2.base.s111, -53
  %15191 = insertelement <4 x i32> undef, i32 %15190, i32 0
  %15192 = shufflevector <4 x i32> %15191, <4 x i32> undef, <4 x i32> zeroinitializer
  %15193 = add nsw <4 x i32> %15192, <i32 0, i32 1, i32 2, i32 3>
  %15194 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15193, <4 x i32> %90) #11
  %15195 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15194, <4 x i32> %92) #11
  %15196 = add <4 x i32> %15195, %14763
  %15197 = extractelement <4 x i32> %15196, i32 0
  %15198 = sext i32 %15197 to i64
  %15199 = getelementptr inbounds i16, i16* %input43288, i64 %15198
  %15200 = load i16, i16* %15199, align 2, !tbaa !386
  %15201 = insertelement <4 x i16> undef, i16 %15200, i32 0
  %15202 = extractelement <4 x i32> %15196, i32 1
  %15203 = sext i32 %15202 to i64
  %15204 = getelementptr inbounds i16, i16* %input43288, i64 %15203
  %15205 = load i16, i16* %15204, align 2, !tbaa !386
  %15206 = insertelement <4 x i16> %15201, i16 %15205, i32 1
  %15207 = extractelement <4 x i32> %15196, i32 2
  %15208 = sext i32 %15207 to i64
  %15209 = getelementptr inbounds i16, i16* %input43288, i64 %15208
  %15210 = load i16, i16* %15209, align 2, !tbaa !386
  %15211 = insertelement <4 x i16> %15206, i16 %15210, i32 2
  %15212 = extractelement <4 x i32> %15196, i32 3
  %15213 = sext i32 %15212 to i64
  %15214 = getelementptr inbounds i16, i16* %input43288, i64 %15213
  %15215 = load i16, i16* %15214, align 2, !tbaa !386
  %15216 = insertelement <4 x i16> %15211, i16 %15215, i32 3
  %15217 = add nsw i32 %blur_x.s0.x.v2.base.s111, -49
  %15218 = insertelement <4 x i32> undef, i32 %15217, i32 0
  %15219 = shufflevector <4 x i32> %15218, <4 x i32> undef, <4 x i32> zeroinitializer
  %15220 = add nsw <4 x i32> %15219, <i32 0, i32 1, i32 2, i32 3>
  %15221 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15220, <4 x i32> %90) #11
  %15222 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15221, <4 x i32> %92) #11
  %15223 = add <4 x i32> %15222, %14763
  %15224 = extractelement <4 x i32> %15223, i32 0
  %15225 = sext i32 %15224 to i64
  %15226 = getelementptr inbounds i16, i16* %input43288, i64 %15225
  %15227 = load i16, i16* %15226, align 2, !tbaa !386
  %15228 = insertelement <4 x i16> undef, i16 %15227, i32 0
  %15229 = extractelement <4 x i32> %15223, i32 1
  %15230 = sext i32 %15229 to i64
  %15231 = getelementptr inbounds i16, i16* %input43288, i64 %15230
  %15232 = load i16, i16* %15231, align 2, !tbaa !386
  %15233 = insertelement <4 x i16> %15228, i16 %15232, i32 1
  %15234 = extractelement <4 x i32> %15223, i32 2
  %15235 = sext i32 %15234 to i64
  %15236 = getelementptr inbounds i16, i16* %input43288, i64 %15235
  %15237 = load i16, i16* %15236, align 2, !tbaa !386
  %15238 = insertelement <4 x i16> %15233, i16 %15237, i32 2
  %15239 = extractelement <4 x i32> %15223, i32 3
  %15240 = sext i32 %15239 to i64
  %15241 = getelementptr inbounds i16, i16* %input43288, i64 %15240
  %15242 = load i16, i16* %15241, align 2, !tbaa !386
  %15243 = insertelement <4 x i16> %15238, i16 %15242, i32 3
  %15244 = add <4 x i16> %15054, %14956
  %15245 = add <4 x i16> %15244, %15108
  %15246 = add <4 x i16> %15245, %15135
  %15247 = add <4 x i16> %15246, %15216
  %15248 = add <4 x i16> %15108, %15081
  %15249 = add <4 x i16> %15248, %15162
  %15250 = add <4 x i16> %15249, %15189
  %15251 = add <4 x i16> %15250, %15243
  %15252 = shufflevector <4 x i16> %15247, <4 x i16> %15251, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %15253 = zext <8 x i16> %15252 to <8 x i32>
  %15254 = mul nuw <8 x i32> %15253, <i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429>
  %15255 = lshr <8 x i32> %15254, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %15256 = shufflevector <8 x i32> %15255, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %15257 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %15256)
  %15258 = shufflevector <8 x i32> %15255, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %15259 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %15258)
  %15260 = shufflevector <4 x i16> %15257, <4 x i16> %15259, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %15261 = add nsw i32 %blur_x.s0.x.v2.base.s111, -47
  %15262 = insertelement <4 x i32> undef, i32 %15261, i32 0
  %15263 = shufflevector <4 x i32> %15262, <4 x i32> undef, <4 x i32> zeroinitializer
  %15264 = add nsw <4 x i32> %15263, <i32 0, i32 1, i32 2, i32 3>
  %15265 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15264, <4 x i32> %90) #11
  %15266 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15265, <4 x i32> %92) #11
  %15267 = add <4 x i32> %15266, %14763
  %15268 = extractelement <4 x i32> %15267, i32 0
  %15269 = sext i32 %15268 to i64
  %15270 = getelementptr inbounds i16, i16* %input43288, i64 %15269
  %15271 = load i16, i16* %15270, align 2, !tbaa !386
  %15272 = insertelement <4 x i16> undef, i16 %15271, i32 0
  %15273 = extractelement <4 x i32> %15267, i32 1
  %15274 = sext i32 %15273 to i64
  %15275 = getelementptr inbounds i16, i16* %input43288, i64 %15274
  %15276 = load i16, i16* %15275, align 2, !tbaa !386
  %15277 = insertelement <4 x i16> %15272, i16 %15276, i32 1
  %15278 = extractelement <4 x i32> %15267, i32 2
  %15279 = sext i32 %15278 to i64
  %15280 = getelementptr inbounds i16, i16* %input43288, i64 %15279
  %15281 = load i16, i16* %15280, align 2, !tbaa !386
  %15282 = insertelement <4 x i16> %15277, i16 %15281, i32 2
  %15283 = extractelement <4 x i32> %15267, i32 3
  %15284 = sext i32 %15283 to i64
  %15285 = getelementptr inbounds i16, i16* %input43288, i64 %15284
  %15286 = load i16, i16* %15285, align 2, !tbaa !386
  %15287 = insertelement <4 x i16> %15282, i16 %15286, i32 3
  %15288 = add nsw i32 %blur_x.s0.x.v2.base.s111, -43
  %15289 = insertelement <4 x i32> undef, i32 %15288, i32 0
  %15290 = shufflevector <4 x i32> %15289, <4 x i32> undef, <4 x i32> zeroinitializer
  %15291 = add nsw <4 x i32> %15290, <i32 0, i32 1, i32 2, i32 3>
  %15292 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15291, <4 x i32> %90) #11
  %15293 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15292, <4 x i32> %92) #11
  %15294 = add <4 x i32> %15293, %14763
  %15295 = extractelement <4 x i32> %15294, i32 0
  %15296 = sext i32 %15295 to i64
  %15297 = getelementptr inbounds i16, i16* %input43288, i64 %15296
  %15298 = load i16, i16* %15297, align 2, !tbaa !386
  %15299 = insertelement <4 x i16> undef, i16 %15298, i32 0
  %15300 = extractelement <4 x i32> %15294, i32 1
  %15301 = sext i32 %15300 to i64
  %15302 = getelementptr inbounds i16, i16* %input43288, i64 %15301
  %15303 = load i16, i16* %15302, align 2, !tbaa !386
  %15304 = insertelement <4 x i16> %15299, i16 %15303, i32 1
  %15305 = extractelement <4 x i32> %15294, i32 2
  %15306 = sext i32 %15305 to i64
  %15307 = getelementptr inbounds i16, i16* %input43288, i64 %15306
  %15308 = load i16, i16* %15307, align 2, !tbaa !386
  %15309 = insertelement <4 x i16> %15304, i16 %15308, i32 2
  %15310 = extractelement <4 x i32> %15294, i32 3
  %15311 = sext i32 %15310 to i64
  %15312 = getelementptr inbounds i16, i16* %input43288, i64 %15311
  %15313 = load i16, i16* %15312, align 2, !tbaa !386
  %15314 = insertelement <4 x i16> %15309, i16 %15313, i32 3
  %15315 = add nsw i32 %blur_x.s0.x.v2.base.s111, -44
  %15316 = insertelement <4 x i32> undef, i32 %15315, i32 0
  %15317 = shufflevector <4 x i32> %15316, <4 x i32> undef, <4 x i32> zeroinitializer
  %15318 = add nsw <4 x i32> %15317, <i32 0, i32 1, i32 2, i32 3>
  %15319 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15318, <4 x i32> %90) #11
  %15320 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15319, <4 x i32> %92) #11
  %15321 = add <4 x i32> %15320, %14763
  %15322 = extractelement <4 x i32> %15321, i32 0
  %15323 = sext i32 %15322 to i64
  %15324 = getelementptr inbounds i16, i16* %input43288, i64 %15323
  %15325 = load i16, i16* %15324, align 2, !tbaa !386
  %15326 = insertelement <4 x i16> undef, i16 %15325, i32 0
  %15327 = extractelement <4 x i32> %15321, i32 1
  %15328 = sext i32 %15327 to i64
  %15329 = getelementptr inbounds i16, i16* %input43288, i64 %15328
  %15330 = load i16, i16* %15329, align 2, !tbaa !386
  %15331 = insertelement <4 x i16> %15326, i16 %15330, i32 1
  %15332 = extractelement <4 x i32> %15321, i32 2
  %15333 = sext i32 %15332 to i64
  %15334 = getelementptr inbounds i16, i16* %input43288, i64 %15333
  %15335 = load i16, i16* %15334, align 2, !tbaa !386
  %15336 = insertelement <4 x i16> %15331, i16 %15335, i32 2
  %15337 = extractelement <4 x i32> %15321, i32 3
  %15338 = sext i32 %15337 to i64
  %15339 = getelementptr inbounds i16, i16* %input43288, i64 %15338
  %15340 = load i16, i16* %15339, align 2, !tbaa !386
  %15341 = insertelement <4 x i16> %15336, i16 %15340, i32 3
  %15342 = add nsw i32 %blur_x.s0.x.v2.base.s111, -46
  %15343 = insertelement <4 x i32> undef, i32 %15342, i32 0
  %15344 = shufflevector <4 x i32> %15343, <4 x i32> undef, <4 x i32> zeroinitializer
  %15345 = add nsw <4 x i32> %15344, <i32 0, i32 1, i32 2, i32 3>
  %15346 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15345, <4 x i32> %90) #11
  %15347 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15346, <4 x i32> %92) #11
  %15348 = add <4 x i32> %15347, %14763
  %15349 = extractelement <4 x i32> %15348, i32 0
  %15350 = sext i32 %15349 to i64
  %15351 = getelementptr inbounds i16, i16* %input43288, i64 %15350
  %15352 = load i16, i16* %15351, align 2, !tbaa !386
  %15353 = insertelement <4 x i16> undef, i16 %15352, i32 0
  %15354 = extractelement <4 x i32> %15348, i32 1
  %15355 = sext i32 %15354 to i64
  %15356 = getelementptr inbounds i16, i16* %input43288, i64 %15355
  %15357 = load i16, i16* %15356, align 2, !tbaa !386
  %15358 = insertelement <4 x i16> %15353, i16 %15357, i32 1
  %15359 = extractelement <4 x i32> %15348, i32 2
  %15360 = sext i32 %15359 to i64
  %15361 = getelementptr inbounds i16, i16* %input43288, i64 %15360
  %15362 = load i16, i16* %15361, align 2, !tbaa !386
  %15363 = insertelement <4 x i16> %15358, i16 %15362, i32 2
  %15364 = extractelement <4 x i32> %15348, i32 3
  %15365 = sext i32 %15364 to i64
  %15366 = getelementptr inbounds i16, i16* %input43288, i64 %15365
  %15367 = load i16, i16* %15366, align 2, !tbaa !386
  %15368 = insertelement <4 x i16> %15363, i16 %15367, i32 3
  %15369 = add nsw i32 %blur_x.s0.x.v2.base.s111, -42
  %15370 = insertelement <4 x i32> undef, i32 %15369, i32 0
  %15371 = shufflevector <4 x i32> %15370, <4 x i32> undef, <4 x i32> zeroinitializer
  %15372 = add nsw <4 x i32> %15371, <i32 0, i32 1, i32 2, i32 3>
  %15373 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15372, <4 x i32> %90) #11
  %15374 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15373, <4 x i32> %92) #11
  %15375 = add <4 x i32> %15374, %14763
  %15376 = extractelement <4 x i32> %15375, i32 0
  %15377 = sext i32 %15376 to i64
  %15378 = getelementptr inbounds i16, i16* %input43288, i64 %15377
  %15379 = load i16, i16* %15378, align 2, !tbaa !386
  %15380 = insertelement <4 x i16> undef, i16 %15379, i32 0
  %15381 = extractelement <4 x i32> %15375, i32 1
  %15382 = sext i32 %15381 to i64
  %15383 = getelementptr inbounds i16, i16* %input43288, i64 %15382
  %15384 = load i16, i16* %15383, align 2, !tbaa !386
  %15385 = insertelement <4 x i16> %15380, i16 %15384, i32 1
  %15386 = extractelement <4 x i32> %15375, i32 2
  %15387 = sext i32 %15386 to i64
  %15388 = getelementptr inbounds i16, i16* %input43288, i64 %15387
  %15389 = load i16, i16* %15388, align 2, !tbaa !386
  %15390 = insertelement <4 x i16> %15385, i16 %15389, i32 2
  %15391 = extractelement <4 x i32> %15375, i32 3
  %15392 = sext i32 %15391 to i64
  %15393 = getelementptr inbounds i16, i16* %input43288, i64 %15392
  %15394 = load i16, i16* %15393, align 2, !tbaa !386
  %15395 = insertelement <4 x i16> %15390, i16 %15394, i32 3
  %15396 = add nsw i32 %blur_x.s0.x.v2.base.s111, -40
  %15397 = insertelement <4 x i32> undef, i32 %15396, i32 0
  %15398 = shufflevector <4 x i32> %15397, <4 x i32> undef, <4 x i32> zeroinitializer
  %15399 = add nsw <4 x i32> %15398, <i32 0, i32 1, i32 2, i32 3>
  %15400 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15399, <4 x i32> %90) #11
  %15401 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15400, <4 x i32> %92) #11
  %15402 = add <4 x i32> %15401, %14763
  %15403 = extractelement <4 x i32> %15402, i32 0
  %15404 = sext i32 %15403 to i64
  %15405 = getelementptr inbounds i16, i16* %input43288, i64 %15404
  %15406 = load i16, i16* %15405, align 2, !tbaa !386
  %15407 = insertelement <4 x i16> undef, i16 %15406, i32 0
  %15408 = extractelement <4 x i32> %15402, i32 1
  %15409 = sext i32 %15408 to i64
  %15410 = getelementptr inbounds i16, i16* %input43288, i64 %15409
  %15411 = load i16, i16* %15410, align 2, !tbaa !386
  %15412 = insertelement <4 x i16> %15407, i16 %15411, i32 1
  %15413 = extractelement <4 x i32> %15402, i32 2
  %15414 = sext i32 %15413 to i64
  %15415 = getelementptr inbounds i16, i16* %input43288, i64 %15414
  %15416 = load i16, i16* %15415, align 2, !tbaa !386
  %15417 = insertelement <4 x i16> %15412, i16 %15416, i32 2
  %15418 = extractelement <4 x i32> %15402, i32 3
  %15419 = sext i32 %15418 to i64
  %15420 = getelementptr inbounds i16, i16* %input43288, i64 %15419
  %15421 = load i16, i16* %15420, align 2, !tbaa !386
  %15422 = insertelement <4 x i16> %15417, i16 %15421, i32 3
  %15423 = add nsw i32 %blur_x.s0.x.v2.base.s111, -45
  %15424 = insertelement <4 x i32> undef, i32 %15423, i32 0
  %15425 = shufflevector <4 x i32> %15424, <4 x i32> undef, <4 x i32> zeroinitializer
  %15426 = add nsw <4 x i32> %15425, <i32 0, i32 1, i32 2, i32 3>
  %15427 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15426, <4 x i32> %90) #11
  %15428 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15427, <4 x i32> %92) #11
  %15429 = add <4 x i32> %15428, %14763
  %15430 = extractelement <4 x i32> %15429, i32 0
  %15431 = sext i32 %15430 to i64
  %15432 = getelementptr inbounds i16, i16* %input43288, i64 %15431
  %15433 = load i16, i16* %15432, align 2, !tbaa !386
  %15434 = insertelement <4 x i16> undef, i16 %15433, i32 0
  %15435 = extractelement <4 x i32> %15429, i32 1
  %15436 = sext i32 %15435 to i64
  %15437 = getelementptr inbounds i16, i16* %input43288, i64 %15436
  %15438 = load i16, i16* %15437, align 2, !tbaa !386
  %15439 = insertelement <4 x i16> %15434, i16 %15438, i32 1
  %15440 = extractelement <4 x i32> %15429, i32 2
  %15441 = sext i32 %15440 to i64
  %15442 = getelementptr inbounds i16, i16* %input43288, i64 %15441
  %15443 = load i16, i16* %15442, align 2, !tbaa !386
  %15444 = insertelement <4 x i16> %15439, i16 %15443, i32 2
  %15445 = extractelement <4 x i32> %15429, i32 3
  %15446 = sext i32 %15445 to i64
  %15447 = getelementptr inbounds i16, i16* %input43288, i64 %15446
  %15448 = load i16, i16* %15447, align 2, !tbaa !386
  %15449 = insertelement <4 x i16> %15444, i16 %15448, i32 3
  %15450 = add nsw i32 %blur_x.s0.x.v2.base.s111, -41
  %15451 = insertelement <4 x i32> undef, i32 %15450, i32 0
  %15452 = shufflevector <4 x i32> %15451, <4 x i32> undef, <4 x i32> zeroinitializer
  %15453 = add nsw <4 x i32> %15452, <i32 0, i32 1, i32 2, i32 3>
  %15454 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15453, <4 x i32> %90) #11
  %15455 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15454, <4 x i32> %92) #11
  %15456 = add <4 x i32> %15455, %14763
  %15457 = extractelement <4 x i32> %15456, i32 0
  %15458 = sext i32 %15457 to i64
  %15459 = getelementptr inbounds i16, i16* %input43288, i64 %15458
  %15460 = load i16, i16* %15459, align 2, !tbaa !386
  %15461 = insertelement <4 x i16> undef, i16 %15460, i32 0
  %15462 = extractelement <4 x i32> %15456, i32 1
  %15463 = sext i32 %15462 to i64
  %15464 = getelementptr inbounds i16, i16* %input43288, i64 %15463
  %15465 = load i16, i16* %15464, align 2, !tbaa !386
  %15466 = insertelement <4 x i16> %15461, i16 %15465, i32 1
  %15467 = extractelement <4 x i32> %15456, i32 2
  %15468 = sext i32 %15467 to i64
  %15469 = getelementptr inbounds i16, i16* %input43288, i64 %15468
  %15470 = load i16, i16* %15469, align 2, !tbaa !386
  %15471 = insertelement <4 x i16> %15466, i16 %15470, i32 2
  %15472 = extractelement <4 x i32> %15456, i32 3
  %15473 = sext i32 %15472 to i64
  %15474 = getelementptr inbounds i16, i16* %input43288, i64 %15473
  %15475 = load i16, i16* %15474, align 2, !tbaa !386
  %15476 = insertelement <4 x i16> %15471, i16 %15475, i32 3
  %15477 = add <4 x i16> %15287, %15189
  %15478 = add <4 x i16> %15477, %15341
  %15479 = add <4 x i16> %15478, %15368
  %15480 = add <4 x i16> %15479, %15449
  %15481 = add <4 x i16> %15341, %15314
  %15482 = add <4 x i16> %15481, %15395
  %15483 = add <4 x i16> %15482, %15422
  %15484 = add <4 x i16> %15483, %15476
  %15485 = shufflevector <4 x i16> %15480, <4 x i16> %15484, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %15486 = zext <8 x i16> %15485 to <8 x i32>
  %15487 = mul nuw <8 x i32> %15486, <i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429>
  %15488 = lshr <8 x i32> %15487, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %15489 = shufflevector <8 x i32> %15488, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %15490 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %15489)
  %15491 = shufflevector <8 x i32> %15488, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %15492 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %15491)
  %15493 = shufflevector <4 x i16> %15490, <4 x i16> %15492, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %15494 = add nsw i32 %blur_x.s0.x.v2.base.s111, -39
  %15495 = insertelement <4 x i32> undef, i32 %15494, i32 0
  %15496 = shufflevector <4 x i32> %15495, <4 x i32> undef, <4 x i32> zeroinitializer
  %15497 = add nsw <4 x i32> %15496, <i32 0, i32 1, i32 2, i32 3>
  %15498 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15497, <4 x i32> %90) #11
  %15499 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15498, <4 x i32> %92) #11
  %15500 = add <4 x i32> %15499, %14763
  %15501 = extractelement <4 x i32> %15500, i32 0
  %15502 = sext i32 %15501 to i64
  %15503 = getelementptr inbounds i16, i16* %input43288, i64 %15502
  %15504 = load i16, i16* %15503, align 2, !tbaa !386
  %15505 = insertelement <4 x i16> undef, i16 %15504, i32 0
  %15506 = extractelement <4 x i32> %15500, i32 1
  %15507 = sext i32 %15506 to i64
  %15508 = getelementptr inbounds i16, i16* %input43288, i64 %15507
  %15509 = load i16, i16* %15508, align 2, !tbaa !386
  %15510 = insertelement <4 x i16> %15505, i16 %15509, i32 1
  %15511 = extractelement <4 x i32> %15500, i32 2
  %15512 = sext i32 %15511 to i64
  %15513 = getelementptr inbounds i16, i16* %input43288, i64 %15512
  %15514 = load i16, i16* %15513, align 2, !tbaa !386
  %15515 = insertelement <4 x i16> %15510, i16 %15514, i32 2
  %15516 = extractelement <4 x i32> %15500, i32 3
  %15517 = sext i32 %15516 to i64
  %15518 = getelementptr inbounds i16, i16* %input43288, i64 %15517
  %15519 = load i16, i16* %15518, align 2, !tbaa !386
  %15520 = insertelement <4 x i16> %15515, i16 %15519, i32 3
  %15521 = add nsw i32 %blur_x.s0.x.v2.base.s111, -35
  %15522 = insertelement <4 x i32> undef, i32 %15521, i32 0
  %15523 = shufflevector <4 x i32> %15522, <4 x i32> undef, <4 x i32> zeroinitializer
  %15524 = add nsw <4 x i32> %15523, <i32 0, i32 1, i32 2, i32 3>
  %15525 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15524, <4 x i32> %90) #11
  %15526 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15525, <4 x i32> %92) #11
  %15527 = add <4 x i32> %15526, %14763
  %15528 = extractelement <4 x i32> %15527, i32 0
  %15529 = sext i32 %15528 to i64
  %15530 = getelementptr inbounds i16, i16* %input43288, i64 %15529
  %15531 = load i16, i16* %15530, align 2, !tbaa !386
  %15532 = insertelement <4 x i16> undef, i16 %15531, i32 0
  %15533 = extractelement <4 x i32> %15527, i32 1
  %15534 = sext i32 %15533 to i64
  %15535 = getelementptr inbounds i16, i16* %input43288, i64 %15534
  %15536 = load i16, i16* %15535, align 2, !tbaa !386
  %15537 = insertelement <4 x i16> %15532, i16 %15536, i32 1
  %15538 = extractelement <4 x i32> %15527, i32 2
  %15539 = sext i32 %15538 to i64
  %15540 = getelementptr inbounds i16, i16* %input43288, i64 %15539
  %15541 = load i16, i16* %15540, align 2, !tbaa !386
  %15542 = insertelement <4 x i16> %15537, i16 %15541, i32 2
  %15543 = extractelement <4 x i32> %15527, i32 3
  %15544 = sext i32 %15543 to i64
  %15545 = getelementptr inbounds i16, i16* %input43288, i64 %15544
  %15546 = load i16, i16* %15545, align 2, !tbaa !386
  %15547 = insertelement <4 x i16> %15542, i16 %15546, i32 3
  %15548 = add nsw i32 %blur_x.s0.x.v2.base.s111, -36
  %15549 = insertelement <4 x i32> undef, i32 %15548, i32 0
  %15550 = shufflevector <4 x i32> %15549, <4 x i32> undef, <4 x i32> zeroinitializer
  %15551 = add nsw <4 x i32> %15550, <i32 0, i32 1, i32 2, i32 3>
  %15552 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15551, <4 x i32> %90) #11
  %15553 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15552, <4 x i32> %92) #11
  %15554 = add <4 x i32> %15553, %14763
  %15555 = extractelement <4 x i32> %15554, i32 0
  %15556 = sext i32 %15555 to i64
  %15557 = getelementptr inbounds i16, i16* %input43288, i64 %15556
  %15558 = load i16, i16* %15557, align 2, !tbaa !386
  %15559 = insertelement <4 x i16> undef, i16 %15558, i32 0
  %15560 = extractelement <4 x i32> %15554, i32 1
  %15561 = sext i32 %15560 to i64
  %15562 = getelementptr inbounds i16, i16* %input43288, i64 %15561
  %15563 = load i16, i16* %15562, align 2, !tbaa !386
  %15564 = insertelement <4 x i16> %15559, i16 %15563, i32 1
  %15565 = extractelement <4 x i32> %15554, i32 2
  %15566 = sext i32 %15565 to i64
  %15567 = getelementptr inbounds i16, i16* %input43288, i64 %15566
  %15568 = load i16, i16* %15567, align 2, !tbaa !386
  %15569 = insertelement <4 x i16> %15564, i16 %15568, i32 2
  %15570 = extractelement <4 x i32> %15554, i32 3
  %15571 = sext i32 %15570 to i64
  %15572 = getelementptr inbounds i16, i16* %input43288, i64 %15571
  %15573 = load i16, i16* %15572, align 2, !tbaa !386
  %15574 = insertelement <4 x i16> %15569, i16 %15573, i32 3
  %15575 = add nsw i32 %blur_x.s0.x.v2.base.s111, -38
  %15576 = insertelement <4 x i32> undef, i32 %15575, i32 0
  %15577 = shufflevector <4 x i32> %15576, <4 x i32> undef, <4 x i32> zeroinitializer
  %15578 = add nsw <4 x i32> %15577, <i32 0, i32 1, i32 2, i32 3>
  %15579 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15578, <4 x i32> %90) #11
  %15580 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15579, <4 x i32> %92) #11
  %15581 = add <4 x i32> %15580, %14763
  %15582 = extractelement <4 x i32> %15581, i32 0
  %15583 = sext i32 %15582 to i64
  %15584 = getelementptr inbounds i16, i16* %input43288, i64 %15583
  %15585 = load i16, i16* %15584, align 2, !tbaa !386
  %15586 = insertelement <4 x i16> undef, i16 %15585, i32 0
  %15587 = extractelement <4 x i32> %15581, i32 1
  %15588 = sext i32 %15587 to i64
  %15589 = getelementptr inbounds i16, i16* %input43288, i64 %15588
  %15590 = load i16, i16* %15589, align 2, !tbaa !386
  %15591 = insertelement <4 x i16> %15586, i16 %15590, i32 1
  %15592 = extractelement <4 x i32> %15581, i32 2
  %15593 = sext i32 %15592 to i64
  %15594 = getelementptr inbounds i16, i16* %input43288, i64 %15593
  %15595 = load i16, i16* %15594, align 2, !tbaa !386
  %15596 = insertelement <4 x i16> %15591, i16 %15595, i32 2
  %15597 = extractelement <4 x i32> %15581, i32 3
  %15598 = sext i32 %15597 to i64
  %15599 = getelementptr inbounds i16, i16* %input43288, i64 %15598
  %15600 = load i16, i16* %15599, align 2, !tbaa !386
  %15601 = insertelement <4 x i16> %15596, i16 %15600, i32 3
  %15602 = add nsw i32 %blur_x.s0.x.v2.base.s111, -34
  %15603 = insertelement <4 x i32> undef, i32 %15602, i32 0
  %15604 = shufflevector <4 x i32> %15603, <4 x i32> undef, <4 x i32> zeroinitializer
  %15605 = add nsw <4 x i32> %15604, <i32 0, i32 1, i32 2, i32 3>
  %15606 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15605, <4 x i32> %90) #11
  %15607 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15606, <4 x i32> %92) #11
  %15608 = add <4 x i32> %15607, %14763
  %15609 = extractelement <4 x i32> %15608, i32 0
  %15610 = sext i32 %15609 to i64
  %15611 = getelementptr inbounds i16, i16* %input43288, i64 %15610
  %15612 = load i16, i16* %15611, align 2, !tbaa !386
  %15613 = insertelement <4 x i16> undef, i16 %15612, i32 0
  %15614 = extractelement <4 x i32> %15608, i32 1
  %15615 = sext i32 %15614 to i64
  %15616 = getelementptr inbounds i16, i16* %input43288, i64 %15615
  %15617 = load i16, i16* %15616, align 2, !tbaa !386
  %15618 = insertelement <4 x i16> %15613, i16 %15617, i32 1
  %15619 = extractelement <4 x i32> %15608, i32 2
  %15620 = sext i32 %15619 to i64
  %15621 = getelementptr inbounds i16, i16* %input43288, i64 %15620
  %15622 = load i16, i16* %15621, align 2, !tbaa !386
  %15623 = insertelement <4 x i16> %15618, i16 %15622, i32 2
  %15624 = extractelement <4 x i32> %15608, i32 3
  %15625 = sext i32 %15624 to i64
  %15626 = getelementptr inbounds i16, i16* %input43288, i64 %15625
  %15627 = load i16, i16* %15626, align 2, !tbaa !386
  %15628 = insertelement <4 x i16> %15623, i16 %15627, i32 3
  %15629 = add nsw i32 %blur_x.s0.x.v2.base.s111, -32
  %15630 = insertelement <4 x i32> undef, i32 %15629, i32 0
  %15631 = shufflevector <4 x i32> %15630, <4 x i32> undef, <4 x i32> zeroinitializer
  %15632 = add nsw <4 x i32> %15631, <i32 0, i32 1, i32 2, i32 3>
  %15633 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15632, <4 x i32> %90) #11
  %15634 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15633, <4 x i32> %92) #11
  %15635 = add <4 x i32> %15634, %14763
  %15636 = extractelement <4 x i32> %15635, i32 0
  %15637 = sext i32 %15636 to i64
  %15638 = getelementptr inbounds i16, i16* %input43288, i64 %15637
  %15639 = load i16, i16* %15638, align 2, !tbaa !386
  %15640 = insertelement <4 x i16> undef, i16 %15639, i32 0
  %15641 = extractelement <4 x i32> %15635, i32 1
  %15642 = sext i32 %15641 to i64
  %15643 = getelementptr inbounds i16, i16* %input43288, i64 %15642
  %15644 = load i16, i16* %15643, align 2, !tbaa !386
  %15645 = insertelement <4 x i16> %15640, i16 %15644, i32 1
  %15646 = extractelement <4 x i32> %15635, i32 2
  %15647 = sext i32 %15646 to i64
  %15648 = getelementptr inbounds i16, i16* %input43288, i64 %15647
  %15649 = load i16, i16* %15648, align 2, !tbaa !386
  %15650 = insertelement <4 x i16> %15645, i16 %15649, i32 2
  %15651 = extractelement <4 x i32> %15635, i32 3
  %15652 = sext i32 %15651 to i64
  %15653 = getelementptr inbounds i16, i16* %input43288, i64 %15652
  %15654 = load i16, i16* %15653, align 2, !tbaa !386
  %15655 = insertelement <4 x i16> %15650, i16 %15654, i32 3
  %15656 = add nsw i32 %blur_x.s0.x.v2.base.s111, -37
  %15657 = insertelement <4 x i32> undef, i32 %15656, i32 0
  %15658 = shufflevector <4 x i32> %15657, <4 x i32> undef, <4 x i32> zeroinitializer
  %15659 = add nsw <4 x i32> %15658, <i32 0, i32 1, i32 2, i32 3>
  %15660 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15659, <4 x i32> %90) #11
  %15661 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15660, <4 x i32> %92) #11
  %15662 = add <4 x i32> %15661, %14763
  %15663 = extractelement <4 x i32> %15662, i32 0
  %15664 = sext i32 %15663 to i64
  %15665 = getelementptr inbounds i16, i16* %input43288, i64 %15664
  %15666 = load i16, i16* %15665, align 2, !tbaa !386
  %15667 = insertelement <4 x i16> undef, i16 %15666, i32 0
  %15668 = extractelement <4 x i32> %15662, i32 1
  %15669 = sext i32 %15668 to i64
  %15670 = getelementptr inbounds i16, i16* %input43288, i64 %15669
  %15671 = load i16, i16* %15670, align 2, !tbaa !386
  %15672 = insertelement <4 x i16> %15667, i16 %15671, i32 1
  %15673 = extractelement <4 x i32> %15662, i32 2
  %15674 = sext i32 %15673 to i64
  %15675 = getelementptr inbounds i16, i16* %input43288, i64 %15674
  %15676 = load i16, i16* %15675, align 2, !tbaa !386
  %15677 = insertelement <4 x i16> %15672, i16 %15676, i32 2
  %15678 = extractelement <4 x i32> %15662, i32 3
  %15679 = sext i32 %15678 to i64
  %15680 = getelementptr inbounds i16, i16* %input43288, i64 %15679
  %15681 = load i16, i16* %15680, align 2, !tbaa !386
  %15682 = insertelement <4 x i16> %15677, i16 %15681, i32 3
  %15683 = add nsw i32 %blur_x.s0.x.v2.base.s111, -33
  %15684 = insertelement <4 x i32> undef, i32 %15683, i32 0
  %15685 = shufflevector <4 x i32> %15684, <4 x i32> undef, <4 x i32> zeroinitializer
  %15686 = add nsw <4 x i32> %15685, <i32 0, i32 1, i32 2, i32 3>
  %15687 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15686, <4 x i32> %90) #11
  %15688 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15687, <4 x i32> %92) #11
  %15689 = add <4 x i32> %15688, %14763
  %15690 = extractelement <4 x i32> %15689, i32 0
  %15691 = sext i32 %15690 to i64
  %15692 = getelementptr inbounds i16, i16* %input43288, i64 %15691
  %15693 = load i16, i16* %15692, align 2, !tbaa !386
  %15694 = insertelement <4 x i16> undef, i16 %15693, i32 0
  %15695 = extractelement <4 x i32> %15689, i32 1
  %15696 = sext i32 %15695 to i64
  %15697 = getelementptr inbounds i16, i16* %input43288, i64 %15696
  %15698 = load i16, i16* %15697, align 2, !tbaa !386
  %15699 = insertelement <4 x i16> %15694, i16 %15698, i32 1
  %15700 = extractelement <4 x i32> %15689, i32 2
  %15701 = sext i32 %15700 to i64
  %15702 = getelementptr inbounds i16, i16* %input43288, i64 %15701
  %15703 = load i16, i16* %15702, align 2, !tbaa !386
  %15704 = insertelement <4 x i16> %15699, i16 %15703, i32 2
  %15705 = extractelement <4 x i32> %15689, i32 3
  %15706 = sext i32 %15705 to i64
  %15707 = getelementptr inbounds i16, i16* %input43288, i64 %15706
  %15708 = load i16, i16* %15707, align 2, !tbaa !386
  %15709 = insertelement <4 x i16> %15704, i16 %15708, i32 3
  %15710 = add <4 x i16> %15520, %15422
  %15711 = add <4 x i16> %15710, %15574
  %15712 = add <4 x i16> %15711, %15601
  %15713 = add <4 x i16> %15712, %15682
  %15714 = add <4 x i16> %15574, %15547
  %15715 = add <4 x i16> %15714, %15628
  %15716 = add <4 x i16> %15715, %15655
  %15717 = add <4 x i16> %15716, %15709
  %15718 = shufflevector <4 x i16> %15713, <4 x i16> %15717, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %15719 = zext <8 x i16> %15718 to <8 x i32>
  %15720 = mul nuw <8 x i32> %15719, <i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429>
  %15721 = lshr <8 x i32> %15720, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %15722 = shufflevector <8 x i32> %15721, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %15723 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %15722)
  %15724 = shufflevector <8 x i32> %15721, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %15725 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %15724)
  %15726 = shufflevector <4 x i16> %15723, <4 x i16> %15725, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %15727 = add nsw i32 %blur_x.s0.x.v2.base.s111, -31
  %15728 = insertelement <4 x i32> undef, i32 %15727, i32 0
  %15729 = shufflevector <4 x i32> %15728, <4 x i32> undef, <4 x i32> zeroinitializer
  %15730 = add nsw <4 x i32> %15729, <i32 0, i32 1, i32 2, i32 3>
  %15731 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15730, <4 x i32> %90) #11
  %15732 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15731, <4 x i32> %92) #11
  %15733 = add <4 x i32> %15732, %14763
  %15734 = extractelement <4 x i32> %15733, i32 0
  %15735 = sext i32 %15734 to i64
  %15736 = getelementptr inbounds i16, i16* %input43288, i64 %15735
  %15737 = load i16, i16* %15736, align 2, !tbaa !386
  %15738 = insertelement <4 x i16> undef, i16 %15737, i32 0
  %15739 = extractelement <4 x i32> %15733, i32 1
  %15740 = sext i32 %15739 to i64
  %15741 = getelementptr inbounds i16, i16* %input43288, i64 %15740
  %15742 = load i16, i16* %15741, align 2, !tbaa !386
  %15743 = insertelement <4 x i16> %15738, i16 %15742, i32 1
  %15744 = extractelement <4 x i32> %15733, i32 2
  %15745 = sext i32 %15744 to i64
  %15746 = getelementptr inbounds i16, i16* %input43288, i64 %15745
  %15747 = load i16, i16* %15746, align 2, !tbaa !386
  %15748 = insertelement <4 x i16> %15743, i16 %15747, i32 2
  %15749 = extractelement <4 x i32> %15733, i32 3
  %15750 = sext i32 %15749 to i64
  %15751 = getelementptr inbounds i16, i16* %input43288, i64 %15750
  %15752 = load i16, i16* %15751, align 2, !tbaa !386
  %15753 = insertelement <4 x i16> %15748, i16 %15752, i32 3
  %15754 = add nsw i32 %blur_x.s0.x.v2.base.s111, -27
  %15755 = insertelement <4 x i32> undef, i32 %15754, i32 0
  %15756 = shufflevector <4 x i32> %15755, <4 x i32> undef, <4 x i32> zeroinitializer
  %15757 = add nsw <4 x i32> %15756, <i32 0, i32 1, i32 2, i32 3>
  %15758 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15757, <4 x i32> %90) #11
  %15759 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15758, <4 x i32> %92) #11
  %15760 = add <4 x i32> %15759, %14763
  %15761 = extractelement <4 x i32> %15760, i32 0
  %15762 = sext i32 %15761 to i64
  %15763 = getelementptr inbounds i16, i16* %input43288, i64 %15762
  %15764 = load i16, i16* %15763, align 2, !tbaa !386
  %15765 = insertelement <4 x i16> undef, i16 %15764, i32 0
  %15766 = extractelement <4 x i32> %15760, i32 1
  %15767 = sext i32 %15766 to i64
  %15768 = getelementptr inbounds i16, i16* %input43288, i64 %15767
  %15769 = load i16, i16* %15768, align 2, !tbaa !386
  %15770 = insertelement <4 x i16> %15765, i16 %15769, i32 1
  %15771 = extractelement <4 x i32> %15760, i32 2
  %15772 = sext i32 %15771 to i64
  %15773 = getelementptr inbounds i16, i16* %input43288, i64 %15772
  %15774 = load i16, i16* %15773, align 2, !tbaa !386
  %15775 = insertelement <4 x i16> %15770, i16 %15774, i32 2
  %15776 = extractelement <4 x i32> %15760, i32 3
  %15777 = sext i32 %15776 to i64
  %15778 = getelementptr inbounds i16, i16* %input43288, i64 %15777
  %15779 = load i16, i16* %15778, align 2, !tbaa !386
  %15780 = insertelement <4 x i16> %15775, i16 %15779, i32 3
  %15781 = add nsw i32 %blur_x.s0.x.v2.base.s111, -28
  %15782 = insertelement <4 x i32> undef, i32 %15781, i32 0
  %15783 = shufflevector <4 x i32> %15782, <4 x i32> undef, <4 x i32> zeroinitializer
  %15784 = add nsw <4 x i32> %15783, <i32 0, i32 1, i32 2, i32 3>
  %15785 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15784, <4 x i32> %90) #11
  %15786 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15785, <4 x i32> %92) #11
  %15787 = add <4 x i32> %15786, %14763
  %15788 = extractelement <4 x i32> %15787, i32 0
  %15789 = sext i32 %15788 to i64
  %15790 = getelementptr inbounds i16, i16* %input43288, i64 %15789
  %15791 = load i16, i16* %15790, align 2, !tbaa !386
  %15792 = insertelement <4 x i16> undef, i16 %15791, i32 0
  %15793 = extractelement <4 x i32> %15787, i32 1
  %15794 = sext i32 %15793 to i64
  %15795 = getelementptr inbounds i16, i16* %input43288, i64 %15794
  %15796 = load i16, i16* %15795, align 2, !tbaa !386
  %15797 = insertelement <4 x i16> %15792, i16 %15796, i32 1
  %15798 = extractelement <4 x i32> %15787, i32 2
  %15799 = sext i32 %15798 to i64
  %15800 = getelementptr inbounds i16, i16* %input43288, i64 %15799
  %15801 = load i16, i16* %15800, align 2, !tbaa !386
  %15802 = insertelement <4 x i16> %15797, i16 %15801, i32 2
  %15803 = extractelement <4 x i32> %15787, i32 3
  %15804 = sext i32 %15803 to i64
  %15805 = getelementptr inbounds i16, i16* %input43288, i64 %15804
  %15806 = load i16, i16* %15805, align 2, !tbaa !386
  %15807 = insertelement <4 x i16> %15802, i16 %15806, i32 3
  %15808 = add nsw i32 %blur_x.s0.x.v2.base.s111, -30
  %15809 = insertelement <4 x i32> undef, i32 %15808, i32 0
  %15810 = shufflevector <4 x i32> %15809, <4 x i32> undef, <4 x i32> zeroinitializer
  %15811 = add nsw <4 x i32> %15810, <i32 0, i32 1, i32 2, i32 3>
  %15812 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15811, <4 x i32> %90) #11
  %15813 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15812, <4 x i32> %92) #11
  %15814 = add <4 x i32> %15813, %14763
  %15815 = extractelement <4 x i32> %15814, i32 0
  %15816 = sext i32 %15815 to i64
  %15817 = getelementptr inbounds i16, i16* %input43288, i64 %15816
  %15818 = load i16, i16* %15817, align 2, !tbaa !386
  %15819 = insertelement <4 x i16> undef, i16 %15818, i32 0
  %15820 = extractelement <4 x i32> %15814, i32 1
  %15821 = sext i32 %15820 to i64
  %15822 = getelementptr inbounds i16, i16* %input43288, i64 %15821
  %15823 = load i16, i16* %15822, align 2, !tbaa !386
  %15824 = insertelement <4 x i16> %15819, i16 %15823, i32 1
  %15825 = extractelement <4 x i32> %15814, i32 2
  %15826 = sext i32 %15825 to i64
  %15827 = getelementptr inbounds i16, i16* %input43288, i64 %15826
  %15828 = load i16, i16* %15827, align 2, !tbaa !386
  %15829 = insertelement <4 x i16> %15824, i16 %15828, i32 2
  %15830 = extractelement <4 x i32> %15814, i32 3
  %15831 = sext i32 %15830 to i64
  %15832 = getelementptr inbounds i16, i16* %input43288, i64 %15831
  %15833 = load i16, i16* %15832, align 2, !tbaa !386
  %15834 = insertelement <4 x i16> %15829, i16 %15833, i32 3
  %15835 = add nsw i32 %blur_x.s0.x.v2.base.s111, -26
  %15836 = insertelement <4 x i32> undef, i32 %15835, i32 0
  %15837 = shufflevector <4 x i32> %15836, <4 x i32> undef, <4 x i32> zeroinitializer
  %15838 = add nsw <4 x i32> %15837, <i32 0, i32 1, i32 2, i32 3>
  %15839 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15838, <4 x i32> %90) #11
  %15840 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15839, <4 x i32> %92) #11
  %15841 = add <4 x i32> %15840, %14763
  %15842 = extractelement <4 x i32> %15841, i32 0
  %15843 = sext i32 %15842 to i64
  %15844 = getelementptr inbounds i16, i16* %input43288, i64 %15843
  %15845 = load i16, i16* %15844, align 2, !tbaa !386
  %15846 = insertelement <4 x i16> undef, i16 %15845, i32 0
  %15847 = extractelement <4 x i32> %15841, i32 1
  %15848 = sext i32 %15847 to i64
  %15849 = getelementptr inbounds i16, i16* %input43288, i64 %15848
  %15850 = load i16, i16* %15849, align 2, !tbaa !386
  %15851 = insertelement <4 x i16> %15846, i16 %15850, i32 1
  %15852 = extractelement <4 x i32> %15841, i32 2
  %15853 = sext i32 %15852 to i64
  %15854 = getelementptr inbounds i16, i16* %input43288, i64 %15853
  %15855 = load i16, i16* %15854, align 2, !tbaa !386
  %15856 = insertelement <4 x i16> %15851, i16 %15855, i32 2
  %15857 = extractelement <4 x i32> %15841, i32 3
  %15858 = sext i32 %15857 to i64
  %15859 = getelementptr inbounds i16, i16* %input43288, i64 %15858
  %15860 = load i16, i16* %15859, align 2, !tbaa !386
  %15861 = insertelement <4 x i16> %15856, i16 %15860, i32 3
  %15862 = add nsw i32 %blur_x.s0.x.v2.base.s111, -24
  %15863 = insertelement <4 x i32> undef, i32 %15862, i32 0
  %15864 = shufflevector <4 x i32> %15863, <4 x i32> undef, <4 x i32> zeroinitializer
  %15865 = add nsw <4 x i32> %15864, <i32 0, i32 1, i32 2, i32 3>
  %15866 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15865, <4 x i32> %90) #11
  %15867 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15866, <4 x i32> %92) #11
  %15868 = add <4 x i32> %15867, %14763
  %15869 = extractelement <4 x i32> %15868, i32 0
  %15870 = sext i32 %15869 to i64
  %15871 = getelementptr inbounds i16, i16* %input43288, i64 %15870
  %15872 = load i16, i16* %15871, align 2, !tbaa !386
  %15873 = insertelement <4 x i16> undef, i16 %15872, i32 0
  %15874 = extractelement <4 x i32> %15868, i32 1
  %15875 = sext i32 %15874 to i64
  %15876 = getelementptr inbounds i16, i16* %input43288, i64 %15875
  %15877 = load i16, i16* %15876, align 2, !tbaa !386
  %15878 = insertelement <4 x i16> %15873, i16 %15877, i32 1
  %15879 = extractelement <4 x i32> %15868, i32 2
  %15880 = sext i32 %15879 to i64
  %15881 = getelementptr inbounds i16, i16* %input43288, i64 %15880
  %15882 = load i16, i16* %15881, align 2, !tbaa !386
  %15883 = insertelement <4 x i16> %15878, i16 %15882, i32 2
  %15884 = extractelement <4 x i32> %15868, i32 3
  %15885 = sext i32 %15884 to i64
  %15886 = getelementptr inbounds i16, i16* %input43288, i64 %15885
  %15887 = load i16, i16* %15886, align 2, !tbaa !386
  %15888 = insertelement <4 x i16> %15883, i16 %15887, i32 3
  %15889 = add nsw i32 %blur_x.s0.x.v2.base.s111, -29
  %15890 = insertelement <4 x i32> undef, i32 %15889, i32 0
  %15891 = shufflevector <4 x i32> %15890, <4 x i32> undef, <4 x i32> zeroinitializer
  %15892 = add nsw <4 x i32> %15891, <i32 0, i32 1, i32 2, i32 3>
  %15893 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15892, <4 x i32> %90) #11
  %15894 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15893, <4 x i32> %92) #11
  %15895 = add <4 x i32> %15894, %14763
  %15896 = extractelement <4 x i32> %15895, i32 0
  %15897 = sext i32 %15896 to i64
  %15898 = getelementptr inbounds i16, i16* %input43288, i64 %15897
  %15899 = load i16, i16* %15898, align 2, !tbaa !386
  %15900 = insertelement <4 x i16> undef, i16 %15899, i32 0
  %15901 = extractelement <4 x i32> %15895, i32 1
  %15902 = sext i32 %15901 to i64
  %15903 = getelementptr inbounds i16, i16* %input43288, i64 %15902
  %15904 = load i16, i16* %15903, align 2, !tbaa !386
  %15905 = insertelement <4 x i16> %15900, i16 %15904, i32 1
  %15906 = extractelement <4 x i32> %15895, i32 2
  %15907 = sext i32 %15906 to i64
  %15908 = getelementptr inbounds i16, i16* %input43288, i64 %15907
  %15909 = load i16, i16* %15908, align 2, !tbaa !386
  %15910 = insertelement <4 x i16> %15905, i16 %15909, i32 2
  %15911 = extractelement <4 x i32> %15895, i32 3
  %15912 = sext i32 %15911 to i64
  %15913 = getelementptr inbounds i16, i16* %input43288, i64 %15912
  %15914 = load i16, i16* %15913, align 2, !tbaa !386
  %15915 = insertelement <4 x i16> %15910, i16 %15914, i32 3
  %15916 = add nsw i32 %blur_x.s0.x.v2.base.s111, -25
  %15917 = insertelement <4 x i32> undef, i32 %15916, i32 0
  %15918 = shufflevector <4 x i32> %15917, <4 x i32> undef, <4 x i32> zeroinitializer
  %15919 = add nsw <4 x i32> %15918, <i32 0, i32 1, i32 2, i32 3>
  %15920 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15919, <4 x i32> %90) #11
  %15921 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15920, <4 x i32> %92) #11
  %15922 = add <4 x i32> %15921, %14763
  %15923 = extractelement <4 x i32> %15922, i32 0
  %15924 = sext i32 %15923 to i64
  %15925 = getelementptr inbounds i16, i16* %input43288, i64 %15924
  %15926 = load i16, i16* %15925, align 2, !tbaa !386
  %15927 = insertelement <4 x i16> undef, i16 %15926, i32 0
  %15928 = extractelement <4 x i32> %15922, i32 1
  %15929 = sext i32 %15928 to i64
  %15930 = getelementptr inbounds i16, i16* %input43288, i64 %15929
  %15931 = load i16, i16* %15930, align 2, !tbaa !386
  %15932 = insertelement <4 x i16> %15927, i16 %15931, i32 1
  %15933 = extractelement <4 x i32> %15922, i32 2
  %15934 = sext i32 %15933 to i64
  %15935 = getelementptr inbounds i16, i16* %input43288, i64 %15934
  %15936 = load i16, i16* %15935, align 2, !tbaa !386
  %15937 = insertelement <4 x i16> %15932, i16 %15936, i32 2
  %15938 = extractelement <4 x i32> %15922, i32 3
  %15939 = sext i32 %15938 to i64
  %15940 = getelementptr inbounds i16, i16* %input43288, i64 %15939
  %15941 = load i16, i16* %15940, align 2, !tbaa !386
  %15942 = insertelement <4 x i16> %15937, i16 %15941, i32 3
  %15943 = add <4 x i16> %15753, %15655
  %15944 = add <4 x i16> %15943, %15807
  %15945 = add <4 x i16> %15944, %15834
  %15946 = add <4 x i16> %15945, %15915
  %15947 = add <4 x i16> %15807, %15780
  %15948 = add <4 x i16> %15947, %15861
  %15949 = add <4 x i16> %15948, %15888
  %15950 = add <4 x i16> %15949, %15942
  %15951 = shufflevector <4 x i16> %15946, <4 x i16> %15950, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %15952 = zext <8 x i16> %15951 to <8 x i32>
  %15953 = mul nuw <8 x i32> %15952, <i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429>
  %15954 = lshr <8 x i32> %15953, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %15955 = shufflevector <8 x i32> %15954, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %15956 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %15955)
  %15957 = shufflevector <8 x i32> %15954, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %15958 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %15957)
  %15959 = shufflevector <4 x i16> %15956, <4 x i16> %15958, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %15960 = add nsw i32 %blur_x.s0.x.v2.base.s111, -23
  %15961 = insertelement <4 x i32> undef, i32 %15960, i32 0
  %15962 = shufflevector <4 x i32> %15961, <4 x i32> undef, <4 x i32> zeroinitializer
  %15963 = add nsw <4 x i32> %15962, <i32 0, i32 1, i32 2, i32 3>
  %15964 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15963, <4 x i32> %90) #11
  %15965 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15964, <4 x i32> %92) #11
  %15966 = add <4 x i32> %15965, %14763
  %15967 = extractelement <4 x i32> %15966, i32 0
  %15968 = sext i32 %15967 to i64
  %15969 = getelementptr inbounds i16, i16* %input43288, i64 %15968
  %15970 = load i16, i16* %15969, align 2, !tbaa !386
  %15971 = insertelement <4 x i16> undef, i16 %15970, i32 0
  %15972 = extractelement <4 x i32> %15966, i32 1
  %15973 = sext i32 %15972 to i64
  %15974 = getelementptr inbounds i16, i16* %input43288, i64 %15973
  %15975 = load i16, i16* %15974, align 2, !tbaa !386
  %15976 = insertelement <4 x i16> %15971, i16 %15975, i32 1
  %15977 = extractelement <4 x i32> %15966, i32 2
  %15978 = sext i32 %15977 to i64
  %15979 = getelementptr inbounds i16, i16* %input43288, i64 %15978
  %15980 = load i16, i16* %15979, align 2, !tbaa !386
  %15981 = insertelement <4 x i16> %15976, i16 %15980, i32 2
  %15982 = extractelement <4 x i32> %15966, i32 3
  %15983 = sext i32 %15982 to i64
  %15984 = getelementptr inbounds i16, i16* %input43288, i64 %15983
  %15985 = load i16, i16* %15984, align 2, !tbaa !386
  %15986 = insertelement <4 x i16> %15981, i16 %15985, i32 3
  %15987 = add nsw i32 %blur_x.s0.x.v2.base.s111, -19
  %15988 = insertelement <4 x i32> undef, i32 %15987, i32 0
  %15989 = shufflevector <4 x i32> %15988, <4 x i32> undef, <4 x i32> zeroinitializer
  %15990 = add nsw <4 x i32> %15989, <i32 0, i32 1, i32 2, i32 3>
  %15991 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15990, <4 x i32> %90) #11
  %15992 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15991, <4 x i32> %92) #11
  %15993 = add <4 x i32> %15992, %14763
  %15994 = extractelement <4 x i32> %15993, i32 0
  %15995 = sext i32 %15994 to i64
  %15996 = getelementptr inbounds i16, i16* %input43288, i64 %15995
  %15997 = load i16, i16* %15996, align 2, !tbaa !386
  %15998 = insertelement <4 x i16> undef, i16 %15997, i32 0
  %15999 = extractelement <4 x i32> %15993, i32 1
  %16000 = sext i32 %15999 to i64
  %16001 = getelementptr inbounds i16, i16* %input43288, i64 %16000
  %16002 = load i16, i16* %16001, align 2, !tbaa !386
  %16003 = insertelement <4 x i16> %15998, i16 %16002, i32 1
  %16004 = extractelement <4 x i32> %15993, i32 2
  %16005 = sext i32 %16004 to i64
  %16006 = getelementptr inbounds i16, i16* %input43288, i64 %16005
  %16007 = load i16, i16* %16006, align 2, !tbaa !386
  %16008 = insertelement <4 x i16> %16003, i16 %16007, i32 2
  %16009 = extractelement <4 x i32> %15993, i32 3
  %16010 = sext i32 %16009 to i64
  %16011 = getelementptr inbounds i16, i16* %input43288, i64 %16010
  %16012 = load i16, i16* %16011, align 2, !tbaa !386
  %16013 = insertelement <4 x i16> %16008, i16 %16012, i32 3
  %16014 = add nsw i32 %blur_x.s0.x.v2.base.s111, -20
  %16015 = insertelement <4 x i32> undef, i32 %16014, i32 0
  %16016 = shufflevector <4 x i32> %16015, <4 x i32> undef, <4 x i32> zeroinitializer
  %16017 = add nsw <4 x i32> %16016, <i32 0, i32 1, i32 2, i32 3>
  %16018 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %16017, <4 x i32> %90) #11
  %16019 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %16018, <4 x i32> %92) #11
  %16020 = add <4 x i32> %16019, %14763
  %16021 = extractelement <4 x i32> %16020, i32 0
  %16022 = sext i32 %16021 to i64
  %16023 = getelementptr inbounds i16, i16* %input43288, i64 %16022
  %16024 = load i16, i16* %16023, align 2, !tbaa !386
  %16025 = insertelement <4 x i16> undef, i16 %16024, i32 0
  %16026 = extractelement <4 x i32> %16020, i32 1
  %16027 = sext i32 %16026 to i64
  %16028 = getelementptr inbounds i16, i16* %input43288, i64 %16027
  %16029 = load i16, i16* %16028, align 2, !tbaa !386
  %16030 = insertelement <4 x i16> %16025, i16 %16029, i32 1
  %16031 = extractelement <4 x i32> %16020, i32 2
  %16032 = sext i32 %16031 to i64
  %16033 = getelementptr inbounds i16, i16* %input43288, i64 %16032
  %16034 = load i16, i16* %16033, align 2, !tbaa !386
  %16035 = insertelement <4 x i16> %16030, i16 %16034, i32 2
  %16036 = extractelement <4 x i32> %16020, i32 3
  %16037 = sext i32 %16036 to i64
  %16038 = getelementptr inbounds i16, i16* %input43288, i64 %16037
  %16039 = load i16, i16* %16038, align 2, !tbaa !386
  %16040 = insertelement <4 x i16> %16035, i16 %16039, i32 3
  %16041 = add nsw i32 %blur_x.s0.x.v2.base.s111, -22
  %16042 = insertelement <4 x i32> undef, i32 %16041, i32 0
  %16043 = shufflevector <4 x i32> %16042, <4 x i32> undef, <4 x i32> zeroinitializer
  %16044 = add nsw <4 x i32> %16043, <i32 0, i32 1, i32 2, i32 3>
  %16045 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %16044, <4 x i32> %90) #11
  %16046 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %16045, <4 x i32> %92) #11
  %16047 = add <4 x i32> %16046, %14763
  %16048 = extractelement <4 x i32> %16047, i32 0
  %16049 = sext i32 %16048 to i64
  %16050 = getelementptr inbounds i16, i16* %input43288, i64 %16049
  %16051 = load i16, i16* %16050, align 2, !tbaa !386
  %16052 = insertelement <4 x i16> undef, i16 %16051, i32 0
  %16053 = extractelement <4 x i32> %16047, i32 1
  %16054 = sext i32 %16053 to i64
  %16055 = getelementptr inbounds i16, i16* %input43288, i64 %16054
  %16056 = load i16, i16* %16055, align 2, !tbaa !386
  %16057 = insertelement <4 x i16> %16052, i16 %16056, i32 1
  %16058 = extractelement <4 x i32> %16047, i32 2
  %16059 = sext i32 %16058 to i64
  %16060 = getelementptr inbounds i16, i16* %input43288, i64 %16059
  %16061 = load i16, i16* %16060, align 2, !tbaa !386
  %16062 = insertelement <4 x i16> %16057, i16 %16061, i32 2
  %16063 = extractelement <4 x i32> %16047, i32 3
  %16064 = sext i32 %16063 to i64
  %16065 = getelementptr inbounds i16, i16* %input43288, i64 %16064
  %16066 = load i16, i16* %16065, align 2, !tbaa !386
  %16067 = insertelement <4 x i16> %16062, i16 %16066, i32 3
  %16068 = add nsw i32 %blur_x.s0.x.v2.base.s111, -18
  %16069 = insertelement <4 x i32> undef, i32 %16068, i32 0
  %16070 = shufflevector <4 x i32> %16069, <4 x i32> undef, <4 x i32> zeroinitializer
  %16071 = add nsw <4 x i32> %16070, <i32 0, i32 1, i32 2, i32 3>
  %16072 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %16071, <4 x i32> %90) #11
  %16073 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %16072, <4 x i32> %92) #11
  %16074 = add <4 x i32> %16073, %14763
  %16075 = extractelement <4 x i32> %16074, i32 0
  %16076 = sext i32 %16075 to i64
  %16077 = getelementptr inbounds i16, i16* %input43288, i64 %16076
  %16078 = load i16, i16* %16077, align 2, !tbaa !386
  %16079 = insertelement <4 x i16> undef, i16 %16078, i32 0
  %16080 = extractelement <4 x i32> %16074, i32 1
  %16081 = sext i32 %16080 to i64
  %16082 = getelementptr inbounds i16, i16* %input43288, i64 %16081
  %16083 = load i16, i16* %16082, align 2, !tbaa !386
  %16084 = insertelement <4 x i16> %16079, i16 %16083, i32 1
  %16085 = extractelement <4 x i32> %16074, i32 2
  %16086 = sext i32 %16085 to i64
  %16087 = getelementptr inbounds i16, i16* %input43288, i64 %16086
  %16088 = load i16, i16* %16087, align 2, !tbaa !386
  %16089 = insertelement <4 x i16> %16084, i16 %16088, i32 2
  %16090 = extractelement <4 x i32> %16074, i32 3
  %16091 = sext i32 %16090 to i64
  %16092 = getelementptr inbounds i16, i16* %input43288, i64 %16091
  %16093 = load i16, i16* %16092, align 2, !tbaa !386
  %16094 = insertelement <4 x i16> %16089, i16 %16093, i32 3
  %16095 = add nsw i32 %blur_x.s0.x.v2.base.s111, -16
  %16096 = insertelement <4 x i32> undef, i32 %16095, i32 0
  %16097 = shufflevector <4 x i32> %16096, <4 x i32> undef, <4 x i32> zeroinitializer
  %16098 = add nsw <4 x i32> %16097, <i32 0, i32 1, i32 2, i32 3>
  %16099 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %16098, <4 x i32> %90) #11
  %16100 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %16099, <4 x i32> %92) #11
  %16101 = add <4 x i32> %16100, %14763
  %16102 = extractelement <4 x i32> %16101, i32 0
  %16103 = sext i32 %16102 to i64
  %16104 = getelementptr inbounds i16, i16* %input43288, i64 %16103
  %16105 = load i16, i16* %16104, align 2, !tbaa !386
  %16106 = insertelement <4 x i16> undef, i16 %16105, i32 0
  %16107 = extractelement <4 x i32> %16101, i32 1
  %16108 = sext i32 %16107 to i64
  %16109 = getelementptr inbounds i16, i16* %input43288, i64 %16108
  %16110 = load i16, i16* %16109, align 2, !tbaa !386
  %16111 = insertelement <4 x i16> %16106, i16 %16110, i32 1
  %16112 = extractelement <4 x i32> %16101, i32 2
  %16113 = sext i32 %16112 to i64
  %16114 = getelementptr inbounds i16, i16* %input43288, i64 %16113
  %16115 = load i16, i16* %16114, align 2, !tbaa !386
  %16116 = insertelement <4 x i16> %16111, i16 %16115, i32 2
  %16117 = extractelement <4 x i32> %16101, i32 3
  %16118 = sext i32 %16117 to i64
  %16119 = getelementptr inbounds i16, i16* %input43288, i64 %16118
  %16120 = load i16, i16* %16119, align 2, !tbaa !386
  %16121 = insertelement <4 x i16> %16116, i16 %16120, i32 3
  %16122 = add nsw i32 %blur_x.s0.x.v2.base.s111, -21
  %16123 = insertelement <4 x i32> undef, i32 %16122, i32 0
  %16124 = shufflevector <4 x i32> %16123, <4 x i32> undef, <4 x i32> zeroinitializer
  %16125 = add nsw <4 x i32> %16124, <i32 0, i32 1, i32 2, i32 3>
  %16126 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %16125, <4 x i32> %90) #11
  %16127 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %16126, <4 x i32> %92) #11
  %16128 = add <4 x i32> %16127, %14763
  %16129 = extractelement <4 x i32> %16128, i32 0
  %16130 = sext i32 %16129 to i64
  %16131 = getelementptr inbounds i16, i16* %input43288, i64 %16130
  %16132 = load i16, i16* %16131, align 2, !tbaa !386
  %16133 = insertelement <4 x i16> undef, i16 %16132, i32 0
  %16134 = extractelement <4 x i32> %16128, i32 1
  %16135 = sext i32 %16134 to i64
  %16136 = getelementptr inbounds i16, i16* %input43288, i64 %16135
  %16137 = load i16, i16* %16136, align 2, !tbaa !386
  %16138 = insertelement <4 x i16> %16133, i16 %16137, i32 1
  %16139 = extractelement <4 x i32> %16128, i32 2
  %16140 = sext i32 %16139 to i64
  %16141 = getelementptr inbounds i16, i16* %input43288, i64 %16140
  %16142 = load i16, i16* %16141, align 2, !tbaa !386
  %16143 = insertelement <4 x i16> %16138, i16 %16142, i32 2
  %16144 = extractelement <4 x i32> %16128, i32 3
  %16145 = sext i32 %16144 to i64
  %16146 = getelementptr inbounds i16, i16* %input43288, i64 %16145
  %16147 = load i16, i16* %16146, align 2, !tbaa !386
  %16148 = insertelement <4 x i16> %16143, i16 %16147, i32 3
  %16149 = add nsw i32 %blur_x.s0.x.v2.base.s111, -17
  %16150 = insertelement <4 x i32> undef, i32 %16149, i32 0
  %16151 = shufflevector <4 x i32> %16150, <4 x i32> undef, <4 x i32> zeroinitializer
  %16152 = add nsw <4 x i32> %16151, <i32 0, i32 1, i32 2, i32 3>
  %16153 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %16152, <4 x i32> %90) #11
  %16154 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %16153, <4 x i32> %92) #11
  %16155 = add <4 x i32> %16154, %14763
  %16156 = extractelement <4 x i32> %16155, i32 0
  %16157 = sext i32 %16156 to i64
  %16158 = getelementptr inbounds i16, i16* %input43288, i64 %16157
  %16159 = load i16, i16* %16158, align 2, !tbaa !386
  %16160 = insertelement <4 x i16> undef, i16 %16159, i32 0
  %16161 = extractelement <4 x i32> %16155, i32 1
  %16162 = sext i32 %16161 to i64
  %16163 = getelementptr inbounds i16, i16* %input43288, i64 %16162
  %16164 = load i16, i16* %16163, align 2, !tbaa !386
  %16165 = insertelement <4 x i16> %16160, i16 %16164, i32 1
  %16166 = extractelement <4 x i32> %16155, i32 2
  %16167 = sext i32 %16166 to i64
  %16168 = getelementptr inbounds i16, i16* %input43288, i64 %16167
  %16169 = load i16, i16* %16168, align 2, !tbaa !386
  %16170 = insertelement <4 x i16> %16165, i16 %16169, i32 2
  %16171 = extractelement <4 x i32> %16155, i32 3
  %16172 = sext i32 %16171 to i64
  %16173 = getelementptr inbounds i16, i16* %input43288, i64 %16172
  %16174 = load i16, i16* %16173, align 2, !tbaa !386
  %16175 = insertelement <4 x i16> %16170, i16 %16174, i32 3
  %16176 = add <4 x i16> %15986, %15888
  %16177 = add <4 x i16> %16176, %16040
  %16178 = add <4 x i16> %16177, %16067
  %16179 = add <4 x i16> %16178, %16148
  %16180 = add <4 x i16> %16040, %16013
  %16181 = add <4 x i16> %16180, %16094
  %16182 = add <4 x i16> %16181, %16121
  %16183 = add <4 x i16> %16182, %16175
  %16184 = shufflevector <4 x i16> %16179, <4 x i16> %16183, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %16185 = zext <8 x i16> %16184 to <8 x i32>
  %16186 = mul nuw <8 x i32> %16185, <i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429>
  %16187 = lshr <8 x i32> %16186, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %16188 = shufflevector <8 x i32> %16187, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %16189 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %16188)
  %16190 = shufflevector <8 x i32> %16187, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %16191 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %16190)
  %16192 = shufflevector <4 x i16> %16189, <4 x i16> %16191, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %16193 = add nsw i32 %blur_x.s0.x.v2.base.s111, -15
  %16194 = insertelement <4 x i32> undef, i32 %16193, i32 0
  %16195 = shufflevector <4 x i32> %16194, <4 x i32> undef, <4 x i32> zeroinitializer
  %16196 = add nsw <4 x i32> %16195, <i32 0, i32 1, i32 2, i32 3>
  %16197 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %16196, <4 x i32> %90) #11
  %16198 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %16197, <4 x i32> %92) #11
  %16199 = add <4 x i32> %16198, %14763
  %16200 = extractelement <4 x i32> %16199, i32 0
  %16201 = sext i32 %16200 to i64
  %16202 = getelementptr inbounds i16, i16* %input43288, i64 %16201
  %16203 = load i16, i16* %16202, align 2, !tbaa !386
  %16204 = insertelement <4 x i16> undef, i16 %16203, i32 0
  %16205 = extractelement <4 x i32> %16199, i32 1
  %16206 = sext i32 %16205 to i64
  %16207 = getelementptr inbounds i16, i16* %input43288, i64 %16206
  %16208 = load i16, i16* %16207, align 2, !tbaa !386
  %16209 = insertelement <4 x i16> %16204, i16 %16208, i32 1
  %16210 = extractelement <4 x i32> %16199, i32 2
  %16211 = sext i32 %16210 to i64
  %16212 = getelementptr inbounds i16, i16* %input43288, i64 %16211
  %16213 = load i16, i16* %16212, align 2, !tbaa !386
  %16214 = insertelement <4 x i16> %16209, i16 %16213, i32 2
  %16215 = extractelement <4 x i32> %16199, i32 3
  %16216 = sext i32 %16215 to i64
  %16217 = getelementptr inbounds i16, i16* %input43288, i64 %16216
  %16218 = load i16, i16* %16217, align 2, !tbaa !386
  %16219 = insertelement <4 x i16> %16214, i16 %16218, i32 3
  %16220 = add nsw i32 %blur_x.s0.x.v2.base.s111, -11
  %16221 = insertelement <4 x i32> undef, i32 %16220, i32 0
  %16222 = shufflevector <4 x i32> %16221, <4 x i32> undef, <4 x i32> zeroinitializer
  %16223 = add nsw <4 x i32> %16222, <i32 0, i32 1, i32 2, i32 3>
  %16224 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %16223, <4 x i32> %90) #11
  %16225 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %16224, <4 x i32> %92) #11
  %16226 = add <4 x i32> %16225, %14763
  %16227 = extractelement <4 x i32> %16226, i32 0
  %16228 = sext i32 %16227 to i64
  %16229 = getelementptr inbounds i16, i16* %input43288, i64 %16228
  %16230 = load i16, i16* %16229, align 2, !tbaa !386
  %16231 = insertelement <4 x i16> undef, i16 %16230, i32 0
  %16232 = extractelement <4 x i32> %16226, i32 1
  %16233 = sext i32 %16232 to i64
  %16234 = getelementptr inbounds i16, i16* %input43288, i64 %16233
  %16235 = load i16, i16* %16234, align 2, !tbaa !386
  %16236 = insertelement <4 x i16> %16231, i16 %16235, i32 1
  %16237 = extractelement <4 x i32> %16226, i32 2
  %16238 = sext i32 %16237 to i64
  %16239 = getelementptr inbounds i16, i16* %input43288, i64 %16238
  %16240 = load i16, i16* %16239, align 2, !tbaa !386
  %16241 = insertelement <4 x i16> %16236, i16 %16240, i32 2
  %16242 = extractelement <4 x i32> %16226, i32 3
  %16243 = sext i32 %16242 to i64
  %16244 = getelementptr inbounds i16, i16* %input43288, i64 %16243
  %16245 = load i16, i16* %16244, align 2, !tbaa !386
  %16246 = insertelement <4 x i16> %16241, i16 %16245, i32 3
  %16247 = add nsw i32 %blur_x.s0.x.v2.base.s111, -12
  %16248 = insertelement <4 x i32> undef, i32 %16247, i32 0
  %16249 = shufflevector <4 x i32> %16248, <4 x i32> undef, <4 x i32> zeroinitializer
  %16250 = add nsw <4 x i32> %16249, <i32 0, i32 1, i32 2, i32 3>
  %16251 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %16250, <4 x i32> %90) #11
  %16252 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %16251, <4 x i32> %92) #11
  %16253 = add <4 x i32> %16252, %14763
  %16254 = extractelement <4 x i32> %16253, i32 0
  %16255 = sext i32 %16254 to i64
  %16256 = getelementptr inbounds i16, i16* %input43288, i64 %16255
  %16257 = load i16, i16* %16256, align 2, !tbaa !386
  %16258 = insertelement <4 x i16> undef, i16 %16257, i32 0
  %16259 = extractelement <4 x i32> %16253, i32 1
  %16260 = sext i32 %16259 to i64
  %16261 = getelementptr inbounds i16, i16* %input43288, i64 %16260
  %16262 = load i16, i16* %16261, align 2, !tbaa !386
  %16263 = insertelement <4 x i16> %16258, i16 %16262, i32 1
  %16264 = extractelement <4 x i32> %16253, i32 2
  %16265 = sext i32 %16264 to i64
  %16266 = getelementptr inbounds i16, i16* %input43288, i64 %16265
  %16267 = load i16, i16* %16266, align 2, !tbaa !386
  %16268 = insertelement <4 x i16> %16263, i16 %16267, i32 2
  %16269 = extractelement <4 x i32> %16253, i32 3
  %16270 = sext i32 %16269 to i64
  %16271 = getelementptr inbounds i16, i16* %input43288, i64 %16270
  %16272 = load i16, i16* %16271, align 2, !tbaa !386
  %16273 = insertelement <4 x i16> %16268, i16 %16272, i32 3
  %16274 = add nsw i32 %blur_x.s0.x.v2.base.s111, -14
  %16275 = insertelement <4 x i32> undef, i32 %16274, i32 0
  %16276 = shufflevector <4 x i32> %16275, <4 x i32> undef, <4 x i32> zeroinitializer
  %16277 = add nsw <4 x i32> %16276, <i32 0, i32 1, i32 2, i32 3>
  %16278 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %16277, <4 x i32> %90) #11
  %16279 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %16278, <4 x i32> %92) #11
  %16280 = add <4 x i32> %16279, %14763
  %16281 = extractelement <4 x i32> %16280, i32 0
  %16282 = sext i32 %16281 to i64
  %16283 = getelementptr inbounds i16, i16* %input43288, i64 %16282
  %16284 = load i16, i16* %16283, align 2, !tbaa !386
  %16285 = insertelement <4 x i16> undef, i16 %16284, i32 0
  %16286 = extractelement <4 x i32> %16280, i32 1
  %16287 = sext i32 %16286 to i64
  %16288 = getelementptr inbounds i16, i16* %input43288, i64 %16287
  %16289 = load i16, i16* %16288, align 2, !tbaa !386
  %16290 = insertelement <4 x i16> %16285, i16 %16289, i32 1
  %16291 = extractelement <4 x i32> %16280, i32 2
  %16292 = sext i32 %16291 to i64
  %16293 = getelementptr inbounds i16, i16* %input43288, i64 %16292
  %16294 = load i16, i16* %16293, align 2, !tbaa !386
  %16295 = insertelement <4 x i16> %16290, i16 %16294, i32 2
  %16296 = extractelement <4 x i32> %16280, i32 3
  %16297 = sext i32 %16296 to i64
  %16298 = getelementptr inbounds i16, i16* %input43288, i64 %16297
  %16299 = load i16, i16* %16298, align 2, !tbaa !386
  %16300 = insertelement <4 x i16> %16295, i16 %16299, i32 3
  %16301 = add nsw i32 %blur_x.s0.x.v2.base.s111, -10
  %16302 = insertelement <4 x i32> undef, i32 %16301, i32 0
  %16303 = shufflevector <4 x i32> %16302, <4 x i32> undef, <4 x i32> zeroinitializer
  %16304 = add nsw <4 x i32> %16303, <i32 0, i32 1, i32 2, i32 3>
  %16305 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %16304, <4 x i32> %90) #11
  %16306 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %16305, <4 x i32> %92) #11
  %16307 = add <4 x i32> %16306, %14763
  %16308 = extractelement <4 x i32> %16307, i32 0
  %16309 = sext i32 %16308 to i64
  %16310 = getelementptr inbounds i16, i16* %input43288, i64 %16309
  %16311 = load i16, i16* %16310, align 2, !tbaa !386
  %16312 = insertelement <4 x i16> undef, i16 %16311, i32 0
  %16313 = extractelement <4 x i32> %16307, i32 1
  %16314 = sext i32 %16313 to i64
  %16315 = getelementptr inbounds i16, i16* %input43288, i64 %16314
  %16316 = load i16, i16* %16315, align 2, !tbaa !386
  %16317 = insertelement <4 x i16> %16312, i16 %16316, i32 1
  %16318 = extractelement <4 x i32> %16307, i32 2
  %16319 = sext i32 %16318 to i64
  %16320 = getelementptr inbounds i16, i16* %input43288, i64 %16319
  %16321 = load i16, i16* %16320, align 2, !tbaa !386
  %16322 = insertelement <4 x i16> %16317, i16 %16321, i32 2
  %16323 = extractelement <4 x i32> %16307, i32 3
  %16324 = sext i32 %16323 to i64
  %16325 = getelementptr inbounds i16, i16* %input43288, i64 %16324
  %16326 = load i16, i16* %16325, align 2, !tbaa !386
  %16327 = insertelement <4 x i16> %16322, i16 %16326, i32 3
  %16328 = add nsw i32 %blur_x.s0.x.v2.base.s111, -8
  %16329 = insertelement <4 x i32> undef, i32 %16328, i32 0
  %16330 = shufflevector <4 x i32> %16329, <4 x i32> undef, <4 x i32> zeroinitializer
  %16331 = add nsw <4 x i32> %16330, <i32 0, i32 1, i32 2, i32 3>
  %16332 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %16331, <4 x i32> %90) #11
  %16333 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %16332, <4 x i32> %92) #11
  %16334 = add <4 x i32> %16333, %14763
  %16335 = extractelement <4 x i32> %16334, i32 0
  %16336 = sext i32 %16335 to i64
  %16337 = getelementptr inbounds i16, i16* %input43288, i64 %16336
  %16338 = load i16, i16* %16337, align 2, !tbaa !386
  %16339 = insertelement <4 x i16> undef, i16 %16338, i32 0
  %16340 = extractelement <4 x i32> %16334, i32 1
  %16341 = sext i32 %16340 to i64
  %16342 = getelementptr inbounds i16, i16* %input43288, i64 %16341
  %16343 = load i16, i16* %16342, align 2, !tbaa !386
  %16344 = insertelement <4 x i16> %16339, i16 %16343, i32 1
  %16345 = extractelement <4 x i32> %16334, i32 2
  %16346 = sext i32 %16345 to i64
  %16347 = getelementptr inbounds i16, i16* %input43288, i64 %16346
  %16348 = load i16, i16* %16347, align 2, !tbaa !386
  %16349 = insertelement <4 x i16> %16344, i16 %16348, i32 2
  %16350 = extractelement <4 x i32> %16334, i32 3
  %16351 = sext i32 %16350 to i64
  %16352 = getelementptr inbounds i16, i16* %input43288, i64 %16351
  %16353 = load i16, i16* %16352, align 2, !tbaa !386
  %16354 = insertelement <4 x i16> %16349, i16 %16353, i32 3
  %16355 = add nsw i32 %blur_x.s0.x.v2.base.s111, -13
  %16356 = insertelement <4 x i32> undef, i32 %16355, i32 0
  %16357 = shufflevector <4 x i32> %16356, <4 x i32> undef, <4 x i32> zeroinitializer
  %16358 = add nsw <4 x i32> %16357, <i32 0, i32 1, i32 2, i32 3>
  %16359 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %16358, <4 x i32> %90) #11
  %16360 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %16359, <4 x i32> %92) #11
  %16361 = add <4 x i32> %16360, %14763
  %16362 = extractelement <4 x i32> %16361, i32 0
  %16363 = sext i32 %16362 to i64
  %16364 = getelementptr inbounds i16, i16* %input43288, i64 %16363
  %16365 = load i16, i16* %16364, align 2, !tbaa !386
  %16366 = insertelement <4 x i16> undef, i16 %16365, i32 0
  %16367 = extractelement <4 x i32> %16361, i32 1
  %16368 = sext i32 %16367 to i64
  %16369 = getelementptr inbounds i16, i16* %input43288, i64 %16368
  %16370 = load i16, i16* %16369, align 2, !tbaa !386
  %16371 = insertelement <4 x i16> %16366, i16 %16370, i32 1
  %16372 = extractelement <4 x i32> %16361, i32 2
  %16373 = sext i32 %16372 to i64
  %16374 = getelementptr inbounds i16, i16* %input43288, i64 %16373
  %16375 = load i16, i16* %16374, align 2, !tbaa !386
  %16376 = insertelement <4 x i16> %16371, i16 %16375, i32 2
  %16377 = extractelement <4 x i32> %16361, i32 3
  %16378 = sext i32 %16377 to i64
  %16379 = getelementptr inbounds i16, i16* %input43288, i64 %16378
  %16380 = load i16, i16* %16379, align 2, !tbaa !386
  %16381 = insertelement <4 x i16> %16376, i16 %16380, i32 3
  %16382 = add nsw i32 %blur_x.s0.x.v2.base.s111, -9
  %16383 = insertelement <4 x i32> undef, i32 %16382, i32 0
  %16384 = shufflevector <4 x i32> %16383, <4 x i32> undef, <4 x i32> zeroinitializer
  %16385 = add nsw <4 x i32> %16384, <i32 0, i32 1, i32 2, i32 3>
  %16386 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %16385, <4 x i32> %90) #11
  %16387 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %16386, <4 x i32> %92) #11
  %16388 = add <4 x i32> %16387, %14763
  %16389 = extractelement <4 x i32> %16388, i32 0
  %16390 = sext i32 %16389 to i64
  %16391 = getelementptr inbounds i16, i16* %input43288, i64 %16390
  %16392 = load i16, i16* %16391, align 2, !tbaa !386
  %16393 = insertelement <4 x i16> undef, i16 %16392, i32 0
  %16394 = extractelement <4 x i32> %16388, i32 1
  %16395 = sext i32 %16394 to i64
  %16396 = getelementptr inbounds i16, i16* %input43288, i64 %16395
  %16397 = load i16, i16* %16396, align 2, !tbaa !386
  %16398 = insertelement <4 x i16> %16393, i16 %16397, i32 1
  %16399 = extractelement <4 x i32> %16388, i32 2
  %16400 = sext i32 %16399 to i64
  %16401 = getelementptr inbounds i16, i16* %input43288, i64 %16400
  %16402 = load i16, i16* %16401, align 2, !tbaa !386
  %16403 = insertelement <4 x i16> %16398, i16 %16402, i32 2
  %16404 = extractelement <4 x i32> %16388, i32 3
  %16405 = sext i32 %16404 to i64
  %16406 = getelementptr inbounds i16, i16* %input43288, i64 %16405
  %16407 = load i16, i16* %16406, align 2, !tbaa !386
  %16408 = insertelement <4 x i16> %16403, i16 %16407, i32 3
  %16409 = add <4 x i16> %16219, %16121
  %16410 = add <4 x i16> %16409, %16273
  %16411 = add <4 x i16> %16410, %16300
  %16412 = add <4 x i16> %16411, %16381
  %16413 = add <4 x i16> %16273, %16246
  %16414 = add <4 x i16> %16413, %16327
  %16415 = add <4 x i16> %16414, %16354
  %16416 = add <4 x i16> %16415, %16408
  %16417 = shufflevector <4 x i16> %16412, <4 x i16> %16416, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %16418 = zext <8 x i16> %16417 to <8 x i32>
  %16419 = mul nuw <8 x i32> %16418, <i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429>
  %16420 = lshr <8 x i32> %16419, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %16421 = shufflevector <8 x i32> %16420, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %16422 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %16421)
  %16423 = shufflevector <8 x i32> %16420, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %16424 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %16423)
  %16425 = shufflevector <4 x i16> %16422, <4 x i16> %16424, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %16426 = add nsw i32 %blur_x.s0.x.v2.base.s111, -7
  %16427 = insertelement <4 x i32> undef, i32 %16426, i32 0
  %16428 = shufflevector <4 x i32> %16427, <4 x i32> undef, <4 x i32> zeroinitializer
  %16429 = add nsw <4 x i32> %16428, <i32 0, i32 1, i32 2, i32 3>
  %16430 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %16429, <4 x i32> %90) #11
  %16431 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %16430, <4 x i32> %92) #11
  %16432 = add <4 x i32> %16431, %14763
  %16433 = extractelement <4 x i32> %16432, i32 0
  %16434 = sext i32 %16433 to i64
  %16435 = getelementptr inbounds i16, i16* %input43288, i64 %16434
  %16436 = load i16, i16* %16435, align 2, !tbaa !386
  %16437 = insertelement <4 x i16> undef, i16 %16436, i32 0
  %16438 = extractelement <4 x i32> %16432, i32 1
  %16439 = sext i32 %16438 to i64
  %16440 = getelementptr inbounds i16, i16* %input43288, i64 %16439
  %16441 = load i16, i16* %16440, align 2, !tbaa !386
  %16442 = insertelement <4 x i16> %16437, i16 %16441, i32 1
  %16443 = extractelement <4 x i32> %16432, i32 2
  %16444 = sext i32 %16443 to i64
  %16445 = getelementptr inbounds i16, i16* %input43288, i64 %16444
  %16446 = load i16, i16* %16445, align 2, !tbaa !386
  %16447 = insertelement <4 x i16> %16442, i16 %16446, i32 2
  %16448 = extractelement <4 x i32> %16432, i32 3
  %16449 = sext i32 %16448 to i64
  %16450 = getelementptr inbounds i16, i16* %input43288, i64 %16449
  %16451 = load i16, i16* %16450, align 2, !tbaa !386
  %16452 = insertelement <4 x i16> %16447, i16 %16451, i32 3
  %16453 = add nsw i32 %blur_x.s0.x.v2.base.s111, -3
  %16454 = insertelement <4 x i32> undef, i32 %16453, i32 0
  %16455 = shufflevector <4 x i32> %16454, <4 x i32> undef, <4 x i32> zeroinitializer
  %16456 = add nsw <4 x i32> %16455, <i32 0, i32 1, i32 2, i32 3>
  %16457 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %16456, <4 x i32> %90) #11
  %16458 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %16457, <4 x i32> %92) #11
  %16459 = add <4 x i32> %16458, %14763
  %16460 = extractelement <4 x i32> %16459, i32 0
  %16461 = sext i32 %16460 to i64
  %16462 = getelementptr inbounds i16, i16* %input43288, i64 %16461
  %16463 = load i16, i16* %16462, align 2, !tbaa !386
  %16464 = insertelement <4 x i16> undef, i16 %16463, i32 0
  %16465 = extractelement <4 x i32> %16459, i32 1
  %16466 = sext i32 %16465 to i64
  %16467 = getelementptr inbounds i16, i16* %input43288, i64 %16466
  %16468 = load i16, i16* %16467, align 2, !tbaa !386
  %16469 = insertelement <4 x i16> %16464, i16 %16468, i32 1
  %16470 = extractelement <4 x i32> %16459, i32 2
  %16471 = sext i32 %16470 to i64
  %16472 = getelementptr inbounds i16, i16* %input43288, i64 %16471
  %16473 = load i16, i16* %16472, align 2, !tbaa !386
  %16474 = insertelement <4 x i16> %16469, i16 %16473, i32 2
  %16475 = extractelement <4 x i32> %16459, i32 3
  %16476 = sext i32 %16475 to i64
  %16477 = getelementptr inbounds i16, i16* %input43288, i64 %16476
  %16478 = load i16, i16* %16477, align 2, !tbaa !386
  %16479 = insertelement <4 x i16> %16474, i16 %16478, i32 3
  %16480 = add nsw i32 %blur_x.s0.x.v2.base.s111, -4
  %16481 = insertelement <4 x i32> undef, i32 %16480, i32 0
  %16482 = shufflevector <4 x i32> %16481, <4 x i32> undef, <4 x i32> zeroinitializer
  %16483 = add nsw <4 x i32> %16482, <i32 0, i32 1, i32 2, i32 3>
  %16484 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %16483, <4 x i32> %90) #11
  %16485 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %16484, <4 x i32> %92) #11
  %16486 = add <4 x i32> %16485, %14763
  %16487 = extractelement <4 x i32> %16486, i32 0
  %16488 = sext i32 %16487 to i64
  %16489 = getelementptr inbounds i16, i16* %input43288, i64 %16488
  %16490 = load i16, i16* %16489, align 2, !tbaa !386
  %16491 = insertelement <4 x i16> undef, i16 %16490, i32 0
  %16492 = extractelement <4 x i32> %16486, i32 1
  %16493 = sext i32 %16492 to i64
  %16494 = getelementptr inbounds i16, i16* %input43288, i64 %16493
  %16495 = load i16, i16* %16494, align 2, !tbaa !386
  %16496 = insertelement <4 x i16> %16491, i16 %16495, i32 1
  %16497 = extractelement <4 x i32> %16486, i32 2
  %16498 = sext i32 %16497 to i64
  %16499 = getelementptr inbounds i16, i16* %input43288, i64 %16498
  %16500 = load i16, i16* %16499, align 2, !tbaa !386
  %16501 = insertelement <4 x i16> %16496, i16 %16500, i32 2
  %16502 = extractelement <4 x i32> %16486, i32 3
  %16503 = sext i32 %16502 to i64
  %16504 = getelementptr inbounds i16, i16* %input43288, i64 %16503
  %16505 = load i16, i16* %16504, align 2, !tbaa !386
  %16506 = insertelement <4 x i16> %16501, i16 %16505, i32 3
  %16507 = add nsw i32 %blur_x.s0.x.v2.base.s111, -6
  %16508 = insertelement <4 x i32> undef, i32 %16507, i32 0
  %16509 = shufflevector <4 x i32> %16508, <4 x i32> undef, <4 x i32> zeroinitializer
  %16510 = add nsw <4 x i32> %16509, <i32 0, i32 1, i32 2, i32 3>
  %16511 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %16510, <4 x i32> %90) #11
  %16512 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %16511, <4 x i32> %92) #11
  %16513 = add <4 x i32> %16512, %14763
  %16514 = extractelement <4 x i32> %16513, i32 0
  %16515 = sext i32 %16514 to i64
  %16516 = getelementptr inbounds i16, i16* %input43288, i64 %16515
  %16517 = load i16, i16* %16516, align 2, !tbaa !386
  %16518 = insertelement <4 x i16> undef, i16 %16517, i32 0
  %16519 = extractelement <4 x i32> %16513, i32 1
  %16520 = sext i32 %16519 to i64
  %16521 = getelementptr inbounds i16, i16* %input43288, i64 %16520
  %16522 = load i16, i16* %16521, align 2, !tbaa !386
  %16523 = insertelement <4 x i16> %16518, i16 %16522, i32 1
  %16524 = extractelement <4 x i32> %16513, i32 2
  %16525 = sext i32 %16524 to i64
  %16526 = getelementptr inbounds i16, i16* %input43288, i64 %16525
  %16527 = load i16, i16* %16526, align 2, !tbaa !386
  %16528 = insertelement <4 x i16> %16523, i16 %16527, i32 2
  %16529 = extractelement <4 x i32> %16513, i32 3
  %16530 = sext i32 %16529 to i64
  %16531 = getelementptr inbounds i16, i16* %input43288, i64 %16530
  %16532 = load i16, i16* %16531, align 2, !tbaa !386
  %16533 = insertelement <4 x i16> %16528, i16 %16532, i32 3
  %16534 = add nsw i32 %blur_x.s0.x.v2.base.s111, -2
  %16535 = insertelement <4 x i32> undef, i32 %16534, i32 0
  %16536 = shufflevector <4 x i32> %16535, <4 x i32> undef, <4 x i32> zeroinitializer
  %16537 = add nsw <4 x i32> %16536, <i32 0, i32 1, i32 2, i32 3>
  %16538 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %16537, <4 x i32> %90) #11
  %16539 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %16538, <4 x i32> %92) #11
  %16540 = add <4 x i32> %16539, %14763
  %16541 = extractelement <4 x i32> %16540, i32 0
  %16542 = sext i32 %16541 to i64
  %16543 = getelementptr inbounds i16, i16* %input43288, i64 %16542
  %16544 = load i16, i16* %16543, align 2, !tbaa !386
  %16545 = insertelement <4 x i16> undef, i16 %16544, i32 0
  %16546 = extractelement <4 x i32> %16540, i32 1
  %16547 = sext i32 %16546 to i64
  %16548 = getelementptr inbounds i16, i16* %input43288, i64 %16547
  %16549 = load i16, i16* %16548, align 2, !tbaa !386
  %16550 = insertelement <4 x i16> %16545, i16 %16549, i32 1
  %16551 = extractelement <4 x i32> %16540, i32 2
  %16552 = sext i32 %16551 to i64
  %16553 = getelementptr inbounds i16, i16* %input43288, i64 %16552
  %16554 = load i16, i16* %16553, align 2, !tbaa !386
  %16555 = insertelement <4 x i16> %16550, i16 %16554, i32 2
  %16556 = extractelement <4 x i32> %16540, i32 3
  %16557 = sext i32 %16556 to i64
  %16558 = getelementptr inbounds i16, i16* %input43288, i64 %16557
  %16559 = load i16, i16* %16558, align 2, !tbaa !386
  %16560 = insertelement <4 x i16> %16555, i16 %16559, i32 3
  %16561 = insertelement <4 x i32> undef, i32 %blur_x.s0.x.v2.base.s111, i32 0
  %16562 = shufflevector <4 x i32> %16561, <4 x i32> undef, <4 x i32> zeroinitializer
  %16563 = add nsw <4 x i32> %16562, <i32 0, i32 1, i32 2, i32 3>
  %16564 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %16563, <4 x i32> %90) #11
  %16565 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %16564, <4 x i32> %92) #11
  %16566 = add <4 x i32> %16565, %14763
  %16567 = extractelement <4 x i32> %16566, i32 0
  %16568 = sext i32 %16567 to i64
  %16569 = getelementptr inbounds i16, i16* %input43288, i64 %16568
  %16570 = load i16, i16* %16569, align 2, !tbaa !386
  %16571 = insertelement <4 x i16> undef, i16 %16570, i32 0
  %16572 = extractelement <4 x i32> %16566, i32 1
  %16573 = sext i32 %16572 to i64
  %16574 = getelementptr inbounds i16, i16* %input43288, i64 %16573
  %16575 = load i16, i16* %16574, align 2, !tbaa !386
  %16576 = insertelement <4 x i16> %16571, i16 %16575, i32 1
  %16577 = extractelement <4 x i32> %16566, i32 2
  %16578 = sext i32 %16577 to i64
  %16579 = getelementptr inbounds i16, i16* %input43288, i64 %16578
  %16580 = load i16, i16* %16579, align 2, !tbaa !386
  %16581 = insertelement <4 x i16> %16576, i16 %16580, i32 2
  %16582 = extractelement <4 x i32> %16566, i32 3
  %16583 = sext i32 %16582 to i64
  %16584 = getelementptr inbounds i16, i16* %input43288, i64 %16583
  %16585 = load i16, i16* %16584, align 2, !tbaa !386
  %16586 = insertelement <4 x i16> %16581, i16 %16585, i32 3
  %16587 = add nsw i32 %blur_x.s0.x.v2.base.s111, -5
  %16588 = insertelement <4 x i32> undef, i32 %16587, i32 0
  %16589 = shufflevector <4 x i32> %16588, <4 x i32> undef, <4 x i32> zeroinitializer
  %16590 = add nsw <4 x i32> %16589, <i32 0, i32 1, i32 2, i32 3>
  %16591 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %16590, <4 x i32> %90) #11
  %16592 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %16591, <4 x i32> %92) #11
  %16593 = add <4 x i32> %16592, %14763
  %16594 = extractelement <4 x i32> %16593, i32 0
  %16595 = sext i32 %16594 to i64
  %16596 = getelementptr inbounds i16, i16* %input43288, i64 %16595
  %16597 = load i16, i16* %16596, align 2, !tbaa !386
  %16598 = insertelement <4 x i16> undef, i16 %16597, i32 0
  %16599 = extractelement <4 x i32> %16593, i32 1
  %16600 = sext i32 %16599 to i64
  %16601 = getelementptr inbounds i16, i16* %input43288, i64 %16600
  %16602 = load i16, i16* %16601, align 2, !tbaa !386
  %16603 = insertelement <4 x i16> %16598, i16 %16602, i32 1
  %16604 = extractelement <4 x i32> %16593, i32 2
  %16605 = sext i32 %16604 to i64
  %16606 = getelementptr inbounds i16, i16* %input43288, i64 %16605
  %16607 = load i16, i16* %16606, align 2, !tbaa !386
  %16608 = insertelement <4 x i16> %16603, i16 %16607, i32 2
  %16609 = extractelement <4 x i32> %16593, i32 3
  %16610 = sext i32 %16609 to i64
  %16611 = getelementptr inbounds i16, i16* %input43288, i64 %16610
  %16612 = load i16, i16* %16611, align 2, !tbaa !386
  %16613 = insertelement <4 x i16> %16608, i16 %16612, i32 3
  %16614 = add nsw i32 %blur_x.s0.x.v2.base.s111, -1
  %16615 = insertelement <4 x i32> undef, i32 %16614, i32 0
  %16616 = shufflevector <4 x i32> %16615, <4 x i32> undef, <4 x i32> zeroinitializer
  %16617 = add nsw <4 x i32> %16616, <i32 0, i32 1, i32 2, i32 3>
  %16618 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %16617, <4 x i32> %90) #11
  %16619 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %16618, <4 x i32> %92) #11
  %16620 = add <4 x i32> %16619, %14763
  %16621 = extractelement <4 x i32> %16620, i32 0
  %16622 = sext i32 %16621 to i64
  %16623 = getelementptr inbounds i16, i16* %input43288, i64 %16622
  %16624 = load i16, i16* %16623, align 2, !tbaa !386
  %16625 = insertelement <4 x i16> undef, i16 %16624, i32 0
  %16626 = extractelement <4 x i32> %16620, i32 1
  %16627 = sext i32 %16626 to i64
  %16628 = getelementptr inbounds i16, i16* %input43288, i64 %16627
  %16629 = load i16, i16* %16628, align 2, !tbaa !386
  %16630 = insertelement <4 x i16> %16625, i16 %16629, i32 1
  %16631 = extractelement <4 x i32> %16620, i32 2
  %16632 = sext i32 %16631 to i64
  %16633 = getelementptr inbounds i16, i16* %input43288, i64 %16632
  %16634 = load i16, i16* %16633, align 2, !tbaa !386
  %16635 = insertelement <4 x i16> %16630, i16 %16634, i32 2
  %16636 = extractelement <4 x i32> %16620, i32 3
  %16637 = sext i32 %16636 to i64
  %16638 = getelementptr inbounds i16, i16* %input43288, i64 %16637
  %16639 = load i16, i16* %16638, align 2, !tbaa !386
  %16640 = insertelement <4 x i16> %16635, i16 %16639, i32 3
  %16641 = add <4 x i16> %16452, %16354
  %16642 = add <4 x i16> %16641, %16506
  %16643 = add <4 x i16> %16642, %16533
  %16644 = add <4 x i16> %16643, %16613
  %16645 = add <4 x i16> %16506, %16479
  %16646 = add <4 x i16> %16645, %16560
  %16647 = add <4 x i16> %16646, %16586
  %16648 = add <4 x i16> %16647, %16640
  %16649 = shufflevector <4 x i16> %16644, <4 x i16> %16648, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %16650 = zext <8 x i16> %16649 to <8 x i32>
  %16651 = mul nuw <8 x i32> %16650, <i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429>
  %16652 = lshr <8 x i32> %16651, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %16653 = shufflevector <8 x i32> %16652, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %16654 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %16653)
  %16655 = shufflevector <8 x i32> %16652, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %16656 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %16655)
  %16657 = shufflevector <4 x i16> %16654, <4 x i16> %16656, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %16658 = shufflevector <16 x i16> %16657, <16 x i16> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16659 = shufflevector <32 x i16> %16658, <32 x i16> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16660 = sext i32 %blur_x.s0.x.v2.base.s111 to i64
  %16661 = add nsw i64 %16660, %14764
  %16662 = getelementptr inbounds i16, i16* %blur_x61, i64 %16661
  %16663 = bitcast i16* %16662 to <8 x i16>*
  store <8 x i16> %15027, <8 x i16>* %16663, align 2, !tbaa !389
  %16664 = getelementptr inbounds i16, i16* %16662, i64 8
  %16665 = bitcast i16* %16664 to <8 x i16>*
  store <8 x i16> %15260, <8 x i16>* %16665, align 2, !tbaa !389
  %16666 = getelementptr inbounds i16, i16* %16662, i64 16
  %16667 = bitcast i16* %16666 to <8 x i16>*
  store <8 x i16> %15493, <8 x i16>* %16667, align 2, !tbaa !389
  %16668 = getelementptr inbounds i16, i16* %16662, i64 24
  %16669 = bitcast i16* %16668 to <8 x i16>*
  store <8 x i16> %15726, <8 x i16>* %16669, align 2, !tbaa !389
  %16670 = getelementptr inbounds i16, i16* %16662, i64 32
  %16671 = bitcast i16* %16670 to <8 x i16>*
  store <8 x i16> %15959, <8 x i16>* %16671, align 2, !tbaa !389
  %16672 = getelementptr inbounds i16, i16* %16662, i64 40
  %16673 = bitcast i16* %16672 to <8 x i16>*
  store <8 x i16> %16192, <8 x i16>* %16673, align 2, !tbaa !389
  %16674 = getelementptr inbounds i16, i16* %16662, i64 48
  %16675 = bitcast i16* %16674 to <8 x i16>*
  store <8 x i16> %16425, <8 x i16>* %16675, align 2, !tbaa !389
  %16676 = shufflevector <64 x i16> %16659, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %16677 = getelementptr inbounds i16, i16* %16662, i64 56
  %16678 = bitcast i16* %16677 to <8 x i16>*
  store <8 x i16> %16676, <8 x i16>* %16678, align 2, !tbaa !389
  %16679 = add nuw nsw i32 %blur_x.s0.x.x.rebased110, 1
  %.not185 = icmp eq i32 %16679, %t33186
  br i1 %.not185, label %"end for blur_x.s0.x.x.rebased109", label %"for blur_x.s0.x.x.rebased108"

"end for blur_x.s0.x.x.rebased109":               ; preds = %"for blur_x.s0.x.x.rebased108", %"end for blur_x.s0.x.x.rebased102"
  %16680 = add nuw nsw i32 %blur_x.s0.y.rebased90, 1
  %.not184 = icmp eq i32 %16680, %t32885
  br i1 %.not184, label %"end for blur_x.s0.y.rebased89", label %"for blur_x.s0.y.rebased88"

"for blur_x.s0.y.rebased115":                     ; preds = %"for blur_x.s0.y.rebased115.preheader", %"end for blur_x.s0.x.x120"
  %blur_x.s0.y.rebased117 = phi i32 [ %18605, %"end for blur_x.s0.x.x120" ], [ 0, %"for blur_x.s0.y.rebased115.preheader" ]
  %a91 = add nsw i32 %blur_x.s0.y.rebased117, %12604
  %16681 = icmp slt i32 %a91, %b46
  %a101 = select i1 %16681, i32 %a91, i32 %b46
  br i1 %87, label %"for blur_x.s0.x.x119.preheader", label %"end for blur_x.s0.x.x120", !prof !385

"for blur_x.s0.x.x119.preheader":                 ; preds = %"for blur_x.s0.y.rebased115"
  %16682 = add nsw i32 %blur_x.s0.y.rebased117, %12603
  %16683 = and i32 %16682, 7
  %16684 = mul nsw i32 %16683, %a27
  %t344118 = sub nsw i32 %16684, %t29350
  %16685 = icmp sgt i32 %a101, 0
  %16686 = select i1 %16685, i32 %a101, i32 0
  %16687 = mul nsw i32 %16686, %input.stride.149
  %16688 = sub nsw i32 %16687, %input.min.048
  %16689 = insertelement <4 x i32> undef, i32 %16688, i32 0
  %t372 = shufflevector <4 x i32> %16689, <4 x i32> undef, <4 x i32> zeroinitializer
  %16690 = sext i32 %t344118 to i64
  br label %"for blur_x.s0.x.x119"

"end for blur_x.s0.y.rebased116":                 ; preds = %"end for blur_x.s0.x.x120", %"end for blur_x.s0.y.rebased89"
  %.not172 = icmp eq i64 %indvars.iv283, 0
  br i1 %.not172, label %after_bb124, label %"consume blur_x127"

"for blur_x.s0.x.x119":                           ; preds = %"for blur_x.s0.x.x119.preheader", %"for blur_x.s0.x.x119"
  %blur_x.s0.x.x121 = phi i32 [ %18604, %"for blur_x.s0.x.x119" ], [ 0, %"for blur_x.s0.x.x119.preheader" ]
  %16691 = shl nsw i32 %blur_x.s0.x.x121, 6
  %a99 = add nsw i32 %16691, %t29350
  %16692 = icmp slt i32 %a99, %b101
  %blur_x.s0.x.v2.base.s122 = select i1 %16692, i32 %a99, i32 %b101
  %16693 = add nsw i32 %blur_x.s0.x.v2.base.s122, -63
  %16694 = insertelement <4 x i32> undef, i32 %16693, i32 0
  %16695 = shufflevector <4 x i32> %16694, <4 x i32> undef, <4 x i32> zeroinitializer
  %16696 = add nsw <4 x i32> %16695, <i32 0, i32 1, i32 2, i32 3>
  %16697 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %16696, <4 x i32> %90) #11
  %16698 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %16697, <4 x i32> %92) #11
  %16699 = add <4 x i32> %16698, %t372
  %16700 = extractelement <4 x i32> %16699, i32 0
  %16701 = sext i32 %16700 to i64
  %16702 = getelementptr inbounds i16, i16* %input43288, i64 %16701
  %16703 = load i16, i16* %16702, align 2, !tbaa !386
  %16704 = insertelement <4 x i16> undef, i16 %16703, i32 0
  %16705 = extractelement <4 x i32> %16699, i32 1
  %16706 = sext i32 %16705 to i64
  %16707 = getelementptr inbounds i16, i16* %input43288, i64 %16706
  %16708 = load i16, i16* %16707, align 2, !tbaa !386
  %16709 = insertelement <4 x i16> %16704, i16 %16708, i32 1
  %16710 = extractelement <4 x i32> %16699, i32 2
  %16711 = sext i32 %16710 to i64
  %16712 = getelementptr inbounds i16, i16* %input43288, i64 %16711
  %16713 = load i16, i16* %16712, align 2, !tbaa !386
  %16714 = insertelement <4 x i16> %16709, i16 %16713, i32 2
  %16715 = extractelement <4 x i32> %16699, i32 3
  %16716 = sext i32 %16715 to i64
  %16717 = getelementptr inbounds i16, i16* %input43288, i64 %16716
  %16718 = load i16, i16* %16717, align 2, !tbaa !386
  %16719 = insertelement <4 x i16> %16714, i16 %16718, i32 3
  %16720 = add nsw i32 %blur_x.s0.x.v2.base.s122, -59
  %16721 = insertelement <4 x i32> undef, i32 %16720, i32 0
  %16722 = shufflevector <4 x i32> %16721, <4 x i32> undef, <4 x i32> zeroinitializer
  %16723 = add nsw <4 x i32> %16722, <i32 0, i32 1, i32 2, i32 3>
  %16724 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %16723, <4 x i32> %90) #11
  %16725 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %16724, <4 x i32> %92) #11
  %16726 = add <4 x i32> %16725, %t372
  %16727 = extractelement <4 x i32> %16726, i32 0
  %16728 = sext i32 %16727 to i64
  %16729 = getelementptr inbounds i16, i16* %input43288, i64 %16728
  %16730 = load i16, i16* %16729, align 2, !tbaa !386
  %16731 = insertelement <4 x i16> undef, i16 %16730, i32 0
  %16732 = extractelement <4 x i32> %16726, i32 1
  %16733 = sext i32 %16732 to i64
  %16734 = getelementptr inbounds i16, i16* %input43288, i64 %16733
  %16735 = load i16, i16* %16734, align 2, !tbaa !386
  %16736 = insertelement <4 x i16> %16731, i16 %16735, i32 1
  %16737 = extractelement <4 x i32> %16726, i32 2
  %16738 = sext i32 %16737 to i64
  %16739 = getelementptr inbounds i16, i16* %input43288, i64 %16738
  %16740 = load i16, i16* %16739, align 2, !tbaa !386
  %16741 = insertelement <4 x i16> %16736, i16 %16740, i32 2
  %16742 = extractelement <4 x i32> %16726, i32 3
  %16743 = sext i32 %16742 to i64
  %16744 = getelementptr inbounds i16, i16* %input43288, i64 %16743
  %16745 = load i16, i16* %16744, align 2, !tbaa !386
  %16746 = insertelement <4 x i16> %16741, i16 %16745, i32 3
  %16747 = add nsw i32 %blur_x.s0.x.v2.base.s122, -64
  %16748 = insertelement <4 x i32> undef, i32 %16747, i32 0
  %16749 = shufflevector <4 x i32> %16748, <4 x i32> undef, <4 x i32> zeroinitializer
  %16750 = add nsw <4 x i32> %16749, <i32 0, i32 1, i32 2, i32 3>
  %16751 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %16750, <4 x i32> %90) #11
  %16752 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %16751, <4 x i32> %92) #11
  %16753 = add <4 x i32> %16752, %t372
  %16754 = extractelement <4 x i32> %16753, i32 0
  %16755 = sext i32 %16754 to i64
  %16756 = getelementptr inbounds i16, i16* %input43288, i64 %16755
  %16757 = load i16, i16* %16756, align 2, !tbaa !386
  %16758 = insertelement <4 x i16> undef, i16 %16757, i32 0
  %16759 = extractelement <4 x i32> %16753, i32 1
  %16760 = sext i32 %16759 to i64
  %16761 = getelementptr inbounds i16, i16* %input43288, i64 %16760
  %16762 = load i16, i16* %16761, align 2, !tbaa !386
  %16763 = insertelement <4 x i16> %16758, i16 %16762, i32 1
  %16764 = extractelement <4 x i32> %16753, i32 2
  %16765 = sext i32 %16764 to i64
  %16766 = getelementptr inbounds i16, i16* %input43288, i64 %16765
  %16767 = load i16, i16* %16766, align 2, !tbaa !386
  %16768 = insertelement <4 x i16> %16763, i16 %16767, i32 2
  %16769 = extractelement <4 x i32> %16753, i32 3
  %16770 = sext i32 %16769 to i64
  %16771 = getelementptr inbounds i16, i16* %input43288, i64 %16770
  %16772 = load i16, i16* %16771, align 2, !tbaa !386
  %16773 = insertelement <4 x i16> %16768, i16 %16772, i32 3
  %16774 = add nsw i32 %blur_x.s0.x.v2.base.s122, -60
  %16775 = insertelement <4 x i32> undef, i32 %16774, i32 0
  %16776 = shufflevector <4 x i32> %16775, <4 x i32> undef, <4 x i32> zeroinitializer
  %16777 = add nsw <4 x i32> %16776, <i32 0, i32 1, i32 2, i32 3>
  %16778 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %16777, <4 x i32> %90) #11
  %16779 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %16778, <4 x i32> %92) #11
  %16780 = add <4 x i32> %16779, %t372
  %16781 = extractelement <4 x i32> %16780, i32 0
  %16782 = sext i32 %16781 to i64
  %16783 = getelementptr inbounds i16, i16* %input43288, i64 %16782
  %16784 = load i16, i16* %16783, align 2, !tbaa !386
  %16785 = insertelement <4 x i16> undef, i16 %16784, i32 0
  %16786 = extractelement <4 x i32> %16780, i32 1
  %16787 = sext i32 %16786 to i64
  %16788 = getelementptr inbounds i16, i16* %input43288, i64 %16787
  %16789 = load i16, i16* %16788, align 2, !tbaa !386
  %16790 = insertelement <4 x i16> %16785, i16 %16789, i32 1
  %16791 = extractelement <4 x i32> %16780, i32 2
  %16792 = sext i32 %16791 to i64
  %16793 = getelementptr inbounds i16, i16* %input43288, i64 %16792
  %16794 = load i16, i16* %16793, align 2, !tbaa !386
  %16795 = insertelement <4 x i16> %16790, i16 %16794, i32 2
  %16796 = extractelement <4 x i32> %16780, i32 3
  %16797 = sext i32 %16796 to i64
  %16798 = getelementptr inbounds i16, i16* %input43288, i64 %16797
  %16799 = load i16, i16* %16798, align 2, !tbaa !386
  %16800 = insertelement <4 x i16> %16795, i16 %16799, i32 3
  %16801 = add nsw i32 %blur_x.s0.x.v2.base.s122, -62
  %16802 = insertelement <4 x i32> undef, i32 %16801, i32 0
  %16803 = shufflevector <4 x i32> %16802, <4 x i32> undef, <4 x i32> zeroinitializer
  %16804 = add nsw <4 x i32> %16803, <i32 0, i32 1, i32 2, i32 3>
  %16805 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %16804, <4 x i32> %90) #11
  %16806 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %16805, <4 x i32> %92) #11
  %16807 = add <4 x i32> %16806, %t372
  %16808 = extractelement <4 x i32> %16807, i32 0
  %16809 = sext i32 %16808 to i64
  %16810 = getelementptr inbounds i16, i16* %input43288, i64 %16809
  %16811 = load i16, i16* %16810, align 2, !tbaa !386
  %16812 = insertelement <4 x i16> undef, i16 %16811, i32 0
  %16813 = extractelement <4 x i32> %16807, i32 1
  %16814 = sext i32 %16813 to i64
  %16815 = getelementptr inbounds i16, i16* %input43288, i64 %16814
  %16816 = load i16, i16* %16815, align 2, !tbaa !386
  %16817 = insertelement <4 x i16> %16812, i16 %16816, i32 1
  %16818 = extractelement <4 x i32> %16807, i32 2
  %16819 = sext i32 %16818 to i64
  %16820 = getelementptr inbounds i16, i16* %input43288, i64 %16819
  %16821 = load i16, i16* %16820, align 2, !tbaa !386
  %16822 = insertelement <4 x i16> %16817, i16 %16821, i32 2
  %16823 = extractelement <4 x i32> %16807, i32 3
  %16824 = sext i32 %16823 to i64
  %16825 = getelementptr inbounds i16, i16* %input43288, i64 %16824
  %16826 = load i16, i16* %16825, align 2, !tbaa !386
  %16827 = insertelement <4 x i16> %16822, i16 %16826, i32 3
  %16828 = add nsw i32 %blur_x.s0.x.v2.base.s122, -58
  %16829 = insertelement <4 x i32> undef, i32 %16828, i32 0
  %16830 = shufflevector <4 x i32> %16829, <4 x i32> undef, <4 x i32> zeroinitializer
  %16831 = add nsw <4 x i32> %16830, <i32 0, i32 1, i32 2, i32 3>
  %16832 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %16831, <4 x i32> %90) #11
  %16833 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %16832, <4 x i32> %92) #11
  %16834 = add <4 x i32> %16833, %t372
  %16835 = extractelement <4 x i32> %16834, i32 0
  %16836 = sext i32 %16835 to i64
  %16837 = getelementptr inbounds i16, i16* %input43288, i64 %16836
  %16838 = load i16, i16* %16837, align 2, !tbaa !386
  %16839 = insertelement <4 x i16> undef, i16 %16838, i32 0
  %16840 = extractelement <4 x i32> %16834, i32 1
  %16841 = sext i32 %16840 to i64
  %16842 = getelementptr inbounds i16, i16* %input43288, i64 %16841
  %16843 = load i16, i16* %16842, align 2, !tbaa !386
  %16844 = insertelement <4 x i16> %16839, i16 %16843, i32 1
  %16845 = extractelement <4 x i32> %16834, i32 2
  %16846 = sext i32 %16845 to i64
  %16847 = getelementptr inbounds i16, i16* %input43288, i64 %16846
  %16848 = load i16, i16* %16847, align 2, !tbaa !386
  %16849 = insertelement <4 x i16> %16844, i16 %16848, i32 2
  %16850 = extractelement <4 x i32> %16834, i32 3
  %16851 = sext i32 %16850 to i64
  %16852 = getelementptr inbounds i16, i16* %input43288, i64 %16851
  %16853 = load i16, i16* %16852, align 2, !tbaa !386
  %16854 = insertelement <4 x i16> %16849, i16 %16853, i32 3
  %16855 = add nsw i32 %blur_x.s0.x.v2.base.s122, -56
  %16856 = insertelement <4 x i32> undef, i32 %16855, i32 0
  %16857 = shufflevector <4 x i32> %16856, <4 x i32> undef, <4 x i32> zeroinitializer
  %16858 = add nsw <4 x i32> %16857, <i32 0, i32 1, i32 2, i32 3>
  %16859 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %16858, <4 x i32> %90) #11
  %16860 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %16859, <4 x i32> %92) #11
  %16861 = add <4 x i32> %16860, %t372
  %16862 = extractelement <4 x i32> %16861, i32 0
  %16863 = sext i32 %16862 to i64
  %16864 = getelementptr inbounds i16, i16* %input43288, i64 %16863
  %16865 = load i16, i16* %16864, align 2, !tbaa !386
  %16866 = insertelement <4 x i16> undef, i16 %16865, i32 0
  %16867 = extractelement <4 x i32> %16861, i32 1
  %16868 = sext i32 %16867 to i64
  %16869 = getelementptr inbounds i16, i16* %input43288, i64 %16868
  %16870 = load i16, i16* %16869, align 2, !tbaa !386
  %16871 = insertelement <4 x i16> %16866, i16 %16870, i32 1
  %16872 = extractelement <4 x i32> %16861, i32 2
  %16873 = sext i32 %16872 to i64
  %16874 = getelementptr inbounds i16, i16* %input43288, i64 %16873
  %16875 = load i16, i16* %16874, align 2, !tbaa !386
  %16876 = insertelement <4 x i16> %16871, i16 %16875, i32 2
  %16877 = extractelement <4 x i32> %16861, i32 3
  %16878 = sext i32 %16877 to i64
  %16879 = getelementptr inbounds i16, i16* %input43288, i64 %16878
  %16880 = load i16, i16* %16879, align 2, !tbaa !386
  %16881 = insertelement <4 x i16> %16876, i16 %16880, i32 3
  %16882 = add nsw i32 %blur_x.s0.x.v2.base.s122, -61
  %16883 = insertelement <4 x i32> undef, i32 %16882, i32 0
  %16884 = shufflevector <4 x i32> %16883, <4 x i32> undef, <4 x i32> zeroinitializer
  %16885 = add nsw <4 x i32> %16884, <i32 0, i32 1, i32 2, i32 3>
  %16886 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %16885, <4 x i32> %90) #11
  %16887 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %16886, <4 x i32> %92) #11
  %16888 = add <4 x i32> %16887, %t372
  %16889 = extractelement <4 x i32> %16888, i32 0
  %16890 = sext i32 %16889 to i64
  %16891 = getelementptr inbounds i16, i16* %input43288, i64 %16890
  %16892 = load i16, i16* %16891, align 2, !tbaa !386
  %16893 = insertelement <4 x i16> undef, i16 %16892, i32 0
  %16894 = extractelement <4 x i32> %16888, i32 1
  %16895 = sext i32 %16894 to i64
  %16896 = getelementptr inbounds i16, i16* %input43288, i64 %16895
  %16897 = load i16, i16* %16896, align 2, !tbaa !386
  %16898 = insertelement <4 x i16> %16893, i16 %16897, i32 1
  %16899 = extractelement <4 x i32> %16888, i32 2
  %16900 = sext i32 %16899 to i64
  %16901 = getelementptr inbounds i16, i16* %input43288, i64 %16900
  %16902 = load i16, i16* %16901, align 2, !tbaa !386
  %16903 = insertelement <4 x i16> %16898, i16 %16902, i32 2
  %16904 = extractelement <4 x i32> %16888, i32 3
  %16905 = sext i32 %16904 to i64
  %16906 = getelementptr inbounds i16, i16* %input43288, i64 %16905
  %16907 = load i16, i16* %16906, align 2, !tbaa !386
  %16908 = insertelement <4 x i16> %16903, i16 %16907, i32 3
  %16909 = add nsw i32 %blur_x.s0.x.v2.base.s122, -57
  %16910 = insertelement <4 x i32> undef, i32 %16909, i32 0
  %16911 = shufflevector <4 x i32> %16910, <4 x i32> undef, <4 x i32> zeroinitializer
  %16912 = add nsw <4 x i32> %16911, <i32 0, i32 1, i32 2, i32 3>
  %16913 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %16912, <4 x i32> %90) #11
  %16914 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %16913, <4 x i32> %92) #11
  %16915 = add <4 x i32> %16914, %t372
  %16916 = extractelement <4 x i32> %16915, i32 0
  %16917 = sext i32 %16916 to i64
  %16918 = getelementptr inbounds i16, i16* %input43288, i64 %16917
  %16919 = load i16, i16* %16918, align 2, !tbaa !386
  %16920 = insertelement <4 x i16> undef, i16 %16919, i32 0
  %16921 = extractelement <4 x i32> %16915, i32 1
  %16922 = sext i32 %16921 to i64
  %16923 = getelementptr inbounds i16, i16* %input43288, i64 %16922
  %16924 = load i16, i16* %16923, align 2, !tbaa !386
  %16925 = insertelement <4 x i16> %16920, i16 %16924, i32 1
  %16926 = extractelement <4 x i32> %16915, i32 2
  %16927 = sext i32 %16926 to i64
  %16928 = getelementptr inbounds i16, i16* %input43288, i64 %16927
  %16929 = load i16, i16* %16928, align 2, !tbaa !386
  %16930 = insertelement <4 x i16> %16925, i16 %16929, i32 2
  %16931 = extractelement <4 x i32> %16915, i32 3
  %16932 = sext i32 %16931 to i64
  %16933 = getelementptr inbounds i16, i16* %input43288, i64 %16932
  %16934 = load i16, i16* %16933, align 2, !tbaa !386
  %16935 = insertelement <4 x i16> %16930, i16 %16934, i32 3
  %16936 = add <4 x i16> %16773, %16719
  %16937 = add <4 x i16> %16936, %16800
  %16938 = add <4 x i16> %16937, %16827
  %16939 = add <4 x i16> %16938, %16908
  %16940 = add <4 x i16> %16800, %16746
  %16941 = add <4 x i16> %16940, %16854
  %16942 = add <4 x i16> %16941, %16881
  %16943 = add <4 x i16> %16942, %16935
  %16944 = shufflevector <4 x i16> %16939, <4 x i16> %16943, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %16945 = zext <8 x i16> %16944 to <8 x i32>
  %16946 = mul nuw <8 x i32> %16945, <i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429>
  %16947 = lshr <8 x i32> %16946, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %16948 = shufflevector <8 x i32> %16947, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %16949 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %16948)
  %16950 = shufflevector <8 x i32> %16947, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %16951 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %16950)
  %16952 = shufflevector <4 x i16> %16949, <4 x i16> %16951, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %16953 = add nsw i32 %blur_x.s0.x.v2.base.s122, -55
  %16954 = insertelement <4 x i32> undef, i32 %16953, i32 0
  %16955 = shufflevector <4 x i32> %16954, <4 x i32> undef, <4 x i32> zeroinitializer
  %16956 = add nsw <4 x i32> %16955, <i32 0, i32 1, i32 2, i32 3>
  %16957 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %16956, <4 x i32> %90) #11
  %16958 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %16957, <4 x i32> %92) #11
  %16959 = add <4 x i32> %16958, %t372
  %16960 = extractelement <4 x i32> %16959, i32 0
  %16961 = sext i32 %16960 to i64
  %16962 = getelementptr inbounds i16, i16* %input43288, i64 %16961
  %16963 = load i16, i16* %16962, align 2, !tbaa !386
  %16964 = insertelement <4 x i16> undef, i16 %16963, i32 0
  %16965 = extractelement <4 x i32> %16959, i32 1
  %16966 = sext i32 %16965 to i64
  %16967 = getelementptr inbounds i16, i16* %input43288, i64 %16966
  %16968 = load i16, i16* %16967, align 2, !tbaa !386
  %16969 = insertelement <4 x i16> %16964, i16 %16968, i32 1
  %16970 = extractelement <4 x i32> %16959, i32 2
  %16971 = sext i32 %16970 to i64
  %16972 = getelementptr inbounds i16, i16* %input43288, i64 %16971
  %16973 = load i16, i16* %16972, align 2, !tbaa !386
  %16974 = insertelement <4 x i16> %16969, i16 %16973, i32 2
  %16975 = extractelement <4 x i32> %16959, i32 3
  %16976 = sext i32 %16975 to i64
  %16977 = getelementptr inbounds i16, i16* %input43288, i64 %16976
  %16978 = load i16, i16* %16977, align 2, !tbaa !386
  %16979 = insertelement <4 x i16> %16974, i16 %16978, i32 3
  %16980 = add nsw i32 %blur_x.s0.x.v2.base.s122, -51
  %16981 = insertelement <4 x i32> undef, i32 %16980, i32 0
  %16982 = shufflevector <4 x i32> %16981, <4 x i32> undef, <4 x i32> zeroinitializer
  %16983 = add nsw <4 x i32> %16982, <i32 0, i32 1, i32 2, i32 3>
  %16984 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %16983, <4 x i32> %90) #11
  %16985 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %16984, <4 x i32> %92) #11
  %16986 = add <4 x i32> %16985, %t372
  %16987 = extractelement <4 x i32> %16986, i32 0
  %16988 = sext i32 %16987 to i64
  %16989 = getelementptr inbounds i16, i16* %input43288, i64 %16988
  %16990 = load i16, i16* %16989, align 2, !tbaa !386
  %16991 = insertelement <4 x i16> undef, i16 %16990, i32 0
  %16992 = extractelement <4 x i32> %16986, i32 1
  %16993 = sext i32 %16992 to i64
  %16994 = getelementptr inbounds i16, i16* %input43288, i64 %16993
  %16995 = load i16, i16* %16994, align 2, !tbaa !386
  %16996 = insertelement <4 x i16> %16991, i16 %16995, i32 1
  %16997 = extractelement <4 x i32> %16986, i32 2
  %16998 = sext i32 %16997 to i64
  %16999 = getelementptr inbounds i16, i16* %input43288, i64 %16998
  %17000 = load i16, i16* %16999, align 2, !tbaa !386
  %17001 = insertelement <4 x i16> %16996, i16 %17000, i32 2
  %17002 = extractelement <4 x i32> %16986, i32 3
  %17003 = sext i32 %17002 to i64
  %17004 = getelementptr inbounds i16, i16* %input43288, i64 %17003
  %17005 = load i16, i16* %17004, align 2, !tbaa !386
  %17006 = insertelement <4 x i16> %17001, i16 %17005, i32 3
  %17007 = add nsw i32 %blur_x.s0.x.v2.base.s122, -52
  %17008 = insertelement <4 x i32> undef, i32 %17007, i32 0
  %17009 = shufflevector <4 x i32> %17008, <4 x i32> undef, <4 x i32> zeroinitializer
  %17010 = add nsw <4 x i32> %17009, <i32 0, i32 1, i32 2, i32 3>
  %17011 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %17010, <4 x i32> %90) #11
  %17012 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %17011, <4 x i32> %92) #11
  %17013 = add <4 x i32> %17012, %t372
  %17014 = extractelement <4 x i32> %17013, i32 0
  %17015 = sext i32 %17014 to i64
  %17016 = getelementptr inbounds i16, i16* %input43288, i64 %17015
  %17017 = load i16, i16* %17016, align 2, !tbaa !386
  %17018 = insertelement <4 x i16> undef, i16 %17017, i32 0
  %17019 = extractelement <4 x i32> %17013, i32 1
  %17020 = sext i32 %17019 to i64
  %17021 = getelementptr inbounds i16, i16* %input43288, i64 %17020
  %17022 = load i16, i16* %17021, align 2, !tbaa !386
  %17023 = insertelement <4 x i16> %17018, i16 %17022, i32 1
  %17024 = extractelement <4 x i32> %17013, i32 2
  %17025 = sext i32 %17024 to i64
  %17026 = getelementptr inbounds i16, i16* %input43288, i64 %17025
  %17027 = load i16, i16* %17026, align 2, !tbaa !386
  %17028 = insertelement <4 x i16> %17023, i16 %17027, i32 2
  %17029 = extractelement <4 x i32> %17013, i32 3
  %17030 = sext i32 %17029 to i64
  %17031 = getelementptr inbounds i16, i16* %input43288, i64 %17030
  %17032 = load i16, i16* %17031, align 2, !tbaa !386
  %17033 = insertelement <4 x i16> %17028, i16 %17032, i32 3
  %17034 = add nsw i32 %blur_x.s0.x.v2.base.s122, -54
  %17035 = insertelement <4 x i32> undef, i32 %17034, i32 0
  %17036 = shufflevector <4 x i32> %17035, <4 x i32> undef, <4 x i32> zeroinitializer
  %17037 = add nsw <4 x i32> %17036, <i32 0, i32 1, i32 2, i32 3>
  %17038 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %17037, <4 x i32> %90) #11
  %17039 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %17038, <4 x i32> %92) #11
  %17040 = add <4 x i32> %17039, %t372
  %17041 = extractelement <4 x i32> %17040, i32 0
  %17042 = sext i32 %17041 to i64
  %17043 = getelementptr inbounds i16, i16* %input43288, i64 %17042
  %17044 = load i16, i16* %17043, align 2, !tbaa !386
  %17045 = insertelement <4 x i16> undef, i16 %17044, i32 0
  %17046 = extractelement <4 x i32> %17040, i32 1
  %17047 = sext i32 %17046 to i64
  %17048 = getelementptr inbounds i16, i16* %input43288, i64 %17047
  %17049 = load i16, i16* %17048, align 2, !tbaa !386
  %17050 = insertelement <4 x i16> %17045, i16 %17049, i32 1
  %17051 = extractelement <4 x i32> %17040, i32 2
  %17052 = sext i32 %17051 to i64
  %17053 = getelementptr inbounds i16, i16* %input43288, i64 %17052
  %17054 = load i16, i16* %17053, align 2, !tbaa !386
  %17055 = insertelement <4 x i16> %17050, i16 %17054, i32 2
  %17056 = extractelement <4 x i32> %17040, i32 3
  %17057 = sext i32 %17056 to i64
  %17058 = getelementptr inbounds i16, i16* %input43288, i64 %17057
  %17059 = load i16, i16* %17058, align 2, !tbaa !386
  %17060 = insertelement <4 x i16> %17055, i16 %17059, i32 3
  %17061 = add nsw i32 %blur_x.s0.x.v2.base.s122, -50
  %17062 = insertelement <4 x i32> undef, i32 %17061, i32 0
  %17063 = shufflevector <4 x i32> %17062, <4 x i32> undef, <4 x i32> zeroinitializer
  %17064 = add nsw <4 x i32> %17063, <i32 0, i32 1, i32 2, i32 3>
  %17065 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %17064, <4 x i32> %90) #11
  %17066 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %17065, <4 x i32> %92) #11
  %17067 = add <4 x i32> %17066, %t372
  %17068 = extractelement <4 x i32> %17067, i32 0
  %17069 = sext i32 %17068 to i64
  %17070 = getelementptr inbounds i16, i16* %input43288, i64 %17069
  %17071 = load i16, i16* %17070, align 2, !tbaa !386
  %17072 = insertelement <4 x i16> undef, i16 %17071, i32 0
  %17073 = extractelement <4 x i32> %17067, i32 1
  %17074 = sext i32 %17073 to i64
  %17075 = getelementptr inbounds i16, i16* %input43288, i64 %17074
  %17076 = load i16, i16* %17075, align 2, !tbaa !386
  %17077 = insertelement <4 x i16> %17072, i16 %17076, i32 1
  %17078 = extractelement <4 x i32> %17067, i32 2
  %17079 = sext i32 %17078 to i64
  %17080 = getelementptr inbounds i16, i16* %input43288, i64 %17079
  %17081 = load i16, i16* %17080, align 2, !tbaa !386
  %17082 = insertelement <4 x i16> %17077, i16 %17081, i32 2
  %17083 = extractelement <4 x i32> %17067, i32 3
  %17084 = sext i32 %17083 to i64
  %17085 = getelementptr inbounds i16, i16* %input43288, i64 %17084
  %17086 = load i16, i16* %17085, align 2, !tbaa !386
  %17087 = insertelement <4 x i16> %17082, i16 %17086, i32 3
  %17088 = add nsw i32 %blur_x.s0.x.v2.base.s122, -48
  %17089 = insertelement <4 x i32> undef, i32 %17088, i32 0
  %17090 = shufflevector <4 x i32> %17089, <4 x i32> undef, <4 x i32> zeroinitializer
  %17091 = add nsw <4 x i32> %17090, <i32 0, i32 1, i32 2, i32 3>
  %17092 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %17091, <4 x i32> %90) #11
  %17093 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %17092, <4 x i32> %92) #11
  %17094 = add <4 x i32> %17093, %t372
  %17095 = extractelement <4 x i32> %17094, i32 0
  %17096 = sext i32 %17095 to i64
  %17097 = getelementptr inbounds i16, i16* %input43288, i64 %17096
  %17098 = load i16, i16* %17097, align 2, !tbaa !386
  %17099 = insertelement <4 x i16> undef, i16 %17098, i32 0
  %17100 = extractelement <4 x i32> %17094, i32 1
  %17101 = sext i32 %17100 to i64
  %17102 = getelementptr inbounds i16, i16* %input43288, i64 %17101
  %17103 = load i16, i16* %17102, align 2, !tbaa !386
  %17104 = insertelement <4 x i16> %17099, i16 %17103, i32 1
  %17105 = extractelement <4 x i32> %17094, i32 2
  %17106 = sext i32 %17105 to i64
  %17107 = getelementptr inbounds i16, i16* %input43288, i64 %17106
  %17108 = load i16, i16* %17107, align 2, !tbaa !386
  %17109 = insertelement <4 x i16> %17104, i16 %17108, i32 2
  %17110 = extractelement <4 x i32> %17094, i32 3
  %17111 = sext i32 %17110 to i64
  %17112 = getelementptr inbounds i16, i16* %input43288, i64 %17111
  %17113 = load i16, i16* %17112, align 2, !tbaa !386
  %17114 = insertelement <4 x i16> %17109, i16 %17113, i32 3
  %17115 = add nsw i32 %blur_x.s0.x.v2.base.s122, -53
  %17116 = insertelement <4 x i32> undef, i32 %17115, i32 0
  %17117 = shufflevector <4 x i32> %17116, <4 x i32> undef, <4 x i32> zeroinitializer
  %17118 = add nsw <4 x i32> %17117, <i32 0, i32 1, i32 2, i32 3>
  %17119 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %17118, <4 x i32> %90) #11
  %17120 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %17119, <4 x i32> %92) #11
  %17121 = add <4 x i32> %17120, %t372
  %17122 = extractelement <4 x i32> %17121, i32 0
  %17123 = sext i32 %17122 to i64
  %17124 = getelementptr inbounds i16, i16* %input43288, i64 %17123
  %17125 = load i16, i16* %17124, align 2, !tbaa !386
  %17126 = insertelement <4 x i16> undef, i16 %17125, i32 0
  %17127 = extractelement <4 x i32> %17121, i32 1
  %17128 = sext i32 %17127 to i64
  %17129 = getelementptr inbounds i16, i16* %input43288, i64 %17128
  %17130 = load i16, i16* %17129, align 2, !tbaa !386
  %17131 = insertelement <4 x i16> %17126, i16 %17130, i32 1
  %17132 = extractelement <4 x i32> %17121, i32 2
  %17133 = sext i32 %17132 to i64
  %17134 = getelementptr inbounds i16, i16* %input43288, i64 %17133
  %17135 = load i16, i16* %17134, align 2, !tbaa !386
  %17136 = insertelement <4 x i16> %17131, i16 %17135, i32 2
  %17137 = extractelement <4 x i32> %17121, i32 3
  %17138 = sext i32 %17137 to i64
  %17139 = getelementptr inbounds i16, i16* %input43288, i64 %17138
  %17140 = load i16, i16* %17139, align 2, !tbaa !386
  %17141 = insertelement <4 x i16> %17136, i16 %17140, i32 3
  %17142 = add nsw i32 %blur_x.s0.x.v2.base.s122, -49
  %17143 = insertelement <4 x i32> undef, i32 %17142, i32 0
  %17144 = shufflevector <4 x i32> %17143, <4 x i32> undef, <4 x i32> zeroinitializer
  %17145 = add nsw <4 x i32> %17144, <i32 0, i32 1, i32 2, i32 3>
  %17146 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %17145, <4 x i32> %90) #11
  %17147 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %17146, <4 x i32> %92) #11
  %17148 = add <4 x i32> %17147, %t372
  %17149 = extractelement <4 x i32> %17148, i32 0
  %17150 = sext i32 %17149 to i64
  %17151 = getelementptr inbounds i16, i16* %input43288, i64 %17150
  %17152 = load i16, i16* %17151, align 2, !tbaa !386
  %17153 = insertelement <4 x i16> undef, i16 %17152, i32 0
  %17154 = extractelement <4 x i32> %17148, i32 1
  %17155 = sext i32 %17154 to i64
  %17156 = getelementptr inbounds i16, i16* %input43288, i64 %17155
  %17157 = load i16, i16* %17156, align 2, !tbaa !386
  %17158 = insertelement <4 x i16> %17153, i16 %17157, i32 1
  %17159 = extractelement <4 x i32> %17148, i32 2
  %17160 = sext i32 %17159 to i64
  %17161 = getelementptr inbounds i16, i16* %input43288, i64 %17160
  %17162 = load i16, i16* %17161, align 2, !tbaa !386
  %17163 = insertelement <4 x i16> %17158, i16 %17162, i32 2
  %17164 = extractelement <4 x i32> %17148, i32 3
  %17165 = sext i32 %17164 to i64
  %17166 = getelementptr inbounds i16, i16* %input43288, i64 %17165
  %17167 = load i16, i16* %17166, align 2, !tbaa !386
  %17168 = insertelement <4 x i16> %17163, i16 %17167, i32 3
  %17169 = add <4 x i16> %16979, %16881
  %17170 = add <4 x i16> %17169, %17033
  %17171 = add <4 x i16> %17170, %17060
  %17172 = add <4 x i16> %17171, %17141
  %17173 = add <4 x i16> %17033, %17006
  %17174 = add <4 x i16> %17173, %17087
  %17175 = add <4 x i16> %17174, %17114
  %17176 = add <4 x i16> %17175, %17168
  %17177 = shufflevector <4 x i16> %17172, <4 x i16> %17176, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %17178 = zext <8 x i16> %17177 to <8 x i32>
  %17179 = mul nuw <8 x i32> %17178, <i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429>
  %17180 = lshr <8 x i32> %17179, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %17181 = shufflevector <8 x i32> %17180, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %17182 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %17181)
  %17183 = shufflevector <8 x i32> %17180, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %17184 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %17183)
  %17185 = shufflevector <4 x i16> %17182, <4 x i16> %17184, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %17186 = add nsw i32 %blur_x.s0.x.v2.base.s122, -47
  %17187 = insertelement <4 x i32> undef, i32 %17186, i32 0
  %17188 = shufflevector <4 x i32> %17187, <4 x i32> undef, <4 x i32> zeroinitializer
  %17189 = add nsw <4 x i32> %17188, <i32 0, i32 1, i32 2, i32 3>
  %17190 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %17189, <4 x i32> %90) #11
  %17191 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %17190, <4 x i32> %92) #11
  %17192 = add <4 x i32> %17191, %t372
  %17193 = extractelement <4 x i32> %17192, i32 0
  %17194 = sext i32 %17193 to i64
  %17195 = getelementptr inbounds i16, i16* %input43288, i64 %17194
  %17196 = load i16, i16* %17195, align 2, !tbaa !386
  %17197 = insertelement <4 x i16> undef, i16 %17196, i32 0
  %17198 = extractelement <4 x i32> %17192, i32 1
  %17199 = sext i32 %17198 to i64
  %17200 = getelementptr inbounds i16, i16* %input43288, i64 %17199
  %17201 = load i16, i16* %17200, align 2, !tbaa !386
  %17202 = insertelement <4 x i16> %17197, i16 %17201, i32 1
  %17203 = extractelement <4 x i32> %17192, i32 2
  %17204 = sext i32 %17203 to i64
  %17205 = getelementptr inbounds i16, i16* %input43288, i64 %17204
  %17206 = load i16, i16* %17205, align 2, !tbaa !386
  %17207 = insertelement <4 x i16> %17202, i16 %17206, i32 2
  %17208 = extractelement <4 x i32> %17192, i32 3
  %17209 = sext i32 %17208 to i64
  %17210 = getelementptr inbounds i16, i16* %input43288, i64 %17209
  %17211 = load i16, i16* %17210, align 2, !tbaa !386
  %17212 = insertelement <4 x i16> %17207, i16 %17211, i32 3
  %17213 = add nsw i32 %blur_x.s0.x.v2.base.s122, -43
  %17214 = insertelement <4 x i32> undef, i32 %17213, i32 0
  %17215 = shufflevector <4 x i32> %17214, <4 x i32> undef, <4 x i32> zeroinitializer
  %17216 = add nsw <4 x i32> %17215, <i32 0, i32 1, i32 2, i32 3>
  %17217 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %17216, <4 x i32> %90) #11
  %17218 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %17217, <4 x i32> %92) #11
  %17219 = add <4 x i32> %17218, %t372
  %17220 = extractelement <4 x i32> %17219, i32 0
  %17221 = sext i32 %17220 to i64
  %17222 = getelementptr inbounds i16, i16* %input43288, i64 %17221
  %17223 = load i16, i16* %17222, align 2, !tbaa !386
  %17224 = insertelement <4 x i16> undef, i16 %17223, i32 0
  %17225 = extractelement <4 x i32> %17219, i32 1
  %17226 = sext i32 %17225 to i64
  %17227 = getelementptr inbounds i16, i16* %input43288, i64 %17226
  %17228 = load i16, i16* %17227, align 2, !tbaa !386
  %17229 = insertelement <4 x i16> %17224, i16 %17228, i32 1
  %17230 = extractelement <4 x i32> %17219, i32 2
  %17231 = sext i32 %17230 to i64
  %17232 = getelementptr inbounds i16, i16* %input43288, i64 %17231
  %17233 = load i16, i16* %17232, align 2, !tbaa !386
  %17234 = insertelement <4 x i16> %17229, i16 %17233, i32 2
  %17235 = extractelement <4 x i32> %17219, i32 3
  %17236 = sext i32 %17235 to i64
  %17237 = getelementptr inbounds i16, i16* %input43288, i64 %17236
  %17238 = load i16, i16* %17237, align 2, !tbaa !386
  %17239 = insertelement <4 x i16> %17234, i16 %17238, i32 3
  %17240 = add nsw i32 %blur_x.s0.x.v2.base.s122, -44
  %17241 = insertelement <4 x i32> undef, i32 %17240, i32 0
  %17242 = shufflevector <4 x i32> %17241, <4 x i32> undef, <4 x i32> zeroinitializer
  %17243 = add nsw <4 x i32> %17242, <i32 0, i32 1, i32 2, i32 3>
  %17244 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %17243, <4 x i32> %90) #11
  %17245 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %17244, <4 x i32> %92) #11
  %17246 = add <4 x i32> %17245, %t372
  %17247 = extractelement <4 x i32> %17246, i32 0
  %17248 = sext i32 %17247 to i64
  %17249 = getelementptr inbounds i16, i16* %input43288, i64 %17248
  %17250 = load i16, i16* %17249, align 2, !tbaa !386
  %17251 = insertelement <4 x i16> undef, i16 %17250, i32 0
  %17252 = extractelement <4 x i32> %17246, i32 1
  %17253 = sext i32 %17252 to i64
  %17254 = getelementptr inbounds i16, i16* %input43288, i64 %17253
  %17255 = load i16, i16* %17254, align 2, !tbaa !386
  %17256 = insertelement <4 x i16> %17251, i16 %17255, i32 1
  %17257 = extractelement <4 x i32> %17246, i32 2
  %17258 = sext i32 %17257 to i64
  %17259 = getelementptr inbounds i16, i16* %input43288, i64 %17258
  %17260 = load i16, i16* %17259, align 2, !tbaa !386
  %17261 = insertelement <4 x i16> %17256, i16 %17260, i32 2
  %17262 = extractelement <4 x i32> %17246, i32 3
  %17263 = sext i32 %17262 to i64
  %17264 = getelementptr inbounds i16, i16* %input43288, i64 %17263
  %17265 = load i16, i16* %17264, align 2, !tbaa !386
  %17266 = insertelement <4 x i16> %17261, i16 %17265, i32 3
  %17267 = add nsw i32 %blur_x.s0.x.v2.base.s122, -46
  %17268 = insertelement <4 x i32> undef, i32 %17267, i32 0
  %17269 = shufflevector <4 x i32> %17268, <4 x i32> undef, <4 x i32> zeroinitializer
  %17270 = add nsw <4 x i32> %17269, <i32 0, i32 1, i32 2, i32 3>
  %17271 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %17270, <4 x i32> %90) #11
  %17272 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %17271, <4 x i32> %92) #11
  %17273 = add <4 x i32> %17272, %t372
  %17274 = extractelement <4 x i32> %17273, i32 0
  %17275 = sext i32 %17274 to i64
  %17276 = getelementptr inbounds i16, i16* %input43288, i64 %17275
  %17277 = load i16, i16* %17276, align 2, !tbaa !386
  %17278 = insertelement <4 x i16> undef, i16 %17277, i32 0
  %17279 = extractelement <4 x i32> %17273, i32 1
  %17280 = sext i32 %17279 to i64
  %17281 = getelementptr inbounds i16, i16* %input43288, i64 %17280
  %17282 = load i16, i16* %17281, align 2, !tbaa !386
  %17283 = insertelement <4 x i16> %17278, i16 %17282, i32 1
  %17284 = extractelement <4 x i32> %17273, i32 2
  %17285 = sext i32 %17284 to i64
  %17286 = getelementptr inbounds i16, i16* %input43288, i64 %17285
  %17287 = load i16, i16* %17286, align 2, !tbaa !386
  %17288 = insertelement <4 x i16> %17283, i16 %17287, i32 2
  %17289 = extractelement <4 x i32> %17273, i32 3
  %17290 = sext i32 %17289 to i64
  %17291 = getelementptr inbounds i16, i16* %input43288, i64 %17290
  %17292 = load i16, i16* %17291, align 2, !tbaa !386
  %17293 = insertelement <4 x i16> %17288, i16 %17292, i32 3
  %17294 = add nsw i32 %blur_x.s0.x.v2.base.s122, -42
  %17295 = insertelement <4 x i32> undef, i32 %17294, i32 0
  %17296 = shufflevector <4 x i32> %17295, <4 x i32> undef, <4 x i32> zeroinitializer
  %17297 = add nsw <4 x i32> %17296, <i32 0, i32 1, i32 2, i32 3>
  %17298 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %17297, <4 x i32> %90) #11
  %17299 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %17298, <4 x i32> %92) #11
  %17300 = add <4 x i32> %17299, %t372
  %17301 = extractelement <4 x i32> %17300, i32 0
  %17302 = sext i32 %17301 to i64
  %17303 = getelementptr inbounds i16, i16* %input43288, i64 %17302
  %17304 = load i16, i16* %17303, align 2, !tbaa !386
  %17305 = insertelement <4 x i16> undef, i16 %17304, i32 0
  %17306 = extractelement <4 x i32> %17300, i32 1
  %17307 = sext i32 %17306 to i64
  %17308 = getelementptr inbounds i16, i16* %input43288, i64 %17307
  %17309 = load i16, i16* %17308, align 2, !tbaa !386
  %17310 = insertelement <4 x i16> %17305, i16 %17309, i32 1
  %17311 = extractelement <4 x i32> %17300, i32 2
  %17312 = sext i32 %17311 to i64
  %17313 = getelementptr inbounds i16, i16* %input43288, i64 %17312
  %17314 = load i16, i16* %17313, align 2, !tbaa !386
  %17315 = insertelement <4 x i16> %17310, i16 %17314, i32 2
  %17316 = extractelement <4 x i32> %17300, i32 3
  %17317 = sext i32 %17316 to i64
  %17318 = getelementptr inbounds i16, i16* %input43288, i64 %17317
  %17319 = load i16, i16* %17318, align 2, !tbaa !386
  %17320 = insertelement <4 x i16> %17315, i16 %17319, i32 3
  %17321 = add nsw i32 %blur_x.s0.x.v2.base.s122, -40
  %17322 = insertelement <4 x i32> undef, i32 %17321, i32 0
  %17323 = shufflevector <4 x i32> %17322, <4 x i32> undef, <4 x i32> zeroinitializer
  %17324 = add nsw <4 x i32> %17323, <i32 0, i32 1, i32 2, i32 3>
  %17325 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %17324, <4 x i32> %90) #11
  %17326 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %17325, <4 x i32> %92) #11
  %17327 = add <4 x i32> %17326, %t372
  %17328 = extractelement <4 x i32> %17327, i32 0
  %17329 = sext i32 %17328 to i64
  %17330 = getelementptr inbounds i16, i16* %input43288, i64 %17329
  %17331 = load i16, i16* %17330, align 2, !tbaa !386
  %17332 = insertelement <4 x i16> undef, i16 %17331, i32 0
  %17333 = extractelement <4 x i32> %17327, i32 1
  %17334 = sext i32 %17333 to i64
  %17335 = getelementptr inbounds i16, i16* %input43288, i64 %17334
  %17336 = load i16, i16* %17335, align 2, !tbaa !386
  %17337 = insertelement <4 x i16> %17332, i16 %17336, i32 1
  %17338 = extractelement <4 x i32> %17327, i32 2
  %17339 = sext i32 %17338 to i64
  %17340 = getelementptr inbounds i16, i16* %input43288, i64 %17339
  %17341 = load i16, i16* %17340, align 2, !tbaa !386
  %17342 = insertelement <4 x i16> %17337, i16 %17341, i32 2
  %17343 = extractelement <4 x i32> %17327, i32 3
  %17344 = sext i32 %17343 to i64
  %17345 = getelementptr inbounds i16, i16* %input43288, i64 %17344
  %17346 = load i16, i16* %17345, align 2, !tbaa !386
  %17347 = insertelement <4 x i16> %17342, i16 %17346, i32 3
  %17348 = add nsw i32 %blur_x.s0.x.v2.base.s122, -45
  %17349 = insertelement <4 x i32> undef, i32 %17348, i32 0
  %17350 = shufflevector <4 x i32> %17349, <4 x i32> undef, <4 x i32> zeroinitializer
  %17351 = add nsw <4 x i32> %17350, <i32 0, i32 1, i32 2, i32 3>
  %17352 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %17351, <4 x i32> %90) #11
  %17353 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %17352, <4 x i32> %92) #11
  %17354 = add <4 x i32> %17353, %t372
  %17355 = extractelement <4 x i32> %17354, i32 0
  %17356 = sext i32 %17355 to i64
  %17357 = getelementptr inbounds i16, i16* %input43288, i64 %17356
  %17358 = load i16, i16* %17357, align 2, !tbaa !386
  %17359 = insertelement <4 x i16> undef, i16 %17358, i32 0
  %17360 = extractelement <4 x i32> %17354, i32 1
  %17361 = sext i32 %17360 to i64
  %17362 = getelementptr inbounds i16, i16* %input43288, i64 %17361
  %17363 = load i16, i16* %17362, align 2, !tbaa !386
  %17364 = insertelement <4 x i16> %17359, i16 %17363, i32 1
  %17365 = extractelement <4 x i32> %17354, i32 2
  %17366 = sext i32 %17365 to i64
  %17367 = getelementptr inbounds i16, i16* %input43288, i64 %17366
  %17368 = load i16, i16* %17367, align 2, !tbaa !386
  %17369 = insertelement <4 x i16> %17364, i16 %17368, i32 2
  %17370 = extractelement <4 x i32> %17354, i32 3
  %17371 = sext i32 %17370 to i64
  %17372 = getelementptr inbounds i16, i16* %input43288, i64 %17371
  %17373 = load i16, i16* %17372, align 2, !tbaa !386
  %17374 = insertelement <4 x i16> %17369, i16 %17373, i32 3
  %17375 = add nsw i32 %blur_x.s0.x.v2.base.s122, -41
  %17376 = insertelement <4 x i32> undef, i32 %17375, i32 0
  %17377 = shufflevector <4 x i32> %17376, <4 x i32> undef, <4 x i32> zeroinitializer
  %17378 = add nsw <4 x i32> %17377, <i32 0, i32 1, i32 2, i32 3>
  %17379 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %17378, <4 x i32> %90) #11
  %17380 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %17379, <4 x i32> %92) #11
  %17381 = add <4 x i32> %17380, %t372
  %17382 = extractelement <4 x i32> %17381, i32 0
  %17383 = sext i32 %17382 to i64
  %17384 = getelementptr inbounds i16, i16* %input43288, i64 %17383
  %17385 = load i16, i16* %17384, align 2, !tbaa !386
  %17386 = insertelement <4 x i16> undef, i16 %17385, i32 0
  %17387 = extractelement <4 x i32> %17381, i32 1
  %17388 = sext i32 %17387 to i64
  %17389 = getelementptr inbounds i16, i16* %input43288, i64 %17388
  %17390 = load i16, i16* %17389, align 2, !tbaa !386
  %17391 = insertelement <4 x i16> %17386, i16 %17390, i32 1
  %17392 = extractelement <4 x i32> %17381, i32 2
  %17393 = sext i32 %17392 to i64
  %17394 = getelementptr inbounds i16, i16* %input43288, i64 %17393
  %17395 = load i16, i16* %17394, align 2, !tbaa !386
  %17396 = insertelement <4 x i16> %17391, i16 %17395, i32 2
  %17397 = extractelement <4 x i32> %17381, i32 3
  %17398 = sext i32 %17397 to i64
  %17399 = getelementptr inbounds i16, i16* %input43288, i64 %17398
  %17400 = load i16, i16* %17399, align 2, !tbaa !386
  %17401 = insertelement <4 x i16> %17396, i16 %17400, i32 3
  %17402 = add <4 x i16> %17212, %17114
  %17403 = add <4 x i16> %17402, %17266
  %17404 = add <4 x i16> %17403, %17293
  %17405 = add <4 x i16> %17404, %17374
  %17406 = add <4 x i16> %17266, %17239
  %17407 = add <4 x i16> %17406, %17320
  %17408 = add <4 x i16> %17407, %17347
  %17409 = add <4 x i16> %17408, %17401
  %17410 = shufflevector <4 x i16> %17405, <4 x i16> %17409, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %17411 = zext <8 x i16> %17410 to <8 x i32>
  %17412 = mul nuw <8 x i32> %17411, <i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429>
  %17413 = lshr <8 x i32> %17412, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %17414 = shufflevector <8 x i32> %17413, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %17415 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %17414)
  %17416 = shufflevector <8 x i32> %17413, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %17417 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %17416)
  %17418 = shufflevector <4 x i16> %17415, <4 x i16> %17417, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %17419 = add nsw i32 %blur_x.s0.x.v2.base.s122, -39
  %17420 = insertelement <4 x i32> undef, i32 %17419, i32 0
  %17421 = shufflevector <4 x i32> %17420, <4 x i32> undef, <4 x i32> zeroinitializer
  %17422 = add nsw <4 x i32> %17421, <i32 0, i32 1, i32 2, i32 3>
  %17423 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %17422, <4 x i32> %90) #11
  %17424 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %17423, <4 x i32> %92) #11
  %17425 = add <4 x i32> %17424, %t372
  %17426 = extractelement <4 x i32> %17425, i32 0
  %17427 = sext i32 %17426 to i64
  %17428 = getelementptr inbounds i16, i16* %input43288, i64 %17427
  %17429 = load i16, i16* %17428, align 2, !tbaa !386
  %17430 = insertelement <4 x i16> undef, i16 %17429, i32 0
  %17431 = extractelement <4 x i32> %17425, i32 1
  %17432 = sext i32 %17431 to i64
  %17433 = getelementptr inbounds i16, i16* %input43288, i64 %17432
  %17434 = load i16, i16* %17433, align 2, !tbaa !386
  %17435 = insertelement <4 x i16> %17430, i16 %17434, i32 1
  %17436 = extractelement <4 x i32> %17425, i32 2
  %17437 = sext i32 %17436 to i64
  %17438 = getelementptr inbounds i16, i16* %input43288, i64 %17437
  %17439 = load i16, i16* %17438, align 2, !tbaa !386
  %17440 = insertelement <4 x i16> %17435, i16 %17439, i32 2
  %17441 = extractelement <4 x i32> %17425, i32 3
  %17442 = sext i32 %17441 to i64
  %17443 = getelementptr inbounds i16, i16* %input43288, i64 %17442
  %17444 = load i16, i16* %17443, align 2, !tbaa !386
  %17445 = insertelement <4 x i16> %17440, i16 %17444, i32 3
  %17446 = add nsw i32 %blur_x.s0.x.v2.base.s122, -35
  %17447 = insertelement <4 x i32> undef, i32 %17446, i32 0
  %17448 = shufflevector <4 x i32> %17447, <4 x i32> undef, <4 x i32> zeroinitializer
  %17449 = add nsw <4 x i32> %17448, <i32 0, i32 1, i32 2, i32 3>
  %17450 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %17449, <4 x i32> %90) #11
  %17451 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %17450, <4 x i32> %92) #11
  %17452 = add <4 x i32> %17451, %t372
  %17453 = extractelement <4 x i32> %17452, i32 0
  %17454 = sext i32 %17453 to i64
  %17455 = getelementptr inbounds i16, i16* %input43288, i64 %17454
  %17456 = load i16, i16* %17455, align 2, !tbaa !386
  %17457 = insertelement <4 x i16> undef, i16 %17456, i32 0
  %17458 = extractelement <4 x i32> %17452, i32 1
  %17459 = sext i32 %17458 to i64
  %17460 = getelementptr inbounds i16, i16* %input43288, i64 %17459
  %17461 = load i16, i16* %17460, align 2, !tbaa !386
  %17462 = insertelement <4 x i16> %17457, i16 %17461, i32 1
  %17463 = extractelement <4 x i32> %17452, i32 2
  %17464 = sext i32 %17463 to i64
  %17465 = getelementptr inbounds i16, i16* %input43288, i64 %17464
  %17466 = load i16, i16* %17465, align 2, !tbaa !386
  %17467 = insertelement <4 x i16> %17462, i16 %17466, i32 2
  %17468 = extractelement <4 x i32> %17452, i32 3
  %17469 = sext i32 %17468 to i64
  %17470 = getelementptr inbounds i16, i16* %input43288, i64 %17469
  %17471 = load i16, i16* %17470, align 2, !tbaa !386
  %17472 = insertelement <4 x i16> %17467, i16 %17471, i32 3
  %17473 = add nsw i32 %blur_x.s0.x.v2.base.s122, -36
  %17474 = insertelement <4 x i32> undef, i32 %17473, i32 0
  %17475 = shufflevector <4 x i32> %17474, <4 x i32> undef, <4 x i32> zeroinitializer
  %17476 = add nsw <4 x i32> %17475, <i32 0, i32 1, i32 2, i32 3>
  %17477 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %17476, <4 x i32> %90) #11
  %17478 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %17477, <4 x i32> %92) #11
  %17479 = add <4 x i32> %17478, %t372
  %17480 = extractelement <4 x i32> %17479, i32 0
  %17481 = sext i32 %17480 to i64
  %17482 = getelementptr inbounds i16, i16* %input43288, i64 %17481
  %17483 = load i16, i16* %17482, align 2, !tbaa !386
  %17484 = insertelement <4 x i16> undef, i16 %17483, i32 0
  %17485 = extractelement <4 x i32> %17479, i32 1
  %17486 = sext i32 %17485 to i64
  %17487 = getelementptr inbounds i16, i16* %input43288, i64 %17486
  %17488 = load i16, i16* %17487, align 2, !tbaa !386
  %17489 = insertelement <4 x i16> %17484, i16 %17488, i32 1
  %17490 = extractelement <4 x i32> %17479, i32 2
  %17491 = sext i32 %17490 to i64
  %17492 = getelementptr inbounds i16, i16* %input43288, i64 %17491
  %17493 = load i16, i16* %17492, align 2, !tbaa !386
  %17494 = insertelement <4 x i16> %17489, i16 %17493, i32 2
  %17495 = extractelement <4 x i32> %17479, i32 3
  %17496 = sext i32 %17495 to i64
  %17497 = getelementptr inbounds i16, i16* %input43288, i64 %17496
  %17498 = load i16, i16* %17497, align 2, !tbaa !386
  %17499 = insertelement <4 x i16> %17494, i16 %17498, i32 3
  %17500 = add nsw i32 %blur_x.s0.x.v2.base.s122, -38
  %17501 = insertelement <4 x i32> undef, i32 %17500, i32 0
  %17502 = shufflevector <4 x i32> %17501, <4 x i32> undef, <4 x i32> zeroinitializer
  %17503 = add nsw <4 x i32> %17502, <i32 0, i32 1, i32 2, i32 3>
  %17504 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %17503, <4 x i32> %90) #11
  %17505 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %17504, <4 x i32> %92) #11
  %17506 = add <4 x i32> %17505, %t372
  %17507 = extractelement <4 x i32> %17506, i32 0
  %17508 = sext i32 %17507 to i64
  %17509 = getelementptr inbounds i16, i16* %input43288, i64 %17508
  %17510 = load i16, i16* %17509, align 2, !tbaa !386
  %17511 = insertelement <4 x i16> undef, i16 %17510, i32 0
  %17512 = extractelement <4 x i32> %17506, i32 1
  %17513 = sext i32 %17512 to i64
  %17514 = getelementptr inbounds i16, i16* %input43288, i64 %17513
  %17515 = load i16, i16* %17514, align 2, !tbaa !386
  %17516 = insertelement <4 x i16> %17511, i16 %17515, i32 1
  %17517 = extractelement <4 x i32> %17506, i32 2
  %17518 = sext i32 %17517 to i64
  %17519 = getelementptr inbounds i16, i16* %input43288, i64 %17518
  %17520 = load i16, i16* %17519, align 2, !tbaa !386
  %17521 = insertelement <4 x i16> %17516, i16 %17520, i32 2
  %17522 = extractelement <4 x i32> %17506, i32 3
  %17523 = sext i32 %17522 to i64
  %17524 = getelementptr inbounds i16, i16* %input43288, i64 %17523
  %17525 = load i16, i16* %17524, align 2, !tbaa !386
  %17526 = insertelement <4 x i16> %17521, i16 %17525, i32 3
  %17527 = add nsw i32 %blur_x.s0.x.v2.base.s122, -34
  %17528 = insertelement <4 x i32> undef, i32 %17527, i32 0
  %17529 = shufflevector <4 x i32> %17528, <4 x i32> undef, <4 x i32> zeroinitializer
  %17530 = add nsw <4 x i32> %17529, <i32 0, i32 1, i32 2, i32 3>
  %17531 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %17530, <4 x i32> %90) #11
  %17532 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %17531, <4 x i32> %92) #11
  %17533 = add <4 x i32> %17532, %t372
  %17534 = extractelement <4 x i32> %17533, i32 0
  %17535 = sext i32 %17534 to i64
  %17536 = getelementptr inbounds i16, i16* %input43288, i64 %17535
  %17537 = load i16, i16* %17536, align 2, !tbaa !386
  %17538 = insertelement <4 x i16> undef, i16 %17537, i32 0
  %17539 = extractelement <4 x i32> %17533, i32 1
  %17540 = sext i32 %17539 to i64
  %17541 = getelementptr inbounds i16, i16* %input43288, i64 %17540
  %17542 = load i16, i16* %17541, align 2, !tbaa !386
  %17543 = insertelement <4 x i16> %17538, i16 %17542, i32 1
  %17544 = extractelement <4 x i32> %17533, i32 2
  %17545 = sext i32 %17544 to i64
  %17546 = getelementptr inbounds i16, i16* %input43288, i64 %17545
  %17547 = load i16, i16* %17546, align 2, !tbaa !386
  %17548 = insertelement <4 x i16> %17543, i16 %17547, i32 2
  %17549 = extractelement <4 x i32> %17533, i32 3
  %17550 = sext i32 %17549 to i64
  %17551 = getelementptr inbounds i16, i16* %input43288, i64 %17550
  %17552 = load i16, i16* %17551, align 2, !tbaa !386
  %17553 = insertelement <4 x i16> %17548, i16 %17552, i32 3
  %17554 = add nsw i32 %blur_x.s0.x.v2.base.s122, -32
  %17555 = insertelement <4 x i32> undef, i32 %17554, i32 0
  %17556 = shufflevector <4 x i32> %17555, <4 x i32> undef, <4 x i32> zeroinitializer
  %17557 = add nsw <4 x i32> %17556, <i32 0, i32 1, i32 2, i32 3>
  %17558 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %17557, <4 x i32> %90) #11
  %17559 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %17558, <4 x i32> %92) #11
  %17560 = add <4 x i32> %17559, %t372
  %17561 = extractelement <4 x i32> %17560, i32 0
  %17562 = sext i32 %17561 to i64
  %17563 = getelementptr inbounds i16, i16* %input43288, i64 %17562
  %17564 = load i16, i16* %17563, align 2, !tbaa !386
  %17565 = insertelement <4 x i16> undef, i16 %17564, i32 0
  %17566 = extractelement <4 x i32> %17560, i32 1
  %17567 = sext i32 %17566 to i64
  %17568 = getelementptr inbounds i16, i16* %input43288, i64 %17567
  %17569 = load i16, i16* %17568, align 2, !tbaa !386
  %17570 = insertelement <4 x i16> %17565, i16 %17569, i32 1
  %17571 = extractelement <4 x i32> %17560, i32 2
  %17572 = sext i32 %17571 to i64
  %17573 = getelementptr inbounds i16, i16* %input43288, i64 %17572
  %17574 = load i16, i16* %17573, align 2, !tbaa !386
  %17575 = insertelement <4 x i16> %17570, i16 %17574, i32 2
  %17576 = extractelement <4 x i32> %17560, i32 3
  %17577 = sext i32 %17576 to i64
  %17578 = getelementptr inbounds i16, i16* %input43288, i64 %17577
  %17579 = load i16, i16* %17578, align 2, !tbaa !386
  %17580 = insertelement <4 x i16> %17575, i16 %17579, i32 3
  %17581 = add nsw i32 %blur_x.s0.x.v2.base.s122, -37
  %17582 = insertelement <4 x i32> undef, i32 %17581, i32 0
  %17583 = shufflevector <4 x i32> %17582, <4 x i32> undef, <4 x i32> zeroinitializer
  %17584 = add nsw <4 x i32> %17583, <i32 0, i32 1, i32 2, i32 3>
  %17585 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %17584, <4 x i32> %90) #11
  %17586 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %17585, <4 x i32> %92) #11
  %17587 = add <4 x i32> %17586, %t372
  %17588 = extractelement <4 x i32> %17587, i32 0
  %17589 = sext i32 %17588 to i64
  %17590 = getelementptr inbounds i16, i16* %input43288, i64 %17589
  %17591 = load i16, i16* %17590, align 2, !tbaa !386
  %17592 = insertelement <4 x i16> undef, i16 %17591, i32 0
  %17593 = extractelement <4 x i32> %17587, i32 1
  %17594 = sext i32 %17593 to i64
  %17595 = getelementptr inbounds i16, i16* %input43288, i64 %17594
  %17596 = load i16, i16* %17595, align 2, !tbaa !386
  %17597 = insertelement <4 x i16> %17592, i16 %17596, i32 1
  %17598 = extractelement <4 x i32> %17587, i32 2
  %17599 = sext i32 %17598 to i64
  %17600 = getelementptr inbounds i16, i16* %input43288, i64 %17599
  %17601 = load i16, i16* %17600, align 2, !tbaa !386
  %17602 = insertelement <4 x i16> %17597, i16 %17601, i32 2
  %17603 = extractelement <4 x i32> %17587, i32 3
  %17604 = sext i32 %17603 to i64
  %17605 = getelementptr inbounds i16, i16* %input43288, i64 %17604
  %17606 = load i16, i16* %17605, align 2, !tbaa !386
  %17607 = insertelement <4 x i16> %17602, i16 %17606, i32 3
  %17608 = add nsw i32 %blur_x.s0.x.v2.base.s122, -33
  %17609 = insertelement <4 x i32> undef, i32 %17608, i32 0
  %17610 = shufflevector <4 x i32> %17609, <4 x i32> undef, <4 x i32> zeroinitializer
  %17611 = add nsw <4 x i32> %17610, <i32 0, i32 1, i32 2, i32 3>
  %17612 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %17611, <4 x i32> %90) #11
  %17613 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %17612, <4 x i32> %92) #11
  %17614 = add <4 x i32> %17613, %t372
  %17615 = extractelement <4 x i32> %17614, i32 0
  %17616 = sext i32 %17615 to i64
  %17617 = getelementptr inbounds i16, i16* %input43288, i64 %17616
  %17618 = load i16, i16* %17617, align 2, !tbaa !386
  %17619 = insertelement <4 x i16> undef, i16 %17618, i32 0
  %17620 = extractelement <4 x i32> %17614, i32 1
  %17621 = sext i32 %17620 to i64
  %17622 = getelementptr inbounds i16, i16* %input43288, i64 %17621
  %17623 = load i16, i16* %17622, align 2, !tbaa !386
  %17624 = insertelement <4 x i16> %17619, i16 %17623, i32 1
  %17625 = extractelement <4 x i32> %17614, i32 2
  %17626 = sext i32 %17625 to i64
  %17627 = getelementptr inbounds i16, i16* %input43288, i64 %17626
  %17628 = load i16, i16* %17627, align 2, !tbaa !386
  %17629 = insertelement <4 x i16> %17624, i16 %17628, i32 2
  %17630 = extractelement <4 x i32> %17614, i32 3
  %17631 = sext i32 %17630 to i64
  %17632 = getelementptr inbounds i16, i16* %input43288, i64 %17631
  %17633 = load i16, i16* %17632, align 2, !tbaa !386
  %17634 = insertelement <4 x i16> %17629, i16 %17633, i32 3
  %17635 = add <4 x i16> %17445, %17347
  %17636 = add <4 x i16> %17635, %17499
  %17637 = add <4 x i16> %17636, %17526
  %17638 = add <4 x i16> %17637, %17607
  %17639 = add <4 x i16> %17499, %17472
  %17640 = add <4 x i16> %17639, %17553
  %17641 = add <4 x i16> %17640, %17580
  %17642 = add <4 x i16> %17641, %17634
  %17643 = shufflevector <4 x i16> %17638, <4 x i16> %17642, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %17644 = zext <8 x i16> %17643 to <8 x i32>
  %17645 = mul nuw <8 x i32> %17644, <i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429>
  %17646 = lshr <8 x i32> %17645, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %17647 = shufflevector <8 x i32> %17646, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %17648 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %17647)
  %17649 = shufflevector <8 x i32> %17646, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %17650 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %17649)
  %17651 = shufflevector <4 x i16> %17648, <4 x i16> %17650, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %17652 = add nsw i32 %blur_x.s0.x.v2.base.s122, -31
  %17653 = insertelement <4 x i32> undef, i32 %17652, i32 0
  %17654 = shufflevector <4 x i32> %17653, <4 x i32> undef, <4 x i32> zeroinitializer
  %17655 = add nsw <4 x i32> %17654, <i32 0, i32 1, i32 2, i32 3>
  %17656 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %17655, <4 x i32> %90) #11
  %17657 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %17656, <4 x i32> %92) #11
  %17658 = add <4 x i32> %17657, %t372
  %17659 = extractelement <4 x i32> %17658, i32 0
  %17660 = sext i32 %17659 to i64
  %17661 = getelementptr inbounds i16, i16* %input43288, i64 %17660
  %17662 = load i16, i16* %17661, align 2, !tbaa !386
  %17663 = insertelement <4 x i16> undef, i16 %17662, i32 0
  %17664 = extractelement <4 x i32> %17658, i32 1
  %17665 = sext i32 %17664 to i64
  %17666 = getelementptr inbounds i16, i16* %input43288, i64 %17665
  %17667 = load i16, i16* %17666, align 2, !tbaa !386
  %17668 = insertelement <4 x i16> %17663, i16 %17667, i32 1
  %17669 = extractelement <4 x i32> %17658, i32 2
  %17670 = sext i32 %17669 to i64
  %17671 = getelementptr inbounds i16, i16* %input43288, i64 %17670
  %17672 = load i16, i16* %17671, align 2, !tbaa !386
  %17673 = insertelement <4 x i16> %17668, i16 %17672, i32 2
  %17674 = extractelement <4 x i32> %17658, i32 3
  %17675 = sext i32 %17674 to i64
  %17676 = getelementptr inbounds i16, i16* %input43288, i64 %17675
  %17677 = load i16, i16* %17676, align 2, !tbaa !386
  %17678 = insertelement <4 x i16> %17673, i16 %17677, i32 3
  %17679 = add nsw i32 %blur_x.s0.x.v2.base.s122, -27
  %17680 = insertelement <4 x i32> undef, i32 %17679, i32 0
  %17681 = shufflevector <4 x i32> %17680, <4 x i32> undef, <4 x i32> zeroinitializer
  %17682 = add nsw <4 x i32> %17681, <i32 0, i32 1, i32 2, i32 3>
  %17683 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %17682, <4 x i32> %90) #11
  %17684 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %17683, <4 x i32> %92) #11
  %17685 = add <4 x i32> %17684, %t372
  %17686 = extractelement <4 x i32> %17685, i32 0
  %17687 = sext i32 %17686 to i64
  %17688 = getelementptr inbounds i16, i16* %input43288, i64 %17687
  %17689 = load i16, i16* %17688, align 2, !tbaa !386
  %17690 = insertelement <4 x i16> undef, i16 %17689, i32 0
  %17691 = extractelement <4 x i32> %17685, i32 1
  %17692 = sext i32 %17691 to i64
  %17693 = getelementptr inbounds i16, i16* %input43288, i64 %17692
  %17694 = load i16, i16* %17693, align 2, !tbaa !386
  %17695 = insertelement <4 x i16> %17690, i16 %17694, i32 1
  %17696 = extractelement <4 x i32> %17685, i32 2
  %17697 = sext i32 %17696 to i64
  %17698 = getelementptr inbounds i16, i16* %input43288, i64 %17697
  %17699 = load i16, i16* %17698, align 2, !tbaa !386
  %17700 = insertelement <4 x i16> %17695, i16 %17699, i32 2
  %17701 = extractelement <4 x i32> %17685, i32 3
  %17702 = sext i32 %17701 to i64
  %17703 = getelementptr inbounds i16, i16* %input43288, i64 %17702
  %17704 = load i16, i16* %17703, align 2, !tbaa !386
  %17705 = insertelement <4 x i16> %17700, i16 %17704, i32 3
  %17706 = add nsw i32 %blur_x.s0.x.v2.base.s122, -28
  %17707 = insertelement <4 x i32> undef, i32 %17706, i32 0
  %17708 = shufflevector <4 x i32> %17707, <4 x i32> undef, <4 x i32> zeroinitializer
  %17709 = add nsw <4 x i32> %17708, <i32 0, i32 1, i32 2, i32 3>
  %17710 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %17709, <4 x i32> %90) #11
  %17711 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %17710, <4 x i32> %92) #11
  %17712 = add <4 x i32> %17711, %t372
  %17713 = extractelement <4 x i32> %17712, i32 0
  %17714 = sext i32 %17713 to i64
  %17715 = getelementptr inbounds i16, i16* %input43288, i64 %17714
  %17716 = load i16, i16* %17715, align 2, !tbaa !386
  %17717 = insertelement <4 x i16> undef, i16 %17716, i32 0
  %17718 = extractelement <4 x i32> %17712, i32 1
  %17719 = sext i32 %17718 to i64
  %17720 = getelementptr inbounds i16, i16* %input43288, i64 %17719
  %17721 = load i16, i16* %17720, align 2, !tbaa !386
  %17722 = insertelement <4 x i16> %17717, i16 %17721, i32 1
  %17723 = extractelement <4 x i32> %17712, i32 2
  %17724 = sext i32 %17723 to i64
  %17725 = getelementptr inbounds i16, i16* %input43288, i64 %17724
  %17726 = load i16, i16* %17725, align 2, !tbaa !386
  %17727 = insertelement <4 x i16> %17722, i16 %17726, i32 2
  %17728 = extractelement <4 x i32> %17712, i32 3
  %17729 = sext i32 %17728 to i64
  %17730 = getelementptr inbounds i16, i16* %input43288, i64 %17729
  %17731 = load i16, i16* %17730, align 2, !tbaa !386
  %17732 = insertelement <4 x i16> %17727, i16 %17731, i32 3
  %17733 = add nsw i32 %blur_x.s0.x.v2.base.s122, -30
  %17734 = insertelement <4 x i32> undef, i32 %17733, i32 0
  %17735 = shufflevector <4 x i32> %17734, <4 x i32> undef, <4 x i32> zeroinitializer
  %17736 = add nsw <4 x i32> %17735, <i32 0, i32 1, i32 2, i32 3>
  %17737 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %17736, <4 x i32> %90) #11
  %17738 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %17737, <4 x i32> %92) #11
  %17739 = add <4 x i32> %17738, %t372
  %17740 = extractelement <4 x i32> %17739, i32 0
  %17741 = sext i32 %17740 to i64
  %17742 = getelementptr inbounds i16, i16* %input43288, i64 %17741
  %17743 = load i16, i16* %17742, align 2, !tbaa !386
  %17744 = insertelement <4 x i16> undef, i16 %17743, i32 0
  %17745 = extractelement <4 x i32> %17739, i32 1
  %17746 = sext i32 %17745 to i64
  %17747 = getelementptr inbounds i16, i16* %input43288, i64 %17746
  %17748 = load i16, i16* %17747, align 2, !tbaa !386
  %17749 = insertelement <4 x i16> %17744, i16 %17748, i32 1
  %17750 = extractelement <4 x i32> %17739, i32 2
  %17751 = sext i32 %17750 to i64
  %17752 = getelementptr inbounds i16, i16* %input43288, i64 %17751
  %17753 = load i16, i16* %17752, align 2, !tbaa !386
  %17754 = insertelement <4 x i16> %17749, i16 %17753, i32 2
  %17755 = extractelement <4 x i32> %17739, i32 3
  %17756 = sext i32 %17755 to i64
  %17757 = getelementptr inbounds i16, i16* %input43288, i64 %17756
  %17758 = load i16, i16* %17757, align 2, !tbaa !386
  %17759 = insertelement <4 x i16> %17754, i16 %17758, i32 3
  %17760 = add nsw i32 %blur_x.s0.x.v2.base.s122, -26
  %17761 = insertelement <4 x i32> undef, i32 %17760, i32 0
  %17762 = shufflevector <4 x i32> %17761, <4 x i32> undef, <4 x i32> zeroinitializer
  %17763 = add nsw <4 x i32> %17762, <i32 0, i32 1, i32 2, i32 3>
  %17764 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %17763, <4 x i32> %90) #11
  %17765 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %17764, <4 x i32> %92) #11
  %17766 = add <4 x i32> %17765, %t372
  %17767 = extractelement <4 x i32> %17766, i32 0
  %17768 = sext i32 %17767 to i64
  %17769 = getelementptr inbounds i16, i16* %input43288, i64 %17768
  %17770 = load i16, i16* %17769, align 2, !tbaa !386
  %17771 = insertelement <4 x i16> undef, i16 %17770, i32 0
  %17772 = extractelement <4 x i32> %17766, i32 1
  %17773 = sext i32 %17772 to i64
  %17774 = getelementptr inbounds i16, i16* %input43288, i64 %17773
  %17775 = load i16, i16* %17774, align 2, !tbaa !386
  %17776 = insertelement <4 x i16> %17771, i16 %17775, i32 1
  %17777 = extractelement <4 x i32> %17766, i32 2
  %17778 = sext i32 %17777 to i64
  %17779 = getelementptr inbounds i16, i16* %input43288, i64 %17778
  %17780 = load i16, i16* %17779, align 2, !tbaa !386
  %17781 = insertelement <4 x i16> %17776, i16 %17780, i32 2
  %17782 = extractelement <4 x i32> %17766, i32 3
  %17783 = sext i32 %17782 to i64
  %17784 = getelementptr inbounds i16, i16* %input43288, i64 %17783
  %17785 = load i16, i16* %17784, align 2, !tbaa !386
  %17786 = insertelement <4 x i16> %17781, i16 %17785, i32 3
  %17787 = add nsw i32 %blur_x.s0.x.v2.base.s122, -24
  %17788 = insertelement <4 x i32> undef, i32 %17787, i32 0
  %17789 = shufflevector <4 x i32> %17788, <4 x i32> undef, <4 x i32> zeroinitializer
  %17790 = add nsw <4 x i32> %17789, <i32 0, i32 1, i32 2, i32 3>
  %17791 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %17790, <4 x i32> %90) #11
  %17792 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %17791, <4 x i32> %92) #11
  %17793 = add <4 x i32> %17792, %t372
  %17794 = extractelement <4 x i32> %17793, i32 0
  %17795 = sext i32 %17794 to i64
  %17796 = getelementptr inbounds i16, i16* %input43288, i64 %17795
  %17797 = load i16, i16* %17796, align 2, !tbaa !386
  %17798 = insertelement <4 x i16> undef, i16 %17797, i32 0
  %17799 = extractelement <4 x i32> %17793, i32 1
  %17800 = sext i32 %17799 to i64
  %17801 = getelementptr inbounds i16, i16* %input43288, i64 %17800
  %17802 = load i16, i16* %17801, align 2, !tbaa !386
  %17803 = insertelement <4 x i16> %17798, i16 %17802, i32 1
  %17804 = extractelement <4 x i32> %17793, i32 2
  %17805 = sext i32 %17804 to i64
  %17806 = getelementptr inbounds i16, i16* %input43288, i64 %17805
  %17807 = load i16, i16* %17806, align 2, !tbaa !386
  %17808 = insertelement <4 x i16> %17803, i16 %17807, i32 2
  %17809 = extractelement <4 x i32> %17793, i32 3
  %17810 = sext i32 %17809 to i64
  %17811 = getelementptr inbounds i16, i16* %input43288, i64 %17810
  %17812 = load i16, i16* %17811, align 2, !tbaa !386
  %17813 = insertelement <4 x i16> %17808, i16 %17812, i32 3
  %17814 = add nsw i32 %blur_x.s0.x.v2.base.s122, -29
  %17815 = insertelement <4 x i32> undef, i32 %17814, i32 0
  %17816 = shufflevector <4 x i32> %17815, <4 x i32> undef, <4 x i32> zeroinitializer
  %17817 = add nsw <4 x i32> %17816, <i32 0, i32 1, i32 2, i32 3>
  %17818 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %17817, <4 x i32> %90) #11
  %17819 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %17818, <4 x i32> %92) #11
  %17820 = add <4 x i32> %17819, %t372
  %17821 = extractelement <4 x i32> %17820, i32 0
  %17822 = sext i32 %17821 to i64
  %17823 = getelementptr inbounds i16, i16* %input43288, i64 %17822
  %17824 = load i16, i16* %17823, align 2, !tbaa !386
  %17825 = insertelement <4 x i16> undef, i16 %17824, i32 0
  %17826 = extractelement <4 x i32> %17820, i32 1
  %17827 = sext i32 %17826 to i64
  %17828 = getelementptr inbounds i16, i16* %input43288, i64 %17827
  %17829 = load i16, i16* %17828, align 2, !tbaa !386
  %17830 = insertelement <4 x i16> %17825, i16 %17829, i32 1
  %17831 = extractelement <4 x i32> %17820, i32 2
  %17832 = sext i32 %17831 to i64
  %17833 = getelementptr inbounds i16, i16* %input43288, i64 %17832
  %17834 = load i16, i16* %17833, align 2, !tbaa !386
  %17835 = insertelement <4 x i16> %17830, i16 %17834, i32 2
  %17836 = extractelement <4 x i32> %17820, i32 3
  %17837 = sext i32 %17836 to i64
  %17838 = getelementptr inbounds i16, i16* %input43288, i64 %17837
  %17839 = load i16, i16* %17838, align 2, !tbaa !386
  %17840 = insertelement <4 x i16> %17835, i16 %17839, i32 3
  %17841 = add nsw i32 %blur_x.s0.x.v2.base.s122, -25
  %17842 = insertelement <4 x i32> undef, i32 %17841, i32 0
  %17843 = shufflevector <4 x i32> %17842, <4 x i32> undef, <4 x i32> zeroinitializer
  %17844 = add nsw <4 x i32> %17843, <i32 0, i32 1, i32 2, i32 3>
  %17845 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %17844, <4 x i32> %90) #11
  %17846 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %17845, <4 x i32> %92) #11
  %17847 = add <4 x i32> %17846, %t372
  %17848 = extractelement <4 x i32> %17847, i32 0
  %17849 = sext i32 %17848 to i64
  %17850 = getelementptr inbounds i16, i16* %input43288, i64 %17849
  %17851 = load i16, i16* %17850, align 2, !tbaa !386
  %17852 = insertelement <4 x i16> undef, i16 %17851, i32 0
  %17853 = extractelement <4 x i32> %17847, i32 1
  %17854 = sext i32 %17853 to i64
  %17855 = getelementptr inbounds i16, i16* %input43288, i64 %17854
  %17856 = load i16, i16* %17855, align 2, !tbaa !386
  %17857 = insertelement <4 x i16> %17852, i16 %17856, i32 1
  %17858 = extractelement <4 x i32> %17847, i32 2
  %17859 = sext i32 %17858 to i64
  %17860 = getelementptr inbounds i16, i16* %input43288, i64 %17859
  %17861 = load i16, i16* %17860, align 2, !tbaa !386
  %17862 = insertelement <4 x i16> %17857, i16 %17861, i32 2
  %17863 = extractelement <4 x i32> %17847, i32 3
  %17864 = sext i32 %17863 to i64
  %17865 = getelementptr inbounds i16, i16* %input43288, i64 %17864
  %17866 = load i16, i16* %17865, align 2, !tbaa !386
  %17867 = insertelement <4 x i16> %17862, i16 %17866, i32 3
  %17868 = add <4 x i16> %17678, %17580
  %17869 = add <4 x i16> %17868, %17732
  %17870 = add <4 x i16> %17869, %17759
  %17871 = add <4 x i16> %17870, %17840
  %17872 = add <4 x i16> %17732, %17705
  %17873 = add <4 x i16> %17872, %17786
  %17874 = add <4 x i16> %17873, %17813
  %17875 = add <4 x i16> %17874, %17867
  %17876 = shufflevector <4 x i16> %17871, <4 x i16> %17875, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %17877 = zext <8 x i16> %17876 to <8 x i32>
  %17878 = mul nuw <8 x i32> %17877, <i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429>
  %17879 = lshr <8 x i32> %17878, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %17880 = shufflevector <8 x i32> %17879, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %17881 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %17880)
  %17882 = shufflevector <8 x i32> %17879, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %17883 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %17882)
  %17884 = shufflevector <4 x i16> %17881, <4 x i16> %17883, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %17885 = add nsw i32 %blur_x.s0.x.v2.base.s122, -23
  %17886 = insertelement <4 x i32> undef, i32 %17885, i32 0
  %17887 = shufflevector <4 x i32> %17886, <4 x i32> undef, <4 x i32> zeroinitializer
  %17888 = add nsw <4 x i32> %17887, <i32 0, i32 1, i32 2, i32 3>
  %17889 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %17888, <4 x i32> %90) #11
  %17890 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %17889, <4 x i32> %92) #11
  %17891 = add <4 x i32> %17890, %t372
  %17892 = extractelement <4 x i32> %17891, i32 0
  %17893 = sext i32 %17892 to i64
  %17894 = getelementptr inbounds i16, i16* %input43288, i64 %17893
  %17895 = load i16, i16* %17894, align 2, !tbaa !386
  %17896 = insertelement <4 x i16> undef, i16 %17895, i32 0
  %17897 = extractelement <4 x i32> %17891, i32 1
  %17898 = sext i32 %17897 to i64
  %17899 = getelementptr inbounds i16, i16* %input43288, i64 %17898
  %17900 = load i16, i16* %17899, align 2, !tbaa !386
  %17901 = insertelement <4 x i16> %17896, i16 %17900, i32 1
  %17902 = extractelement <4 x i32> %17891, i32 2
  %17903 = sext i32 %17902 to i64
  %17904 = getelementptr inbounds i16, i16* %input43288, i64 %17903
  %17905 = load i16, i16* %17904, align 2, !tbaa !386
  %17906 = insertelement <4 x i16> %17901, i16 %17905, i32 2
  %17907 = extractelement <4 x i32> %17891, i32 3
  %17908 = sext i32 %17907 to i64
  %17909 = getelementptr inbounds i16, i16* %input43288, i64 %17908
  %17910 = load i16, i16* %17909, align 2, !tbaa !386
  %17911 = insertelement <4 x i16> %17906, i16 %17910, i32 3
  %17912 = add nsw i32 %blur_x.s0.x.v2.base.s122, -19
  %17913 = insertelement <4 x i32> undef, i32 %17912, i32 0
  %17914 = shufflevector <4 x i32> %17913, <4 x i32> undef, <4 x i32> zeroinitializer
  %17915 = add nsw <4 x i32> %17914, <i32 0, i32 1, i32 2, i32 3>
  %17916 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %17915, <4 x i32> %90) #11
  %17917 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %17916, <4 x i32> %92) #11
  %17918 = add <4 x i32> %17917, %t372
  %17919 = extractelement <4 x i32> %17918, i32 0
  %17920 = sext i32 %17919 to i64
  %17921 = getelementptr inbounds i16, i16* %input43288, i64 %17920
  %17922 = load i16, i16* %17921, align 2, !tbaa !386
  %17923 = insertelement <4 x i16> undef, i16 %17922, i32 0
  %17924 = extractelement <4 x i32> %17918, i32 1
  %17925 = sext i32 %17924 to i64
  %17926 = getelementptr inbounds i16, i16* %input43288, i64 %17925
  %17927 = load i16, i16* %17926, align 2, !tbaa !386
  %17928 = insertelement <4 x i16> %17923, i16 %17927, i32 1
  %17929 = extractelement <4 x i32> %17918, i32 2
  %17930 = sext i32 %17929 to i64
  %17931 = getelementptr inbounds i16, i16* %input43288, i64 %17930
  %17932 = load i16, i16* %17931, align 2, !tbaa !386
  %17933 = insertelement <4 x i16> %17928, i16 %17932, i32 2
  %17934 = extractelement <4 x i32> %17918, i32 3
  %17935 = sext i32 %17934 to i64
  %17936 = getelementptr inbounds i16, i16* %input43288, i64 %17935
  %17937 = load i16, i16* %17936, align 2, !tbaa !386
  %17938 = insertelement <4 x i16> %17933, i16 %17937, i32 3
  %17939 = add nsw i32 %blur_x.s0.x.v2.base.s122, -20
  %17940 = insertelement <4 x i32> undef, i32 %17939, i32 0
  %17941 = shufflevector <4 x i32> %17940, <4 x i32> undef, <4 x i32> zeroinitializer
  %17942 = add nsw <4 x i32> %17941, <i32 0, i32 1, i32 2, i32 3>
  %17943 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %17942, <4 x i32> %90) #11
  %17944 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %17943, <4 x i32> %92) #11
  %17945 = add <4 x i32> %17944, %t372
  %17946 = extractelement <4 x i32> %17945, i32 0
  %17947 = sext i32 %17946 to i64
  %17948 = getelementptr inbounds i16, i16* %input43288, i64 %17947
  %17949 = load i16, i16* %17948, align 2, !tbaa !386
  %17950 = insertelement <4 x i16> undef, i16 %17949, i32 0
  %17951 = extractelement <4 x i32> %17945, i32 1
  %17952 = sext i32 %17951 to i64
  %17953 = getelementptr inbounds i16, i16* %input43288, i64 %17952
  %17954 = load i16, i16* %17953, align 2, !tbaa !386
  %17955 = insertelement <4 x i16> %17950, i16 %17954, i32 1
  %17956 = extractelement <4 x i32> %17945, i32 2
  %17957 = sext i32 %17956 to i64
  %17958 = getelementptr inbounds i16, i16* %input43288, i64 %17957
  %17959 = load i16, i16* %17958, align 2, !tbaa !386
  %17960 = insertelement <4 x i16> %17955, i16 %17959, i32 2
  %17961 = extractelement <4 x i32> %17945, i32 3
  %17962 = sext i32 %17961 to i64
  %17963 = getelementptr inbounds i16, i16* %input43288, i64 %17962
  %17964 = load i16, i16* %17963, align 2, !tbaa !386
  %17965 = insertelement <4 x i16> %17960, i16 %17964, i32 3
  %17966 = add nsw i32 %blur_x.s0.x.v2.base.s122, -22
  %17967 = insertelement <4 x i32> undef, i32 %17966, i32 0
  %17968 = shufflevector <4 x i32> %17967, <4 x i32> undef, <4 x i32> zeroinitializer
  %17969 = add nsw <4 x i32> %17968, <i32 0, i32 1, i32 2, i32 3>
  %17970 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %17969, <4 x i32> %90) #11
  %17971 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %17970, <4 x i32> %92) #11
  %17972 = add <4 x i32> %17971, %t372
  %17973 = extractelement <4 x i32> %17972, i32 0
  %17974 = sext i32 %17973 to i64
  %17975 = getelementptr inbounds i16, i16* %input43288, i64 %17974
  %17976 = load i16, i16* %17975, align 2, !tbaa !386
  %17977 = insertelement <4 x i16> undef, i16 %17976, i32 0
  %17978 = extractelement <4 x i32> %17972, i32 1
  %17979 = sext i32 %17978 to i64
  %17980 = getelementptr inbounds i16, i16* %input43288, i64 %17979
  %17981 = load i16, i16* %17980, align 2, !tbaa !386
  %17982 = insertelement <4 x i16> %17977, i16 %17981, i32 1
  %17983 = extractelement <4 x i32> %17972, i32 2
  %17984 = sext i32 %17983 to i64
  %17985 = getelementptr inbounds i16, i16* %input43288, i64 %17984
  %17986 = load i16, i16* %17985, align 2, !tbaa !386
  %17987 = insertelement <4 x i16> %17982, i16 %17986, i32 2
  %17988 = extractelement <4 x i32> %17972, i32 3
  %17989 = sext i32 %17988 to i64
  %17990 = getelementptr inbounds i16, i16* %input43288, i64 %17989
  %17991 = load i16, i16* %17990, align 2, !tbaa !386
  %17992 = insertelement <4 x i16> %17987, i16 %17991, i32 3
  %17993 = add nsw i32 %blur_x.s0.x.v2.base.s122, -18
  %17994 = insertelement <4 x i32> undef, i32 %17993, i32 0
  %17995 = shufflevector <4 x i32> %17994, <4 x i32> undef, <4 x i32> zeroinitializer
  %17996 = add nsw <4 x i32> %17995, <i32 0, i32 1, i32 2, i32 3>
  %17997 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %17996, <4 x i32> %90) #11
  %17998 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %17997, <4 x i32> %92) #11
  %17999 = add <4 x i32> %17998, %t372
  %18000 = extractelement <4 x i32> %17999, i32 0
  %18001 = sext i32 %18000 to i64
  %18002 = getelementptr inbounds i16, i16* %input43288, i64 %18001
  %18003 = load i16, i16* %18002, align 2, !tbaa !386
  %18004 = insertelement <4 x i16> undef, i16 %18003, i32 0
  %18005 = extractelement <4 x i32> %17999, i32 1
  %18006 = sext i32 %18005 to i64
  %18007 = getelementptr inbounds i16, i16* %input43288, i64 %18006
  %18008 = load i16, i16* %18007, align 2, !tbaa !386
  %18009 = insertelement <4 x i16> %18004, i16 %18008, i32 1
  %18010 = extractelement <4 x i32> %17999, i32 2
  %18011 = sext i32 %18010 to i64
  %18012 = getelementptr inbounds i16, i16* %input43288, i64 %18011
  %18013 = load i16, i16* %18012, align 2, !tbaa !386
  %18014 = insertelement <4 x i16> %18009, i16 %18013, i32 2
  %18015 = extractelement <4 x i32> %17999, i32 3
  %18016 = sext i32 %18015 to i64
  %18017 = getelementptr inbounds i16, i16* %input43288, i64 %18016
  %18018 = load i16, i16* %18017, align 2, !tbaa !386
  %18019 = insertelement <4 x i16> %18014, i16 %18018, i32 3
  %18020 = add nsw i32 %blur_x.s0.x.v2.base.s122, -16
  %18021 = insertelement <4 x i32> undef, i32 %18020, i32 0
  %18022 = shufflevector <4 x i32> %18021, <4 x i32> undef, <4 x i32> zeroinitializer
  %18023 = add nsw <4 x i32> %18022, <i32 0, i32 1, i32 2, i32 3>
  %18024 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %18023, <4 x i32> %90) #11
  %18025 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %18024, <4 x i32> %92) #11
  %18026 = add <4 x i32> %18025, %t372
  %18027 = extractelement <4 x i32> %18026, i32 0
  %18028 = sext i32 %18027 to i64
  %18029 = getelementptr inbounds i16, i16* %input43288, i64 %18028
  %18030 = load i16, i16* %18029, align 2, !tbaa !386
  %18031 = insertelement <4 x i16> undef, i16 %18030, i32 0
  %18032 = extractelement <4 x i32> %18026, i32 1
  %18033 = sext i32 %18032 to i64
  %18034 = getelementptr inbounds i16, i16* %input43288, i64 %18033
  %18035 = load i16, i16* %18034, align 2, !tbaa !386
  %18036 = insertelement <4 x i16> %18031, i16 %18035, i32 1
  %18037 = extractelement <4 x i32> %18026, i32 2
  %18038 = sext i32 %18037 to i64
  %18039 = getelementptr inbounds i16, i16* %input43288, i64 %18038
  %18040 = load i16, i16* %18039, align 2, !tbaa !386
  %18041 = insertelement <4 x i16> %18036, i16 %18040, i32 2
  %18042 = extractelement <4 x i32> %18026, i32 3
  %18043 = sext i32 %18042 to i64
  %18044 = getelementptr inbounds i16, i16* %input43288, i64 %18043
  %18045 = load i16, i16* %18044, align 2, !tbaa !386
  %18046 = insertelement <4 x i16> %18041, i16 %18045, i32 3
  %18047 = add nsw i32 %blur_x.s0.x.v2.base.s122, -21
  %18048 = insertelement <4 x i32> undef, i32 %18047, i32 0
  %18049 = shufflevector <4 x i32> %18048, <4 x i32> undef, <4 x i32> zeroinitializer
  %18050 = add nsw <4 x i32> %18049, <i32 0, i32 1, i32 2, i32 3>
  %18051 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %18050, <4 x i32> %90) #11
  %18052 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %18051, <4 x i32> %92) #11
  %18053 = add <4 x i32> %18052, %t372
  %18054 = extractelement <4 x i32> %18053, i32 0
  %18055 = sext i32 %18054 to i64
  %18056 = getelementptr inbounds i16, i16* %input43288, i64 %18055
  %18057 = load i16, i16* %18056, align 2, !tbaa !386
  %18058 = insertelement <4 x i16> undef, i16 %18057, i32 0
  %18059 = extractelement <4 x i32> %18053, i32 1
  %18060 = sext i32 %18059 to i64
  %18061 = getelementptr inbounds i16, i16* %input43288, i64 %18060
  %18062 = load i16, i16* %18061, align 2, !tbaa !386
  %18063 = insertelement <4 x i16> %18058, i16 %18062, i32 1
  %18064 = extractelement <4 x i32> %18053, i32 2
  %18065 = sext i32 %18064 to i64
  %18066 = getelementptr inbounds i16, i16* %input43288, i64 %18065
  %18067 = load i16, i16* %18066, align 2, !tbaa !386
  %18068 = insertelement <4 x i16> %18063, i16 %18067, i32 2
  %18069 = extractelement <4 x i32> %18053, i32 3
  %18070 = sext i32 %18069 to i64
  %18071 = getelementptr inbounds i16, i16* %input43288, i64 %18070
  %18072 = load i16, i16* %18071, align 2, !tbaa !386
  %18073 = insertelement <4 x i16> %18068, i16 %18072, i32 3
  %18074 = add nsw i32 %blur_x.s0.x.v2.base.s122, -17
  %18075 = insertelement <4 x i32> undef, i32 %18074, i32 0
  %18076 = shufflevector <4 x i32> %18075, <4 x i32> undef, <4 x i32> zeroinitializer
  %18077 = add nsw <4 x i32> %18076, <i32 0, i32 1, i32 2, i32 3>
  %18078 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %18077, <4 x i32> %90) #11
  %18079 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %18078, <4 x i32> %92) #11
  %18080 = add <4 x i32> %18079, %t372
  %18081 = extractelement <4 x i32> %18080, i32 0
  %18082 = sext i32 %18081 to i64
  %18083 = getelementptr inbounds i16, i16* %input43288, i64 %18082
  %18084 = load i16, i16* %18083, align 2, !tbaa !386
  %18085 = insertelement <4 x i16> undef, i16 %18084, i32 0
  %18086 = extractelement <4 x i32> %18080, i32 1
  %18087 = sext i32 %18086 to i64
  %18088 = getelementptr inbounds i16, i16* %input43288, i64 %18087
  %18089 = load i16, i16* %18088, align 2, !tbaa !386
  %18090 = insertelement <4 x i16> %18085, i16 %18089, i32 1
  %18091 = extractelement <4 x i32> %18080, i32 2
  %18092 = sext i32 %18091 to i64
  %18093 = getelementptr inbounds i16, i16* %input43288, i64 %18092
  %18094 = load i16, i16* %18093, align 2, !tbaa !386
  %18095 = insertelement <4 x i16> %18090, i16 %18094, i32 2
  %18096 = extractelement <4 x i32> %18080, i32 3
  %18097 = sext i32 %18096 to i64
  %18098 = getelementptr inbounds i16, i16* %input43288, i64 %18097
  %18099 = load i16, i16* %18098, align 2, !tbaa !386
  %18100 = insertelement <4 x i16> %18095, i16 %18099, i32 3
  %18101 = add <4 x i16> %17911, %17813
  %18102 = add <4 x i16> %18101, %17965
  %18103 = add <4 x i16> %18102, %17992
  %18104 = add <4 x i16> %18103, %18073
  %18105 = add <4 x i16> %17965, %17938
  %18106 = add <4 x i16> %18105, %18019
  %18107 = add <4 x i16> %18106, %18046
  %18108 = add <4 x i16> %18107, %18100
  %18109 = shufflevector <4 x i16> %18104, <4 x i16> %18108, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %18110 = zext <8 x i16> %18109 to <8 x i32>
  %18111 = mul nuw <8 x i32> %18110, <i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429>
  %18112 = lshr <8 x i32> %18111, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %18113 = shufflevector <8 x i32> %18112, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %18114 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %18113)
  %18115 = shufflevector <8 x i32> %18112, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %18116 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %18115)
  %18117 = shufflevector <4 x i16> %18114, <4 x i16> %18116, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %18118 = add nsw i32 %blur_x.s0.x.v2.base.s122, -15
  %18119 = insertelement <4 x i32> undef, i32 %18118, i32 0
  %18120 = shufflevector <4 x i32> %18119, <4 x i32> undef, <4 x i32> zeroinitializer
  %18121 = add nsw <4 x i32> %18120, <i32 0, i32 1, i32 2, i32 3>
  %18122 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %18121, <4 x i32> %90) #11
  %18123 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %18122, <4 x i32> %92) #11
  %18124 = add <4 x i32> %18123, %t372
  %18125 = extractelement <4 x i32> %18124, i32 0
  %18126 = sext i32 %18125 to i64
  %18127 = getelementptr inbounds i16, i16* %input43288, i64 %18126
  %18128 = load i16, i16* %18127, align 2, !tbaa !386
  %18129 = insertelement <4 x i16> undef, i16 %18128, i32 0
  %18130 = extractelement <4 x i32> %18124, i32 1
  %18131 = sext i32 %18130 to i64
  %18132 = getelementptr inbounds i16, i16* %input43288, i64 %18131
  %18133 = load i16, i16* %18132, align 2, !tbaa !386
  %18134 = insertelement <4 x i16> %18129, i16 %18133, i32 1
  %18135 = extractelement <4 x i32> %18124, i32 2
  %18136 = sext i32 %18135 to i64
  %18137 = getelementptr inbounds i16, i16* %input43288, i64 %18136
  %18138 = load i16, i16* %18137, align 2, !tbaa !386
  %18139 = insertelement <4 x i16> %18134, i16 %18138, i32 2
  %18140 = extractelement <4 x i32> %18124, i32 3
  %18141 = sext i32 %18140 to i64
  %18142 = getelementptr inbounds i16, i16* %input43288, i64 %18141
  %18143 = load i16, i16* %18142, align 2, !tbaa !386
  %18144 = insertelement <4 x i16> %18139, i16 %18143, i32 3
  %18145 = add nsw i32 %blur_x.s0.x.v2.base.s122, -11
  %18146 = insertelement <4 x i32> undef, i32 %18145, i32 0
  %18147 = shufflevector <4 x i32> %18146, <4 x i32> undef, <4 x i32> zeroinitializer
  %18148 = add nsw <4 x i32> %18147, <i32 0, i32 1, i32 2, i32 3>
  %18149 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %18148, <4 x i32> %90) #11
  %18150 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %18149, <4 x i32> %92) #11
  %18151 = add <4 x i32> %18150, %t372
  %18152 = extractelement <4 x i32> %18151, i32 0
  %18153 = sext i32 %18152 to i64
  %18154 = getelementptr inbounds i16, i16* %input43288, i64 %18153
  %18155 = load i16, i16* %18154, align 2, !tbaa !386
  %18156 = insertelement <4 x i16> undef, i16 %18155, i32 0
  %18157 = extractelement <4 x i32> %18151, i32 1
  %18158 = sext i32 %18157 to i64
  %18159 = getelementptr inbounds i16, i16* %input43288, i64 %18158
  %18160 = load i16, i16* %18159, align 2, !tbaa !386
  %18161 = insertelement <4 x i16> %18156, i16 %18160, i32 1
  %18162 = extractelement <4 x i32> %18151, i32 2
  %18163 = sext i32 %18162 to i64
  %18164 = getelementptr inbounds i16, i16* %input43288, i64 %18163
  %18165 = load i16, i16* %18164, align 2, !tbaa !386
  %18166 = insertelement <4 x i16> %18161, i16 %18165, i32 2
  %18167 = extractelement <4 x i32> %18151, i32 3
  %18168 = sext i32 %18167 to i64
  %18169 = getelementptr inbounds i16, i16* %input43288, i64 %18168
  %18170 = load i16, i16* %18169, align 2, !tbaa !386
  %18171 = insertelement <4 x i16> %18166, i16 %18170, i32 3
  %18172 = add nsw i32 %blur_x.s0.x.v2.base.s122, -12
  %18173 = insertelement <4 x i32> undef, i32 %18172, i32 0
  %18174 = shufflevector <4 x i32> %18173, <4 x i32> undef, <4 x i32> zeroinitializer
  %18175 = add nsw <4 x i32> %18174, <i32 0, i32 1, i32 2, i32 3>
  %18176 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %18175, <4 x i32> %90) #11
  %18177 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %18176, <4 x i32> %92) #11
  %18178 = add <4 x i32> %18177, %t372
  %18179 = extractelement <4 x i32> %18178, i32 0
  %18180 = sext i32 %18179 to i64
  %18181 = getelementptr inbounds i16, i16* %input43288, i64 %18180
  %18182 = load i16, i16* %18181, align 2, !tbaa !386
  %18183 = insertelement <4 x i16> undef, i16 %18182, i32 0
  %18184 = extractelement <4 x i32> %18178, i32 1
  %18185 = sext i32 %18184 to i64
  %18186 = getelementptr inbounds i16, i16* %input43288, i64 %18185
  %18187 = load i16, i16* %18186, align 2, !tbaa !386
  %18188 = insertelement <4 x i16> %18183, i16 %18187, i32 1
  %18189 = extractelement <4 x i32> %18178, i32 2
  %18190 = sext i32 %18189 to i64
  %18191 = getelementptr inbounds i16, i16* %input43288, i64 %18190
  %18192 = load i16, i16* %18191, align 2, !tbaa !386
  %18193 = insertelement <4 x i16> %18188, i16 %18192, i32 2
  %18194 = extractelement <4 x i32> %18178, i32 3
  %18195 = sext i32 %18194 to i64
  %18196 = getelementptr inbounds i16, i16* %input43288, i64 %18195
  %18197 = load i16, i16* %18196, align 2, !tbaa !386
  %18198 = insertelement <4 x i16> %18193, i16 %18197, i32 3
  %18199 = add nsw i32 %blur_x.s0.x.v2.base.s122, -14
  %18200 = insertelement <4 x i32> undef, i32 %18199, i32 0
  %18201 = shufflevector <4 x i32> %18200, <4 x i32> undef, <4 x i32> zeroinitializer
  %18202 = add nsw <4 x i32> %18201, <i32 0, i32 1, i32 2, i32 3>
  %18203 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %18202, <4 x i32> %90) #11
  %18204 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %18203, <4 x i32> %92) #11
  %18205 = add <4 x i32> %18204, %t372
  %18206 = extractelement <4 x i32> %18205, i32 0
  %18207 = sext i32 %18206 to i64
  %18208 = getelementptr inbounds i16, i16* %input43288, i64 %18207
  %18209 = load i16, i16* %18208, align 2, !tbaa !386
  %18210 = insertelement <4 x i16> undef, i16 %18209, i32 0
  %18211 = extractelement <4 x i32> %18205, i32 1
  %18212 = sext i32 %18211 to i64
  %18213 = getelementptr inbounds i16, i16* %input43288, i64 %18212
  %18214 = load i16, i16* %18213, align 2, !tbaa !386
  %18215 = insertelement <4 x i16> %18210, i16 %18214, i32 1
  %18216 = extractelement <4 x i32> %18205, i32 2
  %18217 = sext i32 %18216 to i64
  %18218 = getelementptr inbounds i16, i16* %input43288, i64 %18217
  %18219 = load i16, i16* %18218, align 2, !tbaa !386
  %18220 = insertelement <4 x i16> %18215, i16 %18219, i32 2
  %18221 = extractelement <4 x i32> %18205, i32 3
  %18222 = sext i32 %18221 to i64
  %18223 = getelementptr inbounds i16, i16* %input43288, i64 %18222
  %18224 = load i16, i16* %18223, align 2, !tbaa !386
  %18225 = insertelement <4 x i16> %18220, i16 %18224, i32 3
  %18226 = add nsw i32 %blur_x.s0.x.v2.base.s122, -10
  %18227 = insertelement <4 x i32> undef, i32 %18226, i32 0
  %18228 = shufflevector <4 x i32> %18227, <4 x i32> undef, <4 x i32> zeroinitializer
  %18229 = add nsw <4 x i32> %18228, <i32 0, i32 1, i32 2, i32 3>
  %18230 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %18229, <4 x i32> %90) #11
  %18231 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %18230, <4 x i32> %92) #11
  %18232 = add <4 x i32> %18231, %t372
  %18233 = extractelement <4 x i32> %18232, i32 0
  %18234 = sext i32 %18233 to i64
  %18235 = getelementptr inbounds i16, i16* %input43288, i64 %18234
  %18236 = load i16, i16* %18235, align 2, !tbaa !386
  %18237 = insertelement <4 x i16> undef, i16 %18236, i32 0
  %18238 = extractelement <4 x i32> %18232, i32 1
  %18239 = sext i32 %18238 to i64
  %18240 = getelementptr inbounds i16, i16* %input43288, i64 %18239
  %18241 = load i16, i16* %18240, align 2, !tbaa !386
  %18242 = insertelement <4 x i16> %18237, i16 %18241, i32 1
  %18243 = extractelement <4 x i32> %18232, i32 2
  %18244 = sext i32 %18243 to i64
  %18245 = getelementptr inbounds i16, i16* %input43288, i64 %18244
  %18246 = load i16, i16* %18245, align 2, !tbaa !386
  %18247 = insertelement <4 x i16> %18242, i16 %18246, i32 2
  %18248 = extractelement <4 x i32> %18232, i32 3
  %18249 = sext i32 %18248 to i64
  %18250 = getelementptr inbounds i16, i16* %input43288, i64 %18249
  %18251 = load i16, i16* %18250, align 2, !tbaa !386
  %18252 = insertelement <4 x i16> %18247, i16 %18251, i32 3
  %18253 = add nsw i32 %blur_x.s0.x.v2.base.s122, -8
  %18254 = insertelement <4 x i32> undef, i32 %18253, i32 0
  %18255 = shufflevector <4 x i32> %18254, <4 x i32> undef, <4 x i32> zeroinitializer
  %18256 = add nsw <4 x i32> %18255, <i32 0, i32 1, i32 2, i32 3>
  %18257 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %18256, <4 x i32> %90) #11
  %18258 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %18257, <4 x i32> %92) #11
  %18259 = add <4 x i32> %18258, %t372
  %18260 = extractelement <4 x i32> %18259, i32 0
  %18261 = sext i32 %18260 to i64
  %18262 = getelementptr inbounds i16, i16* %input43288, i64 %18261
  %18263 = load i16, i16* %18262, align 2, !tbaa !386
  %18264 = insertelement <4 x i16> undef, i16 %18263, i32 0
  %18265 = extractelement <4 x i32> %18259, i32 1
  %18266 = sext i32 %18265 to i64
  %18267 = getelementptr inbounds i16, i16* %input43288, i64 %18266
  %18268 = load i16, i16* %18267, align 2, !tbaa !386
  %18269 = insertelement <4 x i16> %18264, i16 %18268, i32 1
  %18270 = extractelement <4 x i32> %18259, i32 2
  %18271 = sext i32 %18270 to i64
  %18272 = getelementptr inbounds i16, i16* %input43288, i64 %18271
  %18273 = load i16, i16* %18272, align 2, !tbaa !386
  %18274 = insertelement <4 x i16> %18269, i16 %18273, i32 2
  %18275 = extractelement <4 x i32> %18259, i32 3
  %18276 = sext i32 %18275 to i64
  %18277 = getelementptr inbounds i16, i16* %input43288, i64 %18276
  %18278 = load i16, i16* %18277, align 2, !tbaa !386
  %18279 = insertelement <4 x i16> %18274, i16 %18278, i32 3
  %18280 = add nsw i32 %blur_x.s0.x.v2.base.s122, -13
  %18281 = insertelement <4 x i32> undef, i32 %18280, i32 0
  %18282 = shufflevector <4 x i32> %18281, <4 x i32> undef, <4 x i32> zeroinitializer
  %18283 = add nsw <4 x i32> %18282, <i32 0, i32 1, i32 2, i32 3>
  %18284 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %18283, <4 x i32> %90) #11
  %18285 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %18284, <4 x i32> %92) #11
  %18286 = add <4 x i32> %18285, %t372
  %18287 = extractelement <4 x i32> %18286, i32 0
  %18288 = sext i32 %18287 to i64
  %18289 = getelementptr inbounds i16, i16* %input43288, i64 %18288
  %18290 = load i16, i16* %18289, align 2, !tbaa !386
  %18291 = insertelement <4 x i16> undef, i16 %18290, i32 0
  %18292 = extractelement <4 x i32> %18286, i32 1
  %18293 = sext i32 %18292 to i64
  %18294 = getelementptr inbounds i16, i16* %input43288, i64 %18293
  %18295 = load i16, i16* %18294, align 2, !tbaa !386
  %18296 = insertelement <4 x i16> %18291, i16 %18295, i32 1
  %18297 = extractelement <4 x i32> %18286, i32 2
  %18298 = sext i32 %18297 to i64
  %18299 = getelementptr inbounds i16, i16* %input43288, i64 %18298
  %18300 = load i16, i16* %18299, align 2, !tbaa !386
  %18301 = insertelement <4 x i16> %18296, i16 %18300, i32 2
  %18302 = extractelement <4 x i32> %18286, i32 3
  %18303 = sext i32 %18302 to i64
  %18304 = getelementptr inbounds i16, i16* %input43288, i64 %18303
  %18305 = load i16, i16* %18304, align 2, !tbaa !386
  %18306 = insertelement <4 x i16> %18301, i16 %18305, i32 3
  %18307 = add nsw i32 %blur_x.s0.x.v2.base.s122, -9
  %18308 = insertelement <4 x i32> undef, i32 %18307, i32 0
  %18309 = shufflevector <4 x i32> %18308, <4 x i32> undef, <4 x i32> zeroinitializer
  %18310 = add nsw <4 x i32> %18309, <i32 0, i32 1, i32 2, i32 3>
  %18311 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %18310, <4 x i32> %90) #11
  %18312 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %18311, <4 x i32> %92) #11
  %18313 = add <4 x i32> %18312, %t372
  %18314 = extractelement <4 x i32> %18313, i32 0
  %18315 = sext i32 %18314 to i64
  %18316 = getelementptr inbounds i16, i16* %input43288, i64 %18315
  %18317 = load i16, i16* %18316, align 2, !tbaa !386
  %18318 = insertelement <4 x i16> undef, i16 %18317, i32 0
  %18319 = extractelement <4 x i32> %18313, i32 1
  %18320 = sext i32 %18319 to i64
  %18321 = getelementptr inbounds i16, i16* %input43288, i64 %18320
  %18322 = load i16, i16* %18321, align 2, !tbaa !386
  %18323 = insertelement <4 x i16> %18318, i16 %18322, i32 1
  %18324 = extractelement <4 x i32> %18313, i32 2
  %18325 = sext i32 %18324 to i64
  %18326 = getelementptr inbounds i16, i16* %input43288, i64 %18325
  %18327 = load i16, i16* %18326, align 2, !tbaa !386
  %18328 = insertelement <4 x i16> %18323, i16 %18327, i32 2
  %18329 = extractelement <4 x i32> %18313, i32 3
  %18330 = sext i32 %18329 to i64
  %18331 = getelementptr inbounds i16, i16* %input43288, i64 %18330
  %18332 = load i16, i16* %18331, align 2, !tbaa !386
  %18333 = insertelement <4 x i16> %18328, i16 %18332, i32 3
  %18334 = add <4 x i16> %18144, %18046
  %18335 = add <4 x i16> %18334, %18198
  %18336 = add <4 x i16> %18335, %18225
  %18337 = add <4 x i16> %18336, %18306
  %18338 = add <4 x i16> %18198, %18171
  %18339 = add <4 x i16> %18338, %18252
  %18340 = add <4 x i16> %18339, %18279
  %18341 = add <4 x i16> %18340, %18333
  %18342 = shufflevector <4 x i16> %18337, <4 x i16> %18341, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %18343 = zext <8 x i16> %18342 to <8 x i32>
  %18344 = mul nuw <8 x i32> %18343, <i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429>
  %18345 = lshr <8 x i32> %18344, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %18346 = shufflevector <8 x i32> %18345, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %18347 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %18346)
  %18348 = shufflevector <8 x i32> %18345, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %18349 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %18348)
  %18350 = shufflevector <4 x i16> %18347, <4 x i16> %18349, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %18351 = add nsw i32 %blur_x.s0.x.v2.base.s122, -7
  %18352 = insertelement <4 x i32> undef, i32 %18351, i32 0
  %18353 = shufflevector <4 x i32> %18352, <4 x i32> undef, <4 x i32> zeroinitializer
  %18354 = add nsw <4 x i32> %18353, <i32 0, i32 1, i32 2, i32 3>
  %18355 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %18354, <4 x i32> %90) #11
  %18356 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %18355, <4 x i32> %92) #11
  %18357 = add <4 x i32> %18356, %t372
  %18358 = extractelement <4 x i32> %18357, i32 0
  %18359 = sext i32 %18358 to i64
  %18360 = getelementptr inbounds i16, i16* %input43288, i64 %18359
  %18361 = load i16, i16* %18360, align 2, !tbaa !386
  %18362 = insertelement <4 x i16> undef, i16 %18361, i32 0
  %18363 = extractelement <4 x i32> %18357, i32 1
  %18364 = sext i32 %18363 to i64
  %18365 = getelementptr inbounds i16, i16* %input43288, i64 %18364
  %18366 = load i16, i16* %18365, align 2, !tbaa !386
  %18367 = insertelement <4 x i16> %18362, i16 %18366, i32 1
  %18368 = extractelement <4 x i32> %18357, i32 2
  %18369 = sext i32 %18368 to i64
  %18370 = getelementptr inbounds i16, i16* %input43288, i64 %18369
  %18371 = load i16, i16* %18370, align 2, !tbaa !386
  %18372 = insertelement <4 x i16> %18367, i16 %18371, i32 2
  %18373 = extractelement <4 x i32> %18357, i32 3
  %18374 = sext i32 %18373 to i64
  %18375 = getelementptr inbounds i16, i16* %input43288, i64 %18374
  %18376 = load i16, i16* %18375, align 2, !tbaa !386
  %18377 = insertelement <4 x i16> %18372, i16 %18376, i32 3
  %18378 = add nsw i32 %blur_x.s0.x.v2.base.s122, -3
  %18379 = insertelement <4 x i32> undef, i32 %18378, i32 0
  %18380 = shufflevector <4 x i32> %18379, <4 x i32> undef, <4 x i32> zeroinitializer
  %18381 = add nsw <4 x i32> %18380, <i32 0, i32 1, i32 2, i32 3>
  %18382 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %18381, <4 x i32> %90) #11
  %18383 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %18382, <4 x i32> %92) #11
  %18384 = add <4 x i32> %18383, %t372
  %18385 = extractelement <4 x i32> %18384, i32 0
  %18386 = sext i32 %18385 to i64
  %18387 = getelementptr inbounds i16, i16* %input43288, i64 %18386
  %18388 = load i16, i16* %18387, align 2, !tbaa !386
  %18389 = insertelement <4 x i16> undef, i16 %18388, i32 0
  %18390 = extractelement <4 x i32> %18384, i32 1
  %18391 = sext i32 %18390 to i64
  %18392 = getelementptr inbounds i16, i16* %input43288, i64 %18391
  %18393 = load i16, i16* %18392, align 2, !tbaa !386
  %18394 = insertelement <4 x i16> %18389, i16 %18393, i32 1
  %18395 = extractelement <4 x i32> %18384, i32 2
  %18396 = sext i32 %18395 to i64
  %18397 = getelementptr inbounds i16, i16* %input43288, i64 %18396
  %18398 = load i16, i16* %18397, align 2, !tbaa !386
  %18399 = insertelement <4 x i16> %18394, i16 %18398, i32 2
  %18400 = extractelement <4 x i32> %18384, i32 3
  %18401 = sext i32 %18400 to i64
  %18402 = getelementptr inbounds i16, i16* %input43288, i64 %18401
  %18403 = load i16, i16* %18402, align 2, !tbaa !386
  %18404 = insertelement <4 x i16> %18399, i16 %18403, i32 3
  %18405 = add nsw i32 %blur_x.s0.x.v2.base.s122, -4
  %18406 = insertelement <4 x i32> undef, i32 %18405, i32 0
  %18407 = shufflevector <4 x i32> %18406, <4 x i32> undef, <4 x i32> zeroinitializer
  %18408 = add nsw <4 x i32> %18407, <i32 0, i32 1, i32 2, i32 3>
  %18409 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %18408, <4 x i32> %90) #11
  %18410 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %18409, <4 x i32> %92) #11
  %18411 = add <4 x i32> %18410, %t372
  %18412 = extractelement <4 x i32> %18411, i32 0
  %18413 = sext i32 %18412 to i64
  %18414 = getelementptr inbounds i16, i16* %input43288, i64 %18413
  %18415 = load i16, i16* %18414, align 2, !tbaa !386
  %18416 = insertelement <4 x i16> undef, i16 %18415, i32 0
  %18417 = extractelement <4 x i32> %18411, i32 1
  %18418 = sext i32 %18417 to i64
  %18419 = getelementptr inbounds i16, i16* %input43288, i64 %18418
  %18420 = load i16, i16* %18419, align 2, !tbaa !386
  %18421 = insertelement <4 x i16> %18416, i16 %18420, i32 1
  %18422 = extractelement <4 x i32> %18411, i32 2
  %18423 = sext i32 %18422 to i64
  %18424 = getelementptr inbounds i16, i16* %input43288, i64 %18423
  %18425 = load i16, i16* %18424, align 2, !tbaa !386
  %18426 = insertelement <4 x i16> %18421, i16 %18425, i32 2
  %18427 = extractelement <4 x i32> %18411, i32 3
  %18428 = sext i32 %18427 to i64
  %18429 = getelementptr inbounds i16, i16* %input43288, i64 %18428
  %18430 = load i16, i16* %18429, align 2, !tbaa !386
  %18431 = insertelement <4 x i16> %18426, i16 %18430, i32 3
  %18432 = add nsw i32 %blur_x.s0.x.v2.base.s122, -6
  %18433 = insertelement <4 x i32> undef, i32 %18432, i32 0
  %18434 = shufflevector <4 x i32> %18433, <4 x i32> undef, <4 x i32> zeroinitializer
  %18435 = add nsw <4 x i32> %18434, <i32 0, i32 1, i32 2, i32 3>
  %18436 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %18435, <4 x i32> %90) #11
  %18437 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %18436, <4 x i32> %92) #11
  %18438 = add <4 x i32> %18437, %t372
  %18439 = extractelement <4 x i32> %18438, i32 0
  %18440 = sext i32 %18439 to i64
  %18441 = getelementptr inbounds i16, i16* %input43288, i64 %18440
  %18442 = load i16, i16* %18441, align 2, !tbaa !386
  %18443 = insertelement <4 x i16> undef, i16 %18442, i32 0
  %18444 = extractelement <4 x i32> %18438, i32 1
  %18445 = sext i32 %18444 to i64
  %18446 = getelementptr inbounds i16, i16* %input43288, i64 %18445
  %18447 = load i16, i16* %18446, align 2, !tbaa !386
  %18448 = insertelement <4 x i16> %18443, i16 %18447, i32 1
  %18449 = extractelement <4 x i32> %18438, i32 2
  %18450 = sext i32 %18449 to i64
  %18451 = getelementptr inbounds i16, i16* %input43288, i64 %18450
  %18452 = load i16, i16* %18451, align 2, !tbaa !386
  %18453 = insertelement <4 x i16> %18448, i16 %18452, i32 2
  %18454 = extractelement <4 x i32> %18438, i32 3
  %18455 = sext i32 %18454 to i64
  %18456 = getelementptr inbounds i16, i16* %input43288, i64 %18455
  %18457 = load i16, i16* %18456, align 2, !tbaa !386
  %18458 = insertelement <4 x i16> %18453, i16 %18457, i32 3
  %18459 = add nsw i32 %blur_x.s0.x.v2.base.s122, -2
  %18460 = insertelement <4 x i32> undef, i32 %18459, i32 0
  %18461 = shufflevector <4 x i32> %18460, <4 x i32> undef, <4 x i32> zeroinitializer
  %18462 = add nsw <4 x i32> %18461, <i32 0, i32 1, i32 2, i32 3>
  %18463 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %18462, <4 x i32> %90) #11
  %18464 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %18463, <4 x i32> %92) #11
  %18465 = add <4 x i32> %18464, %t372
  %18466 = extractelement <4 x i32> %18465, i32 0
  %18467 = sext i32 %18466 to i64
  %18468 = getelementptr inbounds i16, i16* %input43288, i64 %18467
  %18469 = load i16, i16* %18468, align 2, !tbaa !386
  %18470 = insertelement <4 x i16> undef, i16 %18469, i32 0
  %18471 = extractelement <4 x i32> %18465, i32 1
  %18472 = sext i32 %18471 to i64
  %18473 = getelementptr inbounds i16, i16* %input43288, i64 %18472
  %18474 = load i16, i16* %18473, align 2, !tbaa !386
  %18475 = insertelement <4 x i16> %18470, i16 %18474, i32 1
  %18476 = extractelement <4 x i32> %18465, i32 2
  %18477 = sext i32 %18476 to i64
  %18478 = getelementptr inbounds i16, i16* %input43288, i64 %18477
  %18479 = load i16, i16* %18478, align 2, !tbaa !386
  %18480 = insertelement <4 x i16> %18475, i16 %18479, i32 2
  %18481 = extractelement <4 x i32> %18465, i32 3
  %18482 = sext i32 %18481 to i64
  %18483 = getelementptr inbounds i16, i16* %input43288, i64 %18482
  %18484 = load i16, i16* %18483, align 2, !tbaa !386
  %18485 = insertelement <4 x i16> %18480, i16 %18484, i32 3
  %18486 = insertelement <4 x i32> undef, i32 %blur_x.s0.x.v2.base.s122, i32 0
  %18487 = shufflevector <4 x i32> %18486, <4 x i32> undef, <4 x i32> zeroinitializer
  %18488 = add nsw <4 x i32> %18487, <i32 0, i32 1, i32 2, i32 3>
  %18489 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %18488, <4 x i32> %90) #11
  %18490 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %18489, <4 x i32> %92) #11
  %18491 = add <4 x i32> %18490, %t372
  %18492 = extractelement <4 x i32> %18491, i32 0
  %18493 = sext i32 %18492 to i64
  %18494 = getelementptr inbounds i16, i16* %input43288, i64 %18493
  %18495 = load i16, i16* %18494, align 2, !tbaa !386
  %18496 = insertelement <4 x i16> undef, i16 %18495, i32 0
  %18497 = extractelement <4 x i32> %18491, i32 1
  %18498 = sext i32 %18497 to i64
  %18499 = getelementptr inbounds i16, i16* %input43288, i64 %18498
  %18500 = load i16, i16* %18499, align 2, !tbaa !386
  %18501 = insertelement <4 x i16> %18496, i16 %18500, i32 1
  %18502 = extractelement <4 x i32> %18491, i32 2
  %18503 = sext i32 %18502 to i64
  %18504 = getelementptr inbounds i16, i16* %input43288, i64 %18503
  %18505 = load i16, i16* %18504, align 2, !tbaa !386
  %18506 = insertelement <4 x i16> %18501, i16 %18505, i32 2
  %18507 = extractelement <4 x i32> %18491, i32 3
  %18508 = sext i32 %18507 to i64
  %18509 = getelementptr inbounds i16, i16* %input43288, i64 %18508
  %18510 = load i16, i16* %18509, align 2, !tbaa !386
  %18511 = insertelement <4 x i16> %18506, i16 %18510, i32 3
  %18512 = add nsw i32 %blur_x.s0.x.v2.base.s122, -5
  %18513 = insertelement <4 x i32> undef, i32 %18512, i32 0
  %18514 = shufflevector <4 x i32> %18513, <4 x i32> undef, <4 x i32> zeroinitializer
  %18515 = add nsw <4 x i32> %18514, <i32 0, i32 1, i32 2, i32 3>
  %18516 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %18515, <4 x i32> %90) #11
  %18517 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %18516, <4 x i32> %92) #11
  %18518 = add <4 x i32> %18517, %t372
  %18519 = extractelement <4 x i32> %18518, i32 0
  %18520 = sext i32 %18519 to i64
  %18521 = getelementptr inbounds i16, i16* %input43288, i64 %18520
  %18522 = load i16, i16* %18521, align 2, !tbaa !386
  %18523 = insertelement <4 x i16> undef, i16 %18522, i32 0
  %18524 = extractelement <4 x i32> %18518, i32 1
  %18525 = sext i32 %18524 to i64
  %18526 = getelementptr inbounds i16, i16* %input43288, i64 %18525
  %18527 = load i16, i16* %18526, align 2, !tbaa !386
  %18528 = insertelement <4 x i16> %18523, i16 %18527, i32 1
  %18529 = extractelement <4 x i32> %18518, i32 2
  %18530 = sext i32 %18529 to i64
  %18531 = getelementptr inbounds i16, i16* %input43288, i64 %18530
  %18532 = load i16, i16* %18531, align 2, !tbaa !386
  %18533 = insertelement <4 x i16> %18528, i16 %18532, i32 2
  %18534 = extractelement <4 x i32> %18518, i32 3
  %18535 = sext i32 %18534 to i64
  %18536 = getelementptr inbounds i16, i16* %input43288, i64 %18535
  %18537 = load i16, i16* %18536, align 2, !tbaa !386
  %18538 = insertelement <4 x i16> %18533, i16 %18537, i32 3
  %18539 = add nsw i32 %blur_x.s0.x.v2.base.s122, -1
  %18540 = insertelement <4 x i32> undef, i32 %18539, i32 0
  %18541 = shufflevector <4 x i32> %18540, <4 x i32> undef, <4 x i32> zeroinitializer
  %18542 = add nsw <4 x i32> %18541, <i32 0, i32 1, i32 2, i32 3>
  %18543 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %18542, <4 x i32> %90) #11
  %18544 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %18543, <4 x i32> %92) #11
  %18545 = add <4 x i32> %18544, %t372
  %18546 = extractelement <4 x i32> %18545, i32 0
  %18547 = sext i32 %18546 to i64
  %18548 = getelementptr inbounds i16, i16* %input43288, i64 %18547
  %18549 = load i16, i16* %18548, align 2, !tbaa !386
  %18550 = insertelement <4 x i16> undef, i16 %18549, i32 0
  %18551 = extractelement <4 x i32> %18545, i32 1
  %18552 = sext i32 %18551 to i64
  %18553 = getelementptr inbounds i16, i16* %input43288, i64 %18552
  %18554 = load i16, i16* %18553, align 2, !tbaa !386
  %18555 = insertelement <4 x i16> %18550, i16 %18554, i32 1
  %18556 = extractelement <4 x i32> %18545, i32 2
  %18557 = sext i32 %18556 to i64
  %18558 = getelementptr inbounds i16, i16* %input43288, i64 %18557
  %18559 = load i16, i16* %18558, align 2, !tbaa !386
  %18560 = insertelement <4 x i16> %18555, i16 %18559, i32 2
  %18561 = extractelement <4 x i32> %18545, i32 3
  %18562 = sext i32 %18561 to i64
  %18563 = getelementptr inbounds i16, i16* %input43288, i64 %18562
  %18564 = load i16, i16* %18563, align 2, !tbaa !386
  %18565 = insertelement <4 x i16> %18560, i16 %18564, i32 3
  %18566 = add <4 x i16> %18377, %18279
  %18567 = add <4 x i16> %18566, %18431
  %18568 = add <4 x i16> %18567, %18458
  %18569 = add <4 x i16> %18568, %18538
  %18570 = add <4 x i16> %18431, %18404
  %18571 = add <4 x i16> %18570, %18485
  %18572 = add <4 x i16> %18571, %18511
  %18573 = add <4 x i16> %18572, %18565
  %18574 = shufflevector <4 x i16> %18569, <4 x i16> %18573, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %18575 = zext <8 x i16> %18574 to <8 x i32>
  %18576 = mul nuw <8 x i32> %18575, <i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429>
  %18577 = lshr <8 x i32> %18576, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %18578 = shufflevector <8 x i32> %18577, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %18579 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %18578)
  %18580 = shufflevector <8 x i32> %18577, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %18581 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %18580)
  %18582 = shufflevector <4 x i16> %18579, <4 x i16> %18581, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %18583 = shufflevector <16 x i16> %18582, <16 x i16> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18584 = shufflevector <32 x i16> %18583, <32 x i16> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18585 = sext i32 %blur_x.s0.x.v2.base.s122 to i64
  %18586 = add nsw i64 %18585, %16690
  %18587 = getelementptr inbounds i16, i16* %blur_x61, i64 %18586
  %18588 = bitcast i16* %18587 to <8 x i16>*
  store <8 x i16> %16952, <8 x i16>* %18588, align 2, !tbaa !389
  %18589 = getelementptr inbounds i16, i16* %18587, i64 8
  %18590 = bitcast i16* %18589 to <8 x i16>*
  store <8 x i16> %17185, <8 x i16>* %18590, align 2, !tbaa !389
  %18591 = getelementptr inbounds i16, i16* %18587, i64 16
  %18592 = bitcast i16* %18591 to <8 x i16>*
  store <8 x i16> %17418, <8 x i16>* %18592, align 2, !tbaa !389
  %18593 = getelementptr inbounds i16, i16* %18587, i64 24
  %18594 = bitcast i16* %18593 to <8 x i16>*
  store <8 x i16> %17651, <8 x i16>* %18594, align 2, !tbaa !389
  %18595 = getelementptr inbounds i16, i16* %18587, i64 32
  %18596 = bitcast i16* %18595 to <8 x i16>*
  store <8 x i16> %17884, <8 x i16>* %18596, align 2, !tbaa !389
  %18597 = getelementptr inbounds i16, i16* %18587, i64 40
  %18598 = bitcast i16* %18597 to <8 x i16>*
  store <8 x i16> %18117, <8 x i16>* %18598, align 2, !tbaa !389
  %18599 = getelementptr inbounds i16, i16* %18587, i64 48
  %18600 = bitcast i16* %18599 to <8 x i16>*
  store <8 x i16> %18350, <8 x i16>* %18600, align 2, !tbaa !389
  %18601 = shufflevector <64 x i16> %18584, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %18602 = getelementptr inbounds i16, i16* %18587, i64 56
  %18603 = bitcast i16* %18602 to <8 x i16>*
  store <8 x i16> %18601, <8 x i16>* %18603, align 2, !tbaa !389
  %18604 = add nuw nsw i32 %blur_x.s0.x.x121, 1
  %.not183 = icmp eq i32 %18604, %t31258
  br i1 %.not183, label %"end for blur_x.s0.x.x120", label %"for blur_x.s0.x.x119"

"end for blur_x.s0.x.x120":                       ; preds = %"for blur_x.s0.x.x119", %"for blur_x.s0.y.rebased115"
  %18605 = add nuw nsw i32 %blur_x.s0.y.rebased117, 1
  %.not182 = icmp eq i32 %blur_x.s0.y.rebased117, %a83.op
  br i1 %.not182, label %"end for blur_x.s0.y.rebased116", label %"for blur_x.s0.y.rebased115"

after_bb124:                                      ; preds = %"for blur_y.s0.x.x161.preheader", %"end for blur_y.s0.x.x157", %"end for blur_x.s0.y.rebased116"
  %indvars.iv.next284 = add nuw nsw i64 %indvars.iv283, 1
  %.not173 = icmp eq i64 %indvars.iv.next284, 33
  br i1 %.not173, label %"end for blur_y.s0.y.yi.yi.$n.rebased68", label %"for blur_y.s0.y.yi.yi.$n.rebased67"

"consume blur_x127":                              ; preds = %"end for blur_x.s0.y.rebased116"
  br i1 %96, label %"for blur_y.s0.x.x129.preheader", label %"end for blur_y.s0.x.x130", !prof !385

"for blur_y.s0.x.x129.preheader":                 ; preds = %"consume blur_x127"
  %18606 = add nsw i32 %a35, 5
  %18607 = and i32 %18606, 7
  %18608 = mul nsw i32 %a27, %18607
  %18609 = and i32 %b36, 7
  %18610 = mul nsw i32 %a27, %18609
  %18611 = add nsw i32 %a35, 6
  %18612 = and i32 %18611, 7
  %18613 = mul nsw i32 %a27, %18612
  %18614 = and i32 %a35, 7
  %18615 = mul nsw i32 %a27, %18614
  %18616 = add nsw i32 %a35, 7
  %18617 = and i32 %18616, 7
  %18618 = mul nsw i32 %a27, %18617
  %18619 = sext i32 %a35 to i64
  %18620 = add nsw i64 %18619, -4
  %18621 = mul nsw i64 %18620, %97
  %18622 = add nsw i64 %18621, %98
  %18623 = sext i32 %18608 to i64
  %18624 = sext i32 %18610 to i64
  %18625 = sext i32 %18613 to i64
  %18626 = sext i32 %18615 to i64
  %18627 = sext i32 %18618 to i64
  br label %"for blur_y.s0.x.x129"

"for blur_y.s0.x.x129":                           ; preds = %"for blur_y.s0.x.x129.preheader", %"for blur_y.s0.x.x129"
  %indvars.iv251 = phi i64 [ 0, %"for blur_y.s0.x.x129.preheader" ], [ %indvars.iv.next252, %"for blur_y.s0.x.x129" ]
  %18628 = shl nsw i64 %indvars.iv251, 6
  %18629 = sub nsw i64 %18628, %103
  %18630 = add nsw i64 %18629, %18623
  %18631 = add nsw i64 %18629, %18624
  %18632 = add nsw i64 %18629, %18625
  %18633 = add nsw i64 %18629, %18626
  %18634 = add nsw i64 %18629, %18627
  %18635 = getelementptr inbounds i16, i16* %blur_x61, i64 %18630
  %18636 = getelementptr inbounds i16, i16* %18635, i64 64
  %18637 = bitcast i16* %18636 to <8 x i16>*
  %18638 = load <8 x i16>, <8 x i16>* %18637, align 2, !tbaa !389
  %18639 = getelementptr inbounds i16, i16* %blur_x61, i64 %18631
  %18640 = getelementptr inbounds i16, i16* %18639, i64 64
  %18641 = bitcast i16* %18640 to <8 x i16>*
  %18642 = load <8 x i16>, <8 x i16>* %18641, align 2, !tbaa !389
  %18643 = getelementptr inbounds i16, i16* %blur_x61, i64 %18632
  %18644 = getelementptr inbounds i16, i16* %18643, i64 64
  %18645 = bitcast i16* %18644 to <8 x i16>*
  %18646 = load <8 x i16>, <8 x i16>* %18645, align 2, !tbaa !389
  %18647 = getelementptr inbounds i16, i16* %blur_x61, i64 %18633
  %18648 = getelementptr inbounds i16, i16* %18647, i64 64
  %18649 = bitcast i16* %18648 to <8 x i16>*
  %18650 = load <8 x i16>, <8 x i16>* %18649, align 2, !tbaa !389
  %18651 = getelementptr inbounds i16, i16* %blur_x61, i64 %18634
  %18652 = getelementptr inbounds i16, i16* %18651, i64 64
  %18653 = bitcast i16* %18652 to <8 x i16>*
  %18654 = load <8 x i16>, <8 x i16>* %18653, align 2, !tbaa !389
  %18655 = add <8 x i16> %18642, %18638
  %18656 = add <8 x i16> %18655, %18646
  %18657 = add <8 x i16> %18656, %18650
  %18658 = add <8 x i16> %18657, %18654
  %18659 = zext <8 x i16> %18658 to <8 x i32>
  %18660 = mul nuw <8 x i32> %18659, <i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429>
  %18661 = lshr <8 x i32> %18660, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %18662 = shufflevector <8 x i32> %18661, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %18663 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %18662)
  %18664 = shufflevector <8 x i32> %18661, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %18665 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %18664)
  %18666 = shufflevector <4 x i16> %18663, <4 x i16> %18665, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %18667 = getelementptr inbounds i16, i16* %18635, i64 72
  %18668 = bitcast i16* %18667 to <8 x i16>*
  %18669 = load <8 x i16>, <8 x i16>* %18668, align 2, !tbaa !389
  %18670 = getelementptr inbounds i16, i16* %18639, i64 72
  %18671 = bitcast i16* %18670 to <8 x i16>*
  %18672 = load <8 x i16>, <8 x i16>* %18671, align 2, !tbaa !389
  %18673 = getelementptr inbounds i16, i16* %18643, i64 72
  %18674 = bitcast i16* %18673 to <8 x i16>*
  %18675 = load <8 x i16>, <8 x i16>* %18674, align 2, !tbaa !389
  %18676 = getelementptr inbounds i16, i16* %18647, i64 72
  %18677 = bitcast i16* %18676 to <8 x i16>*
  %18678 = load <8 x i16>, <8 x i16>* %18677, align 2, !tbaa !389
  %18679 = getelementptr inbounds i16, i16* %18651, i64 72
  %18680 = bitcast i16* %18679 to <8 x i16>*
  %18681 = load <8 x i16>, <8 x i16>* %18680, align 2, !tbaa !389
  %18682 = add <8 x i16> %18672, %18669
  %18683 = add <8 x i16> %18682, %18675
  %18684 = add <8 x i16> %18683, %18678
  %18685 = add <8 x i16> %18684, %18681
  %18686 = zext <8 x i16> %18685 to <8 x i32>
  %18687 = mul nuw <8 x i32> %18686, <i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429>
  %18688 = lshr <8 x i32> %18687, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %18689 = shufflevector <8 x i32> %18688, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %18690 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %18689)
  %18691 = shufflevector <8 x i32> %18688, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %18692 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %18691)
  %18693 = shufflevector <4 x i16> %18690, <4 x i16> %18692, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %18694 = getelementptr inbounds i16, i16* %18635, i64 80
  %18695 = bitcast i16* %18694 to <8 x i16>*
  %18696 = load <8 x i16>, <8 x i16>* %18695, align 2, !tbaa !389
  %18697 = getelementptr inbounds i16, i16* %18639, i64 80
  %18698 = bitcast i16* %18697 to <8 x i16>*
  %18699 = load <8 x i16>, <8 x i16>* %18698, align 2, !tbaa !389
  %18700 = getelementptr inbounds i16, i16* %18643, i64 80
  %18701 = bitcast i16* %18700 to <8 x i16>*
  %18702 = load <8 x i16>, <8 x i16>* %18701, align 2, !tbaa !389
  %18703 = getelementptr inbounds i16, i16* %18647, i64 80
  %18704 = bitcast i16* %18703 to <8 x i16>*
  %18705 = load <8 x i16>, <8 x i16>* %18704, align 2, !tbaa !389
  %18706 = getelementptr inbounds i16, i16* %18651, i64 80
  %18707 = bitcast i16* %18706 to <8 x i16>*
  %18708 = load <8 x i16>, <8 x i16>* %18707, align 2, !tbaa !389
  %18709 = add <8 x i16> %18699, %18696
  %18710 = add <8 x i16> %18709, %18702
  %18711 = add <8 x i16> %18710, %18705
  %18712 = add <8 x i16> %18711, %18708
  %18713 = zext <8 x i16> %18712 to <8 x i32>
  %18714 = mul nuw <8 x i32> %18713, <i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429>
  %18715 = lshr <8 x i32> %18714, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %18716 = shufflevector <8 x i32> %18715, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %18717 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %18716)
  %18718 = shufflevector <8 x i32> %18715, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %18719 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %18718)
  %18720 = shufflevector <4 x i16> %18717, <4 x i16> %18719, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %18721 = getelementptr inbounds i16, i16* %18635, i64 88
  %18722 = bitcast i16* %18721 to <8 x i16>*
  %18723 = load <8 x i16>, <8 x i16>* %18722, align 2, !tbaa !389
  %18724 = getelementptr inbounds i16, i16* %18639, i64 88
  %18725 = bitcast i16* %18724 to <8 x i16>*
  %18726 = load <8 x i16>, <8 x i16>* %18725, align 2, !tbaa !389
  %18727 = getelementptr inbounds i16, i16* %18643, i64 88
  %18728 = bitcast i16* %18727 to <8 x i16>*
  %18729 = load <8 x i16>, <8 x i16>* %18728, align 2, !tbaa !389
  %18730 = getelementptr inbounds i16, i16* %18647, i64 88
  %18731 = bitcast i16* %18730 to <8 x i16>*
  %18732 = load <8 x i16>, <8 x i16>* %18731, align 2, !tbaa !389
  %18733 = getelementptr inbounds i16, i16* %18651, i64 88
  %18734 = bitcast i16* %18733 to <8 x i16>*
  %18735 = load <8 x i16>, <8 x i16>* %18734, align 2, !tbaa !389
  %18736 = add <8 x i16> %18726, %18723
  %18737 = add <8 x i16> %18736, %18729
  %18738 = add <8 x i16> %18737, %18732
  %18739 = add <8 x i16> %18738, %18735
  %18740 = zext <8 x i16> %18739 to <8 x i32>
  %18741 = mul nuw <8 x i32> %18740, <i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429>
  %18742 = lshr <8 x i32> %18741, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %18743 = shufflevector <8 x i32> %18742, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %18744 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %18743)
  %18745 = shufflevector <8 x i32> %18742, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %18746 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %18745)
  %18747 = shufflevector <4 x i16> %18744, <4 x i16> %18746, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %18748 = getelementptr inbounds i16, i16* %18635, i64 96
  %18749 = bitcast i16* %18748 to <8 x i16>*
  %18750 = load <8 x i16>, <8 x i16>* %18749, align 2, !tbaa !389
  %18751 = getelementptr inbounds i16, i16* %18639, i64 96
  %18752 = bitcast i16* %18751 to <8 x i16>*
  %18753 = load <8 x i16>, <8 x i16>* %18752, align 2, !tbaa !389
  %18754 = getelementptr inbounds i16, i16* %18643, i64 96
  %18755 = bitcast i16* %18754 to <8 x i16>*
  %18756 = load <8 x i16>, <8 x i16>* %18755, align 2, !tbaa !389
  %18757 = getelementptr inbounds i16, i16* %18647, i64 96
  %18758 = bitcast i16* %18757 to <8 x i16>*
  %18759 = load <8 x i16>, <8 x i16>* %18758, align 2, !tbaa !389
  %18760 = getelementptr inbounds i16, i16* %18651, i64 96
  %18761 = bitcast i16* %18760 to <8 x i16>*
  %18762 = load <8 x i16>, <8 x i16>* %18761, align 2, !tbaa !389
  %18763 = add <8 x i16> %18753, %18750
  %18764 = add <8 x i16> %18763, %18756
  %18765 = add <8 x i16> %18764, %18759
  %18766 = add <8 x i16> %18765, %18762
  %18767 = zext <8 x i16> %18766 to <8 x i32>
  %18768 = mul nuw <8 x i32> %18767, <i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429>
  %18769 = lshr <8 x i32> %18768, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %18770 = shufflevector <8 x i32> %18769, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %18771 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %18770)
  %18772 = shufflevector <8 x i32> %18769, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %18773 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %18772)
  %18774 = shufflevector <4 x i16> %18771, <4 x i16> %18773, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %18775 = getelementptr inbounds i16, i16* %18635, i64 104
  %18776 = bitcast i16* %18775 to <8 x i16>*
  %18777 = load <8 x i16>, <8 x i16>* %18776, align 2, !tbaa !389
  %18778 = getelementptr inbounds i16, i16* %18639, i64 104
  %18779 = bitcast i16* %18778 to <8 x i16>*
  %18780 = load <8 x i16>, <8 x i16>* %18779, align 2, !tbaa !389
  %18781 = getelementptr inbounds i16, i16* %18643, i64 104
  %18782 = bitcast i16* %18781 to <8 x i16>*
  %18783 = load <8 x i16>, <8 x i16>* %18782, align 2, !tbaa !389
  %18784 = getelementptr inbounds i16, i16* %18647, i64 104
  %18785 = bitcast i16* %18784 to <8 x i16>*
  %18786 = load <8 x i16>, <8 x i16>* %18785, align 2, !tbaa !389
  %18787 = getelementptr inbounds i16, i16* %18651, i64 104
  %18788 = bitcast i16* %18787 to <8 x i16>*
  %18789 = load <8 x i16>, <8 x i16>* %18788, align 2, !tbaa !389
  %18790 = add <8 x i16> %18780, %18777
  %18791 = add <8 x i16> %18790, %18783
  %18792 = add <8 x i16> %18791, %18786
  %18793 = add <8 x i16> %18792, %18789
  %18794 = zext <8 x i16> %18793 to <8 x i32>
  %18795 = mul nuw <8 x i32> %18794, <i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429>
  %18796 = lshr <8 x i32> %18795, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %18797 = shufflevector <8 x i32> %18796, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %18798 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %18797)
  %18799 = shufflevector <8 x i32> %18796, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %18800 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %18799)
  %18801 = shufflevector <4 x i16> %18798, <4 x i16> %18800, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %18802 = getelementptr inbounds i16, i16* %18635, i64 112
  %18803 = bitcast i16* %18802 to <8 x i16>*
  %18804 = load <8 x i16>, <8 x i16>* %18803, align 2, !tbaa !389
  %18805 = getelementptr inbounds i16, i16* %18639, i64 112
  %18806 = bitcast i16* %18805 to <8 x i16>*
  %18807 = load <8 x i16>, <8 x i16>* %18806, align 2, !tbaa !389
  %18808 = getelementptr inbounds i16, i16* %18643, i64 112
  %18809 = bitcast i16* %18808 to <8 x i16>*
  %18810 = load <8 x i16>, <8 x i16>* %18809, align 2, !tbaa !389
  %18811 = getelementptr inbounds i16, i16* %18647, i64 112
  %18812 = bitcast i16* %18811 to <8 x i16>*
  %18813 = load <8 x i16>, <8 x i16>* %18812, align 2, !tbaa !389
  %18814 = getelementptr inbounds i16, i16* %18651, i64 112
  %18815 = bitcast i16* %18814 to <8 x i16>*
  %18816 = load <8 x i16>, <8 x i16>* %18815, align 2, !tbaa !389
  %18817 = add <8 x i16> %18807, %18804
  %18818 = add <8 x i16> %18817, %18810
  %18819 = add <8 x i16> %18818, %18813
  %18820 = add <8 x i16> %18819, %18816
  %18821 = zext <8 x i16> %18820 to <8 x i32>
  %18822 = mul nuw <8 x i32> %18821, <i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429>
  %18823 = lshr <8 x i32> %18822, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %18824 = shufflevector <8 x i32> %18823, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %18825 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %18824)
  %18826 = shufflevector <8 x i32> %18823, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %18827 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %18826)
  %18828 = shufflevector <4 x i16> %18825, <4 x i16> %18827, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %18829 = getelementptr inbounds i16, i16* %18635, i64 120
  %18830 = bitcast i16* %18829 to <8 x i16>*
  %18831 = load <8 x i16>, <8 x i16>* %18830, align 2, !tbaa !389
  %18832 = getelementptr inbounds i16, i16* %18639, i64 120
  %18833 = bitcast i16* %18832 to <8 x i16>*
  %18834 = load <8 x i16>, <8 x i16>* %18833, align 2, !tbaa !389
  %18835 = getelementptr inbounds i16, i16* %18643, i64 120
  %18836 = bitcast i16* %18835 to <8 x i16>*
  %18837 = load <8 x i16>, <8 x i16>* %18836, align 2, !tbaa !389
  %18838 = getelementptr inbounds i16, i16* %18647, i64 120
  %18839 = bitcast i16* %18838 to <8 x i16>*
  %18840 = load <8 x i16>, <8 x i16>* %18839, align 2, !tbaa !389
  %18841 = getelementptr inbounds i16, i16* %18651, i64 120
  %18842 = bitcast i16* %18841 to <8 x i16>*
  %18843 = load <8 x i16>, <8 x i16>* %18842, align 2, !tbaa !389
  %18844 = add <8 x i16> %18834, %18831
  %18845 = add <8 x i16> %18844, %18837
  %18846 = add <8 x i16> %18845, %18840
  %18847 = add <8 x i16> %18846, %18843
  %18848 = zext <8 x i16> %18847 to <8 x i32>
  %18849 = mul nuw <8 x i32> %18848, <i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429>
  %18850 = lshr <8 x i32> %18849, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %18851 = shufflevector <8 x i32> %18850, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %18852 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %18851)
  %18853 = shufflevector <8 x i32> %18850, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %18854 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %18853)
  %18855 = shufflevector <4 x i16> %18852, <4 x i16> %18854, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %18856 = shufflevector <16 x i16> %18855, <16 x i16> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18857 = shufflevector <32 x i16> %18856, <32 x i16> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18858 = add nsw i64 %18622, %18628
  %18859 = getelementptr inbounds i16, i16* %blur_y42287, i64 %18858
  %18860 = bitcast i16* %18859 to <8 x i16>*
  store <8 x i16> %18666, <8 x i16>* %18860, align 2, !tbaa !391
  %18861 = getelementptr inbounds i16, i16* %18859, i64 8
  %18862 = bitcast i16* %18861 to <8 x i16>*
  store <8 x i16> %18693, <8 x i16>* %18862, align 2, !tbaa !391
  %18863 = getelementptr inbounds i16, i16* %18859, i64 16
  %18864 = bitcast i16* %18863 to <8 x i16>*
  store <8 x i16> %18720, <8 x i16>* %18864, align 2, !tbaa !391
  %18865 = getelementptr inbounds i16, i16* %18859, i64 24
  %18866 = bitcast i16* %18865 to <8 x i16>*
  store <8 x i16> %18747, <8 x i16>* %18866, align 2, !tbaa !391
  %18867 = getelementptr inbounds i16, i16* %18859, i64 32
  %18868 = bitcast i16* %18867 to <8 x i16>*
  store <8 x i16> %18774, <8 x i16>* %18868, align 2, !tbaa !391
  %18869 = getelementptr inbounds i16, i16* %18859, i64 40
  %18870 = bitcast i16* %18869 to <8 x i16>*
  store <8 x i16> %18801, <8 x i16>* %18870, align 2, !tbaa !391
  %18871 = getelementptr inbounds i16, i16* %18859, i64 48
  %18872 = bitcast i16* %18871 to <8 x i16>*
  store <8 x i16> %18828, <8 x i16>* %18872, align 2, !tbaa !391
  %18873 = shufflevector <64 x i16> %18857, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %18874 = getelementptr inbounds i16, i16* %18859, i64 56
  %18875 = bitcast i16* %18874 to <8 x i16>*
  store <8 x i16> %18873, <8 x i16>* %18875, align 2, !tbaa !391
  %indvars.iv.next252 = add nuw nsw i64 %indvars.iv251, 1
  %.not181 = icmp eq i64 %indvars.iv.next252, %102
  br i1 %.not181, label %"end for blur_y.s0.x.x130", label %"for blur_y.s0.x.x129"

"end for blur_y.s0.x.x130":                       ; preds = %"for blur_y.s0.x.x129", %"consume blur_x127"
  br i1 %99, label %"for blur_y.s0.x.x134.preheader", label %"end for blur_y.s0.x.x135", !prof !385

"for blur_y.s0.x.x134.preheader":                 ; preds = %"end for blur_y.s0.x.x130"
  %18876 = add nsw i32 %a35, 5
  %18877 = and i32 %18876, 7
  %18878 = add nuw nsw i32 %18877, 1
  %t378 = mul nsw i32 %a27, %18878
  %18879 = and i32 %b36, 7
  %18880 = add nuw nsw i32 %18879, 1
  %t379 = mul nsw i32 %a27, %18880
  %18881 = add nsw i32 %a35, 6
  %18882 = and i32 %18881, 7
  %18883 = add nuw nsw i32 %18882, 1
  %t380 = mul nsw i32 %a27, %18883
  %18884 = and i32 %a35, 7
  %18885 = add nuw nsw i32 %18884, 1
  %t381 = mul nsw i32 %a27, %18885
  %18886 = add nsw i32 %a35, 7
  %18887 = and i32 %18886, 7
  %18888 = add nuw nsw i32 %18887, 1
  %t382 = mul nsw i32 %a27, %18888
  %18889 = sext i32 %t378 to i64
  %18890 = getelementptr inbounds i16, i16* %blur_x61, i64 %18889
  %18891 = getelementptr inbounds i16, i16* %18890, i64 -64
  %18892 = bitcast i16* %18891 to <8 x i16>*
  %18893 = load <8 x i16>, <8 x i16>* %18892, align 2, !tbaa !389
  %18894 = sext i32 %t379 to i64
  %18895 = getelementptr inbounds i16, i16* %blur_x61, i64 %18894
  %18896 = getelementptr inbounds i16, i16* %18895, i64 -64
  %18897 = bitcast i16* %18896 to <8 x i16>*
  %18898 = load <8 x i16>, <8 x i16>* %18897, align 2, !tbaa !389
  %18899 = sext i32 %t380 to i64
  %18900 = getelementptr inbounds i16, i16* %blur_x61, i64 %18899
  %18901 = getelementptr inbounds i16, i16* %18900, i64 -64
  %18902 = bitcast i16* %18901 to <8 x i16>*
  %18903 = load <8 x i16>, <8 x i16>* %18902, align 2, !tbaa !389
  %18904 = sext i32 %t381 to i64
  %18905 = getelementptr inbounds i16, i16* %blur_x61, i64 %18904
  %18906 = getelementptr inbounds i16, i16* %18905, i64 -64
  %18907 = bitcast i16* %18906 to <8 x i16>*
  %18908 = load <8 x i16>, <8 x i16>* %18907, align 2, !tbaa !389
  %18909 = sext i32 %t382 to i64
  %18910 = getelementptr inbounds i16, i16* %blur_x61, i64 %18909
  %18911 = getelementptr inbounds i16, i16* %18910, i64 -64
  %18912 = bitcast i16* %18911 to <8 x i16>*
  %18913 = load <8 x i16>, <8 x i16>* %18912, align 2, !tbaa !389
  %18914 = add <8 x i16> %18898, %18893
  %18915 = add <8 x i16> %18914, %18903
  %18916 = add <8 x i16> %18915, %18908
  %18917 = add <8 x i16> %18916, %18913
  %18918 = zext <8 x i16> %18917 to <8 x i32>
  %18919 = mul nuw <8 x i32> %18918, <i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429>
  %18920 = lshr <8 x i32> %18919, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %18921 = shufflevector <8 x i32> %18920, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %18922 = shufflevector <8 x i32> %18920, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %18923 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %18922)
  %18924 = getelementptr inbounds i16, i16* %18890, i64 -56
  %18925 = bitcast i16* %18924 to <8 x i16>*
  %18926 = load <8 x i16>, <8 x i16>* %18925, align 2, !tbaa !389
  %18927 = getelementptr inbounds i16, i16* %18895, i64 -56
  %18928 = bitcast i16* %18927 to <8 x i16>*
  %18929 = load <8 x i16>, <8 x i16>* %18928, align 2, !tbaa !389
  %18930 = getelementptr inbounds i16, i16* %18900, i64 -56
  %18931 = bitcast i16* %18930 to <8 x i16>*
  %18932 = load <8 x i16>, <8 x i16>* %18931, align 2, !tbaa !389
  %18933 = getelementptr inbounds i16, i16* %18905, i64 -56
  %18934 = bitcast i16* %18933 to <8 x i16>*
  %18935 = load <8 x i16>, <8 x i16>* %18934, align 2, !tbaa !389
  %18936 = getelementptr inbounds i16, i16* %18910, i64 -56
  %18937 = bitcast i16* %18936 to <8 x i16>*
  %18938 = load <8 x i16>, <8 x i16>* %18937, align 2, !tbaa !389
  %18939 = add <8 x i16> %18929, %18926
  %18940 = add <8 x i16> %18939, %18932
  %18941 = add <8 x i16> %18940, %18935
  %18942 = add <8 x i16> %18941, %18938
  %18943 = zext <8 x i16> %18942 to <8 x i32>
  %18944 = mul nuw <8 x i32> %18943, <i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429>
  %18945 = lshr <8 x i32> %18944, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %18946 = shufflevector <8 x i32> %18945, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %18947 = shufflevector <8 x i32> %18945, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %18948 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %18947)
  %18949 = getelementptr inbounds i16, i16* %18890, i64 -48
  %18950 = bitcast i16* %18949 to <8 x i16>*
  %18951 = load <8 x i16>, <8 x i16>* %18950, align 2, !tbaa !389
  %18952 = getelementptr inbounds i16, i16* %18895, i64 -48
  %18953 = bitcast i16* %18952 to <8 x i16>*
  %18954 = load <8 x i16>, <8 x i16>* %18953, align 2, !tbaa !389
  %18955 = getelementptr inbounds i16, i16* %18900, i64 -48
  %18956 = bitcast i16* %18955 to <8 x i16>*
  %18957 = load <8 x i16>, <8 x i16>* %18956, align 2, !tbaa !389
  %18958 = getelementptr inbounds i16, i16* %18905, i64 -48
  %18959 = bitcast i16* %18958 to <8 x i16>*
  %18960 = load <8 x i16>, <8 x i16>* %18959, align 2, !tbaa !389
  %18961 = getelementptr inbounds i16, i16* %18910, i64 -48
  %18962 = bitcast i16* %18961 to <8 x i16>*
  %18963 = load <8 x i16>, <8 x i16>* %18962, align 2, !tbaa !389
  %18964 = add <8 x i16> %18954, %18951
  %18965 = add <8 x i16> %18964, %18957
  %18966 = add <8 x i16> %18965, %18960
  %18967 = add <8 x i16> %18966, %18963
  %18968 = zext <8 x i16> %18967 to <8 x i32>
  %18969 = mul nuw <8 x i32> %18968, <i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429>
  %18970 = lshr <8 x i32> %18969, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %18971 = shufflevector <8 x i32> %18970, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %18972 = shufflevector <8 x i32> %18970, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %18973 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %18972)
  %18974 = getelementptr inbounds i16, i16* %18890, i64 -40
  %18975 = bitcast i16* %18974 to <8 x i16>*
  %18976 = load <8 x i16>, <8 x i16>* %18975, align 2, !tbaa !389
  %18977 = getelementptr inbounds i16, i16* %18895, i64 -40
  %18978 = bitcast i16* %18977 to <8 x i16>*
  %18979 = load <8 x i16>, <8 x i16>* %18978, align 2, !tbaa !389
  %18980 = getelementptr inbounds i16, i16* %18900, i64 -40
  %18981 = bitcast i16* %18980 to <8 x i16>*
  %18982 = load <8 x i16>, <8 x i16>* %18981, align 2, !tbaa !389
  %18983 = getelementptr inbounds i16, i16* %18905, i64 -40
  %18984 = bitcast i16* %18983 to <8 x i16>*
  %18985 = load <8 x i16>, <8 x i16>* %18984, align 2, !tbaa !389
  %18986 = getelementptr inbounds i16, i16* %18910, i64 -40
  %18987 = bitcast i16* %18986 to <8 x i16>*
  %18988 = load <8 x i16>, <8 x i16>* %18987, align 2, !tbaa !389
  %18989 = add <8 x i16> %18979, %18976
  %18990 = add <8 x i16> %18989, %18982
  %18991 = add <8 x i16> %18990, %18985
  %18992 = add <8 x i16> %18991, %18988
  %18993 = zext <8 x i16> %18992 to <8 x i32>
  %18994 = mul nuw <8 x i32> %18993, <i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429>
  %18995 = lshr <8 x i32> %18994, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %18996 = shufflevector <8 x i32> %18995, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %18997 = shufflevector <8 x i32> %18995, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %18998 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %18997)
  %18999 = getelementptr inbounds i16, i16* %18890, i64 -32
  %19000 = bitcast i16* %18999 to <8 x i16>*
  %19001 = load <8 x i16>, <8 x i16>* %19000, align 2, !tbaa !389
  %19002 = getelementptr inbounds i16, i16* %18895, i64 -32
  %19003 = bitcast i16* %19002 to <8 x i16>*
  %19004 = load <8 x i16>, <8 x i16>* %19003, align 2, !tbaa !389
  %19005 = getelementptr inbounds i16, i16* %18900, i64 -32
  %19006 = bitcast i16* %19005 to <8 x i16>*
  %19007 = load <8 x i16>, <8 x i16>* %19006, align 2, !tbaa !389
  %19008 = getelementptr inbounds i16, i16* %18905, i64 -32
  %19009 = bitcast i16* %19008 to <8 x i16>*
  %19010 = load <8 x i16>, <8 x i16>* %19009, align 2, !tbaa !389
  %19011 = getelementptr inbounds i16, i16* %18910, i64 -32
  %19012 = bitcast i16* %19011 to <8 x i16>*
  %19013 = load <8 x i16>, <8 x i16>* %19012, align 2, !tbaa !389
  %19014 = add <8 x i16> %19004, %19001
  %19015 = add <8 x i16> %19014, %19007
  %19016 = add <8 x i16> %19015, %19010
  %19017 = add <8 x i16> %19016, %19013
  %19018 = zext <8 x i16> %19017 to <8 x i32>
  %19019 = mul nuw <8 x i32> %19018, <i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429>
  %19020 = lshr <8 x i32> %19019, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %19021 = shufflevector <8 x i32> %19020, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %19022 = shufflevector <8 x i32> %19020, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %19023 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %19022)
  %19024 = getelementptr inbounds i16, i16* %18890, i64 -24
  %19025 = bitcast i16* %19024 to <8 x i16>*
  %19026 = load <8 x i16>, <8 x i16>* %19025, align 2, !tbaa !389
  %19027 = getelementptr inbounds i16, i16* %18895, i64 -24
  %19028 = bitcast i16* %19027 to <8 x i16>*
  %19029 = load <8 x i16>, <8 x i16>* %19028, align 2, !tbaa !389
  %19030 = getelementptr inbounds i16, i16* %18900, i64 -24
  %19031 = bitcast i16* %19030 to <8 x i16>*
  %19032 = load <8 x i16>, <8 x i16>* %19031, align 2, !tbaa !389
  %19033 = getelementptr inbounds i16, i16* %18905, i64 -24
  %19034 = bitcast i16* %19033 to <8 x i16>*
  %19035 = load <8 x i16>, <8 x i16>* %19034, align 2, !tbaa !389
  %19036 = getelementptr inbounds i16, i16* %18910, i64 -24
  %19037 = bitcast i16* %19036 to <8 x i16>*
  %19038 = load <8 x i16>, <8 x i16>* %19037, align 2, !tbaa !389
  %19039 = add <8 x i16> %19029, %19026
  %19040 = add <8 x i16> %19039, %19032
  %19041 = add <8 x i16> %19040, %19035
  %19042 = add <8 x i16> %19041, %19038
  %19043 = zext <8 x i16> %19042 to <8 x i32>
  %19044 = mul nuw <8 x i32> %19043, <i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429>
  %19045 = lshr <8 x i32> %19044, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %19046 = shufflevector <8 x i32> %19045, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %19047 = shufflevector <8 x i32> %19045, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %19048 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %19047)
  %19049 = getelementptr inbounds i16, i16* %18890, i64 -16
  %19050 = bitcast i16* %19049 to <8 x i16>*
  %19051 = load <8 x i16>, <8 x i16>* %19050, align 2, !tbaa !389
  %19052 = getelementptr inbounds i16, i16* %18895, i64 -16
  %19053 = bitcast i16* %19052 to <8 x i16>*
  %19054 = load <8 x i16>, <8 x i16>* %19053, align 2, !tbaa !389
  %19055 = getelementptr inbounds i16, i16* %18900, i64 -16
  %19056 = bitcast i16* %19055 to <8 x i16>*
  %19057 = load <8 x i16>, <8 x i16>* %19056, align 2, !tbaa !389
  %19058 = getelementptr inbounds i16, i16* %18905, i64 -16
  %19059 = bitcast i16* %19058 to <8 x i16>*
  %19060 = load <8 x i16>, <8 x i16>* %19059, align 2, !tbaa !389
  %19061 = getelementptr inbounds i16, i16* %18910, i64 -16
  %19062 = bitcast i16* %19061 to <8 x i16>*
  %19063 = load <8 x i16>, <8 x i16>* %19062, align 2, !tbaa !389
  %19064 = add <8 x i16> %19054, %19051
  %19065 = add <8 x i16> %19064, %19057
  %19066 = add <8 x i16> %19065, %19060
  %19067 = add <8 x i16> %19066, %19063
  %19068 = zext <8 x i16> %19067 to <8 x i32>
  %19069 = mul nuw <8 x i32> %19068, <i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429>
  %19070 = lshr <8 x i32> %19069, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %19071 = shufflevector <8 x i32> %19070, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %19072 = shufflevector <8 x i32> %19070, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %19073 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %19072)
  %19074 = getelementptr inbounds i16, i16* %18890, i64 -8
  %19075 = bitcast i16* %19074 to <8 x i16>*
  %19076 = load <8 x i16>, <8 x i16>* %19075, align 2, !tbaa !389
  %19077 = getelementptr inbounds i16, i16* %18895, i64 -8
  %19078 = bitcast i16* %19077 to <8 x i16>*
  %19079 = load <8 x i16>, <8 x i16>* %19078, align 2, !tbaa !389
  %19080 = getelementptr inbounds i16, i16* %18900, i64 -8
  %19081 = bitcast i16* %19080 to <8 x i16>*
  %19082 = load <8 x i16>, <8 x i16>* %19081, align 2, !tbaa !389
  %19083 = getelementptr inbounds i16, i16* %18905, i64 -8
  %19084 = bitcast i16* %19083 to <8 x i16>*
  %19085 = load <8 x i16>, <8 x i16>* %19084, align 2, !tbaa !389
  %19086 = getelementptr inbounds i16, i16* %18910, i64 -8
  %19087 = bitcast i16* %19086 to <8 x i16>*
  %19088 = load <8 x i16>, <8 x i16>* %19087, align 2, !tbaa !389
  %19089 = add <8 x i16> %19079, %19076
  %19090 = add <8 x i16> %19089, %19082
  %19091 = add <8 x i16> %19090, %19085
  %19092 = add <8 x i16> %19091, %19088
  %19093 = zext <8 x i16> %19092 to <8 x i32>
  %19094 = mul nuw <8 x i32> %19093, <i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429>
  %19095 = lshr <8 x i32> %19094, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %19096 = shufflevector <8 x i32> %19095, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %19097 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %19096)
  %19098 = shufflevector <8 x i32> %19095, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %19099 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %19098)
  %19100 = shufflevector <4 x i16> %19097, <4 x i16> %19099, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %19101 = shufflevector <16 x i16> %19100, <16 x i16> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19102 = sext i32 %a35 to i64
  %19103 = add nsw i64 %19102, -4
  %19104 = mul nsw i64 %19103, %97
  %19105 = add nsw i64 %19104, %100
  %19106 = getelementptr inbounds i16, i16* %blur_y42287, i64 %19105
  %19107 = getelementptr inbounds i16, i16* %19106, i64 -64
  %19108 = getelementptr inbounds i16, i16* %19106, i64 -56
  %19109 = getelementptr inbounds i16, i16* %19106, i64 -48
  %19110 = getelementptr inbounds i16, i16* %19106, i64 -40
  %19111 = getelementptr inbounds i16, i16* %19106, i64 -32
  %19112 = getelementptr inbounds i16, i16* %19106, i64 -24
  %19113 = getelementptr inbounds i16, i16* %19106, i64 -16
  %19114 = bitcast i16* %19113 to <8 x i16>*
  %19115 = getelementptr inbounds i16, i16* %19106, i64 -8
  %19116 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %18921)
  %19117 = shufflevector <4 x i16> %19116, <4 x i16> %18923, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %19118 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %18946)
  %19119 = shufflevector <4 x i16> %19118, <4 x i16> %18948, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %19120 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %18971)
  %19121 = shufflevector <4 x i16> %19120, <4 x i16> %18973, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %19122 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %18996)
  %19123 = shufflevector <4 x i16> %19122, <4 x i16> %18998, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %19124 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %19021)
  %19125 = shufflevector <4 x i16> %19124, <4 x i16> %19023, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %19126 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %19046)
  %19127 = shufflevector <4 x i16> %19126, <4 x i16> %19048, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %19128 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %19071)
  %19129 = shufflevector <4 x i16> %19128, <4 x i16> %19073, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %19130 = shufflevector <32 x i16> %19101, <32 x i16> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19131 = bitcast i16* %19107 to <8 x i16>*
  %19132 = bitcast i16* %19108 to <8 x i16>*
  %19133 = bitcast i16* %19109 to <8 x i16>*
  %19134 = bitcast i16* %19110 to <8 x i16>*
  %19135 = bitcast i16* %19111 to <8 x i16>*
  %19136 = bitcast i16* %19112 to <8 x i16>*
  %19137 = shufflevector <64 x i16> %19130, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %19138 = bitcast i16* %19115 to <8 x i16>*
  store <8 x i16> %19117, <8 x i16>* %19131, align 2, !tbaa !391
  store <8 x i16> %19119, <8 x i16>* %19132, align 2, !tbaa !391
  store <8 x i16> %19121, <8 x i16>* %19133, align 2, !tbaa !391
  store <8 x i16> %19123, <8 x i16>* %19134, align 2, !tbaa !391
  store <8 x i16> %19125, <8 x i16>* %19135, align 2, !tbaa !391
  store <8 x i16> %19127, <8 x i16>* %19136, align 2, !tbaa !391
  store <8 x i16> %19129, <8 x i16>* %19114, align 2, !tbaa !391
  store <8 x i16> %19137, <8 x i16>* %19138, align 2, !tbaa !391
  br label %"end for blur_y.s0.x.x135"

"end for blur_y.s0.x.x135":                       ; preds = %"for blur_y.s0.x.x134.preheader", %"end for blur_y.s0.x.x130"
  br i1 %96, label %"for blur_y.s0.x.x138.preheader", label %"end for blur_y.s0.x.x139", !prof !385

"for blur_y.s0.x.x138.preheader":                 ; preds = %"end for blur_y.s0.x.x135"
  %19139 = insertelement <4 x i32> poison, i32 %a35, i32 0
  %19140 = shufflevector <4 x i32> %19139, <4 x i32> undef, <4 x i32> zeroinitializer
  %19141 = add nsw <4 x i32> %19140, <i32 6, i32 5, i32 7, i32 1>
  %19142 = and <4 x i32> %19141, <i32 7, i32 7, i32 7, i32 7>
  %19143 = mul nsw <4 x i32> %107, %19142
  %19144 = and i32 %a35, 7
  %19145 = mul nsw i32 %a27, %19144
  %19146 = sext i32 %a35 to i64
  %19147 = add nsw i64 %19146, -3
  %19148 = mul nsw i64 %19147, %97
  %19149 = add nsw i64 %19148, %98
  %19150 = sext <4 x i32> %19143 to <4 x i64>
  %19151 = sext i32 %19145 to i64
  br label %"for blur_y.s0.x.x138"

"for blur_y.s0.x.x138":                           ; preds = %"for blur_y.s0.x.x138.preheader", %"for blur_y.s0.x.x138"
  %indvars.iv259 = phi i64 [ 0, %"for blur_y.s0.x.x138.preheader" ], [ %indvars.iv.next260, %"for blur_y.s0.x.x138" ]
  %19152 = shl nsw i64 %indvars.iv259, 6
  %19153 = sub nsw i64 %19152, %103
  %19154 = insertelement <4 x i64> poison, i64 %19153, i32 0
  %19155 = shufflevector <4 x i64> %19154, <4 x i64> undef, <4 x i32> zeroinitializer
  %19156 = add nsw <4 x i64> %19155, %19150
  %19157 = add nsw i64 %19153, %19151
  %19158 = extractelement <4 x i64> %19156, i32 0
  %19159 = getelementptr inbounds i16, i16* %blur_x61, i64 %19158
  %19160 = getelementptr inbounds i16, i16* %19159, i64 64
  %19161 = bitcast i16* %19160 to <8 x i16>*
  %19162 = load <8 x i16>, <8 x i16>* %19161, align 2, !tbaa !389
  %19163 = extractelement <4 x i64> %19156, i32 1
  %19164 = getelementptr inbounds i16, i16* %blur_x61, i64 %19163
  %19165 = getelementptr inbounds i16, i16* %19164, i64 64
  %19166 = bitcast i16* %19165 to <8 x i16>*
  %19167 = load <8 x i16>, <8 x i16>* %19166, align 2, !tbaa !389
  %19168 = extractelement <4 x i64> %19156, i32 2
  %19169 = getelementptr inbounds i16, i16* %blur_x61, i64 %19168
  %19170 = getelementptr inbounds i16, i16* %19169, i64 64
  %19171 = bitcast i16* %19170 to <8 x i16>*
  %19172 = load <8 x i16>, <8 x i16>* %19171, align 2, !tbaa !389
  %19173 = extractelement <4 x i64> %19156, i32 3
  %19174 = getelementptr inbounds i16, i16* %blur_x61, i64 %19173
  %19175 = getelementptr inbounds i16, i16* %19174, i64 64
  %19176 = bitcast i16* %19175 to <8 x i16>*
  %19177 = load <8 x i16>, <8 x i16>* %19176, align 2, !tbaa !389
  %19178 = getelementptr inbounds i16, i16* %blur_x61, i64 %19157
  %19179 = getelementptr inbounds i16, i16* %19178, i64 64
  %19180 = bitcast i16* %19179 to <8 x i16>*
  %19181 = load <8 x i16>, <8 x i16>* %19180, align 2, !tbaa !389
  %19182 = add <8 x i16> %19167, %19162
  %19183 = add <8 x i16> %19182, %19172
  %19184 = add <8 x i16> %19183, %19177
  %19185 = add <8 x i16> %19184, %19181
  %19186 = zext <8 x i16> %19185 to <8 x i32>
  %19187 = mul nuw <8 x i32> %19186, <i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429>
  %19188 = lshr <8 x i32> %19187, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %19189 = shufflevector <8 x i32> %19188, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %19190 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %19189)
  %19191 = shufflevector <8 x i32> %19188, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %19192 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %19191)
  %19193 = shufflevector <4 x i16> %19190, <4 x i16> %19192, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %19194 = getelementptr inbounds i16, i16* %19159, i64 72
  %19195 = bitcast i16* %19194 to <8 x i16>*
  %19196 = load <8 x i16>, <8 x i16>* %19195, align 2, !tbaa !389
  %19197 = getelementptr inbounds i16, i16* %19164, i64 72
  %19198 = bitcast i16* %19197 to <8 x i16>*
  %19199 = load <8 x i16>, <8 x i16>* %19198, align 2, !tbaa !389
  %19200 = getelementptr inbounds i16, i16* %19169, i64 72
  %19201 = bitcast i16* %19200 to <8 x i16>*
  %19202 = load <8 x i16>, <8 x i16>* %19201, align 2, !tbaa !389
  %19203 = getelementptr inbounds i16, i16* %19174, i64 72
  %19204 = bitcast i16* %19203 to <8 x i16>*
  %19205 = load <8 x i16>, <8 x i16>* %19204, align 2, !tbaa !389
  %19206 = getelementptr inbounds i16, i16* %19178, i64 72
  %19207 = bitcast i16* %19206 to <8 x i16>*
  %19208 = load <8 x i16>, <8 x i16>* %19207, align 2, !tbaa !389
  %19209 = add <8 x i16> %19199, %19196
  %19210 = add <8 x i16> %19209, %19202
  %19211 = add <8 x i16> %19210, %19205
  %19212 = add <8 x i16> %19211, %19208
  %19213 = zext <8 x i16> %19212 to <8 x i32>
  %19214 = mul nuw <8 x i32> %19213, <i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429>
  %19215 = lshr <8 x i32> %19214, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %19216 = shufflevector <8 x i32> %19215, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %19217 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %19216)
  %19218 = shufflevector <8 x i32> %19215, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %19219 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %19218)
  %19220 = shufflevector <4 x i16> %19217, <4 x i16> %19219, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %19221 = getelementptr inbounds i16, i16* %19159, i64 80
  %19222 = bitcast i16* %19221 to <8 x i16>*
  %19223 = load <8 x i16>, <8 x i16>* %19222, align 2, !tbaa !389
  %19224 = getelementptr inbounds i16, i16* %19164, i64 80
  %19225 = bitcast i16* %19224 to <8 x i16>*
  %19226 = load <8 x i16>, <8 x i16>* %19225, align 2, !tbaa !389
  %19227 = getelementptr inbounds i16, i16* %19169, i64 80
  %19228 = bitcast i16* %19227 to <8 x i16>*
  %19229 = load <8 x i16>, <8 x i16>* %19228, align 2, !tbaa !389
  %19230 = getelementptr inbounds i16, i16* %19174, i64 80
  %19231 = bitcast i16* %19230 to <8 x i16>*
  %19232 = load <8 x i16>, <8 x i16>* %19231, align 2, !tbaa !389
  %19233 = getelementptr inbounds i16, i16* %19178, i64 80
  %19234 = bitcast i16* %19233 to <8 x i16>*
  %19235 = load <8 x i16>, <8 x i16>* %19234, align 2, !tbaa !389
  %19236 = add <8 x i16> %19226, %19223
  %19237 = add <8 x i16> %19236, %19229
  %19238 = add <8 x i16> %19237, %19232
  %19239 = add <8 x i16> %19238, %19235
  %19240 = zext <8 x i16> %19239 to <8 x i32>
  %19241 = mul nuw <8 x i32> %19240, <i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429>
  %19242 = lshr <8 x i32> %19241, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %19243 = shufflevector <8 x i32> %19242, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %19244 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %19243)
  %19245 = shufflevector <8 x i32> %19242, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %19246 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %19245)
  %19247 = shufflevector <4 x i16> %19244, <4 x i16> %19246, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %19248 = getelementptr inbounds i16, i16* %19159, i64 88
  %19249 = bitcast i16* %19248 to <8 x i16>*
  %19250 = load <8 x i16>, <8 x i16>* %19249, align 2, !tbaa !389
  %19251 = getelementptr inbounds i16, i16* %19164, i64 88
  %19252 = bitcast i16* %19251 to <8 x i16>*
  %19253 = load <8 x i16>, <8 x i16>* %19252, align 2, !tbaa !389
  %19254 = getelementptr inbounds i16, i16* %19169, i64 88
  %19255 = bitcast i16* %19254 to <8 x i16>*
  %19256 = load <8 x i16>, <8 x i16>* %19255, align 2, !tbaa !389
  %19257 = getelementptr inbounds i16, i16* %19174, i64 88
  %19258 = bitcast i16* %19257 to <8 x i16>*
  %19259 = load <8 x i16>, <8 x i16>* %19258, align 2, !tbaa !389
  %19260 = getelementptr inbounds i16, i16* %19178, i64 88
  %19261 = bitcast i16* %19260 to <8 x i16>*
  %19262 = load <8 x i16>, <8 x i16>* %19261, align 2, !tbaa !389
  %19263 = add <8 x i16> %19253, %19250
  %19264 = add <8 x i16> %19263, %19256
  %19265 = add <8 x i16> %19264, %19259
  %19266 = add <8 x i16> %19265, %19262
  %19267 = zext <8 x i16> %19266 to <8 x i32>
  %19268 = mul nuw <8 x i32> %19267, <i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429>
  %19269 = lshr <8 x i32> %19268, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %19270 = shufflevector <8 x i32> %19269, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %19271 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %19270)
  %19272 = shufflevector <8 x i32> %19269, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %19273 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %19272)
  %19274 = shufflevector <4 x i16> %19271, <4 x i16> %19273, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %19275 = getelementptr inbounds i16, i16* %19159, i64 96
  %19276 = bitcast i16* %19275 to <8 x i16>*
  %19277 = load <8 x i16>, <8 x i16>* %19276, align 2, !tbaa !389
  %19278 = getelementptr inbounds i16, i16* %19164, i64 96
  %19279 = bitcast i16* %19278 to <8 x i16>*
  %19280 = load <8 x i16>, <8 x i16>* %19279, align 2, !tbaa !389
  %19281 = getelementptr inbounds i16, i16* %19169, i64 96
  %19282 = bitcast i16* %19281 to <8 x i16>*
  %19283 = load <8 x i16>, <8 x i16>* %19282, align 2, !tbaa !389
  %19284 = getelementptr inbounds i16, i16* %19174, i64 96
  %19285 = bitcast i16* %19284 to <8 x i16>*
  %19286 = load <8 x i16>, <8 x i16>* %19285, align 2, !tbaa !389
  %19287 = getelementptr inbounds i16, i16* %19178, i64 96
  %19288 = bitcast i16* %19287 to <8 x i16>*
  %19289 = load <8 x i16>, <8 x i16>* %19288, align 2, !tbaa !389
  %19290 = add <8 x i16> %19280, %19277
  %19291 = add <8 x i16> %19290, %19283
  %19292 = add <8 x i16> %19291, %19286
  %19293 = add <8 x i16> %19292, %19289
  %19294 = zext <8 x i16> %19293 to <8 x i32>
  %19295 = mul nuw <8 x i32> %19294, <i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429>
  %19296 = lshr <8 x i32> %19295, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %19297 = shufflevector <8 x i32> %19296, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %19298 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %19297)
  %19299 = shufflevector <8 x i32> %19296, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %19300 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %19299)
  %19301 = shufflevector <4 x i16> %19298, <4 x i16> %19300, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %19302 = getelementptr inbounds i16, i16* %19159, i64 104
  %19303 = bitcast i16* %19302 to <8 x i16>*
  %19304 = load <8 x i16>, <8 x i16>* %19303, align 2, !tbaa !389
  %19305 = getelementptr inbounds i16, i16* %19164, i64 104
  %19306 = bitcast i16* %19305 to <8 x i16>*
  %19307 = load <8 x i16>, <8 x i16>* %19306, align 2, !tbaa !389
  %19308 = getelementptr inbounds i16, i16* %19169, i64 104
  %19309 = bitcast i16* %19308 to <8 x i16>*
  %19310 = load <8 x i16>, <8 x i16>* %19309, align 2, !tbaa !389
  %19311 = getelementptr inbounds i16, i16* %19174, i64 104
  %19312 = bitcast i16* %19311 to <8 x i16>*
  %19313 = load <8 x i16>, <8 x i16>* %19312, align 2, !tbaa !389
  %19314 = getelementptr inbounds i16, i16* %19178, i64 104
  %19315 = bitcast i16* %19314 to <8 x i16>*
  %19316 = load <8 x i16>, <8 x i16>* %19315, align 2, !tbaa !389
  %19317 = add <8 x i16> %19307, %19304
  %19318 = add <8 x i16> %19317, %19310
  %19319 = add <8 x i16> %19318, %19313
  %19320 = add <8 x i16> %19319, %19316
  %19321 = zext <8 x i16> %19320 to <8 x i32>
  %19322 = mul nuw <8 x i32> %19321, <i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429>
  %19323 = lshr <8 x i32> %19322, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %19324 = shufflevector <8 x i32> %19323, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %19325 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %19324)
  %19326 = shufflevector <8 x i32> %19323, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %19327 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %19326)
  %19328 = shufflevector <4 x i16> %19325, <4 x i16> %19327, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %19329 = getelementptr inbounds i16, i16* %19159, i64 112
  %19330 = bitcast i16* %19329 to <8 x i16>*
  %19331 = load <8 x i16>, <8 x i16>* %19330, align 2, !tbaa !389
  %19332 = getelementptr inbounds i16, i16* %19164, i64 112
  %19333 = bitcast i16* %19332 to <8 x i16>*
  %19334 = load <8 x i16>, <8 x i16>* %19333, align 2, !tbaa !389
  %19335 = getelementptr inbounds i16, i16* %19169, i64 112
  %19336 = bitcast i16* %19335 to <8 x i16>*
  %19337 = load <8 x i16>, <8 x i16>* %19336, align 2, !tbaa !389
  %19338 = getelementptr inbounds i16, i16* %19174, i64 112
  %19339 = bitcast i16* %19338 to <8 x i16>*
  %19340 = load <8 x i16>, <8 x i16>* %19339, align 2, !tbaa !389
  %19341 = getelementptr inbounds i16, i16* %19178, i64 112
  %19342 = bitcast i16* %19341 to <8 x i16>*
  %19343 = load <8 x i16>, <8 x i16>* %19342, align 2, !tbaa !389
  %19344 = add <8 x i16> %19334, %19331
  %19345 = add <8 x i16> %19344, %19337
  %19346 = add <8 x i16> %19345, %19340
  %19347 = add <8 x i16> %19346, %19343
  %19348 = zext <8 x i16> %19347 to <8 x i32>
  %19349 = mul nuw <8 x i32> %19348, <i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429>
  %19350 = lshr <8 x i32> %19349, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %19351 = shufflevector <8 x i32> %19350, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %19352 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %19351)
  %19353 = shufflevector <8 x i32> %19350, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %19354 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %19353)
  %19355 = shufflevector <4 x i16> %19352, <4 x i16> %19354, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %19356 = getelementptr inbounds i16, i16* %19159, i64 120
  %19357 = bitcast i16* %19356 to <8 x i16>*
  %19358 = load <8 x i16>, <8 x i16>* %19357, align 2, !tbaa !389
  %19359 = getelementptr inbounds i16, i16* %19164, i64 120
  %19360 = bitcast i16* %19359 to <8 x i16>*
  %19361 = load <8 x i16>, <8 x i16>* %19360, align 2, !tbaa !389
  %19362 = getelementptr inbounds i16, i16* %19169, i64 120
  %19363 = bitcast i16* %19362 to <8 x i16>*
  %19364 = load <8 x i16>, <8 x i16>* %19363, align 2, !tbaa !389
  %19365 = getelementptr inbounds i16, i16* %19174, i64 120
  %19366 = bitcast i16* %19365 to <8 x i16>*
  %19367 = load <8 x i16>, <8 x i16>* %19366, align 2, !tbaa !389
  %19368 = getelementptr inbounds i16, i16* %19178, i64 120
  %19369 = bitcast i16* %19368 to <8 x i16>*
  %19370 = load <8 x i16>, <8 x i16>* %19369, align 2, !tbaa !389
  %19371 = add <8 x i16> %19361, %19358
  %19372 = add <8 x i16> %19371, %19364
  %19373 = add <8 x i16> %19372, %19367
  %19374 = add <8 x i16> %19373, %19370
  %19375 = zext <8 x i16> %19374 to <8 x i32>
  %19376 = mul nuw <8 x i32> %19375, <i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429>
  %19377 = lshr <8 x i32> %19376, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %19378 = shufflevector <8 x i32> %19377, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %19379 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %19378)
  %19380 = shufflevector <8 x i32> %19377, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %19381 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %19380)
  %19382 = shufflevector <4 x i16> %19379, <4 x i16> %19381, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %19383 = shufflevector <16 x i16> %19382, <16 x i16> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19384 = shufflevector <32 x i16> %19383, <32 x i16> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19385 = add nsw i64 %19149, %19152
  %19386 = getelementptr inbounds i16, i16* %blur_y42287, i64 %19385
  %19387 = bitcast i16* %19386 to <8 x i16>*
  store <8 x i16> %19193, <8 x i16>* %19387, align 2, !tbaa !391
  %19388 = getelementptr inbounds i16, i16* %19386, i64 8
  %19389 = bitcast i16* %19388 to <8 x i16>*
  store <8 x i16> %19220, <8 x i16>* %19389, align 2, !tbaa !391
  %19390 = getelementptr inbounds i16, i16* %19386, i64 16
  %19391 = bitcast i16* %19390 to <8 x i16>*
  store <8 x i16> %19247, <8 x i16>* %19391, align 2, !tbaa !391
  %19392 = getelementptr inbounds i16, i16* %19386, i64 24
  %19393 = bitcast i16* %19392 to <8 x i16>*
  store <8 x i16> %19274, <8 x i16>* %19393, align 2, !tbaa !391
  %19394 = getelementptr inbounds i16, i16* %19386, i64 32
  %19395 = bitcast i16* %19394 to <8 x i16>*
  store <8 x i16> %19301, <8 x i16>* %19395, align 2, !tbaa !391
  %19396 = getelementptr inbounds i16, i16* %19386, i64 40
  %19397 = bitcast i16* %19396 to <8 x i16>*
  store <8 x i16> %19328, <8 x i16>* %19397, align 2, !tbaa !391
  %19398 = getelementptr inbounds i16, i16* %19386, i64 48
  %19399 = bitcast i16* %19398 to <8 x i16>*
  store <8 x i16> %19355, <8 x i16>* %19399, align 2, !tbaa !391
  %19400 = shufflevector <64 x i16> %19384, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %19401 = getelementptr inbounds i16, i16* %19386, i64 56
  %19402 = bitcast i16* %19401 to <8 x i16>*
  store <8 x i16> %19400, <8 x i16>* %19402, align 2, !tbaa !391
  %indvars.iv.next260 = add nuw nsw i64 %indvars.iv259, 1
  %.not179 = icmp eq i64 %indvars.iv.next260, %102
  br i1 %.not179, label %"end for blur_y.s0.x.x139", label %"for blur_y.s0.x.x138"

"end for blur_y.s0.x.x139":                       ; preds = %"for blur_y.s0.x.x138", %"end for blur_y.s0.x.x135"
  br i1 %99, label %"for blur_y.s0.x.x143.preheader", label %"end for blur_y.s0.x.x144", !prof !385

"for blur_y.s0.x.x143.preheader":                 ; preds = %"end for blur_y.s0.x.x139"
  %19403 = insertelement <4 x i32> poison, i32 %a35, i32 0
  %19404 = shufflevector <4 x i32> %19403, <4 x i32> undef, <4 x i32> zeroinitializer
  %19405 = add nsw <4 x i32> %19404, <i32 6, i32 5, i32 7, i32 1>
  %19406 = and <4 x i32> %19405, <i32 7, i32 7, i32 7, i32 7>
  %19407 = add nuw nsw <4 x i32> %19406, <i32 1, i32 1, i32 1, i32 1>
  %19408 = mul nsw <4 x i32> %105, %19407
  %19409 = and i32 %a35, 7
  %19410 = add nuw nsw i32 %19409, 1
  %t392 = mul nsw i32 %a27, %19410
  %19411 = extractelement <4 x i32> %19408, i32 0
  %19412 = sext i32 %19411 to i64
  %19413 = getelementptr inbounds i16, i16* %blur_x61, i64 %19412
  %19414 = getelementptr inbounds i16, i16* %19413, i64 -64
  %19415 = bitcast i16* %19414 to <8 x i16>*
  %19416 = load <8 x i16>, <8 x i16>* %19415, align 2, !tbaa !389
  %19417 = extractelement <4 x i32> %19408, i32 1
  %19418 = sext i32 %19417 to i64
  %19419 = getelementptr inbounds i16, i16* %blur_x61, i64 %19418
  %19420 = getelementptr inbounds i16, i16* %19419, i64 -64
  %19421 = bitcast i16* %19420 to <8 x i16>*
  %19422 = load <8 x i16>, <8 x i16>* %19421, align 2, !tbaa !389
  %19423 = extractelement <4 x i32> %19408, i32 2
  %19424 = sext i32 %19423 to i64
  %19425 = getelementptr inbounds i16, i16* %blur_x61, i64 %19424
  %19426 = getelementptr inbounds i16, i16* %19425, i64 -64
  %19427 = bitcast i16* %19426 to <8 x i16>*
  %19428 = load <8 x i16>, <8 x i16>* %19427, align 2, !tbaa !389
  %19429 = extractelement <4 x i32> %19408, i32 3
  %19430 = sext i32 %19429 to i64
  %19431 = getelementptr inbounds i16, i16* %blur_x61, i64 %19430
  %19432 = getelementptr inbounds i16, i16* %19431, i64 -64
  %19433 = bitcast i16* %19432 to <8 x i16>*
  %19434 = load <8 x i16>, <8 x i16>* %19433, align 2, !tbaa !389
  %19435 = sext i32 %t392 to i64
  %19436 = getelementptr inbounds i16, i16* %blur_x61, i64 %19435
  %19437 = getelementptr inbounds i16, i16* %19436, i64 -64
  %19438 = bitcast i16* %19437 to <8 x i16>*
  %19439 = load <8 x i16>, <8 x i16>* %19438, align 2, !tbaa !389
  %19440 = add <8 x i16> %19422, %19416
  %19441 = add <8 x i16> %19440, %19428
  %19442 = add <8 x i16> %19441, %19434
  %19443 = add <8 x i16> %19442, %19439
  %19444 = zext <8 x i16> %19443 to <8 x i32>
  %19445 = mul nuw <8 x i32> %19444, <i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429>
  %19446 = lshr <8 x i32> %19445, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %19447 = shufflevector <8 x i32> %19446, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %19448 = shufflevector <8 x i32> %19446, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %19449 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %19448)
  %19450 = getelementptr inbounds i16, i16* %19413, i64 -56
  %19451 = bitcast i16* %19450 to <8 x i16>*
  %19452 = load <8 x i16>, <8 x i16>* %19451, align 2, !tbaa !389
  %19453 = getelementptr inbounds i16, i16* %19419, i64 -56
  %19454 = bitcast i16* %19453 to <8 x i16>*
  %19455 = load <8 x i16>, <8 x i16>* %19454, align 2, !tbaa !389
  %19456 = getelementptr inbounds i16, i16* %19425, i64 -56
  %19457 = bitcast i16* %19456 to <8 x i16>*
  %19458 = load <8 x i16>, <8 x i16>* %19457, align 2, !tbaa !389
  %19459 = getelementptr inbounds i16, i16* %19431, i64 -56
  %19460 = bitcast i16* %19459 to <8 x i16>*
  %19461 = load <8 x i16>, <8 x i16>* %19460, align 2, !tbaa !389
  %19462 = getelementptr inbounds i16, i16* %19436, i64 -56
  %19463 = bitcast i16* %19462 to <8 x i16>*
  %19464 = load <8 x i16>, <8 x i16>* %19463, align 2, !tbaa !389
  %19465 = add <8 x i16> %19455, %19452
  %19466 = add <8 x i16> %19465, %19458
  %19467 = add <8 x i16> %19466, %19461
  %19468 = add <8 x i16> %19467, %19464
  %19469 = zext <8 x i16> %19468 to <8 x i32>
  %19470 = mul nuw <8 x i32> %19469, <i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429>
  %19471 = lshr <8 x i32> %19470, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %19472 = shufflevector <8 x i32> %19471, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %19473 = shufflevector <8 x i32> %19471, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %19474 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %19473)
  %19475 = getelementptr inbounds i16, i16* %19413, i64 -48
  %19476 = bitcast i16* %19475 to <8 x i16>*
  %19477 = load <8 x i16>, <8 x i16>* %19476, align 2, !tbaa !389
  %19478 = getelementptr inbounds i16, i16* %19419, i64 -48
  %19479 = bitcast i16* %19478 to <8 x i16>*
  %19480 = load <8 x i16>, <8 x i16>* %19479, align 2, !tbaa !389
  %19481 = getelementptr inbounds i16, i16* %19425, i64 -48
  %19482 = bitcast i16* %19481 to <8 x i16>*
  %19483 = load <8 x i16>, <8 x i16>* %19482, align 2, !tbaa !389
  %19484 = getelementptr inbounds i16, i16* %19431, i64 -48
  %19485 = bitcast i16* %19484 to <8 x i16>*
  %19486 = load <8 x i16>, <8 x i16>* %19485, align 2, !tbaa !389
  %19487 = getelementptr inbounds i16, i16* %19436, i64 -48
  %19488 = bitcast i16* %19487 to <8 x i16>*
  %19489 = load <8 x i16>, <8 x i16>* %19488, align 2, !tbaa !389
  %19490 = add <8 x i16> %19480, %19477
  %19491 = add <8 x i16> %19490, %19483
  %19492 = add <8 x i16> %19491, %19486
  %19493 = add <8 x i16> %19492, %19489
  %19494 = zext <8 x i16> %19493 to <8 x i32>
  %19495 = mul nuw <8 x i32> %19494, <i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429>
  %19496 = lshr <8 x i32> %19495, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %19497 = shufflevector <8 x i32> %19496, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %19498 = shufflevector <8 x i32> %19496, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %19499 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %19498)
  %19500 = getelementptr inbounds i16, i16* %19413, i64 -40
  %19501 = bitcast i16* %19500 to <8 x i16>*
  %19502 = load <8 x i16>, <8 x i16>* %19501, align 2, !tbaa !389
  %19503 = getelementptr inbounds i16, i16* %19419, i64 -40
  %19504 = bitcast i16* %19503 to <8 x i16>*
  %19505 = load <8 x i16>, <8 x i16>* %19504, align 2, !tbaa !389
  %19506 = getelementptr inbounds i16, i16* %19425, i64 -40
  %19507 = bitcast i16* %19506 to <8 x i16>*
  %19508 = load <8 x i16>, <8 x i16>* %19507, align 2, !tbaa !389
  %19509 = getelementptr inbounds i16, i16* %19431, i64 -40
  %19510 = bitcast i16* %19509 to <8 x i16>*
  %19511 = load <8 x i16>, <8 x i16>* %19510, align 2, !tbaa !389
  %19512 = getelementptr inbounds i16, i16* %19436, i64 -40
  %19513 = bitcast i16* %19512 to <8 x i16>*
  %19514 = load <8 x i16>, <8 x i16>* %19513, align 2, !tbaa !389
  %19515 = add <8 x i16> %19505, %19502
  %19516 = add <8 x i16> %19515, %19508
  %19517 = add <8 x i16> %19516, %19511
  %19518 = add <8 x i16> %19517, %19514
  %19519 = zext <8 x i16> %19518 to <8 x i32>
  %19520 = mul nuw <8 x i32> %19519, <i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429>
  %19521 = lshr <8 x i32> %19520, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %19522 = shufflevector <8 x i32> %19521, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %19523 = shufflevector <8 x i32> %19521, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %19524 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %19523)
  %19525 = getelementptr inbounds i16, i16* %19413, i64 -32
  %19526 = bitcast i16* %19525 to <8 x i16>*
  %19527 = load <8 x i16>, <8 x i16>* %19526, align 2, !tbaa !389
  %19528 = getelementptr inbounds i16, i16* %19419, i64 -32
  %19529 = bitcast i16* %19528 to <8 x i16>*
  %19530 = load <8 x i16>, <8 x i16>* %19529, align 2, !tbaa !389
  %19531 = getelementptr inbounds i16, i16* %19425, i64 -32
  %19532 = bitcast i16* %19531 to <8 x i16>*
  %19533 = load <8 x i16>, <8 x i16>* %19532, align 2, !tbaa !389
  %19534 = getelementptr inbounds i16, i16* %19431, i64 -32
  %19535 = bitcast i16* %19534 to <8 x i16>*
  %19536 = load <8 x i16>, <8 x i16>* %19535, align 2, !tbaa !389
  %19537 = getelementptr inbounds i16, i16* %19436, i64 -32
  %19538 = bitcast i16* %19537 to <8 x i16>*
  %19539 = load <8 x i16>, <8 x i16>* %19538, align 2, !tbaa !389
  %19540 = add <8 x i16> %19530, %19527
  %19541 = add <8 x i16> %19540, %19533
  %19542 = add <8 x i16> %19541, %19536
  %19543 = add <8 x i16> %19542, %19539
  %19544 = zext <8 x i16> %19543 to <8 x i32>
  %19545 = mul nuw <8 x i32> %19544, <i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429>
  %19546 = lshr <8 x i32> %19545, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %19547 = shufflevector <8 x i32> %19546, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %19548 = shufflevector <8 x i32> %19546, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %19549 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %19548)
  %19550 = getelementptr inbounds i16, i16* %19413, i64 -24
  %19551 = bitcast i16* %19550 to <8 x i16>*
  %19552 = load <8 x i16>, <8 x i16>* %19551, align 2, !tbaa !389
  %19553 = getelementptr inbounds i16, i16* %19419, i64 -24
  %19554 = bitcast i16* %19553 to <8 x i16>*
  %19555 = load <8 x i16>, <8 x i16>* %19554, align 2, !tbaa !389
  %19556 = getelementptr inbounds i16, i16* %19425, i64 -24
  %19557 = bitcast i16* %19556 to <8 x i16>*
  %19558 = load <8 x i16>, <8 x i16>* %19557, align 2, !tbaa !389
  %19559 = getelementptr inbounds i16, i16* %19431, i64 -24
  %19560 = bitcast i16* %19559 to <8 x i16>*
  %19561 = load <8 x i16>, <8 x i16>* %19560, align 2, !tbaa !389
  %19562 = getelementptr inbounds i16, i16* %19436, i64 -24
  %19563 = bitcast i16* %19562 to <8 x i16>*
  %19564 = load <8 x i16>, <8 x i16>* %19563, align 2, !tbaa !389
  %19565 = add <8 x i16> %19555, %19552
  %19566 = add <8 x i16> %19565, %19558
  %19567 = add <8 x i16> %19566, %19561
  %19568 = add <8 x i16> %19567, %19564
  %19569 = zext <8 x i16> %19568 to <8 x i32>
  %19570 = mul nuw <8 x i32> %19569, <i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429>
  %19571 = lshr <8 x i32> %19570, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %19572 = shufflevector <8 x i32> %19571, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %19573 = shufflevector <8 x i32> %19571, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %19574 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %19573)
  %19575 = getelementptr inbounds i16, i16* %19413, i64 -16
  %19576 = bitcast i16* %19575 to <8 x i16>*
  %19577 = load <8 x i16>, <8 x i16>* %19576, align 2, !tbaa !389
  %19578 = getelementptr inbounds i16, i16* %19419, i64 -16
  %19579 = bitcast i16* %19578 to <8 x i16>*
  %19580 = load <8 x i16>, <8 x i16>* %19579, align 2, !tbaa !389
  %19581 = getelementptr inbounds i16, i16* %19425, i64 -16
  %19582 = bitcast i16* %19581 to <8 x i16>*
  %19583 = load <8 x i16>, <8 x i16>* %19582, align 2, !tbaa !389
  %19584 = getelementptr inbounds i16, i16* %19431, i64 -16
  %19585 = bitcast i16* %19584 to <8 x i16>*
  %19586 = load <8 x i16>, <8 x i16>* %19585, align 2, !tbaa !389
  %19587 = getelementptr inbounds i16, i16* %19436, i64 -16
  %19588 = bitcast i16* %19587 to <8 x i16>*
  %19589 = load <8 x i16>, <8 x i16>* %19588, align 2, !tbaa !389
  %19590 = add <8 x i16> %19580, %19577
  %19591 = add <8 x i16> %19590, %19583
  %19592 = add <8 x i16> %19591, %19586
  %19593 = add <8 x i16> %19592, %19589
  %19594 = zext <8 x i16> %19593 to <8 x i32>
  %19595 = mul nuw <8 x i32> %19594, <i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429>
  %19596 = lshr <8 x i32> %19595, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %19597 = shufflevector <8 x i32> %19596, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %19598 = shufflevector <8 x i32> %19596, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %19599 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %19598)
  %19600 = getelementptr inbounds i16, i16* %19413, i64 -8
  %19601 = bitcast i16* %19600 to <8 x i16>*
  %19602 = load <8 x i16>, <8 x i16>* %19601, align 2, !tbaa !389
  %19603 = getelementptr inbounds i16, i16* %19419, i64 -8
  %19604 = bitcast i16* %19603 to <8 x i16>*
  %19605 = load <8 x i16>, <8 x i16>* %19604, align 2, !tbaa !389
  %19606 = getelementptr inbounds i16, i16* %19425, i64 -8
  %19607 = bitcast i16* %19606 to <8 x i16>*
  %19608 = load <8 x i16>, <8 x i16>* %19607, align 2, !tbaa !389
  %19609 = getelementptr inbounds i16, i16* %19431, i64 -8
  %19610 = bitcast i16* %19609 to <8 x i16>*
  %19611 = load <8 x i16>, <8 x i16>* %19610, align 2, !tbaa !389
  %19612 = getelementptr inbounds i16, i16* %19436, i64 -8
  %19613 = bitcast i16* %19612 to <8 x i16>*
  %19614 = load <8 x i16>, <8 x i16>* %19613, align 2, !tbaa !389
  %19615 = add <8 x i16> %19605, %19602
  %19616 = add <8 x i16> %19615, %19608
  %19617 = add <8 x i16> %19616, %19611
  %19618 = add <8 x i16> %19617, %19614
  %19619 = zext <8 x i16> %19618 to <8 x i32>
  %19620 = mul nuw <8 x i32> %19619, <i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429>
  %19621 = lshr <8 x i32> %19620, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %19622 = shufflevector <8 x i32> %19621, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %19623 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %19622)
  %19624 = shufflevector <8 x i32> %19621, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %19625 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %19624)
  %19626 = shufflevector <4 x i16> %19623, <4 x i16> %19625, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %19627 = shufflevector <16 x i16> %19626, <16 x i16> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19628 = sext i32 %a35 to i64
  %19629 = add nsw i64 %19628, -3
  %19630 = mul nsw i64 %19629, %97
  %19631 = add nsw i64 %19630, %100
  %19632 = getelementptr inbounds i16, i16* %blur_y42287, i64 %19631
  %19633 = getelementptr inbounds i16, i16* %19632, i64 -64
  %19634 = getelementptr inbounds i16, i16* %19632, i64 -56
  %19635 = getelementptr inbounds i16, i16* %19632, i64 -48
  %19636 = getelementptr inbounds i16, i16* %19632, i64 -40
  %19637 = getelementptr inbounds i16, i16* %19632, i64 -32
  %19638 = getelementptr inbounds i16, i16* %19632, i64 -24
  %19639 = getelementptr inbounds i16, i16* %19632, i64 -16
  %19640 = bitcast i16* %19639 to <8 x i16>*
  %19641 = getelementptr inbounds i16, i16* %19632, i64 -8
  %19642 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %19447)
  %19643 = shufflevector <4 x i16> %19642, <4 x i16> %19449, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %19644 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %19472)
  %19645 = shufflevector <4 x i16> %19644, <4 x i16> %19474, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %19646 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %19497)
  %19647 = shufflevector <4 x i16> %19646, <4 x i16> %19499, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %19648 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %19522)
  %19649 = shufflevector <4 x i16> %19648, <4 x i16> %19524, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %19650 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %19547)
  %19651 = shufflevector <4 x i16> %19650, <4 x i16> %19549, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %19652 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %19572)
  %19653 = shufflevector <4 x i16> %19652, <4 x i16> %19574, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %19654 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %19597)
  %19655 = shufflevector <4 x i16> %19654, <4 x i16> %19599, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %19656 = shufflevector <32 x i16> %19627, <32 x i16> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19657 = bitcast i16* %19633 to <8 x i16>*
  %19658 = bitcast i16* %19634 to <8 x i16>*
  %19659 = bitcast i16* %19635 to <8 x i16>*
  %19660 = bitcast i16* %19636 to <8 x i16>*
  %19661 = bitcast i16* %19637 to <8 x i16>*
  %19662 = bitcast i16* %19638 to <8 x i16>*
  %19663 = shufflevector <64 x i16> %19656, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %19664 = bitcast i16* %19641 to <8 x i16>*
  store <8 x i16> %19643, <8 x i16>* %19657, align 2, !tbaa !391
  store <8 x i16> %19645, <8 x i16>* %19658, align 2, !tbaa !391
  store <8 x i16> %19647, <8 x i16>* %19659, align 2, !tbaa !391
  store <8 x i16> %19649, <8 x i16>* %19660, align 2, !tbaa !391
  store <8 x i16> %19651, <8 x i16>* %19661, align 2, !tbaa !391
  store <8 x i16> %19653, <8 x i16>* %19662, align 2, !tbaa !391
  store <8 x i16> %19655, <8 x i16>* %19640, align 2, !tbaa !391
  store <8 x i16> %19663, <8 x i16>* %19664, align 2, !tbaa !391
  br label %"end for blur_y.s0.x.x144"

"end for blur_y.s0.x.x144":                       ; preds = %"for blur_y.s0.x.x143.preheader", %"end for blur_y.s0.x.x139"
  br i1 %96, label %"for blur_y.s0.x.x147.preheader", label %"end for blur_y.s0.x.x148", !prof !385

"for blur_y.s0.x.x147.preheader":                 ; preds = %"end for blur_y.s0.x.x144"
  %19665 = add nsw i32 %a35, 7
  %19666 = and i32 %19665, 7
  %19667 = mul nsw i32 %a27, %19666
  %19668 = add nsw i32 %a35, 6
  %19669 = and i32 %19668, 7
  %19670 = mul nsw i32 %a27, %19669
  %19671 = and i32 %a35, 7
  %19672 = mul nsw i32 %a27, %19671
  %19673 = add nsw i32 %a35, 2
  %19674 = and i32 %19673, 7
  %19675 = mul nsw i32 %a27, %19674
  %19676 = add nsw i32 %a35, 1
  %19677 = and i32 %19676, 7
  %19678 = mul nsw i32 %a27, %19677
  %19679 = sext i32 %a35 to i64
  %19680 = add nsw i64 %19679, -2
  %19681 = mul nsw i64 %19680, %97
  %19682 = add nsw i64 %19681, %98
  %19683 = sext i32 %19667 to i64
  %19684 = sext i32 %19670 to i64
  %19685 = sext i32 %19672 to i64
  %19686 = sext i32 %19675 to i64
  %19687 = sext i32 %19678 to i64
  br label %"for blur_y.s0.x.x147"

"for blur_y.s0.x.x147":                           ; preds = %"for blur_y.s0.x.x147.preheader", %"for blur_y.s0.x.x147"
  %indvars.iv267 = phi i64 [ 0, %"for blur_y.s0.x.x147.preheader" ], [ %indvars.iv.next268, %"for blur_y.s0.x.x147" ]
  %19688 = shl nsw i64 %indvars.iv267, 6
  %19689 = sub nsw i64 %19688, %103
  %19690 = add nsw i64 %19689, %19683
  %19691 = add nsw i64 %19689, %19684
  %19692 = add nsw i64 %19689, %19685
  %19693 = add nsw i64 %19689, %19686
  %19694 = add nsw i64 %19689, %19687
  %19695 = getelementptr inbounds i16, i16* %blur_x61, i64 %19690
  %19696 = getelementptr inbounds i16, i16* %19695, i64 64
  %19697 = bitcast i16* %19696 to <8 x i16>*
  %19698 = load <8 x i16>, <8 x i16>* %19697, align 2, !tbaa !389
  %19699 = getelementptr inbounds i16, i16* %blur_x61, i64 %19691
  %19700 = getelementptr inbounds i16, i16* %19699, i64 64
  %19701 = bitcast i16* %19700 to <8 x i16>*
  %19702 = load <8 x i16>, <8 x i16>* %19701, align 2, !tbaa !389
  %19703 = getelementptr inbounds i16, i16* %blur_x61, i64 %19692
  %19704 = getelementptr inbounds i16, i16* %19703, i64 64
  %19705 = bitcast i16* %19704 to <8 x i16>*
  %19706 = load <8 x i16>, <8 x i16>* %19705, align 2, !tbaa !389
  %19707 = getelementptr inbounds i16, i16* %blur_x61, i64 %19693
  %19708 = getelementptr inbounds i16, i16* %19707, i64 64
  %19709 = bitcast i16* %19708 to <8 x i16>*
  %19710 = load <8 x i16>, <8 x i16>* %19709, align 2, !tbaa !389
  %19711 = getelementptr inbounds i16, i16* %blur_x61, i64 %19694
  %19712 = getelementptr inbounds i16, i16* %19711, i64 64
  %19713 = bitcast i16* %19712 to <8 x i16>*
  %19714 = load <8 x i16>, <8 x i16>* %19713, align 2, !tbaa !389
  %19715 = add <8 x i16> %19702, %19698
  %19716 = add <8 x i16> %19715, %19706
  %19717 = add <8 x i16> %19716, %19710
  %19718 = add <8 x i16> %19717, %19714
  %19719 = zext <8 x i16> %19718 to <8 x i32>
  %19720 = mul nuw <8 x i32> %19719, <i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429>
  %19721 = lshr <8 x i32> %19720, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %19722 = shufflevector <8 x i32> %19721, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %19723 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %19722)
  %19724 = shufflevector <8 x i32> %19721, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %19725 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %19724)
  %19726 = shufflevector <4 x i16> %19723, <4 x i16> %19725, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %19727 = getelementptr inbounds i16, i16* %19695, i64 72
  %19728 = bitcast i16* %19727 to <8 x i16>*
  %19729 = load <8 x i16>, <8 x i16>* %19728, align 2, !tbaa !389
  %19730 = getelementptr inbounds i16, i16* %19699, i64 72
  %19731 = bitcast i16* %19730 to <8 x i16>*
  %19732 = load <8 x i16>, <8 x i16>* %19731, align 2, !tbaa !389
  %19733 = getelementptr inbounds i16, i16* %19703, i64 72
  %19734 = bitcast i16* %19733 to <8 x i16>*
  %19735 = load <8 x i16>, <8 x i16>* %19734, align 2, !tbaa !389
  %19736 = getelementptr inbounds i16, i16* %19707, i64 72
  %19737 = bitcast i16* %19736 to <8 x i16>*
  %19738 = load <8 x i16>, <8 x i16>* %19737, align 2, !tbaa !389
  %19739 = getelementptr inbounds i16, i16* %19711, i64 72
  %19740 = bitcast i16* %19739 to <8 x i16>*
  %19741 = load <8 x i16>, <8 x i16>* %19740, align 2, !tbaa !389
  %19742 = add <8 x i16> %19732, %19729
  %19743 = add <8 x i16> %19742, %19735
  %19744 = add <8 x i16> %19743, %19738
  %19745 = add <8 x i16> %19744, %19741
  %19746 = zext <8 x i16> %19745 to <8 x i32>
  %19747 = mul nuw <8 x i32> %19746, <i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429>
  %19748 = lshr <8 x i32> %19747, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %19749 = shufflevector <8 x i32> %19748, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %19750 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %19749)
  %19751 = shufflevector <8 x i32> %19748, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %19752 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %19751)
  %19753 = shufflevector <4 x i16> %19750, <4 x i16> %19752, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %19754 = getelementptr inbounds i16, i16* %19695, i64 80
  %19755 = bitcast i16* %19754 to <8 x i16>*
  %19756 = load <8 x i16>, <8 x i16>* %19755, align 2, !tbaa !389
  %19757 = getelementptr inbounds i16, i16* %19699, i64 80
  %19758 = bitcast i16* %19757 to <8 x i16>*
  %19759 = load <8 x i16>, <8 x i16>* %19758, align 2, !tbaa !389
  %19760 = getelementptr inbounds i16, i16* %19703, i64 80
  %19761 = bitcast i16* %19760 to <8 x i16>*
  %19762 = load <8 x i16>, <8 x i16>* %19761, align 2, !tbaa !389
  %19763 = getelementptr inbounds i16, i16* %19707, i64 80
  %19764 = bitcast i16* %19763 to <8 x i16>*
  %19765 = load <8 x i16>, <8 x i16>* %19764, align 2, !tbaa !389
  %19766 = getelementptr inbounds i16, i16* %19711, i64 80
  %19767 = bitcast i16* %19766 to <8 x i16>*
  %19768 = load <8 x i16>, <8 x i16>* %19767, align 2, !tbaa !389
  %19769 = add <8 x i16> %19759, %19756
  %19770 = add <8 x i16> %19769, %19762
  %19771 = add <8 x i16> %19770, %19765
  %19772 = add <8 x i16> %19771, %19768
  %19773 = zext <8 x i16> %19772 to <8 x i32>
  %19774 = mul nuw <8 x i32> %19773, <i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429>
  %19775 = lshr <8 x i32> %19774, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %19776 = shufflevector <8 x i32> %19775, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %19777 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %19776)
  %19778 = shufflevector <8 x i32> %19775, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %19779 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %19778)
  %19780 = shufflevector <4 x i16> %19777, <4 x i16> %19779, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %19781 = getelementptr inbounds i16, i16* %19695, i64 88
  %19782 = bitcast i16* %19781 to <8 x i16>*
  %19783 = load <8 x i16>, <8 x i16>* %19782, align 2, !tbaa !389
  %19784 = getelementptr inbounds i16, i16* %19699, i64 88
  %19785 = bitcast i16* %19784 to <8 x i16>*
  %19786 = load <8 x i16>, <8 x i16>* %19785, align 2, !tbaa !389
  %19787 = getelementptr inbounds i16, i16* %19703, i64 88
  %19788 = bitcast i16* %19787 to <8 x i16>*
  %19789 = load <8 x i16>, <8 x i16>* %19788, align 2, !tbaa !389
  %19790 = getelementptr inbounds i16, i16* %19707, i64 88
  %19791 = bitcast i16* %19790 to <8 x i16>*
  %19792 = load <8 x i16>, <8 x i16>* %19791, align 2, !tbaa !389
  %19793 = getelementptr inbounds i16, i16* %19711, i64 88
  %19794 = bitcast i16* %19793 to <8 x i16>*
  %19795 = load <8 x i16>, <8 x i16>* %19794, align 2, !tbaa !389
  %19796 = add <8 x i16> %19786, %19783
  %19797 = add <8 x i16> %19796, %19789
  %19798 = add <8 x i16> %19797, %19792
  %19799 = add <8 x i16> %19798, %19795
  %19800 = zext <8 x i16> %19799 to <8 x i32>
  %19801 = mul nuw <8 x i32> %19800, <i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429>
  %19802 = lshr <8 x i32> %19801, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %19803 = shufflevector <8 x i32> %19802, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %19804 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %19803)
  %19805 = shufflevector <8 x i32> %19802, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %19806 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %19805)
  %19807 = shufflevector <4 x i16> %19804, <4 x i16> %19806, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %19808 = getelementptr inbounds i16, i16* %19695, i64 96
  %19809 = bitcast i16* %19808 to <8 x i16>*
  %19810 = load <8 x i16>, <8 x i16>* %19809, align 2, !tbaa !389
  %19811 = getelementptr inbounds i16, i16* %19699, i64 96
  %19812 = bitcast i16* %19811 to <8 x i16>*
  %19813 = load <8 x i16>, <8 x i16>* %19812, align 2, !tbaa !389
  %19814 = getelementptr inbounds i16, i16* %19703, i64 96
  %19815 = bitcast i16* %19814 to <8 x i16>*
  %19816 = load <8 x i16>, <8 x i16>* %19815, align 2, !tbaa !389
  %19817 = getelementptr inbounds i16, i16* %19707, i64 96
  %19818 = bitcast i16* %19817 to <8 x i16>*
  %19819 = load <8 x i16>, <8 x i16>* %19818, align 2, !tbaa !389
  %19820 = getelementptr inbounds i16, i16* %19711, i64 96
  %19821 = bitcast i16* %19820 to <8 x i16>*
  %19822 = load <8 x i16>, <8 x i16>* %19821, align 2, !tbaa !389
  %19823 = add <8 x i16> %19813, %19810
  %19824 = add <8 x i16> %19823, %19816
  %19825 = add <8 x i16> %19824, %19819
  %19826 = add <8 x i16> %19825, %19822
  %19827 = zext <8 x i16> %19826 to <8 x i32>
  %19828 = mul nuw <8 x i32> %19827, <i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429>
  %19829 = lshr <8 x i32> %19828, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %19830 = shufflevector <8 x i32> %19829, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %19831 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %19830)
  %19832 = shufflevector <8 x i32> %19829, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %19833 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %19832)
  %19834 = shufflevector <4 x i16> %19831, <4 x i16> %19833, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %19835 = getelementptr inbounds i16, i16* %19695, i64 104
  %19836 = bitcast i16* %19835 to <8 x i16>*
  %19837 = load <8 x i16>, <8 x i16>* %19836, align 2, !tbaa !389
  %19838 = getelementptr inbounds i16, i16* %19699, i64 104
  %19839 = bitcast i16* %19838 to <8 x i16>*
  %19840 = load <8 x i16>, <8 x i16>* %19839, align 2, !tbaa !389
  %19841 = getelementptr inbounds i16, i16* %19703, i64 104
  %19842 = bitcast i16* %19841 to <8 x i16>*
  %19843 = load <8 x i16>, <8 x i16>* %19842, align 2, !tbaa !389
  %19844 = getelementptr inbounds i16, i16* %19707, i64 104
  %19845 = bitcast i16* %19844 to <8 x i16>*
  %19846 = load <8 x i16>, <8 x i16>* %19845, align 2, !tbaa !389
  %19847 = getelementptr inbounds i16, i16* %19711, i64 104
  %19848 = bitcast i16* %19847 to <8 x i16>*
  %19849 = load <8 x i16>, <8 x i16>* %19848, align 2, !tbaa !389
  %19850 = add <8 x i16> %19840, %19837
  %19851 = add <8 x i16> %19850, %19843
  %19852 = add <8 x i16> %19851, %19846
  %19853 = add <8 x i16> %19852, %19849
  %19854 = zext <8 x i16> %19853 to <8 x i32>
  %19855 = mul nuw <8 x i32> %19854, <i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429>
  %19856 = lshr <8 x i32> %19855, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %19857 = shufflevector <8 x i32> %19856, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %19858 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %19857)
  %19859 = shufflevector <8 x i32> %19856, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %19860 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %19859)
  %19861 = shufflevector <4 x i16> %19858, <4 x i16> %19860, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %19862 = getelementptr inbounds i16, i16* %19695, i64 112
  %19863 = bitcast i16* %19862 to <8 x i16>*
  %19864 = load <8 x i16>, <8 x i16>* %19863, align 2, !tbaa !389
  %19865 = getelementptr inbounds i16, i16* %19699, i64 112
  %19866 = bitcast i16* %19865 to <8 x i16>*
  %19867 = load <8 x i16>, <8 x i16>* %19866, align 2, !tbaa !389
  %19868 = getelementptr inbounds i16, i16* %19703, i64 112
  %19869 = bitcast i16* %19868 to <8 x i16>*
  %19870 = load <8 x i16>, <8 x i16>* %19869, align 2, !tbaa !389
  %19871 = getelementptr inbounds i16, i16* %19707, i64 112
  %19872 = bitcast i16* %19871 to <8 x i16>*
  %19873 = load <8 x i16>, <8 x i16>* %19872, align 2, !tbaa !389
  %19874 = getelementptr inbounds i16, i16* %19711, i64 112
  %19875 = bitcast i16* %19874 to <8 x i16>*
  %19876 = load <8 x i16>, <8 x i16>* %19875, align 2, !tbaa !389
  %19877 = add <8 x i16> %19867, %19864
  %19878 = add <8 x i16> %19877, %19870
  %19879 = add <8 x i16> %19878, %19873
  %19880 = add <8 x i16> %19879, %19876
  %19881 = zext <8 x i16> %19880 to <8 x i32>
  %19882 = mul nuw <8 x i32> %19881, <i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429>
  %19883 = lshr <8 x i32> %19882, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %19884 = shufflevector <8 x i32> %19883, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %19885 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %19884)
  %19886 = shufflevector <8 x i32> %19883, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %19887 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %19886)
  %19888 = shufflevector <4 x i16> %19885, <4 x i16> %19887, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %19889 = getelementptr inbounds i16, i16* %19695, i64 120
  %19890 = bitcast i16* %19889 to <8 x i16>*
  %19891 = load <8 x i16>, <8 x i16>* %19890, align 2, !tbaa !389
  %19892 = getelementptr inbounds i16, i16* %19699, i64 120
  %19893 = bitcast i16* %19892 to <8 x i16>*
  %19894 = load <8 x i16>, <8 x i16>* %19893, align 2, !tbaa !389
  %19895 = getelementptr inbounds i16, i16* %19703, i64 120
  %19896 = bitcast i16* %19895 to <8 x i16>*
  %19897 = load <8 x i16>, <8 x i16>* %19896, align 2, !tbaa !389
  %19898 = getelementptr inbounds i16, i16* %19707, i64 120
  %19899 = bitcast i16* %19898 to <8 x i16>*
  %19900 = load <8 x i16>, <8 x i16>* %19899, align 2, !tbaa !389
  %19901 = getelementptr inbounds i16, i16* %19711, i64 120
  %19902 = bitcast i16* %19901 to <8 x i16>*
  %19903 = load <8 x i16>, <8 x i16>* %19902, align 2, !tbaa !389
  %19904 = add <8 x i16> %19894, %19891
  %19905 = add <8 x i16> %19904, %19897
  %19906 = add <8 x i16> %19905, %19900
  %19907 = add <8 x i16> %19906, %19903
  %19908 = zext <8 x i16> %19907 to <8 x i32>
  %19909 = mul nuw <8 x i32> %19908, <i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429>
  %19910 = lshr <8 x i32> %19909, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %19911 = shufflevector <8 x i32> %19910, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %19912 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %19911)
  %19913 = shufflevector <8 x i32> %19910, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %19914 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %19913)
  %19915 = shufflevector <4 x i16> %19912, <4 x i16> %19914, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %19916 = shufflevector <16 x i16> %19915, <16 x i16> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19917 = shufflevector <32 x i16> %19916, <32 x i16> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19918 = add nsw i64 %19682, %19688
  %19919 = getelementptr inbounds i16, i16* %blur_y42287, i64 %19918
  %19920 = bitcast i16* %19919 to <8 x i16>*
  store <8 x i16> %19726, <8 x i16>* %19920, align 2, !tbaa !391
  %19921 = getelementptr inbounds i16, i16* %19919, i64 8
  %19922 = bitcast i16* %19921 to <8 x i16>*
  store <8 x i16> %19753, <8 x i16>* %19922, align 2, !tbaa !391
  %19923 = getelementptr inbounds i16, i16* %19919, i64 16
  %19924 = bitcast i16* %19923 to <8 x i16>*
  store <8 x i16> %19780, <8 x i16>* %19924, align 2, !tbaa !391
  %19925 = getelementptr inbounds i16, i16* %19919, i64 24
  %19926 = bitcast i16* %19925 to <8 x i16>*
  store <8 x i16> %19807, <8 x i16>* %19926, align 2, !tbaa !391
  %19927 = getelementptr inbounds i16, i16* %19919, i64 32
  %19928 = bitcast i16* %19927 to <8 x i16>*
  store <8 x i16> %19834, <8 x i16>* %19928, align 2, !tbaa !391
  %19929 = getelementptr inbounds i16, i16* %19919, i64 40
  %19930 = bitcast i16* %19929 to <8 x i16>*
  store <8 x i16> %19861, <8 x i16>* %19930, align 2, !tbaa !391
  %19931 = getelementptr inbounds i16, i16* %19919, i64 48
  %19932 = bitcast i16* %19931 to <8 x i16>*
  store <8 x i16> %19888, <8 x i16>* %19932, align 2, !tbaa !391
  %19933 = shufflevector <64 x i16> %19917, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %19934 = getelementptr inbounds i16, i16* %19919, i64 56
  %19935 = bitcast i16* %19934 to <8 x i16>*
  store <8 x i16> %19933, <8 x i16>* %19935, align 2, !tbaa !391
  %indvars.iv.next268 = add nuw nsw i64 %indvars.iv267, 1
  %.not177 = icmp eq i64 %indvars.iv.next268, %102
  br i1 %.not177, label %"end for blur_y.s0.x.x148", label %"for blur_y.s0.x.x147"

"end for blur_y.s0.x.x148":                       ; preds = %"for blur_y.s0.x.x147", %"end for blur_y.s0.x.x144"
  br i1 %99, label %"for blur_y.s0.x.x152.preheader", label %"end for blur_y.s0.x.x153", !prof !385

"for blur_y.s0.x.x152.preheader":                 ; preds = %"end for blur_y.s0.x.x148"
  %19936 = add nsw i32 %a35, 7
  %19937 = and i32 %19936, 7
  %19938 = add nuw nsw i32 %19937, 1
  %t398 = mul nsw i32 %a27, %19938
  %19939 = add nsw i32 %a35, 6
  %19940 = and i32 %19939, 7
  %19941 = add nuw nsw i32 %19940, 1
  %t399 = mul nsw i32 %a27, %19941
  %19942 = and i32 %a35, 7
  %19943 = add nuw nsw i32 %19942, 1
  %t400 = mul nsw i32 %a27, %19943
  %19944 = add nsw i32 %a35, 2
  %19945 = and i32 %19944, 7
  %19946 = add nuw nsw i32 %19945, 1
  %t401 = mul nsw i32 %a27, %19946
  %19947 = add nsw i32 %a35, 1
  %19948 = and i32 %19947, 7
  %19949 = add nuw nsw i32 %19948, 1
  %t402 = mul nsw i32 %a27, %19949
  %19950 = sext i32 %t398 to i64
  %19951 = getelementptr inbounds i16, i16* %blur_x61, i64 %19950
  %19952 = getelementptr inbounds i16, i16* %19951, i64 -64
  %19953 = bitcast i16* %19952 to <8 x i16>*
  %19954 = load <8 x i16>, <8 x i16>* %19953, align 2, !tbaa !389
  %19955 = sext i32 %t399 to i64
  %19956 = getelementptr inbounds i16, i16* %blur_x61, i64 %19955
  %19957 = getelementptr inbounds i16, i16* %19956, i64 -64
  %19958 = bitcast i16* %19957 to <8 x i16>*
  %19959 = load <8 x i16>, <8 x i16>* %19958, align 2, !tbaa !389
  %19960 = sext i32 %t400 to i64
  %19961 = getelementptr inbounds i16, i16* %blur_x61, i64 %19960
  %19962 = getelementptr inbounds i16, i16* %19961, i64 -64
  %19963 = bitcast i16* %19962 to <8 x i16>*
  %19964 = load <8 x i16>, <8 x i16>* %19963, align 2, !tbaa !389
  %19965 = sext i32 %t401 to i64
  %19966 = getelementptr inbounds i16, i16* %blur_x61, i64 %19965
  %19967 = getelementptr inbounds i16, i16* %19966, i64 -64
  %19968 = bitcast i16* %19967 to <8 x i16>*
  %19969 = load <8 x i16>, <8 x i16>* %19968, align 2, !tbaa !389
  %19970 = sext i32 %t402 to i64
  %19971 = getelementptr inbounds i16, i16* %blur_x61, i64 %19970
  %19972 = getelementptr inbounds i16, i16* %19971, i64 -64
  %19973 = bitcast i16* %19972 to <8 x i16>*
  %19974 = load <8 x i16>, <8 x i16>* %19973, align 2, !tbaa !389
  %19975 = add <8 x i16> %19959, %19954
  %19976 = add <8 x i16> %19975, %19964
  %19977 = add <8 x i16> %19976, %19969
  %19978 = add <8 x i16> %19977, %19974
  %19979 = zext <8 x i16> %19978 to <8 x i32>
  %19980 = mul nuw <8 x i32> %19979, <i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429>
  %19981 = lshr <8 x i32> %19980, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %19982 = shufflevector <8 x i32> %19981, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %19983 = shufflevector <8 x i32> %19981, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %19984 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %19983)
  %19985 = getelementptr inbounds i16, i16* %19951, i64 -56
  %19986 = bitcast i16* %19985 to <8 x i16>*
  %19987 = load <8 x i16>, <8 x i16>* %19986, align 2, !tbaa !389
  %19988 = getelementptr inbounds i16, i16* %19956, i64 -56
  %19989 = bitcast i16* %19988 to <8 x i16>*
  %19990 = load <8 x i16>, <8 x i16>* %19989, align 2, !tbaa !389
  %19991 = getelementptr inbounds i16, i16* %19961, i64 -56
  %19992 = bitcast i16* %19991 to <8 x i16>*
  %19993 = load <8 x i16>, <8 x i16>* %19992, align 2, !tbaa !389
  %19994 = getelementptr inbounds i16, i16* %19966, i64 -56
  %19995 = bitcast i16* %19994 to <8 x i16>*
  %19996 = load <8 x i16>, <8 x i16>* %19995, align 2, !tbaa !389
  %19997 = getelementptr inbounds i16, i16* %19971, i64 -56
  %19998 = bitcast i16* %19997 to <8 x i16>*
  %19999 = load <8 x i16>, <8 x i16>* %19998, align 2, !tbaa !389
  %20000 = add <8 x i16> %19990, %19987
  %20001 = add <8 x i16> %20000, %19993
  %20002 = add <8 x i16> %20001, %19996
  %20003 = add <8 x i16> %20002, %19999
  %20004 = zext <8 x i16> %20003 to <8 x i32>
  %20005 = mul nuw <8 x i32> %20004, <i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429>
  %20006 = lshr <8 x i32> %20005, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %20007 = shufflevector <8 x i32> %20006, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %20008 = shufflevector <8 x i32> %20006, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %20009 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %20008)
  %20010 = getelementptr inbounds i16, i16* %19951, i64 -48
  %20011 = bitcast i16* %20010 to <8 x i16>*
  %20012 = load <8 x i16>, <8 x i16>* %20011, align 2, !tbaa !389
  %20013 = getelementptr inbounds i16, i16* %19956, i64 -48
  %20014 = bitcast i16* %20013 to <8 x i16>*
  %20015 = load <8 x i16>, <8 x i16>* %20014, align 2, !tbaa !389
  %20016 = getelementptr inbounds i16, i16* %19961, i64 -48
  %20017 = bitcast i16* %20016 to <8 x i16>*
  %20018 = load <8 x i16>, <8 x i16>* %20017, align 2, !tbaa !389
  %20019 = getelementptr inbounds i16, i16* %19966, i64 -48
  %20020 = bitcast i16* %20019 to <8 x i16>*
  %20021 = load <8 x i16>, <8 x i16>* %20020, align 2, !tbaa !389
  %20022 = getelementptr inbounds i16, i16* %19971, i64 -48
  %20023 = bitcast i16* %20022 to <8 x i16>*
  %20024 = load <8 x i16>, <8 x i16>* %20023, align 2, !tbaa !389
  %20025 = add <8 x i16> %20015, %20012
  %20026 = add <8 x i16> %20025, %20018
  %20027 = add <8 x i16> %20026, %20021
  %20028 = add <8 x i16> %20027, %20024
  %20029 = zext <8 x i16> %20028 to <8 x i32>
  %20030 = mul nuw <8 x i32> %20029, <i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429>
  %20031 = lshr <8 x i32> %20030, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %20032 = shufflevector <8 x i32> %20031, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %20033 = shufflevector <8 x i32> %20031, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %20034 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %20033)
  %20035 = getelementptr inbounds i16, i16* %19951, i64 -40
  %20036 = bitcast i16* %20035 to <8 x i16>*
  %20037 = load <8 x i16>, <8 x i16>* %20036, align 2, !tbaa !389
  %20038 = getelementptr inbounds i16, i16* %19956, i64 -40
  %20039 = bitcast i16* %20038 to <8 x i16>*
  %20040 = load <8 x i16>, <8 x i16>* %20039, align 2, !tbaa !389
  %20041 = getelementptr inbounds i16, i16* %19961, i64 -40
  %20042 = bitcast i16* %20041 to <8 x i16>*
  %20043 = load <8 x i16>, <8 x i16>* %20042, align 2, !tbaa !389
  %20044 = getelementptr inbounds i16, i16* %19966, i64 -40
  %20045 = bitcast i16* %20044 to <8 x i16>*
  %20046 = load <8 x i16>, <8 x i16>* %20045, align 2, !tbaa !389
  %20047 = getelementptr inbounds i16, i16* %19971, i64 -40
  %20048 = bitcast i16* %20047 to <8 x i16>*
  %20049 = load <8 x i16>, <8 x i16>* %20048, align 2, !tbaa !389
  %20050 = add <8 x i16> %20040, %20037
  %20051 = add <8 x i16> %20050, %20043
  %20052 = add <8 x i16> %20051, %20046
  %20053 = add <8 x i16> %20052, %20049
  %20054 = zext <8 x i16> %20053 to <8 x i32>
  %20055 = mul nuw <8 x i32> %20054, <i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429>
  %20056 = lshr <8 x i32> %20055, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %20057 = shufflevector <8 x i32> %20056, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %20058 = shufflevector <8 x i32> %20056, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %20059 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %20058)
  %20060 = getelementptr inbounds i16, i16* %19951, i64 -32
  %20061 = bitcast i16* %20060 to <8 x i16>*
  %20062 = load <8 x i16>, <8 x i16>* %20061, align 2, !tbaa !389
  %20063 = getelementptr inbounds i16, i16* %19956, i64 -32
  %20064 = bitcast i16* %20063 to <8 x i16>*
  %20065 = load <8 x i16>, <8 x i16>* %20064, align 2, !tbaa !389
  %20066 = getelementptr inbounds i16, i16* %19961, i64 -32
  %20067 = bitcast i16* %20066 to <8 x i16>*
  %20068 = load <8 x i16>, <8 x i16>* %20067, align 2, !tbaa !389
  %20069 = getelementptr inbounds i16, i16* %19966, i64 -32
  %20070 = bitcast i16* %20069 to <8 x i16>*
  %20071 = load <8 x i16>, <8 x i16>* %20070, align 2, !tbaa !389
  %20072 = getelementptr inbounds i16, i16* %19971, i64 -32
  %20073 = bitcast i16* %20072 to <8 x i16>*
  %20074 = load <8 x i16>, <8 x i16>* %20073, align 2, !tbaa !389
  %20075 = add <8 x i16> %20065, %20062
  %20076 = add <8 x i16> %20075, %20068
  %20077 = add <8 x i16> %20076, %20071
  %20078 = add <8 x i16> %20077, %20074
  %20079 = zext <8 x i16> %20078 to <8 x i32>
  %20080 = mul nuw <8 x i32> %20079, <i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429>
  %20081 = lshr <8 x i32> %20080, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %20082 = shufflevector <8 x i32> %20081, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %20083 = shufflevector <8 x i32> %20081, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %20084 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %20083)
  %20085 = getelementptr inbounds i16, i16* %19951, i64 -24
  %20086 = bitcast i16* %20085 to <8 x i16>*
  %20087 = load <8 x i16>, <8 x i16>* %20086, align 2, !tbaa !389
  %20088 = getelementptr inbounds i16, i16* %19956, i64 -24
  %20089 = bitcast i16* %20088 to <8 x i16>*
  %20090 = load <8 x i16>, <8 x i16>* %20089, align 2, !tbaa !389
  %20091 = getelementptr inbounds i16, i16* %19961, i64 -24
  %20092 = bitcast i16* %20091 to <8 x i16>*
  %20093 = load <8 x i16>, <8 x i16>* %20092, align 2, !tbaa !389
  %20094 = getelementptr inbounds i16, i16* %19966, i64 -24
  %20095 = bitcast i16* %20094 to <8 x i16>*
  %20096 = load <8 x i16>, <8 x i16>* %20095, align 2, !tbaa !389
  %20097 = getelementptr inbounds i16, i16* %19971, i64 -24
  %20098 = bitcast i16* %20097 to <8 x i16>*
  %20099 = load <8 x i16>, <8 x i16>* %20098, align 2, !tbaa !389
  %20100 = add <8 x i16> %20090, %20087
  %20101 = add <8 x i16> %20100, %20093
  %20102 = add <8 x i16> %20101, %20096
  %20103 = add <8 x i16> %20102, %20099
  %20104 = zext <8 x i16> %20103 to <8 x i32>
  %20105 = mul nuw <8 x i32> %20104, <i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429>
  %20106 = lshr <8 x i32> %20105, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %20107 = shufflevector <8 x i32> %20106, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %20108 = shufflevector <8 x i32> %20106, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %20109 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %20108)
  %20110 = getelementptr inbounds i16, i16* %19951, i64 -16
  %20111 = bitcast i16* %20110 to <8 x i16>*
  %20112 = load <8 x i16>, <8 x i16>* %20111, align 2, !tbaa !389
  %20113 = getelementptr inbounds i16, i16* %19956, i64 -16
  %20114 = bitcast i16* %20113 to <8 x i16>*
  %20115 = load <8 x i16>, <8 x i16>* %20114, align 2, !tbaa !389
  %20116 = getelementptr inbounds i16, i16* %19961, i64 -16
  %20117 = bitcast i16* %20116 to <8 x i16>*
  %20118 = load <8 x i16>, <8 x i16>* %20117, align 2, !tbaa !389
  %20119 = getelementptr inbounds i16, i16* %19966, i64 -16
  %20120 = bitcast i16* %20119 to <8 x i16>*
  %20121 = load <8 x i16>, <8 x i16>* %20120, align 2, !tbaa !389
  %20122 = getelementptr inbounds i16, i16* %19971, i64 -16
  %20123 = bitcast i16* %20122 to <8 x i16>*
  %20124 = load <8 x i16>, <8 x i16>* %20123, align 2, !tbaa !389
  %20125 = add <8 x i16> %20115, %20112
  %20126 = add <8 x i16> %20125, %20118
  %20127 = add <8 x i16> %20126, %20121
  %20128 = add <8 x i16> %20127, %20124
  %20129 = zext <8 x i16> %20128 to <8 x i32>
  %20130 = mul nuw <8 x i32> %20129, <i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429>
  %20131 = lshr <8 x i32> %20130, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %20132 = shufflevector <8 x i32> %20131, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %20133 = shufflevector <8 x i32> %20131, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %20134 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %20133)
  %20135 = getelementptr inbounds i16, i16* %19951, i64 -8
  %20136 = bitcast i16* %20135 to <8 x i16>*
  %20137 = load <8 x i16>, <8 x i16>* %20136, align 2, !tbaa !389
  %20138 = getelementptr inbounds i16, i16* %19956, i64 -8
  %20139 = bitcast i16* %20138 to <8 x i16>*
  %20140 = load <8 x i16>, <8 x i16>* %20139, align 2, !tbaa !389
  %20141 = getelementptr inbounds i16, i16* %19961, i64 -8
  %20142 = bitcast i16* %20141 to <8 x i16>*
  %20143 = load <8 x i16>, <8 x i16>* %20142, align 2, !tbaa !389
  %20144 = getelementptr inbounds i16, i16* %19966, i64 -8
  %20145 = bitcast i16* %20144 to <8 x i16>*
  %20146 = load <8 x i16>, <8 x i16>* %20145, align 2, !tbaa !389
  %20147 = getelementptr inbounds i16, i16* %19971, i64 -8
  %20148 = bitcast i16* %20147 to <8 x i16>*
  %20149 = load <8 x i16>, <8 x i16>* %20148, align 2, !tbaa !389
  %20150 = add <8 x i16> %20140, %20137
  %20151 = add <8 x i16> %20150, %20143
  %20152 = add <8 x i16> %20151, %20146
  %20153 = add <8 x i16> %20152, %20149
  %20154 = zext <8 x i16> %20153 to <8 x i32>
  %20155 = mul nuw <8 x i32> %20154, <i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429>
  %20156 = lshr <8 x i32> %20155, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %20157 = shufflevector <8 x i32> %20156, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %20158 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %20157)
  %20159 = shufflevector <8 x i32> %20156, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %20160 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %20159)
  %20161 = shufflevector <4 x i16> %20158, <4 x i16> %20160, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %20162 = shufflevector <16 x i16> %20161, <16 x i16> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %20163 = sext i32 %a35 to i64
  %20164 = add nsw i64 %20163, -2
  %20165 = mul nsw i64 %20164, %97
  %20166 = add nsw i64 %20165, %100
  %20167 = getelementptr inbounds i16, i16* %blur_y42287, i64 %20166
  %20168 = getelementptr inbounds i16, i16* %20167, i64 -64
  %20169 = getelementptr inbounds i16, i16* %20167, i64 -56
  %20170 = getelementptr inbounds i16, i16* %20167, i64 -48
  %20171 = getelementptr inbounds i16, i16* %20167, i64 -40
  %20172 = getelementptr inbounds i16, i16* %20167, i64 -32
  %20173 = getelementptr inbounds i16, i16* %20167, i64 -24
  %20174 = getelementptr inbounds i16, i16* %20167, i64 -16
  %20175 = bitcast i16* %20174 to <8 x i16>*
  %20176 = getelementptr inbounds i16, i16* %20167, i64 -8
  %20177 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %19982)
  %20178 = shufflevector <4 x i16> %20177, <4 x i16> %19984, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %20179 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %20007)
  %20180 = shufflevector <4 x i16> %20179, <4 x i16> %20009, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %20181 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %20032)
  %20182 = shufflevector <4 x i16> %20181, <4 x i16> %20034, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %20183 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %20057)
  %20184 = shufflevector <4 x i16> %20183, <4 x i16> %20059, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %20185 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %20082)
  %20186 = shufflevector <4 x i16> %20185, <4 x i16> %20084, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %20187 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %20107)
  %20188 = shufflevector <4 x i16> %20187, <4 x i16> %20109, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %20189 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %20132)
  %20190 = shufflevector <4 x i16> %20189, <4 x i16> %20134, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %20191 = shufflevector <32 x i16> %20162, <32 x i16> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20192 = bitcast i16* %20168 to <8 x i16>*
  %20193 = bitcast i16* %20169 to <8 x i16>*
  %20194 = bitcast i16* %20170 to <8 x i16>*
  %20195 = bitcast i16* %20171 to <8 x i16>*
  %20196 = bitcast i16* %20172 to <8 x i16>*
  %20197 = bitcast i16* %20173 to <8 x i16>*
  %20198 = shufflevector <64 x i16> %20191, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %20199 = bitcast i16* %20176 to <8 x i16>*
  store <8 x i16> %20178, <8 x i16>* %20192, align 2, !tbaa !391
  store <8 x i16> %20180, <8 x i16>* %20193, align 2, !tbaa !391
  store <8 x i16> %20182, <8 x i16>* %20194, align 2, !tbaa !391
  store <8 x i16> %20184, <8 x i16>* %20195, align 2, !tbaa !391
  store <8 x i16> %20186, <8 x i16>* %20196, align 2, !tbaa !391
  store <8 x i16> %20188, <8 x i16>* %20197, align 2, !tbaa !391
  store <8 x i16> %20190, <8 x i16>* %20175, align 2, !tbaa !391
  store <8 x i16> %20198, <8 x i16>* %20199, align 2, !tbaa !391
  br label %"end for blur_y.s0.x.x153"

"end for blur_y.s0.x.x153":                       ; preds = %"for blur_y.s0.x.x152.preheader", %"end for blur_y.s0.x.x148"
  br i1 %96, label %"for blur_y.s0.x.x156.preheader", label %"end for blur_y.s0.x.x157", !prof !385

"for blur_y.s0.x.x156.preheader":                 ; preds = %"end for blur_y.s0.x.x153"
  %20200 = and i32 %a35, 7
  %20201 = mul nsw i32 %a27, %20200
  %20202 = add nsw i32 %a35, 7
  %20203 = and i32 %20202, 7
  %20204 = mul nsw i32 %a27, %20203
  %20205 = add nsw i32 %a35, 1
  %20206 = and i32 %20205, 7
  %20207 = mul nsw i32 %a27, %20206
  %20208 = add nsw i32 %a35, 3
  %20209 = and i32 %20208, 7
  %20210 = mul nsw i32 %a27, %20209
  %20211 = add nsw i32 %a35, 2
  %20212 = and i32 %20211, 7
  %20213 = mul nsw i32 %a27, %20212
  %20214 = sext i32 %a35 to i64
  %20215 = add nsw i64 %20214, -1
  %20216 = mul nsw i64 %20215, %97
  %20217 = add nsw i64 %20216, %98
  %20218 = sext i32 %20201 to i64
  %20219 = sext i32 %20204 to i64
  %20220 = sext i32 %20207 to i64
  %20221 = sext i32 %20210 to i64
  %20222 = sext i32 %20213 to i64
  br label %"for blur_y.s0.x.x156"

"for blur_y.s0.x.x156":                           ; preds = %"for blur_y.s0.x.x156.preheader", %"for blur_y.s0.x.x156"
  %indvars.iv275 = phi i64 [ 0, %"for blur_y.s0.x.x156.preheader" ], [ %indvars.iv.next276, %"for blur_y.s0.x.x156" ]
  %20223 = shl nsw i64 %indvars.iv275, 6
  %20224 = sub nsw i64 %20223, %103
  %20225 = add nsw i64 %20224, %20218
  %20226 = add nsw i64 %20224, %20219
  %20227 = add nsw i64 %20224, %20220
  %20228 = add nsw i64 %20224, %20221
  %20229 = add nsw i64 %20224, %20222
  %20230 = getelementptr inbounds i16, i16* %blur_x61, i64 %20225
  %20231 = getelementptr inbounds i16, i16* %20230, i64 64
  %20232 = bitcast i16* %20231 to <8 x i16>*
  %20233 = load <8 x i16>, <8 x i16>* %20232, align 2, !tbaa !389
  %20234 = getelementptr inbounds i16, i16* %blur_x61, i64 %20226
  %20235 = getelementptr inbounds i16, i16* %20234, i64 64
  %20236 = bitcast i16* %20235 to <8 x i16>*
  %20237 = load <8 x i16>, <8 x i16>* %20236, align 2, !tbaa !389
  %20238 = getelementptr inbounds i16, i16* %blur_x61, i64 %20227
  %20239 = getelementptr inbounds i16, i16* %20238, i64 64
  %20240 = bitcast i16* %20239 to <8 x i16>*
  %20241 = load <8 x i16>, <8 x i16>* %20240, align 2, !tbaa !389
  %20242 = getelementptr inbounds i16, i16* %blur_x61, i64 %20228
  %20243 = getelementptr inbounds i16, i16* %20242, i64 64
  %20244 = bitcast i16* %20243 to <8 x i16>*
  %20245 = load <8 x i16>, <8 x i16>* %20244, align 2, !tbaa !389
  %20246 = getelementptr inbounds i16, i16* %blur_x61, i64 %20229
  %20247 = getelementptr inbounds i16, i16* %20246, i64 64
  %20248 = bitcast i16* %20247 to <8 x i16>*
  %20249 = load <8 x i16>, <8 x i16>* %20248, align 2, !tbaa !389
  %20250 = add <8 x i16> %20237, %20233
  %20251 = add <8 x i16> %20250, %20241
  %20252 = add <8 x i16> %20251, %20245
  %20253 = add <8 x i16> %20252, %20249
  %20254 = zext <8 x i16> %20253 to <8 x i32>
  %20255 = mul nuw <8 x i32> %20254, <i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429>
  %20256 = lshr <8 x i32> %20255, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %20257 = shufflevector <8 x i32> %20256, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %20258 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %20257)
  %20259 = shufflevector <8 x i32> %20256, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %20260 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %20259)
  %20261 = shufflevector <4 x i16> %20258, <4 x i16> %20260, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %20262 = getelementptr inbounds i16, i16* %20230, i64 72
  %20263 = bitcast i16* %20262 to <8 x i16>*
  %20264 = load <8 x i16>, <8 x i16>* %20263, align 2, !tbaa !389
  %20265 = getelementptr inbounds i16, i16* %20234, i64 72
  %20266 = bitcast i16* %20265 to <8 x i16>*
  %20267 = load <8 x i16>, <8 x i16>* %20266, align 2, !tbaa !389
  %20268 = getelementptr inbounds i16, i16* %20238, i64 72
  %20269 = bitcast i16* %20268 to <8 x i16>*
  %20270 = load <8 x i16>, <8 x i16>* %20269, align 2, !tbaa !389
  %20271 = getelementptr inbounds i16, i16* %20242, i64 72
  %20272 = bitcast i16* %20271 to <8 x i16>*
  %20273 = load <8 x i16>, <8 x i16>* %20272, align 2, !tbaa !389
  %20274 = getelementptr inbounds i16, i16* %20246, i64 72
  %20275 = bitcast i16* %20274 to <8 x i16>*
  %20276 = load <8 x i16>, <8 x i16>* %20275, align 2, !tbaa !389
  %20277 = add <8 x i16> %20267, %20264
  %20278 = add <8 x i16> %20277, %20270
  %20279 = add <8 x i16> %20278, %20273
  %20280 = add <8 x i16> %20279, %20276
  %20281 = zext <8 x i16> %20280 to <8 x i32>
  %20282 = mul nuw <8 x i32> %20281, <i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429>
  %20283 = lshr <8 x i32> %20282, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %20284 = shufflevector <8 x i32> %20283, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %20285 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %20284)
  %20286 = shufflevector <8 x i32> %20283, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %20287 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %20286)
  %20288 = shufflevector <4 x i16> %20285, <4 x i16> %20287, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %20289 = getelementptr inbounds i16, i16* %20230, i64 80
  %20290 = bitcast i16* %20289 to <8 x i16>*
  %20291 = load <8 x i16>, <8 x i16>* %20290, align 2, !tbaa !389
  %20292 = getelementptr inbounds i16, i16* %20234, i64 80
  %20293 = bitcast i16* %20292 to <8 x i16>*
  %20294 = load <8 x i16>, <8 x i16>* %20293, align 2, !tbaa !389
  %20295 = getelementptr inbounds i16, i16* %20238, i64 80
  %20296 = bitcast i16* %20295 to <8 x i16>*
  %20297 = load <8 x i16>, <8 x i16>* %20296, align 2, !tbaa !389
  %20298 = getelementptr inbounds i16, i16* %20242, i64 80
  %20299 = bitcast i16* %20298 to <8 x i16>*
  %20300 = load <8 x i16>, <8 x i16>* %20299, align 2, !tbaa !389
  %20301 = getelementptr inbounds i16, i16* %20246, i64 80
  %20302 = bitcast i16* %20301 to <8 x i16>*
  %20303 = load <8 x i16>, <8 x i16>* %20302, align 2, !tbaa !389
  %20304 = add <8 x i16> %20294, %20291
  %20305 = add <8 x i16> %20304, %20297
  %20306 = add <8 x i16> %20305, %20300
  %20307 = add <8 x i16> %20306, %20303
  %20308 = zext <8 x i16> %20307 to <8 x i32>
  %20309 = mul nuw <8 x i32> %20308, <i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429>
  %20310 = lshr <8 x i32> %20309, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %20311 = shufflevector <8 x i32> %20310, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %20312 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %20311)
  %20313 = shufflevector <8 x i32> %20310, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %20314 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %20313)
  %20315 = shufflevector <4 x i16> %20312, <4 x i16> %20314, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %20316 = getelementptr inbounds i16, i16* %20230, i64 88
  %20317 = bitcast i16* %20316 to <8 x i16>*
  %20318 = load <8 x i16>, <8 x i16>* %20317, align 2, !tbaa !389
  %20319 = getelementptr inbounds i16, i16* %20234, i64 88
  %20320 = bitcast i16* %20319 to <8 x i16>*
  %20321 = load <8 x i16>, <8 x i16>* %20320, align 2, !tbaa !389
  %20322 = getelementptr inbounds i16, i16* %20238, i64 88
  %20323 = bitcast i16* %20322 to <8 x i16>*
  %20324 = load <8 x i16>, <8 x i16>* %20323, align 2, !tbaa !389
  %20325 = getelementptr inbounds i16, i16* %20242, i64 88
  %20326 = bitcast i16* %20325 to <8 x i16>*
  %20327 = load <8 x i16>, <8 x i16>* %20326, align 2, !tbaa !389
  %20328 = getelementptr inbounds i16, i16* %20246, i64 88
  %20329 = bitcast i16* %20328 to <8 x i16>*
  %20330 = load <8 x i16>, <8 x i16>* %20329, align 2, !tbaa !389
  %20331 = add <8 x i16> %20321, %20318
  %20332 = add <8 x i16> %20331, %20324
  %20333 = add <8 x i16> %20332, %20327
  %20334 = add <8 x i16> %20333, %20330
  %20335 = zext <8 x i16> %20334 to <8 x i32>
  %20336 = mul nuw <8 x i32> %20335, <i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429>
  %20337 = lshr <8 x i32> %20336, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %20338 = shufflevector <8 x i32> %20337, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %20339 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %20338)
  %20340 = shufflevector <8 x i32> %20337, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %20341 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %20340)
  %20342 = shufflevector <4 x i16> %20339, <4 x i16> %20341, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %20343 = getelementptr inbounds i16, i16* %20230, i64 96
  %20344 = bitcast i16* %20343 to <8 x i16>*
  %20345 = load <8 x i16>, <8 x i16>* %20344, align 2, !tbaa !389
  %20346 = getelementptr inbounds i16, i16* %20234, i64 96
  %20347 = bitcast i16* %20346 to <8 x i16>*
  %20348 = load <8 x i16>, <8 x i16>* %20347, align 2, !tbaa !389
  %20349 = getelementptr inbounds i16, i16* %20238, i64 96
  %20350 = bitcast i16* %20349 to <8 x i16>*
  %20351 = load <8 x i16>, <8 x i16>* %20350, align 2, !tbaa !389
  %20352 = getelementptr inbounds i16, i16* %20242, i64 96
  %20353 = bitcast i16* %20352 to <8 x i16>*
  %20354 = load <8 x i16>, <8 x i16>* %20353, align 2, !tbaa !389
  %20355 = getelementptr inbounds i16, i16* %20246, i64 96
  %20356 = bitcast i16* %20355 to <8 x i16>*
  %20357 = load <8 x i16>, <8 x i16>* %20356, align 2, !tbaa !389
  %20358 = add <8 x i16> %20348, %20345
  %20359 = add <8 x i16> %20358, %20351
  %20360 = add <8 x i16> %20359, %20354
  %20361 = add <8 x i16> %20360, %20357
  %20362 = zext <8 x i16> %20361 to <8 x i32>
  %20363 = mul nuw <8 x i32> %20362, <i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429>
  %20364 = lshr <8 x i32> %20363, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %20365 = shufflevector <8 x i32> %20364, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %20366 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %20365)
  %20367 = shufflevector <8 x i32> %20364, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %20368 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %20367)
  %20369 = shufflevector <4 x i16> %20366, <4 x i16> %20368, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %20370 = getelementptr inbounds i16, i16* %20230, i64 104
  %20371 = bitcast i16* %20370 to <8 x i16>*
  %20372 = load <8 x i16>, <8 x i16>* %20371, align 2, !tbaa !389
  %20373 = getelementptr inbounds i16, i16* %20234, i64 104
  %20374 = bitcast i16* %20373 to <8 x i16>*
  %20375 = load <8 x i16>, <8 x i16>* %20374, align 2, !tbaa !389
  %20376 = getelementptr inbounds i16, i16* %20238, i64 104
  %20377 = bitcast i16* %20376 to <8 x i16>*
  %20378 = load <8 x i16>, <8 x i16>* %20377, align 2, !tbaa !389
  %20379 = getelementptr inbounds i16, i16* %20242, i64 104
  %20380 = bitcast i16* %20379 to <8 x i16>*
  %20381 = load <8 x i16>, <8 x i16>* %20380, align 2, !tbaa !389
  %20382 = getelementptr inbounds i16, i16* %20246, i64 104
  %20383 = bitcast i16* %20382 to <8 x i16>*
  %20384 = load <8 x i16>, <8 x i16>* %20383, align 2, !tbaa !389
  %20385 = add <8 x i16> %20375, %20372
  %20386 = add <8 x i16> %20385, %20378
  %20387 = add <8 x i16> %20386, %20381
  %20388 = add <8 x i16> %20387, %20384
  %20389 = zext <8 x i16> %20388 to <8 x i32>
  %20390 = mul nuw <8 x i32> %20389, <i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429>
  %20391 = lshr <8 x i32> %20390, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %20392 = shufflevector <8 x i32> %20391, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %20393 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %20392)
  %20394 = shufflevector <8 x i32> %20391, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %20395 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %20394)
  %20396 = shufflevector <4 x i16> %20393, <4 x i16> %20395, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %20397 = getelementptr inbounds i16, i16* %20230, i64 112
  %20398 = bitcast i16* %20397 to <8 x i16>*
  %20399 = load <8 x i16>, <8 x i16>* %20398, align 2, !tbaa !389
  %20400 = getelementptr inbounds i16, i16* %20234, i64 112
  %20401 = bitcast i16* %20400 to <8 x i16>*
  %20402 = load <8 x i16>, <8 x i16>* %20401, align 2, !tbaa !389
  %20403 = getelementptr inbounds i16, i16* %20238, i64 112
  %20404 = bitcast i16* %20403 to <8 x i16>*
  %20405 = load <8 x i16>, <8 x i16>* %20404, align 2, !tbaa !389
  %20406 = getelementptr inbounds i16, i16* %20242, i64 112
  %20407 = bitcast i16* %20406 to <8 x i16>*
  %20408 = load <8 x i16>, <8 x i16>* %20407, align 2, !tbaa !389
  %20409 = getelementptr inbounds i16, i16* %20246, i64 112
  %20410 = bitcast i16* %20409 to <8 x i16>*
  %20411 = load <8 x i16>, <8 x i16>* %20410, align 2, !tbaa !389
  %20412 = add <8 x i16> %20402, %20399
  %20413 = add <8 x i16> %20412, %20405
  %20414 = add <8 x i16> %20413, %20408
  %20415 = add <8 x i16> %20414, %20411
  %20416 = zext <8 x i16> %20415 to <8 x i32>
  %20417 = mul nuw <8 x i32> %20416, <i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429>
  %20418 = lshr <8 x i32> %20417, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %20419 = shufflevector <8 x i32> %20418, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %20420 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %20419)
  %20421 = shufflevector <8 x i32> %20418, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %20422 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %20421)
  %20423 = shufflevector <4 x i16> %20420, <4 x i16> %20422, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %20424 = getelementptr inbounds i16, i16* %20230, i64 120
  %20425 = bitcast i16* %20424 to <8 x i16>*
  %20426 = load <8 x i16>, <8 x i16>* %20425, align 2, !tbaa !389
  %20427 = getelementptr inbounds i16, i16* %20234, i64 120
  %20428 = bitcast i16* %20427 to <8 x i16>*
  %20429 = load <8 x i16>, <8 x i16>* %20428, align 2, !tbaa !389
  %20430 = getelementptr inbounds i16, i16* %20238, i64 120
  %20431 = bitcast i16* %20430 to <8 x i16>*
  %20432 = load <8 x i16>, <8 x i16>* %20431, align 2, !tbaa !389
  %20433 = getelementptr inbounds i16, i16* %20242, i64 120
  %20434 = bitcast i16* %20433 to <8 x i16>*
  %20435 = load <8 x i16>, <8 x i16>* %20434, align 2, !tbaa !389
  %20436 = getelementptr inbounds i16, i16* %20246, i64 120
  %20437 = bitcast i16* %20436 to <8 x i16>*
  %20438 = load <8 x i16>, <8 x i16>* %20437, align 2, !tbaa !389
  %20439 = add <8 x i16> %20429, %20426
  %20440 = add <8 x i16> %20439, %20432
  %20441 = add <8 x i16> %20440, %20435
  %20442 = add <8 x i16> %20441, %20438
  %20443 = zext <8 x i16> %20442 to <8 x i32>
  %20444 = mul nuw <8 x i32> %20443, <i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429>
  %20445 = lshr <8 x i32> %20444, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %20446 = shufflevector <8 x i32> %20445, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %20447 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %20446)
  %20448 = shufflevector <8 x i32> %20445, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %20449 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %20448)
  %20450 = shufflevector <4 x i16> %20447, <4 x i16> %20449, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %20451 = shufflevector <16 x i16> %20450, <16 x i16> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %20452 = shufflevector <32 x i16> %20451, <32 x i16> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20453 = add nsw i64 %20217, %20223
  %20454 = getelementptr inbounds i16, i16* %blur_y42287, i64 %20453
  %20455 = bitcast i16* %20454 to <8 x i16>*
  store <8 x i16> %20261, <8 x i16>* %20455, align 2, !tbaa !391
  %20456 = getelementptr inbounds i16, i16* %20454, i64 8
  %20457 = bitcast i16* %20456 to <8 x i16>*
  store <8 x i16> %20288, <8 x i16>* %20457, align 2, !tbaa !391
  %20458 = getelementptr inbounds i16, i16* %20454, i64 16
  %20459 = bitcast i16* %20458 to <8 x i16>*
  store <8 x i16> %20315, <8 x i16>* %20459, align 2, !tbaa !391
  %20460 = getelementptr inbounds i16, i16* %20454, i64 24
  %20461 = bitcast i16* %20460 to <8 x i16>*
  store <8 x i16> %20342, <8 x i16>* %20461, align 2, !tbaa !391
  %20462 = getelementptr inbounds i16, i16* %20454, i64 32
  %20463 = bitcast i16* %20462 to <8 x i16>*
  store <8 x i16> %20369, <8 x i16>* %20463, align 2, !tbaa !391
  %20464 = getelementptr inbounds i16, i16* %20454, i64 40
  %20465 = bitcast i16* %20464 to <8 x i16>*
  store <8 x i16> %20396, <8 x i16>* %20465, align 2, !tbaa !391
  %20466 = getelementptr inbounds i16, i16* %20454, i64 48
  %20467 = bitcast i16* %20466 to <8 x i16>*
  store <8 x i16> %20423, <8 x i16>* %20467, align 2, !tbaa !391
  %20468 = shufflevector <64 x i16> %20452, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %20469 = getelementptr inbounds i16, i16* %20454, i64 56
  %20470 = bitcast i16* %20469 to <8 x i16>*
  store <8 x i16> %20468, <8 x i16>* %20470, align 2, !tbaa !391
  %indvars.iv.next276 = add nuw nsw i64 %indvars.iv275, 1
  %.not175 = icmp eq i64 %indvars.iv.next276, %102
  br i1 %.not175, label %"end for blur_y.s0.x.x157", label %"for blur_y.s0.x.x156"

"end for blur_y.s0.x.x157":                       ; preds = %"for blur_y.s0.x.x156", %"end for blur_y.s0.x.x153"
  br i1 %99, label %"for blur_y.s0.x.x161.preheader", label %after_bb124, !prof !385

"for blur_y.s0.x.x161.preheader":                 ; preds = %"end for blur_y.s0.x.x157"
  %20471 = and i32 %a35, 7
  %20472 = add nuw nsw i32 %20471, 1
  %t408 = mul nsw i32 %a27, %20472
  %20473 = add nsw i32 %a35, 7
  %20474 = and i32 %20473, 7
  %20475 = add nuw nsw i32 %20474, 1
  %t409 = mul nsw i32 %a27, %20475
  %20476 = add nsw i32 %a35, 1
  %20477 = and i32 %20476, 7
  %20478 = add nuw nsw i32 %20477, 1
  %t410 = mul nsw i32 %a27, %20478
  %20479 = add nsw i32 %a35, 3
  %20480 = and i32 %20479, 7
  %20481 = add nuw nsw i32 %20480, 1
  %t411 = mul nsw i32 %a27, %20481
  %20482 = add nsw i32 %a35, 2
  %20483 = and i32 %20482, 7
  %20484 = add nuw nsw i32 %20483, 1
  %t412 = mul nsw i32 %a27, %20484
  %20485 = sext i32 %t408 to i64
  %20486 = getelementptr inbounds i16, i16* %blur_x61, i64 %20485
  %20487 = getelementptr inbounds i16, i16* %20486, i64 -64
  %20488 = bitcast i16* %20487 to <8 x i16>*
  %20489 = load <8 x i16>, <8 x i16>* %20488, align 2, !tbaa !389
  %20490 = sext i32 %t409 to i64
  %20491 = getelementptr inbounds i16, i16* %blur_x61, i64 %20490
  %20492 = getelementptr inbounds i16, i16* %20491, i64 -64
  %20493 = bitcast i16* %20492 to <8 x i16>*
  %20494 = load <8 x i16>, <8 x i16>* %20493, align 2, !tbaa !389
  %20495 = sext i32 %t410 to i64
  %20496 = getelementptr inbounds i16, i16* %blur_x61, i64 %20495
  %20497 = getelementptr inbounds i16, i16* %20496, i64 -64
  %20498 = bitcast i16* %20497 to <8 x i16>*
  %20499 = load <8 x i16>, <8 x i16>* %20498, align 2, !tbaa !389
  %20500 = sext i32 %t411 to i64
  %20501 = getelementptr inbounds i16, i16* %blur_x61, i64 %20500
  %20502 = getelementptr inbounds i16, i16* %20501, i64 -64
  %20503 = bitcast i16* %20502 to <8 x i16>*
  %20504 = load <8 x i16>, <8 x i16>* %20503, align 2, !tbaa !389
  %20505 = sext i32 %t412 to i64
  %20506 = getelementptr inbounds i16, i16* %blur_x61, i64 %20505
  %20507 = getelementptr inbounds i16, i16* %20506, i64 -64
  %20508 = bitcast i16* %20507 to <8 x i16>*
  %20509 = load <8 x i16>, <8 x i16>* %20508, align 2, !tbaa !389
  %20510 = add <8 x i16> %20494, %20489
  %20511 = add <8 x i16> %20510, %20499
  %20512 = add <8 x i16> %20511, %20504
  %20513 = add <8 x i16> %20512, %20509
  %20514 = zext <8 x i16> %20513 to <8 x i32>
  %20515 = mul nuw <8 x i32> %20514, <i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429>
  %20516 = lshr <8 x i32> %20515, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %20517 = shufflevector <8 x i32> %20516, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %20518 = shufflevector <8 x i32> %20516, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %20519 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %20518)
  %20520 = getelementptr inbounds i16, i16* %20486, i64 -56
  %20521 = bitcast i16* %20520 to <8 x i16>*
  %20522 = load <8 x i16>, <8 x i16>* %20521, align 2, !tbaa !389
  %20523 = getelementptr inbounds i16, i16* %20491, i64 -56
  %20524 = bitcast i16* %20523 to <8 x i16>*
  %20525 = load <8 x i16>, <8 x i16>* %20524, align 2, !tbaa !389
  %20526 = getelementptr inbounds i16, i16* %20496, i64 -56
  %20527 = bitcast i16* %20526 to <8 x i16>*
  %20528 = load <8 x i16>, <8 x i16>* %20527, align 2, !tbaa !389
  %20529 = getelementptr inbounds i16, i16* %20501, i64 -56
  %20530 = bitcast i16* %20529 to <8 x i16>*
  %20531 = load <8 x i16>, <8 x i16>* %20530, align 2, !tbaa !389
  %20532 = getelementptr inbounds i16, i16* %20506, i64 -56
  %20533 = bitcast i16* %20532 to <8 x i16>*
  %20534 = load <8 x i16>, <8 x i16>* %20533, align 2, !tbaa !389
  %20535 = add <8 x i16> %20525, %20522
  %20536 = add <8 x i16> %20535, %20528
  %20537 = add <8 x i16> %20536, %20531
  %20538 = add <8 x i16> %20537, %20534
  %20539 = zext <8 x i16> %20538 to <8 x i32>
  %20540 = mul nuw <8 x i32> %20539, <i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429>
  %20541 = lshr <8 x i32> %20540, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %20542 = shufflevector <8 x i32> %20541, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %20543 = shufflevector <8 x i32> %20541, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %20544 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %20543)
  %20545 = getelementptr inbounds i16, i16* %20486, i64 -48
  %20546 = bitcast i16* %20545 to <8 x i16>*
  %20547 = load <8 x i16>, <8 x i16>* %20546, align 2, !tbaa !389
  %20548 = getelementptr inbounds i16, i16* %20491, i64 -48
  %20549 = bitcast i16* %20548 to <8 x i16>*
  %20550 = load <8 x i16>, <8 x i16>* %20549, align 2, !tbaa !389
  %20551 = getelementptr inbounds i16, i16* %20496, i64 -48
  %20552 = bitcast i16* %20551 to <8 x i16>*
  %20553 = load <8 x i16>, <8 x i16>* %20552, align 2, !tbaa !389
  %20554 = getelementptr inbounds i16, i16* %20501, i64 -48
  %20555 = bitcast i16* %20554 to <8 x i16>*
  %20556 = load <8 x i16>, <8 x i16>* %20555, align 2, !tbaa !389
  %20557 = getelementptr inbounds i16, i16* %20506, i64 -48
  %20558 = bitcast i16* %20557 to <8 x i16>*
  %20559 = load <8 x i16>, <8 x i16>* %20558, align 2, !tbaa !389
  %20560 = add <8 x i16> %20550, %20547
  %20561 = add <8 x i16> %20560, %20553
  %20562 = add <8 x i16> %20561, %20556
  %20563 = add <8 x i16> %20562, %20559
  %20564 = zext <8 x i16> %20563 to <8 x i32>
  %20565 = mul nuw <8 x i32> %20564, <i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429>
  %20566 = lshr <8 x i32> %20565, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %20567 = shufflevector <8 x i32> %20566, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %20568 = shufflevector <8 x i32> %20566, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %20569 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %20568)
  %20570 = getelementptr inbounds i16, i16* %20486, i64 -40
  %20571 = bitcast i16* %20570 to <8 x i16>*
  %20572 = load <8 x i16>, <8 x i16>* %20571, align 2, !tbaa !389
  %20573 = getelementptr inbounds i16, i16* %20491, i64 -40
  %20574 = bitcast i16* %20573 to <8 x i16>*
  %20575 = load <8 x i16>, <8 x i16>* %20574, align 2, !tbaa !389
  %20576 = getelementptr inbounds i16, i16* %20496, i64 -40
  %20577 = bitcast i16* %20576 to <8 x i16>*
  %20578 = load <8 x i16>, <8 x i16>* %20577, align 2, !tbaa !389
  %20579 = getelementptr inbounds i16, i16* %20501, i64 -40
  %20580 = bitcast i16* %20579 to <8 x i16>*
  %20581 = load <8 x i16>, <8 x i16>* %20580, align 2, !tbaa !389
  %20582 = getelementptr inbounds i16, i16* %20506, i64 -40
  %20583 = bitcast i16* %20582 to <8 x i16>*
  %20584 = load <8 x i16>, <8 x i16>* %20583, align 2, !tbaa !389
  %20585 = add <8 x i16> %20575, %20572
  %20586 = add <8 x i16> %20585, %20578
  %20587 = add <8 x i16> %20586, %20581
  %20588 = add <8 x i16> %20587, %20584
  %20589 = zext <8 x i16> %20588 to <8 x i32>
  %20590 = mul nuw <8 x i32> %20589, <i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429>
  %20591 = lshr <8 x i32> %20590, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %20592 = shufflevector <8 x i32> %20591, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %20593 = shufflevector <8 x i32> %20591, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %20594 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %20593)
  %20595 = getelementptr inbounds i16, i16* %20486, i64 -32
  %20596 = bitcast i16* %20595 to <8 x i16>*
  %20597 = load <8 x i16>, <8 x i16>* %20596, align 2, !tbaa !389
  %20598 = getelementptr inbounds i16, i16* %20491, i64 -32
  %20599 = bitcast i16* %20598 to <8 x i16>*
  %20600 = load <8 x i16>, <8 x i16>* %20599, align 2, !tbaa !389
  %20601 = getelementptr inbounds i16, i16* %20496, i64 -32
  %20602 = bitcast i16* %20601 to <8 x i16>*
  %20603 = load <8 x i16>, <8 x i16>* %20602, align 2, !tbaa !389
  %20604 = getelementptr inbounds i16, i16* %20501, i64 -32
  %20605 = bitcast i16* %20604 to <8 x i16>*
  %20606 = load <8 x i16>, <8 x i16>* %20605, align 2, !tbaa !389
  %20607 = getelementptr inbounds i16, i16* %20506, i64 -32
  %20608 = bitcast i16* %20607 to <8 x i16>*
  %20609 = load <8 x i16>, <8 x i16>* %20608, align 2, !tbaa !389
  %20610 = add <8 x i16> %20600, %20597
  %20611 = add <8 x i16> %20610, %20603
  %20612 = add <8 x i16> %20611, %20606
  %20613 = add <8 x i16> %20612, %20609
  %20614 = zext <8 x i16> %20613 to <8 x i32>
  %20615 = mul nuw <8 x i32> %20614, <i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429>
  %20616 = lshr <8 x i32> %20615, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %20617 = shufflevector <8 x i32> %20616, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %20618 = shufflevector <8 x i32> %20616, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %20619 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %20618)
  %20620 = getelementptr inbounds i16, i16* %20486, i64 -24
  %20621 = bitcast i16* %20620 to <8 x i16>*
  %20622 = load <8 x i16>, <8 x i16>* %20621, align 2, !tbaa !389
  %20623 = getelementptr inbounds i16, i16* %20491, i64 -24
  %20624 = bitcast i16* %20623 to <8 x i16>*
  %20625 = load <8 x i16>, <8 x i16>* %20624, align 2, !tbaa !389
  %20626 = getelementptr inbounds i16, i16* %20496, i64 -24
  %20627 = bitcast i16* %20626 to <8 x i16>*
  %20628 = load <8 x i16>, <8 x i16>* %20627, align 2, !tbaa !389
  %20629 = getelementptr inbounds i16, i16* %20501, i64 -24
  %20630 = bitcast i16* %20629 to <8 x i16>*
  %20631 = load <8 x i16>, <8 x i16>* %20630, align 2, !tbaa !389
  %20632 = getelementptr inbounds i16, i16* %20506, i64 -24
  %20633 = bitcast i16* %20632 to <8 x i16>*
  %20634 = load <8 x i16>, <8 x i16>* %20633, align 2, !tbaa !389
  %20635 = add <8 x i16> %20625, %20622
  %20636 = add <8 x i16> %20635, %20628
  %20637 = add <8 x i16> %20636, %20631
  %20638 = add <8 x i16> %20637, %20634
  %20639 = zext <8 x i16> %20638 to <8 x i32>
  %20640 = mul nuw <8 x i32> %20639, <i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429>
  %20641 = lshr <8 x i32> %20640, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %20642 = shufflevector <8 x i32> %20641, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %20643 = shufflevector <8 x i32> %20641, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %20644 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %20643)
  %20645 = getelementptr inbounds i16, i16* %20486, i64 -16
  %20646 = bitcast i16* %20645 to <8 x i16>*
  %20647 = load <8 x i16>, <8 x i16>* %20646, align 2, !tbaa !389
  %20648 = getelementptr inbounds i16, i16* %20491, i64 -16
  %20649 = bitcast i16* %20648 to <8 x i16>*
  %20650 = load <8 x i16>, <8 x i16>* %20649, align 2, !tbaa !389
  %20651 = getelementptr inbounds i16, i16* %20496, i64 -16
  %20652 = bitcast i16* %20651 to <8 x i16>*
  %20653 = load <8 x i16>, <8 x i16>* %20652, align 2, !tbaa !389
  %20654 = getelementptr inbounds i16, i16* %20501, i64 -16
  %20655 = bitcast i16* %20654 to <8 x i16>*
  %20656 = load <8 x i16>, <8 x i16>* %20655, align 2, !tbaa !389
  %20657 = getelementptr inbounds i16, i16* %20506, i64 -16
  %20658 = bitcast i16* %20657 to <8 x i16>*
  %20659 = load <8 x i16>, <8 x i16>* %20658, align 2, !tbaa !389
  %20660 = add <8 x i16> %20650, %20647
  %20661 = add <8 x i16> %20660, %20653
  %20662 = add <8 x i16> %20661, %20656
  %20663 = add <8 x i16> %20662, %20659
  %20664 = zext <8 x i16> %20663 to <8 x i32>
  %20665 = mul nuw <8 x i32> %20664, <i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429>
  %20666 = lshr <8 x i32> %20665, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %20667 = shufflevector <8 x i32> %20666, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %20668 = shufflevector <8 x i32> %20666, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %20669 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %20668)
  %20670 = getelementptr inbounds i16, i16* %20486, i64 -8
  %20671 = bitcast i16* %20670 to <8 x i16>*
  %20672 = load <8 x i16>, <8 x i16>* %20671, align 2, !tbaa !389
  %20673 = getelementptr inbounds i16, i16* %20491, i64 -8
  %20674 = bitcast i16* %20673 to <8 x i16>*
  %20675 = load <8 x i16>, <8 x i16>* %20674, align 2, !tbaa !389
  %20676 = getelementptr inbounds i16, i16* %20496, i64 -8
  %20677 = bitcast i16* %20676 to <8 x i16>*
  %20678 = load <8 x i16>, <8 x i16>* %20677, align 2, !tbaa !389
  %20679 = getelementptr inbounds i16, i16* %20501, i64 -8
  %20680 = bitcast i16* %20679 to <8 x i16>*
  %20681 = load <8 x i16>, <8 x i16>* %20680, align 2, !tbaa !389
  %20682 = getelementptr inbounds i16, i16* %20506, i64 -8
  %20683 = bitcast i16* %20682 to <8 x i16>*
  %20684 = load <8 x i16>, <8 x i16>* %20683, align 2, !tbaa !389
  %20685 = add <8 x i16> %20675, %20672
  %20686 = add <8 x i16> %20685, %20678
  %20687 = add <8 x i16> %20686, %20681
  %20688 = add <8 x i16> %20687, %20684
  %20689 = zext <8 x i16> %20688 to <8 x i32>
  %20690 = mul nuw <8 x i32> %20689, <i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429, i32 52429>
  %20691 = lshr <8 x i32> %20690, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %20692 = shufflevector <8 x i32> %20691, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %20693 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %20692)
  %20694 = shufflevector <8 x i32> %20691, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %20695 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %20694)
  %20696 = shufflevector <4 x i16> %20693, <4 x i16> %20695, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %20697 = shufflevector <16 x i16> %20696, <16 x i16> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %20698 = sext i32 %a35 to i64
  %20699 = add nsw i64 %20698, -1
  %20700 = mul nsw i64 %20699, %97
  %20701 = add nsw i64 %20700, %100
  %20702 = getelementptr inbounds i16, i16* %blur_y42287, i64 %20701
  %20703 = getelementptr inbounds i16, i16* %20702, i64 -64
  %20704 = getelementptr inbounds i16, i16* %20702, i64 -56
  %20705 = getelementptr inbounds i16, i16* %20702, i64 -48
  %20706 = getelementptr inbounds i16, i16* %20702, i64 -40
  %20707 = getelementptr inbounds i16, i16* %20702, i64 -32
  %20708 = getelementptr inbounds i16, i16* %20702, i64 -24
  %20709 = getelementptr inbounds i16, i16* %20702, i64 -16
  %20710 = bitcast i16* %20709 to <8 x i16>*
  %20711 = getelementptr inbounds i16, i16* %20702, i64 -8
  %20712 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %20517)
  %20713 = shufflevector <4 x i16> %20712, <4 x i16> %20519, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %20714 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %20542)
  %20715 = shufflevector <4 x i16> %20714, <4 x i16> %20544, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %20716 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %20567)
  %20717 = shufflevector <4 x i16> %20716, <4 x i16> %20569, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %20718 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %20592)
  %20719 = shufflevector <4 x i16> %20718, <4 x i16> %20594, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %20720 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %20617)
  %20721 = shufflevector <4 x i16> %20720, <4 x i16> %20619, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %20722 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %20642)
  %20723 = shufflevector <4 x i16> %20722, <4 x i16> %20644, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %20724 = tail call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %20667)
  %20725 = shufflevector <4 x i16> %20724, <4 x i16> %20669, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %20726 = shufflevector <32 x i16> %20697, <32 x i16> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20727 = bitcast i16* %20703 to <8 x i16>*
  %20728 = bitcast i16* %20704 to <8 x i16>*
  %20729 = bitcast i16* %20705 to <8 x i16>*
  %20730 = bitcast i16* %20706 to <8 x i16>*
  %20731 = bitcast i16* %20707 to <8 x i16>*
  %20732 = bitcast i16* %20708 to <8 x i16>*
  %20733 = shufflevector <64 x i16> %20726, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %20734 = bitcast i16* %20711 to <8 x i16>*
  store <8 x i16> %20713, <8 x i16>* %20727, align 2, !tbaa !391
  store <8 x i16> %20715, <8 x i16>* %20728, align 2, !tbaa !391
  store <8 x i16> %20717, <8 x i16>* %20729, align 2, !tbaa !391
  store <8 x i16> %20719, <8 x i16>* %20730, align 2, !tbaa !391
  store <8 x i16> %20721, <8 x i16>* %20731, align 2, !tbaa !391
  store <8 x i16> %20723, <8 x i16>* %20732, align 2, !tbaa !391
  store <8 x i16> %20725, <8 x i16>* %20710, align 2, !tbaa !391
  store <8 x i16> %20733, <8 x i16>* %20734, align 2, !tbaa !391
  br label %after_bb124
}

; Function Attrs: nounwind
define i32 @blur5x5(%struct.halide_buffer_t* noalias nocapture readonly %input.buffer, %struct.halide_buffer_t* noalias nocapture readonly %blur_y.buffer) local_unnamed_addr #10 {
entry:
  %parallel_closure25 = alloca { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, align 8
  %parallel_closure = alloca { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, align 8
  %host.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %blur_y.buffer, i64 0, i32 2
  %0 = load i8*, i8** %host.i, align 8, !tbaa !180
  %dim.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %blur_y.buffer, i64 0, i32 6
  %1 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i, align 8, !tbaa !184
  %min.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %1, i64 0, i32 0
  %2 = load i32, i32* %min.i, align 4, !tbaa !221
  %extent.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %1, i64 0, i32 1
  %3 = load i32, i32* %extent.i, align 4, !tbaa !189
  %min.i31 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %1, i64 1, i32 0
  %4 = load i32, i32* %min.i31, align 4, !tbaa !221
  %extent.i33 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %1, i64 1, i32 1
  %5 = load i32, i32* %extent.i33, align 4, !tbaa !189
  %stride.i35 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %1, i64 1, i32 2
  %6 = load i32, i32* %stride.i35, align 4, !tbaa !185
  %host.i36 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %input.buffer, i64 0, i32 2
  %7 = load i8*, i8** %host.i36, align 8, !tbaa !180
  %dim.i37 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %input.buffer, i64 0, i32 6
  %8 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i37, align 8, !tbaa !184
  %min.i38 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %8, i64 0, i32 0
  %9 = load i32, i32* %min.i38, align 4, !tbaa !221
  %extent.i40 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %8, i64 0, i32 1
  %10 = load i32, i32* %extent.i40, align 4, !tbaa !189
  %min.i44 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %8, i64 1, i32 0
  %11 = load i32, i32* %min.i44, align 4, !tbaa !221
  %extent.i46 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %8, i64 1, i32 1
  %12 = load i32, i32* %extent.i46, align 4, !tbaa !189
  %stride.i48 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %8, i64 1, i32 2
  %13 = load i32, i32* %stride.i48, align 4, !tbaa !185
  %b123 = add nsw i32 %3, %2
  %t306 = add nsw i32 %10, %9
  %14 = icmp slt i32 %3, 64
  %t307 = select i1 %14, i32 %3, i32 64
  %15 = icmp sgt i32 %12, 0
  %16 = select i1 %15, i32 %12, i32 0
  %t308 = add nsw i32 %16, %11
  %t309 = mul nsw i32 %6, %4
  %a112 = ashr i32 %3, 6
  %17 = icmp sgt i32 %a112, 0
  %t310 = select i1 %17, i32 %a112, i32 0
  %18 = icmp sgt i32 %3, 64
  %b122 = select i1 %18, i32 %3, i32 64
  %19 = add nuw nsw i32 %b122, 63
  %20 = lshr i32 %19, 6
  %21 = sub i32 127, %2
  %22 = sub i32 %21, %t307
  %23 = add i32 %22, %9
  %a115 = ashr i32 %23, 6
  %24 = icmp sgt i32 %a115, 0
  %a114 = select i1 %24, i32 %a115, i32 0
  %25 = icmp slt i32 %a114, %20
  %b118 = select i1 %25, i32 %a114, i32 %20
  %26 = sub nsw i32 %t306, %t307
  %b121 = sub i32 %26, %2
  %a120 = add nsw i32 %b121, 60
  %27 = icmp slt i32 %a120, %b122
  %28 = select i1 %27, i32 %a120, i32 %b122
  %a119 = add nsw i32 %28, -64
  %29 = icmp slt i32 %a119, %b121
  %a118 = select i1 %29, i32 %a119, i32 %b121
  %a121 = add nsw i32 %t306, 63
  %30 = icmp slt i32 %a121, %b123
  %31 = select i1 %30, i32 %a121, i32 %b123
  %32 = sub nsw i32 %31, %t307
  %b120 = sub i32 %32, %2
  %33 = icmp slt i32 %a118, %b120
  %a117 = select i1 %33, i32 %a118, i32 %b120
  %b119 = add nsw i32 %b122, -1
  %34 = icmp slt i32 %a117, %b119
  %35 = select i1 %34, i32 %a117, i32 %b119
  %36 = ashr i32 %35, 6
  %a116 = add nsw i32 %36, 1
  %.not = icmp slt i32 %36, %b118
  %t298 = select i1 %.not, i32 %b118, i32 %a116
  %37 = add nsw i32 %5, 127
  %t288 = ashr i32 %37, 7
  %38 = add nsw i32 %3, 63
  %39 = ashr i32 %38, 6
  %t303 = sub nsw i32 %39, %t310
  %t304 = sub nsw i32 %3, %t309
  %t302 = sub nsw i32 0, %t309
  %t293 = add nsw i32 %t307, %2
  %40 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure, i64 0, i32 0
  store i8* %0, i8** %40, align 8
  %41 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure, i64 0, i32 1
  store i8* %7, i8** %41, align 8
  %42 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure, i64 0, i32 2
  store i32 %5, i32* %42, align 8
  %43 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure, i64 0, i32 3
  store i32 %4, i32* %43, align 4
  %44 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure, i64 0, i32 4
  store i32 %6, i32* %44, align 8
  %45 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure, i64 0, i32 5
  store i32 %12, i32* %45, align 4
  %46 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure, i64 0, i32 6
  store i32 %9, i32* %46, align 8
  %47 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure, i64 0, i32 7
  store i32 %11, i32* %47, align 4
  %48 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure, i64 0, i32 8
  store i32 %13, i32* %48, align 8
  %49 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure, i64 0, i32 9
  store i32 %t293, i32* %49, align 4
  %50 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure, i64 0, i32 10
  store i32 %t298, i32* %50, align 8
  %51 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure, i64 0, i32 11
  store i32 %t302, i32* %51, align 4
  %52 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure, i64 0, i32 12
  store i32 %t303, i32* %52, align 8
  %53 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure, i64 0, i32 13
  store i32 %t304, i32* %53, align 4
  %54 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure, i64 0, i32 14
  store i32 %b123, i32* %54, align 8
  %55 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure, i64 0, i32 15
  store i32 %t306, i32* %55, align 4
  %56 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure, i64 0, i32 16
  store i32 %t307, i32* %56, align 8
  %57 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure, i64 0, i32 17
  store i32 %t308, i32* %57, align 4
  %58 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure, i64 0, i32 18
  store i32 %t310, i32* %58, align 8
  %59 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure, i64 0, i32 19
  store i32 %b122, i32* %59, align 4
  %60 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure, i64 0, i32 20
  store i32 %20, i32* %60, align 8
  %61 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure, i64 0, i32 21
  store i32 %b118, i32* %61, align 4
  %62 = bitcast { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure to i8*
  %closure_result = call i32 @halide_do_par_for(i8* null, i32 (i8*, i32, i8*)* nonnull @blur5x5_par_for_blur_y_s0_y_y, i32 0, i32 %t288, i8* nonnull %62) #11
  %63 = load i32, i32* %min.i, align 4, !tbaa !221
  %64 = load i32, i32* %extent.i, align 4, !tbaa !189
  %65 = load i32, i32* %min.i31, align 4, !tbaa !221
  %66 = load i32, i32* %extent.i33, align 4, !tbaa !189
  %67 = load i32, i32* %stride.i35, align 4, !tbaa !185
  %68 = load i32, i32* %min.i38, align 4, !tbaa !221
  %69 = load i32, i32* %extent.i40, align 4, !tbaa !189
  %70 = load i32, i32* %min.i44, align 4, !tbaa !221
  %71 = load i32, i32* %extent.i46, align 4, !tbaa !189
  %72 = load i32, i32* %stride.i48, align 4, !tbaa !185
  %t305 = add nsw i32 %64, %63
  %t30614 = add nsw i32 %69, %68
  %73 = icmp slt i32 %64, 64
  %t30715 = select i1 %73, i32 %64, i32 64
  %74 = icmp sgt i32 %71, 0
  %75 = select i1 %74, i32 %71, i32 0
  %t30816 = add nsw i32 %75, %70
  %a124 = ashr i32 %64, 6
  %76 = icmp sgt i32 %a124, 0
  %t31018 = select i1 %76, i32 %a124, i32 0
  %77 = icmp sgt i32 %64, 64
  %t311 = select i1 %77, i32 %64, i32 64
  %78 = add nuw nsw i32 %t311, 63
  %79 = lshr i32 %78, 6
  %80 = sub i32 127, %63
  %81 = sub i32 %80, %t30715
  %82 = add i32 %81, %68
  %a128 = ashr i32 %82, 6
  %83 = icmp sgt i32 %a128, 0
  %a127 = select i1 %83, i32 %a128, i32 0
  %84 = icmp slt i32 %a127, %79
  %t313 = select i1 %84, i32 %a127, i32 %79
  %85 = sub nsw i32 %t30614, %t30715
  %b139 = sub i32 %85, %63
  %a138 = add nsw i32 %b139, 60
  %86 = icmp slt i32 %a138, %t311
  %87 = select i1 %86, i32 %a138, i32 %t311
  %a137 = add nsw i32 %87, -64
  %88 = icmp slt i32 %a137, %b139
  %a136 = select i1 %88, i32 %a137, i32 %b139
  %a139 = add nsw i32 %t30614, 63
  %89 = icmp slt i32 %a139, %t305
  %90 = select i1 %89, i32 %a139, i32 %t305
  %91 = sub nsw i32 %90, %t30715
  %b138 = sub i32 %91, %63
  %92 = icmp slt i32 %a136, %b138
  %a135 = select i1 %92, i32 %a136, i32 %b138
  %b137 = add nsw i32 %t311, -1
  %93 = icmp slt i32 %a135, %b137
  %94 = select i1 %93, i32 %a135, i32 %b137
  %95 = ashr i32 %94, 6
  %a134 = add nsw i32 %95, 1
  %.not27 = icmp slt i32 %95, %t313
  %t29819 = select i1 %.not27, i32 %t313, i32 %a134
  %96 = add nsw i32 %66, 127
  %t28820 = ashr i32 %96, 7
  %97 = add nsw i32 %64, 63
  %98 = ashr i32 %97, 6
  %t30321 = sub nsw i32 %98, %t31018
  %99 = mul nsw i32 %67, %65
  %t30422 = sub nsw i32 %64, %99
  %t30223 = sub nsw i32 0, %99
  %t29324 = add nsw i32 %t30715, %63
  %100 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure25, i64 0, i32 0
  store i8* %0, i8** %100, align 8
  %101 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure25, i64 0, i32 1
  store i8* %7, i8** %101, align 8
  %102 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure25, i64 0, i32 2
  store i32 %66, i32* %102, align 8
  %103 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure25, i64 0, i32 3
  store i32 %65, i32* %103, align 4
  %104 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure25, i64 0, i32 4
  store i32 %67, i32* %104, align 8
  %105 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure25, i64 0, i32 5
  store i32 %71, i32* %105, align 4
  %106 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure25, i64 0, i32 6
  store i32 %68, i32* %106, align 8
  %107 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure25, i64 0, i32 7
  store i32 %70, i32* %107, align 4
  %108 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure25, i64 0, i32 8
  store i32 %72, i32* %108, align 8
  %109 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure25, i64 0, i32 9
  store i32 %t29324, i32* %109, align 4
  %110 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure25, i64 0, i32 10
  store i32 %t29819, i32* %110, align 8
  %111 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure25, i64 0, i32 11
  store i32 %t30223, i32* %111, align 4
  %112 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure25, i64 0, i32 12
  store i32 %t30321, i32* %112, align 8
  %113 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure25, i64 0, i32 13
  store i32 %t30422, i32* %113, align 4
  %114 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure25, i64 0, i32 14
  store i32 %t305, i32* %114, align 8
  %115 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure25, i64 0, i32 15
  store i32 %t30614, i32* %115, align 4
  %116 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure25, i64 0, i32 16
  store i32 %t30715, i32* %116, align 8
  %117 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure25, i64 0, i32 17
  store i32 %t30816, i32* %117, align 4
  %118 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure25, i64 0, i32 18
  store i32 %t31018, i32* %118, align 8
  %119 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure25, i64 0, i32 19
  store i32 %t311, i32* %119, align 4
  %120 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure25, i64 0, i32 20
  store i32 %79, i32* %120, align 8
  %121 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure25, i64 0, i32 21
  store i32 %t313, i32* %121, align 4
  %122 = bitcast { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure25 to i8*
  %closure_result26 = call i32 @halide_do_par_for(i8* null, i32 (i8*, i32, i8*)* nonnull @blur5x5_par_for_blur_y_s0_y_y, i32 0, i32 %t28820, i8* nonnull %122) #11
  ret i32 0
}

; Function Attrs: nounwind
define i32 @blur5x5_argv(i8** nocapture readonly %0) local_unnamed_addr #11 {
entry:
  %1 = bitcast i8** %0 to %struct.halide_buffer_t**
  %2 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %1, align 8
  %3 = getelementptr i8*, i8** %0, i64 1
  %4 = bitcast i8** %3 to %struct.halide_buffer_t**
  %5 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %4, align 8
  %6 = tail call i32 @blur5x5(%struct.halide_buffer_t* %2, %struct.halide_buffer_t* %5) #16
  ret i32 0
}

; Function Attrs: norecurse nounwind readnone willreturn
define nonnull %struct.halide_filter_metadata_t* @blur5x5_metadata() local_unnamed_addr #12 {
entry:
  ret %struct.halide_filter_metadata_t* @blur5x5_metadata_storage
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur5x5_arm_depth3.0(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  ret <8 x i16> %3
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.1(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.2(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.3(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.4(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.5(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.6(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.7(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.8(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.9(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.10(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur5x5_arm_depth3.11(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  ret <8 x i16> %3
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.12(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.13(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.14(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.15(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.16(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.17(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.18(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.19(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.20(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.21(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur5x5_arm_depth3.22(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  ret <8 x i16> %3
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.23(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.24(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.25(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.26(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.27(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.28(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.29(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.30(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.31(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.32(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur5x5_arm_depth3.33(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  ret <8 x i16> %3
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.34(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.35(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.36(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.37(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.38(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.39(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.40(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.41(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.42(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.43(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur5x5_arm_depth3.44(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  ret <8 x i16> %3
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.45(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.46(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.47(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.48(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.49(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.50(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.51(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.52(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.53(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.54(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur5x5_arm_depth3.55(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  ret <8 x i16> %3
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.56(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.57(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.58(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.59(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.60(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.61(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.62(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.63(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.64(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.65(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur5x5_arm_depth3.66(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  ret <8 x i16> %3
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.67(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.68(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.69(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.70(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.71(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.72(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.73(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.74(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.75(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.76(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur5x5_arm_depth3.77(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  ret <8 x i16> %3
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.78(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.79(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.80(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.81(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.82(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.83(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.84(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.85(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.86(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.87(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur5x5_arm_depth3.88(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  ret <8 x i16> %3
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.89(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.90(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.91(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.92(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.93(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.94(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.95(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.96(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.97(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.98(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur5x5_arm_depth3.99(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  ret <8 x i16> %3
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.100(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.101(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.102(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.103(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.104(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.105(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.106(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.107(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.108(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.109(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur5x5_arm_depth3.110(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  ret <8 x i16> %3
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.111(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.112(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.113(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.114(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.115(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.116(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.117(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.118(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.119(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.120(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur5x5_arm_depth3.121(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  ret <8 x i16> %3
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.122(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.123(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.124(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.125(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.126(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.127(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.128(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.129(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.130(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.131(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur5x5_arm_depth3.132(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  ret <8 x i16> %3
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.133(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.134(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.135(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.136(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.137(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.138(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.139(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.140(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.141(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.142(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur5x5_arm_depth3.143(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  ret <8 x i16> %3
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.144(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.145(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.146(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.147(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.148(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.149(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.150(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.151(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.152(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.153(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur5x5_arm_depth3.154(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  ret <8 x i16> %3
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.155(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.156(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.157(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.158(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.159(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.160(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.161(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.162(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.163(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.164(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur5x5_arm_depth3.165(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  ret <8 x i16> %3
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.166(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.167(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.168(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.169(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.170(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.171(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.172(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.173(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.174(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.175(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur5x5_arm_depth3.176(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  ret <8 x i16> %3
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur5x5_arm_depth3.177(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  ret <8 x i16> %3
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur5x5_arm_depth3.178(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  ret <8 x i16> %3
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur5x5_arm_depth3.179(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  ret <8 x i16> %3
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur5x5_arm_depth3.180(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  ret <8 x i16> %3
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur5x5_arm_depth3.181(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  ret <8 x i16> %3
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur5x5_arm_depth3.182(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  ret <8 x i16> %3
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur5x5_arm_depth3.183(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  ret <8 x i16> %3
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur5x5_arm_depth3.184(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  ret <8 x i16> %3
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.185(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.186(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.187(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.188(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.189(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.190(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.191(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.192(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.193(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.194(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur5x5_arm_depth3.195(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  ret <8 x i16> %3
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.196(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.197(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.198(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.199(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.200(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.201(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.202(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.203(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.204(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.205(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur5x5_arm_depth3.206(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  ret <8 x i16> %3
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.207(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.208(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.209(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.210(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.211(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.212(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.213(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.214(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.215(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.216(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur5x5_arm_depth3.217(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  ret <8 x i16> %3
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.218(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.219(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.220(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.221(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.222(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.223(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.224(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.225(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.226(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.227(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur5x5_arm_depth3.228(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  ret <8 x i16> %3
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.229(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.230(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.231(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.232(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.233(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.234(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.235(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.236(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.237(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.238(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur5x5_arm_depth3.239(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  ret <8 x i16> %3
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.240(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.241(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.242(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.243(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.244(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.245(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.246(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.247(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.248(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.249(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur5x5_arm_depth3.250(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  ret <8 x i16> %3
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.251(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.252(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.253(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.254(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.255(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.256(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.257(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.258(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.259(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.260(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur5x5_arm_depth3.261(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  ret <8 x i16> %3
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.262(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.263(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.264(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.265(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.266(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.267(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.268(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.269(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.270(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.271(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur5x5_arm_depth3.272(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  ret <8 x i16> %3
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.273(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.274(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.275(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.276(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.277(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.278(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.279(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.280(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.281(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.282(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur5x5_arm_depth3.283(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  ret <8 x i16> %3
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.284(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.285(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.286(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.287(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.288(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.289(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.290(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.291(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.292(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.293(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur5x5_arm_depth3.294(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  ret <8 x i16> %3
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.295(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.296(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.297(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.298(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.299(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.300(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.301(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.302(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.303(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.304(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur5x5_arm_depth3.305(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  ret <8 x i16> %3
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.306(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.307(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.308(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.309(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.310(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.311(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.312(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.313(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.314(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.315(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur5x5_arm_depth3.316(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  ret <8 x i16> %3
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.317(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.318(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.319(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.320(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.321(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.322(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.323(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.324(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.325(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.326(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur5x5_arm_depth3.327(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  ret <8 x i16> %3
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.328(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.329(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.330(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.331(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.332(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.333(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.334(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.335(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.336(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.337(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur5x5_arm_depth3.338(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  ret <8 x i16> %3
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.339(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.340(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.341(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.342(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.343(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.344(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.345(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.346(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.347(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.348(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur5x5_arm_depth3.349(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  ret <8 x i16> %3
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.350(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.351(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.352(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.353(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.354(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.355(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.356(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.357(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.358(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur5x5_arm_depth3.359(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2, <4 x i32> %arg.3) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> %arg.2) #11
  %2 = add <4 x i32> %1, %arg.3
  ret <4 x i32> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur5x5_arm_depth3.360(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  ret <8 x i16> %3
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur5x5_arm_depth3.361(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  ret <8 x i16> %3
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur5x5_arm_depth3.362(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  ret <8 x i16> %3
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur5x5_arm_depth3.363(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  ret <8 x i16> %3
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur5x5_arm_depth3.364(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  ret <8 x i16> %3
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur5x5_arm_depth3.365(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  ret <8 x i16> %3
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur5x5_arm_depth3.366(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  ret <8 x i16> %3
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur5x5_arm_depth3.367(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  ret <8 x i16> %3
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur5x5_arm_depth3.368(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  ret <8 x i16> %3
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur5x5_arm_depth3.369(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  ret <8 x i16> %3
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur5x5_arm_depth3.370(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  ret <8 x i16> %3
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur5x5_arm_depth3.371(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  ret <8 x i16> %3
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur5x5_arm_depth3.372(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  ret <8 x i16> %3
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur5x5_arm_depth3.373(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  ret <8 x i16> %3
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur5x5_arm_depth3.374(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  ret <8 x i16> %3
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur5x5_arm_depth3.375(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  ret <8 x i16> %3
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur5x5_arm_depth3.376(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  ret <8 x i16> %3
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur5x5_arm_depth3.377(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  ret <8 x i16> %3
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur5x5_arm_depth3.378(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  ret <8 x i16> %3
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur5x5_arm_depth3.379(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  ret <8 x i16> %3
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur5x5_arm_depth3.380(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  ret <8 x i16> %3
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur5x5_arm_depth3.381(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  ret <8 x i16> %3
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur5x5_arm_depth3.382(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  ret <8 x i16> %3
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur5x5_arm_depth3.383(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  ret <8 x i16> %3
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur5x5_arm_depth3.384(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  ret <8 x i16> %3
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur5x5_arm_depth3.385(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  ret <8 x i16> %3
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur5x5_arm_depth3.386(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  ret <8 x i16> %3
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur5x5_arm_depth3.387(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  ret <8 x i16> %3
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur5x5_arm_depth3.388(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  ret <8 x i16> %3
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur5x5_arm_depth3.389(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  ret <8 x i16> %3
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur5x5_arm_depth3.390(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  ret <8 x i16> %3
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur5x5_arm_depth3.391(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  ret <8 x i16> %3
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur5x5_arm_depth3.392(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  ret <8 x i16> %3
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur5x5_arm_depth3.393(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  ret <8 x i16> %3
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur5x5_arm_depth3.394(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  ret <8 x i16> %3
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur5x5_arm_depth3.395(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  ret <8 x i16> %3
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur5x5_arm_depth3.396(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  ret <8 x i16> %3
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur5x5_arm_depth3.397(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  ret <8 x i16> %3
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur5x5_arm_depth3.398(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  ret <8 x i16> %3
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur5x5_arm_depth3.399(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  ret <8 x i16> %3
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur5x5_arm_depth3.400(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  ret <8 x i16> %3
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur5x5_arm_depth3.401(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  ret <8 x i16> %3
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur5x5_arm_depth3.402(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  ret <8 x i16> %3
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur5x5_arm_depth3.403(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  ret <8 x i16> %3
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur5x5_arm_depth3.404(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  ret <8 x i16> %3
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur5x5_arm_depth3.405(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  ret <8 x i16> %3
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur5x5_arm_depth3.406(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  ret <8 x i16> %3
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur5x5_arm_depth3.407(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  ret <8 x i16> %3
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur5x5_arm_depth3.408(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  ret <8 x i16> %3
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur5x5_arm_depth3.409(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  ret <8 x i16> %3
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur5x5_arm_depth3.410(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  ret <8 x i16> %3
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur5x5_arm_depth3.411(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  ret <8 x i16> %3
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur5x5_arm_depth3.412(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  ret <8 x i16> %3
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur5x5_arm_depth3.413(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  ret <8 x i16> %3
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur5x5_arm_depth3.414(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  ret <8 x i16> %3
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur5x5_arm_depth3.415(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  ret <8 x i16> %3
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur5x5_arm_depth3.416(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  ret <8 x i16> %3
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur5x5_arm_depth3.417(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  ret <8 x i16> %3
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur5x5_arm_depth3.418(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  ret <8 x i16> %3
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur5x5_arm_depth3.419(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  ret <8 x i16> %3
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur5x5_arm_depth3.420(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  ret <8 x i16> %3
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur5x5_arm_depth3.421(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  ret <8 x i16> %3
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur5x5_arm_depth3.422(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  ret <8 x i16> %3
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur5x5_arm_depth3.423(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  ret <8 x i16> %3
}

; Function Attrs: nofree nosync nounwind readnone willreturn
declare i64 @llvm.vector.reduce.add.v2i64(<2 x i64>) #9

attributes #0 = { nounwind mustprogress "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-builtins" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind willreturn mustprogress "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nofree nosync nounwind willreturn }
attributes #4 = { nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nofree nosync nounwind willreturn writeonly }
attributes #6 = { alwaysinline nounwind willreturn mustprogress "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #8 = { nounwind willreturn "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nofree nosync nounwind readnone willreturn }
attributes #10 = { nounwind "reciprocal-estimates"="none" }
attributes #11 = { nounwind }
attributes #12 = { norecurse nounwind readnone willreturn }
attributes #13 = { nounwind readnone willreturn }
attributes #14 = { nobuiltin nounwind "no-builtins" }
attributes #15 = { nobuiltin "no-builtins" }
attributes #16 = { noinline }

!llvm.module.flags = !{!0, !1, !2, !3, !4, !5, !6, !7, !8, !9, !10, !11, !12}
!llvm.ident = !{!13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 2, !"halide_use_soft_float_abi", i32 0}
!3 = !{i32 2, !"halide_mcpu", !"apple-a12"}
!4 = !{i32 2, !"halide_mattrs", !"+reserve-x18"}
!5 = !{i32 2, !"halide_mabi", !""}
!6 = !{i32 2, !"halide_use_pic", i32 1}
!7 = !{i32 2, !"halide_use_large_code_model", i32 0}
!8 = !{i32 2, !"halide_per_instruction_fast_math_flags", i32 0}
!9 = !{i32 1, !"branch-target-enforcement", i32 0}
!10 = !{i32 1, !"sign-return-address", i32 0}
!11 = !{i32 1, !"sign-return-address-all", i32 0}
!12 = !{i32 1, !"sign-return-address-with-bkey", i32 0}
!13 = !{!"clang version 12.0.1 (https://github.com/llvm/llvm-project.git fed41342a82f5a3a9201819a82bf7a48313e296b)"}
!14 = !{!15, !15, i64 0}
!15 = !{!"any pointer", !16, i64 0}
!16 = !{!"omnipotent char", !17, i64 0}
!17 = !{!"Simple C++ TBAA"}
!18 = !{!16, !16, i64 0}
!19 = !{!20, !20, i64 0}
!20 = !{!"bool", !16, i64 0}
!21 = !{i8 0, i8 2}
!22 = !{!23, !23, i64 0}
!23 = !{!"long long", !16, i64 0}
!24 = !{!25, !26, i64 0}
!25 = !{!"_ZTS18mach_timebase_info", !26, i64 0, !26, i64 4}
!26 = !{!"int", !16, i64 0}
!27 = !{!25, !26, i64 4}
!28 = !{!29, !15, i64 0}
!29 = !{!"_ZTSN6Halide7Runtime8Internal4workE", !30, i64 0, !15, i64 56, !15, i64 64, !15, i64 72, !26, i64 80, !15, i64 88, !26, i64 96, !15, i64 104, !26, i64 112, !26, i64 116, !26, i64 120, !20, i64 124}
!30 = !{!"_ZTS22halide_parallel_task_t", !15, i64 0, !15, i64 8, !15, i64 16, !15, i64 24, !26, i64 32, !26, i64 36, !26, i64 40, !26, i64 44, !20, i64 48}
!31 = !{!29, !26, i64 36}
!32 = !{!29, !26, i64 40}
!33 = !{!29, !20, i64 48}
!34 = !{!29, !15, i64 24}
!35 = !{!29, !26, i64 32}
!36 = !{!29, !15, i64 8}
!37 = !{!29, !26, i64 44}
!38 = !{!29, !15, i64 16}
!39 = !{!29, !15, i64 56}
!40 = !{!29, !15, i64 104}
!41 = !{!26, !26, i64 0}
!42 = !{!29, !26, i64 120}
!43 = !{!29, !20, i64 124}
!44 = !{!29, !15, i64 72}
!45 = !{!29, !26, i64 80}
!46 = !{!29, !15, i64 88}
!47 = !{!29, !26, i64 116}
!48 = !{!49, !49, i64 0}
!49 = !{!"vtable pointer", !17, i64 0}
!50 = !{!51, !15, i64 8}
!51 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE", !15, i64 8}
!52 = !{!53, !20, i64 2121}
!53 = !{!"_ZTSN6Halide7Runtime8Internal12work_queue_tE", !54, i64 0, !26, i64 8, !26, i64 12, !15, i64 16, !26, i64 24, !26, i64 28, !26, i64 32, !55, i64 40, !55, i64 48, !55, i64 56, !26, i64 64, !26, i64 68, !16, i64 72, !20, i64 2120, !20, i64 2121, !26, i64 2124}
!54 = !{!"_ZTS12halide_mutex", !16, i64 0}
!55 = !{!"_ZTS11halide_cond", !16, i64 0}
!56 = distinct !{!56, !57}
!57 = !{!"llvm.loop.mustprogress"}
!58 = !{!53, !26, i64 8}
!59 = distinct !{!59, !57}
!60 = !{!53, !26, i64 24}
!61 = !{!53, !26, i64 2124}
!62 = !{!53, !26, i64 28}
!63 = distinct !{!63, !57}
!64 = !{!29, !26, i64 112}
!65 = !{!29, !26, i64 96}
!66 = !{!53, !15, i64 16}
!67 = !{!29, !15, i64 64}
!68 = distinct !{!68, !57, !69}
!69 = !{!"llvm.loop.isvectorized", i32 1}
!70 = !{!53, !26, i64 68}
!71 = !{!53, !26, i64 32}
!72 = distinct !{!72, !57, !69}
!73 = !{!53, !20, i64 2120}
!74 = distinct !{!74, !57}
!75 = !{!76, !15, i64 0}
!76 = !{!"_ZTS26halide_semaphore_acquire_t", !15, i64 0, !26, i64 8}
!77 = !{!76, !26, i64 8}
!78 = distinct !{!78, !57}
!79 = !{!53, !26, i64 64}
!80 = distinct !{!80, !57}
!81 = distinct !{!81, !57}
!82 = !{i64 0, i64 8, !14, i64 8, i64 8, !14, i64 16, i64 8, !14, i64 24, i64 8, !14, i64 32, i64 4, !41, i64 36, i64 4, !41, i64 40, i64 4, !41, i64 44, i64 4, !41, i64 48, i64 1, !19, i64 56, i64 8, !14, i64 64, i64 8, !14, i64 72, i64 8, !14, i64 80, i64 4, !41, i64 88, i64 8, !14, i64 96, i64 4, !41, i64 104, i64 8, !14, i64 112, i64 4, !41, i64 116, i64 4, !41, i64 120, i64 4, !41, i64 124, i64 1, !19}
!83 = !{i64 0, i64 8, !14, i64 8, i64 8, !14, i64 16, i64 8, !14, i64 24, i64 4, !41, i64 28, i64 4, !41, i64 32, i64 4, !41, i64 36, i64 4, !41, i64 40, i64 1, !19, i64 48, i64 8, !14, i64 56, i64 8, !14, i64 64, i64 8, !14, i64 72, i64 4, !41, i64 80, i64 8, !14, i64 88, i64 4, !41, i64 96, i64 8, !14, i64 104, i64 4, !41, i64 108, i64 4, !41, i64 112, i64 4, !41, i64 116, i64 1, !19}
!84 = !{i64 0, i64 8, !14, i64 8, i64 8, !14, i64 16, i64 8, !14, i64 24, i64 4, !41, i64 32, i64 8, !14, i64 40, i64 4, !41, i64 48, i64 8, !14, i64 56, i64 4, !41, i64 60, i64 4, !41, i64 64, i64 4, !41, i64 68, i64 1, !19}
!85 = !{i64 0, i64 8, !14, i64 8, i64 4, !41, i64 12, i64 4, !41, i64 16, i64 4, !41, i64 20, i64 1, !19}
!86 = distinct !{!86, !57}
!87 = distinct !{!87, !57}
!88 = !{!89, !15, i64 144}
!89 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization10queue_dataE", !90, i64 0, !23, i64 136, !15, i64 144, !23, i64 152}
!90 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization13thread_parkerE", !91, i64 0, !92, i64 64, !20, i64 128}
!91 = !{!"_ZTS15pthread_mutex_t", !16, i64 0}
!92 = !{!"_ZTS14pthread_cond_t", !16, i64 0}
!93 = !{!94, !15, i64 16}
!94 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization11hash_bucketE", !95, i64 0, !15, i64 8, !15, i64 16}
!95 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization9word_lockE", !23, i64 0}
!96 = distinct !{!96, !57}
!97 = !{!89, !23, i64 152}
!98 = !{!90, !20, i64 128}
!99 = distinct !{!99, !57}
!100 = !{!101, !15, i64 152}
!101 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization20word_lock_queue_dataE", !90, i64 0, !15, i64 136, !15, i64 144, !15, i64 152}
!102 = !{!101, !15, i64 136}
!103 = !{!101, !15, i64 144}
!104 = distinct !{!104, !57}
!105 = distinct !{!105, !57}
!106 = distinct !{!106, !57}
!107 = !{!108, !15, i64 8}
!108 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization25broadcast_parking_controlE", !15, i64 8, !15, i64 16}
!109 = !{!108, !15, i64 16}
!110 = !{!111, !15, i64 8}
!111 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization20wait_parking_controlE", !15, i64 8, !15, i64 16}
!112 = !{!111, !15, i64 16}
!113 = !{!89, !23, i64 136}
!114 = !{!115, !20, i64 0}
!115 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization15validate_actionE", !20, i64 0, !23, i64 8}
!116 = !{!115, !23, i64 8}
!117 = !{!94, !15, i64 8}
!118 = !{!119, !15, i64 0}
!119 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization11bucket_pairE", !15, i64 0, !15, i64 8}
!120 = distinct !{!120, !57}
!121 = !{!119, !15, i64 8}
!122 = !{!123, !15, i64 0}
!123 = !{!"_ZTSN6Halide7Runtime8Internal14spawned_threadE", !15, i64 0, !15, i64 8, !124, i64 16}
!124 = !{!"long", !16, i64 0}
!125 = !{!123, !15, i64 8}
!126 = !{!123, !124, i64 16}
!127 = !{!30, !26, i64 40}
!128 = !{i64 0, i64 8, !14, i64 8, i64 8, !14, i64 16, i64 8, !14, i64 24, i64 8, !14, i64 32, i64 4, !41, i64 36, i64 4, !41, i64 40, i64 4, !41, i64 44, i64 4, !41, i64 48, i64 1, !19}
!129 = distinct !{!129, !57}
!130 = distinct !{!130, !57}
!131 = distinct !{!131, !57}
!132 = !{!133, !15, i64 8}
!133 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization22signal_parking_controlE", !15, i64 8, !15, i64 16}
!134 = !{!133, !15, i64 16}
!135 = !{!136, !15, i64 0}
!136 = !{!"_ZTS18halide_mutex_array", !15, i64 0}
!137 = distinct !{!137, !57}
!138 = !{!139, !142, i64 34}
!139 = !{!"_ZTS20halide_trace_event_t", !15, i64 0, !15, i64 8, !15, i64 16, !15, i64 24, !140, i64 32, !143, i64 36, !26, i64 40, !26, i64 44, !26, i64 48}
!140 = !{!"_ZTS13halide_type_t", !141, i64 0, !16, i64 1, !142, i64 2}
!141 = !{!"_ZTS18halide_type_code_t", !16, i64 0}
!142 = !{!"short", !16, i64 0}
!143 = !{!"_ZTS25halide_trace_event_code_t", !16, i64 0}
!144 = !{!140, !16, i64 1}
!145 = !{!139, !26, i64 48}
!146 = !{!139, !15, i64 0}
!147 = !{!139, !15, i64 24}
!148 = !{!149, !26, i64 0}
!149 = !{!"_ZTSN6Halide7Runtime8Internal23SharedExclusiveSpinLockE", !26, i64 0}
!150 = !{!151, !26, i64 4}
!151 = !{!"_ZTSN6Halide7Runtime8Internal11TraceBufferE", !149, i64 0, !26, i64 4, !26, i64 8, !16, i64 12}
!152 = !{!151, !26, i64 8}
!153 = distinct !{!153, !57}
!154 = !{!155, !26, i64 0}
!155 = !{!"_ZTS21halide_trace_packet_t", !26, i64 0, !26, i64 4, !140, i64 8, !143, i64 12, !26, i64 16, !26, i64 20, !26, i64 24}
!156 = !{!155, !26, i64 4}
!157 = !{!139, !15, i64 16}
!158 = !{!139, !15, i64 8}
!159 = !{!155, !26, i64 24}
!160 = !{!155, !142, i64 10}
!161 = distinct !{!161, !57}
!162 = !{!139, !143, i64 36}
!163 = !{!139, !16, i64 33}
!164 = distinct !{!164, !57}
!165 = !{!139, !26, i64 44}
!166 = distinct !{!166, !57, !167}
!167 = !{!"llvm.loop.peeled.count", i32 1}
!168 = !{!139, !141, i64 32}
!169 = !{!142, !142, i64 0}
!170 = !{!171, !171, i64 0}
!171 = !{!"float", !16, i64 0}
!172 = !{!173, !173, i64 0}
!173 = !{!"double", !16, i64 0}
!174 = distinct !{!174, !57, !167}
!175 = distinct !{!175, !57}
!176 = !{!139, !26, i64 40}
!177 = distinct !{!177, !57}
!178 = distinct !{!178, !57}
!179 = distinct !{!179, !57}
!180 = !{!181, !15, i64 16}
!181 = !{!"_ZTS15halide_buffer_t", !23, i64 0, !15, i64 8, !15, i64 16, !23, i64 24, !140, i64 32, !26, i64 36, !15, i64 40, !15, i64 48}
!182 = !{!181, !23, i64 0}
!183 = !{!181, !26, i64 36}
!184 = !{!181, !15, i64 40}
!185 = !{!186, !26, i64 8}
!186 = !{!"_ZTS18halide_dimension_t", !26, i64 0, !26, i64 4, !26, i64 8, !26, i64 12}
!187 = distinct !{!187, !57, !69}
!188 = !{i64 0, i64 4, !41, i64 4, i64 4, !41, i64 8, i64 4, !41, i64 12, i64 4, !41}
!189 = !{!186, !26, i64 4}
!190 = distinct !{!190, !57}
!191 = distinct !{!191, !57, !69}
!192 = !{!193, !142, i64 0}
!193 = !{!"_ZTSN6Halide7Runtime8Internal18halide_tiff_headerE", !142, i64 0, !142, i64 2, !26, i64 4, !142, i64 8, !16, i64 10, !26, i64 190, !16, i64 194, !16, i64 202}
!194 = !{!193, !142, i64 2}
!195 = !{!193, !26, i64 4}
!196 = !{!193, !142, i64 8}
!197 = !{!198, !142, i64 0}
!198 = !{!"_ZTSN6Halide7Runtime8Internal8tiff_tagE", !142, i64 0, !142, i64 2, !26, i64 4, !16, i64 8}
!199 = !{!198, !142, i64 2}
!200 = !{!198, !26, i64 4}
!201 = distinct !{!201, !57}
!202 = distinct !{!202, !57}
!203 = distinct !{!203, !57}
!204 = distinct !{!204, !57}
!205 = distinct !{!205, !57}
!206 = !{!207}
!207 = distinct !{!207, !208}
!208 = distinct !{!208, !"LVerDomain"}
!209 = !{!210}
!210 = distinct !{!210, !208}
!211 = distinct !{!211, !57, !69}
!212 = distinct !{!212, !57, !69}
!213 = distinct !{!213, !57, !69}
!214 = distinct !{!214, !57, !69}
!215 = distinct !{!215, !57, !216, !69}
!216 = !{!"llvm.loop.unroll.runtime.disable"}
!217 = distinct !{!217, !57, !69}
!218 = distinct !{!218, !57, !69}
!219 = distinct !{!219, !57, !69}
!220 = distinct !{!220, !57, !69}
!221 = !{!186, !26, i64 0}
!222 = distinct !{!222, !57}
!223 = distinct !{!223, !57, !69}
!224 = distinct !{!224, !57, !216, !69}
!225 = distinct !{!225, !57}
!226 = distinct !{!226, !57}
!227 = distinct !{!227, !57}
!228 = distinct !{!228, !57}
!229 = !{!230, !15, i64 0}
!230 = !{!"_ZTSN6Halide7Runtime8Internal10CacheEntryE", !15, i64 0, !15, i64 8, !15, i64 16, !15, i64 24, !124, i64 32, !15, i64 40, !26, i64 48, !26, i64 52, !26, i64 56, !26, i64 60, !15, i64 64, !15, i64 72, !23, i64 80, !20, i64 88}
!231 = distinct !{!231, !57}
!232 = !{!230, !26, i64 56}
!233 = !{!230, !15, i64 24}
!234 = !{!230, !15, i64 72}
!235 = distinct !{!235, !57}
!236 = distinct !{!236, !57}
!237 = !{!238, !23, i64 0}
!238 = !{!"_ZTSN6Halide7Runtime8Internal11device_copyE", !23, i64 0, !23, i64 8, !23, i64 16, !16, i64 24, !16, i64 152, !16, i64 280, !23, i64 408}
!239 = !{!238, !23, i64 8}
!240 = !{!238, !23, i64 408}
!241 = distinct !{!241, !57}
!242 = !{!238, !23, i64 16}
!243 = distinct !{!243, !57, !69}
!244 = distinct !{!244, !57, !216, !69}
!245 = distinct !{!245, !57}
!246 = distinct !{!246, !57}
!247 = distinct !{!247, !57}
!248 = distinct !{!248, !57}
!249 = !{i64 0, i64 8, !22, i64 8, i64 8, !22, i64 16, i64 8, !22, i64 24, i64 128, !18, i64 152, i64 128, !18, i64 280, i64 128, !18, i64 408, i64 8, !22}
!250 = distinct !{!250, !57}
!251 = !{!186, !26, i64 12}
!252 = !{!230, !15, i64 16}
!253 = !{!230, !124, i64 32}
!254 = !{!230, !26, i64 48}
!255 = !{!230, !26, i64 52}
!256 = !{!230, !26, i64 60}
!257 = !{!230, !15, i64 64}
!258 = !{!230, !15, i64 40}
!259 = distinct !{!259, !57}
!260 = distinct !{!260, !57}
!261 = distinct !{!261, !57}
!262 = !{!230, !20, i64 88}
!263 = !{!230, !23, i64 80}
!264 = !{i64 0, i64 8, !22, i64 8, i64 8, !14, i64 16, i64 8, !14, i64 24, i64 8, !22, i64 32, i64 1, !265, i64 33, i64 1, !18, i64 34, i64 2, !169, i64 36, i64 4, !41, i64 40, i64 8, !14, i64 48, i64 8, !14}
!265 = !{!141, !141, i64 0}
!266 = distinct !{!266, !57}
!267 = distinct !{!267, !57}
!268 = !{!230, !15, i64 8}
!269 = distinct !{!269, !57}
!270 = distinct !{!270, !57, !69}
!271 = distinct !{!271, !57, !69}
!272 = distinct !{!272, !57, !69}
!273 = distinct !{!273, !57, !69}
!274 = distinct !{!274, !57}
!275 = distinct !{!275, !57}
!276 = distinct !{!276, !57}
!277 = distinct !{!277, !57}
!278 = distinct !{!278, !57}
!279 = distinct !{!279, !57, !69}
!280 = distinct !{!280, !57, !69}
!281 = distinct !{!281, !57, !69}
!282 = distinct !{!282, !57, !69}
!283 = distinct !{!283, !57}
!284 = !{!285, !26, i64 8}
!285 = !{!"_ZTSN6Halide7Runtime8Internal16CacheBlockHeaderE", !15, i64 0, !26, i64 8}
!286 = !{!285, !15, i64 0}
!287 = distinct !{!287, !57}
!288 = distinct !{!288, !57}
!289 = distinct !{!289, !57}
!290 = distinct !{!290, !57}
!291 = distinct !{!291, !57, !69}
!292 = distinct !{!292, !57, !69}
!293 = distinct !{!293, !57, !69}
!294 = distinct !{!294, !57, !69}
!295 = distinct !{!295, !57}
!296 = distinct !{!296, !57}
!297 = distinct !{!297, !57}
!298 = distinct !{!298, !57}
!299 = distinct !{!299, !57}
!300 = distinct !{!300, !57}
!301 = distinct !{!301, !57}
!302 = distinct !{!302, !57}
!303 = distinct !{!303, !57}
!304 = !{!140, !141, i64 0}
!305 = !{!140, !142, i64 2}
!306 = !{!181, !15, i64 8}
!307 = !{!181, !23, i64 24}
!308 = distinct !{!308, !57}
!309 = !{!310, !15, i64 0}
!310 = !{!"_ZTS29halide_device_allocation_pool", !15, i64 0, !15, i64 8}
!311 = distinct !{!311, !57}
!312 = !{!310, !15, i64 8}
!313 = !{!314, !15, i64 120}
!314 = !{!"_ZTS25halide_device_interface_t", !15, i64 0, !15, i64 8, !15, i64 16, !15, i64 24, !15, i64 32, !15, i64 40, !15, i64 48, !15, i64 56, !15, i64 64, !15, i64 72, !15, i64 80, !15, i64 88, !15, i64 96, !15, i64 104, !15, i64 112, !15, i64 120}
!315 = !{!316, !15, i64 48}
!316 = !{!"_ZTS30halide_device_interface_impl_t", !15, i64 0, !15, i64 8, !15, i64 16, !15, i64 24, !15, i64 32, !15, i64 40, !15, i64 48, !15, i64 56, !15, i64 64, !15, i64 72, !15, i64 80, !15, i64 88, !15, i64 96, !15, i64 104, !15, i64 112, !15, i64 120}
!317 = !{!316, !15, i64 40}
!318 = !{!316, !15, i64 56}
!319 = !{!316, !15, i64 0}
!320 = !{!316, !15, i64 16}
!321 = !{!316, !15, i64 8}
!322 = !{!316, !15, i64 32}
!323 = !{!316, !15, i64 24}
!324 = !{!316, !15, i64 64}
!325 = !{!316, !15, i64 72}
!326 = distinct !{!326, !57, !69}
!327 = distinct !{!327, !57, !69}
!328 = distinct !{!328, !57, !69}
!329 = distinct !{!329, !57, !69}
!330 = !{!316, !15, i64 112}
!331 = !{!316, !15, i64 120}
!332 = !{!316, !15, i64 80}
!333 = !{!316, !15, i64 88}
!334 = !{!316, !15, i64 96}
!335 = !{!316, !15, i64 104}
!336 = !{i32 22, i32 33}
!337 = !{!338, !15, i64 40}
!338 = !{!"_ZTS21halide_profiler_state", !54, i64 0, !26, i64 8, !26, i64 12, !26, i64 16, !26, i64 20, !15, i64 24, !15, i64 32, !15, i64 40}
!339 = !{!338, !26, i64 16}
!340 = !{!341, !23, i64 0}
!341 = !{!"_ZTS30halide_profiler_pipeline_stats", !23, i64 0, !23, i64 8, !23, i64 16, !23, i64 24, !23, i64 32, !23, i64 40, !15, i64 48, !15, i64 56, !15, i64 64, !26, i64 72, !26, i64 76, !26, i64 80, !26, i64 84, !26, i64 88}
!342 = !{!341, !26, i64 80}
!343 = !{!341, !23, i64 32}
!344 = !{!341, !23, i64 40}
!345 = !{!341, !15, i64 48}
!346 = !{!341, !26, i64 84}
!347 = !{!341, !26, i64 88}
!348 = !{!341, !23, i64 16}
!349 = !{!341, !23, i64 24}
!350 = !{!341, !26, i64 72}
!351 = !{!341, !15, i64 56}
!352 = distinct !{!352, !57}
!353 = !{!354, !23, i64 32}
!354 = !{!"_ZTS26halide_profiler_func_stats", !23, i64 0, !23, i64 8, !23, i64 16, !23, i64 24, !23, i64 32, !23, i64 40, !23, i64 48, !15, i64 56, !26, i64 64}
!355 = !{!354, !23, i64 0}
!356 = !{!354, !15, i64 56}
!357 = distinct !{!357, !57}
!358 = distinct !{!358, !57}
!359 = distinct !{!359, !57}
!360 = !{!354, !23, i64 40}
!361 = !{!354, !23, i64 48}
!362 = distinct !{!362, !57}
!363 = !{!354, !23, i64 16}
!364 = distinct !{!364, !57}
!365 = !{!354, !26, i64 64}
!366 = distinct !{!366, !57}
!367 = !{!354, !23, i64 24}
!368 = distinct !{!368, !57}
!369 = distinct !{!369, !57}
!370 = !{!338, !15, i64 24}
!371 = !{!341, !15, i64 64}
!372 = distinct !{!372, !57}
!373 = !{!338, !26, i64 12}
!374 = distinct !{!374, !57}
!375 = !{!341, !26, i64 76}
!376 = distinct !{!376, !57}
!377 = distinct !{!377, !57}
!378 = !{!338, !15, i64 32}
!379 = !{!338, !26, i64 20}
!380 = !{!338, !26, i64 8}
!381 = distinct !{!381, !57}
!382 = distinct !{!382, !57}
!383 = distinct !{!383, !57}
!384 = distinct !{!384, !57}
!385 = !{!"branch_weights", i32 1073741824, i32 0}
!386 = !{!387, !387, i64 0}
!387 = !{!"input", !388, i64 0}
!388 = !{!"Halide buffer"}
!389 = !{!390, !390, i64 0}
!390 = !{!"blur_x", !388, i64 0}
!391 = !{!392, !392, i64 0}
!392 = !{!"blur_y", !388, i64 0}
