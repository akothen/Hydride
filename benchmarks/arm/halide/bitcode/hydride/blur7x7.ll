; ModuleID = 'blur7x7'
source_filename = "/home/muchenx2/Hydride/frontends/halide/src/runtime/posix_allocator.cpp"
target datalayout = "e-m:o-i64:64-i128:128-n32:64-S128"
target triple = "arm64-apple-macosx"

%struct.mach_timebase_info = type { i32, i32 }
%"struct.Halide::Runtime::Internal::Synchronization::hash_table" = type { [1024 x %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"] }
%"struct.Halide::Runtime::Internal::Synchronization::hash_bucket" = type { %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* }
%"class.Halide::Runtime::Internal::Synchronization::word_lock" = type { i64 }
%"struct.Halide::Runtime::Internal::Synchronization::queue_data" = type { %"struct.Halide::Runtime::Internal::Synchronization::thread_parker", i64, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, i64 }
%"struct.Halide::Runtime::Internal::Synchronization::thread_parker" = type <{ %struct.pthread_mutex_t, %struct.pthread_mutex_t, i8, [7 x i8] }>
%struct.pthread_mutex_t = type { [8 x i64] }
%"struct.Halide::Runtime::Internal::work_queue_t" = type { %struct.halide_mutex, i32, i32, %"struct.Halide::Runtime::Internal::work"*, i32, i32, i32, [4 x i8], %struct.halide_mutex, %struct.halide_mutex, %struct.halide_mutex, i32, i32, [256 x %struct.halide_thread*], i8, i8, i32 }
%"struct.Halide::Runtime::Internal::work" = type { %struct.halide_parallel_task_t, i32 (i8*, i32, i8*)*, %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"*, i32, %"struct.Halide::Runtime::Internal::work"*, i32, i8*, i32, i32, i32, i8 }
%struct.halide_parallel_task_t = type { i32 (i8*, i32, i32, i8*, i8*)*, i8*, i8*, %struct.halide_semaphore_acquire_t*, i32, i32, i32, i32, i8, [7 x i8] }
%struct.halide_semaphore_acquire_t = type { %struct.halide_semaphore_t*, i32, [4 x i8] }
%struct.halide_semaphore_t = type { [2 x i64] }
%struct.halide_mutex = type { [1 x i64] }
%struct.halide_thread = type opaque
%"class.Halide::Runtime::Internal::TraceBuffer" = type { %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock", i32, i32, [1048576 x i8] }
%"class.Halide::Runtime::Internal::SharedExclusiveSpinLock" = type { i32 }
%struct.halide_trace_event_t = type <{ i8*, i8*, i32*, i8*, %struct.halide_type_t, i32, i32, i32, i32, [4 x i8] }>
%struct.halide_type_t = type { i8, i8, i16 }
%"struct.Halide::Runtime::Internal::CacheEntry" = type { %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"*, i8*, i64, i8*, i32, i32, i32, i32, %struct.halide_dimension_t*, %struct.halide_buffer_t*, i64, i8, [7 x i8] }
%struct.halide_dimension_t = type { i32, i32, i32, i32 }
%struct.halide_buffer_t = type { i64, %struct.halide_device_interface_t*, i8*, i64, %struct.halide_type_t, i32, %struct.halide_dimension_t*, i8* }
%struct.halide_device_interface_t = type { i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, void (i8*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i64, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, i32*, i32*)*, %struct.halide_device_interface_impl_t* }
%struct.halide_device_interface_impl_t = type { void ()*, void ()*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i64)*, i32 (i8*, %struct.halide_buffer_t*)* }
%struct.halide_device_allocation_pool = type { i32 (i8*)*, %struct.halide_device_allocation_pool* }
%struct.halide_profiler_state = type { %struct.halide_mutex, i32, i32, i32, i32, %struct.halide_profiler_pipeline_stats*, void (i32*, i32*)*, %struct.halide_thread* }
%struct.halide_profiler_pipeline_stats = type { i64, i64, i64, i64, i64, i64, i8*, %struct.halide_profiler_func_stats*, i8*, i32, i32, i32, i32, i32, [4 x i8] }
%struct.halide_profiler_func_stats = type { i64, i64, i64, i64, i64, i64, i64, i8*, i32, [4 x i8] }
%struct.halide_filter_argument_t = type { i8*, i32, i32, %struct.halide_type_t, %struct.halide_scalar_value_t*, %struct.halide_scalar_value_t*, %struct.halide_scalar_value_t*, %struct.halide_scalar_value_t*, i64** }
%struct.halide_scalar_value_t = type { %union.anon.28 }
%union.anon.28 = type { double }
%struct.halide_filter_metadata_t = type { i32, i32, %struct.halide_filter_argument_t*, i8*, i8* }
%"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control" = type { %"struct.Halide::Runtime::Internal::Synchronization::parking_control", i64* }
%"struct.Halide::Runtime::Internal::Synchronization::parking_control" = type { i32 (...)** }
%"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data" = type { %"struct.Halide::Runtime::Internal::Synchronization::thread_parker", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* }
%"struct.Halide::Runtime::Internal::Synchronization::validate_action" = type { i8, [7 x i8], i64 }
%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control" = type { %"struct.Halide::Runtime::Internal::Synchronization::parking_control", i64*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"* }
%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair" = type { %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* }
%"struct.Halide::Runtime::Internal::spawned_thread" = type { void (i8*)*, i8*, i64 }
%struct.halide_mutex_array = type { %struct.halide_mutex* }
%"struct.Halide::Runtime::Internal::halide_tiff_header" = type <{ i16, i16, i32, i16, [15 x %"struct.Halide::Runtime::Internal::tiff_tag"], i32, [2 x i32], [2 x i32] }>
%"struct.Halide::Runtime::Internal::tiff_tag" = type { i16, i16, i32, %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock" }
%"struct.Halide::Runtime::Internal::CacheBlockHeader" = type { %"struct.Halide::Runtime::Internal::CacheEntry"*, i32, [4 x i8] }
%"struct.Halide::Runtime::Internal::device_copy" = type { i64, i64, i64, [16 x i64], [16 x i64], [16 x i64], i64 }
%"struct.Halide::Runtime::Internal::CpuFeatures" = type { [2 x i64], [2 x i64] }

@_ZN6Halide7Runtime8Internal13custom_mallocE = linkonce local_unnamed_addr global i8* (i8*, i64)* @halide_default_malloc, align 8
@_ZN6Halide7Runtime8Internal11custom_freeE = linkonce local_unnamed_addr global void (i8*, i8*)* @halide_default_free, align 8
@_ZN6Halide7Runtime8Internal13error_handlerE = linkonce local_unnamed_addr global void (i8*, i8*)* @halide_default_error, align 8
@.str = private unnamed_addr constant [8 x i8] c"Error: \00", align 1
@_ZN6Halide7Runtime8Internal12custom_printE = linkonce local_unnamed_addr global void (i8*, i8*)* @halide_default_print, align 8
@_ZN6Halide7Runtime8Internal29halide_reference_clock_initedE = linkonce local_unnamed_addr global i8 0, align 1
@_ZN6Halide7Runtime8Internal22halide_reference_clockE = linkonce local_unnamed_addr global i64 0, align 8
@_ZN6Halide7Runtime8Internal20halide_timebase_infoE = linkonce global %struct.mach_timebase_info zeroinitializer, align 4
@_ZN6Halide7Runtime8Internal15Synchronization5tableE = linkonce global %"struct.Halide::Runtime::Internal::Synchronization::hash_table" zeroinitializer, align 8
@_ZN6Halide7Runtime8Internal10work_queueE = linkonce global %"struct.Halide::Runtime::Internal::work_queue_t" { %struct.halide_mutex zeroinitializer, i32 0, i32 0, %"struct.Halide::Runtime::Internal::work"* null, i32 0, i32 0, i32 0, [4 x i8] undef, %struct.halide_mutex zeroinitializer, %struct.halide_mutex zeroinitializer, %struct.halide_mutex zeroinitializer, i32 0, i32 0, [256 x %struct.halide_thread*] zeroinitializer, i8 0, i8 0, i32 0 }, align 8
@_ZN6Halide7Runtime8Internal14custom_do_taskE = linkonce local_unnamed_addr global i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* @halide_default_do_task, align 8
@_ZN6Halide7Runtime8Internal19custom_do_loop_taskE = linkonce local_unnamed_addr global i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* @halide_default_do_loop_task, align 8
@_ZN6Halide7Runtime8Internal17custom_do_par_forE = linkonce local_unnamed_addr global i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* @halide_default_do_par_for, align 8
@_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE = linkonce_odr unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (i1 (%"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)* @_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control8validateERNS2_15validate_actionE to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control12before_sleepEv to i8*), i8* bitcast (i64 (%"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"*, i32, i1)* @_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control6unparkEib to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control16requeue_callbackERKNS2_15validate_actionEbb to i8*)] }, align 8
@.str.5 = private unnamed_addr constant [130 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/synchronization_common.h:386 halide_abort_if_false() failed: next != nullptr\0A\00", align 1
@_ZTVN6Halide7Runtime8Internal15Synchronization20wait_parking_controlE = linkonce_odr unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (i1 (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)* @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control8validateERNS2_15validate_actionE to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*)* @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control12before_sleepEv to i8*), i8* bitcast (i64 (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*, i32, i1)* @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control6unparkEib to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control16requeue_callbackERKNS2_15validate_actionEbb to i8*)] }, align 8
@.str.5.6 = private unnamed_addr constant [124 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/synchronization_common.h:994 halide_abort_if_false() failed: val & 0x1\0A\00", align 1
@_ZTVN6Halide7Runtime8Internal15Synchronization25broadcast_parking_controlE = linkonce_odr unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (i1 (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)* @_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control8validateERNS2_15validate_actionE to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control12before_sleepEv to i8*), i8* bitcast (i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control6unparkEib to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)* @_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control16requeue_callbackERKNS2_15validate_actionEbb to i8*)] }, align 8
@.str.6 = private unnamed_addr constant [186 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/thread_pool_common.h:155 halide_abort_if_false() failed: bytes == limit && \22Logic error in thread pool work queue initialization.\\n\22\0A\00", align 1
@.str.3 = private unnamed_addr constant [263 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/thread_pool_common.h:527 halide_abort_if_false() failed: (min_threads <= ((task_parent->task.min_threads * task_parent->active_workers) - task_parent->threads_reserved)) && \22Logic error: thread over commit.\\n\22\0A\00", align 1
@.str.1 = private unnamed_addr constant [15 x i8] c"HL_NUM_THREADS\00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"HL_NUMTHREADS\00", align 1
@_ZN6Halide7Runtime8Internal24custom_do_parallel_tasksE = linkonce local_unnamed_addr global i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)* @halide_default_do_parallel_tasks, align 8
@_ZN6Halide7Runtime8Internal21custom_semaphore_initE = linkonce local_unnamed_addr global i32 (%struct.halide_semaphore_t*, i32)* @halide_default_semaphore_init, align 8
@_ZN6Halide7Runtime8Internal28custom_semaphore_try_acquireE = linkonce local_unnamed_addr global i1 (%struct.halide_semaphore_t*, i32)* @halide_default_semaphore_try_acquire, align 8
@_ZN6Halide7Runtime8Internal24custom_semaphore_releaseE = linkonce local_unnamed_addr global i32 (%struct.halide_semaphore_t*, i32)* @halide_default_semaphore_release, align 8
@llvm.global_dtors = appending global [4 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @halide_thread_pool_cleanup, i8* null }, { i32, void ()*, i8* } { i32 65535, void ()* @halide_trace_cleanup, i8* null }, { i32, void ()*, i8* } { i32 65535, void ()* @halide_cache_cleanup, i8* null }, { i32, void ()*, i8* } { i32 65535, void ()* @halide_profiler_shutdown, i8* null }]
@_ZTVN6Halide7Runtime8Internal15Synchronization22signal_parking_controlE = linkonce_odr unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control8validateERNS2_15validate_actionE to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control12before_sleepEv to i8*), i8* bitcast (i64 (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*, i32, i1)* @_ZN6Halide7Runtime8Internal15Synchronization22signal_parking_control6unparkEib to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control16requeue_callbackERKNS2_15validate_actionEbb to i8*)] }, align 8
@.str.4 = private unnamed_addr constant [38 x i8] c"halide_set_num_threads: must be >= 0.\00", align 1
@_ZN6Halide7Runtime8Internal17custom_get_symbolE = linkonce local_unnamed_addr global i8* (i8*)* @halide_default_get_symbol, align 8
@_ZN6Halide7Runtime8Internal19custom_load_libraryE = linkonce local_unnamed_addr global i8* (i8*)* @halide_default_load_library, align 8
@_ZN6Halide7Runtime8Internal25custom_get_library_symbolE = linkonce local_unnamed_addr global i8* (i8*, i8*)* @halide_default_get_library_symbol, align 8
@_ZN6Halide7Runtime8Internal17halide_gpu_deviceE = linkonce local_unnamed_addr global i32 0, align 4
@_ZN6Halide7Runtime8Internal22halide_gpu_device_lockE = linkonce global i8 0, align 1
@_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE = linkonce local_unnamed_addr global i8 0, align 1
@.str.8 = private unnamed_addr constant [14 x i8] c"HL_GPU_DEVICE\00", align 1
@_ZN6Halide7Runtime8Internal19halide_trace_bufferE = linkonce local_unnamed_addr global %"class.Halide::Runtime::Internal::TraceBuffer"* null, align 8
@_ZN6Halide7Runtime8Internal17halide_trace_fileE = linkonce local_unnamed_addr global i32 -1, align 4
@_ZN6Halide7Runtime8Internal22halide_trace_file_lockE = linkonce global i8 0, align 1
@_ZN6Halide7Runtime8Internal29halide_trace_file_initializedE = linkonce local_unnamed_addr global i8 0, align 1
@_ZN6Halide7Runtime8Internal35halide_trace_file_internally_openedE = linkonce local_unnamed_addr global i8* null, align 8
@_ZN6Halide7Runtime8Internal19halide_custom_traceE = linkonce local_unnamed_addr global i32 (i8*, %struct.halide_trace_event_t*)* @halide_default_trace, align 8
@_ZZ20halide_default_traceE3ids = internal global i32 1, align 4
@.str.32 = private unnamed_addr constant [144 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/tracing.cpp:115 halide_abort_if_false() failed: success && \22Could not write to trace file\22\0A\00", align 1
@.str.31 = private unnamed_addr constant [120 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/tracing.cpp:87 halide_abort_if_false() failed: size <= buffer_size\0A\00", align 1
@.str.1.10 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.2.11 = private unnamed_addr constant [140 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/tracing.cpp:218 halide_abort_if_false() failed: print_bits <= 64 && \22Tracing bad type\22\0A\00", align 1
@__const.halide_default_trace.event_types = private unnamed_addr constant [11 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3.12, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4.13, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.5.14, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.6.15, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.8.16, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.9.17, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i32 0, i32 0)], align 8
@.str.17 = private unnamed_addr constant [2 x i8] c"<\00", align 1
@.str.20 = private unnamed_addr constant [3 x i8] c">)\00", align 1
@.str.18 = private unnamed_addr constant [5 x i8] c">, <\00", align 1
@.str.22 = private unnamed_addr constant [5 x i8] c" = <\00", align 1
@.str.23 = private unnamed_addr constant [4 x i8] c" = \00", align 1
@.str.24 = private unnamed_addr constant [142 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/tracing.cpp:287 halide_abort_if_false() failed: print_bits >= 16 && \22Tracing a bad type\22\0A\00", align 1
@.str.25 = private unnamed_addr constant [2 x i8] c">\00", align 1
@.str.26 = private unnamed_addr constant [9 x i8] c" tag = \22\00", align 1
@.str.27 = private unnamed_addr constant [2 x i8] c"\22\00", align 1
@.str.3.12 = private unnamed_addr constant [5 x i8] c"Load\00", align 1
@.str.4.13 = private unnamed_addr constant [6 x i8] c"Store\00", align 1
@.str.5.14 = private unnamed_addr constant [18 x i8] c"Begin realization\00", align 1
@.str.6.15 = private unnamed_addr constant [16 x i8] c"End realization\00", align 1
@.str.7 = private unnamed_addr constant [8 x i8] c"Produce\00", align 1
@.str.8.16 = private unnamed_addr constant [12 x i8] c"End produce\00", align 1
@.str.9.17 = private unnamed_addr constant [8 x i8] c"Consume\00", align 1
@.str.10 = private unnamed_addr constant [12 x i8] c"End consume\00", align 1
@.str.11 = private unnamed_addr constant [15 x i8] c"Begin pipeline\00", align 1
@.str.12 = private unnamed_addr constant [13 x i8] c"End pipeline\00", align 1
@.str.13 = private unnamed_addr constant [4 x i8] c"Tag\00", align 1
@.str.28 = private unnamed_addr constant [14 x i8] c"HL_TRACE_FILE\00", align 1
@.str.29 = private unnamed_addr constant [3 x i8] c"ab\00", align 1
@.str.30 = private unnamed_addr constant [139 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/tracing.cpp:351 halide_abort_if_false() failed: file && \22Failed to open trace file\\n\22\0A\00", align 1
@_ZN6Halide7Runtime8Internal30pixel_type_to_tiff_sample_typeE = linkonce local_unnamed_addr global [10 x i16] [i16 3, i16 3, i16 1, i16 2, i16 1, i16 2, i16 1, i16 2, i16 1, i16 2], align 2
@_ZN6Halide7Runtime8Internal31pixel_type_to_matlab_class_codeE = linkonce local_unnamed_addr global [10 x i8] c"\07\06\09\08\0B\0A\0D\0C\0F\0E", align 1
@_ZN6Halide7Runtime8Internal30pixel_type_to_matlab_type_codeE = linkonce local_unnamed_addr global [10 x i8] c"\07\09\02\01\04\03\06\05\0D\0C", align 1
@.str.34 = private unnamed_addr constant [51 x i8] c"Bounds query buffer passed to halide_debug_to_file\00", align 1
@.str.1.35 = private unnamed_addr constant [59 x i8] c"Can't debug_to_file a Func with more than four dimensions\0A\00", align 1
@.str.2.36 = private unnamed_addr constant [3 x i8] c"wb\00", align 1
@.str.3.37 = private unnamed_addr constant [6 x i8] c".tiff\00", align 1
@.str.4.38 = private unnamed_addr constant [5 x i8] c".tif\00", align 1
@.str.5.39 = private unnamed_addr constant [5 x i8] c".mat\00", align 1
@__const.halide_debug_to_file.header = private unnamed_addr constant [129 x i8] c"MATLAB 5.0 MAT-file, produced by Halide                                                                                     \00\01IM\00", align 1
@.str.6.40 = private unnamed_addr constant [53 x i8] c"Can't debug_to_file to a .mat file greater than 4GB\0A\00", align 1
@_ZN6Halide7Runtime8Internal16memoization_lockE = linkonce global %struct.halide_mutex zeroinitializer, align 8
@_ZN6Halide7Runtime8Internal13cache_entriesE = linkonce global [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*] zeroinitializer, align 8
@_ZN6Halide7Runtime8Internal18most_recently_usedE = linkonce local_unnamed_addr global %"struct.Halide::Runtime::Internal::CacheEntry"* null, align 8
@_ZN6Halide7Runtime8Internal19least_recently_usedE = linkonce local_unnamed_addr global %"struct.Halide::Runtime::Internal::CacheEntry"* null, align 8
@_ZN6Halide7Runtime8Internal14max_cache_sizeE = linkonce local_unnamed_addr global i64 1048576, align 8
@_ZN6Halide7Runtime8Internal18current_cache_sizeE = linkonce local_unnamed_addr global i64 0, align 8
@.str.2.42 = private unnamed_addr constant [126 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/cache.cpp:284 halide_abort_if_false() failed: prev_hash_entry != nullptr\0A\00", align 1
@.str.3.43 = private unnamed_addr constant [129 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/cache.cpp:373 halide_abort_if_false() failed: entry->more_recent != nullptr\0A\00", align 1
@.str.4.44 = private unnamed_addr constant [128 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/cache.cpp:377 halide_abort_if_false() failed: least_recently_used == entry\0A\00", align 1
@.str.5.45 = private unnamed_addr constant [129 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/cache.cpp:380 halide_abort_if_false() failed: entry->more_recent != nullptr\0A\00", align 1
@.str.9.46 = private unnamed_addr constant [122 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/cache.cpp:472 halide_abort_if_false() failed: no_host_pointers_equal\0A\00", align 1
@.str.12.47 = private unnamed_addr constant [123 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/cache.cpp:550 halide_abort_if_false() failed: entry->in_use_count > 0\0A\00", align 1
@.str.50 = private unnamed_addr constant [10 x i8] c"<nullptr>\00", align 1
@.str.1.57 = private unnamed_addr constant [5 x i8] c"-nan\00", align 1
@.str.2.58 = private unnamed_addr constant [4 x i8] c"nan\00", align 1
@.str.3.59 = private unnamed_addr constant [5 x i8] c"-inf\00", align 1
@.str.4.60 = private unnamed_addr constant [4 x i8] c"inf\00", align 1
@.str.5.61 = private unnamed_addr constant [14 x i8] c"-0.000000e+00\00", align 1
@.str.6.62 = private unnamed_addr constant [13 x i8] c"0.000000e+00\00", align 1
@.str.7.63 = private unnamed_addr constant [10 x i8] c"-0.000000\00", align 1
@.str.8.64 = private unnamed_addr constant [9 x i8] c"0.000000\00", align 1
@.str.9.65 = private unnamed_addr constant [2 x i8] c"-\00", align 1
@.str.11.67 = private unnamed_addr constant [3 x i8] c"e+\00", align 1
@.str.12.68 = private unnamed_addr constant [3 x i8] c"e-\00", align 1
@.str.13.71 = private unnamed_addr constant [17 x i8] c"0123456789abcdef\00", align 1
@.str.18.72 = private unnamed_addr constant [14 x i8] c"bad_type_code\00", align 1
@.str.17.73 = private unnamed_addr constant [7 x i8] c"handle\00", align 1
@.str.16.74 = private unnamed_addr constant [6 x i8] c"float\00", align 1
@.str.15.75 = private unnamed_addr constant [5 x i8] c"uint\00", align 1
@.str.14.76 = private unnamed_addr constant [4 x i8] c"int\00", align 1
@.str.19.77 = private unnamed_addr constant [2 x i8] c"x\00", align 1
@.str.20.78 = private unnamed_addr constant [8 x i8] c"nullptr\00", align 1
@.str.21.79 = private unnamed_addr constant [8 x i8] c"buffer(\00", align 1
@.str.23.82 = private unnamed_addr constant [4 x i8] c", {\00", align 1
@.str.24.83 = private unnamed_addr constant [2 x i8] c"}\00", align 1
@_ZN6Halide7Runtime8Internal36halide_reuse_device_allocations_flagE = linkonce local_unnamed_addr global i8 1, align 1
@_ZN6Halide7Runtime8Internal21allocation_pools_lockE = linkonce global %struct.halide_mutex zeroinitializer, align 8
@_ZN6Halide7Runtime8Internal23device_allocation_poolsE = linkonce local_unnamed_addr global %struct.halide_device_allocation_pool* null, align 8
@_ZN6Halide7Runtime8Internal17device_copy_mutexE = linkonce global %struct.halide_mutex zeroinitializer, align 8
@.str.6.88 = private unnamed_addr constant [20 x i8] c"halide_copy_to_host\00", align 1
@.str.7.89 = private unnamed_addr constant [22 x i8] c"halide_copy_to_device\00", align 1
@.str.9.90 = private unnamed_addr constant [61 x i8] c"halide_copy_to_device does not support switching interfaces\0A\00", align 1
@.str.17.91 = private unnamed_addr constant [21 x i8] c"halide_device_malloc\00", align 1
@.str.20.92 = private unnamed_addr constant [59 x i8] c"halide_device_malloc doesn't support switching interfaces\0A\00", align 1
@.str.16.93 = private unnamed_addr constant [19 x i8] c"halide_device_sync\00", align 1
@.str.21.96 = private unnamed_addr constant [19 x i8] c"halide_device_free\00", align 1
@.str.22.97 = private unnamed_addr constant [127 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/device_interface.cpp:252 halide_abort_if_false() failed: buf->device == 0\0A\00", align 1
@.str.23.98 = private unnamed_addr constant [30 x i8] c"halide_device_and_host_malloc\00", align 1
@.str.25.99 = private unnamed_addr constant [68 x i8] c"halide_device_and_host_malloc doesn't support switching interfaces\0A\00", align 1
@.str.26.100 = private unnamed_addr constant [42 x i8] c"allocating host and device memory failed\0A\00", align 1
@.str.27.101 = private unnamed_addr constant [28 x i8] c"halide_device_and_host_free\00", align 1
@.str.28.102 = private unnamed_addr constant [127 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/device_interface.cpp:317 halide_abort_if_false() failed: buf->device == 0\0A\00", align 1
@.str.29.103 = private unnamed_addr constant [38 x i8] c"halide_default_device_and_host_malloc\00", align 1
@.str.30.104 = private unnamed_addr constant [36 x i8] c"halide_default_device_and_host_free\00", align 1
@.str.31.105 = private unnamed_addr constant [26 x i8] c"halide_device_wrap_native\00", align 1
@.str.32.106 = private unnamed_addr constant [64 x i8] c"halide_device_wrap_native doesn't support switching interfaces\0A\00", align 1
@.str.33.107 = private unnamed_addr constant [28 x i8] c"halide_device_detach_native\00", align 1
@.str.34.108 = private unnamed_addr constant [127 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/device_interface.cpp:403 halide_abort_if_false() failed: buf->device == 0\0A\00", align 1
@.str.35 = private unnamed_addr constant [36 x i8] c"halide_default_device_detach_native\00", align 1
@.str.41 = private unnamed_addr constant [64 x i8] c"halide_buffer_copy does not support switching device interfaces\00", align 1
@.str.58 = private unnamed_addr constant [44 x i8] c"device_interface does not support cropping\0A\00", align 1
@.str.59 = private unnamed_addr constant [43 x i8] c"device_interface does not support slicing\0A\00", align 1
@.str.60 = private unnamed_addr constant [52 x i8] c"destination buffer already has a device allocation\0A\00", align 1
@.str.61 = private unnamed_addr constant [48 x i8] c"src and dst must have identical dimensionality\0A\00", align 1
@.str.64 = private unnamed_addr constant [52 x i8] c"dst must have exactly one fewer dimension than src\0A\00", align 1
@.str.111 = private unnamed_addr constant [41 x i8] c"Bounds inference call to external stage \00", align 1
@.str.1.112 = private unnamed_addr constant [27 x i8] c" returned non-zero value: \00", align 1
@.str.2.113 = private unnamed_addr constant [24 x i8] c"Call to external stage \00", align 1
@.str.3.114 = private unnamed_addr constant [18 x i8] c"Bounds given for \00", align 1
@.str.4.115 = private unnamed_addr constant [5 x i8] c" in \00", align 1
@.str.5.116 = private unnamed_addr constant [8 x i8] c" (from \00", align 1
@.str.6.117 = private unnamed_addr constant [5 x i8] c" to \00", align 1
@.str.7.118 = private unnamed_addr constant [38 x i8] c") do not cover required region (from \00", align 1
@.str.8.119 = private unnamed_addr constant [2 x i8] c")\00", align 1
@.str.9.120 = private unnamed_addr constant [11 x i8] c" has type \00", align 1
@.str.10.121 = private unnamed_addr constant [38 x i8] c" but type of the buffer passed in is \00", align 1
@.str.11.122 = private unnamed_addr constant [31 x i8] c" requires a buffer of exactly \00", align 1
@.str.12.123 = private unnamed_addr constant [43 x i8] c" dimensions, but the buffer passed in has \00", align 1
@.str.13.124 = private unnamed_addr constant [12 x i8] c" dimensions\00", align 1
@.str.14.125 = private unnamed_addr constant [17 x i8] c" is accessed at \00", align 1
@.str.15.126 = private unnamed_addr constant [28 x i8] c", which is before the min (\00", align 1
@.str.16.127 = private unnamed_addr constant [16 x i8] c") in dimension \00", align 1
@.str.17.128 = private unnamed_addr constant [28 x i8] c", which is beyond the max (\00", align 1
@.str.18.129 = private unnamed_addr constant [29 x i8] c"Total allocation for buffer \00", align 1
@.str.19.130 = private unnamed_addr constant [5 x i8] c" is \00", align 1
@.str.20.131 = private unnamed_addr constant [37 x i8] c", which exceeds the maximum size of \00", align 1
@.str.21.132 = private unnamed_addr constant [24 x i8] c"The extents for buffer \00", align 1
@.str.22.133 = private unnamed_addr constant [12 x i8] c" dimension \00", align 1
@.str.23.134 = private unnamed_addr constant [15 x i8] c" is negative (\00", align 1
@.str.24.135 = private unnamed_addr constant [31 x i8] c"Product of extents for buffer \00", align 1
@.str.25.136 = private unnamed_addr constant [29 x i8] c"Applying the constraints on \00", align 1
@.str.26.137 = private unnamed_addr constant [54 x i8] c" to the required region made it smaller in dimension \00", align 1
@.str.27.138 = private unnamed_addr constant [3 x i8] c". \00", align 1
@.str.28.139 = private unnamed_addr constant [16 x i8] c"Required size: \00", align 1
@.str.29.140 = private unnamed_addr constant [19 x i8] c"Constrained size: \00", align 1
@.str.30.141 = private unnamed_addr constant [2 x i8] c".\00", align 1
@.str.31.142 = private unnamed_addr constant [22 x i8] c"Constraint violated: \00", align 1
@.str.32.143 = private unnamed_addr constant [3 x i8] c" (\00", align 1
@.str.33.144 = private unnamed_addr constant [6 x i8] c") == \00", align 1
@.str.34.145 = private unnamed_addr constant [11 x i8] c"Parameter \00", align 1
@.str.35.146 = private unnamed_addr constant [23 x i8] c" but must be at least \00", align 1
@.str.36 = private unnamed_addr constant [22 x i8] c" but must be at most \00", align 1
@.str.37 = private unnamed_addr constant [47 x i8] c"Out of memory (halide_malloc returned nullptr)\00", align 1
@.str.38 = private unnamed_addr constant [17 x i8] c"Buffer argument \00", align 1
@.str.39 = private unnamed_addr constant [12 x i8] c" is nullptr\00", align 1
@.str.40 = private unnamed_addr constant [25 x i8] c"Failed to dump function \00", align 1
@.str.41.147 = private unnamed_addr constant [10 x i8] c" to file \00", align 1
@.str.42 = private unnamed_addr constant [13 x i8] c" with error \00", align 1
@.str.43 = private unnamed_addr constant [21 x i8] c"The host pointer of \00", align 1
@.str.44 = private unnamed_addr constant [22 x i8] c" is not aligned to a \00", align 1
@.str.45 = private unnamed_addr constant [17 x i8] c" bytes boundary.\00", align 1
@.str.46 = private unnamed_addr constant [12 x i8] c"The buffer \00", align 1
@.str.47 = private unnamed_addr constant [53 x i8] c" is dirty on device, but this pipeline was compiled \00", align 1
@.str.48 = private unnamed_addr constant [43 x i8] c"with no support for device to host copies.\00", align 1
@.str.49 = private unnamed_addr constant [55 x i8] c" is null, but the pipeline will access it on the host.\00", align 1
@.str.50.148 = private unnamed_addr constant [30 x i8] c"The folded storage dimension \00", align 1
@.str.51 = private unnamed_addr constant [5 x i8] c" of \00", align 1
@.str.52 = private unnamed_addr constant [36 x i8] c" was accessed out of order by loop \00", align 1
@.str.53 = private unnamed_addr constant [23 x i8] c"Cannot fold dimension \00", align 1
@.str.54 = private unnamed_addr constant [36 x i8] c" because an extern stage accesses [\00", align 1
@.str.55 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.56 = private unnamed_addr constant [3 x i8] c"],\00", align 1
@.str.57 = private unnamed_addr constant [47 x i8] c" which is outside the range currently valid: [\00", align 1
@.str.58.149 = private unnamed_addr constant [3 x i8] c"].\00", align 1
@.str.59.150 = private unnamed_addr constant [47 x i8] c" which wraps around the boundary of the fold, \00", align 1
@.str.60.151 = private unnamed_addr constant [30 x i8] c"which occurs at multiples of \00", align 1
@.str.61.152 = private unnamed_addr constant [18 x i8] c"The fold factor (\00", align 1
@.str.62 = private unnamed_addr constant [16 x i8] c") of dimension \00", align 1
@.str.63 = private unnamed_addr constant [61 x i8] c" is too small to store the required region accessed by loop \00", align 1
@.str.64.153 = private unnamed_addr constant [3 x i8] c").\00", align 1
@.str.65 = private unnamed_addr constant [22 x i8] c"Requirement Failed: (\00", align 1
@.str.66 = private unnamed_addr constant [3 x i8] c") \00", align 1
@.str.67 = private unnamed_addr constant [59 x i8] c"A schedule specialized with specialize_fail() was chosen: \00", align 1
@.str.68 = private unnamed_addr constant [55 x i8] c"Buffer has a non-zero device but no device interface.\0A\00", align 1
@.str.69 = private unnamed_addr constant [57 x i8] c"Buffer has a non-null device_interface but device is 0.\0A\00", align 1
@.str.70 = private unnamed_addr constant [49 x i8] c"Buffer has both host and device dirty bits set.\0A\00", align 1
@.str.71 = private unnamed_addr constant [26 x i8] c"Buffer pointer passed to \00", align 1
@.str.72 = private unnamed_addr constant [11 x i8] c" is null.\0A\00", align 1
@.str.73 = private unnamed_addr constant [32 x i8] c"The explicit allocation bound (\00", align 1
@.str.74 = private unnamed_addr constant [45 x i8] c" is too small to store the required region (\00", align 1
@.str.75 = private unnamed_addr constant [77 x i8] c"Buffer could not be cropped (runtime error or unimplemented device option).\0A\00", align 1
@.str.29.163 = private unnamed_addr constant [35 x i8] c"Printer buffer allocation failed.\0A\00", align 1
@.str.7.164 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.8.165 = private unnamed_addr constant [14 x i8] c" total time: \00", align 1
@.str.9.166 = private unnamed_addr constant [4 x i8] c" ms\00", align 1
@.str.10.167 = private unnamed_addr constant [12 x i8] c"  samples: \00", align 1
@.str.11.168 = private unnamed_addr constant [9 x i8] c"  runs: \00", align 1
@.str.12.169 = private unnamed_addr constant [13 x i8] c"  time/run: \00", align 1
@.str.13.170 = private unnamed_addr constant [5 x i8] c" ms\0A\00", align 1
@.str.14.171 = private unnamed_addr constant [24 x i8] c" average threads used: \00", align 1
@.str.15.172 = private unnamed_addr constant [20 x i8] c" heap allocations: \00", align 1
@.str.16.173 = private unnamed_addr constant [20 x i8] c"  peak heap usage: \00", align 1
@.str.17.174 = private unnamed_addr constant [8 x i8] c" bytes\0A\00", align 1
@.str.18.175 = private unnamed_addr constant [3 x i8] c"  \00", align 1
@.str.19.176 = private unnamed_addr constant [3 x i8] c": \00", align 1
@.str.20.177 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.21.178 = private unnamed_addr constant [3 x i8] c"ms\00", align 1
@.str.22.179 = private unnamed_addr constant [2 x i8] c"(\00", align 1
@.str.23.180 = private unnamed_addr constant [3 x i8] c"%)\00", align 1
@.str.24.181 = private unnamed_addr constant [10 x i8] c"threads: \00", align 1
@.str.25.182 = private unnamed_addr constant [8 x i8] c" peak: \00", align 1
@.str.26.183 = private unnamed_addr constant [7 x i8] c" num: \00", align 1
@.str.27.184 = private unnamed_addr constant [7 x i8] c" avg: \00", align 1
@.str.28.185 = private unnamed_addr constant [9 x i8] c" stack: \00", align 1
@_ZZ25halide_profiler_get_stateE1s = internal global %struct.halide_profiler_state { %struct.halide_mutex zeroinitializer, i32 1, i32 0, i32 0, i32 0, %struct.halide_profiler_pipeline_stats* null, void (i32*, i32*)* null, %struct.halide_thread* null }, align 8
@.str.186 = private unnamed_addr constant [128 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:246 halide_abort_if_false() failed: p_stats != nullptr\0A\00", align 1
@.str.1.187 = private unnamed_addr constant [128 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:273 halide_abort_if_false() failed: p_stats != nullptr\0A\00", align 1
@.str.2.188 = private unnamed_addr constant [122 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:274 halide_abort_if_false() failed: func_id >= 0\0A\00", align 1
@.str.3.189 = private unnamed_addr constant [138 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:275 halide_abort_if_false() failed: func_id < p_stats->num_funcs\0A\00", align 1
@.str.4.190 = private unnamed_addr constant [128 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:309 halide_abort_if_false() failed: p_stats != nullptr\0A\00", align 1
@.str.5.191 = private unnamed_addr constant [122 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:310 halide_abort_if_false() failed: func_id >= 0\0A\00", align 1
@.str.6.192 = private unnamed_addr constant [138 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:311 halide_abort_if_false() failed: func_id < p_stats->num_funcs\0A\00", align 1
@_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE = linkonce local_unnamed_addr global i32 (i32, i64*)* @halide_default_can_use_target_features, align 8
@_ZN6Halide7Runtime8Internal36halide_cpu_features_initialized_lockE = linkonce global %struct.halide_mutex zeroinitializer, align 8
@_ZN6Halide7Runtime8Internal31halide_cpu_features_initializedE = linkonce local_unnamed_addr global i8 0, align 1
@_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE = linkonce global [4 x i64] zeroinitializer, align 8
@.str.197 = private unnamed_addr constant [81 x i8] c"Internal error: wrong structure size passed to halide_can_use_target_features()\0A\00", align 1
@0 = private constant i64 0
@1 = private constant i64 0
@2 = private constant [4 x i64*] [i64* @0, i64* null, i64* @1, i64* null]
@str = private constant [6 x i8] c"input\00", align 32
@3 = private constant i64 0
@4 = private constant i64 0
@5 = private constant [4 x i64*] [i64* @3, i64* null, i64* @4, i64* null]
@str.200 = private constant [7 x i8] c"blur_y\00", align 32
@6 = private constant [2 x %struct.halide_filter_argument_t] [%struct.halide_filter_argument_t { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str, i32 0, i32 0), i32 1, i32 2, %struct.halide_type_t { i8 1, i8 16, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** getelementptr inbounds ([4 x i64*], [4 x i64*]* @2, i32 0, i32 0) }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str.200, i32 0, i32 0), i32 2, i32 2, %struct.halide_type_t { i8 1, i8 16, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** getelementptr inbounds ([4 x i64*], [4 x i64*]* @5, i32 0, i32 0) }]
@str.201 = private constant [38 x i8] c"arm-64-osx-no_asserts-no_bounds_query\00", align 32
@str.202 = private constant [8 x i8] c"blur7x7\00", align 32
@blur7x7_metadata_storage = private constant %struct.halide_filter_metadata_t { i32 1, i32 2, %struct.halide_filter_argument_t* getelementptr inbounds ([2 x %struct.halide_filter_argument_t], [2 x %struct.halide_filter_argument_t]* @6, i32 0, i32 0), i8* getelementptr inbounds ([38 x i8], [38 x i8]* @str.201, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str.202, i32 0, i32 0) }
@switch.table.halide_type_to_string = private unnamed_addr constant [4 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14.76, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.15.75, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.16.74, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.17.73, i64 0, i64 0)], align 8

; Function Attrs: nounwind mustprogress
define weak i8* @halide_default_malloc(i8* %user_context, i64 %x) #0 {
entry:
  %add = add i64 %x, 32
  %call1 = tail call i8* @malloc(i64 %add) #14
  %cmp = icmp eq i8* %call1, null
  br i1 %cmp, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %0 = ptrtoint i8* %call1 to i64
  %sub = add i64 %0, 39
  %and = and i64 %sub, -32
  %1 = inttoptr i64 %and to i8*
  %2 = inttoptr i64 %and to i8**
  %arrayidx = getelementptr inbounds i8*, i8** %2, i64 -1
  store i8* %call1, i8** %arrayidx, align 8, !tbaa !14
  br label %cleanup

cleanup:                                          ; preds = %if.end, %entry
  %retval.0 = phi i8* [ %1, %if.end ], [ null, %entry ]
  ret i8* %retval.0
}

declare i8* @malloc(i64) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_default_free(i8* %user_context, i8* %ptr) #0 {
entry:
  %arrayidx = getelementptr inbounds i8, i8* %ptr, i64 -8
  %0 = bitcast i8* %arrayidx to i8**
  %1 = load i8*, i8** %0, align 8, !tbaa !14
  tail call void @free(i8* %1) #14
  ret void
}

declare void @free(i8*) local_unnamed_addr #1

; Function Attrs: nounwind willreturn mustprogress
define weak i8* (i8*, i64)* @halide_set_custom_malloc(i8* (i8*, i64)* %user_malloc) local_unnamed_addr #2 {
entry:
  %0 = load i8* (i8*, i64)*, i8* (i8*, i64)** @_ZN6Halide7Runtime8Internal13custom_mallocE, align 8, !tbaa !14
  store i8* (i8*, i64)* %user_malloc, i8* (i8*, i64)** @_ZN6Halide7Runtime8Internal13custom_mallocE, align 8, !tbaa !14
  ret i8* (i8*, i64)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak void (i8*, i8*)* @halide_set_custom_free(void (i8*, i8*)* %user_free) local_unnamed_addr #2 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal11custom_freeE, align 8, !tbaa !14
  store void (i8*, i8*)* %user_free, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal11custom_freeE, align 8, !tbaa !14
  ret void (i8*, i8*)* %0
}

; Function Attrs: nounwind mustprogress
define weak noalias i8* @halide_malloc(i8* %user_context, i64 %x) local_unnamed_addr #0 {
entry:
  %0 = load i8* (i8*, i64)*, i8* (i8*, i64)** @_ZN6Halide7Runtime8Internal13custom_mallocE, align 8, !tbaa !14
  %call = tail call i8* %0(i8* %user_context, i64 %x) #14
  ret i8* %call
}

; Function Attrs: nounwind mustprogress
define weak void @halide_free(i8* %user_context, i8* %ptr) local_unnamed_addr #0 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal11custom_freeE, align 8, !tbaa !14
  tail call void %0(i8* %user_context, i8* %ptr) #14
  ret void
}

; Function Attrs: nounwind mustprogress
define weak void @halide_default_error(i8* %user_context, i8* %msg) #0 {
entry:
  %buf = alloca [4096 x i8], align 1
  %0 = getelementptr inbounds [4096 x i8], [4096 x i8]* %buf, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %0) #11
  %add.ptr = getelementptr inbounds [4096 x i8], [4096 x i8]* %buf, i64 0, i64 4094
  %call = call i8* @halide_string_to_string(i8* nonnull %0, i8* nonnull %add.ptr, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0)) #14
  %add.ptr2 = getelementptr inbounds i8, i8* %call, i64 4094
  %call3 = call i8* @halide_string_to_string(i8* %call, i8* nonnull %add.ptr2, i8* %msg) #14
  %arrayidx = getelementptr inbounds i8, i8* %call3, i64 -1
  %1 = load i8, i8* %arrayidx, align 1, !tbaa !18
  %cmp.not = icmp eq i8 %1, 10
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i8 10, i8* %call3, align 1, !tbaa !18
  %arrayidx5 = getelementptr inbounds i8, i8* %call3, i64 1
  store i8 0, i8* %arrayidx5, align 1, !tbaa !18
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %dst.0 = phi i8* [ %arrayidx5, %if.then ], [ %call3, %entry ]
  %sub.ptr.lhs.cast = ptrtoint i8* %dst.0 to i64
  %sub.ptr.rhs.cast = ptrtoint [4096 x i8]* %buf to i64
  %sub.ptr.sub = sub i64 1, %sub.ptr.rhs.cast
  %add = add i64 %sub.ptr.sub, %sub.ptr.lhs.cast
  %call9 = call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %0, i64 %add) #14
  call void @halide_print(i8* %user_context, i8* nonnull %0) #14
  call void @abort() #14
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %0) #11
  ret void
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

declare void @abort() local_unnamed_addr #1

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind mustprogress
define weak void @halide_error(i8* %user_context, i8* %msg) local_unnamed_addr #0 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal13error_handlerE, align 8, !tbaa !14
  tail call void %0(i8* %user_context, i8* %msg) #14
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void (i8*, i8*)* @halide_set_error_handler(void (i8*, i8*)* %handler) local_unnamed_addr #2 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal13error_handlerE, align 8, !tbaa !14
  store void (i8*, i8*)* %handler, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal13error_handlerE, align 8, !tbaa !14
  ret void (i8*, i8*)* %0
}

; Function Attrs: nounwind mustprogress
define weak void @halide_print(i8* %user_context, i8* %msg) local_unnamed_addr #0 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal12custom_printE, align 8, !tbaa !14
  tail call void %0(i8* %user_context, i8* %msg) #14
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void (i8*, i8*)* @halide_set_custom_print(void (i8*, i8*)* %print) local_unnamed_addr #2 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal12custom_printE, align 8, !tbaa !14
  store void (i8*, i8*)* %print, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal12custom_printE, align 8, !tbaa !14
  ret void (i8*, i8*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_start_clock(i8* %user_context) local_unnamed_addr #0 {
entry:
  %0 = load i8, i8* @_ZN6Halide7Runtime8Internal29halide_reference_clock_initedE, align 1, !tbaa !19, !range !21
  %tobool.not = icmp eq i8 %0, 0
  br i1 %tobool.not, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = tail call i32 @mach_timebase_info(%struct.mach_timebase_info* nonnull @_ZN6Halide7Runtime8Internal20halide_timebase_infoE) #14
  %call1 = tail call i64 @mach_absolute_time() #14
  store i64 %call1, i64* @_ZN6Halide7Runtime8Internal22halide_reference_clockE, align 8, !tbaa !22
  store i8 1, i8* @_ZN6Halide7Runtime8Internal29halide_reference_clock_initedE, align 1, !tbaa !19
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i32 0
}

declare i32 @mach_timebase_info(%struct.mach_timebase_info*) local_unnamed_addr #1

declare i64 @mach_absolute_time() local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i64 @halide_current_time_ns(i8* %user_context) local_unnamed_addr #0 {
entry:
  %call = tail call i64 @mach_absolute_time() #14
  %0 = load i64, i64* @_ZN6Halide7Runtime8Internal22halide_reference_clockE, align 8, !tbaa !22
  %sub = sub i64 %call, %0
  %1 = load i32, i32* getelementptr inbounds (%struct.mach_timebase_info, %struct.mach_timebase_info* @_ZN6Halide7Runtime8Internal20halide_timebase_infoE, i64 0, i32 0), align 4, !tbaa !24
  %conv = zext i32 %1 to i64
  %mul = mul i64 %sub, %conv
  %2 = load i32, i32* getelementptr inbounds (%struct.mach_timebase_info, %struct.mach_timebase_info* @_ZN6Halide7Runtime8Internal20halide_timebase_infoE, i64 0, i32 1), align 4, !tbaa !27
  %conv1 = zext i32 %2 to i64
  %div = udiv i64 %mul, %conv1
  ret i64 %div
}

; Function Attrs: nounwind mustprogress
define weak void @halide_sleep_ms(i8* %user_context, i32 %ms) local_unnamed_addr #0 {
entry:
  %mul = mul nsw i32 %ms, 1000
  %call = tail call i32 @usleep(i32 %mul) #14
  ret void
}

declare i32 @usleep(i32) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_default_print(i8* %user_context, i8* %str) #0 {
entry:
  %call = tail call i64 @strlen(i8* %str) #14
  %call1 = tail call i64 @write(i32 1, i8* %str, i64 %call) #14
  ret void
}

declare i64 @strlen(i8*) local_unnamed_addr #1

declare i64 @write(i32, i8*, i64) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i32 @halide_host_cpu_count() local_unnamed_addr #0 {
entry:
  %call = tail call i64 @sysconf(i32 58) #14
  %conv = trunc i64 %call to i32
  ret i32 %conv
}

declare i64 @sysconf(i32) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_thread_yield() local_unnamed_addr #0 {
entry:
  %call = tail call i32 @swtch_pri(i32 0) #14
  ret void
}

declare i32 @swtch_pri(i32) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_task(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %idx, i8* %closure) #0 {
entry:
  %call = tail call i32 %f(i8* %user_context, i32 %idx, i8* %closure) #14
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_loop_task(i8* %user_context, i32 (i8*, i32, i32, i8*, i8*)* %f, i32 %min, i32 %extent, i8* %closure, i8* %task_parent) #0 {
entry:
  %call = tail call i32 %f(i8* %user_context, i32 %min, i32 %extent, i8* %closure, i8* %task_parent) #14
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_par_for(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %min, i32 %size, i8* %closure) #0 {
entry:
  %job = alloca %"struct.Halide::Runtime::Internal::work", align 8
  %cmp = icmp slt i32 %size, 1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %0 = bitcast %"struct.Halide::Runtime::Internal::work"* %job to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %0) #11
  %fn = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 0
  store i32 (i8*, i32, i32, i8*, i8*)* null, i32 (i8*, i32, i32, i8*, i8*)** %fn, align 8, !tbaa !28
  %min2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 5
  store i32 %min, i32* %min2, align 4, !tbaa !31
  %extent = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 6
  store i32 %size, i32* %extent, align 8, !tbaa !32
  %serial = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 8
  store i8 0, i8* %serial, align 8, !tbaa !33
  %semaphores = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 3
  store %struct.halide_semaphore_acquire_t* null, %struct.halide_semaphore_acquire_t** %semaphores, align 8, !tbaa !34
  %num_semaphores = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 4
  store i32 0, i32* %num_semaphores, align 8, !tbaa !35
  %closure8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 1
  store i8* %closure, i8** %closure8, align 8, !tbaa !36
  %min_threads = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 7
  store i32 0, i32* %min_threads, align 4, !tbaa !37
  %name = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 2
  store i8* null, i8** %name, align 8, !tbaa !38
  %task_fn = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 1
  store i32 (i8*, i32, i8*)* %f, i32 (i8*, i32, i8*)** %task_fn, align 8, !tbaa !39
  %user_context11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 7
  store i8* %user_context, i8** %user_context11, align 8, !tbaa !40
  %exit_status = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 9
  %active_workers = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 8
  %1 = bitcast i32* %active_workers to <2 x i32>*
  store <2 x i32> zeroinitializer, <2 x i32>* %1, align 8, !tbaa !41
  %next_semaphore = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 10
  store i32 0, i32* %next_semaphore, align 8, !tbaa !42
  %owner_is_sleeping = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 11
  store i8 0, i8* %owner_is_sleeping, align 4, !tbaa !43
  %siblings = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 3
  store %"struct.Halide::Runtime::Internal::work"* %job, %"struct.Halide::Runtime::Internal::work"** %siblings, align 8, !tbaa !44
  %sibling_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 4
  store i32 0, i32* %sibling_count, align 8, !tbaa !45
  %parent_job = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 5
  store %"struct.Halide::Runtime::Internal::work"* null, %"struct.Halide::Runtime::Internal::work"** %parent_job, align 8, !tbaa !46
  call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #15
  call void @_ZN6Halide7Runtime8Internal27enqueue_work_already_lockedEiPNS1_4workES3_(i32 1, %"struct.Halide::Runtime::Internal::work"* nonnull %job, %"struct.Halide::Runtime::Internal::work"* null) #15
  call void @_ZN6Halide7Runtime8Internal28worker_thread_already_lockedEPNS1_4workE(%"struct.Halide::Runtime::Internal::work"* nonnull %job) #15
  call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #15
  %2 = load i32, i32* %exit_status, align 4, !tbaa !47
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %0) #11
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i32 [ %2, %if.end ], [ 0, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind
define weak void @halide_mutex_lock(%struct.halide_mutex* %mutex) local_unnamed_addr #4 {
entry:
  %control.i.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", align 8
  %state.i = getelementptr %struct.halide_mutex, %struct.halide_mutex* %mutex, i64 0, i32 0, i64 0
  %0 = cmpxchg weak i64* %state.i, i64 0, i64 1 acquire monotonic
  %1 = extractvalue { i64, i1 } %0, 1
  br i1 %1, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex4lockEv.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %2 = load atomic i64, i64* %state.i monotonic, align 8
  %3 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i to i8*
  %4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0, i32 0
  %lock_state2.i.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 1
  %5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0
  %6 = ptrtoint %struct.halide_mutex* %mutex to i64
  br label %while.cond.outer.i.i

while.cond.outer.i.i:                             ; preds = %while.cond.outer.i.i.backedge, %if.then.i
  %expected.0.ph.i.i = phi i64 [ %2, %if.then.i ], [ %expected.0.ph.i.i.be, %while.cond.outer.i.i.backedge ]
  %spinner.sroa.0.0.ph.i.i = phi i32 [ 40, %if.then.i ], [ %spinner.sroa.0.0.ph.i.i.be, %while.cond.outer.i.i.backedge ]
  %and55.i.i = and i64 %expected.0.ph.i.i, 1
  %tobool.not56.i.i = icmp eq i64 %and55.i.i, 0
  br i1 %tobool.not56.i.i, label %if.then.i.i, label %if.end4.i.i

if.then.i.i:                                      ; preds = %while.cond.outer.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i
  %expected.057.i.i = phi i64 [ %9, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i ], [ %expected.0.ph.i.i, %while.cond.outer.i.i ]
  %or.i.i = or i64 %expected.057.i.i, 1
  %7 = cmpxchg weak i64* %state.i, i64 %expected.057.i.i, i64 %or.i.i acquire monotonic
  %8 = extractvalue { i64, i1 } %7, 1
  br i1 %8, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex4lockEv.exit, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i: ; preds = %if.then.i.i
  %9 = extractvalue { i64, i1 } %7, 0
  %and.i.i = and i64 %9, 1
  %tobool.not.i.i = icmp eq i64 %and.i.i, 0
  br i1 %tobool.not.i.i, label %if.then.i.i, label %if.end4.i.i.loopexit

if.end4.i.i.loopexit:                             ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i
  %10 = extractvalue { i64, i1 } %7, 0
  br label %if.end4.i.i

if.end4.i.i:                                      ; preds = %if.end4.i.i.loopexit, %while.cond.outer.i.i
  %expected.0.lcssa.i.i = phi i64 [ %expected.0.ph.i.i, %while.cond.outer.i.i ], [ %10, %if.end4.i.i.loopexit ]
  %cmp.i.i.i = icmp sgt i32 %spinner.sroa.0.0.ph.i.i, 0
  br i1 %cmp.i.i.i, label %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i, label %if.end8.i.i

_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i: ; preds = %if.end4.i.i
  %cmp4.i.not.i.i = icmp eq i32 %spinner.sroa.0.0.ph.i.i, 1
  br i1 %cmp4.i.not.i.i, label %if.end8.i.i, label %if.then6.i.i

if.then6.i.i:                                     ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i
  %dec.i.i.i = add nsw i32 %spinner.sroa.0.0.ph.i.i, -1
  call void @halide_thread_yield() #14
  %11 = load atomic i64, i64* %state.i monotonic, align 8
  br label %while.cond.outer.i.i.backedge

if.end8.i.i:                                      ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i, %if.end4.i.i
  %spinner.sroa.0.152.i.i = phi i32 [ 0, %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i ], [ %spinner.sroa.0.0.ph.i.i, %if.end4.i.i ]
  %and9.i.i = and i64 %expected.0.lcssa.i.i, 2
  %cmp.i.i = icmp eq i64 %and9.i.i, 0
  br i1 %cmp.i.i, label %if.then10.i.i, label %if.end19.i.i

if.then10.i.i:                                    ; preds = %if.end8.i.i
  %or12.i.i = or i64 %expected.0.lcssa.i.i, 2
  %12 = cmpxchg weak i64* %state.i, i64 %expected.0.lcssa.i.i, i64 %or12.i.i monotonic monotonic
  %13 = extractvalue { i64, i1 } %12, 1
  br i1 %13, label %if.end19.i.i, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i: ; preds = %if.then10.i.i
  %14 = extractvalue { i64, i1 } %12, 0
  br label %while.cond.outer.i.i.backedge

if.end19.i.i:                                     ; preds = %if.then10.i.i, %if.end8.i.i
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %3) #11
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8, !tbaa !48
  store i64* %state.i, i64** %lock_state2.i.i.i, align 8, !tbaa !50
  %call21.i.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control4parkEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %5, i64 %6) #14
  %cmp22.i.i = icmp eq i64 %call21.i.i, %6
  br i1 %cmp22.i.i, label %cleanup30.critedge.i.i, label %if.end24.i.i

if.end24.i.i:                                     ; preds = %if.end19.i.i
  %15 = load atomic i64, i64* %state.i monotonic, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %3) #11
  br label %while.cond.outer.i.i.backedge

while.cond.outer.i.i.backedge:                    ; preds = %if.end24.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i, %if.then6.i.i
  %expected.0.ph.i.i.be = phi i64 [ %14, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i ], [ %15, %if.end24.i.i ], [ %11, %if.then6.i.i ]
  %spinner.sroa.0.0.ph.i.i.be = phi i32 [ %spinner.sroa.0.152.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i ], [ 40, %if.end24.i.i ], [ %dec.i.i.i, %if.then6.i.i ]
  br label %while.cond.outer.i.i

cleanup30.critedge.i.i:                           ; preds = %if.end19.i.i
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %3) #11
  br label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex4lockEv.exit

_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex4lockEv.exit: ; preds = %if.then.i.i, %cleanup30.critedge.i.i, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal27enqueue_work_already_lockedEiPNS1_4workES3_(i32 %num_jobs, %"struct.Halide::Runtime::Internal::work"* %jobs, %"struct.Halide::Runtime::Internal::work"* %task_parent) local_unnamed_addr #0 {
entry:
  %0 = load i8, i8* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 15), align 1, !tbaa !52, !range !21
  %tobool.not = icmp eq i8 %0, 0
  br i1 %tobool.not, label %land.rhs.i, label %if.end4

land.rhs.i:                                       ; preds = %entry, %while.body.i
  %bytes.011.i = phi i8* [ %incdec.ptr.i, %while.body.i ], [ bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), %entry ]
  %1 = load i8, i8* %bytes.011.i, align 1, !tbaa !18
  %cmp2.i = icmp eq i8 %1, 0
  br i1 %cmp2.i, label %while.body.i, label %do.body.i

while.body.i:                                     ; preds = %land.rhs.i
  %incdec.ptr.i = getelementptr inbounds i8, i8* %bytes.011.i, i64 1
  %exitcond.not.i = icmp eq i8* %incdec.ptr.i, bitcast (%"struct.Halide::Runtime::Internal::work_queue_t"* select (i1 icmp ugt (i8* bitcast (%"struct.Halide::Runtime::Internal::work_queue_t"* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 1) to i8*), i8* getelementptr (i8, i8* bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), i64 1)), %"struct.Halide::Runtime::Internal::work_queue_t"* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 1), %"struct.Halide::Runtime::Internal::work_queue_t"* bitcast (i8* getelementptr (i8, i8* bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), i64 1) to %"struct.Halide::Runtime::Internal::work_queue_t"*)) to i8*)
  br i1 %exitcond.not.i, label %do.body.i, label %land.rhs.i, !llvm.loop !56

do.body.i:                                        ; preds = %while.body.i, %land.rhs.i
  %bytes.0.lcssa.i = phi i8* [ %bytes.011.i, %land.rhs.i ], [ bitcast (%"struct.Halide::Runtime::Internal::work_queue_t"* select (i1 icmp ugt (i8* bitcast (%"struct.Halide::Runtime::Internal::work_queue_t"* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 1) to i8*), i8* getelementptr (i8, i8* bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), i64 1)), %"struct.Halide::Runtime::Internal::work_queue_t"* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 1), %"struct.Halide::Runtime::Internal::work_queue_t"* bitcast (i8* getelementptr (i8, i8* bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), i64 1) to %"struct.Halide::Runtime::Internal::work_queue_t"*)) to i8*), %while.body.i ]
  %cmp3.i = icmp eq i8* %bytes.0.lcssa.i, bitcast (%"struct.Halide::Runtime::Internal::work_queue_t"* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 1) to i8*)
  br i1 %cmp3.i, label %_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit, label %if.then.i

if.then.i:                                        ; preds = %do.body.i
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.6, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit

_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit: ; preds = %if.then.i, %do.body.i
  %2 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !58
  %tobool1.not = icmp eq i32 %2, 0
  br i1 %tobool1.not, label %if.then2, label %if.end

if.then2:                                         ; preds = %_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit
  %call = tail call i32 @_ZN6Halide7Runtime8Internal27default_desired_num_threadsEv() #15
  br label %if.end

if.end:                                           ; preds = %if.then2, %_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit
  %3 = phi i32 [ %call, %if.then2 ], [ %2, %_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit ]
  %4 = icmp sgt i32 %3, 1
  %spec.select.i = select i1 %4, i32 %3, i32 1
  %5 = icmp slt i32 %spec.select.i, 256
  %call3176 = select i1 %5, i32 %spec.select.i, i32 256
  store i32 %call3176, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !58
  store i8 1, i8* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 15), align 1, !tbaa !52
  br label %if.end4

if.end4:                                          ; preds = %if.end, %entry
  %cmp181 = icmp sgt i32 %num_jobs, 0
  br i1 %cmp181, label %for.body.preheader, label %for.cond.cleanup

for.body.preheader:                               ; preds = %if.end4
  %wide.trip.count = zext i32 %num_jobs to i64
  br label %for.body

for.cond.cleanup.loopexit:                        ; preds = %for.inc
  %phi.bo = and i8 %stealable_jobs.1, 1
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %if.end4
  %workers_to_wake.0.lcssa = phi i32 [ -1, %if.end4 ], [ %workers_to_wake.1, %for.cond.cleanup.loopexit ]
  %stealable_jobs.0.lcssa = phi i8 [ 0, %if.end4 ], [ %phi.bo, %for.cond.cleanup.loopexit ]
  %job_has_acquires.0.lcssa = phi i8 [ 0, %if.end4 ], [ %spec.select, %for.cond.cleanup.loopexit ]
  %job_may_block.0.lcssa = phi i8 [ 0, %if.end4 ], [ %job_may_block.1, %for.cond.cleanup.loopexit ]
  %min_threads.0.lcssa = phi i32 [ 0, %if.end4 ], [ %add, %for.cond.cleanup.loopexit ]
  %cmp31 = icmp eq %"struct.Halide::Runtime::Internal::work"* %task_parent, null
  br i1 %cmp31, label %if.then32, label %do.body61

for.body:                                         ; preds = %for.inc, %for.body.preheader
  %indvars.iv193 = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next194, %for.inc ]
  %min_threads.0187 = phi i32 [ 0, %for.body.preheader ], [ %add, %for.inc ]
  %job_may_block.0185 = phi i8 [ 0, %for.body.preheader ], [ %job_may_block.1, %for.inc ]
  %job_has_acquires.0184 = phi i8 [ 0, %for.body.preheader ], [ %spec.select, %for.inc ]
  %stealable_jobs.0183 = phi i8 [ 0, %for.body.preheader ], [ %stealable_jobs.1, %for.inc ]
  %workers_to_wake.0182 = phi i32 [ -1, %for.body.preheader ], [ %workers_to_wake.1, %for.inc ]
  %min_threads5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193, i32 0, i32 7
  %6 = load i32, i32* %min_threads5, align 4, !tbaa !37
  %cmp6 = icmp eq i32 %6, 0
  %add = add i32 %6, %min_threads.0187
  %stealable_jobs.1 = select i1 %cmp6, i8 1, i8 %stealable_jobs.0183
  %job_may_block.1 = select i1 %cmp6, i8 %job_may_block.0185, i8 1
  %num_semaphores = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193, i32 0, i32 4
  %7 = load i32, i32* %num_semaphores, align 8, !tbaa !35
  %cmp16.not = icmp eq i32 %7, 0
  %spec.select = select i1 %cmp16.not, i8 %job_has_acquires.0184, i8 1
  %serial = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193, i32 0, i32 8
  %8 = load i8, i8* %serial, align 8, !tbaa !33, !range !21
  %tobool22.not = icmp eq i8 %8, 0
  br i1 %tobool22.not, label %if.else24, label %if.then23

if.then23:                                        ; preds = %for.body
  %inc = add nsw i32 %workers_to_wake.0182, 1
  br label %for.inc

if.else24:                                        ; preds = %for.body
  %extent = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193, i32 0, i32 6
  %9 = load i32, i32* %extent, align 8, !tbaa !32
  %add28 = add nsw i32 %9, %workers_to_wake.0182
  br label %for.inc

for.inc:                                          ; preds = %if.else24, %if.then23
  %workers_to_wake.1 = phi i32 [ %inc, %if.then23 ], [ %add28, %if.else24 ]
  %indvars.iv.next194 = add nuw nsw i64 %indvars.iv193, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next194, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.cleanup.loopexit, label %for.body, !llvm.loop !59

if.then32:                                        ; preds = %for.cond.cleanup
  %10 = or i8 %job_may_block.0.lcssa, %job_has_acquires.0.lcssa
  %11 = and i8 %10, 1
  %12 = icmp eq i8 %11, 0
  %not. = xor i1 %12, true
  %add36 = zext i1 %not. to i32
  %min_threads.2 = add nsw i32 %min_threads.0.lcssa, %add36
  %13 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !60
  %cmp38180 = icmp slt i32 %13, 256
  br i1 %cmp38180, label %land.rhs, label %do.end50

land.rhs:                                         ; preds = %if.then32, %while.body
  %14 = phi i32 [ %inc45, %while.body ], [ %13, %if.then32 ]
  %15 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !58
  %sub = add nsw i32 %15, -1
  %cmp39 = icmp slt i32 %14, %sub
  br i1 %cmp39, label %while.body, label %lor.rhs

lor.rhs:                                          ; preds = %land.rhs
  %add40 = add nsw i32 %14, 1
  %16 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !61
  %sub41 = sub i32 %add40, %16
  %cmp42 = icmp slt i32 %sub41, %min_threads.2
  br i1 %cmp42, label %while.body, label %do.end50

while.body:                                       ; preds = %lor.rhs, %land.rhs
  %17 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !62
  %inc43 = add nsw i32 %17, 1
  store i32 %inc43, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !62
  %call44 = tail call %struct.halide_thread* @halide_spawn_thread(void (i8*)* nonnull @_ZN6Halide7Runtime8Internal13worker_threadEPv, i8* null) #15
  %18 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !60
  %inc45 = add nsw i32 %18, 1
  store i32 %inc45, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !60
  %idxprom46 = sext i32 %18 to i64
  %arrayidx47 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 13, i64 %idxprom46
  store %struct.halide_thread* %call44, %struct.halide_thread** %arrayidx47, align 8, !tbaa !14
  %cmp38 = icmp slt i32 %18, 255
  br i1 %cmp38, label %land.rhs, label %do.end50, !llvm.loop !63

do.end50:                                         ; preds = %while.body, %lor.rhs, %if.then32
  br i1 %12, label %if.end77, label %if.then54

if.then54:                                        ; preds = %do.end50
  %19 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !61
  %inc55 = add nsw i32 %19, 1
  store i32 %inc55, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !61
  br label %if.end77

do.body61:                                        ; preds = %for.cond.cleanup
  %min_threads63 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %task_parent, i64 0, i32 0, i32 7
  %20 = load i32, i32* %min_threads63, align 4, !tbaa !37
  %active_workers = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %task_parent, i64 0, i32 8
  %21 = load i32, i32* %active_workers, align 8, !tbaa !64
  %mul = mul nsw i32 %21, %20
  %threads_reserved = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %task_parent, i64 0, i32 6
  %22 = load i32, i32* %threads_reserved, align 8, !tbaa !65
  %sub64 = sub nsw i32 %mul, %22
  %cmp65.not = icmp sgt i32 %min_threads.0.lcssa, %sub64
  br i1 %cmp65.not, label %if.then66, label %do.end69

if.then66:                                        ; preds = %do.body61
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([263 x i8], [263 x i8]* @.str.3, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %do.end69

do.end69:                                         ; preds = %if.then66, %do.body61
  %23 = or i8 %job_may_block.0.lcssa, %job_has_acquires.0.lcssa
  %24 = and i8 %23, 1
  %25 = icmp eq i8 %24, 0
  br i1 %25, label %if.end77, label %if.then73

if.then73:                                        ; preds = %do.end69
  %26 = load i32, i32* %threads_reserved, align 8, !tbaa !65
  %inc75 = add nsw i32 %26, 1
  store i32 %inc75, i32* %threads_reserved, align 8, !tbaa !65
  br label %if.end77

if.end77:                                         ; preds = %if.then73, %do.end69, %if.then54, %do.end50
  br i1 %cmp181, label %for.body83.lr.ph, label %for.cond.cleanup82

for.body83.lr.ph:                                 ; preds = %if.end77
  %.promoted = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !66
  %27 = zext i32 %num_jobs to i64
  %min.iters.check = icmp eq i32 %num_jobs, 1
  br i1 %min.iters.check, label %for.body83.preheader, label %vector.ph

vector.ph:                                        ; preds = %for.body83.lr.ph
  %n.vec = and i64 %27, 4294967294
  %ind.end = and i64 %27, 1
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %vector.recur = phi %"struct.Halide::Runtime::Internal::work"* [ %.promoted, %vector.ph ], [ %31, %vector.body ]
  %offset.idx = sub i64 %27, %index
  %28 = add nsw i64 %offset.idx, -1
  %29 = add i64 %offset.idx, -2
  %30 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %28
  %31 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %29
  %32 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %28, i32 2
  %33 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %29, i32 2
  store %"struct.Halide::Runtime::Internal::work"* %vector.recur, %"struct.Halide::Runtime::Internal::work"** %32, align 8, !tbaa !67
  store %"struct.Halide::Runtime::Internal::work"* %30, %"struct.Halide::Runtime::Internal::work"** %33, align 8, !tbaa !67
  %34 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %28, i32 3
  %35 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %29, i32 3
  store %"struct.Halide::Runtime::Internal::work"* %jobs, %"struct.Halide::Runtime::Internal::work"** %34, align 8, !tbaa !44
  store %"struct.Halide::Runtime::Internal::work"* %jobs, %"struct.Halide::Runtime::Internal::work"** %35, align 8, !tbaa !44
  %36 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %28, i32 4
  %37 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %29, i32 4
  store i32 %num_jobs, i32* %36, align 8, !tbaa !45
  store i32 %num_jobs, i32* %37, align 8, !tbaa !45
  %38 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %28, i32 6
  %39 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %29, i32 6
  store i32 0, i32* %38, align 8, !tbaa !65
  store i32 0, i32* %39, align 8, !tbaa !65
  %index.next = add i64 %index, 2
  %40 = icmp eq i64 %index.next, %n.vec
  br i1 %40, label %middle.block, label %vector.body, !llvm.loop !68

middle.block:                                     ; preds = %vector.body
  %cmp.n = icmp eq i64 %n.vec, %27
  br i1 %cmp.n, label %for.cond80.for.cond.cleanup82_crit_edge, label %for.body83.preheader

for.body83.preheader:                             ; preds = %for.body83.lr.ph, %middle.block
  %indvars.iv.ph = phi i64 [ %ind.end, %middle.block ], [ %27, %for.body83.lr.ph ]
  %scalar.recur.ph = phi %"struct.Halide::Runtime::Internal::work"* [ %31, %middle.block ], [ %.promoted, %for.body83.lr.ph ]
  br label %for.body83

for.cond80.for.cond.cleanup82_crit_edge:          ; preds = %for.body83, %middle.block
  store %"struct.Halide::Runtime::Internal::work"* %jobs, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !66
  br label %for.cond.cleanup82

for.cond.cleanup82:                               ; preds = %for.cond80.for.cond.cleanup82_crit_edge, %if.end77
  %41 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 12), align 4, !tbaa !70
  %tobool96 = icmp ne i32 %41, 0
  %42 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 11), align 8
  %43 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8
  %cmp98 = icmp slt i32 %42, %43
  %44 = or i1 %tobool96, %cmp98
  %cmp102 = icmp sgt i32 %workers_to_wake.0.lcssa, %42
  %or.cond174 = or i1 %cmp102, %44
  %storemerge = select i1 %or.cond174, i32 %43, i32 %workers_to_wake.0.lcssa
  store i32 %storemerge, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 6), align 8, !tbaa !71
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 8)) #15
  %45 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 6), align 8, !tbaa !71
  %46 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !62
  %cmp106 = icmp sgt i32 %45, %46
  br i1 %cmp106, label %if.then107, label %if.end111

for.body83:                                       ; preds = %for.body83.preheader, %for.body83
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body83 ], [ %indvars.iv.ph, %for.body83.preheader ]
  %scalar.recur = phi %"struct.Halide::Runtime::Internal::work"* [ %arrayidx85, %for.body83 ], [ %scalar.recur.ph, %for.body83.preheader ]
  %indvars.iv.next = add nsw i64 %indvars.iv, -1
  %arrayidx85 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next
  %next_job = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next, i32 2
  store %"struct.Halide::Runtime::Internal::work"* %scalar.recur, %"struct.Halide::Runtime::Internal::work"** %next_job, align 8, !tbaa !67
  %siblings = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next, i32 3
  store %"struct.Halide::Runtime::Internal::work"* %jobs, %"struct.Halide::Runtime::Internal::work"** %siblings, align 8, !tbaa !44
  %sibling_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next, i32 4
  store i32 %num_jobs, i32* %sibling_count, align 8, !tbaa !45
  %threads_reserved93 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next, i32 6
  store i32 0, i32* %threads_reserved93, align 8, !tbaa !65
  %cmp81 = icmp sgt i64 %indvars.iv, 1
  br i1 %cmp81, label %for.body83, label %for.cond80.for.cond.cleanup82_crit_edge, !llvm.loop !72

if.then107:                                       ; preds = %for.cond.cleanup82
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 9)) #15
  %tobool108.not = icmp eq i8 %stealable_jobs.0.lcssa, 0
  br i1 %tobool108.not, label %if.end111, label %if.then109

if.then109:                                       ; preds = %if.then107
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10)) #15
  br label %if.end111

if.end111:                                        ; preds = %if.then109, %if.then107, %for.cond.cleanup82
  %47 = or i8 %job_may_block.0.lcssa, %job_has_acquires.0.lcssa
  %48 = and i8 %47, 1
  %49 = icmp eq i8 %48, 0
  br i1 %49, label %if.end123, label %if.then115

if.then115:                                       ; preds = %if.end111
  br i1 %cmp31, label %if.else120, label %if.then117

if.then117:                                       ; preds = %if.then115
  %threads_reserved118 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %task_parent, i64 0, i32 6
  %50 = load i32, i32* %threads_reserved118, align 8, !tbaa !65
  %dec119 = add nsw i32 %50, -1
  store i32 %dec119, i32* %threads_reserved118, align 8, !tbaa !65
  br label %if.end123

if.else120:                                       ; preds = %if.then115
  %51 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !61
  %dec121 = add nsw i32 %51, -1
  store i32 %dec121, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !61
  br label %if.end123

if.end123:                                        ; preds = %if.else120, %if.then117, %if.end111
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal28worker_thread_already_lockedEPNS1_4workE(%"struct.Halide::Runtime::Internal::work"* %owned_job) local_unnamed_addr #0 {
entry:
  %active_workers.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 8
  %tobool.not = icmp eq %"struct.Halide::Runtime::Internal::work"* %owned_job, null
  %extent.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 0, i32 6
  %exit_status = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 9
  %parent_job = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 5
  %siblings56 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 3
  %owner_is_sleeping = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 11
  %next_job10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 2
  br label %while.cond

while.cond:                                       ; preds = %while.cond.backedge, %entry
  %spin_count.0 = phi i32 [ 0, %entry ], [ %spin_count.0.be, %while.cond.backedge ]
  br i1 %tobool.not, label %cond.false, label %cond.true

cond.true:                                        ; preds = %while.cond
  %0 = load i32, i32* %extent.i, align 8, !tbaa !32
  %tobool.not.i = icmp eq i32 %0, 0
  br i1 %tobool.not.i, label %cond.end, label %if.then

cond.false:                                       ; preds = %while.cond
  %1 = load i8, i8* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 14), align 8, !tbaa !73, !range !21
  %tobool1.not = icmp eq i8 %1, 0
  br i1 %tobool1.not, label %do.end.thread, label %while.end316

cond.end:                                         ; preds = %cond.true
  %2 = load i32, i32* %active_workers.i, align 8, !tbaa !64
  %tobool2.i.not = icmp eq i32 %2, 0
  br i1 %tobool2.i.not, label %while.end316, label %if.then

if.then:                                          ; preds = %cond.end, %cond.true
  %3 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !66
  %4 = load i32, i32* %exit_status, align 4, !tbaa !47
  %cmp.not = icmp eq i32 %4, 0
  br i1 %cmp.not, label %if.else, label %if.then3

if.then3:                                         ; preds = %if.then
  %5 = load i32, i32* %active_workers.i, align 8, !tbaa !64
  %cmp4 = icmp eq i32 %5, 0
  br i1 %cmp4, label %while.cond6.preheader, label %do.end

while.cond6.preheader:                            ; preds = %if.then3
  %cmp7.not524 = icmp eq %"struct.Halide::Runtime::Internal::work"* %3, %owned_job
  br i1 %cmp7.not524, label %while.end, label %while.body8

while.body8:                                      ; preds = %while.cond6.preheader, %while.body8
  %job.0525 = phi %"struct.Halide::Runtime::Internal::work"* [ %6, %while.body8 ], [ %3, %while.cond6.preheader ]
  %next_job = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.0525, i64 0, i32 2
  %6 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job, align 8, !tbaa !67
  %cmp7.not = icmp eq %"struct.Halide::Runtime::Internal::work"* %6, %owned_job
  br i1 %cmp7.not, label %while.end.loopexit, label %while.body8, !llvm.loop !74

while.end.loopexit:                               ; preds = %while.body8
  %next_job.le = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.0525, i64 0, i32 2
  br label %while.end

while.end:                                        ; preds = %while.end.loopexit, %while.cond6.preheader
  %prev_ptr.0.lcssa = phi %"struct.Halide::Runtime::Internal::work"** [ getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), %while.cond6.preheader ], [ %next_job.le, %while.end.loopexit ]
  %7 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job10, align 8, !tbaa !67
  store %"struct.Halide::Runtime::Internal::work"* %7, %"struct.Halide::Runtime::Internal::work"** %prev_ptr.0.lcssa, align 8, !tbaa !14
  store i32 0, i32* %extent.i, align 8, !tbaa !32
  br label %while.cond.backedge

if.else:                                          ; preds = %if.then
  %8 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %parent_job, align 8, !tbaa !46
  %tobool11.not = icmp eq %"struct.Halide::Runtime::Internal::work"* %8, null
  br i1 %tobool11.not, label %do.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.else
  %exit_status13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %8, i64 0, i32 9
  %9 = load i32, i32* %exit_status13, align 4, !tbaa !47
  %cmp14.not = icmp eq i32 %9, 0
  br i1 %cmp14.not, label %do.end, label %if.then15

if.then15:                                        ; preds = %land.lhs.true
  store i32 %9, i32* %exit_status, align 4, !tbaa !47
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10)) #15
  br label %while.cond.backedge

do.end:                                           ; preds = %land.lhs.true, %if.else, %if.then3
  %tobool23.not527 = icmp eq %"struct.Halide::Runtime::Internal::work"* %3, null
  br i1 %tobool23.not527, label %if.then105, label %do.end27

do.end.thread:                                    ; preds = %cond.false
  %10 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !66
  %tobool23.not527563 = icmp eq %"struct.Halide::Runtime::Internal::work"* %10, null
  br i1 %tobool23.not527563, label %if.else112, label %do.end27.us

do.end27.us:                                      ; preds = %do.end.thread, %cleanup.us
  %job.1529.us = phi %"struct.Halide::Runtime::Internal::work"* [ %29, %cleanup.us ], [ %10, %do.end.thread ]
  %prev_ptr.1528.us = phi %"struct.Halide::Runtime::Internal::work"** [ %next_job95.us, %cleanup.us ], [ getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), %do.end.thread ]
  %parent_job29.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 5
  %11 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %parent_job29.us, align 8, !tbaa !46
  %cmp30.us = icmp eq %"struct.Halide::Runtime::Internal::work"* %11, null
  br i1 %cmp30.us, label %if.then31.us, label %if.else32.us

if.else32.us:                                     ; preds = %do.end27.us
  %active_workers33.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %11, i64 0, i32 8
  %12 = load i32, i32* %active_workers33.us, align 8, !tbaa !64
  %cmp34.us = icmp eq i32 %12, 0
  %min_threads.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %11, i64 0, i32 0, i32 7
  %13 = load i32, i32* %min_threads.us, align 4, !tbaa !37
  br i1 %cmp34.us, label %if.then35.us, label %if.else38.us

if.else38.us:                                     ; preds = %if.else32.us
  %mul.us = mul nsw i32 %13, %12
  %threads_reserved42.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %11, i64 0, i32 6
  %14 = load i32, i32* %threads_reserved42.us, align 8, !tbaa !65
  %sub43.us = sub nsw i32 %mul.us, %14
  br label %if.end45.us

if.then35.us:                                     ; preds = %if.else32.us
  %threads_reserved.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %11, i64 0, i32 6
  %15 = load i32, i32* %threads_reserved.us, align 8, !tbaa !65
  %sub37.us = sub nsw i32 %13, %15
  br label %if.end45.us

if.then31.us:                                     ; preds = %do.end27.us
  %16 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !60
  %add.us = add nsw i32 %16, 1
  %17 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !61
  %sub.us = sub i32 %add.us, %17
  br label %if.end45.us

if.end45.us:                                      ; preds = %if.then31.us, %if.then35.us, %if.else38.us
  %threads_available.0.us = phi i32 [ %sub.us, %if.then31.us ], [ %sub37.us, %if.then35.us ], [ %sub43.us, %if.else38.us ]
  %min_threads47.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 0, i32 7
  %18 = load i32, i32* %min_threads47.us, align 4, !tbaa !37
  %cmp48.not.us = icmp sge i32 %threads_available.0.us, %18
  %serial.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 0, i32 8
  %19 = load i8, i8* %serial.us, align 8, !tbaa !33, !range !21
  %tobool69.not.us = icmp eq i8 %19, 0
  br i1 %tobool69.not.us, label %if.end45.us.lor.end73.us_crit_edge, label %lor.rhs70.us

if.end45.us.lor.end73.us_crit_edge:               ; preds = %if.end45.us
  %.0 = and i1 %cmp48.not.us, true
  br label %lor.end73.us

lor.rhs70.us:                                     ; preds = %if.end45.us
  %active_workers71.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 8
  %20 = load i32, i32* %active_workers71.us, align 8, !tbaa !64
  %cmp72.us = icmp eq i32 %20, 0
  %.1 = and i1 %cmp48.not.us, %cmp72.us
  br label %lor.end73.us

lor.end73.us:                                     ; preds = %if.end45.us.lor.end73.us_crit_edge, %lor.rhs70.us
  %.phi = phi i1 [ %.0, %if.end45.us.lor.end73.us_crit_edge ], [ %.1, %lor.rhs70.us ]
  br i1 %.phi, label %if.then86.us, label %cleanup.us

if.then86.us:                                     ; preds = %lor.end73.us
  %next_semaphore.i.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 10
  %21 = load i32, i32* %next_semaphore.i.us, align 8, !tbaa !42
  %num_semaphores.i.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 0, i32 4
  %22 = load i32, i32* %num_semaphores.i.us, align 8, !tbaa !35
  %cmp14.i.us = icmp slt i32 %21, %22
  br i1 %cmp14.i.us, label %for.body.lr.ph.i.us, label %if.else127

for.body.lr.ph.i.us:                              ; preds = %if.then86.us
  %semaphores.i.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 0, i32 3
  br label %for.body.i.us

for.body.i.us:                                    ; preds = %for.inc.i.us, %for.body.lr.ph.i.us
  %23 = phi i32 [ %21, %for.body.lr.ph.i.us ], [ %inc.i.us, %for.inc.i.us ]
  %24 = load %struct.halide_semaphore_acquire_t*, %struct.halide_semaphore_acquire_t** %semaphores.i.us, align 8, !tbaa !34
  %idxprom.i.us = sext i32 %23 to i64
  %semaphore.i.us = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %24, i64 %idxprom.i.us, i32 0
  %25 = load %struct.halide_semaphore_t*, %struct.halide_semaphore_t** %semaphore.i.us, align 8, !tbaa !75
  %count.i.us = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %24, i64 %idxprom.i.us, i32 1
  %26 = load i32, i32* %count.i.us, align 8, !tbaa !77
  %call.i.us = tail call zeroext i1 @halide_default_semaphore_try_acquire(%struct.halide_semaphore_t* %25, i32 %26) #14
  br i1 %call.i.us, label %for.inc.i.us, label %cleanup.us

for.inc.i.us:                                     ; preds = %for.body.i.us
  %27 = load i32, i32* %next_semaphore.i.us, align 8, !tbaa !42
  %inc.i.us = add nsw i32 %27, 1
  store i32 %inc.i.us, i32* %next_semaphore.i.us, align 8, !tbaa !42
  %28 = load i32, i32* %num_semaphores.i.us, align 8, !tbaa !35
  %cmp.i.us = icmp slt i32 %inc.i.us, %28
  br i1 %cmp.i.us, label %for.body.i.us, label %if.else127, !llvm.loop !78

cleanup.us:                                       ; preds = %for.body.i.us, %lor.end73.us
  %next_job95.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 2
  %29 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job95.us, align 8, !tbaa !67
  %tobool23.not.us = icmp eq %"struct.Halide::Runtime::Internal::work"* %29, null
  br i1 %tobool23.not.us, label %if.then103, label %do.end27.us

do.end27:                                         ; preds = %do.end, %cleanup
  %job.1529 = phi %"struct.Halide::Runtime::Internal::work"* [ %50, %cleanup ], [ %3, %do.end ]
  %prev_ptr.1528 = phi %"struct.Halide::Runtime::Internal::work"** [ %next_job95, %cleanup ], [ getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), %do.end ]
  %parent_job29 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 5
  %30 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %parent_job29, align 8, !tbaa !46
  %cmp30 = icmp eq %"struct.Halide::Runtime::Internal::work"* %30, null
  br i1 %cmp30, label %if.then31, label %if.else32

if.then31:                                        ; preds = %do.end27
  %31 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !60
  %add = add nsw i32 %31, 1
  %32 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !61
  %sub = sub i32 %add, %32
  br label %if.end45

if.else32:                                        ; preds = %do.end27
  %active_workers33 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %30, i64 0, i32 8
  %33 = load i32, i32* %active_workers33, align 8, !tbaa !64
  %cmp34 = icmp eq i32 %33, 0
  %min_threads = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %30, i64 0, i32 0, i32 7
  %34 = load i32, i32* %min_threads, align 4, !tbaa !37
  br i1 %cmp34, label %if.then35, label %if.else38

if.then35:                                        ; preds = %if.else32
  %threads_reserved = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %30, i64 0, i32 6
  %35 = load i32, i32* %threads_reserved, align 8, !tbaa !65
  %sub37 = sub nsw i32 %34, %35
  br label %if.end45

if.else38:                                        ; preds = %if.else32
  %mul = mul nsw i32 %34, %33
  %threads_reserved42 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %30, i64 0, i32 6
  %36 = load i32, i32* %threads_reserved42, align 8, !tbaa !65
  %sub43 = sub nsw i32 %mul, %36
  br label %if.end45

if.end45:                                         ; preds = %if.else38, %if.then35, %if.then31
  %threads_available.0 = phi i32 [ %sub, %if.then31 ], [ %sub37, %if.then35 ], [ %sub43, %if.else38 ]
  %min_threads47 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 0, i32 7
  %37 = load i32, i32* %min_threads47, align 4, !tbaa !37
  %cmp48.not = icmp slt i32 %threads_available.0, %37
  %siblings = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 3
  %38 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %siblings, align 8, !tbaa !44
  %39 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %siblings56, align 8, !tbaa !44
  %cmp57 = icmp ne %"struct.Halide::Runtime::Internal::work"* %38, %39
  %cmp60 = icmp ne i32 %37, 0
  %serial = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 0, i32 8
  %40 = load i8, i8* %serial, align 8, !tbaa !33, !range !21
  %tobool69.not = icmp eq i8 %40, 0
  br i1 %tobool69.not, label %if.end45.lor.end73_crit_edge, label %lor.rhs70

if.end45.lor.end73_crit_edge:                     ; preds = %if.end45
  %.not472.0 = xor i1 true, true
  br label %lor.end73

lor.rhs70:                                        ; preds = %if.end45
  %active_workers71 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 8
  %41 = load i32, i32* %active_workers71, align 8, !tbaa !64
  %cmp72 = icmp eq i32 %41, 0
  %.not472.1 = xor i1 %cmp72, true
  br label %lor.end73

lor.end73:                                        ; preds = %if.end45.lor.end73_crit_edge, %lor.rhs70
  %.not472.phi = phi i1 [ %.not472.0, %if.end45.lor.end73_crit_edge ], [ %.not472.1, %lor.rhs70 ]
  %.not = and i1 %cmp60, %cmp57
  %brmerge = or i1 %cmp48.not, %.not
  %brmerge473 = or i1 %brmerge, %.not472.phi
  br i1 %brmerge473, label %cleanup, label %if.then86

if.then86:                                        ; preds = %lor.end73
  %next_semaphore.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 10
  %42 = load i32, i32* %next_semaphore.i, align 8, !tbaa !42
  %num_semaphores.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 0, i32 4
  %43 = load i32, i32* %num_semaphores.i, align 8, !tbaa !35
  %cmp14.i = icmp slt i32 %42, %43
  br i1 %cmp14.i, label %for.body.lr.ph.i, label %if.else127

for.body.lr.ph.i:                                 ; preds = %if.then86
  %semaphores.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 0, i32 3
  br label %for.body.i

for.body.i:                                       ; preds = %for.inc.i, %for.body.lr.ph.i
  %44 = phi i32 [ %42, %for.body.lr.ph.i ], [ %inc.i, %for.inc.i ]
  %45 = load %struct.halide_semaphore_acquire_t*, %struct.halide_semaphore_acquire_t** %semaphores.i, align 8, !tbaa !34
  %idxprom.i = sext i32 %44 to i64
  %semaphore.i = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %45, i64 %idxprom.i, i32 0
  %46 = load %struct.halide_semaphore_t*, %struct.halide_semaphore_t** %semaphore.i, align 8, !tbaa !75
  %count.i = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %45, i64 %idxprom.i, i32 1
  %47 = load i32, i32* %count.i, align 8, !tbaa !77
  %call.i = tail call zeroext i1 @halide_default_semaphore_try_acquire(%struct.halide_semaphore_t* %46, i32 %47) #14
  br i1 %call.i, label %for.inc.i, label %cleanup

for.inc.i:                                        ; preds = %for.body.i
  %48 = load i32, i32* %next_semaphore.i, align 8, !tbaa !42
  %inc.i = add nsw i32 %48, 1
  store i32 %inc.i, i32* %next_semaphore.i, align 8, !tbaa !42
  %49 = load i32, i32* %num_semaphores.i, align 8, !tbaa !35
  %cmp.i = icmp slt i32 %inc.i, %49
  br i1 %cmp.i, label %for.body.i, label %if.else127, !llvm.loop !78

cleanup:                                          ; preds = %for.body.i, %lor.end73
  %next_job95 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 2
  %50 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job95, align 8, !tbaa !67
  %tobool23.not = icmp eq %"struct.Halide::Runtime::Internal::work"* %50, null
  br i1 %tobool23.not, label %if.then103, label %do.end27

if.then103:                                       ; preds = %cleanup, %cleanup.us
  br i1 %tobool.not, label %if.else112, label %if.then105

if.then105:                                       ; preds = %do.end, %if.then103
  %inc = add nsw i32 %spin_count.0, 1
  %cmp106 = icmp slt i32 %spin_count.0, 40
  br i1 %cmp106, label %if.then107, label %if.else108

if.then107:                                       ; preds = %if.then105
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #15
  tail call void @halide_thread_yield() #14
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #15
  br label %while.cond.backedge

if.else108:                                       ; preds = %if.then105
  %51 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 12), align 4, !tbaa !70
  %inc109 = add nsw i32 %51, 1
  store i32 %inc109, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 12), align 4, !tbaa !70
  store i8 1, i8* %owner_is_sleeping, align 4, !tbaa !43
  tail call void @halide_cond_wait(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10), %struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #15
  store i8 0, i8* %owner_is_sleeping, align 4, !tbaa !43
  %52 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 12), align 4, !tbaa !70
  %dec = add nsw i32 %52, -1
  store i32 %dec, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 12), align 4, !tbaa !70
  br label %while.cond.backedge

if.else112:                                       ; preds = %if.then103, %do.end.thread
  %53 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 11), align 8, !tbaa !79
  %inc113 = add nsw i32 %53, 1
  store i32 %inc113, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 11), align 8, !tbaa !79
  %54 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !62
  %55 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 6), align 8, !tbaa !71
  %cmp114 = icmp sgt i32 %54, %55
  br i1 %cmp114, label %if.then115, label %if.else118

if.then115:                                       ; preds = %if.else112
  %dec116 = add nsw i32 %54, -1
  store i32 %dec116, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !62
  tail call void @halide_cond_wait(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 9), %struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #15
  %56 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !62
  %inc117 = add nsw i32 %56, 1
  store i32 %inc117, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !62
  br label %if.end124

if.else118:                                       ; preds = %if.else112
  %inc119 = add nsw i32 %spin_count.0, 1
  %cmp120 = icmp slt i32 %spin_count.0, 40
  br i1 %cmp120, label %if.then121, label %if.else122

if.then121:                                       ; preds = %if.else118
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #15
  tail call void @halide_thread_yield() #14
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #15
  br label %if.end124

if.else122:                                       ; preds = %if.else118
  tail call void @halide_cond_wait(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 8), %struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #15
  br label %if.end124

if.end124:                                        ; preds = %if.else122, %if.then121, %if.then115
  %spin_count.1 = phi i32 [ %spin_count.0, %if.then115 ], [ %inc119, %if.then121 ], [ %inc119, %if.else122 ]
  %57 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 11), align 8, !tbaa !79
  %dec125 = add nsw i32 %57, -1
  store i32 %dec125, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 11), align 8, !tbaa !79
  br label %while.cond.backedge

if.else127:                                       ; preds = %if.then86, %if.then86.us, %for.inc.i, %for.inc.i.us
  %next_semaphore.i521 = phi i32* [ %next_semaphore.i.us, %for.inc.i.us ], [ %next_semaphore.i, %for.inc.i ], [ %next_semaphore.i.us, %if.then86.us ], [ %next_semaphore.i, %if.then86 ]
  %prev_ptr.1519 = phi %"struct.Halide::Runtime::Internal::work"** [ %prev_ptr.1528.us, %for.inc.i.us ], [ %prev_ptr.1528, %for.inc.i ], [ %prev_ptr.1528.us, %if.then86.us ], [ %prev_ptr.1528, %if.then86 ]
  %job.1515 = phi %"struct.Halide::Runtime::Internal::work"* [ %job.1529.us, %for.inc.i.us ], [ %job.1529, %for.inc.i ], [ %job.1529.us, %if.then86.us ], [ %job.1529, %if.then86 ]
  store i32 0, i32* %next_semaphore.i521, align 8, !tbaa !42
  %active_workers132 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 8
  %58 = load i32, i32* %active_workers132, align 8, !tbaa !64
  %inc133 = add nsw i32 %58, 1
  store i32 %inc133, i32* %active_workers132, align 8, !tbaa !64
  %parent_job134 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 5
  %59 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %parent_job134, align 8, !tbaa !46
  %cmp135 = icmp eq %"struct.Halide::Runtime::Internal::work"* %59, null
  %min_threads138 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 7
  %60 = load i32, i32* %min_threads138, align 4, !tbaa !37
  br i1 %cmp135, label %if.then136, label %if.else143

if.then136:                                       ; preds = %if.else127
  %61 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !61
  %add139 = add nsw i32 %61, %60
  store i32 %add139, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !61
  br label %if.end152

if.else143:                                       ; preds = %if.else127
  %threads_reserved147 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %59, i64 0, i32 6
  %62 = load i32, i32* %threads_reserved147, align 8, !tbaa !65
  %add148 = add nsw i32 %62, %60
  store i32 %add148, i32* %threads_reserved147, align 8, !tbaa !65
  br label %if.end152

if.end152:                                        ; preds = %if.else143, %if.then136
  %serial154 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 8
  %63 = load i8, i8* %serial154, align 8, !tbaa !33, !range !21
  %tobool155.not = icmp eq i8 %63, 0
  br i1 %tobool155.not, label %if.else198, label %if.then156

if.then156:                                       ; preds = %if.end152
  %next_job157 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 2
  %64 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job157, align 8, !tbaa !67
  store %"struct.Halide::Runtime::Internal::work"* %64, %"struct.Halide::Runtime::Internal::work"** %prev_ptr.1519, align 8, !tbaa !14
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #15
  %extent163 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 6
  %next_semaphore.i474 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 10
  %num_semaphores.i475 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 4
  %semaphores.i477 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 3
  %user_context = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 7
  %fn = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 0
  %min = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 5
  %closure = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 1
  %65 = bitcast %"struct.Halide::Runtime::Internal::work"* %job.1515 to i8*
  br label %while.cond161.preheader

while.cond161.preheader:                          ; preds = %if.end172, %if.then156
  %iters.0538 = phi i32 [ 1, %if.then156 ], [ 0, %if.end172 ]
  %total_iters.0537 = phi i32 [ 0, %if.then156 ], [ %add178, %if.end172 ]
  %66 = load i32, i32* %extent163, align 8, !tbaa !32
  %sub164531 = sub nsw i32 %66, %total_iters.0537
  %cmp165532 = icmp sgt i32 %sub164531, %iters.0538
  br i1 %cmp165532, label %land.rhs.preheader, label %while.end169

land.rhs.preheader:                               ; preds = %while.cond161.preheader
  %.pre = load i32, i32* %next_semaphore.i474, align 8, !tbaa !42
  %.pre560 = load i32, i32* %num_semaphores.i475, align 8, !tbaa !35
  br label %land.rhs

land.rhs:                                         ; preds = %while.body167, %land.rhs.preheader
  %67 = phi i32 [ %76, %while.body167 ], [ %66, %land.rhs.preheader ]
  %68 = phi i32 [ %77, %while.body167 ], [ %.pre560, %land.rhs.preheader ]
  %69 = phi i32 [ 0, %while.body167 ], [ %.pre, %land.rhs.preheader ]
  %iters.1533 = phi i32 [ %inc168, %while.body167 ], [ %iters.0538, %land.rhs.preheader ]
  %cmp14.i476 = icmp slt i32 %69, %68
  br i1 %cmp14.i476, label %for.body.i483, label %while.body167

for.body.i483:                                    ; preds = %land.rhs, %for.inc.i486
  %70 = phi i32 [ %inc.i484, %for.inc.i486 ], [ %69, %land.rhs ]
  %71 = load %struct.halide_semaphore_acquire_t*, %struct.halide_semaphore_acquire_t** %semaphores.i477, align 8, !tbaa !34
  %idxprom.i479 = sext i32 %70 to i64
  %semaphore.i480 = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %71, i64 %idxprom.i479, i32 0
  %72 = load %struct.halide_semaphore_t*, %struct.halide_semaphore_t** %semaphore.i480, align 8, !tbaa !75
  %count.i481 = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %71, i64 %idxprom.i479, i32 1
  %73 = load i32, i32* %count.i481, align 8, !tbaa !77
  %call.i482 = tail call zeroext i1 @halide_default_semaphore_try_acquire(%struct.halide_semaphore_t* %72, i32 %73) #14
  br i1 %call.i482, label %for.inc.i486, label %while.end169

for.inc.i486:                                     ; preds = %for.body.i483
  %74 = load i32, i32* %next_semaphore.i474, align 8, !tbaa !42
  %inc.i484 = add nsw i32 %74, 1
  store i32 %inc.i484, i32* %next_semaphore.i474, align 8, !tbaa !42
  %75 = load i32, i32* %num_semaphores.i475, align 8, !tbaa !35
  %cmp.i485 = icmp slt i32 %inc.i484, %75
  br i1 %cmp.i485, label %for.body.i483, label %while.body167.loopexit, !llvm.loop !78

while.body167.loopexit:                           ; preds = %for.inc.i486
  %.pre561 = load i32, i32* %extent163, align 8, !tbaa !32
  br label %while.body167

while.body167:                                    ; preds = %while.body167.loopexit, %land.rhs
  %76 = phi i32 [ %.pre561, %while.body167.loopexit ], [ %67, %land.rhs ]
  %77 = phi i32 [ %75, %while.body167.loopexit ], [ %68, %land.rhs ]
  store i32 0, i32* %next_semaphore.i474, align 8, !tbaa !42
  %inc168 = add nuw nsw i32 %iters.1533, 1
  %sub164 = sub nsw i32 %76, %total_iters.0537
  %cmp165 = icmp sgt i32 %sub164, %inc168
  br i1 %cmp165, label %land.rhs, label %if.end172, !llvm.loop !80

while.end169:                                     ; preds = %for.body.i483, %while.cond161.preheader
  %iters.1523 = phi i32 [ %iters.0538, %while.cond161.preheader ], [ %iters.1533, %for.body.i483 ]
  %cmp170 = icmp eq i32 %iters.1523, 0
  br i1 %cmp170, label %while.end179, label %if.end172

if.end172:                                        ; preds = %while.body167, %while.end169
  %iters.1523566 = phi i32 [ %iters.1523, %while.end169 ], [ %inc168, %while.body167 ]
  %78 = load i8*, i8** %user_context, align 8, !tbaa !40
  %79 = load i32 (i8*, i32, i32, i8*, i8*)*, i32 (i8*, i32, i32, i8*, i8*)** %fn, align 8, !tbaa !28
  %80 = load i32, i32* %min, align 4, !tbaa !31
  %add175 = add nsw i32 %80, %total_iters.0537
  %81 = load i8*, i8** %closure, align 8, !tbaa !36
  %call177 = tail call i32 @halide_do_loop_task(i8* %78, i32 (i8*, i32, i32, i8*, i8*)* %79, i32 %add175, i32 %iters.1523566, i8* %81, i8* nonnull %65) #15
  %add178 = add nuw nsw i32 %iters.1523566, %total_iters.0537
  %cmp159 = icmp eq i32 %call177, 0
  br i1 %cmp159, label %while.cond161.preheader, label %while.end179, !llvm.loop !81

while.end179:                                     ; preds = %if.end172, %while.end169
  %cmp170568 = phi i1 [ true, %while.end169 ], [ false, %if.end172 ]
  %result.0.lcssa = phi i32 [ 0, %while.end169 ], [ %call177, %if.end172 ]
  %total_iters.0.lcssa = phi i32 [ %total_iters.0537, %while.end169 ], [ %add178, %if.end172 ]
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #15
  %82 = load i32, i32* %min, align 4, !tbaa !31
  %add182 = add nsw i32 %82, %total_iters.0.lcssa
  store i32 %add182, i32* %min, align 4, !tbaa !31
  %83 = load i32, i32* %extent163, align 8, !tbaa !32
  %sub185 = sub nsw i32 %83, %total_iters.0.lcssa
  store i32 %sub185, i32* %extent163, align 8, !tbaa !32
  br i1 %cmp170568, label %if.else190, label %if.end230.thread505

if.end230.thread505:                              ; preds = %while.end179
  store i32 0, i32* %extent163, align 8, !tbaa !32
  br label %if.then238

if.else190:                                       ; preds = %while.end179
  %cmp193 = icmp sgt i32 %sub185, 0
  br i1 %cmp193, label %if.then194, label %if.end271

if.then194:                                       ; preds = %if.else190
  %84 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !66
  store %"struct.Halide::Runtime::Internal::work"* %84, %"struct.Halide::Runtime::Internal::work"** %next_job157, align 8, !tbaa !67
  store %"struct.Halide::Runtime::Internal::work"* %job.1515, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !66
  br label %if.end271

if.else198:                                       ; preds = %if.end152
  %myjob.sroa.0.0..sroa_idx = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 0
  %myjob.sroa.0.0.copyload = load i32 (i8*, i32, i32, i8*, i8*)*, i32 (i8*, i32, i32, i8*, i8*)** %myjob.sroa.0.0..sroa_idx, align 8, !tbaa.struct !82
  %myjob.sroa.4.0..sroa_idx327 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 1
  %myjob.sroa.4.0.copyload = load i8*, i8** %myjob.sroa.4.0..sroa_idx327, align 8, !tbaa.struct !83
  %myjob.sroa.6333.0..sroa_idx334 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 5
  %myjob.sroa.6333.0.copyload = load i32, i32* %myjob.sroa.6333.0..sroa_idx334, align 4
  %myjob.sroa.8340.0..sroa_idx341 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 1
  %myjob.sroa.8340.0.copyload = load i32 (i8*, i32, i8*)*, i32 (i8*, i32, i8*)** %myjob.sroa.8340.0..sroa_idx341, align 8, !tbaa.struct !84
  %myjob.sroa.10347.0..sroa_idx348 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 7
  %myjob.sroa.10347.0.copyload = load i8*, i8** %myjob.sroa.10347.0..sroa_idx348, align 8, !tbaa.struct !85
  %inc201 = add nsw i32 %myjob.sroa.6333.0.copyload, 1
  store i32 %inc201, i32* %myjob.sroa.6333.0..sroa_idx334, align 4, !tbaa !31
  %extent203 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 6
  %85 = load i32, i32* %extent203, align 8, !tbaa !32
  %dec204 = add nsw i32 %85, -1
  store i32 %dec204, i32* %extent203, align 8, !tbaa !32
  %cmp207 = icmp eq i32 %dec204, 0
  br i1 %cmp207, label %if.then208, label %if.end210

if.then208:                                       ; preds = %if.else198
  %next_job209 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 2
  %86 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job209, align 8, !tbaa !67
  store %"struct.Halide::Runtime::Internal::work"* %86, %"struct.Halide::Runtime::Internal::work"** %prev_ptr.1519, align 8, !tbaa !14
  br label %if.end210

if.end210:                                        ; preds = %if.then208, %if.else198
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #15
  %tobool211.not = icmp eq i32 (i8*, i32, i8*)* %myjob.sroa.8340.0.copyload, null
  br i1 %tobool211.not, label %if.else220, label %if.then212

if.then212:                                       ; preds = %if.end210
  %call219 = tail call i32 @halide_do_task(i8* %myjob.sroa.10347.0.copyload, i32 (i8*, i32, i8*)* nonnull %myjob.sroa.8340.0.copyload, i32 %myjob.sroa.6333.0.copyload, i8* %myjob.sroa.4.0.copyload) #15
  br label %if.end230

if.else220:                                       ; preds = %if.end210
  %87 = bitcast %"struct.Halide::Runtime::Internal::work"* %job.1515 to i8*
  %call228 = tail call i32 @halide_do_loop_task(i8* %myjob.sroa.10347.0.copyload, i32 (i8*, i32, i32, i8*, i8*)* %myjob.sroa.0.0.copyload, i32 %myjob.sroa.6333.0.copyload, i32 1, i8* %myjob.sroa.4.0.copyload, i8* %87) #15
  br label %if.end230

if.end230:                                        ; preds = %if.else220, %if.then212
  %result.1 = phi i32 [ %call219, %if.then212 ], [ %call228, %if.else220 ]
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #15
  %cmp237.not = icmp eq i32 %result.1, 0
  br i1 %cmp237.not, label %if.end271, label %if.then238

if.then238:                                       ; preds = %if.end230, %if.end230.thread505
  %result.2510 = phi i32 [ %result.0.lcssa, %if.end230.thread505 ], [ %result.1, %if.end230 ]
  %exit_status239 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 9
  store i32 %result.2510, i32* %exit_status239, align 4, !tbaa !47
  %sibling_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 4
  %88 = load i32, i32* %sibling_count, align 8, !tbaa !45
  %cmp240540 = icmp sgt i32 %88, 0
  br i1 %cmp240540, label %do.end243.lr.ph, label %if.end271

do.end243.lr.ph:                                  ; preds = %if.then238
  %siblings244 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 3
  %89 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %siblings244, align 8, !tbaa !44
  %wide.trip.count = zext i32 %88 to i64
  br label %do.end243

do.end243:                                        ; preds = %for.inc, %do.end243.lr.ph
  %indvars.iv = phi i64 [ 0, %do.end243.lr.ph ], [ %indvars.iv.next, %for.inc ]
  %wake_owners.0541 = phi i8 [ 0, %do.end243.lr.ph ], [ %wake_owners.1, %for.inc ]
  %exit_status245 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %89, i64 %indvars.iv, i32 9
  %90 = load i32, i32* %exit_status245, align 4, !tbaa !47
  %cmp246 = icmp eq i32 %90, 0
  br i1 %cmp246, label %if.then247, label %for.inc

if.then247:                                       ; preds = %do.end243
  store i32 %result.2510, i32* %exit_status245, align 4, !tbaa !47
  %91 = load i32, i32* %active_workers132, align 8, !tbaa !64
  %cmp253 = icmp eq i32 %91, 0
  br i1 %cmp253, label %land.rhs254, label %land.end260

land.rhs254:                                      ; preds = %if.then247
  %owner_is_sleeping258 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %89, i64 %indvars.iv, i32 11
  %92 = load i8, i8* %owner_is_sleeping258, align 4, !tbaa !43, !range !21
  br label %land.end260

land.end260:                                      ; preds = %land.rhs254, %if.then247
  %93 = phi i8 [ 0, %if.then247 ], [ %92, %land.rhs254 ]
  %94 = and i8 %wake_owners.0541, 1
  %or = or i8 %93, %94
  br label %for.inc

for.inc:                                          ; preds = %land.end260, %do.end243
  %wake_owners.1 = phi i8 [ %or, %land.end260 ], [ %wake_owners.0541, %do.end243 ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %if.end271, label %do.end243, !llvm.loop !86

if.end271:                                        ; preds = %for.inc, %if.then238, %if.end230, %if.then194, %if.else190
  %wake_owners.2 = phi i8 [ 0, %if.end230 ], [ 0, %if.else190 ], [ 0, %if.then194 ], [ 0, %if.then238 ], [ %wake_owners.1, %for.inc ]
  %95 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %parent_job134, align 8, !tbaa !46
  %cmp273 = icmp eq %"struct.Halide::Runtime::Internal::work"* %95, null
  %96 = load i32, i32* %min_threads138, align 4, !tbaa !37
  br i1 %cmp273, label %if.then274, label %if.else281

if.then274:                                       ; preds = %if.end271
  %97 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !61
  %sub277 = sub nsw i32 %97, %96
  store i32 %sub277, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !61
  br label %if.end290

if.else281:                                       ; preds = %if.end271
  %threads_reserved285 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %95, i64 0, i32 6
  %98 = load i32, i32* %threads_reserved285, align 8, !tbaa !65
  %sub286 = sub nsw i32 %98, %96
  store i32 %sub286, i32* %threads_reserved285, align 8, !tbaa !65
  br label %if.end290

if.end290:                                        ; preds = %if.else281, %if.then274
  %99 = load i32, i32* %active_workers132, align 8, !tbaa !64
  %dec292 = add nsw i32 %99, -1
  store i32 %dec292, i32* %active_workers132, align 8, !tbaa !64
  %100 = and i8 %wake_owners.2, 1
  %tobool296.not = icmp eq i8 %100, 0
  br i1 %tobool296.not, label %lor.lhs.false297, label %if.then310

lor.lhs.false297:                                 ; preds = %if.end290
  %cmp299 = icmp eq i32 %dec292, 0
  br i1 %cmp299, label %land.lhs.true300, label %while.cond.backedge

land.lhs.true300:                                 ; preds = %lor.lhs.false297
  %extent302 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 6
  %101 = load i32, i32* %extent302, align 8, !tbaa !32
  %cmp303 = icmp eq i32 %101, 0
  br i1 %cmp303, label %land.lhs.true307, label %lor.lhs.false304

lor.lhs.false304:                                 ; preds = %land.lhs.true300
  %exit_status305 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 9
  %102 = load i32, i32* %exit_status305, align 4, !tbaa !47
  %cmp306.not = icmp eq i32 %102, 0
  br i1 %cmp306.not, label %while.cond.backedge, label %land.lhs.true307

land.lhs.true307:                                 ; preds = %lor.lhs.false304, %land.lhs.true300
  %owner_is_sleeping308 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 11
  %103 = load i8, i8* %owner_is_sleeping308, align 4, !tbaa !43, !range !21
  %tobool309.not = icmp eq i8 %103, 0
  br i1 %tobool309.not, label %while.cond.backedge, label %if.then310

if.then310:                                       ; preds = %land.lhs.true307, %if.end290
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10)) #15
  br label %while.cond.backedge

while.cond.backedge:                              ; preds = %if.then310, %land.lhs.true307, %lor.lhs.false304, %lor.lhs.false297, %if.end124, %if.else108, %if.then107, %if.then15, %while.end
  %spin_count.0.be = phi i32 [ %spin_count.0, %while.end ], [ %spin_count.0, %if.then15 ], [ %inc, %if.then107 ], [ %inc, %if.else108 ], [ %spin_count.1, %if.end124 ], [ 0, %if.then310 ], [ 0, %land.lhs.true307 ], [ 0, %lor.lhs.false304 ], [ 0, %lor.lhs.false297 ]
  br label %while.cond, !llvm.loop !87

while.end316:                                     ; preds = %cond.end, %cond.false
  ret void
}

; Function Attrs: nounwind
define weak void @halide_mutex_unlock(%struct.halide_mutex* %mutex) local_unnamed_addr #4 {
entry:
  %control.i.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", align 8
  %state.i = getelementptr %struct.halide_mutex, %struct.halide_mutex* %mutex, i64 0, i32 0, i64 0
  %0 = cmpxchg weak i64* %state.i, i64 1, i64 0 release monotonic
  %1 = extractvalue { i64, i1 } %0, 1
  br i1 %1, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %2 = cmpxchg i64* %state.i, i64 1, i64 0 release monotonic
  %3 = extractvalue { i64, i1 } %2, 1
  br i1 %3, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit, label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i
  %4 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %4) #11
  %5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8, !tbaa !48
  %lock_state2.i.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 1
  store i64* %state.i, i64** %lock_state2.i.i.i, align 8, !tbaa !50
  %6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0
  %7 = ptrtoint %struct.halide_mutex* %mutex to i64
  %call3.i.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control10unpark_oneEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %6, i64 %7) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %4) #11
  br label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit

_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit: ; preds = %if.end.i.i, %if.then.i, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control10unpark_oneEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i64 %addr) local_unnamed_addr #0 align 2 {
entry:
  %call = tail call nonnull align 8 dereferenceable(24) %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* @_ZN6Halide7Runtime8Internal15Synchronization11lock_bucketEy(i64 %addr) #15
  %head = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 1
  %0 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head, align 8, !tbaa !14
  %tail = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 2
  %1 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::parking_control"* %this to i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)***
  %state.i60 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0, i32 0
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0
  br label %while.cond

while.cond:                                       ; preds = %cleanup, %entry
  %data_location.0 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** [ %head, %entry ], [ %data_location.1, %cleanup ]
  %prev.0 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ null, %entry ], [ %prev.1, %cleanup ]
  %data.0 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %0, %entry ], [ %data.1, %cleanup ]
  %retval.0 = phi i64 [ undef, %entry ], [ %retval.1, %cleanup ]
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, null
  br i1 %cmp.not, label %while.end22, label %while.body

while.body:                                       ; preds = %while.cond
  %sleep_address = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 1
  %2 = load atomic i64, i64* %sleep_address monotonic, align 8
  %cmp2 = icmp eq i64 %2, %addr
  %next3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 2
  %3 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next3, align 8, !tbaa !88
  br i1 %cmp2, label %if.then, label %cleanup

if.then:                                          ; preds = %while.body
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %3, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %data_location.0, align 8, !tbaa !14
  %4 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8, !tbaa !93
  %cmp4 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %4, %data.0
  br i1 %cmp4, label %if.then5, label %while.cond7.preheader

while.cond7.preheader:                            ; preds = %if.then
  %cmp872.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %3, null
  br i1 %cmp872.not, label %if.end, label %while.body9

if.then5:                                         ; preds = %if.then
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %prev.0, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8, !tbaa !93
  br label %if.end

while.body9:                                      ; preds = %while.cond7.preheader, %while.body9
  %data2.073 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %6, %while.body9 ], [ %3, %while.cond7.preheader ]
  %sleep_address10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data2.073, i64 0, i32 1
  %5 = load atomic i64, i64* %sleep_address10 monotonic, align 8
  %cmp11 = icmp eq i64 %5, %addr
  %next12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data2.073, i64 0, i32 2
  %6 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next12, align 8, !tbaa !88
  %cmp8 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %6, null
  %7 = or i1 %cmp11, %cmp8
  br i1 %7, label %if.end.loopexit, label %while.body9, !llvm.loop !96

if.end.loopexit:                                  ; preds = %while.body9
  %frombool = zext i1 %cmp11 to i8
  br label %if.end

if.end:                                           ; preds = %if.end.loopexit, %if.then5, %while.cond7.preheader
  %more_waiters.1 = phi i8 [ 0, %if.then5 ], [ 0, %while.cond7.preheader ], [ %frombool, %if.end.loopexit ]
  %tobool13 = icmp ne i8 %more_waiters.1, 0
  %vtable = load i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)**, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*** %1, align 8, !tbaa !48
  %vfn = getelementptr inbounds i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)** %vtable, i64 2
  %8 = load i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)** %vfn, align 8
  %call14 = tail call i64 %8(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i32 1, i1 zeroext %tobool13) #14
  %unpark_info = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 3
  store i64 %call14, i64* %unpark_info, align 8, !tbaa !97
  %mutex.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 0, i32 0
  %call.i = tail call i32 @pthread_mutex_lock(%struct.pthread_mutex_t* nonnull %mutex.i) #14
  %9 = atomicrmw and i64* %state.i60, i64 -2 release
  %and.i61 = and i64 %9, 2
  %cmp.i62 = icmp ne i64 %and.i61, 0
  %cmp3.not.i63 = icmp ult i64 %9, 4
  %or.cond.i64 = or i1 %cmp3.not.i63, %cmp.i62
  br i1 %or.cond.i64, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66, label %if.then.i65

if.then.i65:                                      ; preds = %if.end
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #14
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66

_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66: ; preds = %if.then.i65, %if.end
  %should_park.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 0, i32 2
  store i8 0, i8* %should_park.i, align 8, !tbaa !98
  %condvar.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 0, i32 1
  %call.i67 = tail call i32 @pthread_cond_signal(%struct.pthread_mutex_t* nonnull %condvar.i) #14
  %call.i69 = tail call i32 @pthread_mutex_unlock(%struct.pthread_mutex_t* nonnull %mutex.i) #14
  %10 = zext i8 %more_waiters.1 to i64
  br label %cleanup

cleanup:                                          ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66, %while.body
  %data_location.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** [ %data_location.0, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66 ], [ %next3, %while.body ]
  %prev.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %prev.0, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66 ], [ %data.0, %while.body ]
  %data.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %data.0, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66 ], [ %3, %while.body ]
  %retval.1 = phi i64 [ %10, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66 ], [ %retval.0, %while.body ]
  br i1 %cmp2, label %cleanup27, label %while.cond, !llvm.loop !99

while.end22:                                      ; preds = %while.cond
  %vtable23 = load i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)**, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*** %1, align 8, !tbaa !48
  %vfn24 = getelementptr inbounds i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)** %vtable23, i64 2
  %11 = load i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)** %vfn24, align 8
  %call25 = tail call i64 %11(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i32 0, i1 zeroext false) #14
  %12 = atomicrmw and i64* %state.i60, i64 -2 release
  %and.i = and i64 %12, 2
  %cmp.i = icmp ne i64 %and.i, 0
  %cmp3.not.i = icmp ult i64 %12, 4
  %or.cond.i = or i1 %cmp3.not.i, %cmp.i
  br i1 %or.cond.i, label %cleanup27, label %if.then.i

if.then.i:                                        ; preds = %while.end22
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #14
  br label %cleanup27

cleanup27:                                        ; preds = %cleanup, %if.then.i, %while.end22
  %retval.2 = phi i64 [ 0, %while.end22 ], [ 0, %if.then.i ], [ %retval.1, %cleanup ]
  ret i64 %retval.2
}

; Function Attrs: nounwind mustprogress
define linkonce nonnull align 8 dereferenceable(24) %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* @_ZN6Halide7Runtime8Internal15Synchronization11lock_bucketEy(i64 %addr) local_unnamed_addr #0 {
entry:
  %mul.i = mul i64 %addr, -7046029254386353131
  %shr.i = lshr i64 %mul.i, 54
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i
  %state.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx, i64 0, i32 0, i32 0
  %0 = cmpxchg weak i64* %state.i, i64 0, i64 1 acquire monotonic
  %1 = extractvalue { i64, i1 } %0, 1
  br i1 %1, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #14
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit

_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit: ; preds = %if.then.i, %entry
  ret %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx
}

declare i32 @pthread_mutex_lock(%struct.pthread_mutex_t*) local_unnamed_addr #1

; Function Attrs: nounwind
define linkonce void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %this) local_unnamed_addr #4 align 2 {
entry:
  %state = getelementptr inbounds %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %this, i64 0, i32 0
  %0 = load atomic i64, i64* %state monotonic, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %expected.0 = phi i64 [ %0, %entry ], [ %3, %if.end ]
  %and = and i64 %expected.0, 2
  %tobool.not = icmp ne i64 %and, 0
  %cmp = icmp ult i64 %expected.0, 4
  %or.cond = or i1 %cmp, %tobool.not
  br i1 %or.cond, label %cleanup75, label %if.end

if.end:                                           ; preds = %while.cond
  %or = or i64 %expected.0, 2
  %1 = cmpxchg weak i64* %state, i64 %expected.0, i64 %or acquire monotonic
  %2 = extractvalue { i64, i1 } %1, 1
  %3 = extractvalue { i64, i1 } %1, 0
  br i1 %2, label %while.cond11, label %while.cond

while.cond11:                                     ; preds = %if.end, %cleanup70
  %.pn.pn = phi { i64, i1 } [ %.pn, %cleanup70 ], [ %1, %if.end ]
  %expected.3 = extractvalue { i64, i1 } %.pn.pn, 0
  %and13 = and i64 %expected.3, -4
  %4 = inttoptr i64 %and13 to %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*
  %tail14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %4, i64 0, i32 3
  %tail.0143 = load %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail14, align 8, !tbaa !100
  %cmp16144 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0143, null
  br i1 %cmp16144, label %while.body17, label %while.end23

while.body17:                                     ; preds = %while.cond11, %do.end
  %current.0145 = phi %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* [ %5, %do.end ], [ %4, %while.cond11 ]
  %next18 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %current.0145, i64 0, i32 1
  %5 = load %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %next18, align 8, !tbaa !102
  %cmp19.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %5, null
  br i1 %cmp19.not, label %if.then20, label %do.end

if.then20:                                        ; preds = %while.body17
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([130 x i8], [130 x i8]* @.str.5, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %do.end

do.end:                                           ; preds = %if.then20, %while.body17
  %prev = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %5, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %current.0145, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %prev, align 8, !tbaa !103
  %tail22 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %5, i64 0, i32 3
  %tail.0 = load %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail22, align 8, !tbaa !100
  %cmp16 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0, null
  br i1 %cmp16, label %while.body17, label %while.end23, !llvm.loop !104

while.end23:                                      ; preds = %do.end, %while.cond11
  %tail.0.lcssa = phi %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* [ %tail.0143, %while.cond11 ], [ %tail.0, %do.end ]
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0.lcssa, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail14, align 8, !tbaa !100
  %and25 = and i64 %expected.3, 1
  %tobool26.not = icmp eq i64 %and25, 0
  br i1 %tobool26.not, label %if.end35, label %if.then27

if.then27:                                        ; preds = %while.end23
  %and29 = and i64 %expected.3, -3
  %6 = cmpxchg weak i64* %state, i64 %expected.3, i64 %and29 acq_rel monotonic
  %7 = extractvalue { i64, i1 } %6, 1
  br i1 %7, label %cleanup75, label %cleanup70

if.end35:                                         ; preds = %while.end23
  %prev36 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0.lcssa, i64 0, i32 2
  %8 = load %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %prev36, align 8, !tbaa !103
  %cmp37 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %8, null
  br i1 %cmp37, label %while.body41, label %if.else62

while.body41:                                     ; preds = %if.end35, %if.end47
  %expected.5146 = phi i64 [ %11, %if.end47 ], [ %expected.3, %if.end35 ]
  %and43 = and i64 %expected.5146, 1
  %9 = cmpxchg weak i64* %state, i64 %expected.5146, i64 %and43 acq_rel monotonic
  %10 = extractvalue { i64, i1 } %9, 1
  br i1 %10, label %if.end66, label %if.end47

if.end47:                                         ; preds = %while.body41
  %11 = extractvalue { i64, i1 } %9, 0
  %cmp49 = icmp ult i64 %11, 4
  br i1 %cmp49, label %while.body41, label %cleanup70, !llvm.loop !105

if.else62:                                        ; preds = %if.end35
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %8, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail14, align 8, !tbaa !100
  %12 = atomicrmw and i64* %state, i64 -3 release
  br label %if.end66

if.end66:                                         ; preds = %while.body41, %if.else62
  %mutex.i103 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0.lcssa, i64 0, i32 0, i32 0
  %call.i104 = tail call i32 @pthread_mutex_lock(%struct.pthread_mutex_t* nonnull %mutex.i103) #14
  %should_park.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0.lcssa, i64 0, i32 0, i32 2
  store i8 0, i8* %should_park.i, align 8, !tbaa !98
  %condvar.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0.lcssa, i64 0, i32 0, i32 1
  %call.i101 = tail call i32 @pthread_cond_signal(%struct.pthread_mutex_t* nonnull %condvar.i) #14
  %call.i = tail call i32 @pthread_mutex_unlock(%struct.pthread_mutex_t* nonnull %mutex.i103) #14
  br label %cleanup75

cleanup70:                                        ; preds = %if.end47, %if.then27
  %.pn = phi { i64, i1 } [ %6, %if.then27 ], [ %9, %if.end47 ]
  fence acquire
  br label %while.cond11

cleanup75:                                        ; preds = %while.cond, %if.then27, %if.end66
  ret void
}

declare i32 @pthread_cond_signal(%struct.pthread_mutex_t*) local_unnamed_addr #1

declare i32 @pthread_mutex_unlock(%struct.pthread_mutex_t*) local_unnamed_addr #1

; Function Attrs: nounwind
define linkonce void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %this) local_unnamed_addr #4 align 2 {
entry:
  %node = alloca %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", align 8
  %state = getelementptr inbounds %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %this, i64 0, i32 0
  %0 = load atomic i64, i64* %state monotonic, align 8
  %1 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node to i8*
  %should_park.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, i64 0, i32 0, i32 2
  %mutex2.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, i64 0, i32 0, i32 0
  %condvar3.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, i64 0, i32 0, i32 1
  %next.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, i64 0, i32 1
  %tail.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, i64 0, i32 3
  %2 = ptrtoint %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node to i64
  %3 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %next.i to <2 x %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*>*
  br label %while.cond.outer

while.cond.outer:                                 ; preds = %while.cond.outer.backedge, %entry
  %expected.0.ph = phi i64 [ %0, %entry ], [ %expected.0.ph.be, %while.cond.outer.backedge ]
  %spinner.sroa.0.0.ph = phi i32 [ 40, %entry ], [ %spinner.sroa.0.0.ph.be, %while.cond.outer.backedge ]
  %and46 = and i64 %expected.0.ph, 1
  %tobool.not47 = icmp eq i64 %and46, 0
  br i1 %tobool.not47, label %if.then, label %if.end4

if.then:                                          ; preds = %while.cond.outer, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit
  %expected.048 = phi i64 [ %6, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit ], [ %expected.0.ph, %while.cond.outer ]
  %or = or i64 %expected.048, 1
  %4 = cmpxchg weak i64* %state, i64 %expected.048, i64 %or acquire monotonic
  %5 = extractvalue { i64, i1 } %4, 1
  br i1 %5, label %cleanup23, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit: ; preds = %if.then
  %6 = extractvalue { i64, i1 } %4, 0
  %and = and i64 %6, 1
  %tobool.not = icmp eq i64 %and, 0
  br i1 %tobool.not, label %if.then, label %if.end4.loopexit

if.end4.loopexit:                                 ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit
  %7 = extractvalue { i64, i1 } %4, 0
  br label %if.end4

if.end4:                                          ; preds = %if.end4.loopexit, %while.cond.outer
  %expected.0.lcssa = phi i64 [ %expected.0.ph, %while.cond.outer ], [ %7, %if.end4.loopexit ]
  %cmp.not = icmp ugt i64 %expected.0.lcssa, 3
  %cmp.i = icmp sgt i32 %spinner.sroa.0.0.ph, 0
  %or.cond = and i1 %cmp.i, %cmp.not
  br i1 %or.cond, label %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit, label %if.end9

_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit: ; preds = %if.end4
  %cmp4.i = icmp sgt i32 %spinner.sroa.0.0.ph, 1
  br i1 %cmp4.i, label %if.then7, label %if.end9

if.then7:                                         ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit
  %dec.i = add nsw i32 %spinner.sroa.0.0.ph, -1
  call void @halide_thread_yield() #14
  %8 = load atomic i64, i64* %state monotonic, align 8
  br label %while.cond.outer.backedge

if.end9:                                          ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit, %if.end4
  %spinner.sroa.0.2 = phi i32 [ %spinner.sroa.0.0.ph, %if.end4 ], [ 0, %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit ]
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %1) #11
  store i8 0, i8* %should_park.i.i, align 8, !tbaa !98
  %call.i.i29 = call i32 @pthread_mutex_init(%struct.pthread_mutex_t* nonnull %mutex2.i.i, i8* null) #14
  %call4.i.i = call i32 @pthread_cond_init(%struct.pthread_mutex_t* nonnull %condvar3.i.i, i8* null) #14
  store <2 x %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*> zeroinitializer, <2 x %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*>* %3, align 8, !tbaa !14
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* null, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail.i, align 8, !tbaa !100
  store i8 1, i8* %should_park.i.i, align 8, !tbaa !98
  %and10 = and i64 %expected.0.lcssa, -4
  %cmp11 = icmp eq i64 %and10, 0
  br i1 %cmp11, label %if.then12, label %if.else

if.then12:                                        ; preds = %if.end9
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail.i, align 8, !tbaa !100
  br label %if.end13

if.else:                                          ; preds = %if.end9
  %9 = inttoptr i64 %and10 to %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %9, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %next.i, align 8, !tbaa !102
  br label %if.end13

if.end13:                                         ; preds = %if.else, %if.then12
  %and15 = and i64 %expected.0.lcssa, 3
  %or16 = or i64 %and15, %2
  %10 = cmpxchg weak i64* %state, i64 %expected.0.lcssa, i64 %or16 release monotonic
  %11 = extractvalue { i64, i1 } %10, 1
  br i1 %11, label %if.then19, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_release_relaxedEPyS4_S4_.exit

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_release_relaxedEPyS4_S4_.exit: ; preds = %if.end13
  %12 = extractvalue { i64, i1 } %10, 0
  br label %if.end22

if.then19:                                        ; preds = %if.end13
  %call.i = call i32 @pthread_mutex_lock(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #14
  %13 = load i8, i8* %should_park.i.i, align 8, !tbaa !98, !range !21
  %tobool.not6.i = icmp eq i8 %13, 0
  br i1 %tobool.not6.i, label %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, label %while.body.i

while.body.i:                                     ; preds = %if.then19, %while.body.i
  %call3.i = call i32 @pthread_cond_wait(%struct.pthread_mutex_t* nonnull %condvar3.i.i, %struct.pthread_mutex_t* nonnull %mutex2.i.i) #14
  %14 = load i8, i8* %should_park.i.i, align 8, !tbaa !98, !range !21
  %tobool.not.i = icmp eq i8 %14, 0
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, label %while.body.i, !llvm.loop !106

_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit: ; preds = %while.body.i, %if.then19
  %call5.i = call i32 @pthread_mutex_unlock(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #14
  %15 = load atomic i64, i64* %state monotonic, align 8
  br label %if.end22

if.end22:                                         ; preds = %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_release_relaxedEPyS4_S4_.exit
  %expected.3 = phi i64 [ %15, %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit ], [ %12, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_release_relaxedEPyS4_S4_.exit ]
  %spinner.sroa.0.3 = phi i32 [ 40, %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit ], [ %spinner.sroa.0.2, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_release_relaxedEPyS4_S4_.exit ]
  %call.i.i = call i32 @pthread_cond_destroy(%struct.pthread_mutex_t* nonnull %condvar3.i.i) #14
  %call2.i.i = call i32 @pthread_mutex_destroy(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #14
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %1) #11
  br label %while.cond.outer.backedge

while.cond.outer.backedge:                        ; preds = %if.end22, %if.then7
  %expected.0.ph.be = phi i64 [ %8, %if.then7 ], [ %expected.3, %if.end22 ]
  %spinner.sroa.0.0.ph.be = phi i32 [ %dec.i, %if.then7 ], [ %spinner.sroa.0.3, %if.end22 ]
  br label %while.cond.outer

cleanup23:                                        ; preds = %if.then
  ret void
}

declare i32 @pthread_mutex_init(%struct.pthread_mutex_t*, i8*) local_unnamed_addr #1

declare i32 @pthread_cond_init(%struct.pthread_mutex_t*, i8*) local_unnamed_addr #1

declare i32 @pthread_cond_wait(%struct.pthread_mutex_t*, %struct.pthread_mutex_t*) local_unnamed_addr #1

declare i32 @pthread_cond_destroy(%struct.pthread_mutex_t*) local_unnamed_addr #1

declare i32 @pthread_mutex_destroy(%struct.pthread_mutex_t*) local_unnamed_addr #1

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr zeroext i1 @_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control8validateERNS2_15validate_actionE(%"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* nonnull dereferenceable(16) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) unnamed_addr #2 align 2 {
entry:
  %lock_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %this, i64 0, i32 1
  %0 = load i64*, i64** %lock_state, align 8, !tbaa !50
  %1 = load atomic i64, i64* %0 monotonic, align 8
  %cmp = icmp eq i64 %1, 3
  ret i1 %cmp
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr void @_ZN6Halide7Runtime8Internal15Synchronization15parking_control12before_sleepEv(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this) unnamed_addr #2 align 2 {
entry:
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr i64 @_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control6unparkEib(%"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* nonnull dereferenceable(16) %this, i32 %unparked, i1 zeroext %more_waiters) unnamed_addr #2 align 2 {
entry:
  %0 = select i1 %more_waiters, i64 2, i64 0
  %lock_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %this, i64 0, i32 1
  %1 = load i64*, i64** %lock_state, align 8, !tbaa !50
  store atomic i64 %0, i64* %1 release, align 8
  ret i64 0
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr void @_ZN6Halide7Runtime8Internal15Synchronization15parking_control16requeue_callbackERKNS2_15validate_actionEbb(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action, i1 zeroext %one_to_wake, i1 zeroext %some_requeued) unnamed_addr #2 align 2 {
entry:
  ret void
}

; Function Attrs: nounwind
define weak void @halide_cond_broadcast(%struct.halide_mutex* %cond) local_unnamed_addr #4 {
entry:
  %control.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", align 8
  %state.i = getelementptr %struct.halide_mutex, %struct.halide_mutex* %cond, i64 0, i32 0, i64 0
  %0 = load atomic i64, i64* %state.i monotonic, align 8
  %cmp.i = icmp eq i64 %0, 0
  br i1 %cmp.i, label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond9broadcastEv.exit, label %if.end.i

if.end.i:                                         ; preds = %entry
  %1 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1) #11
  %2 = inttoptr i64 %0 to %"class.Halide::Runtime::Internal::Synchronization::word_lock"*
  %3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization25broadcast_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8, !tbaa !48
  %cond_state2.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 1
  store i64* %state.i, i64** %cond_state2.i.i, align 8, !tbaa !107
  %mutex3.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 2
  store %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %2, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex3.i.i, align 8, !tbaa !109
  %4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0
  %5 = ptrtoint %struct.halide_mutex* %cond to i64
  %call.i = call i32 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control14unpark_requeueEyyy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %4, i64 %5, i64 %0, i64 0) #14
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1) #11
  br label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond9broadcastEv.exit

_ZN6Halide7Runtime8Internal15Synchronization9fast_cond9broadcastEv.exit: ; preds = %if.end.i, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define weak zeroext i1 @halide_default_semaphore_try_acquire(%struct.halide_semaphore_t* %s, i32 %n) #0 {
entry:
  %cmp = icmp eq i32 %n, 0
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %value = bitcast %struct.halide_semaphore_t* %s to i32*
  %0 = load atomic i32, i32* %value acquire, align 4
  %sub12 = sub nsw i32 %0, %n
  %cmp113 = icmp sgt i32 %sub12, -1
  br i1 %cmp113, label %land.rhs, label %return

land.rhs:                                         ; preds = %if.end, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit
  %sub15 = phi i32 [ %sub, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit ], [ %sub12, %if.end ]
  %expected.014 = phi i32 [ %3, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit ], [ %0, %if.end ]
  %1 = cmpxchg weak i32* %value, i32 %expected.014, i32 %sub15 acq_rel monotonic
  %2 = extractvalue { i32, i1 } %1, 1
  br i1 %2, label %return.loopexit, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit: ; preds = %land.rhs
  %3 = extractvalue { i32, i1 } %1, 0
  %sub = sub nsw i32 %3, %n
  %cmp1 = icmp sgt i32 %sub, -1
  br i1 %cmp1, label %land.rhs, label %return.loopexit

return.loopexit:                                  ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit, %land.rhs
  %4 = extractvalue { i32, i1 } %1, 1
  br label %return

return:                                           ; preds = %return.loopexit, %if.end, %entry
  %retval.0 = phi i1 [ true, %entry ], [ false, %if.end ], [ %4, %return.loopexit ]
  ret i1 %retval.0
}

; Function Attrs: nounwind
define weak void @halide_cond_wait(%struct.halide_mutex* %cond, %struct.halide_mutex* %mutex) local_unnamed_addr #4 {
entry:
  %control.i.i.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", align 8
  %control.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", align 8
  %0 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %0) #11
  %state.i = getelementptr %struct.halide_mutex, %struct.halide_mutex* %cond, i64 0, i32 0, i64 0
  %1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization20wait_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %1, align 8, !tbaa !48
  %cond_state2.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 1
  store i64* %state.i, i64** %cond_state2.i.i, align 8, !tbaa !110
  %mutex3.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 2
  %2 = bitcast %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex3.i.i to %struct.halide_mutex**
  store %struct.halide_mutex* %mutex, %struct.halide_mutex** %2, align 8, !tbaa !112
  %3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0
  %4 = ptrtoint %struct.halide_mutex* %cond to i64
  %call.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control4parkEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %3, i64 %4) #14
  %5 = ptrtoint %struct.halide_mutex* %mutex to i64
  %cmp.not.i = icmp eq i64 %call.i, %5
  %6 = getelementptr %struct.halide_mutex, %struct.halide_mutex* %mutex, i64 0, i32 0, i64 0
  br i1 %cmp.not.i, label %if.else.i, label %if.then.i

if.then.i:                                        ; preds = %entry
  %7 = cmpxchg weak i64* %6, i64 0, i64 1 acquire monotonic
  %8 = extractvalue { i64, i1 } %7, 1
  br i1 %8, label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit, label %if.then.i.i

if.then.i.i:                                      ; preds = %if.then.i
  %9 = load atomic i64, i64* %6 monotonic, align 8
  %10 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i.i to i8*
  %11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i.i, i64 0, i32 0, i32 0
  %lock_state2.i.i.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i.i, i64 0, i32 1
  %12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i.i, i64 0, i32 0
  br label %while.cond.outer.i.i.i

while.cond.outer.i.i.i:                           ; preds = %while.cond.outer.i.i.i.backedge, %if.then.i.i
  %expected.0.ph.i.i.i = phi i64 [ %9, %if.then.i.i ], [ %expected.0.ph.i.i.i.be, %while.cond.outer.i.i.i.backedge ]
  %spinner.sroa.0.0.ph.i.i.i = phi i32 [ 40, %if.then.i.i ], [ %spinner.sroa.0.0.ph.i.i.i.be, %while.cond.outer.i.i.i.backedge ]
  %and55.i.i.i = and i64 %expected.0.ph.i.i.i, 1
  %tobool.not56.i.i.i = icmp eq i64 %and55.i.i.i, 0
  br i1 %tobool.not56.i.i.i, label %if.then.i.i.i, label %if.end4.i.i.i

if.then.i.i.i:                                    ; preds = %while.cond.outer.i.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i.i
  %expected.057.i.i.i = phi i64 [ %15, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i.i ], [ %expected.0.ph.i.i.i, %while.cond.outer.i.i.i ]
  %or.i.i.i = or i64 %expected.057.i.i.i, 1
  %13 = cmpxchg weak i64* %6, i64 %expected.057.i.i.i, i64 %or.i.i.i acquire monotonic
  %14 = extractvalue { i64, i1 } %13, 1
  br i1 %14, label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i.i

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i.i: ; preds = %if.then.i.i.i
  %15 = extractvalue { i64, i1 } %13, 0
  %and.i.i.i = and i64 %15, 1
  %tobool.not.i.i.i = icmp eq i64 %and.i.i.i, 0
  br i1 %tobool.not.i.i.i, label %if.then.i.i.i, label %if.end4.i.i.i.loopexit

if.end4.i.i.i.loopexit:                           ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i.i
  %16 = extractvalue { i64, i1 } %13, 0
  br label %if.end4.i.i.i

if.end4.i.i.i:                                    ; preds = %if.end4.i.i.i.loopexit, %while.cond.outer.i.i.i
  %expected.0.lcssa.i.i.i = phi i64 [ %expected.0.ph.i.i.i, %while.cond.outer.i.i.i ], [ %16, %if.end4.i.i.i.loopexit ]
  %cmp.i.i.i.i = icmp sgt i32 %spinner.sroa.0.0.ph.i.i.i, 0
  br i1 %cmp.i.i.i.i, label %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i.i, label %if.end8.i.i.i

_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i.i: ; preds = %if.end4.i.i.i
  %cmp4.i.not.i.i.i = icmp eq i32 %spinner.sroa.0.0.ph.i.i.i, 1
  br i1 %cmp4.i.not.i.i.i, label %if.end8.i.i.i, label %if.then6.i.i.i

if.then6.i.i.i:                                   ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i.i
  %dec.i.i.i.i = add nsw i32 %spinner.sroa.0.0.ph.i.i.i, -1
  call void @halide_thread_yield() #14
  %17 = load atomic i64, i64* %6 monotonic, align 8
  br label %while.cond.outer.i.i.i.backedge

if.end8.i.i.i:                                    ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i.i, %if.end4.i.i.i
  %spinner.sroa.0.152.i.i.i = phi i32 [ 0, %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i.i ], [ %spinner.sroa.0.0.ph.i.i.i, %if.end4.i.i.i ]
  %and9.i.i.i = and i64 %expected.0.lcssa.i.i.i, 2
  %cmp.i.i.i = icmp eq i64 %and9.i.i.i, 0
  br i1 %cmp.i.i.i, label %if.then10.i.i.i, label %if.end19.i.i.i

if.then10.i.i.i:                                  ; preds = %if.end8.i.i.i
  %or12.i.i.i = or i64 %expected.0.lcssa.i.i.i, 2
  %18 = cmpxchg weak i64* %6, i64 %expected.0.lcssa.i.i.i, i64 %or12.i.i.i monotonic monotonic
  %19 = extractvalue { i64, i1 } %18, 1
  br i1 %19, label %if.end19.i.i.i, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i.i

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i.i: ; preds = %if.then10.i.i.i
  %20 = extractvalue { i64, i1 } %18, 0
  br label %while.cond.outer.i.i.i.backedge

if.end19.i.i.i:                                   ; preds = %if.then10.i.i.i, %if.end8.i.i.i
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %10) #11
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %11, align 8, !tbaa !48
  store i64* %6, i64** %lock_state2.i.i.i.i, align 8, !tbaa !50
  %call21.i.i.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control4parkEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %12, i64 %5) #14
  %cmp22.i.i.i = icmp eq i64 %call21.i.i.i, %5
  br i1 %cmp22.i.i.i, label %cleanup30.critedge.i.i.i, label %if.end24.i.i.i

if.end24.i.i.i:                                   ; preds = %if.end19.i.i.i
  %21 = load atomic i64, i64* %6 monotonic, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %10) #11
  br label %while.cond.outer.i.i.i.backedge

while.cond.outer.i.i.i.backedge:                  ; preds = %if.end24.i.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i.i, %if.then6.i.i.i
  %expected.0.ph.i.i.i.be = phi i64 [ %20, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i.i ], [ %21, %if.end24.i.i.i ], [ %17, %if.then6.i.i.i ]
  %spinner.sroa.0.0.ph.i.i.i.be = phi i32 [ %spinner.sroa.0.152.i.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i.i ], [ 40, %if.end24.i.i.i ], [ %dec.i.i.i.i, %if.then6.i.i.i ]
  br label %while.cond.outer.i.i.i

cleanup30.critedge.i.i.i:                         ; preds = %if.end19.i.i.i
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %10) #11
  br label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit

if.else.i:                                        ; preds = %entry
  %22 = load atomic i64, i64* %6 monotonic, align 8
  %and.i = and i64 %22, 1
  %tobool.not.i = icmp eq i64 %and.i, 0
  br i1 %tobool.not.i, label %if.then2.i, label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit

if.then2.i:                                       ; preds = %if.else.i
  call void @halide_print(i8* null, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @.str.5.6, i64 0, i64 0)) #14
  call void @abort() #14
  br label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit

_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit: ; preds = %if.then.i.i.i, %if.then2.i, %if.else.i, %cleanup30.critedge.i.i.i, %if.then.i
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_loop_task(i8* %user_context, i32 (i8*, i32, i32, i8*, i8*)* %f, i32 %min, i32 %size, i8* %closure, i8* %task_parent) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)*, i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)** @_ZN6Halide7Runtime8Internal19custom_do_loop_taskE, align 8, !tbaa !14
  %call = tail call i32 %0(i8* %user_context, i32 (i8*, i32, i32, i8*, i8*)* %f, i32 %min, i32 %size, i8* %closure, i8* %task_parent) #14
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_task(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %idx, i8* %closure) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 8, !tbaa !14
  %call = tail call i32 %0(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %idx, i8* %closure) #14
  ret i32 %call
}

; Function Attrs: nounwind
define linkonce i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control4parkEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i64 %addr) local_unnamed_addr #4 align 2 {
entry:
  %queue_data = alloca %"struct.Halide::Runtime::Internal::Synchronization::queue_data", align 8
  %action = alloca %"struct.Halide::Runtime::Internal::Synchronization::validate_action", align 8
  %0 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %0) #11
  %should_park.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 0, i32 2
  store i8 0, i8* %should_park.i.i, align 8, !tbaa !98
  %mutex2.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 0, i32 0
  %call.i.i = call i32 @pthread_mutex_init(%struct.pthread_mutex_t* nonnull %mutex2.i.i, i8* null) #14
  %condvar3.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 0, i32 1
  %call4.i.i = call i32 @pthread_cond_init(%struct.pthread_mutex_t* nonnull %condvar3.i.i, i8* null) #14
  %sleep_address.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 1
  store i64 0, i64* %sleep_address.i, align 8, !tbaa !113
  %next.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* null, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next.i, align 8, !tbaa !88
  %unpark_info.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 3
  store i64 0, i64* %unpark_info.i, align 8, !tbaa !97
  %call = call nonnull align 8 dereferenceable(24) %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* @_ZN6Halide7Runtime8Internal15Synchronization11lock_bucketEy(i64 %addr) #15
  %1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1) #11
  store i8 0, i8* %1, align 8, !tbaa !114
  %invalid_unpark_info.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 2
  store i64 0, i64* %invalid_unpark_info.i, align 8, !tbaa !116
  %2 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::parking_control"* %this to i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)***
  %vtable = load i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)**, i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)*** %2, align 8, !tbaa !48
  %3 = load i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)*, i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)** %vtable, align 8
  %call2 = call zeroext i1 %3(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) #14
  br i1 %call2, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %state.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0, i32 0
  %4 = atomicrmw and i64* %state.i, i64 -2 release
  %and.i = and i64 %4, 2
  %cmp.i = icmp ne i64 %and.i, 0
  %cmp3.not.i = icmp ult i64 %4, 4
  %or.cond.i = or i1 %cmp3.not.i, %cmp.i
  br i1 %or.cond.i, label %cleanup, label %if.then.i

if.then.i:                                        ; preds = %if.then
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0
  call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #14
  br label %cleanup

if.end:                                           ; preds = %entry
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* null, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next.i, align 8, !tbaa !88
  store i64 %addr, i64* %sleep_address.i, align 8, !tbaa !113
  store i8 1, i8* %should_park.i.i, align 8, !tbaa !98
  %head = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 1
  %5 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head, align 8, !tbaa !117
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %5, null
  %tail = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 2
  %6 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8
  %next4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %6, i64 0, i32 2
  %head.sink = select i1 %cmp.not, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next4
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head.sink, align 8, !tbaa !14
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8, !tbaa !93
  %state.i23 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0, i32 0
  %7 = atomicrmw and i64* %state.i23, i64 -2 release
  %and.i24 = and i64 %7, 2
  %cmp.i25 = icmp ne i64 %and.i24, 0
  %cmp3.not.i26 = icmp ult i64 %7, 4
  %or.cond.i27 = or i1 %cmp3.not.i26, %cmp.i25
  br i1 %or.cond.i27, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit29, label %if.then.i28

if.then.i28:                                      ; preds = %if.end
  %mutex8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0
  call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex8) #14
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit29

_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit29: ; preds = %if.then.i28, %if.end
  %8 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::parking_control"* %this to void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)***
  %vtable9 = load void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)**, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)*** %8, align 8, !tbaa !48
  %vfn10 = getelementptr inbounds void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)*, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)** %vtable9, i64 1
  %9 = load void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)*, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)** %vfn10, align 8
  call void %9(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this) #14
  %call.i = call i32 @pthread_mutex_lock(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #14
  %10 = load i8, i8* %should_park.i.i, align 8, !tbaa !98, !range !21
  %tobool.not6.i = icmp eq i8 %10, 0
  br i1 %tobool.not6.i, label %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, label %while.body.i

while.body.i:                                     ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit29, %while.body.i
  %call3.i = call i32 @pthread_cond_wait(%struct.pthread_mutex_t* nonnull %condvar3.i.i, %struct.pthread_mutex_t* nonnull %mutex2.i.i) #14
  %11 = load i8, i8* %should_park.i.i, align 8, !tbaa !98, !range !21
  %tobool.not.i = icmp eq i8 %11, 0
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, label %while.body.i, !llvm.loop !106

_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit: ; preds = %while.body.i, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit29
  %call5.i = call i32 @pthread_mutex_unlock(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #14
  br label %cleanup

cleanup:                                          ; preds = %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, %if.then.i, %if.then
  %unpark_info.i.sink = phi i64* [ %unpark_info.i, %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit ], [ %invalid_unpark_info.i, %if.then ], [ %invalid_unpark_info.i, %if.then.i ]
  %12 = load i64, i64* %unpark_info.i.sink, align 8, !tbaa !22
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1) #11
  %call.i.i22 = call i32 @pthread_cond_destroy(%struct.pthread_mutex_t* nonnull %condvar3.i.i) #14
  %call2.i.i = call i32 @pthread_mutex_destroy(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #14
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %0) #11
  ret i64 %12
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr zeroext i1 @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control8validateERNS2_15validate_actionE(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) unnamed_addr #2 align 2 {
entry:
  %cond_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 1
  %0 = load i64*, i64** %cond_state, align 8, !tbaa !110
  %1 = load atomic i64, i64* %0 monotonic, align 8
  %cmp = icmp eq i64 %1, 0
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 2
  %2 = load %"class.Halide::Runtime::Internal::Synchronization::word_lock"*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex, align 8, !tbaa !112
  %3 = ptrtoint %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %2 to i64
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store atomic i64 %3, i64* %0 monotonic, align 8
  br label %cleanup

if.else:                                          ; preds = %entry
  %cmp4.not = icmp eq i64 %1, %3
  br i1 %cmp4.not, label %cleanup, label %if.then5

if.then5:                                         ; preds = %if.else
  %invalid_unpark_info = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 2
  store i64 %3, i64* %invalid_unpark_info, align 8, !tbaa !116
  br label %cleanup

cleanup:                                          ; preds = %if.then5, %if.else, %if.then
  %retval.0 = phi i1 [ false, %if.then5 ], [ true, %if.else ], [ true, %if.then ]
  ret i1 %retval.0
}

; Function Attrs: nounwind
define linkonce_odr void @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control12before_sleepEv(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this) unnamed_addr #4 align 2 {
entry:
  %control.i.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", align 8
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 2
  %0 = load %"class.Halide::Runtime::Internal::Synchronization::word_lock"*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex, align 8, !tbaa !112
  %state.i = getelementptr inbounds %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %0, i64 0, i32 0
  %1 = cmpxchg weak i64* %state.i, i64 1, i64 0 release monotonic
  %2 = extractvalue { i64, i1 } %1, 1
  br i1 %2, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %3 = cmpxchg i64* %state.i, i64 1, i64 0 release monotonic
  %4 = extractvalue { i64, i1 } %3, 1
  br i1 %4, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit, label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i
  %5 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %5) #11
  %6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %6, align 8, !tbaa !48
  %lock_state2.i.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 1
  store i64* %state.i, i64** %lock_state2.i.i.i, align 8, !tbaa !50
  %7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0
  %8 = ptrtoint %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %0 to i64
  %call3.i.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control10unpark_oneEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %7, i64 %8) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %5) #11
  br label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit

_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit: ; preds = %if.end.i.i, %if.then.i, %entry
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr i64 @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control6unparkEib(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this, i32 %unparked, i1 zeroext %more_waiters) unnamed_addr #2 align 2 {
entry:
  br i1 %more_waiters, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %cond_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 1
  %0 = load i64*, i64** %cond_state, align 8, !tbaa !110
  store atomic i64 0, i64* %0 monotonic, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i64 0
}

; Function Attrs: nounwind
define linkonce i32 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control14unpark_requeueEyyy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i64 %addr_from, i64 %addr_to, i64 %unpark_info) local_unnamed_addr #4 align 2 {
entry:
  %buckets = alloca %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", align 8
  %action = alloca %"struct.Halide::Runtime::Internal::Synchronization::validate_action", align 8
  %0 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %buckets to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %0) #11
  call void @_ZN6Halide7Runtime8Internal15Synchronization16lock_bucket_pairEyy(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* nonnull sret(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair") align 8 %buckets, i64 %addr_from, i64 %addr_to) #15
  %1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1) #11
  store i8 0, i8* %1, align 8, !tbaa !114
  %invalid_unpark_info.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 2
  store i64 0, i64* %invalid_unpark_info.i, align 8, !tbaa !116
  %2 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::parking_control"* %this to i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)***
  %vtable = load i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)**, i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)*** %2, align 8, !tbaa !48
  %3 = load i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)*, i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)** %vtable, align 8
  %call = call zeroext i1 %3(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) #14
  br i1 %call, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  call void @_ZN6Halide7Runtime8Internal15Synchronization18unlock_bucket_pairERNS2_11bucket_pairE(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* nonnull align 8 dereferenceable(16) %buckets) #15
  br label %cleanup

if.end:                                           ; preds = %entry
  %from = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %buckets, i64 0, i32 0
  %4 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %from, align 8, !tbaa !118
  %head = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %4, i64 0, i32 1
  %5 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head, align 8, !tbaa !14
  %cmp.not92 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %5, null
  br i1 %cmp.not92, label %if.end38, label %while.body

while.body:                                       ; preds = %if.end, %if.end22
  %wakeup.098 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %wakeup.2, %if.end22 ], [ null, %if.end ]
  %requeue_tail.097 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %requeue_tail.2, %if.end22 ], [ null, %if.end ]
  %requeue.096 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %requeue.3, %if.end22 ], [ null, %if.end ]
  %data.095 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %7, %if.end22 ], [ %5, %if.end ]
  %prev.094 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %prev.1, %if.end22 ], [ null, %if.end ]
  %data_location.093 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** [ %data_location.1, %if.end22 ], [ %head, %if.end ]
  %sleep_address = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.095, i64 0, i32 1
  %6 = load atomic i64, i64* %sleep_address monotonic, align 8
  %next2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.095, i64 0, i32 2
  %7 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next2, align 8, !tbaa !88
  %cmp3 = icmp eq i64 %6, %addr_from
  br i1 %cmp3, label %if.then4, label %if.end22

if.then4:                                         ; preds = %while.body
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %7, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %data_location.093, align 8, !tbaa !14
  %8 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %from, align 8, !tbaa !118
  %tail = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %8, i64 0, i32 2
  %9 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8, !tbaa !93
  %cmp6 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %9, %data.095
  br i1 %cmp6, label %if.then7, label %if.end10

if.then7:                                         ; preds = %if.then4
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %prev.094, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8, !tbaa !93
  br label %if.end10

if.end10:                                         ; preds = %if.then7, %if.then4
  %10 = load i8, i8* %1, align 8, !tbaa !114, !range !21
  %tobool = icmp ne i8 %10, 0
  %cmp11 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.098, null
  %or.cond = and i1 %cmp11, %tobool
  br i1 %or.cond, label %if.end22, label %if.else

if.else:                                          ; preds = %if.end10
  %cmp13 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue.096, null
  br i1 %cmp13, label %if.end17, label %if.else15

if.else15:                                        ; preds = %if.else
  %next16 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue_tail.097, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.095, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next16, align 8, !tbaa !88
  br label %if.end17

if.end17:                                         ; preds = %if.else15, %if.else
  %requeue.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %requeue.096, %if.else15 ], [ %data.095, %if.else ]
  store atomic i64 %addr_to, i64* %sleep_address monotonic, align 8
  br label %if.end22

if.end22:                                         ; preds = %if.end17, %if.end10, %while.body
  %data_location.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** [ %data_location.093, %if.end10 ], [ %data_location.093, %if.end17 ], [ %next2, %while.body ]
  %prev.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %prev.094, %if.end10 ], [ %prev.094, %if.end17 ], [ %data.095, %while.body ]
  %requeue.3 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %requeue.096, %if.end10 ], [ %requeue.1, %if.end17 ], [ %requeue.096, %while.body ]
  %requeue_tail.2 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %requeue_tail.097, %if.end10 ], [ %data.095, %if.end17 ], [ %requeue_tail.097, %while.body ]
  %wakeup.2 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %data.095, %if.end10 ], [ %wakeup.098, %if.end17 ], [ %wakeup.098, %while.body ]
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %7, null
  br i1 %cmp.not, label %while.end, label %while.body, !llvm.loop !120

while.end:                                        ; preds = %if.end22
  %cmp23.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue.3, null
  br i1 %cmp23.not, label %if.end38, label %if.then24

if.then24:                                        ; preds = %while.end
  %next25 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue_tail.2, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* null, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next25, align 8, !tbaa !88
  %to = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %buckets, i64 0, i32 1
  %11 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %to, align 8, !tbaa !121
  %head26 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %11, i64 0, i32 1
  %12 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head26, align 8, !tbaa !117
  %cmp27 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %12, null
  br i1 %cmp27, label %if.end35, label %if.else31

if.else31:                                        ; preds = %if.then24
  %tail33 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %11, i64 0, i32 2
  %13 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail33, align 8, !tbaa !93
  %next34 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %13, i64 0, i32 2
  br label %if.end35

if.end35:                                         ; preds = %if.else31, %if.then24
  %next34.sink = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** [ %next34, %if.else31 ], [ %head26, %if.then24 ]
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue.3, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next34.sink, align 8, !tbaa !14
  %tail37 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %11, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue_tail.2, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail37, align 8, !tbaa !93
  br label %if.end38

if.end38:                                         ; preds = %if.end35, %while.end, %if.end
  %cmp23106 = phi i1 [ true, %if.end35 ], [ false, %while.end ], [ false, %if.end ]
  %wakeup.0.lcssa105 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %wakeup.2, %if.end35 ], [ %wakeup.2, %while.end ], [ null, %if.end ]
  %cmp39 = icmp ne %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.0.lcssa105, null
  %14 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::parking_control"* %this to void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)***
  %vtable41 = load void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)**, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)*** %14, align 8, !tbaa !48
  %vfn42 = getelementptr inbounds void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)*, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)** %vtable41, i64 3
  %15 = load void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)*, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)** %vfn42, align 8
  call void %15(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action, i1 zeroext %cmp39, i1 zeroext %cmp23106) #14
  br i1 %cmp39, label %if.then44, label %if.else48

if.then44:                                        ; preds = %if.end38
  %unpark_info45 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.0.lcssa105, i64 0, i32 3
  store i64 %unpark_info, i64* %unpark_info45, align 8, !tbaa !97
  %mutex.i89 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.0.lcssa105, i64 0, i32 0, i32 0
  %call.i90 = call i32 @pthread_mutex_lock(%struct.pthread_mutex_t* nonnull %mutex.i89) #14
  call void @_ZN6Halide7Runtime8Internal15Synchronization18unlock_bucket_pairERNS2_11bucket_pairE(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* nonnull align 8 dereferenceable(16) %buckets) #15
  %should_park.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.0.lcssa105, i64 0, i32 0, i32 2
  store i8 0, i8* %should_park.i, align 8, !tbaa !98
  %condvar.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.0.lcssa105, i64 0, i32 0, i32 1
  %call.i88 = call i32 @pthread_cond_signal(%struct.pthread_mutex_t* nonnull %condvar.i) #14
  %call.i = call i32 @pthread_mutex_unlock(%struct.pthread_mutex_t* nonnull %mutex.i89) #14
  br label %if.end49

if.else48:                                        ; preds = %if.end38
  call void @_ZN6Halide7Runtime8Internal15Synchronization18unlock_bucket_pairERNS2_11bucket_pairE(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* nonnull align 8 dereferenceable(16) %buckets) #15
  br label %if.end49

if.end49:                                         ; preds = %if.else48, %if.then44
  %16 = load i8, i8* %1, align 8
  %17 = and i8 %16, 1
  %tobool52 = icmp ne i8 %17, 0
  %18 = and i1 %cmp39, %tobool52
  %conv = zext i1 %18 to i32
  br label %cleanup

cleanup:                                          ; preds = %if.end49, %if.then
  %retval.0 = phi i32 [ %conv, %if.end49 ], [ 0, %if.then ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1) #11
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %0) #11
  ret i32 %retval.0
}

; Function Attrs: nounwind
define linkonce void @_ZN6Halide7Runtime8Internal15Synchronization16lock_bucket_pairEyy(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* noalias sret(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair") align 8 %agg.result, i64 %addr_from, i64 %addr_to) local_unnamed_addr #4 {
entry:
  %mul.i = mul i64 %addr_from, -7046029254386353131
  %shr.i = lshr i64 %mul.i, 54
  %mul.i37 = mul i64 %addr_to, -7046029254386353131
  %shr.i38 = lshr i64 %mul.i37, 54
  %cmp = icmp eq i64 %shr.i, %shr.i38
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i
  %state.i42 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx, i64 0, i32 0, i32 0
  %0 = cmpxchg weak i64* %state.i42, i64 0, i64 1 acquire monotonic
  %1 = extractvalue { i64, i1 } %0, 1
  br i1 %1, label %cleanup, label %if.then.i43

if.then.i43:                                      ; preds = %if.then
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #14
  br label %cleanup

if.else:                                          ; preds = %entry
  %cmp2 = icmp ult i64 %shr.i, %shr.i38
  br i1 %cmp2, label %if.then3, label %if.else9

if.then3:                                         ; preds = %if.else
  %arrayidx5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i
  %arrayidx6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i38
  %state.i52 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx5, i64 0, i32 0, i32 0
  %2 = cmpxchg weak i64* %state.i52, i64 0, i64 1 acquire monotonic
  %3 = extractvalue { i64, i1 } %2, 1
  br i1 %3, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54, label %if.then.i53

if.then.i53:                                      ; preds = %if.then3
  %mutex7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx5, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex7) #14
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54

_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54: ; preds = %if.then.i53, %if.then3
  %state.i49 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx6, i64 0, i32 0, i32 0
  %4 = cmpxchg weak i64* %state.i49, i64 0, i64 1 acquire monotonic
  %5 = extractvalue { i64, i1 } %4, 1
  br i1 %5, label %cleanup, label %if.then.i50

if.then.i50:                                      ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54
  %mutex8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx6, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex8) #14
  br label %cleanup

if.else9:                                         ; preds = %if.else
  %arrayidx11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i38
  %arrayidx13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i
  %state.i39 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx11, i64 0, i32 0, i32 0
  %6 = cmpxchg weak i64* %state.i39, i64 0, i64 1 acquire monotonic
  %7 = extractvalue { i64, i1 } %6, 1
  br i1 %7, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41, label %if.then.i40

if.then.i40:                                      ; preds = %if.else9
  %mutex14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx11, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex14) #14
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41

_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41: ; preds = %if.then.i40, %if.else9
  %state.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx13, i64 0, i32 0, i32 0
  %8 = cmpxchg weak i64* %state.i, i64 0, i64 1 acquire monotonic
  %9 = extractvalue { i64, i1 } %8, 1
  br i1 %9, label %cleanup, label %if.then.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41
  %mutex15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx13, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex15) #14
  br label %cleanup

cleanup:                                          ; preds = %if.then.i, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41, %if.then.i50, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54, %if.then.i43, %if.then
  %arrayidx13.sink = phi %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* [ %arrayidx, %if.then ], [ %arrayidx, %if.then.i43 ], [ %arrayidx5, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54 ], [ %arrayidx5, %if.then.i50 ], [ %arrayidx13, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41 ], [ %arrayidx13, %if.then.i ]
  %arrayidx11.sink = phi %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* [ %arrayidx, %if.then ], [ %arrayidx, %if.then.i43 ], [ %arrayidx6, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54 ], [ %arrayidx6, %if.then.i50 ], [ %arrayidx11, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41 ], [ %arrayidx11, %if.then.i ]
  %from2.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %agg.result, i64 0, i32 0
  store %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx13.sink, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %from2.i, align 8, !tbaa !14
  %to3.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %agg.result, i64 0, i32 1
  store %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx11.sink, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %to3.i, align 8, !tbaa !14
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal15Synchronization18unlock_bucket_pairERNS2_11bucket_pairE(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* nonnull align 8 dereferenceable(16) %buckets) local_unnamed_addr #0 {
entry:
  %from = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %buckets, i64 0, i32 0
  %0 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %from, align 8, !tbaa !118
  %to = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %buckets, i64 0, i32 1
  %1 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %to, align 8, !tbaa !121
  %cmp = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, %1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %state.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, i64 0, i32 0, i32 0
  %2 = atomicrmw and i64* %state.i, i64 -2 release
  %and.i = and i64 %2, 2
  %cmp.i = icmp ne i64 %and.i, 0
  %cmp3.not.i = icmp ult i64 %2, 4
  %or.cond.i = or i1 %cmp3.not.i, %cmp.i
  br i1 %or.cond.i, label %if.end15, label %if.then.i

if.then.i:                                        ; preds = %if.then
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #14
  br label %if.end15

if.else:                                          ; preds = %entry
  %cmp4 = icmp ugt %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, %1
  br i1 %cmp4, label %if.then5, label %if.else10

if.then5:                                         ; preds = %if.else
  %state.i25 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, i64 0, i32 0, i32 0
  %3 = atomicrmw and i64* %state.i25, i64 -2 release
  %and.i26 = and i64 %3, 2
  %cmp.i27 = icmp ne i64 %and.i26, 0
  %cmp3.not.i28 = icmp ult i64 %3, 4
  %or.cond.i29 = or i1 %cmp3.not.i28, %cmp.i27
  br i1 %or.cond.i29, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit31, label %if.then.i30

if.then.i30:                                      ; preds = %if.then5
  %mutex7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex7) #14
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit31

_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit31: ; preds = %if.then.i30, %if.then5
  %4 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %to, align 8, !tbaa !121
  %state.i32 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %4, i64 0, i32 0, i32 0
  %5 = atomicrmw and i64* %state.i32, i64 -2 release
  %and.i33 = and i64 %5, 2
  %cmp.i34 = icmp ne i64 %and.i33, 0
  %cmp3.not.i35 = icmp ult i64 %5, 4
  %or.cond.i36 = or i1 %cmp3.not.i35, %cmp.i34
  br i1 %or.cond.i36, label %if.end15, label %if.then.i37

if.then.i37:                                      ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit31
  %mutex9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %4, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex9) #14
  br label %if.end15

if.else10:                                        ; preds = %if.else
  %state.i39 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %1, i64 0, i32 0, i32 0
  %6 = atomicrmw and i64* %state.i39, i64 -2 release
  %and.i40 = and i64 %6, 2
  %cmp.i41 = icmp ne i64 %and.i40, 0
  %cmp3.not.i42 = icmp ult i64 %6, 4
  %or.cond.i43 = or i1 %cmp3.not.i42, %cmp.i41
  br i1 %or.cond.i43, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit45, label %if.then.i44

if.then.i44:                                      ; preds = %if.else10
  %mutex12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %1, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex12) #14
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit45

_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit45: ; preds = %if.then.i44, %if.else10
  %7 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %from, align 8, !tbaa !118
  %state.i46 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %7, i64 0, i32 0, i32 0
  %8 = atomicrmw and i64* %state.i46, i64 -2 release
  %and.i47 = and i64 %8, 2
  %cmp.i48 = icmp ne i64 %and.i47, 0
  %cmp3.not.i49 = icmp ult i64 %8, 4
  %or.cond.i50 = or i1 %cmp3.not.i49, %cmp.i48
  br i1 %or.cond.i50, label %if.end15, label %if.then.i51

if.then.i51:                                      ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit45
  %mutex14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %7, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex14) #14
  br label %if.end15

if.end15:                                         ; preds = %if.then.i51, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit45, %if.then.i37, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit31, %if.then.i, %if.then
  ret void
}

; Function Attrs: nounwind
define linkonce_odr zeroext i1 @_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control8validateERNS2_15validate_actionE(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) unnamed_addr #4 align 2 {
entry:
  %cond_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 1
  %0 = load i64*, i64** %cond_state, align 8, !tbaa !107
  %1 = load atomic i64, i64* %0 monotonic, align 8
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 2
  %2 = load %"class.Halide::Runtime::Internal::Synchronization::word_lock"*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex, align 8, !tbaa !109
  %3 = ptrtoint %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %2 to i64
  %cmp.not = icmp eq i64 %1, %3
  br i1 %cmp.not, label %if.end, label %cleanup

if.end:                                           ; preds = %entry
  store atomic i64 0, i64* %0 monotonic, align 8
  %4 = load %"class.Halide::Runtime::Internal::Synchronization::word_lock"*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex, align 8, !tbaa !109
  %state.i = getelementptr inbounds %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %4, i64 0, i32 0
  %5 = load atomic i64, i64* %state.i monotonic, align 8
  %and11.i = and i64 %5, 1
  %tobool.not12.i = icmp eq i64 %and11.i, 0
  br i1 %tobool.not12.i, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex21make_parked_if_lockedEv.exit, label %if.end.i

if.end.i:                                         ; preds = %if.end, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i
  %val.013.i = phi i64 [ %8, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i ], [ %5, %if.end ]
  %or.i = or i64 %val.013.i, 2
  %6 = cmpxchg weak i64* %state.i, i64 %val.013.i, i64 %or.i monotonic monotonic
  %7 = extractvalue { i64, i1 } %6, 1
  br i1 %7, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex21make_parked_if_lockedEv.exit, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i: ; preds = %if.end.i
  %8 = extractvalue { i64, i1 } %6, 0
  %and.i = and i64 %8, 1
  %tobool.not.i = icmp eq i64 %and.i, 0
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex21make_parked_if_lockedEv.exit, label %if.end.i

_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex21make_parked_if_lockedEv.exit: ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i, %if.end.i, %if.end
  %tobool.not.lcssa.i = phi i8 [ 1, %if.end ], [ 1, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i ], [ 0, %if.end.i ]
  %unpark_one = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 0
  store i8 %tobool.not.lcssa.i, i8* %unpark_one, align 8, !tbaa !114
  br label %cleanup

cleanup:                                          ; preds = %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex21make_parked_if_lockedEv.exit, %entry
  ret i1 %cmp.not
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control6unparkEib(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i32 %unparked, i1 zeroext %more_waiters) unnamed_addr #2 align 2 {
entry:
  ret i64 0
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr void @_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control16requeue_callbackERKNS2_15validate_actionEbb(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action, i1 zeroext %one_to_wake, i1 zeroext %some_requeued) unnamed_addr #2 align 2 {
entry:
  %unpark_one = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 0
  %0 = load i8, i8* %unpark_one, align 8, !tbaa !114, !range !21
  %tobool.not = icmp ne i8 %0, 0
  %1 = and i1 %tobool.not, %some_requeued
  br i1 %1, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 2
  %2 = load %"class.Halide::Runtime::Internal::Synchronization::word_lock"*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex, align 8, !tbaa !109
  %state.i = getelementptr inbounds %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %2, i64 0, i32 0
  %3 = atomicrmw or i64* %state.i, i64 2 monotonic
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce i32 @_ZN6Halide7Runtime8Internal27default_desired_num_threadsEv() local_unnamed_addr #0 {
entry:
  %call = tail call i8* @getenv(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i64 0, i64 0)) #14
  %tobool.not = icmp eq i8* %call, null
  br i1 %tobool.not, label %if.end, label %cond.true

if.end:                                           ; preds = %entry
  %call1 = tail call i8* @getenv(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0)) #14
  %tobool2.not = icmp eq i8* %call1, null
  br i1 %tobool2.not, label %cond.false, label %cond.true

cond.true:                                        ; preds = %if.end, %entry
  %threads_str.010 = phi i8* [ %call1, %if.end ], [ %call, %entry ]
  %call3 = tail call i32 @atoi(i8* nonnull %threads_str.010) #14
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %call4 = tail call i32 @halide_host_cpu_count() #14
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call3, %cond.true ], [ %call4, %cond.false ]
  ret i32 %cond
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal13worker_threadEPv(i8* %arg) #0 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #15
  %0 = bitcast i8* %arg to %"struct.Halide::Runtime::Internal::work"*
  tail call void @_ZN6Halide7Runtime8Internal28worker_thread_already_lockedEPNS1_4workE(%"struct.Halide::Runtime::Internal::work"* %0) #15
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #15
  ret void
}

; Function Attrs: nounwind mustprogress
define weak %struct.halide_thread* @halide_spawn_thread(void (i8*)* %f, i8* %closure) local_unnamed_addr #0 {
entry:
  %call = tail call i8* @malloc(i64 24) #14
  %f1 = bitcast i8* %call to void (i8*)**
  store void (i8*)* %f, void (i8*)** %f1, align 8, !tbaa !122
  %closure2 = getelementptr inbounds i8, i8* %call, i64 8
  %0 = bitcast i8* %closure2 to i8**
  store i8* %closure, i8** %0, align 8, !tbaa !125
  %handle = getelementptr inbounds i8, i8* %call, i64 16
  %1 = bitcast i8* %handle to i64*
  store i64 0, i64* %1, align 8, !tbaa !126
  %call4 = tail call i32 @pthread_create(i64* nonnull %1, i8* null, i8* (i8*)* nonnull @_ZN6Halide7Runtime8Internal19spawn_thread_helperEPv, i8* %call) #14
  %2 = bitcast i8* %call to %struct.halide_thread*
  ret %struct.halide_thread* %2
}

; Function Attrs: nounwind mustprogress
define linkonce i8* @_ZN6Halide7Runtime8Internal19spawn_thread_helperEPv(i8* %arg) #0 {
entry:
  %f = bitcast i8* %arg to void (i8*)**
  %0 = load void (i8*)*, void (i8*)** %f, align 8, !tbaa !122
  %closure = getelementptr inbounds i8, i8* %arg, i64 8
  %1 = bitcast i8* %closure to i8**
  %2 = load i8*, i8** %1, align 8, !tbaa !125
  tail call void %0(i8* %2) #14
  ret i8* null
}

declare i32 @pthread_create(i64*, i8*, i8* (i8*)*, i8*) local_unnamed_addr #1

declare i8* @getenv(i8*) local_unnamed_addr #1

declare i32 @atoi(i8*) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_parallel_tasks(i8* %user_context, i32 %num_tasks, %struct.halide_parallel_task_t* %tasks, i8* %task_parent) #0 {
entry:
  %conv = sext i32 %num_tasks to i64
  %0 = alloca %"struct.Halide::Runtime::Internal::work", i64 %conv, align 8
  %cmp76 = icmp sgt i32 %num_tasks, 0
  br i1 %cmp76, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.inc, %entry
  %num_tasks.addr.0.lcssa = phi i32 [ %num_tasks, %entry ], [ %num_tasks.addr.1, %for.inc ]
  %cmp17 = icmp eq i32 %num_tasks.addr.0.lcssa, 0
  br i1 %cmp17, label %cleanup, label %if.end19

for.body:                                         ; preds = %entry, %for.inc
  %indvars.iv82 = phi i64 [ %indvars.iv.next83, %for.inc ], [ 0, %entry ]
  %num_tasks.addr.078 = phi i32 [ %num_tasks.addr.1, %for.inc ], [ %num_tasks, %entry ]
  %tasks.addr.077 = phi %struct.halide_parallel_task_t* [ %tasks.addr.1, %for.inc ], [ %tasks, %entry ]
  %extent = getelementptr inbounds %struct.halide_parallel_task_t, %struct.halide_parallel_task_t* %tasks.addr.077, i64 0, i32 6
  %1 = load i32, i32* %extent, align 8, !tbaa !127
  %cmp1 = icmp slt i32 %1, 1
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %dec = add nsw i32 %num_tasks.addr.078, -1
  br label %for.inc

if.end:                                           ; preds = %for.body
  %incdec.ptr = getelementptr inbounds %struct.halide_parallel_task_t, %struct.halide_parallel_task_t* %tasks.addr.077, i64 1
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82
  %2 = bitcast %"struct.Halide::Runtime::Internal::work"* %arrayidx to i8*
  %3 = bitcast %struct.halide_parallel_task_t* %tasks.addr.077 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(56) %2, i8* nonnull align 8 dereferenceable(56) %3, i64 56, i1 false), !tbaa.struct !128
  %task_fn = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 1
  store i32 (i8*, i32, i8*)* null, i32 (i8*, i32, i8*)** %task_fn, align 8, !tbaa !39
  %user_context6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 7
  store i8* %user_context, i8** %user_context6, align 8, !tbaa !40
  %active_workers = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 8
  %4 = bitcast i32* %active_workers to <2 x i32>*
  store <2 x i32> zeroinitializer, <2 x i32>* %4, align 8, !tbaa !41
  %next_semaphore = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 10
  store i32 0, i32* %next_semaphore, align 8, !tbaa !42
  %owner_is_sleeping = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 11
  store i8 0, i8* %owner_is_sleeping, align 4, !tbaa !43
  %parent_job = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 5
  %5 = bitcast %"struct.Halide::Runtime::Internal::work"** %parent_job to i8**
  store i8* %task_parent, i8** %5, align 8, !tbaa !46
  br label %for.inc

for.inc:                                          ; preds = %if.end, %if.then
  %tasks.addr.1 = phi %struct.halide_parallel_task_t* [ %tasks.addr.077, %if.then ], [ %incdec.ptr, %if.end ]
  %num_tasks.addr.1 = phi i32 [ %dec, %if.then ], [ %num_tasks.addr.078, %if.end ]
  %indvars.iv.next83 = add nuw nsw i64 %indvars.iv82, 1
  %6 = sext i32 %num_tasks.addr.1 to i64
  %cmp = icmp slt i64 %indvars.iv.next83, %6
  br i1 %cmp, label %for.body, label %for.cond.cleanup, !llvm.loop !129

if.end19:                                         ; preds = %for.cond.cleanup
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #15
  %7 = bitcast i8* %task_parent to %"struct.Halide::Runtime::Internal::work"*
  call void @_ZN6Halide7Runtime8Internal27enqueue_work_already_lockedEiPNS1_4workES3_(i32 %num_tasks.addr.0.lcssa, %"struct.Halide::Runtime::Internal::work"* nonnull %0, %"struct.Halide::Runtime::Internal::work"* %7) #15
  %cmp2373 = icmp sgt i32 %num_tasks.addr.0.lcssa, 0
  br i1 %cmp2373, label %for.body25.preheader, label %for.cond.cleanup24

for.body25.preheader:                             ; preds = %if.end19
  %wide.trip.count = zext i32 %num_tasks.addr.0.lcssa to i64
  br label %for.body25

for.cond.cleanup24:                               ; preds = %for.body25, %if.end19
  %exit_status20.0.lcssa = phi i32 [ 0, %if.end19 ], [ %spec.select, %for.body25 ]
  call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #15
  br label %cleanup

for.body25:                                       ; preds = %for.body25, %for.body25.preheader
  %indvars.iv = phi i64 [ 0, %for.body25.preheader ], [ %indvars.iv.next, %for.body25 ]
  %exit_status20.074 = phi i32 [ 0, %for.body25.preheader ], [ %spec.select, %for.body25 ]
  %add.ptr = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv
  call void @_ZN6Halide7Runtime8Internal28worker_thread_already_lockedEPNS1_4workE(%"struct.Halide::Runtime::Internal::work"* nonnull %add.ptr) #15
  %exit_status28 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv, i32 9
  %8 = load i32, i32* %exit_status28, align 4, !tbaa !47
  %cmp29.not = icmp eq i32 %8, 0
  %spec.select = select i1 %cmp29.not, i32 %exit_status20.074, i32 %8
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.cleanup24, label %for.body25, !llvm.loop !130

cleanup:                                          ; preds = %for.cond.cleanup24, %for.cond.cleanup
  %retval.0 = phi i32 [ %exit_status20.0.lcssa, %for.cond.cleanup24 ], [ 0, %for.cond.cleanup ]
  ret i32 %retval.0
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_default_semaphore_init(%struct.halide_semaphore_t* %s, i32 %n) #2 {
entry:
  %value = bitcast %struct.halide_semaphore_t* %s to i32*
  store atomic i32 %n, i32* %value release, align 4
  ret i32 %n
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_semaphore_release(%struct.halide_semaphore_t* %s, i32 %n) #0 {
entry:
  %value = bitcast %struct.halide_semaphore_t* %s to i32*
  %0 = atomicrmw add i32* %value, i32 %n acq_rel
  %cmp = icmp eq i32 %0, 0
  %cmp1 = icmp ne i32 %n, 0
  %or.cond = and i1 %cmp1, %cmp
  br i1 %or.cond, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #15
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 8)) #15
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10)) #15
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #15
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %add = add nsw i32 %0, %n
  ret i32 %add
}

; Function Attrs: nounwind mustprogress
define weak void @halide_thread_pool_cleanup() #0 {
entry:
  tail call void @halide_shutdown_thread_pool() #15
  ret void
}

; Function Attrs: nounwind mustprogress
define weak void @halide_shutdown_thread_pool() local_unnamed_addr #0 {
entry:
  %0 = load i8, i8* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 15), align 1, !tbaa !52, !range !21
  %tobool.not = icmp eq i8 %0, 0
  br i1 %tobool.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #15
  store i8 1, i8* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 14), align 8, !tbaa !73
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10)) #15
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 8)) #15
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 9)) #15
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #15
  %1 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !60
  %cmp4 = icmp sgt i32 %1, 0
  br i1 %cmp4, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.body, %if.then
  %call.i = tail call i8* @memset(i8* nonnull bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), i32 0, i64 2116) #14
  br label %if.end

for.body:                                         ; preds = %if.then, %for.body
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body ], [ 0, %if.then ]
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 13, i64 %indvars.iv
  %2 = load %struct.halide_thread*, %struct.halide_thread** %arrayidx, align 8, !tbaa !14
  tail call void @halide_join_thread(%struct.halide_thread* %2) #15
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %3 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !60
  %4 = sext i32 %3 to i64
  %cmp = icmp slt i64 %indvars.iv.next, %4
  br i1 %cmp, label %for.body, label %for.cond.cleanup, !llvm.loop !131

if.end:                                           ; preds = %for.cond.cleanup, %entry
  ret void
}

declare i8* @memset(i8*, i32, i64) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_join_thread(%struct.halide_thread* %thread_arg) local_unnamed_addr #0 {
entry:
  %ret = alloca i8*, align 8
  %0 = bitcast %struct.halide_thread* %thread_arg to %"struct.Halide::Runtime::Internal::spawned_thread"*
  %1 = bitcast i8** %ret to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #11
  store i8* null, i8** %ret, align 8, !tbaa !14
  %handle = getelementptr inbounds %"struct.Halide::Runtime::Internal::spawned_thread", %"struct.Halide::Runtime::Internal::spawned_thread"* %0, i64 0, i32 2
  %2 = load i64, i64* %handle, align 8, !tbaa !126
  %call = call i32 @pthread_join(i64 %2, i8** nonnull %ret) #14
  %3 = bitcast %struct.halide_thread* %thread_arg to i8*
  call void @free(i8* %3) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #11
  ret void
}

declare i32 @pthread_join(i64, i8**) local_unnamed_addr #1

; Function Attrs: nounwind
define weak void @halide_cond_signal(%struct.halide_mutex* %cond) local_unnamed_addr #4 {
entry:
  %control.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", align 8
  %state.i = getelementptr %struct.halide_mutex, %struct.halide_mutex* %cond, i64 0, i32 0, i64 0
  %0 = load atomic i64, i64* %state.i monotonic, align 8
  %cmp.i = icmp eq i64 %0, 0
  br i1 %cmp.i, label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond6signalEv.exit, label %if.end.i

if.end.i:                                         ; preds = %entry
  %1 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1) #11
  %2 = inttoptr i64 %0 to %"class.Halide::Runtime::Internal::Synchronization::word_lock"*
  %3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization22signal_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8, !tbaa !48
  %cond_state2.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 1
  store i64* %state.i, i64** %cond_state2.i.i, align 8, !tbaa !132
  %mutex3.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 2
  store %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %2, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex3.i.i, align 8, !tbaa !134
  %4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0
  %5 = ptrtoint %struct.halide_mutex* %cond to i64
  %call.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control10unpark_oneEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %4, i64 %5) #14
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1) #11
  br label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond6signalEv.exit

_ZN6Halide7Runtime8Internal15Synchronization9fast_cond6signalEv.exit: ; preds = %if.end.i, %entry
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr zeroext i1 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control8validateERNS2_15validate_actionE(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) unnamed_addr #2 align 2 {
entry:
  ret i1 true
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr i64 @_ZN6Halide7Runtime8Internal15Synchronization22signal_parking_control6unparkEib(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this, i32 %unparked, i1 zeroext %more_waiters) unnamed_addr #2 align 2 {
entry:
  br i1 %more_waiters, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %cond_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 1
  %0 = load i64*, i64** %cond_state, align 8, !tbaa !132
  store atomic i64 0, i64* %0 monotonic, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i64 0
}

; Function Attrs: nounwind mustprogress
define weak %struct.halide_mutex_array* @halide_mutex_array_create(i32 %sz) local_unnamed_addr #0 {
entry:
  %call = tail call i8* @halide_malloc(i8* null, i64 8) #14
  %0 = bitcast i8* %call to %struct.halide_mutex_array*
  %cmp = icmp eq i8* %call, null
  br i1 %cmp, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %conv = sext i32 %sz to i64
  %mul = shl nsw i64 %conv, 3
  %call1 = tail call i8* @halide_malloc(i8* null, i64 %mul) #14
  %1 = bitcast i8* %call to i8**
  store i8* %call1, i8** %1, align 8, !tbaa !135
  %cmp4 = icmp eq i8* %call1, null
  br i1 %cmp4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.end
  tail call void @halide_free(i8* null, i8* nonnull %call) #14
  br label %cleanup

if.end6:                                          ; preds = %if.end
  %call10 = tail call i8* @memset(i8* nonnull %call1, i32 0, i64 %mul) #14
  br label %cleanup

cleanup:                                          ; preds = %if.end6, %if.then5, %entry
  %retval.0 = phi %struct.halide_mutex_array* [ null, %if.then5 ], [ %0, %if.end6 ], [ null, %entry ]
  ret %struct.halide_mutex_array* %retval.0
}

; Function Attrs: nounwind mustprogress
define weak void @halide_mutex_array_destroy(i8* %user_context, i8* %array) local_unnamed_addr #0 {
entry:
  %0 = bitcast i8* %array to i8**
  %1 = load i8*, i8** %0, align 8, !tbaa !135
  tail call void @halide_free(i8* %user_context, i8* %1) #14
  tail call void @halide_free(i8* %user_context, i8* %array) #14
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_mutex_array_lock(%struct.halide_mutex_array* %array, i32 %entry1) local_unnamed_addr #0 {
entry:
  %array2 = getelementptr inbounds %struct.halide_mutex_array, %struct.halide_mutex_array* %array, i64 0, i32 0
  %0 = load %struct.halide_mutex*, %struct.halide_mutex** %array2, align 8, !tbaa !135
  %idxprom = sext i32 %entry1 to i64
  %arrayidx = getelementptr inbounds %struct.halide_mutex, %struct.halide_mutex* %0, i64 %idxprom
  tail call void @halide_mutex_lock(%struct.halide_mutex* %arrayidx) #15
  ret i32 0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_mutex_array_unlock(%struct.halide_mutex_array* %array, i32 %entry1) local_unnamed_addr #0 {
entry:
  %array2 = getelementptr inbounds %struct.halide_mutex_array, %struct.halide_mutex_array* %array, i64 0, i32 0
  %0 = load %struct.halide_mutex*, %struct.halide_mutex** %array2, align 8, !tbaa !135
  %idxprom = sext i32 %entry1 to i64
  %arrayidx = getelementptr inbounds %struct.halide_mutex, %struct.halide_mutex* %0, i64 %idxprom
  tail call void @halide_mutex_unlock(%struct.halide_mutex* %arrayidx) #15
  ret i32 0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_set_num_threads(i32 %n) local_unnamed_addr #0 {
entry:
  %cmp = icmp slt i32 %n, 0
  br i1 %cmp, label %if.end3.thread, label %if.end

if.end3.thread:                                   ; preds = %entry
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.4, i64 0, i64 0)) #14
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #15
  %0 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !58
  br label %if.else.i

if.end:                                           ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #15
  %cmp1 = icmp eq i32 %n, 0
  br i1 %cmp1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  %call = tail call i32 @_ZN6Halide7Runtime8Internal27default_desired_num_threadsEv() #15
  br label %if.end3

if.end3:                                          ; preds = %if.then2, %if.end
  %n.addr.0 = phi i32 [ %call, %if.then2 ], [ %n, %if.end ]
  %1 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !58
  %cmp.i = icmp sgt i32 %n.addr.0, 256
  br i1 %cmp.i, label %_ZN6Halide7Runtime8Internal17clamp_num_threadsEi.exit, label %if.else.i

if.else.i:                                        ; preds = %if.end3, %if.end3.thread
  %2 = phi i32 [ %0, %if.end3.thread ], [ %1, %if.end3 ]
  %n.addr.012 = phi i32 [ %n, %if.end3.thread ], [ %n.addr.0, %if.end3 ]
  %3 = icmp sgt i32 %n.addr.012, 1
  %spec.select.i = select i1 %3, i32 %n.addr.012, i32 1
  br label %_ZN6Halide7Runtime8Internal17clamp_num_threadsEi.exit

_ZN6Halide7Runtime8Internal17clamp_num_threadsEi.exit: ; preds = %if.else.i, %if.end3
  %4 = phi i32 [ %2, %if.else.i ], [ %1, %if.end3 ]
  %call48 = phi i32 [ %spec.select.i, %if.else.i ], [ 256, %if.end3 ]
  store i32 %call48, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !58
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #15
  ret i32 %4
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* @halide_set_custom_do_task(i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 8, !tbaa !14
  store i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %f, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 8, !tbaa !14
  ret i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* @halide_set_custom_do_loop_task(i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)*, i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)** @_ZN6Halide7Runtime8Internal19custom_do_loop_taskE, align 8, !tbaa !14
  store i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* %f, i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)** @_ZN6Halide7Runtime8Internal19custom_do_loop_taskE, align 8, !tbaa !14
  ret i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* @halide_set_custom_do_par_for(i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 8, !tbaa !14
  store i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %f, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 8, !tbaa !14
  ret i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_set_custom_parallel_runtime(i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %do_par_for, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %do_task, i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* %do_loop_task, i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)* %do_parallel_tasks, i32 (%struct.halide_semaphore_t*, i32)* %semaphore_init, i1 (%struct.halide_semaphore_t*, i32)* %semaphore_try_acquire, i32 (%struct.halide_semaphore_t*, i32)* %semaphore_release) local_unnamed_addr #2 {
entry:
  store i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %do_par_for, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 8, !tbaa !14
  store i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %do_task, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 8, !tbaa !14
  store i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* %do_loop_task, i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)** @_ZN6Halide7Runtime8Internal19custom_do_loop_taskE, align 8, !tbaa !14
  store i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)* %do_parallel_tasks, i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)** @_ZN6Halide7Runtime8Internal24custom_do_parallel_tasksE, align 8, !tbaa !14
  store i32 (%struct.halide_semaphore_t*, i32)* %semaphore_init, i32 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal21custom_semaphore_initE, align 8, !tbaa !14
  store i1 (%struct.halide_semaphore_t*, i32)* %semaphore_try_acquire, i1 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal28custom_semaphore_try_acquireE, align 8, !tbaa !14
  store i32 (%struct.halide_semaphore_t*, i32)* %semaphore_release, i32 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal24custom_semaphore_releaseE, align 8, !tbaa !14
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_par_for(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %min, i32 %size, i8* %closure) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 8, !tbaa !14
  %call = tail call i32 %0(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %min, i32 %size, i8* %closure) #14
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_parallel_tasks(i8* %user_context, i32 %num_tasks, %struct.halide_parallel_task_t* %tasks, i8* %task_parent) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)*, i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)** @_ZN6Halide7Runtime8Internal24custom_do_parallel_tasksE, align 8, !tbaa !14
  %call = tail call i32 %0(i8* %user_context, i32 %num_tasks, %struct.halide_parallel_task_t* %tasks, i8* %task_parent) #14
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_semaphore_init(%struct.halide_semaphore_t* %sema, i32 %count) local_unnamed_addr #0 {
entry:
  %0 = load i32 (%struct.halide_semaphore_t*, i32)*, i32 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal21custom_semaphore_initE, align 8, !tbaa !14
  %call = tail call i32 %0(%struct.halide_semaphore_t* %sema, i32 %count) #14
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_semaphore_release(%struct.halide_semaphore_t* %sema, i32 %count) local_unnamed_addr #0 {
entry:
  %0 = load i32 (%struct.halide_semaphore_t*, i32)*, i32 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal24custom_semaphore_releaseE, align 8, !tbaa !14
  %call = tail call i32 %0(%struct.halide_semaphore_t* %sema, i32 %count) #14
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak zeroext i1 @halide_semaphore_try_acquire(%struct.halide_semaphore_t* %sema, i32 %count) local_unnamed_addr #0 {
entry:
  %0 = load i1 (%struct.halide_semaphore_t*, i32)*, i1 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal28custom_semaphore_try_acquireE, align 8, !tbaa !14
  %call = tail call zeroext i1 %0(%struct.halide_semaphore_t* %sema, i32 %count) #14
  ret i1 %call
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_default_get_symbol(i8* %name) #0 {
entry:
  %call = tail call i8* @dlsym(i8* nonnull inttoptr (i64 -2 to i8*), i8* %name) #14
  ret i8* %call
}

declare i8* @dlsym(i8*, i8*) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i8* @halide_default_load_library(i8* %name) #0 {
entry:
  %call = tail call i8* @dlopen(i8* %name, i32 5) #14
  ret i8* %call
}

declare i8* @dlopen(i8*, i32) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i8* @halide_default_get_library_symbol(i8* %lib, i8* %name) #0 {
entry:
  %cmp = icmp eq i8* %lib, null
  %spec.select = select i1 %cmp, i8* inttoptr (i64 -2 to i8*), i8* %lib
  %call = tail call i8* @dlsym(i8* %spec.select, i8* %name) #14
  ret i8* %call
}

; Function Attrs: nounwind willreturn mustprogress
define weak i8* (i8*)* @halide_set_custom_get_symbol(i8* (i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i8* (i8*)*, i8* (i8*)** @_ZN6Halide7Runtime8Internal17custom_get_symbolE, align 8, !tbaa !14
  store i8* (i8*)* %f, i8* (i8*)** @_ZN6Halide7Runtime8Internal17custom_get_symbolE, align 8, !tbaa !14
  ret i8* (i8*)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i8* (i8*)* @halide_set_custom_load_library(i8* (i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i8* (i8*)*, i8* (i8*)** @_ZN6Halide7Runtime8Internal19custom_load_libraryE, align 8, !tbaa !14
  store i8* (i8*)* %f, i8* (i8*)** @_ZN6Halide7Runtime8Internal19custom_load_libraryE, align 8, !tbaa !14
  ret i8* (i8*)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i8* (i8*, i8*)* @halide_set_custom_get_library_symbol(i8* (i8*, i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i8* (i8*, i8*)*, i8* (i8*, i8*)** @_ZN6Halide7Runtime8Internal25custom_get_library_symbolE, align 8, !tbaa !14
  store i8* (i8*, i8*)* %f, i8* (i8*, i8*)** @_ZN6Halide7Runtime8Internal25custom_get_library_symbolE, align 8, !tbaa !14
  ret i8* (i8*, i8*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_get_symbol(i8* %name) local_unnamed_addr #0 {
entry:
  %0 = load i8* (i8*)*, i8* (i8*)** @_ZN6Halide7Runtime8Internal17custom_get_symbolE, align 8, !tbaa !14
  %call = tail call i8* %0(i8* %name) #14
  ret i8* %call
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_load_library(i8* %name) local_unnamed_addr #0 {
entry:
  %0 = load i8* (i8*)*, i8* (i8*)** @_ZN6Halide7Runtime8Internal19custom_load_libraryE, align 8, !tbaa !14
  %call = tail call i8* %0(i8* %name) #14
  ret i8* %call
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_get_library_symbol(i8* %lib, i8* %name) local_unnamed_addr #0 {
entry:
  %0 = load i8* (i8*, i8*)*, i8* (i8*, i8*)** @_ZN6Halide7Runtime8Internal25custom_get_library_symbolE, align 8, !tbaa !14
  %call = tail call i8* %0(i8* %lib, i8* %name) #14
  ret i8* %call
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_set_gpu_device(i32 %d) local_unnamed_addr #2 {
entry:
  store i32 %d, i32* @_ZN6Halide7Runtime8Internal17halide_gpu_deviceE, align 4, !tbaa !41
  store i8 1, i8* @_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE, align 1, !tbaa !19
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_get_gpu_device(i8* %user_context) local_unnamed_addr #4 {
entry:
  br label %while.cond.i

while.cond.i:                                     ; preds = %while.cond.i, %entry
  %0 = atomicrmw volatile xchg i8* @_ZN6Halide7Runtime8Internal22halide_gpu_device_lockE, i8 1 acquire
  %tobool.not.i = icmp eq i8 %0, 0
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit, label %while.cond.i, !llvm.loop !137

_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit: ; preds = %while.cond.i
  %1 = load i8, i8* @_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE, align 1, !tbaa !19, !range !21
  %tobool.not = icmp eq i8 %1, 0
  br i1 %tobool.not, label %if.then, label %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge

_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge: ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %.pre = load i32, i32* @_ZN6Halide7Runtime8Internal17halide_gpu_deviceE, align 4, !tbaa !41
  br label %if.end4

if.then:                                          ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %call = tail call i8* @getenv(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.8, i64 0, i64 0)) #14
  %tobool1.not = icmp eq i8* %call, null
  br i1 %tobool1.not, label %if.end, label %if.then2

if.then2:                                         ; preds = %if.then
  %call3 = tail call i32 @atoi(i8* nonnull %call) #14
  br label %if.end

if.end:                                           ; preds = %if.then2, %if.then
  %storemerge = phi i32 [ %call3, %if.then2 ], [ -1, %if.then ]
  store i32 %storemerge, i32* @_ZN6Halide7Runtime8Internal17halide_gpu_deviceE, align 4, !tbaa !41
  store i8 1, i8* @_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE, align 1, !tbaa !19
  br label %if.end4

if.end4:                                          ; preds = %if.end, %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge
  %2 = phi i32 [ %.pre, %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge ], [ %storemerge, %if.end ]
  store atomic volatile i8 0, i8* @_ZN6Halide7Runtime8Internal22halide_gpu_device_lockE release, align 1
  ret i32 %2
}

; Function Attrs: nounwind
define weak i32 @halide_default_trace(i8* %user_context, %struct.halide_trace_event_t* %e) #4 {
entry:
  %0 = atomicrmw add i32* @_ZZ20halide_default_traceE3ids, i32 1 seq_cst
  %call = tail call i32 @halide_get_trace_file(i8* %user_context) #15
  %cmp = icmp sgt i32 %call, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %type = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4
  %lanes = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4, i32 2
  %1 = load i16, i16* %lanes, align 2, !tbaa !138
  %conv = zext i16 %1 to i32
  %bits.i = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4, i32 1
  %2 = load i8, i8* %bits.i, align 1, !tbaa !144
  %conv.i = zext i8 %2 to i32
  %add.i = add nuw nsw i32 %conv.i, 7
  %div.i = lshr i32 %add.i, 3
  %mul = mul nuw nsw i32 %div.i, %conv
  %dimensions = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 8
  %3 = load i32, i32* %dimensions, align 8, !tbaa !145
  %mul3 = shl i32 %3, 2
  %func = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 0
  %4 = load i8*, i8** %func, align 8, !tbaa !146
  %call4 = tail call i64 @strlen(i8* %4) #14
  %5 = trunc i64 %call4 to i32
  %conv5 = add i32 %5, 1
  %trace_tag = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 3
  %6 = load i8*, i8** %trace_tag, align 8, !tbaa !147
  %tobool.not = icmp eq i8* %6, null
  br i1 %tobool.not, label %cond.end, label %cond.true

cond.true:                                        ; preds = %if.then
  %call7 = tail call i64 @strlen(i8* nonnull %6) #14
  %7 = trunc i64 %call7 to i32
  %phi.cast = add i32 %7, 1
  br label %cond.end

cond.end:                                         ; preds = %cond.true, %if.then
  %cond = phi i32 [ %phi.cast, %cond.true ], [ 1, %if.then ]
  %add11 = add i32 %mul3, 31
  %add12 = add i32 %add11, %mul
  %add13 = add i32 %add12, %conv5
  %add14 = add i32 %add13, %cond
  %and = and i32 %add14, -4
  %8 = load %"class.Halide::Runtime::Internal::TraceBuffer"*, %"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE, align 8, !tbaa !14
  %lock.i.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %8, i64 0, i32 0, i32 0
  %cmp.i.i = icmp ult i32 %and, 1048577
  %cursor.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %8, i64 0, i32 1
  %overage.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %8, i64 0, i32 2
  %arraydecay.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %8, i64 0, i32 3, i64 0
  br i1 %cmp.i.i, label %while.body.i.i.us.i.preheader, label %while.body.i.i.i.preheader

while.body.i.i.i.preheader:                       ; preds = %cond.end
  %9 = bitcast i32* %cursor.i.i to <2 x i32>*
  br label %while.body.i.i.i

while.body.i.i.us.i.preheader:                    ; preds = %cond.end
  %10 = bitcast i32* %cursor.i.i to <2 x i32>*
  br label %while.body.i.i.us.i

while.body.i.i.us.i:                              ; preds = %while.body.i.i.us.i.backedge, %while.body.i.i.us.i.preheader
  %11 = load volatile i32, i32* %lock.i.i.i, align 4, !tbaa !148
  %and.i.i.us.i = and i32 %11, 1073741823
  %add.i.i.us.i = add nuw nsw i32 %and.i.i.us.i, 1
  %12 = cmpxchg i32* %lock.i.i.i, i32 %and.i.i.us.i, i32 %add.i.i.us.i seq_cst seq_cst
  %13 = extractvalue { i32, i1 } %12, 1
  br i1 %13, label %do.end.i.us.i, label %while.body.i.i.us.i.backedge

do.end.i.us.i:                                    ; preds = %while.body.i.i.us.i
  %14 = atomicrmw add i32* %cursor.i.i, i32 %and seq_cst
  %add.i.us.i = add i32 %14, %and
  %cmp2.i.us.i = icmp ugt i32 %add.i.us.i, 1048576
  br i1 %cmp2.i.us.i, label %while.body.us.i, label %_ZN6Halide7Runtime8Internal11TraceBuffer14acquire_packetEPvij.exit

while.body.us.i:                                  ; preds = %do.end.i.us.i
  %15 = atomicrmw add i32* %overage.i.i, i32 %and seq_cst
  %16 = atomicrmw sub i32* %lock.i.i.i, i32 1 seq_cst
  br label %while.body.i.i5.us.i

while.body.i.i5.us.i:                             ; preds = %while.body.i.i5.us.i, %while.body.us.i
  %17 = atomicrmw or i32* %lock.i.i.i, i32 1073741824 seq_cst
  %18 = cmpxchg i32* %lock.i.i.i, i32 1073741824, i32 -2147483648 seq_cst seq_cst
  %19 = extractvalue { i32, i1 } %18, 1
  br i1 %19, label %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.us.i, label %while.body.i.i5.us.i

_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.us.i: ; preds = %while.body.i.i5.us.i
  %20 = load i32, i32* %cursor.i.i, align 4, !tbaa !150
  %tobool.not.i.us.i = icmp eq i32 %20, 0
  br i1 %tobool.not.i.us.i, label %do.end.critedge.i.us.i, label %if.then.i9.us.i

if.then.i9.us.i:                                  ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.us.i
  %21 = load i32, i32* %overage.i.i, align 4, !tbaa !152
  %sub.i.us.i = sub i32 %20, %21
  store i32 %sub.i.us.i, i32* %cursor.i.i, align 4, !tbaa !150
  %conv.i.us.i = zext i32 %sub.i.us.i to i64
  %call.i.us.i = tail call i64 @write(i32 %call, i8* nonnull %arraydecay.i.i, i64 %conv.i.us.i) #14
  %conv5.i.us.i = trunc i64 %call.i.us.i to i32
  %cmp.i8.us.i = icmp eq i32 %sub.i.us.i, %conv5.i.us.i
  store <2 x i32> zeroinitializer, <2 x i32>* %10, align 4, !tbaa !41
  %22 = atomicrmw and i32* %lock.i.i.i, i32 2147483647 seq_cst
  br i1 %cmp.i8.us.i, label %while.body.i.i.us.i.backedge, label %if.then10.i.us.i

if.then10.i.us.i:                                 ; preds = %if.then.i9.us.i
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([144 x i8], [144 x i8]* @.str.32, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %while.body.i.i.us.i.backedge

do.end.critedge.i.us.i:                           ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.us.i
  %23 = atomicrmw and i32* %lock.i.i.i, i32 2147483647 seq_cst
  br label %while.body.i.i.us.i.backedge

while.body.i.i.us.i.backedge:                     ; preds = %do.end.critedge.i.us.i, %if.then10.i.us.i, %if.then.i9.us.i, %while.body.i.i.us.i
  br label %while.body.i.i.us.i, !llvm.loop !153

while.body.i.i.i:                                 ; preds = %while.body.i.i.i.backedge, %while.body.i.i.i.preheader
  %24 = load volatile i32, i32* %lock.i.i.i, align 4, !tbaa !148
  %and.i.i.i = and i32 %24, 1073741823
  %add.i.i.i = add nuw nsw i32 %and.i.i.i, 1
  %25 = cmpxchg i32* %lock.i.i.i, i32 %and.i.i.i, i32 %add.i.i.i seq_cst seq_cst
  %26 = extractvalue { i32, i1 } %25, 1
  br i1 %26, label %if.then.i.i, label %while.body.i.i.i.backedge

if.then.i.i:                                      ; preds = %while.body.i.i.i
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([120 x i8], [120 x i8]* @.str.31, i64 0, i64 0)) #14
  tail call void @abort() #14
  %27 = atomicrmw add i32* %cursor.i.i, i32 %and seq_cst
  %add.i.i400 = add i32 %27, %and
  %cmp2.i.i = icmp ugt i32 %add.i.i400, 1048576
  br i1 %cmp2.i.i, label %while.body.i, label %_ZN6Halide7Runtime8Internal11TraceBuffer14acquire_packetEPvij.exit

while.body.i:                                     ; preds = %if.then.i.i
  %28 = atomicrmw add i32* %overage.i.i, i32 %and seq_cst
  %29 = atomicrmw sub i32* %lock.i.i.i, i32 1 seq_cst
  br label %while.body.i.i5.i

while.body.i.i5.i:                                ; preds = %while.body.i.i5.i, %while.body.i
  %30 = atomicrmw or i32* %lock.i.i.i, i32 1073741824 seq_cst
  %31 = cmpxchg i32* %lock.i.i.i, i32 1073741824, i32 -2147483648 seq_cst seq_cst
  %32 = extractvalue { i32, i1 } %31, 1
  br i1 %32, label %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.i, label %while.body.i.i5.i

_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.i: ; preds = %while.body.i.i5.i
  %33 = load i32, i32* %cursor.i.i, align 4, !tbaa !150
  %tobool.not.i.i = icmp eq i32 %33, 0
  br i1 %tobool.not.i.i, label %do.end.critedge.i.i, label %if.then.i9.i

if.then.i9.i:                                     ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.i
  %34 = load i32, i32* %overage.i.i, align 4, !tbaa !152
  %sub.i.i = sub i32 %33, %34
  store i32 %sub.i.i, i32* %cursor.i.i, align 4, !tbaa !150
  %conv.i.i = zext i32 %sub.i.i to i64
  %call.i.i401 = tail call i64 @write(i32 %call, i8* nonnull %arraydecay.i.i, i64 %conv.i.i) #14
  %conv5.i.i = trunc i64 %call.i.i401 to i32
  %cmp.i8.i = icmp eq i32 %sub.i.i, %conv5.i.i
  store <2 x i32> zeroinitializer, <2 x i32>* %9, align 4, !tbaa !41
  %35 = atomicrmw and i32* %lock.i.i.i, i32 2147483647 seq_cst
  br i1 %cmp.i8.i, label %while.body.i.i.i.backedge, label %if.then10.i.i

if.then10.i.i:                                    ; preds = %if.then.i9.i
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([144 x i8], [144 x i8]* @.str.32, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %while.body.i.i.i.backedge

do.end.critedge.i.i:                              ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.i
  %36 = atomicrmw and i32* %lock.i.i.i, i32 2147483647 seq_cst
  br label %while.body.i.i.i.backedge

while.body.i.i.i.backedge:                        ; preds = %do.end.critedge.i.i, %if.then10.i.i, %if.then.i9.i, %while.body.i.i.i
  br label %while.body.i.i.i, !llvm.loop !153

_ZN6Halide7Runtime8Internal11TraceBuffer14acquire_packetEPvij.exit: ; preds = %if.then.i.i, %do.end.i.us.i
  %.lcssa.i = phi i32 [ %14, %do.end.i.us.i ], [ %27, %if.then.i.i ]
  %idx.ext.i.i = zext i32 %.lcssa.i to i64
  %add.ptr.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %8, i64 0, i32 3, i64 %idx.ext.i.i
  %cmp16 = icmp ugt i32 %and, 4096
  br i1 %cmp16, label %if.then17, label %if.end

if.then17:                                        ; preds = %_ZN6Halide7Runtime8Internal11TraceBuffer14acquire_packetEPvij.exit
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i404 = icmp eq i8* %call.i, null
  br i1 %tobool.not.i404, label %if.then.i415, label %if.else.i421

if.then.i415:                                     ; preds = %if.then17
  %conv.i4071 = zext i32 %and to i64
  %call.i4082 = tail call i8* @halide_uint64_to_string(i8* null, i8* null, i64 %conv.i4071, i32 1) #14
  %call.i41117 = tail call i8* @halide_string_to_string(i8* %call.i4082, i8* null, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #14
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE0ELy1024EED2Ev.exit

if.else.i421:                                     ; preds = %if.then17
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %conv.i4073 = zext i32 %and to i64
  %call.i4084 = tail call i8* @halide_uint64_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i64 %conv.i4073, i32 1) #14
  %call.i411 = tail call i8* @halide_string_to_string(i8* %call.i4084, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #14
  %sub.ptr.lhs.cast.i.i416 = ptrtoint i8* %call.i411 to i64
  %sub.ptr.rhs.cast.i.i417 = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i418 = sub i64 1, %sub.ptr.rhs.cast.i.i417
  %add.i.i419 = add i64 %sub.ptr.sub.i.i418, %sub.ptr.lhs.cast.i.i416
  %call.i.i420 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* null, i8* nonnull %call.i, i64 %add.i.i419) #14
  tail call void @halide_print(i8* null, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE0ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE0ELy1024EED2Ev.exit: ; preds = %if.else.i421, %if.then.i415
  tail call void @free(i8* %call.i) #14
  br label %if.end

if.end:                                           ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE0ELy1024EED2Ev.exit, %_ZN6Halide7Runtime8Internal11TraceBuffer14acquire_packetEPvij.exit
  %size = bitcast i8* %add.ptr.i.i to i32*
  store i32 %and, i32* %size, align 4, !tbaa !154
  %id = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 4
  %37 = bitcast i8* %id to i32*
  store i32 %0, i32* %37, align 4, !tbaa !156
  %38 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 8
  %39 = bitcast %struct.halide_type_t* %type to i32*
  %40 = bitcast i8* %38 to i32*
  %41 = load i32, i32* %39, align 8
  store i32 %41, i32* %40, align 4
  %event = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 5
  %event22 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 12
  %42 = bitcast i32* %event to <4 x i32>*
  %43 = load <4 x i32>, <4 x i32>* %42, align 4, !tbaa !18
  %dimensions26 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 24
  %44 = bitcast i8* %dimensions26 to i32*
  %45 = bitcast i8* %event22 to <4 x i32>*
  store <4 x i32> %43, <4 x i32>* %45, align 4, !tbaa !18
  %coordinates = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 2
  %46 = load i32*, i32** %coordinates, align 8, !tbaa !157
  %tobool27.not = icmp eq i32* %46, null
  br i1 %tobool27.not, label %if.end33, label %if.then28

if.then28:                                        ; preds = %if.end
  %47 = bitcast i32* %46 to i8*
  %48 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 28
  %conv31 = zext i32 %mul3 to i64
  %call32 = tail call i8* @memcpy(i8* nonnull %48, i8* nonnull %47, i64 %conv31) #14
  br label %if.end33

if.end33:                                         ; preds = %if.then28, %if.end
  %value = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 1
  %49 = load i8*, i8** %value, align 8, !tbaa !158
  %tobool34.not = icmp eq i8* %49, null
  br i1 %tobool34.not, label %if.end40, label %if.then35

if.then35:                                        ; preds = %if.end33
  %50 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 28
  %51 = bitcast i8* %50 to i32*
  %52 = load i32, i32* %44, align 4, !tbaa !159
  %idx.ext.i = sext i32 %52 to i64
  %add.ptr.i424 = getelementptr inbounds i32, i32* %51, i64 %idx.ext.i
  %53 = bitcast i32* %add.ptr.i424 to i8*
  %conv38 = zext i32 %mul to i64
  %call39 = tail call i8* @memcpy(i8* nonnull %53, i8* nonnull %49, i64 %conv38) #14
  br label %if.end40

if.end40:                                         ; preds = %if.end33, %if.then35
  %54 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 28
  %55 = bitcast i8* %54 to i32*
  %56 = load i32, i32* %44, align 4, !tbaa !159
  %idx.ext.i.i425 = sext i32 %56 to i64
  %add.ptr.i.i426 = getelementptr inbounds i32, i32* %55, i64 %idx.ext.i.i425
  %57 = bitcast i32* %add.ptr.i.i426 to i8*
  %lanes.i = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 10
  %58 = bitcast i8* %lanes.i to i16*
  %59 = load i16, i16* %58, align 2, !tbaa !160
  %conv.i427 = zext i16 %59 to i32
  %60 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 9
  %61 = load i8, i8* %60, align 1, !tbaa !144
  %conv.i.i428 = zext i8 %61 to i32
  %add.i.i429 = add nuw nsw i32 %conv.i.i428, 7
  %div.i.i = lshr i32 %add.i.i429, 3
  %mul.i = mul nuw nsw i32 %div.i.i, %conv.i427
  %idx.ext.i430 = zext i32 %mul.i to i64
  %add.ptr.i431 = getelementptr inbounds i8, i8* %57, i64 %idx.ext.i430
  %62 = load i8*, i8** %func, align 8, !tbaa !146
  %conv43 = zext i32 %conv5 to i64
  %call44 = tail call i8* @memcpy(i8* nonnull %add.ptr.i431, i8* %62, i64 %conv43) #14
  %63 = load i32, i32* %44, align 4, !tbaa !159
  %idx.ext.i.i.i = sext i32 %63 to i64
  %add.ptr.i.i.i = getelementptr inbounds i32, i32* %55, i64 %idx.ext.i.i.i
  %64 = bitcast i32* %add.ptr.i.i.i to i8*
  %65 = load i16, i16* %58, align 2, !tbaa !160
  %conv.i.i432 = zext i16 %65 to i32
  %66 = load i8, i8* %60, align 1, !tbaa !144
  %conv.i.i.i = zext i8 %66 to i32
  %add.i.i.i433 = add nuw nsw i32 %conv.i.i.i, 7
  %div.i.i.i = lshr i32 %add.i.i.i433, 3
  %mul.i.i = mul nuw nsw i32 %div.i.i.i, %conv.i.i432
  %idx.ext.i.i434 = zext i32 %mul.i.i to i64
  %add.ptr.i.i435 = getelementptr inbounds i8, i8* %64, i64 %idx.ext.i.i434
  br label %while.cond.i437

while.cond.i437:                                  ; preds = %while.cond.i437, %if.end40
  %f.0.i = phi i8* [ %add.ptr.i.i435, %if.end40 ], [ %incdec.ptr.i, %while.cond.i437 ]
  %incdec.ptr.i = getelementptr inbounds i8, i8* %f.0.i, i64 1
  %67 = load i8, i8* %f.0.i, align 1, !tbaa !18
  %tobool.not.i436 = icmp eq i8 %67, 0
  br i1 %tobool.not.i436, label %_ZN21halide_trace_packet_t9trace_tagEv.exit, label %while.cond.i437, !llvm.loop !161

_ZN21halide_trace_packet_t9trace_tagEv.exit:      ; preds = %while.cond.i437
  %68 = load i8*, i8** %trace_tag, align 8, !tbaa !147
  %tobool47.not = icmp eq i8* %68, null
  %spec.select = select i1 %tobool47.not, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1.10, i64 0, i64 0), i8* %68
  %conv53 = zext i32 %cond to i64
  %call54 = tail call i8* @memcpy(i8* nonnull %incdec.ptr.i, i8* %spec.select, i64 %conv53) #14
  %69 = load %"class.Halide::Runtime::Internal::TraceBuffer"*, %"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE, align 8, !tbaa !14
  fence seq_cst
  %lock.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %69, i64 0, i32 0, i32 0
  %70 = atomicrmw sub i32* %lock.i.i, i32 1 seq_cst
  %71 = load i32, i32* %event, align 4, !tbaa !162
  %cmp56 = icmp eq i32 %71, 9
  br i1 %cmp56, label %if.then57, label %if.end277

if.then57:                                        ; preds = %_ZN21halide_trace_packet_t9trace_tagEv.exit
  %72 = load %"class.Halide::Runtime::Internal::TraceBuffer"*, %"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE, align 8, !tbaa !14
  %lock.i.i438 = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %72, i64 0, i32 0, i32 0
  br label %while.body.i.i

while.body.i.i:                                   ; preds = %while.body.i.i, %if.then57
  %73 = atomicrmw or i32* %lock.i.i438, i32 1073741824 seq_cst
  %74 = cmpxchg i32* %lock.i.i438, i32 1073741824, i32 -2147483648 seq_cst seq_cst
  %75 = extractvalue { i32, i1 } %74, 1
  br i1 %75, label %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i, label %while.body.i.i

_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i: ; preds = %while.body.i.i
  %cursor.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %72, i64 0, i32 1
  %76 = load i32, i32* %cursor.i, align 4, !tbaa !150
  %tobool.not.i439 = icmp eq i32 %76, 0
  br i1 %tobool.not.i439, label %do.end.critedge.i, label %if.then.i442

if.then.i442:                                     ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i
  %overage.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %72, i64 0, i32 2
  %77 = load i32, i32* %overage.i, align 4, !tbaa !152
  %sub.i = sub i32 %76, %77
  store i32 %sub.i, i32* %cursor.i, align 4, !tbaa !150
  %arraydecay.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %72, i64 0, i32 3, i64 0
  %conv.i440 = zext i32 %sub.i to i64
  %call.i441 = tail call i64 @write(i32 %call, i8* nonnull %arraydecay.i, i64 %conv.i440) #14
  %conv5.i = trunc i64 %call.i441 to i32
  %cmp.i = icmp eq i32 %sub.i, %conv5.i
  %78 = bitcast i32* %cursor.i to <2 x i32>*
  store <2 x i32> zeroinitializer, <2 x i32>* %78, align 4, !tbaa !41
  %79 = atomicrmw and i32* %lock.i.i438, i32 2147483647 seq_cst
  br i1 %cmp.i, label %if.end277, label %if.then10.i

if.then10.i:                                      ; preds = %if.then.i442
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([144 x i8], [144 x i8]* @.str.32, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %if.end277

do.end.critedge.i:                                ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i
  %80 = atomicrmw and i32* %lock.i.i438, i32 2147483647 seq_cst
  br label %if.end277

if.else:                                          ; preds = %entry
  %call.i445 = tail call i8* @malloc(i64 4096) #14
  %tobool.not.i448 = icmp eq i8* %call.i445, null
  br i1 %tobool.not.i448, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EEC2EPvPc.exit, label %if.then6.i451

if.then6.i451:                                    ; preds = %if.else
  %add.ptr.i449 = getelementptr inbounds i8, i8* %call.i445, i64 4095
  store i8 0, i8* %add.ptr.i449, align 1, !tbaa !18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EEC2EPvPc.exit: ; preds = %if.then6.i451, %if.else
  %ss.sroa.74.0 = phi i8* [ %add.ptr.i449, %if.then6.i451 ], [ null, %if.else ]
  %bits = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4, i32 1
  %81 = load i8, i8* %bits, align 1, !tbaa !163
  %conv60 = zext i8 %81 to i32
  br label %while.cond

while.cond:                                       ; preds = %while.cond, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EEC2EPvPc.exit
  %print_bits.0 = phi i32 [ 8, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EEC2EPvPc.exit ], [ %shl, %while.cond ]
  %cmp61 = icmp slt i32 %print_bits.0, %conv60
  %shl = shl i32 %print_bits.0, 1
  br i1 %cmp61, label %while.cond, label %do.body, !llvm.loop !164

do.body:                                          ; preds = %while.cond
  %cmp62 = icmp slt i32 %print_bits.0, 65
  br i1 %cmp62, label %do.end, label %if.then63

if.then63:                                        ; preds = %do.body
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([140 x i8], [140 x i8]* @.str.2.11, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %do.end

do.end:                                           ; preds = %if.then63, %do.body
  %event65 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 5
  %82 = load i32, i32* %event65, align 4, !tbaa !162
  %cmp66 = icmp slt i32 %82, 2
  %idxprom = zext i32 %82 to i64
  %arrayidx = getelementptr inbounds [11 x i8*], [11 x i8*]* @__const.halide_default_trace.event_types, i64 0, i64 %idxprom
  %83 = load i8*, i8** %arrayidx, align 8, !tbaa !14
  %call.i456 = tail call i8* @halide_string_to_string(i8* %call.i445, i8* %ss.sroa.74.0, i8* %83) #14
  %call.i459 = tail call i8* @halide_string_to_string(i8* %call.i456, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #14
  %func70 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 0
  %84 = load i8*, i8** %func70, align 8, !tbaa !146
  %call.i462 = tail call i8* @halide_string_to_string(i8* %call.i459, i8* %ss.sroa.74.0, i8* %84) #14
  %call.i465 = tail call i8* @halide_string_to_string(i8* %call.i462, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #14
  %value_index73 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 7
  %85 = load i32, i32* %value_index73, align 4, !tbaa !165
  %conv.i468 = sext i32 %85 to i64
  %call.i469 = tail call i8* @halide_int64_to_string(i8* %call.i465, i8* %ss.sroa.74.0, i64 %conv.i468, i32 1) #14
  %call.i472 = tail call i8* @halide_string_to_string(i8* %call.i469, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.22.179, i64 0, i64 0)) #14
  %lanes77 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4, i32 2
  %86 = load i16, i16* %lanes77, align 2, !tbaa !138
  %cmp79 = icmp ugt i16 %86, 1
  br i1 %cmp79, label %if.then80, label %if.end82

if.then80:                                        ; preds = %do.end
  %call.i475 = tail call i8* @halide_string_to_string(i8* %call.i472, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.17, i64 0, i64 0)) #14
  br label %if.end82

if.end82:                                         ; preds = %if.then80, %do.end
  %ss.sroa.7.0 = phi i8* [ %call.i475, %if.then80 ], [ %call.i472, %do.end ]
  %dimensions83 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 8
  %87 = load i32, i32* %dimensions83, align 8, !tbaa !145
  %cmp84660 = icmp sgt i32 %87, 0
  br i1 %cmp84660, label %if.end100.peel, label %for.cond.cleanup

if.end100.peel:                                   ; preds = %if.end82
  %coordinates101 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 2
  %.pre = load i32*, i32** %coordinates101, align 8, !tbaa !157
  %.pre673 = load i32, i32* %.pre, align 4, !tbaa !41
  %conv.i484.peel = sext i32 %.pre673 to i64
  %call.i485.peel = tail call i8* @halide_int64_to_string(i8* %ss.sroa.7.0, i8* %ss.sroa.74.0, i64 %conv.i484.peel, i32 1) #14
  %88 = load i32, i32* %dimensions83, align 8, !tbaa !145
  %cmp84.peel = icmp sgt i32 %88, 1
  br i1 %cmp84.peel, label %if.then86, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %if.end100, %if.end100.peel, %if.end82
  %ss.sroa.7.1.lcssa = phi i8* [ %ss.sroa.7.0, %if.end82 ], [ %call.i485.peel, %if.end100.peel ], [ %call.i485, %if.end100 ]
  %89 = load i16, i16* %lanes77, align 2, !tbaa !138
  %cmp108 = icmp ugt i16 %89, 1
  %.sink684 = select i1 %cmp108, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.20, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.119, i64 0, i64 0)
  %call.i491 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.1.lcssa, i8* %ss.sroa.74.0, i8* %.sink684) #14
  br i1 %cmp66, label %if.then115, label %if.end263

if.then86:                                        ; preds = %if.end100.peel, %if.end100
  %indvars.iv670 = phi i64 [ %indvars.iv.next671, %if.end100 ], [ 1, %if.end100.peel ]
  %ss.sroa.7.1661 = phi i8* [ %call.i485, %if.end100 ], [ %call.i485.peel, %if.end100.peel ]
  %90 = load i16, i16* %lanes77, align 2, !tbaa !138
  %cmp90 = icmp ugt i16 %90, 1
  br i1 %cmp90, label %land.lhs.true, label %if.else97.split

land.lhs.true:                                    ; preds = %if.then86
  %conv89 = zext i16 %90 to i32
  %91 = trunc i64 %indvars.iv670 to i32
  %rem = urem i32 %91, %conv89
  %cmp94 = icmp eq i32 %rem, 0
  br i1 %cmp94, label %if.end100, label %if.else97.split

if.else97.split:                                  ; preds = %if.then86, %land.lhs.true
  br label %if.end100

if.end100:                                        ; preds = %land.lhs.true, %if.else97.split
  %.sink = phi i8* [ getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0), %if.else97.split ], [ getelementptr inbounds ([5 x i8], [5 x i8]* @.str.18, i64 0, i64 0), %land.lhs.true ]
  %call.i4786 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.1661, i8* %ss.sroa.74.0, i8* %.sink) #14
  %92 = load i32*, i32** %coordinates101, align 8, !tbaa !157
  %arrayidx103 = getelementptr inbounds i32, i32* %92, i64 %indvars.iv670
  %93 = load i32, i32* %arrayidx103, align 4, !tbaa !41
  %conv.i484 = sext i32 %93 to i64
  %call.i485 = tail call i8* @halide_int64_to_string(i8* %call.i4786, i8* %ss.sroa.74.0, i64 %conv.i484, i32 1) #14
  %indvars.iv.next671 = add nuw nsw i64 %indvars.iv670, 1
  %94 = load i32, i32* %dimensions83, align 8, !tbaa !145
  %95 = sext i32 %94 to i64
  %cmp84 = icmp slt i64 %indvars.iv.next671, %95
  br i1 %cmp84, label %if.then86, label %for.cond.cleanup, !llvm.loop !166

if.then115:                                       ; preds = %for.cond.cleanup
  %96 = load i16, i16* %lanes77, align 2, !tbaa !138
  %cmp119 = icmp ugt i16 %96, 1
  %.sink685 = select i1 %cmp119, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.22, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.23, i64 0, i64 0)
  %call.i497 = tail call i8* @halide_string_to_string(i8* %call.i491, i8* %ss.sroa.74.0, i8* %.sink685) #14
  %97 = load i16, i16* %lanes77, align 2, !tbaa !138
  %cmp130655.not = icmp eq i16 %97, 0
  br i1 %cmp130655.not, label %if.end263, label %if.end136.peel

if.end136.peel:                                   ; preds = %if.then115
  %code = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4, i32 0
  %value245 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 1
  %98 = bitcast i8** %value245 to i8***
  %cmp214 = icmp sgt i32 %print_bits.0, 15
  %99 = bitcast i8** %value245 to i16**
  %100 = bitcast i8** %value245 to float**
  %101 = bitcast i8** %value245 to double**
  %102 = bitcast i8** %value245 to i32**
  %103 = bitcast i8** %value245 to i64**
  %.pre674 = load i8, i8* %code, align 8, !tbaa !168
  switch i8 %.pre674, label %for.inc253.peel [
    i8 0, label %if.then140.peel
    i8 1, label %if.then176.peel
    i8 2, label %do.body213.peel
    i8 3, label %if.then244.peel
  ]

if.then244.peel:                                  ; preds = %if.end136.peel
  %104 = load i8**, i8*** %98, align 8, !tbaa !158
  %105 = load i8*, i8** %104, align 8, !tbaa !14
  %call.i543.peel = tail call i8* @halide_pointer_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i8* %105) #14
  br label %for.inc253.peel

do.body213.peel:                                  ; preds = %if.end136.peel
  br i1 %cmp214, label %do.end218.peel, label %if.then215.peel

if.then215.peel:                                  ; preds = %do.body213.peel
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([142 x i8], [142 x i8]* @.str.24, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %do.end218.peel

do.end218.peel:                                   ; preds = %if.then215.peel, %do.body213.peel
  switch i32 %print_bits.0, label %if.else232.peel [
    i32 32, label %if.then220.peel
    i32 16, label %if.then227.peel
  ]

if.then227.peel:                                  ; preds = %do.end218.peel
  %106 = load i16*, i16** %99, align 8, !tbaa !158
  %107 = load i16, i16* %106, align 2, !tbaa !169
  %call.i535.peel = tail call double @halide_float16_bits_to_double(i16 zeroext %107) #14
  %call2.i.peel = tail call i8* @halide_double_to_string(i8* %call.i497, i8* %ss.sroa.74.0, double %call.i535.peel, i32 1) #14
  br label %for.inc253.peel

if.then220.peel:                                  ; preds = %do.end218.peel
  %108 = load float*, float** %100, align 8, !tbaa !158
  %109 = load float, float* %108, align 4, !tbaa !170
  %conv.i533.peel = fpext float %109 to double
  %call.i534.peel = tail call i8* @halide_double_to_string(i8* %call.i497, i8* %ss.sroa.74.0, double %conv.i533.peel, i32 0) #14
  br label %for.inc253.peel

if.else232.peel:                                  ; preds = %do.end218.peel
  %110 = load double*, double** %101, align 8, !tbaa !158
  %111 = load double, double* %110, align 8, !tbaa !172
  %call.i540.peel = tail call i8* @halide_double_to_string(i8* %call.i497, i8* %ss.sroa.74.0, double %111, i32 1) #14
  br label %for.inc253.peel

if.then176.peel:                                  ; preds = %if.end136.peel
  switch i32 %print_bits.0, label %if.else199.peel [
    i32 8, label %if.then178.peel
    i32 16, label %if.then186.peel
    i32 32, label %if.then194.peel
  ]

if.then194.peel:                                  ; preds = %if.then176.peel
  %112 = load i32*, i32** %102, align 8, !tbaa !158
  %113 = load i32, i32* %112, align 4, !tbaa !41
  %conv.i526.peel = zext i32 %113 to i64
  %call.i527.peel = tail call i8* @halide_uint64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i526.peel, i32 1) #14
  br label %for.inc253.peel

if.then186.peel:                                  ; preds = %if.then176.peel
  %114 = load i16*, i16** %99, align 8, !tbaa !158
  %115 = load i16, i16* %114, align 2, !tbaa !169
  %conv.i522.peel = zext i16 %115 to i64
  %call.i523.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i522.peel, i32 1) #14
  br label %for.inc253.peel

if.then178.peel:                                  ; preds = %if.then176.peel
  %116 = load i8*, i8** %value245, align 8, !tbaa !158
  %117 = load i8, i8* %116, align 1, !tbaa !18
  %conv.i518.peel = zext i8 %117 to i64
  %call.i519.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i518.peel, i32 1) #14
  br label %for.inc253.peel

if.else199.peel:                                  ; preds = %if.then176.peel
  %118 = load i64*, i64** %103, align 8, !tbaa !158
  %119 = load i64, i64* %118, align 8, !tbaa !22
  %call.i530.peel = tail call i8* @halide_uint64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %119, i32 1) #14
  br label %for.inc253.peel

if.then140.peel:                                  ; preds = %if.end136.peel
  switch i32 %print_bits.0, label %if.else163.peel [
    i32 8, label %if.then142.peel
    i32 16, label %if.then150.peel
    i32 32, label %if.then158.peel
  ]

if.then158.peel:                                  ; preds = %if.then140.peel
  %120 = load i32*, i32** %102, align 8, !tbaa !158
  %121 = load i32, i32* %120, align 4, !tbaa !41
  %conv.i511.peel = sext i32 %121 to i64
  %call.i512.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i511.peel, i32 1) #14
  br label %for.inc253.peel

if.then150.peel:                                  ; preds = %if.then140.peel
  %122 = load i16*, i16** %99, align 8, !tbaa !158
  %123 = load i16, i16* %122, align 2, !tbaa !169
  %conv.i507.peel = sext i16 %123 to i64
  %call.i508.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i507.peel, i32 1) #14
  br label %for.inc253.peel

if.then142.peel:                                  ; preds = %if.then140.peel
  %124 = load i8*, i8** %value245, align 8, !tbaa !158
  %125 = load i8, i8* %124, align 1, !tbaa !18
  %conv.i503.peel = sext i8 %125 to i64
  %call.i504.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i503.peel, i32 1) #14
  br label %for.inc253.peel

if.else163.peel:                                  ; preds = %if.then140.peel
  %126 = load i64*, i64** %103, align 8, !tbaa !158
  %127 = load i64, i64* %126, align 8, !tbaa !22
  %call.i515.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %127, i32 1) #14
  br label %for.inc253.peel

for.inc253.peel:                                  ; preds = %if.else163.peel, %if.then142.peel, %if.then150.peel, %if.then158.peel, %if.else199.peel, %if.then178.peel, %if.then186.peel, %if.then194.peel, %if.else232.peel, %if.then220.peel, %if.then227.peel, %if.then244.peel, %if.end136.peel
  %ss.sroa.7.7.peel = phi i8* [ %call.i497, %if.end136.peel ], [ %call.i543.peel, %if.then244.peel ], [ %call.i540.peel, %if.else232.peel ], [ %call2.i.peel, %if.then227.peel ], [ %call.i534.peel, %if.then220.peel ], [ %call.i530.peel, %if.else199.peel ], [ %call.i527.peel, %if.then194.peel ], [ %call.i523.peel, %if.then186.peel ], [ %call.i519.peel, %if.then178.peel ], [ %call.i515.peel, %if.else163.peel ], [ %call.i512.peel, %if.then158.peel ], [ %call.i508.peel, %if.then150.peel ], [ %call.i504.peel, %if.then142.peel ]
  %128 = load i16, i16* %lanes77, align 2, !tbaa !138
  %cmp130.peel = icmp ugt i16 %128, 1
  br i1 %cmp130.peel, label %if.end136, label %if.end263

for.cond.cleanup131:                              ; preds = %for.inc253
  %cmp259 = icmp ugt i16 %154, 1
  br i1 %cmp259, label %if.then260, label %if.end263

if.end136:                                        ; preds = %for.inc253.peel, %for.inc253
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc253 ], [ 1, %for.inc253.peel ]
  %ss.sroa.7.5656 = phi i8* [ %ss.sroa.7.7, %for.inc253 ], [ %ss.sroa.7.7.peel, %for.inc253.peel ]
  %call.i500 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.5656, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #14
  %129 = load i8, i8* %code, align 8, !tbaa !168
  switch i8 %129, label %for.inc253 [
    i8 0, label %if.then140
    i8 1, label %if.then176
    i8 2, label %do.body213
    i8 3, label %if.then244
  ]

if.then140:                                       ; preds = %if.end136
  switch i32 %print_bits.0, label %if.else163 [
    i32 8, label %if.then142
    i32 16, label %if.then150
    i32 32, label %if.then158
  ]

if.then142:                                       ; preds = %if.then140
  %130 = load i8*, i8** %value245, align 8, !tbaa !158
  %arrayidx145 = getelementptr inbounds i8, i8* %130, i64 %indvars.iv
  %131 = load i8, i8* %arrayidx145, align 1, !tbaa !18
  %conv.i503 = sext i8 %131 to i64
  %call.i504 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i503, i32 1) #14
  br label %for.inc253

if.then150:                                       ; preds = %if.then140
  %132 = load i16*, i16** %99, align 8, !tbaa !158
  %arrayidx153 = getelementptr inbounds i16, i16* %132, i64 %indvars.iv
  %133 = load i16, i16* %arrayidx153, align 2, !tbaa !169
  %conv.i507 = sext i16 %133 to i64
  %call.i508 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i507, i32 1) #14
  br label %for.inc253

if.then158:                                       ; preds = %if.then140
  %134 = load i32*, i32** %102, align 8, !tbaa !158
  %arrayidx161 = getelementptr inbounds i32, i32* %134, i64 %indvars.iv
  %135 = load i32, i32* %arrayidx161, align 4, !tbaa !41
  %conv.i511 = sext i32 %135 to i64
  %call.i512 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i511, i32 1) #14
  br label %for.inc253

if.else163:                                       ; preds = %if.then140
  %136 = load i64*, i64** %103, align 8, !tbaa !158
  %arrayidx166 = getelementptr inbounds i64, i64* %136, i64 %indvars.iv
  %137 = load i64, i64* %arrayidx166, align 8, !tbaa !22
  %call.i515 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %137, i32 1) #14
  br label %for.inc253

if.then176:                                       ; preds = %if.end136
  switch i32 %print_bits.0, label %if.else199 [
    i32 8, label %if.then178
    i32 16, label %if.then186
    i32 32, label %if.then194
  ]

if.then178:                                       ; preds = %if.then176
  %138 = load i8*, i8** %value245, align 8, !tbaa !158
  %arrayidx181 = getelementptr inbounds i8, i8* %138, i64 %indvars.iv
  %139 = load i8, i8* %arrayidx181, align 1, !tbaa !18
  %conv.i518 = zext i8 %139 to i64
  %call.i519 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i518, i32 1) #14
  br label %for.inc253

if.then186:                                       ; preds = %if.then176
  %140 = load i16*, i16** %99, align 8, !tbaa !158
  %arrayidx189 = getelementptr inbounds i16, i16* %140, i64 %indvars.iv
  %141 = load i16, i16* %arrayidx189, align 2, !tbaa !169
  %conv.i522 = zext i16 %141 to i64
  %call.i523 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i522, i32 1) #14
  br label %for.inc253

if.then194:                                       ; preds = %if.then176
  %142 = load i32*, i32** %102, align 8, !tbaa !158
  %arrayidx197 = getelementptr inbounds i32, i32* %142, i64 %indvars.iv
  %143 = load i32, i32* %arrayidx197, align 4, !tbaa !41
  %conv.i526 = zext i32 %143 to i64
  %call.i527 = tail call i8* @halide_uint64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i526, i32 1) #14
  br label %for.inc253

if.else199:                                       ; preds = %if.then176
  %144 = load i64*, i64** %103, align 8, !tbaa !158
  %arrayidx202 = getelementptr inbounds i64, i64* %144, i64 %indvars.iv
  %145 = load i64, i64* %arrayidx202, align 8, !tbaa !22
  %call.i530 = tail call i8* @halide_uint64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %145, i32 1) #14
  br label %for.inc253

do.body213:                                       ; preds = %if.end136
  br i1 %cmp214, label %do.end218, label %if.then215

if.then215:                                       ; preds = %do.body213
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([142 x i8], [142 x i8]* @.str.24, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %do.end218

do.end218:                                        ; preds = %if.then215, %do.body213
  switch i32 %print_bits.0, label %if.else232 [
    i32 32, label %if.then220
    i32 16, label %if.then227
  ]

if.then220:                                       ; preds = %do.end218
  %146 = load float*, float** %100, align 8, !tbaa !158
  %arrayidx223 = getelementptr inbounds float, float* %146, i64 %indvars.iv
  %147 = load float, float* %arrayidx223, align 4, !tbaa !170
  %conv.i533 = fpext float %147 to double
  %call.i534 = tail call i8* @halide_double_to_string(i8* %call.i500, i8* %ss.sroa.74.0, double %conv.i533, i32 0) #14
  br label %for.inc253

if.then227:                                       ; preds = %do.end218
  %148 = load i16*, i16** %99, align 8, !tbaa !158
  %arrayidx230 = getelementptr inbounds i16, i16* %148, i64 %indvars.iv
  %149 = load i16, i16* %arrayidx230, align 2, !tbaa !169
  %call.i535 = tail call double @halide_float16_bits_to_double(i16 zeroext %149) #14
  %call2.i = tail call i8* @halide_double_to_string(i8* %call.i500, i8* %ss.sroa.74.0, double %call.i535, i32 1) #14
  br label %for.inc253

if.else232:                                       ; preds = %do.end218
  %150 = load double*, double** %101, align 8, !tbaa !158
  %arrayidx235 = getelementptr inbounds double, double* %150, i64 %indvars.iv
  %151 = load double, double* %arrayidx235, align 8, !tbaa !172
  %call.i540 = tail call i8* @halide_double_to_string(i8* %call.i500, i8* %ss.sroa.74.0, double %151, i32 1) #14
  br label %for.inc253

if.then244:                                       ; preds = %if.end136
  %152 = load i8**, i8*** %98, align 8, !tbaa !158
  %arrayidx247 = getelementptr inbounds i8*, i8** %152, i64 %indvars.iv
  %153 = load i8*, i8** %arrayidx247, align 8, !tbaa !14
  %call.i543 = tail call i8* @halide_pointer_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i8* %153) #14
  br label %for.inc253

for.inc253:                                       ; preds = %if.then244, %if.else232, %if.then227, %if.then220, %if.else199, %if.then194, %if.then186, %if.then178, %if.else163, %if.then158, %if.then150, %if.then142, %if.end136
  %ss.sroa.7.7 = phi i8* [ %call.i500, %if.end136 ], [ %call.i543, %if.then244 ], [ %call.i540, %if.else232 ], [ %call2.i, %if.then227 ], [ %call.i534, %if.then220 ], [ %call.i530, %if.else199 ], [ %call.i527, %if.then194 ], [ %call.i523, %if.then186 ], [ %call.i519, %if.then178 ], [ %call.i515, %if.else163 ], [ %call.i512, %if.then158 ], [ %call.i508, %if.then150 ], [ %call.i504, %if.then142 ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %154 = load i16, i16* %lanes77, align 2, !tbaa !138
  %155 = zext i16 %154 to i64
  %cmp130 = icmp ult i64 %indvars.iv.next, %155
  br i1 %cmp130, label %if.end136, label %for.cond.cleanup131, !llvm.loop !174

if.then260:                                       ; preds = %for.cond.cleanup131
  %call.i546 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.7, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.25, i64 0, i64 0)) #14
  br label %if.end263

if.end263:                                        ; preds = %if.then260, %for.cond.cleanup131, %for.inc253.peel, %if.then115, %for.cond.cleanup
  %ss.sroa.7.8 = phi i8* [ %call.i546, %if.then260 ], [ %ss.sroa.7.7, %for.cond.cleanup131 ], [ %call.i491, %for.cond.cleanup ], [ %ss.sroa.7.7.peel, %for.inc253.peel ], [ %call.i497, %if.then115 ]
  %trace_tag264 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 3
  %156 = load i8*, i8** %trace_tag264, align 8, !tbaa !147
  %tobool265.not = icmp eq i8* %156, null
  br i1 %tobool265.not, label %if.end274, label %land.lhs.true266

land.lhs.true266:                                 ; preds = %if.end263
  %157 = load i8, i8* %156, align 1, !tbaa !18
  %tobool268.not = icmp eq i8 %157, 0
  br i1 %tobool268.not, label %if.end274, label %if.then269

if.then269:                                       ; preds = %land.lhs.true266
  %call.i549 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.8, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.26, i64 0, i64 0)) #14
  %158 = load i8*, i8** %trace_tag264, align 8, !tbaa !147
  %call.i552 = tail call i8* @halide_string_to_string(i8* %call.i549, i8* %ss.sroa.74.0, i8* %158) #14
  %call.i555 = tail call i8* @halide_string_to_string(i8* %call.i552, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.27, i64 0, i64 0)) #14
  br label %if.end274

if.end274:                                        ; preds = %if.then269, %land.lhs.true266, %if.end263
  %ss.sroa.7.9 = phi i8* [ %ss.sroa.7.8, %if.end263 ], [ %ss.sroa.7.8, %land.lhs.true266 ], [ %call.i555, %if.then269 ]
  %call.i558 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.9, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #14
  br label %while.cond.i560

while.cond.i560:                                  ; preds = %while.cond.i560, %if.end274
  %159 = atomicrmw volatile xchg i8* @_ZN6Halide7Runtime8Internal22halide_trace_file_lockE, i8 1 acquire
  %tobool.not.i559 = icmp eq i8 %159, 0
  br i1 %tobool.not.i559, label %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit, label %while.cond.i560, !llvm.loop !175

_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit: ; preds = %while.cond.i560
  br i1 %tobool.not.i448, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  store atomic volatile i8 0, i8* @_ZN6Halide7Runtime8Internal22halide_trace_file_lockE release, align 1
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %sub.ptr.lhs.cast.i.i563 = ptrtoint i8* %call.i558 to i64
  %sub.ptr.rhs.cast.i.i564 = ptrtoint i8* %call.i445 to i64
  %sub.ptr.sub.i.i565 = sub i64 1, %sub.ptr.rhs.cast.i.i564
  %add.i.i566 = add i64 %sub.ptr.sub.i.i565, %sub.ptr.lhs.cast.i.i563
  %call.i.i567 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i445, i64 %add.i.i566) #14
  tail call void @halide_print(i8* %user_context, i8* nonnull %call.i445) #14
  store atomic volatile i8 0, i8* @_ZN6Halide7Runtime8Internal22halide_trace_file_lockE release, align 1
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i445, i64 %add.i.i566) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i445) #14
  br label %if.end277

if.end277:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EED2Ev.exit, %do.end.critedge.i, %if.then10.i, %if.then.i442, %_ZN21halide_trace_packet_t9trace_tagEv.exit
  ret i32 %0
}

; Function Attrs: nounwind
define weak i32 @halide_get_trace_file(i8* %user_context) local_unnamed_addr #4 {
entry:
  br label %while.cond.i

while.cond.i:                                     ; preds = %while.cond.i, %entry
  %0 = atomicrmw volatile xchg i8* @_ZN6Halide7Runtime8Internal22halide_trace_file_lockE, i8 1 acquire
  %tobool.not.i = icmp eq i8 %0, 0
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit, label %while.cond.i, !llvm.loop !175

_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit: ; preds = %while.cond.i
  %1 = load i32, i32* @_ZN6Halide7Runtime8Internal17halide_trace_fileE, align 4, !tbaa !41
  %cmp = icmp slt i32 %1, 0
  br i1 %cmp, label %if.then, label %if.end11

if.then:                                          ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %call = tail call i8* @getenv(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.28, i64 0, i64 0)) #14
  %tobool.not = icmp eq i8* %call, null
  br i1 %tobool.not, label %if.else, label %if.then1

if.then1:                                         ; preds = %if.then
  %call2 = tail call i8* @fopen(i8* nonnull %call, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.29, i64 0, i64 0)) #14
  %tobool3.not = icmp eq i8* %call2, null
  br i1 %tobool3.not, label %if.then4, label %do.end

if.then4:                                         ; preds = %if.then1
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([139 x i8], [139 x i8]* @.str.30, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %do.end

do.end:                                           ; preds = %if.then4, %if.then1
  %call5 = tail call i32 @fileno(i8* %call2) #14
  tail call void @halide_set_trace_file(i32 %call5) #15
  store i8* %call2, i8** @_ZN6Halide7Runtime8Internal35halide_trace_file_internally_openedE, align 8, !tbaa !14
  %2 = load %"class.Halide::Runtime::Internal::TraceBuffer"*, %"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE, align 8, !tbaa !14
  %tobool6.not = icmp eq %"class.Halide::Runtime::Internal::TraceBuffer"* %2, null
  br i1 %tobool6.not, label %if.then7, label %if.end11

if.then7:                                         ; preds = %do.end
  %call8 = tail call i8* @malloc(i64 1048588) #14
  store i8* %call8, i8** bitcast (%"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE to i8**), align 8, !tbaa !14
  %cursor.i = getelementptr inbounds i8, i8* %call8, i64 4
  %3 = bitcast i8* %cursor.i to <2 x i32>*
  store <2 x i32> zeroinitializer, <2 x i32>* %3, align 4, !tbaa !41
  %lock.i.i = bitcast i8* %call8 to i32*
  store volatile i32 0, i32* %lock.i.i, align 4, !tbaa !148
  br label %if.end11

if.else:                                          ; preds = %if.then
  tail call void @halide_set_trace_file(i32 0) #15
  br label %if.end11

if.end11:                                         ; preds = %if.else, %if.then7, %do.end, %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %4 = load i32, i32* @_ZN6Halide7Runtime8Internal17halide_trace_fileE, align 4, !tbaa !41
  store atomic volatile i8 0, i8* @_ZN6Halide7Runtime8Internal22halide_trace_file_lockE release, align 1
  ret i32 %4
}

declare i8* @memcpy(i8*, i8*, i64) local_unnamed_addr #1

declare i8* @fopen(i8*, i8*) local_unnamed_addr #1

declare i32 @fileno(i8*) local_unnamed_addr #1

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_set_trace_file(i32 %fd) local_unnamed_addr #2 {
entry:
  store i32 %fd, i32* @_ZN6Halide7Runtime8Internal17halide_trace_fileE, align 4, !tbaa !41
  ret void
}

; Function Attrs: nounwind mustprogress
define weak void @halide_trace_cleanup() #0 {
entry:
  %call = tail call i32 @halide_shutdown_trace() #15
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_shutdown_trace() local_unnamed_addr #0 {
entry:
  %0 = load i8*, i8** @_ZN6Halide7Runtime8Internal35halide_trace_file_internally_openedE, align 8, !tbaa !14
  %tobool.not = icmp eq i8* %0, null
  br i1 %tobool.not, label %return, label %if.then

if.then:                                          ; preds = %entry
  %call = tail call i32 @fclose(i8* nonnull %0) #14
  store i32 0, i32* @_ZN6Halide7Runtime8Internal17halide_trace_fileE, align 4, !tbaa !41
  store i8 0, i8* @_ZN6Halide7Runtime8Internal29halide_trace_file_initializedE, align 1, !tbaa !19
  store i8* null, i8** @_ZN6Halide7Runtime8Internal35halide_trace_file_internally_openedE, align 8, !tbaa !14
  %1 = load %"class.Halide::Runtime::Internal::TraceBuffer"*, %"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE, align 8, !tbaa !14
  %tobool1.not = icmp eq %"class.Halide::Runtime::Internal::TraceBuffer"* %1, null
  br i1 %tobool1.not, label %return, label %if.then2

if.then2:                                         ; preds = %if.then
  %2 = bitcast %"class.Halide::Runtime::Internal::TraceBuffer"* %1 to i8*
  tail call void @free(i8* nonnull %2) #14
  br label %return

return:                                           ; preds = %if.then2, %if.then, %entry
  %retval.0 = phi i32 [ %call, %if.then2 ], [ %call, %if.then ], [ 0, %entry ]
  ret i32 %retval.0
}

declare i32 @fclose(i8*) local_unnamed_addr #1

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i8*, %struct.halide_trace_event_t*)* @halide_set_custom_trace(i32 (i8*, %struct.halide_trace_event_t*)* %t) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i8*, %struct.halide_trace_event_t*)*, i32 (i8*, %struct.halide_trace_event_t*)** @_ZN6Halide7Runtime8Internal19halide_custom_traceE, align 8, !tbaa !14
  store i32 (i8*, %struct.halide_trace_event_t*)* %t, i32 (i8*, %struct.halide_trace_event_t*)** @_ZN6Halide7Runtime8Internal19halide_custom_traceE, align 8, !tbaa !14
  ret i32 (i8*, %struct.halide_trace_event_t*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_trace(i8* %user_context, %struct.halide_trace_event_t* %e) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, %struct.halide_trace_event_t*)*, i32 (i8*, %struct.halide_trace_event_t*)** @_ZN6Halide7Runtime8Internal19halide_custom_traceE, align 8, !tbaa !14
  %call = tail call i32 %0(i8* %user_context, %struct.halide_trace_event_t* %e) #14
  ret i32 %call
}

; Function Attrs: nounwind
define weak i32 @halide_trace_helper(i8* %user_context, i8* %func, i8* %value, i32* %coords, i32 %type_code, i32 %type_bits, i32 %type_lanes, i32 %code, i32 %parent_id, i32 %value_index, i32 %dimensions, i8* %trace_tag) local_unnamed_addr #4 {
entry:
  %event = alloca %struct.halide_trace_event_t, align 8
  %0 = bitcast %struct.halide_trace_event_t* %event to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %0) #11
  %code.i.i = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 4, i32 0
  %bits.i.i = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 4, i32 1
  %lanes.i.i = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 4, i32 2
  %func1 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 0
  store i8* %func, i8** %func1, align 8, !tbaa !146
  %value2 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 1
  store i8* %value, i8** %value2, align 8, !tbaa !158
  %coordinates = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 2
  store i32* %coords, i32** %coordinates, align 8, !tbaa !157
  %trace_tag3 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 3
  store i8* %trace_tag, i8** %trace_tag3, align 8, !tbaa !147
  %conv = trunc i32 %type_code to i8
  store i8 %conv, i8* %code.i.i, align 8, !tbaa !168
  %conv5 = trunc i32 %type_bits to i8
  store i8 %conv5, i8* %bits.i.i, align 1, !tbaa !163
  %conv7 = trunc i32 %type_lanes to i16
  store i16 %conv7, i16* %lanes.i.i, align 2, !tbaa !138
  %event9 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 5
  store i32 %code, i32* %event9, align 4, !tbaa !162
  %parent_id10 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 6
  store i32 %parent_id, i32* %parent_id10, align 8, !tbaa !176
  %value_index11 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 7
  store i32 %value_index, i32* %value_index11, align 4, !tbaa !165
  %dimensions12 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 8
  store i32 %dimensions, i32* %dimensions12, align 8, !tbaa !145
  %call = call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %0, i64 56) #14
  %add = add nsw i32 %type_bits, 7
  %div = sdiv i32 %add, 8
  %mul = mul nsw i32 %div, %type_lanes
  %conv13 = sext i32 %mul to i64
  %call14 = call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* %value, i64 %conv13) #14
  %1 = bitcast i32* %coords to i8*
  %conv15 = sext i32 %dimensions to i64
  %mul16 = shl nsw i64 %conv15, 2
  %call17 = call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* %1, i64 %mul16) #14
  %call18 = call i32 @halide_trace(i8* %user_context, %struct.halide_trace_event_t* nonnull %event) #14
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %0) #11
  ret i32 %call18
}

; Function Attrs: nounwind mustprogress
define linkonce zeroext i1 @_ZN6Halide7Runtime8Internal9ends_withEPKcS3_(i8* %filename, i8* %suffix) local_unnamed_addr #0 {
entry:
  br label %while.cond

while.cond:                                       ; preds = %while.cond, %entry
  %f.0 = phi i8* [ %filename, %entry ], [ %incdec.ptr, %while.cond ]
  %0 = load i8, i8* %f.0, align 1, !tbaa !18
  %tobool.not = icmp eq i8 %0, 0
  %incdec.ptr = getelementptr inbounds i8, i8* %f.0, i64 1
  br i1 %tobool.not, label %while.cond1, label %while.cond, !llvm.loop !177

while.cond1:                                      ; preds = %while.cond, %while.cond1
  %s.0 = phi i8* [ %incdec.ptr4, %while.cond1 ], [ %suffix, %while.cond ]
  %1 = load i8, i8* %s.0, align 1, !tbaa !18
  %tobool2.not = icmp eq i8 %1, 0
  %incdec.ptr4 = getelementptr inbounds i8, i8* %s.0, i64 1
  br i1 %tobool2.not, label %while.cond6.preheader, label %while.cond1, !llvm.loop !178

while.cond6.preheader:                            ; preds = %while.cond1
  %cmp34 = icmp ne i8* %s.0, %suffix
  %cmp735 = icmp ne i8* %f.0, %filename
  %2 = and i1 %cmp735, %cmp34
  br i1 %2, label %if.end, label %while.cond6.preheader.while.end13_crit_edge

while.cond6.preheader.while.end13_crit_edge:      ; preds = %while.cond6.preheader
  %cmp16.0 = icmp eq i8 0, 0
  br label %while.end13

if.end:                                           ; preds = %while.cond6.preheader, %if.end.while.body8_crit_edge
  %f.13649 = phi i8* [ %incdec.ptr11, %if.end.while.body8_crit_edge ], [ %f.0, %while.cond6.preheader ]
  %s.13748 = phi i8* [ %incdec.ptr12, %if.end.while.body8_crit_edge ], [ %s.0, %while.cond6.preheader ]
  %incdec.ptr11 = getelementptr inbounds i8, i8* %f.13649, i64 -1
  %incdec.ptr12 = getelementptr inbounds i8, i8* %s.13748, i64 -1
  %cmp = icmp ne i8* %incdec.ptr12, %suffix
  %cmp7 = icmp ne i8* %incdec.ptr11, %filename
  %3 = and i1 %cmp7, %cmp
  %.pre = load i8, i8* %incdec.ptr11, align 1, !tbaa !18
  %.pre45 = load i8, i8* %incdec.ptr12, align 1, !tbaa !18
  br i1 %3, label %if.end.while.body8_crit_edge, label %if.end.while.end13_crit_edge, !llvm.loop !179

if.end.while.end13_crit_edge:                     ; preds = %if.end
  %cmp16.1 = icmp eq i8 %.pre, %.pre45
  br label %while.end13

if.end.while.body8_crit_edge:                     ; preds = %if.end
  %cmp10.not = icmp eq i8 %.pre, %.pre45
  br i1 %cmp10.not, label %if.end, label %cleanup

while.end13:                                      ; preds = %if.end.while.end13_crit_edge, %while.cond6.preheader.while.end13_crit_edge
  %cmp16.phi = phi i1 [ %cmp16.0, %while.cond6.preheader.while.end13_crit_edge ], [ %cmp16.1, %if.end.while.end13_crit_edge ]
  br label %cleanup

cleanup:                                          ; preds = %if.end.while.body8_crit_edge, %while.end13
  %retval.0 = phi i1 [ %cmp16.phi, %while.end13 ], [ false, %if.end.while.body8_crit_edge ]
  ret i1 %retval.0
}

; Function Attrs: nounwind
define weak i32 @halide_debug_to_file(i8* %user_context, i8* %filename, i32 %type_code, %struct.halide_buffer_t* %buf) local_unnamed_addr #4 {
entry:
  %shape = alloca [4 x %struct.halide_dimension_t], align 16
  %header = alloca %"struct.Halide::Runtime::Internal::halide_tiff_header", align 2
  %offset = alloca i32, align 4
  %count = alloca i32, align 4
  %array_name = alloca [256 x i8], align 1
  %array_name43 = getelementptr inbounds [256 x i8], [256 x i8]* %array_name, i64 0, i64 0
  %header198 = alloca [129 x i8], align 1
  %tags = alloca [8 x i32], align 4
  %extents = alloca [4 x i32], align 4
  %name_header = alloca [2 x i32], align 4
  %payload_header = alloca [2 x i32], align 4
  %header289 = alloca [5 x i32], align 4
  %temp = alloca [4096 x i8], align 1
  %idx = alloca [4 x i32], align 4
  %zero = alloca i64, align 8
  %host.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 2
  %0 = load i8*, i8** %host.i, align 8, !tbaa !180
  %cmp.i = icmp eq i8* %0, null
  br i1 %cmp.i, label %_ZNK15halide_buffer_t15is_bounds_queryEv.exit, label %if.end

_ZNK15halide_buffer_t15is_bounds_queryEv.exit:    ; preds = %entry
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !182
  %cmp2.i = icmp eq i64 %1, 0
  br i1 %cmp2.i, label %if.then, label %if.end

if.then:                                          ; preds = %_ZNK15halide_buffer_t15is_bounds_queryEv.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.34, i64 0, i64 0)) #14
  br label %return

if.end:                                           ; preds = %_ZNK15halide_buffer_t15is_bounds_queryEv.exit, %entry
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 5
  %2 = load i32, i32* %dimensions, align 4, !tbaa !183
  %cmp = icmp sgt i32 %2, 4
  br i1 %cmp, label %if.then1, label %if.end2

if.then1:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.1.35, i64 0, i64 0)) #14
  br label %return

if.end2:                                          ; preds = %if.end
  %call3 = tail call i32 @halide_copy_to_host(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #14
  %cmp4.not = icmp eq i32 %call3, 0
  br i1 %cmp4.not, label %if.end6, label %return

if.end6:                                          ; preds = %if.end2
  %call.i598 = tail call i8* @fopen(i8* %filename, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2.36, i64 0, i64 0)) #14
  %cmp.i601.not = icmp eq i8* %call.i598, null
  br i1 %cmp.i601.not, label %return, label %if.end9

if.end9:                                          ; preds = %if.end6
  %3 = bitcast [4 x %struct.halide_dimension_t]* %shape to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %3) #11
  %min.i = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 0, i32 0
  %extent.i = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 0, i32 1
  %4 = bitcast [4 x %struct.halide_dimension_t]* %shape to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %4, align 16, !tbaa !41
  %min.i.1 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 1, i32 0
  %extent.i.1 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 1, i32 1
  %5 = bitcast i32* %min.i.1 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %5, align 16, !tbaa !41
  %min.i.2 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 2, i32 0
  %extent.i.2 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 2, i32 1
  %6 = bitcast i32* %min.i.2 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %6, align 16, !tbaa !41
  %min.i.3 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 3, i32 0
  %extent.i.3 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 3, i32 1
  %7 = bitcast i32* %min.i.3 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %7, align 16, !tbaa !41
  %8 = load i32, i32* %dimensions, align 4, !tbaa !183
  %cmp11875 = icmp sgt i32 %8, 0
  br i1 %cmp11875, label %for.body.lr.ph, label %for.body22.preheader

for.body.lr.ph:                                   ; preds = %if.end9
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  %9 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !184
  %10 = zext i32 %8 to i64
  %11 = add nsw i64 %10, -1
  %12 = icmp ult i64 %11, 3
  %13 = select i1 %12, i64 %10, i64 4
  br label %for.body

for.cond19.preheader:                             ; preds = %for.body
  %cmp20873 = icmp slt i32 %8, 4
  br i1 %cmp20873, label %for.body22.preheader, label %for.cond.cleanup21

for.body22.preheader:                             ; preds = %for.cond19.preheader, %if.end9
  %elts.0.lcssa907 = phi i64 [ %mul, %for.cond19.preheader ], [ 1, %if.end9 ]
  %14 = sext i32 %8 to i64
  %15 = sub i32 3, %8
  %16 = zext i32 %15 to i64
  %17 = add nuw nsw i64 %16, 1
  %min.iters.check = icmp eq i32 %15, 0
  br i1 %min.iters.check, label %for.body22.preheader162, label %vector.ph

vector.ph:                                        ; preds = %for.body22.preheader
  %n.vec = and i64 %17, 8589934590
  %ind.end = add nsw i64 %n.vec, %14
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %offset.idx = add i64 %index, %14
  %induction36 = add i64 %offset.idx, 1
  %18 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 %offset.idx, i32 0
  %19 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 %induction36, i32 0
  %20 = bitcast i32* %18 to <2 x i32>*
  store <2 x i32> <i32 0, i32 1>, <2 x i32>* %20, align 16, !tbaa !41
  %21 = bitcast i32* %19 to <2 x i32>*
  store <2 x i32> <i32 0, i32 1>, <2 x i32>* %21, align 16, !tbaa !41
  %22 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 %offset.idx, i32 2
  %23 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 %induction36, i32 2
  store i32 0, i32* %22, align 8, !tbaa !185
  store i32 0, i32* %23, align 8, !tbaa !185
  %index.next = add i64 %index, 2
  %24 = icmp eq i64 %index.next, %n.vec
  br i1 %24, label %middle.block, label %vector.body, !llvm.loop !187

middle.block:                                     ; preds = %vector.body
  %cmp.n = icmp eq i64 %17, %n.vec
  br i1 %cmp.n, label %for.cond.cleanup21, label %for.body22.preheader162

for.body22.preheader162:                          ; preds = %for.body22.preheader, %middle.block
  %indvars.iv.ph = phi i64 [ %14, %for.body22.preheader ], [ %ind.end, %middle.block ]
  br label %for.body22

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %indvars.iv887 = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next888, %for.body ]
  %elts.0877 = phi i64 [ 1, %for.body.lr.ph ], [ %mul, %for.body ]
  %arrayidx = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %9, i64 %indvars.iv887
  %arrayidx14 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 %indvars.iv887
  %25 = bitcast %struct.halide_dimension_t* %arrayidx14 to i8*
  %26 = bitcast %struct.halide_dimension_t* %arrayidx to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 dereferenceable(16) %25, i8* nonnull align 4 dereferenceable(16) %26, i64 16, i1 false), !tbaa.struct !188
  %extent = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 %indvars.iv887, i32 1
  %27 = load i32, i32* %extent, align 4, !tbaa !189
  %conv903 = zext i32 %27 to i64
  %mul = mul i64 %elts.0877, %conv903
  %indvars.iv.next888 = add nuw nsw i64 %indvars.iv887, 1
  %exitcond.not17 = icmp eq i64 %indvars.iv.next888, %13
  br i1 %exitcond.not17, label %for.cond19.preheader, label %for.body, !llvm.loop !190

for.cond.cleanup21:                               ; preds = %for.body22, %middle.block, %for.cond19.preheader
  %elts.0.lcssa906 = phi i64 [ %mul, %for.cond19.preheader ], [ %elts.0.lcssa907, %middle.block ], [ %elts.0.lcssa907, %for.body22 ]
  %bits.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 4, i32 1
  %28 = load i8, i8* %bits.i, align 1, !tbaa !144
  %conv.i = zext i8 %28 to i32
  %add.i = add nuw nsw i32 %conv.i, 7
  %div.i = lshr i32 %add.i, 3
  %call34 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal9ends_withEPKcS3_(i8* %filename, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3.37, i64 0, i64 0)) #15
  br i1 %call34, label %if.then36, label %lor.lhs.false

for.body22:                                       ; preds = %for.body22.preheader162, %for.body22
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body22 ], [ %indvars.iv.ph, %for.body22.preheader162 ]
  %min = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 %indvars.iv, i32 0
  %29 = bitcast i32* %min to <2 x i32>*
  store <2 x i32> <i32 0, i32 1>, <2 x i32>* %29, align 16, !tbaa !41
  %stride = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 %indvars.iv, i32 2
  store i32 0, i32* %stride, align 8, !tbaa !185
  %indvars.iv.next = add nsw i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond886.not = icmp eq i32 %lftr.wideiv, 4
  br i1 %exitcond886.not, label %for.cond.cleanup21, label %for.body22, !llvm.loop !191

lor.lhs.false:                                    ; preds = %for.cond.cleanup21
  %call35 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal9ends_withEPKcS3_(i8* %filename, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4.38, i64 0, i64 0)) #15
  br i1 %call35, label %if.then36, label %if.else164

if.then36:                                        ; preds = %lor.lhs.false, %for.cond.cleanup21
  %30 = load i32, i32* %extent.i, align 4, !tbaa !189
  %31 = load i32, i32* %extent.i.1, align 4, !tbaa !189
  %32 = load i32, i32* %extent.i.3, align 4, !tbaa !189
  %switch = icmp ult i32 %32, 2
  %33 = load i32, i32* %extent.i.2, align 4, !tbaa !189
  %cmp50 = icmp slt i32 %33, 5
  %or.cond = and i1 %switch, %cmp50
  %depth.0 = select i1 %or.cond, i32 1, i32 %33
  %channels.0 = select i1 %or.cond, i32 %33, i32 %32
  %34 = bitcast %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header to i8*
  call void @llvm.lifetime.start.p0i8(i64 210, i8* nonnull %34) #11
  %byte_order_marker = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 0
  store i16 18761, i16* %byte_order_marker, align 2, !tbaa !192
  %version = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 1
  store i16 42, i16* %version, align 2, !tbaa !194
  %ifd0_offset = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 2
  store i32 8, i32* %ifd0_offset, align 2, !tbaa !195
  %entry_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 3
  store i16 15, i16* %entry_count, align 2, !tbaa !196
  %tag_code2.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 0, i32 0
  store i16 256, i16* %tag_code2.i, align 2, !tbaa !197
  %type_code.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 0, i32 1
  store i16 4, i16* %type_code.i, align 2, !tbaa !199
  %count3.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 0, i32 2
  store i32 1, i32* %count3.i, align 2, !tbaa !200
  %i32.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 0, i32 3, i32 0
  store i32 %30, i32* %i32.i, align 2, !tbaa !18
  %tag_code2.i632 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 1, i32 0
  store i16 257, i16* %tag_code2.i632, align 2, !tbaa !197
  %type_code.i633 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 1, i32 1
  store i16 4, i16* %type_code.i633, align 2, !tbaa !199
  %count3.i634 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 1, i32 2
  store i32 1, i32* %count3.i634, align 2, !tbaa !200
  %i32.i635 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 1, i32 3, i32 0
  store i32 %31, i32* %i32.i635, align 2, !tbaa !18
  %35 = trunc i32 %add.i to i16
  %conv68 = and i16 %35, 504
  %tag_code2.i643 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 2, i32 0
  store i16 258, i16* %tag_code2.i643, align 2, !tbaa !197
  %type_code.i644 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 2, i32 1
  store i16 3, i16* %type_code.i644, align 2, !tbaa !199
  %count3.i645 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 2, i32 2
  store i32 1, i32* %count3.i645, align 2, !tbaa !200
  %value4.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 2, i32 3
  %i16.i = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i to i16*
  store i16 %conv68, i16* %i16.i, align 2, !tbaa !18
  %tag_code2.i653 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 3, i32 0
  store i16 259, i16* %tag_code2.i653, align 2, !tbaa !197
  %type_code.i654 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 3, i32 1
  store i16 3, i16* %type_code.i654, align 2, !tbaa !199
  %count3.i655 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 3, i32 2
  store i32 1, i32* %count3.i655, align 2, !tbaa !200
  %value4.i656 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 3, i32 3
  %i16.i657 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i656 to i16*
  store i16 1, i16* %i16.i657, align 2, !tbaa !18
  %cmp71 = icmp sgt i32 %channels.0, 2
  %conv72 = select i1 %cmp71, i16 2, i16 1
  %tag_code2.i665 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 4, i32 0
  store i16 262, i16* %tag_code2.i665, align 2, !tbaa !197
  %type_code.i666 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 4, i32 1
  store i16 3, i16* %type_code.i666, align 2, !tbaa !199
  %count3.i667 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 4, i32 2
  store i32 1, i32* %count3.i667, align 2, !tbaa !200
  %value4.i668 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 4, i32 3
  %i16.i669 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i668 to i16*
  store i16 %conv72, i16* %i16.i669, align 2, !tbaa !18
  %tag_code2.i677 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 5, i32 0
  store i16 273, i16* %tag_code2.i677, align 2, !tbaa !197
  %type_code.i678 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 5, i32 1
  store i16 4, i16* %type_code.i678, align 2, !tbaa !199
  %count3.i679 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 5, i32 2
  store i32 %channels.0, i32* %count3.i679, align 2, !tbaa !200
  %i32.i680 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 5, i32 3, i32 0
  store i32 210, i32* %i32.i680, align 2, !tbaa !18
  %conv75 = trunc i32 %channels.0 to i16
  %tag_code2.i688 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 6, i32 0
  store i16 277, i16* %tag_code2.i688, align 2, !tbaa !197
  %type_code.i689 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 6, i32 1
  store i16 3, i16* %type_code.i689, align 2, !tbaa !199
  %count3.i690 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 6, i32 2
  store i32 1, i32* %count3.i690, align 2, !tbaa !200
  %value4.i691 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 6, i32 3
  %i16.i692 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i691 to i16*
  store i16 %conv75, i16* %i16.i692, align 2, !tbaa !18
  %tag_code2.i706 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 7, i32 0
  store i16 278, i16* %tag_code2.i706, align 2, !tbaa !197
  %type_code.i707 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 7, i32 1
  store i16 4, i16* %type_code.i707, align 2, !tbaa !199
  %count3.i708 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 7, i32 2
  store i32 1, i32* %count3.i708, align 2, !tbaa !200
  %i32.i709 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 7, i32 3, i32 0
  store i32 %31, i32* %i32.i709, align 2, !tbaa !18
  %cmp80 = icmp eq i32 %channels.0, 1
  %36 = trunc i64 %elts.0.lcssa906 to i32
  %conv86595 = mul i32 %div.i, %36
  %mul84 = shl i32 %channels.0, 2
  %add = add i32 %mul84, 210
  %add.sink = select i1 %cmp80, i32 %conv86595, i32 %add
  %37 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 8, i32 0
  store i16 279, i16* %37, align 2
  %38 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 8, i32 1
  store i16 4, i16* %38, align 2
  %39 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 8, i32 2
  store i32 %channels.0, i32* %39, align 2
  %40 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 8, i32 3, i32 0
  store i32 %add.sink, i32* %40, align 2
  %tag_code2.i732 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 9, i32 0
  store i16 282, i16* %tag_code2.i732, align 2, !tbaa !197
  %type_code3.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 9, i32 1
  store i16 5, i16* %type_code3.i, align 2, !tbaa !199
  %count4.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 9, i32 2
  %41 = bitcast i32* %count4.i to <2 x i32>*
  store <2 x i32> <i32 1, i32 194>, <2 x i32>* %41, align 2, !tbaa !18
  %tag_code2.i741 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 10, i32 0
  store i16 283, i16* %tag_code2.i741, align 2, !tbaa !197
  %type_code3.i742 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 10, i32 1
  store i16 5, i16* %type_code3.i742, align 2, !tbaa !199
  %count4.i743 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 10, i32 2
  %42 = bitcast i32* %count4.i743 to <2 x i32>*
  store <2 x i32> <i32 1, i32 202>, <2 x i32>* %42, align 2, !tbaa !18
  %tag_code2.i759 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 11, i32 0
  store i16 284, i16* %tag_code2.i759, align 2, !tbaa !197
  %type_code.i760 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 11, i32 1
  store i16 3, i16* %type_code.i760, align 2, !tbaa !199
  %count3.i761 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 11, i32 2
  store i32 1, i32* %count3.i761, align 2, !tbaa !200
  %value4.i762 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 11, i32 3
  %i16.i763 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i762 to i16*
  store i16 2, i16* %i16.i763, align 2, !tbaa !18
  %tag_code2.i754 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 12, i32 0
  store i16 296, i16* %tag_code2.i754, align 2, !tbaa !197
  %type_code.i755 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 12, i32 1
  store i16 3, i16* %type_code.i755, align 2, !tbaa !199
  %count3.i756 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 12, i32 2
  store i32 1, i32* %count3.i756, align 2, !tbaa !200
  %value4.i757 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 12, i32 3
  %i16.i758 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i757 to i16*
  store i16 1, i16* %i16.i758, align 2, !tbaa !18
  %idxprom92 = sext i32 %type_code to i64
  %arrayidx93 = getelementptr inbounds [10 x i16], [10 x i16]* @_ZN6Halide7Runtime8Internal30pixel_type_to_tiff_sample_typeE, i64 0, i64 %idxprom92
  %43 = load i16, i16* %arrayidx93, align 2, !tbaa !169
  %tag_code2.i749 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 13, i32 0
  store i16 339, i16* %tag_code2.i749, align 2, !tbaa !197
  %type_code.i750 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 13, i32 1
  store i16 3, i16* %type_code.i750, align 2, !tbaa !199
  %count3.i751 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 13, i32 2
  store i32 1, i32* %count3.i751, align 2, !tbaa !200
  %value4.i752 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 13, i32 3
  %i16.i753 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i752 to i16*
  store i16 %43, i16* %i16.i753, align 2, !tbaa !18
  %tag_code2.i745 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 14, i32 0
  store i16 -32539, i16* %tag_code2.i745, align 2, !tbaa !197
  %type_code.i746 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 14, i32 1
  store i16 4, i16* %type_code.i746, align 2, !tbaa !199
  %count3.i747 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 14, i32 2
  store i32 1, i32* %count3.i747, align 2, !tbaa !200
  %i32.i748 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 14, i32 3, i32 0
  store i32 %depth.0, i32* %i32.i748, align 2, !tbaa !18
  %ifd0_end = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 5
  %44 = bitcast i32* %ifd0_end to <4 x i32>*
  store <4 x i32> <i32 0, i32 1, i32 1, i32 1>, <4 x i32>* %44, align 2, !tbaa !41
  %arrayidx100 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 7, i64 1
  store i32 1, i32* %arrayidx100, align 2, !tbaa !41
  %call.i736 = call i64 @fwrite(i8* nonnull %34, i64 210, i64 1, i8* nonnull %call.i598) #14
  %cmp.i737.not = icmp eq i64 %call.i736, 0
  br i1 %cmp.i737.not, label %cleanup154, label %if.end103

if.end103:                                        ; preds = %if.then36
  %cmp104 = icmp sgt i32 %channels.0, 1
  br i1 %cmp104, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731.lr.ph, label %cleanup154.thread

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731.lr.ph: ; preds = %if.end103
  %45 = bitcast i32* %offset to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %45) #11
  %mul108 = shl i32 %channels.0, 3
  %add109 = add i32 %mul108, 210
  store i32 %add109, i32* %offset, align 4, !tbaa !41
  %mul123 = mul i32 %depth.0, %div.i
  %46 = load i32, i32* %extent.i, align 4
  %47 = load i32, i32* %extent.i.1, align 4
  %mul124 = mul i32 %mul123, %46
  %mul125 = mul i32 %mul124, %47
  br label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731: ; preds = %if.end118, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731.lr.ph
  %i111.0865 = phi i32 [ 0, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731.lr.ph ], [ %inc128, %if.end118 ]
  %call.i727 = call i64 @fwrite(i8* nonnull %45, i64 4, i64 1, i8* nonnull %call.i598) #14
  %cmp.i728.not = icmp eq i64 %call.i727, 0
  br i1 %cmp.i728.not, label %cleanup151.thread, label %if.end118

if.end118:                                        ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731
  %48 = load i32, i32* %offset, align 4, !tbaa !41
  %add126 = add nsw i32 %mul125, %48
  store i32 %add126, i32* %offset, align 4, !tbaa !41
  %inc128 = add nuw nsw i32 %i111.0865, 1
  %exitcond881.not = icmp eq i32 %inc128, %channels.0
  br i1 %exitcond881.not, label %for.end129, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731, !llvm.loop !201

for.end129:                                       ; preds = %if.end118
  %49 = bitcast i32* %count to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %49) #11
  store i32 %mul125, i32* %count, align 4, !tbaa !41
  %inc146.1 = add nuw nsw i32 0, 1
  br label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720

for.cond138:                                      ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720
  %exitcond.not = icmp eq i32 %inc146.phi, %channels.0
  br i1 %exitcond.not, label %cleanup151, label %for.cond138._ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720_crit_edge, !llvm.loop !202

for.cond138._ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720_crit_edge: ; preds = %for.cond138
  %inc146.0 = add nuw nsw i32 %inc146.phi, 1
  br label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720: ; preds = %for.cond138._ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720_crit_edge, %for.end129
  %inc146.phi = phi i32 [ %inc146.0, %for.cond138._ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720_crit_edge ], [ %inc146.1, %for.end129 ]
  %call.i716 = call i64 @fwrite(i8* nonnull %49, i64 4, i64 1, i8* nonnull %call.i598) #14
  %cmp.i717.not = icmp eq i64 %call.i716, 0
  br i1 %cmp.i717.not, label %select.unfold, label %for.cond138

select.unfold:                                    ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %49) #11
  br label %cleanup151.thread

cleanup151.thread:                                ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731, %select.unfold
  %retval.2.ph = phi i32 [ -5, %select.unfold ], [ -4, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %45) #11
  br label %cleanup154

cleanup151:                                       ; preds = %for.cond138
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %49) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %45) #11
  br label %cleanup154.thread

cleanup154.thread:                                ; preds = %cleanup151, %if.end103
  call void @llvm.lifetime.end.p0i8(i64 210, i8* nonnull %34) #11
  br label %if.end311

cleanup154:                                       ; preds = %cleanup151.thread, %if.then36
  %retval.4 = phi i32 [ -3, %if.then36 ], [ %retval.2.ph, %cleanup151.thread ]
  call void @llvm.lifetime.end.p0i8(i64 210, i8* nonnull %34) #11
  br label %cleanup433

if.else164:                                       ; preds = %lor.lhs.false
  %call165 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal9ends_withEPKcS3_(i8* %filename, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5.39, i64 0, i64 0)) #15
  br i1 %call165, label %while.cond, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631

while.cond:                                       ; preds = %if.else164, %while.cond
  %end.0 = phi i8* [ %incdec.ptr167, %while.cond ], [ %filename, %if.else164 ]
  %50 = load i8, i8* %end.0, align 1, !tbaa !18
  %tobool.not = icmp eq i8 %50, 0
  %incdec.ptr167 = getelementptr inbounds i8, i8* %end.0, i64 1
  br i1 %tobool.not, label %while.body171, label %while.cond, !llvm.loop !203

while.cond174.preheader:                          ; preds = %while.body171
  %end.1872.lcssa883 = ptrtoint i8* %end.1872 to i64
  %51 = ptrtoint i8* %filename to i64
  %52 = sub i64 %51, %end.1872.lcssa883
  br label %while.cond174

while.body171:                                    ; preds = %while.cond, %while.body171
  %end.1872 = phi i8* [ %incdec.ptr172.ptr, %while.body171 ], [ %end.0, %while.cond ]
  %incdec.ptr172.ptr = getelementptr inbounds i8, i8* %end.1872, i64 -1
  %.pr = load i8, i8* %incdec.ptr172.ptr, align 1, !tbaa !18
  %cmp170.not = icmp eq i8 %.pr, 46
  br i1 %cmp170.not, label %while.cond174.preheader, label %while.body171, !llvm.loop !204

while.cond174:                                    ; preds = %land.rhs176, %while.cond174.preheader
  %start.0.idx = phi i64 [ %start.0.add, %land.rhs176 ], [ -1, %while.cond174.preheader ]
  %start.0.ptr.ptr = getelementptr inbounds i8, i8* %end.1872, i64 %start.0.idx
  %cmp175.not = icmp eq i8* %start.0.ptr.ptr, %filename
  br i1 %cmp175.not, label %while.end183, label %land.rhs176

land.rhs176:                                      ; preds = %while.cond174
  %start.0.add = add nsw i64 %start.0.idx, -1
  %arrayidx177.ptr = getelementptr inbounds i8, i8* %end.1872, i64 %start.0.add
  %53 = load i8, i8* %arrayidx177.ptr, align 1, !tbaa !18
  %cmp179.not = icmp eq i8 %53, 47
  br i1 %cmp179.not, label %while.end183, label %while.cond174, !llvm.loop !205

while.end183:                                     ; preds = %land.rhs176, %while.cond174
  %start.0.idx.lcssa = phi i64 [ %52, %while.cond174 ], [ %start.0.idx, %land.rhs176 ]
  %54 = trunc i64 %start.0.idx.lcssa to i32
  %conv184 = xor i32 %54, -1
  %55 = getelementptr inbounds [256 x i8], [256 x i8]* %array_name, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %55) #11
  %cmp186.not868 = icmp eq i64 %start.0.idx.lcssa, -1
  br i1 %cmp186.not868, label %iter.check, label %while.body187.preheader

while.body187.preheader:                          ; preds = %while.end183
  %56 = xor i64 %start.0.idx.lcssa, -1
  %min.iters.check40 = icmp ugt i64 %start.0.idx.lcssa, -33
  br i1 %min.iters.check40, label %while.body187.preheader160, label %vector.memcheck

vector.memcheck:                                  ; preds = %while.body187.preheader
  %57 = xor i64 %start.0.idx.lcssa, -1
  %scevgep44 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 0, i64 %57
  %scevgep45 = getelementptr i8, i8* %end.1872, i64 %start.0.idx.lcssa
  %scevgep46 = getelementptr i8, i8* %end.1872, i64 -1
  %bound0 = icmp ult i8* %array_name43, %scevgep46
  %bound1 = icmp ult i8* %scevgep45, %scevgep44
  %found.conflict = and i1 %bound0, %bound1
  br i1 %found.conflict, label %while.body187.preheader160, label %vector.ph42

vector.ph42:                                      ; preds = %vector.memcheck
  %n.vec48 = and i64 %56, -32
  %ind.end52 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 0, i64 %n.vec48
  %ind.end54 = add i64 %start.0.idx.lcssa, %n.vec48
  br label %vector.body39

vector.body39:                                    ; preds = %vector.body39, %vector.ph42
  %index49 = phi i64 [ 0, %vector.ph42 ], [ %index.next50, %vector.body39 ]
  %next.gep = getelementptr [256 x i8], [256 x i8]* %array_name, i64 0, i64 %index49
  %offset.idx57 = add i64 %start.0.idx.lcssa, %index49
  %58 = getelementptr inbounds i8, i8* %end.1872, i64 %offset.idx57
  %59 = bitcast i8* %58 to <16 x i8>*
  %wide.load = load <16 x i8>, <16 x i8>* %59, align 1, !tbaa !18, !alias.scope !206
  %60 = getelementptr inbounds i8, i8* %58, i64 16
  %61 = bitcast i8* %60 to <16 x i8>*
  %wide.load58 = load <16 x i8>, <16 x i8>* %61, align 1, !tbaa !18, !alias.scope !206
  %62 = bitcast i8* %next.gep to <16 x i8>*
  store <16 x i8> %wide.load, <16 x i8>* %62, align 1, !tbaa !18, !alias.scope !209, !noalias !206
  %63 = getelementptr i8, i8* %next.gep, i64 16
  %64 = bitcast i8* %63 to <16 x i8>*
  store <16 x i8> %wide.load58, <16 x i8>* %64, align 1, !tbaa !18, !alias.scope !209, !noalias !206
  %index.next50 = add i64 %index49, 32
  %65 = icmp eq i64 %index.next50, %n.vec48
  br i1 %65, label %middle.block37, label %vector.body39, !llvm.loop !211

middle.block37:                                   ; preds = %vector.body39
  %cmp.n55 = icmp eq i64 %n.vec48, %56
  br i1 %cmp.n55, label %while.cond191.preheader, label %while.body187.preheader160

while.body187.preheader160:                       ; preds = %vector.memcheck, %while.body187.preheader, %middle.block37
  %dst.0870.ph = phi i8* [ %55, %vector.memcheck ], [ %55, %while.body187.preheader ], [ %ind.end52, %middle.block37 ]
  %start.1869.idx.ph = phi i64 [ %start.0.idx.lcssa, %vector.memcheck ], [ %start.0.idx.lcssa, %while.body187.preheader ], [ %ind.end54, %middle.block37 ]
  br label %while.body187

while.cond191.preheader:                          ; preds = %while.body187, %middle.block37
  %incdec.ptr189.lcssa = phi i8* [ %ind.end52, %middle.block37 ], [ %incdec.ptr189, %while.body187 ]
  %add.ptr = getelementptr inbounds [256 x i8], [256 x i8]* %array_name, i64 0, i64 256
  %cmp193866 = icmp ult i8* %incdec.ptr189.lcssa, %add.ptr
  br i1 %cmp193866, label %iter.check, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705

iter.check:                                       ; preds = %while.cond191.preheader, %while.end183
  %dst.0.lcssa911 = phi i8* [ %incdec.ptr189.lcssa, %while.cond191.preheader ], [ %55, %while.end183 ]
  %dst.0.lcssa91162 = ptrtoint i8* %dst.0.lcssa911 to i64
  %scevgep = getelementptr inbounds [256 x i8], [256 x i8]* %array_name, i64 1, i64 0
  %66 = sub i64 0, %dst.0.lcssa91162
  %scevgep63 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 1, i64 %66
  %exitcount.ptrcnt.to.int = ptrtoint i8* %scevgep63 to i64
  %min.iters.check65 = icmp ult i8* %scevgep63, inttoptr (i64 4 to i8*)
  br i1 %min.iters.check65, label %while.body194.preheader, label %vector.main.loop.iter.check

vector.main.loop.iter.check:                      ; preds = %iter.check
  %min.iters.check67 = icmp ult i8* %scevgep63, inttoptr (i64 32 to i8*)
  br i1 %min.iters.check67, label %vec.epilog.ph, label %vector.ph68

vector.ph68:                                      ; preds = %vector.main.loop.iter.check
  %n.vec70 = and i64 %exitcount.ptrcnt.to.int, -32
  %next.gep74.0 = getelementptr i8, i8* %dst.0.lcssa911, i64 0
  %index.next72.0 = add i64 0, 32
  br label %vector.body61

vector.body61:                                    ; preds = %vector.body61.vector.body61_crit_edge, %vector.ph68
  %index.next72.phi = phi i64 [ %index.next72.0, %vector.ph68 ], [ %index.next72.1, %vector.body61.vector.body61_crit_edge ]
  %next.gep74.phi = phi i8* [ %next.gep74.0, %vector.ph68 ], [ %next.gep74.1, %vector.body61.vector.body61_crit_edge ]
  %67 = bitcast i8* %next.gep74.phi to <16 x i8>*
  store <16 x i8> zeroinitializer, <16 x i8>* %67, align 1, !tbaa !18
  %68 = getelementptr i8, i8* %next.gep74.phi, i64 16
  %69 = bitcast i8* %68 to <16 x i8>*
  store <16 x i8> zeroinitializer, <16 x i8>* %69, align 1, !tbaa !18
  %70 = icmp eq i64 %index.next72.phi, %n.vec70
  br i1 %70, label %middle.block59, label %vector.body61.vector.body61_crit_edge, !llvm.loop !212

vector.body61.vector.body61_crit_edge:            ; preds = %vector.body61
  %next.gep74.1 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index.next72.phi
  %index.next72.1 = add i64 %index.next72.phi, 32
  br label %vector.body61

middle.block59:                                   ; preds = %vector.body61
  %cmp.n73 = icmp eq i64 %n.vec70, %exitcount.ptrcnt.to.int
  br i1 %cmp.n73, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705, label %vec.epilog.iter.check

vec.epilog.iter.check:                            ; preds = %middle.block59
  %ind.end85 = getelementptr i8, i8* %dst.0.lcssa911, i64 %n.vec70
  %n.vec.remaining = and i64 %exitcount.ptrcnt.to.int, 28
  %min.epilog.iters.check = icmp eq i64 %n.vec.remaining, 0
  br i1 %min.epilog.iters.check, label %while.body194.preheader, label %vec.epilog.ph

vec.epilog.ph:                                    ; preds = %vector.main.loop.iter.check, %vec.epilog.iter.check
  %vec.epilog.resume.val = phi i64 [ %n.vec70, %vec.epilog.iter.check ], [ 0, %vector.main.loop.iter.check ]
  %71 = sub i64 0, %dst.0.lcssa91162
  %scevgep76 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 1, i64 %71
  %exitcount.ptrcnt.to.int78 = ptrtoint i8* %scevgep76 to i64
  %n.vec80 = and i64 %exitcount.ptrcnt.to.int78, -4
  %ind.end84 = getelementptr i8, i8* %dst.0.lcssa911, i64 %n.vec80
  br label %vec.epilog.vector.body

vec.epilog.vector.body:                           ; preds = %vec.epilog.vector.body, %vec.epilog.ph
  %index81 = phi i64 [ %vec.epilog.resume.val, %vec.epilog.ph ], [ %index.next82, %vec.epilog.vector.body ]
  %next.gep87 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index81
  %72 = bitcast i8* %next.gep87 to <4 x i8>*
  store <4 x i8> zeroinitializer, <4 x i8>* %72, align 1, !tbaa !18
  %index.next82 = add i64 %index81, 4
  %73 = icmp eq i64 %index.next82, %n.vec80
  br i1 %73, label %vec.epilog.middle.block, label %vec.epilog.vector.body, !llvm.loop !213

vec.epilog.middle.block:                          ; preds = %vec.epilog.vector.body
  %cmp.n86 = icmp eq i64 %n.vec80, %exitcount.ptrcnt.to.int78
  br i1 %cmp.n86, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705, label %while.body194.preheader

while.body194.preheader:                          ; preds = %iter.check, %vec.epilog.iter.check, %vec.epilog.middle.block
  %dst.1867.ph = phi i8* [ %dst.0.lcssa911, %iter.check ], [ %ind.end85, %vec.epilog.iter.check ], [ %ind.end84, %vec.epilog.middle.block ]
  br label %while.body194

while.body187:                                    ; preds = %while.body187.preheader160, %while.body187
  %dst.0870 = phi i8* [ %incdec.ptr189, %while.body187 ], [ %dst.0870.ph, %while.body187.preheader160 ]
  %start.1869.idx = phi i64 [ %start.1869.add, %while.body187 ], [ %start.1869.idx.ph, %while.body187.preheader160 ]
  %start.1869.ptr = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.idx
  %start.1869.add = add nuw nsw i64 %start.1869.idx, 1
  %74 = load i8, i8* %start.1869.ptr, align 1, !tbaa !18
  %incdec.ptr189 = getelementptr inbounds i8, i8* %dst.0870, i64 1
  store i8 %74, i8* %dst.0870, align 1, !tbaa !18
  %cmp186.not = icmp eq i64 %start.1869.add, -1
  br i1 %cmp186.not, label %while.cond191.preheader, label %while.body187, !llvm.loop !214

while.body194:                                    ; preds = %while.body194.preheader, %while.body194
  %dst.1867 = phi i8* [ %incdec.ptr195, %while.body194 ], [ %dst.1867.ph, %while.body194.preheader ]
  %incdec.ptr195 = getelementptr inbounds i8, i8* %dst.1867, i64 1
  store i8 0, i8* %dst.1867, align 1, !tbaa !18
  %exitcond882.not = icmp eq i8* %incdec.ptr195, %scevgep
  br i1 %exitcond882.not, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705, label %while.body194, !llvm.loop !215

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705: ; preds = %while.body194, %middle.block59, %vec.epilog.middle.block, %while.cond191.preheader
  %add197 = sub i32 6, %54
  %and = and i32 %add197, -8
  %75 = getelementptr inbounds [129 x i8], [129 x i8]* %header198, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 129, i8* nonnull %75) #11
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 dereferenceable(129) %75, i8* nonnull align 1 dereferenceable(129) getelementptr inbounds ([129 x i8], [129 x i8]* @__const.halide_debug_to_file.header, i64 0, i64 0), i64 129, i1 false)
  %call.i701 = call i64 @fwrite(i8* nonnull %75, i64 128, i64 1, i8* nonnull %call.i598) #14
  %76 = load i32, i32* %dimensions, align 4, !tbaa !183
  %cmp19.i.i = icmp sgt i32 %76, 0
  br i1 %cmp19.i.i, label %for.body.lr.ph.i.i, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge: ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705
  %sub.i694.0 = sub nsw i64 1, 0
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.lr.ph.i.i:                               ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  %77 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8, !tbaa !184
  %wide.trip.count.i.i = zext i32 %76 to i64
  %min.iters.check91 = icmp ult i32 %76, 3
  br i1 %min.iters.check91, label %for.body.i.i.preheader, label %vector.ph92

vector.ph92:                                      ; preds = %for.body.lr.ph.i.i
  %n.vec94 = and i64 %wide.trip.count.i.i, 4294967294
  br label %vector.body90

vector.body90:                                    ; preds = %pred.load.continue103, %vector.ph92
  %index95 = phi i64 [ 0, %vector.ph92 ], [ %index.next96, %pred.load.continue103 ]
  %vec.phi = phi i64 [ 0, %vector.ph92 ], [ %predphi, %pred.load.continue103 ]
  %vec.phi101 = phi i64 [ 0, %vector.ph92 ], [ %predphi104, %pred.load.continue103 ]
  %induction100 = or i64 %index95, 1
  %78 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %77, i64 %index95, i32 2
  %79 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %77, i64 %induction100, i32 2
  %80 = load i32, i32* %78, align 4, !tbaa !185
  %81 = load i32, i32* %79, align 4, !tbaa !185
  %82 = icmp sgt i32 %80, 0
  %83 = icmp sgt i32 %81, 0
  %84 = zext i32 %80 to i64
  %85 = zext i32 %81 to i64
  br i1 %82, label %pred.load.if, label %pred.load.continue

pred.load.if:                                     ; preds = %vector.body90
  %86 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %77, i64 %index95, i32 1
  %87 = load i32, i32* %86, align 4, !tbaa !189
  br label %pred.load.continue

pred.load.continue:                               ; preds = %pred.load.if, %vector.body90
  %88 = phi i32 [ poison, %vector.body90 ], [ %87, %pred.load.if ]
  br i1 %83, label %pred.load.if102, label %pred.load.continue103

pred.load.if102:                                  ; preds = %pred.load.continue
  %89 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %77, i64 %induction100, i32 1
  %90 = load i32, i32* %89, align 4, !tbaa !189
  br label %pred.load.continue103

pred.load.continue103:                            ; preds = %pred.load.if102, %pred.load.continue
  %91 = phi i32 [ poison, %pred.load.continue ], [ %90, %pred.load.if102 ]
  %92 = add nsw i32 %88, -1
  %93 = add nsw i32 %91, -1
  %94 = sext i32 %92 to i64
  %95 = sext i32 %93 to i64
  %96 = mul nsw i64 %94, %84
  %97 = mul nsw i64 %95, %85
  %98 = select i1 %82, i64 %96, i64 0
  %predphi = add i64 %vec.phi, %98
  %99 = select i1 %83, i64 %97, i64 0
  %predphi104 = add i64 %vec.phi101, %99
  %index.next96 = add i64 %index95, 2
  %100 = icmp eq i64 %index.next96, %n.vec94
  br i1 %100, label %middle.block88, label %vector.body90, !llvm.loop !217

middle.block88:                                   ; preds = %pred.load.continue103
  %bin.rdx = add i64 %predphi104, %predphi
  %cmp.n98 = icmp eq i64 %n.vec94, %wide.trip.count.i.i
  br i1 %cmp.n98, label %for.body.i13.i.preheader, label %for.body.i.i.preheader

for.body.i.i.preheader:                           ; preds = %for.body.lr.ph.i.i, %middle.block88
  %indvars.iv.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %n.vec94, %middle.block88 ]
  %index.021.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %bin.rdx, %middle.block88 ]
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.body.i.i.preheader, %if.end.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %if.end.i.i ], [ %indvars.iv.i.i.ph, %for.body.i.i.preheader ]
  %index.021.i.i = phi i64 [ %index.1.i.i, %if.end.i.i ], [ %index.021.i.i.ph, %for.body.i.i.preheader ]
  %stride2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %77, i64 %indvars.iv.i.i, i32 2
  %101 = load i32, i32* %stride2.i.i, align 4, !tbaa !185
  %cmp3.i.i = icmp sgt i32 %101, 0
  br i1 %cmp3.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %conv18.i.i = zext i32 %101 to i64
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %77, i64 %indvars.iv.i.i, i32 1
  %102 = load i32, i32* %extent.i.i, align 4, !tbaa !189
  %sub.i.i = add nsw i32 %102, -1
  %conv7.i.i = sext i32 %sub.i.i to i64
  %mul.i.i = mul nsw i64 %conv7.i.i, %conv18.i.i
  %add.i.i693 = add nsw i64 %mul.i.i, %index.021.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i64 [ %add.i.i693, %if.then.i.i ], [ %index.021.i.i, %for.body.i.i ]
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %exitcond.not.i.i = icmp eq i64 %indvars.iv.next.i.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i.i, label %for.body.i13.i.preheader, label %for.body.i.i, !llvm.loop !218

for.body.i13.i.preheader:                         ; preds = %if.end.i.i, %middle.block88
  %index.1.i.i.lcssa = phi i64 [ %bin.rdx, %middle.block88 ], [ %index.1.i.i, %if.end.i.i ]
  %min.iters.check108 = icmp ult i32 %76, 3
  br i1 %min.iters.check108, label %for.body.i13.i.preheader157, label %vector.ph109

vector.ph109:                                     ; preds = %for.body.i13.i.preheader
  %n.vec111 = and i64 %wide.trip.count.i.i, 4294967294
  br label %vector.body107

vector.body107:                                   ; preds = %pred.load.continue123, %vector.ph109
  %index112 = phi i64 [ 0, %vector.ph109 ], [ %index.next113, %pred.load.continue123 ]
  %vec.phi118 = phi i64 [ 0, %vector.ph109 ], [ %predphi124, %pred.load.continue123 ]
  %vec.phi119 = phi i64 [ 0, %vector.ph109 ], [ %predphi125, %pred.load.continue123 ]
  %induction117 = or i64 %index112, 1
  %103 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %77, i64 %index112, i32 2
  %104 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %77, i64 %induction117, i32 2
  %105 = load i32, i32* %103, align 4, !tbaa !185
  %106 = load i32, i32* %104, align 4, !tbaa !185
  %107 = icmp slt i32 %105, 0
  %108 = icmp slt i32 %106, 0
  %109 = sext i32 %105 to i64
  %110 = sext i32 %106 to i64
  br i1 %107, label %pred.load.if120, label %pred.load.continue121

pred.load.if120:                                  ; preds = %vector.body107
  %111 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %77, i64 %index112, i32 1
  %112 = load i32, i32* %111, align 4, !tbaa !189
  br label %pred.load.continue121

pred.load.continue121:                            ; preds = %pred.load.if120, %vector.body107
  %113 = phi i32 [ poison, %vector.body107 ], [ %112, %pred.load.if120 ]
  br i1 %108, label %pred.load.if122, label %pred.load.continue123

pred.load.if122:                                  ; preds = %pred.load.continue121
  %114 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %77, i64 %induction117, i32 1
  %115 = load i32, i32* %114, align 4, !tbaa !189
  br label %pred.load.continue123

pred.load.continue123:                            ; preds = %pred.load.if122, %pred.load.continue121
  %116 = phi i32 [ poison, %pred.load.continue121 ], [ %115, %pred.load.if122 ]
  %117 = add nsw i32 %113, -1
  %118 = add nsw i32 %116, -1
  %119 = sext i32 %117 to i64
  %120 = sext i32 %118 to i64
  %121 = mul nsw i64 %119, %109
  %122 = mul nsw i64 %120, %110
  %123 = select i1 %107, i64 %121, i64 0
  %predphi124 = add i64 %vec.phi118, %123
  %124 = select i1 %108, i64 %122, i64 0
  %predphi125 = add i64 %vec.phi119, %124
  %index.next113 = add i64 %index112, 2
  %125 = icmp eq i64 %index.next113, %n.vec111
  br i1 %125, label %middle.block105, label %vector.body107, !llvm.loop !219

middle.block105:                                  ; preds = %pred.load.continue123
  %bin.rdx126 = add i64 %predphi125, %predphi124
  %cmp.n115 = icmp eq i64 %n.vec111, %wide.trip.count.i.i
  br i1 %cmp.n115, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i.preheader157

for.body.i13.i.preheader157:                      ; preds = %for.body.i13.i.preheader, %middle.block105
  %indvars.iv.i10.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %n.vec111, %middle.block105 ]
  %index.018.i.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %bin.rdx126, %middle.block105 ]
  br label %for.body.i13.i

for.body.i13.i:                                   ; preds = %for.body.i13.i.preheader157, %if.end.i24.i
  %indvars.iv.i10.i = phi i64 [ %indvars.iv.next.i22.i, %if.end.i24.i ], [ %indvars.iv.i10.i.ph, %for.body.i13.i.preheader157 ]
  %index.018.i.i = phi i64 [ %index.1.i21.i, %if.end.i24.i ], [ %index.018.i.i.ph, %for.body.i13.i.preheader157 ]
  %stride2.i11.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %77, i64 %indvars.iv.i10.i, i32 2
  %126 = load i32, i32* %stride2.i11.i, align 4, !tbaa !185
  %cmp3.i12.i = icmp slt i32 %126, 0
  br i1 %cmp3.i12.i, label %if.then.i20.i, label %if.end.i24.i

if.then.i20.i:                                    ; preds = %for.body.i13.i
  %conv.i14.i = sext i32 %126 to i64
  %extent.i15.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %77, i64 %indvars.iv.i10.i, i32 1
  %127 = load i32, i32* %extent.i15.i, align 4, !tbaa !189
  %sub.i16.i = add nsw i32 %127, -1
  %conv7.i17.i = sext i32 %sub.i16.i to i64
  %mul.i18.i = mul nsw i64 %conv7.i17.i, %conv.i14.i
  %add.i19.i = add nsw i64 %mul.i18.i, %index.018.i.i
  br label %if.end.i24.i

if.end.i24.i:                                     ; preds = %if.then.i20.i, %for.body.i13.i
  %index.1.i21.i = phi i64 [ %add.i19.i, %if.then.i20.i ], [ %index.018.i.i, %for.body.i13.i ]
  %indvars.iv.next.i22.i = add nuw nsw i64 %indvars.iv.i10.i, 1
  %exitcond.not.i23.i = icmp eq i64 %indvars.iv.next.i22.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i23.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i, !llvm.loop !220

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %if.end.i24.i, %middle.block105
  %index.1.i21.i.lcssa = phi i64 [ %bin.rdx126, %middle.block105 ], [ %index.1.i21.i, %if.end.i24.i ]
  %add8.i.i = add nsw i64 %index.1.i.i.lcssa, 1
  %sub.i694.1 = sub nsw i64 %add8.i.i, %index.1.i21.i.lcssa
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit
  %add8.i27.i = phi i64 [ 1, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge ], [ %add8.i.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %sub.i694.phi = phi i64 [ %sub.i694.0, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge ], [ %sub.i694.1, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %128 = load i8, i8* %bits.i, align 1, !tbaa !144
  %conv.i.i696 = zext i8 %128 to i64
  %add.i4.i = add nuw nsw i64 %conv.i.i696, 7
  %div.i.i697 = lshr i64 %add.i4.i, 3
  %mul.i698 = mul i64 %div.i.i697, %sub.i694.phi
  %129 = trunc i64 %mul.i698 to i32
  %130 = add i32 %129, 7
  %131 = and i32 %130, 7
  %conv204 = xor i32 %131, 7
  %conv205 = zext i32 %conv204 to i64
  %add206 = add i64 %mul.i698, %conv205
  %tobool207.not = icmp ult i64 %add206, 4294967296
  br i1 %tobool207.not, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687, label %cleanup278.thread

cleanup278.thread:                                ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.6.40, i64 0, i64 0)) #14
  call void @llvm.lifetime.end.p0i8(i64 129, i8* nonnull %75) #11
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %55) #11
  br label %cleanup433

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687: ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  %132 = icmp sgt i32 %76, 2
  %spec.store.select = select i1 %132, i32 %76, i32 2
  %133 = bitcast [8 x i32]* %tags to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %133) #11
  %arrayinit.begin = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 0
  store i32 14, i32* %arrayinit.begin, align 4, !tbaa !41
  %arrayinit.element = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 1
  %add214 = shl i32 %spec.store.select, 2
  %and215 = add i32 %add214, 4
  %mul216 = and i32 %and215, -8
  %add217 = add i32 %and, 40
  %add218 = add i32 %add217, %mul216
  %add220 = add i32 %add218, %129
  %add221 = add i32 %add220, %conv204
  store i32 %add221, i32* %arrayinit.element, align 4, !tbaa !41
  %arrayinit.element222 = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 2
  %134 = bitcast i32* %arrayinit.element222 to <2 x i32>*
  store <2 x i32> <i32 6, i32 8>, <2 x i32>* %134, align 4, !tbaa !41
  %arrayinit.element224 = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 4
  %idxprom225 = sext i32 %type_code to i64
  %arrayidx226 = getelementptr inbounds [10 x i8], [10 x i8]* @_ZN6Halide7Runtime8Internal31pixel_type_to_matlab_class_codeE, i64 0, i64 %idxprom225
  %135 = load i8, i8* %arrayidx226, align 1, !tbaa !18
  %conv227 = zext i8 %135 to i32
  store i32 %conv227, i32* %arrayinit.element224, align 4, !tbaa !41
  %arrayinit.element228 = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 5
  %136 = bitcast i32* %arrayinit.element228 to <2 x i32>*
  store <2 x i32> <i32 1, i32 5>, <2 x i32>* %136, align 4, !tbaa !41
  %arrayinit.element230 = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 7
  store i32 %add214, i32* %arrayinit.element230, align 4, !tbaa !41
  %call.i683 = call i64 @fwrite(i8* nonnull %133, i64 32, i64 1, i8* nonnull %call.i598) #14
  %cmp.i684.not = icmp eq i64 %call.i683, 0
  br i1 %cmp.i684.not, label %cleanup278, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676: ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687
  %137 = bitcast [4 x i32]* %extents to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %137) #11
  %arrayinit.begin235 = getelementptr inbounds [4 x i32], [4 x i32]* %extents, i64 0, i64 0
  %138 = load i32, i32* %extent.i, align 4, !tbaa !189
  store i32 %138, i32* %arrayinit.begin235, align 4, !tbaa !41
  %arrayinit.element238 = getelementptr inbounds [4 x i32], [4 x i32]* %extents, i64 0, i64 1
  %139 = load i32, i32* %extent.i.1, align 4, !tbaa !189
  store i32 %139, i32* %arrayinit.element238, align 4, !tbaa !41
  %arrayinit.element241 = getelementptr inbounds [4 x i32], [4 x i32]* %extents, i64 0, i64 2
  %140 = load i32, i32* %extent.i.2, align 4, !tbaa !189
  store i32 %140, i32* %arrayinit.element241, align 4, !tbaa !41
  %arrayinit.element244 = getelementptr inbounds [4 x i32], [4 x i32]* %extents, i64 0, i64 3
  %141 = load i32, i32* %extent.i.3, align 4, !tbaa !189
  store i32 %141, i32* %arrayinit.element244, align 4, !tbaa !41
  %conv248 = sext i32 %mul216 to i64
  %call.i672 = call i64 @fwrite(i8* nonnull %137, i64 %conv248, i64 1, i8* nonnull %call.i598) #14
  %cmp.i673.not = icmp eq i64 %call.i672, 0
  br i1 %cmp.i673.not, label %cleanup274, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664: ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676
  %142 = bitcast [2 x i32]* %name_header to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %142) #11
  %arrayinit.begin252 = getelementptr inbounds [2 x i32], [2 x i32]* %name_header, i64 0, i64 0
  store i32 1, i32* %arrayinit.begin252, align 4, !tbaa !41
  %arrayinit.element253 = getelementptr inbounds [2 x i32], [2 x i32]* %name_header, i64 0, i64 1
  store i32 %conv184, i32* %arrayinit.element253, align 4, !tbaa !41
  %call.i660 = call i64 @fwrite(i8* nonnull %142, i64 8, i64 1, i8* nonnull %call.i598) #14
  %cmp.i661.not = icmp eq i64 %call.i660, 0
  br i1 %cmp.i661.not, label %cleanup273, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652: ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664
  %conv258 = zext i32 %and to i64
  %call.i648 = call i64 @fwrite(i8* nonnull %55, i64 %conv258, i64 1, i8* nonnull %call.i598) #14
  %cmp.i649.not = icmp eq i64 %call.i648, 0
  br i1 %cmp.i649.not, label %cleanup273, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit642

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit642: ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652
  %143 = bitcast [2 x i32]* %payload_header to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %143) #11
  %arrayinit.begin262 = getelementptr inbounds [2 x i32], [2 x i32]* %payload_header, i64 0, i64 0
  %arrayidx264 = getelementptr inbounds [10 x i8], [10 x i8]* @_ZN6Halide7Runtime8Internal30pixel_type_to_matlab_type_codeE, i64 0, i64 %idxprom225
  %144 = load i8, i8* %arrayidx264, align 1, !tbaa !18
  %conv265 = zext i8 %144 to i32
  store i32 %conv265, i32* %arrayinit.begin262, align 4, !tbaa !41
  %arrayinit.element266 = getelementptr inbounds [2 x i32], [2 x i32]* %payload_header, i64 0, i64 1
  store i32 %129, i32* %arrayinit.element266, align 4, !tbaa !41
  %call.i638 = call i64 @fwrite(i8* nonnull %143, i64 8, i64 1, i8* nonnull %call.i598) #14
  %cmp.i639.not = icmp eq i64 %call.i638, 0
  %cleanup.dest.slot.5 = zext i1 %cmp.i639.not to i32
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %143) #11
  br label %cleanup273

cleanup273:                                       ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit642, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664
  %cleanup.dest.slot.6 = phi i32 [ %cleanup.dest.slot.5, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit642 ], [ 1, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664 ], [ 1, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652 ]
  %retval.6 = phi i32 [ -11, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit642 ], [ -9, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664 ], [ -10, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %142) #11
  br label %cleanup274

cleanup274:                                       ; preds = %cleanup273, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676
  %cleanup.dest.slot.7 = phi i32 [ %cleanup.dest.slot.6, %cleanup273 ], [ 1, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676 ]
  %retval.7 = phi i32 [ %retval.6, %cleanup273 ], [ -8, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %137) #11
  br label %cleanup278

cleanup278:                                       ; preds = %cleanup274, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687
  %cleanup.dest.slot.8 = phi i32 [ %cleanup.dest.slot.7, %cleanup274 ], [ 1, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687 ]
  %retval.8 = phi i32 [ %retval.7, %cleanup274 ], [ -7, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %133) #11
  call void @llvm.lifetime.end.p0i8(i64 129, i8* nonnull %75) #11
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %55) #11
  %cond442 = icmp eq i32 %cleanup.dest.slot.8, 0
  br i1 %cond442, label %if.end311, label %cleanup433

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631: ; preds = %if.else164
  %145 = bitcast [5 x i32]* %header289 to i8*
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %145) #11
  %arrayinit.begin290 = getelementptr inbounds [5 x i32], [5 x i32]* %header289, i64 0, i64 0
  %146 = load i32, i32* %extent.i, align 4, !tbaa !189
  store i32 %146, i32* %arrayinit.begin290, align 4, !tbaa !41
  %arrayinit.element293 = getelementptr inbounds [5 x i32], [5 x i32]* %header289, i64 0, i64 1
  %147 = load i32, i32* %extent.i.1, align 4, !tbaa !189
  store i32 %147, i32* %arrayinit.element293, align 4, !tbaa !41
  %arrayinit.element296 = getelementptr inbounds [5 x i32], [5 x i32]* %header289, i64 0, i64 2
  %148 = load i32, i32* %extent.i.2, align 4, !tbaa !189
  store i32 %148, i32* %arrayinit.element296, align 4, !tbaa !41
  %arrayinit.element299 = getelementptr inbounds [5 x i32], [5 x i32]* %header289, i64 0, i64 3
  %149 = load i32, i32* %extent.i.3, align 4, !tbaa !189
  store i32 %149, i32* %arrayinit.element299, align 4, !tbaa !41
  %arrayinit.element302 = getelementptr inbounds [5 x i32], [5 x i32]* %header289, i64 0, i64 4
  store i32 %type_code, i32* %arrayinit.element302, align 4, !tbaa !41
  %call.i627 = call i64 @fwrite(i8* nonnull %145, i64 20, i64 1, i8* nonnull %call.i598) #14
  %cmp.i628.not = icmp eq i64 %call.i627, 0
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %145) #11
  br i1 %cmp.i628.not, label %cleanup433, label %if.end311

if.end311:                                        ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631, %cleanup278, %cleanup154.thread
  %final_padding_bytes.0 = phi i32 [ %conv204, %cleanup278 ], [ 0, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631 ], [ 0, %cleanup154.thread ]
  %150 = getelementptr inbounds [4096 x i8], [4096 x i8]* %temp, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %150) #11
  %div = udiv i32 4096, %div.i
  %151 = load i32, i32* %extent.i.3, align 4, !tbaa !189
  %cmp320856 = icmp sgt i32 %151, 0
  br i1 %cmp320856, label %for.body322.lr.ph, label %if.end412

for.body322.lr.ph:                                ; preds = %if.end311
  %152 = load i32, i32* %min.i.3, align 16, !tbaa !221
  %153 = bitcast [4 x i32]* %idx to i8*
  %arrayinit.begin357 = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 0
  %arrayinit.element358 = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 1
  %arrayinit.element359 = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 2
  %arrayinit.element360 = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 3
  %dim.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  %conv368 = zext i32 %div.i to i64
  %mul373 = mul nuw nsw i32 %div, %div.i
  %conv374 = zext i32 %mul373 to i64
  %.pre891 = load i32, i32* %min.i.2, align 16, !tbaa !221
  %.pre892 = load i32, i32* %extent.i.2, align 4, !tbaa !189
  %.pre893 = load i32, i32* %min.i.1, align 16
  %.pre894 = load i32, i32* %extent.i.1, align 4
  %.pre = load i32, i32* %extent.i, align 4
  %154 = load i32, i32* %min.i, align 16
  %155 = load i32, i32* %extent.i, align 4
  %156 = load i32, i32* %min.i, align 16
  %add352 = add nsw i32 %156, %155
  %.pre15 = load i32, i32* %extent.i.1, align 4
  %.pre16 = load i32, i32* %min.i.1, align 16
  %.pre896 = load i32, i32* %extent.i.2, align 4
  %.pre897 = load i32, i32* %min.i.2, align 16
  %.pre898 = load i32, i32* %extent.i.3, align 4
  %.pre899 = load i32, i32* %min.i.3, align 16
  br label %for.body322

for.body322:                                      ; preds = %for.inc399, %for.body322.lr.ph
  %157 = phi i32 [ %152, %for.body322.lr.ph ], [ %218, %for.inc399 ]
  %158 = phi i32 [ %151, %for.body322.lr.ph ], [ %219, %for.inc399 ]
  %159 = phi i32 [ %.pre891, %for.body322.lr.ph ], [ %220, %for.inc399 ]
  %160 = phi i32 [ %.pre892, %for.body322.lr.ph ], [ %221, %for.inc399 ]
  %161 = phi i32 [ %.pre892, %for.body322.lr.ph ], [ %222, %for.inc399 ]
  %162 = phi i32 [ %.pre891, %for.body322.lr.ph ], [ %223, %for.inc399 ]
  %dim3.0858 = phi i32 [ %152, %for.body322.lr.ph ], [ %inc400, %for.inc399 ]
  %counter.0857 = phi i32 [ 0, %for.body322.lr.ph ], [ %counter.1.lcssa, %for.inc399 ]
  %cmp331848 = icmp sgt i32 %161, 0
  br i1 %cmp331848, label %for.body333, label %for.inc399

for.body333:                                      ; preds = %for.body322, %for.inc394
  %163 = phi i32 [ %212, %for.inc394 ], [ %.pre893, %for.body322 ]
  %164 = phi i32 [ %213, %for.inc394 ], [ %.pre894, %for.body322 ]
  %165 = phi i32 [ %214, %for.inc394 ], [ %159, %for.body322 ]
  %166 = phi i32 [ %215, %for.inc394 ], [ %160, %for.body322 ]
  %167 = phi i32 [ %216, %for.inc394 ], [ %.pre894, %for.body322 ]
  %168 = phi i32 [ %217, %for.inc394 ], [ %.pre893, %for.body322 ]
  %dim2.0850 = phi i32 [ %inc395, %for.inc394 ], [ %162, %for.body322 ]
  %counter.1849 = phi i32 [ %counter.2.lcssa, %for.inc394 ], [ %counter.0857, %for.body322 ]
  %cmp342839 = icmp sgt i32 %167, 0
  br i1 %cmp342839, label %for.body344, label %for.inc394

for.body344:                                      ; preds = %for.body333, %for.inc389
  %169 = phi i32 [ %209, %for.inc389 ], [ %163, %for.body333 ]
  %170 = phi i32 [ %210, %for.inc389 ], [ %164, %for.body333 ]
  %171 = phi i32 [ %211, %for.inc389 ], [ %.pre, %for.body333 ]
  %dim1.0841 = phi i32 [ %inc390, %for.inc389 ], [ %168, %for.body333 ]
  %counter.2840 = phi i32 [ %counter.6797, %for.inc389 ], [ %counter.1849, %for.body333 ]
  %cmp353834 = icmp sgt i32 %171, 0
  br i1 %cmp353834, label %for.body355, label %for.inc389

for.body355:                                      ; preds = %for.body344, %for.inc384
  %dim0.0836 = phi i32 [ %inc385, %for.inc384 ], [ %154, %for.body344 ]
  %counter.3835 = phi i32 [ %counter.4, %for.inc384 ], [ %counter.2840, %for.body344 ]
  %inc356 = add nsw i32 %counter.3835, 1
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %153) #11
  store i32 %dim0.0836, i32* %arrayinit.begin357, align 4, !tbaa !41
  store i32 %dim1.0841, i32* %arrayinit.element358, align 4, !tbaa !41
  store i32 %dim2.0850, i32* %arrayinit.element359, align 4, !tbaa !41
  store i32 %dim3.0858, i32* %arrayinit.element360, align 4, !tbaa !41
  %172 = load i32, i32* %dimensions, align 4, !tbaa !183
  %cmp17.i = icmp sgt i32 %172, 0
  br i1 %cmp17.i, label %for.body.lr.ph.i, label %_ZNK15halide_buffer_t10address_ofEPKi.exit

for.body.lr.ph.i:                                 ; preds = %for.body355
  %173 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i, align 8, !tbaa !184
  %wide.trip.count.i = zext i32 %172 to i64
  %stride.i621920 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %173, i64 0, i32 2
  %174 = load i32, i32* %stride.i621920, align 4, !tbaa !185
  %conv.i622921 = sext i32 %174 to i64
  %min.i623922 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %173, i64 0, i32 0
  %175 = load i32, i32* %min.i623922, align 4, !tbaa !221
  %sub.i923 = sub nsw i32 %dim0.0836, %175
  %conv7.i924 = sext i32 %sub.i923 to i64
  %mul.i925 = mul nsw i64 %conv7.i924, %conv.i622921
  %exitcond.not.i927 = icmp eq i32 %172, 1
  br i1 %exitcond.not.i927, label %_ZNK15halide_buffer_t10address_ofEPKi.exit, label %for.body.i.for.body.i_crit_edge.preheader, !llvm.loop !222

for.body.i.for.body.i_crit_edge.preheader:        ; preds = %for.body.lr.ph.i
  %stride.i62126 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %173, i64 1, i32 2
  %176 = load i32, i32* %stride.i62126, align 4, !tbaa !185
  %conv.i62227 = sext i32 %176 to i64
  %min.i62328 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %173, i64 1, i32 0
  %177 = load i32, i32* %min.i62328, align 4, !tbaa !221
  %sub.i29 = sub nsw i32 %dim1.0841, %177
  %conv7.i30 = sext i32 %sub.i29 to i64
  %mul.i31 = mul nsw i64 %conv7.i30, %conv.i62227
  %add.i62432 = add nsw i64 %mul.i31, %mul.i925
  %exitcond.not.i33 = icmp eq i32 %172, 2
  br i1 %exitcond.not.i33, label %_ZNK15halide_buffer_t10address_ofEPKi.exit, label %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph, !llvm.loop !222

for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph: ; preds = %for.body.i.for.body.i_crit_edge.preheader
  %178 = add nsw i64 %wide.trip.count.i, -2
  %min.iters.check131 = icmp ult i64 %178, 5
  br i1 %min.iters.check131, label %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader, label %vector.ph132

vector.ph132:                                     ; preds = %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph
  %n.mod.vf133 = and i64 %178, 3
  %179 = icmp eq i64 %n.mod.vf133, 0
  %180 = select i1 %179, i64 4, i64 %n.mod.vf133
  %n.vec134 = sub nsw i64 %178, %180
  %ind.end138 = add nsw i64 %n.vec134, 2
  %181 = insertelement <2 x i64> <i64 poison, i64 0>, i64 %add.i62432, i32 0
  br label %vector.body130

vector.body130:                                   ; preds = %vector.body130, %vector.ph132
  %index135 = phi i64 [ 0, %vector.ph132 ], [ %index.next136, %vector.body130 ]
  %vec.phi141 = phi <2 x i64> [ %181, %vector.ph132 ], [ %201, %vector.body130 ]
  %vec.phi142 = phi <2 x i64> [ zeroinitializer, %vector.ph132 ], [ %202, %vector.body130 ]
  %offset.idx140 = or i64 %index135, 2
  %182 = add i64 %offset.idx140, 2
  %183 = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 %offset.idx140
  %184 = bitcast i32* %183 to <2 x i32>*
  %wide.load143 = load <2 x i32>, <2 x i32>* %184, align 4, !tbaa !41
  %185 = getelementptr inbounds i32, i32* %183, i64 2
  %186 = bitcast i32* %185 to <2 x i32>*
  %wide.load144 = load <2 x i32>, <2 x i32>* %186, align 4, !tbaa !41
  %187 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %173, i64 %offset.idx140, i32 2
  %188 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %173, i64 %182, i32 2
  %189 = getelementptr inbounds i32, i32* %187, i64 -2
  %190 = bitcast i32* %189 to <8 x i32>*
  %191 = getelementptr inbounds i32, i32* %188, i64 -2
  %192 = bitcast i32* %191 to <8 x i32>*
  %wide.vec = load <8 x i32>, <8 x i32>* %190, align 4, !tbaa !41
  %wide.vec145 = load <8 x i32>, <8 x i32>* %192, align 4, !tbaa !41
  %strided.vec = shufflevector <8 x i32> %wide.vec, <8 x i32> poison, <2 x i32> <i32 0, i32 4>
  %strided.vec146 = shufflevector <8 x i32> %wide.vec145, <8 x i32> poison, <2 x i32> <i32 0, i32 4>
  %strided.vec147 = shufflevector <8 x i32> %wide.vec, <8 x i32> poison, <2 x i32> <i32 2, i32 6>
  %strided.vec148 = shufflevector <8 x i32> %wide.vec145, <8 x i32> poison, <2 x i32> <i32 2, i32 6>
  %193 = sext <2 x i32> %strided.vec147 to <2 x i64>
  %194 = sext <2 x i32> %strided.vec148 to <2 x i64>
  %195 = sub nsw <2 x i32> %wide.load143, %strided.vec
  %196 = sub nsw <2 x i32> %wide.load144, %strided.vec146
  %197 = sext <2 x i32> %195 to <2 x i64>
  %198 = sext <2 x i32> %196 to <2 x i64>
  %199 = mul nsw <2 x i64> %197, %193
  %200 = mul nsw <2 x i64> %198, %194
  %201 = add <2 x i64> %199, %vec.phi141
  %202 = add <2 x i64> %200, %vec.phi142
  %index.next136 = add i64 %index135, 4
  %203 = icmp eq i64 %index.next136, %n.vec134
  br i1 %203, label %middle.block128, label %vector.body130, !llvm.loop !223

middle.block128:                                  ; preds = %vector.body130
  %bin.rdx149 = add <2 x i64> %202, %201
  %204 = call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %bin.rdx149)
  br label %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader

for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader: ; preds = %middle.block128, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph
  %indvars.iv.next.i35.ph = phi i64 [ 2, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph ], [ %ind.end138, %middle.block128 ]
  %add.i62434.ph = phi i64 [ %add.i62432, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph ], [ %204, %middle.block128 ]
  br label %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge

for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge: ; preds = %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge
  %indvars.iv.next.i35 = phi i64 [ %indvars.iv.next.i, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge ], [ %indvars.iv.next.i35.ph, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader ]
  %add.i62434 = phi i64 [ %add.i624, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge ], [ %add.i62434.ph, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader ]
  %arrayidx3.i.phi.trans.insert.phi.trans.insert = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 %indvars.iv.next.i35
  %.pre895.pre = load i32, i32* %arrayidx3.i.phi.trans.insert.phi.trans.insert, align 4, !tbaa !41
  %stride.i621 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %173, i64 %indvars.iv.next.i35, i32 2
  %205 = load i32, i32* %stride.i621, align 4, !tbaa !185
  %conv.i622 = sext i32 %205 to i64
  %min.i623 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %173, i64 %indvars.iv.next.i35, i32 0
  %206 = load i32, i32* %min.i623, align 4, !tbaa !221
  %sub.i = sub nsw i32 %.pre895.pre, %206
  %conv7.i = sext i32 %sub.i to i64
  %mul.i = mul nsw i64 %conv7.i, %conv.i622
  %add.i624 = add nsw i64 %mul.i, %add.i62434
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.next.i35, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.next.i, %wide.trip.count.i
  br i1 %exitcond.not.i, label %_ZNK15halide_buffer_t10address_ofEPKi.exit, label %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge, !llvm.loop !224

_ZNK15halide_buffer_t10address_ofEPKi.exit:       ; preds = %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge, %for.body.i.for.body.i_crit_edge.preheader, %for.body.lr.ph.i, %for.body355
  %index.0.lcssa.i = phi i64 [ 0, %for.body355 ], [ %mul.i925, %for.body.lr.ph.i ], [ %add.i62432, %for.body.i.for.body.i_crit_edge.preheader ], [ %add.i624, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge ]
  %207 = load i8*, i8** %host.i, align 8, !tbaa !180
  %208 = load i8, i8* %bits.i, align 1, !tbaa !144
  %conv.i.i = zext i8 %208 to i64
  %add.i.i = add nuw nsw i64 %conv.i.i, 7
  %div.i.i = lshr i64 %add.i.i, 3
  %mul9.i = mul nsw i64 %div.i.i, %index.0.lcssa.i
  %add.ptr.i = getelementptr inbounds i8, i8* %207, i64 %mul9.i
  %mul366 = mul nsw i32 %counter.3835, %div.i
  %idx.ext = sext i32 %mul366 to i64
  %add.ptr367 = getelementptr inbounds [4096 x i8], [4096 x i8]* %temp, i64 0, i64 %idx.ext
  %call369 = call i8* @memcpy(i8* nonnull %add.ptr367, i8* %add.ptr.i, i64 %conv368) #14
  %cmp370 = icmp eq i32 %inc356, %div
  br i1 %cmp370, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit619, label %for.inc384

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit619: ; preds = %_ZNK15halide_buffer_t10address_ofEPKi.exit
  %call.i615 = call i64 @fwrite(i8* nonnull %150, i64 %conv374, i64 1, i8* nonnull %call.i598) #14
  %cmp.i616.not = icmp eq i64 %call.i615, 0
  br i1 %cmp.i616.not, label %cleanup425.loopexit, label %for.inc384

for.inc384:                                       ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit619, %_ZNK15halide_buffer_t10address_ofEPKi.exit
  %counter.4 = phi i32 [ 0, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit619 ], [ %inc356, %_ZNK15halide_buffer_t10address_ofEPKi.exit ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %153) #11
  %inc385 = add nsw i32 %dim0.0836, 1
  %cmp353 = icmp slt i32 %inc385, %add352
  br i1 %cmp353, label %for.body355, label %for.inc389, !llvm.loop !225

for.inc389:                                       ; preds = %for.inc384, %for.body344
  %209 = phi i32 [ %169, %for.body344 ], [ %.pre16, %for.inc384 ]
  %210 = phi i32 [ %170, %for.body344 ], [ %.pre15, %for.inc384 ]
  %211 = phi i32 [ %171, %for.body344 ], [ %155, %for.inc384 ]
  %counter.6797 = phi i32 [ %counter.2840, %for.body344 ], [ %counter.4, %for.inc384 ]
  %inc390 = add nsw i32 %dim1.0841, 1
  %add341 = add nsw i32 %209, %210
  %cmp342 = icmp slt i32 %inc390, %add341
  br i1 %cmp342, label %for.body344, label %for.inc394, !llvm.loop !226

for.inc394:                                       ; preds = %for.inc389, %for.body333
  %212 = phi i32 [ %163, %for.body333 ], [ %209, %for.inc389 ]
  %213 = phi i32 [ %164, %for.body333 ], [ %210, %for.inc389 ]
  %214 = phi i32 [ %165, %for.body333 ], [ %.pre897, %for.inc389 ]
  %215 = phi i32 [ %166, %for.body333 ], [ %.pre896, %for.inc389 ]
  %216 = phi i32 [ %167, %for.body333 ], [ %210, %for.inc389 ]
  %217 = phi i32 [ %168, %for.body333 ], [ %209, %for.inc389 ]
  %counter.2.lcssa = phi i32 [ %counter.1849, %for.body333 ], [ %counter.6797, %for.inc389 ]
  %inc395 = add nsw i32 %dim2.0850, 1
  %add330 = add nsw i32 %215, %214
  %cmp331 = icmp slt i32 %inc395, %add330
  br i1 %cmp331, label %for.body333, label %for.inc399, !llvm.loop !227

for.inc399:                                       ; preds = %for.inc394, %for.body322
  %218 = phi i32 [ %157, %for.body322 ], [ %.pre899, %for.inc394 ]
  %219 = phi i32 [ %158, %for.body322 ], [ %.pre898, %for.inc394 ]
  %220 = phi i32 [ %159, %for.body322 ], [ %214, %for.inc394 ]
  %221 = phi i32 [ %160, %for.body322 ], [ %215, %for.inc394 ]
  %222 = phi i32 [ %161, %for.body322 ], [ %215, %for.inc394 ]
  %223 = phi i32 [ %162, %for.body322 ], [ %214, %for.inc394 ]
  %counter.1.lcssa = phi i32 [ %counter.0857, %for.body322 ], [ %counter.2.lcssa, %for.inc394 ]
  %inc400 = add nsw i32 %dim3.0858, 1
  %add319 = add nsw i32 %219, %218
  %cmp320 = icmp slt i32 %inc400, %add319
  br i1 %cmp320, label %for.body322, label %for.end403, !llvm.loop !228

for.end403:                                       ; preds = %for.inc399
  %cmp404 = icmp sgt i32 %counter.1.lcssa, 0
  br i1 %cmp404, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit612, label %if.end412

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit612: ; preds = %for.end403
  %mul407 = mul nsw i32 %counter.1.lcssa, %div.i
  %conv408 = sext i32 %mul407 to i64
  %call.i608 = call i64 @fwrite(i8* nonnull %150, i64 %conv408, i64 1, i8* nonnull %call.i598) #14
  %cmp.i609.not = icmp eq i64 %call.i608, 0
  br i1 %cmp.i609.not, label %cleanup425, label %if.end412

if.end412:                                        ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit612, %for.end403, %if.end311
  %224 = bitcast i64* %zero to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %224) #11
  store i64 0, i64* %zero, align 8, !tbaa !22
  %tobool413.not = icmp eq i32 %final_padding_bytes.0, 0
  br i1 %tobool413.not, label %if.end423, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit: ; preds = %if.end412
  %conv415 = zext i32 %final_padding_bytes.0 to i64
  %call.i604 = call i64 @fwrite(i8* nonnull %224, i64 %conv415, i64 1, i8* nonnull %call.i598) #14
  %cmp.i605.not = icmp eq i64 %call.i604, 0
  br i1 %cmp.i605.not, label %cleanup424, label %if.end423

if.end423:                                        ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit, %if.end412
  br label %cleanup424

cleanup424:                                       ; preds = %if.end423, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit
  %retval.21 = phi i32 [ 0, %if.end423 ], [ -16, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %224) #11
  br label %cleanup425

cleanup425.loopexit:                              ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit619
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %153) #11
  br label %cleanup425

cleanup425:                                       ; preds = %cleanup425.loopexit, %cleanup424, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit612
  %retval.22 = phi i32 [ %retval.21, %cleanup424 ], [ -14, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit612 ], [ -13, %cleanup425.loopexit ]
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %150) #11
  br label %cleanup433

cleanup433:                                       ; preds = %cleanup425, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631, %cleanup278, %cleanup278.thread, %cleanup154
  %retval.23 = phi i32 [ %retval.22, %cleanup425 ], [ %retval.4, %cleanup154 ], [ %retval.8, %cleanup278 ], [ -12, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631 ], [ -6, %cleanup278.thread ]
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %3) #11
  %call.i = call i32 @fclose(i8* nonnull %call.i598) #14
  br label %return

return:                                           ; preds = %cleanup433, %if.end6, %if.end2, %if.then1, %if.then
  %retval.26 = phi i32 [ -1, %if.then ], [ -1, %if.then1 ], [ %call3, %if.end2 ], [ %retval.23, %cleanup433 ], [ -2, %if.end6 ]
  ret i32 %retval.26
}

declare i64 @fwrite(i8*, i64, i64, i8*) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_cache_cleanup() #0 {
entry:
  tail call void @halide_memoization_cache_cleanup() #15
  ret void
}

; Function Attrs: nounwind mustprogress
define weak void @halide_memoization_cache_cleanup() local_unnamed_addr #0 {
entry:
  br label %for.body

for.cond.cleanup:                                 ; preds = %while.end
  store i64 0, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !22
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !14
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !14
  ret void

for.body:                                         ; preds = %while.end, %entry
  %__begin1.018 = phi %"struct.Halide::Runtime::Internal::CacheEntry"** [ getelementptr inbounds ([256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 0, i64 0), %entry ], [ %incdec.ptr, %while.end ]
  %0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %__begin1.018, align 8, !tbaa !14
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %__begin1.018, align 8, !tbaa !14
  %cmp2.not16 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %0, null
  br i1 %cmp2.not16, label %while.end, label %while.body

while.body:                                       ; preds = %for.body, %while.body
  %entry1.017 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %1, %while.body ], [ %0, %for.body ]
  %next3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.017, i64 0, i32 0
  %1 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next3, align 8, !tbaa !229
  tail call void @_ZN6Halide7Runtime8Internal10CacheEntry7destroyEv(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %entry1.017) #15
  %2 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.017 to i8*
  tail call void @halide_free(i8* null, i8* nonnull %2) #14
  %cmp2.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %1, null
  br i1 %cmp2.not, label %while.end, label %while.body, !llvm.loop !231

while.end:                                        ; preds = %while.body, %for.body
  %incdec.ptr = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %__begin1.018, i64 1
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"** %incdec.ptr, getelementptr inbounds ([256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 1, i64 0)
  br i1 %cmp.not, label %for.cond.cleanup, label %for.body
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal10CacheEntry7destroyEv(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %this) local_unnamed_addr #0 align 2 {
entry:
  %tuple_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 8
  %0 = load i32, i32* %tuple_count, align 8, !tbaa !232
  %cmp11.not = icmp eq i32 %0, 0
  br i1 %cmp11.not, label %for.cond.cleanup, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %entry
  %buf = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 11
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %entry
  %metadata_storage = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 3
  %1 = load i8*, i8** %metadata_storage, align 8, !tbaa !233
  tail call void @halide_free(i8* null, i8* %1) #14
  ret void

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.body ]
  %2 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !234
  %arrayidx = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %2, i64 %indvars.iv
  %call = tail call i32 @halide_device_free(i8* null, %struct.halide_buffer_t* %arrayidx) #14
  %3 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !234
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %3, i64 %indvars.iv, i32 2
  %4 = load i8*, i8** %host, align 8, !tbaa !180
  %call6 = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %4) #15
  %5 = bitcast %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call6 to i8*
  tail call void @halide_free(i8* null, i8* %5) #14
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %6 = load i32, i32* %tuple_count, align 8, !tbaa !232
  %7 = zext i32 %6 to i64
  %cmp = icmp ult i64 %indvars.iv.next, %7
  br i1 %cmp, label %for.body, label %for.cond.cleanup, !llvm.loop !235
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %host) local_unnamed_addr #2 {
entry:
  %add.ptr = getelementptr inbounds i8, i8* %host, i64 -32
  %0 = bitcast i8* %add.ptr to %"struct.Halide::Runtime::Internal::CacheBlockHeader"*
  ret %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %0
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal18copy_memory_helperERKNS1_11device_copyEixx(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i32 %d, i64 %src_off, i64 %dst_off) local_unnamed_addr #0 {
entry:
  %cmp41 = icmp sgt i32 %d, -1
  br i1 %cmp41, label %land.rhs, label %while.end

land.rhs:                                         ; preds = %entry, %while.body
  %d.addr.042 = phi i32 [ %dec, %while.body ], [ %d, %entry ]
  %idxprom36 = zext i32 %d.addr.042 to i64
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 3, i64 %idxprom36
  %0 = load i64, i64* %arrayidx, align 8, !tbaa !22
  %cmp1 = icmp eq i64 %0, 1
  br i1 %cmp1, label %while.body, label %while.end

while.body:                                       ; preds = %land.rhs
  %dec = add nsw i32 %d.addr.042, -1
  %cmp = icmp sgt i32 %d.addr.042, 0
  br i1 %cmp, label %land.rhs, label %if.then, !llvm.loop !236

while.end:                                        ; preds = %land.rhs, %entry
  %d.addr.0.lcssa = phi i32 [ %d, %entry ], [ %d.addr.042, %land.rhs ]
  %cmp2 = icmp eq i32 %d.addr.0.lcssa, -1
  br i1 %cmp2, label %if.then, label %for.cond.preheader

for.cond.preheader:                               ; preds = %while.end
  %idxprom5 = sext i32 %d.addr.0.lcssa to i64
  %arrayidx6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 3, i64 %idxprom5
  %1 = load i64, i64* %arrayidx6, align 8, !tbaa !22
  %cmp737.not = icmp eq i64 %1, 0
  br i1 %cmp737.not, label %if.end, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %for.cond.preheader
  %sub = add nsw i32 %d.addr.0.lcssa, -1
  %arrayidx9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 4, i64 %idxprom5
  %arrayidx12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 5, i64 %idxprom5
  %inc.0 = add nuw i64 0, 1
  br label %for.body

if.then:                                          ; preds = %while.body, %while.end
  %src = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 0
  %2 = load i64, i64* %src, align 8, !tbaa !237
  %add = add i64 %2, %src_off
  %3 = inttoptr i64 %add to i8*
  %dst = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 1
  %4 = load i64, i64* %dst, align 8, !tbaa !239
  %add3 = add i64 %4, %dst_off
  %5 = inttoptr i64 %add3 to i8*
  %chunk_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 6
  %6 = load i64, i64* %chunk_size, align 8, !tbaa !240
  %call = tail call i8* @memcpy(i8* %5, i8* %3, i64 %6) #14
  br label %if.end

for.body:                                         ; preds = %for.body.for.body_crit_edge, %for.body.lr.ph
  %inc.phi = phi i64 [ %inc.0, %for.body.lr.ph ], [ %inc.1, %for.body.for.body_crit_edge ]
  %src_off.addr.039 = phi i64 [ %src_off, %for.body.lr.ph ], [ %add10, %for.body.for.body_crit_edge ]
  %dst_off.addr.038 = phi i64 [ %dst_off, %for.body.lr.ph ], [ %add13, %for.body.for.body_crit_edge ]
  tail call void @_ZN6Halide7Runtime8Internal18copy_memory_helperERKNS1_11device_copyEixx(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i32 %sub, i64 %src_off.addr.039, i64 %dst_off.addr.038) #15
  %7 = load i64, i64* %arrayidx9, align 8, !tbaa !22
  %add10 = add i64 %7, %src_off.addr.039
  %8 = load i64, i64* %arrayidx12, align 8, !tbaa !22
  %add13 = add i64 %8, %dst_off.addr.038
  %9 = load i64, i64* %arrayidx6, align 8, !tbaa !22
  %cmp7 = icmp ult i64 %inc.phi, %9
  br i1 %cmp7, label %for.body.for.body_crit_edge, label %if.end, !llvm.loop !241

for.body.for.body_crit_edge:                      ; preds = %for.body
  %inc.1 = add nuw i64 %inc.phi, 1
  br label %for.body

if.end:                                           ; preds = %for.body, %if.then, %for.cond.preheader
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal11copy_memoryERKNS1_11device_copyEPv(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i8* %user_context) local_unnamed_addr #0 {
entry:
  %src = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 0
  %0 = load i64, i64* %src, align 8, !tbaa !237
  %dst = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 1
  %1 = load i64, i64* %dst, align 8, !tbaa !239
  %cmp.not = icmp eq i64 %0, %1
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %src_begin = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 2
  %2 = load i64, i64* %src_begin, align 8, !tbaa !242
  tail call void @_ZN6Halide7Runtime8Internal18copy_memory_helperERKNS1_11device_copyEixx(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i32 15, i64 %2, i64 0) #15
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal16make_buffer_copyEPK15halide_buffer_tbS4_b(%"struct.Halide::Runtime::Internal::device_copy"* noalias sret(%"struct.Halide::Runtime::Internal::device_copy") align 8 %agg.result, %struct.halide_buffer_t* %src, i1 zeroext %src_host, %struct.halide_buffer_t* %dst, i1 zeroext %dst_host) local_unnamed_addr #0 {
entry:
  %c = alloca %"struct.Halide::Runtime::Internal::device_copy", align 8
  %0 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %c to i8*
  call void @llvm.lifetime.start.p0i8(i64 416, i8* nonnull %0) #11
  br i1 %src_host, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 2
  %1 = load i8*, i8** %host, align 8, !tbaa !180
  %2 = ptrtoint i8* %1 to i64
  br label %cond.end

cond.false:                                       ; preds = %entry
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 0
  %3 = load i64, i64* %device, align 8, !tbaa !182
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %2, %cond.true ], [ %3, %cond.false ]
  %src2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 0
  store i64 %cond, i64* %src2, align 8, !tbaa !237
  br i1 %dst_host, label %cond.true4, label %cond.false6

cond.true4:                                       ; preds = %cond.end
  %host5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 2
  %4 = load i8*, i8** %host5, align 8, !tbaa !180
  %5 = ptrtoint i8* %4 to i64
  br label %cond.end8

cond.false6:                                      ; preds = %cond.end
  %device7 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 0
  %6 = load i64, i64* %device7, align 8, !tbaa !182
  br label %cond.end8

cond.end8:                                        ; preds = %cond.false6, %cond.true4
  %cond9 = phi i64 [ %5, %cond.true4 ], [ %6, %cond.false6 ]
  %dst10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 1
  store i64 %cond9, i64* %dst10, align 8, !tbaa !239
  %bits.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 4, i32 1
  %7 = load i8, i8* %bits.i, align 1, !tbaa !144
  %conv.i = zext i8 %7 to i32
  %add.i = add nuw nsw i32 %conv.i, 7
  %div.i = lshr i32 %add.i, 3
  %conv = zext i32 %div.i to i64
  %chunk_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 6
  store i64 %conv, i64* %chunk_size, align 8, !tbaa !240
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 0
  %arrayidx12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 0
  %arrayidx14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 0
  %arrayidx.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 1
  %8 = bitcast i64* %arrayidx to <2 x i64>*
  store <2 x i64> <i64 1, i64 1>, <2 x i64>* %8, align 8, !tbaa !22
  %arrayidx12.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 1
  %9 = bitcast i64* %arrayidx12 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %9, align 8, !tbaa !22
  %arrayidx14.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 1
  %10 = bitcast i64* %arrayidx14 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %10, align 8, !tbaa !22
  %arrayidx.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 2
  %arrayidx12.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 2
  %arrayidx14.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 2
  %arrayidx.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 3
  %11 = bitcast i64* %arrayidx.2 to <2 x i64>*
  store <2 x i64> <i64 1, i64 1>, <2 x i64>* %11, align 8, !tbaa !22
  %arrayidx12.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 3
  %12 = bitcast i64* %arrayidx12.2 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %12, align 8, !tbaa !22
  %arrayidx14.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 3
  %13 = bitcast i64* %arrayidx14.2 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %13, align 8, !tbaa !22
  %arrayidx.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 4
  %arrayidx12.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 4
  %arrayidx14.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 4
  %arrayidx.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 5
  %14 = bitcast i64* %arrayidx.4 to <2 x i64>*
  store <2 x i64> <i64 1, i64 1>, <2 x i64>* %14, align 8, !tbaa !22
  %arrayidx12.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 5
  %15 = bitcast i64* %arrayidx12.4 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %15, align 8, !tbaa !22
  %arrayidx14.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 5
  %16 = bitcast i64* %arrayidx14.4 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %16, align 8, !tbaa !22
  %arrayidx.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 6
  %arrayidx12.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 6
  %arrayidx14.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 6
  %arrayidx.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 7
  %17 = bitcast i64* %arrayidx.6 to <2 x i64>*
  store <2 x i64> <i64 1, i64 1>, <2 x i64>* %17, align 8, !tbaa !22
  %arrayidx12.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 7
  %18 = bitcast i64* %arrayidx12.6 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %18, align 8, !tbaa !22
  %arrayidx14.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 7
  %19 = bitcast i64* %arrayidx14.6 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %19, align 8, !tbaa !22
  %arrayidx.8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 8
  %arrayidx12.8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 8
  %arrayidx14.8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 8
  %arrayidx.9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 9
  %20 = bitcast i64* %arrayidx.8 to <2 x i64>*
  store <2 x i64> <i64 1, i64 1>, <2 x i64>* %20, align 8, !tbaa !22
  %arrayidx12.9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 9
  %21 = bitcast i64* %arrayidx12.8 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %21, align 8, !tbaa !22
  %arrayidx14.9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 9
  %22 = bitcast i64* %arrayidx14.8 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %22, align 8, !tbaa !22
  %arrayidx.10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 10
  %arrayidx12.10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 10
  %arrayidx14.10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 10
  %arrayidx.11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 11
  %23 = bitcast i64* %arrayidx.10 to <2 x i64>*
  store <2 x i64> <i64 1, i64 1>, <2 x i64>* %23, align 8, !tbaa !22
  %arrayidx12.11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 11
  %24 = bitcast i64* %arrayidx12.10 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %24, align 8, !tbaa !22
  %arrayidx14.11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 11
  %25 = bitcast i64* %arrayidx14.10 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %25, align 8, !tbaa !22
  %arrayidx.12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 12
  %arrayidx12.12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 12
  %arrayidx14.12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 12
  %arrayidx.13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 13
  %26 = bitcast i64* %arrayidx.12 to <2 x i64>*
  store <2 x i64> <i64 1, i64 1>, <2 x i64>* %26, align 8, !tbaa !22
  %arrayidx12.13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 13
  %27 = bitcast i64* %arrayidx12.12 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %27, align 8, !tbaa !22
  %arrayidx14.13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 13
  %28 = bitcast i64* %arrayidx14.12 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %28, align 8, !tbaa !22
  %arrayidx.14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 14
  %arrayidx12.14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 14
  %arrayidx14.14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 14
  %arrayidx.15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 15
  %29 = bitcast i64* %arrayidx.14 to <2 x i64>*
  store <2 x i64> <i64 1, i64 1>, <2 x i64>* %29, align 8, !tbaa !22
  %arrayidx12.15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 15
  %30 = bitcast i64* %arrayidx12.14 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %30, align 8, !tbaa !22
  %arrayidx14.15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 15
  %31 = bitcast i64* %arrayidx14.14 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %31, align 8, !tbaa !22
  %src_begin = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 2
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 5
  %32 = load i32, i32* %dimensions, align 4, !tbaa !183
  %cmp17272 = icmp sgt i32 %32, 0
  br i1 %cmp17272, label %for.body19.lr.ph, label %cond.end8.for.cond.cleanup18_crit_edge

cond.end8.for.cond.cleanup18_crit_edge:           ; preds = %cond.end8
  %mul37.0 = mul i64 %conv, 0
  br label %for.cond.cleanup18

for.body19.lr.ph:                                 ; preds = %cond.end8
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 6
  %33 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !184
  %dim23 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 6
  %34 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim23, align 8, !tbaa !184
  %wide.trip.count = zext i32 %32 to i64
  %min.iters.check = icmp ult i32 %32, 5
  br i1 %min.iters.check, label %for.body19.preheader, label %vector.ph

for.body19.preheader:                             ; preds = %middle.block, %for.body19.lr.ph
  %indvars.iv284.ph = phi i64 [ 0, %for.body19.lr.ph ], [ %n.vec, %middle.block ]
  %.ph = phi i64 [ 0, %for.body19.lr.ph ], [ %61, %middle.block ]
  br label %for.body19

vector.ph:                                        ; preds = %for.body19.lr.ph
  %n.mod.vf = and i64 %wide.trip.count, 3
  %35 = icmp eq i64 %n.mod.vf, 0
  %36 = select i1 %35, i64 4, i64 %n.mod.vf
  %n.vec = sub nsw i64 %wide.trip.count, %36
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %vec.phi = phi <2 x i64> [ zeroinitializer, %vector.ph ], [ %58, %vector.body ]
  %vec.phi2 = phi <2 x i64> [ zeroinitializer, %vector.ph ], [ %59, %vector.body ]
  %37 = or i64 %index, 2
  %38 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %33, i64 %index, i32 2
  %39 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %33, i64 %37, i32 2
  %40 = getelementptr inbounds i32, i32* %38, i64 -2
  %41 = bitcast i32* %40 to <8 x i32>*
  %42 = getelementptr inbounds i32, i32* %39, i64 -2
  %43 = bitcast i32* %42 to <8 x i32>*
  %wide.vec = load <8 x i32>, <8 x i32>* %41, align 4, !tbaa !41
  %wide.vec3 = load <8 x i32>, <8 x i32>* %43, align 4, !tbaa !41
  %strided.vec5 = shufflevector <8 x i32> %wide.vec, <8 x i32> poison, <2 x i32> <i32 2, i32 6>
  %strided.vec6 = shufflevector <8 x i32> %wide.vec3, <8 x i32> poison, <2 x i32> <i32 2, i32 6>
  %44 = sext <2 x i32> %strided.vec5 to <2 x i64>
  %45 = sext <2 x i32> %strided.vec6 to <2 x i64>
  %46 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %34, i64 %index, i32 0
  %47 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %34, i64 %37, i32 0
  %48 = bitcast i32* %46 to <8 x i32>*
  %49 = bitcast i32* %47 to <8 x i32>*
  %wide.vec7 = load <8 x i32>, <8 x i32>* %48, align 4, !tbaa !221
  %wide.vec8 = load <8 x i32>, <8 x i32>* %49, align 4, !tbaa !221
  %50 = sub nsw <8 x i32> %wide.vec7, %wide.vec
  %51 = shufflevector <8 x i32> %50, <8 x i32> undef, <2 x i32> <i32 0, i32 4>
  %52 = sub nsw <8 x i32> %wide.vec8, %wide.vec3
  %53 = shufflevector <8 x i32> %52, <8 x i32> undef, <2 x i32> <i32 0, i32 4>
  %54 = sext <2 x i32> %51 to <2 x i64>
  %55 = sext <2 x i32> %53 to <2 x i64>
  %56 = mul nsw <2 x i64> %54, %44
  %57 = mul nsw <2 x i64> %55, %45
  %58 = add <2 x i64> %56, %vec.phi
  %59 = add <2 x i64> %57, %vec.phi2
  %index.next = add i64 %index, 4
  %60 = icmp eq i64 %index.next, %n.vec
  br i1 %60, label %middle.block, label %vector.body, !llvm.loop !243

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <2 x i64> %59, %58
  %61 = call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %bin.rdx)
  br label %for.body19.preheader

for.cond.cleanup18:                               ; preds = %for.body19.for.cond.cleanup18_crit_edge, %cond.end8.for.cond.cleanup18_crit_edge
  %mul37.phi = phi i64 [ %mul37.0, %cond.end8.for.cond.cleanup18_crit_edge ], [ %mul37.1, %for.body19.for.cond.cleanup18_crit_edge ]
  store i64 %mul37.phi, i64* %src_begin, align 8, !tbaa !242
  %dimensions39 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 5
  %62 = load i32, i32* %dimensions39, align 4, !tbaa !183
  %cmp40.not = icmp eq i32 %32, %62
  br i1 %cmp40.not, label %lor.lhs.false, label %if.then

for.body19:                                       ; preds = %for.body19.preheader, %for.body19
  %indvars.iv284 = phi i64 [ %indvars.iv.next285, %for.body19 ], [ %indvars.iv284.ph, %for.body19.preheader ]
  %63 = phi i64 [ %add, %for.body19 ], [ %.ph, %for.body19.preheader ]
  %stride = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %33, i64 %indvars.iv284, i32 2
  %64 = load i32, i32* %stride, align 4, !tbaa !185
  %conv22 = sext i32 %64 to i64
  %min = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %34, i64 %indvars.iv284, i32 0
  %65 = load i32, i32* %min, align 4, !tbaa !221
  %min29 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %33, i64 %indvars.iv284, i32 0
  %66 = load i32, i32* %min29, align 4, !tbaa !221
  %sub = sub nsw i32 %65, %66
  %conv30 = sext i32 %sub to i64
  %mul = mul nsw i64 %conv30, %conv22
  %add = add i64 %mul, %63
  %indvars.iv.next285 = add nuw nsw i64 %indvars.iv284, 1
  %exitcond286.not = icmp eq i64 %indvars.iv.next285, %wide.trip.count
  br i1 %exitcond286.not, label %for.body19.for.cond.cleanup18_crit_edge, label %for.body19, !llvm.loop !244

for.body19.for.cond.cleanup18_crit_edge:          ; preds = %for.body19
  %mul37.1 = mul i64 %add, %conv
  br label %for.cond.cleanup18

lor.lhs.false:                                    ; preds = %for.cond.cleanup18
  %bits.i253 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 4, i32 1
  %67 = load i8, i8* %bits.i253, align 1, !tbaa !144
  %conv.i254 = zext i8 %67 to i32
  %add.i255 = add nuw nsw i32 %conv.i254, 7
  %div.i256 = lshr i32 %add.i255, 3
  %cmp45.not = icmp ne i32 %div.i, %div.i256
  %cmp48 = icmp sgt i32 %32, 16
  %or.cond261 = or i1 %cmp48, %cmp45.not
  br i1 %or.cond261, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %for.cond.cleanup18
  %68 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %agg.result to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(416) %68, i8 0, i64 416, i1 false)
  br label %cleanup

if.end:                                           ; preds = %lor.lhs.false
  %cmp50 = icmp eq i32 %div.i, 0
  br i1 %cmp50, label %if.then51, label %for.cond54.preheader

for.cond54.preheader:                             ; preds = %if.end
  br i1 %cmp17272, label %for.body58.lr.ph, label %while.end

for.body58.lr.ph:                                 ; preds = %for.cond54.preheader
  %dim60 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 6
  %69 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim60, align 8, !tbaa !184
  %dim70 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 6
  %70 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim70, align 8, !tbaa !184
  %wide.trip.count282 = zext i32 %32 to i64
  br label %for.body58

if.then51:                                        ; preds = %if.end
  %71 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %agg.result to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(416) %71, i8 0, i64 416, i1 false)
  br label %cleanup

while.cond.preheader:                             ; preds = %for.cond.cleanup94
  %.pre = load i64, i64* %chunk_size, align 8, !tbaa !240
  %.pre290 = load i64, i64* %arrayidx12, align 8, !tbaa !22
  %cmp139263 = icmp eq i64 %.pre, %.pre290
  br i1 %cmp139263, label %land.rhs.lr.ph, label %while.end

land.rhs.lr.ph:                                   ; preds = %while.cond.preheader
  %.pre291 = load i64, i64* %arrayidx14, align 8, !tbaa !22
  %72 = bitcast i64* %arrayidx.1 to <2 x i64>*
  %73 = bitcast i64* %arrayidx to <2 x i64>*
  %74 = bitcast i64* %arrayidx12.1 to <2 x i64>*
  %75 = bitcast i64* %arrayidx12 to <2 x i64>*
  %76 = bitcast i64* %arrayidx14.1 to <2 x i64>*
  %77 = bitcast i64* %arrayidx14 to <2 x i64>*
  %78 = bitcast i64* %arrayidx.3 to <2 x i64>*
  %79 = bitcast i64* %arrayidx.2 to <2 x i64>*
  %80 = bitcast i64* %arrayidx12.3 to <2 x i64>*
  %81 = bitcast i64* %arrayidx12.2 to <2 x i64>*
  %82 = bitcast i64* %arrayidx14.3 to <2 x i64>*
  %83 = bitcast i64* %arrayidx14.2 to <2 x i64>*
  %84 = bitcast i64* %arrayidx.5 to <2 x i64>*
  %85 = bitcast i64* %arrayidx.4 to <2 x i64>*
  %86 = bitcast i64* %arrayidx12.5 to <2 x i64>*
  %87 = bitcast i64* %arrayidx12.4 to <2 x i64>*
  %88 = bitcast i64* %arrayidx14.5 to <2 x i64>*
  %89 = bitcast i64* %arrayidx14.4 to <2 x i64>*
  %90 = bitcast i64* %arrayidx.7 to <2 x i64>*
  %91 = bitcast i64* %arrayidx.6 to <2 x i64>*
  %92 = bitcast i64* %arrayidx12.7 to <2 x i64>*
  %93 = bitcast i64* %arrayidx12.6 to <2 x i64>*
  %94 = bitcast i64* %arrayidx14.7 to <2 x i64>*
  %95 = bitcast i64* %arrayidx14.6 to <2 x i64>*
  %96 = bitcast i64* %arrayidx.9 to <2 x i64>*
  %97 = bitcast i64* %arrayidx.8 to <2 x i64>*
  %98 = bitcast i64* %arrayidx12.9 to <2 x i64>*
  %99 = bitcast i64* %arrayidx12.8 to <2 x i64>*
  %100 = bitcast i64* %arrayidx14.9 to <2 x i64>*
  %101 = bitcast i64* %arrayidx14.8 to <2 x i64>*
  %102 = bitcast i64* %arrayidx.11 to <2 x i64>*
  %103 = bitcast i64* %arrayidx.10 to <2 x i64>*
  %104 = bitcast i64* %arrayidx12.11 to <2 x i64>*
  %105 = bitcast i64* %arrayidx12.10 to <2 x i64>*
  %106 = bitcast i64* %arrayidx14.11 to <2 x i64>*
  %107 = bitcast i64* %arrayidx14.10 to <2 x i64>*
  %108 = bitcast i64* %arrayidx.13 to <2 x i64>*
  %109 = bitcast i64* %arrayidx.12 to <2 x i64>*
  %110 = bitcast i64* %arrayidx12.13 to <2 x i64>*
  %111 = bitcast i64* %arrayidx12.12 to <2 x i64>*
  %112 = bitcast i64* %arrayidx14.13 to <2 x i64>*
  %113 = bitcast i64* %arrayidx14.12 to <2 x i64>*
  br label %land.rhs

for.body58:                                       ; preds = %for.cond.cleanup94, %for.body58.lr.ph
  %indvars.iv278 = phi i64 [ 0, %for.body58.lr.ph ], [ %indvars.iv.next279, %for.cond.cleanup94 ]
  %stride63 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %69, i64 %indvars.iv278, i32 2
  %114 = load i32, i32* %stride63, align 4, !tbaa !185
  %conv64 = sext i32 %114 to i64
  %mul68 = mul nsw i64 %conv64, %conv
  %stride73 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %70, i64 %indvars.iv278, i32 2
  %115 = load i32, i32* %stride73, align 4, !tbaa !185
  %conv74 = sext i32 %115 to i64
  %mul78 = mul nsw i64 %conv74, %conv
  %cmp80264.not = icmp eq i64 %indvars.iv278, 0
  br i1 %cmp80264.not, label %for.end91, label %for.body81.lr.ph

for.body81.lr.ph:                                 ; preds = %for.body58
  %cmp86.not = icmp eq i64 %mul68, 0
  br i1 %cmp86.not, label %for.body81.preheader, label %for.body81.us

for.body81.preheader:                             ; preds = %for.body81.lr.ph
  %116 = trunc i64 %indvars.iv278 to i32
  br label %for.end91

for.body81.us:                                    ; preds = %for.body81.lr.ph, %for.inc89.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc89.us ], [ 0, %for.body81.lr.ph ]
  %arrayidx84.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv
  %117 = load i64, i64* %arrayidx84.us, align 8, !tbaa !22
  %cmp85.us = icmp ult i64 %mul68, %117
  br i1 %cmp85.us, label %for.end91.loopexit, label %for.inc89.us

for.inc89.us:                                     ; preds = %for.body81.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %indvars.iv278
  br i1 %exitcond.not, label %for.end91.loopexit, label %for.body81.us, !llvm.loop !245

for.end91.loopexit:                               ; preds = %for.inc89.us, %for.body81.us
  %insert.0.lcssa.ph.in = phi i64 [ %indvars.iv278, %for.inc89.us ], [ %indvars.iv, %for.body81.us ]
  %insert.0.lcssa.ph = trunc i64 %insert.0.lcssa.ph.in to i32
  br label %for.end91

for.end91:                                        ; preds = %for.end91.loopexit, %for.body81.preheader, %for.body58
  %insert.0.lcssa = phi i32 [ 0, %for.body58 ], [ %insert.0.lcssa.ph, %for.end91.loopexit ], [ %116, %for.body81.preheader ]
  %118 = zext i32 %insert.0.lcssa to i64
  %cmp93267 = icmp ugt i64 %indvars.iv278, %118
  br i1 %cmp93267, label %for.body95.preheader, label %for.cond.cleanup94

for.body95.preheader:                             ; preds = %for.end91
  %119 = sext i32 %insert.0.lcssa to i64
  br label %for.body95

for.cond.cleanup94:                               ; preds = %for.body95, %for.end91
  %extent122 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %69, i64 %indvars.iv278, i32 1
  %120 = load i32, i32* %extent122, align 4, !tbaa !189
  %conv123 = sext i32 %120 to i64
  %arrayidx126 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %118
  store i64 %conv123, i64* %arrayidx126, align 8, !tbaa !22
  %arrayidx129 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %118
  store i64 %mul68, i64* %arrayidx129, align 8, !tbaa !22
  %arrayidx132 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %118
  store i64 %mul78, i64* %arrayidx132, align 8, !tbaa !22
  %indvars.iv.next279 = add nuw nsw i64 %indvars.iv278, 1
  %exitcond283.not = icmp eq i64 %indvars.iv.next279, %wide.trip.count282
  br i1 %exitcond283.not, label %while.cond.preheader, label %for.body58, !llvm.loop !246

for.body95:                                       ; preds = %for.body95, %for.body95.preheader
  %indvars.iv280 = phi i64 [ %indvars.iv278, %for.body95.preheader ], [ %indvars.iv.next281, %for.body95 ]
  %indvars.iv.next281 = add nsw i64 %indvars.iv280, -1
  %arrayidx99 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv.next281
  %121 = load i64, i64* %arrayidx99, align 8, !tbaa !22
  %arrayidx102 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv280
  store i64 %121, i64* %arrayidx102, align 8, !tbaa !22
  %arrayidx106 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv.next281
  %122 = load i64, i64* %arrayidx106, align 8, !tbaa !22
  %arrayidx109 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv280
  store i64 %122, i64* %arrayidx109, align 8, !tbaa !22
  %arrayidx113 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv.next281
  %123 = load i64, i64* %arrayidx113, align 8, !tbaa !22
  %arrayidx116 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv280
  store i64 %123, i64* %arrayidx116, align 8, !tbaa !22
  %cmp93 = icmp sgt i64 %indvars.iv.next281, %119
  br i1 %cmp93, label %for.body95, label %for.cond.cleanup94, !llvm.loop !247

land.rhs:                                         ; preds = %while.body, %land.rhs.lr.ph
  %124 = phi i64 [ %.pre291, %land.rhs.lr.ph ], [ %152, %while.body ]
  %125 = phi i64 [ %.pre, %land.rhs.lr.ph ], [ %mul147, %while.body ]
  %cmp143 = icmp eq i64 %125, %124
  br i1 %cmp143, label %while.body, label %while.end

while.body:                                       ; preds = %land.rhs
  %126 = load i64, i64* %arrayidx, align 8, !tbaa !22
  %mul147 = mul i64 %126, %124
  store i64 %mul147, i64* %chunk_size, align 8, !tbaa !240
  %127 = load <2 x i64>, <2 x i64>* %72, align 8, !tbaa !22
  store <2 x i64> %127, <2 x i64>* %73, align 8, !tbaa !22
  %128 = load <2 x i64>, <2 x i64>* %74, align 8, !tbaa !22
  store <2 x i64> %128, <2 x i64>* %75, align 8, !tbaa !22
  %129 = load <2 x i64>, <2 x i64>* %76, align 8, !tbaa !22
  store <2 x i64> %129, <2 x i64>* %77, align 8, !tbaa !22
  %130 = load <2 x i64>, <2 x i64>* %78, align 8, !tbaa !22
  store <2 x i64> %130, <2 x i64>* %79, align 8, !tbaa !22
  %131 = load <2 x i64>, <2 x i64>* %80, align 8, !tbaa !22
  store <2 x i64> %131, <2 x i64>* %81, align 8, !tbaa !22
  %132 = load <2 x i64>, <2 x i64>* %82, align 8, !tbaa !22
  store <2 x i64> %132, <2 x i64>* %83, align 8, !tbaa !22
  %133 = load <2 x i64>, <2 x i64>* %84, align 8, !tbaa !22
  store <2 x i64> %133, <2 x i64>* %85, align 8, !tbaa !22
  %134 = load <2 x i64>, <2 x i64>* %86, align 8, !tbaa !22
  store <2 x i64> %134, <2 x i64>* %87, align 8, !tbaa !22
  %135 = load <2 x i64>, <2 x i64>* %88, align 8, !tbaa !22
  store <2 x i64> %135, <2 x i64>* %89, align 8, !tbaa !22
  %136 = load <2 x i64>, <2 x i64>* %90, align 8, !tbaa !22
  store <2 x i64> %136, <2 x i64>* %91, align 8, !tbaa !22
  %137 = load <2 x i64>, <2 x i64>* %92, align 8, !tbaa !22
  store <2 x i64> %137, <2 x i64>* %93, align 8, !tbaa !22
  %138 = load <2 x i64>, <2 x i64>* %94, align 8, !tbaa !22
  store <2 x i64> %138, <2 x i64>* %95, align 8, !tbaa !22
  %139 = load <2 x i64>, <2 x i64>* %96, align 8, !tbaa !22
  store <2 x i64> %139, <2 x i64>* %97, align 8, !tbaa !22
  %140 = load <2 x i64>, <2 x i64>* %98, align 8, !tbaa !22
  store <2 x i64> %140, <2 x i64>* %99, align 8, !tbaa !22
  %141 = load <2 x i64>, <2 x i64>* %100, align 8, !tbaa !22
  store <2 x i64> %141, <2 x i64>* %101, align 8, !tbaa !22
  %142 = load <2 x i64>, <2 x i64>* %102, align 8, !tbaa !22
  store <2 x i64> %142, <2 x i64>* %103, align 8, !tbaa !22
  %143 = load <2 x i64>, <2 x i64>* %104, align 8, !tbaa !22
  store <2 x i64> %143, <2 x i64>* %105, align 8, !tbaa !22
  %144 = load <2 x i64>, <2 x i64>* %106, align 8, !tbaa !22
  store <2 x i64> %144, <2 x i64>* %107, align 8, !tbaa !22
  %145 = load <2 x i64>, <2 x i64>* %108, align 8, !tbaa !22
  store <2 x i64> %145, <2 x i64>* %109, align 8, !tbaa !22
  %146 = load <2 x i64>, <2 x i64>* %110, align 8, !tbaa !22
  store <2 x i64> %146, <2 x i64>* %111, align 8, !tbaa !22
  %147 = load <2 x i64>, <2 x i64>* %112, align 8, !tbaa !22
  store <2 x i64> %147, <2 x i64>* %113, align 8, !tbaa !22
  %148 = load i64, i64* %arrayidx.15, align 8, !tbaa !22
  store i64 %148, i64* %arrayidx.14, align 8, !tbaa !22
  %149 = load i64, i64* %arrayidx12.15, align 8, !tbaa !22
  store i64 %149, i64* %arrayidx12.14, align 8, !tbaa !22
  %150 = load i64, i64* %arrayidx14.15, align 8, !tbaa !22
  store i64 %150, i64* %arrayidx14.14, align 8, !tbaa !22
  store i64 1, i64* %arrayidx.15, align 8, !tbaa !22
  store i64 0, i64* %arrayidx12.15, align 8, !tbaa !22
  store i64 0, i64* %arrayidx14.15, align 8, !tbaa !22
  %151 = extractelement <2 x i64> %128, i32 0
  %cmp139 = icmp eq i64 %mul147, %151
  %152 = extractelement <2 x i64> %129, i32 0
  br i1 %cmp139, label %land.rhs, label %while.end, !llvm.loop !248

while.end:                                        ; preds = %while.body, %land.rhs, %while.cond.preheader, %for.cond54.preheader
  %153 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %agg.result to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(416) %153, i8* nonnull align 8 dereferenceable(416) %0, i64 416, i1 false), !tbaa.struct !249
  br label %cleanup

cleanup:                                          ; preds = %while.end, %if.then51, %if.then
  call void @llvm.lifetime.end.p0i8(i64 416, i8* nonnull %0) #11
  ret void
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #5

; Function Attrs: nounwind mustprogress
define linkonce zeroext i1 @_ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m(i8* %key1, i8* %key2, i64 %key_size) local_unnamed_addr #0 {
entry:
  %call = tail call i32 @memcmp(i8* %key1, i8* %key2, i64 %key_size) #14
  %cmp = icmp eq i32 %call, 0
  ret i1 %cmp
}

declare i32 @memcmp(i8*, i8*, i64) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define linkonce zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %buf, %struct.halide_dimension_t* %shape) local_unnamed_addr #0 {
entry:
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 5
  %0 = load i32, i32* %dimensions, align 4, !tbaa !183
  %cmp9 = icmp sgt i32 %0, 0
  br i1 %cmp9, label %for.body.lr.ph, label %return

for.body.lr.ph:                                   ; preds = %entry
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  %1 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !184
  %2 = zext i32 %0 to i64
  br label %for.body

for.cond:                                         ; preds = %_ZNK18halide_dimension_tneERKS_.exit
  %exitcond.not = icmp eq i64 %indvars.iv.next, %2
  br i1 %exitcond.not, label %return, label %for.body, !llvm.loop !250

for.body:                                         ; preds = %for.cond, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.cond ]
  %min.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %1, i64 %indvars.iv, i32 0
  %3 = load i32, i32* %min.i.i, align 4, !tbaa !221
  %min2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %shape, i64 %indvars.iv, i32 0
  %4 = load i32, i32* %min2.i.i, align 4, !tbaa !221
  %cmp.i.i = icmp eq i32 %3, %4
  br i1 %cmp.i.i, label %land.lhs.true.i.i, label %return

land.lhs.true.i.i:                                ; preds = %for.body
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %1, i64 %indvars.iv, i32 1
  %5 = load i32, i32* %extent.i.i, align 4, !tbaa !189
  %extent3.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %shape, i64 %indvars.iv, i32 1
  %6 = load i32, i32* %extent3.i.i, align 4, !tbaa !189
  %cmp4.i.i = icmp eq i32 %5, %6
  br i1 %cmp4.i.i, label %land.lhs.true5.i.i, label %return

land.lhs.true5.i.i:                               ; preds = %land.lhs.true.i.i
  %stride.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %1, i64 %indvars.iv, i32 2
  %7 = load i32, i32* %stride.i.i, align 4, !tbaa !185
  %stride6.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %shape, i64 %indvars.iv, i32 2
  %8 = load i32, i32* %stride6.i.i, align 4, !tbaa !185
  %cmp7.i.i = icmp eq i32 %7, %8
  br i1 %cmp7.i.i, label %_ZNK18halide_dimension_tneERKS_.exit, label %return

_ZNK18halide_dimension_tneERKS_.exit:             ; preds = %land.lhs.true5.i.i
  %flags.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %1, i64 %indvars.iv, i32 3
  %9 = load i32, i32* %flags.i.i, align 4, !tbaa !251
  %flags8.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %shape, i64 %indvars.iv, i32 3
  %10 = load i32, i32* %flags8.i.i, align 4, !tbaa !251
  %cmp9.i.i.not = icmp eq i32 %9, %10
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  br i1 %cmp9.i.i.not, label %for.cond, label %return

return:                                           ; preds = %_ZNK18halide_dimension_tneERKS_.exit, %land.lhs.true5.i.i, %land.lhs.true.i.i, %for.body, %for.cond, %entry
  %cmp.lcssa = phi i1 [ true, %entry ], [ false, %_ZNK18halide_dimension_tneERKS_.exit ], [ true, %for.cond ], [ false, %land.lhs.true5.i.i ], [ false, %land.lhs.true.i.i ], [ false, %for.body ]
  ret i1 %cmp.lcssa
}

; Function Attrs: nounwind mustprogress
define linkonce zeroext i1 @_ZN6Halide7Runtime8Internal10CacheEntry4initEPKhmjPK15halide_buffer_tiPPS5_by(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %this, i8* %cache_key, i64 %cache_key_size, i32 %key_hash, %struct.halide_buffer_t* %computed_bounds_buf, i32 %tuples, %struct.halide_buffer_t** %tuple_buffers, i1 zeroext %has_eviction_key_arg, i64 %eviction_key_arg) local_unnamed_addr #0 align 2 {
entry:
  %frombool = zext i1 %has_eviction_key_arg to i8
  %0 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"* %this to <2 x %"struct.Halide::Runtime::Internal::CacheEntry"*>*
  store <2 x %"struct.Halide::Runtime::Internal::CacheEntry"*> zeroinitializer, <2 x %"struct.Halide::Runtime::Internal::CacheEntry"*>* %0, align 8, !tbaa !14
  %less_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent, align 8, !tbaa !252
  %key_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 4
  store i64 %cache_key_size, i64* %key_size, align 8, !tbaa !253
  %hash = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 6
  store i32 %key_hash, i32* %hash, align 8, !tbaa !254
  %in_use_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 7
  store i32 0, i32* %in_use_count, align 4, !tbaa !255
  %tuple_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 8
  store i32 %tuples, i32* %tuple_count, align 8, !tbaa !232
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %computed_bounds_buf, i64 0, i32 5
  %1 = load i32, i32* %dimensions, align 4, !tbaa !183
  %dimensions2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 9
  store i32 %1, i32* %dimensions2, align 4, !tbaa !256
  %conv = zext i32 %tuples to i64
  %mul = mul nuw nsw i64 %conv, 56
  %conv5 = sext i32 %1 to i64
  %add8 = add i32 %tuples, 1
  %conv9 = zext i32 %add8 to i64
  %mul6 = shl nuw nsw i64 %conv9, 4
  %mul10 = mul i64 %mul6, %conv5
  %add11 = add i64 %mul10, %mul
  %add13 = add i64 %add11, %cache_key_size
  %call = tail call i8* @halide_malloc(i8* null, i64 %add13) #14
  %metadata_storage = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 3
  store i8* %call, i8** %metadata_storage, align 8, !tbaa !233
  %tobool.not = icmp eq i8* %call, null
  br i1 %tobool.not, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %buf = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 11
  %2 = bitcast %struct.halide_buffer_t** %buf to i8**
  store i8* %call, i8** %2, align 8, !tbaa !234
  %add.ptr = getelementptr inbounds i8, i8* %call, i64 %mul
  %computed_bounds = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 10
  %3 = bitcast %struct.halide_dimension_t** %computed_bounds to i8**
  store i8* %add.ptr, i8** %3, align 8, !tbaa !257
  %add.ptr18 = getelementptr inbounds i8, i8* %call, i64 %add11
  %key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 5
  store i8* %add.ptr18, i8** %key, align 8, !tbaa !258
  %4 = load i64, i64* %key_size, align 8, !tbaa !253
  %cmp117.not = icmp eq i64 %4, 0
  br i1 %cmp117.not, label %for.cond23.preheader, label %for.body.preheader

for.body.preheader:                               ; preds = %if.end
  %5 = load i8, i8* %cache_key, align 1, !tbaa !18
  store i8 %5, i8* %add.ptr18, align 1, !tbaa !18
  %cmp130.not = icmp eq i64 %4, 1
  br i1 %cmp130.not, label %for.cond23.preheader, label %for.body.for.body_crit_edge.preheader, !llvm.loop !259

for.body.for.body_crit_edge.preheader:            ; preds = %for.body.preheader
  %arrayidx2 = getelementptr inbounds i8, i8* %cache_key, i64 1
  %6 = load i8, i8* %arrayidx2, align 1, !tbaa !18
  %arrayidx213 = getelementptr inbounds i8, i8* %add.ptr18, i64 1
  store i8 %6, i8* %arrayidx213, align 1, !tbaa !18
  %7 = load i64, i64* %key_size, align 8, !tbaa !253
  %cmp4 = icmp ugt i64 %7, 2
  br i1 %cmp4, label %for.body.for.body_crit_edge.for.body.for.body_crit_edge_crit_edge, label %for.cond23.preheader, !llvm.loop !259

for.cond23.preheader:                             ; preds = %for.body.for.body_crit_edge.for.body.for.body_crit_edge_crit_edge, %for.body.for.body_crit_edge.preheader, %for.body.preheader, %if.end
  %8 = load i32, i32* %dimensions2, align 4, !tbaa !256
  %cmp25115 = icmp sgt i32 %8, 0
  br i1 %cmp25115, label %for.body27.lr.ph, label %for.cond36.preheader

for.body27.lr.ph:                                 ; preds = %for.cond23.preheader
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %computed_bounds_buf, i64 0, i32 6
  br label %for.body27

for.body.for.body_crit_edge.for.body.for.body_crit_edge_crit_edge: ; preds = %for.body.for.body_crit_edge.preheader, %for.body.for.body_crit_edge.for.body.for.body_crit_edge_crit_edge
  %inc5 = phi i64 [ %inc, %for.body.for.body_crit_edge.for.body.for.body_crit_edge_crit_edge ], [ 2, %for.body.for.body_crit_edge.preheader ]
  %.pre.pre = load i8*, i8** %key, align 8, !tbaa !258
  %arrayidx = getelementptr inbounds i8, i8* %cache_key, i64 %inc5
  %9 = load i8, i8* %arrayidx, align 1, !tbaa !18
  %arrayidx21 = getelementptr inbounds i8, i8* %.pre.pre, i64 %inc5
  store i8 %9, i8* %arrayidx21, align 1, !tbaa !18
  %inc = add nuw i64 %inc5, 1
  %10 = load i64, i64* %key_size, align 8, !tbaa !253
  %cmp = icmp ult i64 %inc, %10
  br i1 %cmp, label %for.body.for.body_crit_edge.for.body.for.body_crit_edge_crit_edge, label %for.cond23.preheader, !llvm.loop !259

for.cond36.preheader:                             ; preds = %for.body27, %for.cond23.preheader
  %11 = load i32, i32* %tuple_count, align 8, !tbaa !232
  %cmp38113.not = icmp eq i32 %11, 0
  br i1 %cmp38113.not, label %for.cond.cleanup39, label %for.body40

for.body27:                                       ; preds = %for.body27, %for.body27.lr.ph
  %indvars.iv121 = phi i64 [ 0, %for.body27.lr.ph ], [ %indvars.iv.next122, %for.body27 ]
  %12 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !184
  %arrayidx28 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i64 %indvars.iv121
  %13 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds, align 8, !tbaa !257
  %arrayidx31 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %13, i64 %indvars.iv121
  %14 = bitcast %struct.halide_dimension_t* %arrayidx31 to i8*
  %15 = bitcast %struct.halide_dimension_t* %arrayidx28 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %14, i8* nonnull align 4 dereferenceable(16) %15, i64 16, i1 false), !tbaa.struct !188
  %indvars.iv.next122 = add nuw nsw i64 %indvars.iv121, 1
  %16 = load i32, i32* %dimensions2, align 4, !tbaa !256
  %17 = sext i32 %16 to i64
  %cmp25 = icmp slt i64 %indvars.iv.next122, %17
  br i1 %cmp25, label %for.body27, label %for.cond36.preheader, !llvm.loop !260

for.cond36.loopexit:                              ; preds = %for.body59.for.body59_crit_edge, %for.body59.preheader, %for.body40
  %18 = load i32, i32* %tuple_count, align 8, !tbaa !232
  %19 = zext i32 %18 to i64
  %cmp38 = icmp ult i64 %indvars.iv.next120, %19
  br i1 %cmp38, label %for.body40, label %for.cond.cleanup39, !llvm.loop !261

for.cond.cleanup39:                               ; preds = %for.cond36.loopexit, %for.cond36.preheader
  %has_eviction_key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 13
  store i8 %frombool, i8* %has_eviction_key, align 8, !tbaa !262
  %eviction_key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 12
  store i64 %eviction_key_arg, i64* %eviction_key, align 8, !tbaa !263
  br label %cleanup

for.body40:                                       ; preds = %for.cond36.preheader, %for.cond36.loopexit
  %indvars.iv119 = phi i64 [ %indvars.iv.next120, %for.cond36.loopexit ], [ 0, %for.cond36.preheader ]
  %arrayidx42 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv119
  %20 = bitcast %struct.halide_buffer_t** %arrayidx42 to i8**
  %21 = load i8*, i8** %20, align 8, !tbaa !14
  %22 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !234
  %arrayidx45 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %22, i64 %indvars.iv119
  %23 = bitcast %struct.halide_buffer_t* %arrayidx45 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(56) %23, i8* nonnull align 8 dereferenceable(56) %21, i64 56, i1 false), !tbaa.struct !264
  %24 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds, align 8, !tbaa !257
  %indvars.iv.next120 = add nuw nsw i64 %indvars.iv119, 1
  %25 = load i32, i32* %dimensions2, align 4, !tbaa !256
  %26 = trunc i64 %indvars.iv.next120 to i32
  %mul49 = mul i32 %25, %26
  %idx.ext = zext i32 %mul49 to i64
  %add.ptr50 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %24, i64 %idx.ext
  %27 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !234
  %dim54 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %27, i64 %indvars.iv119, i32 6
  store %struct.halide_dimension_t* %add.ptr50, %struct.halide_dimension_t** %dim54, align 8, !tbaa !184
  %cmp57111 = icmp sgt i32 %25, 0
  br i1 %cmp57111, label %for.body59.preheader, label %for.cond36.loopexit

for.body59.preheader:                             ; preds = %for.body40
  %28 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx42, align 8, !tbaa !14
  %dim62125 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %28, i64 0, i32 6
  %29 = bitcast %struct.halide_dimension_t** %dim62125 to i8**
  %30 = load i8*, i8** %29, align 8, !tbaa !184
  %31 = bitcast %struct.halide_dimension_t* %add.ptr50 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %31, i8* nonnull align 4 dereferenceable(16) %30, i64 16, i1 false), !tbaa.struct !188
  %32 = load i32, i32* %dimensions2, align 4, !tbaa !256
  %cmp57128 = icmp sgt i32 %32, 1
  br i1 %cmp57128, label %for.body59.for.body59_crit_edge, label %for.cond36.loopexit, !llvm.loop !266

for.body59.for.body59_crit_edge:                  ; preds = %for.body59.preheader, %for.body59.for.body59_crit_edge
  %indvars.iv.next129 = phi i64 [ %indvars.iv.next, %for.body59.for.body59_crit_edge ], [ 1, %for.body59.preheader ]
  %.pre123 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !234
  %dim68.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %.pre123, i64 %indvars.iv119, i32 6
  %.pre124 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim68.phi.trans.insert, align 8, !tbaa !184
  %33 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx42, align 8, !tbaa !14
  %dim62 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %33, i64 0, i32 6
  %34 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim62, align 8, !tbaa !184
  %arrayidx64 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %34, i64 %indvars.iv.next129
  %arrayidx70 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %.pre124, i64 %indvars.iv.next129
  %35 = bitcast %struct.halide_dimension_t* %arrayidx70 to i8*
  %36 = bitcast %struct.halide_dimension_t* %arrayidx64 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %35, i8* nonnull align 4 dereferenceable(16) %36, i64 16, i1 false), !tbaa.struct !188
  %indvars.iv.next = add nuw nsw i64 %indvars.iv.next129, 1
  %37 = load i32, i32* %dimensions2, align 4, !tbaa !256
  %38 = sext i32 %37 to i64
  %cmp57 = icmp slt i64 %indvars.iv.next, %38
  br i1 %cmp57, label %for.body59.for.body59_crit_edge, label %for.cond36.loopexit, !llvm.loop !266

cleanup:                                          ; preds = %for.cond.cleanup39, %entry
  %39 = xor i1 %tobool.not, true
  ret i1 %39
}

; Function Attrs: nounwind mustprogress
define linkonce i32 @_ZN6Halide7Runtime8Internal8djb_hashEPKhm(i8* %key, i64 %key_size) local_unnamed_addr #0 {
entry:
  %cmp8.not = icmp eq i64 %key_size, 0
  br i1 %cmp8.not, label %for.cond.cleanup, label %entry.for.body_crit_edge

entry.for.body_crit_edge:                         ; preds = %entry
  %inc.1 = add nuw i64 0, 1
  %arrayidx.1 = getelementptr inbounds i8, i8* %key, i64 0
  %add.1 = mul i32 5381, 33
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %entry
  %h.0.lcssa = phi i32 [ 5381, %entry ], [ %add1, %for.body ]
  ret i32 %h.0.lcssa

for.body:                                         ; preds = %entry.for.body_crit_edge, %for.body.for.body_crit_edge
  %add.phi = phi i32 [ %add.0, %for.body.for.body_crit_edge ], [ %add.1, %entry.for.body_crit_edge ]
  %arrayidx.phi = phi i8* [ %arrayidx.0, %for.body.for.body_crit_edge ], [ %arrayidx.1, %entry.for.body_crit_edge ]
  %inc.phi = phi i64 [ %inc.0, %for.body.for.body_crit_edge ], [ %inc.1, %entry.for.body_crit_edge ]
  %0 = load i8, i8* %arrayidx.phi, align 1, !tbaa !18
  %conv = zext i8 %0 to i32
  %add1 = add i32 %add.phi, %conv
  %exitcond.not = icmp eq i64 %inc.phi, %key_size
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body.for.body_crit_edge, !llvm.loop !267

for.body.for.body_crit_edge:                      ; preds = %for.body
  %inc.0 = add nuw i64 %inc.phi, 1
  %arrayidx.0 = getelementptr inbounds i8, i8* %key, i64 %inc.phi
  %add.0 = mul i32 %add1, 33
  br label %for.body
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal11prune_cacheEv() local_unnamed_addr #0 {
entry:
  %0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !14
  %1 = load i64, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !22
  %2 = load i64, i64* @_ZN6Halide7Runtime8Internal14max_cache_sizeE, align 8, !tbaa !22
  %cmp84 = icmp sgt i64 %1, %2
  %cmp185 = icmp ne %"struct.Halide::Runtime::Internal::CacheEntry"* %0, null
  %3 = and i1 %cmp185, %cmp84
  br i1 %3, label %while.body, label %while.end42

while.body:                                       ; preds = %entry, %if.end41
  %4 = phi i64 [ %74, %if.end41 ], [ %2, %entry ]
  %5 = phi i64 [ %75, %if.end41 ], [ %1, %entry ]
  %prune_candidate.086 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %6, %if.end41 ], [ %0, %entry ]
  %more_recent2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 1
  %6 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent2, align 8, !tbaa !268
  %in_use_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 7
  %7 = load i32, i32* %in_use_count, align 4, !tbaa !255
  %cmp3 = icmp eq i32 %7, 0
  br i1 %cmp3, label %if.then, label %if.end41

if.then:                                          ; preds = %while.body
  %hash = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 6
  %8 = load i32, i32* %hash, align 8, !tbaa !254
  %9 = and i32 %8, 255
  %idxprom = zext i32 %9 to i64
  %arrayidx = getelementptr inbounds [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 0, i64 %idxprom
  %10 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx, align 8, !tbaa !14
  %cmp5 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %10, %prune_candidate.086
  br i1 %cmp5, label %if.then6, label %while.cond9

if.then6:                                         ; preds = %if.then
  %next = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 0
  %11 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next, align 8, !tbaa !229
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %11, %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx, align 8, !tbaa !14
  br label %if.end21

while.cond9:                                      ; preds = %if.then, %land.rhs11
  %prev_hash_entry.0 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %12, %land.rhs11 ], [ %10, %if.then ]
  %cmp10.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %prev_hash_entry.0, null
  br i1 %cmp10.not, label %if.then18, label %land.rhs11

land.rhs11:                                       ; preds = %while.cond9
  %next12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prev_hash_entry.0, i64 0, i32 0
  %12 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next12, align 8, !tbaa !229
  %cmp13.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %12, %prune_candidate.086
  br i1 %cmp13.not, label %do.end, label %while.cond9, !llvm.loop !269

if.then18:                                        ; preds = %while.cond9
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([126 x i8], [126 x i8]* @.str.2.42, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %do.end

do.end:                                           ; preds = %land.rhs11, %if.then18
  %next19 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 0
  %13 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next19, align 8, !tbaa !229
  %next20 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prev_hash_entry.0, i64 0, i32 0
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %13, %"struct.Halide::Runtime::Internal::CacheEntry"** %next20, align 8, !tbaa !229
  br label %if.end21

if.end21:                                         ; preds = %do.end, %if.then6
  %14 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !14
  %cmp22 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %14, %prune_candidate.086
  br i1 %cmp22, label %if.then23, label %if.end24

if.then23:                                        ; preds = %if.end21
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %6, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !14
  br label %if.end24

if.end24:                                         ; preds = %if.then23, %if.end21
  %cmp25.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %6, null
  br i1 %cmp25.not, label %if.end28, label %if.then26

if.then26:                                        ; preds = %if.end24
  %less_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 2
  %15 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent, align 8, !tbaa !252
  %less_recent27 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %6, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %15, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent27, align 8, !tbaa !252
  br label %if.end28

if.end28:                                         ; preds = %if.then26, %if.end24
  %16 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !14
  %cmp29 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %16, %prune_candidate.086
  %less_recent31 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 2
  %17 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent31, align 8, !tbaa !252
  br i1 %cmp29, label %if.then30, label %if.end32

if.then30:                                        ; preds = %if.end28
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %17, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !14
  br label %if.end32

if.end32:                                         ; preds = %if.then30, %if.end28
  %cmp34.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %17, null
  br i1 %cmp34.not, label %if.end37, label %if.then35

if.then35:                                        ; preds = %if.end32
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %6, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent31, align 8, !tbaa !252
  br label %if.end37

if.end37:                                         ; preds = %if.then35, %if.end32
  %tuple_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 8
  %18 = load i32, i32* %tuple_count, align 8, !tbaa !232
  %cmp3882.not = icmp eq i32 %18, 0
  br i1 %cmp3882.not, label %for.cond.cleanup, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %if.end37
  %buf = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 11
  %19 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !234
  %_ZN6Halide7Runtime8Internal18current_cache_sizeE.promoted = load i64, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !22
  %wide.trip.count = zext i32 %18 to i64
  br label %for.body

for.cond.for.cond.cleanup_crit_edge:              ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  store i64 %sub, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !22
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.for.cond.cleanup_crit_edge, %if.end37
  tail call void @_ZN6Halide7Runtime8Internal10CacheEntry7destroyEv(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %prune_candidate.086) #15
  %20 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086 to i8*
  tail call void @halide_free(i8* null, i8* nonnull %20) #14
  %.pre92 = load i64, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !22
  %.pre93 = load i64, i64* @_ZN6Halide7Runtime8Internal14max_cache_sizeE, align 8, !tbaa !22
  br label %if.end41

for.body:                                         ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ]
  %sub89 = phi i64 [ %_ZN6Halide7Runtime8Internal18current_cache_sizeE.promoted, %for.body.lr.ph ], [ %sub, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ]
  %dimensions.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %19, i64 %indvars.iv, i32 5
  %21 = load i32, i32* %dimensions.i.i, align 4, !tbaa !183
  %cmp19.i.i = icmp sgt i32 %21, 0
  br i1 %cmp19.i.i, label %for.body.lr.ph.i.i, label %for.body._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge

for.body._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge: ; preds = %for.body
  %sub.i.neg.0 = add i64 0, -1
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.lr.ph.i.i:                               ; preds = %for.body
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %19, i64 %indvars.iv, i32 6
  %22 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8, !tbaa !184
  %wide.trip.count.i.i = zext i32 %21 to i64
  %min.iters.check28 = icmp ult i32 %21, 3
  br i1 %min.iters.check28, label %for.body.i.i.preheader, label %vector.ph29

vector.ph29:                                      ; preds = %for.body.lr.ph.i.i
  %n.vec31 = and i64 %wide.trip.count.i.i, 4294967294
  br label %vector.body27

vector.body27:                                    ; preds = %pred.load.continue43, %vector.ph29
  %index32 = phi i64 [ 0, %vector.ph29 ], [ %index.next33, %pred.load.continue43 ]
  %vec.phi38 = phi i64 [ 0, %vector.ph29 ], [ %predphi44, %pred.load.continue43 ]
  %vec.phi39 = phi i64 [ 0, %vector.ph29 ], [ %predphi45, %pred.load.continue43 ]
  %induction37 = or i64 %index32, 1
  %23 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %index32, i32 2
  %24 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %induction37, i32 2
  %25 = load i32, i32* %23, align 4, !tbaa !185
  %26 = load i32, i32* %24, align 4, !tbaa !185
  %27 = icmp sgt i32 %25, 0
  %28 = icmp sgt i32 %26, 0
  %29 = zext i32 %25 to i64
  %30 = zext i32 %26 to i64
  br i1 %27, label %pred.load.if40, label %pred.load.continue41

pred.load.if40:                                   ; preds = %vector.body27
  %31 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %index32, i32 1
  %32 = load i32, i32* %31, align 4, !tbaa !189
  br label %pred.load.continue41

pred.load.continue41:                             ; preds = %pred.load.if40, %vector.body27
  %33 = phi i32 [ poison, %vector.body27 ], [ %32, %pred.load.if40 ]
  br i1 %28, label %pred.load.if42, label %pred.load.continue43

pred.load.if42:                                   ; preds = %pred.load.continue41
  %34 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %induction37, i32 1
  %35 = load i32, i32* %34, align 4, !tbaa !189
  br label %pred.load.continue43

pred.load.continue43:                             ; preds = %pred.load.if42, %pred.load.continue41
  %36 = phi i32 [ poison, %pred.load.continue41 ], [ %35, %pred.load.if42 ]
  %37 = add nsw i32 %33, -1
  %38 = add nsw i32 %36, -1
  %39 = sext i32 %37 to i64
  %40 = sext i32 %38 to i64
  %41 = mul nsw i64 %39, %29
  %42 = mul nsw i64 %40, %30
  %43 = select i1 %27, i64 %41, i64 0
  %predphi44 = add i64 %vec.phi38, %43
  %44 = select i1 %28, i64 %42, i64 0
  %predphi45 = add i64 %vec.phi39, %44
  %index.next33 = add i64 %index32, 2
  %45 = icmp eq i64 %index.next33, %n.vec31
  br i1 %45, label %middle.block25, label %vector.body27, !llvm.loop !270

middle.block25:                                   ; preds = %pred.load.continue43
  %bin.rdx46 = add i64 %predphi45, %predphi44
  %cmp.n35 = icmp eq i64 %n.vec31, %wide.trip.count.i.i
  br i1 %cmp.n35, label %for.body.i13.i.preheader, label %for.body.i.i.preheader

for.body.i.i.preheader:                           ; preds = %for.body.lr.ph.i.i, %middle.block25
  %indvars.iv.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %n.vec31, %middle.block25 ]
  %index.021.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %bin.rdx46, %middle.block25 ]
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.body.i.i.preheader, %if.end.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %if.end.i.i ], [ %indvars.iv.i.i.ph, %for.body.i.i.preheader ]
  %index.021.i.i = phi i64 [ %index.1.i.i, %if.end.i.i ], [ %index.021.i.i.ph, %for.body.i.i.preheader ]
  %stride2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %indvars.iv.i.i, i32 2
  %46 = load i32, i32* %stride2.i.i, align 4, !tbaa !185
  %cmp3.i.i = icmp sgt i32 %46, 0
  br i1 %cmp3.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %conv18.i.i = zext i32 %46 to i64
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %indvars.iv.i.i, i32 1
  %47 = load i32, i32* %extent.i.i, align 4, !tbaa !189
  %sub.i.i = add nsw i32 %47, -1
  %conv7.i.i = sext i32 %sub.i.i to i64
  %mul.i.i = mul nsw i64 %conv7.i.i, %conv18.i.i
  %add.i.i = add nsw i64 %mul.i.i, %index.021.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i64 [ %add.i.i, %if.then.i.i ], [ %index.021.i.i, %for.body.i.i ]
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %exitcond.not.i.i = icmp eq i64 %indvars.iv.next.i.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i.i, label %for.body.i13.i.preheader, label %for.body.i.i, !llvm.loop !271

for.body.i13.i.preheader:                         ; preds = %if.end.i.i, %middle.block25
  %index.1.i.i.lcssa = phi i64 [ %bin.rdx46, %middle.block25 ], [ %index.1.i.i, %if.end.i.i ]
  %min.iters.check = icmp ult i32 %21, 3
  br i1 %min.iters.check, label %for.body.i13.i.preheader48, label %vector.ph

vector.ph:                                        ; preds = %for.body.i13.i.preheader
  %n.vec = and i64 %wide.trip.count.i.i, 4294967294
  br label %vector.body

vector.body:                                      ; preds = %pred.load.continue23, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %pred.load.continue23 ]
  %vec.phi = phi i64 [ 0, %vector.ph ], [ %predphi, %pred.load.continue23 ]
  %vec.phi21 = phi i64 [ 0, %vector.ph ], [ %predphi24, %pred.load.continue23 ]
  %induction20 = or i64 %index, 1
  %48 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %index, i32 2
  %49 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %induction20, i32 2
  %50 = load i32, i32* %48, align 4, !tbaa !185
  %51 = load i32, i32* %49, align 4, !tbaa !185
  %52 = icmp slt i32 %50, 0
  %53 = icmp slt i32 %51, 0
  %54 = sext i32 %50 to i64
  %55 = sext i32 %51 to i64
  br i1 %52, label %pred.load.if, label %pred.load.continue

pred.load.if:                                     ; preds = %vector.body
  %56 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %index, i32 1
  %57 = load i32, i32* %56, align 4, !tbaa !189
  br label %pred.load.continue

pred.load.continue:                               ; preds = %pred.load.if, %vector.body
  %58 = phi i32 [ poison, %vector.body ], [ %57, %pred.load.if ]
  br i1 %53, label %pred.load.if22, label %pred.load.continue23

pred.load.if22:                                   ; preds = %pred.load.continue
  %59 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %induction20, i32 1
  %60 = load i32, i32* %59, align 4, !tbaa !189
  br label %pred.load.continue23

pred.load.continue23:                             ; preds = %pred.load.if22, %pred.load.continue
  %61 = phi i32 [ poison, %pred.load.continue ], [ %60, %pred.load.if22 ]
  %62 = add nsw i32 %58, -1
  %63 = add nsw i32 %61, -1
  %64 = sext i32 %62 to i64
  %65 = sext i32 %63 to i64
  %66 = mul nsw i64 %64, %54
  %67 = mul nsw i64 %65, %55
  %68 = select i1 %52, i64 %66, i64 0
  %predphi = add i64 %vec.phi, %68
  %69 = select i1 %53, i64 %67, i64 0
  %predphi24 = add i64 %vec.phi21, %69
  %index.next = add i64 %index, 2
  %70 = icmp eq i64 %index.next, %n.vec
  br i1 %70, label %middle.block, label %vector.body, !llvm.loop !272

middle.block:                                     ; preds = %pred.load.continue23
  %bin.rdx = add i64 %predphi24, %predphi
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count.i.i
  br i1 %cmp.n, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i.preheader48

for.body.i13.i.preheader48:                       ; preds = %for.body.i13.i.preheader, %middle.block
  %indvars.iv.i10.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %n.vec, %middle.block ]
  %index.018.i.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %bin.rdx, %middle.block ]
  br label %for.body.i13.i

for.body.i13.i:                                   ; preds = %for.body.i13.i.preheader48, %if.end.i24.i
  %indvars.iv.i10.i = phi i64 [ %indvars.iv.next.i22.i, %if.end.i24.i ], [ %indvars.iv.i10.i.ph, %for.body.i13.i.preheader48 ]
  %index.018.i.i = phi i64 [ %index.1.i21.i, %if.end.i24.i ], [ %index.018.i.i.ph, %for.body.i13.i.preheader48 ]
  %stride2.i11.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %indvars.iv.i10.i, i32 2
  %71 = load i32, i32* %stride2.i11.i, align 4, !tbaa !185
  %cmp3.i12.i = icmp slt i32 %71, 0
  br i1 %cmp3.i12.i, label %if.then.i20.i, label %if.end.i24.i

if.then.i20.i:                                    ; preds = %for.body.i13.i
  %conv.i14.i = sext i32 %71 to i64
  %extent.i15.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %indvars.iv.i10.i, i32 1
  %72 = load i32, i32* %extent.i15.i, align 4, !tbaa !189
  %sub.i16.i = add nsw i32 %72, -1
  %conv7.i17.i = sext i32 %sub.i16.i to i64
  %mul.i18.i = mul nsw i64 %conv7.i17.i, %conv.i14.i
  %add.i19.i = add nsw i64 %mul.i18.i, %index.018.i.i
  br label %if.end.i24.i

if.end.i24.i:                                     ; preds = %if.then.i20.i, %for.body.i13.i
  %index.1.i21.i = phi i64 [ %add.i19.i, %if.then.i20.i ], [ %index.018.i.i, %for.body.i13.i ]
  %indvars.iv.next.i22.i = add nuw nsw i64 %indvars.iv.i10.i, 1
  %exitcond.not.i23.i = icmp eq i64 %indvars.iv.next.i22.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i23.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i, !llvm.loop !273

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %if.end.i24.i, %middle.block
  %index.1.i21.i.lcssa = phi i64 [ %bin.rdx, %middle.block ], [ %index.1.i21.i, %if.end.i24.i ]
  %add8.i.i.neg = xor i64 %index.1.i.i.lcssa, -1
  %sub.i.neg.1 = add i64 %index.1.i21.i.lcssa, %add8.i.i.neg
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %for.body._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit
  %sub.i.neg.phi = phi i64 [ %sub.i.neg.0, %for.body._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge ], [ %sub.i.neg.1, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %bits.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %19, i64 %indvars.iv, i32 4, i32 1
  %73 = load i8, i8* %bits.i.i, align 1, !tbaa !144
  %conv.i.i = zext i8 %73 to i64
  %add.i4.i = add nuw nsw i64 %conv.i.i, 7
  %div.i.i = lshr i64 %add.i4.i, 3
  %mul.i.neg = mul i64 %div.i.i, %sub.i.neg.phi
  %sub = add i64 %mul.i.neg, %sub89
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.for.cond.cleanup_crit_edge, label %for.body, !llvm.loop !274

if.end41:                                         ; preds = %for.cond.cleanup, %while.body
  %74 = phi i64 [ %.pre93, %for.cond.cleanup ], [ %4, %while.body ]
  %75 = phi i64 [ %.pre92, %for.cond.cleanup ], [ %5, %while.body ]
  %cmp = icmp sgt i64 %75, %74
  %cmp1 = icmp ne %"struct.Halide::Runtime::Internal::CacheEntry"* %6, null
  %76 = and i1 %cmp1, %cmp
  br i1 %76, label %while.body, label %while.end42, !llvm.loop !275

while.end42:                                      ; preds = %if.end41, %entry
  ret void
}

; Function Attrs: nounwind
define weak void @halide_memoization_cache_set_size(i64 %size) local_unnamed_addr #4 {
entry:
  %cmp = icmp eq i64 %size, 0
  %spec.store.select = select i1 %cmp, i64 1048576, i64 %size
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #14
  store i64 %spec.store.select, i64* @_ZN6Halide7Runtime8Internal14max_cache_sizeE, align 8, !tbaa !22
  tail call void @_ZN6Halide7Runtime8Internal11prune_cacheEv() #15
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #14
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_memoization_cache_lookup(i8* %user_context, i8* %cache_key, i32 %size, %struct.halide_buffer_t* %computed_bounds, i32 %tuple_count, %struct.halide_buffer_t** %tuple_buffers) local_unnamed_addr #4 {
entry:
  %conv = sext i32 %size to i64
  %call = tail call i32 @_ZN6Halide7Runtime8Internal8djb_hashEPKhm(i8* %cache_key, i64 %conv) #15
  %0 = and i32 %call, 255
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #14
  %idxprom = zext i32 %0 to i64
  %arrayidx = getelementptr inbounds [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 0, i64 %idxprom
  %entry3.0220 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx, align 8, !tbaa !14
  %cmp.not221 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0220, null
  br i1 %cmp.not221, label %for.cond75.preheader, label %while.body.lr.ph

while.body.lr.ph:                                 ; preds = %entry
  %cmp16215 = icmp sgt i32 %tuple_count, 0
  %1 = sext i32 %tuple_count to i64
  br i1 %cmp16215, label %while.body.us, label %while.body

while.body.us:                                    ; preds = %while.body.lr.ph, %if.end73.us
  %entry3.0222.us = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %entry3.0.us, %if.end73.us ], [ %entry3.0220, %while.body.lr.ph ]
  %hash.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 6
  %2 = load i32, i32* %hash.us, align 8, !tbaa !254
  %cmp4.us = icmp eq i32 %2, %call
  br i1 %cmp4.us, label %land.lhs.true.us, label %if.end73.us

land.lhs.true.us:                                 ; preds = %while.body.us
  %key_size.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 4
  %3 = load i64, i64* %key_size.us, align 8, !tbaa !253
  %cmp6.us = icmp eq i64 %3, %conv
  br i1 %cmp6.us, label %land.lhs.true7.us, label %if.end73.us

land.lhs.true7.us:                                ; preds = %land.lhs.true.us
  %key.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 5
  %4 = load i8*, i8** %key.us, align 8, !tbaa !258
  %call9.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m(i8* %4, i8* %cache_key, i64 %conv) #15
  br i1 %call9.us, label %land.lhs.true10.us, label %if.end73.us

land.lhs.true10.us:                               ; preds = %land.lhs.true7.us
  %computed_bounds11.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 10
  %5 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds11.us, align 8, !tbaa !257
  %call12.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %computed_bounds, %struct.halide_dimension_t* %5) #15
  br i1 %call12.us, label %land.lhs.true13.us, label %if.end73.us

land.lhs.true13.us:                               ; preds = %land.lhs.true10.us
  %tuple_count14.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 8
  %6 = load i32, i32* %tuple_count14.us, align 8, !tbaa !232
  %cmp15.us = icmp eq i32 %6, %tuple_count
  br i1 %cmp15.us, label %for.cond.preheader.us, label %if.end73.us

for.cond.preheader.us:                            ; preds = %land.lhs.true13.us
  %buf.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 11
  br label %for.body.us

for.body.us:                                      ; preds = %for.body.us, %for.cond.preheader.us
  %indvars.iv226.us = phi i64 [ 0, %for.cond.preheader.us ], [ %indvars.iv.next227.us, %for.body.us ]
  %arrayidx18.us = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv226.us
  %7 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx18.us, align 8, !tbaa !14
  %8 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf.us, align 8, !tbaa !234
  %dim.us = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %8, i64 %indvars.iv226.us, i32 6
  %9 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.us, align 8, !tbaa !184
  %call21.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %7, %struct.halide_dimension_t* %9) #15
  %indvars.iv.next227.us = add nuw nsw i64 %indvars.iv226.us, 1
  %cmp16.us = icmp slt i64 %indvars.iv.next227.us, %1
  %10 = and i1 %cmp16.us, %call21.us
  br i1 %10, label %for.body.us, label %for.cond.cleanup.us, !llvm.loop !276

for.cond.cleanup.us:                              ; preds = %for.body.us
  br i1 %call21.us, label %if.then23, label %if.end73.us

if.end73.us:                                      ; preds = %for.cond.cleanup.us, %land.lhs.true13.us, %land.lhs.true10.us, %land.lhs.true7.us, %land.lhs.true.us, %while.body.us
  %next.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 0
  %entry3.0.us = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next.us, align 8, !tbaa !14
  %cmp.not.us = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0.us, null
  br i1 %cmp.not.us, label %for.cond75.preheader, label %while.body.us, !llvm.loop !277

for.cond75.preheader:                             ; preds = %if.end73, %if.end73.us, %entry
  %cmp76210 = icmp sgt i32 %tuple_count, 0
  br i1 %cmp76210, label %for.body78.preheader, label %cleanup119

for.body78.preheader:                             ; preds = %for.cond75.preheader
  %wide.trip.count = zext i32 %tuple_count to i64
  br label %for.body78

while.body:                                       ; preds = %while.body.lr.ph, %if.end73
  %entry3.0222 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %entry3.0, %if.end73 ], [ %entry3.0220, %while.body.lr.ph ]
  %hash = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 6
  %11 = load i32, i32* %hash, align 8, !tbaa !254
  %cmp4 = icmp eq i32 %11, %call
  br i1 %cmp4, label %land.lhs.true, label %if.end73

land.lhs.true:                                    ; preds = %while.body
  %key_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 4
  %12 = load i64, i64* %key_size, align 8, !tbaa !253
  %cmp6 = icmp eq i64 %12, %conv
  br i1 %cmp6, label %land.lhs.true7, label %if.end73

land.lhs.true7:                                   ; preds = %land.lhs.true
  %key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 5
  %13 = load i8*, i8** %key, align 8, !tbaa !258
  %call9 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m(i8* %13, i8* %cache_key, i64 %conv) #15
  br i1 %call9, label %land.lhs.true10, label %if.end73

land.lhs.true10:                                  ; preds = %land.lhs.true7
  %computed_bounds11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 10
  %14 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds11, align 8, !tbaa !257
  %call12 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %computed_bounds, %struct.halide_dimension_t* %14) #15
  br i1 %call12, label %land.lhs.true13, label %if.end73

land.lhs.true13:                                  ; preds = %land.lhs.true10
  %tuple_count14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 8
  %15 = load i32, i32* %tuple_count14, align 8, !tbaa !232
  %cmp15 = icmp eq i32 %15, %tuple_count
  br i1 %cmp15, label %if.then23, label %if.end73

if.then23:                                        ; preds = %land.lhs.true13, %for.cond.cleanup.us
  %.us-phi = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %entry3.0222.us, %for.cond.cleanup.us ], [ %entry3.0222, %land.lhs.true13 ]
  %16 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !14
  %cmp24.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, %16
  br i1 %cmp24.not, label %if.end57, label %do.body

do.body:                                          ; preds = %if.then23
  %more_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, i64 0, i32 1
  %17 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !268
  %cmp26.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %17, null
  br i1 %cmp26.not, label %if.then27, label %do.end

if.then27:                                        ; preds = %do.body
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([129 x i8], [129 x i8]* @.str.3.43, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %do.end

do.end:                                           ; preds = %if.then27, %do.body
  %less_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, i64 0, i32 2
  %18 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent, align 8, !tbaa !252
  %cmp28.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %18, null
  br i1 %cmp28.not, label %do.body33, label %if.then29

if.then29:                                        ; preds = %do.end
  %19 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !268
  %more_recent32 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %18, i64 0, i32 1
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %19, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent32, align 8, !tbaa !268
  %.pr = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !268
  br label %do.body41

do.body33:                                        ; preds = %do.end
  %20 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !14
  %cmp34 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %20, %.us-phi
  br i1 %cmp34, label %do.end38, label %if.then35

if.then35:                                        ; preds = %do.body33
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @.str.4.44, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %do.end38

do.end38:                                         ; preds = %if.then35, %do.body33
  %21 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !268
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %21, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !14
  br label %do.body41

do.body41:                                        ; preds = %do.end38, %if.then29
  %22 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %.pr, %if.then29 ], [ %21, %do.end38 ]
  %cmp43.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %22, null
  br i1 %cmp43.not, label %if.then44, label %do.end47

if.then44:                                        ; preds = %do.body41
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([129 x i8], [129 x i8]* @.str.5.45, i64 0, i64 0)) #14
  tail call void @abort() #14
  %.pre = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !268
  br label %do.end47

do.end47:                                         ; preds = %if.then44, %do.body41
  %23 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %.pre, %if.then44 ], [ %22, %do.body41 ]
  %24 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent, align 8, !tbaa !252
  %less_recent50 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %23, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %24, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent50, align 8, !tbaa !252
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !268
  %25 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !14
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %25, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent, align 8, !tbaa !252
  %cmp53.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %25, null
  br i1 %cmp53.not, label %if.end56, label %if.then54

if.then54:                                        ; preds = %do.end47
  %more_recent55 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %25, i64 0, i32 1
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent55, align 8, !tbaa !268
  br label %if.end56

if.end56:                                         ; preds = %if.then54, %do.end47
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !14
  br label %if.end57

if.end57:                                         ; preds = %if.end56, %if.then23
  br i1 %cmp16215, label %for.body62.lr.ph, label %cleanup119.loopexit223

for.body62.lr.ph:                                 ; preds = %if.end57
  %buf66 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, i64 0, i32 11
  %wide.trip.count230 = zext i32 %tuple_count to i64
  br label %for.body62

for.body62:                                       ; preds = %for.body62, %for.body62.lr.ph
  %indvars.iv228 = phi i64 [ 0, %for.body62.lr.ph ], [ %indvars.iv.next229, %for.body62 ]
  %arrayidx65 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv228
  %26 = bitcast %struct.halide_buffer_t** %arrayidx65 to i8**
  %27 = load i8*, i8** %26, align 8, !tbaa !14
  %28 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf66, align 8, !tbaa !234
  %arrayidx68 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %28, i64 %indvars.iv228
  %29 = bitcast %struct.halide_buffer_t* %arrayidx68 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(56) %27, i8* nonnull align 8 dereferenceable(56) %29, i64 56, i1 false), !tbaa.struct !264
  %indvars.iv.next229 = add nuw nsw i64 %indvars.iv228, 1
  %exitcond231.not = icmp eq i64 %indvars.iv.next229, %wide.trip.count230
  br i1 %exitcond231.not, label %cleanup119.loopexit223, label %for.body62, !llvm.loop !278

if.end73:                                         ; preds = %land.lhs.true13, %land.lhs.true10, %land.lhs.true7, %land.lhs.true, %while.body
  %next = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 0
  %entry3.0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next, align 8, !tbaa !14
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0, null
  br i1 %cmp.not, label %for.cond75.preheader, label %while.body, !llvm.loop !277

for.body78:                                       ; preds = %for.inc114, %for.body78.preheader
  %indvars.iv = phi i64 [ 0, %for.body78.preheader ], [ %indvars.iv.next, %for.inc114 ]
  %arrayidx81 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv
  %30 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx81, align 8, !tbaa !14
  %dimensions.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %30, i64 0, i32 5
  %31 = load i32, i32* %dimensions.i.i, align 4, !tbaa !183
  %cmp19.i.i = icmp sgt i32 %31, 0
  br i1 %cmp19.i.i, label %for.body.lr.ph.i.i, label %for.body78._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge

for.body78._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge: ; preds = %for.body78
  %sub.i.0 = sub nsw i64 1, 0
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.lr.ph.i.i:                               ; preds = %for.body78
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %30, i64 0, i32 6
  %32 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8, !tbaa !184
  %wide.trip.count.i.i = zext i32 %31 to i64
  %min.iters.check38 = icmp ult i32 %31, 3
  br i1 %min.iters.check38, label %for.body.i.i.preheader, label %vector.ph39

vector.ph39:                                      ; preds = %for.body.lr.ph.i.i
  %n.vec41 = and i64 %wide.trip.count.i.i, 4294967294
  br label %vector.body37

vector.body37:                                    ; preds = %pred.load.continue53, %vector.ph39
  %index42 = phi i64 [ 0, %vector.ph39 ], [ %index.next43, %pred.load.continue53 ]
  %vec.phi48 = phi i64 [ 0, %vector.ph39 ], [ %predphi54, %pred.load.continue53 ]
  %vec.phi49 = phi i64 [ 0, %vector.ph39 ], [ %predphi55, %pred.load.continue53 ]
  %induction47 = or i64 %index42, 1
  %33 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %32, i64 %index42, i32 2
  %34 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %32, i64 %induction47, i32 2
  %35 = load i32, i32* %33, align 4, !tbaa !185
  %36 = load i32, i32* %34, align 4, !tbaa !185
  %37 = icmp sgt i32 %35, 0
  %38 = icmp sgt i32 %36, 0
  %39 = zext i32 %35 to i64
  %40 = zext i32 %36 to i64
  br i1 %37, label %pred.load.if50, label %pred.load.continue51

pred.load.if50:                                   ; preds = %vector.body37
  %41 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %32, i64 %index42, i32 1
  %42 = load i32, i32* %41, align 4, !tbaa !189
  br label %pred.load.continue51

pred.load.continue51:                             ; preds = %pred.load.if50, %vector.body37
  %43 = phi i32 [ poison, %vector.body37 ], [ %42, %pred.load.if50 ]
  br i1 %38, label %pred.load.if52, label %pred.load.continue53

pred.load.if52:                                   ; preds = %pred.load.continue51
  %44 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %32, i64 %induction47, i32 1
  %45 = load i32, i32* %44, align 4, !tbaa !189
  br label %pred.load.continue53

pred.load.continue53:                             ; preds = %pred.load.if52, %pred.load.continue51
  %46 = phi i32 [ poison, %pred.load.continue51 ], [ %45, %pred.load.if52 ]
  %47 = add nsw i32 %43, -1
  %48 = add nsw i32 %46, -1
  %49 = sext i32 %47 to i64
  %50 = sext i32 %48 to i64
  %51 = mul nsw i64 %49, %39
  %52 = mul nsw i64 %50, %40
  %53 = select i1 %37, i64 %51, i64 0
  %predphi54 = add i64 %vec.phi48, %53
  %54 = select i1 %38, i64 %52, i64 0
  %predphi55 = add i64 %vec.phi49, %54
  %index.next43 = add i64 %index42, 2
  %55 = icmp eq i64 %index.next43, %n.vec41
  br i1 %55, label %middle.block35, label %vector.body37, !llvm.loop !279

middle.block35:                                   ; preds = %pred.load.continue53
  %bin.rdx56 = add i64 %predphi55, %predphi54
  %cmp.n45 = icmp eq i64 %n.vec41, %wide.trip.count.i.i
  br i1 %cmp.n45, label %for.body.i13.i.preheader, label %for.body.i.i.preheader

for.body.i.i.preheader:                           ; preds = %for.body.lr.ph.i.i, %middle.block35
  %indvars.iv.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %n.vec41, %middle.block35 ]
  %index.021.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %bin.rdx56, %middle.block35 ]
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.body.i.i.preheader, %if.end.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %if.end.i.i ], [ %indvars.iv.i.i.ph, %for.body.i.i.preheader ]
  %index.021.i.i = phi i64 [ %index.1.i.i, %if.end.i.i ], [ %index.021.i.i.ph, %for.body.i.i.preheader ]
  %stride2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %32, i64 %indvars.iv.i.i, i32 2
  %56 = load i32, i32* %stride2.i.i, align 4, !tbaa !185
  %cmp3.i.i = icmp sgt i32 %56, 0
  br i1 %cmp3.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %conv18.i.i = zext i32 %56 to i64
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %32, i64 %indvars.iv.i.i, i32 1
  %57 = load i32, i32* %extent.i.i, align 4, !tbaa !189
  %sub.i.i = add nsw i32 %57, -1
  %conv7.i.i = sext i32 %sub.i.i to i64
  %mul.i.i = mul nsw i64 %conv7.i.i, %conv18.i.i
  %add.i.i = add nsw i64 %mul.i.i, %index.021.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i64 [ %add.i.i, %if.then.i.i ], [ %index.021.i.i, %for.body.i.i ]
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %exitcond.not.i.i = icmp eq i64 %indvars.iv.next.i.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i.i, label %for.body.i13.i.preheader, label %for.body.i.i, !llvm.loop !280

for.body.i13.i.preheader:                         ; preds = %if.end.i.i, %middle.block35
  %index.1.i.i.lcssa = phi i64 [ %bin.rdx56, %middle.block35 ], [ %index.1.i.i, %if.end.i.i ]
  %min.iters.check = icmp ult i32 %31, 3
  br i1 %min.iters.check, label %for.body.i13.i.preheader58, label %vector.ph

vector.ph:                                        ; preds = %for.body.i13.i.preheader
  %n.vec = and i64 %wide.trip.count.i.i, 4294967294
  br label %vector.body

vector.body:                                      ; preds = %pred.load.continue33, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %pred.load.continue33 ]
  %vec.phi = phi i64 [ 0, %vector.ph ], [ %predphi, %pred.load.continue33 ]
  %vec.phi31 = phi i64 [ 0, %vector.ph ], [ %predphi34, %pred.load.continue33 ]
  %induction30 = or i64 %index, 1
  %58 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %32, i64 %index, i32 2
  %59 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %32, i64 %induction30, i32 2
  %60 = load i32, i32* %58, align 4, !tbaa !185
  %61 = load i32, i32* %59, align 4, !tbaa !185
  %62 = icmp slt i32 %60, 0
  %63 = icmp slt i32 %61, 0
  %64 = sext i32 %60 to i64
  %65 = sext i32 %61 to i64
  br i1 %62, label %pred.load.if, label %pred.load.continue

pred.load.if:                                     ; preds = %vector.body
  %66 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %32, i64 %index, i32 1
  %67 = load i32, i32* %66, align 4, !tbaa !189
  br label %pred.load.continue

pred.load.continue:                               ; preds = %pred.load.if, %vector.body
  %68 = phi i32 [ poison, %vector.body ], [ %67, %pred.load.if ]
  br i1 %63, label %pred.load.if32, label %pred.load.continue33

pred.load.if32:                                   ; preds = %pred.load.continue
  %69 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %32, i64 %induction30, i32 1
  %70 = load i32, i32* %69, align 4, !tbaa !189
  br label %pred.load.continue33

pred.load.continue33:                             ; preds = %pred.load.if32, %pred.load.continue
  %71 = phi i32 [ poison, %pred.load.continue ], [ %70, %pred.load.if32 ]
  %72 = add nsw i32 %68, -1
  %73 = add nsw i32 %71, -1
  %74 = sext i32 %72 to i64
  %75 = sext i32 %73 to i64
  %76 = mul nsw i64 %74, %64
  %77 = mul nsw i64 %75, %65
  %78 = select i1 %62, i64 %76, i64 0
  %predphi = add i64 %vec.phi, %78
  %79 = select i1 %63, i64 %77, i64 0
  %predphi34 = add i64 %vec.phi31, %79
  %index.next = add i64 %index, 2
  %80 = icmp eq i64 %index.next, %n.vec
  br i1 %80, label %middle.block, label %vector.body, !llvm.loop !281

middle.block:                                     ; preds = %pred.load.continue33
  %bin.rdx = add i64 %predphi34, %predphi
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count.i.i
  br i1 %cmp.n, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i.preheader58

for.body.i13.i.preheader58:                       ; preds = %for.body.i13.i.preheader, %middle.block
  %indvars.iv.i10.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %n.vec, %middle.block ]
  %index.018.i.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %bin.rdx, %middle.block ]
  br label %for.body.i13.i

for.body.i13.i:                                   ; preds = %for.body.i13.i.preheader58, %if.end.i24.i
  %indvars.iv.i10.i = phi i64 [ %indvars.iv.next.i22.i, %if.end.i24.i ], [ %indvars.iv.i10.i.ph, %for.body.i13.i.preheader58 ]
  %index.018.i.i = phi i64 [ %index.1.i21.i, %if.end.i24.i ], [ %index.018.i.i.ph, %for.body.i13.i.preheader58 ]
  %stride2.i11.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %32, i64 %indvars.iv.i10.i, i32 2
  %81 = load i32, i32* %stride2.i11.i, align 4, !tbaa !185
  %cmp3.i12.i = icmp slt i32 %81, 0
  br i1 %cmp3.i12.i, label %if.then.i20.i, label %if.end.i24.i

if.then.i20.i:                                    ; preds = %for.body.i13.i
  %conv.i14.i = sext i32 %81 to i64
  %extent.i15.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %32, i64 %indvars.iv.i10.i, i32 1
  %82 = load i32, i32* %extent.i15.i, align 4, !tbaa !189
  %sub.i16.i = add nsw i32 %82, -1
  %conv7.i17.i = sext i32 %sub.i16.i to i64
  %mul.i18.i = mul nsw i64 %conv7.i17.i, %conv.i14.i
  %add.i19.i = add nsw i64 %mul.i18.i, %index.018.i.i
  br label %if.end.i24.i

if.end.i24.i:                                     ; preds = %if.then.i20.i, %for.body.i13.i
  %index.1.i21.i = phi i64 [ %add.i19.i, %if.then.i20.i ], [ %index.018.i.i, %for.body.i13.i ]
  %indvars.iv.next.i22.i = add nuw nsw i64 %indvars.iv.i10.i, 1
  %exitcond.not.i23.i = icmp eq i64 %indvars.iv.next.i22.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i23.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i, !llvm.loop !282

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %if.end.i24.i, %middle.block
  %index.1.i21.i.lcssa = phi i64 [ %bin.rdx, %middle.block ], [ %index.1.i21.i, %if.end.i24.i ]
  %add8.i.i = add nsw i64 %index.1.i.i.lcssa, 1
  %sub.i.1 = sub nsw i64 %add8.i.i, %index.1.i21.i.lcssa
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %for.body78._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit
  %add8.i27.i = phi i64 [ 1, %for.body78._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge ], [ %add8.i.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %sub.i.phi = phi i64 [ %sub.i.0, %for.body78._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge ], [ %sub.i.1, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %bits.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %30, i64 0, i32 4, i32 1
  %83 = load i8, i8* %bits.i.i, align 1, !tbaa !144
  %conv.i.i = zext i8 %83 to i64
  %add.i4.i = add nuw nsw i64 %conv.i.i, 7
  %div.i.i = lshr i64 %add.i4.i, 3
  %mul.i = mul i64 %div.i.i, %sub.i.phi
  %add84 = add i64 %mul.i, 32
  %call85 = tail call i8* @halide_malloc(i8* %user_context, i64 %add84) #14
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %30, i64 0, i32 2
  store i8* %call85, i8** %host, align 8, !tbaa !180
  %cmp87 = icmp eq i8* %call85, null
  br i1 %cmp87, label %for.cond89.preheader, label %for.inc114

for.cond89.preheader:                             ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  %cmp90208.not = icmp eq i64 %indvars.iv, 0
  br i1 %cmp90208.not, label %cleanup119, label %for.body92

for.body92:                                       ; preds = %for.cond89.preheader, %for.body92
  %indvars.iv224 = phi i64 [ %indvars.iv.next225, %for.body92 ], [ %indvars.iv, %for.cond89.preheader ]
  %sub = add nuw nsw i64 %indvars.iv224, 4294967295
  %84 = and i64 %sub, 4294967295
  %arrayidx94 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %84
  %85 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx94, align 8, !tbaa !14
  %host95 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %85, i64 0, i32 2
  %86 = load i8*, i8** %host95, align 8, !tbaa !180
  %call96 = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %86) #15
  %87 = bitcast %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call96 to i8*
  tail call void @halide_free(i8* %user_context, i8* %87) #14
  %88 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx94, align 8, !tbaa !14
  %host100 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %88, i64 0, i32 2
  store i8* null, i8** %host100, align 8, !tbaa !180
  %89 = icmp sgt i64 %indvars.iv224, 1
  %indvars.iv.next225 = add nsw i64 %indvars.iv224, -1
  br i1 %89, label %for.body92, label %cleanup119, !llvm.loop !283

for.inc114:                                       ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  %add.ptr = getelementptr inbounds i8, i8* %call85, i64 32
  store i8* %add.ptr, i8** %host, align 8, !tbaa !180
  %call108 = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* nonnull %add.ptr) #15
  %hash109 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call108, i64 0, i32 1
  store i32 %call, i32* %hash109, align 8, !tbaa !284
  %entry110 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call108, i64 0, i32 0
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %entry110, align 8, !tbaa !286
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %cleanup119, label %for.body78, !llvm.loop !287

cleanup119.loopexit223:                           ; preds = %for.body62, %if.end57
  %in_use_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, i64 0, i32 7
  %90 = load i32, i32* %in_use_count, align 4, !tbaa !255
  %add = add i32 %90, %tuple_count
  store i32 %add, i32* %in_use_count, align 4, !tbaa !255
  br label %cleanup119

cleanup119:                                       ; preds = %for.inc114, %for.body92, %cleanup119.loopexit223, %for.cond89.preheader, %for.cond75.preheader
  %retval.6 = phi i32 [ 1, %for.cond75.preheader ], [ 0, %cleanup119.loopexit223 ], [ -1, %for.cond89.preheader ], [ -1, %for.body92 ], [ 1, %for.inc114 ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #14
  ret i32 %retval.6
}

; Function Attrs: nounwind
define weak i32 @halide_memoization_cache_store(i8* %user_context, i8* %cache_key, i32 %size, %struct.halide_buffer_t* %computed_bounds, i32 %tuple_count, %struct.halide_buffer_t** %tuple_buffers, i1 zeroext %has_eviction_key, i64 %eviction_key) local_unnamed_addr #4 {
entry:
  %0 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, align 8, !tbaa !14
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %0, i64 0, i32 2
  %1 = load i8*, i8** %host, align 8, !tbaa !180
  %call = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %1) #15
  %hash = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call, i64 0, i32 1
  %2 = load i32, i32* %hash, align 8, !tbaa !284
  %3 = and i32 %2, 255
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #14
  %idxprom = zext i32 %3 to i64
  %arrayidx7 = getelementptr inbounds [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 0, i64 %idxprom
  %entry6.0228 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx7, align 8, !tbaa !14
  %cmp.not229 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0228, null
  br i1 %cmp.not229, label %for.cond61.preheader, label %while.body.lr.ph

while.body.lr.ph:                                 ; preds = %entry
  %conv10 = sext i32 %size to i64
  %cmp22221 = icmp sgt i32 %tuple_count, 0
  br i1 %cmp22221, label %while.body.us.preheader, label %while.body

while.body.us.preheader:                          ; preds = %while.body.lr.ph
  %4 = zext i32 %tuple_count to i64
  br label %while.body.us

while.body.us:                                    ; preds = %if.end59.us, %while.body.us.preheader
  %entry6.0230.us = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %entry6.0.us, %if.end59.us ], [ %entry6.0228, %while.body.us.preheader ]
  %hash8.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 6
  %5 = load i32, i32* %hash8.us, align 8, !tbaa !254
  %cmp9.us = icmp eq i32 %5, %2
  br i1 %cmp9.us, label %land.lhs.true.us, label %if.end59.us

land.lhs.true.us:                                 ; preds = %while.body.us
  %key_size.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 4
  %6 = load i64, i64* %key_size.us, align 8, !tbaa !253
  %cmp11.us = icmp eq i64 %6, %conv10
  br i1 %cmp11.us, label %land.lhs.true12.us, label %if.end59.us

land.lhs.true12.us:                               ; preds = %land.lhs.true.us
  %key.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 5
  %7 = load i8*, i8** %key.us, align 8, !tbaa !258
  %call14.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m(i8* %7, i8* %cache_key, i64 %conv10) #15
  br i1 %call14.us, label %land.lhs.true15.us, label %if.end59.us

land.lhs.true15.us:                               ; preds = %land.lhs.true12.us
  %computed_bounds16.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 10
  %8 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds16.us, align 8, !tbaa !257
  %call17.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %computed_bounds, %struct.halide_dimension_t* %8) #15
  br i1 %call17.us, label %land.lhs.true18.us, label %if.end59.us

land.lhs.true18.us:                               ; preds = %land.lhs.true15.us
  %tuple_count19.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 8
  %9 = load i32, i32* %tuple_count19.us, align 8, !tbaa !232
  %cmp20.us = icmp eq i32 %9, %tuple_count
  br i1 %cmp20.us, label %for.body.lr.ph.us, label %if.end59.us

for.cond.cleanup.us:                              ; preds = %for.body.us
  br i1 %call30.us, label %do.body.us, label %if.end59.us

do.body.us:                                       ; preds = %for.cond.cleanup.us
  %10 = and i8 %spec.select.us, 1
  %tobool41.not.us = icmp eq i8 %10, 0
  br i1 %tobool41.not.us, label %if.then42.us, label %for.body48.us.preheader

for.body48.us.preheader:                          ; preds = %if.then42.us, %do.body.us
  %indvars.iv.next245.1 = add nuw nsw i64 0, 1
  %arrayidx50.us.1 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 0
  br label %for.body48.us

if.then42.us:                                     ; preds = %do.body.us
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([122 x i8], [122 x i8]* @.str.9.46, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %for.body48.us.preheader

if.end59.us:                                      ; preds = %for.cond.cleanup.us, %land.lhs.true18.us, %land.lhs.true15.us, %land.lhs.true12.us, %land.lhs.true.us, %while.body.us
  %next.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 0
  %entry6.0.us = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next.us, align 8, !tbaa !14
  %cmp.not.us = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0.us, null
  br i1 %cmp.not.us, label %for.cond61.preheader, label %while.body.us, !llvm.loop !288

for.body48.us:                                    ; preds = %for.body48.us.for.body48.us_crit_edge, %for.body48.us.preheader
  %arrayidx50.us.phi = phi %struct.halide_buffer_t** [ %arrayidx50.us.0, %for.body48.us.for.body48.us_crit_edge ], [ %arrayidx50.us.1, %for.body48.us.preheader ]
  %indvars.iv.next245.phi = phi i64 [ %indvars.iv.next245.0, %for.body48.us.for.body48.us_crit_edge ], [ %indvars.iv.next245.1, %for.body48.us.preheader ]
  %11 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx50.us.phi, align 8, !tbaa !14
  %host51.us = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %11, i64 0, i32 2
  %12 = load i8*, i8** %host51.us, align 8, !tbaa !180
  %call52.us = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %12) #15
  %entry53.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call52.us, i64 0, i32 0
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %entry53.us, align 8, !tbaa !286
  %exitcond247.not = icmp eq i64 %indvars.iv.next245.phi, %4
  br i1 %exitcond247.not, label %cleanup132, label %for.body48.us.for.body48.us_crit_edge, !llvm.loop !289

for.body48.us.for.body48.us_crit_edge:            ; preds = %for.body48.us
  %indvars.iv.next245.0 = add nuw nsw i64 %indvars.iv.next245.phi, 1
  %arrayidx50.us.0 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv.next245.phi
  br label %for.body48.us

for.body.us:                                      ; preds = %for.body.lr.ph.us, %for.body.us
  %13 = phi %struct.halide_buffer_t* [ %.pre, %for.body.lr.ph.us ], [ %16, %for.body.us ]
  %indvars.iv242 = phi i64 [ 0, %for.body.lr.ph.us ], [ %indvars.iv.next243, %for.body.us ]
  %no_host_pointers_equal.0222.us = phi i8 [ 1, %for.body.lr.ph.us ], [ %spec.select.us, %for.body.us ]
  %arrayidx24.us = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv242
  %14 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx24.us, align 8, !tbaa !14
  %dim.us = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %13, i64 %indvars.iv242, i32 6
  %15 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.us, align 8, !tbaa !184
  %call30.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %14, %struct.halide_dimension_t* %15) #15
  %16 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf27.us, align 8, !tbaa !234
  %host35.us = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %16, i64 %indvars.iv242, i32 2
  %17 = load i8*, i8** %host35.us, align 8, !tbaa !180
  %host36.us = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %14, i64 0, i32 2
  %18 = load i8*, i8** %host36.us, align 8, !tbaa !180
  %cmp37.us = icmp eq i8* %17, %18
  %spec.select.us = select i1 %cmp37.us, i8 0, i8 %no_host_pointers_equal.0222.us
  %indvars.iv.next243 = add nuw nsw i64 %indvars.iv242, 1
  %cmp22.us = icmp ult i64 %indvars.iv.next243, %4
  %19 = and i1 %cmp22.us, %call30.us
  br i1 %19, label %for.body.us, label %for.cond.cleanup.us, !llvm.loop !290

for.body.lr.ph.us:                                ; preds = %land.lhs.true18.us
  %buf27.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 11
  %.pre = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf27.us, align 8, !tbaa !234
  br label %for.body.us

for.cond61.preheader:                             ; preds = %if.end59, %if.end59.us, %entry
  %cmp62218 = icmp sgt i32 %tuple_count, 0
  br i1 %cmp62218, label %for.body64.preheader, label %for.cond.cleanup63

for.body64.preheader:                             ; preds = %for.cond61.preheader
  %wide.trip.count240 = zext i32 %tuple_count to i64
  br label %for.body64

while.body:                                       ; preds = %while.body.lr.ph, %if.end59
  %entry6.0230 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %entry6.0, %if.end59 ], [ %entry6.0228, %while.body.lr.ph ]
  %hash8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 6
  %20 = load i32, i32* %hash8, align 8, !tbaa !254
  %cmp9 = icmp eq i32 %20, %2
  br i1 %cmp9, label %land.lhs.true, label %if.end59

land.lhs.true:                                    ; preds = %while.body
  %key_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 4
  %21 = load i64, i64* %key_size, align 8, !tbaa !253
  %cmp11 = icmp eq i64 %21, %conv10
  br i1 %cmp11, label %land.lhs.true12, label %if.end59

land.lhs.true12:                                  ; preds = %land.lhs.true
  %key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 5
  %22 = load i8*, i8** %key, align 8, !tbaa !258
  %call14 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m(i8* %22, i8* %cache_key, i64 %conv10) #15
  br i1 %call14, label %land.lhs.true15, label %if.end59

land.lhs.true15:                                  ; preds = %land.lhs.true12
  %computed_bounds16 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 10
  %23 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds16, align 8, !tbaa !257
  %call17 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %computed_bounds, %struct.halide_dimension_t* %23) #15
  br i1 %call17, label %land.lhs.true18, label %if.end59

land.lhs.true18:                                  ; preds = %land.lhs.true15
  %tuple_count19 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 8
  %24 = load i32, i32* %tuple_count19, align 8, !tbaa !232
  %cmp20 = icmp eq i32 %24, %tuple_count
  br i1 %cmp20, label %cleanup132, label %if.end59

if.end59:                                         ; preds = %land.lhs.true18, %land.lhs.true15, %land.lhs.true12, %land.lhs.true, %while.body
  %next = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 0
  %entry6.0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next, align 8, !tbaa !14
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0, null
  br i1 %cmp.not, label %for.cond61.preheader, label %while.body, !llvm.loop !288

for.cond.cleanup63:                               ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit, %for.cond61.preheader
  %added_size.0.lcssa = phi i64 [ 0, %for.cond61.preheader ], [ %add, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ]
  %25 = load i64, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !22
  %add73 = add i64 %25, %added_size.0.lcssa
  store i64 %add73, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !22
  tail call void @_ZN6Halide7Runtime8Internal11prune_cacheEv() #15
  %call74 = tail call i8* @halide_malloc(i8* null, i64 96) #14
  %tobool75.not = icmp eq i8* %call74, null
  br i1 %tobool75.not, label %if.then83, label %if.then76

for.body64:                                       ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit, %for.body64.preheader
  %indvars.iv238 = phi i64 [ 0, %for.body64.preheader ], [ %indvars.iv.next239, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ]
  %added_size.0219 = phi i64 [ 0, %for.body64.preheader ], [ %add, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ]
  %arrayidx67 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv238
  %26 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx67, align 8, !tbaa !14
  %dimensions.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %26, i64 0, i32 5
  %27 = load i32, i32* %dimensions.i.i, align 4, !tbaa !183
  %cmp19.i.i = icmp sgt i32 %27, 0
  br i1 %cmp19.i.i, label %for.body.lr.ph.i.i, label %for.body64._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge

for.body64._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge: ; preds = %for.body64
  %sub.i.0 = sub nsw i64 1, 0
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.lr.ph.i.i:                               ; preds = %for.body64
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %26, i64 0, i32 6
  %28 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8, !tbaa !184
  %wide.trip.count.i.i = zext i32 %27 to i64
  %min.iters.check24 = icmp ult i32 %27, 3
  br i1 %min.iters.check24, label %for.body.i.i.preheader, label %vector.ph25

vector.ph25:                                      ; preds = %for.body.lr.ph.i.i
  %n.vec27 = and i64 %wide.trip.count.i.i, 4294967294
  br label %vector.body23

vector.body23:                                    ; preds = %pred.load.continue39, %vector.ph25
  %index28 = phi i64 [ 0, %vector.ph25 ], [ %index.next29, %pred.load.continue39 ]
  %vec.phi34 = phi i64 [ 0, %vector.ph25 ], [ %predphi40, %pred.load.continue39 ]
  %vec.phi35 = phi i64 [ 0, %vector.ph25 ], [ %predphi41, %pred.load.continue39 ]
  %induction33 = or i64 %index28, 1
  %29 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %index28, i32 2
  %30 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %induction33, i32 2
  %31 = load i32, i32* %29, align 4, !tbaa !185
  %32 = load i32, i32* %30, align 4, !tbaa !185
  %33 = icmp sgt i32 %31, 0
  %34 = icmp sgt i32 %32, 0
  %35 = zext i32 %31 to i64
  %36 = zext i32 %32 to i64
  br i1 %33, label %pred.load.if36, label %pred.load.continue37

pred.load.if36:                                   ; preds = %vector.body23
  %37 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %index28, i32 1
  %38 = load i32, i32* %37, align 4, !tbaa !189
  br label %pred.load.continue37

pred.load.continue37:                             ; preds = %pred.load.if36, %vector.body23
  %39 = phi i32 [ poison, %vector.body23 ], [ %38, %pred.load.if36 ]
  br i1 %34, label %pred.load.if38, label %pred.load.continue39

pred.load.if38:                                   ; preds = %pred.load.continue37
  %40 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %induction33, i32 1
  %41 = load i32, i32* %40, align 4, !tbaa !189
  br label %pred.load.continue39

pred.load.continue39:                             ; preds = %pred.load.if38, %pred.load.continue37
  %42 = phi i32 [ poison, %pred.load.continue37 ], [ %41, %pred.load.if38 ]
  %43 = add nsw i32 %39, -1
  %44 = add nsw i32 %42, -1
  %45 = sext i32 %43 to i64
  %46 = sext i32 %44 to i64
  %47 = mul nsw i64 %45, %35
  %48 = mul nsw i64 %46, %36
  %49 = select i1 %33, i64 %47, i64 0
  %predphi40 = add i64 %vec.phi34, %49
  %50 = select i1 %34, i64 %48, i64 0
  %predphi41 = add i64 %vec.phi35, %50
  %index.next29 = add i64 %index28, 2
  %51 = icmp eq i64 %index.next29, %n.vec27
  br i1 %51, label %middle.block21, label %vector.body23, !llvm.loop !291

middle.block21:                                   ; preds = %pred.load.continue39
  %bin.rdx42 = add i64 %predphi41, %predphi40
  %cmp.n31 = icmp eq i64 %n.vec27, %wide.trip.count.i.i
  br i1 %cmp.n31, label %for.body.i13.i.preheader, label %for.body.i.i.preheader

for.body.i.i.preheader:                           ; preds = %for.body.lr.ph.i.i, %middle.block21
  %indvars.iv.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %n.vec27, %middle.block21 ]
  %index.021.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %bin.rdx42, %middle.block21 ]
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.body.i.i.preheader, %if.end.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %if.end.i.i ], [ %indvars.iv.i.i.ph, %for.body.i.i.preheader ]
  %index.021.i.i = phi i64 [ %index.1.i.i, %if.end.i.i ], [ %index.021.i.i.ph, %for.body.i.i.preheader ]
  %stride2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %indvars.iv.i.i, i32 2
  %52 = load i32, i32* %stride2.i.i, align 4, !tbaa !185
  %cmp3.i.i = icmp sgt i32 %52, 0
  br i1 %cmp3.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %conv18.i.i = zext i32 %52 to i64
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %indvars.iv.i.i, i32 1
  %53 = load i32, i32* %extent.i.i, align 4, !tbaa !189
  %sub.i.i = add nsw i32 %53, -1
  %conv7.i.i = sext i32 %sub.i.i to i64
  %mul.i.i = mul nsw i64 %conv7.i.i, %conv18.i.i
  %add.i.i = add nsw i64 %mul.i.i, %index.021.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i64 [ %add.i.i, %if.then.i.i ], [ %index.021.i.i, %for.body.i.i ]
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %exitcond.not.i.i = icmp eq i64 %indvars.iv.next.i.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i.i, label %for.body.i13.i.preheader, label %for.body.i.i, !llvm.loop !292

for.body.i13.i.preheader:                         ; preds = %if.end.i.i, %middle.block21
  %index.1.i.i.lcssa = phi i64 [ %bin.rdx42, %middle.block21 ], [ %index.1.i.i, %if.end.i.i ]
  %min.iters.check = icmp ult i32 %27, 3
  br i1 %min.iters.check, label %for.body.i13.i.preheader44, label %vector.ph

vector.ph:                                        ; preds = %for.body.i13.i.preheader
  %n.vec = and i64 %wide.trip.count.i.i, 4294967294
  br label %vector.body

vector.body:                                      ; preds = %pred.load.continue19, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %pred.load.continue19 ]
  %vec.phi = phi i64 [ 0, %vector.ph ], [ %predphi, %pred.load.continue19 ]
  %vec.phi17 = phi i64 [ 0, %vector.ph ], [ %predphi20, %pred.load.continue19 ]
  %induction16 = or i64 %index, 1
  %54 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %index, i32 2
  %55 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %induction16, i32 2
  %56 = load i32, i32* %54, align 4, !tbaa !185
  %57 = load i32, i32* %55, align 4, !tbaa !185
  %58 = icmp slt i32 %56, 0
  %59 = icmp slt i32 %57, 0
  %60 = sext i32 %56 to i64
  %61 = sext i32 %57 to i64
  br i1 %58, label %pred.load.if, label %pred.load.continue

pred.load.if:                                     ; preds = %vector.body
  %62 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %index, i32 1
  %63 = load i32, i32* %62, align 4, !tbaa !189
  br label %pred.load.continue

pred.load.continue:                               ; preds = %pred.load.if, %vector.body
  %64 = phi i32 [ poison, %vector.body ], [ %63, %pred.load.if ]
  br i1 %59, label %pred.load.if18, label %pred.load.continue19

pred.load.if18:                                   ; preds = %pred.load.continue
  %65 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %induction16, i32 1
  %66 = load i32, i32* %65, align 4, !tbaa !189
  br label %pred.load.continue19

pred.load.continue19:                             ; preds = %pred.load.if18, %pred.load.continue
  %67 = phi i32 [ poison, %pred.load.continue ], [ %66, %pred.load.if18 ]
  %68 = add nsw i32 %64, -1
  %69 = add nsw i32 %67, -1
  %70 = sext i32 %68 to i64
  %71 = sext i32 %69 to i64
  %72 = mul nsw i64 %70, %60
  %73 = mul nsw i64 %71, %61
  %74 = select i1 %58, i64 %72, i64 0
  %predphi = add i64 %vec.phi, %74
  %75 = select i1 %59, i64 %73, i64 0
  %predphi20 = add i64 %vec.phi17, %75
  %index.next = add i64 %index, 2
  %76 = icmp eq i64 %index.next, %n.vec
  br i1 %76, label %middle.block, label %vector.body, !llvm.loop !293

middle.block:                                     ; preds = %pred.load.continue19
  %bin.rdx = add i64 %predphi20, %predphi
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count.i.i
  br i1 %cmp.n, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i.preheader44

for.body.i13.i.preheader44:                       ; preds = %for.body.i13.i.preheader, %middle.block
  %indvars.iv.i10.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %n.vec, %middle.block ]
  %index.018.i.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %bin.rdx, %middle.block ]
  br label %for.body.i13.i

for.body.i13.i:                                   ; preds = %for.body.i13.i.preheader44, %if.end.i24.i
  %indvars.iv.i10.i = phi i64 [ %indvars.iv.next.i22.i, %if.end.i24.i ], [ %indvars.iv.i10.i.ph, %for.body.i13.i.preheader44 ]
  %index.018.i.i = phi i64 [ %index.1.i21.i, %if.end.i24.i ], [ %index.018.i.i.ph, %for.body.i13.i.preheader44 ]
  %stride2.i11.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %indvars.iv.i10.i, i32 2
  %77 = load i32, i32* %stride2.i11.i, align 4, !tbaa !185
  %cmp3.i12.i = icmp slt i32 %77, 0
  br i1 %cmp3.i12.i, label %if.then.i20.i, label %if.end.i24.i

if.then.i20.i:                                    ; preds = %for.body.i13.i
  %conv.i14.i = sext i32 %77 to i64
  %extent.i15.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %indvars.iv.i10.i, i32 1
  %78 = load i32, i32* %extent.i15.i, align 4, !tbaa !189
  %sub.i16.i = add nsw i32 %78, -1
  %conv7.i17.i = sext i32 %sub.i16.i to i64
  %mul.i18.i = mul nsw i64 %conv7.i17.i, %conv.i14.i
  %add.i19.i = add nsw i64 %mul.i18.i, %index.018.i.i
  br label %if.end.i24.i

if.end.i24.i:                                     ; preds = %if.then.i20.i, %for.body.i13.i
  %index.1.i21.i = phi i64 [ %add.i19.i, %if.then.i20.i ], [ %index.018.i.i, %for.body.i13.i ]
  %indvars.iv.next.i22.i = add nuw nsw i64 %indvars.iv.i10.i, 1
  %exitcond.not.i23.i = icmp eq i64 %indvars.iv.next.i22.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i23.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i, !llvm.loop !294

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %if.end.i24.i, %middle.block
  %index.1.i21.i.lcssa = phi i64 [ %bin.rdx, %middle.block ], [ %index.1.i21.i, %if.end.i24.i ]
  %add8.i.i = add nsw i64 %index.1.i.i.lcssa, 1
  %sub.i.1 = sub nsw i64 %add8.i.i, %index.1.i21.i.lcssa
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %for.body64._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit
  %add8.i27.i = phi i64 [ 1, %for.body64._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge ], [ %add8.i.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %sub.i.phi = phi i64 [ %sub.i.0, %for.body64._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge ], [ %sub.i.1, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %bits.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %26, i64 0, i32 4, i32 1
  %79 = load i8, i8* %bits.i.i, align 1, !tbaa !144
  %conv.i.i = zext i8 %79 to i64
  %add.i4.i = add nuw nsw i64 %conv.i.i, 7
  %div.i.i = lshr i64 %add.i4.i, 3
  %mul.i = mul i64 %div.i.i, %sub.i.phi
  %add = add i64 %mul.i, %added_size.0219
  %indvars.iv.next239 = add nuw nsw i64 %indvars.iv238, 1
  %exitcond241.not = icmp eq i64 %indvars.iv.next239, %wide.trip.count240
  br i1 %exitcond241.not, label %for.cond.cleanup63, label %for.body64, !llvm.loop !295

if.then76:                                        ; preds = %for.cond.cleanup63
  %80 = bitcast i8* %call74 to %"struct.Halide::Runtime::Internal::CacheEntry"*
  %conv77 = sext i32 %size to i64
  %call79 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal10CacheEntry4initEPKhmjPK15halide_buffer_tiPPS5_by(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %80, i8* %cache_key, i64 %conv77, i32 %2, %struct.halide_buffer_t* %computed_bounds, i32 %tuple_count, %struct.halide_buffer_t** nonnull %tuple_buffers, i1 zeroext %has_eviction_key, i64 %eviction_key) #15
  br i1 %call79, label %if.end101, label %if.then83

if.then83:                                        ; preds = %if.then76, %for.cond.cleanup63
  %81 = load i64, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !22
  %sub = sub i64 %81, %added_size.0.lcssa
  store i64 %sub, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !22
  br i1 %cmp62218, label %for.body88.preheader, label %for.cond.cleanup87

for.body88.preheader:                             ; preds = %if.then83
  %wide.trip.count = zext i32 %tuple_count to i64
  %indvars.iv.next.0 = add nuw nsw i64 0, 1
  %arrayidx90.0 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 0
  br label %for.body88

for.cond.cleanup87:                               ; preds = %for.body88, %if.then83
  br i1 %tobool75.not, label %cleanup132, label %if.then99

for.body88:                                       ; preds = %for.body88.for.body88_crit_edge, %for.body88.preheader
  %arrayidx90.phi = phi %struct.halide_buffer_t** [ %arrayidx90.0, %for.body88.preheader ], [ %arrayidx90.1, %for.body88.for.body88_crit_edge ]
  %indvars.iv.next.phi = phi i64 [ %indvars.iv.next.0, %for.body88.preheader ], [ %indvars.iv.next.1, %for.body88.for.body88_crit_edge ]
  %82 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx90.phi, align 8, !tbaa !14
  %host91 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %82, i64 0, i32 2
  %83 = load i8*, i8** %host91, align 8, !tbaa !180
  %call92 = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %83) #15
  %entry93 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call92, i64 0, i32 0
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %entry93, align 8, !tbaa !286
  %exitcond.not = icmp eq i64 %indvars.iv.next.phi, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.cleanup87, label %for.body88.for.body88_crit_edge, !llvm.loop !296

for.body88.for.body88_crit_edge:                  ; preds = %for.body88
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv.next.phi, 1
  %arrayidx90.1 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv.next.phi
  br label %for.body88

if.then99:                                        ; preds = %for.cond.cleanup87
  tail call void @halide_free(i8* %user_context, i8* nonnull %call74) #14
  br label %cleanup132

if.end101:                                        ; preds = %if.then76
  %84 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx7, align 8, !tbaa !14
  %next104 = bitcast i8* %call74 to %"struct.Halide::Runtime::Internal::CacheEntry"**
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %84, %"struct.Halide::Runtime::Internal::CacheEntry"** %next104, align 8, !tbaa !229
  %85 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !14
  %less_recent = getelementptr inbounds i8, i8* %call74, i64 16
  %86 = bitcast i8* %less_recent to %"struct.Halide::Runtime::Internal::CacheEntry"**
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %85, %"struct.Halide::Runtime::Internal::CacheEntry"** %86, align 8, !tbaa !252
  %cmp105.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %85, null
  br i1 %cmp105.not, label %if.end107, label %if.then106

if.then106:                                       ; preds = %if.end101
  %more_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %85, i64 0, i32 1
  %87 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent to i8**
  store i8* %call74, i8** %87, align 8, !tbaa !268
  br label %if.end107

if.end107:                                        ; preds = %if.then106, %if.end101
  store i8* %call74, i8** bitcast (%"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE to i8**), align 8, !tbaa !14
  %88 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !14
  %cmp108 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %88, null
  br i1 %cmp108, label %if.then109, label %if.end110

if.then109:                                       ; preds = %if.end107
  store i8* %call74, i8** bitcast (%"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE to i8**), align 8, !tbaa !14
  br label %if.end110

if.end110:                                        ; preds = %if.then109, %if.end107
  %89 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx7 to i8**
  store i8* %call74, i8** %89, align 8, !tbaa !14
  %in_use_count = getelementptr inbounds i8, i8* %call74, i64 52
  %90 = bitcast i8* %in_use_count to i32*
  store i32 %tuple_count, i32* %90, align 4, !tbaa !255
  br i1 %cmp62218, label %for.body117.preheader, label %cleanup132

for.body117.preheader:                            ; preds = %if.end110
  %wide.trip.count236 = zext i32 %tuple_count to i64
  %indvars.iv.next235.0 = add nuw nsw i64 0, 1
  %arrayidx119.0 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 0
  br label %for.body117

for.body117:                                      ; preds = %for.body117.for.body117_crit_edge, %for.body117.preheader
  %arrayidx119.phi = phi %struct.halide_buffer_t** [ %arrayidx119.0, %for.body117.preheader ], [ %arrayidx119.1, %for.body117.for.body117_crit_edge ]
  %indvars.iv.next235.phi = phi i64 [ %indvars.iv.next235.0, %for.body117.preheader ], [ %indvars.iv.next235.1, %for.body117.for.body117_crit_edge ]
  %91 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx119.phi, align 8, !tbaa !14
  %host120 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %91, i64 0, i32 2
  %92 = load i8*, i8** %host120, align 8, !tbaa !180
  %call121 = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %92) #15
  %93 = bitcast %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call121 to i8**
  store i8* %call74, i8** %93, align 8, !tbaa !286
  %exitcond237.not = icmp eq i64 %indvars.iv.next235.phi, %wide.trip.count236
  br i1 %exitcond237.not, label %cleanup132, label %for.body117.for.body117_crit_edge, !llvm.loop !297

for.body117.for.body117_crit_edge:                ; preds = %for.body117
  %indvars.iv.next235.1 = add nuw nsw i64 %indvars.iv.next235.phi, 1
  %arrayidx119.1 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv.next235.phi
  br label %for.body117

cleanup132:                                       ; preds = %land.lhs.true18, %for.body48.us, %for.body117, %if.end110, %if.then99, %for.cond.cleanup87
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #14
  ret i32 0
}

; Function Attrs: nounwind
define weak void @halide_memoization_cache_release(i8* %user_context, i8* %host) local_unnamed_addr #4 {
entry:
  %call = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %host) #15
  %entry2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call, i64 0, i32 0
  %0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %entry2, align 8, !tbaa !286
  %cmp = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %0, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = bitcast %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call to i8*
  tail call void @halide_free(i8* %user_context, i8* %1) #14
  br label %if.end6

if.else:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #14
  %in_use_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %0, i64 0, i32 7
  %2 = load i32, i32* %in_use_count, align 4, !tbaa !255
  %cmp3.not = icmp eq i32 %2, 0
  br i1 %cmp3.not, label %if.then4, label %do.end

if.then4:                                         ; preds = %if.else
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([123 x i8], [123 x i8]* @.str.12.47, i64 0, i64 0)) #14
  tail call void @abort() #14
  %.pre = load i32, i32* %in_use_count, align 4, !tbaa !255
  br label %do.end

do.end:                                           ; preds = %if.then4, %if.else
  %3 = phi i32 [ %.pre, %if.then4 ], [ %2, %if.else ]
  %dec = add i32 %3, -1
  store i32 %dec, i32* %in_use_count, align 4, !tbaa !255
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #14
  br label %if.end6

if.end6:                                          ; preds = %do.end, %if.then
  ret void
}

; Function Attrs: nounwind
define weak void @halide_memoization_cache_evict(i8* %user_context, i64 %eviction_key) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #14
  br label %for.body

for.cond.cleanup:                                 ; preds = %if.end25
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #14
  ret void

for.body:                                         ; preds = %if.end25, %entry
  %__begin1.059 = phi %"struct.Halide::Runtime::Internal::CacheEntry"** [ getelementptr inbounds ([256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 0, i64 0), %entry ], [ %incdec.ptr, %if.end25 ]
  %0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %__begin1.059, align 8, !tbaa !14
  %cmp2.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %0, null
  br i1 %cmp2.not, label %if.end25, label %while.body

while.body:                                       ; preds = %for.body, %if.end24
  %prev.058 = phi %"struct.Halide::Runtime::Internal::CacheEntry"** [ %prev.1, %if.end24 ], [ %__begin1.059, %for.body ]
  %entry1.056 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %1, %if.end24 ], [ %0, %for.body ]
  %next4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056, i64 0, i32 0
  %1 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next4, align 8, !tbaa !229
  %has_eviction_key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056, i64 0, i32 13
  %2 = load i8, i8* %has_eviction_key, align 8, !tbaa !262, !range !21
  %tobool.not = icmp eq i8 %2, 0
  br i1 %tobool.not, label %if.end24, label %land.lhs.true

land.lhs.true:                                    ; preds = %while.body
  %eviction_key5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056, i64 0, i32 12
  %3 = load i64, i64* %eviction_key5, align 8, !tbaa !263
  %cmp6 = icmp eq i64 %3, %eviction_key
  br i1 %cmp6, label %if.then7, label %if.end24

if.then7:                                         ; preds = %land.lhs.true
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %1, %"struct.Halide::Runtime::Internal::CacheEntry"** %prev.058, align 8, !tbaa !14
  %more_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056, i64 0, i32 1
  %4 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !268
  %cmp8.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %4, null
  %less_recent12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056, i64 0, i32 2
  %5 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent12, align 8, !tbaa !252
  br i1 %cmp8.not, label %if.else, label %if.then9

if.then9:                                         ; preds = %if.then7
  %less_recent11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %4, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %5, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent11, align 8, !tbaa !252
  %.pre = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent12, align 8, !tbaa !252
  br label %if.end

if.else:                                          ; preds = %if.then7
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %5, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !14
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then9
  %6 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %5, %if.else ], [ %.pre, %if.then9 ]
  %cmp14.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %6, null
  %more_recent18 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %6, i64 0, i32 1
  %_ZN6Halide7Runtime8Internal19least_recently_usedE.sink = select i1 %cmp14.not, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent18
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %4, %"struct.Halide::Runtime::Internal::CacheEntry"** %_ZN6Halide7Runtime8Internal19least_recently_usedE.sink, align 8, !tbaa !14
  tail call void @_ZN6Halide7Runtime8Internal10CacheEntry7destroyEv(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %entry1.056) #15
  %7 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056 to i8*
  tail call void @halide_free(i8* %user_context, i8* nonnull %7) #14
  br label %if.end24

if.end24:                                         ; preds = %if.end, %land.lhs.true, %while.body
  %prev.1 = phi %"struct.Halide::Runtime::Internal::CacheEntry"** [ %prev.058, %if.end ], [ %next4, %land.lhs.true ], [ %next4, %while.body ]
  %cmp3.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %1, null
  br i1 %cmp3.not, label %if.end25, label %while.body, !llvm.loop !298

if.end25:                                         ; preds = %if.end24, %for.body
  %incdec.ptr = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %__begin1.059, i64 1
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"** %incdec.ptr, getelementptr inbounds ([256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 1, i64 0)
  br i1 %cmp.not, label %for.cond.cleanup, label %for.body
}

; Function Attrs: nounwind
define weak i8* @halide_string_to_string(i8* %dst, i8* %end, i8* %arg) local_unnamed_addr #4 {
entry:
  %cmp.not = icmp ult i8* %dst, %end
  br i1 %cmp.not, label %if.end, label %return

if.end:                                           ; preds = %entry
  %tobool.not = icmp eq i8* %arg, null
  %spec.select = select i1 %tobool.not, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.50, i64 0, i64 0), i8* %arg
  br label %if.end5

if.then4:                                         ; preds = %if.end8
  store i8 0, i8* %dst.addr.023, align 1, !tbaa !18
  br label %return

if.end5:                                          ; preds = %if.end8, %if.end
  %arg.addr.124 = phi i8* [ %spec.select, %if.end ], [ %incdec.ptr9, %if.end8 ]
  %dst.addr.023 = phi i8* [ %dst, %if.end ], [ %incdec.ptr, %if.end8 ]
  %0 = load i8, i8* %arg.addr.124, align 1, !tbaa !18
  store i8 %0, i8* %dst.addr.023, align 1, !tbaa !18
  %cmp6 = icmp eq i8 %0, 0
  br i1 %cmp6, label %return, label %if.end8

if.end8:                                          ; preds = %if.end5
  %incdec.ptr = getelementptr inbounds i8, i8* %dst.addr.023, i64 1
  %incdec.ptr9 = getelementptr inbounds i8, i8* %arg.addr.124, i64 1
  %cmp3 = icmp eq i8* %incdec.ptr, %end
  br i1 %cmp3, label %if.then4, label %if.end5

return:                                           ; preds = %if.end5, %if.then4, %entry
  %retval.0 = phi i8* [ %end, %if.then4 ], [ %dst, %entry ], [ %dst.addr.023, %if.end5 ]
  ret i8* %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_uint64_to_string(i8* %dst, i8* %end, i64 %arg, i32 %min_digits) local_unnamed_addr #0 {
entry:
  %buf = alloca [32 x i8], align 1
  %0 = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %0) #11
  %arrayidx = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i64 0, i64 31
  store i8 0, i8* %arrayidx, align 1, !tbaa !18
  %add.ptr = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i64 0, i64 30
  %cmp13 = icmp sgt i32 %min_digits, 0
  %tobool14 = icmp ne i64 %arg, 0
  %1 = or i1 %tobool14, %cmp13
  br i1 %1, label %entry.for.body_crit_edge, label %for.cond.cleanup

entry.for.body_crit_edge:                         ; preds = %entry
  %inc.1 = add nuw nsw i32 0, 1
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %entry
  %digits.0.lcssa = phi i8* [ %add.ptr, %entry ], [ %incdec.ptr, %for.body ]
  %incdec.ptr1 = getelementptr inbounds i8, i8* %digits.0.lcssa, i64 1
  %call = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* nonnull %incdec.ptr1) #15
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %0) #11
  ret i8* %call

for.body:                                         ; preds = %entry.for.body_crit_edge, %for.body.for.body_crit_edge
  %arg.addr.017 = phi i64 [ %div, %for.body.for.body_crit_edge ], [ %arg, %entry.for.body_crit_edge ]
  %digits.016 = phi i8* [ %incdec.ptr, %for.body.for.body_crit_edge ], [ %add.ptr, %entry.for.body_crit_edge ]
  %inc.phi = phi i32 [ %inc.0, %for.body.for.body_crit_edge ], [ %inc.1, %entry.for.body_crit_edge ]
  %div = udiv i64 %arg.addr.017, 10
  %mul.neg = mul i64 %div, -10
  %sub = add i64 %mul.neg, %arg.addr.017
  %2 = trunc i64 %sub to i8
  %conv = add i8 %2, 48
  store i8 %conv, i8* %digits.016, align 1, !tbaa !18
  %incdec.ptr = getelementptr inbounds i8, i8* %digits.016, i64 -1
  %cmp = icmp slt i32 %inc.phi, %min_digits
  %3 = icmp ugt i64 %arg.addr.017, 9
  %4 = or i1 %3, %cmp
  br i1 %4, label %for.body.for.body_crit_edge, label %for.cond.cleanup, !llvm.loop !299

for.body.for.body_crit_edge:                      ; preds = %for.body
  %inc.0 = add nuw nsw i32 %inc.phi, 1
  br label %for.body
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_int64_to_string(i8* %dst, i8* %end, i64 %arg, i32 %min_digits) local_unnamed_addr #0 {
entry:
  %cmp = icmp slt i64 %arg, 0
  %cmp1 = icmp ult i8* %dst, %end
  %or.cond = and i1 %cmp1, %cmp
  br i1 %or.cond, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %incdec.ptr = getelementptr inbounds i8, i8* %dst, i64 1
  store i8 45, i8* %dst, align 1, !tbaa !18
  %sub = sub nsw i64 0, %arg
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %arg.addr.0 = phi i64 [ %sub, %if.then ], [ %arg, %entry ]
  %dst.addr.0 = phi i8* [ %incdec.ptr, %if.then ], [ %dst, %entry ]
  %call = tail call i8* @halide_uint64_to_string(i8* %dst.addr.0, i8* %end, i64 %arg.addr.0, i32 %min_digits) #15
  ret i8* %call
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_double_to_string(i8* %dst, i8* %end, double %arg, i32 %scientific) local_unnamed_addr #0 {
entry:
  %arg.addr = alloca double, align 8
  %bits = alloca i64, align 8
  %buf = alloca [512 x i8], align 1
  store double %arg, double* %arg.addr, align 8, !tbaa !172
  %0 = bitcast i64* %bits to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #11
  store i64 0, i64* %bits, align 8, !tbaa !22
  %1 = bitcast double* %arg.addr to i8*
  %call = call i8* @memcpy(i8* nonnull %0, i8* nonnull %1, i64 8) #14
  %2 = load i64, i64* %bits, align 8, !tbaa !22
  %and = and i64 %2, 4503599627370495
  %shr = lshr i64 %2, 52
  %3 = trunc i64 %shr to i32
  %conv = and i32 %3, 2047
  %cmp = icmp eq i32 %conv, 2047
  br i1 %cmp, label %if.then, label %if.else15

if.then:                                          ; preds = %entry
  %tobool.not = icmp eq i64 %and, 0
  %tobool10.not = icmp sgt i64 %2, -1
  br i1 %tobool.not, label %if.else9, label %if.then4

if.then4:                                         ; preds = %if.then
  br i1 %tobool10.not, label %if.else, label %if.then6

if.then6:                                         ; preds = %if.then4
  %call7 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1.57, i64 0, i64 0)) #15
  br label %cleanup147

if.else:                                          ; preds = %if.then4
  %call8 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.58, i64 0, i64 0)) #15
  br label %cleanup147

if.else9:                                         ; preds = %if.then
  br i1 %tobool10.not, label %if.else13, label %if.then11

if.then11:                                        ; preds = %if.else9
  %call12 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3.59, i64 0, i64 0)) #15
  br label %cleanup147

if.else13:                                        ; preds = %if.else9
  %call14 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4.60, i64 0, i64 0)) #15
  br label %cleanup147

if.else15:                                        ; preds = %entry
  %cmp16 = icmp eq i32 %conv, 0
  %cmp17 = icmp eq i64 %and, 0
  %or.cond = and i1 %cmp17, %cmp16
  br i1 %or.cond, label %if.then18, label %if.end32

if.then18:                                        ; preds = %if.else15
  %tobool19.not = icmp eq i32 %scientific, 0
  %tobool27.not = icmp sgt i64 %2, -1
  br i1 %tobool19.not, label %if.else26, label %if.then20

if.then20:                                        ; preds = %if.then18
  br i1 %tobool27.not, label %if.else24, label %if.then22

if.then22:                                        ; preds = %if.then20
  %call23 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.5.61, i64 0, i64 0)) #15
  br label %cleanup147

if.else24:                                        ; preds = %if.then20
  %call25 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.6.62, i64 0, i64 0)) #15
  br label %cleanup147

if.else26:                                        ; preds = %if.then18
  br i1 %tobool27.not, label %if.else30, label %if.then28

if.then28:                                        ; preds = %if.else26
  %call29 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.7.63, i64 0, i64 0)) #15
  br label %cleanup147

if.else30:                                        ; preds = %if.else26
  %call31 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.8.64, i64 0, i64 0)) #15
  br label %cleanup147

if.end32:                                         ; preds = %if.else15
  %tobool33.not = icmp sgt i64 %2, -1
  br i1 %tobool33.not, label %if.end36, label %if.then34

if.then34:                                        ; preds = %if.end32
  %call35 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9.65, i64 0, i64 0)) #15
  %4 = load double, double* %arg.addr, align 8, !tbaa !172
  %fneg = fneg double %4
  store double %fneg, double* %arg.addr, align 8, !tbaa !172
  br label %if.end36

if.end36:                                         ; preds = %if.then34, %if.end32
  %dst.addr.0 = phi i8* [ %call35, %if.then34 ], [ %dst, %if.end32 ]
  %tobool37.not = icmp eq i32 %scientific, 0
  br i1 %tobool37.not, label %if.else61, label %while.condthread-pre-split

while.condthread-pre-split:                       ; preds = %if.end36
  %.pr = load double, double* %arg.addr, align 8, !tbaa !172
  %cmp39276 = fcmp olt double %.pr, 1.000000e+00
  br i1 %cmp39276, label %while.condthread-pre-split.while.body_crit_edge, label %while.cond40thread-pre-split

while.condthread-pre-split.while.body_crit_edge:  ; preds = %while.condthread-pre-split
  %dec.1 = add nsw i32 0, -1
  br label %while.body

while.body:                                       ; preds = %while.condthread-pre-split.while.body_crit_edge, %while.body.while.body_crit_edge
  %dec.phi = phi i32 [ %dec.0, %while.body.while.body_crit_edge ], [ %dec.1, %while.condthread-pre-split.while.body_crit_edge ]
  %5 = phi double [ %mul, %while.body.while.body_crit_edge ], [ %.pr, %while.condthread-pre-split.while.body_crit_edge ]
  %mul = fmul double %5, 1.000000e+01
  %cmp39 = fcmp olt double %mul, 1.000000e+00
  br i1 %cmp39, label %while.body.while.body_crit_edge, label %while.cond.while.cond40thread-pre-split_crit_edge, !llvm.loop !300

while.body.while.body_crit_edge:                  ; preds = %while.body
  %dec.0 = add nsw i32 %dec.phi, -1
  br label %while.body

while.cond.while.cond40thread-pre-split_crit_edge: ; preds = %while.body
  store double %mul, double* %arg.addr, align 8, !tbaa !172
  br label %while.cond40thread-pre-split

while.cond40thread-pre-split:                     ; preds = %while.cond.while.cond40thread-pre-split_crit_edge, %while.condthread-pre-split
  %.pr261 = phi double [ %mul, %while.cond.while.cond40thread-pre-split_crit_edge ], [ %.pr, %while.condthread-pre-split ]
  %exponent_base_10.0.lcssa = phi i32 [ %dec.phi, %while.cond.while.cond40thread-pre-split_crit_edge ], [ 0, %while.condthread-pre-split ]
  %cmp41272 = fcmp ult double %.pr261, 1.000000e+01
  br i1 %cmp41272, label %while.end43, label %while.body42

while.body42:                                     ; preds = %while.cond40thread-pre-split, %while.body42
  %exponent_base_10.1273 = phi i32 [ %inc, %while.body42 ], [ %exponent_base_10.0.lcssa, %while.cond40thread-pre-split ]
  %6 = phi double [ %div, %while.body42 ], [ %.pr261, %while.cond40thread-pre-split ]
  %div = fdiv double %6, 1.000000e+01
  %inc = add nsw i32 %exponent_base_10.1273, 1
  %cmp41 = fcmp ult double %div, 1.000000e+01
  br i1 %cmp41, label %while.cond40.while.end43_crit_edge, label %while.body42, !llvm.loop !301

while.cond40.while.end43_crit_edge:               ; preds = %while.body42
  store double %div, double* %arg.addr, align 8, !tbaa !172
  br label %while.end43

while.end43:                                      ; preds = %while.cond40.while.end43_crit_edge, %while.cond40thread-pre-split
  %.lcssa = phi double [ %div, %while.cond40.while.end43_crit_edge ], [ %.pr261, %while.cond40thread-pre-split ]
  %exponent_base_10.1.lcssa = phi i32 [ %inc, %while.cond40.while.end43_crit_edge ], [ %exponent_base_10.0.lcssa, %while.cond40thread-pre-split ]
  %mul44 = fmul double %.lcssa, 1.000000e+06
  %add = fadd double %mul44, 5.000000e-01
  %conv45 = fptoui double %add to i64
  %div46 = udiv i64 %conv45, 1000000
  %mul47.neg = mul i64 %div46, -1000000
  %sub48 = add i64 %mul47.neg, %conv45
  %call49 = call i8* @halide_int64_to_string(i8* %dst.addr.0, i8* %end, i64 %div46, i32 1) #15
  %call50 = call i8* @halide_string_to_string(i8* %call49, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #15
  %call51 = call i8* @halide_int64_to_string(i8* %call50, i8* %end, i64 %sub48, i32 6) #15
  %cmp52 = icmp sgt i32 %exponent_base_10.1.lcssa, -1
  br i1 %cmp52, label %if.then53, label %if.else55

if.then53:                                        ; preds = %while.end43
  %call54 = call i8* @halide_string_to_string(i8* %call51, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11.67, i64 0, i64 0)) #15
  br label %if.end58

if.else55:                                        ; preds = %while.end43
  %call56 = call i8* @halide_string_to_string(i8* %call51, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12.68, i64 0, i64 0)) #15
  %sub57 = sub nsw i32 0, %exponent_base_10.1.lcssa
  br label %if.end58

if.end58:                                         ; preds = %if.else55, %if.then53
  %exponent_base_10.2 = phi i32 [ %exponent_base_10.1.lcssa, %if.then53 ], [ %sub57, %if.else55 ]
  %dst.addr.1 = phi i8* [ %call54, %if.then53 ], [ %call56, %if.else55 ]
  %conv59262 = zext i32 %exponent_base_10.2 to i64
  %call60 = call i8* @halide_int64_to_string(i8* %dst.addr.1, i8* %end, i64 %conv59262, i32 2) #15
  br label %cleanup147

if.else61:                                        ; preds = %if.end36
  br i1 %cmp16, label %if.then63, label %if.end65

if.then63:                                        ; preds = %if.else61
  %call64 = call i8* @halide_double_to_string(i8* %dst.addr.0, i8* %end, double 0.000000e+00, i32 0) #15
  br label %cleanup147

if.end65:                                         ; preds = %if.else61
  %add67 = or i64 %and, 4503599627370496
  %sub69 = add nsw i32 %conv, -1075
  %cmp70 = icmp ult i32 %conv, 1075
  br i1 %cmp70, label %if.then71, label %if.end104

if.then71:                                        ; preds = %if.end65
  %cmp72 = icmp ult i32 %conv, 1023
  %sub76 = sub nuw nsw i32 1075, %conv
  %sh_prom = zext i32 %sub76 to i64
  %shr77 = lshr i64 %add67, %sh_prom
  %shl80 = shl i64 %shr77, %sh_prom
  %integer_part.0 = select i1 %cmp72, i64 0, i64 %shr77
  %sub81 = select i1 %cmp72, i64 0, i64 %shl80
  %f.0.in = sub i64 %add67, %sub81
  %f.0 = uitofp i64 %f.0.in to double
  %conv84258 = zext i32 %sub69 to i64
  %shl85 = shl i64 %conv84258, 52
  %add87 = add i64 %shl85, 4696837146684686336
  %7 = bitcast i64 %add87 to double
  %mul89 = fmul double %7, %f.0
  %add90 = fadd double %mul89, 5.000000e-01
  %conv91 = fptoui double %add90 to i64
  %conv92 = uitofp i64 %conv91 to double
  %cmp93 = fcmp oeq double %add90, %conv92
  %and95 = and i64 %conv91, 1
  %tobool96.not = icmp ne i64 %and95, 0
  %not.or.cond259 = and i1 %cmp93, %tobool96.not
  %dec98 = sext i1 %not.or.cond259 to i64
  %fractional_part.0 = add i64 %dec98, %conv91
  %cmp100 = icmp eq i64 %fractional_part.0, 1000000
  %inc102 = zext i1 %cmp100 to i64
  %spec.select = add nuw i64 %integer_part.0, %inc102
  %spec.select260 = select i1 %cmp100, i64 0, i64 %fractional_part.0
  br label %if.end104

if.end104:                                        ; preds = %if.then71, %if.end65
  %integer_part.2 = phi i64 [ %spec.select, %if.then71 ], [ %add67, %if.end65 ]
  %integer_exponent.0 = phi i32 [ 0, %if.then71 ], [ %sub69, %if.end65 ]
  %fractional_part.2 = phi i64 [ %spec.select260, %if.then71 ], [ 0, %if.end65 ]
  %8 = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %8) #11
  %add.ptr = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i64 0, i64 512
  %add.ptr105 = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i64 0, i64 480
  %call108 = call i8* @halide_int64_to_string(i8* nonnull %add.ptr105, i8* nonnull %add.ptr, i64 %integer_part.2, i32 1) #15
  %cmp109267 = icmp sgt i32 %integer_exponent.0, 0
  br i1 %cmp109267, label %for.cond111.preheader, label %for.cond.cleanup

for.cond111.preheader:                            ; preds = %if.end104, %if.end137
  %i.0270 = phi i32 [ %inc139, %if.end137 ], [ 0, %if.end104 ]
  %int_part_ptr.0268 = phi i8* [ %int_part_ptr.1, %if.end137 ], [ %add.ptr105, %if.end104 ]
  %cmp113.not264 = icmp eq i8* %call108, %int_part_ptr.0268
  br i1 %cmp113.not264, label %if.end137, label %for.body115

for.cond.cleanup:                                 ; preds = %if.end137, %if.end104
  %int_part_ptr.0.lcssa = phi i8* [ %add.ptr105, %if.end104 ], [ %int_part_ptr.1, %if.end137 ]
  %call141 = call i8* @halide_string_to_string(i8* %dst.addr.0, i8* %end, i8* %int_part_ptr.0.lcssa) #15
  %call142 = call i8* @halide_string_to_string(i8* %call141, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #15
  %call143 = call i8* @halide_int64_to_string(i8* %call142, i8* %end, i64 %fractional_part.2, i32 6) #15
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %8) #11
  br label %cleanup147

for.cond.cleanup114:                              ; preds = %for.body115
  br i1 %cmp124, label %if.then135, label %if.end137

for.body115:                                      ; preds = %for.cond111.preheader, %for.body115
  %p.0266.pn = phi i8* [ %p.0266, %for.body115 ], [ %call108, %for.cond111.preheader ]
  %carry.0265 = phi i32 [ %carry.1, %for.body115 ], [ 0, %for.cond111.preheader ]
  %p.0266 = getelementptr inbounds i8, i8* %p.0266.pn, i64 -1
  %9 = load i8, i8* %p.0266, align 1, !tbaa !18
  %sub117 = add i8 %9, -48
  %conv119 = sext i8 %sub117 to i32
  %mul120 = shl nsw i32 %conv119, 1
  %add121 = or i32 %mul120, %carry.0265
  %10 = trunc i32 %add121 to i8
  %cmp124 = icmp sgt i8 %10, 9
  %sub127 = add nsw i32 %add121, 246
  %carry.1 = zext i1 %cmp124 to i32
  %new_digit.0.in = select i1 %cmp124, i32 %sub127, i32 %add121
  %11 = trunc i32 %new_digit.0.in to i8
  %conv133 = add i8 %11, 48
  store i8 %conv133, i8* %p.0266, align 1, !tbaa !18
  %cmp113.not = icmp eq i8* %p.0266, %int_part_ptr.0268
  br i1 %cmp113.not, label %for.cond.cleanup114, label %for.body115, !llvm.loop !302

if.then135:                                       ; preds = %for.cond.cleanup114
  %incdec.ptr136 = getelementptr inbounds i8, i8* %int_part_ptr.0268, i64 -1
  store i8 49, i8* %incdec.ptr136, align 1, !tbaa !18
  br label %if.end137

if.end137:                                        ; preds = %if.then135, %for.cond.cleanup114, %for.cond111.preheader
  %int_part_ptr.1 = phi i8* [ %incdec.ptr136, %if.then135 ], [ %int_part_ptr.0268, %for.cond.cleanup114 ], [ %call108, %for.cond111.preheader ]
  %inc139 = add nuw nsw i32 %i.0270, 1
  %exitcond.not = icmp eq i32 %inc139, %integer_exponent.0
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond111.preheader, !llvm.loop !303

cleanup147:                                       ; preds = %for.cond.cleanup, %if.then63, %if.end58, %if.else30, %if.then28, %if.else24, %if.then22, %if.else13, %if.then11, %if.else, %if.then6
  %retval.1 = phi i8* [ %call7, %if.then6 ], [ %call8, %if.else ], [ %call12, %if.then11 ], [ %call14, %if.else13 ], [ %call23, %if.then22 ], [ %call25, %if.else24 ], [ %call29, %if.then28 ], [ %call31, %if.else30 ], [ %call64, %if.then63 ], [ %call60, %if.end58 ], [ %call143, %for.cond.cleanup ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #11
  ret i8* %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_pointer_to_string(i8* %dst, i8* %end, i8* %arg) local_unnamed_addr #0 {
entry:
  %buf = alloca [20 x i8], align 1
  %0 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(20) %0, i8 0, i64 20, i1 false)
  %add.ptr = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 18
  %1 = ptrtoint i8* %arg to i64
  %and = and i64 %1, 15
  %arrayidx = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and
  %2 = load i8, i8* %arrayidx, align 1, !tbaa !18
  %incdec.ptr = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 17
  store i8 %2, i8* %add.ptr, align 1, !tbaa !18
  %shr = lshr i64 %1, 4
  %tobool.not = icmp eq i64 %shr, 0
  br i1 %tobool.not, label %cleanup, label %for.cond

for.cond:                                         ; preds = %entry
  %and.1 = and i64 %shr, 15
  %arrayidx.1 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.1
  %3 = load i8, i8* %arrayidx.1, align 1, !tbaa !18
  %incdec.ptr.1 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 16
  store i8 %3, i8* %incdec.ptr, align 1, !tbaa !18
  %shr.1 = lshr i64 %1, 8
  %tobool.not.1 = icmp eq i64 %shr.1, 0
  br i1 %tobool.not.1, label %cleanup, label %for.cond.1

cleanup:                                          ; preds = %for.cond.14, %for.cond.13, %for.cond.12, %for.cond.11, %for.cond.10, %for.cond.9, %for.cond.8, %for.cond.7, %for.cond.6, %for.cond.5, %for.cond.4, %for.cond.3, %for.cond.2, %for.cond.1, %for.cond, %entry
  %buf_ptr.016.lcssa = phi i8* [ %add.ptr, %entry ], [ %incdec.ptr, %for.cond ], [ %incdec.ptr.1, %for.cond.1 ], [ %incdec.ptr.2, %for.cond.2 ], [ %incdec.ptr.3, %for.cond.3 ], [ %incdec.ptr.4, %for.cond.4 ], [ %incdec.ptr.5, %for.cond.5 ], [ %incdec.ptr.6, %for.cond.6 ], [ %incdec.ptr.7, %for.cond.7 ], [ %incdec.ptr.8, %for.cond.8 ], [ %incdec.ptr.9, %for.cond.9 ], [ %incdec.ptr.10, %for.cond.10 ], [ %incdec.ptr.11, %for.cond.11 ], [ %incdec.ptr.12, %for.cond.12 ], [ %incdec.ptr.13, %for.cond.13 ], [ %incdec.ptr.14, %for.cond.14 ]
  %incdec.ptr.lcssa = phi i8* [ %incdec.ptr, %entry ], [ %incdec.ptr.1, %for.cond ], [ %incdec.ptr.2, %for.cond.1 ], [ %incdec.ptr.3, %for.cond.2 ], [ %incdec.ptr.4, %for.cond.3 ], [ %incdec.ptr.5, %for.cond.4 ], [ %incdec.ptr.6, %for.cond.5 ], [ %incdec.ptr.7, %for.cond.6 ], [ %incdec.ptr.8, %for.cond.7 ], [ %incdec.ptr.9, %for.cond.8 ], [ %incdec.ptr.10, %for.cond.9 ], [ %incdec.ptr.11, %for.cond.10 ], [ %incdec.ptr.12, %for.cond.11 ], [ %incdec.ptr.13, %for.cond.12 ], [ %incdec.ptr.14, %for.cond.13 ], [ %incdec.ptr.15, %for.cond.14 ]
  %incdec.ptr1 = getelementptr inbounds i8, i8* %buf_ptr.016.lcssa, i64 -2
  store i8 120, i8* %incdec.ptr.lcssa, align 1, !tbaa !18
  store i8 48, i8* %incdec.ptr1, align 1, !tbaa !18
  %call = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* nonnull %incdec.ptr1) #15
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %0) #11
  ret i8* %call

for.cond.1:                                       ; preds = %for.cond
  %and.2 = and i64 %shr.1, 15
  %arrayidx.2 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.2
  %4 = load i8, i8* %arrayidx.2, align 1, !tbaa !18
  %incdec.ptr.2 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 15
  store i8 %4, i8* %incdec.ptr.1, align 1, !tbaa !18
  %shr.2 = lshr i64 %1, 12
  %tobool.not.2 = icmp eq i64 %shr.2, 0
  br i1 %tobool.not.2, label %cleanup, label %for.cond.2

for.cond.2:                                       ; preds = %for.cond.1
  %and.3 = and i64 %shr.2, 15
  %arrayidx.3 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.3
  %5 = load i8, i8* %arrayidx.3, align 1, !tbaa !18
  %incdec.ptr.3 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 14
  store i8 %5, i8* %incdec.ptr.2, align 1, !tbaa !18
  %shr.3 = lshr i64 %1, 16
  %tobool.not.3 = icmp eq i64 %shr.3, 0
  br i1 %tobool.not.3, label %cleanup, label %for.cond.3

for.cond.3:                                       ; preds = %for.cond.2
  %and.4 = and i64 %shr.3, 15
  %arrayidx.4 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.4
  %6 = load i8, i8* %arrayidx.4, align 1, !tbaa !18
  %incdec.ptr.4 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 13
  store i8 %6, i8* %incdec.ptr.3, align 1, !tbaa !18
  %shr.4 = lshr i64 %1, 20
  %tobool.not.4 = icmp eq i64 %shr.4, 0
  br i1 %tobool.not.4, label %cleanup, label %for.cond.4

for.cond.4:                                       ; preds = %for.cond.3
  %and.5 = and i64 %shr.4, 15
  %arrayidx.5 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.5
  %7 = load i8, i8* %arrayidx.5, align 1, !tbaa !18
  %incdec.ptr.5 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 12
  store i8 %7, i8* %incdec.ptr.4, align 1, !tbaa !18
  %shr.5 = lshr i64 %1, 24
  %tobool.not.5 = icmp eq i64 %shr.5, 0
  br i1 %tobool.not.5, label %cleanup, label %for.cond.5

for.cond.5:                                       ; preds = %for.cond.4
  %and.6 = and i64 %shr.5, 15
  %arrayidx.6 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.6
  %8 = load i8, i8* %arrayidx.6, align 1, !tbaa !18
  %incdec.ptr.6 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 11
  store i8 %8, i8* %incdec.ptr.5, align 1, !tbaa !18
  %shr.6 = lshr i64 %1, 28
  %tobool.not.6 = icmp eq i64 %shr.6, 0
  br i1 %tobool.not.6, label %cleanup, label %for.cond.6

for.cond.6:                                       ; preds = %for.cond.5
  %and.7 = and i64 %shr.6, 15
  %arrayidx.7 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.7
  %9 = load i8, i8* %arrayidx.7, align 1, !tbaa !18
  %incdec.ptr.7 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 10
  store i8 %9, i8* %incdec.ptr.6, align 1, !tbaa !18
  %shr.7 = lshr i64 %1, 32
  %tobool.not.7 = icmp eq i64 %shr.7, 0
  br i1 %tobool.not.7, label %cleanup, label %for.cond.7

for.cond.7:                                       ; preds = %for.cond.6
  %and.8 = and i64 %shr.7, 15
  %arrayidx.8 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.8
  %10 = load i8, i8* %arrayidx.8, align 1, !tbaa !18
  %incdec.ptr.8 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 9
  store i8 %10, i8* %incdec.ptr.7, align 1, !tbaa !18
  %shr.8 = lshr i64 %1, 36
  %tobool.not.8 = icmp eq i64 %shr.8, 0
  br i1 %tobool.not.8, label %cleanup, label %for.cond.8

for.cond.8:                                       ; preds = %for.cond.7
  %and.9 = and i64 %shr.8, 15
  %arrayidx.9 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.9
  %11 = load i8, i8* %arrayidx.9, align 1, !tbaa !18
  %incdec.ptr.9 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 8
  store i8 %11, i8* %incdec.ptr.8, align 1, !tbaa !18
  %shr.9 = lshr i64 %1, 40
  %tobool.not.9 = icmp eq i64 %shr.9, 0
  br i1 %tobool.not.9, label %cleanup, label %for.cond.9

for.cond.9:                                       ; preds = %for.cond.8
  %and.10 = and i64 %shr.9, 15
  %arrayidx.10 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.10
  %12 = load i8, i8* %arrayidx.10, align 1, !tbaa !18
  %incdec.ptr.10 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 7
  store i8 %12, i8* %incdec.ptr.9, align 1, !tbaa !18
  %shr.10 = lshr i64 %1, 44
  %tobool.not.10 = icmp eq i64 %shr.10, 0
  br i1 %tobool.not.10, label %cleanup, label %for.cond.10

for.cond.10:                                      ; preds = %for.cond.9
  %and.11 = and i64 %shr.10, 15
  %arrayidx.11 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.11
  %13 = load i8, i8* %arrayidx.11, align 1, !tbaa !18
  %incdec.ptr.11 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 6
  store i8 %13, i8* %incdec.ptr.10, align 1, !tbaa !18
  %shr.11 = lshr i64 %1, 48
  %tobool.not.11 = icmp eq i64 %shr.11, 0
  br i1 %tobool.not.11, label %cleanup, label %for.cond.11

for.cond.11:                                      ; preds = %for.cond.10
  %and.12 = and i64 %shr.11, 15
  %arrayidx.12 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.12
  %14 = load i8, i8* %arrayidx.12, align 1, !tbaa !18
  %incdec.ptr.12 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 5
  store i8 %14, i8* %incdec.ptr.11, align 1, !tbaa !18
  %shr.12 = lshr i64 %1, 52
  %tobool.not.12 = icmp eq i64 %shr.12, 0
  br i1 %tobool.not.12, label %cleanup, label %for.cond.12

for.cond.12:                                      ; preds = %for.cond.11
  %and.13 = and i64 %shr.12, 15
  %arrayidx.13 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.13
  %15 = load i8, i8* %arrayidx.13, align 1, !tbaa !18
  %incdec.ptr.13 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 4
  store i8 %15, i8* %incdec.ptr.12, align 1, !tbaa !18
  %shr.13 = lshr i64 %1, 56
  %tobool.not.13 = icmp eq i64 %shr.13, 0
  br i1 %tobool.not.13, label %cleanup, label %for.cond.13

for.cond.13:                                      ; preds = %for.cond.12
  %and.14 = and i64 %shr.13, 15
  %arrayidx.14 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.14
  %16 = load i8, i8* %arrayidx.14, align 1, !tbaa !18
  %incdec.ptr.14 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 3
  store i8 %16, i8* %incdec.ptr.13, align 1, !tbaa !18
  %shr.14 = lshr i64 %1, 60
  %tobool.not.14 = icmp eq i64 %shr.14, 0
  br i1 %tobool.not.14, label %cleanup, label %for.cond.14

for.cond.14:                                      ; preds = %for.cond.13
  %arrayidx.15 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %shr.14
  %17 = load i8, i8* %arrayidx.15, align 1, !tbaa !18
  %incdec.ptr.15 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 2
  store i8 %17, i8* %incdec.ptr.14, align 1, !tbaa !18
  br label %cleanup
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_type_to_string(i8* %dst, i8* %end, %struct.halide_type_t* %t) local_unnamed_addr #0 {
entry:
  %code = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %t, i64 0, i32 0
  %0 = load i8, i8* %code, align 2, !tbaa !304
  %1 = icmp ult i8 %0, 4
  br i1 %1, label %switch.lookup, label %sw.epilog

switch.lookup:                                    ; preds = %entry
  %2 = sext i8 %0 to i64
  %switch.gep = getelementptr inbounds [4 x i8*], [4 x i8*]* @switch.table.halide_type_to_string, i64 0, i64 %2
  %switch.load = load i8*, i8** %switch.gep, align 8
  br label %sw.epilog

sw.epilog:                                        ; preds = %entry, %switch.lookup
  %code_name.0 = phi i8* [ %switch.load, %switch.lookup ], [ getelementptr inbounds ([14 x i8], [14 x i8]* @.str.18.72, i64 0, i64 0), %entry ]
  %call = tail call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* nonnull %code_name.0) #15
  %bits = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %t, i64 0, i32 1
  %3 = load i8, i8* %bits, align 1, !tbaa !144
  %conv4 = zext i8 %3 to i64
  %call5 = tail call i8* @halide_uint64_to_string(i8* %call, i8* %end, i64 %conv4, i32 1) #15
  %lanes = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %t, i64 0, i32 2
  %4 = load i16, i16* %lanes, align 2, !tbaa !305
  %cmp.not = icmp eq i16 %4, 1
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %sw.epilog
  %call7 = tail call i8* @halide_string_to_string(i8* %call5, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.19.77, i64 0, i64 0)) #15
  %5 = load i16, i16* %lanes, align 2, !tbaa !305
  %conv9 = zext i16 %5 to i64
  %call10 = tail call i8* @halide_uint64_to_string(i8* %call7, i8* %end, i64 %conv9, i32 1) #15
  br label %if.end

if.end:                                           ; preds = %if.then, %sw.epilog
  %dst.addr.0 = phi i8* [ %call10, %if.then ], [ %call5, %sw.epilog ]
  ret i8* %dst.addr.0
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_buffer_to_string(i8* %dst, i8* %end, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = tail call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.20.78, i64 0, i64 0)) #15
  br label %return

if.end:                                           ; preds = %entry
  %call1 = tail call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.21.79, i64 0, i64 0)) #15
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !182
  %call2 = tail call i8* @halide_uint64_to_string(i8* %call1, i8* %end, i64 %0, i32 1) #15
  %call3 = tail call i8* @halide_string_to_string(i8* %call2, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #15
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %1 = bitcast %struct.halide_device_interface_t** %device_interface to i8**
  %2 = load i8*, i8** %1, align 8, !tbaa !306
  %call4 = tail call i8* @halide_pointer_to_string(i8* %call3, i8* %end, i8* %2) #15
  %call5 = tail call i8* @halide_string_to_string(i8* %call4, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #15
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 2
  %3 = load i8*, i8** %host, align 8, !tbaa !180
  %call6 = tail call i8* @halide_pointer_to_string(i8* %call5, i8* %end, i8* %3) #15
  %call7 = tail call i8* @halide_string_to_string(i8* %call6, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #15
  %flags = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %4 = load i64, i64* %flags, align 8, !tbaa !307
  %call8 = tail call i8* @halide_uint64_to_string(i8* %call7, i8* %end, i64 %4, i32 1) #15
  %call9 = tail call i8* @halide_string_to_string(i8* %call8, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #15
  %type = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 4
  %call10 = tail call i8* @halide_type_to_string(i8* %call9, i8* %end, %struct.halide_type_t* nonnull %type) #15
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 5
  %5 = load i32, i32* %dimensions, align 4, !tbaa !183
  %cmp1179 = icmp sgt i32 %5, 0
  br i1 %cmp1179, label %for.body.lr.ph, label %for.cond.cleanup

for.body.lr.ph:                                   ; preds = %if.end
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %if.end
  %dst.addr.0.lcssa = phi i8* [ %call10, %if.end ], [ %call26, %for.body ]
  %call27 = tail call i8* @halide_string_to_string(i8* %dst.addr.0.lcssa, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.119, i64 0, i64 0)) #15
  br label %return

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.body ]
  %dst.addr.080 = phi i8* [ %call10, %for.body.lr.ph ], [ %call26, %for.body ]
  %call12 = tail call i8* @halide_string_to_string(i8* %dst.addr.080, i8* %end, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.23.82, i64 0, i64 0)) #15
  %6 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !184
  %min = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %6, i64 %indvars.iv, i32 0
  %7 = load i32, i32* %min, align 4, !tbaa !221
  %conv = sext i32 %7 to i64
  %call13 = tail call i8* @halide_int64_to_string(i8* %call12, i8* %end, i64 %conv, i32 1) #15
  %call14 = tail call i8* @halide_string_to_string(i8* %call13, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #15
  %8 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !184
  %extent = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %8, i64 %indvars.iv, i32 1
  %9 = load i32, i32* %extent, align 4, !tbaa !189
  %conv18 = sext i32 %9 to i64
  %call19 = tail call i8* @halide_int64_to_string(i8* %call14, i8* %end, i64 %conv18, i32 1) #15
  %call20 = tail call i8* @halide_string_to_string(i8* %call19, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #15
  %10 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !184
  %stride = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %10, i64 %indvars.iv, i32 2
  %11 = load i32, i32* %stride, align 4, !tbaa !185
  %conv24 = sext i32 %11 to i64
  %call25 = tail call i8* @halide_int64_to_string(i8* %call20, i8* %end, i64 %conv24, i32 1) #15
  %call26 = tail call i8* @halide_string_to_string(i8* %call25, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.24.83, i64 0, i64 0)) #15
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %12 = load i32, i32* %dimensions, align 4, !tbaa !183
  %13 = sext i32 %12 to i64
  %cmp11 = icmp slt i64 %indvars.iv.next, %13
  br i1 %cmp11, label %for.body, label %for.cond.cleanup, !llvm.loop !308

return:                                           ; preds = %for.cond.cleanup, %if.then
  %retval.0 = phi i8* [ %call, %if.then ], [ %call27, %for.cond.cleanup ]
  ret i8* %retval.0
}

; Function Attrs: alwaysinline nounwind willreturn mustprogress
define weak i32 @halide_malloc_alignment() local_unnamed_addr #6 {
entry:
  ret i32 32
}

; Function Attrs: nounwind
define weak i32 @halide_reuse_device_allocations(i8* %user_context, i1 zeroext %flag) local_unnamed_addr #4 {
entry:
  %frombool = zext i1 %flag to i8
  store i8 %frombool, i8* @_ZN6Halide7Runtime8Internal36halide_reuse_device_allocations_flagE, align 1, !tbaa !19
  br i1 %flag, label %if.end5, label %if.then

if.then:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #14
  %p.014 = load %struct.halide_device_allocation_pool*, %struct.halide_device_allocation_pool** @_ZN6Halide7Runtime8Internal23device_allocation_poolsE, align 8, !tbaa !14
  %cmp.not15 = icmp eq %struct.halide_device_allocation_pool* %p.014, null
  br i1 %cmp.not15, label %for.cond.cleanup, label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %if.then
  %err.0.lcssa = phi i32 [ 0, %if.then ], [ %spec.select, %for.body ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #14
  br label %if.end5

for.body:                                         ; preds = %if.then, %for.body
  %p.017 = phi %struct.halide_device_allocation_pool* [ %p.0, %for.body ], [ %p.014, %if.then ]
  %err.016 = phi i32 [ %spec.select, %for.body ], [ 0, %if.then ]
  %release_unused = getelementptr inbounds %struct.halide_device_allocation_pool, %struct.halide_device_allocation_pool* %p.017, i64 0, i32 0
  %0 = load i32 (i8*)*, i32 (i8*)** %release_unused, align 8, !tbaa !309
  %call = tail call i32 %0(i8* %user_context) #14
  %tobool3.not = icmp eq i32 %call, 0
  %spec.select = select i1 %tobool3.not, i32 %err.016, i32 %call
  %next = getelementptr inbounds %struct.halide_device_allocation_pool, %struct.halide_device_allocation_pool* %p.017, i64 0, i32 1
  %p.0 = load %struct.halide_device_allocation_pool*, %struct.halide_device_allocation_pool** %next, align 8, !tbaa !14
  %cmp.not = icmp eq %struct.halide_device_allocation_pool* %p.0, null
  br i1 %cmp.not, label %for.cond.cleanup, label %for.body, !llvm.loop !311

if.end5:                                          ; preds = %for.cond.cleanup, %entry
  %err.2 = phi i32 [ 0, %entry ], [ %err.0.lcssa, %for.cond.cleanup ]
  ret i32 %err.2
}

; Function Attrs: nounwind willreturn mustprogress
define weak zeroext i1 @halide_can_reuse_device_allocations(i8* %user_context) local_unnamed_addr #2 {
entry:
  %0 = load i8, i8* @_ZN6Halide7Runtime8Internal36halide_reuse_device_allocations_flagE, align 1, !tbaa !19, !range !21
  %tobool = icmp ne i8 %0, 0
  ret i1 %tobool
}

; Function Attrs: nounwind
define weak void @halide_register_device_allocation_pool(%struct.halide_device_allocation_pool* %pool) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #14
  %0 = load %struct.halide_device_allocation_pool*, %struct.halide_device_allocation_pool** @_ZN6Halide7Runtime8Internal23device_allocation_poolsE, align 8, !tbaa !14
  %next = getelementptr inbounds %struct.halide_device_allocation_pool, %struct.halide_device_allocation_pool* %pool, i64 0, i32 1
  store %struct.halide_device_allocation_pool* %0, %struct.halide_device_allocation_pool** %next, align 8, !tbaa !312
  store %struct.halide_device_allocation_pool* %pool, %struct.halide_device_allocation_pool** @_ZN6Halide7Runtime8Internal23device_allocation_poolsE, align 8, !tbaa !14
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #14
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %flags.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %0 = load i64, i64* %flags.i.i, align 8, !tbaa !307
  %and.i.i = and i64 %0, 2
  %cmp.i.i.not = icmp eq i64 %and.i.i, 0
  br i1 %cmp.i.i.not, label %return, label %if.end

if.end:                                           ; preds = %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %1 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !306
  %and.i.i46 = and i64 %0, 1
  %cmp.i.i47.not = icmp eq i64 %and.i.i46, 0
  br i1 %cmp.i.i47.not, label %if.end9, label %return

if.end9:                                          ; preds = %if.end
  %cmp = icmp eq %struct.halide_device_interface_t* %1, null
  br i1 %cmp, label %return, label %if.end15

if.end15:                                         ; preds = %if.end9
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %1, i64 0, i32 15
  %2 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %copy_to_host = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %2, i64 0, i32 6
  %3 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %copy_to_host, align 8, !tbaa !315
  %call16 = tail call i32 %3(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #14
  %cmp17.not = icmp eq i32 %call16, 0
  br i1 %cmp17.not, label %if.end23, label %return

if.end23:                                         ; preds = %if.end15
  %4 = load i64, i64* %flags.i.i, align 8, !tbaa !307
  %and.i.i44 = and i64 %4, -3
  store i64 %and.i.i44, i64* %flags.i.i, align 8, !tbaa !307
  %call24 = tail call i32 @halide_msan_annotate_buffer_is_initialized(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #14
  br label %return

return:                                           ; preds = %if.end23, %if.end15, %if.end9, %if.end, %entry
  %retval.2 = phi i32 [ 0, %entry ], [ 0, %if.end23 ], [ -14, %if.end ], [ -19, %if.end9 ], [ -14, %if.end15 ]
  ret i32 %retval.2
}

; Function Attrs: nounwind mustprogress
define weak void @halide_device_release(i8* %user_context, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i64 0, i32 15
  %0 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %device_release = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %0, i64 0, i32 5
  %1 = load i32 (i8*)*, i32 (i8*)** %device_release, align 8, !tbaa !317
  %call = tail call i32 %1(i8* %user_context) #14
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_copy_to_host(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #14
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.6.88, i64 0, i64 0)) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !306
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !182
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !307
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end16.i.split

if.end16.i.split:                                 ; preds = %if.end16.i
  %call11 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #15
  br label %cleanup

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %call12 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* %buf) #15
  br label %cleanup

cleanup:                                          ; preds = %if.end16.i.split, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ %call11, %if.end16.i.split ], [ %call12, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #14
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define linkonce i32 @copy_to_device_already_locked(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7.89, i64 0, i64 0)) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !306
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !182
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !307
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %if.end, label %cleanup

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit, %if.end16.i
  %cmp1 = icmp eq %struct.halide_device_interface_t* %device_interface, null
  br i1 %cmp1, label %if.then2, label %if.end11

if.then2:                                         ; preds = %if.end
  %device_interface5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %4 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface5, align 8, !tbaa !306
  %cmp6 = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp6, label %if.then7, label %if.end11

if.then7:                                         ; preds = %if.then2
  %call8 = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %cleanup

if.end11:                                         ; preds = %if.then2, %if.end
  %device_interface.addr.0 = phi %struct.halide_device_interface_t* [ %device_interface, %if.end ], [ %4, %if.then2 ]
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %5 = load i64, i64* %device, align 8, !tbaa !182
  %tobool.not = icmp eq i64 %5, 0
  br i1 %tobool.not, label %if.then18, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end11
  %device_interface12 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %6 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface12, align 8, !tbaa !306
  %cmp13.not = icmp eq %struct.halide_device_interface_t* %6, %device_interface.addr.0
  br i1 %cmp13.not, label %if.end27, label %if.then14

if.then14:                                        ; preds = %land.lhs.true
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.9.90, i64 0, i64 0)) #14
  br label %cleanup

if.then18:                                        ; preds = %if.end11
  %call19 = tail call i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* nonnull %buf, %struct.halide_device_interface_t* nonnull %device_interface.addr.0) #15
  %cmp20.not = icmp eq i32 %call19, 0
  br i1 %cmp20.not, label %if.end27, label %cleanup

if.end27:                                         ; preds = %if.then18, %land.lhs.true
  %flags.i.i97 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %7 = load i64, i64* %flags.i.i97, align 8, !tbaa !307
  %and.i.i98 = and i64 %7, 1
  %cmp.i.i99.not = icmp eq i64 %and.i.i98, 0
  br i1 %cmp.i.i99.not, label %cleanup, label %if.then29

if.then29:                                        ; preds = %if.end27
  %and.i.i96 = and i64 %7, 2
  %cmp.i.i.not = icmp eq i64 %and.i.i96, 0
  br i1 %cmp.i.i.not, label %if.else, label %cleanup

if.else:                                          ; preds = %if.then29
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface.addr.0, i64 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %copy_to_device = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i64 0, i32 7
  %9 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %copy_to_device, align 8, !tbaa !318
  %call44 = tail call i32 %9(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #14
  %cmp45 = icmp eq i32 %call44, 0
  br i1 %cmp45, label %if.then46, label %cleanup

if.then46:                                        ; preds = %if.else
  %10 = load i64, i64* %flags.i.i97, align 8, !tbaa !307
  %and.i.i = and i64 %10, -2
  store i64 %and.i.i, i64* %flags.i.i97, align 8, !tbaa !307
  br label %cleanup

cleanup:                                          ; preds = %if.then46, %if.else, %if.then29, %if.end27, %if.then18, %if.then14, %if.then7, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %call8, %if.then7 ], [ -42, %if.then14 ], [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.then46 ], [ %call19, %if.then18 ], [ -15, %if.then29 ], [ -15, %if.else ], [ 0, %if.end27 ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.17.91, i64 0, i64 0)) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !306
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !182
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !307
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup12

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface3.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface3.phi.trans.insert, align 8, !tbaa !306
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp4.not = icmp eq %struct.halide_device_interface_t* %4, null
  %cmp5.not = icmp eq %struct.halide_device_interface_t* %4, %device_interface
  %or.cond = or i1 %cmp4.not, %cmp5.not
  br i1 %or.cond, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.20.92, i64 0, i64 0)) #14
  br label %cleanup12

if.end7:                                          ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !319
  tail call void %6() #14
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %device_malloc = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 2
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_malloc, align 8, !tbaa !320
  %call9 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #14
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !321
  tail call void %10() #14
  %tobool.not = icmp eq i32 %call9, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -16
  ret i32 %spec.select

cleanup12:                                        ; preds = %if.then6, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -42, %if.then6 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind
define weak i32 @halide_copy_to_device(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #14
  %call = tail call i32 @copy_to_device_already_locked(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) #15
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #14
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_sync(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.16.93, i64 0, i64 0)) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !306
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !182
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !307
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup8

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !306
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2 = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %if.end
  %call4 = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %cleanup8

if.end5:                                          ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %device_sync = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 4
  %6 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_sync, align 8, !tbaa !322
  %call6 = tail call i32 %6(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #14
  %tobool.not = icmp eq i32 %call6, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -17
  ret i32 %spec.select

cleanup8:                                         ; preds = %if.then3, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ %call4, %if.then3 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.21.96, i64 0, i64 0)) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !306
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !182
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !307
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup12

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !306
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2.not, label %if.end11, label %if.then3

if.then3:                                         ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !319
  tail call void %6() #14
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %device_free = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 3
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_free, align 8, !tbaa !323
  %call5 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #14
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !321
  tail call void %10() #14
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %11 = load i64, i64* %device, align 8, !tbaa !182
  %cmp7 = icmp eq i64 %11, 0
  br i1 %cmp7, label %do.end, label %if.then8

if.then8:                                         ; preds = %if.then3
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([127 x i8], [127 x i8]* @.str.22.97, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %do.end

do.end:                                           ; preds = %if.then8, %if.then3
  %tobool.not = icmp eq i32 %call5, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -18
  ret i32 %spec.select

if.end11:                                         ; preds = %if.end
  %flags3.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %12 = load i64, i64* %flags3.i.i, align 8, !tbaa !307
  %and.i.i = and i64 %12, -3
  store i64 %and.i.i, i64* %flags3.i.i, align 8, !tbaa !307
  br label %cleanup12

cleanup12:                                        ; preds = %if.end11, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end11 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak void @halide_device_free_as_destructor(i8* %user_context, i8* %obj) local_unnamed_addr #0 {
entry:
  %0 = bitcast i8* %obj to %struct.halide_buffer_t*
  %call = tail call i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* %0) #15
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_and_host_malloc(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.23.98, i64 0, i64 0)) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !306
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !182
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !307
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup14

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface3.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface3.phi.trans.insert, align 8, !tbaa !306
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp4.not = icmp eq %struct.halide_device_interface_t* %4, null
  %cmp5.not = icmp eq %struct.halide_device_interface_t* %4, %device_interface
  %or.cond = or i1 %cmp4.not, %cmp5.not
  br i1 %or.cond, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.25.99, i64 0, i64 0)) #14
  br label %cleanup14

if.end7:                                          ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !319
  tail call void %6() #14
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %device_and_host_malloc = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 8
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_and_host_malloc, align 8, !tbaa !324
  %call9 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #14
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !321
  tail call void %10() #14
  %cmp11.not = icmp eq i32 %call9, 0
  br i1 %cmp11.not, label %cleanup14, label %if.then12

if.then12:                                        ; preds = %if.end7
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.26.100, i64 0, i64 0)) #14
  br label %cleanup14

cleanup14:                                        ; preds = %if.then12, %if.end7, %if.then6, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -42, %if.then6 ], [ -16, %if.then12 ], [ 0, %if.end7 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_and_host_free(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.27.101, i64 0, i64 0)) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !306
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !182
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !307
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup18

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !306
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2.not, label %if.else11, label %if.then3

if.then3:                                         ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !319
  tail call void %6() #14
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %device_and_host_free = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 9
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_and_host_free, align 8, !tbaa !325
  %call5 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #14
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !321
  tail call void %10() #14
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %11 = load i64, i64* %device, align 8, !tbaa !182
  %cmp7 = icmp eq i64 %11, 0
  br i1 %cmp7, label %do.end, label %if.then8

if.then8:                                         ; preds = %if.then3
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([127 x i8], [127 x i8]* @.str.28.102, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %do.end

do.end:                                           ; preds = %if.then8, %if.then3
  %tobool.not = icmp eq i32 %call5, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -18
  ret i32 %spec.select

if.else11:                                        ; preds = %if.end
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 2
  %12 = load i8*, i8** %host, align 8, !tbaa !180
  %tobool12.not = icmp eq i8* %12, null
  br i1 %tobool12.not, label %if.end17, label %if.then13

if.then13:                                        ; preds = %if.else11
  tail call void @halide_free(i8* %user_context, i8* nonnull %12) #14
  store i8* null, i8** %host, align 8, !tbaa !180
  br label %if.end17

if.end17:                                         ; preds = %if.then13, %if.else11
  %flags3.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %13 = load i64, i64* %flags3.i.i, align 8, !tbaa !307
  %and.i.i = and i64 %13, -3
  store i64 %and.i.i, i64* %flags3.i.i, align 8, !tbaa !307
  br label %cleanup18

cleanup18:                                        ; preds = %if.end17, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end17 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_and_host_malloc(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.29.103, i64 0, i64 0)) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !306
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !182
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !307
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %if.end, label %cleanup13

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit, %if.end16.i
  %dimensions.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 5
  %4 = load i32, i32* %dimensions.i.i, align 4, !tbaa !183
  %cmp19.i.i = icmp sgt i32 %4, 0
  br i1 %cmp19.i.i, label %for.body.lr.ph.i.i, label %if.end._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge

if.end._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge: ; preds = %if.end
  %sub.i.0 = sub nsw i64 1, 0
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.lr.ph.i.i:                               ; preds = %if.end
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  %5 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8, !tbaa !184
  %wide.trip.count.i.i = zext i32 %4 to i64
  %min.iters.check = icmp ult i32 %4, 3
  br i1 %min.iters.check, label %for.body.i.i.preheader, label %vector.ph

vector.ph:                                        ; preds = %for.body.lr.ph.i.i
  %n.vec = and i64 %wide.trip.count.i.i, 4294967294
  br label %vector.body

vector.body:                                      ; preds = %pred.load.continue6, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %pred.load.continue6 ]
  %vec.phi = phi i64 [ 0, %vector.ph ], [ %predphi, %pred.load.continue6 ]
  %vec.phi4 = phi i64 [ 0, %vector.ph ], [ %predphi7, %pred.load.continue6 ]
  %induction3 = or i64 %index, 1
  %6 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %index, i32 2
  %7 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %induction3, i32 2
  %8 = load i32, i32* %6, align 4, !tbaa !185
  %9 = load i32, i32* %7, align 4, !tbaa !185
  %10 = icmp sgt i32 %8, 0
  %11 = icmp sgt i32 %9, 0
  %12 = zext i32 %8 to i64
  %13 = zext i32 %9 to i64
  br i1 %10, label %pred.load.if, label %pred.load.continue

pred.load.if:                                     ; preds = %vector.body
  %14 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %index, i32 1
  %15 = load i32, i32* %14, align 4, !tbaa !189
  br label %pred.load.continue

pred.load.continue:                               ; preds = %pred.load.if, %vector.body
  %16 = phi i32 [ poison, %vector.body ], [ %15, %pred.load.if ]
  br i1 %11, label %pred.load.if5, label %pred.load.continue6

pred.load.if5:                                    ; preds = %pred.load.continue
  %17 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %induction3, i32 1
  %18 = load i32, i32* %17, align 4, !tbaa !189
  br label %pred.load.continue6

pred.load.continue6:                              ; preds = %pred.load.if5, %pred.load.continue
  %19 = phi i32 [ poison, %pred.load.continue ], [ %18, %pred.load.if5 ]
  %20 = add nsw i32 %16, -1
  %21 = add nsw i32 %19, -1
  %22 = sext i32 %20 to i64
  %23 = sext i32 %21 to i64
  %24 = mul nsw i64 %22, %12
  %25 = mul nsw i64 %23, %13
  %26 = select i1 %10, i64 %24, i64 0
  %predphi = add i64 %vec.phi, %26
  %27 = select i1 %11, i64 %25, i64 0
  %predphi7 = add i64 %vec.phi4, %27
  %index.next = add i64 %index, 2
  %28 = icmp eq i64 %index.next, %n.vec
  br i1 %28, label %middle.block, label %vector.body, !llvm.loop !326

middle.block:                                     ; preds = %pred.load.continue6
  %bin.rdx = add i64 %predphi7, %predphi
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count.i.i
  br i1 %cmp.n, label %for.body.i13.i.preheader, label %for.body.i.i.preheader

for.body.i.i.preheader:                           ; preds = %for.body.lr.ph.i.i, %middle.block
  %indvars.iv.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %n.vec, %middle.block ]
  %index.021.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %bin.rdx, %middle.block ]
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.body.i.i.preheader, %if.end.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %if.end.i.i ], [ %indvars.iv.i.i.ph, %for.body.i.i.preheader ]
  %index.021.i.i = phi i64 [ %index.1.i.i, %if.end.i.i ], [ %index.021.i.i.ph, %for.body.i.i.preheader ]
  %stride2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %indvars.iv.i.i, i32 2
  %29 = load i32, i32* %stride2.i.i, align 4, !tbaa !185
  %cmp3.i.i = icmp sgt i32 %29, 0
  br i1 %cmp3.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %conv18.i.i = zext i32 %29 to i64
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %indvars.iv.i.i, i32 1
  %30 = load i32, i32* %extent.i.i, align 4, !tbaa !189
  %sub.i.i = add nsw i32 %30, -1
  %conv7.i.i = sext i32 %sub.i.i to i64
  %mul.i.i = mul nsw i64 %conv7.i.i, %conv18.i.i
  %add.i.i = add nsw i64 %mul.i.i, %index.021.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i64 [ %add.i.i, %if.then.i.i ], [ %index.021.i.i, %for.body.i.i ]
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %exitcond.not.i.i = icmp eq i64 %indvars.iv.next.i.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i.i, label %for.body.i13.i.preheader, label %for.body.i.i, !llvm.loop !327

for.body.i13.i.preheader:                         ; preds = %if.end.i.i, %middle.block
  %index.1.i.i.lcssa = phi i64 [ %bin.rdx, %middle.block ], [ %index.1.i.i, %if.end.i.i ]
  %min.iters.check11 = icmp ult i32 %4, 3
  br i1 %min.iters.check11, label %for.body.i13.i.preheader31, label %vector.ph12

vector.ph12:                                      ; preds = %for.body.i13.i.preheader
  %n.vec14 = and i64 %wide.trip.count.i.i, 4294967294
  br label %vector.body10

vector.body10:                                    ; preds = %pred.load.continue26, %vector.ph12
  %index15 = phi i64 [ 0, %vector.ph12 ], [ %index.next16, %pred.load.continue26 ]
  %vec.phi21 = phi i64 [ 0, %vector.ph12 ], [ %predphi27, %pred.load.continue26 ]
  %vec.phi22 = phi i64 [ 0, %vector.ph12 ], [ %predphi28, %pred.load.continue26 ]
  %induction20 = or i64 %index15, 1
  %31 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %index15, i32 2
  %32 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %induction20, i32 2
  %33 = load i32, i32* %31, align 4, !tbaa !185
  %34 = load i32, i32* %32, align 4, !tbaa !185
  %35 = icmp slt i32 %33, 0
  %36 = icmp slt i32 %34, 0
  %37 = sext i32 %33 to i64
  %38 = sext i32 %34 to i64
  br i1 %35, label %pred.load.if23, label %pred.load.continue24

pred.load.if23:                                   ; preds = %vector.body10
  %39 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %index15, i32 1
  %40 = load i32, i32* %39, align 4, !tbaa !189
  br label %pred.load.continue24

pred.load.continue24:                             ; preds = %pred.load.if23, %vector.body10
  %41 = phi i32 [ poison, %vector.body10 ], [ %40, %pred.load.if23 ]
  br i1 %36, label %pred.load.if25, label %pred.load.continue26

pred.load.if25:                                   ; preds = %pred.load.continue24
  %42 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %induction20, i32 1
  %43 = load i32, i32* %42, align 4, !tbaa !189
  br label %pred.load.continue26

pred.load.continue26:                             ; preds = %pred.load.if25, %pred.load.continue24
  %44 = phi i32 [ poison, %pred.load.continue24 ], [ %43, %pred.load.if25 ]
  %45 = add nsw i32 %41, -1
  %46 = add nsw i32 %44, -1
  %47 = sext i32 %45 to i64
  %48 = sext i32 %46 to i64
  %49 = mul nsw i64 %47, %37
  %50 = mul nsw i64 %48, %38
  %51 = select i1 %35, i64 %49, i64 0
  %predphi27 = add i64 %vec.phi21, %51
  %52 = select i1 %36, i64 %50, i64 0
  %predphi28 = add i64 %vec.phi22, %52
  %index.next16 = add i64 %index15, 2
  %53 = icmp eq i64 %index.next16, %n.vec14
  br i1 %53, label %middle.block8, label %vector.body10, !llvm.loop !328

middle.block8:                                    ; preds = %pred.load.continue26
  %bin.rdx29 = add i64 %predphi28, %predphi27
  %cmp.n18 = icmp eq i64 %n.vec14, %wide.trip.count.i.i
  br i1 %cmp.n18, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i.preheader31

for.body.i13.i.preheader31:                       ; preds = %for.body.i13.i.preheader, %middle.block8
  %indvars.iv.i10.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %n.vec14, %middle.block8 ]
  %index.018.i.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %bin.rdx29, %middle.block8 ]
  br label %for.body.i13.i

for.body.i13.i:                                   ; preds = %for.body.i13.i.preheader31, %if.end.i24.i
  %indvars.iv.i10.i = phi i64 [ %indvars.iv.next.i22.i, %if.end.i24.i ], [ %indvars.iv.i10.i.ph, %for.body.i13.i.preheader31 ]
  %index.018.i.i = phi i64 [ %index.1.i21.i, %if.end.i24.i ], [ %index.018.i.i.ph, %for.body.i13.i.preheader31 ]
  %stride2.i11.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %indvars.iv.i10.i, i32 2
  %54 = load i32, i32* %stride2.i11.i, align 4, !tbaa !185
  %cmp3.i12.i = icmp slt i32 %54, 0
  br i1 %cmp3.i12.i, label %if.then.i20.i, label %if.end.i24.i

if.then.i20.i:                                    ; preds = %for.body.i13.i
  %conv.i14.i = sext i32 %54 to i64
  %extent.i15.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %indvars.iv.i10.i, i32 1
  %55 = load i32, i32* %extent.i15.i, align 4, !tbaa !189
  %sub.i16.i = add nsw i32 %55, -1
  %conv7.i17.i = sext i32 %sub.i16.i to i64
  %mul.i18.i = mul nsw i64 %conv7.i17.i, %conv.i14.i
  %add.i19.i = add nsw i64 %mul.i18.i, %index.018.i.i
  br label %if.end.i24.i

if.end.i24.i:                                     ; preds = %if.then.i20.i, %for.body.i13.i
  %index.1.i21.i = phi i64 [ %add.i19.i, %if.then.i20.i ], [ %index.018.i.i, %for.body.i13.i ]
  %indvars.iv.next.i22.i = add nuw nsw i64 %indvars.iv.i10.i, 1
  %exitcond.not.i23.i = icmp eq i64 %indvars.iv.next.i22.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i23.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i, !llvm.loop !329

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %if.end.i24.i, %middle.block8
  %index.1.i21.i.lcssa = phi i64 [ %bin.rdx29, %middle.block8 ], [ %index.1.i21.i, %if.end.i24.i ]
  %add8.i.i = add nsw i64 %index.1.i.i.lcssa, 1
  %sub.i.1 = sub nsw i64 %add8.i.i, %index.1.i21.i.lcssa
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %if.end._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit
  %add8.i27.i = phi i64 [ 1, %if.end._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge ], [ %add8.i.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %sub.i.phi = phi i64 [ %sub.i.0, %if.end._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge ], [ %sub.i.1, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %bits.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 4, i32 1
  %56 = load i8, i8* %bits.i.i, align 1, !tbaa !144
  %conv.i.i = zext i8 %56 to i64
  %add.i4.i = add nuw nsw i64 %conv.i.i, 7
  %div.i.i = lshr i64 %add.i4.i, 3
  %mul.i = mul i64 %div.i.i, %sub.i.phi
  %call2 = tail call i8* @halide_malloc(i8* %user_context, i64 %mul.i) #14
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 2
  store i8* %call2, i8** %host, align 8, !tbaa !180
  %cmp4 = icmp eq i8* %call2, null
  br i1 %cmp4, label %cleanup13, label %if.end6

if.end6:                                          ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  %call7 = tail call i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* nonnull %buf, %struct.halide_device_interface_t* %device_interface) #15
  %cmp8.not = icmp eq i32 %call7, 0
  br i1 %cmp8.not, label %cleanup13, label %if.then9

if.then9:                                         ; preds = %if.end6
  %57 = load i8*, i8** %host, align 8, !tbaa !180
  tail call void @halide_free(i8* %user_context, i8* %57) #14
  store i8* null, i8** %host, align 8, !tbaa !180
  br label %cleanup13

cleanup13:                                        ; preds = %if.then9, %if.end6, %_ZNK15halide_buffer_t13size_in_bytesEv.exit, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -1, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ], [ %call7, %if.then9 ], [ 0, %if.end6 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_and_host_free(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.30.104, i64 0, i64 0)) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !306
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !182
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !307
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end16.i.split

if.end16.i.split:                                 ; preds = %if.end16.i
  %call11 = tail call i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #15
  br label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %call12 = tail call i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* %buf) #15
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, %if.end16.i.split
  %phi.call = phi i32 [ %call11, %if.end16.i.split ], [ %call12, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split ]
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 2
  %4 = load i8*, i8** %host, align 8, !tbaa !180
  %tobool.not = icmp eq i8* %4, null
  br i1 %tobool.not, label %if.end5, label %if.then2

if.then2:                                         ; preds = %if.end
  tail call void @halide_free(i8* %user_context, i8* nonnull %4) #14
  store i8* null, i8** %host, align 8, !tbaa !180
  br label %if.end5

if.end5:                                          ; preds = %if.then2, %if.end
  %flags3.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %5 = load i64, i64* %flags3.i.i, align 8, !tbaa !307
  %and.i.i18 = and i64 %5, -4
  store i64 %and.i.i18, i64* %flags3.i.i, align 8, !tbaa !307
  br label %cleanup

cleanup:                                          ; preds = %if.end5, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %phi.call, %if.end5 ], [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_wrap_native(i8* %user_context, %struct.halide_buffer_t* %buf, i64 %handle, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.31.105, i64 0, i64 0)) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !306
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !182
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !307
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup12

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !306
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  %cmp3.not = icmp eq %struct.halide_device_interface_t* %4, %device_interface
  %or.cond = or i1 %cmp2.not, %cmp3.not
  br i1 %or.cond, label %if.end5, label %if.then4

if.then4:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.32.106, i64 0, i64 0)) #14
  br label %cleanup12

if.end5:                                          ; preds = %if.end
  %device_interface1 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !319
  tail call void %6() #14
  store %struct.halide_device_interface_t* %device_interface, %struct.halide_device_interface_t** %device_interface1, align 8, !tbaa !306
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %wrap_native = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 14
  %8 = load i32 (i8*, %struct.halide_buffer_t*, i64)*, i32 (i8*, %struct.halide_buffer_t*, i64)** %wrap_native, align 8, !tbaa !330
  %call8 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf, i64 %handle) #14
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !321
  tail call void %10() #14
  %tobool.not = icmp eq i32 %call8, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -16
  ret i32 %spec.select

cleanup12:                                        ; preds = %if.then4, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -42, %if.then4 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_detach_native(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.33.107, i64 0, i64 0)) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !306
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !182
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !307
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !306
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2.not, label %cleanup, label %if.then3

if.then3:                                         ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !319
  tail call void %6() #14
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %detach_native = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 15
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %detach_native, align 8, !tbaa !331
  %call5 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #14
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !321
  tail call void %10() #14
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %11 = load i64, i64* %device, align 8, !tbaa !182
  %cmp7 = icmp eq i64 %11, 0
  br i1 %cmp7, label %do.end, label %if.then8

if.then8:                                         ; preds = %if.then3
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([127 x i8], [127 x i8]* @.str.34.108, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %do.end

do.end:                                           ; preds = %if.then8, %if.then3
  %tobool.not = icmp eq i32 %call5, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -33
  ret i32 %spec.select

cleanup:                                          ; preds = %if.end, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_wrap_native(i8* %user_context, %struct.halide_buffer_t* %buf, i64 %handle) local_unnamed_addr #0 {
entry:
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !182
  %cmp.not = icmp eq i64 %0, 0
  br i1 %cmp.not, label %if.end, label %return

if.end:                                           ; preds = %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %1 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !306
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %1, i64 0, i32 15
  %2 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %2, i64 0, i32 0
  %3 = load void ()*, void ()** %use_module, align 8, !tbaa !319
  tail call void %3() #14
  store i64 %handle, i64* %device, align 8, !tbaa !182
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i32 [ 0, %if.end ], [ -32, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_detach_native(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.35, i64 0, i64 0)) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !306
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !182
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !307
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %.pre = load i64, i64* %device.phi.trans.insert, align 8, !tbaa !182
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi i64 [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %1, %if.end16.i ]
  %cmp1 = icmp eq i64 %4, 0
  br i1 %cmp1, label %cleanup, label %if.end3

if.end3:                                          ; preds = %if.end
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %5 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !306
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %5, i64 0, i32 15
  %6 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %6, i64 0, i32 1
  %7 = load void ()*, void ()** %release_module, align 8, !tbaa !321
  tail call void %7() #14
  store i64 0, i64* %device, align 8, !tbaa !182
  store %struct.halide_device_interface_t* null, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !306
  br label %cleanup

cleanup:                                          ; preds = %if.end3, %if.end, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ 0, %if.end3 ], [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak void @halide_device_and_host_free_as_destructor(i8* %user_context, i8* %obj) local_unnamed_addr #0 {
entry:
  %0 = bitcast i8* %obj to %struct.halide_buffer_t*
  %call = tail call i32 @halide_device_and_host_free(i8* %user_context, %struct.halide_buffer_t* %0) #15
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_device_host_nop_free(i8* %user_context, i8* %obj) local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_default_buffer_copy(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) local_unnamed_addr #2 {
entry:
  ret i32 -39
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_buffer_copy_already_locked(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) local_unnamed_addr #0 {
entry:
  %c = alloca %"struct.Halide::Runtime::Internal::device_copy", align 8
  %tobool.not = icmp eq %struct.halide_device_interface_t* %dst_device_interface, null
  br i1 %tobool.not, label %if.end13, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !306
  %tobool1.not = icmp eq %struct.halide_device_interface_t* %0, null
  %cmp.not = icmp eq %struct.halide_device_interface_t* %0, %dst_device_interface
  %or.cond = or i1 %tobool1.not, %cmp.not
  br i1 %or.cond, label %land.lhs.true5, label %if.then

if.then:                                          ; preds = %land.lhs.true
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.41, i64 0, i64 0)) #14
  br label %cleanup143

land.lhs.true5:                                   ; preds = %land.lhs.true
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 0
  %1 = load i64, i64* %device, align 8, !tbaa !182
  %tobool6.not = icmp eq i64 %1, 0
  br i1 %tobool6.not, label %if.then7, label %if.end13

if.then7:                                         ; preds = %land.lhs.true5
  %call = tail call i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* nonnull %dst, %struct.halide_device_interface_t* nonnull %dst_device_interface) #15
  %tobool10.not = icmp eq i32 %call, 0
  br i1 %tobool10.not, label %if.end13, label %cleanup143

if.end13:                                         ; preds = %if.then7, %land.lhs.true5, %entry
  %device14 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 0
  %2 = load i64, i64* %device14, align 8, !tbaa !182
  %cmp15.not = icmp eq i64 %2, 0
  %host22.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 2
  %.pre = load i8*, i8** %host22.phi.trans.insert, align 8, !tbaa !180
  %cmp23.not = icmp eq i8* %.pre, null
  br i1 %cmp15.not, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %if.end13
  br i1 %cmp23.not, label %land.end32, label %land.end.thread264

land.end.thread264:                               ; preds = %land.rhs
  %flags.i.i243 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 3
  %3 = load i64, i64* %flags.i.i243, align 8, !tbaa !307
  %and.i.i244 = and i64 %3, 1
  %cmp.i.i.not = icmp ne i64 %and.i.i244, 0
  br label %land.rhs26

land.end:                                         ; preds = %if.end13
  br i1 %cmp23.not, label %land.end32, label %land.end.land.rhs26_crit_edge

land.end.land.rhs26_crit_edge:                    ; preds = %land.end
  %flags.i.i247.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 3
  %.pre1 = load i64, i64* %flags.i.i247.phi.trans.insert, align 8, !tbaa !307
  br label %land.rhs26

land.rhs26:                                       ; preds = %land.end.land.rhs26_crit_edge, %land.end.thread264
  %4 = phi i64 [ %3, %land.end.thread264 ], [ %.pre1, %land.end.land.rhs26_crit_edge ]
  %5 = phi i1 [ %cmp.i.i.not, %land.end.thread264 ], [ true, %land.end.land.rhs26_crit_edge ]
  %and.i.i248 = and i64 %4, 2
  %cmp.i.i249.not = icmp eq i64 %and.i.i248, 0
  br i1 %cmp.i.i249.not, label %land.end32, label %lor.rhs28

lor.rhs28:                                        ; preds = %land.rhs26
  %device_interface29 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %6 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface29, align 8, !tbaa !306
  %cmp30 = icmp ne %struct.halide_device_interface_t* %6, null
  br label %land.end32

land.end32:                                       ; preds = %lor.rhs28, %land.rhs26, %land.end, %land.rhs
  %cmp23.not263 = phi i1 [ true, %land.end ], [ false, %land.rhs26 ], [ false, %lor.rhs28 ], [ true, %land.rhs ]
  %7 = phi i1 [ true, %land.end ], [ %5, %land.rhs26 ], [ %5, %lor.rhs28 ], [ false, %land.rhs ]
  %8 = phi i1 [ true, %land.end ], [ false, %land.rhs26 ], [ %cmp30, %lor.rhs28 ], [ true, %land.rhs ]
  %host34 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 2
  %9 = load i8*, i8** %host34, align 8, !tbaa !180
  %cmp35.not = icmp eq i8* %9, null
  %cmp20.not = xor i1 %tobool.not, true
  %10 = and i1 %tobool.not, %cmp35.not
  br i1 %10, label %cleanup143, label %if.end41

if.end41:                                         ; preds = %land.end32
  %brmerge229 = or i1 %tobool.not, %7
  br i1 %brmerge229, label %if.then51, label %if.end49

if.end49:                                         ; preds = %if.end41
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i64 0, i32 15
  %11 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %buffer_copy = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %11, i64 0, i32 10
  %12 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy, align 8, !tbaa !332
  %call48 = tail call i32 %12(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* nonnull %dst_device_interface, %struct.halide_buffer_t* nonnull %dst) #14
  %cmp50 = icmp eq i32 %call48, -42
  br i1 %cmp50, label %if.then51, label %if.end117

if.then51:                                        ; preds = %if.end49, %if.end41
  %brmerge231.demorgan = and i1 %cmp23.not263, %cmp35.not
  br i1 %brmerge231.demorgan, label %cleanup143, label %if.end58

if.end58:                                         ; preds = %if.then51
  %brmerge234 = or i1 %8, %cmp20.not
  br i1 %brmerge234, label %if.else, label %if.end117.thread258

if.end117.thread258:                              ; preds = %if.end58
  %13 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %c to i8*
  call void @llvm.lifetime.start.p0i8(i64 416, i8* nonnull %13) #11
  call void @_ZN6Halide7Runtime8Internal16make_buffer_copyEPK15halide_buffer_tbS4_b(%"struct.Halide::Runtime::Internal::device_copy"* nonnull sret(%"struct.Halide::Runtime::Internal::device_copy") align 8 %c, %struct.halide_buffer_t* nonnull %src, i1 zeroext true, %struct.halide_buffer_t* nonnull %dst, i1 zeroext true) #15
  call void @_ZN6Halide7Runtime8Internal11copy_memoryERKNS1_11device_copyEPv(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %c, i8* %user_context) #15
  call void @llvm.lifetime.end.p0i8(i64 416, i8* nonnull %13) #11
  br label %land.lhs.true126

if.else:                                          ; preds = %if.end58
  %brmerge237 = or i1 %7, %cmp20.not
  br i1 %brmerge237, label %if.else81, label %if.then66

if.then66:                                        ; preds = %if.else
  %device_interface69 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %14 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface69, align 8, !tbaa !306
  %impl70 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %14, i64 0, i32 15
  %15 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl70, align 8, !tbaa !313
  %buffer_copy71 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %15, i64 0, i32 10
  %16 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy71, align 8, !tbaa !332
  %call72 = tail call i32 %16(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* null, %struct.halide_buffer_t* nonnull %dst) #14
  %cmp73 = icmp eq i32 %call72, -42
  br i1 %cmp73, label %if.then74, label %if.end117

if.then74:                                        ; preds = %if.then66
  %call75 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* nonnull %src) #15
  %tobool76.not = icmp eq i32 %call75, 0
  br i1 %tobool76.not, label %if.then77, label %cleanup143

if.then77:                                        ; preds = %if.then74
  %call78 = tail call i32 @halide_buffer_copy_already_locked(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* null, %struct.halide_buffer_t* nonnull %dst) #15
  br label %if.end117

if.else81:                                        ; preds = %if.else
  %brmerge239 = or i1 %7, %cmp35.not
  br i1 %brmerge239, label %if.else98, label %if.then85

if.then85:                                        ; preds = %if.else81
  %device_interface90 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %17 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface90, align 8, !tbaa !306
  %impl91 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %17, i64 0, i32 15
  %18 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl91, align 8, !tbaa !313
  %buffer_copy92 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %18, i64 0, i32 10
  %19 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy92, align 8, !tbaa !332
  %call93 = tail call i32 %19(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* null, %struct.halide_buffer_t* nonnull %dst) #14
  %cmp94 = icmp eq i32 %call93, 0
  br i1 %cmp94, label %if.then95, label %cleanup143

if.then95:                                        ; preds = %if.then85
  %flags.i.i245 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 3
  %20 = load i64, i64* %flags.i.i245, align 8, !tbaa !307
  %or.i.i246 = or i64 %20, 1
  store i64 %or.i.i246, i64* %flags.i.i245, align 8, !tbaa !307
  %call96 = tail call i32 @copy_to_device_already_locked(i8* %user_context, %struct.halide_buffer_t* nonnull %dst, %struct.halide_device_interface_t* %dst_device_interface) #15
  br label %if.end117

if.else98:                                        ; preds = %if.else81
  br i1 %tobool.not, label %cleanup143, label %if.then100

if.then100:                                       ; preds = %if.else98
  %call103 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* nonnull %src) #15
  %cmp104 = icmp eq i32 %call103, 0
  br i1 %cmp104, label %if.then105, label %cleanup143

if.then105:                                       ; preds = %if.then100
  %impl106 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i64 0, i32 15
  %21 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl106, align 8, !tbaa !313
  %buffer_copy107 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %21, i64 0, i32 10
  %22 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy107, align 8, !tbaa !332
  %call108 = tail call i32 %22(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* nonnull %dst_device_interface, %struct.halide_buffer_t* nonnull %dst) #14
  br label %if.end117

if.end117:                                        ; preds = %if.then105, %if.then95, %if.then77, %if.then66, %if.end49
  %err.1 = phi i32 [ %call78, %if.then77 ], [ %call72, %if.then66 ], [ %call96, %if.then95 ], [ %call108, %if.then105 ], [ %call48, %if.end49 ]
  %cond = icmp eq i32 %err.1, 0
  br i1 %cond, label %land.lhs.true126, label %cleanup143

land.lhs.true126:                                 ; preds = %if.end117, %if.end117.thread258
  %cmp127.not.old = icmp eq %struct.halide_buffer_t* %dst, %src
  br i1 %cmp127.not.old, label %cleanup143, label %if.then128

if.then128:                                       ; preds = %land.lhs.true126
  %flags.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 3
  %23 = load i64, i64* %flags.i.i, align 8, !tbaa !307
  %or.i.i = and i64 %23, -4
  br i1 %tobool.not, label %if.else133, label %if.then130

if.then130:                                       ; preds = %if.then128
  %or.i.i242 = or i64 %or.i.i, 2
  store i64 %or.i.i242, i64* %flags.i.i, align 8, !tbaa !307
  br label %cleanup143

if.else133:                                       ; preds = %if.then128
  %and.i.i251 = or i64 %or.i.i, 1
  store i64 %and.i.i251, i64* %flags.i.i, align 8, !tbaa !307
  br label %cleanup143

cleanup143:                                       ; preds = %if.else133, %if.then130, %land.lhs.true126, %if.end117, %if.then100, %if.else98, %if.then85, %if.then74, %if.then51, %land.end32, %if.then7, %if.then
  %retval.1 = phi i32 [ -42, %if.then ], [ %call, %if.then7 ], [ -34, %land.end32 ], [ 0, %if.then130 ], [ 0, %if.else133 ], [ 0, %land.lhs.true126 ], [ -42, %if.then51 ], [ %err.1, %if.end117 ], [ -42, %if.else98 ], [ %call103, %if.then100 ], [ %call93, %if.then85 ], [ %call75, %if.then74 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind
define weak i32 @halide_buffer_copy(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #14
  %tobool.not = icmp eq %struct.halide_device_interface_t* %dst_device_interface, null
  br i1 %tobool.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i64 0, i32 15
  %0 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %0, i64 0, i32 0
  %1 = load void ()*, void ()** %use_module, align 8, !tbaa !319
  tail call void %1() #14
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %2 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !306
  %tobool11.not = icmp eq %struct.halide_device_interface_t* %2, null
  br i1 %tobool11.not, label %if.end16, label %if.then12

if.then12:                                        ; preds = %if.end
  %impl14 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %2, i64 0, i32 15
  %3 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl14, align 8, !tbaa !313
  %use_module15 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %3, i64 0, i32 0
  %4 = load void ()*, void ()** %use_module15, align 8, !tbaa !319
  tail call void %4() #14
  br label %if.end16

if.end16:                                         ; preds = %if.then12, %if.end
  %call = tail call i32 @halide_buffer_copy_already_locked(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) #15
  br i1 %tobool.not, label %if.end20, label %if.then18

if.then18:                                        ; preds = %if.end16
  %impl19 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl19, align 8, !tbaa !313
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 1
  %6 = load void ()*, void ()** %release_module, align 8, !tbaa !321
  tail call void %6() #14
  br label %if.end20

if.end20:                                         ; preds = %if.then18, %if.end16
  %7 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !306
  %tobool22.not = icmp eq %struct.halide_device_interface_t* %7, null
  br i1 %tobool22.not, label %if.end27, label %if.then23

if.then23:                                        ; preds = %if.end20
  %impl25 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %7, i64 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl25, align 8, !tbaa !313
  %release_module26 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i64 0, i32 1
  %9 = load void ()*, void ()** %release_module26, align 8, !tbaa !321
  tail call void %9() #14
  br label %if.end27

if.end27:                                         ; preds = %if.then23, %if.end20
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #14
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_crop(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_buffer_t* %dst) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.58, i64 0, i64 0)) #14
  ret i32 -40
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_slice(i8* %user_context, %struct.halide_buffer_t* %src, i32 %slice_dim, i32 %slice_pos, %struct.halide_buffer_t* %dst) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.59, i64 0, i64 0)) #14
  ret i32 -40
}

; Function Attrs: nounwind
define weak i32 @halide_device_crop(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_buffer_t* %dst) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #14
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !182
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %device1 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 0
  %1 = load i64, i64* %device1, align 8, !tbaa !182
  %tobool2.not = icmp eq i64 %1, 0
  br i1 %tobool2.not, label %if.end4, label %if.then3

if.then3:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.60, i64 0, i64 0)) #14
  br label %cleanup

if.end4:                                          ; preds = %if.end
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 5
  %2 = load i32, i32* %dimensions, align 4, !tbaa !183
  %dimensions5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 5
  %3 = load i32, i32* %dimensions5, align 4, !tbaa !183
  %cmp.not = icmp eq i32 %2, %3
  br i1 %cmp.not, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end4
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.61, i64 0, i64 0)) #14
  br label %cleanup

if.end7:                                          ; preds = %if.end4
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %4 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !306
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !319
  tail call void %6() #14
  %7 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !306
  %impl9 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %7, i64 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl9, align 8, !tbaa !313
  %device_crop = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i64 0, i32 11
  %9 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)** %device_crop, align 8, !tbaa !333
  %call = tail call i32 %9(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_buffer_t* nonnull %dst) #14
  br label %cleanup

cleanup:                                          ; preds = %if.end7, %if.then6, %if.then3, %entry
  %retval.0 = phi i32 [ -41, %if.then3 ], [ -41, %if.then6 ], [ %call, %if.end7 ], [ 0, %entry ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #14
  ret i32 %retval.0
}

; Function Attrs: nounwind
define weak i32 @halide_device_slice(i8* %user_context, %struct.halide_buffer_t* %src, i32 %slice_dim, i32 %slice_pos, %struct.halide_buffer_t* %dst) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #14
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !182
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %device1 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 0
  %1 = load i64, i64* %device1, align 8, !tbaa !182
  %tobool2.not = icmp eq i64 %1, 0
  br i1 %tobool2.not, label %if.end4, label %if.then3

if.then3:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.60, i64 0, i64 0)) #14
  br label %cleanup

if.end4:                                          ; preds = %if.end
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 5
  %2 = load i32, i32* %dimensions, align 4, !tbaa !183
  %dimensions5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 5
  %3 = load i32, i32* %dimensions5, align 4, !tbaa !183
  %add = add nsw i32 %3, 1
  %cmp.not = icmp eq i32 %2, %add
  br i1 %cmp.not, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end4
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.64, i64 0, i64 0)) #14
  br label %cleanup

if.end7:                                          ; preds = %if.end4
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %4 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !306
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !319
  tail call void %6() #14
  %7 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !306
  %impl9 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %7, i64 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl9, align 8, !tbaa !313
  %device_slice = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i64 0, i32 12
  %9 = load i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)** %device_slice, align 8, !tbaa !334
  %call = tail call i32 %9(i8* %user_context, %struct.halide_buffer_t* nonnull %src, i32 %slice_dim, i32 %slice_pos, %struct.halide_buffer_t* nonnull %dst) #14
  br label %cleanup

cleanup:                                          ; preds = %if.end7, %if.then6, %if.then3, %entry
  %retval.0 = phi i32 [ -41, %if.then3 ], [ -41, %if.then6 ], [ %call, %if.end7 ], [ 0, %entry ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #14
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_release_crop(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !182
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %return, label %if.end

if.end:                                           ; preds = %entry
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.58, i64 0, i64 0)) #14
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i32 [ -40, %if.end ], [ 0, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind
define weak i32 @halide_device_release_crop(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #4 {
entry:
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !182
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %return, label %if.then

if.then:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #14
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %1 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !306
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %1, i64 0, i32 15
  %2 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %device_release_crop = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %2, i64 0, i32 13
  %3 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_release_crop, align 8, !tbaa !335
  %call = tail call i32 %3(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #14
  store i64 0, i64* %device, align 8, !tbaa !182
  %4 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %4, i64 0, i32 1
  %5 = load void ()*, void ()** %release_module, align 8, !tbaa !321
  tail call void %5() #14
  store %struct.halide_device_interface_t* null, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !306
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #14
  br label %return

return:                                           ; preds = %if.then, %entry
  %retval.0 = phi i32 [ %call, %if.then ], [ 0, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind willreturn mustprogress
define weak float @halide_float16_bits_to_float(i16 zeroext %bits) local_unnamed_addr #2 {
entry:
  %conv = zext i16 %bits to i32
  %and2 = and i32 %conv, 1023
  %and4 = lshr i32 %conv, 10
  %0 = and i32 %and4, 31
  %cmp = icmp eq i32 %0, 0
  %cmp5 = icmp ne i32 %and2, 0
  %or.cond = and i1 %cmp5, %cmp
  br i1 %or.cond, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = tail call i32 @llvm.ctlz.i32(i32 %and2, i1 true), !range !336
  %sub6 = xor i32 %1, 31
  %shl7 = shl nuw i32 1, %sub6
  %neg = xor i32 %shl7, -1
  %and8 = and i32 %and2, %neg
  %sub9 = sub nsw i32 23, %sub6
  %shl10 = shl i32 %and8, %sub9
  %add11.neg = mul nsw i32 %1, -8388608
  %shl12 = add i32 %add11.neg, 1124073472
  br label %if.end28

if.else:                                          ; preds = %entry
  %shl14 = shl nuw nsw i32 %and2, 13
  br i1 %cmp, label %if.end28, label %if.else18

if.else18:                                        ; preds = %if.else
  %cmp19 = icmp eq i32 %0, 31
  br i1 %cmp19, label %if.end28, label %if.else21

if.else21:                                        ; preds = %if.else18
  %add22 = shl nuw nsw i32 %0, 23
  %phi.bo = add nuw nsw i32 %add22, 939524096
  br label %if.end28

if.end28:                                         ; preds = %if.else21, %if.else18, %if.else, %if.then
  %shl14.sink = phi i32 [ %shl12, %if.then ], [ %shl14, %if.else18 ], [ %shl14, %if.else ], [ %shl14, %if.else21 ]
  %reEncodedExponent15.0.sink = phi i32 [ %shl10, %if.then ], [ 2139095040, %if.else18 ], [ 0, %if.else ], [ %phi.bo, %if.else21 ]
  %bits.signext = sext i16 %bits to i32
  %shl = and i32 %bits.signext, -2147483648
  %or25 = or i32 %shl14.sink, %shl
  %or26 = or i32 %or25, %reEncodedExponent15.0.sink
  %result.sroa.0.0 = bitcast i32 %or26 to float
  ret float %result.sroa.0.0
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #7

; Function Attrs: nounwind willreturn mustprogress
define weak double @halide_float16_bits_to_double(i16 zeroext %bits) local_unnamed_addr #2 {
entry:
  %call = tail call float @halide_float16_bits_to_float(i16 zeroext %bits) #15
  %conv = fpext float %call to double
  ret double %conv
}

; Function Attrs: nounwind
define weak i32 @halide_error_bounds_inference_call_failed(i8* %user_context, i8* %extern_stage_name, i32 %result) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i71 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.111, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i72 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.111, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i71, %entry.split ], [ %call.i72, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i10 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %extern_stage_name) #14
  %call.i13 = tail call i8* @halide_string_to_string(i8* %call.i10, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1.112, i64 0, i64 0)) #14
  %conv.i = sext i32 %result to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %call.i13, i8* %ref.tmp.sroa.16.0, i64 %conv.i, i32 1) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i16 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 %result
}

; Function Attrs: nounwind
define weak i32 @halide_error_extern_stage_failed(i8* %user_context, i8* %extern_stage_name, i32 %result) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i71 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2.113, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i72 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2.113, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i71, %entry.split ], [ %call.i72, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i10 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %extern_stage_name) #14
  %call.i13 = tail call i8* @halide_string_to_string(i8* %call.i10, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1.112, i64 0, i64 0)) #14
  %conv.i = sext i32 %result to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %call.i13, i8* %ref.tmp.sroa.16.0, i64 %conv.i, i32 1) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i16 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 %result
}

; Function Attrs: nounwind
define weak i32 @halide_error_explicit_bounds_too_small(i8* %user_context, i8* %func_name, i8* %var_name, i32 %min_bound, i32 %max_bound, i32 %min_required, i32 %max_required) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i151 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3.114, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i152 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3.114, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i151, %entry.split ], [ %call.i152, %if.then6.i ]
  %ref.tmp.sroa.34.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i18 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.34.0, i8* %var_name) #14
  %call.i21 = tail call i8* @halide_string_to_string(i8* %call.i18, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4.115, i64 0, i64 0)) #14
  %call.i24 = tail call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.34.0, i8* %func_name) #14
  %call.i27 = tail call i8* @halide_string_to_string(i8* %call.i24, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5.116, i64 0, i64 0)) #14
  %conv.i = sext i32 %min_bound to i64
  %call.i30 = tail call i8* @halide_int64_to_string(i8* %call.i27, i8* %ref.tmp.sroa.34.0, i64 %conv.i, i32 1) #14
  %call.i33 = tail call i8* @halide_string_to_string(i8* %call.i30, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.117, i64 0, i64 0)) #14
  %conv.i36 = sext i32 %max_bound to i64
  %call.i37 = tail call i8* @halide_int64_to_string(i8* %call.i33, i8* %ref.tmp.sroa.34.0, i64 %conv.i36, i32 1) #14
  %call.i40 = tail call i8* @halide_string_to_string(i8* %call.i37, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.7.118, i64 0, i64 0)) #14
  %conv.i43 = sext i32 %min_required to i64
  %call.i44 = tail call i8* @halide_int64_to_string(i8* %call.i40, i8* %ref.tmp.sroa.34.0, i64 %conv.i43, i32 1) #14
  %call.i47 = tail call i8* @halide_string_to_string(i8* %call.i44, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.117, i64 0, i64 0)) #14
  %conv.i50 = sext i32 %max_required to i64
  %call.i51 = tail call i8* @halide_int64_to_string(i8* %call.i47, i8* %ref.tmp.sroa.34.0, i64 %conv.i50, i32 1) #14
  %call.i54 = tail call i8* @halide_string_to_string(i8* %call.i51, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.119, i64 0, i64 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i54 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -2
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_type(i8* %user_context, i8* %func_name, i32 %type_given_bits, i32 %correct_type_bits) local_unnamed_addr #4 {
entry:
  %type_given_bits.addr = alloca i32, align 4
  %correct_type_bits.addr = alloca i32, align 4
  %correct_type = alloca %struct.halide_type_t, align 2
  %type_given = alloca %struct.halide_type_t, align 2
  store i32 %type_given_bits, i32* %type_given_bits.addr, align 4, !tbaa !41
  store i32 %correct_type_bits, i32* %correct_type_bits.addr, align 4, !tbaa !41
  %0 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %correct_type, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0) #11
  store i8 0, i8* %0, align 2, !tbaa !304
  %bits.i = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %correct_type, i64 0, i32 1
  store i8 0, i8* %bits.i, align 1, !tbaa !144
  %lanes.i = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %correct_type, i64 0, i32 2
  store i16 0, i16* %lanes.i, align 2, !tbaa !305
  %1 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %type_given, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1) #11
  store i8 0, i8* %1, align 2, !tbaa !304
  %bits.i8 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %type_given, i64 0, i32 1
  store i8 0, i8* %bits.i8, align 1, !tbaa !144
  %lanes.i9 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %type_given, i64 0, i32 2
  store i16 0, i16* %lanes.i9, align 2, !tbaa !305
  %2 = bitcast i32* %correct_type_bits.addr to i8*
  %call = call i8* @memcpy(i8* nonnull %0, i8* nonnull %2, i64 4) #14
  %3 = bitcast i32* %type_given_bits.addr to i8*
  %call1 = call i8* @memcpy(i8* nonnull %1, i8* nonnull %3, i64 4) #14
  %call.i = call i8* @malloc(i64 1024) #14
  %tobool.not.i12 = icmp eq i8* %call.i, null
  br i1 %tobool.not.i12, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i151 = call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i152 = call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* %func_name) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i151, %entry.split ], [ %call.i152, %if.then6.i ]
  %ref.tmp.sroa.18.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i18 = call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.9.120, i64 0, i64 0)) #14
  %call.i21 = call i8* @halide_type_to_string(i8* %call.i18, i8* %ref.tmp.sroa.18.0, %struct.halide_type_t* nonnull %correct_type) #14
  %call.i24 = call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.10.121, i64 0, i64 0)) #14
  %call.i27 = call i8* @halide_type_to_string(i8* %call.i24, i8* %ref.tmp.sroa.18.0, %struct.halide_type_t* nonnull %type_given) #14
  br i1 %tobool.not.i12, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i27 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  call void @free(i8* %call.i) #14
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0) #11
  ret i32 -3
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_dimensions(i8* %user_context, i8* %func_name, i32 %dimensions_given, i32 %correct_dimensions) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* %func_name) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.11.122, i64 0, i64 0)) #14
  %conv.i = sext i32 %correct_dimensions to i64
  %call.i14 = tail call i8* @halide_int64_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i64 %conv.i, i32 1) #14
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.12.123, i64 0, i64 0)) #14
  %conv.i20 = sext i32 %dimensions_given to i64
  %call.i21 = tail call i8* @halide_int64_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i64 %conv.i20, i32 1) #14
  %call.i24 = tail call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.13.124, i64 0, i64 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i24 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -43
}

; Function Attrs: nounwind
define weak i32 @halide_error_access_out_of_bounds(i8* %user_context, i8* %func_name, i32 %dimension, i32 %min_touched, i32 %max_touched, i32 %min_valid, i32 %max_valid) local_unnamed_addr #4 {
entry:
  %cmp = icmp slt i32 %min_touched, %min_valid
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.split, label %if.then6.i

if.then.split:                                    ; preds = %if.then
  %call.i271 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %if.then
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i272 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* %func_name) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %if.then.split, %if.then6.i
  %phi.call = phi i8* [ %call.i271, %if.then.split ], [ %call.i272, %if.then6.i ]
  %ref.tmp.sroa.22.0 = phi i8* [ null, %if.then.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i30 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.14.125, i64 0, i64 0)) #14
  %conv.i = sext i32 %min_touched to i64
  %call.i33 = tail call i8* @halide_int64_to_string(i8* %call.i30, i8* %ref.tmp.sroa.22.0, i64 %conv.i, i32 1) #14
  %call.i36 = tail call i8* @halide_string_to_string(i8* %call.i33, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.15.126, i64 0, i64 0)) #14
  %conv.i39 = sext i32 %min_valid to i64
  %call.i40 = tail call i8* @halide_int64_to_string(i8* %call.i36, i8* %ref.tmp.sroa.22.0, i64 %conv.i39, i32 1) #14
  %call.i43 = tail call i8* @halide_string_to_string(i8* %call.i40, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.16.127, i64 0, i64 0)) #14
  %conv.i46 = sext i32 %dimension to i64
  %call.i47 = tail call i8* @halide_int64_to_string(i8* %call.i43, i8* %ref.tmp.sroa.22.0, i64 %conv.i46, i32 1) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %if.end17.sink.split

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i47 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %if.end17.sink.split

if.else:                                          ; preds = %entry
  %cmp7 = icmp sgt i32 %max_touched, %max_valid
  br i1 %cmp7, label %if.then8, label %if.end17

if.then8:                                         ; preds = %if.else
  %call.i53 = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i56 = icmp eq i8* %call.i53, null
  br i1 %tobool.not.i56, label %if.then8.split, label %if.then6.i59

if.then8.split:                                   ; preds = %if.then8
  %call.i653 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62

if.then6.i59:                                     ; preds = %if.then8
  %add.ptr.i57 = getelementptr inbounds i8, i8* %call.i53, i64 1023
  store i8 0, i8* %add.ptr.i57, align 1, !tbaa !18
  %call.i654 = tail call i8* @halide_string_to_string(i8* nonnull %call.i53, i8* nonnull %add.ptr.i57, i8* %func_name) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62: ; preds = %if.then8.split, %if.then6.i59
  %phi.call5 = phi i8* [ %call.i653, %if.then8.split ], [ %call.i654, %if.then6.i59 ]
  %ref.tmp9.sroa.22.0 = phi i8* [ null, %if.then8.split ], [ %add.ptr.i57, %if.then6.i59 ]
  %call.i68 = tail call i8* @halide_string_to_string(i8* %phi.call5, i8* %ref.tmp9.sroa.22.0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.14.125, i64 0, i64 0)) #14
  %conv.i71 = sext i32 %max_touched to i64
  %call.i72 = tail call i8* @halide_int64_to_string(i8* %call.i68, i8* %ref.tmp9.sroa.22.0, i64 %conv.i71, i32 1) #14
  %call.i75 = tail call i8* @halide_string_to_string(i8* %call.i72, i8* %ref.tmp9.sroa.22.0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.17.128, i64 0, i64 0)) #14
  %conv.i78 = sext i32 %max_valid to i64
  %call.i79 = tail call i8* @halide_int64_to_string(i8* %call.i75, i8* %ref.tmp9.sroa.22.0, i64 %conv.i78, i32 1) #14
  %call.i82 = tail call i8* @halide_string_to_string(i8* %call.i79, i8* %ref.tmp9.sroa.22.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.16.127, i64 0, i64 0)) #14
  %conv.i85 = sext i32 %dimension to i64
  %call.i86 = tail call i8* @halide_int64_to_string(i8* %call.i82, i8* %ref.tmp9.sroa.22.0, i64 %conv.i85, i32 1) #14
  br i1 %tobool.not.i56, label %if.then.i90, label %if.else.i100

if.then.i90:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %if.end17.sink.split

if.else.i100:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62
  %sub.ptr.lhs.cast.i.i95 = ptrtoint i8* %call.i86 to i64
  %sub.ptr.rhs.cast.i.i96 = ptrtoint i8* %call.i53 to i64
  %sub.ptr.sub.i.i97 = sub i64 1, %sub.ptr.rhs.cast.i.i96
  %add.i.i98 = add i64 %sub.ptr.sub.i.i97, %sub.ptr.lhs.cast.i.i95
  %call.i.i99 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i53, i64 %add.i.i98) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i53) #14
  br label %if.end17.sink.split

if.end17.sink.split:                              ; preds = %if.else.i100, %if.then.i90, %if.else.i, %if.then.i
  %call.i53.sink = phi i8* [ %call.i, %if.else.i ], [ null, %if.then.i ], [ %call.i53, %if.else.i100 ], [ null, %if.then.i90 ]
  tail call void @free(i8* %call.i53.sink) #14
  br label %if.end17

if.end17:                                         ; preds = %if.end17.sink.split, %if.else
  ret i32 -4
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_allocation_too_large(i8* %user_context, i8* %buffer_name, i64 %allocation_size, i64 %max_size) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.18.129, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.18.129, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %buffer_name) #14
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #14
  %call.i17 = tail call i8* @halide_uint64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %allocation_size, i32 1) #14
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.20.131, i64 0, i64 0)) #14
  %call.i23 = tail call i8* @halide_uint64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_size, i32 1) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -5
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_extents_negative(i8* %user_context, i8* %buffer_name, i32 %dimension, i32 %extent) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i91 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.21.132, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i92 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.21.132, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i91, %entry.split ], [ %call.i92, %if.then6.i ]
  %ref.tmp.sroa.22.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i12 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.22.0, i8* %buffer_name) #14
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.22.133, i64 0, i64 0)) #14
  %conv.i = sext i32 %dimension to i64
  %call.i18 = tail call i8* @halide_int64_to_string(i8* %call.i15, i8* %ref.tmp.sroa.22.0, i64 %conv.i, i32 1) #14
  %call.i21 = tail call i8* @halide_string_to_string(i8* %call.i18, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.23.134, i64 0, i64 0)) #14
  %conv.i24 = sext i32 %extent to i64
  %call.i25 = tail call i8* @halide_int64_to_string(i8* %call.i21, i8* %ref.tmp.sroa.22.0, i64 %conv.i24, i32 1) #14
  %call.i28 = tail call i8* @halide_string_to_string(i8* %call.i25, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.119, i64 0, i64 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i28 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -28
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_extents_too_large(i8* %user_context, i8* %buffer_name, i64 %actual_size, i64 %max_size) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.24.135, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.24.135, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %buffer_name) #14
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #14
  %call.i17 = tail call i8* @halide_int64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %actual_size, i32 1) #14
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.20.131, i64 0, i64 0)) #14
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_size, i32 1) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -6
}

; Function Attrs: nounwind
define weak i32 @halide_error_constraints_make_required_region_smaller(i8* %user_context, i8* %buffer_name, i32 %dimension, i32 %constrained_min, i32 %constrained_extent, i32 %required_min, i32 %required_extent) local_unnamed_addr #4 {
entry:
  %add = add i32 %required_min, -1
  %sub = add i32 %add, %required_extent
  %add1 = add i32 %constrained_min, -1
  %sub2 = add i32 %add1, %constrained_extent
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i231 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.25.136, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i232 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.25.136, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i231, %entry.split ], [ %call.i232, %if.then6.i ]
  %ref.tmp.sroa.38.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i26 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.38.0, i8* %buffer_name) #14
  %call.i29 = tail call i8* @halide_string_to_string(i8* %call.i26, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.26.137, i64 0, i64 0)) #14
  %conv.i = sext i32 %dimension to i64
  %call.i32 = tail call i8* @halide_int64_to_string(i8* %call.i29, i8* %ref.tmp.sroa.38.0, i64 %conv.i, i32 1) #14
  %call.i35 = tail call i8* @halide_string_to_string(i8* %call.i32, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.27.138, i64 0, i64 0)) #14
  %call.i38 = tail call i8* @halide_string_to_string(i8* %call.i35, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.28.139, i64 0, i64 0)) #14
  %conv.i41 = sext i32 %required_min to i64
  %call.i42 = tail call i8* @halide_int64_to_string(i8* %call.i38, i8* %ref.tmp.sroa.38.0, i64 %conv.i41, i32 1) #14
  %call.i45 = tail call i8* @halide_string_to_string(i8* %call.i42, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.117, i64 0, i64 0)) #14
  %conv.i48 = sext i32 %sub to i64
  %call.i49 = tail call i8* @halide_int64_to_string(i8* %call.i45, i8* %ref.tmp.sroa.38.0, i64 %conv.i48, i32 1) #14
  %call.i52 = tail call i8* @halide_string_to_string(i8* %call.i49, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.27.138, i64 0, i64 0)) #14
  %call.i55 = tail call i8* @halide_string_to_string(i8* %call.i52, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.29.140, i64 0, i64 0)) #14
  %conv.i58 = sext i32 %constrained_min to i64
  %call.i59 = tail call i8* @halide_int64_to_string(i8* %call.i55, i8* %ref.tmp.sroa.38.0, i64 %conv.i58, i32 1) #14
  %call.i62 = tail call i8* @halide_string_to_string(i8* %call.i59, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.117, i64 0, i64 0)) #14
  %conv.i65 = sext i32 %sub2 to i64
  %call.i66 = tail call i8* @halide_int64_to_string(i8* %call.i62, i8* %ref.tmp.sroa.38.0, i64 %conv.i65, i32 1) #14
  %call.i69 = tail call i8* @halide_string_to_string(i8* %call.i66, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i69 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -7
}

; Function Attrs: nounwind
define weak i32 @halide_error_constraint_violated(i8* %user_context, i8* %var, i32 %val, i8* %constrained_var, i32 %constrained_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i111 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.31.142, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i112 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.31.142, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i111, %entry.split ], [ %call.i112, %if.then6.i ]
  %ref.tmp.sroa.26.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i14 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.26.0, i8* %var) #14
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32.143, i64 0, i64 0)) #14
  %conv.i = sext i32 %val to i64
  %call.i20 = tail call i8* @halide_int64_to_string(i8* %call.i17, i8* %ref.tmp.sroa.26.0, i64 %conv.i, i32 1) #14
  %call.i23 = tail call i8* @halide_string_to_string(i8* %call.i20, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.33.144, i64 0, i64 0)) #14
  %call.i26 = tail call i8* @halide_string_to_string(i8* %call.i23, i8* %ref.tmp.sroa.26.0, i8* %constrained_var) #14
  %call.i29 = tail call i8* @halide_string_to_string(i8* %call.i26, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32.143, i64 0, i64 0)) #14
  %conv.i32 = sext i32 %constrained_val to i64
  %call.i33 = tail call i8* @halide_int64_to_string(i8* %call.i29, i8* %ref.tmp.sroa.26.0, i64 %conv.i32, i32 1) #14
  %call.i36 = tail call i8* @halide_string_to_string(i8* %call.i33, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.119, i64 0, i64 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i36 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -8
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_small_i64(i8* %user_context, i8* %param_name, i64 %val, i64 %min_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #14
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #14
  %call.i17 = tail call i8* @halide_int64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #14
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.35.146, i64 0, i64 0)) #14
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %min_val, i32 1) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -9
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_small_u64(i8* %user_context, i8* %param_name, i64 %val, i64 %min_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #14
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #14
  %call.i17 = tail call i8* @halide_uint64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #14
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.35.146, i64 0, i64 0)) #14
  %call.i23 = tail call i8* @halide_uint64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %min_val, i32 1) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -9
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_small_f64(i8* %user_context, i8* %param_name, double %val, double %min_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #14
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #14
  %call.i17 = tail call i8* @halide_double_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, double %val, i32 1) #14
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.35.146, i64 0, i64 0)) #14
  %call.i23 = tail call i8* @halide_double_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, double %min_val, i32 1) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -9
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_large_i64(i8* %user_context, i8* %param_name, i64 %val, i64 %max_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #14
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #14
  %call.i17 = tail call i8* @halide_int64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #14
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.36, i64 0, i64 0)) #14
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_val, i32 1) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -10
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_large_u64(i8* %user_context, i8* %param_name, i64 %val, i64 %max_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #14
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #14
  %call.i17 = tail call i8* @halide_uint64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #14
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.36, i64 0, i64 0)) #14
  %call.i23 = tail call i8* @halide_uint64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_val, i32 1) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -10
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_large_f64(i8* %user_context, i8* %param_name, double %val, double %max_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #14
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #14
  %call.i17 = tail call i8* @halide_double_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, double %val, i32 1) #14
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.36, i64 0, i64 0)) #14
  %call.i23 = tail call i8* @halide_double_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, double %max_val, i32 1) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -10
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_error_out_of_memory(i8* %user_context) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.37, i64 0, i64 0)) #14
  ret i32 -11
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_argument_is_null(i8* %user_context, i8* %buffer_name) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i51 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.38, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i52 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.38, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i51, %entry.split ], [ %call.i52, %if.then6.i ]
  %ref.tmp.sroa.14.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i8 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.14.0, i8* %buffer_name) #14
  %call.i11 = tail call i8* @halide_string_to_string(i8* %call.i8, i8* %ref.tmp.sroa.14.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.39, i64 0, i64 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i11 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -12
}

; Function Attrs: nounwind
define weak i32 @halide_error_debug_to_file_failed(i8* %user_context, i8* %func, i8* %filename, i32 %error_code) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.40, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.40, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %func) #14
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.41.147, i64 0, i64 0)) #14
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i8* %filename) #14
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.42, i64 0, i64 0)) #14
  %conv.i = sext i32 %error_code to i64
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %conv.i, i32 1) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -13
}

; Function Attrs: nounwind
define weak i32 @halide_error_unaligned_host_ptr(i8* %user_context, i8* %func, i32 %alignment) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i71 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i72 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i71, %entry.split ], [ %call.i72, %if.then6.i ]
  %ref.tmp.sroa.18.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i10 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.18.0, i8* %func) #14
  %call.i13 = tail call i8* @halide_string_to_string(i8* %call.i10, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.44, i64 0, i64 0)) #14
  %conv.i = sext i32 %alignment to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %call.i13, i8* %ref.tmp.sroa.18.0, i64 %conv.i, i32 1) #14
  %call.i19 = tail call i8* @halide_string_to_string(i8* %call.i16, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.45, i64 0, i64 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i19 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -24
}

; Function Attrs: nounwind
define weak i32 @halide_error_device_dirty_with_no_device_support(i8* %user_context, i8* %func) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i61 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.46, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i62 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.46, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i61, %entry.split ], [ %call.i62, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i9 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %func) #14
  %call.i12 = tail call i8* @halide_string_to_string(i8* %call.i9, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.47, i64 0, i64 0)) #14
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.48, i64 0, i64 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i15 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -44
}

; Function Attrs: nounwind
define weak i32 @halide_error_host_is_null(i8* %user_context, i8* %func) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i51 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i52 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i51, %entry.split ], [ %call.i52, %if.then6.i ]
  %ref.tmp.sroa.14.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i8 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.14.0, i8* %func) #14
  %call.i11 = tail call i8* @halide_string_to_string(i8* %call.i8, i8* %ref.tmp.sroa.14.0, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.49, i64 0, i64 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i11 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -34
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_fold(i8* %user_context, i8* %func_name, i8* %var_name, i8* %loop_name) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i91 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.50.148, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i92 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.50.148, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i91, %entry.split ], [ %call.i92, %if.then6.i ]
  %ref.tmp.sroa.22.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i12 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.22.0, i8* %var_name) #14
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i64 0, i64 0)) #14
  %call.i18 = tail call i8* @halide_string_to_string(i8* %call.i15, i8* %ref.tmp.sroa.22.0, i8* %func_name) #14
  %call.i21 = tail call i8* @halide_string_to_string(i8* %call.i18, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.52, i64 0, i64 0)) #14
  %call.i24 = tail call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.22.0, i8* %loop_name) #14
  %call.i27 = tail call i8* @halide_string_to_string(i8* %call.i24, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i27 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -25
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_extern_fold(i8* %user_context, i8* %func_name, i32 %dim, i32 %min, i32 %extent, i32 %valid_min, i32 %fold_factor) local_unnamed_addr #4 {
entry:
  %cmp = icmp slt i32 %min, %valid_min
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %add = add nsw i32 %extent, %min
  %add1 = add nsw i32 %fold_factor, %valid_min
  %cmp2 = icmp sgt i32 %add, %add1
  br i1 %cmp2, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false, %entry
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.split, label %if.then6.i

if.then.split:                                    ; preds = %if.then
  %call.i521 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %if.then
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i522 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %if.then.split, %if.then6.i
  %phi.call = phi i8* [ %call.i521, %if.then.split ], [ %call.i522, %if.then6.i ]
  %ref.tmp.sroa.36.0 = phi i8* [ null, %if.then.split ], [ %add.ptr.i, %if.then6.i ]
  %conv.i = sext i32 %dim to i64
  %call.i55 = tail call i8* @halide_int64_to_string(i8* %phi.call, i8* %ref.tmp.sroa.36.0, i64 %conv.i, i32 1) #14
  %call.i58 = tail call i8* @halide_string_to_string(i8* %call.i55, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i64 0, i64 0)) #14
  %call.i61 = tail call i8* @halide_string_to_string(i8* %call.i58, i8* %ref.tmp.sroa.36.0, i8* %func_name) #14
  %call.i64 = tail call i8* @halide_string_to_string(i8* %call.i61, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.54, i64 0, i64 0)) #14
  %conv.i67 = sext i32 %min to i64
  %call.i68 = tail call i8* @halide_int64_to_string(i8* %call.i64, i8* %ref.tmp.sroa.36.0, i64 %conv.i67, i32 1) #14
  %call.i71 = tail call i8* @halide_string_to_string(i8* %call.i68, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #14
  %add9 = add nsw i32 %extent, %min
  %sub = add nsw i32 %add9, -1
  %conv.i74 = sext i32 %sub to i64
  %call.i75 = tail call i8* @halide_int64_to_string(i8* %call.i71, i8* %ref.tmp.sroa.36.0, i64 %conv.i74, i32 1) #14
  %call.i78 = tail call i8* @halide_string_to_string(i8* %call.i75, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.56, i64 0, i64 0)) #14
  %call.i81 = tail call i8* @halide_string_to_string(i8* %call.i78, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.57, i64 0, i64 0)) #14
  %conv.i84 = sext i32 %valid_min to i64
  %call.i85 = tail call i8* @halide_int64_to_string(i8* %call.i81, i8* %ref.tmp.sroa.36.0, i64 %conv.i84, i32 1) #14
  %call.i88 = tail call i8* @halide_string_to_string(i8* %call.i85, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #14
  %add15 = add nsw i32 %fold_factor, %valid_min
  %sub16 = add nsw i32 %add15, -1
  %conv.i91 = sext i32 %sub16 to i64
  %call.i92 = tail call i8* @halide_int64_to_string(i8* %call.i88, i8* %ref.tmp.sroa.36.0, i64 %conv.i91, i32 1) #14
  %call.i95 = tail call i8* @halide_string_to_string(i8* %call.i92, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.58.149, i64 0, i64 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %if.end

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i95 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %if.end

if.else:                                          ; preds = %lor.lhs.false
  %call.i101 = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i104 = icmp eq i8* %call.i101, null
  br i1 %tobool.not.i104, label %if.else.split, label %if.then6.i107

if.else.split:                                    ; preds = %if.else
  %call.i1133 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110

if.then6.i107:                                    ; preds = %if.else
  %add.ptr.i105 = getelementptr inbounds i8, i8* %call.i101, i64 1023
  store i8 0, i8* %add.ptr.i105, align 1, !tbaa !18
  %call.i1134 = tail call i8* @halide_string_to_string(i8* nonnull %call.i101, i8* nonnull %add.ptr.i105, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110: ; preds = %if.else.split, %if.then6.i107
  %phi.call5 = phi i8* [ %call.i1133, %if.else.split ], [ %call.i1134, %if.then6.i107 ]
  %ref.tmp19.sroa.34.0 = phi i8* [ null, %if.else.split ], [ %add.ptr.i105, %if.then6.i107 ]
  %conv.i116 = sext i32 %dim to i64
  %call.i117 = tail call i8* @halide_int64_to_string(i8* %phi.call5, i8* %ref.tmp19.sroa.34.0, i64 %conv.i116, i32 1) #14
  %call.i120 = tail call i8* @halide_string_to_string(i8* %call.i117, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i64 0, i64 0)) #14
  %call.i123 = tail call i8* @halide_string_to_string(i8* %call.i120, i8* %ref.tmp19.sroa.34.0, i8* %func_name) #14
  %call.i126 = tail call i8* @halide_string_to_string(i8* %call.i123, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.54, i64 0, i64 0)) #14
  %conv.i129 = sext i32 %min to i64
  %call.i130 = tail call i8* @halide_int64_to_string(i8* %call.i126, i8* %ref.tmp19.sroa.34.0, i64 %conv.i129, i32 1) #14
  %call.i133 = tail call i8* @halide_string_to_string(i8* %call.i130, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #14
  %sub28 = add nsw i32 %add, -1
  %conv.i136 = sext i32 %sub28 to i64
  %call.i137 = tail call i8* @halide_int64_to_string(i8* %call.i133, i8* %ref.tmp19.sroa.34.0, i64 %conv.i136, i32 1) #14
  %call.i140 = tail call i8* @halide_string_to_string(i8* %call.i137, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.56, i64 0, i64 0)) #14
  %call.i143 = tail call i8* @halide_string_to_string(i8* %call.i140, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.59.150, i64 0, i64 0)) #14
  %call.i146 = tail call i8* @halide_string_to_string(i8* %call.i143, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.60.151, i64 0, i64 0)) #14
  %conv.i149 = sext i32 %fold_factor to i64
  %call.i150 = tail call i8* @halide_int64_to_string(i8* %call.i146, i8* %ref.tmp19.sroa.34.0, i64 %conv.i149, i32 1) #14
  %call.i153 = tail call i8* @halide_string_to_string(i8* %call.i150, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #14
  br i1 %tobool.not.i104, label %if.then.i157, label %if.else.i167

if.then.i157:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %if.end

if.else.i167:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110
  %sub.ptr.lhs.cast.i.i162 = ptrtoint i8* %call.i153 to i64
  %sub.ptr.rhs.cast.i.i163 = ptrtoint i8* %call.i101 to i64
  %sub.ptr.sub.i.i164 = sub i64 1, %sub.ptr.rhs.cast.i.i163
  %add.i.i165 = add i64 %sub.ptr.sub.i.i164, %sub.ptr.lhs.cast.i.i162
  %call.i.i166 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i101, i64 %add.i.i165) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i101) #14
  br label %if.end

if.end:                                           ; preds = %if.else.i167, %if.then.i157, %if.else.i, %if.then.i
  %call.i101.sink = phi i8* [ %call.i, %if.else.i ], [ null, %if.then.i ], [ %call.i101, %if.else.i167 ], [ null, %if.then.i157 ]
  tail call void @free(i8* %call.i101.sink) #14
  ret i32 -35
}

; Function Attrs: nounwind
define weak i32 @halide_error_fold_factor_too_small(i8* %user_context, i8* %func_name, i8* %var_name, i32 %fold_factor, i8* %loop_name, i32 %required_extent) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i131 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.61.152, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i132 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.61.152, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i131, %entry.split ], [ %call.i132, %if.then6.i ]
  %ref.tmp.sroa.30.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %conv.i = sext i32 %fold_factor to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %phi.call, i8* %ref.tmp.sroa.30.0, i64 %conv.i, i32 1) #14
  %call.i19 = tail call i8* @halide_string_to_string(i8* %call.i16, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.62, i64 0, i64 0)) #14
  %call.i22 = tail call i8* @halide_string_to_string(i8* %call.i19, i8* %ref.tmp.sroa.30.0, i8* %var_name) #14
  %call.i25 = tail call i8* @halide_string_to_string(i8* %call.i22, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i64 0, i64 0)) #14
  %call.i28 = tail call i8* @halide_string_to_string(i8* %call.i25, i8* %ref.tmp.sroa.30.0, i8* %func_name) #14
  %call.i31 = tail call i8* @halide_string_to_string(i8* %call.i28, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.63, i64 0, i64 0)) #14
  %call.i34 = tail call i8* @halide_string_to_string(i8* %call.i31, i8* %ref.tmp.sroa.30.0, i8* %loop_name) #14
  %call.i37 = tail call i8* @halide_string_to_string(i8* %call.i34, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32.143, i64 0, i64 0)) #14
  %conv.i40 = sext i32 %required_extent to i64
  %call.i41 = tail call i8* @halide_int64_to_string(i8* %call.i37, i8* %ref.tmp.sroa.30.0, i64 %conv.i40, i32 1) #14
  %call.i44 = tail call i8* @halide_string_to_string(i8* %call.i41, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.64.153, i64 0, i64 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i44 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -26
}

; Function Attrs: nounwind
define weak i32 @halide_error_requirement_failed(i8* %user_context, i8* %condition, i8* %message) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i61 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.65, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i62 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.65, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i61, %entry.split ], [ %call.i62, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i9 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %condition) #14
  %call.i12 = tail call i8* @halide_string_to_string(i8* %call.i9, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.66, i64 0, i64 0)) #14
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.16.0, i8* %message) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i15 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -27
}

; Function Attrs: nounwind
define weak i32 @halide_error_specialize_fail(i8* %user_context, i8* %message) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i41 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.67, i64 0, i64 0)) #14
  %call.i75 = tail call i8* @halide_string_to_string(i8* %call.i41, i8* null, i8* %message) #14
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i42 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.67, i64 0, i64 0)) #14
  %call.i7 = tail call i8* @halide_string_to_string(i8* %call.i42, i8* nonnull %add.ptr.i, i8* %message) #14
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i7 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -31
}

; Function Attrs: nounwind
define weak i32 @halide_error_no_device_interface(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.68, i64 0, i64 0)) #14
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.68, i64 0, i64 0)) #14
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -19
}

; Function Attrs: nounwind
define weak i32 @halide_error_device_interface_no_device(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.69, i64 0, i64 0)) #14
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.69, i64 0, i64 0)) #14
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -36
}

; Function Attrs: nounwind
define weak i32 @halide_error_host_and_device_dirty(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.70, i64 0, i64 0)) #14
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.70, i64 0, i64 0)) #14
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -37
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_is_null(i8* %user_context, i8* %routine) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i51 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.71, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i52 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.71, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i51, %entry.split ], [ %call.i52, %if.then6.i ]
  %ref.tmp.sroa.14.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i8 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.14.0, i8* %routine) #14
  %call.i11 = tail call i8* @halide_string_to_string(i8* %call.i8, i8* %ref.tmp.sroa.14.0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.72, i64 0, i64 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i11 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -38
}

; Function Attrs: nounwind
define weak i32 @halide_error_storage_bound_too_small(i8* %user_context, i8* %func_name, i8* %var_name, i32 %provided_size, i32 %required_size) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i111 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.73, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i112 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.73, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i111, %entry.split ], [ %call.i112, %if.then6.i ]
  %ref.tmp.sroa.26.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %conv.i = sext i32 %provided_size to i64
  %call.i14 = tail call i8* @halide_int64_to_string(i8* %phi.call, i8* %ref.tmp.sroa.26.0, i64 %conv.i, i32 1) #14
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.62, i64 0, i64 0)) #14
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.26.0, i8* %var_name) #14
  %call.i23 = tail call i8* @halide_string_to_string(i8* %call.i20, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i64 0, i64 0)) #14
  %call.i26 = tail call i8* @halide_string_to_string(i8* %call.i23, i8* %ref.tmp.sroa.26.0, i8* %func_name) #14
  %call.i29 = tail call i8* @halide_string_to_string(i8* %call.i26, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.74, i64 0, i64 0)) #14
  %conv.i32 = sext i32 %required_size to i64
  %call.i33 = tail call i8* @halide_int64_to_string(i8* %call.i29, i8* %ref.tmp.sroa.26.0, i64 %conv.i32, i32 1) #14
  %call.i36 = tail call i8* @halide_string_to_string(i8* %call.i33, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.64.153, i64 0, i64 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i36 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -45
}

; Function Attrs: nounwind
define weak i32 @halide_error_device_crop_failed(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.75, i64 0, i64 0)) #14
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.75, i64 0, i64 0)) #14
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -41
}

; Function Attrs: nounwind mustprogress
define weak void @halide_profiler_shutdown() #0 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #15
  %sampling_thread = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 7
  %0 = load %struct.halide_thread*, %struct.halide_thread** %sampling_thread, align 8, !tbaa !337
  %tobool.not = icmp eq %struct.halide_thread* %0, null
  br i1 %tobool.not, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %current_func = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 3
  store i32 -2, i32* %current_func, align 8, !tbaa !339
  tail call void @halide_join_thread(%struct.halide_thread* nonnull %0) #14
  store %struct.halide_thread* null, %struct.halide_thread** %sampling_thread, align 8, !tbaa !337
  store i32 -1, i32* %current_func, align 8, !tbaa !339
  tail call void @halide_profiler_report_unlocked(i8* null, %struct.halide_profiler_state* nonnull %call) #15
  tail call void @halide_profiler_reset_unlocked(%struct.halide_profiler_state* nonnull %call) #15
  br label %cleanup

cleanup:                                          ; preds = %if.end, %entry
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak %struct.halide_profiler_state* @halide_profiler_get_state() local_unnamed_addr #2 {
entry:
  ret %struct.halide_profiler_state* @_ZZ25halide_profiler_get_stateE1s
}

; Function Attrs: nounwind
define weak void @halide_profiler_report_unlocked(i8* %user_context, %struct.halide_profiler_state* %s) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit, label %if.then6.i

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit: ; preds = %if.then6.i, %entry
  %sstr.sroa.125.0 = phi i8* [ %add.ptr.i, %if.then6.i ], [ null, %entry ]
  %pipelines = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 5
  %p.0624 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !14
  %tobool.not625 = icmp eq %struct.halide_profiler_pipeline_stats* %p.0624, null
  br i1 %tobool.not625, label %for.cond.cleanup, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit
  %sub.ptr.rhs.cast.i.i348 = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i349 = sub i64 1, %sub.ptr.rhs.cast.i.i348
  br label %for.body

for.cond.cleanup:                                 ; preds = %cleanup181, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit
  %sstr.sroa.19.0.lcssa = phi i8* [ %call.i, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit ], [ %sstr.sroa.19.15, %cleanup181 ]
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %for.cond.cleanup
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %for.cond.cleanup
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %sstr.sroa.19.0.lcssa to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret void

for.body:                                         ; preds = %cleanup181, %for.body.lr.ph
  %p.0627 = phi %struct.halide_profiler_pipeline_stats* [ %p.0624, %for.body.lr.ph ], [ %p.0, %cleanup181 ]
  %sstr.sroa.19.0626 = phi i8* [ %call.i, %for.body.lr.ph ], [ %sstr.sroa.19.15, %cleanup181 ]
  %time = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 0
  %0 = load i64, i64* %time, align 8, !tbaa !340
  %conv = uitofp i64 %0 to float
  %div = fdiv float %conv, 1.000000e+06
  %runs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 11
  %1 = load i32, i32* %runs, align 8, !tbaa !342
  %tobool1.not = icmp eq i32 %1, 0
  br i1 %tobool1.not, label %cleanup181, label %if.end

if.end:                                           ; preds = %for.body
  br i1 %tobool.not.i, label %if.end.split, label %if.then.i278

if.end.split:                                     ; preds = %if.end
  %active_threads_numerator1 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 4
  %2 = load i64, i64* %active_threads_numerator1, align 8, !tbaa !343
  %active_threads_denominator2 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 5
  %3 = load i64, i64* %active_threads_denominator2, align 8, !tbaa !344
  %cmp3 = icmp eq i64 %2, %3
  %name4 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 6
  %4 = load i8*, i8** %name4, align 8, !tbaa !345
  %call.i2825 = tail call i8* @halide_string_to_string(i8* null, i8* %sstr.sroa.125.0, i8* %4) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit

if.then.i278:                                     ; preds = %if.end
  store i8 0, i8* %call.i, align 1, !tbaa !18
  %active_threads_numerator6 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 4
  %5 = load i64, i64* %active_threads_numerator6, align 8, !tbaa !343
  %active_threads_denominator7 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 5
  %6 = load i64, i64* %active_threads_denominator7, align 8, !tbaa !344
  %cmp8 = icmp eq i64 %5, %6
  %name9 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 6
  %7 = load i8*, i8** %name9, align 8, !tbaa !345
  %call.i28210 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* %sstr.sroa.125.0, i8* %7) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit: ; preds = %if.end.split, %if.then.i278
  %8 = phi i64 [ %2, %if.end.split ], [ %5, %if.then.i278 ]
  %9 = phi i64 [ %3, %if.end.split ], [ %6, %if.then.i278 ]
  %10 = phi i1 [ %cmp3, %if.end.split ], [ %cmp8, %if.then.i278 ]
  %phi.call = phi i8* [ %call.i2825, %if.end.split ], [ %call.i28210, %if.then.i278 ]
  %call.i285 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #14
  %call.i288 = tail call i8* @halide_string_to_string(i8* %call.i285, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.8.165, i64 0, i64 0)) #14
  %conv.i = fpext float %div to double
  %call.i291 = tail call i8* @halide_double_to_string(i8* %call.i288, i8* %sstr.sroa.125.0, double %conv.i, i32 0) #14
  %call.i294 = tail call i8* @halide_string_to_string(i8* %call.i291, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9.166, i64 0, i64 0)) #14
  %call.i297 = tail call i8* @halide_string_to_string(i8* %call.i294, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.10.167, i64 0, i64 0)) #14
  %samples = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 12
  %11 = load i32, i32* %samples, align 4, !tbaa !346
  %conv.i300 = sext i32 %11 to i64
  %call.i301 = tail call i8* @halide_int64_to_string(i8* %call.i297, i8* %sstr.sroa.125.0, i64 %conv.i300, i32 1) #14
  %call.i304 = tail call i8* @halide_string_to_string(i8* %call.i301, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.11.168, i64 0, i64 0)) #14
  %12 = load i32, i32* %runs, align 8, !tbaa !342
  %conv.i307 = sext i32 %12 to i64
  %call.i308 = tail call i8* @halide_int64_to_string(i8* %call.i304, i8* %sstr.sroa.125.0, i64 %conv.i307, i32 1) #14
  %call.i311 = tail call i8* @halide_string_to_string(i8* %call.i308, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.12.169, i64 0, i64 0)) #14
  %13 = load i32, i32* %runs, align 8, !tbaa !342
  %conv19 = sitofp i32 %13 to float
  %div20 = fdiv float %div, %conv19
  %conv.i314 = fpext float %div20 to double
  %call.i315 = tail call i8* @halide_double_to_string(i8* %call.i311, i8* %sstr.sroa.125.0, double %conv.i314, i32 0) #14
  %call.i318 = tail call i8* @halide_string_to_string(i8* %call.i315, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.13.170, i64 0, i64 0)) #14
  br i1 %10, label %if.end28, label %if.then24

if.then24:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit
  %conv3 = uitofp i64 %8 to double
  %conv5 = uitofp i64 %9 to double
  %add = fadd double %conv5, 1.000000e-10
  %div6 = fdiv double %conv3, %add
  %conv7 = fptrunc double %div6 to float
  %call.i321 = tail call i8* @halide_string_to_string(i8* %call.i318, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.14.171, i64 0, i64 0)) #14
  %conv.i324 = fpext float %conv7 to double
  %call.i325 = tail call i8* @halide_double_to_string(i8* %call.i321, i8* %sstr.sroa.125.0, double %conv.i324, i32 0) #14
  %call.i328 = tail call i8* @halide_string_to_string(i8* %call.i325, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #14
  br label %if.end28

if.end28:                                         ; preds = %if.then24, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit
  %sstr.sroa.19.1 = phi i8* [ %call.i318, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit ], [ %call.i328, %if.then24 ]
  %call.i331 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.1, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.15.172, i64 0, i64 0)) #14
  %num_allocs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 13
  %14 = load i32, i32* %num_allocs, align 8, !tbaa !347
  %conv.i334 = sext i32 %14 to i64
  %call.i335 = tail call i8* @halide_int64_to_string(i8* %call.i331, i8* %sstr.sroa.125.0, i64 %conv.i334, i32 1) #14
  %call.i338 = tail call i8* @halide_string_to_string(i8* %call.i335, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.16.173, i64 0, i64 0)) #14
  %memory_peak = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 2
  %15 = load i64, i64* %memory_peak, align 8, !tbaa !348
  %call.i341 = tail call i8* @halide_uint64_to_string(i8* %call.i338, i8* %sstr.sroa.125.0, i64 %15, i32 1) #14
  %call.i344 = tail call i8* @halide_string_to_string(i8* %call.i341, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.17.174, i64 0, i64 0)) #14
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit, label %if.then.i352

if.then.i352:                                     ; preds = %if.end28
  %sub.ptr.lhs.cast.i.i347 = ptrtoint i8* %call.i344 to i64
  %add.i.i350 = add i64 %sub.ptr.sub.i.i349, %sub.ptr.lhs.cast.i.i347
  %call.i.i351 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i350) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit: ; preds = %if.then.i352, %if.end28
  %retval.0.i = phi i8* [ %call.i, %if.then.i352 ], [ getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0), %if.end28 ]
  tail call void @halide_print(i8* %user_context, i8* nonnull %retval.0.i) #14
  %16 = load i64, i64* %time, align 8, !tbaa !340
  %tobool36.not = icmp eq i64 %16, 0
  br i1 %tobool36.not, label %lor.end, label %for.cond53.preheader

lor.end:                                          ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit
  %memory_total = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 3
  %17 = load i64, i64* %memory_total, align 8, !tbaa !349
  %tobool37.not = icmp eq i64 %17, 0
  br i1 %tobool37.not, label %for.cond41.preheader, label %for.cond53.preheader

for.cond41.preheader:                             ; preds = %lor.end
  %num_funcs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 9
  %18 = load i32, i32* %num_funcs, align 8, !tbaa !350
  %cmp42589 = icmp sgt i32 %18, 0
  br i1 %cmp42589, label %for.body44.lr.ph, label %cleanup181

for.body44.lr.ph:                                 ; preds = %for.cond41.preheader
  %funcs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 7
  %19 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %funcs, align 8, !tbaa !351
  %20 = zext i32 %18 to i64
  br label %for.body44

for.cond41:                                       ; preds = %for.body44
  %exitcond.not = icmp eq i64 %indvars.iv.next, %20
  br i1 %exitcond.not, label %cleanup181, label %for.body44, !llvm.loop !352

for.body44:                                       ; preds = %for.cond41, %for.body44.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body44.lr.ph ], [ %indvars.iv.next, %for.cond41 ]
  %stack_peak = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %19, i64 %indvars.iv, i32 4
  %21 = load i64, i64* %stack_peak, align 8, !tbaa !353
  %tobool45.not = icmp eq i64 %21, 0
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  br i1 %tobool45.not, label %for.cond41, label %for.cond53.preheader

for.cond53.preheader:                             ; preds = %for.body44, %lor.end, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit
  %num_funcs54 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 9
  %22 = load i32, i32* %num_funcs54, align 8, !tbaa !350
  %cmp55621 = icmp sgt i32 %22, 0
  br i1 %cmp55621, label %for.body57.lr.ph, label %cleanup181

for.body57.lr.ph:                                 ; preds = %for.cond53.preheader
  %funcs59 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 7
  br label %for.body57

for.body57:                                       ; preds = %cleanup172, %for.body57.lr.ph
  %indvars.iv630 = phi i64 [ 0, %for.body57.lr.ph ], [ %indvars.iv.next631, %cleanup172 ]
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit358, label %if.then.i356

if.then.i356:                                     ; preds = %for.body57
  store i8 0, i8* %call.i, align 1, !tbaa !18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit358

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit358: ; preds = %if.then.i356, %for.body57
  %23 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %funcs59, align 8, !tbaa !351
  %add.ptr61 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630
  %cmp62 = icmp eq i64 %indvars.iv630, 0
  br i1 %cmp62, label %land.lhs.true, label %if.end66

land.lhs.true:                                    ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit358
  %time63 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %add.ptr61, i64 0, i32 0
  %24 = load i64, i64* %time63, align 8, !tbaa !355
  %cmp64 = icmp eq i64 %24, 0
  br i1 %cmp64, label %cleanup172, label %if.end66

if.end66:                                         ; preds = %land.lhs.true, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit358
  %call.i361 = tail call i8* @halide_string_to_string(i8* %call.i, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.18.175, i64 0, i64 0)) #14
  %name68 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 7
  %25 = load i8*, i8** %name68, align 8, !tbaa !356
  %call.i364 = tail call i8* @halide_string_to_string(i8* %call.i361, i8* %sstr.sroa.125.0, i8* %25) #14
  %call.i367 = tail call i8* @halide_string_to_string(i8* %call.i364, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.19.176, i64 0, i64 0)) #14
  %sub.ptr.lhs.cast.i591 = ptrtoint i8* %call.i367 to i64
  %sub.ptr.sub.i592 = sub i64 %sub.ptr.lhs.cast.i591, %sub.ptr.rhs.cast.i.i348
  %cmp73593 = icmp ult i64 %sub.ptr.sub.i592, 25
  br i1 %cmp73593, label %while.body, label %while.end

while.body:                                       ; preds = %if.end66, %while.body
  %sstr.sroa.19.3594 = phi i8* [ %call.i384, %while.body ], [ %call.i367, %if.end66 ]
  %call.i384 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.3594, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #14
  %sub.ptr.lhs.cast.i = ptrtoint i8* %call.i384 to i64
  %sub.ptr.sub.i = sub i64 %sub.ptr.lhs.cast.i, %sub.ptr.rhs.cast.i.i348
  %cmp73 = icmp ult i64 %sub.ptr.sub.i, 25
  br i1 %cmp73, label %while.body, label %while.end, !llvm.loop !357

while.end:                                        ; preds = %while.body, %if.end66
  %sstr.sroa.19.3.lcssa = phi i8* [ %call.i367, %if.end66 ], [ %call.i384, %while.body ]
  %time75 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %add.ptr61, i64 0, i32 0
  %26 = load i64, i64* %time75, align 8, !tbaa !355
  %conv76 = uitofp i64 %26 to float
  %27 = load i32, i32* %runs, align 8, !tbaa !342
  %conv78 = sitofp i32 %27 to float
  %mul = fmul float %conv78, 1.000000e+06
  %div79 = fdiv float %conv76, %mul
  %conv.i387 = fpext float %div79 to double
  %call.i388 = tail call i8* @halide_double_to_string(i8* %sstr.sroa.19.3.lcssa, i8* %sstr.sroa.125.0, double %conv.i387, i32 0) #14
  %tobool.not.i390 = icmp eq i8* %call.i388, null
  br i1 %tobool.not.i390, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit, label %if.then.i393

if.then.i393:                                     ; preds = %while.end
  %add.ptr.i391 = getelementptr inbounds i8, i8* %call.i388, i64 -3
  %cmp.i = icmp ult i8* %add.ptr.i391, %call.i
  %spec.store.select.i = select i1 %cmp.i, i8* %call.i, i8* %add.ptr.i391
  store i8 0, i8* %spec.store.select.i, align 1, !tbaa !18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit: ; preds = %if.then.i393, %while.end
  %sstr.sroa.19.4 = phi i8* [ null, %while.end ], [ %spec.store.select.i, %if.then.i393 ]
  %call.i399 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.4, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.21.178, i64 0, i64 0)) #14
  %sub.ptr.lhs.cast.i400596 = ptrtoint i8* %call.i399 to i64
  %sub.ptr.sub.i402597 = sub i64 %sub.ptr.lhs.cast.i400596, %sub.ptr.rhs.cast.i.i348
  %cmp85598 = icmp ult i64 %sub.ptr.sub.i402597, 35
  br i1 %cmp85598, label %while.body86, label %while.end88

while.body86:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit, %while.body86
  %sstr.sroa.19.5599 = phi i8* [ %call.i408, %while.body86 ], [ %call.i399, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit ]
  %call.i408 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.5599, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #14
  %sub.ptr.lhs.cast.i400 = ptrtoint i8* %call.i408 to i64
  %sub.ptr.sub.i402 = sub i64 %sub.ptr.lhs.cast.i400, %sub.ptr.rhs.cast.i.i348
  %cmp85 = icmp ult i64 %sub.ptr.sub.i402, 35
  br i1 %cmp85, label %while.body86, label %while.end88, !llvm.loop !358

while.end88:                                      ; preds = %while.body86, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit
  %sstr.sroa.19.5.lcssa = phi i8* [ %call.i399, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit ], [ %call.i408, %while.body86 ]
  %28 = load i64, i64* %time, align 8, !tbaa !340
  %cmp90.not = icmp eq i64 %28, 0
  br i1 %cmp90.not, label %if.end97, label %if.then91

if.then91:                                        ; preds = %while.end88
  %29 = load i64, i64* %time75, align 8, !tbaa !355
  %mul93 = mul i64 %29, 100
  %div95 = udiv i64 %mul93, %28
  br label %if.end97

if.end97:                                         ; preds = %if.then91, %while.end88
  %percent.0 = phi i64 [ %div95, %if.then91 ], [ 0, %while.end88 ]
  %call.i411 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.5.lcssa, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.22.179, i64 0, i64 0)) #14
  %sext = shl i64 %percent.0, 32
  %conv.i414 = ashr exact i64 %sext, 32
  %call.i415 = tail call i8* @halide_int64_to_string(i8* %call.i411, i8* %sstr.sroa.125.0, i64 %conv.i414, i32 1) #14
  %call.i418 = tail call i8* @halide_string_to_string(i8* %call.i415, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.23.180, i64 0, i64 0)) #14
  %sub.ptr.lhs.cast.i419601 = ptrtoint i8* %call.i418 to i64
  %sub.ptr.sub.i421602 = sub i64 %sub.ptr.lhs.cast.i419601, %sub.ptr.rhs.cast.i.i348
  %cmp104603 = icmp ult i64 %sub.ptr.sub.i421602, 43
  br i1 %cmp104603, label %while.body105, label %while.end107

while.body105:                                    ; preds = %if.end97, %while.body105
  %sstr.sroa.19.6604 = phi i8* [ %call.i427, %while.body105 ], [ %call.i418, %if.end97 ]
  %call.i427 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.6604, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #14
  %sub.ptr.lhs.cast.i419 = ptrtoint i8* %call.i427 to i64
  %sub.ptr.sub.i421 = sub i64 %sub.ptr.lhs.cast.i419, %sub.ptr.rhs.cast.i.i348
  %cmp104 = icmp ult i64 %sub.ptr.sub.i421, 43
  br i1 %cmp104, label %while.body105, label %while.end107, !llvm.loop !359

while.end107:                                     ; preds = %while.body105, %if.end97
  %sstr.sroa.19.6.lcssa = phi i8* [ %call.i418, %if.end97 ], [ %call.i427, %while.body105 ]
  br i1 %10, label %if.end127, label %if.then109

if.then109:                                       ; preds = %while.end107
  %active_threads_numerator111 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 5
  %30 = load i64, i64* %active_threads_numerator111, align 8, !tbaa !360
  %conv112 = uitofp i64 %30 to double
  %active_threads_denominator113 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 6
  %31 = load i64, i64* %active_threads_denominator113, align 8, !tbaa !361
  %conv114 = uitofp i64 %31 to double
  %add115 = fadd double %conv114, 1.000000e-10
  %div116 = fdiv double %conv112, %add115
  %conv117 = fptrunc double %div116 to float
  %call.i430 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.6.lcssa, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.24.181, i64 0, i64 0)) #14
  %conv.i433 = fpext float %conv117 to double
  %call.i434 = tail call i8* @halide_double_to_string(i8* %call.i430, i8* %sstr.sroa.125.0, double %conv.i433, i32 0) #14
  %tobool.not.i436 = icmp eq i8* %call.i434, null
  br i1 %tobool.not.i436, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442, label %if.then.i441

if.then.i441:                                     ; preds = %if.then109
  %add.ptr.i437 = getelementptr inbounds i8, i8* %call.i434, i64 -3
  %cmp.i439 = icmp ult i8* %add.ptr.i437, %call.i
  %spec.store.select.i440 = select i1 %cmp.i439, i8* %call.i, i8* %add.ptr.i437
  store i8 0, i8* %spec.store.select.i440, align 1, !tbaa !18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442: ; preds = %if.then.i441, %if.then109
  %sstr.sroa.19.7 = phi i8* [ null, %if.then109 ], [ %spec.store.select.i440, %if.then.i441 ]
  %sub.ptr.lhs.cast.i447606 = ptrtoint i8* %sstr.sroa.19.7 to i64
  %sub.ptr.sub.i449607 = sub i64 %sub.ptr.lhs.cast.i447606, %sub.ptr.rhs.cast.i.i348
  %cmp123608 = icmp ult i64 %sub.ptr.sub.i449607, 58
  br i1 %cmp123608, label %while.body124, label %if.end127

while.body124:                                    ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442, %while.body124
  %sstr.sroa.19.8609 = phi i8* [ %call.i455, %while.body124 ], [ %sstr.sroa.19.7, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442 ]
  %call.i455 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.8609, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #14
  %sub.ptr.lhs.cast.i447 = ptrtoint i8* %call.i455 to i64
  %sub.ptr.sub.i449 = sub i64 %sub.ptr.lhs.cast.i447, %sub.ptr.rhs.cast.i.i348
  %cmp123 = icmp ult i64 %sub.ptr.sub.i449, 58
  br i1 %cmp123, label %while.body124, label %if.end127, !llvm.loop !362

if.end127:                                        ; preds = %while.body124, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442, %while.end107
  %sstr.sroa.19.9 = phi i8* [ %sstr.sroa.19.6.lcssa, %while.end107 ], [ %sstr.sroa.19.7, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442 ], [ %call.i455, %while.body124 ]
  %cursor.0 = phi i64 [ 58, %while.end107 ], [ 73, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442 ], [ 73, %while.body124 ]
  %memory_peak128 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 2
  %32 = load i64, i64* %memory_peak128, align 8, !tbaa !363
  %tobool129.not = icmp eq i64 %32, 0
  br i1 %tobool129.not, label %if.end162, label %if.then130

if.then130:                                       ; preds = %if.end127
  %call.i458 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.9, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.25.182, i64 0, i64 0)) #14
  %33 = load i64, i64* %memory_peak128, align 8, !tbaa !363
  %call.i461 = tail call i8* @halide_uint64_to_string(i8* %call.i458, i8* %sstr.sroa.125.0, i64 %33, i32 1) #14
  %sub.ptr.lhs.cast.i462611 = ptrtoint i8* %call.i461 to i64
  %sub.ptr.sub.i464612 = sub i64 %sub.ptr.lhs.cast.i462611, %sub.ptr.rhs.cast.i.i348
  %cmp137613 = icmp ult i64 %sub.ptr.sub.i464612, %cursor.0
  br i1 %cmp137613, label %while.body138, label %while.end140

while.body138:                                    ; preds = %if.then130, %while.body138
  %sstr.sroa.19.10614 = phi i8* [ %call.i470, %while.body138 ], [ %call.i461, %if.then130 ]
  %call.i470 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.10614, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #14
  %sub.ptr.lhs.cast.i462 = ptrtoint i8* %call.i470 to i64
  %sub.ptr.sub.i464 = sub i64 %sub.ptr.lhs.cast.i462, %sub.ptr.rhs.cast.i.i348
  %cmp137 = icmp ult i64 %sub.ptr.sub.i464, %cursor.0
  br i1 %cmp137, label %while.body138, label %while.end140, !llvm.loop !364

while.end140:                                     ; preds = %while.body138, %if.then130
  %sstr.sroa.19.10.lcssa = phi i8* [ %call.i461, %if.then130 ], [ %call.i470, %while.body138 ]
  %call.i473 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.10.lcssa, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.26.183, i64 0, i64 0)) #14
  %num_allocs142 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 8
  %34 = load i32, i32* %num_allocs142, align 8, !tbaa !365
  %conv.i476 = sext i32 %34 to i64
  %call.i477 = tail call i8* @halide_int64_to_string(i8* %call.i473, i8* %sstr.sroa.125.0, i64 %conv.i476, i32 1) #14
  %add144 = add nuw nsw i64 %cursor.0, 15
  %sub.ptr.lhs.cast.i478616 = ptrtoint i8* %call.i477 to i64
  %sub.ptr.sub.i480617 = sub i64 %sub.ptr.lhs.cast.i478616, %sub.ptr.rhs.cast.i.i348
  %cmp147618 = icmp ult i64 %sub.ptr.sub.i480617, %add144
  br i1 %cmp147618, label %while.body148, label %while.end150

while.body148:                                    ; preds = %while.end140, %while.body148
  %sstr.sroa.19.11619 = phi i8* [ %call.i467, %while.body148 ], [ %call.i477, %while.end140 ]
  %call.i467 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.11619, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #14
  %sub.ptr.lhs.cast.i478 = ptrtoint i8* %call.i467 to i64
  %sub.ptr.sub.i480 = sub i64 %sub.ptr.lhs.cast.i478, %sub.ptr.rhs.cast.i.i348
  %cmp147 = icmp ult i64 %sub.ptr.sub.i480, %add144
  br i1 %cmp147, label %while.body148, label %while.end150, !llvm.loop !366

while.end150:                                     ; preds = %while.body148, %while.end140
  %sstr.sroa.19.11.lcssa = phi i8* [ %call.i477, %while.end140 ], [ %call.i467, %while.body148 ]
  %35 = load i32, i32* %num_allocs142, align 8, !tbaa !365
  %cmp152.not = icmp eq i32 %35, 0
  br i1 %cmp152.not, label %if.end159, label %if.then153

if.then153:                                       ; preds = %while.end150
  %memory_total154 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 3
  %36 = load i64, i64* %memory_total154, align 8, !tbaa !367
  %conv156 = sext i32 %35 to i64
  %div157 = udiv i64 %36, %conv156
  br label %if.end159

if.end159:                                        ; preds = %if.then153, %while.end150
  %alloc_avg.0 = phi i64 [ %div157, %if.then153 ], [ 0, %while.end150 ]
  %call.i452 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.11.lcssa, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.27.184, i64 0, i64 0)) #14
  %sext586 = shl i64 %alloc_avg.0, 32
  %conv.i445 = ashr exact i64 %sext586, 32
  %call.i446 = tail call i8* @halide_int64_to_string(i8* %call.i452, i8* %sstr.sroa.125.0, i64 %conv.i445, i32 1) #14
  br label %if.end162

if.end162:                                        ; preds = %if.end159, %if.end127
  %sstr.sroa.19.12 = phi i8* [ %sstr.sroa.19.9, %if.end127 ], [ %call.i446, %if.end159 ]
  %stack_peak163 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 4
  %37 = load i64, i64* %stack_peak163, align 8, !tbaa !353
  %cmp164.not = icmp eq i64 %37, 0
  br i1 %cmp164.not, label %if.end169, label %if.then165

if.then165:                                       ; preds = %if.end162
  %call.i424 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.12, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.28.185, i64 0, i64 0)) #14
  %38 = load i64, i64* %stack_peak163, align 8, !tbaa !353
  %call.i405 = tail call i8* @halide_uint64_to_string(i8* %call.i424, i8* %sstr.sroa.125.0, i64 %38, i32 1) #14
  br label %if.end169

if.end169:                                        ; preds = %if.then165, %if.end162
  %sstr.sroa.19.13 = phi i8* [ %sstr.sroa.19.12, %if.end162 ], [ %call.i405, %if.then165 ]
  %call.i396 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.13, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #14
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit381, label %if.then.i379

if.then.i379:                                     ; preds = %if.end169
  %sub.ptr.lhs.cast.i.i374 = ptrtoint i8* %call.i396 to i64
  %add.i.i377 = add i64 %sub.ptr.sub.i.i349, %sub.ptr.lhs.cast.i.i374
  %call.i.i378 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i377) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit381

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit381: ; preds = %if.then.i379, %if.end169
  %retval.0.i380 = phi i8* [ %call.i, %if.then.i379 ], [ getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0), %if.end169 ]
  tail call void @halide_print(i8* %user_context, i8* nonnull %retval.0.i380) #14
  br label %cleanup172

cleanup172:                                       ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit381, %land.lhs.true
  %sstr.sroa.19.14 = phi i8* [ %call.i, %land.lhs.true ], [ %call.i396, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit381 ]
  %indvars.iv.next631 = add nuw nsw i64 %indvars.iv630, 1
  %39 = load i32, i32* %num_funcs54, align 8, !tbaa !350
  %40 = sext i32 %39 to i64
  %cmp55 = icmp slt i64 %indvars.iv.next631, %40
  br i1 %cmp55, label %for.body57, label %cleanup181, !llvm.loop !368

cleanup181:                                       ; preds = %for.cond41, %cleanup172, %for.cond53.preheader, %for.cond41.preheader, %for.body
  %sstr.sroa.19.15 = phi i8* [ %sstr.sroa.19.0626, %for.body ], [ %call.i344, %for.cond53.preheader ], [ %call.i344, %for.cond41.preheader ], [ %sstr.sroa.19.14, %cleanup172 ], [ %call.i344, %for.cond41 ]
  %next = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 8
  %41 = bitcast i8** %next to %struct.halide_profiler_pipeline_stats**
  %p.0 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %41, align 8, !tbaa !14
  %tobool.not = icmp eq %struct.halide_profiler_pipeline_stats* %p.0, null
  br i1 %tobool.not, label %for.cond.cleanup, label %for.body, !llvm.loop !369
}

; Function Attrs: nounwind mustprogress
define weak void @halide_profiler_reset_unlocked(%struct.halide_profiler_state* %s) local_unnamed_addr #0 {
entry:
  %pipelines = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 5
  %0 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !370
  %tobool.not9 = icmp eq %struct.halide_profiler_pipeline_stats* %0, null
  br i1 %tobool.not9, label %while.end, label %while.body

while.body:                                       ; preds = %entry, %while.body
  %1 = phi %struct.halide_profiler_pipeline_stats* [ %7, %while.body ], [ %0, %entry ]
  %next = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %1, i64 0, i32 8
  %2 = bitcast i8** %next to %struct.halide_profiler_pipeline_stats**
  %3 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %2, align 8, !tbaa !371
  store %struct.halide_profiler_pipeline_stats* %3, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !370
  %funcs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %1, i64 0, i32 7
  %4 = bitcast %struct.halide_profiler_func_stats** %funcs to i8**
  %5 = load i8*, i8** %4, align 8, !tbaa !351
  tail call void @free(i8* %5) #14
  %6 = bitcast %struct.halide_profiler_pipeline_stats* %1 to i8*
  tail call void @free(i8* nonnull %6) #14
  %7 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !370
  %tobool.not = icmp eq %struct.halide_profiler_pipeline_stats* %7, null
  br i1 %tobool.not, label %while.end, label %while.body, !llvm.loop !372

while.end:                                        ; preds = %while.body, %entry
  %first_free_id = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 2
  store i32 0, i32* %first_free_id, align 4, !tbaa !373
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce %struct.halide_profiler_pipeline_stats* @_ZN6Halide7Runtime8Internal23find_or_create_pipelineEPKciPKy(i8* %pipeline_name, i32 %num_funcs, i64* %func_names) local_unnamed_addr #0 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #15
  %pipelines = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 5
  %p.0121 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !14
  %tobool.not122 = icmp eq %struct.halide_profiler_pipeline_stats* %p.0121, null
  br i1 %tobool.not122, label %for.end, label %for.body

for.body:                                         ; preds = %entry, %for.inc
  %p.0123 = phi %struct.halide_profiler_pipeline_stats* [ %p.0, %for.inc ], [ %p.0121, %entry ]
  %name = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0123, i64 0, i32 6
  %0 = load i8*, i8** %name, align 8, !tbaa !345
  %cmp = icmp eq i8* %0, %pipeline_name
  br i1 %cmp, label %land.lhs.true, label %for.inc

land.lhs.true:                                    ; preds = %for.body
  %num_funcs1 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0123, i64 0, i32 9
  %1 = load i32, i32* %num_funcs1, align 8, !tbaa !350
  %cmp2 = icmp eq i32 %1, %num_funcs
  br i1 %cmp2, label %cleanup62, label %for.inc

for.inc:                                          ; preds = %land.lhs.true, %for.body
  %next = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0123, i64 0, i32 8
  %2 = bitcast i8** %next to %struct.halide_profiler_pipeline_stats**
  %p.0 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %2, align 8, !tbaa !14
  %tobool.not = icmp eq %struct.halide_profiler_pipeline_stats* %p.0, null
  br i1 %tobool.not, label %for.end, label %for.body, !llvm.loop !374

for.end:                                          ; preds = %for.inc, %entry
  %call4 = tail call i8* @malloc(i64 96) #14
  %3 = bitcast i8* %call4 to %struct.halide_profiler_pipeline_stats*
  %tobool5.not = icmp eq i8* %call4, null
  br i1 %tobool5.not, label %cleanup62, label %if.end7

if.end7:                                          ; preds = %for.end
  %4 = bitcast %struct.halide_profiler_pipeline_stats** %pipelines to i8**
  %5 = load i8*, i8** %4, align 8, !tbaa !370
  %next9 = getelementptr inbounds i8, i8* %call4, i64 64
  %6 = bitcast i8* %next9 to i8**
  store i8* %5, i8** %6, align 8, !tbaa !371
  %name10 = getelementptr inbounds i8, i8* %call4, i64 48
  %7 = bitcast i8* %name10 to i8**
  store i8* %pipeline_name, i8** %7, align 8, !tbaa !345
  %first_free_id = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 2
  %8 = load i32, i32* %first_free_id, align 4, !tbaa !373
  %first_func_id = getelementptr inbounds i8, i8* %call4, i64 76
  %9 = bitcast i8* %first_func_id to i32*
  store i32 %8, i32* %9, align 4, !tbaa !375
  %num_funcs11 = getelementptr inbounds i8, i8* %call4, i64 72
  %10 = bitcast i8* %num_funcs11 to i32*
  store i32 %num_funcs, i32* %10, align 8, !tbaa !350
  %runs = getelementptr inbounds i8, i8* %call4, i64 80
  %11 = bitcast i8* %runs to <2 x i32>*
  store <2 x i32> zeroinitializer, <2 x i32>* %11, align 8, !tbaa !41
  %12 = bitcast i8* %call4 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %12, align 8, !tbaa !22
  %memory_peak = getelementptr inbounds i8, i8* %call4, i64 16
  %13 = bitcast i8* %memory_peak to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %13, align 8, !tbaa !22
  %num_allocs = getelementptr inbounds i8, i8* %call4, i64 88
  %14 = bitcast i8* %num_allocs to i32*
  store i32 0, i32* %14, align 8, !tbaa !347
  %active_threads_numerator = getelementptr inbounds i8, i8* %call4, i64 32
  %15 = bitcast i8* %active_threads_numerator to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %15, align 8, !tbaa !22
  %conv = sext i32 %num_funcs to i64
  %mul = mul nsw i64 %conv, 72
  %call12 = tail call i8* @malloc(i64 %mul) #14
  %funcs = getelementptr inbounds i8, i8* %call4, i64 56
  %16 = bitcast i8* %funcs to i8**
  store i8* %call12, i8** %16, align 8, !tbaa !351
  %tobool14.not = icmp eq i8* %call12, null
  %17 = bitcast i8* %call12 to %struct.halide_profiler_func_stats*
  br i1 %tobool14.not, label %if.then15, label %for.cond17.preheader

for.cond17.preheader:                             ; preds = %if.end7
  %cmp18119 = icmp sgt i32 %num_funcs, 0
  br i1 %cmp18119, label %for.body20.lr.ph, label %for.cond.cleanup19

for.body20.lr.ph:                                 ; preds = %for.cond17.preheader
  %wide.trip.count = zext i32 %num_funcs to i64
  br label %for.body20

if.then15:                                        ; preds = %if.end7
  tail call void @free(i8* nonnull %call4) #14
  br label %cleanup62

for.cond.cleanup19:                               ; preds = %for.body20, %for.cond17.preheader
  %18 = load i32, i32* %first_free_id, align 4, !tbaa !373
  %add = add nsw i32 %18, %num_funcs
  store i32 %add, i32* %first_free_id, align 4, !tbaa !373
  store i8* %call4, i8** %4, align 8, !tbaa !370
  br label %cleanup62

for.body20:                                       ; preds = %for.body20, %for.body20.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body20.lr.ph ], [ %indvars.iv.next, %for.body20 ]
  %time22 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv, i32 0
  store i64 0, i64* %time22, align 8, !tbaa !355
  %arrayidx24 = getelementptr inbounds i64, i64* %func_names, i64 %indvars.iv
  %19 = load i64, i64* %arrayidx24, align 8, !tbaa !22
  %20 = inttoptr i64 %19 to i8*
  %name28 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv, i32 7
  store i8* %20, i8** %name28, align 8, !tbaa !356
  %memory_current32 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv, i32 1
  %21 = bitcast i64* %memory_current32 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %21, align 8, !tbaa !22
  %memory_total40 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv, i32 3
  %num_allocs44 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv, i32 8
  store i32 0, i32* %num_allocs44, align 8, !tbaa !365
  %22 = bitcast i64* %memory_total40 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %22, align 8, !tbaa !22
  %active_threads_numerator51 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv, i32 5
  %23 = bitcast i64* %active_threads_numerator51 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %23, align 8, !tbaa !22
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.cleanup19, label %for.body20, !llvm.loop !376

cleanup62:                                        ; preds = %land.lhs.true, %for.cond.cleanup19, %if.then15, %for.end
  %retval.2 = phi %struct.halide_profiler_pipeline_stats* [ %3, %for.cond.cleanup19 ], [ null, %if.then15 ], [ null, %for.end ], [ %p.0123, %land.lhs.true ]
  ret %struct.halide_profiler_pipeline_stats* %retval.2
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal9bill_funcEP21halide_profiler_stateiyi(%struct.halide_profiler_state* %s, i32 %func_id, i64 %time, i32 %active_threads) local_unnamed_addr #0 {
entry:
  %pipelines = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 5
  %p.055 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !14
  %tobool.not56 = icmp eq %struct.halide_profiler_pipeline_stats* %p.055, null
  br i1 %tobool.not56, label %cleanup25, label %for.body

for.body:                                         ; preds = %entry, %if.end23
  %p.058 = phi %struct.halide_profiler_pipeline_stats* [ %p.0, %if.end23 ], [ %p.055, %entry ]
  %p_prev.057 = phi %struct.halide_profiler_pipeline_stats* [ %p.058, %if.end23 ], [ null, %entry ]
  %first_func_id = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 10
  %0 = load i32, i32* %first_func_id, align 4, !tbaa !375
  %cmp.not = icmp sgt i32 %0, %func_id
  br i1 %cmp.not, label %if.end23, label %land.lhs.true

land.lhs.true:                                    ; preds = %for.body
  %num_funcs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 9
  %1 = load i32, i32* %num_funcs, align 8, !tbaa !350
  %add = add nsw i32 %1, %0
  %cmp2 = icmp sgt i32 %add, %func_id
  br i1 %cmp2, label %if.then, label %if.end23

if.then:                                          ; preds = %land.lhs.true
  %tobool3.not = icmp eq %struct.halide_profiler_pipeline_stats* %p_prev.057, null
  br i1 %tobool3.not, label %if.end, label %if.then4

if.then4:                                         ; preds = %if.then
  %next = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 8
  %2 = load i8*, i8** %next, align 8, !tbaa !371
  %next5 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p_prev.057, i64 0, i32 8
  store i8* %2, i8** %next5, align 8, !tbaa !371
  %3 = bitcast i8** %next to %struct.halide_profiler_pipeline_stats**
  store %struct.halide_profiler_pipeline_stats* %p.055, %struct.halide_profiler_pipeline_stats** %3, align 8, !tbaa !371
  store %struct.halide_profiler_pipeline_stats* %p.058, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !370
  br label %if.end

if.end:                                           ; preds = %if.then4, %if.then
  %funcs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 7
  %4 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %funcs, align 8, !tbaa !351
  %idx.ext = sext i32 %func_id to i64
  %add.ptr = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %4, i64 %idx.ext
  %idx.ext10 = sext i32 %0 to i64
  %idx.neg = sub nsw i64 0, %idx.ext10
  %add.ptr11 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %add.ptr, i64 %idx.neg
  %time12 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %add.ptr11, i64 0, i32 0
  %5 = load i64, i64* %time12, align 8, !tbaa !355
  %add13 = add i64 %5, %time
  store i64 %add13, i64* %time12, align 8, !tbaa !355
  %conv = sext i32 %active_threads to i64
  %active_threads_numerator = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %add.ptr11, i64 0, i32 5
  %6 = load i64, i64* %active_threads_numerator, align 8, !tbaa !360
  %add14 = add i64 %6, %conv
  store i64 %add14, i64* %active_threads_numerator, align 8, !tbaa !360
  %active_threads_denominator = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %add.ptr11, i64 0, i32 6
  %7 = load i64, i64* %active_threads_denominator, align 8, !tbaa !361
  %add15 = add i64 %7, 1
  store i64 %add15, i64* %active_threads_denominator, align 8, !tbaa !361
  %time16 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 0
  %8 = load i64, i64* %time16, align 8, !tbaa !340
  %add17 = add i64 %8, %time
  store i64 %add17, i64* %time16, align 8, !tbaa !340
  %samples = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 12
  %9 = load i32, i32* %samples, align 4, !tbaa !346
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %samples, align 4, !tbaa !346
  %active_threads_numerator19 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 4
  %10 = load i64, i64* %active_threads_numerator19, align 8, !tbaa !343
  %add20 = add i64 %10, %conv
  store i64 %add20, i64* %active_threads_numerator19, align 8, !tbaa !343
  %active_threads_denominator21 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 5
  %11 = load i64, i64* %active_threads_denominator21, align 8, !tbaa !344
  %add22 = add i64 %11, 1
  store i64 %add22, i64* %active_threads_denominator21, align 8, !tbaa !344
  ret void

if.end23:                                         ; preds = %land.lhs.true, %for.body
  %next24 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 8
  %12 = bitcast i8** %next24 to %struct.halide_profiler_pipeline_stats**
  %p.0 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %12, align 8, !tbaa !14
  %tobool.not = icmp eq %struct.halide_profiler_pipeline_stats* %p.0, null
  br i1 %tobool.not, label %cleanup25, label %for.body, !llvm.loop !377

cleanup25:                                        ; preds = %if.end23, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_profiler_sample(%struct.halide_profiler_state* %s, i64* %prev_t) local_unnamed_addr #0 {
entry:
  %func = alloca i32, align 4
  %active_threads = alloca i32, align 4
  %0 = bitcast i32* %func to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0) #11
  %1 = bitcast i32* %active_threads to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1) #11
  %get_remote_profiler_state = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 6
  %2 = load void (i32*, i32*)*, void (i32*, i32*)** %get_remote_profiler_state, align 8, !tbaa !378
  %tobool.not = icmp eq void (i32*, i32*)* %2, null
  br i1 %tobool.not, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  call void %2(i32* nonnull %func, i32* nonnull %active_threads) #14
  br label %if.end

if.else:                                          ; preds = %entry
  %current_func = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 3
  %3 = load i32, i32* %current_func, align 8, !tbaa !339
  store i32 %3, i32* %func, align 4, !tbaa !41
  %active_threads2 = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 4
  %4 = load i32, i32* %active_threads2, align 4, !tbaa !379
  store i32 %4, i32* %active_threads, align 4, !tbaa !41
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %call = call i64 @halide_current_time_ns(i8* null) #14
  %5 = load i32, i32* %func, align 4, !tbaa !41
  %cmp = icmp eq i32 %5, -2
  br i1 %cmp, label %cleanup, label %if.else4

if.else4:                                         ; preds = %if.end
  %cmp5 = icmp sgt i32 %5, -1
  br i1 %cmp5, label %if.then6, label %if.end8

if.then6:                                         ; preds = %if.else4
  %6 = load i64, i64* %prev_t, align 8, !tbaa !22
  %sub = sub i64 %call, %6
  %7 = load i32, i32* %active_threads, align 4, !tbaa !41
  call void @_ZN6Halide7Runtime8Internal9bill_funcEP21halide_profiler_stateiyi(%struct.halide_profiler_state* nonnull %s, i32 %5, i64 %sub, i32 %7) #15
  br label %if.end8

if.end8:                                          ; preds = %if.then6, %if.else4
  store i64 %call, i64* %prev_t, align 8, !tbaa !22
  %sleep_time = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 1
  %8 = load i32, i32* %sleep_time, align 8, !tbaa !380
  br label %cleanup

cleanup:                                          ; preds = %if.end8, %if.end
  %retval.0 = phi i32 [ %8, %if.end8 ], [ -1, %if.end ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0) #11
  ret i32 %retval.0
}

; Function Attrs: nounwind
define linkonce void @_ZN6Halide7Runtime8Internal24sampling_profiler_threadEPv(i8* %0) #4 {
entry:
  %t = alloca i64, align 8
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #15
  %lock = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 0
  tail call void @halide_mutex_lock(%struct.halide_mutex* %lock) #14
  %current_func = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 3
  %1 = load i32, i32* %current_func, align 8, !tbaa !339
  %cmp.not23 = icmp eq i32 %1, -2
  br i1 %cmp.not23, label %while.end8, label %while.body.lr.ph

while.body.lr.ph:                                 ; preds = %entry
  %2 = bitcast i64* %t to i8*
  br label %while.body

while.body:                                       ; preds = %while.end, %while.body.lr.ph
  %call1 = call i64 @halide_current_time_ns(i8* null) #14
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %2) #11
  store i64 %call1, i64* %t, align 8, !tbaa !22
  %call420 = call i32 @halide_profiler_sample(%struct.halide_profiler_state* nonnull %call, i64* nonnull %t) #15
  %cmp521 = icmp slt i32 %call420, 0
  br i1 %cmp521, label %while.end, label %if.end

if.end:                                           ; preds = %while.body, %if.end
  %call422 = phi i32 [ %call4, %if.end ], [ %call420, %while.body ]
  call void @halide_mutex_unlock(%struct.halide_mutex* %lock) #14
  call void @halide_sleep_ms(i8* null, i32 %call422) #14
  call void @halide_mutex_lock(%struct.halide_mutex* %lock) #14
  %call4 = call i32 @halide_profiler_sample(%struct.halide_profiler_state* %call, i64* nonnull %t) #15
  %cmp5 = icmp slt i32 %call4, 0
  br i1 %cmp5, label %while.end, label %if.end

while.end:                                        ; preds = %if.end, %while.body
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %2) #11
  %3 = load i32, i32* %current_func, align 8, !tbaa !339
  %cmp.not = icmp eq i32 %3, -2
  br i1 %cmp.not, label %while.end8, label %while.body, !llvm.loop !381

while.end8:                                       ; preds = %while.end, %entry
  call void @halide_mutex_unlock(%struct.halide_mutex* nonnull %lock) #14
  ret void
}

; Function Attrs: nounwind
define weak %struct.halide_profiler_pipeline_stats* @halide_profiler_get_pipeline_state(i8* %pipeline_name) local_unnamed_addr #4 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #15
  %lock.i = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 0
  tail call void @halide_mutex_lock(%struct.halide_mutex* %lock.i) #14
  %pipelines = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 5
  %p.013 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !14
  %tobool.not14 = icmp eq %struct.halide_profiler_pipeline_stats* %p.013, null
  br i1 %tobool.not14, label %cleanup, label %for.body

for.body:                                         ; preds = %entry, %for.inc
  %p.015 = phi %struct.halide_profiler_pipeline_stats* [ %p.0, %for.inc ], [ %p.013, %entry ]
  %name = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.015, i64 0, i32 6
  %0 = load i8*, i8** %name, align 8, !tbaa !345
  %cmp = icmp eq i8* %0, %pipeline_name
  br i1 %cmp, label %cleanup, label %for.inc

for.inc:                                          ; preds = %for.body
  %next = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.015, i64 0, i32 8
  %1 = bitcast i8** %next to %struct.halide_profiler_pipeline_stats**
  %p.0 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %1, align 8, !tbaa !14
  %tobool.not = icmp eq %struct.halide_profiler_pipeline_stats* %p.0, null
  br i1 %tobool.not, label %cleanup, label %for.body, !llvm.loop !382

cleanup:                                          ; preds = %for.inc, %for.body, %entry
  %p.0.lcssa = phi %struct.halide_profiler_pipeline_stats* [ null, %entry ], [ null, %for.inc ], [ %p.015, %for.body ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* %lock.i) #14
  ret %struct.halide_profiler_pipeline_stats* %p.0.lcssa
}

; Function Attrs: nounwind
define weak i32 @halide_profiler_pipeline_start(i8* %user_context, i8* %pipeline_name, i32 %num_funcs, i64* %func_names) local_unnamed_addr #4 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #15
  %lock.i = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 0
  tail call void @halide_mutex_lock(%struct.halide_mutex* %lock.i) #14
  %sampling_thread = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 7
  %0 = load %struct.halide_thread*, %struct.halide_thread** %sampling_thread, align 8, !tbaa !337
  %tobool.not = icmp eq %struct.halide_thread* %0, null
  br i1 %tobool.not, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call1 = tail call i32 @halide_start_clock(i8* %user_context) #14
  %call2 = tail call %struct.halide_thread* @halide_spawn_thread(void (i8*)* nonnull @_ZN6Halide7Runtime8Internal24sampling_profiler_threadEPv, i8* null) #14
  store %struct.halide_thread* %call2, %struct.halide_thread** %sampling_thread, align 8, !tbaa !337
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %call4 = tail call %struct.halide_profiler_pipeline_stats* @_ZN6Halide7Runtime8Internal23find_or_create_pipelineEPKciPKy(i8* %pipeline_name, i32 %num_funcs, i64* %func_names) #15
  %tobool5.not = icmp eq %struct.halide_profiler_pipeline_stats* %call4, null
  br i1 %tobool5.not, label %if.then6, label %if.end8

if.then6:                                         ; preds = %if.end
  %call7 = tail call i32 @halide_error_out_of_memory(i8* %user_context) #14
  br label %cleanup

if.end8:                                          ; preds = %if.end
  %runs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %call4, i64 0, i32 11
  %1 = load i32, i32* %runs, align 8, !tbaa !342
  %inc = add nsw i32 %1, 1
  store i32 %inc, i32* %runs, align 8, !tbaa !342
  %first_func_id = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %call4, i64 0, i32 10
  %2 = load i32, i32* %first_func_id, align 4, !tbaa !375
  br label %cleanup

cleanup:                                          ; preds = %if.end8, %if.then6
  %retval.0 = phi i32 [ %2, %if.end8 ], [ %call7, %if.then6 ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull %lock.i) #14
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak void @halide_profiler_stack_peak_update(i8* %user_context, i8* %pipeline_state, i64* %f_values) local_unnamed_addr #0 {
entry:
  %cmp.not = icmp eq i8* %pipeline_state, null
  br i1 %cmp.not, label %if.then, label %do.end

if.then:                                          ; preds = %entry
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @.str.186, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %do.end

do.end:                                           ; preds = %if.then, %entry
  %num_funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 72
  %0 = bitcast i8* %num_funcs to i32*
  %1 = load i32, i32* %0, align 8, !tbaa !350
  %cmp118 = icmp sgt i32 %1, 0
  br i1 %cmp118, label %for.body.lr.ph, label %for.cond.cleanup

for.body.lr.ph:                                   ; preds = %do.end
  %funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 56
  %2 = bitcast i8* %funcs to %struct.halide_profiler_func_stats**
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.inc, %do.end
  ret void

for.body:                                         ; preds = %for.inc, %for.body.lr.ph
  %3 = phi i32 [ %1, %for.body.lr.ph ], [ %9, %for.inc ]
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.inc ]
  %arrayidx = getelementptr inbounds i64, i64* %f_values, i64 %indvars.iv
  %4 = load i64, i64* %arrayidx, align 8, !tbaa !22
  %cmp2.not = icmp eq i64 %4, 0
  br i1 %cmp2.not, label %for.inc, label %if.then3

if.then3:                                         ; preds = %for.body
  %5 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %2, align 8, !tbaa !351
  %stack_peak = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %5, i64 %indvars.iv, i32 4
  %6 = load i64, i64* %stack_peak, align 8, !tbaa !22
  br label %while.cond.i

while.cond.i:                                     ; preds = %while.body.i, %if.then3
  %old_val.0.i = phi i64 [ %6, %if.then3 ], [ %8, %while.body.i ]
  %cmp.i = icmp ult i64 %old_val.0.i, %4
  br i1 %cmp.i, label %while.body.i, label %for.inc.loopexit

while.body.i:                                     ; preds = %while.cond.i
  %7 = cmpxchg i64* %stack_peak, i64 %old_val.0.i, i64 %4 seq_cst seq_cst
  %8 = extractvalue { i64, i1 } %7, 0
  %cmp1.i = icmp eq i64 %old_val.0.i, %8
  br i1 %cmp1.i, label %for.inc.loopexit, label %while.cond.i, !llvm.loop !383

for.inc.loopexit:                                 ; preds = %while.body.i, %while.cond.i
  %.pre = load i32, i32* %0, align 8, !tbaa !350
  br label %for.inc

for.inc:                                          ; preds = %for.inc.loopexit, %for.body
  %9 = phi i32 [ %.pre, %for.inc.loopexit ], [ %3, %for.body ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %10 = sext i32 %9 to i64
  %cmp1 = icmp slt i64 %indvars.iv.next, %10
  br i1 %cmp1, label %for.body, label %for.cond.cleanup, !llvm.loop !384
}

; Function Attrs: nounwind mustprogress
define weak void @halide_profiler_memory_allocate(i8* %user_context, i8* %pipeline_state, i32 %func_id, i64 %incr) local_unnamed_addr #0 {
entry:
  %cmp = icmp eq i64 %incr, 0
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %cmp1.not = icmp eq i8* %pipeline_state, null
  br i1 %cmp1.not, label %if.then2, label %do.body4

if.then2:                                         ; preds = %if.end
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @.str.1.187, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %do.body4

do.body4:                                         ; preds = %if.then2, %if.end
  %cmp5 = icmp sgt i32 %func_id, -1
  br i1 %cmp5, label %do.body10, label %if.then6

if.then6:                                         ; preds = %do.body4
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([122 x i8], [122 x i8]* @.str.2.188, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %do.body10

do.body10:                                        ; preds = %if.then6, %do.body4
  %num_funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 72
  %0 = bitcast i8* %num_funcs to i32*
  %1 = load i32, i32* %0, align 8, !tbaa !350
  %cmp11 = icmp sgt i32 %1, %func_id
  br i1 %cmp11, label %do.end15, label %if.then12

if.then12:                                        ; preds = %do.body10
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([138 x i8], [138 x i8]* @.str.3.189, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %do.end15

do.end15:                                         ; preds = %if.then12, %do.body10
  %funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 56
  %2 = bitcast i8* %funcs to %struct.halide_profiler_func_stats**
  %3 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %2, align 8, !tbaa !351
  %idxprom = sext i32 %func_id to i64
  %num_allocs = getelementptr inbounds i8, i8* %pipeline_state, i64 88
  %4 = bitcast i8* %num_allocs to i32*
  %5 = atomicrmw add i32* %4, i32 1 seq_cst
  %memory_total = getelementptr inbounds i8, i8* %pipeline_state, i64 24
  %6 = bitcast i8* %memory_total to i64*
  %7 = atomicrmw add i64* %6, i64 %incr seq_cst
  %memory_current = getelementptr inbounds i8, i8* %pipeline_state, i64 8
  %8 = bitcast i8* %memory_current to i64*
  %9 = atomicrmw add i64* %8, i64 %incr seq_cst
  %10 = add i64 %9, %incr
  %memory_peak = getelementptr inbounds i8, i8* %pipeline_state, i64 16
  %11 = bitcast i8* %memory_peak to i64*
  %12 = load i64, i64* %11, align 8, !tbaa !22
  br label %while.cond.i

while.cond.i:                                     ; preds = %while.body.i, %do.end15
  %old_val.0.i = phi i64 [ %12, %do.end15 ], [ %14, %while.body.i ]
  %cmp.i = icmp ult i64 %old_val.0.i, %10
  br i1 %cmp.i, label %while.body.i, label %_ZN12_GLOBAL__N_125sync_compare_max_and_swapIyEEvPT_S1_.exit

while.body.i:                                     ; preds = %while.cond.i
  %13 = cmpxchg i64* %11, i64 %old_val.0.i, i64 %10 seq_cst seq_cst
  %14 = extractvalue { i64, i1 } %13, 0
  %cmp1.i = icmp eq i64 %old_val.0.i, %14
  br i1 %cmp1.i, label %_ZN12_GLOBAL__N_125sync_compare_max_and_swapIyEEvPT_S1_.exit, label %while.cond.i, !llvm.loop !383

_ZN12_GLOBAL__N_125sync_compare_max_and_swapIyEEvPT_S1_.exit: ; preds = %while.body.i, %while.cond.i
  %num_allocs16 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %3, i64 %idxprom, i32 8
  %15 = atomicrmw add i32* %num_allocs16, i32 1 seq_cst
  %memory_total17 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %3, i64 %idxprom, i32 3
  %16 = atomicrmw add i64* %memory_total17, i64 %incr seq_cst
  %memory_current18 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %3, i64 %idxprom, i32 1
  %17 = atomicrmw add i64* %memory_current18, i64 %incr seq_cst
  %18 = add i64 %17, %incr
  %memory_peak19 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %3, i64 %idxprom, i32 2
  %19 = load i64, i64* %memory_peak19, align 8, !tbaa !22
  br label %while.cond.i43

while.cond.i43:                                   ; preds = %while.body.i45, %_ZN12_GLOBAL__N_125sync_compare_max_and_swapIyEEvPT_S1_.exit
  %old_val.0.i41 = phi i64 [ %19, %_ZN12_GLOBAL__N_125sync_compare_max_and_swapIyEEvPT_S1_.exit ], [ %21, %while.body.i45 ]
  %cmp.i42 = icmp ult i64 %old_val.0.i41, %18
  br i1 %cmp.i42, label %while.body.i45, label %return

while.body.i45:                                   ; preds = %while.cond.i43
  %20 = cmpxchg i64* %memory_peak19, i64 %old_val.0.i41, i64 %18 seq_cst seq_cst
  %21 = extractvalue { i64, i1 } %20, 0
  %cmp1.i44 = icmp eq i64 %old_val.0.i41, %21
  br i1 %cmp1.i44, label %return, label %while.cond.i43, !llvm.loop !383

return:                                           ; preds = %while.body.i45, %while.cond.i43, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define weak void @halide_profiler_memory_free(i8* %user_context, i8* %pipeline_state, i32 %func_id, i64 %decr) local_unnamed_addr #0 {
entry:
  %cmp = icmp eq i64 %decr, 0
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %cmp1.not = icmp eq i8* %pipeline_state, null
  br i1 %cmp1.not, label %if.then2, label %do.body4

if.then2:                                         ; preds = %if.end
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @.str.4.190, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %do.body4

do.body4:                                         ; preds = %if.then2, %if.end
  %cmp5 = icmp sgt i32 %func_id, -1
  br i1 %cmp5, label %do.body10, label %if.then6

if.then6:                                         ; preds = %do.body4
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([122 x i8], [122 x i8]* @.str.5.191, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %do.body10

do.body10:                                        ; preds = %if.then6, %do.body4
  %num_funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 72
  %0 = bitcast i8* %num_funcs to i32*
  %1 = load i32, i32* %0, align 8, !tbaa !350
  %cmp11 = icmp sgt i32 %1, %func_id
  br i1 %cmp11, label %do.end15, label %if.then12

if.then12:                                        ; preds = %do.body10
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([138 x i8], [138 x i8]* @.str.6.192, i64 0, i64 0)) #14
  tail call void @abort() #14
  br label %do.end15

do.end15:                                         ; preds = %if.then12, %do.body10
  %funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 56
  %2 = bitcast i8* %funcs to %struct.halide_profiler_func_stats**
  %3 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %2, align 8, !tbaa !351
  %idxprom = sext i32 %func_id to i64
  %memory_current = getelementptr inbounds i8, i8* %pipeline_state, i64 8
  %4 = bitcast i8* %memory_current to i64*
  %5 = atomicrmw sub i64* %4, i64 %decr seq_cst
  %memory_current16 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %3, i64 %idxprom, i32 1
  %6 = atomicrmw sub i64* %memory_current16, i64 %decr seq_cst
  br label %return

return:                                           ; preds = %do.end15, %entry
  ret void
}

; Function Attrs: nounwind
define weak void @halide_profiler_report(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #15
  %lock.i = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 0
  tail call void @halide_mutex_lock(%struct.halide_mutex* %lock.i) #14
  tail call void @halide_profiler_report_unlocked(i8* %user_context, %struct.halide_profiler_state* %call) #15
  tail call void @halide_mutex_unlock(%struct.halide_mutex* %lock.i) #14
  ret void
}

; Function Attrs: nounwind
define weak void @halide_profiler_reset() local_unnamed_addr #4 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #15
  %lock.i = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 0
  tail call void @halide_mutex_lock(%struct.halide_mutex* %lock.i) #14
  tail call void @halide_profiler_reset_unlocked(%struct.halide_profiler_state* %call) #15
  tail call void @halide_mutex_unlock(%struct.halide_mutex* %lock.i) #14
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_profiler_pipeline_end(i8* %user_context, i8* %state) local_unnamed_addr #2 {
entry:
  %current_func = getelementptr inbounds i8, i8* %state, i64 16
  %0 = bitcast i8* %current_func to i32*
  store i32 -1, i32* %0, align 8, !tbaa !339
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* %ptr, i64 %len) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_check_memory_is_initialized(i8* %user_context, i8* %ptr, i64 %len, i8* %name) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_check_buffer_is_initialized(i8* %user_context, %struct.halide_buffer_t* %b, i8* %buf_name) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_annotate_buffer_is_initialized(i8* %user_context, %struct.halide_buffer_t* %b) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_msan_annotate_buffer_is_initialized_as_destructor(i8* %user_context, i8* %b) local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_default_can_use_target_features(i32 %count, i64* %features) #4 {
entry:
  %tmp = alloca %"struct.Halide::Runtime::Internal::CpuFeatures", align 8
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal36halide_cpu_features_initialized_lockE) #14
  %0 = load i8, i8* @_ZN6Halide7Runtime8Internal31halide_cpu_features_initializedE, align 1, !tbaa !19, !range !21
  %tobool.not = icmp eq i8 %0, 0
  br i1 %tobool.not, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = bitcast %"struct.Halide::Runtime::Internal::CpuFeatures"* %tmp to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1) #11
  call void @_ZN6Halide7Runtime8Internal23halide_get_cpu_featuresEv(%"struct.Halide::Runtime::Internal::CpuFeatures"* nonnull sret(%"struct.Halide::Runtime::Internal::CpuFeatures") align 8 %tmp) #14
  %call = call i8* @memcpy(i8* bitcast ([4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE to i8*), i8* nonnull %1, i64 32) #14
  store i8 1, i8* @_ZN6Halide7Runtime8Internal31halide_cpu_features_initializedE, align 1, !tbaa !19
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1) #11
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal36halide_cpu_features_initialized_lockE) #14
  %cmp.not = icmp eq i32 %count, 2
  br i1 %cmp.not, label %if.end2, label %if.then1

if.then1:                                         ; preds = %if.end
  call void @halide_error(i8* null, i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.197, i64 0, i64 0)) #14
  br label %if.end2

if.end2:                                          ; preds = %if.then1, %if.end
  %2 = load i64, i64* %features, align 8, !tbaa !22
  %3 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i64 0, i64 0), align 8, !tbaa !22
  %and = and i64 %3, %2
  %cmp6.not = icmp eq i64 %and, 0
  br i1 %cmp6.not, label %for.inc.critedge, label %if.then7

if.then7:                                         ; preds = %if.end2
  %4 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i64 0, i64 2), align 8, !tbaa !22
  %and10 = and i64 %4, %and
  %cmp11.not = icmp eq i64 %and10, %and
  br i1 %cmp11.not, label %for.inc.critedge, label %cleanup15

for.inc.critedge:                                 ; preds = %if.then7, %if.end2
  %arrayidx.1 = getelementptr inbounds i64, i64* %features, i64 1
  %5 = load i64, i64* %arrayidx.1, align 8, !tbaa !22
  %6 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i64 0, i64 1), align 8, !tbaa !22
  %and.1 = and i64 %6, %5
  %cmp6.not.1 = icmp eq i64 %and.1, 0
  br i1 %cmp6.not.1, label %for.inc.critedge.1, label %if.then7.1

cleanup15:                                        ; preds = %for.inc.critedge.1, %if.then7.1, %if.then7
  %cmp3.lcssa = phi i32 [ 0, %if.then7 ], [ 0, %if.then7.1 ], [ 1, %for.inc.critedge.1 ]
  ret i32 %cmp3.lcssa

if.then7.1:                                       ; preds = %for.inc.critedge
  %7 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i64 0, i64 3), align 8, !tbaa !22
  %and10.1 = and i64 %7, %and.1
  %cmp11.not.1 = icmp eq i64 %and10.1, %and.1
  br i1 %cmp11.not.1, label %for.inc.critedge.1, label %cleanup15

for.inc.critedge.1:                               ; preds = %if.then7.1, %for.inc.critedge
  br label %cleanup15
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i32, i64*)* @halide_set_custom_can_use_target_features(i32 (i32, i64*)* %fn) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i32, i64*)*, i32 (i32, i64*)** @_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE, align 8, !tbaa !14
  store i32 (i32, i64*)* %fn, i32 (i32, i64*)** @_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE, align 8, !tbaa !14
  ret i32 (i32, i64*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_can_use_target_features(i32 %count, i64* %features) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i32, i64*)*, i32 (i32, i64*)** @_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE, align 8, !tbaa !14
  %call = tail call i32 %0(i32 %count, i64* %features) #14
  ret i32 %call
}

; Function Attrs: nounwind willreturn
define linkonce void @_ZN6Halide7Runtime8Internal23halide_get_cpu_featuresEv(%"struct.Halide::Runtime::Internal::CpuFeatures"* noalias sret(%"struct.Halide::Runtime::Internal::CpuFeatures") align 8 %agg.result) local_unnamed_addr #8 {
entry:
  %arrayidx3.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::CpuFeatures", %"struct.Halide::Runtime::Internal::CpuFeatures"* %agg.result, i64 0, i32 1, i64 0
  %0 = bitcast %"struct.Halide::Runtime::Internal::CpuFeatures"* %agg.result to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %0, align 8, !tbaa !22
  %1 = bitcast i64* %arrayidx3.i to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %1, align 8, !tbaa !22
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_use_jit_module() local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_release_jit_module() local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nofree nosync nounwind readnone willreturn
declare <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16>, <4 x i16>) #9

; Function Attrs: nofree nosync nounwind readnone willreturn
declare <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16>, <8 x i16>) #9

; Function Attrs: nofree nosync nounwind readnone willreturn
declare <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32>, <4 x i32>) #9

; Function Attrs: nofree nosync nounwind readnone willreturn
declare <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32>, <4 x i32>) #9

; Function Attrs: nofree nosync nounwind readnone willreturn
declare <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32>, i32) #9

; Function Attrs: nounwind
define i32 @blur7x7_par_for_blur_y_s0_y_y(i8* %__user_context, i32 %blur_y.s0.y.y, i8* nocapture readonly %closure_arg) #10 {
entry:
  %0 = bitcast i8* %closure_arg to i8**
  %blur_y = load i8*, i8** %0, align 8
  %1 = getelementptr inbounds i8, i8* %closure_arg, i64 8
  %2 = bitcast i8* %1 to i8**
  %input = load i8*, i8** %2, align 8
  %3 = getelementptr inbounds i8, i8* %closure_arg, i64 16
  %4 = bitcast i8* %3 to i32*
  %blur_y.extent.0 = load i32, i32* %4, align 4
  %5 = getelementptr inbounds i8, i8* %closure_arg, i64 20
  %6 = bitcast i8* %5 to i32*
  %blur_y.extent.1 = load i32, i32* %6, align 4
  %7 = getelementptr inbounds i8, i8* %closure_arg, i64 24
  %8 = bitcast i8* %7 to i32*
  %blur_y.stride.1 = load i32, i32* %8, align 4
  %9 = getelementptr inbounds i8, i8* %closure_arg, i64 28
  %10 = bitcast i8* %9 to i32*
  %input.extent.0 = load i32, i32* %10, align 4
  %11 = getelementptr inbounds i8, i8* %closure_arg, i64 32
  %12 = bitcast i8* %11 to i32*
  %b11 = load i32, i32* %12, align 4
  %13 = getelementptr inbounds i8, i8* %closure_arg, i64 36
  %14 = bitcast i8* %13 to i32*
  %input.stride.1 = load i32, i32* %14, align 4
  %15 = getelementptr inbounds i8, i8* %closure_arg, i64 40
  %16 = bitcast i8* %15 to i32*
  %t251 = load i32, i32* %16, align 4
  %17 = getelementptr inbounds i8, i8* %closure_arg, i64 44
  %18 = bitcast i8* %17 to i32*
  %a8 = load i32, i32* %18, align 4
  %19 = getelementptr inbounds i8, i8* %closure_arg, i64 48
  %20 = bitcast i8* %19 to i32*
  %t254 = load i32, i32* %20, align 4
  %21 = getelementptr inbounds i8, i8* %closure_arg, i64 52
  %22 = bitcast i8* %21 to i32*
  %t261 = load i32, i32* %22, align 4
  %23 = getelementptr inbounds i8, i8* %closure_arg, i64 56
  %24 = bitcast i8* %23 to i32*
  %t262 = load i32, i32* %24, align 4
  %25 = getelementptr inbounds i8, i8* %closure_arg, i64 60
  %26 = bitcast i8* %25 to i32*
  %t263 = load i32, i32* %26, align 4
  %27 = getelementptr inbounds i8, i8* %closure_arg, i64 64
  %28 = bitcast i8* %27 to i32*
  %t264 = load i32, i32* %28, align 4
  %29 = getelementptr inbounds i8, i8* %closure_arg, i64 68
  %30 = bitcast i8* %29 to i32*
  %t265 = load i32, i32* %30, align 4
  %31 = getelementptr inbounds i8, i8* %closure_arg, i64 72
  %32 = bitcast i8* %31 to i32*
  %t266 = load i32, i32* %32, align 4
  %33 = icmp sgt i32 %t251, %blur_y.s0.y.y
  %a0 = shl nsw i32 %blur_y.s0.y.y, 7
  %b2 = add nsw i32 %blur_y.extent.1, -128
  %34 = icmp slt i32 %a0, %b2
  %blur_y.s0.y.yi.base = select i1 %34, i32 %a0, i32 %b2
  %35 = icmp sgt i32 %a8, -64
  %t284 = select i1 %35, i32 %a8, i32 -64
  %36 = add nsw i32 %t284, 64
  %37 = zext i32 %36 to i64
  %38 = shl nuw nsw i64 %37, 5
  %39 = or i64 %38, 6
  %40 = tail call i8* @halide_malloc(i8* %__user_context, i64 %39)
  %blur_x = bitcast i8* %40 to i16*
  %41 = add nsw i32 %t263, -1
  %t269 = and i32 %41, -64
  br i1 %33, label %then_bb, label %next_bb

after_bb:                                         ; preds = %if.then.i175, %"end for blur_y.s0.y.yi.$n.rebased21", %if.then.i, %"end for blur_y.s0.y.yi.$n.rebased"
  %blur_y39 = load i8*, i8** %0, align 8
  %input40 = load i8*, i8** %2, align 8
  %blur_y.extent.041 = load i32, i32* %4, align 4
  %blur_y.extent.142 = load i32, i32* %6, align 4
  %blur_y.stride.143 = load i32, i32* %8, align 4
  %input.extent.044 = load i32, i32* %10, align 4
  %b35 = load i32, i32* %12, align 4
  %input.stride.145 = load i32, i32* %14, align 4
  %t25146 = load i32, i32* %16, align 4
  %a31 = load i32, i32* %18, align 4
  %t25447 = load i32, i32* %20, align 4
  %t26148 = load i32, i32* %22, align 4
  %t26249 = load i32, i32* %24, align 4
  %t26350 = load i32, i32* %26, align 4
  %t26451 = load i32, i32* %28, align 4
  %t26552 = load i32, i32* %30, align 4
  %t26653 = load i32, i32* %32, align 4
  %42 = icmp sgt i32 %t25146, %blur_y.s0.y.y
  %a12 = shl nsw i32 %blur_y.s0.y.y, 7
  %b14 = add nsw i32 %blur_y.extent.142, -128
  %43 = icmp slt i32 %a12, %b14
  %44 = icmp sgt i32 %a31, -64
  %t535 = select i1 %44, i32 %a31, i32 -64
  %45 = add nsw i32 %t535, 64
  %46 = zext i32 %45 to i64
  %47 = shl nuw nsw i64 %46, 5
  %48 = or i64 %47, 6
  %49 = tail call i8* @halide_malloc(i8* %__user_context, i64 %48)
  %blur_x58 = bitcast i8* %49 to i16*
  br i1 %42, label %then_bb55, label %next_bb56

then_bb:                                          ; preds = %entry
  %t268 = sub nsw i32 %t264, %t254
  %50 = icmp sgt i32 %t266, 0
  %51 = add nsw i32 %input.extent.0, -1
  %52 = insertelement <64 x i32> undef, i32 %51, i32 0
  %53 = shufflevector <64 x i32> %52, <64 x i32> undef, <4 x i32> zeroinitializer
  %54 = bitcast i8* %input to i16*
  %55 = sext i32 %a8 to i64
  %56 = add nsw i64 %55, 64
  %t273 = sub nsw i32 %t254, %t266
  %57 = icmp sgt i32 %t273, 0
  %58 = icmp sgt i32 %t268, 0
  %59 = icmp sgt i32 %t262, 0
  %60 = sext i32 %t269 to i64
  %61 = add nsw i64 %60, 64
  %62 = sext i32 %blur_y.stride.1 to i64
  %63 = bitcast i8* %blur_y to i16*
  %64 = icmp sgt i32 %t261, %t262
  %65 = sext i32 %t263 to i64
  %66 = sext i32 %blur_y.extent.0 to i64
  %67 = zext i32 %t266 to i64
  %68 = zext i32 %t273 to i64
  %69 = zext i32 %t268 to i64
  %70 = zext i32 %t262 to i64
  %71 = sext i32 %t265 to i64
  %72 = sext i32 %blur_y.s0.y.yi.base to i64
  br label %"for blur_y.s0.y.yi.$n.rebased"

next_bb:                                          ; preds = %entry
  %73 = icmp sgt i32 %t264, 0
  %74 = add nsw i32 %input.extent.0, -1
  %75 = insertelement <64 x i32> undef, i32 %74, i32 0
  %76 = shufflevector <64 x i32> %75, <64 x i32> undef, <4 x i32> zeroinitializer
  %77 = bitcast i8* %input to i16*
  %78 = sext i32 %a8 to i64
  %79 = add nsw i64 %78, 64
  %80 = icmp sgt i32 %t261, 0
  %b13 = add nsw i32 %blur_y.extent.0, -64
  %81 = sext i32 %t269 to i64
  %82 = add nsw i64 %81, 64
  %83 = sext i32 %blur_y.stride.1 to i64
  %84 = bitcast i8* %blur_y to i16*
  %85 = zext i32 %t264 to i64
  %86 = sext i32 %blur_y.s0.y.yi.base to i64
  br label %"for blur_y.s0.y.yi.$n.rebased20"

"for blur_y.s0.y.yi.$n.rebased":                  ; preds = %then_bb, %after_bb12
  %indvars.iv209 = phi i64 [ 0, %then_bb ], [ %indvars.iv.next210, %after_bb12 ]
  %87 = add nsw i64 %indvars.iv209, %72
  br i1 %50, label %"for blur_x.s0.x.x.preheader", label %"end for blur_x.s0.x.x", !prof !385

"for blur_x.s0.x.x.preheader":                    ; preds = %"for blur_y.s0.y.yi.$n.rebased"
  %88 = trunc i64 %87 to i32
  br label %"for blur_x.s0.x.x"

"end for blur_y.s0.y.yi.$n.rebased":              ; preds = %after_bb12
  %tobool.not.i.not = icmp eq i8* %40, null
  br i1 %tobool.not.i.not, label %after_bb, label %if.then.i

if.then.i:                                        ; preds = %"end for blur_y.s0.y.yi.$n.rebased"
  tail call void @halide_free(i8* %__user_context, i8* nonnull %40) #14
  br label %after_bb

"for blur_x.s0.x.x":                              ; preds = %"for blur_x.s0.x.x.preheader", %"end for blur_x.s0.y.yi"
  %indvars.iv200 = phi i64 [ 0, %"for blur_x.s0.x.x.preheader" ], [ %indvars.iv.next201, %"end for blur_x.s0.y.yi" ]
  %89 = trunc i64 %indvars.iv200 to i32
  %90 = shl nsw i32 %89, 6
  %blur_x.s0.x.xi.base.s = add nsw i32 %90, %t265
  %91 = add nsw i32 %blur_x.s0.x.xi.base.s, -63
  %92 = insertelement <64 x i32> undef, i32 %91, i32 0
  %93 = shufflevector <64 x i32> %92, <64 x i32> undef, <64 x i32> zeroinitializer
  %94 = add nsw <64 x i32> %93, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %95 = shufflevector <64 x i32> %94, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %96 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %95, <4 x i32> %53)
  %97 = shufflevector <64 x i32> %94, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %98 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %97, <4 x i32> %53)
  %99 = shufflevector <64 x i32> %94, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %100 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %99, <4 x i32> %53)
  %101 = shufflevector <64 x i32> %94, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %102 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %101, <4 x i32> %53)
  %103 = shufflevector <64 x i32> %94, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %104 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %103, <4 x i32> %53)
  %105 = shufflevector <64 x i32> %94, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %106 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %105, <4 x i32> %53)
  %107 = shufflevector <64 x i32> %94, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %108 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %107, <4 x i32> %53)
  %109 = shufflevector <64 x i32> %94, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %110 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %109, <4 x i32> %53)
  %111 = shufflevector <64 x i32> %94, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %112 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %111, <4 x i32> %53)
  %113 = shufflevector <64 x i32> %94, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %114 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %113, <4 x i32> %53)
  %115 = shufflevector <64 x i32> %94, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %116 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %115, <4 x i32> %53)
  %117 = shufflevector <64 x i32> %94, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %118 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %117, <4 x i32> %53)
  %119 = shufflevector <64 x i32> %94, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %120 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %119, <4 x i32> %53)
  %121 = shufflevector <64 x i32> %94, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %122 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %121, <4 x i32> %53)
  %123 = shufflevector <64 x i32> %94, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %124 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %123, <4 x i32> %53)
  %125 = shufflevector <64 x i32> %94, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %126 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %125, <4 x i32> %53)
  %127 = shufflevector <4 x i32> %126, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %128 = shufflevector <8 x i32> %127, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %129 = shufflevector <16 x i32> %128, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %130 = shufflevector <32 x i32> %129, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %131 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %96, <4 x i32> zeroinitializer)
  %132 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %98, <4 x i32> zeroinitializer)
  %133 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %100, <4 x i32> zeroinitializer)
  %134 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %102, <4 x i32> zeroinitializer)
  %135 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %104, <4 x i32> zeroinitializer)
  %136 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %106, <4 x i32> zeroinitializer)
  %137 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %108, <4 x i32> zeroinitializer)
  %138 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %110, <4 x i32> zeroinitializer)
  %139 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %112, <4 x i32> zeroinitializer)
  %140 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %114, <4 x i32> zeroinitializer)
  %141 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %116, <4 x i32> zeroinitializer)
  %142 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %118, <4 x i32> zeroinitializer)
  %143 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %120, <4 x i32> zeroinitializer)
  %144 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %122, <4 x i32> zeroinitializer)
  %145 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %124, <4 x i32> zeroinitializer)
  %146 = shufflevector <64 x i32> %130, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %147 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %146, <4 x i32> zeroinitializer)
  %148 = shufflevector <4 x i32> %131, <4 x i32> %132, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %149 = shufflevector <4 x i32> %133, <4 x i32> %134, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %150 = shufflevector <4 x i32> %135, <4 x i32> %136, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %151 = shufflevector <4 x i32> %137, <4 x i32> %138, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %152 = shufflevector <4 x i32> %139, <4 x i32> %140, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %153 = shufflevector <4 x i32> %141, <4 x i32> %142, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %154 = shufflevector <4 x i32> %143, <4 x i32> %144, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %155 = shufflevector <4 x i32> %145, <4 x i32> %147, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %156 = shufflevector <8 x i32> %148, <8 x i32> %149, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %157 = shufflevector <8 x i32> %150, <8 x i32> %151, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %158 = shufflevector <8 x i32> %152, <8 x i32> %153, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %159 = shufflevector <8 x i32> %154, <8 x i32> %155, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %160 = shufflevector <16 x i32> %156, <16 x i32> %157, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %161 = shufflevector <16 x i32> %158, <16 x i32> %159, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %162 = shufflevector <32 x i32> %160, <32 x i32> %161, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %163 = add nsw i32 %blur_x.s0.x.xi.base.s, -64
  %164 = insertelement <64 x i32> undef, i32 %163, i32 0
  %165 = shufflevector <64 x i32> %164, <64 x i32> undef, <64 x i32> zeroinitializer
  %166 = add nsw <64 x i32> %165, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %167 = shufflevector <64 x i32> %166, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %168 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %167, <4 x i32> %53)
  %169 = shufflevector <64 x i32> %166, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %170 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %169, <4 x i32> %53)
  %171 = shufflevector <64 x i32> %166, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %172 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %171, <4 x i32> %53)
  %173 = shufflevector <64 x i32> %166, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %174 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %173, <4 x i32> %53)
  %175 = shufflevector <64 x i32> %166, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %176 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %175, <4 x i32> %53)
  %177 = shufflevector <64 x i32> %166, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %178 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %177, <4 x i32> %53)
  %179 = shufflevector <64 x i32> %166, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %180 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %179, <4 x i32> %53)
  %181 = shufflevector <64 x i32> %166, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %182 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %181, <4 x i32> %53)
  %183 = shufflevector <64 x i32> %166, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %184 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %183, <4 x i32> %53)
  %185 = shufflevector <64 x i32> %166, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %186 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %185, <4 x i32> %53)
  %187 = shufflevector <64 x i32> %166, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %188 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %187, <4 x i32> %53)
  %189 = shufflevector <64 x i32> %166, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %190 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %189, <4 x i32> %53)
  %191 = shufflevector <64 x i32> %166, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %192 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %191, <4 x i32> %53)
  %193 = shufflevector <64 x i32> %166, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %194 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %193, <4 x i32> %53)
  %195 = shufflevector <64 x i32> %166, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %196 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %195, <4 x i32> %53)
  %197 = shufflevector <64 x i32> %166, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %198 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %197, <4 x i32> %53)
  %199 = shufflevector <4 x i32> %198, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %200 = shufflevector <8 x i32> %199, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %201 = shufflevector <16 x i32> %200, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %202 = shufflevector <32 x i32> %201, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %203 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %168, <4 x i32> zeroinitializer)
  %204 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %170, <4 x i32> zeroinitializer)
  %205 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %172, <4 x i32> zeroinitializer)
  %206 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %174, <4 x i32> zeroinitializer)
  %207 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %176, <4 x i32> zeroinitializer)
  %208 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %178, <4 x i32> zeroinitializer)
  %209 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %180, <4 x i32> zeroinitializer)
  %210 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %182, <4 x i32> zeroinitializer)
  %211 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %184, <4 x i32> zeroinitializer)
  %212 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %186, <4 x i32> zeroinitializer)
  %213 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %188, <4 x i32> zeroinitializer)
  %214 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %190, <4 x i32> zeroinitializer)
  %215 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %192, <4 x i32> zeroinitializer)
  %216 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %194, <4 x i32> zeroinitializer)
  %217 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %196, <4 x i32> zeroinitializer)
  %218 = shufflevector <64 x i32> %202, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %219 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %218, <4 x i32> zeroinitializer)
  %220 = shufflevector <4 x i32> %203, <4 x i32> %204, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %221 = shufflevector <4 x i32> %205, <4 x i32> %206, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %222 = shufflevector <4 x i32> %207, <4 x i32> %208, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %223 = shufflevector <4 x i32> %209, <4 x i32> %210, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %224 = shufflevector <4 x i32> %211, <4 x i32> %212, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %225 = shufflevector <4 x i32> %213, <4 x i32> %214, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %226 = shufflevector <4 x i32> %215, <4 x i32> %216, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %227 = shufflevector <4 x i32> %217, <4 x i32> %219, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %228 = shufflevector <8 x i32> %220, <8 x i32> %221, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %229 = shufflevector <8 x i32> %222, <8 x i32> %223, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %230 = shufflevector <8 x i32> %224, <8 x i32> %225, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %231 = shufflevector <8 x i32> %226, <8 x i32> %227, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %232 = shufflevector <16 x i32> %228, <16 x i32> %229, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %233 = shufflevector <16 x i32> %230, <16 x i32> %231, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %234 = shufflevector <32 x i32> %232, <32 x i32> %233, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %235 = add nsw i32 %blur_x.s0.x.xi.base.s, -62
  %236 = insertelement <64 x i32> undef, i32 %235, i32 0
  %237 = shufflevector <64 x i32> %236, <64 x i32> undef, <64 x i32> zeroinitializer
  %238 = add nsw <64 x i32> %237, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %239 = shufflevector <64 x i32> %238, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %240 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %239, <4 x i32> %53)
  %241 = shufflevector <64 x i32> %238, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %242 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %241, <4 x i32> %53)
  %243 = shufflevector <64 x i32> %238, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %244 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %243, <4 x i32> %53)
  %245 = shufflevector <64 x i32> %238, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %246 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %245, <4 x i32> %53)
  %247 = shufflevector <64 x i32> %238, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %248 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %247, <4 x i32> %53)
  %249 = shufflevector <64 x i32> %238, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %250 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %249, <4 x i32> %53)
  %251 = shufflevector <64 x i32> %238, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %252 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %251, <4 x i32> %53)
  %253 = shufflevector <64 x i32> %238, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %254 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %253, <4 x i32> %53)
  %255 = shufflevector <64 x i32> %238, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %256 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %255, <4 x i32> %53)
  %257 = shufflevector <64 x i32> %238, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %258 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %257, <4 x i32> %53)
  %259 = shufflevector <64 x i32> %238, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %260 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %259, <4 x i32> %53)
  %261 = shufflevector <64 x i32> %238, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %262 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %261, <4 x i32> %53)
  %263 = shufflevector <64 x i32> %238, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %264 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %263, <4 x i32> %53)
  %265 = shufflevector <64 x i32> %238, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %266 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %265, <4 x i32> %53)
  %267 = shufflevector <64 x i32> %238, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %268 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %267, <4 x i32> %53)
  %269 = shufflevector <64 x i32> %238, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %270 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %269, <4 x i32> %53)
  %271 = shufflevector <4 x i32> %270, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %272 = shufflevector <8 x i32> %271, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %273 = shufflevector <16 x i32> %272, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %274 = shufflevector <32 x i32> %273, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %275 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %240, <4 x i32> zeroinitializer)
  %276 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %242, <4 x i32> zeroinitializer)
  %277 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %244, <4 x i32> zeroinitializer)
  %278 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %246, <4 x i32> zeroinitializer)
  %279 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %248, <4 x i32> zeroinitializer)
  %280 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %250, <4 x i32> zeroinitializer)
  %281 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %252, <4 x i32> zeroinitializer)
  %282 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %254, <4 x i32> zeroinitializer)
  %283 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %256, <4 x i32> zeroinitializer)
  %284 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %258, <4 x i32> zeroinitializer)
  %285 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %260, <4 x i32> zeroinitializer)
  %286 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %262, <4 x i32> zeroinitializer)
  %287 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %264, <4 x i32> zeroinitializer)
  %288 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %266, <4 x i32> zeroinitializer)
  %289 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %268, <4 x i32> zeroinitializer)
  %290 = shufflevector <64 x i32> %274, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %291 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %290, <4 x i32> zeroinitializer)
  %292 = shufflevector <4 x i32> %275, <4 x i32> %276, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %293 = shufflevector <4 x i32> %277, <4 x i32> %278, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %294 = shufflevector <4 x i32> %279, <4 x i32> %280, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %295 = shufflevector <4 x i32> %281, <4 x i32> %282, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %296 = shufflevector <4 x i32> %283, <4 x i32> %284, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %297 = shufflevector <4 x i32> %285, <4 x i32> %286, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %298 = shufflevector <4 x i32> %287, <4 x i32> %288, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %299 = shufflevector <4 x i32> %289, <4 x i32> %291, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %300 = shufflevector <8 x i32> %292, <8 x i32> %293, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %301 = shufflevector <8 x i32> %294, <8 x i32> %295, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %302 = shufflevector <8 x i32> %296, <8 x i32> %297, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %303 = shufflevector <8 x i32> %298, <8 x i32> %299, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %304 = shufflevector <16 x i32> %300, <16 x i32> %301, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %305 = shufflevector <16 x i32> %302, <16 x i32> %303, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %306 = shufflevector <32 x i32> %304, <32 x i32> %305, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %307 = add nsw i32 %blur_x.s0.x.xi.base.s, -61
  %308 = insertelement <64 x i32> undef, i32 %307, i32 0
  %309 = shufflevector <64 x i32> %308, <64 x i32> undef, <64 x i32> zeroinitializer
  %310 = add nsw <64 x i32> %309, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %311 = shufflevector <64 x i32> %310, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %312 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %311, <4 x i32> %53)
  %313 = shufflevector <64 x i32> %310, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %314 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %313, <4 x i32> %53)
  %315 = shufflevector <64 x i32> %310, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %316 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %315, <4 x i32> %53)
  %317 = shufflevector <64 x i32> %310, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %318 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %317, <4 x i32> %53)
  %319 = shufflevector <64 x i32> %310, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %320 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %319, <4 x i32> %53)
  %321 = shufflevector <64 x i32> %310, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %322 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %321, <4 x i32> %53)
  %323 = shufflevector <64 x i32> %310, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %324 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %323, <4 x i32> %53)
  %325 = shufflevector <64 x i32> %310, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %326 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %325, <4 x i32> %53)
  %327 = shufflevector <64 x i32> %310, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %328 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %327, <4 x i32> %53)
  %329 = shufflevector <64 x i32> %310, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %330 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %329, <4 x i32> %53)
  %331 = shufflevector <64 x i32> %310, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %332 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %331, <4 x i32> %53)
  %333 = shufflevector <64 x i32> %310, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %334 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %333, <4 x i32> %53)
  %335 = shufflevector <64 x i32> %310, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %336 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %335, <4 x i32> %53)
  %337 = shufflevector <64 x i32> %310, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %338 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %337, <4 x i32> %53)
  %339 = shufflevector <64 x i32> %310, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %340 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %339, <4 x i32> %53)
  %341 = shufflevector <64 x i32> %310, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %342 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %341, <4 x i32> %53)
  %343 = shufflevector <4 x i32> %342, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %344 = shufflevector <8 x i32> %343, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %345 = shufflevector <16 x i32> %344, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %346 = shufflevector <32 x i32> %345, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %347 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %312, <4 x i32> zeroinitializer)
  %348 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %314, <4 x i32> zeroinitializer)
  %349 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %316, <4 x i32> zeroinitializer)
  %350 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %318, <4 x i32> zeroinitializer)
  %351 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %320, <4 x i32> zeroinitializer)
  %352 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %322, <4 x i32> zeroinitializer)
  %353 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %324, <4 x i32> zeroinitializer)
  %354 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %326, <4 x i32> zeroinitializer)
  %355 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %328, <4 x i32> zeroinitializer)
  %356 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %330, <4 x i32> zeroinitializer)
  %357 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %332, <4 x i32> zeroinitializer)
  %358 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %334, <4 x i32> zeroinitializer)
  %359 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %336, <4 x i32> zeroinitializer)
  %360 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %338, <4 x i32> zeroinitializer)
  %361 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %340, <4 x i32> zeroinitializer)
  %362 = shufflevector <64 x i32> %346, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %363 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %362, <4 x i32> zeroinitializer)
  %364 = shufflevector <4 x i32> %347, <4 x i32> %348, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %365 = shufflevector <4 x i32> %349, <4 x i32> %350, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %366 = shufflevector <4 x i32> %351, <4 x i32> %352, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %367 = shufflevector <4 x i32> %353, <4 x i32> %354, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %368 = shufflevector <4 x i32> %355, <4 x i32> %356, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %369 = shufflevector <4 x i32> %357, <4 x i32> %358, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %370 = shufflevector <4 x i32> %359, <4 x i32> %360, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %371 = shufflevector <4 x i32> %361, <4 x i32> %363, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %372 = shufflevector <8 x i32> %364, <8 x i32> %365, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %373 = shufflevector <8 x i32> %366, <8 x i32> %367, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %374 = shufflevector <8 x i32> %368, <8 x i32> %369, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %375 = shufflevector <8 x i32> %370, <8 x i32> %371, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %376 = shufflevector <16 x i32> %372, <16 x i32> %373, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %377 = shufflevector <16 x i32> %374, <16 x i32> %375, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %378 = shufflevector <32 x i32> %376, <32 x i32> %377, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %379 = add nsw i32 %blur_x.s0.x.xi.base.s, -60
  %380 = insertelement <64 x i32> undef, i32 %379, i32 0
  %381 = shufflevector <64 x i32> %380, <64 x i32> undef, <64 x i32> zeroinitializer
  %382 = add nsw <64 x i32> %381, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %383 = shufflevector <64 x i32> %382, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %384 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %383, <4 x i32> %53)
  %385 = shufflevector <64 x i32> %382, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %386 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %385, <4 x i32> %53)
  %387 = shufflevector <64 x i32> %382, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %388 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %387, <4 x i32> %53)
  %389 = shufflevector <64 x i32> %382, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %390 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %389, <4 x i32> %53)
  %391 = shufflevector <64 x i32> %382, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %392 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %391, <4 x i32> %53)
  %393 = shufflevector <64 x i32> %382, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %394 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %393, <4 x i32> %53)
  %395 = shufflevector <64 x i32> %382, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %396 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %395, <4 x i32> %53)
  %397 = shufflevector <64 x i32> %382, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %398 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %397, <4 x i32> %53)
  %399 = shufflevector <64 x i32> %382, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %400 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %399, <4 x i32> %53)
  %401 = shufflevector <64 x i32> %382, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %402 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %401, <4 x i32> %53)
  %403 = shufflevector <64 x i32> %382, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %404 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %403, <4 x i32> %53)
  %405 = shufflevector <64 x i32> %382, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %406 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %405, <4 x i32> %53)
  %407 = shufflevector <64 x i32> %382, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %408 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %407, <4 x i32> %53)
  %409 = shufflevector <64 x i32> %382, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %410 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %409, <4 x i32> %53)
  %411 = shufflevector <64 x i32> %382, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %412 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %411, <4 x i32> %53)
  %413 = shufflevector <64 x i32> %382, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %414 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %413, <4 x i32> %53)
  %415 = shufflevector <4 x i32> %414, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %416 = shufflevector <8 x i32> %415, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %417 = shufflevector <16 x i32> %416, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %418 = shufflevector <32 x i32> %417, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %419 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %384, <4 x i32> zeroinitializer)
  %420 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %386, <4 x i32> zeroinitializer)
  %421 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %388, <4 x i32> zeroinitializer)
  %422 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %390, <4 x i32> zeroinitializer)
  %423 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %392, <4 x i32> zeroinitializer)
  %424 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %394, <4 x i32> zeroinitializer)
  %425 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %396, <4 x i32> zeroinitializer)
  %426 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %398, <4 x i32> zeroinitializer)
  %427 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %400, <4 x i32> zeroinitializer)
  %428 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %402, <4 x i32> zeroinitializer)
  %429 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %404, <4 x i32> zeroinitializer)
  %430 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %406, <4 x i32> zeroinitializer)
  %431 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %408, <4 x i32> zeroinitializer)
  %432 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %410, <4 x i32> zeroinitializer)
  %433 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %412, <4 x i32> zeroinitializer)
  %434 = shufflevector <64 x i32> %418, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %435 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %434, <4 x i32> zeroinitializer)
  %436 = shufflevector <4 x i32> %419, <4 x i32> %420, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %437 = shufflevector <4 x i32> %421, <4 x i32> %422, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %438 = shufflevector <4 x i32> %423, <4 x i32> %424, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %439 = shufflevector <4 x i32> %425, <4 x i32> %426, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %440 = shufflevector <4 x i32> %427, <4 x i32> %428, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %441 = shufflevector <4 x i32> %429, <4 x i32> %430, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %442 = shufflevector <4 x i32> %431, <4 x i32> %432, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %443 = shufflevector <4 x i32> %433, <4 x i32> %435, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %444 = shufflevector <8 x i32> %436, <8 x i32> %437, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %445 = shufflevector <8 x i32> %438, <8 x i32> %439, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %446 = shufflevector <8 x i32> %440, <8 x i32> %441, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %447 = shufflevector <8 x i32> %442, <8 x i32> %443, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %448 = shufflevector <16 x i32> %444, <16 x i32> %445, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %449 = shufflevector <16 x i32> %446, <16 x i32> %447, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %450 = shufflevector <32 x i32> %448, <32 x i32> %449, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %451 = add nsw i32 %blur_x.s0.x.xi.base.s, -58
  %452 = insertelement <64 x i32> undef, i32 %451, i32 0
  %453 = shufflevector <64 x i32> %452, <64 x i32> undef, <64 x i32> zeroinitializer
  %454 = add nsw <64 x i32> %453, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %455 = shufflevector <64 x i32> %454, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %456 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %455, <4 x i32> %53)
  %457 = shufflevector <64 x i32> %454, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %458 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %457, <4 x i32> %53)
  %459 = shufflevector <64 x i32> %454, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %460 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %459, <4 x i32> %53)
  %461 = shufflevector <64 x i32> %454, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %462 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %461, <4 x i32> %53)
  %463 = shufflevector <64 x i32> %454, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %464 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %463, <4 x i32> %53)
  %465 = shufflevector <64 x i32> %454, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %466 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %465, <4 x i32> %53)
  %467 = shufflevector <64 x i32> %454, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %468 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %467, <4 x i32> %53)
  %469 = shufflevector <64 x i32> %454, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %470 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %469, <4 x i32> %53)
  %471 = shufflevector <64 x i32> %454, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %472 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %471, <4 x i32> %53)
  %473 = shufflevector <64 x i32> %454, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %474 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %473, <4 x i32> %53)
  %475 = shufflevector <64 x i32> %454, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %476 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %475, <4 x i32> %53)
  %477 = shufflevector <64 x i32> %454, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %478 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %477, <4 x i32> %53)
  %479 = shufflevector <64 x i32> %454, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %480 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %479, <4 x i32> %53)
  %481 = shufflevector <64 x i32> %454, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %482 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %481, <4 x i32> %53)
  %483 = shufflevector <64 x i32> %454, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %484 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %483, <4 x i32> %53)
  %485 = shufflevector <64 x i32> %454, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %486 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %485, <4 x i32> %53)
  %487 = shufflevector <4 x i32> %486, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %488 = shufflevector <8 x i32> %487, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %489 = shufflevector <16 x i32> %488, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %490 = shufflevector <32 x i32> %489, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %491 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %456, <4 x i32> zeroinitializer)
  %492 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %458, <4 x i32> zeroinitializer)
  %493 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %460, <4 x i32> zeroinitializer)
  %494 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %462, <4 x i32> zeroinitializer)
  %495 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %464, <4 x i32> zeroinitializer)
  %496 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %466, <4 x i32> zeroinitializer)
  %497 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %468, <4 x i32> zeroinitializer)
  %498 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %470, <4 x i32> zeroinitializer)
  %499 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %472, <4 x i32> zeroinitializer)
  %500 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %474, <4 x i32> zeroinitializer)
  %501 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %476, <4 x i32> zeroinitializer)
  %502 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %478, <4 x i32> zeroinitializer)
  %503 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %480, <4 x i32> zeroinitializer)
  %504 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %482, <4 x i32> zeroinitializer)
  %505 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %484, <4 x i32> zeroinitializer)
  %506 = shufflevector <64 x i32> %490, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %507 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %506, <4 x i32> zeroinitializer)
  %508 = shufflevector <4 x i32> %491, <4 x i32> %492, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %509 = shufflevector <4 x i32> %493, <4 x i32> %494, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %510 = shufflevector <4 x i32> %495, <4 x i32> %496, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %511 = shufflevector <4 x i32> %497, <4 x i32> %498, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %512 = shufflevector <4 x i32> %499, <4 x i32> %500, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %513 = shufflevector <4 x i32> %501, <4 x i32> %502, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %514 = shufflevector <4 x i32> %503, <4 x i32> %504, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %515 = shufflevector <4 x i32> %505, <4 x i32> %507, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %516 = shufflevector <8 x i32> %508, <8 x i32> %509, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %517 = shufflevector <8 x i32> %510, <8 x i32> %511, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %518 = shufflevector <8 x i32> %512, <8 x i32> %513, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %519 = shufflevector <8 x i32> %514, <8 x i32> %515, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %520 = shufflevector <16 x i32> %516, <16 x i32> %517, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %521 = shufflevector <16 x i32> %518, <16 x i32> %519, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %522 = shufflevector <32 x i32> %520, <32 x i32> %521, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %523 = add nsw i32 %blur_x.s0.x.xi.base.s, -59
  %524 = insertelement <64 x i32> undef, i32 %523, i32 0
  %525 = shufflevector <64 x i32> %524, <64 x i32> undef, <64 x i32> zeroinitializer
  %526 = add nsw <64 x i32> %525, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %527 = shufflevector <64 x i32> %526, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %528 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %527, <4 x i32> %53)
  %529 = shufflevector <64 x i32> %526, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %530 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %529, <4 x i32> %53)
  %531 = shufflevector <64 x i32> %526, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %532 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %531, <4 x i32> %53)
  %533 = shufflevector <64 x i32> %526, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %534 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %533, <4 x i32> %53)
  %535 = shufflevector <64 x i32> %526, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %536 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %535, <4 x i32> %53)
  %537 = shufflevector <64 x i32> %526, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %538 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %537, <4 x i32> %53)
  %539 = shufflevector <64 x i32> %526, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %540 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %539, <4 x i32> %53)
  %541 = shufflevector <64 x i32> %526, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %542 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %541, <4 x i32> %53)
  %543 = shufflevector <64 x i32> %526, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %544 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %543, <4 x i32> %53)
  %545 = shufflevector <64 x i32> %526, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %546 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %545, <4 x i32> %53)
  %547 = shufflevector <64 x i32> %526, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %548 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %547, <4 x i32> %53)
  %549 = shufflevector <64 x i32> %526, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %550 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %549, <4 x i32> %53)
  %551 = shufflevector <64 x i32> %526, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %552 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %551, <4 x i32> %53)
  %553 = shufflevector <64 x i32> %526, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %554 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %553, <4 x i32> %53)
  %555 = shufflevector <64 x i32> %526, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %556 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %555, <4 x i32> %53)
  %557 = shufflevector <64 x i32> %526, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %558 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %557, <4 x i32> %53)
  %559 = shufflevector <4 x i32> %558, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %560 = shufflevector <8 x i32> %559, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %561 = shufflevector <16 x i32> %560, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %562 = shufflevector <32 x i32> %561, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %563 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %528, <4 x i32> zeroinitializer)
  %564 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %530, <4 x i32> zeroinitializer)
  %565 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %532, <4 x i32> zeroinitializer)
  %566 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %534, <4 x i32> zeroinitializer)
  %567 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %536, <4 x i32> zeroinitializer)
  %568 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %538, <4 x i32> zeroinitializer)
  %569 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %540, <4 x i32> zeroinitializer)
  %570 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %542, <4 x i32> zeroinitializer)
  %571 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %544, <4 x i32> zeroinitializer)
  %572 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %546, <4 x i32> zeroinitializer)
  %573 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %548, <4 x i32> zeroinitializer)
  %574 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %550, <4 x i32> zeroinitializer)
  %575 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %552, <4 x i32> zeroinitializer)
  %576 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %554, <4 x i32> zeroinitializer)
  %577 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %556, <4 x i32> zeroinitializer)
  %578 = shufflevector <64 x i32> %562, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %579 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %578, <4 x i32> zeroinitializer)
  %580 = shufflevector <4 x i32> %563, <4 x i32> %564, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %581 = shufflevector <4 x i32> %565, <4 x i32> %566, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %582 = shufflevector <4 x i32> %567, <4 x i32> %568, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %583 = shufflevector <4 x i32> %569, <4 x i32> %570, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %584 = shufflevector <4 x i32> %571, <4 x i32> %572, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %585 = shufflevector <4 x i32> %573, <4 x i32> %574, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %586 = shufflevector <4 x i32> %575, <4 x i32> %576, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %587 = shufflevector <4 x i32> %577, <4 x i32> %579, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %588 = shufflevector <8 x i32> %580, <8 x i32> %581, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %589 = shufflevector <8 x i32> %582, <8 x i32> %583, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %590 = shufflevector <8 x i32> %584, <8 x i32> %585, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %591 = shufflevector <8 x i32> %586, <8 x i32> %587, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %592 = shufflevector <16 x i32> %588, <16 x i32> %589, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %593 = shufflevector <16 x i32> %590, <16 x i32> %591, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %594 = shufflevector <32 x i32> %592, <32 x i32> %593, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %595 = zext i32 %90 to i64
  br label %"for blur_x.s0.y.yi"

"end for blur_x.s0.x.x":                          ; preds = %"end for blur_x.s0.y.yi", %"for blur_y.s0.y.yi.$n.rebased"
  br i1 %57, label %"for blur_x.s0.x.x.rebased.preheader", label %"end for blur_x.s0.x.x.rebased", !prof !385

"for blur_x.s0.x.x.rebased.preheader":            ; preds = %"end for blur_x.s0.x.x"
  %596 = trunc i64 %87 to i32
  br label %"for blur_x.s0.x.x.rebased"

"for blur_x.s0.y.yi":                             ; preds = %"for blur_x.s0.x.x", %"for blur_x.s0.y.yi"
  %blur_x.s0.y.yi = phi i32 [ 0, %"for blur_x.s0.x.x" ], [ %2963, %"for blur_x.s0.y.yi" ]
  %a3 = add nsw i32 %blur_x.s0.y.yi, %88
  %597 = icmp sgt i32 %a3, 0
  %598 = select i1 %597, i32 %a3, i32 0
  %599 = mul nsw i32 %598, %input.stride.1
  %600 = insertelement <64 x i32> undef, i32 %599, i32 0
  %t238 = shufflevector <64 x i32> %600, <64 x i32> undef, <64 x i32> zeroinitializer
  %601 = add nsw <64 x i32> %162, %t238
  %602 = extractelement <64 x i32> %601, i32 0
  %603 = sext i32 %602 to i64
  %604 = getelementptr inbounds i16, i16* %54, i64 %603
  %605 = load i16, i16* %604, align 2, !tbaa !386
  %606 = insertelement <64 x i16> undef, i16 %605, i32 0
  %607 = extractelement <64 x i32> %601, i32 1
  %608 = sext i32 %607 to i64
  %609 = getelementptr inbounds i16, i16* %54, i64 %608
  %610 = load i16, i16* %609, align 2, !tbaa !386
  %611 = insertelement <64 x i16> %606, i16 %610, i32 1
  %612 = extractelement <64 x i32> %601, i32 2
  %613 = sext i32 %612 to i64
  %614 = getelementptr inbounds i16, i16* %54, i64 %613
  %615 = load i16, i16* %614, align 2, !tbaa !386
  %616 = insertelement <64 x i16> %611, i16 %615, i32 2
  %617 = extractelement <64 x i32> %601, i32 3
  %618 = sext i32 %617 to i64
  %619 = getelementptr inbounds i16, i16* %54, i64 %618
  %620 = load i16, i16* %619, align 2, !tbaa !386
  %621 = insertelement <64 x i16> %616, i16 %620, i32 3
  %622 = extractelement <64 x i32> %601, i32 4
  %623 = sext i32 %622 to i64
  %624 = getelementptr inbounds i16, i16* %54, i64 %623
  %625 = load i16, i16* %624, align 2, !tbaa !386
  %626 = insertelement <64 x i16> %621, i16 %625, i32 4
  %627 = extractelement <64 x i32> %601, i32 5
  %628 = sext i32 %627 to i64
  %629 = getelementptr inbounds i16, i16* %54, i64 %628
  %630 = load i16, i16* %629, align 2, !tbaa !386
  %631 = insertelement <64 x i16> %626, i16 %630, i32 5
  %632 = extractelement <64 x i32> %601, i32 6
  %633 = sext i32 %632 to i64
  %634 = getelementptr inbounds i16, i16* %54, i64 %633
  %635 = load i16, i16* %634, align 2, !tbaa !386
  %636 = insertelement <64 x i16> %631, i16 %635, i32 6
  %637 = extractelement <64 x i32> %601, i32 7
  %638 = sext i32 %637 to i64
  %639 = getelementptr inbounds i16, i16* %54, i64 %638
  %640 = load i16, i16* %639, align 2, !tbaa !386
  %641 = insertelement <64 x i16> %636, i16 %640, i32 7
  %642 = extractelement <64 x i32> %601, i32 8
  %643 = sext i32 %642 to i64
  %644 = getelementptr inbounds i16, i16* %54, i64 %643
  %645 = load i16, i16* %644, align 2, !tbaa !386
  %646 = insertelement <64 x i16> %641, i16 %645, i32 8
  %647 = extractelement <64 x i32> %601, i32 9
  %648 = sext i32 %647 to i64
  %649 = getelementptr inbounds i16, i16* %54, i64 %648
  %650 = load i16, i16* %649, align 2, !tbaa !386
  %651 = insertelement <64 x i16> %646, i16 %650, i32 9
  %652 = extractelement <64 x i32> %601, i32 10
  %653 = sext i32 %652 to i64
  %654 = getelementptr inbounds i16, i16* %54, i64 %653
  %655 = load i16, i16* %654, align 2, !tbaa !386
  %656 = insertelement <64 x i16> %651, i16 %655, i32 10
  %657 = extractelement <64 x i32> %601, i32 11
  %658 = sext i32 %657 to i64
  %659 = getelementptr inbounds i16, i16* %54, i64 %658
  %660 = load i16, i16* %659, align 2, !tbaa !386
  %661 = insertelement <64 x i16> %656, i16 %660, i32 11
  %662 = extractelement <64 x i32> %601, i32 12
  %663 = sext i32 %662 to i64
  %664 = getelementptr inbounds i16, i16* %54, i64 %663
  %665 = load i16, i16* %664, align 2, !tbaa !386
  %666 = insertelement <64 x i16> %661, i16 %665, i32 12
  %667 = extractelement <64 x i32> %601, i32 13
  %668 = sext i32 %667 to i64
  %669 = getelementptr inbounds i16, i16* %54, i64 %668
  %670 = load i16, i16* %669, align 2, !tbaa !386
  %671 = insertelement <64 x i16> %666, i16 %670, i32 13
  %672 = extractelement <64 x i32> %601, i32 14
  %673 = sext i32 %672 to i64
  %674 = getelementptr inbounds i16, i16* %54, i64 %673
  %675 = load i16, i16* %674, align 2, !tbaa !386
  %676 = insertelement <64 x i16> %671, i16 %675, i32 14
  %677 = extractelement <64 x i32> %601, i32 15
  %678 = sext i32 %677 to i64
  %679 = getelementptr inbounds i16, i16* %54, i64 %678
  %680 = load i16, i16* %679, align 2, !tbaa !386
  %681 = insertelement <64 x i16> %676, i16 %680, i32 15
  %682 = extractelement <64 x i32> %601, i32 16
  %683 = sext i32 %682 to i64
  %684 = getelementptr inbounds i16, i16* %54, i64 %683
  %685 = load i16, i16* %684, align 2, !tbaa !386
  %686 = insertelement <64 x i16> %681, i16 %685, i32 16
  %687 = extractelement <64 x i32> %601, i32 17
  %688 = sext i32 %687 to i64
  %689 = getelementptr inbounds i16, i16* %54, i64 %688
  %690 = load i16, i16* %689, align 2, !tbaa !386
  %691 = insertelement <64 x i16> %686, i16 %690, i32 17
  %692 = extractelement <64 x i32> %601, i32 18
  %693 = sext i32 %692 to i64
  %694 = getelementptr inbounds i16, i16* %54, i64 %693
  %695 = load i16, i16* %694, align 2, !tbaa !386
  %696 = insertelement <64 x i16> %691, i16 %695, i32 18
  %697 = extractelement <64 x i32> %601, i32 19
  %698 = sext i32 %697 to i64
  %699 = getelementptr inbounds i16, i16* %54, i64 %698
  %700 = load i16, i16* %699, align 2, !tbaa !386
  %701 = insertelement <64 x i16> %696, i16 %700, i32 19
  %702 = extractelement <64 x i32> %601, i32 20
  %703 = sext i32 %702 to i64
  %704 = getelementptr inbounds i16, i16* %54, i64 %703
  %705 = load i16, i16* %704, align 2, !tbaa !386
  %706 = insertelement <64 x i16> %701, i16 %705, i32 20
  %707 = extractelement <64 x i32> %601, i32 21
  %708 = sext i32 %707 to i64
  %709 = getelementptr inbounds i16, i16* %54, i64 %708
  %710 = load i16, i16* %709, align 2, !tbaa !386
  %711 = insertelement <64 x i16> %706, i16 %710, i32 21
  %712 = extractelement <64 x i32> %601, i32 22
  %713 = sext i32 %712 to i64
  %714 = getelementptr inbounds i16, i16* %54, i64 %713
  %715 = load i16, i16* %714, align 2, !tbaa !386
  %716 = insertelement <64 x i16> %711, i16 %715, i32 22
  %717 = extractelement <64 x i32> %601, i32 23
  %718 = sext i32 %717 to i64
  %719 = getelementptr inbounds i16, i16* %54, i64 %718
  %720 = load i16, i16* %719, align 2, !tbaa !386
  %721 = insertelement <64 x i16> %716, i16 %720, i32 23
  %722 = extractelement <64 x i32> %601, i32 24
  %723 = sext i32 %722 to i64
  %724 = getelementptr inbounds i16, i16* %54, i64 %723
  %725 = load i16, i16* %724, align 2, !tbaa !386
  %726 = insertelement <64 x i16> %721, i16 %725, i32 24
  %727 = extractelement <64 x i32> %601, i32 25
  %728 = sext i32 %727 to i64
  %729 = getelementptr inbounds i16, i16* %54, i64 %728
  %730 = load i16, i16* %729, align 2, !tbaa !386
  %731 = insertelement <64 x i16> %726, i16 %730, i32 25
  %732 = extractelement <64 x i32> %601, i32 26
  %733 = sext i32 %732 to i64
  %734 = getelementptr inbounds i16, i16* %54, i64 %733
  %735 = load i16, i16* %734, align 2, !tbaa !386
  %736 = insertelement <64 x i16> %731, i16 %735, i32 26
  %737 = extractelement <64 x i32> %601, i32 27
  %738 = sext i32 %737 to i64
  %739 = getelementptr inbounds i16, i16* %54, i64 %738
  %740 = load i16, i16* %739, align 2, !tbaa !386
  %741 = insertelement <64 x i16> %736, i16 %740, i32 27
  %742 = extractelement <64 x i32> %601, i32 28
  %743 = sext i32 %742 to i64
  %744 = getelementptr inbounds i16, i16* %54, i64 %743
  %745 = load i16, i16* %744, align 2, !tbaa !386
  %746 = insertelement <64 x i16> %741, i16 %745, i32 28
  %747 = extractelement <64 x i32> %601, i32 29
  %748 = sext i32 %747 to i64
  %749 = getelementptr inbounds i16, i16* %54, i64 %748
  %750 = load i16, i16* %749, align 2, !tbaa !386
  %751 = insertelement <64 x i16> %746, i16 %750, i32 29
  %752 = extractelement <64 x i32> %601, i32 30
  %753 = sext i32 %752 to i64
  %754 = getelementptr inbounds i16, i16* %54, i64 %753
  %755 = load i16, i16* %754, align 2, !tbaa !386
  %756 = insertelement <64 x i16> %751, i16 %755, i32 30
  %757 = extractelement <64 x i32> %601, i32 31
  %758 = sext i32 %757 to i64
  %759 = getelementptr inbounds i16, i16* %54, i64 %758
  %760 = load i16, i16* %759, align 2, !tbaa !386
  %761 = insertelement <64 x i16> %756, i16 %760, i32 31
  %762 = extractelement <64 x i32> %601, i32 32
  %763 = sext i32 %762 to i64
  %764 = getelementptr inbounds i16, i16* %54, i64 %763
  %765 = load i16, i16* %764, align 2, !tbaa !386
  %766 = insertelement <64 x i16> %761, i16 %765, i32 32
  %767 = extractelement <64 x i32> %601, i32 33
  %768 = sext i32 %767 to i64
  %769 = getelementptr inbounds i16, i16* %54, i64 %768
  %770 = load i16, i16* %769, align 2, !tbaa !386
  %771 = insertelement <64 x i16> %766, i16 %770, i32 33
  %772 = extractelement <64 x i32> %601, i32 34
  %773 = sext i32 %772 to i64
  %774 = getelementptr inbounds i16, i16* %54, i64 %773
  %775 = load i16, i16* %774, align 2, !tbaa !386
  %776 = insertelement <64 x i16> %771, i16 %775, i32 34
  %777 = extractelement <64 x i32> %601, i32 35
  %778 = sext i32 %777 to i64
  %779 = getelementptr inbounds i16, i16* %54, i64 %778
  %780 = load i16, i16* %779, align 2, !tbaa !386
  %781 = insertelement <64 x i16> %776, i16 %780, i32 35
  %782 = extractelement <64 x i32> %601, i32 36
  %783 = sext i32 %782 to i64
  %784 = getelementptr inbounds i16, i16* %54, i64 %783
  %785 = load i16, i16* %784, align 2, !tbaa !386
  %786 = insertelement <64 x i16> %781, i16 %785, i32 36
  %787 = extractelement <64 x i32> %601, i32 37
  %788 = sext i32 %787 to i64
  %789 = getelementptr inbounds i16, i16* %54, i64 %788
  %790 = load i16, i16* %789, align 2, !tbaa !386
  %791 = insertelement <64 x i16> %786, i16 %790, i32 37
  %792 = extractelement <64 x i32> %601, i32 38
  %793 = sext i32 %792 to i64
  %794 = getelementptr inbounds i16, i16* %54, i64 %793
  %795 = load i16, i16* %794, align 2, !tbaa !386
  %796 = insertelement <64 x i16> %791, i16 %795, i32 38
  %797 = extractelement <64 x i32> %601, i32 39
  %798 = sext i32 %797 to i64
  %799 = getelementptr inbounds i16, i16* %54, i64 %798
  %800 = load i16, i16* %799, align 2, !tbaa !386
  %801 = insertelement <64 x i16> %796, i16 %800, i32 39
  %802 = extractelement <64 x i32> %601, i32 40
  %803 = sext i32 %802 to i64
  %804 = getelementptr inbounds i16, i16* %54, i64 %803
  %805 = load i16, i16* %804, align 2, !tbaa !386
  %806 = insertelement <64 x i16> %801, i16 %805, i32 40
  %807 = extractelement <64 x i32> %601, i32 41
  %808 = sext i32 %807 to i64
  %809 = getelementptr inbounds i16, i16* %54, i64 %808
  %810 = load i16, i16* %809, align 2, !tbaa !386
  %811 = insertelement <64 x i16> %806, i16 %810, i32 41
  %812 = extractelement <64 x i32> %601, i32 42
  %813 = sext i32 %812 to i64
  %814 = getelementptr inbounds i16, i16* %54, i64 %813
  %815 = load i16, i16* %814, align 2, !tbaa !386
  %816 = insertelement <64 x i16> %811, i16 %815, i32 42
  %817 = extractelement <64 x i32> %601, i32 43
  %818 = sext i32 %817 to i64
  %819 = getelementptr inbounds i16, i16* %54, i64 %818
  %820 = load i16, i16* %819, align 2, !tbaa !386
  %821 = insertelement <64 x i16> %816, i16 %820, i32 43
  %822 = extractelement <64 x i32> %601, i32 44
  %823 = sext i32 %822 to i64
  %824 = getelementptr inbounds i16, i16* %54, i64 %823
  %825 = load i16, i16* %824, align 2, !tbaa !386
  %826 = insertelement <64 x i16> %821, i16 %825, i32 44
  %827 = extractelement <64 x i32> %601, i32 45
  %828 = sext i32 %827 to i64
  %829 = getelementptr inbounds i16, i16* %54, i64 %828
  %830 = load i16, i16* %829, align 2, !tbaa !386
  %831 = insertelement <64 x i16> %826, i16 %830, i32 45
  %832 = extractelement <64 x i32> %601, i32 46
  %833 = sext i32 %832 to i64
  %834 = getelementptr inbounds i16, i16* %54, i64 %833
  %835 = load i16, i16* %834, align 2, !tbaa !386
  %836 = insertelement <64 x i16> %831, i16 %835, i32 46
  %837 = extractelement <64 x i32> %601, i32 47
  %838 = sext i32 %837 to i64
  %839 = getelementptr inbounds i16, i16* %54, i64 %838
  %840 = load i16, i16* %839, align 2, !tbaa !386
  %841 = insertelement <64 x i16> %836, i16 %840, i32 47
  %842 = extractelement <64 x i32> %601, i32 48
  %843 = sext i32 %842 to i64
  %844 = getelementptr inbounds i16, i16* %54, i64 %843
  %845 = load i16, i16* %844, align 2, !tbaa !386
  %846 = insertelement <64 x i16> %841, i16 %845, i32 48
  %847 = extractelement <64 x i32> %601, i32 49
  %848 = sext i32 %847 to i64
  %849 = getelementptr inbounds i16, i16* %54, i64 %848
  %850 = load i16, i16* %849, align 2, !tbaa !386
  %851 = insertelement <64 x i16> %846, i16 %850, i32 49
  %852 = extractelement <64 x i32> %601, i32 50
  %853 = sext i32 %852 to i64
  %854 = getelementptr inbounds i16, i16* %54, i64 %853
  %855 = load i16, i16* %854, align 2, !tbaa !386
  %856 = insertelement <64 x i16> %851, i16 %855, i32 50
  %857 = extractelement <64 x i32> %601, i32 51
  %858 = sext i32 %857 to i64
  %859 = getelementptr inbounds i16, i16* %54, i64 %858
  %860 = load i16, i16* %859, align 2, !tbaa !386
  %861 = insertelement <64 x i16> %856, i16 %860, i32 51
  %862 = extractelement <64 x i32> %601, i32 52
  %863 = sext i32 %862 to i64
  %864 = getelementptr inbounds i16, i16* %54, i64 %863
  %865 = load i16, i16* %864, align 2, !tbaa !386
  %866 = insertelement <64 x i16> %861, i16 %865, i32 52
  %867 = extractelement <64 x i32> %601, i32 53
  %868 = sext i32 %867 to i64
  %869 = getelementptr inbounds i16, i16* %54, i64 %868
  %870 = load i16, i16* %869, align 2, !tbaa !386
  %871 = insertelement <64 x i16> %866, i16 %870, i32 53
  %872 = extractelement <64 x i32> %601, i32 54
  %873 = sext i32 %872 to i64
  %874 = getelementptr inbounds i16, i16* %54, i64 %873
  %875 = load i16, i16* %874, align 2, !tbaa !386
  %876 = insertelement <64 x i16> %871, i16 %875, i32 54
  %877 = extractelement <64 x i32> %601, i32 55
  %878 = sext i32 %877 to i64
  %879 = getelementptr inbounds i16, i16* %54, i64 %878
  %880 = load i16, i16* %879, align 2, !tbaa !386
  %881 = insertelement <64 x i16> %876, i16 %880, i32 55
  %882 = extractelement <64 x i32> %601, i32 56
  %883 = sext i32 %882 to i64
  %884 = getelementptr inbounds i16, i16* %54, i64 %883
  %885 = load i16, i16* %884, align 2, !tbaa !386
  %886 = insertelement <64 x i16> %881, i16 %885, i32 56
  %887 = extractelement <64 x i32> %601, i32 57
  %888 = sext i32 %887 to i64
  %889 = getelementptr inbounds i16, i16* %54, i64 %888
  %890 = load i16, i16* %889, align 2, !tbaa !386
  %891 = insertelement <64 x i16> %886, i16 %890, i32 57
  %892 = extractelement <64 x i32> %601, i32 58
  %893 = sext i32 %892 to i64
  %894 = getelementptr inbounds i16, i16* %54, i64 %893
  %895 = load i16, i16* %894, align 2, !tbaa !386
  %896 = insertelement <64 x i16> %891, i16 %895, i32 58
  %897 = extractelement <64 x i32> %601, i32 59
  %898 = sext i32 %897 to i64
  %899 = getelementptr inbounds i16, i16* %54, i64 %898
  %900 = load i16, i16* %899, align 2, !tbaa !386
  %901 = insertelement <64 x i16> %896, i16 %900, i32 59
  %902 = extractelement <64 x i32> %601, i32 60
  %903 = sext i32 %902 to i64
  %904 = getelementptr inbounds i16, i16* %54, i64 %903
  %905 = load i16, i16* %904, align 2, !tbaa !386
  %906 = insertelement <64 x i16> %901, i16 %905, i32 60
  %907 = extractelement <64 x i32> %601, i32 61
  %908 = sext i32 %907 to i64
  %909 = getelementptr inbounds i16, i16* %54, i64 %908
  %910 = load i16, i16* %909, align 2, !tbaa !386
  %911 = insertelement <64 x i16> %906, i16 %910, i32 61
  %912 = extractelement <64 x i32> %601, i32 62
  %913 = sext i32 %912 to i64
  %914 = getelementptr inbounds i16, i16* %54, i64 %913
  %915 = load i16, i16* %914, align 2, !tbaa !386
  %916 = insertelement <64 x i16> %911, i16 %915, i32 62
  %917 = extractelement <64 x i32> %601, i32 63
  %918 = sext i32 %917 to i64
  %919 = getelementptr inbounds i16, i16* %54, i64 %918
  %920 = load i16, i16* %919, align 2, !tbaa !386
  %921 = insertelement <64 x i16> %916, i16 %920, i32 63
  %922 = add nsw <64 x i32> %234, %t238
  %923 = extractelement <64 x i32> %922, i32 0
  %924 = sext i32 %923 to i64
  %925 = getelementptr inbounds i16, i16* %54, i64 %924
  %926 = load i16, i16* %925, align 2, !tbaa !386
  %927 = insertelement <64 x i16> undef, i16 %926, i32 0
  %928 = extractelement <64 x i32> %922, i32 1
  %929 = sext i32 %928 to i64
  %930 = getelementptr inbounds i16, i16* %54, i64 %929
  %931 = load i16, i16* %930, align 2, !tbaa !386
  %932 = insertelement <64 x i16> %927, i16 %931, i32 1
  %933 = extractelement <64 x i32> %922, i32 2
  %934 = sext i32 %933 to i64
  %935 = getelementptr inbounds i16, i16* %54, i64 %934
  %936 = load i16, i16* %935, align 2, !tbaa !386
  %937 = insertelement <64 x i16> %932, i16 %936, i32 2
  %938 = extractelement <64 x i32> %922, i32 3
  %939 = sext i32 %938 to i64
  %940 = getelementptr inbounds i16, i16* %54, i64 %939
  %941 = load i16, i16* %940, align 2, !tbaa !386
  %942 = insertelement <64 x i16> %937, i16 %941, i32 3
  %943 = extractelement <64 x i32> %922, i32 4
  %944 = sext i32 %943 to i64
  %945 = getelementptr inbounds i16, i16* %54, i64 %944
  %946 = load i16, i16* %945, align 2, !tbaa !386
  %947 = insertelement <64 x i16> %942, i16 %946, i32 4
  %948 = extractelement <64 x i32> %922, i32 5
  %949 = sext i32 %948 to i64
  %950 = getelementptr inbounds i16, i16* %54, i64 %949
  %951 = load i16, i16* %950, align 2, !tbaa !386
  %952 = insertelement <64 x i16> %947, i16 %951, i32 5
  %953 = extractelement <64 x i32> %922, i32 6
  %954 = sext i32 %953 to i64
  %955 = getelementptr inbounds i16, i16* %54, i64 %954
  %956 = load i16, i16* %955, align 2, !tbaa !386
  %957 = insertelement <64 x i16> %952, i16 %956, i32 6
  %958 = extractelement <64 x i32> %922, i32 7
  %959 = sext i32 %958 to i64
  %960 = getelementptr inbounds i16, i16* %54, i64 %959
  %961 = load i16, i16* %960, align 2, !tbaa !386
  %962 = insertelement <64 x i16> %957, i16 %961, i32 7
  %963 = extractelement <64 x i32> %922, i32 8
  %964 = sext i32 %963 to i64
  %965 = getelementptr inbounds i16, i16* %54, i64 %964
  %966 = load i16, i16* %965, align 2, !tbaa !386
  %967 = insertelement <64 x i16> %962, i16 %966, i32 8
  %968 = extractelement <64 x i32> %922, i32 9
  %969 = sext i32 %968 to i64
  %970 = getelementptr inbounds i16, i16* %54, i64 %969
  %971 = load i16, i16* %970, align 2, !tbaa !386
  %972 = insertelement <64 x i16> %967, i16 %971, i32 9
  %973 = extractelement <64 x i32> %922, i32 10
  %974 = sext i32 %973 to i64
  %975 = getelementptr inbounds i16, i16* %54, i64 %974
  %976 = load i16, i16* %975, align 2, !tbaa !386
  %977 = insertelement <64 x i16> %972, i16 %976, i32 10
  %978 = extractelement <64 x i32> %922, i32 11
  %979 = sext i32 %978 to i64
  %980 = getelementptr inbounds i16, i16* %54, i64 %979
  %981 = load i16, i16* %980, align 2, !tbaa !386
  %982 = insertelement <64 x i16> %977, i16 %981, i32 11
  %983 = extractelement <64 x i32> %922, i32 12
  %984 = sext i32 %983 to i64
  %985 = getelementptr inbounds i16, i16* %54, i64 %984
  %986 = load i16, i16* %985, align 2, !tbaa !386
  %987 = insertelement <64 x i16> %982, i16 %986, i32 12
  %988 = extractelement <64 x i32> %922, i32 13
  %989 = sext i32 %988 to i64
  %990 = getelementptr inbounds i16, i16* %54, i64 %989
  %991 = load i16, i16* %990, align 2, !tbaa !386
  %992 = insertelement <64 x i16> %987, i16 %991, i32 13
  %993 = extractelement <64 x i32> %922, i32 14
  %994 = sext i32 %993 to i64
  %995 = getelementptr inbounds i16, i16* %54, i64 %994
  %996 = load i16, i16* %995, align 2, !tbaa !386
  %997 = insertelement <64 x i16> %992, i16 %996, i32 14
  %998 = extractelement <64 x i32> %922, i32 15
  %999 = sext i32 %998 to i64
  %1000 = getelementptr inbounds i16, i16* %54, i64 %999
  %1001 = load i16, i16* %1000, align 2, !tbaa !386
  %1002 = insertelement <64 x i16> %997, i16 %1001, i32 15
  %1003 = extractelement <64 x i32> %922, i32 16
  %1004 = sext i32 %1003 to i64
  %1005 = getelementptr inbounds i16, i16* %54, i64 %1004
  %1006 = load i16, i16* %1005, align 2, !tbaa !386
  %1007 = insertelement <64 x i16> %1002, i16 %1006, i32 16
  %1008 = extractelement <64 x i32> %922, i32 17
  %1009 = sext i32 %1008 to i64
  %1010 = getelementptr inbounds i16, i16* %54, i64 %1009
  %1011 = load i16, i16* %1010, align 2, !tbaa !386
  %1012 = insertelement <64 x i16> %1007, i16 %1011, i32 17
  %1013 = extractelement <64 x i32> %922, i32 18
  %1014 = sext i32 %1013 to i64
  %1015 = getelementptr inbounds i16, i16* %54, i64 %1014
  %1016 = load i16, i16* %1015, align 2, !tbaa !386
  %1017 = insertelement <64 x i16> %1012, i16 %1016, i32 18
  %1018 = extractelement <64 x i32> %922, i32 19
  %1019 = sext i32 %1018 to i64
  %1020 = getelementptr inbounds i16, i16* %54, i64 %1019
  %1021 = load i16, i16* %1020, align 2, !tbaa !386
  %1022 = insertelement <64 x i16> %1017, i16 %1021, i32 19
  %1023 = extractelement <64 x i32> %922, i32 20
  %1024 = sext i32 %1023 to i64
  %1025 = getelementptr inbounds i16, i16* %54, i64 %1024
  %1026 = load i16, i16* %1025, align 2, !tbaa !386
  %1027 = insertelement <64 x i16> %1022, i16 %1026, i32 20
  %1028 = extractelement <64 x i32> %922, i32 21
  %1029 = sext i32 %1028 to i64
  %1030 = getelementptr inbounds i16, i16* %54, i64 %1029
  %1031 = load i16, i16* %1030, align 2, !tbaa !386
  %1032 = insertelement <64 x i16> %1027, i16 %1031, i32 21
  %1033 = extractelement <64 x i32> %922, i32 22
  %1034 = sext i32 %1033 to i64
  %1035 = getelementptr inbounds i16, i16* %54, i64 %1034
  %1036 = load i16, i16* %1035, align 2, !tbaa !386
  %1037 = insertelement <64 x i16> %1032, i16 %1036, i32 22
  %1038 = extractelement <64 x i32> %922, i32 23
  %1039 = sext i32 %1038 to i64
  %1040 = getelementptr inbounds i16, i16* %54, i64 %1039
  %1041 = load i16, i16* %1040, align 2, !tbaa !386
  %1042 = insertelement <64 x i16> %1037, i16 %1041, i32 23
  %1043 = extractelement <64 x i32> %922, i32 24
  %1044 = sext i32 %1043 to i64
  %1045 = getelementptr inbounds i16, i16* %54, i64 %1044
  %1046 = load i16, i16* %1045, align 2, !tbaa !386
  %1047 = insertelement <64 x i16> %1042, i16 %1046, i32 24
  %1048 = extractelement <64 x i32> %922, i32 25
  %1049 = sext i32 %1048 to i64
  %1050 = getelementptr inbounds i16, i16* %54, i64 %1049
  %1051 = load i16, i16* %1050, align 2, !tbaa !386
  %1052 = insertelement <64 x i16> %1047, i16 %1051, i32 25
  %1053 = extractelement <64 x i32> %922, i32 26
  %1054 = sext i32 %1053 to i64
  %1055 = getelementptr inbounds i16, i16* %54, i64 %1054
  %1056 = load i16, i16* %1055, align 2, !tbaa !386
  %1057 = insertelement <64 x i16> %1052, i16 %1056, i32 26
  %1058 = extractelement <64 x i32> %922, i32 27
  %1059 = sext i32 %1058 to i64
  %1060 = getelementptr inbounds i16, i16* %54, i64 %1059
  %1061 = load i16, i16* %1060, align 2, !tbaa !386
  %1062 = insertelement <64 x i16> %1057, i16 %1061, i32 27
  %1063 = extractelement <64 x i32> %922, i32 28
  %1064 = sext i32 %1063 to i64
  %1065 = getelementptr inbounds i16, i16* %54, i64 %1064
  %1066 = load i16, i16* %1065, align 2, !tbaa !386
  %1067 = insertelement <64 x i16> %1062, i16 %1066, i32 28
  %1068 = extractelement <64 x i32> %922, i32 29
  %1069 = sext i32 %1068 to i64
  %1070 = getelementptr inbounds i16, i16* %54, i64 %1069
  %1071 = load i16, i16* %1070, align 2, !tbaa !386
  %1072 = insertelement <64 x i16> %1067, i16 %1071, i32 29
  %1073 = extractelement <64 x i32> %922, i32 30
  %1074 = sext i32 %1073 to i64
  %1075 = getelementptr inbounds i16, i16* %54, i64 %1074
  %1076 = load i16, i16* %1075, align 2, !tbaa !386
  %1077 = insertelement <64 x i16> %1072, i16 %1076, i32 30
  %1078 = extractelement <64 x i32> %922, i32 31
  %1079 = sext i32 %1078 to i64
  %1080 = getelementptr inbounds i16, i16* %54, i64 %1079
  %1081 = load i16, i16* %1080, align 2, !tbaa !386
  %1082 = insertelement <64 x i16> %1077, i16 %1081, i32 31
  %1083 = extractelement <64 x i32> %922, i32 32
  %1084 = sext i32 %1083 to i64
  %1085 = getelementptr inbounds i16, i16* %54, i64 %1084
  %1086 = load i16, i16* %1085, align 2, !tbaa !386
  %1087 = insertelement <64 x i16> %1082, i16 %1086, i32 32
  %1088 = extractelement <64 x i32> %922, i32 33
  %1089 = sext i32 %1088 to i64
  %1090 = getelementptr inbounds i16, i16* %54, i64 %1089
  %1091 = load i16, i16* %1090, align 2, !tbaa !386
  %1092 = insertelement <64 x i16> %1087, i16 %1091, i32 33
  %1093 = extractelement <64 x i32> %922, i32 34
  %1094 = sext i32 %1093 to i64
  %1095 = getelementptr inbounds i16, i16* %54, i64 %1094
  %1096 = load i16, i16* %1095, align 2, !tbaa !386
  %1097 = insertelement <64 x i16> %1092, i16 %1096, i32 34
  %1098 = extractelement <64 x i32> %922, i32 35
  %1099 = sext i32 %1098 to i64
  %1100 = getelementptr inbounds i16, i16* %54, i64 %1099
  %1101 = load i16, i16* %1100, align 2, !tbaa !386
  %1102 = insertelement <64 x i16> %1097, i16 %1101, i32 35
  %1103 = extractelement <64 x i32> %922, i32 36
  %1104 = sext i32 %1103 to i64
  %1105 = getelementptr inbounds i16, i16* %54, i64 %1104
  %1106 = load i16, i16* %1105, align 2, !tbaa !386
  %1107 = insertelement <64 x i16> %1102, i16 %1106, i32 36
  %1108 = extractelement <64 x i32> %922, i32 37
  %1109 = sext i32 %1108 to i64
  %1110 = getelementptr inbounds i16, i16* %54, i64 %1109
  %1111 = load i16, i16* %1110, align 2, !tbaa !386
  %1112 = insertelement <64 x i16> %1107, i16 %1111, i32 37
  %1113 = extractelement <64 x i32> %922, i32 38
  %1114 = sext i32 %1113 to i64
  %1115 = getelementptr inbounds i16, i16* %54, i64 %1114
  %1116 = load i16, i16* %1115, align 2, !tbaa !386
  %1117 = insertelement <64 x i16> %1112, i16 %1116, i32 38
  %1118 = extractelement <64 x i32> %922, i32 39
  %1119 = sext i32 %1118 to i64
  %1120 = getelementptr inbounds i16, i16* %54, i64 %1119
  %1121 = load i16, i16* %1120, align 2, !tbaa !386
  %1122 = insertelement <64 x i16> %1117, i16 %1121, i32 39
  %1123 = extractelement <64 x i32> %922, i32 40
  %1124 = sext i32 %1123 to i64
  %1125 = getelementptr inbounds i16, i16* %54, i64 %1124
  %1126 = load i16, i16* %1125, align 2, !tbaa !386
  %1127 = insertelement <64 x i16> %1122, i16 %1126, i32 40
  %1128 = extractelement <64 x i32> %922, i32 41
  %1129 = sext i32 %1128 to i64
  %1130 = getelementptr inbounds i16, i16* %54, i64 %1129
  %1131 = load i16, i16* %1130, align 2, !tbaa !386
  %1132 = insertelement <64 x i16> %1127, i16 %1131, i32 41
  %1133 = extractelement <64 x i32> %922, i32 42
  %1134 = sext i32 %1133 to i64
  %1135 = getelementptr inbounds i16, i16* %54, i64 %1134
  %1136 = load i16, i16* %1135, align 2, !tbaa !386
  %1137 = insertelement <64 x i16> %1132, i16 %1136, i32 42
  %1138 = extractelement <64 x i32> %922, i32 43
  %1139 = sext i32 %1138 to i64
  %1140 = getelementptr inbounds i16, i16* %54, i64 %1139
  %1141 = load i16, i16* %1140, align 2, !tbaa !386
  %1142 = insertelement <64 x i16> %1137, i16 %1141, i32 43
  %1143 = extractelement <64 x i32> %922, i32 44
  %1144 = sext i32 %1143 to i64
  %1145 = getelementptr inbounds i16, i16* %54, i64 %1144
  %1146 = load i16, i16* %1145, align 2, !tbaa !386
  %1147 = insertelement <64 x i16> %1142, i16 %1146, i32 44
  %1148 = extractelement <64 x i32> %922, i32 45
  %1149 = sext i32 %1148 to i64
  %1150 = getelementptr inbounds i16, i16* %54, i64 %1149
  %1151 = load i16, i16* %1150, align 2, !tbaa !386
  %1152 = insertelement <64 x i16> %1147, i16 %1151, i32 45
  %1153 = extractelement <64 x i32> %922, i32 46
  %1154 = sext i32 %1153 to i64
  %1155 = getelementptr inbounds i16, i16* %54, i64 %1154
  %1156 = load i16, i16* %1155, align 2, !tbaa !386
  %1157 = insertelement <64 x i16> %1152, i16 %1156, i32 46
  %1158 = extractelement <64 x i32> %922, i32 47
  %1159 = sext i32 %1158 to i64
  %1160 = getelementptr inbounds i16, i16* %54, i64 %1159
  %1161 = load i16, i16* %1160, align 2, !tbaa !386
  %1162 = insertelement <64 x i16> %1157, i16 %1161, i32 47
  %1163 = extractelement <64 x i32> %922, i32 48
  %1164 = sext i32 %1163 to i64
  %1165 = getelementptr inbounds i16, i16* %54, i64 %1164
  %1166 = load i16, i16* %1165, align 2, !tbaa !386
  %1167 = insertelement <64 x i16> %1162, i16 %1166, i32 48
  %1168 = extractelement <64 x i32> %922, i32 49
  %1169 = sext i32 %1168 to i64
  %1170 = getelementptr inbounds i16, i16* %54, i64 %1169
  %1171 = load i16, i16* %1170, align 2, !tbaa !386
  %1172 = insertelement <64 x i16> %1167, i16 %1171, i32 49
  %1173 = extractelement <64 x i32> %922, i32 50
  %1174 = sext i32 %1173 to i64
  %1175 = getelementptr inbounds i16, i16* %54, i64 %1174
  %1176 = load i16, i16* %1175, align 2, !tbaa !386
  %1177 = insertelement <64 x i16> %1172, i16 %1176, i32 50
  %1178 = extractelement <64 x i32> %922, i32 51
  %1179 = sext i32 %1178 to i64
  %1180 = getelementptr inbounds i16, i16* %54, i64 %1179
  %1181 = load i16, i16* %1180, align 2, !tbaa !386
  %1182 = insertelement <64 x i16> %1177, i16 %1181, i32 51
  %1183 = extractelement <64 x i32> %922, i32 52
  %1184 = sext i32 %1183 to i64
  %1185 = getelementptr inbounds i16, i16* %54, i64 %1184
  %1186 = load i16, i16* %1185, align 2, !tbaa !386
  %1187 = insertelement <64 x i16> %1182, i16 %1186, i32 52
  %1188 = extractelement <64 x i32> %922, i32 53
  %1189 = sext i32 %1188 to i64
  %1190 = getelementptr inbounds i16, i16* %54, i64 %1189
  %1191 = load i16, i16* %1190, align 2, !tbaa !386
  %1192 = insertelement <64 x i16> %1187, i16 %1191, i32 53
  %1193 = extractelement <64 x i32> %922, i32 54
  %1194 = sext i32 %1193 to i64
  %1195 = getelementptr inbounds i16, i16* %54, i64 %1194
  %1196 = load i16, i16* %1195, align 2, !tbaa !386
  %1197 = insertelement <64 x i16> %1192, i16 %1196, i32 54
  %1198 = extractelement <64 x i32> %922, i32 55
  %1199 = sext i32 %1198 to i64
  %1200 = getelementptr inbounds i16, i16* %54, i64 %1199
  %1201 = load i16, i16* %1200, align 2, !tbaa !386
  %1202 = insertelement <64 x i16> %1197, i16 %1201, i32 55
  %1203 = extractelement <64 x i32> %922, i32 56
  %1204 = sext i32 %1203 to i64
  %1205 = getelementptr inbounds i16, i16* %54, i64 %1204
  %1206 = load i16, i16* %1205, align 2, !tbaa !386
  %1207 = insertelement <64 x i16> %1202, i16 %1206, i32 56
  %1208 = extractelement <64 x i32> %922, i32 57
  %1209 = sext i32 %1208 to i64
  %1210 = getelementptr inbounds i16, i16* %54, i64 %1209
  %1211 = load i16, i16* %1210, align 2, !tbaa !386
  %1212 = insertelement <64 x i16> %1207, i16 %1211, i32 57
  %1213 = extractelement <64 x i32> %922, i32 58
  %1214 = sext i32 %1213 to i64
  %1215 = getelementptr inbounds i16, i16* %54, i64 %1214
  %1216 = load i16, i16* %1215, align 2, !tbaa !386
  %1217 = insertelement <64 x i16> %1212, i16 %1216, i32 58
  %1218 = extractelement <64 x i32> %922, i32 59
  %1219 = sext i32 %1218 to i64
  %1220 = getelementptr inbounds i16, i16* %54, i64 %1219
  %1221 = load i16, i16* %1220, align 2, !tbaa !386
  %1222 = insertelement <64 x i16> %1217, i16 %1221, i32 59
  %1223 = extractelement <64 x i32> %922, i32 60
  %1224 = sext i32 %1223 to i64
  %1225 = getelementptr inbounds i16, i16* %54, i64 %1224
  %1226 = load i16, i16* %1225, align 2, !tbaa !386
  %1227 = insertelement <64 x i16> %1222, i16 %1226, i32 60
  %1228 = extractelement <64 x i32> %922, i32 61
  %1229 = sext i32 %1228 to i64
  %1230 = getelementptr inbounds i16, i16* %54, i64 %1229
  %1231 = load i16, i16* %1230, align 2, !tbaa !386
  %1232 = insertelement <64 x i16> %1227, i16 %1231, i32 61
  %1233 = extractelement <64 x i32> %922, i32 62
  %1234 = sext i32 %1233 to i64
  %1235 = getelementptr inbounds i16, i16* %54, i64 %1234
  %1236 = load i16, i16* %1235, align 2, !tbaa !386
  %1237 = insertelement <64 x i16> %1232, i16 %1236, i32 62
  %1238 = extractelement <64 x i32> %922, i32 63
  %1239 = sext i32 %1238 to i64
  %1240 = getelementptr inbounds i16, i16* %54, i64 %1239
  %1241 = load i16, i16* %1240, align 2, !tbaa !386
  %1242 = insertelement <64 x i16> %1237, i16 %1241, i32 63
  %1243 = add nsw <64 x i32> %306, %t238
  %1244 = extractelement <64 x i32> %1243, i32 0
  %1245 = sext i32 %1244 to i64
  %1246 = getelementptr inbounds i16, i16* %54, i64 %1245
  %1247 = load i16, i16* %1246, align 2, !tbaa !386
  %1248 = insertelement <64 x i16> undef, i16 %1247, i32 0
  %1249 = extractelement <64 x i32> %1243, i32 1
  %1250 = sext i32 %1249 to i64
  %1251 = getelementptr inbounds i16, i16* %54, i64 %1250
  %1252 = load i16, i16* %1251, align 2, !tbaa !386
  %1253 = insertelement <64 x i16> %1248, i16 %1252, i32 1
  %1254 = extractelement <64 x i32> %1243, i32 2
  %1255 = sext i32 %1254 to i64
  %1256 = getelementptr inbounds i16, i16* %54, i64 %1255
  %1257 = load i16, i16* %1256, align 2, !tbaa !386
  %1258 = insertelement <64 x i16> %1253, i16 %1257, i32 2
  %1259 = extractelement <64 x i32> %1243, i32 3
  %1260 = sext i32 %1259 to i64
  %1261 = getelementptr inbounds i16, i16* %54, i64 %1260
  %1262 = load i16, i16* %1261, align 2, !tbaa !386
  %1263 = insertelement <64 x i16> %1258, i16 %1262, i32 3
  %1264 = extractelement <64 x i32> %1243, i32 4
  %1265 = sext i32 %1264 to i64
  %1266 = getelementptr inbounds i16, i16* %54, i64 %1265
  %1267 = load i16, i16* %1266, align 2, !tbaa !386
  %1268 = insertelement <64 x i16> %1263, i16 %1267, i32 4
  %1269 = extractelement <64 x i32> %1243, i32 5
  %1270 = sext i32 %1269 to i64
  %1271 = getelementptr inbounds i16, i16* %54, i64 %1270
  %1272 = load i16, i16* %1271, align 2, !tbaa !386
  %1273 = insertelement <64 x i16> %1268, i16 %1272, i32 5
  %1274 = extractelement <64 x i32> %1243, i32 6
  %1275 = sext i32 %1274 to i64
  %1276 = getelementptr inbounds i16, i16* %54, i64 %1275
  %1277 = load i16, i16* %1276, align 2, !tbaa !386
  %1278 = insertelement <64 x i16> %1273, i16 %1277, i32 6
  %1279 = extractelement <64 x i32> %1243, i32 7
  %1280 = sext i32 %1279 to i64
  %1281 = getelementptr inbounds i16, i16* %54, i64 %1280
  %1282 = load i16, i16* %1281, align 2, !tbaa !386
  %1283 = insertelement <64 x i16> %1278, i16 %1282, i32 7
  %1284 = extractelement <64 x i32> %1243, i32 8
  %1285 = sext i32 %1284 to i64
  %1286 = getelementptr inbounds i16, i16* %54, i64 %1285
  %1287 = load i16, i16* %1286, align 2, !tbaa !386
  %1288 = insertelement <64 x i16> %1283, i16 %1287, i32 8
  %1289 = extractelement <64 x i32> %1243, i32 9
  %1290 = sext i32 %1289 to i64
  %1291 = getelementptr inbounds i16, i16* %54, i64 %1290
  %1292 = load i16, i16* %1291, align 2, !tbaa !386
  %1293 = insertelement <64 x i16> %1288, i16 %1292, i32 9
  %1294 = extractelement <64 x i32> %1243, i32 10
  %1295 = sext i32 %1294 to i64
  %1296 = getelementptr inbounds i16, i16* %54, i64 %1295
  %1297 = load i16, i16* %1296, align 2, !tbaa !386
  %1298 = insertelement <64 x i16> %1293, i16 %1297, i32 10
  %1299 = extractelement <64 x i32> %1243, i32 11
  %1300 = sext i32 %1299 to i64
  %1301 = getelementptr inbounds i16, i16* %54, i64 %1300
  %1302 = load i16, i16* %1301, align 2, !tbaa !386
  %1303 = insertelement <64 x i16> %1298, i16 %1302, i32 11
  %1304 = extractelement <64 x i32> %1243, i32 12
  %1305 = sext i32 %1304 to i64
  %1306 = getelementptr inbounds i16, i16* %54, i64 %1305
  %1307 = load i16, i16* %1306, align 2, !tbaa !386
  %1308 = insertelement <64 x i16> %1303, i16 %1307, i32 12
  %1309 = extractelement <64 x i32> %1243, i32 13
  %1310 = sext i32 %1309 to i64
  %1311 = getelementptr inbounds i16, i16* %54, i64 %1310
  %1312 = load i16, i16* %1311, align 2, !tbaa !386
  %1313 = insertelement <64 x i16> %1308, i16 %1312, i32 13
  %1314 = extractelement <64 x i32> %1243, i32 14
  %1315 = sext i32 %1314 to i64
  %1316 = getelementptr inbounds i16, i16* %54, i64 %1315
  %1317 = load i16, i16* %1316, align 2, !tbaa !386
  %1318 = insertelement <64 x i16> %1313, i16 %1317, i32 14
  %1319 = extractelement <64 x i32> %1243, i32 15
  %1320 = sext i32 %1319 to i64
  %1321 = getelementptr inbounds i16, i16* %54, i64 %1320
  %1322 = load i16, i16* %1321, align 2, !tbaa !386
  %1323 = insertelement <64 x i16> %1318, i16 %1322, i32 15
  %1324 = extractelement <64 x i32> %1243, i32 16
  %1325 = sext i32 %1324 to i64
  %1326 = getelementptr inbounds i16, i16* %54, i64 %1325
  %1327 = load i16, i16* %1326, align 2, !tbaa !386
  %1328 = insertelement <64 x i16> %1323, i16 %1327, i32 16
  %1329 = extractelement <64 x i32> %1243, i32 17
  %1330 = sext i32 %1329 to i64
  %1331 = getelementptr inbounds i16, i16* %54, i64 %1330
  %1332 = load i16, i16* %1331, align 2, !tbaa !386
  %1333 = insertelement <64 x i16> %1328, i16 %1332, i32 17
  %1334 = extractelement <64 x i32> %1243, i32 18
  %1335 = sext i32 %1334 to i64
  %1336 = getelementptr inbounds i16, i16* %54, i64 %1335
  %1337 = load i16, i16* %1336, align 2, !tbaa !386
  %1338 = insertelement <64 x i16> %1333, i16 %1337, i32 18
  %1339 = extractelement <64 x i32> %1243, i32 19
  %1340 = sext i32 %1339 to i64
  %1341 = getelementptr inbounds i16, i16* %54, i64 %1340
  %1342 = load i16, i16* %1341, align 2, !tbaa !386
  %1343 = insertelement <64 x i16> %1338, i16 %1342, i32 19
  %1344 = extractelement <64 x i32> %1243, i32 20
  %1345 = sext i32 %1344 to i64
  %1346 = getelementptr inbounds i16, i16* %54, i64 %1345
  %1347 = load i16, i16* %1346, align 2, !tbaa !386
  %1348 = insertelement <64 x i16> %1343, i16 %1347, i32 20
  %1349 = extractelement <64 x i32> %1243, i32 21
  %1350 = sext i32 %1349 to i64
  %1351 = getelementptr inbounds i16, i16* %54, i64 %1350
  %1352 = load i16, i16* %1351, align 2, !tbaa !386
  %1353 = insertelement <64 x i16> %1348, i16 %1352, i32 21
  %1354 = extractelement <64 x i32> %1243, i32 22
  %1355 = sext i32 %1354 to i64
  %1356 = getelementptr inbounds i16, i16* %54, i64 %1355
  %1357 = load i16, i16* %1356, align 2, !tbaa !386
  %1358 = insertelement <64 x i16> %1353, i16 %1357, i32 22
  %1359 = extractelement <64 x i32> %1243, i32 23
  %1360 = sext i32 %1359 to i64
  %1361 = getelementptr inbounds i16, i16* %54, i64 %1360
  %1362 = load i16, i16* %1361, align 2, !tbaa !386
  %1363 = insertelement <64 x i16> %1358, i16 %1362, i32 23
  %1364 = extractelement <64 x i32> %1243, i32 24
  %1365 = sext i32 %1364 to i64
  %1366 = getelementptr inbounds i16, i16* %54, i64 %1365
  %1367 = load i16, i16* %1366, align 2, !tbaa !386
  %1368 = insertelement <64 x i16> %1363, i16 %1367, i32 24
  %1369 = extractelement <64 x i32> %1243, i32 25
  %1370 = sext i32 %1369 to i64
  %1371 = getelementptr inbounds i16, i16* %54, i64 %1370
  %1372 = load i16, i16* %1371, align 2, !tbaa !386
  %1373 = insertelement <64 x i16> %1368, i16 %1372, i32 25
  %1374 = extractelement <64 x i32> %1243, i32 26
  %1375 = sext i32 %1374 to i64
  %1376 = getelementptr inbounds i16, i16* %54, i64 %1375
  %1377 = load i16, i16* %1376, align 2, !tbaa !386
  %1378 = insertelement <64 x i16> %1373, i16 %1377, i32 26
  %1379 = extractelement <64 x i32> %1243, i32 27
  %1380 = sext i32 %1379 to i64
  %1381 = getelementptr inbounds i16, i16* %54, i64 %1380
  %1382 = load i16, i16* %1381, align 2, !tbaa !386
  %1383 = insertelement <64 x i16> %1378, i16 %1382, i32 27
  %1384 = extractelement <64 x i32> %1243, i32 28
  %1385 = sext i32 %1384 to i64
  %1386 = getelementptr inbounds i16, i16* %54, i64 %1385
  %1387 = load i16, i16* %1386, align 2, !tbaa !386
  %1388 = insertelement <64 x i16> %1383, i16 %1387, i32 28
  %1389 = extractelement <64 x i32> %1243, i32 29
  %1390 = sext i32 %1389 to i64
  %1391 = getelementptr inbounds i16, i16* %54, i64 %1390
  %1392 = load i16, i16* %1391, align 2, !tbaa !386
  %1393 = insertelement <64 x i16> %1388, i16 %1392, i32 29
  %1394 = extractelement <64 x i32> %1243, i32 30
  %1395 = sext i32 %1394 to i64
  %1396 = getelementptr inbounds i16, i16* %54, i64 %1395
  %1397 = load i16, i16* %1396, align 2, !tbaa !386
  %1398 = insertelement <64 x i16> %1393, i16 %1397, i32 30
  %1399 = extractelement <64 x i32> %1243, i32 31
  %1400 = sext i32 %1399 to i64
  %1401 = getelementptr inbounds i16, i16* %54, i64 %1400
  %1402 = load i16, i16* %1401, align 2, !tbaa !386
  %1403 = insertelement <64 x i16> %1398, i16 %1402, i32 31
  %1404 = extractelement <64 x i32> %1243, i32 32
  %1405 = sext i32 %1404 to i64
  %1406 = getelementptr inbounds i16, i16* %54, i64 %1405
  %1407 = load i16, i16* %1406, align 2, !tbaa !386
  %1408 = insertelement <64 x i16> %1403, i16 %1407, i32 32
  %1409 = extractelement <64 x i32> %1243, i32 33
  %1410 = sext i32 %1409 to i64
  %1411 = getelementptr inbounds i16, i16* %54, i64 %1410
  %1412 = load i16, i16* %1411, align 2, !tbaa !386
  %1413 = insertelement <64 x i16> %1408, i16 %1412, i32 33
  %1414 = extractelement <64 x i32> %1243, i32 34
  %1415 = sext i32 %1414 to i64
  %1416 = getelementptr inbounds i16, i16* %54, i64 %1415
  %1417 = load i16, i16* %1416, align 2, !tbaa !386
  %1418 = insertelement <64 x i16> %1413, i16 %1417, i32 34
  %1419 = extractelement <64 x i32> %1243, i32 35
  %1420 = sext i32 %1419 to i64
  %1421 = getelementptr inbounds i16, i16* %54, i64 %1420
  %1422 = load i16, i16* %1421, align 2, !tbaa !386
  %1423 = insertelement <64 x i16> %1418, i16 %1422, i32 35
  %1424 = extractelement <64 x i32> %1243, i32 36
  %1425 = sext i32 %1424 to i64
  %1426 = getelementptr inbounds i16, i16* %54, i64 %1425
  %1427 = load i16, i16* %1426, align 2, !tbaa !386
  %1428 = insertelement <64 x i16> %1423, i16 %1427, i32 36
  %1429 = extractelement <64 x i32> %1243, i32 37
  %1430 = sext i32 %1429 to i64
  %1431 = getelementptr inbounds i16, i16* %54, i64 %1430
  %1432 = load i16, i16* %1431, align 2, !tbaa !386
  %1433 = insertelement <64 x i16> %1428, i16 %1432, i32 37
  %1434 = extractelement <64 x i32> %1243, i32 38
  %1435 = sext i32 %1434 to i64
  %1436 = getelementptr inbounds i16, i16* %54, i64 %1435
  %1437 = load i16, i16* %1436, align 2, !tbaa !386
  %1438 = insertelement <64 x i16> %1433, i16 %1437, i32 38
  %1439 = extractelement <64 x i32> %1243, i32 39
  %1440 = sext i32 %1439 to i64
  %1441 = getelementptr inbounds i16, i16* %54, i64 %1440
  %1442 = load i16, i16* %1441, align 2, !tbaa !386
  %1443 = insertelement <64 x i16> %1438, i16 %1442, i32 39
  %1444 = extractelement <64 x i32> %1243, i32 40
  %1445 = sext i32 %1444 to i64
  %1446 = getelementptr inbounds i16, i16* %54, i64 %1445
  %1447 = load i16, i16* %1446, align 2, !tbaa !386
  %1448 = insertelement <64 x i16> %1443, i16 %1447, i32 40
  %1449 = extractelement <64 x i32> %1243, i32 41
  %1450 = sext i32 %1449 to i64
  %1451 = getelementptr inbounds i16, i16* %54, i64 %1450
  %1452 = load i16, i16* %1451, align 2, !tbaa !386
  %1453 = insertelement <64 x i16> %1448, i16 %1452, i32 41
  %1454 = extractelement <64 x i32> %1243, i32 42
  %1455 = sext i32 %1454 to i64
  %1456 = getelementptr inbounds i16, i16* %54, i64 %1455
  %1457 = load i16, i16* %1456, align 2, !tbaa !386
  %1458 = insertelement <64 x i16> %1453, i16 %1457, i32 42
  %1459 = extractelement <64 x i32> %1243, i32 43
  %1460 = sext i32 %1459 to i64
  %1461 = getelementptr inbounds i16, i16* %54, i64 %1460
  %1462 = load i16, i16* %1461, align 2, !tbaa !386
  %1463 = insertelement <64 x i16> %1458, i16 %1462, i32 43
  %1464 = extractelement <64 x i32> %1243, i32 44
  %1465 = sext i32 %1464 to i64
  %1466 = getelementptr inbounds i16, i16* %54, i64 %1465
  %1467 = load i16, i16* %1466, align 2, !tbaa !386
  %1468 = insertelement <64 x i16> %1463, i16 %1467, i32 44
  %1469 = extractelement <64 x i32> %1243, i32 45
  %1470 = sext i32 %1469 to i64
  %1471 = getelementptr inbounds i16, i16* %54, i64 %1470
  %1472 = load i16, i16* %1471, align 2, !tbaa !386
  %1473 = insertelement <64 x i16> %1468, i16 %1472, i32 45
  %1474 = extractelement <64 x i32> %1243, i32 46
  %1475 = sext i32 %1474 to i64
  %1476 = getelementptr inbounds i16, i16* %54, i64 %1475
  %1477 = load i16, i16* %1476, align 2, !tbaa !386
  %1478 = insertelement <64 x i16> %1473, i16 %1477, i32 46
  %1479 = extractelement <64 x i32> %1243, i32 47
  %1480 = sext i32 %1479 to i64
  %1481 = getelementptr inbounds i16, i16* %54, i64 %1480
  %1482 = load i16, i16* %1481, align 2, !tbaa !386
  %1483 = insertelement <64 x i16> %1478, i16 %1482, i32 47
  %1484 = extractelement <64 x i32> %1243, i32 48
  %1485 = sext i32 %1484 to i64
  %1486 = getelementptr inbounds i16, i16* %54, i64 %1485
  %1487 = load i16, i16* %1486, align 2, !tbaa !386
  %1488 = insertelement <64 x i16> %1483, i16 %1487, i32 48
  %1489 = extractelement <64 x i32> %1243, i32 49
  %1490 = sext i32 %1489 to i64
  %1491 = getelementptr inbounds i16, i16* %54, i64 %1490
  %1492 = load i16, i16* %1491, align 2, !tbaa !386
  %1493 = insertelement <64 x i16> %1488, i16 %1492, i32 49
  %1494 = extractelement <64 x i32> %1243, i32 50
  %1495 = sext i32 %1494 to i64
  %1496 = getelementptr inbounds i16, i16* %54, i64 %1495
  %1497 = load i16, i16* %1496, align 2, !tbaa !386
  %1498 = insertelement <64 x i16> %1493, i16 %1497, i32 50
  %1499 = extractelement <64 x i32> %1243, i32 51
  %1500 = sext i32 %1499 to i64
  %1501 = getelementptr inbounds i16, i16* %54, i64 %1500
  %1502 = load i16, i16* %1501, align 2, !tbaa !386
  %1503 = insertelement <64 x i16> %1498, i16 %1502, i32 51
  %1504 = extractelement <64 x i32> %1243, i32 52
  %1505 = sext i32 %1504 to i64
  %1506 = getelementptr inbounds i16, i16* %54, i64 %1505
  %1507 = load i16, i16* %1506, align 2, !tbaa !386
  %1508 = insertelement <64 x i16> %1503, i16 %1507, i32 52
  %1509 = extractelement <64 x i32> %1243, i32 53
  %1510 = sext i32 %1509 to i64
  %1511 = getelementptr inbounds i16, i16* %54, i64 %1510
  %1512 = load i16, i16* %1511, align 2, !tbaa !386
  %1513 = insertelement <64 x i16> %1508, i16 %1512, i32 53
  %1514 = extractelement <64 x i32> %1243, i32 54
  %1515 = sext i32 %1514 to i64
  %1516 = getelementptr inbounds i16, i16* %54, i64 %1515
  %1517 = load i16, i16* %1516, align 2, !tbaa !386
  %1518 = insertelement <64 x i16> %1513, i16 %1517, i32 54
  %1519 = extractelement <64 x i32> %1243, i32 55
  %1520 = sext i32 %1519 to i64
  %1521 = getelementptr inbounds i16, i16* %54, i64 %1520
  %1522 = load i16, i16* %1521, align 2, !tbaa !386
  %1523 = insertelement <64 x i16> %1518, i16 %1522, i32 55
  %1524 = extractelement <64 x i32> %1243, i32 56
  %1525 = sext i32 %1524 to i64
  %1526 = getelementptr inbounds i16, i16* %54, i64 %1525
  %1527 = load i16, i16* %1526, align 2, !tbaa !386
  %1528 = insertelement <64 x i16> %1523, i16 %1527, i32 56
  %1529 = extractelement <64 x i32> %1243, i32 57
  %1530 = sext i32 %1529 to i64
  %1531 = getelementptr inbounds i16, i16* %54, i64 %1530
  %1532 = load i16, i16* %1531, align 2, !tbaa !386
  %1533 = insertelement <64 x i16> %1528, i16 %1532, i32 57
  %1534 = extractelement <64 x i32> %1243, i32 58
  %1535 = sext i32 %1534 to i64
  %1536 = getelementptr inbounds i16, i16* %54, i64 %1535
  %1537 = load i16, i16* %1536, align 2, !tbaa !386
  %1538 = insertelement <64 x i16> %1533, i16 %1537, i32 58
  %1539 = extractelement <64 x i32> %1243, i32 59
  %1540 = sext i32 %1539 to i64
  %1541 = getelementptr inbounds i16, i16* %54, i64 %1540
  %1542 = load i16, i16* %1541, align 2, !tbaa !386
  %1543 = insertelement <64 x i16> %1538, i16 %1542, i32 59
  %1544 = extractelement <64 x i32> %1243, i32 60
  %1545 = sext i32 %1544 to i64
  %1546 = getelementptr inbounds i16, i16* %54, i64 %1545
  %1547 = load i16, i16* %1546, align 2, !tbaa !386
  %1548 = insertelement <64 x i16> %1543, i16 %1547, i32 60
  %1549 = extractelement <64 x i32> %1243, i32 61
  %1550 = sext i32 %1549 to i64
  %1551 = getelementptr inbounds i16, i16* %54, i64 %1550
  %1552 = load i16, i16* %1551, align 2, !tbaa !386
  %1553 = insertelement <64 x i16> %1548, i16 %1552, i32 61
  %1554 = extractelement <64 x i32> %1243, i32 62
  %1555 = sext i32 %1554 to i64
  %1556 = getelementptr inbounds i16, i16* %54, i64 %1555
  %1557 = load i16, i16* %1556, align 2, !tbaa !386
  %1558 = insertelement <64 x i16> %1553, i16 %1557, i32 62
  %1559 = extractelement <64 x i32> %1243, i32 63
  %1560 = sext i32 %1559 to i64
  %1561 = getelementptr inbounds i16, i16* %54, i64 %1560
  %1562 = load i16, i16* %1561, align 2, !tbaa !386
  %1563 = insertelement <64 x i16> %1558, i16 %1562, i32 63
  %1564 = add nsw <64 x i32> %378, %t238
  %1565 = extractelement <64 x i32> %1564, i32 0
  %1566 = sext i32 %1565 to i64
  %1567 = getelementptr inbounds i16, i16* %54, i64 %1566
  %1568 = load i16, i16* %1567, align 2, !tbaa !386
  %1569 = insertelement <64 x i16> undef, i16 %1568, i32 0
  %1570 = extractelement <64 x i32> %1564, i32 1
  %1571 = sext i32 %1570 to i64
  %1572 = getelementptr inbounds i16, i16* %54, i64 %1571
  %1573 = load i16, i16* %1572, align 2, !tbaa !386
  %1574 = insertelement <64 x i16> %1569, i16 %1573, i32 1
  %1575 = extractelement <64 x i32> %1564, i32 2
  %1576 = sext i32 %1575 to i64
  %1577 = getelementptr inbounds i16, i16* %54, i64 %1576
  %1578 = load i16, i16* %1577, align 2, !tbaa !386
  %1579 = insertelement <64 x i16> %1574, i16 %1578, i32 2
  %1580 = extractelement <64 x i32> %1564, i32 3
  %1581 = sext i32 %1580 to i64
  %1582 = getelementptr inbounds i16, i16* %54, i64 %1581
  %1583 = load i16, i16* %1582, align 2, !tbaa !386
  %1584 = insertelement <64 x i16> %1579, i16 %1583, i32 3
  %1585 = extractelement <64 x i32> %1564, i32 4
  %1586 = sext i32 %1585 to i64
  %1587 = getelementptr inbounds i16, i16* %54, i64 %1586
  %1588 = load i16, i16* %1587, align 2, !tbaa !386
  %1589 = insertelement <64 x i16> %1584, i16 %1588, i32 4
  %1590 = extractelement <64 x i32> %1564, i32 5
  %1591 = sext i32 %1590 to i64
  %1592 = getelementptr inbounds i16, i16* %54, i64 %1591
  %1593 = load i16, i16* %1592, align 2, !tbaa !386
  %1594 = insertelement <64 x i16> %1589, i16 %1593, i32 5
  %1595 = extractelement <64 x i32> %1564, i32 6
  %1596 = sext i32 %1595 to i64
  %1597 = getelementptr inbounds i16, i16* %54, i64 %1596
  %1598 = load i16, i16* %1597, align 2, !tbaa !386
  %1599 = insertelement <64 x i16> %1594, i16 %1598, i32 6
  %1600 = extractelement <64 x i32> %1564, i32 7
  %1601 = sext i32 %1600 to i64
  %1602 = getelementptr inbounds i16, i16* %54, i64 %1601
  %1603 = load i16, i16* %1602, align 2, !tbaa !386
  %1604 = insertelement <64 x i16> %1599, i16 %1603, i32 7
  %1605 = extractelement <64 x i32> %1564, i32 8
  %1606 = sext i32 %1605 to i64
  %1607 = getelementptr inbounds i16, i16* %54, i64 %1606
  %1608 = load i16, i16* %1607, align 2, !tbaa !386
  %1609 = insertelement <64 x i16> %1604, i16 %1608, i32 8
  %1610 = extractelement <64 x i32> %1564, i32 9
  %1611 = sext i32 %1610 to i64
  %1612 = getelementptr inbounds i16, i16* %54, i64 %1611
  %1613 = load i16, i16* %1612, align 2, !tbaa !386
  %1614 = insertelement <64 x i16> %1609, i16 %1613, i32 9
  %1615 = extractelement <64 x i32> %1564, i32 10
  %1616 = sext i32 %1615 to i64
  %1617 = getelementptr inbounds i16, i16* %54, i64 %1616
  %1618 = load i16, i16* %1617, align 2, !tbaa !386
  %1619 = insertelement <64 x i16> %1614, i16 %1618, i32 10
  %1620 = extractelement <64 x i32> %1564, i32 11
  %1621 = sext i32 %1620 to i64
  %1622 = getelementptr inbounds i16, i16* %54, i64 %1621
  %1623 = load i16, i16* %1622, align 2, !tbaa !386
  %1624 = insertelement <64 x i16> %1619, i16 %1623, i32 11
  %1625 = extractelement <64 x i32> %1564, i32 12
  %1626 = sext i32 %1625 to i64
  %1627 = getelementptr inbounds i16, i16* %54, i64 %1626
  %1628 = load i16, i16* %1627, align 2, !tbaa !386
  %1629 = insertelement <64 x i16> %1624, i16 %1628, i32 12
  %1630 = extractelement <64 x i32> %1564, i32 13
  %1631 = sext i32 %1630 to i64
  %1632 = getelementptr inbounds i16, i16* %54, i64 %1631
  %1633 = load i16, i16* %1632, align 2, !tbaa !386
  %1634 = insertelement <64 x i16> %1629, i16 %1633, i32 13
  %1635 = extractelement <64 x i32> %1564, i32 14
  %1636 = sext i32 %1635 to i64
  %1637 = getelementptr inbounds i16, i16* %54, i64 %1636
  %1638 = load i16, i16* %1637, align 2, !tbaa !386
  %1639 = insertelement <64 x i16> %1634, i16 %1638, i32 14
  %1640 = extractelement <64 x i32> %1564, i32 15
  %1641 = sext i32 %1640 to i64
  %1642 = getelementptr inbounds i16, i16* %54, i64 %1641
  %1643 = load i16, i16* %1642, align 2, !tbaa !386
  %1644 = insertelement <64 x i16> %1639, i16 %1643, i32 15
  %1645 = extractelement <64 x i32> %1564, i32 16
  %1646 = sext i32 %1645 to i64
  %1647 = getelementptr inbounds i16, i16* %54, i64 %1646
  %1648 = load i16, i16* %1647, align 2, !tbaa !386
  %1649 = insertelement <64 x i16> %1644, i16 %1648, i32 16
  %1650 = extractelement <64 x i32> %1564, i32 17
  %1651 = sext i32 %1650 to i64
  %1652 = getelementptr inbounds i16, i16* %54, i64 %1651
  %1653 = load i16, i16* %1652, align 2, !tbaa !386
  %1654 = insertelement <64 x i16> %1649, i16 %1653, i32 17
  %1655 = extractelement <64 x i32> %1564, i32 18
  %1656 = sext i32 %1655 to i64
  %1657 = getelementptr inbounds i16, i16* %54, i64 %1656
  %1658 = load i16, i16* %1657, align 2, !tbaa !386
  %1659 = insertelement <64 x i16> %1654, i16 %1658, i32 18
  %1660 = extractelement <64 x i32> %1564, i32 19
  %1661 = sext i32 %1660 to i64
  %1662 = getelementptr inbounds i16, i16* %54, i64 %1661
  %1663 = load i16, i16* %1662, align 2, !tbaa !386
  %1664 = insertelement <64 x i16> %1659, i16 %1663, i32 19
  %1665 = extractelement <64 x i32> %1564, i32 20
  %1666 = sext i32 %1665 to i64
  %1667 = getelementptr inbounds i16, i16* %54, i64 %1666
  %1668 = load i16, i16* %1667, align 2, !tbaa !386
  %1669 = insertelement <64 x i16> %1664, i16 %1668, i32 20
  %1670 = extractelement <64 x i32> %1564, i32 21
  %1671 = sext i32 %1670 to i64
  %1672 = getelementptr inbounds i16, i16* %54, i64 %1671
  %1673 = load i16, i16* %1672, align 2, !tbaa !386
  %1674 = insertelement <64 x i16> %1669, i16 %1673, i32 21
  %1675 = extractelement <64 x i32> %1564, i32 22
  %1676 = sext i32 %1675 to i64
  %1677 = getelementptr inbounds i16, i16* %54, i64 %1676
  %1678 = load i16, i16* %1677, align 2, !tbaa !386
  %1679 = insertelement <64 x i16> %1674, i16 %1678, i32 22
  %1680 = extractelement <64 x i32> %1564, i32 23
  %1681 = sext i32 %1680 to i64
  %1682 = getelementptr inbounds i16, i16* %54, i64 %1681
  %1683 = load i16, i16* %1682, align 2, !tbaa !386
  %1684 = insertelement <64 x i16> %1679, i16 %1683, i32 23
  %1685 = extractelement <64 x i32> %1564, i32 24
  %1686 = sext i32 %1685 to i64
  %1687 = getelementptr inbounds i16, i16* %54, i64 %1686
  %1688 = load i16, i16* %1687, align 2, !tbaa !386
  %1689 = insertelement <64 x i16> %1684, i16 %1688, i32 24
  %1690 = extractelement <64 x i32> %1564, i32 25
  %1691 = sext i32 %1690 to i64
  %1692 = getelementptr inbounds i16, i16* %54, i64 %1691
  %1693 = load i16, i16* %1692, align 2, !tbaa !386
  %1694 = insertelement <64 x i16> %1689, i16 %1693, i32 25
  %1695 = extractelement <64 x i32> %1564, i32 26
  %1696 = sext i32 %1695 to i64
  %1697 = getelementptr inbounds i16, i16* %54, i64 %1696
  %1698 = load i16, i16* %1697, align 2, !tbaa !386
  %1699 = insertelement <64 x i16> %1694, i16 %1698, i32 26
  %1700 = extractelement <64 x i32> %1564, i32 27
  %1701 = sext i32 %1700 to i64
  %1702 = getelementptr inbounds i16, i16* %54, i64 %1701
  %1703 = load i16, i16* %1702, align 2, !tbaa !386
  %1704 = insertelement <64 x i16> %1699, i16 %1703, i32 27
  %1705 = extractelement <64 x i32> %1564, i32 28
  %1706 = sext i32 %1705 to i64
  %1707 = getelementptr inbounds i16, i16* %54, i64 %1706
  %1708 = load i16, i16* %1707, align 2, !tbaa !386
  %1709 = insertelement <64 x i16> %1704, i16 %1708, i32 28
  %1710 = extractelement <64 x i32> %1564, i32 29
  %1711 = sext i32 %1710 to i64
  %1712 = getelementptr inbounds i16, i16* %54, i64 %1711
  %1713 = load i16, i16* %1712, align 2, !tbaa !386
  %1714 = insertelement <64 x i16> %1709, i16 %1713, i32 29
  %1715 = extractelement <64 x i32> %1564, i32 30
  %1716 = sext i32 %1715 to i64
  %1717 = getelementptr inbounds i16, i16* %54, i64 %1716
  %1718 = load i16, i16* %1717, align 2, !tbaa !386
  %1719 = insertelement <64 x i16> %1714, i16 %1718, i32 30
  %1720 = extractelement <64 x i32> %1564, i32 31
  %1721 = sext i32 %1720 to i64
  %1722 = getelementptr inbounds i16, i16* %54, i64 %1721
  %1723 = load i16, i16* %1722, align 2, !tbaa !386
  %1724 = insertelement <64 x i16> %1719, i16 %1723, i32 31
  %1725 = extractelement <64 x i32> %1564, i32 32
  %1726 = sext i32 %1725 to i64
  %1727 = getelementptr inbounds i16, i16* %54, i64 %1726
  %1728 = load i16, i16* %1727, align 2, !tbaa !386
  %1729 = insertelement <64 x i16> %1724, i16 %1728, i32 32
  %1730 = extractelement <64 x i32> %1564, i32 33
  %1731 = sext i32 %1730 to i64
  %1732 = getelementptr inbounds i16, i16* %54, i64 %1731
  %1733 = load i16, i16* %1732, align 2, !tbaa !386
  %1734 = insertelement <64 x i16> %1729, i16 %1733, i32 33
  %1735 = extractelement <64 x i32> %1564, i32 34
  %1736 = sext i32 %1735 to i64
  %1737 = getelementptr inbounds i16, i16* %54, i64 %1736
  %1738 = load i16, i16* %1737, align 2, !tbaa !386
  %1739 = insertelement <64 x i16> %1734, i16 %1738, i32 34
  %1740 = extractelement <64 x i32> %1564, i32 35
  %1741 = sext i32 %1740 to i64
  %1742 = getelementptr inbounds i16, i16* %54, i64 %1741
  %1743 = load i16, i16* %1742, align 2, !tbaa !386
  %1744 = insertelement <64 x i16> %1739, i16 %1743, i32 35
  %1745 = extractelement <64 x i32> %1564, i32 36
  %1746 = sext i32 %1745 to i64
  %1747 = getelementptr inbounds i16, i16* %54, i64 %1746
  %1748 = load i16, i16* %1747, align 2, !tbaa !386
  %1749 = insertelement <64 x i16> %1744, i16 %1748, i32 36
  %1750 = extractelement <64 x i32> %1564, i32 37
  %1751 = sext i32 %1750 to i64
  %1752 = getelementptr inbounds i16, i16* %54, i64 %1751
  %1753 = load i16, i16* %1752, align 2, !tbaa !386
  %1754 = insertelement <64 x i16> %1749, i16 %1753, i32 37
  %1755 = extractelement <64 x i32> %1564, i32 38
  %1756 = sext i32 %1755 to i64
  %1757 = getelementptr inbounds i16, i16* %54, i64 %1756
  %1758 = load i16, i16* %1757, align 2, !tbaa !386
  %1759 = insertelement <64 x i16> %1754, i16 %1758, i32 38
  %1760 = extractelement <64 x i32> %1564, i32 39
  %1761 = sext i32 %1760 to i64
  %1762 = getelementptr inbounds i16, i16* %54, i64 %1761
  %1763 = load i16, i16* %1762, align 2, !tbaa !386
  %1764 = insertelement <64 x i16> %1759, i16 %1763, i32 39
  %1765 = extractelement <64 x i32> %1564, i32 40
  %1766 = sext i32 %1765 to i64
  %1767 = getelementptr inbounds i16, i16* %54, i64 %1766
  %1768 = load i16, i16* %1767, align 2, !tbaa !386
  %1769 = insertelement <64 x i16> %1764, i16 %1768, i32 40
  %1770 = extractelement <64 x i32> %1564, i32 41
  %1771 = sext i32 %1770 to i64
  %1772 = getelementptr inbounds i16, i16* %54, i64 %1771
  %1773 = load i16, i16* %1772, align 2, !tbaa !386
  %1774 = insertelement <64 x i16> %1769, i16 %1773, i32 41
  %1775 = extractelement <64 x i32> %1564, i32 42
  %1776 = sext i32 %1775 to i64
  %1777 = getelementptr inbounds i16, i16* %54, i64 %1776
  %1778 = load i16, i16* %1777, align 2, !tbaa !386
  %1779 = insertelement <64 x i16> %1774, i16 %1778, i32 42
  %1780 = extractelement <64 x i32> %1564, i32 43
  %1781 = sext i32 %1780 to i64
  %1782 = getelementptr inbounds i16, i16* %54, i64 %1781
  %1783 = load i16, i16* %1782, align 2, !tbaa !386
  %1784 = insertelement <64 x i16> %1779, i16 %1783, i32 43
  %1785 = extractelement <64 x i32> %1564, i32 44
  %1786 = sext i32 %1785 to i64
  %1787 = getelementptr inbounds i16, i16* %54, i64 %1786
  %1788 = load i16, i16* %1787, align 2, !tbaa !386
  %1789 = insertelement <64 x i16> %1784, i16 %1788, i32 44
  %1790 = extractelement <64 x i32> %1564, i32 45
  %1791 = sext i32 %1790 to i64
  %1792 = getelementptr inbounds i16, i16* %54, i64 %1791
  %1793 = load i16, i16* %1792, align 2, !tbaa !386
  %1794 = insertelement <64 x i16> %1789, i16 %1793, i32 45
  %1795 = extractelement <64 x i32> %1564, i32 46
  %1796 = sext i32 %1795 to i64
  %1797 = getelementptr inbounds i16, i16* %54, i64 %1796
  %1798 = load i16, i16* %1797, align 2, !tbaa !386
  %1799 = insertelement <64 x i16> %1794, i16 %1798, i32 46
  %1800 = extractelement <64 x i32> %1564, i32 47
  %1801 = sext i32 %1800 to i64
  %1802 = getelementptr inbounds i16, i16* %54, i64 %1801
  %1803 = load i16, i16* %1802, align 2, !tbaa !386
  %1804 = insertelement <64 x i16> %1799, i16 %1803, i32 47
  %1805 = extractelement <64 x i32> %1564, i32 48
  %1806 = sext i32 %1805 to i64
  %1807 = getelementptr inbounds i16, i16* %54, i64 %1806
  %1808 = load i16, i16* %1807, align 2, !tbaa !386
  %1809 = insertelement <64 x i16> %1804, i16 %1808, i32 48
  %1810 = extractelement <64 x i32> %1564, i32 49
  %1811 = sext i32 %1810 to i64
  %1812 = getelementptr inbounds i16, i16* %54, i64 %1811
  %1813 = load i16, i16* %1812, align 2, !tbaa !386
  %1814 = insertelement <64 x i16> %1809, i16 %1813, i32 49
  %1815 = extractelement <64 x i32> %1564, i32 50
  %1816 = sext i32 %1815 to i64
  %1817 = getelementptr inbounds i16, i16* %54, i64 %1816
  %1818 = load i16, i16* %1817, align 2, !tbaa !386
  %1819 = insertelement <64 x i16> %1814, i16 %1818, i32 50
  %1820 = extractelement <64 x i32> %1564, i32 51
  %1821 = sext i32 %1820 to i64
  %1822 = getelementptr inbounds i16, i16* %54, i64 %1821
  %1823 = load i16, i16* %1822, align 2, !tbaa !386
  %1824 = insertelement <64 x i16> %1819, i16 %1823, i32 51
  %1825 = extractelement <64 x i32> %1564, i32 52
  %1826 = sext i32 %1825 to i64
  %1827 = getelementptr inbounds i16, i16* %54, i64 %1826
  %1828 = load i16, i16* %1827, align 2, !tbaa !386
  %1829 = insertelement <64 x i16> %1824, i16 %1828, i32 52
  %1830 = extractelement <64 x i32> %1564, i32 53
  %1831 = sext i32 %1830 to i64
  %1832 = getelementptr inbounds i16, i16* %54, i64 %1831
  %1833 = load i16, i16* %1832, align 2, !tbaa !386
  %1834 = insertelement <64 x i16> %1829, i16 %1833, i32 53
  %1835 = extractelement <64 x i32> %1564, i32 54
  %1836 = sext i32 %1835 to i64
  %1837 = getelementptr inbounds i16, i16* %54, i64 %1836
  %1838 = load i16, i16* %1837, align 2, !tbaa !386
  %1839 = insertelement <64 x i16> %1834, i16 %1838, i32 54
  %1840 = extractelement <64 x i32> %1564, i32 55
  %1841 = sext i32 %1840 to i64
  %1842 = getelementptr inbounds i16, i16* %54, i64 %1841
  %1843 = load i16, i16* %1842, align 2, !tbaa !386
  %1844 = insertelement <64 x i16> %1839, i16 %1843, i32 55
  %1845 = extractelement <64 x i32> %1564, i32 56
  %1846 = sext i32 %1845 to i64
  %1847 = getelementptr inbounds i16, i16* %54, i64 %1846
  %1848 = load i16, i16* %1847, align 2, !tbaa !386
  %1849 = insertelement <64 x i16> %1844, i16 %1848, i32 56
  %1850 = extractelement <64 x i32> %1564, i32 57
  %1851 = sext i32 %1850 to i64
  %1852 = getelementptr inbounds i16, i16* %54, i64 %1851
  %1853 = load i16, i16* %1852, align 2, !tbaa !386
  %1854 = insertelement <64 x i16> %1849, i16 %1853, i32 57
  %1855 = extractelement <64 x i32> %1564, i32 58
  %1856 = sext i32 %1855 to i64
  %1857 = getelementptr inbounds i16, i16* %54, i64 %1856
  %1858 = load i16, i16* %1857, align 2, !tbaa !386
  %1859 = insertelement <64 x i16> %1854, i16 %1858, i32 58
  %1860 = extractelement <64 x i32> %1564, i32 59
  %1861 = sext i32 %1860 to i64
  %1862 = getelementptr inbounds i16, i16* %54, i64 %1861
  %1863 = load i16, i16* %1862, align 2, !tbaa !386
  %1864 = insertelement <64 x i16> %1859, i16 %1863, i32 59
  %1865 = extractelement <64 x i32> %1564, i32 60
  %1866 = sext i32 %1865 to i64
  %1867 = getelementptr inbounds i16, i16* %54, i64 %1866
  %1868 = load i16, i16* %1867, align 2, !tbaa !386
  %1869 = insertelement <64 x i16> %1864, i16 %1868, i32 60
  %1870 = extractelement <64 x i32> %1564, i32 61
  %1871 = sext i32 %1870 to i64
  %1872 = getelementptr inbounds i16, i16* %54, i64 %1871
  %1873 = load i16, i16* %1872, align 2, !tbaa !386
  %1874 = insertelement <64 x i16> %1869, i16 %1873, i32 61
  %1875 = extractelement <64 x i32> %1564, i32 62
  %1876 = sext i32 %1875 to i64
  %1877 = getelementptr inbounds i16, i16* %54, i64 %1876
  %1878 = load i16, i16* %1877, align 2, !tbaa !386
  %1879 = insertelement <64 x i16> %1874, i16 %1878, i32 62
  %1880 = extractelement <64 x i32> %1564, i32 63
  %1881 = sext i32 %1880 to i64
  %1882 = getelementptr inbounds i16, i16* %54, i64 %1881
  %1883 = load i16, i16* %1882, align 2, !tbaa !386
  %1884 = insertelement <64 x i16> %1879, i16 %1883, i32 63
  %1885 = add nsw <64 x i32> %450, %t238
  %1886 = extractelement <64 x i32> %1885, i32 0
  %1887 = sext i32 %1886 to i64
  %1888 = getelementptr inbounds i16, i16* %54, i64 %1887
  %1889 = load i16, i16* %1888, align 2, !tbaa !386
  %1890 = insertelement <64 x i16> undef, i16 %1889, i32 0
  %1891 = extractelement <64 x i32> %1885, i32 1
  %1892 = sext i32 %1891 to i64
  %1893 = getelementptr inbounds i16, i16* %54, i64 %1892
  %1894 = load i16, i16* %1893, align 2, !tbaa !386
  %1895 = insertelement <64 x i16> %1890, i16 %1894, i32 1
  %1896 = extractelement <64 x i32> %1885, i32 2
  %1897 = sext i32 %1896 to i64
  %1898 = getelementptr inbounds i16, i16* %54, i64 %1897
  %1899 = load i16, i16* %1898, align 2, !tbaa !386
  %1900 = insertelement <64 x i16> %1895, i16 %1899, i32 2
  %1901 = extractelement <64 x i32> %1885, i32 3
  %1902 = sext i32 %1901 to i64
  %1903 = getelementptr inbounds i16, i16* %54, i64 %1902
  %1904 = load i16, i16* %1903, align 2, !tbaa !386
  %1905 = insertelement <64 x i16> %1900, i16 %1904, i32 3
  %1906 = extractelement <64 x i32> %1885, i32 4
  %1907 = sext i32 %1906 to i64
  %1908 = getelementptr inbounds i16, i16* %54, i64 %1907
  %1909 = load i16, i16* %1908, align 2, !tbaa !386
  %1910 = insertelement <64 x i16> %1905, i16 %1909, i32 4
  %1911 = extractelement <64 x i32> %1885, i32 5
  %1912 = sext i32 %1911 to i64
  %1913 = getelementptr inbounds i16, i16* %54, i64 %1912
  %1914 = load i16, i16* %1913, align 2, !tbaa !386
  %1915 = insertelement <64 x i16> %1910, i16 %1914, i32 5
  %1916 = extractelement <64 x i32> %1885, i32 6
  %1917 = sext i32 %1916 to i64
  %1918 = getelementptr inbounds i16, i16* %54, i64 %1917
  %1919 = load i16, i16* %1918, align 2, !tbaa !386
  %1920 = insertelement <64 x i16> %1915, i16 %1919, i32 6
  %1921 = extractelement <64 x i32> %1885, i32 7
  %1922 = sext i32 %1921 to i64
  %1923 = getelementptr inbounds i16, i16* %54, i64 %1922
  %1924 = load i16, i16* %1923, align 2, !tbaa !386
  %1925 = insertelement <64 x i16> %1920, i16 %1924, i32 7
  %1926 = extractelement <64 x i32> %1885, i32 8
  %1927 = sext i32 %1926 to i64
  %1928 = getelementptr inbounds i16, i16* %54, i64 %1927
  %1929 = load i16, i16* %1928, align 2, !tbaa !386
  %1930 = insertelement <64 x i16> %1925, i16 %1929, i32 8
  %1931 = extractelement <64 x i32> %1885, i32 9
  %1932 = sext i32 %1931 to i64
  %1933 = getelementptr inbounds i16, i16* %54, i64 %1932
  %1934 = load i16, i16* %1933, align 2, !tbaa !386
  %1935 = insertelement <64 x i16> %1930, i16 %1934, i32 9
  %1936 = extractelement <64 x i32> %1885, i32 10
  %1937 = sext i32 %1936 to i64
  %1938 = getelementptr inbounds i16, i16* %54, i64 %1937
  %1939 = load i16, i16* %1938, align 2, !tbaa !386
  %1940 = insertelement <64 x i16> %1935, i16 %1939, i32 10
  %1941 = extractelement <64 x i32> %1885, i32 11
  %1942 = sext i32 %1941 to i64
  %1943 = getelementptr inbounds i16, i16* %54, i64 %1942
  %1944 = load i16, i16* %1943, align 2, !tbaa !386
  %1945 = insertelement <64 x i16> %1940, i16 %1944, i32 11
  %1946 = extractelement <64 x i32> %1885, i32 12
  %1947 = sext i32 %1946 to i64
  %1948 = getelementptr inbounds i16, i16* %54, i64 %1947
  %1949 = load i16, i16* %1948, align 2, !tbaa !386
  %1950 = insertelement <64 x i16> %1945, i16 %1949, i32 12
  %1951 = extractelement <64 x i32> %1885, i32 13
  %1952 = sext i32 %1951 to i64
  %1953 = getelementptr inbounds i16, i16* %54, i64 %1952
  %1954 = load i16, i16* %1953, align 2, !tbaa !386
  %1955 = insertelement <64 x i16> %1950, i16 %1954, i32 13
  %1956 = extractelement <64 x i32> %1885, i32 14
  %1957 = sext i32 %1956 to i64
  %1958 = getelementptr inbounds i16, i16* %54, i64 %1957
  %1959 = load i16, i16* %1958, align 2, !tbaa !386
  %1960 = insertelement <64 x i16> %1955, i16 %1959, i32 14
  %1961 = extractelement <64 x i32> %1885, i32 15
  %1962 = sext i32 %1961 to i64
  %1963 = getelementptr inbounds i16, i16* %54, i64 %1962
  %1964 = load i16, i16* %1963, align 2, !tbaa !386
  %1965 = insertelement <64 x i16> %1960, i16 %1964, i32 15
  %1966 = extractelement <64 x i32> %1885, i32 16
  %1967 = sext i32 %1966 to i64
  %1968 = getelementptr inbounds i16, i16* %54, i64 %1967
  %1969 = load i16, i16* %1968, align 2, !tbaa !386
  %1970 = insertelement <64 x i16> %1965, i16 %1969, i32 16
  %1971 = extractelement <64 x i32> %1885, i32 17
  %1972 = sext i32 %1971 to i64
  %1973 = getelementptr inbounds i16, i16* %54, i64 %1972
  %1974 = load i16, i16* %1973, align 2, !tbaa !386
  %1975 = insertelement <64 x i16> %1970, i16 %1974, i32 17
  %1976 = extractelement <64 x i32> %1885, i32 18
  %1977 = sext i32 %1976 to i64
  %1978 = getelementptr inbounds i16, i16* %54, i64 %1977
  %1979 = load i16, i16* %1978, align 2, !tbaa !386
  %1980 = insertelement <64 x i16> %1975, i16 %1979, i32 18
  %1981 = extractelement <64 x i32> %1885, i32 19
  %1982 = sext i32 %1981 to i64
  %1983 = getelementptr inbounds i16, i16* %54, i64 %1982
  %1984 = load i16, i16* %1983, align 2, !tbaa !386
  %1985 = insertelement <64 x i16> %1980, i16 %1984, i32 19
  %1986 = extractelement <64 x i32> %1885, i32 20
  %1987 = sext i32 %1986 to i64
  %1988 = getelementptr inbounds i16, i16* %54, i64 %1987
  %1989 = load i16, i16* %1988, align 2, !tbaa !386
  %1990 = insertelement <64 x i16> %1985, i16 %1989, i32 20
  %1991 = extractelement <64 x i32> %1885, i32 21
  %1992 = sext i32 %1991 to i64
  %1993 = getelementptr inbounds i16, i16* %54, i64 %1992
  %1994 = load i16, i16* %1993, align 2, !tbaa !386
  %1995 = insertelement <64 x i16> %1990, i16 %1994, i32 21
  %1996 = extractelement <64 x i32> %1885, i32 22
  %1997 = sext i32 %1996 to i64
  %1998 = getelementptr inbounds i16, i16* %54, i64 %1997
  %1999 = load i16, i16* %1998, align 2, !tbaa !386
  %2000 = insertelement <64 x i16> %1995, i16 %1999, i32 22
  %2001 = extractelement <64 x i32> %1885, i32 23
  %2002 = sext i32 %2001 to i64
  %2003 = getelementptr inbounds i16, i16* %54, i64 %2002
  %2004 = load i16, i16* %2003, align 2, !tbaa !386
  %2005 = insertelement <64 x i16> %2000, i16 %2004, i32 23
  %2006 = extractelement <64 x i32> %1885, i32 24
  %2007 = sext i32 %2006 to i64
  %2008 = getelementptr inbounds i16, i16* %54, i64 %2007
  %2009 = load i16, i16* %2008, align 2, !tbaa !386
  %2010 = insertelement <64 x i16> %2005, i16 %2009, i32 24
  %2011 = extractelement <64 x i32> %1885, i32 25
  %2012 = sext i32 %2011 to i64
  %2013 = getelementptr inbounds i16, i16* %54, i64 %2012
  %2014 = load i16, i16* %2013, align 2, !tbaa !386
  %2015 = insertelement <64 x i16> %2010, i16 %2014, i32 25
  %2016 = extractelement <64 x i32> %1885, i32 26
  %2017 = sext i32 %2016 to i64
  %2018 = getelementptr inbounds i16, i16* %54, i64 %2017
  %2019 = load i16, i16* %2018, align 2, !tbaa !386
  %2020 = insertelement <64 x i16> %2015, i16 %2019, i32 26
  %2021 = extractelement <64 x i32> %1885, i32 27
  %2022 = sext i32 %2021 to i64
  %2023 = getelementptr inbounds i16, i16* %54, i64 %2022
  %2024 = load i16, i16* %2023, align 2, !tbaa !386
  %2025 = insertelement <64 x i16> %2020, i16 %2024, i32 27
  %2026 = extractelement <64 x i32> %1885, i32 28
  %2027 = sext i32 %2026 to i64
  %2028 = getelementptr inbounds i16, i16* %54, i64 %2027
  %2029 = load i16, i16* %2028, align 2, !tbaa !386
  %2030 = insertelement <64 x i16> %2025, i16 %2029, i32 28
  %2031 = extractelement <64 x i32> %1885, i32 29
  %2032 = sext i32 %2031 to i64
  %2033 = getelementptr inbounds i16, i16* %54, i64 %2032
  %2034 = load i16, i16* %2033, align 2, !tbaa !386
  %2035 = insertelement <64 x i16> %2030, i16 %2034, i32 29
  %2036 = extractelement <64 x i32> %1885, i32 30
  %2037 = sext i32 %2036 to i64
  %2038 = getelementptr inbounds i16, i16* %54, i64 %2037
  %2039 = load i16, i16* %2038, align 2, !tbaa !386
  %2040 = insertelement <64 x i16> %2035, i16 %2039, i32 30
  %2041 = extractelement <64 x i32> %1885, i32 31
  %2042 = sext i32 %2041 to i64
  %2043 = getelementptr inbounds i16, i16* %54, i64 %2042
  %2044 = load i16, i16* %2043, align 2, !tbaa !386
  %2045 = insertelement <64 x i16> %2040, i16 %2044, i32 31
  %2046 = extractelement <64 x i32> %1885, i32 32
  %2047 = sext i32 %2046 to i64
  %2048 = getelementptr inbounds i16, i16* %54, i64 %2047
  %2049 = load i16, i16* %2048, align 2, !tbaa !386
  %2050 = insertelement <64 x i16> %2045, i16 %2049, i32 32
  %2051 = extractelement <64 x i32> %1885, i32 33
  %2052 = sext i32 %2051 to i64
  %2053 = getelementptr inbounds i16, i16* %54, i64 %2052
  %2054 = load i16, i16* %2053, align 2, !tbaa !386
  %2055 = insertelement <64 x i16> %2050, i16 %2054, i32 33
  %2056 = extractelement <64 x i32> %1885, i32 34
  %2057 = sext i32 %2056 to i64
  %2058 = getelementptr inbounds i16, i16* %54, i64 %2057
  %2059 = load i16, i16* %2058, align 2, !tbaa !386
  %2060 = insertelement <64 x i16> %2055, i16 %2059, i32 34
  %2061 = extractelement <64 x i32> %1885, i32 35
  %2062 = sext i32 %2061 to i64
  %2063 = getelementptr inbounds i16, i16* %54, i64 %2062
  %2064 = load i16, i16* %2063, align 2, !tbaa !386
  %2065 = insertelement <64 x i16> %2060, i16 %2064, i32 35
  %2066 = extractelement <64 x i32> %1885, i32 36
  %2067 = sext i32 %2066 to i64
  %2068 = getelementptr inbounds i16, i16* %54, i64 %2067
  %2069 = load i16, i16* %2068, align 2, !tbaa !386
  %2070 = insertelement <64 x i16> %2065, i16 %2069, i32 36
  %2071 = extractelement <64 x i32> %1885, i32 37
  %2072 = sext i32 %2071 to i64
  %2073 = getelementptr inbounds i16, i16* %54, i64 %2072
  %2074 = load i16, i16* %2073, align 2, !tbaa !386
  %2075 = insertelement <64 x i16> %2070, i16 %2074, i32 37
  %2076 = extractelement <64 x i32> %1885, i32 38
  %2077 = sext i32 %2076 to i64
  %2078 = getelementptr inbounds i16, i16* %54, i64 %2077
  %2079 = load i16, i16* %2078, align 2, !tbaa !386
  %2080 = insertelement <64 x i16> %2075, i16 %2079, i32 38
  %2081 = extractelement <64 x i32> %1885, i32 39
  %2082 = sext i32 %2081 to i64
  %2083 = getelementptr inbounds i16, i16* %54, i64 %2082
  %2084 = load i16, i16* %2083, align 2, !tbaa !386
  %2085 = insertelement <64 x i16> %2080, i16 %2084, i32 39
  %2086 = extractelement <64 x i32> %1885, i32 40
  %2087 = sext i32 %2086 to i64
  %2088 = getelementptr inbounds i16, i16* %54, i64 %2087
  %2089 = load i16, i16* %2088, align 2, !tbaa !386
  %2090 = insertelement <64 x i16> %2085, i16 %2089, i32 40
  %2091 = extractelement <64 x i32> %1885, i32 41
  %2092 = sext i32 %2091 to i64
  %2093 = getelementptr inbounds i16, i16* %54, i64 %2092
  %2094 = load i16, i16* %2093, align 2, !tbaa !386
  %2095 = insertelement <64 x i16> %2090, i16 %2094, i32 41
  %2096 = extractelement <64 x i32> %1885, i32 42
  %2097 = sext i32 %2096 to i64
  %2098 = getelementptr inbounds i16, i16* %54, i64 %2097
  %2099 = load i16, i16* %2098, align 2, !tbaa !386
  %2100 = insertelement <64 x i16> %2095, i16 %2099, i32 42
  %2101 = extractelement <64 x i32> %1885, i32 43
  %2102 = sext i32 %2101 to i64
  %2103 = getelementptr inbounds i16, i16* %54, i64 %2102
  %2104 = load i16, i16* %2103, align 2, !tbaa !386
  %2105 = insertelement <64 x i16> %2100, i16 %2104, i32 43
  %2106 = extractelement <64 x i32> %1885, i32 44
  %2107 = sext i32 %2106 to i64
  %2108 = getelementptr inbounds i16, i16* %54, i64 %2107
  %2109 = load i16, i16* %2108, align 2, !tbaa !386
  %2110 = insertelement <64 x i16> %2105, i16 %2109, i32 44
  %2111 = extractelement <64 x i32> %1885, i32 45
  %2112 = sext i32 %2111 to i64
  %2113 = getelementptr inbounds i16, i16* %54, i64 %2112
  %2114 = load i16, i16* %2113, align 2, !tbaa !386
  %2115 = insertelement <64 x i16> %2110, i16 %2114, i32 45
  %2116 = extractelement <64 x i32> %1885, i32 46
  %2117 = sext i32 %2116 to i64
  %2118 = getelementptr inbounds i16, i16* %54, i64 %2117
  %2119 = load i16, i16* %2118, align 2, !tbaa !386
  %2120 = insertelement <64 x i16> %2115, i16 %2119, i32 46
  %2121 = extractelement <64 x i32> %1885, i32 47
  %2122 = sext i32 %2121 to i64
  %2123 = getelementptr inbounds i16, i16* %54, i64 %2122
  %2124 = load i16, i16* %2123, align 2, !tbaa !386
  %2125 = insertelement <64 x i16> %2120, i16 %2124, i32 47
  %2126 = extractelement <64 x i32> %1885, i32 48
  %2127 = sext i32 %2126 to i64
  %2128 = getelementptr inbounds i16, i16* %54, i64 %2127
  %2129 = load i16, i16* %2128, align 2, !tbaa !386
  %2130 = insertelement <64 x i16> %2125, i16 %2129, i32 48
  %2131 = extractelement <64 x i32> %1885, i32 49
  %2132 = sext i32 %2131 to i64
  %2133 = getelementptr inbounds i16, i16* %54, i64 %2132
  %2134 = load i16, i16* %2133, align 2, !tbaa !386
  %2135 = insertelement <64 x i16> %2130, i16 %2134, i32 49
  %2136 = extractelement <64 x i32> %1885, i32 50
  %2137 = sext i32 %2136 to i64
  %2138 = getelementptr inbounds i16, i16* %54, i64 %2137
  %2139 = load i16, i16* %2138, align 2, !tbaa !386
  %2140 = insertelement <64 x i16> %2135, i16 %2139, i32 50
  %2141 = extractelement <64 x i32> %1885, i32 51
  %2142 = sext i32 %2141 to i64
  %2143 = getelementptr inbounds i16, i16* %54, i64 %2142
  %2144 = load i16, i16* %2143, align 2, !tbaa !386
  %2145 = insertelement <64 x i16> %2140, i16 %2144, i32 51
  %2146 = extractelement <64 x i32> %1885, i32 52
  %2147 = sext i32 %2146 to i64
  %2148 = getelementptr inbounds i16, i16* %54, i64 %2147
  %2149 = load i16, i16* %2148, align 2, !tbaa !386
  %2150 = insertelement <64 x i16> %2145, i16 %2149, i32 52
  %2151 = extractelement <64 x i32> %1885, i32 53
  %2152 = sext i32 %2151 to i64
  %2153 = getelementptr inbounds i16, i16* %54, i64 %2152
  %2154 = load i16, i16* %2153, align 2, !tbaa !386
  %2155 = insertelement <64 x i16> %2150, i16 %2154, i32 53
  %2156 = extractelement <64 x i32> %1885, i32 54
  %2157 = sext i32 %2156 to i64
  %2158 = getelementptr inbounds i16, i16* %54, i64 %2157
  %2159 = load i16, i16* %2158, align 2, !tbaa !386
  %2160 = insertelement <64 x i16> %2155, i16 %2159, i32 54
  %2161 = extractelement <64 x i32> %1885, i32 55
  %2162 = sext i32 %2161 to i64
  %2163 = getelementptr inbounds i16, i16* %54, i64 %2162
  %2164 = load i16, i16* %2163, align 2, !tbaa !386
  %2165 = insertelement <64 x i16> %2160, i16 %2164, i32 55
  %2166 = extractelement <64 x i32> %1885, i32 56
  %2167 = sext i32 %2166 to i64
  %2168 = getelementptr inbounds i16, i16* %54, i64 %2167
  %2169 = load i16, i16* %2168, align 2, !tbaa !386
  %2170 = insertelement <64 x i16> %2165, i16 %2169, i32 56
  %2171 = extractelement <64 x i32> %1885, i32 57
  %2172 = sext i32 %2171 to i64
  %2173 = getelementptr inbounds i16, i16* %54, i64 %2172
  %2174 = load i16, i16* %2173, align 2, !tbaa !386
  %2175 = insertelement <64 x i16> %2170, i16 %2174, i32 57
  %2176 = extractelement <64 x i32> %1885, i32 58
  %2177 = sext i32 %2176 to i64
  %2178 = getelementptr inbounds i16, i16* %54, i64 %2177
  %2179 = load i16, i16* %2178, align 2, !tbaa !386
  %2180 = insertelement <64 x i16> %2175, i16 %2179, i32 58
  %2181 = extractelement <64 x i32> %1885, i32 59
  %2182 = sext i32 %2181 to i64
  %2183 = getelementptr inbounds i16, i16* %54, i64 %2182
  %2184 = load i16, i16* %2183, align 2, !tbaa !386
  %2185 = insertelement <64 x i16> %2180, i16 %2184, i32 59
  %2186 = extractelement <64 x i32> %1885, i32 60
  %2187 = sext i32 %2186 to i64
  %2188 = getelementptr inbounds i16, i16* %54, i64 %2187
  %2189 = load i16, i16* %2188, align 2, !tbaa !386
  %2190 = insertelement <64 x i16> %2185, i16 %2189, i32 60
  %2191 = extractelement <64 x i32> %1885, i32 61
  %2192 = sext i32 %2191 to i64
  %2193 = getelementptr inbounds i16, i16* %54, i64 %2192
  %2194 = load i16, i16* %2193, align 2, !tbaa !386
  %2195 = insertelement <64 x i16> %2190, i16 %2194, i32 61
  %2196 = extractelement <64 x i32> %1885, i32 62
  %2197 = sext i32 %2196 to i64
  %2198 = getelementptr inbounds i16, i16* %54, i64 %2197
  %2199 = load i16, i16* %2198, align 2, !tbaa !386
  %2200 = insertelement <64 x i16> %2195, i16 %2199, i32 62
  %2201 = extractelement <64 x i32> %1885, i32 63
  %2202 = sext i32 %2201 to i64
  %2203 = getelementptr inbounds i16, i16* %54, i64 %2202
  %2204 = load i16, i16* %2203, align 2, !tbaa !386
  %2205 = insertelement <64 x i16> %2200, i16 %2204, i32 63
  %2206 = add nsw <64 x i32> %522, %t238
  %2207 = extractelement <64 x i32> %2206, i32 0
  %2208 = sext i32 %2207 to i64
  %2209 = getelementptr inbounds i16, i16* %54, i64 %2208
  %2210 = load i16, i16* %2209, align 2, !tbaa !386
  %2211 = insertelement <64 x i16> undef, i16 %2210, i32 0
  %2212 = extractelement <64 x i32> %2206, i32 1
  %2213 = sext i32 %2212 to i64
  %2214 = getelementptr inbounds i16, i16* %54, i64 %2213
  %2215 = load i16, i16* %2214, align 2, !tbaa !386
  %2216 = insertelement <64 x i16> %2211, i16 %2215, i32 1
  %2217 = extractelement <64 x i32> %2206, i32 2
  %2218 = sext i32 %2217 to i64
  %2219 = getelementptr inbounds i16, i16* %54, i64 %2218
  %2220 = load i16, i16* %2219, align 2, !tbaa !386
  %2221 = insertelement <64 x i16> %2216, i16 %2220, i32 2
  %2222 = extractelement <64 x i32> %2206, i32 3
  %2223 = sext i32 %2222 to i64
  %2224 = getelementptr inbounds i16, i16* %54, i64 %2223
  %2225 = load i16, i16* %2224, align 2, !tbaa !386
  %2226 = insertelement <64 x i16> %2221, i16 %2225, i32 3
  %2227 = extractelement <64 x i32> %2206, i32 4
  %2228 = sext i32 %2227 to i64
  %2229 = getelementptr inbounds i16, i16* %54, i64 %2228
  %2230 = load i16, i16* %2229, align 2, !tbaa !386
  %2231 = insertelement <64 x i16> %2226, i16 %2230, i32 4
  %2232 = extractelement <64 x i32> %2206, i32 5
  %2233 = sext i32 %2232 to i64
  %2234 = getelementptr inbounds i16, i16* %54, i64 %2233
  %2235 = load i16, i16* %2234, align 2, !tbaa !386
  %2236 = insertelement <64 x i16> %2231, i16 %2235, i32 5
  %2237 = extractelement <64 x i32> %2206, i32 6
  %2238 = sext i32 %2237 to i64
  %2239 = getelementptr inbounds i16, i16* %54, i64 %2238
  %2240 = load i16, i16* %2239, align 2, !tbaa !386
  %2241 = insertelement <64 x i16> %2236, i16 %2240, i32 6
  %2242 = extractelement <64 x i32> %2206, i32 7
  %2243 = sext i32 %2242 to i64
  %2244 = getelementptr inbounds i16, i16* %54, i64 %2243
  %2245 = load i16, i16* %2244, align 2, !tbaa !386
  %2246 = insertelement <64 x i16> %2241, i16 %2245, i32 7
  %2247 = extractelement <64 x i32> %2206, i32 8
  %2248 = sext i32 %2247 to i64
  %2249 = getelementptr inbounds i16, i16* %54, i64 %2248
  %2250 = load i16, i16* %2249, align 2, !tbaa !386
  %2251 = insertelement <64 x i16> %2246, i16 %2250, i32 8
  %2252 = extractelement <64 x i32> %2206, i32 9
  %2253 = sext i32 %2252 to i64
  %2254 = getelementptr inbounds i16, i16* %54, i64 %2253
  %2255 = load i16, i16* %2254, align 2, !tbaa !386
  %2256 = insertelement <64 x i16> %2251, i16 %2255, i32 9
  %2257 = extractelement <64 x i32> %2206, i32 10
  %2258 = sext i32 %2257 to i64
  %2259 = getelementptr inbounds i16, i16* %54, i64 %2258
  %2260 = load i16, i16* %2259, align 2, !tbaa !386
  %2261 = insertelement <64 x i16> %2256, i16 %2260, i32 10
  %2262 = extractelement <64 x i32> %2206, i32 11
  %2263 = sext i32 %2262 to i64
  %2264 = getelementptr inbounds i16, i16* %54, i64 %2263
  %2265 = load i16, i16* %2264, align 2, !tbaa !386
  %2266 = insertelement <64 x i16> %2261, i16 %2265, i32 11
  %2267 = extractelement <64 x i32> %2206, i32 12
  %2268 = sext i32 %2267 to i64
  %2269 = getelementptr inbounds i16, i16* %54, i64 %2268
  %2270 = load i16, i16* %2269, align 2, !tbaa !386
  %2271 = insertelement <64 x i16> %2266, i16 %2270, i32 12
  %2272 = extractelement <64 x i32> %2206, i32 13
  %2273 = sext i32 %2272 to i64
  %2274 = getelementptr inbounds i16, i16* %54, i64 %2273
  %2275 = load i16, i16* %2274, align 2, !tbaa !386
  %2276 = insertelement <64 x i16> %2271, i16 %2275, i32 13
  %2277 = extractelement <64 x i32> %2206, i32 14
  %2278 = sext i32 %2277 to i64
  %2279 = getelementptr inbounds i16, i16* %54, i64 %2278
  %2280 = load i16, i16* %2279, align 2, !tbaa !386
  %2281 = insertelement <64 x i16> %2276, i16 %2280, i32 14
  %2282 = extractelement <64 x i32> %2206, i32 15
  %2283 = sext i32 %2282 to i64
  %2284 = getelementptr inbounds i16, i16* %54, i64 %2283
  %2285 = load i16, i16* %2284, align 2, !tbaa !386
  %2286 = insertelement <64 x i16> %2281, i16 %2285, i32 15
  %2287 = extractelement <64 x i32> %2206, i32 16
  %2288 = sext i32 %2287 to i64
  %2289 = getelementptr inbounds i16, i16* %54, i64 %2288
  %2290 = load i16, i16* %2289, align 2, !tbaa !386
  %2291 = insertelement <64 x i16> %2286, i16 %2290, i32 16
  %2292 = extractelement <64 x i32> %2206, i32 17
  %2293 = sext i32 %2292 to i64
  %2294 = getelementptr inbounds i16, i16* %54, i64 %2293
  %2295 = load i16, i16* %2294, align 2, !tbaa !386
  %2296 = insertelement <64 x i16> %2291, i16 %2295, i32 17
  %2297 = extractelement <64 x i32> %2206, i32 18
  %2298 = sext i32 %2297 to i64
  %2299 = getelementptr inbounds i16, i16* %54, i64 %2298
  %2300 = load i16, i16* %2299, align 2, !tbaa !386
  %2301 = insertelement <64 x i16> %2296, i16 %2300, i32 18
  %2302 = extractelement <64 x i32> %2206, i32 19
  %2303 = sext i32 %2302 to i64
  %2304 = getelementptr inbounds i16, i16* %54, i64 %2303
  %2305 = load i16, i16* %2304, align 2, !tbaa !386
  %2306 = insertelement <64 x i16> %2301, i16 %2305, i32 19
  %2307 = extractelement <64 x i32> %2206, i32 20
  %2308 = sext i32 %2307 to i64
  %2309 = getelementptr inbounds i16, i16* %54, i64 %2308
  %2310 = load i16, i16* %2309, align 2, !tbaa !386
  %2311 = insertelement <64 x i16> %2306, i16 %2310, i32 20
  %2312 = extractelement <64 x i32> %2206, i32 21
  %2313 = sext i32 %2312 to i64
  %2314 = getelementptr inbounds i16, i16* %54, i64 %2313
  %2315 = load i16, i16* %2314, align 2, !tbaa !386
  %2316 = insertelement <64 x i16> %2311, i16 %2315, i32 21
  %2317 = extractelement <64 x i32> %2206, i32 22
  %2318 = sext i32 %2317 to i64
  %2319 = getelementptr inbounds i16, i16* %54, i64 %2318
  %2320 = load i16, i16* %2319, align 2, !tbaa !386
  %2321 = insertelement <64 x i16> %2316, i16 %2320, i32 22
  %2322 = extractelement <64 x i32> %2206, i32 23
  %2323 = sext i32 %2322 to i64
  %2324 = getelementptr inbounds i16, i16* %54, i64 %2323
  %2325 = load i16, i16* %2324, align 2, !tbaa !386
  %2326 = insertelement <64 x i16> %2321, i16 %2325, i32 23
  %2327 = extractelement <64 x i32> %2206, i32 24
  %2328 = sext i32 %2327 to i64
  %2329 = getelementptr inbounds i16, i16* %54, i64 %2328
  %2330 = load i16, i16* %2329, align 2, !tbaa !386
  %2331 = insertelement <64 x i16> %2326, i16 %2330, i32 24
  %2332 = extractelement <64 x i32> %2206, i32 25
  %2333 = sext i32 %2332 to i64
  %2334 = getelementptr inbounds i16, i16* %54, i64 %2333
  %2335 = load i16, i16* %2334, align 2, !tbaa !386
  %2336 = insertelement <64 x i16> %2331, i16 %2335, i32 25
  %2337 = extractelement <64 x i32> %2206, i32 26
  %2338 = sext i32 %2337 to i64
  %2339 = getelementptr inbounds i16, i16* %54, i64 %2338
  %2340 = load i16, i16* %2339, align 2, !tbaa !386
  %2341 = insertelement <64 x i16> %2336, i16 %2340, i32 26
  %2342 = extractelement <64 x i32> %2206, i32 27
  %2343 = sext i32 %2342 to i64
  %2344 = getelementptr inbounds i16, i16* %54, i64 %2343
  %2345 = load i16, i16* %2344, align 2, !tbaa !386
  %2346 = insertelement <64 x i16> %2341, i16 %2345, i32 27
  %2347 = extractelement <64 x i32> %2206, i32 28
  %2348 = sext i32 %2347 to i64
  %2349 = getelementptr inbounds i16, i16* %54, i64 %2348
  %2350 = load i16, i16* %2349, align 2, !tbaa !386
  %2351 = insertelement <64 x i16> %2346, i16 %2350, i32 28
  %2352 = extractelement <64 x i32> %2206, i32 29
  %2353 = sext i32 %2352 to i64
  %2354 = getelementptr inbounds i16, i16* %54, i64 %2353
  %2355 = load i16, i16* %2354, align 2, !tbaa !386
  %2356 = insertelement <64 x i16> %2351, i16 %2355, i32 29
  %2357 = extractelement <64 x i32> %2206, i32 30
  %2358 = sext i32 %2357 to i64
  %2359 = getelementptr inbounds i16, i16* %54, i64 %2358
  %2360 = load i16, i16* %2359, align 2, !tbaa !386
  %2361 = insertelement <64 x i16> %2356, i16 %2360, i32 30
  %2362 = extractelement <64 x i32> %2206, i32 31
  %2363 = sext i32 %2362 to i64
  %2364 = getelementptr inbounds i16, i16* %54, i64 %2363
  %2365 = load i16, i16* %2364, align 2, !tbaa !386
  %2366 = insertelement <64 x i16> %2361, i16 %2365, i32 31
  %2367 = extractelement <64 x i32> %2206, i32 32
  %2368 = sext i32 %2367 to i64
  %2369 = getelementptr inbounds i16, i16* %54, i64 %2368
  %2370 = load i16, i16* %2369, align 2, !tbaa !386
  %2371 = insertelement <64 x i16> %2366, i16 %2370, i32 32
  %2372 = extractelement <64 x i32> %2206, i32 33
  %2373 = sext i32 %2372 to i64
  %2374 = getelementptr inbounds i16, i16* %54, i64 %2373
  %2375 = load i16, i16* %2374, align 2, !tbaa !386
  %2376 = insertelement <64 x i16> %2371, i16 %2375, i32 33
  %2377 = extractelement <64 x i32> %2206, i32 34
  %2378 = sext i32 %2377 to i64
  %2379 = getelementptr inbounds i16, i16* %54, i64 %2378
  %2380 = load i16, i16* %2379, align 2, !tbaa !386
  %2381 = insertelement <64 x i16> %2376, i16 %2380, i32 34
  %2382 = extractelement <64 x i32> %2206, i32 35
  %2383 = sext i32 %2382 to i64
  %2384 = getelementptr inbounds i16, i16* %54, i64 %2383
  %2385 = load i16, i16* %2384, align 2, !tbaa !386
  %2386 = insertelement <64 x i16> %2381, i16 %2385, i32 35
  %2387 = extractelement <64 x i32> %2206, i32 36
  %2388 = sext i32 %2387 to i64
  %2389 = getelementptr inbounds i16, i16* %54, i64 %2388
  %2390 = load i16, i16* %2389, align 2, !tbaa !386
  %2391 = insertelement <64 x i16> %2386, i16 %2390, i32 36
  %2392 = extractelement <64 x i32> %2206, i32 37
  %2393 = sext i32 %2392 to i64
  %2394 = getelementptr inbounds i16, i16* %54, i64 %2393
  %2395 = load i16, i16* %2394, align 2, !tbaa !386
  %2396 = insertelement <64 x i16> %2391, i16 %2395, i32 37
  %2397 = extractelement <64 x i32> %2206, i32 38
  %2398 = sext i32 %2397 to i64
  %2399 = getelementptr inbounds i16, i16* %54, i64 %2398
  %2400 = load i16, i16* %2399, align 2, !tbaa !386
  %2401 = insertelement <64 x i16> %2396, i16 %2400, i32 38
  %2402 = extractelement <64 x i32> %2206, i32 39
  %2403 = sext i32 %2402 to i64
  %2404 = getelementptr inbounds i16, i16* %54, i64 %2403
  %2405 = load i16, i16* %2404, align 2, !tbaa !386
  %2406 = insertelement <64 x i16> %2401, i16 %2405, i32 39
  %2407 = extractelement <64 x i32> %2206, i32 40
  %2408 = sext i32 %2407 to i64
  %2409 = getelementptr inbounds i16, i16* %54, i64 %2408
  %2410 = load i16, i16* %2409, align 2, !tbaa !386
  %2411 = insertelement <64 x i16> %2406, i16 %2410, i32 40
  %2412 = extractelement <64 x i32> %2206, i32 41
  %2413 = sext i32 %2412 to i64
  %2414 = getelementptr inbounds i16, i16* %54, i64 %2413
  %2415 = load i16, i16* %2414, align 2, !tbaa !386
  %2416 = insertelement <64 x i16> %2411, i16 %2415, i32 41
  %2417 = extractelement <64 x i32> %2206, i32 42
  %2418 = sext i32 %2417 to i64
  %2419 = getelementptr inbounds i16, i16* %54, i64 %2418
  %2420 = load i16, i16* %2419, align 2, !tbaa !386
  %2421 = insertelement <64 x i16> %2416, i16 %2420, i32 42
  %2422 = extractelement <64 x i32> %2206, i32 43
  %2423 = sext i32 %2422 to i64
  %2424 = getelementptr inbounds i16, i16* %54, i64 %2423
  %2425 = load i16, i16* %2424, align 2, !tbaa !386
  %2426 = insertelement <64 x i16> %2421, i16 %2425, i32 43
  %2427 = extractelement <64 x i32> %2206, i32 44
  %2428 = sext i32 %2427 to i64
  %2429 = getelementptr inbounds i16, i16* %54, i64 %2428
  %2430 = load i16, i16* %2429, align 2, !tbaa !386
  %2431 = insertelement <64 x i16> %2426, i16 %2430, i32 44
  %2432 = extractelement <64 x i32> %2206, i32 45
  %2433 = sext i32 %2432 to i64
  %2434 = getelementptr inbounds i16, i16* %54, i64 %2433
  %2435 = load i16, i16* %2434, align 2, !tbaa !386
  %2436 = insertelement <64 x i16> %2431, i16 %2435, i32 45
  %2437 = extractelement <64 x i32> %2206, i32 46
  %2438 = sext i32 %2437 to i64
  %2439 = getelementptr inbounds i16, i16* %54, i64 %2438
  %2440 = load i16, i16* %2439, align 2, !tbaa !386
  %2441 = insertelement <64 x i16> %2436, i16 %2440, i32 46
  %2442 = extractelement <64 x i32> %2206, i32 47
  %2443 = sext i32 %2442 to i64
  %2444 = getelementptr inbounds i16, i16* %54, i64 %2443
  %2445 = load i16, i16* %2444, align 2, !tbaa !386
  %2446 = insertelement <64 x i16> %2441, i16 %2445, i32 47
  %2447 = extractelement <64 x i32> %2206, i32 48
  %2448 = sext i32 %2447 to i64
  %2449 = getelementptr inbounds i16, i16* %54, i64 %2448
  %2450 = load i16, i16* %2449, align 2, !tbaa !386
  %2451 = insertelement <64 x i16> %2446, i16 %2450, i32 48
  %2452 = extractelement <64 x i32> %2206, i32 49
  %2453 = sext i32 %2452 to i64
  %2454 = getelementptr inbounds i16, i16* %54, i64 %2453
  %2455 = load i16, i16* %2454, align 2, !tbaa !386
  %2456 = insertelement <64 x i16> %2451, i16 %2455, i32 49
  %2457 = extractelement <64 x i32> %2206, i32 50
  %2458 = sext i32 %2457 to i64
  %2459 = getelementptr inbounds i16, i16* %54, i64 %2458
  %2460 = load i16, i16* %2459, align 2, !tbaa !386
  %2461 = insertelement <64 x i16> %2456, i16 %2460, i32 50
  %2462 = extractelement <64 x i32> %2206, i32 51
  %2463 = sext i32 %2462 to i64
  %2464 = getelementptr inbounds i16, i16* %54, i64 %2463
  %2465 = load i16, i16* %2464, align 2, !tbaa !386
  %2466 = insertelement <64 x i16> %2461, i16 %2465, i32 51
  %2467 = extractelement <64 x i32> %2206, i32 52
  %2468 = sext i32 %2467 to i64
  %2469 = getelementptr inbounds i16, i16* %54, i64 %2468
  %2470 = load i16, i16* %2469, align 2, !tbaa !386
  %2471 = insertelement <64 x i16> %2466, i16 %2470, i32 52
  %2472 = extractelement <64 x i32> %2206, i32 53
  %2473 = sext i32 %2472 to i64
  %2474 = getelementptr inbounds i16, i16* %54, i64 %2473
  %2475 = load i16, i16* %2474, align 2, !tbaa !386
  %2476 = insertelement <64 x i16> %2471, i16 %2475, i32 53
  %2477 = extractelement <64 x i32> %2206, i32 54
  %2478 = sext i32 %2477 to i64
  %2479 = getelementptr inbounds i16, i16* %54, i64 %2478
  %2480 = load i16, i16* %2479, align 2, !tbaa !386
  %2481 = insertelement <64 x i16> %2476, i16 %2480, i32 54
  %2482 = extractelement <64 x i32> %2206, i32 55
  %2483 = sext i32 %2482 to i64
  %2484 = getelementptr inbounds i16, i16* %54, i64 %2483
  %2485 = load i16, i16* %2484, align 2, !tbaa !386
  %2486 = insertelement <64 x i16> %2481, i16 %2485, i32 55
  %2487 = extractelement <64 x i32> %2206, i32 56
  %2488 = sext i32 %2487 to i64
  %2489 = getelementptr inbounds i16, i16* %54, i64 %2488
  %2490 = load i16, i16* %2489, align 2, !tbaa !386
  %2491 = insertelement <64 x i16> %2486, i16 %2490, i32 56
  %2492 = extractelement <64 x i32> %2206, i32 57
  %2493 = sext i32 %2492 to i64
  %2494 = getelementptr inbounds i16, i16* %54, i64 %2493
  %2495 = load i16, i16* %2494, align 2, !tbaa !386
  %2496 = insertelement <64 x i16> %2491, i16 %2495, i32 57
  %2497 = extractelement <64 x i32> %2206, i32 58
  %2498 = sext i32 %2497 to i64
  %2499 = getelementptr inbounds i16, i16* %54, i64 %2498
  %2500 = load i16, i16* %2499, align 2, !tbaa !386
  %2501 = insertelement <64 x i16> %2496, i16 %2500, i32 58
  %2502 = extractelement <64 x i32> %2206, i32 59
  %2503 = sext i32 %2502 to i64
  %2504 = getelementptr inbounds i16, i16* %54, i64 %2503
  %2505 = load i16, i16* %2504, align 2, !tbaa !386
  %2506 = insertelement <64 x i16> %2501, i16 %2505, i32 59
  %2507 = extractelement <64 x i32> %2206, i32 60
  %2508 = sext i32 %2507 to i64
  %2509 = getelementptr inbounds i16, i16* %54, i64 %2508
  %2510 = load i16, i16* %2509, align 2, !tbaa !386
  %2511 = insertelement <64 x i16> %2506, i16 %2510, i32 60
  %2512 = extractelement <64 x i32> %2206, i32 61
  %2513 = sext i32 %2512 to i64
  %2514 = getelementptr inbounds i16, i16* %54, i64 %2513
  %2515 = load i16, i16* %2514, align 2, !tbaa !386
  %2516 = insertelement <64 x i16> %2511, i16 %2515, i32 61
  %2517 = extractelement <64 x i32> %2206, i32 62
  %2518 = sext i32 %2517 to i64
  %2519 = getelementptr inbounds i16, i16* %54, i64 %2518
  %2520 = load i16, i16* %2519, align 2, !tbaa !386
  %2521 = insertelement <64 x i16> %2516, i16 %2520, i32 62
  %2522 = extractelement <64 x i32> %2206, i32 63
  %2523 = sext i32 %2522 to i64
  %2524 = getelementptr inbounds i16, i16* %54, i64 %2523
  %2525 = load i16, i16* %2524, align 2, !tbaa !386
  %2526 = insertelement <64 x i16> %2521, i16 %2525, i32 63
  %2527 = add nsw <64 x i32> %594, %t238
  %2528 = extractelement <64 x i32> %2527, i32 0
  %2529 = sext i32 %2528 to i64
  %2530 = getelementptr inbounds i16, i16* %54, i64 %2529
  %2531 = load i16, i16* %2530, align 2, !tbaa !386
  %2532 = insertelement <64 x i16> undef, i16 %2531, i32 0
  %2533 = extractelement <64 x i32> %2527, i32 1
  %2534 = sext i32 %2533 to i64
  %2535 = getelementptr inbounds i16, i16* %54, i64 %2534
  %2536 = load i16, i16* %2535, align 2, !tbaa !386
  %2537 = insertelement <64 x i16> %2532, i16 %2536, i32 1
  %2538 = extractelement <64 x i32> %2527, i32 2
  %2539 = sext i32 %2538 to i64
  %2540 = getelementptr inbounds i16, i16* %54, i64 %2539
  %2541 = load i16, i16* %2540, align 2, !tbaa !386
  %2542 = insertelement <64 x i16> %2537, i16 %2541, i32 2
  %2543 = extractelement <64 x i32> %2527, i32 3
  %2544 = sext i32 %2543 to i64
  %2545 = getelementptr inbounds i16, i16* %54, i64 %2544
  %2546 = load i16, i16* %2545, align 2, !tbaa !386
  %2547 = insertelement <64 x i16> %2542, i16 %2546, i32 3
  %2548 = extractelement <64 x i32> %2527, i32 4
  %2549 = sext i32 %2548 to i64
  %2550 = getelementptr inbounds i16, i16* %54, i64 %2549
  %2551 = load i16, i16* %2550, align 2, !tbaa !386
  %2552 = insertelement <64 x i16> %2547, i16 %2551, i32 4
  %2553 = extractelement <64 x i32> %2527, i32 5
  %2554 = sext i32 %2553 to i64
  %2555 = getelementptr inbounds i16, i16* %54, i64 %2554
  %2556 = load i16, i16* %2555, align 2, !tbaa !386
  %2557 = insertelement <64 x i16> %2552, i16 %2556, i32 5
  %2558 = extractelement <64 x i32> %2527, i32 6
  %2559 = sext i32 %2558 to i64
  %2560 = getelementptr inbounds i16, i16* %54, i64 %2559
  %2561 = load i16, i16* %2560, align 2, !tbaa !386
  %2562 = insertelement <64 x i16> %2557, i16 %2561, i32 6
  %2563 = extractelement <64 x i32> %2527, i32 7
  %2564 = sext i32 %2563 to i64
  %2565 = getelementptr inbounds i16, i16* %54, i64 %2564
  %2566 = load i16, i16* %2565, align 2, !tbaa !386
  %2567 = insertelement <64 x i16> %2562, i16 %2566, i32 7
  %2568 = extractelement <64 x i32> %2527, i32 8
  %2569 = sext i32 %2568 to i64
  %2570 = getelementptr inbounds i16, i16* %54, i64 %2569
  %2571 = load i16, i16* %2570, align 2, !tbaa !386
  %2572 = insertelement <64 x i16> %2567, i16 %2571, i32 8
  %2573 = extractelement <64 x i32> %2527, i32 9
  %2574 = sext i32 %2573 to i64
  %2575 = getelementptr inbounds i16, i16* %54, i64 %2574
  %2576 = load i16, i16* %2575, align 2, !tbaa !386
  %2577 = insertelement <64 x i16> %2572, i16 %2576, i32 9
  %2578 = extractelement <64 x i32> %2527, i32 10
  %2579 = sext i32 %2578 to i64
  %2580 = getelementptr inbounds i16, i16* %54, i64 %2579
  %2581 = load i16, i16* %2580, align 2, !tbaa !386
  %2582 = insertelement <64 x i16> %2577, i16 %2581, i32 10
  %2583 = extractelement <64 x i32> %2527, i32 11
  %2584 = sext i32 %2583 to i64
  %2585 = getelementptr inbounds i16, i16* %54, i64 %2584
  %2586 = load i16, i16* %2585, align 2, !tbaa !386
  %2587 = insertelement <64 x i16> %2582, i16 %2586, i32 11
  %2588 = extractelement <64 x i32> %2527, i32 12
  %2589 = sext i32 %2588 to i64
  %2590 = getelementptr inbounds i16, i16* %54, i64 %2589
  %2591 = load i16, i16* %2590, align 2, !tbaa !386
  %2592 = insertelement <64 x i16> %2587, i16 %2591, i32 12
  %2593 = extractelement <64 x i32> %2527, i32 13
  %2594 = sext i32 %2593 to i64
  %2595 = getelementptr inbounds i16, i16* %54, i64 %2594
  %2596 = load i16, i16* %2595, align 2, !tbaa !386
  %2597 = insertelement <64 x i16> %2592, i16 %2596, i32 13
  %2598 = extractelement <64 x i32> %2527, i32 14
  %2599 = sext i32 %2598 to i64
  %2600 = getelementptr inbounds i16, i16* %54, i64 %2599
  %2601 = load i16, i16* %2600, align 2, !tbaa !386
  %2602 = insertelement <64 x i16> %2597, i16 %2601, i32 14
  %2603 = extractelement <64 x i32> %2527, i32 15
  %2604 = sext i32 %2603 to i64
  %2605 = getelementptr inbounds i16, i16* %54, i64 %2604
  %2606 = load i16, i16* %2605, align 2, !tbaa !386
  %2607 = insertelement <64 x i16> %2602, i16 %2606, i32 15
  %2608 = extractelement <64 x i32> %2527, i32 16
  %2609 = sext i32 %2608 to i64
  %2610 = getelementptr inbounds i16, i16* %54, i64 %2609
  %2611 = load i16, i16* %2610, align 2, !tbaa !386
  %2612 = insertelement <64 x i16> %2607, i16 %2611, i32 16
  %2613 = extractelement <64 x i32> %2527, i32 17
  %2614 = sext i32 %2613 to i64
  %2615 = getelementptr inbounds i16, i16* %54, i64 %2614
  %2616 = load i16, i16* %2615, align 2, !tbaa !386
  %2617 = insertelement <64 x i16> %2612, i16 %2616, i32 17
  %2618 = extractelement <64 x i32> %2527, i32 18
  %2619 = sext i32 %2618 to i64
  %2620 = getelementptr inbounds i16, i16* %54, i64 %2619
  %2621 = load i16, i16* %2620, align 2, !tbaa !386
  %2622 = insertelement <64 x i16> %2617, i16 %2621, i32 18
  %2623 = extractelement <64 x i32> %2527, i32 19
  %2624 = sext i32 %2623 to i64
  %2625 = getelementptr inbounds i16, i16* %54, i64 %2624
  %2626 = load i16, i16* %2625, align 2, !tbaa !386
  %2627 = insertelement <64 x i16> %2622, i16 %2626, i32 19
  %2628 = extractelement <64 x i32> %2527, i32 20
  %2629 = sext i32 %2628 to i64
  %2630 = getelementptr inbounds i16, i16* %54, i64 %2629
  %2631 = load i16, i16* %2630, align 2, !tbaa !386
  %2632 = insertelement <64 x i16> %2627, i16 %2631, i32 20
  %2633 = extractelement <64 x i32> %2527, i32 21
  %2634 = sext i32 %2633 to i64
  %2635 = getelementptr inbounds i16, i16* %54, i64 %2634
  %2636 = load i16, i16* %2635, align 2, !tbaa !386
  %2637 = insertelement <64 x i16> %2632, i16 %2636, i32 21
  %2638 = extractelement <64 x i32> %2527, i32 22
  %2639 = sext i32 %2638 to i64
  %2640 = getelementptr inbounds i16, i16* %54, i64 %2639
  %2641 = load i16, i16* %2640, align 2, !tbaa !386
  %2642 = insertelement <64 x i16> %2637, i16 %2641, i32 22
  %2643 = extractelement <64 x i32> %2527, i32 23
  %2644 = sext i32 %2643 to i64
  %2645 = getelementptr inbounds i16, i16* %54, i64 %2644
  %2646 = load i16, i16* %2645, align 2, !tbaa !386
  %2647 = insertelement <64 x i16> %2642, i16 %2646, i32 23
  %2648 = extractelement <64 x i32> %2527, i32 24
  %2649 = sext i32 %2648 to i64
  %2650 = getelementptr inbounds i16, i16* %54, i64 %2649
  %2651 = load i16, i16* %2650, align 2, !tbaa !386
  %2652 = insertelement <64 x i16> %2647, i16 %2651, i32 24
  %2653 = extractelement <64 x i32> %2527, i32 25
  %2654 = sext i32 %2653 to i64
  %2655 = getelementptr inbounds i16, i16* %54, i64 %2654
  %2656 = load i16, i16* %2655, align 2, !tbaa !386
  %2657 = insertelement <64 x i16> %2652, i16 %2656, i32 25
  %2658 = extractelement <64 x i32> %2527, i32 26
  %2659 = sext i32 %2658 to i64
  %2660 = getelementptr inbounds i16, i16* %54, i64 %2659
  %2661 = load i16, i16* %2660, align 2, !tbaa !386
  %2662 = insertelement <64 x i16> %2657, i16 %2661, i32 26
  %2663 = extractelement <64 x i32> %2527, i32 27
  %2664 = sext i32 %2663 to i64
  %2665 = getelementptr inbounds i16, i16* %54, i64 %2664
  %2666 = load i16, i16* %2665, align 2, !tbaa !386
  %2667 = insertelement <64 x i16> %2662, i16 %2666, i32 27
  %2668 = extractelement <64 x i32> %2527, i32 28
  %2669 = sext i32 %2668 to i64
  %2670 = getelementptr inbounds i16, i16* %54, i64 %2669
  %2671 = load i16, i16* %2670, align 2, !tbaa !386
  %2672 = insertelement <64 x i16> %2667, i16 %2671, i32 28
  %2673 = extractelement <64 x i32> %2527, i32 29
  %2674 = sext i32 %2673 to i64
  %2675 = getelementptr inbounds i16, i16* %54, i64 %2674
  %2676 = load i16, i16* %2675, align 2, !tbaa !386
  %2677 = insertelement <64 x i16> %2672, i16 %2676, i32 29
  %2678 = extractelement <64 x i32> %2527, i32 30
  %2679 = sext i32 %2678 to i64
  %2680 = getelementptr inbounds i16, i16* %54, i64 %2679
  %2681 = load i16, i16* %2680, align 2, !tbaa !386
  %2682 = insertelement <64 x i16> %2677, i16 %2681, i32 30
  %2683 = extractelement <64 x i32> %2527, i32 31
  %2684 = sext i32 %2683 to i64
  %2685 = getelementptr inbounds i16, i16* %54, i64 %2684
  %2686 = load i16, i16* %2685, align 2, !tbaa !386
  %2687 = insertelement <64 x i16> %2682, i16 %2686, i32 31
  %2688 = extractelement <64 x i32> %2527, i32 32
  %2689 = sext i32 %2688 to i64
  %2690 = getelementptr inbounds i16, i16* %54, i64 %2689
  %2691 = load i16, i16* %2690, align 2, !tbaa !386
  %2692 = insertelement <64 x i16> %2687, i16 %2691, i32 32
  %2693 = extractelement <64 x i32> %2527, i32 33
  %2694 = sext i32 %2693 to i64
  %2695 = getelementptr inbounds i16, i16* %54, i64 %2694
  %2696 = load i16, i16* %2695, align 2, !tbaa !386
  %2697 = insertelement <64 x i16> %2692, i16 %2696, i32 33
  %2698 = extractelement <64 x i32> %2527, i32 34
  %2699 = sext i32 %2698 to i64
  %2700 = getelementptr inbounds i16, i16* %54, i64 %2699
  %2701 = load i16, i16* %2700, align 2, !tbaa !386
  %2702 = insertelement <64 x i16> %2697, i16 %2701, i32 34
  %2703 = extractelement <64 x i32> %2527, i32 35
  %2704 = sext i32 %2703 to i64
  %2705 = getelementptr inbounds i16, i16* %54, i64 %2704
  %2706 = load i16, i16* %2705, align 2, !tbaa !386
  %2707 = insertelement <64 x i16> %2702, i16 %2706, i32 35
  %2708 = extractelement <64 x i32> %2527, i32 36
  %2709 = sext i32 %2708 to i64
  %2710 = getelementptr inbounds i16, i16* %54, i64 %2709
  %2711 = load i16, i16* %2710, align 2, !tbaa !386
  %2712 = insertelement <64 x i16> %2707, i16 %2711, i32 36
  %2713 = extractelement <64 x i32> %2527, i32 37
  %2714 = sext i32 %2713 to i64
  %2715 = getelementptr inbounds i16, i16* %54, i64 %2714
  %2716 = load i16, i16* %2715, align 2, !tbaa !386
  %2717 = insertelement <64 x i16> %2712, i16 %2716, i32 37
  %2718 = extractelement <64 x i32> %2527, i32 38
  %2719 = sext i32 %2718 to i64
  %2720 = getelementptr inbounds i16, i16* %54, i64 %2719
  %2721 = load i16, i16* %2720, align 2, !tbaa !386
  %2722 = insertelement <64 x i16> %2717, i16 %2721, i32 38
  %2723 = extractelement <64 x i32> %2527, i32 39
  %2724 = sext i32 %2723 to i64
  %2725 = getelementptr inbounds i16, i16* %54, i64 %2724
  %2726 = load i16, i16* %2725, align 2, !tbaa !386
  %2727 = insertelement <64 x i16> %2722, i16 %2726, i32 39
  %2728 = extractelement <64 x i32> %2527, i32 40
  %2729 = sext i32 %2728 to i64
  %2730 = getelementptr inbounds i16, i16* %54, i64 %2729
  %2731 = load i16, i16* %2730, align 2, !tbaa !386
  %2732 = insertelement <64 x i16> %2727, i16 %2731, i32 40
  %2733 = extractelement <64 x i32> %2527, i32 41
  %2734 = sext i32 %2733 to i64
  %2735 = getelementptr inbounds i16, i16* %54, i64 %2734
  %2736 = load i16, i16* %2735, align 2, !tbaa !386
  %2737 = insertelement <64 x i16> %2732, i16 %2736, i32 41
  %2738 = extractelement <64 x i32> %2527, i32 42
  %2739 = sext i32 %2738 to i64
  %2740 = getelementptr inbounds i16, i16* %54, i64 %2739
  %2741 = load i16, i16* %2740, align 2, !tbaa !386
  %2742 = insertelement <64 x i16> %2737, i16 %2741, i32 42
  %2743 = extractelement <64 x i32> %2527, i32 43
  %2744 = sext i32 %2743 to i64
  %2745 = getelementptr inbounds i16, i16* %54, i64 %2744
  %2746 = load i16, i16* %2745, align 2, !tbaa !386
  %2747 = insertelement <64 x i16> %2742, i16 %2746, i32 43
  %2748 = extractelement <64 x i32> %2527, i32 44
  %2749 = sext i32 %2748 to i64
  %2750 = getelementptr inbounds i16, i16* %54, i64 %2749
  %2751 = load i16, i16* %2750, align 2, !tbaa !386
  %2752 = insertelement <64 x i16> %2747, i16 %2751, i32 44
  %2753 = extractelement <64 x i32> %2527, i32 45
  %2754 = sext i32 %2753 to i64
  %2755 = getelementptr inbounds i16, i16* %54, i64 %2754
  %2756 = load i16, i16* %2755, align 2, !tbaa !386
  %2757 = insertelement <64 x i16> %2752, i16 %2756, i32 45
  %2758 = extractelement <64 x i32> %2527, i32 46
  %2759 = sext i32 %2758 to i64
  %2760 = getelementptr inbounds i16, i16* %54, i64 %2759
  %2761 = load i16, i16* %2760, align 2, !tbaa !386
  %2762 = insertelement <64 x i16> %2757, i16 %2761, i32 46
  %2763 = extractelement <64 x i32> %2527, i32 47
  %2764 = sext i32 %2763 to i64
  %2765 = getelementptr inbounds i16, i16* %54, i64 %2764
  %2766 = load i16, i16* %2765, align 2, !tbaa !386
  %2767 = insertelement <64 x i16> %2762, i16 %2766, i32 47
  %2768 = extractelement <64 x i32> %2527, i32 48
  %2769 = sext i32 %2768 to i64
  %2770 = getelementptr inbounds i16, i16* %54, i64 %2769
  %2771 = load i16, i16* %2770, align 2, !tbaa !386
  %2772 = insertelement <64 x i16> %2767, i16 %2771, i32 48
  %2773 = extractelement <64 x i32> %2527, i32 49
  %2774 = sext i32 %2773 to i64
  %2775 = getelementptr inbounds i16, i16* %54, i64 %2774
  %2776 = load i16, i16* %2775, align 2, !tbaa !386
  %2777 = insertelement <64 x i16> %2772, i16 %2776, i32 49
  %2778 = extractelement <64 x i32> %2527, i32 50
  %2779 = sext i32 %2778 to i64
  %2780 = getelementptr inbounds i16, i16* %54, i64 %2779
  %2781 = load i16, i16* %2780, align 2, !tbaa !386
  %2782 = insertelement <64 x i16> %2777, i16 %2781, i32 50
  %2783 = extractelement <64 x i32> %2527, i32 51
  %2784 = sext i32 %2783 to i64
  %2785 = getelementptr inbounds i16, i16* %54, i64 %2784
  %2786 = load i16, i16* %2785, align 2, !tbaa !386
  %2787 = insertelement <64 x i16> %2782, i16 %2786, i32 51
  %2788 = extractelement <64 x i32> %2527, i32 52
  %2789 = sext i32 %2788 to i64
  %2790 = getelementptr inbounds i16, i16* %54, i64 %2789
  %2791 = load i16, i16* %2790, align 2, !tbaa !386
  %2792 = insertelement <64 x i16> %2787, i16 %2791, i32 52
  %2793 = extractelement <64 x i32> %2527, i32 53
  %2794 = sext i32 %2793 to i64
  %2795 = getelementptr inbounds i16, i16* %54, i64 %2794
  %2796 = load i16, i16* %2795, align 2, !tbaa !386
  %2797 = insertelement <64 x i16> %2792, i16 %2796, i32 53
  %2798 = extractelement <64 x i32> %2527, i32 54
  %2799 = sext i32 %2798 to i64
  %2800 = getelementptr inbounds i16, i16* %54, i64 %2799
  %2801 = load i16, i16* %2800, align 2, !tbaa !386
  %2802 = insertelement <64 x i16> %2797, i16 %2801, i32 54
  %2803 = extractelement <64 x i32> %2527, i32 55
  %2804 = sext i32 %2803 to i64
  %2805 = getelementptr inbounds i16, i16* %54, i64 %2804
  %2806 = load i16, i16* %2805, align 2, !tbaa !386
  %2807 = insertelement <64 x i16> %2802, i16 %2806, i32 55
  %2808 = extractelement <64 x i32> %2527, i32 56
  %2809 = sext i32 %2808 to i64
  %2810 = getelementptr inbounds i16, i16* %54, i64 %2809
  %2811 = load i16, i16* %2810, align 2, !tbaa !386
  %2812 = insertelement <64 x i16> %2807, i16 %2811, i32 56
  %2813 = extractelement <64 x i32> %2527, i32 57
  %2814 = sext i32 %2813 to i64
  %2815 = getelementptr inbounds i16, i16* %54, i64 %2814
  %2816 = load i16, i16* %2815, align 2, !tbaa !386
  %2817 = insertelement <64 x i16> %2812, i16 %2816, i32 57
  %2818 = extractelement <64 x i32> %2527, i32 58
  %2819 = sext i32 %2818 to i64
  %2820 = getelementptr inbounds i16, i16* %54, i64 %2819
  %2821 = load i16, i16* %2820, align 2, !tbaa !386
  %2822 = insertelement <64 x i16> %2817, i16 %2821, i32 58
  %2823 = extractelement <64 x i32> %2527, i32 59
  %2824 = sext i32 %2823 to i64
  %2825 = getelementptr inbounds i16, i16* %54, i64 %2824
  %2826 = load i16, i16* %2825, align 2, !tbaa !386
  %2827 = insertelement <64 x i16> %2822, i16 %2826, i32 59
  %2828 = extractelement <64 x i32> %2527, i32 60
  %2829 = sext i32 %2828 to i64
  %2830 = getelementptr inbounds i16, i16* %54, i64 %2829
  %2831 = load i16, i16* %2830, align 2, !tbaa !386
  %2832 = insertelement <64 x i16> %2827, i16 %2831, i32 60
  %2833 = extractelement <64 x i32> %2527, i32 61
  %2834 = sext i32 %2833 to i64
  %2835 = getelementptr inbounds i16, i16* %54, i64 %2834
  %2836 = load i16, i16* %2835, align 2, !tbaa !386
  %2837 = insertelement <64 x i16> %2832, i16 %2836, i32 61
  %2838 = extractelement <64 x i32> %2527, i32 62
  %2839 = sext i32 %2838 to i64
  %2840 = getelementptr inbounds i16, i16* %54, i64 %2839
  %2841 = load i16, i16* %2840, align 2, !tbaa !386
  %2842 = insertelement <64 x i16> %2837, i16 %2841, i32 62
  %2843 = extractelement <64 x i32> %2527, i32 63
  %2844 = sext i32 %2843 to i64
  %2845 = getelementptr inbounds i16, i16* %54, i64 %2844
  %2846 = load i16, i16* %2845, align 2, !tbaa !386
  %2847 = insertelement <64 x i16> %2842, i16 %2846, i32 63
  %2848 = add <64 x i16> %1242, %921
  %2849 = add <64 x i16> %2848, %1563
  %2850 = add <64 x i16> %2849, %1884
  %2851 = add <64 x i16> %2850, %2205
  %2852 = add <64 x i16> %2851, %2526
  %2853 = add <64 x i16> %2852, %2847
  %2854 = shufflevector <64 x i16> %2853, <64 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2855 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %2854, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %2856 = shufflevector <64 x i16> %2853, <64 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %2857 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %2856, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %2858 = shufflevector <64 x i16> %2853, <64 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %2859 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %2858, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %2860 = shufflevector <64 x i16> %2853, <64 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %2861 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %2860, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %2862 = shufflevector <64 x i16> %2853, <64 x i16> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %2863 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %2862, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %2864 = shufflevector <64 x i16> %2853, <64 x i16> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %2865 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %2864, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %2866 = shufflevector <64 x i16> %2853, <64 x i16> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %2867 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %2866, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %2868 = shufflevector <64 x i16> %2853, <64 x i16> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %2869 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %2868, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %2870 = shufflevector <64 x i16> %2853, <64 x i16> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %2871 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %2870, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %2872 = shufflevector <64 x i16> %2853, <64 x i16> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %2873 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %2872, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %2874 = shufflevector <64 x i16> %2853, <64 x i16> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %2875 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %2874, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %2876 = shufflevector <64 x i16> %2853, <64 x i16> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %2877 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %2876, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %2878 = shufflevector <64 x i16> %2853, <64 x i16> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %2879 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %2878, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %2880 = shufflevector <64 x i16> %2853, <64 x i16> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %2881 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %2880, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %2882 = shufflevector <64 x i16> %2853, <64 x i16> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %2883 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %2882, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %2884 = shufflevector <64 x i16> %2853, <64 x i16> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %2885 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %2884, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %2886 = shufflevector <4 x i32> %2855, <4 x i32> %2857, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2887 = shufflevector <4 x i32> %2859, <4 x i32> %2861, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2888 = shufflevector <4 x i32> %2863, <4 x i32> %2865, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2889 = shufflevector <4 x i32> %2867, <4 x i32> %2869, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2890 = shufflevector <4 x i32> %2871, <4 x i32> %2873, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2891 = shufflevector <4 x i32> %2875, <4 x i32> %2877, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2892 = shufflevector <4 x i32> %2879, <4 x i32> %2881, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2893 = shufflevector <4 x i32> %2883, <4 x i32> %2885, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2894 = shufflevector <8 x i32> %2886, <8 x i32> %2887, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2895 = shufflevector <8 x i32> %2888, <8 x i32> %2889, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2896 = shufflevector <8 x i32> %2890, <8 x i32> %2891, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2897 = shufflevector <8 x i32> %2892, <8 x i32> %2893, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2898 = shufflevector <16 x i32> %2894, <16 x i32> %2895, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2899 = shufflevector <16 x i32> %2896, <16 x i32> %2897, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2900 = shufflevector <32 x i32> %2898, <32 x i32> %2899, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2901 = lshr <64 x i32> %2900, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %2902 = trunc <64 x i32> %2901 to <64 x i16>
  %2903 = shufflevector <64 x i16> %2902, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2904 = shufflevector <64 x i16> %2853, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2905 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %2903, <8 x i16> %2904)
  %2906 = shufflevector <64 x i16> %2902, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2907 = shufflevector <64 x i16> %2853, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2908 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %2906, <8 x i16> %2907)
  %2909 = shufflevector <64 x i16> %2902, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %2910 = shufflevector <64 x i16> %2853, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %2911 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %2909, <8 x i16> %2910)
  %2912 = shufflevector <64 x i16> %2902, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2913 = shufflevector <64 x i16> %2853, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2914 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %2912, <8 x i16> %2913)
  %2915 = shufflevector <64 x i16> %2902, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %2916 = shufflevector <64 x i16> %2853, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %2917 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %2915, <8 x i16> %2916)
  %2918 = shufflevector <64 x i16> %2902, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %2919 = shufflevector <64 x i16> %2853, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %2920 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %2918, <8 x i16> %2919)
  %2921 = shufflevector <64 x i16> %2902, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %2922 = shufflevector <64 x i16> %2853, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %2923 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %2921, <8 x i16> %2922)
  %2924 = shufflevector <64 x i16> %2902, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2925 = shufflevector <64 x i16> %2853, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2926 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %2924, <8 x i16> %2925)
  %2927 = shufflevector <8 x i16> %2905, <8 x i16> %2908, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2928 = shufflevector <8 x i16> %2911, <8 x i16> %2914, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2929 = shufflevector <8 x i16> %2917, <8 x i16> %2920, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2930 = shufflevector <8 x i16> %2923, <8 x i16> %2926, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2931 = shufflevector <16 x i16> %2927, <16 x i16> %2928, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2932 = shufflevector <16 x i16> %2929, <16 x i16> %2930, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2933 = shufflevector <32 x i16> %2931, <32 x i16> %2932, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2934 = lshr <64 x i16> %2933, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %2935 = shufflevector <64 x i16> %2934, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2936 = and i32 %a3, 15
  %2937 = zext i32 %2936 to i64
  %2938 = mul nsw i64 %56, %2937
  %2939 = add nsw i64 %2938, %595
  %2940 = getelementptr inbounds i16, i16* %blur_x, i64 %2939
  %2941 = bitcast i16* %2940 to <8 x i16>*
  store <8 x i16> %2935, <8 x i16>* %2941, align 2, !tbaa !389
  %2942 = shufflevector <64 x i16> %2934, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2943 = getelementptr inbounds i16, i16* %2940, i64 8
  %2944 = bitcast i16* %2943 to <8 x i16>*
  store <8 x i16> %2942, <8 x i16>* %2944, align 2, !tbaa !389
  %2945 = shufflevector <64 x i16> %2934, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %2946 = getelementptr inbounds i16, i16* %2940, i64 16
  %2947 = bitcast i16* %2946 to <8 x i16>*
  store <8 x i16> %2945, <8 x i16>* %2947, align 2, !tbaa !389
  %2948 = shufflevector <64 x i16> %2934, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2949 = getelementptr inbounds i16, i16* %2940, i64 24
  %2950 = bitcast i16* %2949 to <8 x i16>*
  store <8 x i16> %2948, <8 x i16>* %2950, align 2, !tbaa !389
  %2951 = shufflevector <64 x i16> %2934, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %2952 = getelementptr inbounds i16, i16* %2940, i64 32
  %2953 = bitcast i16* %2952 to <8 x i16>*
  store <8 x i16> %2951, <8 x i16>* %2953, align 2, !tbaa !389
  %2954 = shufflevector <64 x i16> %2934, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %2955 = getelementptr inbounds i16, i16* %2940, i64 40
  %2956 = bitcast i16* %2955 to <8 x i16>*
  store <8 x i16> %2954, <8 x i16>* %2956, align 2, !tbaa !389
  %2957 = shufflevector <64 x i16> %2934, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %2958 = getelementptr inbounds i16, i16* %2940, i64 48
  %2959 = bitcast i16* %2958 to <8 x i16>*
  store <8 x i16> %2957, <8 x i16>* %2959, align 2, !tbaa !389
  %2960 = shufflevector <64 x i16> %2934, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2961 = getelementptr inbounds i16, i16* %2940, i64 56
  %2962 = bitcast i16* %2961 to <8 x i16>*
  store <8 x i16> %2960, <8 x i16>* %2962, align 2, !tbaa !389
  %2963 = add nuw nsw i32 %blur_x.s0.y.yi, 1
  %.not171 = icmp eq i32 %2963, 4
  br i1 %.not171, label %"end for blur_x.s0.y.yi", label %"for blur_x.s0.y.yi"

"end for blur_x.s0.y.yi":                         ; preds = %"for blur_x.s0.y.yi"
  %indvars.iv.next201 = add nuw nsw i64 %indvars.iv200, 1
  %.not172 = icmp eq i64 %indvars.iv.next201, %67
  br i1 %.not172, label %"end for blur_x.s0.x.x", label %"for blur_x.s0.x.x"

"for blur_x.s0.x.x.rebased":                      ; preds = %"for blur_x.s0.x.x.rebased.preheader", %"end for blur_x.s0.y.yi3"
  %indvars.iv202 = phi i64 [ 0, %"for blur_x.s0.x.x.rebased.preheader" ], [ %indvars.iv.next203, %"end for blur_x.s0.y.yi3" ]
  %blur_x.s0.x.x.rebased = phi i32 [ 0, %"for blur_x.s0.x.x.rebased.preheader" ], [ %3295, %"end for blur_x.s0.y.yi3" ]
  %2964 = add nsw i32 %blur_x.s0.x.x.rebased, %t266
  %2965 = shl nsw i32 %2964, 6
  %blur_x.s0.x.xi.base.s1 = add nsw i32 %2965, %t265
  %2966 = sext i32 %2965 to i64
  br label %"for blur_x.s0.y.yi2"

"end for blur_x.s0.x.x.rebased":                  ; preds = %"end for blur_x.s0.y.yi3", %"end for blur_x.s0.x.x"
  br i1 %58, label %"for blur_x.s0.x.x.rebased5.preheader", label %"end for blur_x.s0.x.x.rebased6", !prof !385

"for blur_x.s0.x.x.rebased5.preheader":           ; preds = %"end for blur_x.s0.x.x.rebased"
  %2967 = trunc i64 %87 to i32
  br label %"for blur_x.s0.x.x.rebased5"

"for blur_x.s0.y.yi2":                            ; preds = %"for blur_x.s0.x.x.rebased", %"for blur_x.s0.y.yi2"
  %blur_x.s0.y.yi4 = phi i32 [ 0, %"for blur_x.s0.x.x.rebased" ], [ %3294, %"for blur_x.s0.y.yi2" ]
  %a4 = add nsw i32 %blur_x.s0.y.yi4, %596
  %2968 = icmp sgt i32 %a4, 0
  %2969 = select i1 %2968, i32 %a4, i32 0
  %2970 = mul nsw i32 %2969, %input.stride.1
  %t240 = add nsw i32 %blur_x.s0.x.xi.base.s1, %2970
  %2971 = sext i32 %t240 to i64
  %2972 = getelementptr inbounds i16, i16* %54, i64 %2971
  %2973 = getelementptr inbounds i16, i16* %2972, i64 -63
  %2974 = bitcast i16* %2973 to <8 x i16>*
  %2975 = load <8 x i16>, <8 x i16>* %2974, align 2, !tbaa !386
  %2976 = getelementptr inbounds i16, i16* %2972, i64 -55
  %2977 = bitcast i16* %2976 to <8 x i16>*
  %2978 = load <8 x i16>, <8 x i16>* %2977, align 2, !tbaa !386
  %2979 = getelementptr inbounds i16, i16* %2972, i64 -47
  %2980 = bitcast i16* %2979 to <8 x i16>*
  %2981 = load <8 x i16>, <8 x i16>* %2980, align 2, !tbaa !386
  %2982 = getelementptr inbounds i16, i16* %2972, i64 -39
  %2983 = bitcast i16* %2982 to <8 x i16>*
  %2984 = load <8 x i16>, <8 x i16>* %2983, align 2, !tbaa !386
  %2985 = getelementptr inbounds i16, i16* %2972, i64 -31
  %2986 = bitcast i16* %2985 to <8 x i16>*
  %2987 = load <8 x i16>, <8 x i16>* %2986, align 2, !tbaa !386
  %2988 = getelementptr inbounds i16, i16* %2972, i64 -23
  %2989 = bitcast i16* %2988 to <8 x i16>*
  %2990 = load <8 x i16>, <8 x i16>* %2989, align 2, !tbaa !386
  %2991 = getelementptr inbounds i16, i16* %2972, i64 -15
  %2992 = bitcast i16* %2991 to <8 x i16>*
  %2993 = load <8 x i16>, <8 x i16>* %2992, align 2, !tbaa !386
  %2994 = getelementptr inbounds i16, i16* %2972, i64 -7
  %2995 = bitcast i16* %2994 to <8 x i16>*
  %2996 = load <8 x i16>, <8 x i16>* %2995, align 2, !tbaa !386
  %2997 = getelementptr inbounds i16, i16* %2972, i64 -64
  %2998 = bitcast i16* %2997 to <8 x i16>*
  %2999 = load <8 x i16>, <8 x i16>* %2998, align 2, !tbaa !386
  %3000 = getelementptr inbounds i16, i16* %2972, i64 -56
  %3001 = bitcast i16* %3000 to <8 x i16>*
  %3002 = load <8 x i16>, <8 x i16>* %3001, align 2, !tbaa !386
  %3003 = getelementptr inbounds i16, i16* %2972, i64 -48
  %3004 = bitcast i16* %3003 to <8 x i16>*
  %3005 = load <8 x i16>, <8 x i16>* %3004, align 2, !tbaa !386
  %3006 = getelementptr inbounds i16, i16* %2972, i64 -40
  %3007 = bitcast i16* %3006 to <8 x i16>*
  %3008 = load <8 x i16>, <8 x i16>* %3007, align 2, !tbaa !386
  %3009 = getelementptr inbounds i16, i16* %2972, i64 -32
  %3010 = bitcast i16* %3009 to <8 x i16>*
  %3011 = load <8 x i16>, <8 x i16>* %3010, align 2, !tbaa !386
  %3012 = getelementptr inbounds i16, i16* %2972, i64 -24
  %3013 = bitcast i16* %3012 to <8 x i16>*
  %3014 = load <8 x i16>, <8 x i16>* %3013, align 2, !tbaa !386
  %3015 = getelementptr inbounds i16, i16* %2972, i64 -16
  %3016 = bitcast i16* %3015 to <8 x i16>*
  %3017 = load <8 x i16>, <8 x i16>* %3016, align 2, !tbaa !386
  %3018 = getelementptr inbounds i16, i16* %2972, i64 -8
  %3019 = bitcast i16* %3018 to <8 x i16>*
  %3020 = load <8 x i16>, <8 x i16>* %3019, align 2, !tbaa !386
  %3021 = getelementptr inbounds i16, i16* %2972, i64 -62
  %3022 = bitcast i16* %3021 to <8 x i16>*
  %3023 = load <8 x i16>, <8 x i16>* %3022, align 2, !tbaa !386
  %3024 = getelementptr inbounds i16, i16* %2972, i64 -54
  %3025 = bitcast i16* %3024 to <8 x i16>*
  %3026 = load <8 x i16>, <8 x i16>* %3025, align 2, !tbaa !386
  %3027 = getelementptr inbounds i16, i16* %2972, i64 -46
  %3028 = bitcast i16* %3027 to <8 x i16>*
  %3029 = load <8 x i16>, <8 x i16>* %3028, align 2, !tbaa !386
  %3030 = getelementptr inbounds i16, i16* %2972, i64 -38
  %3031 = bitcast i16* %3030 to <8 x i16>*
  %3032 = load <8 x i16>, <8 x i16>* %3031, align 2, !tbaa !386
  %3033 = getelementptr inbounds i16, i16* %2972, i64 -30
  %3034 = bitcast i16* %3033 to <8 x i16>*
  %3035 = load <8 x i16>, <8 x i16>* %3034, align 2, !tbaa !386
  %3036 = getelementptr inbounds i16, i16* %2972, i64 -22
  %3037 = bitcast i16* %3036 to <8 x i16>*
  %3038 = load <8 x i16>, <8 x i16>* %3037, align 2, !tbaa !386
  %3039 = getelementptr inbounds i16, i16* %2972, i64 -14
  %3040 = bitcast i16* %3039 to <8 x i16>*
  %3041 = load <8 x i16>, <8 x i16>* %3040, align 2, !tbaa !386
  %3042 = getelementptr inbounds i16, i16* %2972, i64 -6
  %3043 = bitcast i16* %3042 to <8 x i16>*
  %3044 = load <8 x i16>, <8 x i16>* %3043, align 2, !tbaa !386
  %3045 = getelementptr inbounds i16, i16* %2972, i64 -61
  %3046 = bitcast i16* %3045 to <8 x i16>*
  %3047 = load <8 x i16>, <8 x i16>* %3046, align 2, !tbaa !386
  %3048 = getelementptr inbounds i16, i16* %2972, i64 -53
  %3049 = bitcast i16* %3048 to <8 x i16>*
  %3050 = load <8 x i16>, <8 x i16>* %3049, align 2, !tbaa !386
  %3051 = getelementptr inbounds i16, i16* %2972, i64 -45
  %3052 = bitcast i16* %3051 to <8 x i16>*
  %3053 = load <8 x i16>, <8 x i16>* %3052, align 2, !tbaa !386
  %3054 = getelementptr inbounds i16, i16* %2972, i64 -37
  %3055 = bitcast i16* %3054 to <8 x i16>*
  %3056 = load <8 x i16>, <8 x i16>* %3055, align 2, !tbaa !386
  %3057 = getelementptr inbounds i16, i16* %2972, i64 -29
  %3058 = bitcast i16* %3057 to <8 x i16>*
  %3059 = load <8 x i16>, <8 x i16>* %3058, align 2, !tbaa !386
  %3060 = getelementptr inbounds i16, i16* %2972, i64 -21
  %3061 = bitcast i16* %3060 to <8 x i16>*
  %3062 = load <8 x i16>, <8 x i16>* %3061, align 2, !tbaa !386
  %3063 = getelementptr inbounds i16, i16* %2972, i64 -13
  %3064 = bitcast i16* %3063 to <8 x i16>*
  %3065 = load <8 x i16>, <8 x i16>* %3064, align 2, !tbaa !386
  %3066 = getelementptr inbounds i16, i16* %2972, i64 -5
  %3067 = bitcast i16* %3066 to <8 x i16>*
  %3068 = load <8 x i16>, <8 x i16>* %3067, align 2, !tbaa !386
  %3069 = getelementptr inbounds i16, i16* %2972, i64 -60
  %3070 = bitcast i16* %3069 to <8 x i16>*
  %3071 = load <8 x i16>, <8 x i16>* %3070, align 2, !tbaa !386
  %3072 = getelementptr inbounds i16, i16* %2972, i64 -52
  %3073 = bitcast i16* %3072 to <8 x i16>*
  %3074 = load <8 x i16>, <8 x i16>* %3073, align 2, !tbaa !386
  %3075 = getelementptr inbounds i16, i16* %2972, i64 -44
  %3076 = bitcast i16* %3075 to <8 x i16>*
  %3077 = load <8 x i16>, <8 x i16>* %3076, align 2, !tbaa !386
  %3078 = getelementptr inbounds i16, i16* %2972, i64 -36
  %3079 = bitcast i16* %3078 to <8 x i16>*
  %3080 = load <8 x i16>, <8 x i16>* %3079, align 2, !tbaa !386
  %3081 = getelementptr inbounds i16, i16* %2972, i64 -28
  %3082 = bitcast i16* %3081 to <8 x i16>*
  %3083 = load <8 x i16>, <8 x i16>* %3082, align 2, !tbaa !386
  %3084 = getelementptr inbounds i16, i16* %2972, i64 -20
  %3085 = bitcast i16* %3084 to <8 x i16>*
  %3086 = load <8 x i16>, <8 x i16>* %3085, align 2, !tbaa !386
  %3087 = getelementptr inbounds i16, i16* %2972, i64 -12
  %3088 = bitcast i16* %3087 to <8 x i16>*
  %3089 = load <8 x i16>, <8 x i16>* %3088, align 2, !tbaa !386
  %3090 = getelementptr inbounds i16, i16* %2972, i64 -4
  %3091 = bitcast i16* %3090 to <8 x i16>*
  %3092 = load <8 x i16>, <8 x i16>* %3091, align 2, !tbaa !386
  %3093 = getelementptr inbounds i16, i16* %2972, i64 -58
  %3094 = bitcast i16* %3093 to <8 x i16>*
  %3095 = load <8 x i16>, <8 x i16>* %3094, align 2, !tbaa !386
  %3096 = getelementptr inbounds i16, i16* %2972, i64 -50
  %3097 = bitcast i16* %3096 to <8 x i16>*
  %3098 = load <8 x i16>, <8 x i16>* %3097, align 2, !tbaa !386
  %3099 = getelementptr inbounds i16, i16* %2972, i64 -42
  %3100 = bitcast i16* %3099 to <8 x i16>*
  %3101 = load <8 x i16>, <8 x i16>* %3100, align 2, !tbaa !386
  %3102 = getelementptr inbounds i16, i16* %2972, i64 -34
  %3103 = bitcast i16* %3102 to <8 x i16>*
  %3104 = load <8 x i16>, <8 x i16>* %3103, align 2, !tbaa !386
  %3105 = getelementptr inbounds i16, i16* %2972, i64 -26
  %3106 = bitcast i16* %3105 to <8 x i16>*
  %3107 = load <8 x i16>, <8 x i16>* %3106, align 2, !tbaa !386
  %3108 = getelementptr inbounds i16, i16* %2972, i64 -18
  %3109 = bitcast i16* %3108 to <8 x i16>*
  %3110 = load <8 x i16>, <8 x i16>* %3109, align 2, !tbaa !386
  %3111 = getelementptr inbounds i16, i16* %2972, i64 -10
  %3112 = bitcast i16* %3111 to <8 x i16>*
  %3113 = load <8 x i16>, <8 x i16>* %3112, align 2, !tbaa !386
  %3114 = getelementptr inbounds i16, i16* %2972, i64 -2
  %3115 = bitcast i16* %3114 to <8 x i16>*
  %3116 = load <8 x i16>, <8 x i16>* %3115, align 2, !tbaa !386
  %3117 = getelementptr inbounds i16, i16* %2972, i64 -59
  %3118 = bitcast i16* %3117 to <8 x i16>*
  %3119 = load <8 x i16>, <8 x i16>* %3118, align 2, !tbaa !386
  %3120 = getelementptr inbounds i16, i16* %2972, i64 -51
  %3121 = bitcast i16* %3120 to <8 x i16>*
  %3122 = load <8 x i16>, <8 x i16>* %3121, align 2, !tbaa !386
  %3123 = getelementptr inbounds i16, i16* %2972, i64 -43
  %3124 = bitcast i16* %3123 to <8 x i16>*
  %3125 = load <8 x i16>, <8 x i16>* %3124, align 2, !tbaa !386
  %3126 = getelementptr inbounds i16, i16* %2972, i64 -35
  %3127 = bitcast i16* %3126 to <8 x i16>*
  %3128 = load <8 x i16>, <8 x i16>* %3127, align 2, !tbaa !386
  %3129 = getelementptr inbounds i16, i16* %2972, i64 -27
  %3130 = bitcast i16* %3129 to <8 x i16>*
  %3131 = load <8 x i16>, <8 x i16>* %3130, align 2, !tbaa !386
  %3132 = getelementptr inbounds i16, i16* %2972, i64 -19
  %3133 = bitcast i16* %3132 to <8 x i16>*
  %3134 = load <8 x i16>, <8 x i16>* %3133, align 2, !tbaa !386
  %3135 = getelementptr inbounds i16, i16* %2972, i64 -11
  %3136 = bitcast i16* %3135 to <8 x i16>*
  %3137 = load <8 x i16>, <8 x i16>* %3136, align 2, !tbaa !386
  %3138 = getelementptr inbounds i16, i16* %2972, i64 -3
  %3139 = bitcast i16* %3138 to <8 x i16>*
  %3140 = load <8 x i16>, <8 x i16>* %3139, align 2, !tbaa !386
  %3141 = add <8 x i16> %2999, %2975
  %3142 = add <8 x i16> %3141, %3023
  %3143 = add <8 x i16> %3142, %3047
  %3144 = add <8 x i16> %3143, %3071
  %3145 = add <8 x i16> %3144, %3095
  %3146 = add <8 x i16> %3145, %3119
  %3147 = add <8 x i16> %3002, %2978
  %3148 = add <8 x i16> %3147, %3026
  %3149 = add <8 x i16> %3148, %3050
  %3150 = add <8 x i16> %3149, %3074
  %3151 = add <8 x i16> %3150, %3098
  %3152 = add <8 x i16> %3151, %3122
  %3153 = add <8 x i16> %3005, %2981
  %3154 = add <8 x i16> %3153, %3029
  %3155 = add <8 x i16> %3154, %3053
  %3156 = add <8 x i16> %3155, %3077
  %3157 = add <8 x i16> %3156, %3101
  %3158 = add <8 x i16> %3157, %3125
  %3159 = add <8 x i16> %3008, %2984
  %3160 = add <8 x i16> %3159, %3032
  %3161 = add <8 x i16> %3160, %3056
  %3162 = add <8 x i16> %3161, %3080
  %3163 = add <8 x i16> %3162, %3104
  %3164 = add <8 x i16> %3163, %3128
  %3165 = add <8 x i16> %3011, %2987
  %3166 = add <8 x i16> %3165, %3035
  %3167 = add <8 x i16> %3166, %3059
  %3168 = add <8 x i16> %3167, %3083
  %3169 = add <8 x i16> %3168, %3107
  %3170 = add <8 x i16> %3169, %3131
  %3171 = add <8 x i16> %3014, %2990
  %3172 = add <8 x i16> %3171, %3038
  %3173 = add <8 x i16> %3172, %3062
  %3174 = add <8 x i16> %3173, %3086
  %3175 = add <8 x i16> %3174, %3110
  %3176 = add <8 x i16> %3175, %3134
  %3177 = add <8 x i16> %3017, %2993
  %3178 = add <8 x i16> %3177, %3041
  %3179 = add <8 x i16> %3178, %3065
  %3180 = add <8 x i16> %3179, %3089
  %3181 = add <8 x i16> %3180, %3113
  %3182 = add <8 x i16> %3181, %3137
  %3183 = add <8 x i16> %3020, %2996
  %3184 = add <8 x i16> %3183, %3044
  %3185 = add <8 x i16> %3184, %3068
  %3186 = add <8 x i16> %3185, %3092
  %3187 = add <8 x i16> %3186, %3116
  %3188 = add <8 x i16> %3187, %3140
  %3189 = shufflevector <8 x i16> %3188, <8 x i16> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3190 = shufflevector <16 x i16> %3189, <16 x i16> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3191 = shufflevector <32 x i16> %3190, <32 x i16> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3192 = shufflevector <8 x i16> %3146, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3193 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %3192, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %3194 = shufflevector <8 x i16> %3146, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3195 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %3194, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %3196 = shufflevector <8 x i16> %3152, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3197 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %3196, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %3198 = shufflevector <8 x i16> %3152, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3199 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %3198, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %3200 = shufflevector <8 x i16> %3158, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3201 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %3200, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %3202 = shufflevector <8 x i16> %3158, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3203 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %3202, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %3204 = shufflevector <8 x i16> %3164, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3205 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %3204, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %3206 = shufflevector <8 x i16> %3164, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3207 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %3206, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %3208 = shufflevector <8 x i16> %3170, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3209 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %3208, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %3210 = shufflevector <8 x i16> %3170, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3211 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %3210, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %3212 = shufflevector <8 x i16> %3176, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3213 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %3212, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %3214 = shufflevector <8 x i16> %3176, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3215 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %3214, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %3216 = shufflevector <8 x i16> %3182, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3217 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %3216, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %3218 = shufflevector <8 x i16> %3182, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3219 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %3218, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %3220 = shufflevector <8 x i16> %3188, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3221 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %3220, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %3222 = shufflevector <8 x i16> %3188, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3223 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %3222, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %3224 = shufflevector <4 x i32> %3193, <4 x i32> %3195, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3225 = shufflevector <4 x i32> %3197, <4 x i32> %3199, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3226 = shufflevector <4 x i32> %3201, <4 x i32> %3203, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3227 = shufflevector <4 x i32> %3205, <4 x i32> %3207, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3228 = shufflevector <4 x i32> %3209, <4 x i32> %3211, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3229 = shufflevector <4 x i32> %3213, <4 x i32> %3215, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3230 = shufflevector <4 x i32> %3217, <4 x i32> %3219, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3231 = shufflevector <4 x i32> %3221, <4 x i32> %3223, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3232 = shufflevector <8 x i32> %3224, <8 x i32> %3225, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3233 = shufflevector <8 x i32> %3226, <8 x i32> %3227, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3234 = shufflevector <8 x i32> %3228, <8 x i32> %3229, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3235 = shufflevector <8 x i32> %3230, <8 x i32> %3231, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3236 = shufflevector <16 x i32> %3232, <16 x i32> %3233, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3237 = shufflevector <16 x i32> %3234, <16 x i32> %3235, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3238 = shufflevector <32 x i32> %3236, <32 x i32> %3237, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3239 = lshr <64 x i32> %3238, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %3240 = trunc <64 x i32> %3239 to <64 x i16>
  %3241 = shufflevector <64 x i16> %3240, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3242 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %3241, <8 x i16> %3146)
  %3243 = shufflevector <64 x i16> %3240, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3244 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %3243, <8 x i16> %3152)
  %3245 = shufflevector <64 x i16> %3240, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %3246 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %3245, <8 x i16> %3158)
  %3247 = shufflevector <64 x i16> %3240, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3248 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %3247, <8 x i16> %3164)
  %3249 = shufflevector <64 x i16> %3240, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %3250 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %3249, <8 x i16> %3170)
  %3251 = shufflevector <64 x i16> %3240, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %3252 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %3251, <8 x i16> %3176)
  %3253 = shufflevector <64 x i16> %3240, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %3254 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %3253, <8 x i16> %3182)
  %3255 = shufflevector <64 x i16> %3240, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3256 = shufflevector <64 x i16> %3191, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3257 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %3255, <8 x i16> %3256)
  %3258 = shufflevector <8 x i16> %3242, <8 x i16> %3244, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3259 = shufflevector <8 x i16> %3246, <8 x i16> %3248, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3260 = shufflevector <8 x i16> %3250, <8 x i16> %3252, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3261 = shufflevector <8 x i16> %3254, <8 x i16> %3257, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3262 = shufflevector <16 x i16> %3258, <16 x i16> %3259, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3263 = shufflevector <16 x i16> %3260, <16 x i16> %3261, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3264 = shufflevector <32 x i16> %3262, <32 x i16> %3263, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3265 = lshr <64 x i16> %3264, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %3266 = shufflevector <64 x i16> %3265, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3267 = and i32 %a4, 15
  %3268 = zext i32 %3267 to i64
  %3269 = mul nsw i64 %56, %3268
  %3270 = add nsw i64 %3269, %2966
  %3271 = getelementptr inbounds i16, i16* %blur_x, i64 %3270
  %3272 = bitcast i16* %3271 to <8 x i16>*
  store <8 x i16> %3266, <8 x i16>* %3272, align 2, !tbaa !389
  %3273 = shufflevector <64 x i16> %3265, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3274 = getelementptr inbounds i16, i16* %3271, i64 8
  %3275 = bitcast i16* %3274 to <8 x i16>*
  store <8 x i16> %3273, <8 x i16>* %3275, align 2, !tbaa !389
  %3276 = shufflevector <64 x i16> %3265, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %3277 = getelementptr inbounds i16, i16* %3271, i64 16
  %3278 = bitcast i16* %3277 to <8 x i16>*
  store <8 x i16> %3276, <8 x i16>* %3278, align 2, !tbaa !389
  %3279 = shufflevector <64 x i16> %3265, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3280 = getelementptr inbounds i16, i16* %3271, i64 24
  %3281 = bitcast i16* %3280 to <8 x i16>*
  store <8 x i16> %3279, <8 x i16>* %3281, align 2, !tbaa !389
  %3282 = shufflevector <64 x i16> %3265, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %3283 = getelementptr inbounds i16, i16* %3271, i64 32
  %3284 = bitcast i16* %3283 to <8 x i16>*
  store <8 x i16> %3282, <8 x i16>* %3284, align 2, !tbaa !389
  %3285 = shufflevector <64 x i16> %3265, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %3286 = getelementptr inbounds i16, i16* %3271, i64 40
  %3287 = bitcast i16* %3286 to <8 x i16>*
  store <8 x i16> %3285, <8 x i16>* %3287, align 2, !tbaa !389
  %3288 = shufflevector <64 x i16> %3265, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %3289 = getelementptr inbounds i16, i16* %3271, i64 48
  %3290 = bitcast i16* %3289 to <8 x i16>*
  store <8 x i16> %3288, <8 x i16>* %3290, align 2, !tbaa !389
  %3291 = shufflevector <64 x i16> %3265, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3292 = getelementptr inbounds i16, i16* %3271, i64 56
  %3293 = bitcast i16* %3292 to <8 x i16>*
  store <8 x i16> %3291, <8 x i16>* %3293, align 2, !tbaa !389
  %3294 = add nuw nsw i32 %blur_x.s0.y.yi4, 1
  %.not169 = icmp eq i32 %3294, 4
  br i1 %.not169, label %"end for blur_x.s0.y.yi3", label %"for blur_x.s0.y.yi2"

"end for blur_x.s0.y.yi3":                        ; preds = %"for blur_x.s0.y.yi2"
  %indvars.iv.next203 = add nuw nsw i64 %indvars.iv202, 1
  %3295 = add nuw nsw i32 %blur_x.s0.x.x.rebased, 1
  %.not170 = icmp eq i64 %indvars.iv.next203, %68
  br i1 %.not170, label %"end for blur_x.s0.x.x.rebased", label %"for blur_x.s0.x.x.rebased"

"for blur_x.s0.x.x.rebased5":                     ; preds = %"for blur_x.s0.x.x.rebased5.preheader", %"end for blur_x.s0.y.yi10"
  %indvars.iv204 = phi i64 [ 0, %"for blur_x.s0.x.x.rebased5.preheader" ], [ %indvars.iv.next205, %"end for blur_x.s0.y.yi10" ]
  %3296 = trunc i64 %indvars.iv204 to i32
  %3297 = add i32 %t254, %3296
  %3298 = shl nsw i32 %3297, 6
  %blur_x.s0.x.xi.base.s8 = add nsw i32 %3298, %t265
  %3299 = add nsw i32 %blur_x.s0.x.xi.base.s8, -63
  %3300 = insertelement <64 x i32> undef, i32 %3299, i32 0
  %3301 = shufflevector <64 x i32> %3300, <64 x i32> undef, <64 x i32> zeroinitializer
  %3302 = add nsw <64 x i32> %3301, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3303 = shufflevector <64 x i32> %3302, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3304 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3303, <4 x i32> %53)
  %3305 = shufflevector <64 x i32> %3302, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3306 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3305, <4 x i32> %53)
  %3307 = shufflevector <64 x i32> %3302, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %3308 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3307, <4 x i32> %53)
  %3309 = shufflevector <64 x i32> %3302, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %3310 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3309, <4 x i32> %53)
  %3311 = shufflevector <64 x i32> %3302, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %3312 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3311, <4 x i32> %53)
  %3313 = shufflevector <64 x i32> %3302, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %3314 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3313, <4 x i32> %53)
  %3315 = shufflevector <64 x i32> %3302, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %3316 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3315, <4 x i32> %53)
  %3317 = shufflevector <64 x i32> %3302, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %3318 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3317, <4 x i32> %53)
  %3319 = shufflevector <64 x i32> %3302, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %3320 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3319, <4 x i32> %53)
  %3321 = shufflevector <64 x i32> %3302, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %3322 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3321, <4 x i32> %53)
  %3323 = shufflevector <64 x i32> %3302, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %3324 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3323, <4 x i32> %53)
  %3325 = shufflevector <64 x i32> %3302, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %3326 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3325, <4 x i32> %53)
  %3327 = shufflevector <64 x i32> %3302, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %3328 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3327, <4 x i32> %53)
  %3329 = shufflevector <64 x i32> %3302, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %3330 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3329, <4 x i32> %53)
  %3331 = shufflevector <64 x i32> %3302, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %3332 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3331, <4 x i32> %53)
  %3333 = shufflevector <64 x i32> %3302, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %3334 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3333, <4 x i32> %53)
  %3335 = shufflevector <4 x i32> %3334, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %3336 = shufflevector <8 x i32> %3335, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %3337 = shufflevector <16 x i32> %3336, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %3338 = shufflevector <32 x i32> %3337, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %3339 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3304, <4 x i32> zeroinitializer)
  %3340 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3306, <4 x i32> zeroinitializer)
  %3341 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3308, <4 x i32> zeroinitializer)
  %3342 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3310, <4 x i32> zeroinitializer)
  %3343 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3312, <4 x i32> zeroinitializer)
  %3344 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3314, <4 x i32> zeroinitializer)
  %3345 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3316, <4 x i32> zeroinitializer)
  %3346 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3318, <4 x i32> zeroinitializer)
  %3347 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3320, <4 x i32> zeroinitializer)
  %3348 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3322, <4 x i32> zeroinitializer)
  %3349 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3324, <4 x i32> zeroinitializer)
  %3350 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3326, <4 x i32> zeroinitializer)
  %3351 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3328, <4 x i32> zeroinitializer)
  %3352 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3330, <4 x i32> zeroinitializer)
  %3353 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3332, <4 x i32> zeroinitializer)
  %3354 = shufflevector <64 x i32> %3338, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %3355 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3354, <4 x i32> zeroinitializer)
  %3356 = shufflevector <4 x i32> %3339, <4 x i32> %3340, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3357 = shufflevector <4 x i32> %3341, <4 x i32> %3342, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3358 = shufflevector <4 x i32> %3343, <4 x i32> %3344, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3359 = shufflevector <4 x i32> %3345, <4 x i32> %3346, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3360 = shufflevector <4 x i32> %3347, <4 x i32> %3348, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3361 = shufflevector <4 x i32> %3349, <4 x i32> %3350, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3362 = shufflevector <4 x i32> %3351, <4 x i32> %3352, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3363 = shufflevector <4 x i32> %3353, <4 x i32> %3355, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3364 = shufflevector <8 x i32> %3356, <8 x i32> %3357, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3365 = shufflevector <8 x i32> %3358, <8 x i32> %3359, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3366 = shufflevector <8 x i32> %3360, <8 x i32> %3361, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3367 = shufflevector <8 x i32> %3362, <8 x i32> %3363, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3368 = shufflevector <16 x i32> %3364, <16 x i32> %3365, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3369 = shufflevector <16 x i32> %3366, <16 x i32> %3367, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3370 = shufflevector <32 x i32> %3368, <32 x i32> %3369, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3371 = add nsw i32 %blur_x.s0.x.xi.base.s8, -64
  %3372 = insertelement <64 x i32> undef, i32 %3371, i32 0
  %3373 = shufflevector <64 x i32> %3372, <64 x i32> undef, <64 x i32> zeroinitializer
  %3374 = add nsw <64 x i32> %3373, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3375 = shufflevector <64 x i32> %3374, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3376 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3375, <4 x i32> %53)
  %3377 = shufflevector <64 x i32> %3374, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3378 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3377, <4 x i32> %53)
  %3379 = shufflevector <64 x i32> %3374, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %3380 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3379, <4 x i32> %53)
  %3381 = shufflevector <64 x i32> %3374, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %3382 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3381, <4 x i32> %53)
  %3383 = shufflevector <64 x i32> %3374, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %3384 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3383, <4 x i32> %53)
  %3385 = shufflevector <64 x i32> %3374, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %3386 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3385, <4 x i32> %53)
  %3387 = shufflevector <64 x i32> %3374, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %3388 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3387, <4 x i32> %53)
  %3389 = shufflevector <64 x i32> %3374, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %3390 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3389, <4 x i32> %53)
  %3391 = shufflevector <64 x i32> %3374, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %3392 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3391, <4 x i32> %53)
  %3393 = shufflevector <64 x i32> %3374, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %3394 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3393, <4 x i32> %53)
  %3395 = shufflevector <64 x i32> %3374, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %3396 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3395, <4 x i32> %53)
  %3397 = shufflevector <64 x i32> %3374, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %3398 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3397, <4 x i32> %53)
  %3399 = shufflevector <64 x i32> %3374, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %3400 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3399, <4 x i32> %53)
  %3401 = shufflevector <64 x i32> %3374, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %3402 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3401, <4 x i32> %53)
  %3403 = shufflevector <64 x i32> %3374, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %3404 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3403, <4 x i32> %53)
  %3405 = shufflevector <64 x i32> %3374, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %3406 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3405, <4 x i32> %53)
  %3407 = shufflevector <4 x i32> %3406, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %3408 = shufflevector <8 x i32> %3407, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %3409 = shufflevector <16 x i32> %3408, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %3410 = shufflevector <32 x i32> %3409, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %3411 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3376, <4 x i32> zeroinitializer)
  %3412 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3378, <4 x i32> zeroinitializer)
  %3413 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3380, <4 x i32> zeroinitializer)
  %3414 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3382, <4 x i32> zeroinitializer)
  %3415 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3384, <4 x i32> zeroinitializer)
  %3416 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3386, <4 x i32> zeroinitializer)
  %3417 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3388, <4 x i32> zeroinitializer)
  %3418 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3390, <4 x i32> zeroinitializer)
  %3419 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3392, <4 x i32> zeroinitializer)
  %3420 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3394, <4 x i32> zeroinitializer)
  %3421 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3396, <4 x i32> zeroinitializer)
  %3422 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3398, <4 x i32> zeroinitializer)
  %3423 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3400, <4 x i32> zeroinitializer)
  %3424 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3402, <4 x i32> zeroinitializer)
  %3425 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3404, <4 x i32> zeroinitializer)
  %3426 = shufflevector <64 x i32> %3410, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %3427 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3426, <4 x i32> zeroinitializer)
  %3428 = shufflevector <4 x i32> %3411, <4 x i32> %3412, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3429 = shufflevector <4 x i32> %3413, <4 x i32> %3414, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3430 = shufflevector <4 x i32> %3415, <4 x i32> %3416, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3431 = shufflevector <4 x i32> %3417, <4 x i32> %3418, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3432 = shufflevector <4 x i32> %3419, <4 x i32> %3420, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3433 = shufflevector <4 x i32> %3421, <4 x i32> %3422, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3434 = shufflevector <4 x i32> %3423, <4 x i32> %3424, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3435 = shufflevector <4 x i32> %3425, <4 x i32> %3427, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3436 = shufflevector <8 x i32> %3428, <8 x i32> %3429, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3437 = shufflevector <8 x i32> %3430, <8 x i32> %3431, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3438 = shufflevector <8 x i32> %3432, <8 x i32> %3433, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3439 = shufflevector <8 x i32> %3434, <8 x i32> %3435, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3440 = shufflevector <16 x i32> %3436, <16 x i32> %3437, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3441 = shufflevector <16 x i32> %3438, <16 x i32> %3439, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3442 = shufflevector <32 x i32> %3440, <32 x i32> %3441, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3443 = add nsw i32 %blur_x.s0.x.xi.base.s8, -62
  %3444 = insertelement <64 x i32> undef, i32 %3443, i32 0
  %3445 = shufflevector <64 x i32> %3444, <64 x i32> undef, <64 x i32> zeroinitializer
  %3446 = add nsw <64 x i32> %3445, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3447 = shufflevector <64 x i32> %3446, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3448 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3447, <4 x i32> %53)
  %3449 = shufflevector <64 x i32> %3446, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3450 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3449, <4 x i32> %53)
  %3451 = shufflevector <64 x i32> %3446, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %3452 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3451, <4 x i32> %53)
  %3453 = shufflevector <64 x i32> %3446, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %3454 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3453, <4 x i32> %53)
  %3455 = shufflevector <64 x i32> %3446, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %3456 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3455, <4 x i32> %53)
  %3457 = shufflevector <64 x i32> %3446, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %3458 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3457, <4 x i32> %53)
  %3459 = shufflevector <64 x i32> %3446, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %3460 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3459, <4 x i32> %53)
  %3461 = shufflevector <64 x i32> %3446, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %3462 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3461, <4 x i32> %53)
  %3463 = shufflevector <64 x i32> %3446, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %3464 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3463, <4 x i32> %53)
  %3465 = shufflevector <64 x i32> %3446, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %3466 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3465, <4 x i32> %53)
  %3467 = shufflevector <64 x i32> %3446, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %3468 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3467, <4 x i32> %53)
  %3469 = shufflevector <64 x i32> %3446, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %3470 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3469, <4 x i32> %53)
  %3471 = shufflevector <64 x i32> %3446, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %3472 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3471, <4 x i32> %53)
  %3473 = shufflevector <64 x i32> %3446, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %3474 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3473, <4 x i32> %53)
  %3475 = shufflevector <64 x i32> %3446, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %3476 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3475, <4 x i32> %53)
  %3477 = shufflevector <64 x i32> %3446, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %3478 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3477, <4 x i32> %53)
  %3479 = shufflevector <4 x i32> %3478, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %3480 = shufflevector <8 x i32> %3479, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %3481 = shufflevector <16 x i32> %3480, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %3482 = shufflevector <32 x i32> %3481, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %3483 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3448, <4 x i32> zeroinitializer)
  %3484 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3450, <4 x i32> zeroinitializer)
  %3485 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3452, <4 x i32> zeroinitializer)
  %3486 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3454, <4 x i32> zeroinitializer)
  %3487 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3456, <4 x i32> zeroinitializer)
  %3488 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3458, <4 x i32> zeroinitializer)
  %3489 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3460, <4 x i32> zeroinitializer)
  %3490 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3462, <4 x i32> zeroinitializer)
  %3491 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3464, <4 x i32> zeroinitializer)
  %3492 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3466, <4 x i32> zeroinitializer)
  %3493 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3468, <4 x i32> zeroinitializer)
  %3494 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3470, <4 x i32> zeroinitializer)
  %3495 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3472, <4 x i32> zeroinitializer)
  %3496 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3474, <4 x i32> zeroinitializer)
  %3497 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3476, <4 x i32> zeroinitializer)
  %3498 = shufflevector <64 x i32> %3482, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %3499 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3498, <4 x i32> zeroinitializer)
  %3500 = shufflevector <4 x i32> %3483, <4 x i32> %3484, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3501 = shufflevector <4 x i32> %3485, <4 x i32> %3486, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3502 = shufflevector <4 x i32> %3487, <4 x i32> %3488, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3503 = shufflevector <4 x i32> %3489, <4 x i32> %3490, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3504 = shufflevector <4 x i32> %3491, <4 x i32> %3492, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3505 = shufflevector <4 x i32> %3493, <4 x i32> %3494, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3506 = shufflevector <4 x i32> %3495, <4 x i32> %3496, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3507 = shufflevector <4 x i32> %3497, <4 x i32> %3499, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3508 = shufflevector <8 x i32> %3500, <8 x i32> %3501, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3509 = shufflevector <8 x i32> %3502, <8 x i32> %3503, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3510 = shufflevector <8 x i32> %3504, <8 x i32> %3505, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3511 = shufflevector <8 x i32> %3506, <8 x i32> %3507, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3512 = shufflevector <16 x i32> %3508, <16 x i32> %3509, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3513 = shufflevector <16 x i32> %3510, <16 x i32> %3511, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3514 = shufflevector <32 x i32> %3512, <32 x i32> %3513, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3515 = add nsw i32 %blur_x.s0.x.xi.base.s8, -61
  %3516 = insertelement <64 x i32> undef, i32 %3515, i32 0
  %3517 = shufflevector <64 x i32> %3516, <64 x i32> undef, <64 x i32> zeroinitializer
  %3518 = add nsw <64 x i32> %3517, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3519 = shufflevector <64 x i32> %3518, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3520 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3519, <4 x i32> %53)
  %3521 = shufflevector <64 x i32> %3518, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3522 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3521, <4 x i32> %53)
  %3523 = shufflevector <64 x i32> %3518, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %3524 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3523, <4 x i32> %53)
  %3525 = shufflevector <64 x i32> %3518, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %3526 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3525, <4 x i32> %53)
  %3527 = shufflevector <64 x i32> %3518, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %3528 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3527, <4 x i32> %53)
  %3529 = shufflevector <64 x i32> %3518, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %3530 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3529, <4 x i32> %53)
  %3531 = shufflevector <64 x i32> %3518, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %3532 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3531, <4 x i32> %53)
  %3533 = shufflevector <64 x i32> %3518, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %3534 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3533, <4 x i32> %53)
  %3535 = shufflevector <64 x i32> %3518, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %3536 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3535, <4 x i32> %53)
  %3537 = shufflevector <64 x i32> %3518, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %3538 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3537, <4 x i32> %53)
  %3539 = shufflevector <64 x i32> %3518, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %3540 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3539, <4 x i32> %53)
  %3541 = shufflevector <64 x i32> %3518, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %3542 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3541, <4 x i32> %53)
  %3543 = shufflevector <64 x i32> %3518, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %3544 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3543, <4 x i32> %53)
  %3545 = shufflevector <64 x i32> %3518, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %3546 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3545, <4 x i32> %53)
  %3547 = shufflevector <64 x i32> %3518, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %3548 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3547, <4 x i32> %53)
  %3549 = shufflevector <64 x i32> %3518, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %3550 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3549, <4 x i32> %53)
  %3551 = shufflevector <4 x i32> %3550, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %3552 = shufflevector <8 x i32> %3551, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %3553 = shufflevector <16 x i32> %3552, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %3554 = shufflevector <32 x i32> %3553, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %3555 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3520, <4 x i32> zeroinitializer)
  %3556 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3522, <4 x i32> zeroinitializer)
  %3557 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3524, <4 x i32> zeroinitializer)
  %3558 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3526, <4 x i32> zeroinitializer)
  %3559 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3528, <4 x i32> zeroinitializer)
  %3560 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3530, <4 x i32> zeroinitializer)
  %3561 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3532, <4 x i32> zeroinitializer)
  %3562 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3534, <4 x i32> zeroinitializer)
  %3563 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3536, <4 x i32> zeroinitializer)
  %3564 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3538, <4 x i32> zeroinitializer)
  %3565 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3540, <4 x i32> zeroinitializer)
  %3566 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3542, <4 x i32> zeroinitializer)
  %3567 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3544, <4 x i32> zeroinitializer)
  %3568 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3546, <4 x i32> zeroinitializer)
  %3569 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3548, <4 x i32> zeroinitializer)
  %3570 = shufflevector <64 x i32> %3554, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %3571 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3570, <4 x i32> zeroinitializer)
  %3572 = shufflevector <4 x i32> %3555, <4 x i32> %3556, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3573 = shufflevector <4 x i32> %3557, <4 x i32> %3558, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3574 = shufflevector <4 x i32> %3559, <4 x i32> %3560, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3575 = shufflevector <4 x i32> %3561, <4 x i32> %3562, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3576 = shufflevector <4 x i32> %3563, <4 x i32> %3564, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3577 = shufflevector <4 x i32> %3565, <4 x i32> %3566, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3578 = shufflevector <4 x i32> %3567, <4 x i32> %3568, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3579 = shufflevector <4 x i32> %3569, <4 x i32> %3571, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3580 = shufflevector <8 x i32> %3572, <8 x i32> %3573, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3581 = shufflevector <8 x i32> %3574, <8 x i32> %3575, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3582 = shufflevector <8 x i32> %3576, <8 x i32> %3577, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3583 = shufflevector <8 x i32> %3578, <8 x i32> %3579, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3584 = shufflevector <16 x i32> %3580, <16 x i32> %3581, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3585 = shufflevector <16 x i32> %3582, <16 x i32> %3583, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3586 = shufflevector <32 x i32> %3584, <32 x i32> %3585, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3587 = add nsw i32 %blur_x.s0.x.xi.base.s8, -60
  %3588 = insertelement <64 x i32> undef, i32 %3587, i32 0
  %3589 = shufflevector <64 x i32> %3588, <64 x i32> undef, <64 x i32> zeroinitializer
  %3590 = add nsw <64 x i32> %3589, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3591 = shufflevector <64 x i32> %3590, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3592 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3591, <4 x i32> %53)
  %3593 = shufflevector <64 x i32> %3590, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3594 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3593, <4 x i32> %53)
  %3595 = shufflevector <64 x i32> %3590, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %3596 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3595, <4 x i32> %53)
  %3597 = shufflevector <64 x i32> %3590, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %3598 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3597, <4 x i32> %53)
  %3599 = shufflevector <64 x i32> %3590, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %3600 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3599, <4 x i32> %53)
  %3601 = shufflevector <64 x i32> %3590, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %3602 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3601, <4 x i32> %53)
  %3603 = shufflevector <64 x i32> %3590, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %3604 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3603, <4 x i32> %53)
  %3605 = shufflevector <64 x i32> %3590, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %3606 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3605, <4 x i32> %53)
  %3607 = shufflevector <64 x i32> %3590, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %3608 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3607, <4 x i32> %53)
  %3609 = shufflevector <64 x i32> %3590, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %3610 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3609, <4 x i32> %53)
  %3611 = shufflevector <64 x i32> %3590, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %3612 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3611, <4 x i32> %53)
  %3613 = shufflevector <64 x i32> %3590, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %3614 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3613, <4 x i32> %53)
  %3615 = shufflevector <64 x i32> %3590, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %3616 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3615, <4 x i32> %53)
  %3617 = shufflevector <64 x i32> %3590, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %3618 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3617, <4 x i32> %53)
  %3619 = shufflevector <64 x i32> %3590, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %3620 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3619, <4 x i32> %53)
  %3621 = shufflevector <64 x i32> %3590, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %3622 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3621, <4 x i32> %53)
  %3623 = shufflevector <4 x i32> %3622, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %3624 = shufflevector <8 x i32> %3623, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %3625 = shufflevector <16 x i32> %3624, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %3626 = shufflevector <32 x i32> %3625, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %3627 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3592, <4 x i32> zeroinitializer)
  %3628 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3594, <4 x i32> zeroinitializer)
  %3629 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3596, <4 x i32> zeroinitializer)
  %3630 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3598, <4 x i32> zeroinitializer)
  %3631 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3600, <4 x i32> zeroinitializer)
  %3632 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3602, <4 x i32> zeroinitializer)
  %3633 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3604, <4 x i32> zeroinitializer)
  %3634 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3606, <4 x i32> zeroinitializer)
  %3635 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3608, <4 x i32> zeroinitializer)
  %3636 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3610, <4 x i32> zeroinitializer)
  %3637 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3612, <4 x i32> zeroinitializer)
  %3638 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3614, <4 x i32> zeroinitializer)
  %3639 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3616, <4 x i32> zeroinitializer)
  %3640 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3618, <4 x i32> zeroinitializer)
  %3641 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3620, <4 x i32> zeroinitializer)
  %3642 = shufflevector <64 x i32> %3626, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %3643 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3642, <4 x i32> zeroinitializer)
  %3644 = shufflevector <4 x i32> %3627, <4 x i32> %3628, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3645 = shufflevector <4 x i32> %3629, <4 x i32> %3630, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3646 = shufflevector <4 x i32> %3631, <4 x i32> %3632, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3647 = shufflevector <4 x i32> %3633, <4 x i32> %3634, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3648 = shufflevector <4 x i32> %3635, <4 x i32> %3636, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3649 = shufflevector <4 x i32> %3637, <4 x i32> %3638, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3650 = shufflevector <4 x i32> %3639, <4 x i32> %3640, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3651 = shufflevector <4 x i32> %3641, <4 x i32> %3643, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3652 = shufflevector <8 x i32> %3644, <8 x i32> %3645, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3653 = shufflevector <8 x i32> %3646, <8 x i32> %3647, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3654 = shufflevector <8 x i32> %3648, <8 x i32> %3649, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3655 = shufflevector <8 x i32> %3650, <8 x i32> %3651, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3656 = shufflevector <16 x i32> %3652, <16 x i32> %3653, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3657 = shufflevector <16 x i32> %3654, <16 x i32> %3655, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3658 = shufflevector <32 x i32> %3656, <32 x i32> %3657, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3659 = add nsw i32 %blur_x.s0.x.xi.base.s8, -58
  %3660 = insertelement <64 x i32> undef, i32 %3659, i32 0
  %3661 = shufflevector <64 x i32> %3660, <64 x i32> undef, <64 x i32> zeroinitializer
  %3662 = add nsw <64 x i32> %3661, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3663 = shufflevector <64 x i32> %3662, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3664 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3663, <4 x i32> %53)
  %3665 = shufflevector <64 x i32> %3662, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3666 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3665, <4 x i32> %53)
  %3667 = shufflevector <64 x i32> %3662, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %3668 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3667, <4 x i32> %53)
  %3669 = shufflevector <64 x i32> %3662, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %3670 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3669, <4 x i32> %53)
  %3671 = shufflevector <64 x i32> %3662, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %3672 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3671, <4 x i32> %53)
  %3673 = shufflevector <64 x i32> %3662, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %3674 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3673, <4 x i32> %53)
  %3675 = shufflevector <64 x i32> %3662, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %3676 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3675, <4 x i32> %53)
  %3677 = shufflevector <64 x i32> %3662, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %3678 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3677, <4 x i32> %53)
  %3679 = shufflevector <64 x i32> %3662, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %3680 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3679, <4 x i32> %53)
  %3681 = shufflevector <64 x i32> %3662, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %3682 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3681, <4 x i32> %53)
  %3683 = shufflevector <64 x i32> %3662, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %3684 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3683, <4 x i32> %53)
  %3685 = shufflevector <64 x i32> %3662, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %3686 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3685, <4 x i32> %53)
  %3687 = shufflevector <64 x i32> %3662, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %3688 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3687, <4 x i32> %53)
  %3689 = shufflevector <64 x i32> %3662, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %3690 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3689, <4 x i32> %53)
  %3691 = shufflevector <64 x i32> %3662, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %3692 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3691, <4 x i32> %53)
  %3693 = shufflevector <64 x i32> %3662, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %3694 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3693, <4 x i32> %53)
  %3695 = shufflevector <4 x i32> %3694, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %3696 = shufflevector <8 x i32> %3695, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %3697 = shufflevector <16 x i32> %3696, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %3698 = shufflevector <32 x i32> %3697, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %3699 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3664, <4 x i32> zeroinitializer)
  %3700 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3666, <4 x i32> zeroinitializer)
  %3701 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3668, <4 x i32> zeroinitializer)
  %3702 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3670, <4 x i32> zeroinitializer)
  %3703 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3672, <4 x i32> zeroinitializer)
  %3704 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3674, <4 x i32> zeroinitializer)
  %3705 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3676, <4 x i32> zeroinitializer)
  %3706 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3678, <4 x i32> zeroinitializer)
  %3707 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3680, <4 x i32> zeroinitializer)
  %3708 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3682, <4 x i32> zeroinitializer)
  %3709 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3684, <4 x i32> zeroinitializer)
  %3710 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3686, <4 x i32> zeroinitializer)
  %3711 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3688, <4 x i32> zeroinitializer)
  %3712 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3690, <4 x i32> zeroinitializer)
  %3713 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3692, <4 x i32> zeroinitializer)
  %3714 = shufflevector <64 x i32> %3698, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %3715 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3714, <4 x i32> zeroinitializer)
  %3716 = shufflevector <4 x i32> %3699, <4 x i32> %3700, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3717 = shufflevector <4 x i32> %3701, <4 x i32> %3702, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3718 = shufflevector <4 x i32> %3703, <4 x i32> %3704, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3719 = shufflevector <4 x i32> %3705, <4 x i32> %3706, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3720 = shufflevector <4 x i32> %3707, <4 x i32> %3708, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3721 = shufflevector <4 x i32> %3709, <4 x i32> %3710, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3722 = shufflevector <4 x i32> %3711, <4 x i32> %3712, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3723 = shufflevector <4 x i32> %3713, <4 x i32> %3715, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3724 = shufflevector <8 x i32> %3716, <8 x i32> %3717, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3725 = shufflevector <8 x i32> %3718, <8 x i32> %3719, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3726 = shufflevector <8 x i32> %3720, <8 x i32> %3721, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3727 = shufflevector <8 x i32> %3722, <8 x i32> %3723, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3728 = shufflevector <16 x i32> %3724, <16 x i32> %3725, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3729 = shufflevector <16 x i32> %3726, <16 x i32> %3727, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3730 = shufflevector <32 x i32> %3728, <32 x i32> %3729, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3731 = add nsw i32 %blur_x.s0.x.xi.base.s8, -59
  %3732 = insertelement <64 x i32> undef, i32 %3731, i32 0
  %3733 = shufflevector <64 x i32> %3732, <64 x i32> undef, <64 x i32> zeroinitializer
  %3734 = add nsw <64 x i32> %3733, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3735 = shufflevector <64 x i32> %3734, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3736 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3735, <4 x i32> %53)
  %3737 = shufflevector <64 x i32> %3734, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3738 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3737, <4 x i32> %53)
  %3739 = shufflevector <64 x i32> %3734, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %3740 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3739, <4 x i32> %53)
  %3741 = shufflevector <64 x i32> %3734, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %3742 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3741, <4 x i32> %53)
  %3743 = shufflevector <64 x i32> %3734, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %3744 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3743, <4 x i32> %53)
  %3745 = shufflevector <64 x i32> %3734, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %3746 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3745, <4 x i32> %53)
  %3747 = shufflevector <64 x i32> %3734, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %3748 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3747, <4 x i32> %53)
  %3749 = shufflevector <64 x i32> %3734, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %3750 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3749, <4 x i32> %53)
  %3751 = shufflevector <64 x i32> %3734, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %3752 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3751, <4 x i32> %53)
  %3753 = shufflevector <64 x i32> %3734, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %3754 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3753, <4 x i32> %53)
  %3755 = shufflevector <64 x i32> %3734, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %3756 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3755, <4 x i32> %53)
  %3757 = shufflevector <64 x i32> %3734, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %3758 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3757, <4 x i32> %53)
  %3759 = shufflevector <64 x i32> %3734, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %3760 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3759, <4 x i32> %53)
  %3761 = shufflevector <64 x i32> %3734, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %3762 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3761, <4 x i32> %53)
  %3763 = shufflevector <64 x i32> %3734, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %3764 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3763, <4 x i32> %53)
  %3765 = shufflevector <64 x i32> %3734, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %3766 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3765, <4 x i32> %53)
  %3767 = shufflevector <4 x i32> %3766, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %3768 = shufflevector <8 x i32> %3767, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %3769 = shufflevector <16 x i32> %3768, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %3770 = shufflevector <32 x i32> %3769, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %3771 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3736, <4 x i32> zeroinitializer)
  %3772 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3738, <4 x i32> zeroinitializer)
  %3773 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3740, <4 x i32> zeroinitializer)
  %3774 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3742, <4 x i32> zeroinitializer)
  %3775 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3744, <4 x i32> zeroinitializer)
  %3776 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3746, <4 x i32> zeroinitializer)
  %3777 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3748, <4 x i32> zeroinitializer)
  %3778 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3750, <4 x i32> zeroinitializer)
  %3779 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3752, <4 x i32> zeroinitializer)
  %3780 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3754, <4 x i32> zeroinitializer)
  %3781 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3756, <4 x i32> zeroinitializer)
  %3782 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3758, <4 x i32> zeroinitializer)
  %3783 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3760, <4 x i32> zeroinitializer)
  %3784 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3762, <4 x i32> zeroinitializer)
  %3785 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3764, <4 x i32> zeroinitializer)
  %3786 = shufflevector <64 x i32> %3770, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %3787 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3786, <4 x i32> zeroinitializer)
  %3788 = shufflevector <4 x i32> %3771, <4 x i32> %3772, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3789 = shufflevector <4 x i32> %3773, <4 x i32> %3774, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3790 = shufflevector <4 x i32> %3775, <4 x i32> %3776, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3791 = shufflevector <4 x i32> %3777, <4 x i32> %3778, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3792 = shufflevector <4 x i32> %3779, <4 x i32> %3780, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3793 = shufflevector <4 x i32> %3781, <4 x i32> %3782, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3794 = shufflevector <4 x i32> %3783, <4 x i32> %3784, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3795 = shufflevector <4 x i32> %3785, <4 x i32> %3787, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3796 = shufflevector <8 x i32> %3788, <8 x i32> %3789, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3797 = shufflevector <8 x i32> %3790, <8 x i32> %3791, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3798 = shufflevector <8 x i32> %3792, <8 x i32> %3793, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3799 = shufflevector <8 x i32> %3794, <8 x i32> %3795, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3800 = shufflevector <16 x i32> %3796, <16 x i32> %3797, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3801 = shufflevector <16 x i32> %3798, <16 x i32> %3799, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3802 = shufflevector <32 x i32> %3800, <32 x i32> %3801, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3803 = sext i32 %3298 to i64
  br label %"for blur_x.s0.y.yi9"

"end for blur_x.s0.x.x.rebased6":                 ; preds = %"end for blur_x.s0.y.yi10", %"end for blur_x.s0.x.x.rebased"
  %3804 = icmp ugt i64 %indvars.iv209, 5
  br i1 %3804, label %"consume blur_x", label %after_bb12

"for blur_x.s0.y.yi9":                            ; preds = %"for blur_x.s0.x.x.rebased5", %"for blur_x.s0.y.yi9"
  %blur_x.s0.y.yi11 = phi i32 [ 0, %"for blur_x.s0.x.x.rebased5" ], [ %6171, %"for blur_x.s0.y.yi9" ]
  %a5 = add nsw i32 %blur_x.s0.y.yi11, %2967
  %3805 = icmp sgt i32 %a5, 0
  %3806 = select i1 %3805, i32 %a5, i32 0
  %3807 = mul nsw i32 %3806, %input.stride.1
  %3808 = insertelement <64 x i32> undef, i32 %3807, i32 0
  %t242 = shufflevector <64 x i32> %3808, <64 x i32> undef, <64 x i32> zeroinitializer
  %3809 = add nsw <64 x i32> %3370, %t242
  %3810 = extractelement <64 x i32> %3809, i32 0
  %3811 = sext i32 %3810 to i64
  %3812 = getelementptr inbounds i16, i16* %54, i64 %3811
  %3813 = load i16, i16* %3812, align 2, !tbaa !386
  %3814 = insertelement <64 x i16> undef, i16 %3813, i32 0
  %3815 = extractelement <64 x i32> %3809, i32 1
  %3816 = sext i32 %3815 to i64
  %3817 = getelementptr inbounds i16, i16* %54, i64 %3816
  %3818 = load i16, i16* %3817, align 2, !tbaa !386
  %3819 = insertelement <64 x i16> %3814, i16 %3818, i32 1
  %3820 = extractelement <64 x i32> %3809, i32 2
  %3821 = sext i32 %3820 to i64
  %3822 = getelementptr inbounds i16, i16* %54, i64 %3821
  %3823 = load i16, i16* %3822, align 2, !tbaa !386
  %3824 = insertelement <64 x i16> %3819, i16 %3823, i32 2
  %3825 = extractelement <64 x i32> %3809, i32 3
  %3826 = sext i32 %3825 to i64
  %3827 = getelementptr inbounds i16, i16* %54, i64 %3826
  %3828 = load i16, i16* %3827, align 2, !tbaa !386
  %3829 = insertelement <64 x i16> %3824, i16 %3828, i32 3
  %3830 = extractelement <64 x i32> %3809, i32 4
  %3831 = sext i32 %3830 to i64
  %3832 = getelementptr inbounds i16, i16* %54, i64 %3831
  %3833 = load i16, i16* %3832, align 2, !tbaa !386
  %3834 = insertelement <64 x i16> %3829, i16 %3833, i32 4
  %3835 = extractelement <64 x i32> %3809, i32 5
  %3836 = sext i32 %3835 to i64
  %3837 = getelementptr inbounds i16, i16* %54, i64 %3836
  %3838 = load i16, i16* %3837, align 2, !tbaa !386
  %3839 = insertelement <64 x i16> %3834, i16 %3838, i32 5
  %3840 = extractelement <64 x i32> %3809, i32 6
  %3841 = sext i32 %3840 to i64
  %3842 = getelementptr inbounds i16, i16* %54, i64 %3841
  %3843 = load i16, i16* %3842, align 2, !tbaa !386
  %3844 = insertelement <64 x i16> %3839, i16 %3843, i32 6
  %3845 = extractelement <64 x i32> %3809, i32 7
  %3846 = sext i32 %3845 to i64
  %3847 = getelementptr inbounds i16, i16* %54, i64 %3846
  %3848 = load i16, i16* %3847, align 2, !tbaa !386
  %3849 = insertelement <64 x i16> %3844, i16 %3848, i32 7
  %3850 = extractelement <64 x i32> %3809, i32 8
  %3851 = sext i32 %3850 to i64
  %3852 = getelementptr inbounds i16, i16* %54, i64 %3851
  %3853 = load i16, i16* %3852, align 2, !tbaa !386
  %3854 = insertelement <64 x i16> %3849, i16 %3853, i32 8
  %3855 = extractelement <64 x i32> %3809, i32 9
  %3856 = sext i32 %3855 to i64
  %3857 = getelementptr inbounds i16, i16* %54, i64 %3856
  %3858 = load i16, i16* %3857, align 2, !tbaa !386
  %3859 = insertelement <64 x i16> %3854, i16 %3858, i32 9
  %3860 = extractelement <64 x i32> %3809, i32 10
  %3861 = sext i32 %3860 to i64
  %3862 = getelementptr inbounds i16, i16* %54, i64 %3861
  %3863 = load i16, i16* %3862, align 2, !tbaa !386
  %3864 = insertelement <64 x i16> %3859, i16 %3863, i32 10
  %3865 = extractelement <64 x i32> %3809, i32 11
  %3866 = sext i32 %3865 to i64
  %3867 = getelementptr inbounds i16, i16* %54, i64 %3866
  %3868 = load i16, i16* %3867, align 2, !tbaa !386
  %3869 = insertelement <64 x i16> %3864, i16 %3868, i32 11
  %3870 = extractelement <64 x i32> %3809, i32 12
  %3871 = sext i32 %3870 to i64
  %3872 = getelementptr inbounds i16, i16* %54, i64 %3871
  %3873 = load i16, i16* %3872, align 2, !tbaa !386
  %3874 = insertelement <64 x i16> %3869, i16 %3873, i32 12
  %3875 = extractelement <64 x i32> %3809, i32 13
  %3876 = sext i32 %3875 to i64
  %3877 = getelementptr inbounds i16, i16* %54, i64 %3876
  %3878 = load i16, i16* %3877, align 2, !tbaa !386
  %3879 = insertelement <64 x i16> %3874, i16 %3878, i32 13
  %3880 = extractelement <64 x i32> %3809, i32 14
  %3881 = sext i32 %3880 to i64
  %3882 = getelementptr inbounds i16, i16* %54, i64 %3881
  %3883 = load i16, i16* %3882, align 2, !tbaa !386
  %3884 = insertelement <64 x i16> %3879, i16 %3883, i32 14
  %3885 = extractelement <64 x i32> %3809, i32 15
  %3886 = sext i32 %3885 to i64
  %3887 = getelementptr inbounds i16, i16* %54, i64 %3886
  %3888 = load i16, i16* %3887, align 2, !tbaa !386
  %3889 = insertelement <64 x i16> %3884, i16 %3888, i32 15
  %3890 = extractelement <64 x i32> %3809, i32 16
  %3891 = sext i32 %3890 to i64
  %3892 = getelementptr inbounds i16, i16* %54, i64 %3891
  %3893 = load i16, i16* %3892, align 2, !tbaa !386
  %3894 = insertelement <64 x i16> %3889, i16 %3893, i32 16
  %3895 = extractelement <64 x i32> %3809, i32 17
  %3896 = sext i32 %3895 to i64
  %3897 = getelementptr inbounds i16, i16* %54, i64 %3896
  %3898 = load i16, i16* %3897, align 2, !tbaa !386
  %3899 = insertelement <64 x i16> %3894, i16 %3898, i32 17
  %3900 = extractelement <64 x i32> %3809, i32 18
  %3901 = sext i32 %3900 to i64
  %3902 = getelementptr inbounds i16, i16* %54, i64 %3901
  %3903 = load i16, i16* %3902, align 2, !tbaa !386
  %3904 = insertelement <64 x i16> %3899, i16 %3903, i32 18
  %3905 = extractelement <64 x i32> %3809, i32 19
  %3906 = sext i32 %3905 to i64
  %3907 = getelementptr inbounds i16, i16* %54, i64 %3906
  %3908 = load i16, i16* %3907, align 2, !tbaa !386
  %3909 = insertelement <64 x i16> %3904, i16 %3908, i32 19
  %3910 = extractelement <64 x i32> %3809, i32 20
  %3911 = sext i32 %3910 to i64
  %3912 = getelementptr inbounds i16, i16* %54, i64 %3911
  %3913 = load i16, i16* %3912, align 2, !tbaa !386
  %3914 = insertelement <64 x i16> %3909, i16 %3913, i32 20
  %3915 = extractelement <64 x i32> %3809, i32 21
  %3916 = sext i32 %3915 to i64
  %3917 = getelementptr inbounds i16, i16* %54, i64 %3916
  %3918 = load i16, i16* %3917, align 2, !tbaa !386
  %3919 = insertelement <64 x i16> %3914, i16 %3918, i32 21
  %3920 = extractelement <64 x i32> %3809, i32 22
  %3921 = sext i32 %3920 to i64
  %3922 = getelementptr inbounds i16, i16* %54, i64 %3921
  %3923 = load i16, i16* %3922, align 2, !tbaa !386
  %3924 = insertelement <64 x i16> %3919, i16 %3923, i32 22
  %3925 = extractelement <64 x i32> %3809, i32 23
  %3926 = sext i32 %3925 to i64
  %3927 = getelementptr inbounds i16, i16* %54, i64 %3926
  %3928 = load i16, i16* %3927, align 2, !tbaa !386
  %3929 = insertelement <64 x i16> %3924, i16 %3928, i32 23
  %3930 = extractelement <64 x i32> %3809, i32 24
  %3931 = sext i32 %3930 to i64
  %3932 = getelementptr inbounds i16, i16* %54, i64 %3931
  %3933 = load i16, i16* %3932, align 2, !tbaa !386
  %3934 = insertelement <64 x i16> %3929, i16 %3933, i32 24
  %3935 = extractelement <64 x i32> %3809, i32 25
  %3936 = sext i32 %3935 to i64
  %3937 = getelementptr inbounds i16, i16* %54, i64 %3936
  %3938 = load i16, i16* %3937, align 2, !tbaa !386
  %3939 = insertelement <64 x i16> %3934, i16 %3938, i32 25
  %3940 = extractelement <64 x i32> %3809, i32 26
  %3941 = sext i32 %3940 to i64
  %3942 = getelementptr inbounds i16, i16* %54, i64 %3941
  %3943 = load i16, i16* %3942, align 2, !tbaa !386
  %3944 = insertelement <64 x i16> %3939, i16 %3943, i32 26
  %3945 = extractelement <64 x i32> %3809, i32 27
  %3946 = sext i32 %3945 to i64
  %3947 = getelementptr inbounds i16, i16* %54, i64 %3946
  %3948 = load i16, i16* %3947, align 2, !tbaa !386
  %3949 = insertelement <64 x i16> %3944, i16 %3948, i32 27
  %3950 = extractelement <64 x i32> %3809, i32 28
  %3951 = sext i32 %3950 to i64
  %3952 = getelementptr inbounds i16, i16* %54, i64 %3951
  %3953 = load i16, i16* %3952, align 2, !tbaa !386
  %3954 = insertelement <64 x i16> %3949, i16 %3953, i32 28
  %3955 = extractelement <64 x i32> %3809, i32 29
  %3956 = sext i32 %3955 to i64
  %3957 = getelementptr inbounds i16, i16* %54, i64 %3956
  %3958 = load i16, i16* %3957, align 2, !tbaa !386
  %3959 = insertelement <64 x i16> %3954, i16 %3958, i32 29
  %3960 = extractelement <64 x i32> %3809, i32 30
  %3961 = sext i32 %3960 to i64
  %3962 = getelementptr inbounds i16, i16* %54, i64 %3961
  %3963 = load i16, i16* %3962, align 2, !tbaa !386
  %3964 = insertelement <64 x i16> %3959, i16 %3963, i32 30
  %3965 = extractelement <64 x i32> %3809, i32 31
  %3966 = sext i32 %3965 to i64
  %3967 = getelementptr inbounds i16, i16* %54, i64 %3966
  %3968 = load i16, i16* %3967, align 2, !tbaa !386
  %3969 = insertelement <64 x i16> %3964, i16 %3968, i32 31
  %3970 = extractelement <64 x i32> %3809, i32 32
  %3971 = sext i32 %3970 to i64
  %3972 = getelementptr inbounds i16, i16* %54, i64 %3971
  %3973 = load i16, i16* %3972, align 2, !tbaa !386
  %3974 = insertelement <64 x i16> %3969, i16 %3973, i32 32
  %3975 = extractelement <64 x i32> %3809, i32 33
  %3976 = sext i32 %3975 to i64
  %3977 = getelementptr inbounds i16, i16* %54, i64 %3976
  %3978 = load i16, i16* %3977, align 2, !tbaa !386
  %3979 = insertelement <64 x i16> %3974, i16 %3978, i32 33
  %3980 = extractelement <64 x i32> %3809, i32 34
  %3981 = sext i32 %3980 to i64
  %3982 = getelementptr inbounds i16, i16* %54, i64 %3981
  %3983 = load i16, i16* %3982, align 2, !tbaa !386
  %3984 = insertelement <64 x i16> %3979, i16 %3983, i32 34
  %3985 = extractelement <64 x i32> %3809, i32 35
  %3986 = sext i32 %3985 to i64
  %3987 = getelementptr inbounds i16, i16* %54, i64 %3986
  %3988 = load i16, i16* %3987, align 2, !tbaa !386
  %3989 = insertelement <64 x i16> %3984, i16 %3988, i32 35
  %3990 = extractelement <64 x i32> %3809, i32 36
  %3991 = sext i32 %3990 to i64
  %3992 = getelementptr inbounds i16, i16* %54, i64 %3991
  %3993 = load i16, i16* %3992, align 2, !tbaa !386
  %3994 = insertelement <64 x i16> %3989, i16 %3993, i32 36
  %3995 = extractelement <64 x i32> %3809, i32 37
  %3996 = sext i32 %3995 to i64
  %3997 = getelementptr inbounds i16, i16* %54, i64 %3996
  %3998 = load i16, i16* %3997, align 2, !tbaa !386
  %3999 = insertelement <64 x i16> %3994, i16 %3998, i32 37
  %4000 = extractelement <64 x i32> %3809, i32 38
  %4001 = sext i32 %4000 to i64
  %4002 = getelementptr inbounds i16, i16* %54, i64 %4001
  %4003 = load i16, i16* %4002, align 2, !tbaa !386
  %4004 = insertelement <64 x i16> %3999, i16 %4003, i32 38
  %4005 = extractelement <64 x i32> %3809, i32 39
  %4006 = sext i32 %4005 to i64
  %4007 = getelementptr inbounds i16, i16* %54, i64 %4006
  %4008 = load i16, i16* %4007, align 2, !tbaa !386
  %4009 = insertelement <64 x i16> %4004, i16 %4008, i32 39
  %4010 = extractelement <64 x i32> %3809, i32 40
  %4011 = sext i32 %4010 to i64
  %4012 = getelementptr inbounds i16, i16* %54, i64 %4011
  %4013 = load i16, i16* %4012, align 2, !tbaa !386
  %4014 = insertelement <64 x i16> %4009, i16 %4013, i32 40
  %4015 = extractelement <64 x i32> %3809, i32 41
  %4016 = sext i32 %4015 to i64
  %4017 = getelementptr inbounds i16, i16* %54, i64 %4016
  %4018 = load i16, i16* %4017, align 2, !tbaa !386
  %4019 = insertelement <64 x i16> %4014, i16 %4018, i32 41
  %4020 = extractelement <64 x i32> %3809, i32 42
  %4021 = sext i32 %4020 to i64
  %4022 = getelementptr inbounds i16, i16* %54, i64 %4021
  %4023 = load i16, i16* %4022, align 2, !tbaa !386
  %4024 = insertelement <64 x i16> %4019, i16 %4023, i32 42
  %4025 = extractelement <64 x i32> %3809, i32 43
  %4026 = sext i32 %4025 to i64
  %4027 = getelementptr inbounds i16, i16* %54, i64 %4026
  %4028 = load i16, i16* %4027, align 2, !tbaa !386
  %4029 = insertelement <64 x i16> %4024, i16 %4028, i32 43
  %4030 = extractelement <64 x i32> %3809, i32 44
  %4031 = sext i32 %4030 to i64
  %4032 = getelementptr inbounds i16, i16* %54, i64 %4031
  %4033 = load i16, i16* %4032, align 2, !tbaa !386
  %4034 = insertelement <64 x i16> %4029, i16 %4033, i32 44
  %4035 = extractelement <64 x i32> %3809, i32 45
  %4036 = sext i32 %4035 to i64
  %4037 = getelementptr inbounds i16, i16* %54, i64 %4036
  %4038 = load i16, i16* %4037, align 2, !tbaa !386
  %4039 = insertelement <64 x i16> %4034, i16 %4038, i32 45
  %4040 = extractelement <64 x i32> %3809, i32 46
  %4041 = sext i32 %4040 to i64
  %4042 = getelementptr inbounds i16, i16* %54, i64 %4041
  %4043 = load i16, i16* %4042, align 2, !tbaa !386
  %4044 = insertelement <64 x i16> %4039, i16 %4043, i32 46
  %4045 = extractelement <64 x i32> %3809, i32 47
  %4046 = sext i32 %4045 to i64
  %4047 = getelementptr inbounds i16, i16* %54, i64 %4046
  %4048 = load i16, i16* %4047, align 2, !tbaa !386
  %4049 = insertelement <64 x i16> %4044, i16 %4048, i32 47
  %4050 = extractelement <64 x i32> %3809, i32 48
  %4051 = sext i32 %4050 to i64
  %4052 = getelementptr inbounds i16, i16* %54, i64 %4051
  %4053 = load i16, i16* %4052, align 2, !tbaa !386
  %4054 = insertelement <64 x i16> %4049, i16 %4053, i32 48
  %4055 = extractelement <64 x i32> %3809, i32 49
  %4056 = sext i32 %4055 to i64
  %4057 = getelementptr inbounds i16, i16* %54, i64 %4056
  %4058 = load i16, i16* %4057, align 2, !tbaa !386
  %4059 = insertelement <64 x i16> %4054, i16 %4058, i32 49
  %4060 = extractelement <64 x i32> %3809, i32 50
  %4061 = sext i32 %4060 to i64
  %4062 = getelementptr inbounds i16, i16* %54, i64 %4061
  %4063 = load i16, i16* %4062, align 2, !tbaa !386
  %4064 = insertelement <64 x i16> %4059, i16 %4063, i32 50
  %4065 = extractelement <64 x i32> %3809, i32 51
  %4066 = sext i32 %4065 to i64
  %4067 = getelementptr inbounds i16, i16* %54, i64 %4066
  %4068 = load i16, i16* %4067, align 2, !tbaa !386
  %4069 = insertelement <64 x i16> %4064, i16 %4068, i32 51
  %4070 = extractelement <64 x i32> %3809, i32 52
  %4071 = sext i32 %4070 to i64
  %4072 = getelementptr inbounds i16, i16* %54, i64 %4071
  %4073 = load i16, i16* %4072, align 2, !tbaa !386
  %4074 = insertelement <64 x i16> %4069, i16 %4073, i32 52
  %4075 = extractelement <64 x i32> %3809, i32 53
  %4076 = sext i32 %4075 to i64
  %4077 = getelementptr inbounds i16, i16* %54, i64 %4076
  %4078 = load i16, i16* %4077, align 2, !tbaa !386
  %4079 = insertelement <64 x i16> %4074, i16 %4078, i32 53
  %4080 = extractelement <64 x i32> %3809, i32 54
  %4081 = sext i32 %4080 to i64
  %4082 = getelementptr inbounds i16, i16* %54, i64 %4081
  %4083 = load i16, i16* %4082, align 2, !tbaa !386
  %4084 = insertelement <64 x i16> %4079, i16 %4083, i32 54
  %4085 = extractelement <64 x i32> %3809, i32 55
  %4086 = sext i32 %4085 to i64
  %4087 = getelementptr inbounds i16, i16* %54, i64 %4086
  %4088 = load i16, i16* %4087, align 2, !tbaa !386
  %4089 = insertelement <64 x i16> %4084, i16 %4088, i32 55
  %4090 = extractelement <64 x i32> %3809, i32 56
  %4091 = sext i32 %4090 to i64
  %4092 = getelementptr inbounds i16, i16* %54, i64 %4091
  %4093 = load i16, i16* %4092, align 2, !tbaa !386
  %4094 = insertelement <64 x i16> %4089, i16 %4093, i32 56
  %4095 = extractelement <64 x i32> %3809, i32 57
  %4096 = sext i32 %4095 to i64
  %4097 = getelementptr inbounds i16, i16* %54, i64 %4096
  %4098 = load i16, i16* %4097, align 2, !tbaa !386
  %4099 = insertelement <64 x i16> %4094, i16 %4098, i32 57
  %4100 = extractelement <64 x i32> %3809, i32 58
  %4101 = sext i32 %4100 to i64
  %4102 = getelementptr inbounds i16, i16* %54, i64 %4101
  %4103 = load i16, i16* %4102, align 2, !tbaa !386
  %4104 = insertelement <64 x i16> %4099, i16 %4103, i32 58
  %4105 = extractelement <64 x i32> %3809, i32 59
  %4106 = sext i32 %4105 to i64
  %4107 = getelementptr inbounds i16, i16* %54, i64 %4106
  %4108 = load i16, i16* %4107, align 2, !tbaa !386
  %4109 = insertelement <64 x i16> %4104, i16 %4108, i32 59
  %4110 = extractelement <64 x i32> %3809, i32 60
  %4111 = sext i32 %4110 to i64
  %4112 = getelementptr inbounds i16, i16* %54, i64 %4111
  %4113 = load i16, i16* %4112, align 2, !tbaa !386
  %4114 = insertelement <64 x i16> %4109, i16 %4113, i32 60
  %4115 = extractelement <64 x i32> %3809, i32 61
  %4116 = sext i32 %4115 to i64
  %4117 = getelementptr inbounds i16, i16* %54, i64 %4116
  %4118 = load i16, i16* %4117, align 2, !tbaa !386
  %4119 = insertelement <64 x i16> %4114, i16 %4118, i32 61
  %4120 = extractelement <64 x i32> %3809, i32 62
  %4121 = sext i32 %4120 to i64
  %4122 = getelementptr inbounds i16, i16* %54, i64 %4121
  %4123 = load i16, i16* %4122, align 2, !tbaa !386
  %4124 = insertelement <64 x i16> %4119, i16 %4123, i32 62
  %4125 = extractelement <64 x i32> %3809, i32 63
  %4126 = sext i32 %4125 to i64
  %4127 = getelementptr inbounds i16, i16* %54, i64 %4126
  %4128 = load i16, i16* %4127, align 2, !tbaa !386
  %4129 = insertelement <64 x i16> %4124, i16 %4128, i32 63
  %4130 = add nsw <64 x i32> %3442, %t242
  %4131 = extractelement <64 x i32> %4130, i32 0
  %4132 = sext i32 %4131 to i64
  %4133 = getelementptr inbounds i16, i16* %54, i64 %4132
  %4134 = load i16, i16* %4133, align 2, !tbaa !386
  %4135 = insertelement <64 x i16> undef, i16 %4134, i32 0
  %4136 = extractelement <64 x i32> %4130, i32 1
  %4137 = sext i32 %4136 to i64
  %4138 = getelementptr inbounds i16, i16* %54, i64 %4137
  %4139 = load i16, i16* %4138, align 2, !tbaa !386
  %4140 = insertelement <64 x i16> %4135, i16 %4139, i32 1
  %4141 = extractelement <64 x i32> %4130, i32 2
  %4142 = sext i32 %4141 to i64
  %4143 = getelementptr inbounds i16, i16* %54, i64 %4142
  %4144 = load i16, i16* %4143, align 2, !tbaa !386
  %4145 = insertelement <64 x i16> %4140, i16 %4144, i32 2
  %4146 = extractelement <64 x i32> %4130, i32 3
  %4147 = sext i32 %4146 to i64
  %4148 = getelementptr inbounds i16, i16* %54, i64 %4147
  %4149 = load i16, i16* %4148, align 2, !tbaa !386
  %4150 = insertelement <64 x i16> %4145, i16 %4149, i32 3
  %4151 = extractelement <64 x i32> %4130, i32 4
  %4152 = sext i32 %4151 to i64
  %4153 = getelementptr inbounds i16, i16* %54, i64 %4152
  %4154 = load i16, i16* %4153, align 2, !tbaa !386
  %4155 = insertelement <64 x i16> %4150, i16 %4154, i32 4
  %4156 = extractelement <64 x i32> %4130, i32 5
  %4157 = sext i32 %4156 to i64
  %4158 = getelementptr inbounds i16, i16* %54, i64 %4157
  %4159 = load i16, i16* %4158, align 2, !tbaa !386
  %4160 = insertelement <64 x i16> %4155, i16 %4159, i32 5
  %4161 = extractelement <64 x i32> %4130, i32 6
  %4162 = sext i32 %4161 to i64
  %4163 = getelementptr inbounds i16, i16* %54, i64 %4162
  %4164 = load i16, i16* %4163, align 2, !tbaa !386
  %4165 = insertelement <64 x i16> %4160, i16 %4164, i32 6
  %4166 = extractelement <64 x i32> %4130, i32 7
  %4167 = sext i32 %4166 to i64
  %4168 = getelementptr inbounds i16, i16* %54, i64 %4167
  %4169 = load i16, i16* %4168, align 2, !tbaa !386
  %4170 = insertelement <64 x i16> %4165, i16 %4169, i32 7
  %4171 = extractelement <64 x i32> %4130, i32 8
  %4172 = sext i32 %4171 to i64
  %4173 = getelementptr inbounds i16, i16* %54, i64 %4172
  %4174 = load i16, i16* %4173, align 2, !tbaa !386
  %4175 = insertelement <64 x i16> %4170, i16 %4174, i32 8
  %4176 = extractelement <64 x i32> %4130, i32 9
  %4177 = sext i32 %4176 to i64
  %4178 = getelementptr inbounds i16, i16* %54, i64 %4177
  %4179 = load i16, i16* %4178, align 2, !tbaa !386
  %4180 = insertelement <64 x i16> %4175, i16 %4179, i32 9
  %4181 = extractelement <64 x i32> %4130, i32 10
  %4182 = sext i32 %4181 to i64
  %4183 = getelementptr inbounds i16, i16* %54, i64 %4182
  %4184 = load i16, i16* %4183, align 2, !tbaa !386
  %4185 = insertelement <64 x i16> %4180, i16 %4184, i32 10
  %4186 = extractelement <64 x i32> %4130, i32 11
  %4187 = sext i32 %4186 to i64
  %4188 = getelementptr inbounds i16, i16* %54, i64 %4187
  %4189 = load i16, i16* %4188, align 2, !tbaa !386
  %4190 = insertelement <64 x i16> %4185, i16 %4189, i32 11
  %4191 = extractelement <64 x i32> %4130, i32 12
  %4192 = sext i32 %4191 to i64
  %4193 = getelementptr inbounds i16, i16* %54, i64 %4192
  %4194 = load i16, i16* %4193, align 2, !tbaa !386
  %4195 = insertelement <64 x i16> %4190, i16 %4194, i32 12
  %4196 = extractelement <64 x i32> %4130, i32 13
  %4197 = sext i32 %4196 to i64
  %4198 = getelementptr inbounds i16, i16* %54, i64 %4197
  %4199 = load i16, i16* %4198, align 2, !tbaa !386
  %4200 = insertelement <64 x i16> %4195, i16 %4199, i32 13
  %4201 = extractelement <64 x i32> %4130, i32 14
  %4202 = sext i32 %4201 to i64
  %4203 = getelementptr inbounds i16, i16* %54, i64 %4202
  %4204 = load i16, i16* %4203, align 2, !tbaa !386
  %4205 = insertelement <64 x i16> %4200, i16 %4204, i32 14
  %4206 = extractelement <64 x i32> %4130, i32 15
  %4207 = sext i32 %4206 to i64
  %4208 = getelementptr inbounds i16, i16* %54, i64 %4207
  %4209 = load i16, i16* %4208, align 2, !tbaa !386
  %4210 = insertelement <64 x i16> %4205, i16 %4209, i32 15
  %4211 = extractelement <64 x i32> %4130, i32 16
  %4212 = sext i32 %4211 to i64
  %4213 = getelementptr inbounds i16, i16* %54, i64 %4212
  %4214 = load i16, i16* %4213, align 2, !tbaa !386
  %4215 = insertelement <64 x i16> %4210, i16 %4214, i32 16
  %4216 = extractelement <64 x i32> %4130, i32 17
  %4217 = sext i32 %4216 to i64
  %4218 = getelementptr inbounds i16, i16* %54, i64 %4217
  %4219 = load i16, i16* %4218, align 2, !tbaa !386
  %4220 = insertelement <64 x i16> %4215, i16 %4219, i32 17
  %4221 = extractelement <64 x i32> %4130, i32 18
  %4222 = sext i32 %4221 to i64
  %4223 = getelementptr inbounds i16, i16* %54, i64 %4222
  %4224 = load i16, i16* %4223, align 2, !tbaa !386
  %4225 = insertelement <64 x i16> %4220, i16 %4224, i32 18
  %4226 = extractelement <64 x i32> %4130, i32 19
  %4227 = sext i32 %4226 to i64
  %4228 = getelementptr inbounds i16, i16* %54, i64 %4227
  %4229 = load i16, i16* %4228, align 2, !tbaa !386
  %4230 = insertelement <64 x i16> %4225, i16 %4229, i32 19
  %4231 = extractelement <64 x i32> %4130, i32 20
  %4232 = sext i32 %4231 to i64
  %4233 = getelementptr inbounds i16, i16* %54, i64 %4232
  %4234 = load i16, i16* %4233, align 2, !tbaa !386
  %4235 = insertelement <64 x i16> %4230, i16 %4234, i32 20
  %4236 = extractelement <64 x i32> %4130, i32 21
  %4237 = sext i32 %4236 to i64
  %4238 = getelementptr inbounds i16, i16* %54, i64 %4237
  %4239 = load i16, i16* %4238, align 2, !tbaa !386
  %4240 = insertelement <64 x i16> %4235, i16 %4239, i32 21
  %4241 = extractelement <64 x i32> %4130, i32 22
  %4242 = sext i32 %4241 to i64
  %4243 = getelementptr inbounds i16, i16* %54, i64 %4242
  %4244 = load i16, i16* %4243, align 2, !tbaa !386
  %4245 = insertelement <64 x i16> %4240, i16 %4244, i32 22
  %4246 = extractelement <64 x i32> %4130, i32 23
  %4247 = sext i32 %4246 to i64
  %4248 = getelementptr inbounds i16, i16* %54, i64 %4247
  %4249 = load i16, i16* %4248, align 2, !tbaa !386
  %4250 = insertelement <64 x i16> %4245, i16 %4249, i32 23
  %4251 = extractelement <64 x i32> %4130, i32 24
  %4252 = sext i32 %4251 to i64
  %4253 = getelementptr inbounds i16, i16* %54, i64 %4252
  %4254 = load i16, i16* %4253, align 2, !tbaa !386
  %4255 = insertelement <64 x i16> %4250, i16 %4254, i32 24
  %4256 = extractelement <64 x i32> %4130, i32 25
  %4257 = sext i32 %4256 to i64
  %4258 = getelementptr inbounds i16, i16* %54, i64 %4257
  %4259 = load i16, i16* %4258, align 2, !tbaa !386
  %4260 = insertelement <64 x i16> %4255, i16 %4259, i32 25
  %4261 = extractelement <64 x i32> %4130, i32 26
  %4262 = sext i32 %4261 to i64
  %4263 = getelementptr inbounds i16, i16* %54, i64 %4262
  %4264 = load i16, i16* %4263, align 2, !tbaa !386
  %4265 = insertelement <64 x i16> %4260, i16 %4264, i32 26
  %4266 = extractelement <64 x i32> %4130, i32 27
  %4267 = sext i32 %4266 to i64
  %4268 = getelementptr inbounds i16, i16* %54, i64 %4267
  %4269 = load i16, i16* %4268, align 2, !tbaa !386
  %4270 = insertelement <64 x i16> %4265, i16 %4269, i32 27
  %4271 = extractelement <64 x i32> %4130, i32 28
  %4272 = sext i32 %4271 to i64
  %4273 = getelementptr inbounds i16, i16* %54, i64 %4272
  %4274 = load i16, i16* %4273, align 2, !tbaa !386
  %4275 = insertelement <64 x i16> %4270, i16 %4274, i32 28
  %4276 = extractelement <64 x i32> %4130, i32 29
  %4277 = sext i32 %4276 to i64
  %4278 = getelementptr inbounds i16, i16* %54, i64 %4277
  %4279 = load i16, i16* %4278, align 2, !tbaa !386
  %4280 = insertelement <64 x i16> %4275, i16 %4279, i32 29
  %4281 = extractelement <64 x i32> %4130, i32 30
  %4282 = sext i32 %4281 to i64
  %4283 = getelementptr inbounds i16, i16* %54, i64 %4282
  %4284 = load i16, i16* %4283, align 2, !tbaa !386
  %4285 = insertelement <64 x i16> %4280, i16 %4284, i32 30
  %4286 = extractelement <64 x i32> %4130, i32 31
  %4287 = sext i32 %4286 to i64
  %4288 = getelementptr inbounds i16, i16* %54, i64 %4287
  %4289 = load i16, i16* %4288, align 2, !tbaa !386
  %4290 = insertelement <64 x i16> %4285, i16 %4289, i32 31
  %4291 = extractelement <64 x i32> %4130, i32 32
  %4292 = sext i32 %4291 to i64
  %4293 = getelementptr inbounds i16, i16* %54, i64 %4292
  %4294 = load i16, i16* %4293, align 2, !tbaa !386
  %4295 = insertelement <64 x i16> %4290, i16 %4294, i32 32
  %4296 = extractelement <64 x i32> %4130, i32 33
  %4297 = sext i32 %4296 to i64
  %4298 = getelementptr inbounds i16, i16* %54, i64 %4297
  %4299 = load i16, i16* %4298, align 2, !tbaa !386
  %4300 = insertelement <64 x i16> %4295, i16 %4299, i32 33
  %4301 = extractelement <64 x i32> %4130, i32 34
  %4302 = sext i32 %4301 to i64
  %4303 = getelementptr inbounds i16, i16* %54, i64 %4302
  %4304 = load i16, i16* %4303, align 2, !tbaa !386
  %4305 = insertelement <64 x i16> %4300, i16 %4304, i32 34
  %4306 = extractelement <64 x i32> %4130, i32 35
  %4307 = sext i32 %4306 to i64
  %4308 = getelementptr inbounds i16, i16* %54, i64 %4307
  %4309 = load i16, i16* %4308, align 2, !tbaa !386
  %4310 = insertelement <64 x i16> %4305, i16 %4309, i32 35
  %4311 = extractelement <64 x i32> %4130, i32 36
  %4312 = sext i32 %4311 to i64
  %4313 = getelementptr inbounds i16, i16* %54, i64 %4312
  %4314 = load i16, i16* %4313, align 2, !tbaa !386
  %4315 = insertelement <64 x i16> %4310, i16 %4314, i32 36
  %4316 = extractelement <64 x i32> %4130, i32 37
  %4317 = sext i32 %4316 to i64
  %4318 = getelementptr inbounds i16, i16* %54, i64 %4317
  %4319 = load i16, i16* %4318, align 2, !tbaa !386
  %4320 = insertelement <64 x i16> %4315, i16 %4319, i32 37
  %4321 = extractelement <64 x i32> %4130, i32 38
  %4322 = sext i32 %4321 to i64
  %4323 = getelementptr inbounds i16, i16* %54, i64 %4322
  %4324 = load i16, i16* %4323, align 2, !tbaa !386
  %4325 = insertelement <64 x i16> %4320, i16 %4324, i32 38
  %4326 = extractelement <64 x i32> %4130, i32 39
  %4327 = sext i32 %4326 to i64
  %4328 = getelementptr inbounds i16, i16* %54, i64 %4327
  %4329 = load i16, i16* %4328, align 2, !tbaa !386
  %4330 = insertelement <64 x i16> %4325, i16 %4329, i32 39
  %4331 = extractelement <64 x i32> %4130, i32 40
  %4332 = sext i32 %4331 to i64
  %4333 = getelementptr inbounds i16, i16* %54, i64 %4332
  %4334 = load i16, i16* %4333, align 2, !tbaa !386
  %4335 = insertelement <64 x i16> %4330, i16 %4334, i32 40
  %4336 = extractelement <64 x i32> %4130, i32 41
  %4337 = sext i32 %4336 to i64
  %4338 = getelementptr inbounds i16, i16* %54, i64 %4337
  %4339 = load i16, i16* %4338, align 2, !tbaa !386
  %4340 = insertelement <64 x i16> %4335, i16 %4339, i32 41
  %4341 = extractelement <64 x i32> %4130, i32 42
  %4342 = sext i32 %4341 to i64
  %4343 = getelementptr inbounds i16, i16* %54, i64 %4342
  %4344 = load i16, i16* %4343, align 2, !tbaa !386
  %4345 = insertelement <64 x i16> %4340, i16 %4344, i32 42
  %4346 = extractelement <64 x i32> %4130, i32 43
  %4347 = sext i32 %4346 to i64
  %4348 = getelementptr inbounds i16, i16* %54, i64 %4347
  %4349 = load i16, i16* %4348, align 2, !tbaa !386
  %4350 = insertelement <64 x i16> %4345, i16 %4349, i32 43
  %4351 = extractelement <64 x i32> %4130, i32 44
  %4352 = sext i32 %4351 to i64
  %4353 = getelementptr inbounds i16, i16* %54, i64 %4352
  %4354 = load i16, i16* %4353, align 2, !tbaa !386
  %4355 = insertelement <64 x i16> %4350, i16 %4354, i32 44
  %4356 = extractelement <64 x i32> %4130, i32 45
  %4357 = sext i32 %4356 to i64
  %4358 = getelementptr inbounds i16, i16* %54, i64 %4357
  %4359 = load i16, i16* %4358, align 2, !tbaa !386
  %4360 = insertelement <64 x i16> %4355, i16 %4359, i32 45
  %4361 = extractelement <64 x i32> %4130, i32 46
  %4362 = sext i32 %4361 to i64
  %4363 = getelementptr inbounds i16, i16* %54, i64 %4362
  %4364 = load i16, i16* %4363, align 2, !tbaa !386
  %4365 = insertelement <64 x i16> %4360, i16 %4364, i32 46
  %4366 = extractelement <64 x i32> %4130, i32 47
  %4367 = sext i32 %4366 to i64
  %4368 = getelementptr inbounds i16, i16* %54, i64 %4367
  %4369 = load i16, i16* %4368, align 2, !tbaa !386
  %4370 = insertelement <64 x i16> %4365, i16 %4369, i32 47
  %4371 = extractelement <64 x i32> %4130, i32 48
  %4372 = sext i32 %4371 to i64
  %4373 = getelementptr inbounds i16, i16* %54, i64 %4372
  %4374 = load i16, i16* %4373, align 2, !tbaa !386
  %4375 = insertelement <64 x i16> %4370, i16 %4374, i32 48
  %4376 = extractelement <64 x i32> %4130, i32 49
  %4377 = sext i32 %4376 to i64
  %4378 = getelementptr inbounds i16, i16* %54, i64 %4377
  %4379 = load i16, i16* %4378, align 2, !tbaa !386
  %4380 = insertelement <64 x i16> %4375, i16 %4379, i32 49
  %4381 = extractelement <64 x i32> %4130, i32 50
  %4382 = sext i32 %4381 to i64
  %4383 = getelementptr inbounds i16, i16* %54, i64 %4382
  %4384 = load i16, i16* %4383, align 2, !tbaa !386
  %4385 = insertelement <64 x i16> %4380, i16 %4384, i32 50
  %4386 = extractelement <64 x i32> %4130, i32 51
  %4387 = sext i32 %4386 to i64
  %4388 = getelementptr inbounds i16, i16* %54, i64 %4387
  %4389 = load i16, i16* %4388, align 2, !tbaa !386
  %4390 = insertelement <64 x i16> %4385, i16 %4389, i32 51
  %4391 = extractelement <64 x i32> %4130, i32 52
  %4392 = sext i32 %4391 to i64
  %4393 = getelementptr inbounds i16, i16* %54, i64 %4392
  %4394 = load i16, i16* %4393, align 2, !tbaa !386
  %4395 = insertelement <64 x i16> %4390, i16 %4394, i32 52
  %4396 = extractelement <64 x i32> %4130, i32 53
  %4397 = sext i32 %4396 to i64
  %4398 = getelementptr inbounds i16, i16* %54, i64 %4397
  %4399 = load i16, i16* %4398, align 2, !tbaa !386
  %4400 = insertelement <64 x i16> %4395, i16 %4399, i32 53
  %4401 = extractelement <64 x i32> %4130, i32 54
  %4402 = sext i32 %4401 to i64
  %4403 = getelementptr inbounds i16, i16* %54, i64 %4402
  %4404 = load i16, i16* %4403, align 2, !tbaa !386
  %4405 = insertelement <64 x i16> %4400, i16 %4404, i32 54
  %4406 = extractelement <64 x i32> %4130, i32 55
  %4407 = sext i32 %4406 to i64
  %4408 = getelementptr inbounds i16, i16* %54, i64 %4407
  %4409 = load i16, i16* %4408, align 2, !tbaa !386
  %4410 = insertelement <64 x i16> %4405, i16 %4409, i32 55
  %4411 = extractelement <64 x i32> %4130, i32 56
  %4412 = sext i32 %4411 to i64
  %4413 = getelementptr inbounds i16, i16* %54, i64 %4412
  %4414 = load i16, i16* %4413, align 2, !tbaa !386
  %4415 = insertelement <64 x i16> %4410, i16 %4414, i32 56
  %4416 = extractelement <64 x i32> %4130, i32 57
  %4417 = sext i32 %4416 to i64
  %4418 = getelementptr inbounds i16, i16* %54, i64 %4417
  %4419 = load i16, i16* %4418, align 2, !tbaa !386
  %4420 = insertelement <64 x i16> %4415, i16 %4419, i32 57
  %4421 = extractelement <64 x i32> %4130, i32 58
  %4422 = sext i32 %4421 to i64
  %4423 = getelementptr inbounds i16, i16* %54, i64 %4422
  %4424 = load i16, i16* %4423, align 2, !tbaa !386
  %4425 = insertelement <64 x i16> %4420, i16 %4424, i32 58
  %4426 = extractelement <64 x i32> %4130, i32 59
  %4427 = sext i32 %4426 to i64
  %4428 = getelementptr inbounds i16, i16* %54, i64 %4427
  %4429 = load i16, i16* %4428, align 2, !tbaa !386
  %4430 = insertelement <64 x i16> %4425, i16 %4429, i32 59
  %4431 = extractelement <64 x i32> %4130, i32 60
  %4432 = sext i32 %4431 to i64
  %4433 = getelementptr inbounds i16, i16* %54, i64 %4432
  %4434 = load i16, i16* %4433, align 2, !tbaa !386
  %4435 = insertelement <64 x i16> %4430, i16 %4434, i32 60
  %4436 = extractelement <64 x i32> %4130, i32 61
  %4437 = sext i32 %4436 to i64
  %4438 = getelementptr inbounds i16, i16* %54, i64 %4437
  %4439 = load i16, i16* %4438, align 2, !tbaa !386
  %4440 = insertelement <64 x i16> %4435, i16 %4439, i32 61
  %4441 = extractelement <64 x i32> %4130, i32 62
  %4442 = sext i32 %4441 to i64
  %4443 = getelementptr inbounds i16, i16* %54, i64 %4442
  %4444 = load i16, i16* %4443, align 2, !tbaa !386
  %4445 = insertelement <64 x i16> %4440, i16 %4444, i32 62
  %4446 = extractelement <64 x i32> %4130, i32 63
  %4447 = sext i32 %4446 to i64
  %4448 = getelementptr inbounds i16, i16* %54, i64 %4447
  %4449 = load i16, i16* %4448, align 2, !tbaa !386
  %4450 = insertelement <64 x i16> %4445, i16 %4449, i32 63
  %4451 = add nsw <64 x i32> %3514, %t242
  %4452 = extractelement <64 x i32> %4451, i32 0
  %4453 = sext i32 %4452 to i64
  %4454 = getelementptr inbounds i16, i16* %54, i64 %4453
  %4455 = load i16, i16* %4454, align 2, !tbaa !386
  %4456 = insertelement <64 x i16> undef, i16 %4455, i32 0
  %4457 = extractelement <64 x i32> %4451, i32 1
  %4458 = sext i32 %4457 to i64
  %4459 = getelementptr inbounds i16, i16* %54, i64 %4458
  %4460 = load i16, i16* %4459, align 2, !tbaa !386
  %4461 = insertelement <64 x i16> %4456, i16 %4460, i32 1
  %4462 = extractelement <64 x i32> %4451, i32 2
  %4463 = sext i32 %4462 to i64
  %4464 = getelementptr inbounds i16, i16* %54, i64 %4463
  %4465 = load i16, i16* %4464, align 2, !tbaa !386
  %4466 = insertelement <64 x i16> %4461, i16 %4465, i32 2
  %4467 = extractelement <64 x i32> %4451, i32 3
  %4468 = sext i32 %4467 to i64
  %4469 = getelementptr inbounds i16, i16* %54, i64 %4468
  %4470 = load i16, i16* %4469, align 2, !tbaa !386
  %4471 = insertelement <64 x i16> %4466, i16 %4470, i32 3
  %4472 = extractelement <64 x i32> %4451, i32 4
  %4473 = sext i32 %4472 to i64
  %4474 = getelementptr inbounds i16, i16* %54, i64 %4473
  %4475 = load i16, i16* %4474, align 2, !tbaa !386
  %4476 = insertelement <64 x i16> %4471, i16 %4475, i32 4
  %4477 = extractelement <64 x i32> %4451, i32 5
  %4478 = sext i32 %4477 to i64
  %4479 = getelementptr inbounds i16, i16* %54, i64 %4478
  %4480 = load i16, i16* %4479, align 2, !tbaa !386
  %4481 = insertelement <64 x i16> %4476, i16 %4480, i32 5
  %4482 = extractelement <64 x i32> %4451, i32 6
  %4483 = sext i32 %4482 to i64
  %4484 = getelementptr inbounds i16, i16* %54, i64 %4483
  %4485 = load i16, i16* %4484, align 2, !tbaa !386
  %4486 = insertelement <64 x i16> %4481, i16 %4485, i32 6
  %4487 = extractelement <64 x i32> %4451, i32 7
  %4488 = sext i32 %4487 to i64
  %4489 = getelementptr inbounds i16, i16* %54, i64 %4488
  %4490 = load i16, i16* %4489, align 2, !tbaa !386
  %4491 = insertelement <64 x i16> %4486, i16 %4490, i32 7
  %4492 = extractelement <64 x i32> %4451, i32 8
  %4493 = sext i32 %4492 to i64
  %4494 = getelementptr inbounds i16, i16* %54, i64 %4493
  %4495 = load i16, i16* %4494, align 2, !tbaa !386
  %4496 = insertelement <64 x i16> %4491, i16 %4495, i32 8
  %4497 = extractelement <64 x i32> %4451, i32 9
  %4498 = sext i32 %4497 to i64
  %4499 = getelementptr inbounds i16, i16* %54, i64 %4498
  %4500 = load i16, i16* %4499, align 2, !tbaa !386
  %4501 = insertelement <64 x i16> %4496, i16 %4500, i32 9
  %4502 = extractelement <64 x i32> %4451, i32 10
  %4503 = sext i32 %4502 to i64
  %4504 = getelementptr inbounds i16, i16* %54, i64 %4503
  %4505 = load i16, i16* %4504, align 2, !tbaa !386
  %4506 = insertelement <64 x i16> %4501, i16 %4505, i32 10
  %4507 = extractelement <64 x i32> %4451, i32 11
  %4508 = sext i32 %4507 to i64
  %4509 = getelementptr inbounds i16, i16* %54, i64 %4508
  %4510 = load i16, i16* %4509, align 2, !tbaa !386
  %4511 = insertelement <64 x i16> %4506, i16 %4510, i32 11
  %4512 = extractelement <64 x i32> %4451, i32 12
  %4513 = sext i32 %4512 to i64
  %4514 = getelementptr inbounds i16, i16* %54, i64 %4513
  %4515 = load i16, i16* %4514, align 2, !tbaa !386
  %4516 = insertelement <64 x i16> %4511, i16 %4515, i32 12
  %4517 = extractelement <64 x i32> %4451, i32 13
  %4518 = sext i32 %4517 to i64
  %4519 = getelementptr inbounds i16, i16* %54, i64 %4518
  %4520 = load i16, i16* %4519, align 2, !tbaa !386
  %4521 = insertelement <64 x i16> %4516, i16 %4520, i32 13
  %4522 = extractelement <64 x i32> %4451, i32 14
  %4523 = sext i32 %4522 to i64
  %4524 = getelementptr inbounds i16, i16* %54, i64 %4523
  %4525 = load i16, i16* %4524, align 2, !tbaa !386
  %4526 = insertelement <64 x i16> %4521, i16 %4525, i32 14
  %4527 = extractelement <64 x i32> %4451, i32 15
  %4528 = sext i32 %4527 to i64
  %4529 = getelementptr inbounds i16, i16* %54, i64 %4528
  %4530 = load i16, i16* %4529, align 2, !tbaa !386
  %4531 = insertelement <64 x i16> %4526, i16 %4530, i32 15
  %4532 = extractelement <64 x i32> %4451, i32 16
  %4533 = sext i32 %4532 to i64
  %4534 = getelementptr inbounds i16, i16* %54, i64 %4533
  %4535 = load i16, i16* %4534, align 2, !tbaa !386
  %4536 = insertelement <64 x i16> %4531, i16 %4535, i32 16
  %4537 = extractelement <64 x i32> %4451, i32 17
  %4538 = sext i32 %4537 to i64
  %4539 = getelementptr inbounds i16, i16* %54, i64 %4538
  %4540 = load i16, i16* %4539, align 2, !tbaa !386
  %4541 = insertelement <64 x i16> %4536, i16 %4540, i32 17
  %4542 = extractelement <64 x i32> %4451, i32 18
  %4543 = sext i32 %4542 to i64
  %4544 = getelementptr inbounds i16, i16* %54, i64 %4543
  %4545 = load i16, i16* %4544, align 2, !tbaa !386
  %4546 = insertelement <64 x i16> %4541, i16 %4545, i32 18
  %4547 = extractelement <64 x i32> %4451, i32 19
  %4548 = sext i32 %4547 to i64
  %4549 = getelementptr inbounds i16, i16* %54, i64 %4548
  %4550 = load i16, i16* %4549, align 2, !tbaa !386
  %4551 = insertelement <64 x i16> %4546, i16 %4550, i32 19
  %4552 = extractelement <64 x i32> %4451, i32 20
  %4553 = sext i32 %4552 to i64
  %4554 = getelementptr inbounds i16, i16* %54, i64 %4553
  %4555 = load i16, i16* %4554, align 2, !tbaa !386
  %4556 = insertelement <64 x i16> %4551, i16 %4555, i32 20
  %4557 = extractelement <64 x i32> %4451, i32 21
  %4558 = sext i32 %4557 to i64
  %4559 = getelementptr inbounds i16, i16* %54, i64 %4558
  %4560 = load i16, i16* %4559, align 2, !tbaa !386
  %4561 = insertelement <64 x i16> %4556, i16 %4560, i32 21
  %4562 = extractelement <64 x i32> %4451, i32 22
  %4563 = sext i32 %4562 to i64
  %4564 = getelementptr inbounds i16, i16* %54, i64 %4563
  %4565 = load i16, i16* %4564, align 2, !tbaa !386
  %4566 = insertelement <64 x i16> %4561, i16 %4565, i32 22
  %4567 = extractelement <64 x i32> %4451, i32 23
  %4568 = sext i32 %4567 to i64
  %4569 = getelementptr inbounds i16, i16* %54, i64 %4568
  %4570 = load i16, i16* %4569, align 2, !tbaa !386
  %4571 = insertelement <64 x i16> %4566, i16 %4570, i32 23
  %4572 = extractelement <64 x i32> %4451, i32 24
  %4573 = sext i32 %4572 to i64
  %4574 = getelementptr inbounds i16, i16* %54, i64 %4573
  %4575 = load i16, i16* %4574, align 2, !tbaa !386
  %4576 = insertelement <64 x i16> %4571, i16 %4575, i32 24
  %4577 = extractelement <64 x i32> %4451, i32 25
  %4578 = sext i32 %4577 to i64
  %4579 = getelementptr inbounds i16, i16* %54, i64 %4578
  %4580 = load i16, i16* %4579, align 2, !tbaa !386
  %4581 = insertelement <64 x i16> %4576, i16 %4580, i32 25
  %4582 = extractelement <64 x i32> %4451, i32 26
  %4583 = sext i32 %4582 to i64
  %4584 = getelementptr inbounds i16, i16* %54, i64 %4583
  %4585 = load i16, i16* %4584, align 2, !tbaa !386
  %4586 = insertelement <64 x i16> %4581, i16 %4585, i32 26
  %4587 = extractelement <64 x i32> %4451, i32 27
  %4588 = sext i32 %4587 to i64
  %4589 = getelementptr inbounds i16, i16* %54, i64 %4588
  %4590 = load i16, i16* %4589, align 2, !tbaa !386
  %4591 = insertelement <64 x i16> %4586, i16 %4590, i32 27
  %4592 = extractelement <64 x i32> %4451, i32 28
  %4593 = sext i32 %4592 to i64
  %4594 = getelementptr inbounds i16, i16* %54, i64 %4593
  %4595 = load i16, i16* %4594, align 2, !tbaa !386
  %4596 = insertelement <64 x i16> %4591, i16 %4595, i32 28
  %4597 = extractelement <64 x i32> %4451, i32 29
  %4598 = sext i32 %4597 to i64
  %4599 = getelementptr inbounds i16, i16* %54, i64 %4598
  %4600 = load i16, i16* %4599, align 2, !tbaa !386
  %4601 = insertelement <64 x i16> %4596, i16 %4600, i32 29
  %4602 = extractelement <64 x i32> %4451, i32 30
  %4603 = sext i32 %4602 to i64
  %4604 = getelementptr inbounds i16, i16* %54, i64 %4603
  %4605 = load i16, i16* %4604, align 2, !tbaa !386
  %4606 = insertelement <64 x i16> %4601, i16 %4605, i32 30
  %4607 = extractelement <64 x i32> %4451, i32 31
  %4608 = sext i32 %4607 to i64
  %4609 = getelementptr inbounds i16, i16* %54, i64 %4608
  %4610 = load i16, i16* %4609, align 2, !tbaa !386
  %4611 = insertelement <64 x i16> %4606, i16 %4610, i32 31
  %4612 = extractelement <64 x i32> %4451, i32 32
  %4613 = sext i32 %4612 to i64
  %4614 = getelementptr inbounds i16, i16* %54, i64 %4613
  %4615 = load i16, i16* %4614, align 2, !tbaa !386
  %4616 = insertelement <64 x i16> %4611, i16 %4615, i32 32
  %4617 = extractelement <64 x i32> %4451, i32 33
  %4618 = sext i32 %4617 to i64
  %4619 = getelementptr inbounds i16, i16* %54, i64 %4618
  %4620 = load i16, i16* %4619, align 2, !tbaa !386
  %4621 = insertelement <64 x i16> %4616, i16 %4620, i32 33
  %4622 = extractelement <64 x i32> %4451, i32 34
  %4623 = sext i32 %4622 to i64
  %4624 = getelementptr inbounds i16, i16* %54, i64 %4623
  %4625 = load i16, i16* %4624, align 2, !tbaa !386
  %4626 = insertelement <64 x i16> %4621, i16 %4625, i32 34
  %4627 = extractelement <64 x i32> %4451, i32 35
  %4628 = sext i32 %4627 to i64
  %4629 = getelementptr inbounds i16, i16* %54, i64 %4628
  %4630 = load i16, i16* %4629, align 2, !tbaa !386
  %4631 = insertelement <64 x i16> %4626, i16 %4630, i32 35
  %4632 = extractelement <64 x i32> %4451, i32 36
  %4633 = sext i32 %4632 to i64
  %4634 = getelementptr inbounds i16, i16* %54, i64 %4633
  %4635 = load i16, i16* %4634, align 2, !tbaa !386
  %4636 = insertelement <64 x i16> %4631, i16 %4635, i32 36
  %4637 = extractelement <64 x i32> %4451, i32 37
  %4638 = sext i32 %4637 to i64
  %4639 = getelementptr inbounds i16, i16* %54, i64 %4638
  %4640 = load i16, i16* %4639, align 2, !tbaa !386
  %4641 = insertelement <64 x i16> %4636, i16 %4640, i32 37
  %4642 = extractelement <64 x i32> %4451, i32 38
  %4643 = sext i32 %4642 to i64
  %4644 = getelementptr inbounds i16, i16* %54, i64 %4643
  %4645 = load i16, i16* %4644, align 2, !tbaa !386
  %4646 = insertelement <64 x i16> %4641, i16 %4645, i32 38
  %4647 = extractelement <64 x i32> %4451, i32 39
  %4648 = sext i32 %4647 to i64
  %4649 = getelementptr inbounds i16, i16* %54, i64 %4648
  %4650 = load i16, i16* %4649, align 2, !tbaa !386
  %4651 = insertelement <64 x i16> %4646, i16 %4650, i32 39
  %4652 = extractelement <64 x i32> %4451, i32 40
  %4653 = sext i32 %4652 to i64
  %4654 = getelementptr inbounds i16, i16* %54, i64 %4653
  %4655 = load i16, i16* %4654, align 2, !tbaa !386
  %4656 = insertelement <64 x i16> %4651, i16 %4655, i32 40
  %4657 = extractelement <64 x i32> %4451, i32 41
  %4658 = sext i32 %4657 to i64
  %4659 = getelementptr inbounds i16, i16* %54, i64 %4658
  %4660 = load i16, i16* %4659, align 2, !tbaa !386
  %4661 = insertelement <64 x i16> %4656, i16 %4660, i32 41
  %4662 = extractelement <64 x i32> %4451, i32 42
  %4663 = sext i32 %4662 to i64
  %4664 = getelementptr inbounds i16, i16* %54, i64 %4663
  %4665 = load i16, i16* %4664, align 2, !tbaa !386
  %4666 = insertelement <64 x i16> %4661, i16 %4665, i32 42
  %4667 = extractelement <64 x i32> %4451, i32 43
  %4668 = sext i32 %4667 to i64
  %4669 = getelementptr inbounds i16, i16* %54, i64 %4668
  %4670 = load i16, i16* %4669, align 2, !tbaa !386
  %4671 = insertelement <64 x i16> %4666, i16 %4670, i32 43
  %4672 = extractelement <64 x i32> %4451, i32 44
  %4673 = sext i32 %4672 to i64
  %4674 = getelementptr inbounds i16, i16* %54, i64 %4673
  %4675 = load i16, i16* %4674, align 2, !tbaa !386
  %4676 = insertelement <64 x i16> %4671, i16 %4675, i32 44
  %4677 = extractelement <64 x i32> %4451, i32 45
  %4678 = sext i32 %4677 to i64
  %4679 = getelementptr inbounds i16, i16* %54, i64 %4678
  %4680 = load i16, i16* %4679, align 2, !tbaa !386
  %4681 = insertelement <64 x i16> %4676, i16 %4680, i32 45
  %4682 = extractelement <64 x i32> %4451, i32 46
  %4683 = sext i32 %4682 to i64
  %4684 = getelementptr inbounds i16, i16* %54, i64 %4683
  %4685 = load i16, i16* %4684, align 2, !tbaa !386
  %4686 = insertelement <64 x i16> %4681, i16 %4685, i32 46
  %4687 = extractelement <64 x i32> %4451, i32 47
  %4688 = sext i32 %4687 to i64
  %4689 = getelementptr inbounds i16, i16* %54, i64 %4688
  %4690 = load i16, i16* %4689, align 2, !tbaa !386
  %4691 = insertelement <64 x i16> %4686, i16 %4690, i32 47
  %4692 = extractelement <64 x i32> %4451, i32 48
  %4693 = sext i32 %4692 to i64
  %4694 = getelementptr inbounds i16, i16* %54, i64 %4693
  %4695 = load i16, i16* %4694, align 2, !tbaa !386
  %4696 = insertelement <64 x i16> %4691, i16 %4695, i32 48
  %4697 = extractelement <64 x i32> %4451, i32 49
  %4698 = sext i32 %4697 to i64
  %4699 = getelementptr inbounds i16, i16* %54, i64 %4698
  %4700 = load i16, i16* %4699, align 2, !tbaa !386
  %4701 = insertelement <64 x i16> %4696, i16 %4700, i32 49
  %4702 = extractelement <64 x i32> %4451, i32 50
  %4703 = sext i32 %4702 to i64
  %4704 = getelementptr inbounds i16, i16* %54, i64 %4703
  %4705 = load i16, i16* %4704, align 2, !tbaa !386
  %4706 = insertelement <64 x i16> %4701, i16 %4705, i32 50
  %4707 = extractelement <64 x i32> %4451, i32 51
  %4708 = sext i32 %4707 to i64
  %4709 = getelementptr inbounds i16, i16* %54, i64 %4708
  %4710 = load i16, i16* %4709, align 2, !tbaa !386
  %4711 = insertelement <64 x i16> %4706, i16 %4710, i32 51
  %4712 = extractelement <64 x i32> %4451, i32 52
  %4713 = sext i32 %4712 to i64
  %4714 = getelementptr inbounds i16, i16* %54, i64 %4713
  %4715 = load i16, i16* %4714, align 2, !tbaa !386
  %4716 = insertelement <64 x i16> %4711, i16 %4715, i32 52
  %4717 = extractelement <64 x i32> %4451, i32 53
  %4718 = sext i32 %4717 to i64
  %4719 = getelementptr inbounds i16, i16* %54, i64 %4718
  %4720 = load i16, i16* %4719, align 2, !tbaa !386
  %4721 = insertelement <64 x i16> %4716, i16 %4720, i32 53
  %4722 = extractelement <64 x i32> %4451, i32 54
  %4723 = sext i32 %4722 to i64
  %4724 = getelementptr inbounds i16, i16* %54, i64 %4723
  %4725 = load i16, i16* %4724, align 2, !tbaa !386
  %4726 = insertelement <64 x i16> %4721, i16 %4725, i32 54
  %4727 = extractelement <64 x i32> %4451, i32 55
  %4728 = sext i32 %4727 to i64
  %4729 = getelementptr inbounds i16, i16* %54, i64 %4728
  %4730 = load i16, i16* %4729, align 2, !tbaa !386
  %4731 = insertelement <64 x i16> %4726, i16 %4730, i32 55
  %4732 = extractelement <64 x i32> %4451, i32 56
  %4733 = sext i32 %4732 to i64
  %4734 = getelementptr inbounds i16, i16* %54, i64 %4733
  %4735 = load i16, i16* %4734, align 2, !tbaa !386
  %4736 = insertelement <64 x i16> %4731, i16 %4735, i32 56
  %4737 = extractelement <64 x i32> %4451, i32 57
  %4738 = sext i32 %4737 to i64
  %4739 = getelementptr inbounds i16, i16* %54, i64 %4738
  %4740 = load i16, i16* %4739, align 2, !tbaa !386
  %4741 = insertelement <64 x i16> %4736, i16 %4740, i32 57
  %4742 = extractelement <64 x i32> %4451, i32 58
  %4743 = sext i32 %4742 to i64
  %4744 = getelementptr inbounds i16, i16* %54, i64 %4743
  %4745 = load i16, i16* %4744, align 2, !tbaa !386
  %4746 = insertelement <64 x i16> %4741, i16 %4745, i32 58
  %4747 = extractelement <64 x i32> %4451, i32 59
  %4748 = sext i32 %4747 to i64
  %4749 = getelementptr inbounds i16, i16* %54, i64 %4748
  %4750 = load i16, i16* %4749, align 2, !tbaa !386
  %4751 = insertelement <64 x i16> %4746, i16 %4750, i32 59
  %4752 = extractelement <64 x i32> %4451, i32 60
  %4753 = sext i32 %4752 to i64
  %4754 = getelementptr inbounds i16, i16* %54, i64 %4753
  %4755 = load i16, i16* %4754, align 2, !tbaa !386
  %4756 = insertelement <64 x i16> %4751, i16 %4755, i32 60
  %4757 = extractelement <64 x i32> %4451, i32 61
  %4758 = sext i32 %4757 to i64
  %4759 = getelementptr inbounds i16, i16* %54, i64 %4758
  %4760 = load i16, i16* %4759, align 2, !tbaa !386
  %4761 = insertelement <64 x i16> %4756, i16 %4760, i32 61
  %4762 = extractelement <64 x i32> %4451, i32 62
  %4763 = sext i32 %4762 to i64
  %4764 = getelementptr inbounds i16, i16* %54, i64 %4763
  %4765 = load i16, i16* %4764, align 2, !tbaa !386
  %4766 = insertelement <64 x i16> %4761, i16 %4765, i32 62
  %4767 = extractelement <64 x i32> %4451, i32 63
  %4768 = sext i32 %4767 to i64
  %4769 = getelementptr inbounds i16, i16* %54, i64 %4768
  %4770 = load i16, i16* %4769, align 2, !tbaa !386
  %4771 = insertelement <64 x i16> %4766, i16 %4770, i32 63
  %4772 = add nsw <64 x i32> %3586, %t242
  %4773 = extractelement <64 x i32> %4772, i32 0
  %4774 = sext i32 %4773 to i64
  %4775 = getelementptr inbounds i16, i16* %54, i64 %4774
  %4776 = load i16, i16* %4775, align 2, !tbaa !386
  %4777 = insertelement <64 x i16> undef, i16 %4776, i32 0
  %4778 = extractelement <64 x i32> %4772, i32 1
  %4779 = sext i32 %4778 to i64
  %4780 = getelementptr inbounds i16, i16* %54, i64 %4779
  %4781 = load i16, i16* %4780, align 2, !tbaa !386
  %4782 = insertelement <64 x i16> %4777, i16 %4781, i32 1
  %4783 = extractelement <64 x i32> %4772, i32 2
  %4784 = sext i32 %4783 to i64
  %4785 = getelementptr inbounds i16, i16* %54, i64 %4784
  %4786 = load i16, i16* %4785, align 2, !tbaa !386
  %4787 = insertelement <64 x i16> %4782, i16 %4786, i32 2
  %4788 = extractelement <64 x i32> %4772, i32 3
  %4789 = sext i32 %4788 to i64
  %4790 = getelementptr inbounds i16, i16* %54, i64 %4789
  %4791 = load i16, i16* %4790, align 2, !tbaa !386
  %4792 = insertelement <64 x i16> %4787, i16 %4791, i32 3
  %4793 = extractelement <64 x i32> %4772, i32 4
  %4794 = sext i32 %4793 to i64
  %4795 = getelementptr inbounds i16, i16* %54, i64 %4794
  %4796 = load i16, i16* %4795, align 2, !tbaa !386
  %4797 = insertelement <64 x i16> %4792, i16 %4796, i32 4
  %4798 = extractelement <64 x i32> %4772, i32 5
  %4799 = sext i32 %4798 to i64
  %4800 = getelementptr inbounds i16, i16* %54, i64 %4799
  %4801 = load i16, i16* %4800, align 2, !tbaa !386
  %4802 = insertelement <64 x i16> %4797, i16 %4801, i32 5
  %4803 = extractelement <64 x i32> %4772, i32 6
  %4804 = sext i32 %4803 to i64
  %4805 = getelementptr inbounds i16, i16* %54, i64 %4804
  %4806 = load i16, i16* %4805, align 2, !tbaa !386
  %4807 = insertelement <64 x i16> %4802, i16 %4806, i32 6
  %4808 = extractelement <64 x i32> %4772, i32 7
  %4809 = sext i32 %4808 to i64
  %4810 = getelementptr inbounds i16, i16* %54, i64 %4809
  %4811 = load i16, i16* %4810, align 2, !tbaa !386
  %4812 = insertelement <64 x i16> %4807, i16 %4811, i32 7
  %4813 = extractelement <64 x i32> %4772, i32 8
  %4814 = sext i32 %4813 to i64
  %4815 = getelementptr inbounds i16, i16* %54, i64 %4814
  %4816 = load i16, i16* %4815, align 2, !tbaa !386
  %4817 = insertelement <64 x i16> %4812, i16 %4816, i32 8
  %4818 = extractelement <64 x i32> %4772, i32 9
  %4819 = sext i32 %4818 to i64
  %4820 = getelementptr inbounds i16, i16* %54, i64 %4819
  %4821 = load i16, i16* %4820, align 2, !tbaa !386
  %4822 = insertelement <64 x i16> %4817, i16 %4821, i32 9
  %4823 = extractelement <64 x i32> %4772, i32 10
  %4824 = sext i32 %4823 to i64
  %4825 = getelementptr inbounds i16, i16* %54, i64 %4824
  %4826 = load i16, i16* %4825, align 2, !tbaa !386
  %4827 = insertelement <64 x i16> %4822, i16 %4826, i32 10
  %4828 = extractelement <64 x i32> %4772, i32 11
  %4829 = sext i32 %4828 to i64
  %4830 = getelementptr inbounds i16, i16* %54, i64 %4829
  %4831 = load i16, i16* %4830, align 2, !tbaa !386
  %4832 = insertelement <64 x i16> %4827, i16 %4831, i32 11
  %4833 = extractelement <64 x i32> %4772, i32 12
  %4834 = sext i32 %4833 to i64
  %4835 = getelementptr inbounds i16, i16* %54, i64 %4834
  %4836 = load i16, i16* %4835, align 2, !tbaa !386
  %4837 = insertelement <64 x i16> %4832, i16 %4836, i32 12
  %4838 = extractelement <64 x i32> %4772, i32 13
  %4839 = sext i32 %4838 to i64
  %4840 = getelementptr inbounds i16, i16* %54, i64 %4839
  %4841 = load i16, i16* %4840, align 2, !tbaa !386
  %4842 = insertelement <64 x i16> %4837, i16 %4841, i32 13
  %4843 = extractelement <64 x i32> %4772, i32 14
  %4844 = sext i32 %4843 to i64
  %4845 = getelementptr inbounds i16, i16* %54, i64 %4844
  %4846 = load i16, i16* %4845, align 2, !tbaa !386
  %4847 = insertelement <64 x i16> %4842, i16 %4846, i32 14
  %4848 = extractelement <64 x i32> %4772, i32 15
  %4849 = sext i32 %4848 to i64
  %4850 = getelementptr inbounds i16, i16* %54, i64 %4849
  %4851 = load i16, i16* %4850, align 2, !tbaa !386
  %4852 = insertelement <64 x i16> %4847, i16 %4851, i32 15
  %4853 = extractelement <64 x i32> %4772, i32 16
  %4854 = sext i32 %4853 to i64
  %4855 = getelementptr inbounds i16, i16* %54, i64 %4854
  %4856 = load i16, i16* %4855, align 2, !tbaa !386
  %4857 = insertelement <64 x i16> %4852, i16 %4856, i32 16
  %4858 = extractelement <64 x i32> %4772, i32 17
  %4859 = sext i32 %4858 to i64
  %4860 = getelementptr inbounds i16, i16* %54, i64 %4859
  %4861 = load i16, i16* %4860, align 2, !tbaa !386
  %4862 = insertelement <64 x i16> %4857, i16 %4861, i32 17
  %4863 = extractelement <64 x i32> %4772, i32 18
  %4864 = sext i32 %4863 to i64
  %4865 = getelementptr inbounds i16, i16* %54, i64 %4864
  %4866 = load i16, i16* %4865, align 2, !tbaa !386
  %4867 = insertelement <64 x i16> %4862, i16 %4866, i32 18
  %4868 = extractelement <64 x i32> %4772, i32 19
  %4869 = sext i32 %4868 to i64
  %4870 = getelementptr inbounds i16, i16* %54, i64 %4869
  %4871 = load i16, i16* %4870, align 2, !tbaa !386
  %4872 = insertelement <64 x i16> %4867, i16 %4871, i32 19
  %4873 = extractelement <64 x i32> %4772, i32 20
  %4874 = sext i32 %4873 to i64
  %4875 = getelementptr inbounds i16, i16* %54, i64 %4874
  %4876 = load i16, i16* %4875, align 2, !tbaa !386
  %4877 = insertelement <64 x i16> %4872, i16 %4876, i32 20
  %4878 = extractelement <64 x i32> %4772, i32 21
  %4879 = sext i32 %4878 to i64
  %4880 = getelementptr inbounds i16, i16* %54, i64 %4879
  %4881 = load i16, i16* %4880, align 2, !tbaa !386
  %4882 = insertelement <64 x i16> %4877, i16 %4881, i32 21
  %4883 = extractelement <64 x i32> %4772, i32 22
  %4884 = sext i32 %4883 to i64
  %4885 = getelementptr inbounds i16, i16* %54, i64 %4884
  %4886 = load i16, i16* %4885, align 2, !tbaa !386
  %4887 = insertelement <64 x i16> %4882, i16 %4886, i32 22
  %4888 = extractelement <64 x i32> %4772, i32 23
  %4889 = sext i32 %4888 to i64
  %4890 = getelementptr inbounds i16, i16* %54, i64 %4889
  %4891 = load i16, i16* %4890, align 2, !tbaa !386
  %4892 = insertelement <64 x i16> %4887, i16 %4891, i32 23
  %4893 = extractelement <64 x i32> %4772, i32 24
  %4894 = sext i32 %4893 to i64
  %4895 = getelementptr inbounds i16, i16* %54, i64 %4894
  %4896 = load i16, i16* %4895, align 2, !tbaa !386
  %4897 = insertelement <64 x i16> %4892, i16 %4896, i32 24
  %4898 = extractelement <64 x i32> %4772, i32 25
  %4899 = sext i32 %4898 to i64
  %4900 = getelementptr inbounds i16, i16* %54, i64 %4899
  %4901 = load i16, i16* %4900, align 2, !tbaa !386
  %4902 = insertelement <64 x i16> %4897, i16 %4901, i32 25
  %4903 = extractelement <64 x i32> %4772, i32 26
  %4904 = sext i32 %4903 to i64
  %4905 = getelementptr inbounds i16, i16* %54, i64 %4904
  %4906 = load i16, i16* %4905, align 2, !tbaa !386
  %4907 = insertelement <64 x i16> %4902, i16 %4906, i32 26
  %4908 = extractelement <64 x i32> %4772, i32 27
  %4909 = sext i32 %4908 to i64
  %4910 = getelementptr inbounds i16, i16* %54, i64 %4909
  %4911 = load i16, i16* %4910, align 2, !tbaa !386
  %4912 = insertelement <64 x i16> %4907, i16 %4911, i32 27
  %4913 = extractelement <64 x i32> %4772, i32 28
  %4914 = sext i32 %4913 to i64
  %4915 = getelementptr inbounds i16, i16* %54, i64 %4914
  %4916 = load i16, i16* %4915, align 2, !tbaa !386
  %4917 = insertelement <64 x i16> %4912, i16 %4916, i32 28
  %4918 = extractelement <64 x i32> %4772, i32 29
  %4919 = sext i32 %4918 to i64
  %4920 = getelementptr inbounds i16, i16* %54, i64 %4919
  %4921 = load i16, i16* %4920, align 2, !tbaa !386
  %4922 = insertelement <64 x i16> %4917, i16 %4921, i32 29
  %4923 = extractelement <64 x i32> %4772, i32 30
  %4924 = sext i32 %4923 to i64
  %4925 = getelementptr inbounds i16, i16* %54, i64 %4924
  %4926 = load i16, i16* %4925, align 2, !tbaa !386
  %4927 = insertelement <64 x i16> %4922, i16 %4926, i32 30
  %4928 = extractelement <64 x i32> %4772, i32 31
  %4929 = sext i32 %4928 to i64
  %4930 = getelementptr inbounds i16, i16* %54, i64 %4929
  %4931 = load i16, i16* %4930, align 2, !tbaa !386
  %4932 = insertelement <64 x i16> %4927, i16 %4931, i32 31
  %4933 = extractelement <64 x i32> %4772, i32 32
  %4934 = sext i32 %4933 to i64
  %4935 = getelementptr inbounds i16, i16* %54, i64 %4934
  %4936 = load i16, i16* %4935, align 2, !tbaa !386
  %4937 = insertelement <64 x i16> %4932, i16 %4936, i32 32
  %4938 = extractelement <64 x i32> %4772, i32 33
  %4939 = sext i32 %4938 to i64
  %4940 = getelementptr inbounds i16, i16* %54, i64 %4939
  %4941 = load i16, i16* %4940, align 2, !tbaa !386
  %4942 = insertelement <64 x i16> %4937, i16 %4941, i32 33
  %4943 = extractelement <64 x i32> %4772, i32 34
  %4944 = sext i32 %4943 to i64
  %4945 = getelementptr inbounds i16, i16* %54, i64 %4944
  %4946 = load i16, i16* %4945, align 2, !tbaa !386
  %4947 = insertelement <64 x i16> %4942, i16 %4946, i32 34
  %4948 = extractelement <64 x i32> %4772, i32 35
  %4949 = sext i32 %4948 to i64
  %4950 = getelementptr inbounds i16, i16* %54, i64 %4949
  %4951 = load i16, i16* %4950, align 2, !tbaa !386
  %4952 = insertelement <64 x i16> %4947, i16 %4951, i32 35
  %4953 = extractelement <64 x i32> %4772, i32 36
  %4954 = sext i32 %4953 to i64
  %4955 = getelementptr inbounds i16, i16* %54, i64 %4954
  %4956 = load i16, i16* %4955, align 2, !tbaa !386
  %4957 = insertelement <64 x i16> %4952, i16 %4956, i32 36
  %4958 = extractelement <64 x i32> %4772, i32 37
  %4959 = sext i32 %4958 to i64
  %4960 = getelementptr inbounds i16, i16* %54, i64 %4959
  %4961 = load i16, i16* %4960, align 2, !tbaa !386
  %4962 = insertelement <64 x i16> %4957, i16 %4961, i32 37
  %4963 = extractelement <64 x i32> %4772, i32 38
  %4964 = sext i32 %4963 to i64
  %4965 = getelementptr inbounds i16, i16* %54, i64 %4964
  %4966 = load i16, i16* %4965, align 2, !tbaa !386
  %4967 = insertelement <64 x i16> %4962, i16 %4966, i32 38
  %4968 = extractelement <64 x i32> %4772, i32 39
  %4969 = sext i32 %4968 to i64
  %4970 = getelementptr inbounds i16, i16* %54, i64 %4969
  %4971 = load i16, i16* %4970, align 2, !tbaa !386
  %4972 = insertelement <64 x i16> %4967, i16 %4971, i32 39
  %4973 = extractelement <64 x i32> %4772, i32 40
  %4974 = sext i32 %4973 to i64
  %4975 = getelementptr inbounds i16, i16* %54, i64 %4974
  %4976 = load i16, i16* %4975, align 2, !tbaa !386
  %4977 = insertelement <64 x i16> %4972, i16 %4976, i32 40
  %4978 = extractelement <64 x i32> %4772, i32 41
  %4979 = sext i32 %4978 to i64
  %4980 = getelementptr inbounds i16, i16* %54, i64 %4979
  %4981 = load i16, i16* %4980, align 2, !tbaa !386
  %4982 = insertelement <64 x i16> %4977, i16 %4981, i32 41
  %4983 = extractelement <64 x i32> %4772, i32 42
  %4984 = sext i32 %4983 to i64
  %4985 = getelementptr inbounds i16, i16* %54, i64 %4984
  %4986 = load i16, i16* %4985, align 2, !tbaa !386
  %4987 = insertelement <64 x i16> %4982, i16 %4986, i32 42
  %4988 = extractelement <64 x i32> %4772, i32 43
  %4989 = sext i32 %4988 to i64
  %4990 = getelementptr inbounds i16, i16* %54, i64 %4989
  %4991 = load i16, i16* %4990, align 2, !tbaa !386
  %4992 = insertelement <64 x i16> %4987, i16 %4991, i32 43
  %4993 = extractelement <64 x i32> %4772, i32 44
  %4994 = sext i32 %4993 to i64
  %4995 = getelementptr inbounds i16, i16* %54, i64 %4994
  %4996 = load i16, i16* %4995, align 2, !tbaa !386
  %4997 = insertelement <64 x i16> %4992, i16 %4996, i32 44
  %4998 = extractelement <64 x i32> %4772, i32 45
  %4999 = sext i32 %4998 to i64
  %5000 = getelementptr inbounds i16, i16* %54, i64 %4999
  %5001 = load i16, i16* %5000, align 2, !tbaa !386
  %5002 = insertelement <64 x i16> %4997, i16 %5001, i32 45
  %5003 = extractelement <64 x i32> %4772, i32 46
  %5004 = sext i32 %5003 to i64
  %5005 = getelementptr inbounds i16, i16* %54, i64 %5004
  %5006 = load i16, i16* %5005, align 2, !tbaa !386
  %5007 = insertelement <64 x i16> %5002, i16 %5006, i32 46
  %5008 = extractelement <64 x i32> %4772, i32 47
  %5009 = sext i32 %5008 to i64
  %5010 = getelementptr inbounds i16, i16* %54, i64 %5009
  %5011 = load i16, i16* %5010, align 2, !tbaa !386
  %5012 = insertelement <64 x i16> %5007, i16 %5011, i32 47
  %5013 = extractelement <64 x i32> %4772, i32 48
  %5014 = sext i32 %5013 to i64
  %5015 = getelementptr inbounds i16, i16* %54, i64 %5014
  %5016 = load i16, i16* %5015, align 2, !tbaa !386
  %5017 = insertelement <64 x i16> %5012, i16 %5016, i32 48
  %5018 = extractelement <64 x i32> %4772, i32 49
  %5019 = sext i32 %5018 to i64
  %5020 = getelementptr inbounds i16, i16* %54, i64 %5019
  %5021 = load i16, i16* %5020, align 2, !tbaa !386
  %5022 = insertelement <64 x i16> %5017, i16 %5021, i32 49
  %5023 = extractelement <64 x i32> %4772, i32 50
  %5024 = sext i32 %5023 to i64
  %5025 = getelementptr inbounds i16, i16* %54, i64 %5024
  %5026 = load i16, i16* %5025, align 2, !tbaa !386
  %5027 = insertelement <64 x i16> %5022, i16 %5026, i32 50
  %5028 = extractelement <64 x i32> %4772, i32 51
  %5029 = sext i32 %5028 to i64
  %5030 = getelementptr inbounds i16, i16* %54, i64 %5029
  %5031 = load i16, i16* %5030, align 2, !tbaa !386
  %5032 = insertelement <64 x i16> %5027, i16 %5031, i32 51
  %5033 = extractelement <64 x i32> %4772, i32 52
  %5034 = sext i32 %5033 to i64
  %5035 = getelementptr inbounds i16, i16* %54, i64 %5034
  %5036 = load i16, i16* %5035, align 2, !tbaa !386
  %5037 = insertelement <64 x i16> %5032, i16 %5036, i32 52
  %5038 = extractelement <64 x i32> %4772, i32 53
  %5039 = sext i32 %5038 to i64
  %5040 = getelementptr inbounds i16, i16* %54, i64 %5039
  %5041 = load i16, i16* %5040, align 2, !tbaa !386
  %5042 = insertelement <64 x i16> %5037, i16 %5041, i32 53
  %5043 = extractelement <64 x i32> %4772, i32 54
  %5044 = sext i32 %5043 to i64
  %5045 = getelementptr inbounds i16, i16* %54, i64 %5044
  %5046 = load i16, i16* %5045, align 2, !tbaa !386
  %5047 = insertelement <64 x i16> %5042, i16 %5046, i32 54
  %5048 = extractelement <64 x i32> %4772, i32 55
  %5049 = sext i32 %5048 to i64
  %5050 = getelementptr inbounds i16, i16* %54, i64 %5049
  %5051 = load i16, i16* %5050, align 2, !tbaa !386
  %5052 = insertelement <64 x i16> %5047, i16 %5051, i32 55
  %5053 = extractelement <64 x i32> %4772, i32 56
  %5054 = sext i32 %5053 to i64
  %5055 = getelementptr inbounds i16, i16* %54, i64 %5054
  %5056 = load i16, i16* %5055, align 2, !tbaa !386
  %5057 = insertelement <64 x i16> %5052, i16 %5056, i32 56
  %5058 = extractelement <64 x i32> %4772, i32 57
  %5059 = sext i32 %5058 to i64
  %5060 = getelementptr inbounds i16, i16* %54, i64 %5059
  %5061 = load i16, i16* %5060, align 2, !tbaa !386
  %5062 = insertelement <64 x i16> %5057, i16 %5061, i32 57
  %5063 = extractelement <64 x i32> %4772, i32 58
  %5064 = sext i32 %5063 to i64
  %5065 = getelementptr inbounds i16, i16* %54, i64 %5064
  %5066 = load i16, i16* %5065, align 2, !tbaa !386
  %5067 = insertelement <64 x i16> %5062, i16 %5066, i32 58
  %5068 = extractelement <64 x i32> %4772, i32 59
  %5069 = sext i32 %5068 to i64
  %5070 = getelementptr inbounds i16, i16* %54, i64 %5069
  %5071 = load i16, i16* %5070, align 2, !tbaa !386
  %5072 = insertelement <64 x i16> %5067, i16 %5071, i32 59
  %5073 = extractelement <64 x i32> %4772, i32 60
  %5074 = sext i32 %5073 to i64
  %5075 = getelementptr inbounds i16, i16* %54, i64 %5074
  %5076 = load i16, i16* %5075, align 2, !tbaa !386
  %5077 = insertelement <64 x i16> %5072, i16 %5076, i32 60
  %5078 = extractelement <64 x i32> %4772, i32 61
  %5079 = sext i32 %5078 to i64
  %5080 = getelementptr inbounds i16, i16* %54, i64 %5079
  %5081 = load i16, i16* %5080, align 2, !tbaa !386
  %5082 = insertelement <64 x i16> %5077, i16 %5081, i32 61
  %5083 = extractelement <64 x i32> %4772, i32 62
  %5084 = sext i32 %5083 to i64
  %5085 = getelementptr inbounds i16, i16* %54, i64 %5084
  %5086 = load i16, i16* %5085, align 2, !tbaa !386
  %5087 = insertelement <64 x i16> %5082, i16 %5086, i32 62
  %5088 = extractelement <64 x i32> %4772, i32 63
  %5089 = sext i32 %5088 to i64
  %5090 = getelementptr inbounds i16, i16* %54, i64 %5089
  %5091 = load i16, i16* %5090, align 2, !tbaa !386
  %5092 = insertelement <64 x i16> %5087, i16 %5091, i32 63
  %5093 = add nsw <64 x i32> %3658, %t242
  %5094 = extractelement <64 x i32> %5093, i32 0
  %5095 = sext i32 %5094 to i64
  %5096 = getelementptr inbounds i16, i16* %54, i64 %5095
  %5097 = load i16, i16* %5096, align 2, !tbaa !386
  %5098 = insertelement <64 x i16> undef, i16 %5097, i32 0
  %5099 = extractelement <64 x i32> %5093, i32 1
  %5100 = sext i32 %5099 to i64
  %5101 = getelementptr inbounds i16, i16* %54, i64 %5100
  %5102 = load i16, i16* %5101, align 2, !tbaa !386
  %5103 = insertelement <64 x i16> %5098, i16 %5102, i32 1
  %5104 = extractelement <64 x i32> %5093, i32 2
  %5105 = sext i32 %5104 to i64
  %5106 = getelementptr inbounds i16, i16* %54, i64 %5105
  %5107 = load i16, i16* %5106, align 2, !tbaa !386
  %5108 = insertelement <64 x i16> %5103, i16 %5107, i32 2
  %5109 = extractelement <64 x i32> %5093, i32 3
  %5110 = sext i32 %5109 to i64
  %5111 = getelementptr inbounds i16, i16* %54, i64 %5110
  %5112 = load i16, i16* %5111, align 2, !tbaa !386
  %5113 = insertelement <64 x i16> %5108, i16 %5112, i32 3
  %5114 = extractelement <64 x i32> %5093, i32 4
  %5115 = sext i32 %5114 to i64
  %5116 = getelementptr inbounds i16, i16* %54, i64 %5115
  %5117 = load i16, i16* %5116, align 2, !tbaa !386
  %5118 = insertelement <64 x i16> %5113, i16 %5117, i32 4
  %5119 = extractelement <64 x i32> %5093, i32 5
  %5120 = sext i32 %5119 to i64
  %5121 = getelementptr inbounds i16, i16* %54, i64 %5120
  %5122 = load i16, i16* %5121, align 2, !tbaa !386
  %5123 = insertelement <64 x i16> %5118, i16 %5122, i32 5
  %5124 = extractelement <64 x i32> %5093, i32 6
  %5125 = sext i32 %5124 to i64
  %5126 = getelementptr inbounds i16, i16* %54, i64 %5125
  %5127 = load i16, i16* %5126, align 2, !tbaa !386
  %5128 = insertelement <64 x i16> %5123, i16 %5127, i32 6
  %5129 = extractelement <64 x i32> %5093, i32 7
  %5130 = sext i32 %5129 to i64
  %5131 = getelementptr inbounds i16, i16* %54, i64 %5130
  %5132 = load i16, i16* %5131, align 2, !tbaa !386
  %5133 = insertelement <64 x i16> %5128, i16 %5132, i32 7
  %5134 = extractelement <64 x i32> %5093, i32 8
  %5135 = sext i32 %5134 to i64
  %5136 = getelementptr inbounds i16, i16* %54, i64 %5135
  %5137 = load i16, i16* %5136, align 2, !tbaa !386
  %5138 = insertelement <64 x i16> %5133, i16 %5137, i32 8
  %5139 = extractelement <64 x i32> %5093, i32 9
  %5140 = sext i32 %5139 to i64
  %5141 = getelementptr inbounds i16, i16* %54, i64 %5140
  %5142 = load i16, i16* %5141, align 2, !tbaa !386
  %5143 = insertelement <64 x i16> %5138, i16 %5142, i32 9
  %5144 = extractelement <64 x i32> %5093, i32 10
  %5145 = sext i32 %5144 to i64
  %5146 = getelementptr inbounds i16, i16* %54, i64 %5145
  %5147 = load i16, i16* %5146, align 2, !tbaa !386
  %5148 = insertelement <64 x i16> %5143, i16 %5147, i32 10
  %5149 = extractelement <64 x i32> %5093, i32 11
  %5150 = sext i32 %5149 to i64
  %5151 = getelementptr inbounds i16, i16* %54, i64 %5150
  %5152 = load i16, i16* %5151, align 2, !tbaa !386
  %5153 = insertelement <64 x i16> %5148, i16 %5152, i32 11
  %5154 = extractelement <64 x i32> %5093, i32 12
  %5155 = sext i32 %5154 to i64
  %5156 = getelementptr inbounds i16, i16* %54, i64 %5155
  %5157 = load i16, i16* %5156, align 2, !tbaa !386
  %5158 = insertelement <64 x i16> %5153, i16 %5157, i32 12
  %5159 = extractelement <64 x i32> %5093, i32 13
  %5160 = sext i32 %5159 to i64
  %5161 = getelementptr inbounds i16, i16* %54, i64 %5160
  %5162 = load i16, i16* %5161, align 2, !tbaa !386
  %5163 = insertelement <64 x i16> %5158, i16 %5162, i32 13
  %5164 = extractelement <64 x i32> %5093, i32 14
  %5165 = sext i32 %5164 to i64
  %5166 = getelementptr inbounds i16, i16* %54, i64 %5165
  %5167 = load i16, i16* %5166, align 2, !tbaa !386
  %5168 = insertelement <64 x i16> %5163, i16 %5167, i32 14
  %5169 = extractelement <64 x i32> %5093, i32 15
  %5170 = sext i32 %5169 to i64
  %5171 = getelementptr inbounds i16, i16* %54, i64 %5170
  %5172 = load i16, i16* %5171, align 2, !tbaa !386
  %5173 = insertelement <64 x i16> %5168, i16 %5172, i32 15
  %5174 = extractelement <64 x i32> %5093, i32 16
  %5175 = sext i32 %5174 to i64
  %5176 = getelementptr inbounds i16, i16* %54, i64 %5175
  %5177 = load i16, i16* %5176, align 2, !tbaa !386
  %5178 = insertelement <64 x i16> %5173, i16 %5177, i32 16
  %5179 = extractelement <64 x i32> %5093, i32 17
  %5180 = sext i32 %5179 to i64
  %5181 = getelementptr inbounds i16, i16* %54, i64 %5180
  %5182 = load i16, i16* %5181, align 2, !tbaa !386
  %5183 = insertelement <64 x i16> %5178, i16 %5182, i32 17
  %5184 = extractelement <64 x i32> %5093, i32 18
  %5185 = sext i32 %5184 to i64
  %5186 = getelementptr inbounds i16, i16* %54, i64 %5185
  %5187 = load i16, i16* %5186, align 2, !tbaa !386
  %5188 = insertelement <64 x i16> %5183, i16 %5187, i32 18
  %5189 = extractelement <64 x i32> %5093, i32 19
  %5190 = sext i32 %5189 to i64
  %5191 = getelementptr inbounds i16, i16* %54, i64 %5190
  %5192 = load i16, i16* %5191, align 2, !tbaa !386
  %5193 = insertelement <64 x i16> %5188, i16 %5192, i32 19
  %5194 = extractelement <64 x i32> %5093, i32 20
  %5195 = sext i32 %5194 to i64
  %5196 = getelementptr inbounds i16, i16* %54, i64 %5195
  %5197 = load i16, i16* %5196, align 2, !tbaa !386
  %5198 = insertelement <64 x i16> %5193, i16 %5197, i32 20
  %5199 = extractelement <64 x i32> %5093, i32 21
  %5200 = sext i32 %5199 to i64
  %5201 = getelementptr inbounds i16, i16* %54, i64 %5200
  %5202 = load i16, i16* %5201, align 2, !tbaa !386
  %5203 = insertelement <64 x i16> %5198, i16 %5202, i32 21
  %5204 = extractelement <64 x i32> %5093, i32 22
  %5205 = sext i32 %5204 to i64
  %5206 = getelementptr inbounds i16, i16* %54, i64 %5205
  %5207 = load i16, i16* %5206, align 2, !tbaa !386
  %5208 = insertelement <64 x i16> %5203, i16 %5207, i32 22
  %5209 = extractelement <64 x i32> %5093, i32 23
  %5210 = sext i32 %5209 to i64
  %5211 = getelementptr inbounds i16, i16* %54, i64 %5210
  %5212 = load i16, i16* %5211, align 2, !tbaa !386
  %5213 = insertelement <64 x i16> %5208, i16 %5212, i32 23
  %5214 = extractelement <64 x i32> %5093, i32 24
  %5215 = sext i32 %5214 to i64
  %5216 = getelementptr inbounds i16, i16* %54, i64 %5215
  %5217 = load i16, i16* %5216, align 2, !tbaa !386
  %5218 = insertelement <64 x i16> %5213, i16 %5217, i32 24
  %5219 = extractelement <64 x i32> %5093, i32 25
  %5220 = sext i32 %5219 to i64
  %5221 = getelementptr inbounds i16, i16* %54, i64 %5220
  %5222 = load i16, i16* %5221, align 2, !tbaa !386
  %5223 = insertelement <64 x i16> %5218, i16 %5222, i32 25
  %5224 = extractelement <64 x i32> %5093, i32 26
  %5225 = sext i32 %5224 to i64
  %5226 = getelementptr inbounds i16, i16* %54, i64 %5225
  %5227 = load i16, i16* %5226, align 2, !tbaa !386
  %5228 = insertelement <64 x i16> %5223, i16 %5227, i32 26
  %5229 = extractelement <64 x i32> %5093, i32 27
  %5230 = sext i32 %5229 to i64
  %5231 = getelementptr inbounds i16, i16* %54, i64 %5230
  %5232 = load i16, i16* %5231, align 2, !tbaa !386
  %5233 = insertelement <64 x i16> %5228, i16 %5232, i32 27
  %5234 = extractelement <64 x i32> %5093, i32 28
  %5235 = sext i32 %5234 to i64
  %5236 = getelementptr inbounds i16, i16* %54, i64 %5235
  %5237 = load i16, i16* %5236, align 2, !tbaa !386
  %5238 = insertelement <64 x i16> %5233, i16 %5237, i32 28
  %5239 = extractelement <64 x i32> %5093, i32 29
  %5240 = sext i32 %5239 to i64
  %5241 = getelementptr inbounds i16, i16* %54, i64 %5240
  %5242 = load i16, i16* %5241, align 2, !tbaa !386
  %5243 = insertelement <64 x i16> %5238, i16 %5242, i32 29
  %5244 = extractelement <64 x i32> %5093, i32 30
  %5245 = sext i32 %5244 to i64
  %5246 = getelementptr inbounds i16, i16* %54, i64 %5245
  %5247 = load i16, i16* %5246, align 2, !tbaa !386
  %5248 = insertelement <64 x i16> %5243, i16 %5247, i32 30
  %5249 = extractelement <64 x i32> %5093, i32 31
  %5250 = sext i32 %5249 to i64
  %5251 = getelementptr inbounds i16, i16* %54, i64 %5250
  %5252 = load i16, i16* %5251, align 2, !tbaa !386
  %5253 = insertelement <64 x i16> %5248, i16 %5252, i32 31
  %5254 = extractelement <64 x i32> %5093, i32 32
  %5255 = sext i32 %5254 to i64
  %5256 = getelementptr inbounds i16, i16* %54, i64 %5255
  %5257 = load i16, i16* %5256, align 2, !tbaa !386
  %5258 = insertelement <64 x i16> %5253, i16 %5257, i32 32
  %5259 = extractelement <64 x i32> %5093, i32 33
  %5260 = sext i32 %5259 to i64
  %5261 = getelementptr inbounds i16, i16* %54, i64 %5260
  %5262 = load i16, i16* %5261, align 2, !tbaa !386
  %5263 = insertelement <64 x i16> %5258, i16 %5262, i32 33
  %5264 = extractelement <64 x i32> %5093, i32 34
  %5265 = sext i32 %5264 to i64
  %5266 = getelementptr inbounds i16, i16* %54, i64 %5265
  %5267 = load i16, i16* %5266, align 2, !tbaa !386
  %5268 = insertelement <64 x i16> %5263, i16 %5267, i32 34
  %5269 = extractelement <64 x i32> %5093, i32 35
  %5270 = sext i32 %5269 to i64
  %5271 = getelementptr inbounds i16, i16* %54, i64 %5270
  %5272 = load i16, i16* %5271, align 2, !tbaa !386
  %5273 = insertelement <64 x i16> %5268, i16 %5272, i32 35
  %5274 = extractelement <64 x i32> %5093, i32 36
  %5275 = sext i32 %5274 to i64
  %5276 = getelementptr inbounds i16, i16* %54, i64 %5275
  %5277 = load i16, i16* %5276, align 2, !tbaa !386
  %5278 = insertelement <64 x i16> %5273, i16 %5277, i32 36
  %5279 = extractelement <64 x i32> %5093, i32 37
  %5280 = sext i32 %5279 to i64
  %5281 = getelementptr inbounds i16, i16* %54, i64 %5280
  %5282 = load i16, i16* %5281, align 2, !tbaa !386
  %5283 = insertelement <64 x i16> %5278, i16 %5282, i32 37
  %5284 = extractelement <64 x i32> %5093, i32 38
  %5285 = sext i32 %5284 to i64
  %5286 = getelementptr inbounds i16, i16* %54, i64 %5285
  %5287 = load i16, i16* %5286, align 2, !tbaa !386
  %5288 = insertelement <64 x i16> %5283, i16 %5287, i32 38
  %5289 = extractelement <64 x i32> %5093, i32 39
  %5290 = sext i32 %5289 to i64
  %5291 = getelementptr inbounds i16, i16* %54, i64 %5290
  %5292 = load i16, i16* %5291, align 2, !tbaa !386
  %5293 = insertelement <64 x i16> %5288, i16 %5292, i32 39
  %5294 = extractelement <64 x i32> %5093, i32 40
  %5295 = sext i32 %5294 to i64
  %5296 = getelementptr inbounds i16, i16* %54, i64 %5295
  %5297 = load i16, i16* %5296, align 2, !tbaa !386
  %5298 = insertelement <64 x i16> %5293, i16 %5297, i32 40
  %5299 = extractelement <64 x i32> %5093, i32 41
  %5300 = sext i32 %5299 to i64
  %5301 = getelementptr inbounds i16, i16* %54, i64 %5300
  %5302 = load i16, i16* %5301, align 2, !tbaa !386
  %5303 = insertelement <64 x i16> %5298, i16 %5302, i32 41
  %5304 = extractelement <64 x i32> %5093, i32 42
  %5305 = sext i32 %5304 to i64
  %5306 = getelementptr inbounds i16, i16* %54, i64 %5305
  %5307 = load i16, i16* %5306, align 2, !tbaa !386
  %5308 = insertelement <64 x i16> %5303, i16 %5307, i32 42
  %5309 = extractelement <64 x i32> %5093, i32 43
  %5310 = sext i32 %5309 to i64
  %5311 = getelementptr inbounds i16, i16* %54, i64 %5310
  %5312 = load i16, i16* %5311, align 2, !tbaa !386
  %5313 = insertelement <64 x i16> %5308, i16 %5312, i32 43
  %5314 = extractelement <64 x i32> %5093, i32 44
  %5315 = sext i32 %5314 to i64
  %5316 = getelementptr inbounds i16, i16* %54, i64 %5315
  %5317 = load i16, i16* %5316, align 2, !tbaa !386
  %5318 = insertelement <64 x i16> %5313, i16 %5317, i32 44
  %5319 = extractelement <64 x i32> %5093, i32 45
  %5320 = sext i32 %5319 to i64
  %5321 = getelementptr inbounds i16, i16* %54, i64 %5320
  %5322 = load i16, i16* %5321, align 2, !tbaa !386
  %5323 = insertelement <64 x i16> %5318, i16 %5322, i32 45
  %5324 = extractelement <64 x i32> %5093, i32 46
  %5325 = sext i32 %5324 to i64
  %5326 = getelementptr inbounds i16, i16* %54, i64 %5325
  %5327 = load i16, i16* %5326, align 2, !tbaa !386
  %5328 = insertelement <64 x i16> %5323, i16 %5327, i32 46
  %5329 = extractelement <64 x i32> %5093, i32 47
  %5330 = sext i32 %5329 to i64
  %5331 = getelementptr inbounds i16, i16* %54, i64 %5330
  %5332 = load i16, i16* %5331, align 2, !tbaa !386
  %5333 = insertelement <64 x i16> %5328, i16 %5332, i32 47
  %5334 = extractelement <64 x i32> %5093, i32 48
  %5335 = sext i32 %5334 to i64
  %5336 = getelementptr inbounds i16, i16* %54, i64 %5335
  %5337 = load i16, i16* %5336, align 2, !tbaa !386
  %5338 = insertelement <64 x i16> %5333, i16 %5337, i32 48
  %5339 = extractelement <64 x i32> %5093, i32 49
  %5340 = sext i32 %5339 to i64
  %5341 = getelementptr inbounds i16, i16* %54, i64 %5340
  %5342 = load i16, i16* %5341, align 2, !tbaa !386
  %5343 = insertelement <64 x i16> %5338, i16 %5342, i32 49
  %5344 = extractelement <64 x i32> %5093, i32 50
  %5345 = sext i32 %5344 to i64
  %5346 = getelementptr inbounds i16, i16* %54, i64 %5345
  %5347 = load i16, i16* %5346, align 2, !tbaa !386
  %5348 = insertelement <64 x i16> %5343, i16 %5347, i32 50
  %5349 = extractelement <64 x i32> %5093, i32 51
  %5350 = sext i32 %5349 to i64
  %5351 = getelementptr inbounds i16, i16* %54, i64 %5350
  %5352 = load i16, i16* %5351, align 2, !tbaa !386
  %5353 = insertelement <64 x i16> %5348, i16 %5352, i32 51
  %5354 = extractelement <64 x i32> %5093, i32 52
  %5355 = sext i32 %5354 to i64
  %5356 = getelementptr inbounds i16, i16* %54, i64 %5355
  %5357 = load i16, i16* %5356, align 2, !tbaa !386
  %5358 = insertelement <64 x i16> %5353, i16 %5357, i32 52
  %5359 = extractelement <64 x i32> %5093, i32 53
  %5360 = sext i32 %5359 to i64
  %5361 = getelementptr inbounds i16, i16* %54, i64 %5360
  %5362 = load i16, i16* %5361, align 2, !tbaa !386
  %5363 = insertelement <64 x i16> %5358, i16 %5362, i32 53
  %5364 = extractelement <64 x i32> %5093, i32 54
  %5365 = sext i32 %5364 to i64
  %5366 = getelementptr inbounds i16, i16* %54, i64 %5365
  %5367 = load i16, i16* %5366, align 2, !tbaa !386
  %5368 = insertelement <64 x i16> %5363, i16 %5367, i32 54
  %5369 = extractelement <64 x i32> %5093, i32 55
  %5370 = sext i32 %5369 to i64
  %5371 = getelementptr inbounds i16, i16* %54, i64 %5370
  %5372 = load i16, i16* %5371, align 2, !tbaa !386
  %5373 = insertelement <64 x i16> %5368, i16 %5372, i32 55
  %5374 = extractelement <64 x i32> %5093, i32 56
  %5375 = sext i32 %5374 to i64
  %5376 = getelementptr inbounds i16, i16* %54, i64 %5375
  %5377 = load i16, i16* %5376, align 2, !tbaa !386
  %5378 = insertelement <64 x i16> %5373, i16 %5377, i32 56
  %5379 = extractelement <64 x i32> %5093, i32 57
  %5380 = sext i32 %5379 to i64
  %5381 = getelementptr inbounds i16, i16* %54, i64 %5380
  %5382 = load i16, i16* %5381, align 2, !tbaa !386
  %5383 = insertelement <64 x i16> %5378, i16 %5382, i32 57
  %5384 = extractelement <64 x i32> %5093, i32 58
  %5385 = sext i32 %5384 to i64
  %5386 = getelementptr inbounds i16, i16* %54, i64 %5385
  %5387 = load i16, i16* %5386, align 2, !tbaa !386
  %5388 = insertelement <64 x i16> %5383, i16 %5387, i32 58
  %5389 = extractelement <64 x i32> %5093, i32 59
  %5390 = sext i32 %5389 to i64
  %5391 = getelementptr inbounds i16, i16* %54, i64 %5390
  %5392 = load i16, i16* %5391, align 2, !tbaa !386
  %5393 = insertelement <64 x i16> %5388, i16 %5392, i32 59
  %5394 = extractelement <64 x i32> %5093, i32 60
  %5395 = sext i32 %5394 to i64
  %5396 = getelementptr inbounds i16, i16* %54, i64 %5395
  %5397 = load i16, i16* %5396, align 2, !tbaa !386
  %5398 = insertelement <64 x i16> %5393, i16 %5397, i32 60
  %5399 = extractelement <64 x i32> %5093, i32 61
  %5400 = sext i32 %5399 to i64
  %5401 = getelementptr inbounds i16, i16* %54, i64 %5400
  %5402 = load i16, i16* %5401, align 2, !tbaa !386
  %5403 = insertelement <64 x i16> %5398, i16 %5402, i32 61
  %5404 = extractelement <64 x i32> %5093, i32 62
  %5405 = sext i32 %5404 to i64
  %5406 = getelementptr inbounds i16, i16* %54, i64 %5405
  %5407 = load i16, i16* %5406, align 2, !tbaa !386
  %5408 = insertelement <64 x i16> %5403, i16 %5407, i32 62
  %5409 = extractelement <64 x i32> %5093, i32 63
  %5410 = sext i32 %5409 to i64
  %5411 = getelementptr inbounds i16, i16* %54, i64 %5410
  %5412 = load i16, i16* %5411, align 2, !tbaa !386
  %5413 = insertelement <64 x i16> %5408, i16 %5412, i32 63
  %5414 = add nsw <64 x i32> %3730, %t242
  %5415 = extractelement <64 x i32> %5414, i32 0
  %5416 = sext i32 %5415 to i64
  %5417 = getelementptr inbounds i16, i16* %54, i64 %5416
  %5418 = load i16, i16* %5417, align 2, !tbaa !386
  %5419 = insertelement <64 x i16> undef, i16 %5418, i32 0
  %5420 = extractelement <64 x i32> %5414, i32 1
  %5421 = sext i32 %5420 to i64
  %5422 = getelementptr inbounds i16, i16* %54, i64 %5421
  %5423 = load i16, i16* %5422, align 2, !tbaa !386
  %5424 = insertelement <64 x i16> %5419, i16 %5423, i32 1
  %5425 = extractelement <64 x i32> %5414, i32 2
  %5426 = sext i32 %5425 to i64
  %5427 = getelementptr inbounds i16, i16* %54, i64 %5426
  %5428 = load i16, i16* %5427, align 2, !tbaa !386
  %5429 = insertelement <64 x i16> %5424, i16 %5428, i32 2
  %5430 = extractelement <64 x i32> %5414, i32 3
  %5431 = sext i32 %5430 to i64
  %5432 = getelementptr inbounds i16, i16* %54, i64 %5431
  %5433 = load i16, i16* %5432, align 2, !tbaa !386
  %5434 = insertelement <64 x i16> %5429, i16 %5433, i32 3
  %5435 = extractelement <64 x i32> %5414, i32 4
  %5436 = sext i32 %5435 to i64
  %5437 = getelementptr inbounds i16, i16* %54, i64 %5436
  %5438 = load i16, i16* %5437, align 2, !tbaa !386
  %5439 = insertelement <64 x i16> %5434, i16 %5438, i32 4
  %5440 = extractelement <64 x i32> %5414, i32 5
  %5441 = sext i32 %5440 to i64
  %5442 = getelementptr inbounds i16, i16* %54, i64 %5441
  %5443 = load i16, i16* %5442, align 2, !tbaa !386
  %5444 = insertelement <64 x i16> %5439, i16 %5443, i32 5
  %5445 = extractelement <64 x i32> %5414, i32 6
  %5446 = sext i32 %5445 to i64
  %5447 = getelementptr inbounds i16, i16* %54, i64 %5446
  %5448 = load i16, i16* %5447, align 2, !tbaa !386
  %5449 = insertelement <64 x i16> %5444, i16 %5448, i32 6
  %5450 = extractelement <64 x i32> %5414, i32 7
  %5451 = sext i32 %5450 to i64
  %5452 = getelementptr inbounds i16, i16* %54, i64 %5451
  %5453 = load i16, i16* %5452, align 2, !tbaa !386
  %5454 = insertelement <64 x i16> %5449, i16 %5453, i32 7
  %5455 = extractelement <64 x i32> %5414, i32 8
  %5456 = sext i32 %5455 to i64
  %5457 = getelementptr inbounds i16, i16* %54, i64 %5456
  %5458 = load i16, i16* %5457, align 2, !tbaa !386
  %5459 = insertelement <64 x i16> %5454, i16 %5458, i32 8
  %5460 = extractelement <64 x i32> %5414, i32 9
  %5461 = sext i32 %5460 to i64
  %5462 = getelementptr inbounds i16, i16* %54, i64 %5461
  %5463 = load i16, i16* %5462, align 2, !tbaa !386
  %5464 = insertelement <64 x i16> %5459, i16 %5463, i32 9
  %5465 = extractelement <64 x i32> %5414, i32 10
  %5466 = sext i32 %5465 to i64
  %5467 = getelementptr inbounds i16, i16* %54, i64 %5466
  %5468 = load i16, i16* %5467, align 2, !tbaa !386
  %5469 = insertelement <64 x i16> %5464, i16 %5468, i32 10
  %5470 = extractelement <64 x i32> %5414, i32 11
  %5471 = sext i32 %5470 to i64
  %5472 = getelementptr inbounds i16, i16* %54, i64 %5471
  %5473 = load i16, i16* %5472, align 2, !tbaa !386
  %5474 = insertelement <64 x i16> %5469, i16 %5473, i32 11
  %5475 = extractelement <64 x i32> %5414, i32 12
  %5476 = sext i32 %5475 to i64
  %5477 = getelementptr inbounds i16, i16* %54, i64 %5476
  %5478 = load i16, i16* %5477, align 2, !tbaa !386
  %5479 = insertelement <64 x i16> %5474, i16 %5478, i32 12
  %5480 = extractelement <64 x i32> %5414, i32 13
  %5481 = sext i32 %5480 to i64
  %5482 = getelementptr inbounds i16, i16* %54, i64 %5481
  %5483 = load i16, i16* %5482, align 2, !tbaa !386
  %5484 = insertelement <64 x i16> %5479, i16 %5483, i32 13
  %5485 = extractelement <64 x i32> %5414, i32 14
  %5486 = sext i32 %5485 to i64
  %5487 = getelementptr inbounds i16, i16* %54, i64 %5486
  %5488 = load i16, i16* %5487, align 2, !tbaa !386
  %5489 = insertelement <64 x i16> %5484, i16 %5488, i32 14
  %5490 = extractelement <64 x i32> %5414, i32 15
  %5491 = sext i32 %5490 to i64
  %5492 = getelementptr inbounds i16, i16* %54, i64 %5491
  %5493 = load i16, i16* %5492, align 2, !tbaa !386
  %5494 = insertelement <64 x i16> %5489, i16 %5493, i32 15
  %5495 = extractelement <64 x i32> %5414, i32 16
  %5496 = sext i32 %5495 to i64
  %5497 = getelementptr inbounds i16, i16* %54, i64 %5496
  %5498 = load i16, i16* %5497, align 2, !tbaa !386
  %5499 = insertelement <64 x i16> %5494, i16 %5498, i32 16
  %5500 = extractelement <64 x i32> %5414, i32 17
  %5501 = sext i32 %5500 to i64
  %5502 = getelementptr inbounds i16, i16* %54, i64 %5501
  %5503 = load i16, i16* %5502, align 2, !tbaa !386
  %5504 = insertelement <64 x i16> %5499, i16 %5503, i32 17
  %5505 = extractelement <64 x i32> %5414, i32 18
  %5506 = sext i32 %5505 to i64
  %5507 = getelementptr inbounds i16, i16* %54, i64 %5506
  %5508 = load i16, i16* %5507, align 2, !tbaa !386
  %5509 = insertelement <64 x i16> %5504, i16 %5508, i32 18
  %5510 = extractelement <64 x i32> %5414, i32 19
  %5511 = sext i32 %5510 to i64
  %5512 = getelementptr inbounds i16, i16* %54, i64 %5511
  %5513 = load i16, i16* %5512, align 2, !tbaa !386
  %5514 = insertelement <64 x i16> %5509, i16 %5513, i32 19
  %5515 = extractelement <64 x i32> %5414, i32 20
  %5516 = sext i32 %5515 to i64
  %5517 = getelementptr inbounds i16, i16* %54, i64 %5516
  %5518 = load i16, i16* %5517, align 2, !tbaa !386
  %5519 = insertelement <64 x i16> %5514, i16 %5518, i32 20
  %5520 = extractelement <64 x i32> %5414, i32 21
  %5521 = sext i32 %5520 to i64
  %5522 = getelementptr inbounds i16, i16* %54, i64 %5521
  %5523 = load i16, i16* %5522, align 2, !tbaa !386
  %5524 = insertelement <64 x i16> %5519, i16 %5523, i32 21
  %5525 = extractelement <64 x i32> %5414, i32 22
  %5526 = sext i32 %5525 to i64
  %5527 = getelementptr inbounds i16, i16* %54, i64 %5526
  %5528 = load i16, i16* %5527, align 2, !tbaa !386
  %5529 = insertelement <64 x i16> %5524, i16 %5528, i32 22
  %5530 = extractelement <64 x i32> %5414, i32 23
  %5531 = sext i32 %5530 to i64
  %5532 = getelementptr inbounds i16, i16* %54, i64 %5531
  %5533 = load i16, i16* %5532, align 2, !tbaa !386
  %5534 = insertelement <64 x i16> %5529, i16 %5533, i32 23
  %5535 = extractelement <64 x i32> %5414, i32 24
  %5536 = sext i32 %5535 to i64
  %5537 = getelementptr inbounds i16, i16* %54, i64 %5536
  %5538 = load i16, i16* %5537, align 2, !tbaa !386
  %5539 = insertelement <64 x i16> %5534, i16 %5538, i32 24
  %5540 = extractelement <64 x i32> %5414, i32 25
  %5541 = sext i32 %5540 to i64
  %5542 = getelementptr inbounds i16, i16* %54, i64 %5541
  %5543 = load i16, i16* %5542, align 2, !tbaa !386
  %5544 = insertelement <64 x i16> %5539, i16 %5543, i32 25
  %5545 = extractelement <64 x i32> %5414, i32 26
  %5546 = sext i32 %5545 to i64
  %5547 = getelementptr inbounds i16, i16* %54, i64 %5546
  %5548 = load i16, i16* %5547, align 2, !tbaa !386
  %5549 = insertelement <64 x i16> %5544, i16 %5548, i32 26
  %5550 = extractelement <64 x i32> %5414, i32 27
  %5551 = sext i32 %5550 to i64
  %5552 = getelementptr inbounds i16, i16* %54, i64 %5551
  %5553 = load i16, i16* %5552, align 2, !tbaa !386
  %5554 = insertelement <64 x i16> %5549, i16 %5553, i32 27
  %5555 = extractelement <64 x i32> %5414, i32 28
  %5556 = sext i32 %5555 to i64
  %5557 = getelementptr inbounds i16, i16* %54, i64 %5556
  %5558 = load i16, i16* %5557, align 2, !tbaa !386
  %5559 = insertelement <64 x i16> %5554, i16 %5558, i32 28
  %5560 = extractelement <64 x i32> %5414, i32 29
  %5561 = sext i32 %5560 to i64
  %5562 = getelementptr inbounds i16, i16* %54, i64 %5561
  %5563 = load i16, i16* %5562, align 2, !tbaa !386
  %5564 = insertelement <64 x i16> %5559, i16 %5563, i32 29
  %5565 = extractelement <64 x i32> %5414, i32 30
  %5566 = sext i32 %5565 to i64
  %5567 = getelementptr inbounds i16, i16* %54, i64 %5566
  %5568 = load i16, i16* %5567, align 2, !tbaa !386
  %5569 = insertelement <64 x i16> %5564, i16 %5568, i32 30
  %5570 = extractelement <64 x i32> %5414, i32 31
  %5571 = sext i32 %5570 to i64
  %5572 = getelementptr inbounds i16, i16* %54, i64 %5571
  %5573 = load i16, i16* %5572, align 2, !tbaa !386
  %5574 = insertelement <64 x i16> %5569, i16 %5573, i32 31
  %5575 = extractelement <64 x i32> %5414, i32 32
  %5576 = sext i32 %5575 to i64
  %5577 = getelementptr inbounds i16, i16* %54, i64 %5576
  %5578 = load i16, i16* %5577, align 2, !tbaa !386
  %5579 = insertelement <64 x i16> %5574, i16 %5578, i32 32
  %5580 = extractelement <64 x i32> %5414, i32 33
  %5581 = sext i32 %5580 to i64
  %5582 = getelementptr inbounds i16, i16* %54, i64 %5581
  %5583 = load i16, i16* %5582, align 2, !tbaa !386
  %5584 = insertelement <64 x i16> %5579, i16 %5583, i32 33
  %5585 = extractelement <64 x i32> %5414, i32 34
  %5586 = sext i32 %5585 to i64
  %5587 = getelementptr inbounds i16, i16* %54, i64 %5586
  %5588 = load i16, i16* %5587, align 2, !tbaa !386
  %5589 = insertelement <64 x i16> %5584, i16 %5588, i32 34
  %5590 = extractelement <64 x i32> %5414, i32 35
  %5591 = sext i32 %5590 to i64
  %5592 = getelementptr inbounds i16, i16* %54, i64 %5591
  %5593 = load i16, i16* %5592, align 2, !tbaa !386
  %5594 = insertelement <64 x i16> %5589, i16 %5593, i32 35
  %5595 = extractelement <64 x i32> %5414, i32 36
  %5596 = sext i32 %5595 to i64
  %5597 = getelementptr inbounds i16, i16* %54, i64 %5596
  %5598 = load i16, i16* %5597, align 2, !tbaa !386
  %5599 = insertelement <64 x i16> %5594, i16 %5598, i32 36
  %5600 = extractelement <64 x i32> %5414, i32 37
  %5601 = sext i32 %5600 to i64
  %5602 = getelementptr inbounds i16, i16* %54, i64 %5601
  %5603 = load i16, i16* %5602, align 2, !tbaa !386
  %5604 = insertelement <64 x i16> %5599, i16 %5603, i32 37
  %5605 = extractelement <64 x i32> %5414, i32 38
  %5606 = sext i32 %5605 to i64
  %5607 = getelementptr inbounds i16, i16* %54, i64 %5606
  %5608 = load i16, i16* %5607, align 2, !tbaa !386
  %5609 = insertelement <64 x i16> %5604, i16 %5608, i32 38
  %5610 = extractelement <64 x i32> %5414, i32 39
  %5611 = sext i32 %5610 to i64
  %5612 = getelementptr inbounds i16, i16* %54, i64 %5611
  %5613 = load i16, i16* %5612, align 2, !tbaa !386
  %5614 = insertelement <64 x i16> %5609, i16 %5613, i32 39
  %5615 = extractelement <64 x i32> %5414, i32 40
  %5616 = sext i32 %5615 to i64
  %5617 = getelementptr inbounds i16, i16* %54, i64 %5616
  %5618 = load i16, i16* %5617, align 2, !tbaa !386
  %5619 = insertelement <64 x i16> %5614, i16 %5618, i32 40
  %5620 = extractelement <64 x i32> %5414, i32 41
  %5621 = sext i32 %5620 to i64
  %5622 = getelementptr inbounds i16, i16* %54, i64 %5621
  %5623 = load i16, i16* %5622, align 2, !tbaa !386
  %5624 = insertelement <64 x i16> %5619, i16 %5623, i32 41
  %5625 = extractelement <64 x i32> %5414, i32 42
  %5626 = sext i32 %5625 to i64
  %5627 = getelementptr inbounds i16, i16* %54, i64 %5626
  %5628 = load i16, i16* %5627, align 2, !tbaa !386
  %5629 = insertelement <64 x i16> %5624, i16 %5628, i32 42
  %5630 = extractelement <64 x i32> %5414, i32 43
  %5631 = sext i32 %5630 to i64
  %5632 = getelementptr inbounds i16, i16* %54, i64 %5631
  %5633 = load i16, i16* %5632, align 2, !tbaa !386
  %5634 = insertelement <64 x i16> %5629, i16 %5633, i32 43
  %5635 = extractelement <64 x i32> %5414, i32 44
  %5636 = sext i32 %5635 to i64
  %5637 = getelementptr inbounds i16, i16* %54, i64 %5636
  %5638 = load i16, i16* %5637, align 2, !tbaa !386
  %5639 = insertelement <64 x i16> %5634, i16 %5638, i32 44
  %5640 = extractelement <64 x i32> %5414, i32 45
  %5641 = sext i32 %5640 to i64
  %5642 = getelementptr inbounds i16, i16* %54, i64 %5641
  %5643 = load i16, i16* %5642, align 2, !tbaa !386
  %5644 = insertelement <64 x i16> %5639, i16 %5643, i32 45
  %5645 = extractelement <64 x i32> %5414, i32 46
  %5646 = sext i32 %5645 to i64
  %5647 = getelementptr inbounds i16, i16* %54, i64 %5646
  %5648 = load i16, i16* %5647, align 2, !tbaa !386
  %5649 = insertelement <64 x i16> %5644, i16 %5648, i32 46
  %5650 = extractelement <64 x i32> %5414, i32 47
  %5651 = sext i32 %5650 to i64
  %5652 = getelementptr inbounds i16, i16* %54, i64 %5651
  %5653 = load i16, i16* %5652, align 2, !tbaa !386
  %5654 = insertelement <64 x i16> %5649, i16 %5653, i32 47
  %5655 = extractelement <64 x i32> %5414, i32 48
  %5656 = sext i32 %5655 to i64
  %5657 = getelementptr inbounds i16, i16* %54, i64 %5656
  %5658 = load i16, i16* %5657, align 2, !tbaa !386
  %5659 = insertelement <64 x i16> %5654, i16 %5658, i32 48
  %5660 = extractelement <64 x i32> %5414, i32 49
  %5661 = sext i32 %5660 to i64
  %5662 = getelementptr inbounds i16, i16* %54, i64 %5661
  %5663 = load i16, i16* %5662, align 2, !tbaa !386
  %5664 = insertelement <64 x i16> %5659, i16 %5663, i32 49
  %5665 = extractelement <64 x i32> %5414, i32 50
  %5666 = sext i32 %5665 to i64
  %5667 = getelementptr inbounds i16, i16* %54, i64 %5666
  %5668 = load i16, i16* %5667, align 2, !tbaa !386
  %5669 = insertelement <64 x i16> %5664, i16 %5668, i32 50
  %5670 = extractelement <64 x i32> %5414, i32 51
  %5671 = sext i32 %5670 to i64
  %5672 = getelementptr inbounds i16, i16* %54, i64 %5671
  %5673 = load i16, i16* %5672, align 2, !tbaa !386
  %5674 = insertelement <64 x i16> %5669, i16 %5673, i32 51
  %5675 = extractelement <64 x i32> %5414, i32 52
  %5676 = sext i32 %5675 to i64
  %5677 = getelementptr inbounds i16, i16* %54, i64 %5676
  %5678 = load i16, i16* %5677, align 2, !tbaa !386
  %5679 = insertelement <64 x i16> %5674, i16 %5678, i32 52
  %5680 = extractelement <64 x i32> %5414, i32 53
  %5681 = sext i32 %5680 to i64
  %5682 = getelementptr inbounds i16, i16* %54, i64 %5681
  %5683 = load i16, i16* %5682, align 2, !tbaa !386
  %5684 = insertelement <64 x i16> %5679, i16 %5683, i32 53
  %5685 = extractelement <64 x i32> %5414, i32 54
  %5686 = sext i32 %5685 to i64
  %5687 = getelementptr inbounds i16, i16* %54, i64 %5686
  %5688 = load i16, i16* %5687, align 2, !tbaa !386
  %5689 = insertelement <64 x i16> %5684, i16 %5688, i32 54
  %5690 = extractelement <64 x i32> %5414, i32 55
  %5691 = sext i32 %5690 to i64
  %5692 = getelementptr inbounds i16, i16* %54, i64 %5691
  %5693 = load i16, i16* %5692, align 2, !tbaa !386
  %5694 = insertelement <64 x i16> %5689, i16 %5693, i32 55
  %5695 = extractelement <64 x i32> %5414, i32 56
  %5696 = sext i32 %5695 to i64
  %5697 = getelementptr inbounds i16, i16* %54, i64 %5696
  %5698 = load i16, i16* %5697, align 2, !tbaa !386
  %5699 = insertelement <64 x i16> %5694, i16 %5698, i32 56
  %5700 = extractelement <64 x i32> %5414, i32 57
  %5701 = sext i32 %5700 to i64
  %5702 = getelementptr inbounds i16, i16* %54, i64 %5701
  %5703 = load i16, i16* %5702, align 2, !tbaa !386
  %5704 = insertelement <64 x i16> %5699, i16 %5703, i32 57
  %5705 = extractelement <64 x i32> %5414, i32 58
  %5706 = sext i32 %5705 to i64
  %5707 = getelementptr inbounds i16, i16* %54, i64 %5706
  %5708 = load i16, i16* %5707, align 2, !tbaa !386
  %5709 = insertelement <64 x i16> %5704, i16 %5708, i32 58
  %5710 = extractelement <64 x i32> %5414, i32 59
  %5711 = sext i32 %5710 to i64
  %5712 = getelementptr inbounds i16, i16* %54, i64 %5711
  %5713 = load i16, i16* %5712, align 2, !tbaa !386
  %5714 = insertelement <64 x i16> %5709, i16 %5713, i32 59
  %5715 = extractelement <64 x i32> %5414, i32 60
  %5716 = sext i32 %5715 to i64
  %5717 = getelementptr inbounds i16, i16* %54, i64 %5716
  %5718 = load i16, i16* %5717, align 2, !tbaa !386
  %5719 = insertelement <64 x i16> %5714, i16 %5718, i32 60
  %5720 = extractelement <64 x i32> %5414, i32 61
  %5721 = sext i32 %5720 to i64
  %5722 = getelementptr inbounds i16, i16* %54, i64 %5721
  %5723 = load i16, i16* %5722, align 2, !tbaa !386
  %5724 = insertelement <64 x i16> %5719, i16 %5723, i32 61
  %5725 = extractelement <64 x i32> %5414, i32 62
  %5726 = sext i32 %5725 to i64
  %5727 = getelementptr inbounds i16, i16* %54, i64 %5726
  %5728 = load i16, i16* %5727, align 2, !tbaa !386
  %5729 = insertelement <64 x i16> %5724, i16 %5728, i32 62
  %5730 = extractelement <64 x i32> %5414, i32 63
  %5731 = sext i32 %5730 to i64
  %5732 = getelementptr inbounds i16, i16* %54, i64 %5731
  %5733 = load i16, i16* %5732, align 2, !tbaa !386
  %5734 = insertelement <64 x i16> %5729, i16 %5733, i32 63
  %5735 = add nsw <64 x i32> %3802, %t242
  %5736 = extractelement <64 x i32> %5735, i32 0
  %5737 = sext i32 %5736 to i64
  %5738 = getelementptr inbounds i16, i16* %54, i64 %5737
  %5739 = load i16, i16* %5738, align 2, !tbaa !386
  %5740 = insertelement <64 x i16> undef, i16 %5739, i32 0
  %5741 = extractelement <64 x i32> %5735, i32 1
  %5742 = sext i32 %5741 to i64
  %5743 = getelementptr inbounds i16, i16* %54, i64 %5742
  %5744 = load i16, i16* %5743, align 2, !tbaa !386
  %5745 = insertelement <64 x i16> %5740, i16 %5744, i32 1
  %5746 = extractelement <64 x i32> %5735, i32 2
  %5747 = sext i32 %5746 to i64
  %5748 = getelementptr inbounds i16, i16* %54, i64 %5747
  %5749 = load i16, i16* %5748, align 2, !tbaa !386
  %5750 = insertelement <64 x i16> %5745, i16 %5749, i32 2
  %5751 = extractelement <64 x i32> %5735, i32 3
  %5752 = sext i32 %5751 to i64
  %5753 = getelementptr inbounds i16, i16* %54, i64 %5752
  %5754 = load i16, i16* %5753, align 2, !tbaa !386
  %5755 = insertelement <64 x i16> %5750, i16 %5754, i32 3
  %5756 = extractelement <64 x i32> %5735, i32 4
  %5757 = sext i32 %5756 to i64
  %5758 = getelementptr inbounds i16, i16* %54, i64 %5757
  %5759 = load i16, i16* %5758, align 2, !tbaa !386
  %5760 = insertelement <64 x i16> %5755, i16 %5759, i32 4
  %5761 = extractelement <64 x i32> %5735, i32 5
  %5762 = sext i32 %5761 to i64
  %5763 = getelementptr inbounds i16, i16* %54, i64 %5762
  %5764 = load i16, i16* %5763, align 2, !tbaa !386
  %5765 = insertelement <64 x i16> %5760, i16 %5764, i32 5
  %5766 = extractelement <64 x i32> %5735, i32 6
  %5767 = sext i32 %5766 to i64
  %5768 = getelementptr inbounds i16, i16* %54, i64 %5767
  %5769 = load i16, i16* %5768, align 2, !tbaa !386
  %5770 = insertelement <64 x i16> %5765, i16 %5769, i32 6
  %5771 = extractelement <64 x i32> %5735, i32 7
  %5772 = sext i32 %5771 to i64
  %5773 = getelementptr inbounds i16, i16* %54, i64 %5772
  %5774 = load i16, i16* %5773, align 2, !tbaa !386
  %5775 = insertelement <64 x i16> %5770, i16 %5774, i32 7
  %5776 = extractelement <64 x i32> %5735, i32 8
  %5777 = sext i32 %5776 to i64
  %5778 = getelementptr inbounds i16, i16* %54, i64 %5777
  %5779 = load i16, i16* %5778, align 2, !tbaa !386
  %5780 = insertelement <64 x i16> %5775, i16 %5779, i32 8
  %5781 = extractelement <64 x i32> %5735, i32 9
  %5782 = sext i32 %5781 to i64
  %5783 = getelementptr inbounds i16, i16* %54, i64 %5782
  %5784 = load i16, i16* %5783, align 2, !tbaa !386
  %5785 = insertelement <64 x i16> %5780, i16 %5784, i32 9
  %5786 = extractelement <64 x i32> %5735, i32 10
  %5787 = sext i32 %5786 to i64
  %5788 = getelementptr inbounds i16, i16* %54, i64 %5787
  %5789 = load i16, i16* %5788, align 2, !tbaa !386
  %5790 = insertelement <64 x i16> %5785, i16 %5789, i32 10
  %5791 = extractelement <64 x i32> %5735, i32 11
  %5792 = sext i32 %5791 to i64
  %5793 = getelementptr inbounds i16, i16* %54, i64 %5792
  %5794 = load i16, i16* %5793, align 2, !tbaa !386
  %5795 = insertelement <64 x i16> %5790, i16 %5794, i32 11
  %5796 = extractelement <64 x i32> %5735, i32 12
  %5797 = sext i32 %5796 to i64
  %5798 = getelementptr inbounds i16, i16* %54, i64 %5797
  %5799 = load i16, i16* %5798, align 2, !tbaa !386
  %5800 = insertelement <64 x i16> %5795, i16 %5799, i32 12
  %5801 = extractelement <64 x i32> %5735, i32 13
  %5802 = sext i32 %5801 to i64
  %5803 = getelementptr inbounds i16, i16* %54, i64 %5802
  %5804 = load i16, i16* %5803, align 2, !tbaa !386
  %5805 = insertelement <64 x i16> %5800, i16 %5804, i32 13
  %5806 = extractelement <64 x i32> %5735, i32 14
  %5807 = sext i32 %5806 to i64
  %5808 = getelementptr inbounds i16, i16* %54, i64 %5807
  %5809 = load i16, i16* %5808, align 2, !tbaa !386
  %5810 = insertelement <64 x i16> %5805, i16 %5809, i32 14
  %5811 = extractelement <64 x i32> %5735, i32 15
  %5812 = sext i32 %5811 to i64
  %5813 = getelementptr inbounds i16, i16* %54, i64 %5812
  %5814 = load i16, i16* %5813, align 2, !tbaa !386
  %5815 = insertelement <64 x i16> %5810, i16 %5814, i32 15
  %5816 = extractelement <64 x i32> %5735, i32 16
  %5817 = sext i32 %5816 to i64
  %5818 = getelementptr inbounds i16, i16* %54, i64 %5817
  %5819 = load i16, i16* %5818, align 2, !tbaa !386
  %5820 = insertelement <64 x i16> %5815, i16 %5819, i32 16
  %5821 = extractelement <64 x i32> %5735, i32 17
  %5822 = sext i32 %5821 to i64
  %5823 = getelementptr inbounds i16, i16* %54, i64 %5822
  %5824 = load i16, i16* %5823, align 2, !tbaa !386
  %5825 = insertelement <64 x i16> %5820, i16 %5824, i32 17
  %5826 = extractelement <64 x i32> %5735, i32 18
  %5827 = sext i32 %5826 to i64
  %5828 = getelementptr inbounds i16, i16* %54, i64 %5827
  %5829 = load i16, i16* %5828, align 2, !tbaa !386
  %5830 = insertelement <64 x i16> %5825, i16 %5829, i32 18
  %5831 = extractelement <64 x i32> %5735, i32 19
  %5832 = sext i32 %5831 to i64
  %5833 = getelementptr inbounds i16, i16* %54, i64 %5832
  %5834 = load i16, i16* %5833, align 2, !tbaa !386
  %5835 = insertelement <64 x i16> %5830, i16 %5834, i32 19
  %5836 = extractelement <64 x i32> %5735, i32 20
  %5837 = sext i32 %5836 to i64
  %5838 = getelementptr inbounds i16, i16* %54, i64 %5837
  %5839 = load i16, i16* %5838, align 2, !tbaa !386
  %5840 = insertelement <64 x i16> %5835, i16 %5839, i32 20
  %5841 = extractelement <64 x i32> %5735, i32 21
  %5842 = sext i32 %5841 to i64
  %5843 = getelementptr inbounds i16, i16* %54, i64 %5842
  %5844 = load i16, i16* %5843, align 2, !tbaa !386
  %5845 = insertelement <64 x i16> %5840, i16 %5844, i32 21
  %5846 = extractelement <64 x i32> %5735, i32 22
  %5847 = sext i32 %5846 to i64
  %5848 = getelementptr inbounds i16, i16* %54, i64 %5847
  %5849 = load i16, i16* %5848, align 2, !tbaa !386
  %5850 = insertelement <64 x i16> %5845, i16 %5849, i32 22
  %5851 = extractelement <64 x i32> %5735, i32 23
  %5852 = sext i32 %5851 to i64
  %5853 = getelementptr inbounds i16, i16* %54, i64 %5852
  %5854 = load i16, i16* %5853, align 2, !tbaa !386
  %5855 = insertelement <64 x i16> %5850, i16 %5854, i32 23
  %5856 = extractelement <64 x i32> %5735, i32 24
  %5857 = sext i32 %5856 to i64
  %5858 = getelementptr inbounds i16, i16* %54, i64 %5857
  %5859 = load i16, i16* %5858, align 2, !tbaa !386
  %5860 = insertelement <64 x i16> %5855, i16 %5859, i32 24
  %5861 = extractelement <64 x i32> %5735, i32 25
  %5862 = sext i32 %5861 to i64
  %5863 = getelementptr inbounds i16, i16* %54, i64 %5862
  %5864 = load i16, i16* %5863, align 2, !tbaa !386
  %5865 = insertelement <64 x i16> %5860, i16 %5864, i32 25
  %5866 = extractelement <64 x i32> %5735, i32 26
  %5867 = sext i32 %5866 to i64
  %5868 = getelementptr inbounds i16, i16* %54, i64 %5867
  %5869 = load i16, i16* %5868, align 2, !tbaa !386
  %5870 = insertelement <64 x i16> %5865, i16 %5869, i32 26
  %5871 = extractelement <64 x i32> %5735, i32 27
  %5872 = sext i32 %5871 to i64
  %5873 = getelementptr inbounds i16, i16* %54, i64 %5872
  %5874 = load i16, i16* %5873, align 2, !tbaa !386
  %5875 = insertelement <64 x i16> %5870, i16 %5874, i32 27
  %5876 = extractelement <64 x i32> %5735, i32 28
  %5877 = sext i32 %5876 to i64
  %5878 = getelementptr inbounds i16, i16* %54, i64 %5877
  %5879 = load i16, i16* %5878, align 2, !tbaa !386
  %5880 = insertelement <64 x i16> %5875, i16 %5879, i32 28
  %5881 = extractelement <64 x i32> %5735, i32 29
  %5882 = sext i32 %5881 to i64
  %5883 = getelementptr inbounds i16, i16* %54, i64 %5882
  %5884 = load i16, i16* %5883, align 2, !tbaa !386
  %5885 = insertelement <64 x i16> %5880, i16 %5884, i32 29
  %5886 = extractelement <64 x i32> %5735, i32 30
  %5887 = sext i32 %5886 to i64
  %5888 = getelementptr inbounds i16, i16* %54, i64 %5887
  %5889 = load i16, i16* %5888, align 2, !tbaa !386
  %5890 = insertelement <64 x i16> %5885, i16 %5889, i32 30
  %5891 = extractelement <64 x i32> %5735, i32 31
  %5892 = sext i32 %5891 to i64
  %5893 = getelementptr inbounds i16, i16* %54, i64 %5892
  %5894 = load i16, i16* %5893, align 2, !tbaa !386
  %5895 = insertelement <64 x i16> %5890, i16 %5894, i32 31
  %5896 = extractelement <64 x i32> %5735, i32 32
  %5897 = sext i32 %5896 to i64
  %5898 = getelementptr inbounds i16, i16* %54, i64 %5897
  %5899 = load i16, i16* %5898, align 2, !tbaa !386
  %5900 = insertelement <64 x i16> %5895, i16 %5899, i32 32
  %5901 = extractelement <64 x i32> %5735, i32 33
  %5902 = sext i32 %5901 to i64
  %5903 = getelementptr inbounds i16, i16* %54, i64 %5902
  %5904 = load i16, i16* %5903, align 2, !tbaa !386
  %5905 = insertelement <64 x i16> %5900, i16 %5904, i32 33
  %5906 = extractelement <64 x i32> %5735, i32 34
  %5907 = sext i32 %5906 to i64
  %5908 = getelementptr inbounds i16, i16* %54, i64 %5907
  %5909 = load i16, i16* %5908, align 2, !tbaa !386
  %5910 = insertelement <64 x i16> %5905, i16 %5909, i32 34
  %5911 = extractelement <64 x i32> %5735, i32 35
  %5912 = sext i32 %5911 to i64
  %5913 = getelementptr inbounds i16, i16* %54, i64 %5912
  %5914 = load i16, i16* %5913, align 2, !tbaa !386
  %5915 = insertelement <64 x i16> %5910, i16 %5914, i32 35
  %5916 = extractelement <64 x i32> %5735, i32 36
  %5917 = sext i32 %5916 to i64
  %5918 = getelementptr inbounds i16, i16* %54, i64 %5917
  %5919 = load i16, i16* %5918, align 2, !tbaa !386
  %5920 = insertelement <64 x i16> %5915, i16 %5919, i32 36
  %5921 = extractelement <64 x i32> %5735, i32 37
  %5922 = sext i32 %5921 to i64
  %5923 = getelementptr inbounds i16, i16* %54, i64 %5922
  %5924 = load i16, i16* %5923, align 2, !tbaa !386
  %5925 = insertelement <64 x i16> %5920, i16 %5924, i32 37
  %5926 = extractelement <64 x i32> %5735, i32 38
  %5927 = sext i32 %5926 to i64
  %5928 = getelementptr inbounds i16, i16* %54, i64 %5927
  %5929 = load i16, i16* %5928, align 2, !tbaa !386
  %5930 = insertelement <64 x i16> %5925, i16 %5929, i32 38
  %5931 = extractelement <64 x i32> %5735, i32 39
  %5932 = sext i32 %5931 to i64
  %5933 = getelementptr inbounds i16, i16* %54, i64 %5932
  %5934 = load i16, i16* %5933, align 2, !tbaa !386
  %5935 = insertelement <64 x i16> %5930, i16 %5934, i32 39
  %5936 = extractelement <64 x i32> %5735, i32 40
  %5937 = sext i32 %5936 to i64
  %5938 = getelementptr inbounds i16, i16* %54, i64 %5937
  %5939 = load i16, i16* %5938, align 2, !tbaa !386
  %5940 = insertelement <64 x i16> %5935, i16 %5939, i32 40
  %5941 = extractelement <64 x i32> %5735, i32 41
  %5942 = sext i32 %5941 to i64
  %5943 = getelementptr inbounds i16, i16* %54, i64 %5942
  %5944 = load i16, i16* %5943, align 2, !tbaa !386
  %5945 = insertelement <64 x i16> %5940, i16 %5944, i32 41
  %5946 = extractelement <64 x i32> %5735, i32 42
  %5947 = sext i32 %5946 to i64
  %5948 = getelementptr inbounds i16, i16* %54, i64 %5947
  %5949 = load i16, i16* %5948, align 2, !tbaa !386
  %5950 = insertelement <64 x i16> %5945, i16 %5949, i32 42
  %5951 = extractelement <64 x i32> %5735, i32 43
  %5952 = sext i32 %5951 to i64
  %5953 = getelementptr inbounds i16, i16* %54, i64 %5952
  %5954 = load i16, i16* %5953, align 2, !tbaa !386
  %5955 = insertelement <64 x i16> %5950, i16 %5954, i32 43
  %5956 = extractelement <64 x i32> %5735, i32 44
  %5957 = sext i32 %5956 to i64
  %5958 = getelementptr inbounds i16, i16* %54, i64 %5957
  %5959 = load i16, i16* %5958, align 2, !tbaa !386
  %5960 = insertelement <64 x i16> %5955, i16 %5959, i32 44
  %5961 = extractelement <64 x i32> %5735, i32 45
  %5962 = sext i32 %5961 to i64
  %5963 = getelementptr inbounds i16, i16* %54, i64 %5962
  %5964 = load i16, i16* %5963, align 2, !tbaa !386
  %5965 = insertelement <64 x i16> %5960, i16 %5964, i32 45
  %5966 = extractelement <64 x i32> %5735, i32 46
  %5967 = sext i32 %5966 to i64
  %5968 = getelementptr inbounds i16, i16* %54, i64 %5967
  %5969 = load i16, i16* %5968, align 2, !tbaa !386
  %5970 = insertelement <64 x i16> %5965, i16 %5969, i32 46
  %5971 = extractelement <64 x i32> %5735, i32 47
  %5972 = sext i32 %5971 to i64
  %5973 = getelementptr inbounds i16, i16* %54, i64 %5972
  %5974 = load i16, i16* %5973, align 2, !tbaa !386
  %5975 = insertelement <64 x i16> %5970, i16 %5974, i32 47
  %5976 = extractelement <64 x i32> %5735, i32 48
  %5977 = sext i32 %5976 to i64
  %5978 = getelementptr inbounds i16, i16* %54, i64 %5977
  %5979 = load i16, i16* %5978, align 2, !tbaa !386
  %5980 = insertelement <64 x i16> %5975, i16 %5979, i32 48
  %5981 = extractelement <64 x i32> %5735, i32 49
  %5982 = sext i32 %5981 to i64
  %5983 = getelementptr inbounds i16, i16* %54, i64 %5982
  %5984 = load i16, i16* %5983, align 2, !tbaa !386
  %5985 = insertelement <64 x i16> %5980, i16 %5984, i32 49
  %5986 = extractelement <64 x i32> %5735, i32 50
  %5987 = sext i32 %5986 to i64
  %5988 = getelementptr inbounds i16, i16* %54, i64 %5987
  %5989 = load i16, i16* %5988, align 2, !tbaa !386
  %5990 = insertelement <64 x i16> %5985, i16 %5989, i32 50
  %5991 = extractelement <64 x i32> %5735, i32 51
  %5992 = sext i32 %5991 to i64
  %5993 = getelementptr inbounds i16, i16* %54, i64 %5992
  %5994 = load i16, i16* %5993, align 2, !tbaa !386
  %5995 = insertelement <64 x i16> %5990, i16 %5994, i32 51
  %5996 = extractelement <64 x i32> %5735, i32 52
  %5997 = sext i32 %5996 to i64
  %5998 = getelementptr inbounds i16, i16* %54, i64 %5997
  %5999 = load i16, i16* %5998, align 2, !tbaa !386
  %6000 = insertelement <64 x i16> %5995, i16 %5999, i32 52
  %6001 = extractelement <64 x i32> %5735, i32 53
  %6002 = sext i32 %6001 to i64
  %6003 = getelementptr inbounds i16, i16* %54, i64 %6002
  %6004 = load i16, i16* %6003, align 2, !tbaa !386
  %6005 = insertelement <64 x i16> %6000, i16 %6004, i32 53
  %6006 = extractelement <64 x i32> %5735, i32 54
  %6007 = sext i32 %6006 to i64
  %6008 = getelementptr inbounds i16, i16* %54, i64 %6007
  %6009 = load i16, i16* %6008, align 2, !tbaa !386
  %6010 = insertelement <64 x i16> %6005, i16 %6009, i32 54
  %6011 = extractelement <64 x i32> %5735, i32 55
  %6012 = sext i32 %6011 to i64
  %6013 = getelementptr inbounds i16, i16* %54, i64 %6012
  %6014 = load i16, i16* %6013, align 2, !tbaa !386
  %6015 = insertelement <64 x i16> %6010, i16 %6014, i32 55
  %6016 = extractelement <64 x i32> %5735, i32 56
  %6017 = sext i32 %6016 to i64
  %6018 = getelementptr inbounds i16, i16* %54, i64 %6017
  %6019 = load i16, i16* %6018, align 2, !tbaa !386
  %6020 = insertelement <64 x i16> %6015, i16 %6019, i32 56
  %6021 = extractelement <64 x i32> %5735, i32 57
  %6022 = sext i32 %6021 to i64
  %6023 = getelementptr inbounds i16, i16* %54, i64 %6022
  %6024 = load i16, i16* %6023, align 2, !tbaa !386
  %6025 = insertelement <64 x i16> %6020, i16 %6024, i32 57
  %6026 = extractelement <64 x i32> %5735, i32 58
  %6027 = sext i32 %6026 to i64
  %6028 = getelementptr inbounds i16, i16* %54, i64 %6027
  %6029 = load i16, i16* %6028, align 2, !tbaa !386
  %6030 = insertelement <64 x i16> %6025, i16 %6029, i32 58
  %6031 = extractelement <64 x i32> %5735, i32 59
  %6032 = sext i32 %6031 to i64
  %6033 = getelementptr inbounds i16, i16* %54, i64 %6032
  %6034 = load i16, i16* %6033, align 2, !tbaa !386
  %6035 = insertelement <64 x i16> %6030, i16 %6034, i32 59
  %6036 = extractelement <64 x i32> %5735, i32 60
  %6037 = sext i32 %6036 to i64
  %6038 = getelementptr inbounds i16, i16* %54, i64 %6037
  %6039 = load i16, i16* %6038, align 2, !tbaa !386
  %6040 = insertelement <64 x i16> %6035, i16 %6039, i32 60
  %6041 = extractelement <64 x i32> %5735, i32 61
  %6042 = sext i32 %6041 to i64
  %6043 = getelementptr inbounds i16, i16* %54, i64 %6042
  %6044 = load i16, i16* %6043, align 2, !tbaa !386
  %6045 = insertelement <64 x i16> %6040, i16 %6044, i32 61
  %6046 = extractelement <64 x i32> %5735, i32 62
  %6047 = sext i32 %6046 to i64
  %6048 = getelementptr inbounds i16, i16* %54, i64 %6047
  %6049 = load i16, i16* %6048, align 2, !tbaa !386
  %6050 = insertelement <64 x i16> %6045, i16 %6049, i32 62
  %6051 = extractelement <64 x i32> %5735, i32 63
  %6052 = sext i32 %6051 to i64
  %6053 = getelementptr inbounds i16, i16* %54, i64 %6052
  %6054 = load i16, i16* %6053, align 2, !tbaa !386
  %6055 = insertelement <64 x i16> %6050, i16 %6054, i32 63
  %6056 = add <64 x i16> %4450, %4129
  %6057 = add <64 x i16> %6056, %4771
  %6058 = add <64 x i16> %6057, %5092
  %6059 = add <64 x i16> %6058, %5413
  %6060 = add <64 x i16> %6059, %5734
  %6061 = add <64 x i16> %6060, %6055
  %6062 = shufflevector <64 x i16> %6061, <64 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %6063 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6062, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %6064 = shufflevector <64 x i16> %6061, <64 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %6065 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6064, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %6066 = shufflevector <64 x i16> %6061, <64 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %6067 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6066, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %6068 = shufflevector <64 x i16> %6061, <64 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %6069 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6068, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %6070 = shufflevector <64 x i16> %6061, <64 x i16> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %6071 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6070, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %6072 = shufflevector <64 x i16> %6061, <64 x i16> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %6073 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6072, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %6074 = shufflevector <64 x i16> %6061, <64 x i16> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %6075 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6074, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %6076 = shufflevector <64 x i16> %6061, <64 x i16> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %6077 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6076, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %6078 = shufflevector <64 x i16> %6061, <64 x i16> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %6079 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6078, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %6080 = shufflevector <64 x i16> %6061, <64 x i16> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %6081 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6080, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %6082 = shufflevector <64 x i16> %6061, <64 x i16> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %6083 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6082, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %6084 = shufflevector <64 x i16> %6061, <64 x i16> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %6085 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6084, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %6086 = shufflevector <64 x i16> %6061, <64 x i16> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %6087 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6086, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %6088 = shufflevector <64 x i16> %6061, <64 x i16> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %6089 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6088, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %6090 = shufflevector <64 x i16> %6061, <64 x i16> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %6091 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6090, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %6092 = shufflevector <64 x i16> %6061, <64 x i16> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %6093 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6092, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %6094 = shufflevector <4 x i32> %6063, <4 x i32> %6065, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6095 = shufflevector <4 x i32> %6067, <4 x i32> %6069, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6096 = shufflevector <4 x i32> %6071, <4 x i32> %6073, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6097 = shufflevector <4 x i32> %6075, <4 x i32> %6077, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6098 = shufflevector <4 x i32> %6079, <4 x i32> %6081, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6099 = shufflevector <4 x i32> %6083, <4 x i32> %6085, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6100 = shufflevector <4 x i32> %6087, <4 x i32> %6089, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6101 = shufflevector <4 x i32> %6091, <4 x i32> %6093, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6102 = shufflevector <8 x i32> %6094, <8 x i32> %6095, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6103 = shufflevector <8 x i32> %6096, <8 x i32> %6097, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6104 = shufflevector <8 x i32> %6098, <8 x i32> %6099, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6105 = shufflevector <8 x i32> %6100, <8 x i32> %6101, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6106 = shufflevector <16 x i32> %6102, <16 x i32> %6103, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6107 = shufflevector <16 x i32> %6104, <16 x i32> %6105, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6108 = shufflevector <32 x i32> %6106, <32 x i32> %6107, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %6109 = lshr <64 x i32> %6108, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %6110 = trunc <64 x i32> %6109 to <64 x i16>
  %6111 = shufflevector <64 x i16> %6110, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6112 = shufflevector <64 x i16> %6061, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6113 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %6111, <8 x i16> %6112)
  %6114 = shufflevector <64 x i16> %6110, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6115 = shufflevector <64 x i16> %6061, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6116 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %6114, <8 x i16> %6115)
  %6117 = shufflevector <64 x i16> %6110, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %6118 = shufflevector <64 x i16> %6061, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %6119 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %6117, <8 x i16> %6118)
  %6120 = shufflevector <64 x i16> %6110, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6121 = shufflevector <64 x i16> %6061, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6122 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %6120, <8 x i16> %6121)
  %6123 = shufflevector <64 x i16> %6110, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %6124 = shufflevector <64 x i16> %6061, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %6125 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %6123, <8 x i16> %6124)
  %6126 = shufflevector <64 x i16> %6110, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %6127 = shufflevector <64 x i16> %6061, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %6128 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %6126, <8 x i16> %6127)
  %6129 = shufflevector <64 x i16> %6110, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %6130 = shufflevector <64 x i16> %6061, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %6131 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %6129, <8 x i16> %6130)
  %6132 = shufflevector <64 x i16> %6110, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %6133 = shufflevector <64 x i16> %6061, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %6134 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %6132, <8 x i16> %6133)
  %6135 = shufflevector <8 x i16> %6113, <8 x i16> %6116, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6136 = shufflevector <8 x i16> %6119, <8 x i16> %6122, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6137 = shufflevector <8 x i16> %6125, <8 x i16> %6128, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6138 = shufflevector <8 x i16> %6131, <8 x i16> %6134, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6139 = shufflevector <16 x i16> %6135, <16 x i16> %6136, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6140 = shufflevector <16 x i16> %6137, <16 x i16> %6138, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6141 = shufflevector <32 x i16> %6139, <32 x i16> %6140, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %6142 = lshr <64 x i16> %6141, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %6143 = shufflevector <64 x i16> %6142, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6144 = and i32 %a5, 15
  %6145 = zext i32 %6144 to i64
  %6146 = mul nsw i64 %56, %6145
  %6147 = add nsw i64 %6146, %3803
  %6148 = getelementptr inbounds i16, i16* %blur_x, i64 %6147
  %6149 = bitcast i16* %6148 to <8 x i16>*
  store <8 x i16> %6143, <8 x i16>* %6149, align 2, !tbaa !389
  %6150 = shufflevector <64 x i16> %6142, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6151 = getelementptr inbounds i16, i16* %6148, i64 8
  %6152 = bitcast i16* %6151 to <8 x i16>*
  store <8 x i16> %6150, <8 x i16>* %6152, align 2, !tbaa !389
  %6153 = shufflevector <64 x i16> %6142, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %6154 = getelementptr inbounds i16, i16* %6148, i64 16
  %6155 = bitcast i16* %6154 to <8 x i16>*
  store <8 x i16> %6153, <8 x i16>* %6155, align 2, !tbaa !389
  %6156 = shufflevector <64 x i16> %6142, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6157 = getelementptr inbounds i16, i16* %6148, i64 24
  %6158 = bitcast i16* %6157 to <8 x i16>*
  store <8 x i16> %6156, <8 x i16>* %6158, align 2, !tbaa !389
  %6159 = shufflevector <64 x i16> %6142, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %6160 = getelementptr inbounds i16, i16* %6148, i64 32
  %6161 = bitcast i16* %6160 to <8 x i16>*
  store <8 x i16> %6159, <8 x i16>* %6161, align 2, !tbaa !389
  %6162 = shufflevector <64 x i16> %6142, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %6163 = getelementptr inbounds i16, i16* %6148, i64 40
  %6164 = bitcast i16* %6163 to <8 x i16>*
  store <8 x i16> %6162, <8 x i16>* %6164, align 2, !tbaa !389
  %6165 = shufflevector <64 x i16> %6142, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %6166 = getelementptr inbounds i16, i16* %6148, i64 48
  %6167 = bitcast i16* %6166 to <8 x i16>*
  store <8 x i16> %6165, <8 x i16>* %6167, align 2, !tbaa !389
  %6168 = shufflevector <64 x i16> %6142, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %6169 = getelementptr inbounds i16, i16* %6148, i64 56
  %6170 = bitcast i16* %6169 to <8 x i16>*
  store <8 x i16> %6168, <8 x i16>* %6170, align 2, !tbaa !389
  %6171 = add nuw nsw i32 %blur_x.s0.y.yi11, 1
  %.not167 = icmp eq i32 %6171, 4
  br i1 %.not167, label %"end for blur_x.s0.y.yi10", label %"for blur_x.s0.y.yi9"

"end for blur_x.s0.y.yi10":                       ; preds = %"for blur_x.s0.y.yi9"
  %indvars.iv.next205 = add nuw nsw i64 %indvars.iv204, 1
  %.not168 = icmp eq i64 %indvars.iv.next205, %69
  br i1 %.not168, label %"end for blur_x.s0.x.x.rebased6", label %"for blur_x.s0.x.x.rebased5"

after_bb12:                                       ; preds = %"for blur_y.s0.x.x15.preheader", %"end for blur_y.s0.x.x", %"end for blur_x.s0.x.x.rebased6"
  %indvars.iv.next210 = add nuw nsw i64 %indvars.iv209, 1
  %.not164 = icmp eq i64 %indvars.iv.next210, 134
  br i1 %.not164, label %"end for blur_y.s0.y.yi.$n.rebased", label %"for blur_y.s0.y.yi.$n.rebased"

"consume blur_x":                                 ; preds = %"end for blur_x.s0.x.x.rebased6"
  br i1 %59, label %"for blur_y.s0.x.x.preheader", label %"end for blur_y.s0.x.x", !prof !385

"for blur_y.s0.x.x.preheader":                    ; preds = %"consume blur_x"
  %6172 = add i64 %87, 11
  %6173 = and i64 %6172, 15
  %6174 = mul nsw i64 %61, %6173
  %6175 = add i64 %87, 10
  %6176 = and i64 %6175, 15
  %6177 = mul nsw i64 %61, %6176
  %6178 = add i64 %87, 12
  %6179 = and i64 %6178, 15
  %6180 = mul nsw i64 %61, %6179
  %6181 = add i64 %87, 13
  %6182 = and i64 %6181, 15
  %6183 = mul nsw i64 %61, %6182
  %6184 = add i64 %87, 14
  %6185 = and i64 %6184, 15
  %6186 = mul nsw i64 %61, %6185
  %6187 = and i64 %87, 15
  %6188 = mul nsw i64 %61, %6187
  %6189 = add i64 %87, 15
  %6190 = and i64 %6189, 15
  %6191 = mul nsw i64 %61, %6190
  %6192 = add nsw i64 %87, -6
  %6193 = mul nsw i64 %6192, %62
  br label %"for blur_y.s0.x.x"

"for blur_y.s0.x.x":                              ; preds = %"for blur_y.s0.x.x.preheader", %"for blur_y.s0.x.x"
  %indvars.iv206 = phi i64 [ 0, %"for blur_y.s0.x.x.preheader" ], [ %indvars.iv.next207, %"for blur_y.s0.x.x" ]
  %6194 = shl nsw i64 %indvars.iv206, 6
  %6195 = sub nsw i64 %6194, %71
  %6196 = add nsw i64 %6174, %6195
  %6197 = getelementptr inbounds i16, i16* %blur_x, i64 %6196
  %6198 = getelementptr inbounds i16, i16* %6197, i64 64
  %6199 = bitcast i16* %6198 to <8 x i16>*
  %6200 = load <8 x i16>, <8 x i16>* %6199, align 2, !tbaa !389
  %6201 = getelementptr inbounds i16, i16* %6197, i64 72
  %6202 = bitcast i16* %6201 to <8 x i16>*
  %6203 = load <8 x i16>, <8 x i16>* %6202, align 2, !tbaa !389
  %6204 = getelementptr inbounds i16, i16* %6197, i64 80
  %6205 = bitcast i16* %6204 to <8 x i16>*
  %6206 = load <8 x i16>, <8 x i16>* %6205, align 2, !tbaa !389
  %6207 = getelementptr inbounds i16, i16* %6197, i64 88
  %6208 = bitcast i16* %6207 to <8 x i16>*
  %6209 = load <8 x i16>, <8 x i16>* %6208, align 2, !tbaa !389
  %6210 = getelementptr inbounds i16, i16* %6197, i64 96
  %6211 = bitcast i16* %6210 to <8 x i16>*
  %6212 = load <8 x i16>, <8 x i16>* %6211, align 2, !tbaa !389
  %6213 = getelementptr inbounds i16, i16* %6197, i64 104
  %6214 = bitcast i16* %6213 to <8 x i16>*
  %6215 = load <8 x i16>, <8 x i16>* %6214, align 2, !tbaa !389
  %6216 = getelementptr inbounds i16, i16* %6197, i64 112
  %6217 = bitcast i16* %6216 to <8 x i16>*
  %6218 = load <8 x i16>, <8 x i16>* %6217, align 2, !tbaa !389
  %6219 = getelementptr inbounds i16, i16* %6197, i64 120
  %6220 = bitcast i16* %6219 to <8 x i16>*
  %6221 = load <8 x i16>, <8 x i16>* %6220, align 2, !tbaa !389
  %6222 = add nsw i64 %6177, %6195
  %6223 = getelementptr inbounds i16, i16* %blur_x, i64 %6222
  %6224 = getelementptr inbounds i16, i16* %6223, i64 64
  %6225 = bitcast i16* %6224 to <8 x i16>*
  %6226 = load <8 x i16>, <8 x i16>* %6225, align 2, !tbaa !389
  %6227 = getelementptr inbounds i16, i16* %6223, i64 72
  %6228 = bitcast i16* %6227 to <8 x i16>*
  %6229 = load <8 x i16>, <8 x i16>* %6228, align 2, !tbaa !389
  %6230 = getelementptr inbounds i16, i16* %6223, i64 80
  %6231 = bitcast i16* %6230 to <8 x i16>*
  %6232 = load <8 x i16>, <8 x i16>* %6231, align 2, !tbaa !389
  %6233 = getelementptr inbounds i16, i16* %6223, i64 88
  %6234 = bitcast i16* %6233 to <8 x i16>*
  %6235 = load <8 x i16>, <8 x i16>* %6234, align 2, !tbaa !389
  %6236 = getelementptr inbounds i16, i16* %6223, i64 96
  %6237 = bitcast i16* %6236 to <8 x i16>*
  %6238 = load <8 x i16>, <8 x i16>* %6237, align 2, !tbaa !389
  %6239 = getelementptr inbounds i16, i16* %6223, i64 104
  %6240 = bitcast i16* %6239 to <8 x i16>*
  %6241 = load <8 x i16>, <8 x i16>* %6240, align 2, !tbaa !389
  %6242 = getelementptr inbounds i16, i16* %6223, i64 112
  %6243 = bitcast i16* %6242 to <8 x i16>*
  %6244 = load <8 x i16>, <8 x i16>* %6243, align 2, !tbaa !389
  %6245 = getelementptr inbounds i16, i16* %6223, i64 120
  %6246 = bitcast i16* %6245 to <8 x i16>*
  %6247 = load <8 x i16>, <8 x i16>* %6246, align 2, !tbaa !389
  %6248 = add nsw i64 %6180, %6195
  %6249 = getelementptr inbounds i16, i16* %blur_x, i64 %6248
  %6250 = getelementptr inbounds i16, i16* %6249, i64 64
  %6251 = bitcast i16* %6250 to <8 x i16>*
  %6252 = load <8 x i16>, <8 x i16>* %6251, align 2, !tbaa !389
  %6253 = getelementptr inbounds i16, i16* %6249, i64 72
  %6254 = bitcast i16* %6253 to <8 x i16>*
  %6255 = load <8 x i16>, <8 x i16>* %6254, align 2, !tbaa !389
  %6256 = getelementptr inbounds i16, i16* %6249, i64 80
  %6257 = bitcast i16* %6256 to <8 x i16>*
  %6258 = load <8 x i16>, <8 x i16>* %6257, align 2, !tbaa !389
  %6259 = getelementptr inbounds i16, i16* %6249, i64 88
  %6260 = bitcast i16* %6259 to <8 x i16>*
  %6261 = load <8 x i16>, <8 x i16>* %6260, align 2, !tbaa !389
  %6262 = getelementptr inbounds i16, i16* %6249, i64 96
  %6263 = bitcast i16* %6262 to <8 x i16>*
  %6264 = load <8 x i16>, <8 x i16>* %6263, align 2, !tbaa !389
  %6265 = getelementptr inbounds i16, i16* %6249, i64 104
  %6266 = bitcast i16* %6265 to <8 x i16>*
  %6267 = load <8 x i16>, <8 x i16>* %6266, align 2, !tbaa !389
  %6268 = getelementptr inbounds i16, i16* %6249, i64 112
  %6269 = bitcast i16* %6268 to <8 x i16>*
  %6270 = load <8 x i16>, <8 x i16>* %6269, align 2, !tbaa !389
  %6271 = getelementptr inbounds i16, i16* %6249, i64 120
  %6272 = bitcast i16* %6271 to <8 x i16>*
  %6273 = load <8 x i16>, <8 x i16>* %6272, align 2, !tbaa !389
  %6274 = add nsw i64 %6183, %6195
  %6275 = getelementptr inbounds i16, i16* %blur_x, i64 %6274
  %6276 = getelementptr inbounds i16, i16* %6275, i64 64
  %6277 = bitcast i16* %6276 to <8 x i16>*
  %6278 = load <8 x i16>, <8 x i16>* %6277, align 2, !tbaa !389
  %6279 = getelementptr inbounds i16, i16* %6275, i64 72
  %6280 = bitcast i16* %6279 to <8 x i16>*
  %6281 = load <8 x i16>, <8 x i16>* %6280, align 2, !tbaa !389
  %6282 = getelementptr inbounds i16, i16* %6275, i64 80
  %6283 = bitcast i16* %6282 to <8 x i16>*
  %6284 = load <8 x i16>, <8 x i16>* %6283, align 2, !tbaa !389
  %6285 = getelementptr inbounds i16, i16* %6275, i64 88
  %6286 = bitcast i16* %6285 to <8 x i16>*
  %6287 = load <8 x i16>, <8 x i16>* %6286, align 2, !tbaa !389
  %6288 = getelementptr inbounds i16, i16* %6275, i64 96
  %6289 = bitcast i16* %6288 to <8 x i16>*
  %6290 = load <8 x i16>, <8 x i16>* %6289, align 2, !tbaa !389
  %6291 = getelementptr inbounds i16, i16* %6275, i64 104
  %6292 = bitcast i16* %6291 to <8 x i16>*
  %6293 = load <8 x i16>, <8 x i16>* %6292, align 2, !tbaa !389
  %6294 = getelementptr inbounds i16, i16* %6275, i64 112
  %6295 = bitcast i16* %6294 to <8 x i16>*
  %6296 = load <8 x i16>, <8 x i16>* %6295, align 2, !tbaa !389
  %6297 = getelementptr inbounds i16, i16* %6275, i64 120
  %6298 = bitcast i16* %6297 to <8 x i16>*
  %6299 = load <8 x i16>, <8 x i16>* %6298, align 2, !tbaa !389
  %6300 = add nsw i64 %6186, %6195
  %6301 = getelementptr inbounds i16, i16* %blur_x, i64 %6300
  %6302 = getelementptr inbounds i16, i16* %6301, i64 64
  %6303 = bitcast i16* %6302 to <8 x i16>*
  %6304 = load <8 x i16>, <8 x i16>* %6303, align 2, !tbaa !389
  %6305 = getelementptr inbounds i16, i16* %6301, i64 72
  %6306 = bitcast i16* %6305 to <8 x i16>*
  %6307 = load <8 x i16>, <8 x i16>* %6306, align 2, !tbaa !389
  %6308 = getelementptr inbounds i16, i16* %6301, i64 80
  %6309 = bitcast i16* %6308 to <8 x i16>*
  %6310 = load <8 x i16>, <8 x i16>* %6309, align 2, !tbaa !389
  %6311 = getelementptr inbounds i16, i16* %6301, i64 88
  %6312 = bitcast i16* %6311 to <8 x i16>*
  %6313 = load <8 x i16>, <8 x i16>* %6312, align 2, !tbaa !389
  %6314 = getelementptr inbounds i16, i16* %6301, i64 96
  %6315 = bitcast i16* %6314 to <8 x i16>*
  %6316 = load <8 x i16>, <8 x i16>* %6315, align 2, !tbaa !389
  %6317 = getelementptr inbounds i16, i16* %6301, i64 104
  %6318 = bitcast i16* %6317 to <8 x i16>*
  %6319 = load <8 x i16>, <8 x i16>* %6318, align 2, !tbaa !389
  %6320 = getelementptr inbounds i16, i16* %6301, i64 112
  %6321 = bitcast i16* %6320 to <8 x i16>*
  %6322 = load <8 x i16>, <8 x i16>* %6321, align 2, !tbaa !389
  %6323 = getelementptr inbounds i16, i16* %6301, i64 120
  %6324 = bitcast i16* %6323 to <8 x i16>*
  %6325 = load <8 x i16>, <8 x i16>* %6324, align 2, !tbaa !389
  %6326 = add nsw i64 %6188, %6195
  %6327 = getelementptr inbounds i16, i16* %blur_x, i64 %6326
  %6328 = getelementptr inbounds i16, i16* %6327, i64 64
  %6329 = bitcast i16* %6328 to <8 x i16>*
  %6330 = load <8 x i16>, <8 x i16>* %6329, align 2, !tbaa !389
  %6331 = getelementptr inbounds i16, i16* %6327, i64 72
  %6332 = bitcast i16* %6331 to <8 x i16>*
  %6333 = load <8 x i16>, <8 x i16>* %6332, align 2, !tbaa !389
  %6334 = getelementptr inbounds i16, i16* %6327, i64 80
  %6335 = bitcast i16* %6334 to <8 x i16>*
  %6336 = load <8 x i16>, <8 x i16>* %6335, align 2, !tbaa !389
  %6337 = getelementptr inbounds i16, i16* %6327, i64 88
  %6338 = bitcast i16* %6337 to <8 x i16>*
  %6339 = load <8 x i16>, <8 x i16>* %6338, align 2, !tbaa !389
  %6340 = getelementptr inbounds i16, i16* %6327, i64 96
  %6341 = bitcast i16* %6340 to <8 x i16>*
  %6342 = load <8 x i16>, <8 x i16>* %6341, align 2, !tbaa !389
  %6343 = getelementptr inbounds i16, i16* %6327, i64 104
  %6344 = bitcast i16* %6343 to <8 x i16>*
  %6345 = load <8 x i16>, <8 x i16>* %6344, align 2, !tbaa !389
  %6346 = getelementptr inbounds i16, i16* %6327, i64 112
  %6347 = bitcast i16* %6346 to <8 x i16>*
  %6348 = load <8 x i16>, <8 x i16>* %6347, align 2, !tbaa !389
  %6349 = getelementptr inbounds i16, i16* %6327, i64 120
  %6350 = bitcast i16* %6349 to <8 x i16>*
  %6351 = load <8 x i16>, <8 x i16>* %6350, align 2, !tbaa !389
  %6352 = add nsw i64 %6191, %6195
  %6353 = getelementptr inbounds i16, i16* %blur_x, i64 %6352
  %6354 = getelementptr inbounds i16, i16* %6353, i64 64
  %6355 = bitcast i16* %6354 to <8 x i16>*
  %6356 = load <8 x i16>, <8 x i16>* %6355, align 2, !tbaa !389
  %6357 = getelementptr inbounds i16, i16* %6353, i64 72
  %6358 = bitcast i16* %6357 to <8 x i16>*
  %6359 = load <8 x i16>, <8 x i16>* %6358, align 2, !tbaa !389
  %6360 = getelementptr inbounds i16, i16* %6353, i64 80
  %6361 = bitcast i16* %6360 to <8 x i16>*
  %6362 = load <8 x i16>, <8 x i16>* %6361, align 2, !tbaa !389
  %6363 = getelementptr inbounds i16, i16* %6353, i64 88
  %6364 = bitcast i16* %6363 to <8 x i16>*
  %6365 = load <8 x i16>, <8 x i16>* %6364, align 2, !tbaa !389
  %6366 = getelementptr inbounds i16, i16* %6353, i64 96
  %6367 = bitcast i16* %6366 to <8 x i16>*
  %6368 = load <8 x i16>, <8 x i16>* %6367, align 2, !tbaa !389
  %6369 = getelementptr inbounds i16, i16* %6353, i64 104
  %6370 = bitcast i16* %6369 to <8 x i16>*
  %6371 = load <8 x i16>, <8 x i16>* %6370, align 2, !tbaa !389
  %6372 = getelementptr inbounds i16, i16* %6353, i64 112
  %6373 = bitcast i16* %6372 to <8 x i16>*
  %6374 = load <8 x i16>, <8 x i16>* %6373, align 2, !tbaa !389
  %6375 = getelementptr inbounds i16, i16* %6353, i64 120
  %6376 = bitcast i16* %6375 to <8 x i16>*
  %6377 = load <8 x i16>, <8 x i16>* %6376, align 2, !tbaa !389
  %6378 = add <8 x i16> %6226, %6200
  %6379 = add <8 x i16> %6378, %6252
  %6380 = add <8 x i16> %6379, %6278
  %6381 = add <8 x i16> %6380, %6304
  %6382 = add <8 x i16> %6381, %6330
  %6383 = add <8 x i16> %6382, %6356
  %6384 = add <8 x i16> %6229, %6203
  %6385 = add <8 x i16> %6384, %6255
  %6386 = add <8 x i16> %6385, %6281
  %6387 = add <8 x i16> %6386, %6307
  %6388 = add <8 x i16> %6387, %6333
  %6389 = add <8 x i16> %6388, %6359
  %6390 = add <8 x i16> %6232, %6206
  %6391 = add <8 x i16> %6390, %6258
  %6392 = add <8 x i16> %6391, %6284
  %6393 = add <8 x i16> %6392, %6310
  %6394 = add <8 x i16> %6393, %6336
  %6395 = add <8 x i16> %6394, %6362
  %6396 = add <8 x i16> %6235, %6209
  %6397 = add <8 x i16> %6396, %6261
  %6398 = add <8 x i16> %6397, %6287
  %6399 = add <8 x i16> %6398, %6313
  %6400 = add <8 x i16> %6399, %6339
  %6401 = add <8 x i16> %6400, %6365
  %6402 = add <8 x i16> %6238, %6212
  %6403 = add <8 x i16> %6402, %6264
  %6404 = add <8 x i16> %6403, %6290
  %6405 = add <8 x i16> %6404, %6316
  %6406 = add <8 x i16> %6405, %6342
  %6407 = add <8 x i16> %6406, %6368
  %6408 = add <8 x i16> %6241, %6215
  %6409 = add <8 x i16> %6408, %6267
  %6410 = add <8 x i16> %6409, %6293
  %6411 = add <8 x i16> %6410, %6319
  %6412 = add <8 x i16> %6411, %6345
  %6413 = add <8 x i16> %6412, %6371
  %6414 = add <8 x i16> %6244, %6218
  %6415 = add <8 x i16> %6414, %6270
  %6416 = add <8 x i16> %6415, %6296
  %6417 = add <8 x i16> %6416, %6322
  %6418 = add <8 x i16> %6417, %6348
  %6419 = add <8 x i16> %6418, %6374
  %6420 = add <8 x i16> %6247, %6221
  %6421 = add <8 x i16> %6420, %6273
  %6422 = add <8 x i16> %6421, %6299
  %6423 = add <8 x i16> %6422, %6325
  %6424 = add <8 x i16> %6423, %6351
  %6425 = add <8 x i16> %6424, %6377
  %6426 = shufflevector <8 x i16> %6425, <8 x i16> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6427 = shufflevector <16 x i16> %6426, <16 x i16> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6428 = shufflevector <32 x i16> %6427, <32 x i16> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6429 = shufflevector <8 x i16> %6383, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %6430 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6429, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %6431 = shufflevector <8 x i16> %6383, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %6432 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6431, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %6433 = shufflevector <8 x i16> %6389, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %6434 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6433, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %6435 = shufflevector <8 x i16> %6389, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %6436 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6435, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %6437 = shufflevector <8 x i16> %6395, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %6438 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6437, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %6439 = shufflevector <8 x i16> %6395, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %6440 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6439, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %6441 = shufflevector <8 x i16> %6401, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %6442 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6441, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %6443 = shufflevector <8 x i16> %6401, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %6444 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6443, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %6445 = shufflevector <8 x i16> %6407, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %6446 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6445, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %6447 = shufflevector <8 x i16> %6407, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %6448 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6447, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %6449 = shufflevector <8 x i16> %6413, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %6450 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6449, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %6451 = shufflevector <8 x i16> %6413, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %6452 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6451, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %6453 = shufflevector <8 x i16> %6419, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %6454 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6453, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %6455 = shufflevector <8 x i16> %6419, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %6456 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6455, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %6457 = shufflevector <8 x i16> %6425, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %6458 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6457, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %6459 = shufflevector <8 x i16> %6425, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %6460 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6459, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %6461 = shufflevector <4 x i32> %6430, <4 x i32> %6432, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6462 = shufflevector <4 x i32> %6434, <4 x i32> %6436, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6463 = shufflevector <4 x i32> %6438, <4 x i32> %6440, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6464 = shufflevector <4 x i32> %6442, <4 x i32> %6444, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6465 = shufflevector <4 x i32> %6446, <4 x i32> %6448, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6466 = shufflevector <4 x i32> %6450, <4 x i32> %6452, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6467 = shufflevector <4 x i32> %6454, <4 x i32> %6456, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6468 = shufflevector <4 x i32> %6458, <4 x i32> %6460, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6469 = shufflevector <8 x i32> %6461, <8 x i32> %6462, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6470 = shufflevector <8 x i32> %6463, <8 x i32> %6464, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6471 = shufflevector <8 x i32> %6465, <8 x i32> %6466, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6472 = shufflevector <8 x i32> %6467, <8 x i32> %6468, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6473 = shufflevector <16 x i32> %6469, <16 x i32> %6470, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6474 = shufflevector <16 x i32> %6471, <16 x i32> %6472, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6475 = shufflevector <32 x i32> %6473, <32 x i32> %6474, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %6476 = lshr <64 x i32> %6475, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %6477 = trunc <64 x i32> %6476 to <64 x i16>
  %6478 = shufflevector <64 x i16> %6477, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6479 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %6478, <8 x i16> %6383)
  %6480 = shufflevector <64 x i16> %6477, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6481 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %6480, <8 x i16> %6389)
  %6482 = shufflevector <64 x i16> %6477, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %6483 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %6482, <8 x i16> %6395)
  %6484 = shufflevector <64 x i16> %6477, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6485 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %6484, <8 x i16> %6401)
  %6486 = shufflevector <64 x i16> %6477, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %6487 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %6486, <8 x i16> %6407)
  %6488 = shufflevector <64 x i16> %6477, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %6489 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %6488, <8 x i16> %6413)
  %6490 = shufflevector <64 x i16> %6477, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %6491 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %6490, <8 x i16> %6419)
  %6492 = shufflevector <64 x i16> %6477, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %6493 = shufflevector <64 x i16> %6428, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %6494 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %6492, <8 x i16> %6493)
  %6495 = shufflevector <8 x i16> %6479, <8 x i16> %6481, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6496 = shufflevector <8 x i16> %6483, <8 x i16> %6485, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6497 = shufflevector <8 x i16> %6487, <8 x i16> %6489, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6498 = shufflevector <8 x i16> %6491, <8 x i16> %6494, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6499 = shufflevector <16 x i16> %6495, <16 x i16> %6496, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6500 = shufflevector <16 x i16> %6497, <16 x i16> %6498, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6501 = shufflevector <32 x i16> %6499, <32 x i16> %6500, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %6502 = lshr <64 x i16> %6501, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %6503 = shufflevector <64 x i16> %6502, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6504 = add nsw i64 %6194, %6193
  %6505 = getelementptr inbounds i16, i16* %63, i64 %6504
  %6506 = bitcast i16* %6505 to <8 x i16>*
  store <8 x i16> %6503, <8 x i16>* %6506, align 2, !tbaa !391
  %6507 = shufflevector <64 x i16> %6502, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6508 = getelementptr inbounds i16, i16* %6505, i64 8
  %6509 = bitcast i16* %6508 to <8 x i16>*
  store <8 x i16> %6507, <8 x i16>* %6509, align 2, !tbaa !391
  %6510 = shufflevector <64 x i16> %6502, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %6511 = getelementptr inbounds i16, i16* %6505, i64 16
  %6512 = bitcast i16* %6511 to <8 x i16>*
  store <8 x i16> %6510, <8 x i16>* %6512, align 2, !tbaa !391
  %6513 = shufflevector <64 x i16> %6502, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6514 = getelementptr inbounds i16, i16* %6505, i64 24
  %6515 = bitcast i16* %6514 to <8 x i16>*
  store <8 x i16> %6513, <8 x i16>* %6515, align 2, !tbaa !391
  %6516 = shufflevector <64 x i16> %6502, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %6517 = getelementptr inbounds i16, i16* %6505, i64 32
  %6518 = bitcast i16* %6517 to <8 x i16>*
  store <8 x i16> %6516, <8 x i16>* %6518, align 2, !tbaa !391
  %6519 = shufflevector <64 x i16> %6502, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %6520 = getelementptr inbounds i16, i16* %6505, i64 40
  %6521 = bitcast i16* %6520 to <8 x i16>*
  store <8 x i16> %6519, <8 x i16>* %6521, align 2, !tbaa !391
  %6522 = shufflevector <64 x i16> %6502, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %6523 = getelementptr inbounds i16, i16* %6505, i64 48
  %6524 = bitcast i16* %6523 to <8 x i16>*
  store <8 x i16> %6522, <8 x i16>* %6524, align 2, !tbaa !391
  %6525 = shufflevector <64 x i16> %6502, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %6526 = getelementptr inbounds i16, i16* %6505, i64 56
  %6527 = bitcast i16* %6526 to <8 x i16>*
  store <8 x i16> %6525, <8 x i16>* %6527, align 2, !tbaa !391
  %indvars.iv.next207 = add nuw nsw i64 %indvars.iv206, 1
  %.not166 = icmp eq i64 %indvars.iv.next207, %70
  br i1 %.not166, label %"end for blur_y.s0.x.x", label %"for blur_y.s0.x.x"

"end for blur_y.s0.x.x":                          ; preds = %"for blur_y.s0.x.x", %"consume blur_x"
  br i1 %64, label %"for blur_y.s0.x.x15.preheader", label %after_bb12, !prof !385

"for blur_y.s0.x.x15.preheader":                  ; preds = %"end for blur_y.s0.x.x"
  %6528 = add i64 %87, 11
  %6529 = and i64 %6528, 15
  %6530 = mul nsw i64 %61, %6529
  %6531 = add nsw i64 %6530, %65
  %6532 = getelementptr inbounds i16, i16* %blur_x, i64 %6531
  %6533 = getelementptr inbounds i16, i16* %6532, i64 -64
  %6534 = bitcast i16* %6533 to <8 x i16>*
  %6535 = load <8 x i16>, <8 x i16>* %6534, align 2, !tbaa !389
  %6536 = getelementptr inbounds i16, i16* %6532, i64 -56
  %6537 = bitcast i16* %6536 to <8 x i16>*
  %6538 = load <8 x i16>, <8 x i16>* %6537, align 2, !tbaa !389
  %6539 = getelementptr inbounds i16, i16* %6532, i64 -48
  %6540 = bitcast i16* %6539 to <8 x i16>*
  %6541 = load <8 x i16>, <8 x i16>* %6540, align 2, !tbaa !389
  %6542 = getelementptr inbounds i16, i16* %6532, i64 -40
  %6543 = bitcast i16* %6542 to <8 x i16>*
  %6544 = load <8 x i16>, <8 x i16>* %6543, align 2, !tbaa !389
  %6545 = getelementptr inbounds i16, i16* %6532, i64 -32
  %6546 = bitcast i16* %6545 to <8 x i16>*
  %6547 = load <8 x i16>, <8 x i16>* %6546, align 2, !tbaa !389
  %6548 = getelementptr inbounds i16, i16* %6532, i64 -24
  %6549 = bitcast i16* %6548 to <8 x i16>*
  %6550 = load <8 x i16>, <8 x i16>* %6549, align 2, !tbaa !389
  %6551 = getelementptr inbounds i16, i16* %6532, i64 -16
  %6552 = bitcast i16* %6551 to <8 x i16>*
  %6553 = load <8 x i16>, <8 x i16>* %6552, align 2, !tbaa !389
  %6554 = getelementptr inbounds i16, i16* %6532, i64 -8
  %6555 = bitcast i16* %6554 to <8 x i16>*
  %6556 = load <8 x i16>, <8 x i16>* %6555, align 2, !tbaa !389
  %6557 = add i64 %87, 10
  %6558 = and i64 %6557, 15
  %6559 = mul nsw i64 %61, %6558
  %6560 = add nsw i64 %6559, %65
  %6561 = getelementptr inbounds i16, i16* %blur_x, i64 %6560
  %6562 = getelementptr inbounds i16, i16* %6561, i64 -64
  %6563 = bitcast i16* %6562 to <8 x i16>*
  %6564 = load <8 x i16>, <8 x i16>* %6563, align 2, !tbaa !389
  %6565 = getelementptr inbounds i16, i16* %6561, i64 -56
  %6566 = bitcast i16* %6565 to <8 x i16>*
  %6567 = load <8 x i16>, <8 x i16>* %6566, align 2, !tbaa !389
  %6568 = getelementptr inbounds i16, i16* %6561, i64 -48
  %6569 = bitcast i16* %6568 to <8 x i16>*
  %6570 = load <8 x i16>, <8 x i16>* %6569, align 2, !tbaa !389
  %6571 = getelementptr inbounds i16, i16* %6561, i64 -40
  %6572 = bitcast i16* %6571 to <8 x i16>*
  %6573 = load <8 x i16>, <8 x i16>* %6572, align 2, !tbaa !389
  %6574 = getelementptr inbounds i16, i16* %6561, i64 -32
  %6575 = bitcast i16* %6574 to <8 x i16>*
  %6576 = load <8 x i16>, <8 x i16>* %6575, align 2, !tbaa !389
  %6577 = getelementptr inbounds i16, i16* %6561, i64 -24
  %6578 = bitcast i16* %6577 to <8 x i16>*
  %6579 = load <8 x i16>, <8 x i16>* %6578, align 2, !tbaa !389
  %6580 = getelementptr inbounds i16, i16* %6561, i64 -16
  %6581 = bitcast i16* %6580 to <8 x i16>*
  %6582 = load <8 x i16>, <8 x i16>* %6581, align 2, !tbaa !389
  %6583 = getelementptr inbounds i16, i16* %6561, i64 -8
  %6584 = bitcast i16* %6583 to <8 x i16>*
  %6585 = load <8 x i16>, <8 x i16>* %6584, align 2, !tbaa !389
  %6586 = add i64 %87, 12
  %6587 = and i64 %6586, 15
  %6588 = mul nsw i64 %61, %6587
  %6589 = add nsw i64 %6588, %65
  %6590 = getelementptr inbounds i16, i16* %blur_x, i64 %6589
  %6591 = getelementptr inbounds i16, i16* %6590, i64 -64
  %6592 = bitcast i16* %6591 to <8 x i16>*
  %6593 = load <8 x i16>, <8 x i16>* %6592, align 2, !tbaa !389
  %6594 = getelementptr inbounds i16, i16* %6590, i64 -56
  %6595 = bitcast i16* %6594 to <8 x i16>*
  %6596 = load <8 x i16>, <8 x i16>* %6595, align 2, !tbaa !389
  %6597 = getelementptr inbounds i16, i16* %6590, i64 -48
  %6598 = bitcast i16* %6597 to <8 x i16>*
  %6599 = load <8 x i16>, <8 x i16>* %6598, align 2, !tbaa !389
  %6600 = getelementptr inbounds i16, i16* %6590, i64 -40
  %6601 = bitcast i16* %6600 to <8 x i16>*
  %6602 = load <8 x i16>, <8 x i16>* %6601, align 2, !tbaa !389
  %6603 = getelementptr inbounds i16, i16* %6590, i64 -32
  %6604 = bitcast i16* %6603 to <8 x i16>*
  %6605 = load <8 x i16>, <8 x i16>* %6604, align 2, !tbaa !389
  %6606 = getelementptr inbounds i16, i16* %6590, i64 -24
  %6607 = bitcast i16* %6606 to <8 x i16>*
  %6608 = load <8 x i16>, <8 x i16>* %6607, align 2, !tbaa !389
  %6609 = getelementptr inbounds i16, i16* %6590, i64 -16
  %6610 = bitcast i16* %6609 to <8 x i16>*
  %6611 = load <8 x i16>, <8 x i16>* %6610, align 2, !tbaa !389
  %6612 = getelementptr inbounds i16, i16* %6590, i64 -8
  %6613 = bitcast i16* %6612 to <8 x i16>*
  %6614 = load <8 x i16>, <8 x i16>* %6613, align 2, !tbaa !389
  %6615 = add i64 %87, 13
  %6616 = and i64 %6615, 15
  %6617 = mul nsw i64 %61, %6616
  %6618 = add nsw i64 %6617, %65
  %6619 = getelementptr inbounds i16, i16* %blur_x, i64 %6618
  %6620 = getelementptr inbounds i16, i16* %6619, i64 -64
  %6621 = bitcast i16* %6620 to <8 x i16>*
  %6622 = load <8 x i16>, <8 x i16>* %6621, align 2, !tbaa !389
  %6623 = getelementptr inbounds i16, i16* %6619, i64 -56
  %6624 = bitcast i16* %6623 to <8 x i16>*
  %6625 = load <8 x i16>, <8 x i16>* %6624, align 2, !tbaa !389
  %6626 = getelementptr inbounds i16, i16* %6619, i64 -48
  %6627 = bitcast i16* %6626 to <8 x i16>*
  %6628 = load <8 x i16>, <8 x i16>* %6627, align 2, !tbaa !389
  %6629 = getelementptr inbounds i16, i16* %6619, i64 -40
  %6630 = bitcast i16* %6629 to <8 x i16>*
  %6631 = load <8 x i16>, <8 x i16>* %6630, align 2, !tbaa !389
  %6632 = getelementptr inbounds i16, i16* %6619, i64 -32
  %6633 = bitcast i16* %6632 to <8 x i16>*
  %6634 = load <8 x i16>, <8 x i16>* %6633, align 2, !tbaa !389
  %6635 = getelementptr inbounds i16, i16* %6619, i64 -24
  %6636 = bitcast i16* %6635 to <8 x i16>*
  %6637 = load <8 x i16>, <8 x i16>* %6636, align 2, !tbaa !389
  %6638 = getelementptr inbounds i16, i16* %6619, i64 -16
  %6639 = bitcast i16* %6638 to <8 x i16>*
  %6640 = load <8 x i16>, <8 x i16>* %6639, align 2, !tbaa !389
  %6641 = getelementptr inbounds i16, i16* %6619, i64 -8
  %6642 = bitcast i16* %6641 to <8 x i16>*
  %6643 = load <8 x i16>, <8 x i16>* %6642, align 2, !tbaa !389
  %6644 = add i64 %87, 14
  %6645 = and i64 %6644, 15
  %6646 = mul nsw i64 %61, %6645
  %6647 = add nsw i64 %6646, %65
  %6648 = getelementptr inbounds i16, i16* %blur_x, i64 %6647
  %6649 = getelementptr inbounds i16, i16* %6648, i64 -64
  %6650 = bitcast i16* %6649 to <8 x i16>*
  %6651 = load <8 x i16>, <8 x i16>* %6650, align 2, !tbaa !389
  %6652 = getelementptr inbounds i16, i16* %6648, i64 -56
  %6653 = bitcast i16* %6652 to <8 x i16>*
  %6654 = load <8 x i16>, <8 x i16>* %6653, align 2, !tbaa !389
  %6655 = getelementptr inbounds i16, i16* %6648, i64 -48
  %6656 = bitcast i16* %6655 to <8 x i16>*
  %6657 = load <8 x i16>, <8 x i16>* %6656, align 2, !tbaa !389
  %6658 = getelementptr inbounds i16, i16* %6648, i64 -40
  %6659 = bitcast i16* %6658 to <8 x i16>*
  %6660 = load <8 x i16>, <8 x i16>* %6659, align 2, !tbaa !389
  %6661 = getelementptr inbounds i16, i16* %6648, i64 -32
  %6662 = bitcast i16* %6661 to <8 x i16>*
  %6663 = load <8 x i16>, <8 x i16>* %6662, align 2, !tbaa !389
  %6664 = getelementptr inbounds i16, i16* %6648, i64 -24
  %6665 = bitcast i16* %6664 to <8 x i16>*
  %6666 = load <8 x i16>, <8 x i16>* %6665, align 2, !tbaa !389
  %6667 = getelementptr inbounds i16, i16* %6648, i64 -16
  %6668 = bitcast i16* %6667 to <8 x i16>*
  %6669 = load <8 x i16>, <8 x i16>* %6668, align 2, !tbaa !389
  %6670 = getelementptr inbounds i16, i16* %6648, i64 -8
  %6671 = bitcast i16* %6670 to <8 x i16>*
  %6672 = load <8 x i16>, <8 x i16>* %6671, align 2, !tbaa !389
  %6673 = and i64 %87, 15
  %6674 = mul nsw i64 %61, %6673
  %6675 = add nsw i64 %6674, %65
  %6676 = getelementptr inbounds i16, i16* %blur_x, i64 %6675
  %6677 = getelementptr inbounds i16, i16* %6676, i64 -64
  %6678 = bitcast i16* %6677 to <8 x i16>*
  %6679 = load <8 x i16>, <8 x i16>* %6678, align 2, !tbaa !389
  %6680 = getelementptr inbounds i16, i16* %6676, i64 -56
  %6681 = bitcast i16* %6680 to <8 x i16>*
  %6682 = load <8 x i16>, <8 x i16>* %6681, align 2, !tbaa !389
  %6683 = getelementptr inbounds i16, i16* %6676, i64 -48
  %6684 = bitcast i16* %6683 to <8 x i16>*
  %6685 = load <8 x i16>, <8 x i16>* %6684, align 2, !tbaa !389
  %6686 = getelementptr inbounds i16, i16* %6676, i64 -40
  %6687 = bitcast i16* %6686 to <8 x i16>*
  %6688 = load <8 x i16>, <8 x i16>* %6687, align 2, !tbaa !389
  %6689 = getelementptr inbounds i16, i16* %6676, i64 -32
  %6690 = bitcast i16* %6689 to <8 x i16>*
  %6691 = load <8 x i16>, <8 x i16>* %6690, align 2, !tbaa !389
  %6692 = getelementptr inbounds i16, i16* %6676, i64 -24
  %6693 = bitcast i16* %6692 to <8 x i16>*
  %6694 = load <8 x i16>, <8 x i16>* %6693, align 2, !tbaa !389
  %6695 = getelementptr inbounds i16, i16* %6676, i64 -16
  %6696 = bitcast i16* %6695 to <8 x i16>*
  %6697 = load <8 x i16>, <8 x i16>* %6696, align 2, !tbaa !389
  %6698 = getelementptr inbounds i16, i16* %6676, i64 -8
  %6699 = bitcast i16* %6698 to <8 x i16>*
  %6700 = load <8 x i16>, <8 x i16>* %6699, align 2, !tbaa !389
  %6701 = add i64 %87, 15
  %6702 = and i64 %6701, 15
  %6703 = mul nsw i64 %61, %6702
  %6704 = add nsw i64 %6703, %65
  %6705 = getelementptr inbounds i16, i16* %blur_x, i64 %6704
  %6706 = getelementptr inbounds i16, i16* %6705, i64 -64
  %6707 = bitcast i16* %6706 to <8 x i16>*
  %6708 = load <8 x i16>, <8 x i16>* %6707, align 2, !tbaa !389
  %6709 = getelementptr inbounds i16, i16* %6705, i64 -56
  %6710 = bitcast i16* %6709 to <8 x i16>*
  %6711 = load <8 x i16>, <8 x i16>* %6710, align 2, !tbaa !389
  %6712 = getelementptr inbounds i16, i16* %6705, i64 -48
  %6713 = bitcast i16* %6712 to <8 x i16>*
  %6714 = load <8 x i16>, <8 x i16>* %6713, align 2, !tbaa !389
  %6715 = getelementptr inbounds i16, i16* %6705, i64 -40
  %6716 = bitcast i16* %6715 to <8 x i16>*
  %6717 = load <8 x i16>, <8 x i16>* %6716, align 2, !tbaa !389
  %6718 = getelementptr inbounds i16, i16* %6705, i64 -32
  %6719 = bitcast i16* %6718 to <8 x i16>*
  %6720 = load <8 x i16>, <8 x i16>* %6719, align 2, !tbaa !389
  %6721 = getelementptr inbounds i16, i16* %6705, i64 -24
  %6722 = bitcast i16* %6721 to <8 x i16>*
  %6723 = load <8 x i16>, <8 x i16>* %6722, align 2, !tbaa !389
  %6724 = getelementptr inbounds i16, i16* %6705, i64 -16
  %6725 = bitcast i16* %6724 to <8 x i16>*
  %6726 = load <8 x i16>, <8 x i16>* %6725, align 2, !tbaa !389
  %6727 = getelementptr inbounds i16, i16* %6705, i64 -8
  %6728 = bitcast i16* %6727 to <8 x i16>*
  %6729 = load <8 x i16>, <8 x i16>* %6728, align 2, !tbaa !389
  %6730 = add <8 x i16> %6564, %6535
  %6731 = add <8 x i16> %6730, %6593
  %6732 = add <8 x i16> %6731, %6622
  %6733 = add <8 x i16> %6732, %6651
  %6734 = add <8 x i16> %6733, %6679
  %6735 = add <8 x i16> %6734, %6708
  %6736 = add <8 x i16> %6567, %6538
  %6737 = add <8 x i16> %6736, %6596
  %6738 = add <8 x i16> %6737, %6625
  %6739 = add <8 x i16> %6738, %6654
  %6740 = add <8 x i16> %6739, %6682
  %6741 = add <8 x i16> %6740, %6711
  %6742 = add <8 x i16> %6570, %6541
  %6743 = add <8 x i16> %6742, %6599
  %6744 = add <8 x i16> %6743, %6628
  %6745 = add <8 x i16> %6744, %6657
  %6746 = add <8 x i16> %6745, %6685
  %6747 = add <8 x i16> %6746, %6714
  %6748 = add <8 x i16> %6573, %6544
  %6749 = add <8 x i16> %6748, %6602
  %6750 = add <8 x i16> %6749, %6631
  %6751 = add <8 x i16> %6750, %6660
  %6752 = add <8 x i16> %6751, %6688
  %6753 = add <8 x i16> %6752, %6717
  %6754 = add <8 x i16> %6576, %6547
  %6755 = add <8 x i16> %6754, %6605
  %6756 = add <8 x i16> %6755, %6634
  %6757 = add <8 x i16> %6756, %6663
  %6758 = add <8 x i16> %6757, %6691
  %6759 = add <8 x i16> %6758, %6720
  %6760 = add <8 x i16> %6579, %6550
  %6761 = add <8 x i16> %6760, %6608
  %6762 = add <8 x i16> %6761, %6637
  %6763 = add <8 x i16> %6762, %6666
  %6764 = add <8 x i16> %6763, %6694
  %6765 = add <8 x i16> %6764, %6723
  %6766 = add <8 x i16> %6582, %6553
  %6767 = add <8 x i16> %6766, %6611
  %6768 = add <8 x i16> %6767, %6640
  %6769 = add <8 x i16> %6768, %6669
  %6770 = add <8 x i16> %6769, %6697
  %6771 = add <8 x i16> %6770, %6726
  %6772 = add <8 x i16> %6585, %6556
  %6773 = add <8 x i16> %6772, %6614
  %6774 = add <8 x i16> %6773, %6643
  %6775 = add <8 x i16> %6774, %6672
  %6776 = add <8 x i16> %6775, %6700
  %6777 = add <8 x i16> %6776, %6729
  %6778 = shufflevector <8 x i16> %6777, <8 x i16> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6779 = shufflevector <16 x i16> %6778, <16 x i16> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6780 = shufflevector <32 x i16> %6779, <32 x i16> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6781 = shufflevector <8 x i16> %6735, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %6782 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6781, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %6783 = shufflevector <8 x i16> %6735, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %6784 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6783, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %6785 = shufflevector <8 x i16> %6741, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %6786 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6785, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %6787 = shufflevector <8 x i16> %6741, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %6788 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6787, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %6789 = shufflevector <8 x i16> %6747, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %6790 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6789, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %6791 = shufflevector <8 x i16> %6747, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %6792 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6791, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %6793 = shufflevector <8 x i16> %6753, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %6794 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6793, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %6795 = shufflevector <8 x i16> %6753, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %6796 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6795, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %6797 = shufflevector <8 x i16> %6759, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %6798 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6797, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %6799 = shufflevector <8 x i16> %6759, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %6800 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6799, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %6801 = shufflevector <8 x i16> %6765, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %6802 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6801, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %6803 = shufflevector <8 x i16> %6765, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %6804 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6803, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %6805 = shufflevector <8 x i16> %6771, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %6806 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6805, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %6807 = shufflevector <8 x i16> %6771, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %6808 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6807, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %6809 = shufflevector <8 x i16> %6777, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %6810 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6809, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %6811 = shufflevector <8 x i16> %6777, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %6812 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %6811, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %6813 = shufflevector <4 x i32> %6782, <4 x i32> %6784, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6814 = shufflevector <4 x i32> %6786, <4 x i32> %6788, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6815 = shufflevector <4 x i32> %6790, <4 x i32> %6792, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6816 = shufflevector <4 x i32> %6794, <4 x i32> %6796, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6817 = shufflevector <4 x i32> %6798, <4 x i32> %6800, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6818 = shufflevector <4 x i32> %6802, <4 x i32> %6804, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6819 = shufflevector <4 x i32> %6806, <4 x i32> %6808, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6820 = shufflevector <4 x i32> %6810, <4 x i32> %6812, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6821 = shufflevector <8 x i32> %6813, <8 x i32> %6814, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6822 = shufflevector <8 x i32> %6815, <8 x i32> %6816, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6823 = shufflevector <8 x i32> %6817, <8 x i32> %6818, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6824 = shufflevector <8 x i32> %6819, <8 x i32> %6820, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6825 = shufflevector <16 x i32> %6821, <16 x i32> %6822, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6826 = shufflevector <16 x i32> %6823, <16 x i32> %6824, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6827 = shufflevector <32 x i32> %6825, <32 x i32> %6826, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %6828 = lshr <64 x i32> %6827, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %6829 = trunc <64 x i32> %6828 to <64 x i16>
  %6830 = shufflevector <64 x i16> %6829, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6831 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %6830, <8 x i16> %6735)
  %6832 = shufflevector <64 x i16> %6829, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6833 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %6832, <8 x i16> %6741)
  %6834 = shufflevector <64 x i16> %6829, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %6835 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %6834, <8 x i16> %6747)
  %6836 = shufflevector <64 x i16> %6829, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6837 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %6836, <8 x i16> %6753)
  %6838 = shufflevector <64 x i16> %6829, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %6839 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %6838, <8 x i16> %6759)
  %6840 = shufflevector <64 x i16> %6829, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %6841 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %6840, <8 x i16> %6765)
  %6842 = shufflevector <64 x i16> %6829, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %6843 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %6842, <8 x i16> %6771)
  %6844 = shufflevector <64 x i16> %6829, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %6845 = shufflevector <64 x i16> %6780, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %6846 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %6844, <8 x i16> %6845)
  %6847 = shufflevector <8 x i16> %6831, <8 x i16> %6833, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6848 = shufflevector <8 x i16> %6835, <8 x i16> %6837, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6849 = shufflevector <8 x i16> %6839, <8 x i16> %6841, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6850 = shufflevector <8 x i16> %6843, <8 x i16> %6846, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6851 = shufflevector <16 x i16> %6847, <16 x i16> %6848, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6852 = shufflevector <16 x i16> %6849, <16 x i16> %6850, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6853 = shufflevector <32 x i16> %6851, <32 x i16> %6852, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %6854 = lshr <64 x i16> %6853, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %6855 = add nsw i64 %87, -6
  %6856 = mul nsw i64 %6855, %62
  %6857 = add nsw i64 %6856, %66
  %6858 = getelementptr inbounds i16, i16* %63, i64 %6857
  %6859 = getelementptr inbounds i16, i16* %6858, i64 -64
  %6860 = bitcast i16* %6859 to <8 x i16>*
  %6861 = getelementptr inbounds i16, i16* %6858, i64 -56
  %6862 = bitcast i16* %6861 to <8 x i16>*
  %6863 = getelementptr inbounds i16, i16* %6858, i64 -48
  %6864 = bitcast i16* %6863 to <8 x i16>*
  %6865 = getelementptr inbounds i16, i16* %6858, i64 -40
  %6866 = bitcast i16* %6865 to <8 x i16>*
  %6867 = getelementptr inbounds i16, i16* %6858, i64 -32
  %6868 = bitcast i16* %6867 to <8 x i16>*
  %6869 = getelementptr inbounds i16, i16* %6858, i64 -24
  %6870 = bitcast i16* %6869 to <8 x i16>*
  %6871 = getelementptr inbounds i16, i16* %6858, i64 -16
  %6872 = bitcast i16* %6871 to <8 x i16>*
  %6873 = getelementptr inbounds i16, i16* %6858, i64 -8
  %6874 = shufflevector <64 x i16> %6854, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6875 = shufflevector <64 x i16> %6854, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6876 = shufflevector <64 x i16> %6854, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %6877 = shufflevector <64 x i16> %6854, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6878 = shufflevector <64 x i16> %6854, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %6879 = shufflevector <64 x i16> %6854, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %6880 = shufflevector <64 x i16> %6854, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %6881 = shufflevector <64 x i16> %6854, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %6882 = bitcast i16* %6873 to <8 x i16>*
  store <8 x i16> %6874, <8 x i16>* %6860, align 2, !tbaa !391
  store <8 x i16> %6875, <8 x i16>* %6862, align 2, !tbaa !391
  store <8 x i16> %6876, <8 x i16>* %6864, align 2, !tbaa !391
  store <8 x i16> %6877, <8 x i16>* %6866, align 2, !tbaa !391
  store <8 x i16> %6878, <8 x i16>* %6868, align 2, !tbaa !391
  store <8 x i16> %6879, <8 x i16>* %6870, align 2, !tbaa !391
  store <8 x i16> %6880, <8 x i16>* %6872, align 2, !tbaa !391
  store <8 x i16> %6881, <8 x i16>* %6882, align 2, !tbaa !391
  br label %after_bb12

"for blur_y.s0.y.yi.$n.rebased20":                ; preds = %next_bb, %after_bb31
  %indvars.iv197 = phi i64 [ 0, %next_bb ], [ %indvars.iv.next198, %after_bb31 ]
  %6883 = add nsw i64 %indvars.iv197, %86
  br i1 %73, label %"for blur_x.s0.x.x24.preheader", label %"end for blur_x.s0.x.x25", !prof !385

"for blur_x.s0.x.x24.preheader":                  ; preds = %"for blur_y.s0.y.yi.$n.rebased20"
  %6884 = trunc i64 %6883 to i32
  br label %"for blur_x.s0.x.x24"

"end for blur_y.s0.y.yi.$n.rebased21":            ; preds = %after_bb31
  %tobool.not.i174.not = icmp eq i8* %40, null
  br i1 %tobool.not.i174.not, label %after_bb, label %if.then.i175

if.then.i175:                                     ; preds = %"end for blur_y.s0.y.yi.$n.rebased21"
  tail call void @halide_free(i8* %__user_context, i8* nonnull %40) #14
  br label %after_bb

"for blur_x.s0.x.x24":                            ; preds = %"for blur_x.s0.x.x24.preheader", %"end for blur_x.s0.y.yi29"
  %indvars.iv = phi i64 [ 0, %"for blur_x.s0.x.x24.preheader" ], [ %indvars.iv.next, %"end for blur_x.s0.y.yi29" ]
  %6885 = trunc i64 %indvars.iv to i32
  %6886 = shl nsw i32 %6885, 6
  %blur_x.s0.x.xi.base.s27 = add nsw i32 %6886, %t265
  %6887 = add nsw i32 %blur_x.s0.x.xi.base.s27, -63
  %6888 = insertelement <64 x i32> undef, i32 %6887, i32 0
  %6889 = shufflevector <64 x i32> %6888, <64 x i32> undef, <64 x i32> zeroinitializer
  %6890 = add nsw <64 x i32> %6889, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %6891 = shufflevector <64 x i32> %6890, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %6892 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6891, <4 x i32> %76)
  %6893 = shufflevector <64 x i32> %6890, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %6894 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6893, <4 x i32> %76)
  %6895 = shufflevector <64 x i32> %6890, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %6896 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6895, <4 x i32> %76)
  %6897 = shufflevector <64 x i32> %6890, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %6898 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6897, <4 x i32> %76)
  %6899 = shufflevector <64 x i32> %6890, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %6900 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6899, <4 x i32> %76)
  %6901 = shufflevector <64 x i32> %6890, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %6902 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6901, <4 x i32> %76)
  %6903 = shufflevector <64 x i32> %6890, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %6904 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6903, <4 x i32> %76)
  %6905 = shufflevector <64 x i32> %6890, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %6906 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6905, <4 x i32> %76)
  %6907 = shufflevector <64 x i32> %6890, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %6908 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6907, <4 x i32> %76)
  %6909 = shufflevector <64 x i32> %6890, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %6910 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6909, <4 x i32> %76)
  %6911 = shufflevector <64 x i32> %6890, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %6912 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6911, <4 x i32> %76)
  %6913 = shufflevector <64 x i32> %6890, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %6914 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6913, <4 x i32> %76)
  %6915 = shufflevector <64 x i32> %6890, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %6916 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6915, <4 x i32> %76)
  %6917 = shufflevector <64 x i32> %6890, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %6918 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6917, <4 x i32> %76)
  %6919 = shufflevector <64 x i32> %6890, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %6920 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6919, <4 x i32> %76)
  %6921 = shufflevector <64 x i32> %6890, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %6922 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6921, <4 x i32> %76)
  %6923 = shufflevector <4 x i32> %6922, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %6924 = shufflevector <8 x i32> %6923, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %6925 = shufflevector <16 x i32> %6924, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %6926 = shufflevector <32 x i32> %6925, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %6927 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6892, <4 x i32> zeroinitializer)
  %6928 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6894, <4 x i32> zeroinitializer)
  %6929 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6896, <4 x i32> zeroinitializer)
  %6930 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6898, <4 x i32> zeroinitializer)
  %6931 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6900, <4 x i32> zeroinitializer)
  %6932 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6902, <4 x i32> zeroinitializer)
  %6933 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6904, <4 x i32> zeroinitializer)
  %6934 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6906, <4 x i32> zeroinitializer)
  %6935 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6908, <4 x i32> zeroinitializer)
  %6936 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6910, <4 x i32> zeroinitializer)
  %6937 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6912, <4 x i32> zeroinitializer)
  %6938 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6914, <4 x i32> zeroinitializer)
  %6939 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6916, <4 x i32> zeroinitializer)
  %6940 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6918, <4 x i32> zeroinitializer)
  %6941 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6920, <4 x i32> zeroinitializer)
  %6942 = shufflevector <64 x i32> %6926, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %6943 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6942, <4 x i32> zeroinitializer)
  %6944 = shufflevector <4 x i32> %6927, <4 x i32> %6928, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6945 = shufflevector <4 x i32> %6929, <4 x i32> %6930, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6946 = shufflevector <4 x i32> %6931, <4 x i32> %6932, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6947 = shufflevector <4 x i32> %6933, <4 x i32> %6934, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6948 = shufflevector <4 x i32> %6935, <4 x i32> %6936, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6949 = shufflevector <4 x i32> %6937, <4 x i32> %6938, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6950 = shufflevector <4 x i32> %6939, <4 x i32> %6940, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6951 = shufflevector <4 x i32> %6941, <4 x i32> %6943, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6952 = shufflevector <8 x i32> %6944, <8 x i32> %6945, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6953 = shufflevector <8 x i32> %6946, <8 x i32> %6947, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6954 = shufflevector <8 x i32> %6948, <8 x i32> %6949, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6955 = shufflevector <8 x i32> %6950, <8 x i32> %6951, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6956 = shufflevector <16 x i32> %6952, <16 x i32> %6953, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6957 = shufflevector <16 x i32> %6954, <16 x i32> %6955, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6958 = shufflevector <32 x i32> %6956, <32 x i32> %6957, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %6959 = add nsw i32 %blur_x.s0.x.xi.base.s27, -64
  %6960 = insertelement <64 x i32> undef, i32 %6959, i32 0
  %6961 = shufflevector <64 x i32> %6960, <64 x i32> undef, <64 x i32> zeroinitializer
  %6962 = add nsw <64 x i32> %6961, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %6963 = shufflevector <64 x i32> %6962, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %6964 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6963, <4 x i32> %76)
  %6965 = shufflevector <64 x i32> %6962, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %6966 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6965, <4 x i32> %76)
  %6967 = shufflevector <64 x i32> %6962, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %6968 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6967, <4 x i32> %76)
  %6969 = shufflevector <64 x i32> %6962, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %6970 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6969, <4 x i32> %76)
  %6971 = shufflevector <64 x i32> %6962, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %6972 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6971, <4 x i32> %76)
  %6973 = shufflevector <64 x i32> %6962, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %6974 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6973, <4 x i32> %76)
  %6975 = shufflevector <64 x i32> %6962, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %6976 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6975, <4 x i32> %76)
  %6977 = shufflevector <64 x i32> %6962, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %6978 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6977, <4 x i32> %76)
  %6979 = shufflevector <64 x i32> %6962, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %6980 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6979, <4 x i32> %76)
  %6981 = shufflevector <64 x i32> %6962, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %6982 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6981, <4 x i32> %76)
  %6983 = shufflevector <64 x i32> %6962, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %6984 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6983, <4 x i32> %76)
  %6985 = shufflevector <64 x i32> %6962, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %6986 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6985, <4 x i32> %76)
  %6987 = shufflevector <64 x i32> %6962, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %6988 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6987, <4 x i32> %76)
  %6989 = shufflevector <64 x i32> %6962, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %6990 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6989, <4 x i32> %76)
  %6991 = shufflevector <64 x i32> %6962, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %6992 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6991, <4 x i32> %76)
  %6993 = shufflevector <64 x i32> %6962, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %6994 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %6993, <4 x i32> %76)
  %6995 = shufflevector <4 x i32> %6994, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %6996 = shufflevector <8 x i32> %6995, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %6997 = shufflevector <16 x i32> %6996, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %6998 = shufflevector <32 x i32> %6997, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %6999 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6964, <4 x i32> zeroinitializer)
  %7000 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6966, <4 x i32> zeroinitializer)
  %7001 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6968, <4 x i32> zeroinitializer)
  %7002 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6970, <4 x i32> zeroinitializer)
  %7003 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6972, <4 x i32> zeroinitializer)
  %7004 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6974, <4 x i32> zeroinitializer)
  %7005 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6976, <4 x i32> zeroinitializer)
  %7006 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6978, <4 x i32> zeroinitializer)
  %7007 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6980, <4 x i32> zeroinitializer)
  %7008 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6982, <4 x i32> zeroinitializer)
  %7009 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6984, <4 x i32> zeroinitializer)
  %7010 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6986, <4 x i32> zeroinitializer)
  %7011 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6988, <4 x i32> zeroinitializer)
  %7012 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6990, <4 x i32> zeroinitializer)
  %7013 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %6992, <4 x i32> zeroinitializer)
  %7014 = shufflevector <64 x i32> %6998, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %7015 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7014, <4 x i32> zeroinitializer)
  %7016 = shufflevector <4 x i32> %6999, <4 x i32> %7000, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7017 = shufflevector <4 x i32> %7001, <4 x i32> %7002, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7018 = shufflevector <4 x i32> %7003, <4 x i32> %7004, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7019 = shufflevector <4 x i32> %7005, <4 x i32> %7006, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7020 = shufflevector <4 x i32> %7007, <4 x i32> %7008, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7021 = shufflevector <4 x i32> %7009, <4 x i32> %7010, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7022 = shufflevector <4 x i32> %7011, <4 x i32> %7012, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7023 = shufflevector <4 x i32> %7013, <4 x i32> %7015, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7024 = shufflevector <8 x i32> %7016, <8 x i32> %7017, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7025 = shufflevector <8 x i32> %7018, <8 x i32> %7019, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7026 = shufflevector <8 x i32> %7020, <8 x i32> %7021, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7027 = shufflevector <8 x i32> %7022, <8 x i32> %7023, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7028 = shufflevector <16 x i32> %7024, <16 x i32> %7025, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7029 = shufflevector <16 x i32> %7026, <16 x i32> %7027, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7030 = shufflevector <32 x i32> %7028, <32 x i32> %7029, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %7031 = add nsw i32 %blur_x.s0.x.xi.base.s27, -62
  %7032 = insertelement <64 x i32> undef, i32 %7031, i32 0
  %7033 = shufflevector <64 x i32> %7032, <64 x i32> undef, <64 x i32> zeroinitializer
  %7034 = add nsw <64 x i32> %7033, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %7035 = shufflevector <64 x i32> %7034, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %7036 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7035, <4 x i32> %76)
  %7037 = shufflevector <64 x i32> %7034, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %7038 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7037, <4 x i32> %76)
  %7039 = shufflevector <64 x i32> %7034, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %7040 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7039, <4 x i32> %76)
  %7041 = shufflevector <64 x i32> %7034, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %7042 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7041, <4 x i32> %76)
  %7043 = shufflevector <64 x i32> %7034, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %7044 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7043, <4 x i32> %76)
  %7045 = shufflevector <64 x i32> %7034, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %7046 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7045, <4 x i32> %76)
  %7047 = shufflevector <64 x i32> %7034, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %7048 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7047, <4 x i32> %76)
  %7049 = shufflevector <64 x i32> %7034, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %7050 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7049, <4 x i32> %76)
  %7051 = shufflevector <64 x i32> %7034, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %7052 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7051, <4 x i32> %76)
  %7053 = shufflevector <64 x i32> %7034, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %7054 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7053, <4 x i32> %76)
  %7055 = shufflevector <64 x i32> %7034, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %7056 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7055, <4 x i32> %76)
  %7057 = shufflevector <64 x i32> %7034, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %7058 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7057, <4 x i32> %76)
  %7059 = shufflevector <64 x i32> %7034, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %7060 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7059, <4 x i32> %76)
  %7061 = shufflevector <64 x i32> %7034, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %7062 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7061, <4 x i32> %76)
  %7063 = shufflevector <64 x i32> %7034, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %7064 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7063, <4 x i32> %76)
  %7065 = shufflevector <64 x i32> %7034, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %7066 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7065, <4 x i32> %76)
  %7067 = shufflevector <4 x i32> %7066, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %7068 = shufflevector <8 x i32> %7067, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %7069 = shufflevector <16 x i32> %7068, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %7070 = shufflevector <32 x i32> %7069, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %7071 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7036, <4 x i32> zeroinitializer)
  %7072 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7038, <4 x i32> zeroinitializer)
  %7073 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7040, <4 x i32> zeroinitializer)
  %7074 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7042, <4 x i32> zeroinitializer)
  %7075 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7044, <4 x i32> zeroinitializer)
  %7076 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7046, <4 x i32> zeroinitializer)
  %7077 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7048, <4 x i32> zeroinitializer)
  %7078 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7050, <4 x i32> zeroinitializer)
  %7079 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7052, <4 x i32> zeroinitializer)
  %7080 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7054, <4 x i32> zeroinitializer)
  %7081 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7056, <4 x i32> zeroinitializer)
  %7082 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7058, <4 x i32> zeroinitializer)
  %7083 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7060, <4 x i32> zeroinitializer)
  %7084 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7062, <4 x i32> zeroinitializer)
  %7085 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7064, <4 x i32> zeroinitializer)
  %7086 = shufflevector <64 x i32> %7070, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %7087 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7086, <4 x i32> zeroinitializer)
  %7088 = shufflevector <4 x i32> %7071, <4 x i32> %7072, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7089 = shufflevector <4 x i32> %7073, <4 x i32> %7074, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7090 = shufflevector <4 x i32> %7075, <4 x i32> %7076, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7091 = shufflevector <4 x i32> %7077, <4 x i32> %7078, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7092 = shufflevector <4 x i32> %7079, <4 x i32> %7080, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7093 = shufflevector <4 x i32> %7081, <4 x i32> %7082, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7094 = shufflevector <4 x i32> %7083, <4 x i32> %7084, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7095 = shufflevector <4 x i32> %7085, <4 x i32> %7087, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7096 = shufflevector <8 x i32> %7088, <8 x i32> %7089, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7097 = shufflevector <8 x i32> %7090, <8 x i32> %7091, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7098 = shufflevector <8 x i32> %7092, <8 x i32> %7093, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7099 = shufflevector <8 x i32> %7094, <8 x i32> %7095, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7100 = shufflevector <16 x i32> %7096, <16 x i32> %7097, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7101 = shufflevector <16 x i32> %7098, <16 x i32> %7099, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7102 = shufflevector <32 x i32> %7100, <32 x i32> %7101, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %7103 = add nsw i32 %blur_x.s0.x.xi.base.s27, -61
  %7104 = insertelement <64 x i32> undef, i32 %7103, i32 0
  %7105 = shufflevector <64 x i32> %7104, <64 x i32> undef, <64 x i32> zeroinitializer
  %7106 = add nsw <64 x i32> %7105, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %7107 = shufflevector <64 x i32> %7106, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %7108 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7107, <4 x i32> %76)
  %7109 = shufflevector <64 x i32> %7106, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %7110 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7109, <4 x i32> %76)
  %7111 = shufflevector <64 x i32> %7106, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %7112 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7111, <4 x i32> %76)
  %7113 = shufflevector <64 x i32> %7106, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %7114 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7113, <4 x i32> %76)
  %7115 = shufflevector <64 x i32> %7106, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %7116 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7115, <4 x i32> %76)
  %7117 = shufflevector <64 x i32> %7106, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %7118 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7117, <4 x i32> %76)
  %7119 = shufflevector <64 x i32> %7106, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %7120 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7119, <4 x i32> %76)
  %7121 = shufflevector <64 x i32> %7106, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %7122 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7121, <4 x i32> %76)
  %7123 = shufflevector <64 x i32> %7106, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %7124 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7123, <4 x i32> %76)
  %7125 = shufflevector <64 x i32> %7106, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %7126 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7125, <4 x i32> %76)
  %7127 = shufflevector <64 x i32> %7106, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %7128 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7127, <4 x i32> %76)
  %7129 = shufflevector <64 x i32> %7106, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %7130 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7129, <4 x i32> %76)
  %7131 = shufflevector <64 x i32> %7106, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %7132 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7131, <4 x i32> %76)
  %7133 = shufflevector <64 x i32> %7106, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %7134 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7133, <4 x i32> %76)
  %7135 = shufflevector <64 x i32> %7106, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %7136 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7135, <4 x i32> %76)
  %7137 = shufflevector <64 x i32> %7106, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %7138 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7137, <4 x i32> %76)
  %7139 = shufflevector <4 x i32> %7138, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %7140 = shufflevector <8 x i32> %7139, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %7141 = shufflevector <16 x i32> %7140, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %7142 = shufflevector <32 x i32> %7141, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %7143 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7108, <4 x i32> zeroinitializer)
  %7144 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7110, <4 x i32> zeroinitializer)
  %7145 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7112, <4 x i32> zeroinitializer)
  %7146 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7114, <4 x i32> zeroinitializer)
  %7147 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7116, <4 x i32> zeroinitializer)
  %7148 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7118, <4 x i32> zeroinitializer)
  %7149 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7120, <4 x i32> zeroinitializer)
  %7150 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7122, <4 x i32> zeroinitializer)
  %7151 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7124, <4 x i32> zeroinitializer)
  %7152 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7126, <4 x i32> zeroinitializer)
  %7153 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7128, <4 x i32> zeroinitializer)
  %7154 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7130, <4 x i32> zeroinitializer)
  %7155 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7132, <4 x i32> zeroinitializer)
  %7156 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7134, <4 x i32> zeroinitializer)
  %7157 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7136, <4 x i32> zeroinitializer)
  %7158 = shufflevector <64 x i32> %7142, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %7159 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7158, <4 x i32> zeroinitializer)
  %7160 = shufflevector <4 x i32> %7143, <4 x i32> %7144, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7161 = shufflevector <4 x i32> %7145, <4 x i32> %7146, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7162 = shufflevector <4 x i32> %7147, <4 x i32> %7148, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7163 = shufflevector <4 x i32> %7149, <4 x i32> %7150, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7164 = shufflevector <4 x i32> %7151, <4 x i32> %7152, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7165 = shufflevector <4 x i32> %7153, <4 x i32> %7154, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7166 = shufflevector <4 x i32> %7155, <4 x i32> %7156, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7167 = shufflevector <4 x i32> %7157, <4 x i32> %7159, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7168 = shufflevector <8 x i32> %7160, <8 x i32> %7161, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7169 = shufflevector <8 x i32> %7162, <8 x i32> %7163, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7170 = shufflevector <8 x i32> %7164, <8 x i32> %7165, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7171 = shufflevector <8 x i32> %7166, <8 x i32> %7167, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7172 = shufflevector <16 x i32> %7168, <16 x i32> %7169, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7173 = shufflevector <16 x i32> %7170, <16 x i32> %7171, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7174 = shufflevector <32 x i32> %7172, <32 x i32> %7173, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %7175 = add nsw i32 %blur_x.s0.x.xi.base.s27, -60
  %7176 = insertelement <64 x i32> undef, i32 %7175, i32 0
  %7177 = shufflevector <64 x i32> %7176, <64 x i32> undef, <64 x i32> zeroinitializer
  %7178 = add nsw <64 x i32> %7177, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %7179 = shufflevector <64 x i32> %7178, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %7180 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7179, <4 x i32> %76)
  %7181 = shufflevector <64 x i32> %7178, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %7182 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7181, <4 x i32> %76)
  %7183 = shufflevector <64 x i32> %7178, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %7184 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7183, <4 x i32> %76)
  %7185 = shufflevector <64 x i32> %7178, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %7186 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7185, <4 x i32> %76)
  %7187 = shufflevector <64 x i32> %7178, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %7188 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7187, <4 x i32> %76)
  %7189 = shufflevector <64 x i32> %7178, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %7190 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7189, <4 x i32> %76)
  %7191 = shufflevector <64 x i32> %7178, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %7192 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7191, <4 x i32> %76)
  %7193 = shufflevector <64 x i32> %7178, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %7194 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7193, <4 x i32> %76)
  %7195 = shufflevector <64 x i32> %7178, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %7196 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7195, <4 x i32> %76)
  %7197 = shufflevector <64 x i32> %7178, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %7198 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7197, <4 x i32> %76)
  %7199 = shufflevector <64 x i32> %7178, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %7200 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7199, <4 x i32> %76)
  %7201 = shufflevector <64 x i32> %7178, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %7202 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7201, <4 x i32> %76)
  %7203 = shufflevector <64 x i32> %7178, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %7204 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7203, <4 x i32> %76)
  %7205 = shufflevector <64 x i32> %7178, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %7206 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7205, <4 x i32> %76)
  %7207 = shufflevector <64 x i32> %7178, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %7208 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7207, <4 x i32> %76)
  %7209 = shufflevector <64 x i32> %7178, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %7210 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7209, <4 x i32> %76)
  %7211 = shufflevector <4 x i32> %7210, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %7212 = shufflevector <8 x i32> %7211, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %7213 = shufflevector <16 x i32> %7212, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %7214 = shufflevector <32 x i32> %7213, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %7215 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7180, <4 x i32> zeroinitializer)
  %7216 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7182, <4 x i32> zeroinitializer)
  %7217 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7184, <4 x i32> zeroinitializer)
  %7218 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7186, <4 x i32> zeroinitializer)
  %7219 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7188, <4 x i32> zeroinitializer)
  %7220 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7190, <4 x i32> zeroinitializer)
  %7221 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7192, <4 x i32> zeroinitializer)
  %7222 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7194, <4 x i32> zeroinitializer)
  %7223 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7196, <4 x i32> zeroinitializer)
  %7224 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7198, <4 x i32> zeroinitializer)
  %7225 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7200, <4 x i32> zeroinitializer)
  %7226 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7202, <4 x i32> zeroinitializer)
  %7227 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7204, <4 x i32> zeroinitializer)
  %7228 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7206, <4 x i32> zeroinitializer)
  %7229 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7208, <4 x i32> zeroinitializer)
  %7230 = shufflevector <64 x i32> %7214, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %7231 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7230, <4 x i32> zeroinitializer)
  %7232 = shufflevector <4 x i32> %7215, <4 x i32> %7216, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7233 = shufflevector <4 x i32> %7217, <4 x i32> %7218, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7234 = shufflevector <4 x i32> %7219, <4 x i32> %7220, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7235 = shufflevector <4 x i32> %7221, <4 x i32> %7222, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7236 = shufflevector <4 x i32> %7223, <4 x i32> %7224, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7237 = shufflevector <4 x i32> %7225, <4 x i32> %7226, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7238 = shufflevector <4 x i32> %7227, <4 x i32> %7228, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7239 = shufflevector <4 x i32> %7229, <4 x i32> %7231, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7240 = shufflevector <8 x i32> %7232, <8 x i32> %7233, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7241 = shufflevector <8 x i32> %7234, <8 x i32> %7235, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7242 = shufflevector <8 x i32> %7236, <8 x i32> %7237, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7243 = shufflevector <8 x i32> %7238, <8 x i32> %7239, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7244 = shufflevector <16 x i32> %7240, <16 x i32> %7241, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7245 = shufflevector <16 x i32> %7242, <16 x i32> %7243, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7246 = shufflevector <32 x i32> %7244, <32 x i32> %7245, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %7247 = add nsw i32 %blur_x.s0.x.xi.base.s27, -58
  %7248 = insertelement <64 x i32> undef, i32 %7247, i32 0
  %7249 = shufflevector <64 x i32> %7248, <64 x i32> undef, <64 x i32> zeroinitializer
  %7250 = add nsw <64 x i32> %7249, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %7251 = shufflevector <64 x i32> %7250, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %7252 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7251, <4 x i32> %76)
  %7253 = shufflevector <64 x i32> %7250, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %7254 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7253, <4 x i32> %76)
  %7255 = shufflevector <64 x i32> %7250, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %7256 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7255, <4 x i32> %76)
  %7257 = shufflevector <64 x i32> %7250, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %7258 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7257, <4 x i32> %76)
  %7259 = shufflevector <64 x i32> %7250, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %7260 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7259, <4 x i32> %76)
  %7261 = shufflevector <64 x i32> %7250, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %7262 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7261, <4 x i32> %76)
  %7263 = shufflevector <64 x i32> %7250, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %7264 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7263, <4 x i32> %76)
  %7265 = shufflevector <64 x i32> %7250, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %7266 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7265, <4 x i32> %76)
  %7267 = shufflevector <64 x i32> %7250, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %7268 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7267, <4 x i32> %76)
  %7269 = shufflevector <64 x i32> %7250, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %7270 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7269, <4 x i32> %76)
  %7271 = shufflevector <64 x i32> %7250, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %7272 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7271, <4 x i32> %76)
  %7273 = shufflevector <64 x i32> %7250, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %7274 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7273, <4 x i32> %76)
  %7275 = shufflevector <64 x i32> %7250, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %7276 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7275, <4 x i32> %76)
  %7277 = shufflevector <64 x i32> %7250, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %7278 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7277, <4 x i32> %76)
  %7279 = shufflevector <64 x i32> %7250, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %7280 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7279, <4 x i32> %76)
  %7281 = shufflevector <64 x i32> %7250, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %7282 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7281, <4 x i32> %76)
  %7283 = shufflevector <4 x i32> %7282, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %7284 = shufflevector <8 x i32> %7283, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %7285 = shufflevector <16 x i32> %7284, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %7286 = shufflevector <32 x i32> %7285, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %7287 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7252, <4 x i32> zeroinitializer)
  %7288 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7254, <4 x i32> zeroinitializer)
  %7289 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7256, <4 x i32> zeroinitializer)
  %7290 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7258, <4 x i32> zeroinitializer)
  %7291 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7260, <4 x i32> zeroinitializer)
  %7292 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7262, <4 x i32> zeroinitializer)
  %7293 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7264, <4 x i32> zeroinitializer)
  %7294 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7266, <4 x i32> zeroinitializer)
  %7295 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7268, <4 x i32> zeroinitializer)
  %7296 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7270, <4 x i32> zeroinitializer)
  %7297 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7272, <4 x i32> zeroinitializer)
  %7298 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7274, <4 x i32> zeroinitializer)
  %7299 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7276, <4 x i32> zeroinitializer)
  %7300 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7278, <4 x i32> zeroinitializer)
  %7301 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7280, <4 x i32> zeroinitializer)
  %7302 = shufflevector <64 x i32> %7286, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %7303 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7302, <4 x i32> zeroinitializer)
  %7304 = shufflevector <4 x i32> %7287, <4 x i32> %7288, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7305 = shufflevector <4 x i32> %7289, <4 x i32> %7290, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7306 = shufflevector <4 x i32> %7291, <4 x i32> %7292, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7307 = shufflevector <4 x i32> %7293, <4 x i32> %7294, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7308 = shufflevector <4 x i32> %7295, <4 x i32> %7296, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7309 = shufflevector <4 x i32> %7297, <4 x i32> %7298, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7310 = shufflevector <4 x i32> %7299, <4 x i32> %7300, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7311 = shufflevector <4 x i32> %7301, <4 x i32> %7303, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7312 = shufflevector <8 x i32> %7304, <8 x i32> %7305, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7313 = shufflevector <8 x i32> %7306, <8 x i32> %7307, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7314 = shufflevector <8 x i32> %7308, <8 x i32> %7309, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7315 = shufflevector <8 x i32> %7310, <8 x i32> %7311, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7316 = shufflevector <16 x i32> %7312, <16 x i32> %7313, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7317 = shufflevector <16 x i32> %7314, <16 x i32> %7315, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7318 = shufflevector <32 x i32> %7316, <32 x i32> %7317, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %7319 = add nsw i32 %blur_x.s0.x.xi.base.s27, -59
  %7320 = insertelement <64 x i32> undef, i32 %7319, i32 0
  %7321 = shufflevector <64 x i32> %7320, <64 x i32> undef, <64 x i32> zeroinitializer
  %7322 = add nsw <64 x i32> %7321, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %7323 = shufflevector <64 x i32> %7322, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %7324 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7323, <4 x i32> %76)
  %7325 = shufflevector <64 x i32> %7322, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %7326 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7325, <4 x i32> %76)
  %7327 = shufflevector <64 x i32> %7322, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %7328 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7327, <4 x i32> %76)
  %7329 = shufflevector <64 x i32> %7322, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %7330 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7329, <4 x i32> %76)
  %7331 = shufflevector <64 x i32> %7322, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %7332 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7331, <4 x i32> %76)
  %7333 = shufflevector <64 x i32> %7322, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %7334 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7333, <4 x i32> %76)
  %7335 = shufflevector <64 x i32> %7322, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %7336 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7335, <4 x i32> %76)
  %7337 = shufflevector <64 x i32> %7322, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %7338 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7337, <4 x i32> %76)
  %7339 = shufflevector <64 x i32> %7322, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %7340 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7339, <4 x i32> %76)
  %7341 = shufflevector <64 x i32> %7322, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %7342 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7341, <4 x i32> %76)
  %7343 = shufflevector <64 x i32> %7322, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %7344 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7343, <4 x i32> %76)
  %7345 = shufflevector <64 x i32> %7322, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %7346 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7345, <4 x i32> %76)
  %7347 = shufflevector <64 x i32> %7322, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %7348 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7347, <4 x i32> %76)
  %7349 = shufflevector <64 x i32> %7322, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %7350 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7349, <4 x i32> %76)
  %7351 = shufflevector <64 x i32> %7322, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %7352 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7351, <4 x i32> %76)
  %7353 = shufflevector <64 x i32> %7322, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %7354 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %7353, <4 x i32> %76)
  %7355 = shufflevector <4 x i32> %7354, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %7356 = shufflevector <8 x i32> %7355, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %7357 = shufflevector <16 x i32> %7356, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %7358 = shufflevector <32 x i32> %7357, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %7359 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7324, <4 x i32> zeroinitializer)
  %7360 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7326, <4 x i32> zeroinitializer)
  %7361 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7328, <4 x i32> zeroinitializer)
  %7362 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7330, <4 x i32> zeroinitializer)
  %7363 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7332, <4 x i32> zeroinitializer)
  %7364 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7334, <4 x i32> zeroinitializer)
  %7365 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7336, <4 x i32> zeroinitializer)
  %7366 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7338, <4 x i32> zeroinitializer)
  %7367 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7340, <4 x i32> zeroinitializer)
  %7368 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7342, <4 x i32> zeroinitializer)
  %7369 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7344, <4 x i32> zeroinitializer)
  %7370 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7346, <4 x i32> zeroinitializer)
  %7371 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7348, <4 x i32> zeroinitializer)
  %7372 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7350, <4 x i32> zeroinitializer)
  %7373 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7352, <4 x i32> zeroinitializer)
  %7374 = shufflevector <64 x i32> %7358, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %7375 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %7374, <4 x i32> zeroinitializer)
  %7376 = shufflevector <4 x i32> %7359, <4 x i32> %7360, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7377 = shufflevector <4 x i32> %7361, <4 x i32> %7362, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7378 = shufflevector <4 x i32> %7363, <4 x i32> %7364, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7379 = shufflevector <4 x i32> %7365, <4 x i32> %7366, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7380 = shufflevector <4 x i32> %7367, <4 x i32> %7368, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7381 = shufflevector <4 x i32> %7369, <4 x i32> %7370, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7382 = shufflevector <4 x i32> %7371, <4 x i32> %7372, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7383 = shufflevector <4 x i32> %7373, <4 x i32> %7375, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7384 = shufflevector <8 x i32> %7376, <8 x i32> %7377, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7385 = shufflevector <8 x i32> %7378, <8 x i32> %7379, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7386 = shufflevector <8 x i32> %7380, <8 x i32> %7381, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7387 = shufflevector <8 x i32> %7382, <8 x i32> %7383, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7388 = shufflevector <16 x i32> %7384, <16 x i32> %7385, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7389 = shufflevector <16 x i32> %7386, <16 x i32> %7387, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7390 = shufflevector <32 x i32> %7388, <32 x i32> %7389, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %7391 = zext i32 %6886 to i64
  br label %"for blur_x.s0.y.yi28"

"end for blur_x.s0.x.x25":                        ; preds = %"end for blur_x.s0.y.yi29", %"for blur_y.s0.y.yi.$n.rebased20"
  %7392 = icmp ugt i64 %indvars.iv197, 5
  %or.cond = and i1 %80, %7392
  br i1 %or.cond, label %"for blur_y.s0.x.x35.preheader", label %after_bb31, !prof !393

"for blur_y.s0.x.x35.preheader":                  ; preds = %"end for blur_x.s0.x.x25"
  %7393 = add i64 %6883, 11
  %7394 = and i64 %7393, 15
  %7395 = mul nsw i64 %82, %7394
  %7396 = add i64 %6883, 10
  %7397 = and i64 %7396, 15
  %7398 = mul nsw i64 %82, %7397
  %7399 = add i64 %6883, 12
  %7400 = and i64 %7399, 15
  %7401 = mul nsw i64 %82, %7400
  %7402 = add i64 %6883, 13
  %7403 = and i64 %7402, 15
  %7404 = mul nsw i64 %82, %7403
  %7405 = add i64 %6883, 14
  %7406 = and i64 %7405, 15
  %7407 = mul nsw i64 %82, %7406
  %7408 = and i64 %6883, 15
  %7409 = mul nsw i64 %82, %7408
  %7410 = add i64 %6883, 15
  %7411 = and i64 %7410, 15
  %7412 = mul nsw i64 %82, %7411
  %7413 = add nsw i64 %6883, -6
  %7414 = mul nsw i64 %7413, %83
  br label %"for blur_y.s0.x.x35"

"for blur_x.s0.y.yi28":                           ; preds = %"for blur_x.s0.x.x24", %"for blur_x.s0.y.yi28"
  %blur_x.s0.y.yi30 = phi i32 [ 0, %"for blur_x.s0.x.x24" ], [ %9784, %"for blur_x.s0.y.yi28" ]
  %7415 = add nsw i32 %blur_x.s0.y.yi30, %6884
  %a9 = add nsw i32 %7415, 1
  %7416 = icmp slt i32 %a9, %b11
  %a10 = select i1 %7416, i32 %a9, i32 %b11
  %7417 = icmp sgt i32 %a10, 1
  %7418 = select i1 %7417, i32 %a10, i32 1
  %7419 = add nsw i32 %7418, -1
  %7420 = mul nsw i32 %7419, %input.stride.1
  %7421 = insertelement <64 x i32> undef, i32 %7420, i32 0
  %t247 = shufflevector <64 x i32> %7421, <64 x i32> undef, <64 x i32> zeroinitializer
  %7422 = add nsw <64 x i32> %6958, %t247
  %7423 = extractelement <64 x i32> %7422, i32 0
  %7424 = sext i32 %7423 to i64
  %7425 = getelementptr inbounds i16, i16* %77, i64 %7424
  %7426 = load i16, i16* %7425, align 2, !tbaa !386
  %7427 = insertelement <64 x i16> undef, i16 %7426, i32 0
  %7428 = extractelement <64 x i32> %7422, i32 1
  %7429 = sext i32 %7428 to i64
  %7430 = getelementptr inbounds i16, i16* %77, i64 %7429
  %7431 = load i16, i16* %7430, align 2, !tbaa !386
  %7432 = insertelement <64 x i16> %7427, i16 %7431, i32 1
  %7433 = extractelement <64 x i32> %7422, i32 2
  %7434 = sext i32 %7433 to i64
  %7435 = getelementptr inbounds i16, i16* %77, i64 %7434
  %7436 = load i16, i16* %7435, align 2, !tbaa !386
  %7437 = insertelement <64 x i16> %7432, i16 %7436, i32 2
  %7438 = extractelement <64 x i32> %7422, i32 3
  %7439 = sext i32 %7438 to i64
  %7440 = getelementptr inbounds i16, i16* %77, i64 %7439
  %7441 = load i16, i16* %7440, align 2, !tbaa !386
  %7442 = insertelement <64 x i16> %7437, i16 %7441, i32 3
  %7443 = extractelement <64 x i32> %7422, i32 4
  %7444 = sext i32 %7443 to i64
  %7445 = getelementptr inbounds i16, i16* %77, i64 %7444
  %7446 = load i16, i16* %7445, align 2, !tbaa !386
  %7447 = insertelement <64 x i16> %7442, i16 %7446, i32 4
  %7448 = extractelement <64 x i32> %7422, i32 5
  %7449 = sext i32 %7448 to i64
  %7450 = getelementptr inbounds i16, i16* %77, i64 %7449
  %7451 = load i16, i16* %7450, align 2, !tbaa !386
  %7452 = insertelement <64 x i16> %7447, i16 %7451, i32 5
  %7453 = extractelement <64 x i32> %7422, i32 6
  %7454 = sext i32 %7453 to i64
  %7455 = getelementptr inbounds i16, i16* %77, i64 %7454
  %7456 = load i16, i16* %7455, align 2, !tbaa !386
  %7457 = insertelement <64 x i16> %7452, i16 %7456, i32 6
  %7458 = extractelement <64 x i32> %7422, i32 7
  %7459 = sext i32 %7458 to i64
  %7460 = getelementptr inbounds i16, i16* %77, i64 %7459
  %7461 = load i16, i16* %7460, align 2, !tbaa !386
  %7462 = insertelement <64 x i16> %7457, i16 %7461, i32 7
  %7463 = extractelement <64 x i32> %7422, i32 8
  %7464 = sext i32 %7463 to i64
  %7465 = getelementptr inbounds i16, i16* %77, i64 %7464
  %7466 = load i16, i16* %7465, align 2, !tbaa !386
  %7467 = insertelement <64 x i16> %7462, i16 %7466, i32 8
  %7468 = extractelement <64 x i32> %7422, i32 9
  %7469 = sext i32 %7468 to i64
  %7470 = getelementptr inbounds i16, i16* %77, i64 %7469
  %7471 = load i16, i16* %7470, align 2, !tbaa !386
  %7472 = insertelement <64 x i16> %7467, i16 %7471, i32 9
  %7473 = extractelement <64 x i32> %7422, i32 10
  %7474 = sext i32 %7473 to i64
  %7475 = getelementptr inbounds i16, i16* %77, i64 %7474
  %7476 = load i16, i16* %7475, align 2, !tbaa !386
  %7477 = insertelement <64 x i16> %7472, i16 %7476, i32 10
  %7478 = extractelement <64 x i32> %7422, i32 11
  %7479 = sext i32 %7478 to i64
  %7480 = getelementptr inbounds i16, i16* %77, i64 %7479
  %7481 = load i16, i16* %7480, align 2, !tbaa !386
  %7482 = insertelement <64 x i16> %7477, i16 %7481, i32 11
  %7483 = extractelement <64 x i32> %7422, i32 12
  %7484 = sext i32 %7483 to i64
  %7485 = getelementptr inbounds i16, i16* %77, i64 %7484
  %7486 = load i16, i16* %7485, align 2, !tbaa !386
  %7487 = insertelement <64 x i16> %7482, i16 %7486, i32 12
  %7488 = extractelement <64 x i32> %7422, i32 13
  %7489 = sext i32 %7488 to i64
  %7490 = getelementptr inbounds i16, i16* %77, i64 %7489
  %7491 = load i16, i16* %7490, align 2, !tbaa !386
  %7492 = insertelement <64 x i16> %7487, i16 %7491, i32 13
  %7493 = extractelement <64 x i32> %7422, i32 14
  %7494 = sext i32 %7493 to i64
  %7495 = getelementptr inbounds i16, i16* %77, i64 %7494
  %7496 = load i16, i16* %7495, align 2, !tbaa !386
  %7497 = insertelement <64 x i16> %7492, i16 %7496, i32 14
  %7498 = extractelement <64 x i32> %7422, i32 15
  %7499 = sext i32 %7498 to i64
  %7500 = getelementptr inbounds i16, i16* %77, i64 %7499
  %7501 = load i16, i16* %7500, align 2, !tbaa !386
  %7502 = insertelement <64 x i16> %7497, i16 %7501, i32 15
  %7503 = extractelement <64 x i32> %7422, i32 16
  %7504 = sext i32 %7503 to i64
  %7505 = getelementptr inbounds i16, i16* %77, i64 %7504
  %7506 = load i16, i16* %7505, align 2, !tbaa !386
  %7507 = insertelement <64 x i16> %7502, i16 %7506, i32 16
  %7508 = extractelement <64 x i32> %7422, i32 17
  %7509 = sext i32 %7508 to i64
  %7510 = getelementptr inbounds i16, i16* %77, i64 %7509
  %7511 = load i16, i16* %7510, align 2, !tbaa !386
  %7512 = insertelement <64 x i16> %7507, i16 %7511, i32 17
  %7513 = extractelement <64 x i32> %7422, i32 18
  %7514 = sext i32 %7513 to i64
  %7515 = getelementptr inbounds i16, i16* %77, i64 %7514
  %7516 = load i16, i16* %7515, align 2, !tbaa !386
  %7517 = insertelement <64 x i16> %7512, i16 %7516, i32 18
  %7518 = extractelement <64 x i32> %7422, i32 19
  %7519 = sext i32 %7518 to i64
  %7520 = getelementptr inbounds i16, i16* %77, i64 %7519
  %7521 = load i16, i16* %7520, align 2, !tbaa !386
  %7522 = insertelement <64 x i16> %7517, i16 %7521, i32 19
  %7523 = extractelement <64 x i32> %7422, i32 20
  %7524 = sext i32 %7523 to i64
  %7525 = getelementptr inbounds i16, i16* %77, i64 %7524
  %7526 = load i16, i16* %7525, align 2, !tbaa !386
  %7527 = insertelement <64 x i16> %7522, i16 %7526, i32 20
  %7528 = extractelement <64 x i32> %7422, i32 21
  %7529 = sext i32 %7528 to i64
  %7530 = getelementptr inbounds i16, i16* %77, i64 %7529
  %7531 = load i16, i16* %7530, align 2, !tbaa !386
  %7532 = insertelement <64 x i16> %7527, i16 %7531, i32 21
  %7533 = extractelement <64 x i32> %7422, i32 22
  %7534 = sext i32 %7533 to i64
  %7535 = getelementptr inbounds i16, i16* %77, i64 %7534
  %7536 = load i16, i16* %7535, align 2, !tbaa !386
  %7537 = insertelement <64 x i16> %7532, i16 %7536, i32 22
  %7538 = extractelement <64 x i32> %7422, i32 23
  %7539 = sext i32 %7538 to i64
  %7540 = getelementptr inbounds i16, i16* %77, i64 %7539
  %7541 = load i16, i16* %7540, align 2, !tbaa !386
  %7542 = insertelement <64 x i16> %7537, i16 %7541, i32 23
  %7543 = extractelement <64 x i32> %7422, i32 24
  %7544 = sext i32 %7543 to i64
  %7545 = getelementptr inbounds i16, i16* %77, i64 %7544
  %7546 = load i16, i16* %7545, align 2, !tbaa !386
  %7547 = insertelement <64 x i16> %7542, i16 %7546, i32 24
  %7548 = extractelement <64 x i32> %7422, i32 25
  %7549 = sext i32 %7548 to i64
  %7550 = getelementptr inbounds i16, i16* %77, i64 %7549
  %7551 = load i16, i16* %7550, align 2, !tbaa !386
  %7552 = insertelement <64 x i16> %7547, i16 %7551, i32 25
  %7553 = extractelement <64 x i32> %7422, i32 26
  %7554 = sext i32 %7553 to i64
  %7555 = getelementptr inbounds i16, i16* %77, i64 %7554
  %7556 = load i16, i16* %7555, align 2, !tbaa !386
  %7557 = insertelement <64 x i16> %7552, i16 %7556, i32 26
  %7558 = extractelement <64 x i32> %7422, i32 27
  %7559 = sext i32 %7558 to i64
  %7560 = getelementptr inbounds i16, i16* %77, i64 %7559
  %7561 = load i16, i16* %7560, align 2, !tbaa !386
  %7562 = insertelement <64 x i16> %7557, i16 %7561, i32 27
  %7563 = extractelement <64 x i32> %7422, i32 28
  %7564 = sext i32 %7563 to i64
  %7565 = getelementptr inbounds i16, i16* %77, i64 %7564
  %7566 = load i16, i16* %7565, align 2, !tbaa !386
  %7567 = insertelement <64 x i16> %7562, i16 %7566, i32 28
  %7568 = extractelement <64 x i32> %7422, i32 29
  %7569 = sext i32 %7568 to i64
  %7570 = getelementptr inbounds i16, i16* %77, i64 %7569
  %7571 = load i16, i16* %7570, align 2, !tbaa !386
  %7572 = insertelement <64 x i16> %7567, i16 %7571, i32 29
  %7573 = extractelement <64 x i32> %7422, i32 30
  %7574 = sext i32 %7573 to i64
  %7575 = getelementptr inbounds i16, i16* %77, i64 %7574
  %7576 = load i16, i16* %7575, align 2, !tbaa !386
  %7577 = insertelement <64 x i16> %7572, i16 %7576, i32 30
  %7578 = extractelement <64 x i32> %7422, i32 31
  %7579 = sext i32 %7578 to i64
  %7580 = getelementptr inbounds i16, i16* %77, i64 %7579
  %7581 = load i16, i16* %7580, align 2, !tbaa !386
  %7582 = insertelement <64 x i16> %7577, i16 %7581, i32 31
  %7583 = extractelement <64 x i32> %7422, i32 32
  %7584 = sext i32 %7583 to i64
  %7585 = getelementptr inbounds i16, i16* %77, i64 %7584
  %7586 = load i16, i16* %7585, align 2, !tbaa !386
  %7587 = insertelement <64 x i16> %7582, i16 %7586, i32 32
  %7588 = extractelement <64 x i32> %7422, i32 33
  %7589 = sext i32 %7588 to i64
  %7590 = getelementptr inbounds i16, i16* %77, i64 %7589
  %7591 = load i16, i16* %7590, align 2, !tbaa !386
  %7592 = insertelement <64 x i16> %7587, i16 %7591, i32 33
  %7593 = extractelement <64 x i32> %7422, i32 34
  %7594 = sext i32 %7593 to i64
  %7595 = getelementptr inbounds i16, i16* %77, i64 %7594
  %7596 = load i16, i16* %7595, align 2, !tbaa !386
  %7597 = insertelement <64 x i16> %7592, i16 %7596, i32 34
  %7598 = extractelement <64 x i32> %7422, i32 35
  %7599 = sext i32 %7598 to i64
  %7600 = getelementptr inbounds i16, i16* %77, i64 %7599
  %7601 = load i16, i16* %7600, align 2, !tbaa !386
  %7602 = insertelement <64 x i16> %7597, i16 %7601, i32 35
  %7603 = extractelement <64 x i32> %7422, i32 36
  %7604 = sext i32 %7603 to i64
  %7605 = getelementptr inbounds i16, i16* %77, i64 %7604
  %7606 = load i16, i16* %7605, align 2, !tbaa !386
  %7607 = insertelement <64 x i16> %7602, i16 %7606, i32 36
  %7608 = extractelement <64 x i32> %7422, i32 37
  %7609 = sext i32 %7608 to i64
  %7610 = getelementptr inbounds i16, i16* %77, i64 %7609
  %7611 = load i16, i16* %7610, align 2, !tbaa !386
  %7612 = insertelement <64 x i16> %7607, i16 %7611, i32 37
  %7613 = extractelement <64 x i32> %7422, i32 38
  %7614 = sext i32 %7613 to i64
  %7615 = getelementptr inbounds i16, i16* %77, i64 %7614
  %7616 = load i16, i16* %7615, align 2, !tbaa !386
  %7617 = insertelement <64 x i16> %7612, i16 %7616, i32 38
  %7618 = extractelement <64 x i32> %7422, i32 39
  %7619 = sext i32 %7618 to i64
  %7620 = getelementptr inbounds i16, i16* %77, i64 %7619
  %7621 = load i16, i16* %7620, align 2, !tbaa !386
  %7622 = insertelement <64 x i16> %7617, i16 %7621, i32 39
  %7623 = extractelement <64 x i32> %7422, i32 40
  %7624 = sext i32 %7623 to i64
  %7625 = getelementptr inbounds i16, i16* %77, i64 %7624
  %7626 = load i16, i16* %7625, align 2, !tbaa !386
  %7627 = insertelement <64 x i16> %7622, i16 %7626, i32 40
  %7628 = extractelement <64 x i32> %7422, i32 41
  %7629 = sext i32 %7628 to i64
  %7630 = getelementptr inbounds i16, i16* %77, i64 %7629
  %7631 = load i16, i16* %7630, align 2, !tbaa !386
  %7632 = insertelement <64 x i16> %7627, i16 %7631, i32 41
  %7633 = extractelement <64 x i32> %7422, i32 42
  %7634 = sext i32 %7633 to i64
  %7635 = getelementptr inbounds i16, i16* %77, i64 %7634
  %7636 = load i16, i16* %7635, align 2, !tbaa !386
  %7637 = insertelement <64 x i16> %7632, i16 %7636, i32 42
  %7638 = extractelement <64 x i32> %7422, i32 43
  %7639 = sext i32 %7638 to i64
  %7640 = getelementptr inbounds i16, i16* %77, i64 %7639
  %7641 = load i16, i16* %7640, align 2, !tbaa !386
  %7642 = insertelement <64 x i16> %7637, i16 %7641, i32 43
  %7643 = extractelement <64 x i32> %7422, i32 44
  %7644 = sext i32 %7643 to i64
  %7645 = getelementptr inbounds i16, i16* %77, i64 %7644
  %7646 = load i16, i16* %7645, align 2, !tbaa !386
  %7647 = insertelement <64 x i16> %7642, i16 %7646, i32 44
  %7648 = extractelement <64 x i32> %7422, i32 45
  %7649 = sext i32 %7648 to i64
  %7650 = getelementptr inbounds i16, i16* %77, i64 %7649
  %7651 = load i16, i16* %7650, align 2, !tbaa !386
  %7652 = insertelement <64 x i16> %7647, i16 %7651, i32 45
  %7653 = extractelement <64 x i32> %7422, i32 46
  %7654 = sext i32 %7653 to i64
  %7655 = getelementptr inbounds i16, i16* %77, i64 %7654
  %7656 = load i16, i16* %7655, align 2, !tbaa !386
  %7657 = insertelement <64 x i16> %7652, i16 %7656, i32 46
  %7658 = extractelement <64 x i32> %7422, i32 47
  %7659 = sext i32 %7658 to i64
  %7660 = getelementptr inbounds i16, i16* %77, i64 %7659
  %7661 = load i16, i16* %7660, align 2, !tbaa !386
  %7662 = insertelement <64 x i16> %7657, i16 %7661, i32 47
  %7663 = extractelement <64 x i32> %7422, i32 48
  %7664 = sext i32 %7663 to i64
  %7665 = getelementptr inbounds i16, i16* %77, i64 %7664
  %7666 = load i16, i16* %7665, align 2, !tbaa !386
  %7667 = insertelement <64 x i16> %7662, i16 %7666, i32 48
  %7668 = extractelement <64 x i32> %7422, i32 49
  %7669 = sext i32 %7668 to i64
  %7670 = getelementptr inbounds i16, i16* %77, i64 %7669
  %7671 = load i16, i16* %7670, align 2, !tbaa !386
  %7672 = insertelement <64 x i16> %7667, i16 %7671, i32 49
  %7673 = extractelement <64 x i32> %7422, i32 50
  %7674 = sext i32 %7673 to i64
  %7675 = getelementptr inbounds i16, i16* %77, i64 %7674
  %7676 = load i16, i16* %7675, align 2, !tbaa !386
  %7677 = insertelement <64 x i16> %7672, i16 %7676, i32 50
  %7678 = extractelement <64 x i32> %7422, i32 51
  %7679 = sext i32 %7678 to i64
  %7680 = getelementptr inbounds i16, i16* %77, i64 %7679
  %7681 = load i16, i16* %7680, align 2, !tbaa !386
  %7682 = insertelement <64 x i16> %7677, i16 %7681, i32 51
  %7683 = extractelement <64 x i32> %7422, i32 52
  %7684 = sext i32 %7683 to i64
  %7685 = getelementptr inbounds i16, i16* %77, i64 %7684
  %7686 = load i16, i16* %7685, align 2, !tbaa !386
  %7687 = insertelement <64 x i16> %7682, i16 %7686, i32 52
  %7688 = extractelement <64 x i32> %7422, i32 53
  %7689 = sext i32 %7688 to i64
  %7690 = getelementptr inbounds i16, i16* %77, i64 %7689
  %7691 = load i16, i16* %7690, align 2, !tbaa !386
  %7692 = insertelement <64 x i16> %7687, i16 %7691, i32 53
  %7693 = extractelement <64 x i32> %7422, i32 54
  %7694 = sext i32 %7693 to i64
  %7695 = getelementptr inbounds i16, i16* %77, i64 %7694
  %7696 = load i16, i16* %7695, align 2, !tbaa !386
  %7697 = insertelement <64 x i16> %7692, i16 %7696, i32 54
  %7698 = extractelement <64 x i32> %7422, i32 55
  %7699 = sext i32 %7698 to i64
  %7700 = getelementptr inbounds i16, i16* %77, i64 %7699
  %7701 = load i16, i16* %7700, align 2, !tbaa !386
  %7702 = insertelement <64 x i16> %7697, i16 %7701, i32 55
  %7703 = extractelement <64 x i32> %7422, i32 56
  %7704 = sext i32 %7703 to i64
  %7705 = getelementptr inbounds i16, i16* %77, i64 %7704
  %7706 = load i16, i16* %7705, align 2, !tbaa !386
  %7707 = insertelement <64 x i16> %7702, i16 %7706, i32 56
  %7708 = extractelement <64 x i32> %7422, i32 57
  %7709 = sext i32 %7708 to i64
  %7710 = getelementptr inbounds i16, i16* %77, i64 %7709
  %7711 = load i16, i16* %7710, align 2, !tbaa !386
  %7712 = insertelement <64 x i16> %7707, i16 %7711, i32 57
  %7713 = extractelement <64 x i32> %7422, i32 58
  %7714 = sext i32 %7713 to i64
  %7715 = getelementptr inbounds i16, i16* %77, i64 %7714
  %7716 = load i16, i16* %7715, align 2, !tbaa !386
  %7717 = insertelement <64 x i16> %7712, i16 %7716, i32 58
  %7718 = extractelement <64 x i32> %7422, i32 59
  %7719 = sext i32 %7718 to i64
  %7720 = getelementptr inbounds i16, i16* %77, i64 %7719
  %7721 = load i16, i16* %7720, align 2, !tbaa !386
  %7722 = insertelement <64 x i16> %7717, i16 %7721, i32 59
  %7723 = extractelement <64 x i32> %7422, i32 60
  %7724 = sext i32 %7723 to i64
  %7725 = getelementptr inbounds i16, i16* %77, i64 %7724
  %7726 = load i16, i16* %7725, align 2, !tbaa !386
  %7727 = insertelement <64 x i16> %7722, i16 %7726, i32 60
  %7728 = extractelement <64 x i32> %7422, i32 61
  %7729 = sext i32 %7728 to i64
  %7730 = getelementptr inbounds i16, i16* %77, i64 %7729
  %7731 = load i16, i16* %7730, align 2, !tbaa !386
  %7732 = insertelement <64 x i16> %7727, i16 %7731, i32 61
  %7733 = extractelement <64 x i32> %7422, i32 62
  %7734 = sext i32 %7733 to i64
  %7735 = getelementptr inbounds i16, i16* %77, i64 %7734
  %7736 = load i16, i16* %7735, align 2, !tbaa !386
  %7737 = insertelement <64 x i16> %7732, i16 %7736, i32 62
  %7738 = extractelement <64 x i32> %7422, i32 63
  %7739 = sext i32 %7738 to i64
  %7740 = getelementptr inbounds i16, i16* %77, i64 %7739
  %7741 = load i16, i16* %7740, align 2, !tbaa !386
  %7742 = insertelement <64 x i16> %7737, i16 %7741, i32 63
  %7743 = add nsw <64 x i32> %7030, %t247
  %7744 = extractelement <64 x i32> %7743, i32 0
  %7745 = sext i32 %7744 to i64
  %7746 = getelementptr inbounds i16, i16* %77, i64 %7745
  %7747 = load i16, i16* %7746, align 2, !tbaa !386
  %7748 = insertelement <64 x i16> undef, i16 %7747, i32 0
  %7749 = extractelement <64 x i32> %7743, i32 1
  %7750 = sext i32 %7749 to i64
  %7751 = getelementptr inbounds i16, i16* %77, i64 %7750
  %7752 = load i16, i16* %7751, align 2, !tbaa !386
  %7753 = insertelement <64 x i16> %7748, i16 %7752, i32 1
  %7754 = extractelement <64 x i32> %7743, i32 2
  %7755 = sext i32 %7754 to i64
  %7756 = getelementptr inbounds i16, i16* %77, i64 %7755
  %7757 = load i16, i16* %7756, align 2, !tbaa !386
  %7758 = insertelement <64 x i16> %7753, i16 %7757, i32 2
  %7759 = extractelement <64 x i32> %7743, i32 3
  %7760 = sext i32 %7759 to i64
  %7761 = getelementptr inbounds i16, i16* %77, i64 %7760
  %7762 = load i16, i16* %7761, align 2, !tbaa !386
  %7763 = insertelement <64 x i16> %7758, i16 %7762, i32 3
  %7764 = extractelement <64 x i32> %7743, i32 4
  %7765 = sext i32 %7764 to i64
  %7766 = getelementptr inbounds i16, i16* %77, i64 %7765
  %7767 = load i16, i16* %7766, align 2, !tbaa !386
  %7768 = insertelement <64 x i16> %7763, i16 %7767, i32 4
  %7769 = extractelement <64 x i32> %7743, i32 5
  %7770 = sext i32 %7769 to i64
  %7771 = getelementptr inbounds i16, i16* %77, i64 %7770
  %7772 = load i16, i16* %7771, align 2, !tbaa !386
  %7773 = insertelement <64 x i16> %7768, i16 %7772, i32 5
  %7774 = extractelement <64 x i32> %7743, i32 6
  %7775 = sext i32 %7774 to i64
  %7776 = getelementptr inbounds i16, i16* %77, i64 %7775
  %7777 = load i16, i16* %7776, align 2, !tbaa !386
  %7778 = insertelement <64 x i16> %7773, i16 %7777, i32 6
  %7779 = extractelement <64 x i32> %7743, i32 7
  %7780 = sext i32 %7779 to i64
  %7781 = getelementptr inbounds i16, i16* %77, i64 %7780
  %7782 = load i16, i16* %7781, align 2, !tbaa !386
  %7783 = insertelement <64 x i16> %7778, i16 %7782, i32 7
  %7784 = extractelement <64 x i32> %7743, i32 8
  %7785 = sext i32 %7784 to i64
  %7786 = getelementptr inbounds i16, i16* %77, i64 %7785
  %7787 = load i16, i16* %7786, align 2, !tbaa !386
  %7788 = insertelement <64 x i16> %7783, i16 %7787, i32 8
  %7789 = extractelement <64 x i32> %7743, i32 9
  %7790 = sext i32 %7789 to i64
  %7791 = getelementptr inbounds i16, i16* %77, i64 %7790
  %7792 = load i16, i16* %7791, align 2, !tbaa !386
  %7793 = insertelement <64 x i16> %7788, i16 %7792, i32 9
  %7794 = extractelement <64 x i32> %7743, i32 10
  %7795 = sext i32 %7794 to i64
  %7796 = getelementptr inbounds i16, i16* %77, i64 %7795
  %7797 = load i16, i16* %7796, align 2, !tbaa !386
  %7798 = insertelement <64 x i16> %7793, i16 %7797, i32 10
  %7799 = extractelement <64 x i32> %7743, i32 11
  %7800 = sext i32 %7799 to i64
  %7801 = getelementptr inbounds i16, i16* %77, i64 %7800
  %7802 = load i16, i16* %7801, align 2, !tbaa !386
  %7803 = insertelement <64 x i16> %7798, i16 %7802, i32 11
  %7804 = extractelement <64 x i32> %7743, i32 12
  %7805 = sext i32 %7804 to i64
  %7806 = getelementptr inbounds i16, i16* %77, i64 %7805
  %7807 = load i16, i16* %7806, align 2, !tbaa !386
  %7808 = insertelement <64 x i16> %7803, i16 %7807, i32 12
  %7809 = extractelement <64 x i32> %7743, i32 13
  %7810 = sext i32 %7809 to i64
  %7811 = getelementptr inbounds i16, i16* %77, i64 %7810
  %7812 = load i16, i16* %7811, align 2, !tbaa !386
  %7813 = insertelement <64 x i16> %7808, i16 %7812, i32 13
  %7814 = extractelement <64 x i32> %7743, i32 14
  %7815 = sext i32 %7814 to i64
  %7816 = getelementptr inbounds i16, i16* %77, i64 %7815
  %7817 = load i16, i16* %7816, align 2, !tbaa !386
  %7818 = insertelement <64 x i16> %7813, i16 %7817, i32 14
  %7819 = extractelement <64 x i32> %7743, i32 15
  %7820 = sext i32 %7819 to i64
  %7821 = getelementptr inbounds i16, i16* %77, i64 %7820
  %7822 = load i16, i16* %7821, align 2, !tbaa !386
  %7823 = insertelement <64 x i16> %7818, i16 %7822, i32 15
  %7824 = extractelement <64 x i32> %7743, i32 16
  %7825 = sext i32 %7824 to i64
  %7826 = getelementptr inbounds i16, i16* %77, i64 %7825
  %7827 = load i16, i16* %7826, align 2, !tbaa !386
  %7828 = insertelement <64 x i16> %7823, i16 %7827, i32 16
  %7829 = extractelement <64 x i32> %7743, i32 17
  %7830 = sext i32 %7829 to i64
  %7831 = getelementptr inbounds i16, i16* %77, i64 %7830
  %7832 = load i16, i16* %7831, align 2, !tbaa !386
  %7833 = insertelement <64 x i16> %7828, i16 %7832, i32 17
  %7834 = extractelement <64 x i32> %7743, i32 18
  %7835 = sext i32 %7834 to i64
  %7836 = getelementptr inbounds i16, i16* %77, i64 %7835
  %7837 = load i16, i16* %7836, align 2, !tbaa !386
  %7838 = insertelement <64 x i16> %7833, i16 %7837, i32 18
  %7839 = extractelement <64 x i32> %7743, i32 19
  %7840 = sext i32 %7839 to i64
  %7841 = getelementptr inbounds i16, i16* %77, i64 %7840
  %7842 = load i16, i16* %7841, align 2, !tbaa !386
  %7843 = insertelement <64 x i16> %7838, i16 %7842, i32 19
  %7844 = extractelement <64 x i32> %7743, i32 20
  %7845 = sext i32 %7844 to i64
  %7846 = getelementptr inbounds i16, i16* %77, i64 %7845
  %7847 = load i16, i16* %7846, align 2, !tbaa !386
  %7848 = insertelement <64 x i16> %7843, i16 %7847, i32 20
  %7849 = extractelement <64 x i32> %7743, i32 21
  %7850 = sext i32 %7849 to i64
  %7851 = getelementptr inbounds i16, i16* %77, i64 %7850
  %7852 = load i16, i16* %7851, align 2, !tbaa !386
  %7853 = insertelement <64 x i16> %7848, i16 %7852, i32 21
  %7854 = extractelement <64 x i32> %7743, i32 22
  %7855 = sext i32 %7854 to i64
  %7856 = getelementptr inbounds i16, i16* %77, i64 %7855
  %7857 = load i16, i16* %7856, align 2, !tbaa !386
  %7858 = insertelement <64 x i16> %7853, i16 %7857, i32 22
  %7859 = extractelement <64 x i32> %7743, i32 23
  %7860 = sext i32 %7859 to i64
  %7861 = getelementptr inbounds i16, i16* %77, i64 %7860
  %7862 = load i16, i16* %7861, align 2, !tbaa !386
  %7863 = insertelement <64 x i16> %7858, i16 %7862, i32 23
  %7864 = extractelement <64 x i32> %7743, i32 24
  %7865 = sext i32 %7864 to i64
  %7866 = getelementptr inbounds i16, i16* %77, i64 %7865
  %7867 = load i16, i16* %7866, align 2, !tbaa !386
  %7868 = insertelement <64 x i16> %7863, i16 %7867, i32 24
  %7869 = extractelement <64 x i32> %7743, i32 25
  %7870 = sext i32 %7869 to i64
  %7871 = getelementptr inbounds i16, i16* %77, i64 %7870
  %7872 = load i16, i16* %7871, align 2, !tbaa !386
  %7873 = insertelement <64 x i16> %7868, i16 %7872, i32 25
  %7874 = extractelement <64 x i32> %7743, i32 26
  %7875 = sext i32 %7874 to i64
  %7876 = getelementptr inbounds i16, i16* %77, i64 %7875
  %7877 = load i16, i16* %7876, align 2, !tbaa !386
  %7878 = insertelement <64 x i16> %7873, i16 %7877, i32 26
  %7879 = extractelement <64 x i32> %7743, i32 27
  %7880 = sext i32 %7879 to i64
  %7881 = getelementptr inbounds i16, i16* %77, i64 %7880
  %7882 = load i16, i16* %7881, align 2, !tbaa !386
  %7883 = insertelement <64 x i16> %7878, i16 %7882, i32 27
  %7884 = extractelement <64 x i32> %7743, i32 28
  %7885 = sext i32 %7884 to i64
  %7886 = getelementptr inbounds i16, i16* %77, i64 %7885
  %7887 = load i16, i16* %7886, align 2, !tbaa !386
  %7888 = insertelement <64 x i16> %7883, i16 %7887, i32 28
  %7889 = extractelement <64 x i32> %7743, i32 29
  %7890 = sext i32 %7889 to i64
  %7891 = getelementptr inbounds i16, i16* %77, i64 %7890
  %7892 = load i16, i16* %7891, align 2, !tbaa !386
  %7893 = insertelement <64 x i16> %7888, i16 %7892, i32 29
  %7894 = extractelement <64 x i32> %7743, i32 30
  %7895 = sext i32 %7894 to i64
  %7896 = getelementptr inbounds i16, i16* %77, i64 %7895
  %7897 = load i16, i16* %7896, align 2, !tbaa !386
  %7898 = insertelement <64 x i16> %7893, i16 %7897, i32 30
  %7899 = extractelement <64 x i32> %7743, i32 31
  %7900 = sext i32 %7899 to i64
  %7901 = getelementptr inbounds i16, i16* %77, i64 %7900
  %7902 = load i16, i16* %7901, align 2, !tbaa !386
  %7903 = insertelement <64 x i16> %7898, i16 %7902, i32 31
  %7904 = extractelement <64 x i32> %7743, i32 32
  %7905 = sext i32 %7904 to i64
  %7906 = getelementptr inbounds i16, i16* %77, i64 %7905
  %7907 = load i16, i16* %7906, align 2, !tbaa !386
  %7908 = insertelement <64 x i16> %7903, i16 %7907, i32 32
  %7909 = extractelement <64 x i32> %7743, i32 33
  %7910 = sext i32 %7909 to i64
  %7911 = getelementptr inbounds i16, i16* %77, i64 %7910
  %7912 = load i16, i16* %7911, align 2, !tbaa !386
  %7913 = insertelement <64 x i16> %7908, i16 %7912, i32 33
  %7914 = extractelement <64 x i32> %7743, i32 34
  %7915 = sext i32 %7914 to i64
  %7916 = getelementptr inbounds i16, i16* %77, i64 %7915
  %7917 = load i16, i16* %7916, align 2, !tbaa !386
  %7918 = insertelement <64 x i16> %7913, i16 %7917, i32 34
  %7919 = extractelement <64 x i32> %7743, i32 35
  %7920 = sext i32 %7919 to i64
  %7921 = getelementptr inbounds i16, i16* %77, i64 %7920
  %7922 = load i16, i16* %7921, align 2, !tbaa !386
  %7923 = insertelement <64 x i16> %7918, i16 %7922, i32 35
  %7924 = extractelement <64 x i32> %7743, i32 36
  %7925 = sext i32 %7924 to i64
  %7926 = getelementptr inbounds i16, i16* %77, i64 %7925
  %7927 = load i16, i16* %7926, align 2, !tbaa !386
  %7928 = insertelement <64 x i16> %7923, i16 %7927, i32 36
  %7929 = extractelement <64 x i32> %7743, i32 37
  %7930 = sext i32 %7929 to i64
  %7931 = getelementptr inbounds i16, i16* %77, i64 %7930
  %7932 = load i16, i16* %7931, align 2, !tbaa !386
  %7933 = insertelement <64 x i16> %7928, i16 %7932, i32 37
  %7934 = extractelement <64 x i32> %7743, i32 38
  %7935 = sext i32 %7934 to i64
  %7936 = getelementptr inbounds i16, i16* %77, i64 %7935
  %7937 = load i16, i16* %7936, align 2, !tbaa !386
  %7938 = insertelement <64 x i16> %7933, i16 %7937, i32 38
  %7939 = extractelement <64 x i32> %7743, i32 39
  %7940 = sext i32 %7939 to i64
  %7941 = getelementptr inbounds i16, i16* %77, i64 %7940
  %7942 = load i16, i16* %7941, align 2, !tbaa !386
  %7943 = insertelement <64 x i16> %7938, i16 %7942, i32 39
  %7944 = extractelement <64 x i32> %7743, i32 40
  %7945 = sext i32 %7944 to i64
  %7946 = getelementptr inbounds i16, i16* %77, i64 %7945
  %7947 = load i16, i16* %7946, align 2, !tbaa !386
  %7948 = insertelement <64 x i16> %7943, i16 %7947, i32 40
  %7949 = extractelement <64 x i32> %7743, i32 41
  %7950 = sext i32 %7949 to i64
  %7951 = getelementptr inbounds i16, i16* %77, i64 %7950
  %7952 = load i16, i16* %7951, align 2, !tbaa !386
  %7953 = insertelement <64 x i16> %7948, i16 %7952, i32 41
  %7954 = extractelement <64 x i32> %7743, i32 42
  %7955 = sext i32 %7954 to i64
  %7956 = getelementptr inbounds i16, i16* %77, i64 %7955
  %7957 = load i16, i16* %7956, align 2, !tbaa !386
  %7958 = insertelement <64 x i16> %7953, i16 %7957, i32 42
  %7959 = extractelement <64 x i32> %7743, i32 43
  %7960 = sext i32 %7959 to i64
  %7961 = getelementptr inbounds i16, i16* %77, i64 %7960
  %7962 = load i16, i16* %7961, align 2, !tbaa !386
  %7963 = insertelement <64 x i16> %7958, i16 %7962, i32 43
  %7964 = extractelement <64 x i32> %7743, i32 44
  %7965 = sext i32 %7964 to i64
  %7966 = getelementptr inbounds i16, i16* %77, i64 %7965
  %7967 = load i16, i16* %7966, align 2, !tbaa !386
  %7968 = insertelement <64 x i16> %7963, i16 %7967, i32 44
  %7969 = extractelement <64 x i32> %7743, i32 45
  %7970 = sext i32 %7969 to i64
  %7971 = getelementptr inbounds i16, i16* %77, i64 %7970
  %7972 = load i16, i16* %7971, align 2, !tbaa !386
  %7973 = insertelement <64 x i16> %7968, i16 %7972, i32 45
  %7974 = extractelement <64 x i32> %7743, i32 46
  %7975 = sext i32 %7974 to i64
  %7976 = getelementptr inbounds i16, i16* %77, i64 %7975
  %7977 = load i16, i16* %7976, align 2, !tbaa !386
  %7978 = insertelement <64 x i16> %7973, i16 %7977, i32 46
  %7979 = extractelement <64 x i32> %7743, i32 47
  %7980 = sext i32 %7979 to i64
  %7981 = getelementptr inbounds i16, i16* %77, i64 %7980
  %7982 = load i16, i16* %7981, align 2, !tbaa !386
  %7983 = insertelement <64 x i16> %7978, i16 %7982, i32 47
  %7984 = extractelement <64 x i32> %7743, i32 48
  %7985 = sext i32 %7984 to i64
  %7986 = getelementptr inbounds i16, i16* %77, i64 %7985
  %7987 = load i16, i16* %7986, align 2, !tbaa !386
  %7988 = insertelement <64 x i16> %7983, i16 %7987, i32 48
  %7989 = extractelement <64 x i32> %7743, i32 49
  %7990 = sext i32 %7989 to i64
  %7991 = getelementptr inbounds i16, i16* %77, i64 %7990
  %7992 = load i16, i16* %7991, align 2, !tbaa !386
  %7993 = insertelement <64 x i16> %7988, i16 %7992, i32 49
  %7994 = extractelement <64 x i32> %7743, i32 50
  %7995 = sext i32 %7994 to i64
  %7996 = getelementptr inbounds i16, i16* %77, i64 %7995
  %7997 = load i16, i16* %7996, align 2, !tbaa !386
  %7998 = insertelement <64 x i16> %7993, i16 %7997, i32 50
  %7999 = extractelement <64 x i32> %7743, i32 51
  %8000 = sext i32 %7999 to i64
  %8001 = getelementptr inbounds i16, i16* %77, i64 %8000
  %8002 = load i16, i16* %8001, align 2, !tbaa !386
  %8003 = insertelement <64 x i16> %7998, i16 %8002, i32 51
  %8004 = extractelement <64 x i32> %7743, i32 52
  %8005 = sext i32 %8004 to i64
  %8006 = getelementptr inbounds i16, i16* %77, i64 %8005
  %8007 = load i16, i16* %8006, align 2, !tbaa !386
  %8008 = insertelement <64 x i16> %8003, i16 %8007, i32 52
  %8009 = extractelement <64 x i32> %7743, i32 53
  %8010 = sext i32 %8009 to i64
  %8011 = getelementptr inbounds i16, i16* %77, i64 %8010
  %8012 = load i16, i16* %8011, align 2, !tbaa !386
  %8013 = insertelement <64 x i16> %8008, i16 %8012, i32 53
  %8014 = extractelement <64 x i32> %7743, i32 54
  %8015 = sext i32 %8014 to i64
  %8016 = getelementptr inbounds i16, i16* %77, i64 %8015
  %8017 = load i16, i16* %8016, align 2, !tbaa !386
  %8018 = insertelement <64 x i16> %8013, i16 %8017, i32 54
  %8019 = extractelement <64 x i32> %7743, i32 55
  %8020 = sext i32 %8019 to i64
  %8021 = getelementptr inbounds i16, i16* %77, i64 %8020
  %8022 = load i16, i16* %8021, align 2, !tbaa !386
  %8023 = insertelement <64 x i16> %8018, i16 %8022, i32 55
  %8024 = extractelement <64 x i32> %7743, i32 56
  %8025 = sext i32 %8024 to i64
  %8026 = getelementptr inbounds i16, i16* %77, i64 %8025
  %8027 = load i16, i16* %8026, align 2, !tbaa !386
  %8028 = insertelement <64 x i16> %8023, i16 %8027, i32 56
  %8029 = extractelement <64 x i32> %7743, i32 57
  %8030 = sext i32 %8029 to i64
  %8031 = getelementptr inbounds i16, i16* %77, i64 %8030
  %8032 = load i16, i16* %8031, align 2, !tbaa !386
  %8033 = insertelement <64 x i16> %8028, i16 %8032, i32 57
  %8034 = extractelement <64 x i32> %7743, i32 58
  %8035 = sext i32 %8034 to i64
  %8036 = getelementptr inbounds i16, i16* %77, i64 %8035
  %8037 = load i16, i16* %8036, align 2, !tbaa !386
  %8038 = insertelement <64 x i16> %8033, i16 %8037, i32 58
  %8039 = extractelement <64 x i32> %7743, i32 59
  %8040 = sext i32 %8039 to i64
  %8041 = getelementptr inbounds i16, i16* %77, i64 %8040
  %8042 = load i16, i16* %8041, align 2, !tbaa !386
  %8043 = insertelement <64 x i16> %8038, i16 %8042, i32 59
  %8044 = extractelement <64 x i32> %7743, i32 60
  %8045 = sext i32 %8044 to i64
  %8046 = getelementptr inbounds i16, i16* %77, i64 %8045
  %8047 = load i16, i16* %8046, align 2, !tbaa !386
  %8048 = insertelement <64 x i16> %8043, i16 %8047, i32 60
  %8049 = extractelement <64 x i32> %7743, i32 61
  %8050 = sext i32 %8049 to i64
  %8051 = getelementptr inbounds i16, i16* %77, i64 %8050
  %8052 = load i16, i16* %8051, align 2, !tbaa !386
  %8053 = insertelement <64 x i16> %8048, i16 %8052, i32 61
  %8054 = extractelement <64 x i32> %7743, i32 62
  %8055 = sext i32 %8054 to i64
  %8056 = getelementptr inbounds i16, i16* %77, i64 %8055
  %8057 = load i16, i16* %8056, align 2, !tbaa !386
  %8058 = insertelement <64 x i16> %8053, i16 %8057, i32 62
  %8059 = extractelement <64 x i32> %7743, i32 63
  %8060 = sext i32 %8059 to i64
  %8061 = getelementptr inbounds i16, i16* %77, i64 %8060
  %8062 = load i16, i16* %8061, align 2, !tbaa !386
  %8063 = insertelement <64 x i16> %8058, i16 %8062, i32 63
  %8064 = add nsw <64 x i32> %7102, %t247
  %8065 = extractelement <64 x i32> %8064, i32 0
  %8066 = sext i32 %8065 to i64
  %8067 = getelementptr inbounds i16, i16* %77, i64 %8066
  %8068 = load i16, i16* %8067, align 2, !tbaa !386
  %8069 = insertelement <64 x i16> undef, i16 %8068, i32 0
  %8070 = extractelement <64 x i32> %8064, i32 1
  %8071 = sext i32 %8070 to i64
  %8072 = getelementptr inbounds i16, i16* %77, i64 %8071
  %8073 = load i16, i16* %8072, align 2, !tbaa !386
  %8074 = insertelement <64 x i16> %8069, i16 %8073, i32 1
  %8075 = extractelement <64 x i32> %8064, i32 2
  %8076 = sext i32 %8075 to i64
  %8077 = getelementptr inbounds i16, i16* %77, i64 %8076
  %8078 = load i16, i16* %8077, align 2, !tbaa !386
  %8079 = insertelement <64 x i16> %8074, i16 %8078, i32 2
  %8080 = extractelement <64 x i32> %8064, i32 3
  %8081 = sext i32 %8080 to i64
  %8082 = getelementptr inbounds i16, i16* %77, i64 %8081
  %8083 = load i16, i16* %8082, align 2, !tbaa !386
  %8084 = insertelement <64 x i16> %8079, i16 %8083, i32 3
  %8085 = extractelement <64 x i32> %8064, i32 4
  %8086 = sext i32 %8085 to i64
  %8087 = getelementptr inbounds i16, i16* %77, i64 %8086
  %8088 = load i16, i16* %8087, align 2, !tbaa !386
  %8089 = insertelement <64 x i16> %8084, i16 %8088, i32 4
  %8090 = extractelement <64 x i32> %8064, i32 5
  %8091 = sext i32 %8090 to i64
  %8092 = getelementptr inbounds i16, i16* %77, i64 %8091
  %8093 = load i16, i16* %8092, align 2, !tbaa !386
  %8094 = insertelement <64 x i16> %8089, i16 %8093, i32 5
  %8095 = extractelement <64 x i32> %8064, i32 6
  %8096 = sext i32 %8095 to i64
  %8097 = getelementptr inbounds i16, i16* %77, i64 %8096
  %8098 = load i16, i16* %8097, align 2, !tbaa !386
  %8099 = insertelement <64 x i16> %8094, i16 %8098, i32 6
  %8100 = extractelement <64 x i32> %8064, i32 7
  %8101 = sext i32 %8100 to i64
  %8102 = getelementptr inbounds i16, i16* %77, i64 %8101
  %8103 = load i16, i16* %8102, align 2, !tbaa !386
  %8104 = insertelement <64 x i16> %8099, i16 %8103, i32 7
  %8105 = extractelement <64 x i32> %8064, i32 8
  %8106 = sext i32 %8105 to i64
  %8107 = getelementptr inbounds i16, i16* %77, i64 %8106
  %8108 = load i16, i16* %8107, align 2, !tbaa !386
  %8109 = insertelement <64 x i16> %8104, i16 %8108, i32 8
  %8110 = extractelement <64 x i32> %8064, i32 9
  %8111 = sext i32 %8110 to i64
  %8112 = getelementptr inbounds i16, i16* %77, i64 %8111
  %8113 = load i16, i16* %8112, align 2, !tbaa !386
  %8114 = insertelement <64 x i16> %8109, i16 %8113, i32 9
  %8115 = extractelement <64 x i32> %8064, i32 10
  %8116 = sext i32 %8115 to i64
  %8117 = getelementptr inbounds i16, i16* %77, i64 %8116
  %8118 = load i16, i16* %8117, align 2, !tbaa !386
  %8119 = insertelement <64 x i16> %8114, i16 %8118, i32 10
  %8120 = extractelement <64 x i32> %8064, i32 11
  %8121 = sext i32 %8120 to i64
  %8122 = getelementptr inbounds i16, i16* %77, i64 %8121
  %8123 = load i16, i16* %8122, align 2, !tbaa !386
  %8124 = insertelement <64 x i16> %8119, i16 %8123, i32 11
  %8125 = extractelement <64 x i32> %8064, i32 12
  %8126 = sext i32 %8125 to i64
  %8127 = getelementptr inbounds i16, i16* %77, i64 %8126
  %8128 = load i16, i16* %8127, align 2, !tbaa !386
  %8129 = insertelement <64 x i16> %8124, i16 %8128, i32 12
  %8130 = extractelement <64 x i32> %8064, i32 13
  %8131 = sext i32 %8130 to i64
  %8132 = getelementptr inbounds i16, i16* %77, i64 %8131
  %8133 = load i16, i16* %8132, align 2, !tbaa !386
  %8134 = insertelement <64 x i16> %8129, i16 %8133, i32 13
  %8135 = extractelement <64 x i32> %8064, i32 14
  %8136 = sext i32 %8135 to i64
  %8137 = getelementptr inbounds i16, i16* %77, i64 %8136
  %8138 = load i16, i16* %8137, align 2, !tbaa !386
  %8139 = insertelement <64 x i16> %8134, i16 %8138, i32 14
  %8140 = extractelement <64 x i32> %8064, i32 15
  %8141 = sext i32 %8140 to i64
  %8142 = getelementptr inbounds i16, i16* %77, i64 %8141
  %8143 = load i16, i16* %8142, align 2, !tbaa !386
  %8144 = insertelement <64 x i16> %8139, i16 %8143, i32 15
  %8145 = extractelement <64 x i32> %8064, i32 16
  %8146 = sext i32 %8145 to i64
  %8147 = getelementptr inbounds i16, i16* %77, i64 %8146
  %8148 = load i16, i16* %8147, align 2, !tbaa !386
  %8149 = insertelement <64 x i16> %8144, i16 %8148, i32 16
  %8150 = extractelement <64 x i32> %8064, i32 17
  %8151 = sext i32 %8150 to i64
  %8152 = getelementptr inbounds i16, i16* %77, i64 %8151
  %8153 = load i16, i16* %8152, align 2, !tbaa !386
  %8154 = insertelement <64 x i16> %8149, i16 %8153, i32 17
  %8155 = extractelement <64 x i32> %8064, i32 18
  %8156 = sext i32 %8155 to i64
  %8157 = getelementptr inbounds i16, i16* %77, i64 %8156
  %8158 = load i16, i16* %8157, align 2, !tbaa !386
  %8159 = insertelement <64 x i16> %8154, i16 %8158, i32 18
  %8160 = extractelement <64 x i32> %8064, i32 19
  %8161 = sext i32 %8160 to i64
  %8162 = getelementptr inbounds i16, i16* %77, i64 %8161
  %8163 = load i16, i16* %8162, align 2, !tbaa !386
  %8164 = insertelement <64 x i16> %8159, i16 %8163, i32 19
  %8165 = extractelement <64 x i32> %8064, i32 20
  %8166 = sext i32 %8165 to i64
  %8167 = getelementptr inbounds i16, i16* %77, i64 %8166
  %8168 = load i16, i16* %8167, align 2, !tbaa !386
  %8169 = insertelement <64 x i16> %8164, i16 %8168, i32 20
  %8170 = extractelement <64 x i32> %8064, i32 21
  %8171 = sext i32 %8170 to i64
  %8172 = getelementptr inbounds i16, i16* %77, i64 %8171
  %8173 = load i16, i16* %8172, align 2, !tbaa !386
  %8174 = insertelement <64 x i16> %8169, i16 %8173, i32 21
  %8175 = extractelement <64 x i32> %8064, i32 22
  %8176 = sext i32 %8175 to i64
  %8177 = getelementptr inbounds i16, i16* %77, i64 %8176
  %8178 = load i16, i16* %8177, align 2, !tbaa !386
  %8179 = insertelement <64 x i16> %8174, i16 %8178, i32 22
  %8180 = extractelement <64 x i32> %8064, i32 23
  %8181 = sext i32 %8180 to i64
  %8182 = getelementptr inbounds i16, i16* %77, i64 %8181
  %8183 = load i16, i16* %8182, align 2, !tbaa !386
  %8184 = insertelement <64 x i16> %8179, i16 %8183, i32 23
  %8185 = extractelement <64 x i32> %8064, i32 24
  %8186 = sext i32 %8185 to i64
  %8187 = getelementptr inbounds i16, i16* %77, i64 %8186
  %8188 = load i16, i16* %8187, align 2, !tbaa !386
  %8189 = insertelement <64 x i16> %8184, i16 %8188, i32 24
  %8190 = extractelement <64 x i32> %8064, i32 25
  %8191 = sext i32 %8190 to i64
  %8192 = getelementptr inbounds i16, i16* %77, i64 %8191
  %8193 = load i16, i16* %8192, align 2, !tbaa !386
  %8194 = insertelement <64 x i16> %8189, i16 %8193, i32 25
  %8195 = extractelement <64 x i32> %8064, i32 26
  %8196 = sext i32 %8195 to i64
  %8197 = getelementptr inbounds i16, i16* %77, i64 %8196
  %8198 = load i16, i16* %8197, align 2, !tbaa !386
  %8199 = insertelement <64 x i16> %8194, i16 %8198, i32 26
  %8200 = extractelement <64 x i32> %8064, i32 27
  %8201 = sext i32 %8200 to i64
  %8202 = getelementptr inbounds i16, i16* %77, i64 %8201
  %8203 = load i16, i16* %8202, align 2, !tbaa !386
  %8204 = insertelement <64 x i16> %8199, i16 %8203, i32 27
  %8205 = extractelement <64 x i32> %8064, i32 28
  %8206 = sext i32 %8205 to i64
  %8207 = getelementptr inbounds i16, i16* %77, i64 %8206
  %8208 = load i16, i16* %8207, align 2, !tbaa !386
  %8209 = insertelement <64 x i16> %8204, i16 %8208, i32 28
  %8210 = extractelement <64 x i32> %8064, i32 29
  %8211 = sext i32 %8210 to i64
  %8212 = getelementptr inbounds i16, i16* %77, i64 %8211
  %8213 = load i16, i16* %8212, align 2, !tbaa !386
  %8214 = insertelement <64 x i16> %8209, i16 %8213, i32 29
  %8215 = extractelement <64 x i32> %8064, i32 30
  %8216 = sext i32 %8215 to i64
  %8217 = getelementptr inbounds i16, i16* %77, i64 %8216
  %8218 = load i16, i16* %8217, align 2, !tbaa !386
  %8219 = insertelement <64 x i16> %8214, i16 %8218, i32 30
  %8220 = extractelement <64 x i32> %8064, i32 31
  %8221 = sext i32 %8220 to i64
  %8222 = getelementptr inbounds i16, i16* %77, i64 %8221
  %8223 = load i16, i16* %8222, align 2, !tbaa !386
  %8224 = insertelement <64 x i16> %8219, i16 %8223, i32 31
  %8225 = extractelement <64 x i32> %8064, i32 32
  %8226 = sext i32 %8225 to i64
  %8227 = getelementptr inbounds i16, i16* %77, i64 %8226
  %8228 = load i16, i16* %8227, align 2, !tbaa !386
  %8229 = insertelement <64 x i16> %8224, i16 %8228, i32 32
  %8230 = extractelement <64 x i32> %8064, i32 33
  %8231 = sext i32 %8230 to i64
  %8232 = getelementptr inbounds i16, i16* %77, i64 %8231
  %8233 = load i16, i16* %8232, align 2, !tbaa !386
  %8234 = insertelement <64 x i16> %8229, i16 %8233, i32 33
  %8235 = extractelement <64 x i32> %8064, i32 34
  %8236 = sext i32 %8235 to i64
  %8237 = getelementptr inbounds i16, i16* %77, i64 %8236
  %8238 = load i16, i16* %8237, align 2, !tbaa !386
  %8239 = insertelement <64 x i16> %8234, i16 %8238, i32 34
  %8240 = extractelement <64 x i32> %8064, i32 35
  %8241 = sext i32 %8240 to i64
  %8242 = getelementptr inbounds i16, i16* %77, i64 %8241
  %8243 = load i16, i16* %8242, align 2, !tbaa !386
  %8244 = insertelement <64 x i16> %8239, i16 %8243, i32 35
  %8245 = extractelement <64 x i32> %8064, i32 36
  %8246 = sext i32 %8245 to i64
  %8247 = getelementptr inbounds i16, i16* %77, i64 %8246
  %8248 = load i16, i16* %8247, align 2, !tbaa !386
  %8249 = insertelement <64 x i16> %8244, i16 %8248, i32 36
  %8250 = extractelement <64 x i32> %8064, i32 37
  %8251 = sext i32 %8250 to i64
  %8252 = getelementptr inbounds i16, i16* %77, i64 %8251
  %8253 = load i16, i16* %8252, align 2, !tbaa !386
  %8254 = insertelement <64 x i16> %8249, i16 %8253, i32 37
  %8255 = extractelement <64 x i32> %8064, i32 38
  %8256 = sext i32 %8255 to i64
  %8257 = getelementptr inbounds i16, i16* %77, i64 %8256
  %8258 = load i16, i16* %8257, align 2, !tbaa !386
  %8259 = insertelement <64 x i16> %8254, i16 %8258, i32 38
  %8260 = extractelement <64 x i32> %8064, i32 39
  %8261 = sext i32 %8260 to i64
  %8262 = getelementptr inbounds i16, i16* %77, i64 %8261
  %8263 = load i16, i16* %8262, align 2, !tbaa !386
  %8264 = insertelement <64 x i16> %8259, i16 %8263, i32 39
  %8265 = extractelement <64 x i32> %8064, i32 40
  %8266 = sext i32 %8265 to i64
  %8267 = getelementptr inbounds i16, i16* %77, i64 %8266
  %8268 = load i16, i16* %8267, align 2, !tbaa !386
  %8269 = insertelement <64 x i16> %8264, i16 %8268, i32 40
  %8270 = extractelement <64 x i32> %8064, i32 41
  %8271 = sext i32 %8270 to i64
  %8272 = getelementptr inbounds i16, i16* %77, i64 %8271
  %8273 = load i16, i16* %8272, align 2, !tbaa !386
  %8274 = insertelement <64 x i16> %8269, i16 %8273, i32 41
  %8275 = extractelement <64 x i32> %8064, i32 42
  %8276 = sext i32 %8275 to i64
  %8277 = getelementptr inbounds i16, i16* %77, i64 %8276
  %8278 = load i16, i16* %8277, align 2, !tbaa !386
  %8279 = insertelement <64 x i16> %8274, i16 %8278, i32 42
  %8280 = extractelement <64 x i32> %8064, i32 43
  %8281 = sext i32 %8280 to i64
  %8282 = getelementptr inbounds i16, i16* %77, i64 %8281
  %8283 = load i16, i16* %8282, align 2, !tbaa !386
  %8284 = insertelement <64 x i16> %8279, i16 %8283, i32 43
  %8285 = extractelement <64 x i32> %8064, i32 44
  %8286 = sext i32 %8285 to i64
  %8287 = getelementptr inbounds i16, i16* %77, i64 %8286
  %8288 = load i16, i16* %8287, align 2, !tbaa !386
  %8289 = insertelement <64 x i16> %8284, i16 %8288, i32 44
  %8290 = extractelement <64 x i32> %8064, i32 45
  %8291 = sext i32 %8290 to i64
  %8292 = getelementptr inbounds i16, i16* %77, i64 %8291
  %8293 = load i16, i16* %8292, align 2, !tbaa !386
  %8294 = insertelement <64 x i16> %8289, i16 %8293, i32 45
  %8295 = extractelement <64 x i32> %8064, i32 46
  %8296 = sext i32 %8295 to i64
  %8297 = getelementptr inbounds i16, i16* %77, i64 %8296
  %8298 = load i16, i16* %8297, align 2, !tbaa !386
  %8299 = insertelement <64 x i16> %8294, i16 %8298, i32 46
  %8300 = extractelement <64 x i32> %8064, i32 47
  %8301 = sext i32 %8300 to i64
  %8302 = getelementptr inbounds i16, i16* %77, i64 %8301
  %8303 = load i16, i16* %8302, align 2, !tbaa !386
  %8304 = insertelement <64 x i16> %8299, i16 %8303, i32 47
  %8305 = extractelement <64 x i32> %8064, i32 48
  %8306 = sext i32 %8305 to i64
  %8307 = getelementptr inbounds i16, i16* %77, i64 %8306
  %8308 = load i16, i16* %8307, align 2, !tbaa !386
  %8309 = insertelement <64 x i16> %8304, i16 %8308, i32 48
  %8310 = extractelement <64 x i32> %8064, i32 49
  %8311 = sext i32 %8310 to i64
  %8312 = getelementptr inbounds i16, i16* %77, i64 %8311
  %8313 = load i16, i16* %8312, align 2, !tbaa !386
  %8314 = insertelement <64 x i16> %8309, i16 %8313, i32 49
  %8315 = extractelement <64 x i32> %8064, i32 50
  %8316 = sext i32 %8315 to i64
  %8317 = getelementptr inbounds i16, i16* %77, i64 %8316
  %8318 = load i16, i16* %8317, align 2, !tbaa !386
  %8319 = insertelement <64 x i16> %8314, i16 %8318, i32 50
  %8320 = extractelement <64 x i32> %8064, i32 51
  %8321 = sext i32 %8320 to i64
  %8322 = getelementptr inbounds i16, i16* %77, i64 %8321
  %8323 = load i16, i16* %8322, align 2, !tbaa !386
  %8324 = insertelement <64 x i16> %8319, i16 %8323, i32 51
  %8325 = extractelement <64 x i32> %8064, i32 52
  %8326 = sext i32 %8325 to i64
  %8327 = getelementptr inbounds i16, i16* %77, i64 %8326
  %8328 = load i16, i16* %8327, align 2, !tbaa !386
  %8329 = insertelement <64 x i16> %8324, i16 %8328, i32 52
  %8330 = extractelement <64 x i32> %8064, i32 53
  %8331 = sext i32 %8330 to i64
  %8332 = getelementptr inbounds i16, i16* %77, i64 %8331
  %8333 = load i16, i16* %8332, align 2, !tbaa !386
  %8334 = insertelement <64 x i16> %8329, i16 %8333, i32 53
  %8335 = extractelement <64 x i32> %8064, i32 54
  %8336 = sext i32 %8335 to i64
  %8337 = getelementptr inbounds i16, i16* %77, i64 %8336
  %8338 = load i16, i16* %8337, align 2, !tbaa !386
  %8339 = insertelement <64 x i16> %8334, i16 %8338, i32 54
  %8340 = extractelement <64 x i32> %8064, i32 55
  %8341 = sext i32 %8340 to i64
  %8342 = getelementptr inbounds i16, i16* %77, i64 %8341
  %8343 = load i16, i16* %8342, align 2, !tbaa !386
  %8344 = insertelement <64 x i16> %8339, i16 %8343, i32 55
  %8345 = extractelement <64 x i32> %8064, i32 56
  %8346 = sext i32 %8345 to i64
  %8347 = getelementptr inbounds i16, i16* %77, i64 %8346
  %8348 = load i16, i16* %8347, align 2, !tbaa !386
  %8349 = insertelement <64 x i16> %8344, i16 %8348, i32 56
  %8350 = extractelement <64 x i32> %8064, i32 57
  %8351 = sext i32 %8350 to i64
  %8352 = getelementptr inbounds i16, i16* %77, i64 %8351
  %8353 = load i16, i16* %8352, align 2, !tbaa !386
  %8354 = insertelement <64 x i16> %8349, i16 %8353, i32 57
  %8355 = extractelement <64 x i32> %8064, i32 58
  %8356 = sext i32 %8355 to i64
  %8357 = getelementptr inbounds i16, i16* %77, i64 %8356
  %8358 = load i16, i16* %8357, align 2, !tbaa !386
  %8359 = insertelement <64 x i16> %8354, i16 %8358, i32 58
  %8360 = extractelement <64 x i32> %8064, i32 59
  %8361 = sext i32 %8360 to i64
  %8362 = getelementptr inbounds i16, i16* %77, i64 %8361
  %8363 = load i16, i16* %8362, align 2, !tbaa !386
  %8364 = insertelement <64 x i16> %8359, i16 %8363, i32 59
  %8365 = extractelement <64 x i32> %8064, i32 60
  %8366 = sext i32 %8365 to i64
  %8367 = getelementptr inbounds i16, i16* %77, i64 %8366
  %8368 = load i16, i16* %8367, align 2, !tbaa !386
  %8369 = insertelement <64 x i16> %8364, i16 %8368, i32 60
  %8370 = extractelement <64 x i32> %8064, i32 61
  %8371 = sext i32 %8370 to i64
  %8372 = getelementptr inbounds i16, i16* %77, i64 %8371
  %8373 = load i16, i16* %8372, align 2, !tbaa !386
  %8374 = insertelement <64 x i16> %8369, i16 %8373, i32 61
  %8375 = extractelement <64 x i32> %8064, i32 62
  %8376 = sext i32 %8375 to i64
  %8377 = getelementptr inbounds i16, i16* %77, i64 %8376
  %8378 = load i16, i16* %8377, align 2, !tbaa !386
  %8379 = insertelement <64 x i16> %8374, i16 %8378, i32 62
  %8380 = extractelement <64 x i32> %8064, i32 63
  %8381 = sext i32 %8380 to i64
  %8382 = getelementptr inbounds i16, i16* %77, i64 %8381
  %8383 = load i16, i16* %8382, align 2, !tbaa !386
  %8384 = insertelement <64 x i16> %8379, i16 %8383, i32 63
  %8385 = add nsw <64 x i32> %7174, %t247
  %8386 = extractelement <64 x i32> %8385, i32 0
  %8387 = sext i32 %8386 to i64
  %8388 = getelementptr inbounds i16, i16* %77, i64 %8387
  %8389 = load i16, i16* %8388, align 2, !tbaa !386
  %8390 = insertelement <64 x i16> undef, i16 %8389, i32 0
  %8391 = extractelement <64 x i32> %8385, i32 1
  %8392 = sext i32 %8391 to i64
  %8393 = getelementptr inbounds i16, i16* %77, i64 %8392
  %8394 = load i16, i16* %8393, align 2, !tbaa !386
  %8395 = insertelement <64 x i16> %8390, i16 %8394, i32 1
  %8396 = extractelement <64 x i32> %8385, i32 2
  %8397 = sext i32 %8396 to i64
  %8398 = getelementptr inbounds i16, i16* %77, i64 %8397
  %8399 = load i16, i16* %8398, align 2, !tbaa !386
  %8400 = insertelement <64 x i16> %8395, i16 %8399, i32 2
  %8401 = extractelement <64 x i32> %8385, i32 3
  %8402 = sext i32 %8401 to i64
  %8403 = getelementptr inbounds i16, i16* %77, i64 %8402
  %8404 = load i16, i16* %8403, align 2, !tbaa !386
  %8405 = insertelement <64 x i16> %8400, i16 %8404, i32 3
  %8406 = extractelement <64 x i32> %8385, i32 4
  %8407 = sext i32 %8406 to i64
  %8408 = getelementptr inbounds i16, i16* %77, i64 %8407
  %8409 = load i16, i16* %8408, align 2, !tbaa !386
  %8410 = insertelement <64 x i16> %8405, i16 %8409, i32 4
  %8411 = extractelement <64 x i32> %8385, i32 5
  %8412 = sext i32 %8411 to i64
  %8413 = getelementptr inbounds i16, i16* %77, i64 %8412
  %8414 = load i16, i16* %8413, align 2, !tbaa !386
  %8415 = insertelement <64 x i16> %8410, i16 %8414, i32 5
  %8416 = extractelement <64 x i32> %8385, i32 6
  %8417 = sext i32 %8416 to i64
  %8418 = getelementptr inbounds i16, i16* %77, i64 %8417
  %8419 = load i16, i16* %8418, align 2, !tbaa !386
  %8420 = insertelement <64 x i16> %8415, i16 %8419, i32 6
  %8421 = extractelement <64 x i32> %8385, i32 7
  %8422 = sext i32 %8421 to i64
  %8423 = getelementptr inbounds i16, i16* %77, i64 %8422
  %8424 = load i16, i16* %8423, align 2, !tbaa !386
  %8425 = insertelement <64 x i16> %8420, i16 %8424, i32 7
  %8426 = extractelement <64 x i32> %8385, i32 8
  %8427 = sext i32 %8426 to i64
  %8428 = getelementptr inbounds i16, i16* %77, i64 %8427
  %8429 = load i16, i16* %8428, align 2, !tbaa !386
  %8430 = insertelement <64 x i16> %8425, i16 %8429, i32 8
  %8431 = extractelement <64 x i32> %8385, i32 9
  %8432 = sext i32 %8431 to i64
  %8433 = getelementptr inbounds i16, i16* %77, i64 %8432
  %8434 = load i16, i16* %8433, align 2, !tbaa !386
  %8435 = insertelement <64 x i16> %8430, i16 %8434, i32 9
  %8436 = extractelement <64 x i32> %8385, i32 10
  %8437 = sext i32 %8436 to i64
  %8438 = getelementptr inbounds i16, i16* %77, i64 %8437
  %8439 = load i16, i16* %8438, align 2, !tbaa !386
  %8440 = insertelement <64 x i16> %8435, i16 %8439, i32 10
  %8441 = extractelement <64 x i32> %8385, i32 11
  %8442 = sext i32 %8441 to i64
  %8443 = getelementptr inbounds i16, i16* %77, i64 %8442
  %8444 = load i16, i16* %8443, align 2, !tbaa !386
  %8445 = insertelement <64 x i16> %8440, i16 %8444, i32 11
  %8446 = extractelement <64 x i32> %8385, i32 12
  %8447 = sext i32 %8446 to i64
  %8448 = getelementptr inbounds i16, i16* %77, i64 %8447
  %8449 = load i16, i16* %8448, align 2, !tbaa !386
  %8450 = insertelement <64 x i16> %8445, i16 %8449, i32 12
  %8451 = extractelement <64 x i32> %8385, i32 13
  %8452 = sext i32 %8451 to i64
  %8453 = getelementptr inbounds i16, i16* %77, i64 %8452
  %8454 = load i16, i16* %8453, align 2, !tbaa !386
  %8455 = insertelement <64 x i16> %8450, i16 %8454, i32 13
  %8456 = extractelement <64 x i32> %8385, i32 14
  %8457 = sext i32 %8456 to i64
  %8458 = getelementptr inbounds i16, i16* %77, i64 %8457
  %8459 = load i16, i16* %8458, align 2, !tbaa !386
  %8460 = insertelement <64 x i16> %8455, i16 %8459, i32 14
  %8461 = extractelement <64 x i32> %8385, i32 15
  %8462 = sext i32 %8461 to i64
  %8463 = getelementptr inbounds i16, i16* %77, i64 %8462
  %8464 = load i16, i16* %8463, align 2, !tbaa !386
  %8465 = insertelement <64 x i16> %8460, i16 %8464, i32 15
  %8466 = extractelement <64 x i32> %8385, i32 16
  %8467 = sext i32 %8466 to i64
  %8468 = getelementptr inbounds i16, i16* %77, i64 %8467
  %8469 = load i16, i16* %8468, align 2, !tbaa !386
  %8470 = insertelement <64 x i16> %8465, i16 %8469, i32 16
  %8471 = extractelement <64 x i32> %8385, i32 17
  %8472 = sext i32 %8471 to i64
  %8473 = getelementptr inbounds i16, i16* %77, i64 %8472
  %8474 = load i16, i16* %8473, align 2, !tbaa !386
  %8475 = insertelement <64 x i16> %8470, i16 %8474, i32 17
  %8476 = extractelement <64 x i32> %8385, i32 18
  %8477 = sext i32 %8476 to i64
  %8478 = getelementptr inbounds i16, i16* %77, i64 %8477
  %8479 = load i16, i16* %8478, align 2, !tbaa !386
  %8480 = insertelement <64 x i16> %8475, i16 %8479, i32 18
  %8481 = extractelement <64 x i32> %8385, i32 19
  %8482 = sext i32 %8481 to i64
  %8483 = getelementptr inbounds i16, i16* %77, i64 %8482
  %8484 = load i16, i16* %8483, align 2, !tbaa !386
  %8485 = insertelement <64 x i16> %8480, i16 %8484, i32 19
  %8486 = extractelement <64 x i32> %8385, i32 20
  %8487 = sext i32 %8486 to i64
  %8488 = getelementptr inbounds i16, i16* %77, i64 %8487
  %8489 = load i16, i16* %8488, align 2, !tbaa !386
  %8490 = insertelement <64 x i16> %8485, i16 %8489, i32 20
  %8491 = extractelement <64 x i32> %8385, i32 21
  %8492 = sext i32 %8491 to i64
  %8493 = getelementptr inbounds i16, i16* %77, i64 %8492
  %8494 = load i16, i16* %8493, align 2, !tbaa !386
  %8495 = insertelement <64 x i16> %8490, i16 %8494, i32 21
  %8496 = extractelement <64 x i32> %8385, i32 22
  %8497 = sext i32 %8496 to i64
  %8498 = getelementptr inbounds i16, i16* %77, i64 %8497
  %8499 = load i16, i16* %8498, align 2, !tbaa !386
  %8500 = insertelement <64 x i16> %8495, i16 %8499, i32 22
  %8501 = extractelement <64 x i32> %8385, i32 23
  %8502 = sext i32 %8501 to i64
  %8503 = getelementptr inbounds i16, i16* %77, i64 %8502
  %8504 = load i16, i16* %8503, align 2, !tbaa !386
  %8505 = insertelement <64 x i16> %8500, i16 %8504, i32 23
  %8506 = extractelement <64 x i32> %8385, i32 24
  %8507 = sext i32 %8506 to i64
  %8508 = getelementptr inbounds i16, i16* %77, i64 %8507
  %8509 = load i16, i16* %8508, align 2, !tbaa !386
  %8510 = insertelement <64 x i16> %8505, i16 %8509, i32 24
  %8511 = extractelement <64 x i32> %8385, i32 25
  %8512 = sext i32 %8511 to i64
  %8513 = getelementptr inbounds i16, i16* %77, i64 %8512
  %8514 = load i16, i16* %8513, align 2, !tbaa !386
  %8515 = insertelement <64 x i16> %8510, i16 %8514, i32 25
  %8516 = extractelement <64 x i32> %8385, i32 26
  %8517 = sext i32 %8516 to i64
  %8518 = getelementptr inbounds i16, i16* %77, i64 %8517
  %8519 = load i16, i16* %8518, align 2, !tbaa !386
  %8520 = insertelement <64 x i16> %8515, i16 %8519, i32 26
  %8521 = extractelement <64 x i32> %8385, i32 27
  %8522 = sext i32 %8521 to i64
  %8523 = getelementptr inbounds i16, i16* %77, i64 %8522
  %8524 = load i16, i16* %8523, align 2, !tbaa !386
  %8525 = insertelement <64 x i16> %8520, i16 %8524, i32 27
  %8526 = extractelement <64 x i32> %8385, i32 28
  %8527 = sext i32 %8526 to i64
  %8528 = getelementptr inbounds i16, i16* %77, i64 %8527
  %8529 = load i16, i16* %8528, align 2, !tbaa !386
  %8530 = insertelement <64 x i16> %8525, i16 %8529, i32 28
  %8531 = extractelement <64 x i32> %8385, i32 29
  %8532 = sext i32 %8531 to i64
  %8533 = getelementptr inbounds i16, i16* %77, i64 %8532
  %8534 = load i16, i16* %8533, align 2, !tbaa !386
  %8535 = insertelement <64 x i16> %8530, i16 %8534, i32 29
  %8536 = extractelement <64 x i32> %8385, i32 30
  %8537 = sext i32 %8536 to i64
  %8538 = getelementptr inbounds i16, i16* %77, i64 %8537
  %8539 = load i16, i16* %8538, align 2, !tbaa !386
  %8540 = insertelement <64 x i16> %8535, i16 %8539, i32 30
  %8541 = extractelement <64 x i32> %8385, i32 31
  %8542 = sext i32 %8541 to i64
  %8543 = getelementptr inbounds i16, i16* %77, i64 %8542
  %8544 = load i16, i16* %8543, align 2, !tbaa !386
  %8545 = insertelement <64 x i16> %8540, i16 %8544, i32 31
  %8546 = extractelement <64 x i32> %8385, i32 32
  %8547 = sext i32 %8546 to i64
  %8548 = getelementptr inbounds i16, i16* %77, i64 %8547
  %8549 = load i16, i16* %8548, align 2, !tbaa !386
  %8550 = insertelement <64 x i16> %8545, i16 %8549, i32 32
  %8551 = extractelement <64 x i32> %8385, i32 33
  %8552 = sext i32 %8551 to i64
  %8553 = getelementptr inbounds i16, i16* %77, i64 %8552
  %8554 = load i16, i16* %8553, align 2, !tbaa !386
  %8555 = insertelement <64 x i16> %8550, i16 %8554, i32 33
  %8556 = extractelement <64 x i32> %8385, i32 34
  %8557 = sext i32 %8556 to i64
  %8558 = getelementptr inbounds i16, i16* %77, i64 %8557
  %8559 = load i16, i16* %8558, align 2, !tbaa !386
  %8560 = insertelement <64 x i16> %8555, i16 %8559, i32 34
  %8561 = extractelement <64 x i32> %8385, i32 35
  %8562 = sext i32 %8561 to i64
  %8563 = getelementptr inbounds i16, i16* %77, i64 %8562
  %8564 = load i16, i16* %8563, align 2, !tbaa !386
  %8565 = insertelement <64 x i16> %8560, i16 %8564, i32 35
  %8566 = extractelement <64 x i32> %8385, i32 36
  %8567 = sext i32 %8566 to i64
  %8568 = getelementptr inbounds i16, i16* %77, i64 %8567
  %8569 = load i16, i16* %8568, align 2, !tbaa !386
  %8570 = insertelement <64 x i16> %8565, i16 %8569, i32 36
  %8571 = extractelement <64 x i32> %8385, i32 37
  %8572 = sext i32 %8571 to i64
  %8573 = getelementptr inbounds i16, i16* %77, i64 %8572
  %8574 = load i16, i16* %8573, align 2, !tbaa !386
  %8575 = insertelement <64 x i16> %8570, i16 %8574, i32 37
  %8576 = extractelement <64 x i32> %8385, i32 38
  %8577 = sext i32 %8576 to i64
  %8578 = getelementptr inbounds i16, i16* %77, i64 %8577
  %8579 = load i16, i16* %8578, align 2, !tbaa !386
  %8580 = insertelement <64 x i16> %8575, i16 %8579, i32 38
  %8581 = extractelement <64 x i32> %8385, i32 39
  %8582 = sext i32 %8581 to i64
  %8583 = getelementptr inbounds i16, i16* %77, i64 %8582
  %8584 = load i16, i16* %8583, align 2, !tbaa !386
  %8585 = insertelement <64 x i16> %8580, i16 %8584, i32 39
  %8586 = extractelement <64 x i32> %8385, i32 40
  %8587 = sext i32 %8586 to i64
  %8588 = getelementptr inbounds i16, i16* %77, i64 %8587
  %8589 = load i16, i16* %8588, align 2, !tbaa !386
  %8590 = insertelement <64 x i16> %8585, i16 %8589, i32 40
  %8591 = extractelement <64 x i32> %8385, i32 41
  %8592 = sext i32 %8591 to i64
  %8593 = getelementptr inbounds i16, i16* %77, i64 %8592
  %8594 = load i16, i16* %8593, align 2, !tbaa !386
  %8595 = insertelement <64 x i16> %8590, i16 %8594, i32 41
  %8596 = extractelement <64 x i32> %8385, i32 42
  %8597 = sext i32 %8596 to i64
  %8598 = getelementptr inbounds i16, i16* %77, i64 %8597
  %8599 = load i16, i16* %8598, align 2, !tbaa !386
  %8600 = insertelement <64 x i16> %8595, i16 %8599, i32 42
  %8601 = extractelement <64 x i32> %8385, i32 43
  %8602 = sext i32 %8601 to i64
  %8603 = getelementptr inbounds i16, i16* %77, i64 %8602
  %8604 = load i16, i16* %8603, align 2, !tbaa !386
  %8605 = insertelement <64 x i16> %8600, i16 %8604, i32 43
  %8606 = extractelement <64 x i32> %8385, i32 44
  %8607 = sext i32 %8606 to i64
  %8608 = getelementptr inbounds i16, i16* %77, i64 %8607
  %8609 = load i16, i16* %8608, align 2, !tbaa !386
  %8610 = insertelement <64 x i16> %8605, i16 %8609, i32 44
  %8611 = extractelement <64 x i32> %8385, i32 45
  %8612 = sext i32 %8611 to i64
  %8613 = getelementptr inbounds i16, i16* %77, i64 %8612
  %8614 = load i16, i16* %8613, align 2, !tbaa !386
  %8615 = insertelement <64 x i16> %8610, i16 %8614, i32 45
  %8616 = extractelement <64 x i32> %8385, i32 46
  %8617 = sext i32 %8616 to i64
  %8618 = getelementptr inbounds i16, i16* %77, i64 %8617
  %8619 = load i16, i16* %8618, align 2, !tbaa !386
  %8620 = insertelement <64 x i16> %8615, i16 %8619, i32 46
  %8621 = extractelement <64 x i32> %8385, i32 47
  %8622 = sext i32 %8621 to i64
  %8623 = getelementptr inbounds i16, i16* %77, i64 %8622
  %8624 = load i16, i16* %8623, align 2, !tbaa !386
  %8625 = insertelement <64 x i16> %8620, i16 %8624, i32 47
  %8626 = extractelement <64 x i32> %8385, i32 48
  %8627 = sext i32 %8626 to i64
  %8628 = getelementptr inbounds i16, i16* %77, i64 %8627
  %8629 = load i16, i16* %8628, align 2, !tbaa !386
  %8630 = insertelement <64 x i16> %8625, i16 %8629, i32 48
  %8631 = extractelement <64 x i32> %8385, i32 49
  %8632 = sext i32 %8631 to i64
  %8633 = getelementptr inbounds i16, i16* %77, i64 %8632
  %8634 = load i16, i16* %8633, align 2, !tbaa !386
  %8635 = insertelement <64 x i16> %8630, i16 %8634, i32 49
  %8636 = extractelement <64 x i32> %8385, i32 50
  %8637 = sext i32 %8636 to i64
  %8638 = getelementptr inbounds i16, i16* %77, i64 %8637
  %8639 = load i16, i16* %8638, align 2, !tbaa !386
  %8640 = insertelement <64 x i16> %8635, i16 %8639, i32 50
  %8641 = extractelement <64 x i32> %8385, i32 51
  %8642 = sext i32 %8641 to i64
  %8643 = getelementptr inbounds i16, i16* %77, i64 %8642
  %8644 = load i16, i16* %8643, align 2, !tbaa !386
  %8645 = insertelement <64 x i16> %8640, i16 %8644, i32 51
  %8646 = extractelement <64 x i32> %8385, i32 52
  %8647 = sext i32 %8646 to i64
  %8648 = getelementptr inbounds i16, i16* %77, i64 %8647
  %8649 = load i16, i16* %8648, align 2, !tbaa !386
  %8650 = insertelement <64 x i16> %8645, i16 %8649, i32 52
  %8651 = extractelement <64 x i32> %8385, i32 53
  %8652 = sext i32 %8651 to i64
  %8653 = getelementptr inbounds i16, i16* %77, i64 %8652
  %8654 = load i16, i16* %8653, align 2, !tbaa !386
  %8655 = insertelement <64 x i16> %8650, i16 %8654, i32 53
  %8656 = extractelement <64 x i32> %8385, i32 54
  %8657 = sext i32 %8656 to i64
  %8658 = getelementptr inbounds i16, i16* %77, i64 %8657
  %8659 = load i16, i16* %8658, align 2, !tbaa !386
  %8660 = insertelement <64 x i16> %8655, i16 %8659, i32 54
  %8661 = extractelement <64 x i32> %8385, i32 55
  %8662 = sext i32 %8661 to i64
  %8663 = getelementptr inbounds i16, i16* %77, i64 %8662
  %8664 = load i16, i16* %8663, align 2, !tbaa !386
  %8665 = insertelement <64 x i16> %8660, i16 %8664, i32 55
  %8666 = extractelement <64 x i32> %8385, i32 56
  %8667 = sext i32 %8666 to i64
  %8668 = getelementptr inbounds i16, i16* %77, i64 %8667
  %8669 = load i16, i16* %8668, align 2, !tbaa !386
  %8670 = insertelement <64 x i16> %8665, i16 %8669, i32 56
  %8671 = extractelement <64 x i32> %8385, i32 57
  %8672 = sext i32 %8671 to i64
  %8673 = getelementptr inbounds i16, i16* %77, i64 %8672
  %8674 = load i16, i16* %8673, align 2, !tbaa !386
  %8675 = insertelement <64 x i16> %8670, i16 %8674, i32 57
  %8676 = extractelement <64 x i32> %8385, i32 58
  %8677 = sext i32 %8676 to i64
  %8678 = getelementptr inbounds i16, i16* %77, i64 %8677
  %8679 = load i16, i16* %8678, align 2, !tbaa !386
  %8680 = insertelement <64 x i16> %8675, i16 %8679, i32 58
  %8681 = extractelement <64 x i32> %8385, i32 59
  %8682 = sext i32 %8681 to i64
  %8683 = getelementptr inbounds i16, i16* %77, i64 %8682
  %8684 = load i16, i16* %8683, align 2, !tbaa !386
  %8685 = insertelement <64 x i16> %8680, i16 %8684, i32 59
  %8686 = extractelement <64 x i32> %8385, i32 60
  %8687 = sext i32 %8686 to i64
  %8688 = getelementptr inbounds i16, i16* %77, i64 %8687
  %8689 = load i16, i16* %8688, align 2, !tbaa !386
  %8690 = insertelement <64 x i16> %8685, i16 %8689, i32 60
  %8691 = extractelement <64 x i32> %8385, i32 61
  %8692 = sext i32 %8691 to i64
  %8693 = getelementptr inbounds i16, i16* %77, i64 %8692
  %8694 = load i16, i16* %8693, align 2, !tbaa !386
  %8695 = insertelement <64 x i16> %8690, i16 %8694, i32 61
  %8696 = extractelement <64 x i32> %8385, i32 62
  %8697 = sext i32 %8696 to i64
  %8698 = getelementptr inbounds i16, i16* %77, i64 %8697
  %8699 = load i16, i16* %8698, align 2, !tbaa !386
  %8700 = insertelement <64 x i16> %8695, i16 %8699, i32 62
  %8701 = extractelement <64 x i32> %8385, i32 63
  %8702 = sext i32 %8701 to i64
  %8703 = getelementptr inbounds i16, i16* %77, i64 %8702
  %8704 = load i16, i16* %8703, align 2, !tbaa !386
  %8705 = insertelement <64 x i16> %8700, i16 %8704, i32 63
  %8706 = add nsw <64 x i32> %7246, %t247
  %8707 = extractelement <64 x i32> %8706, i32 0
  %8708 = sext i32 %8707 to i64
  %8709 = getelementptr inbounds i16, i16* %77, i64 %8708
  %8710 = load i16, i16* %8709, align 2, !tbaa !386
  %8711 = insertelement <64 x i16> undef, i16 %8710, i32 0
  %8712 = extractelement <64 x i32> %8706, i32 1
  %8713 = sext i32 %8712 to i64
  %8714 = getelementptr inbounds i16, i16* %77, i64 %8713
  %8715 = load i16, i16* %8714, align 2, !tbaa !386
  %8716 = insertelement <64 x i16> %8711, i16 %8715, i32 1
  %8717 = extractelement <64 x i32> %8706, i32 2
  %8718 = sext i32 %8717 to i64
  %8719 = getelementptr inbounds i16, i16* %77, i64 %8718
  %8720 = load i16, i16* %8719, align 2, !tbaa !386
  %8721 = insertelement <64 x i16> %8716, i16 %8720, i32 2
  %8722 = extractelement <64 x i32> %8706, i32 3
  %8723 = sext i32 %8722 to i64
  %8724 = getelementptr inbounds i16, i16* %77, i64 %8723
  %8725 = load i16, i16* %8724, align 2, !tbaa !386
  %8726 = insertelement <64 x i16> %8721, i16 %8725, i32 3
  %8727 = extractelement <64 x i32> %8706, i32 4
  %8728 = sext i32 %8727 to i64
  %8729 = getelementptr inbounds i16, i16* %77, i64 %8728
  %8730 = load i16, i16* %8729, align 2, !tbaa !386
  %8731 = insertelement <64 x i16> %8726, i16 %8730, i32 4
  %8732 = extractelement <64 x i32> %8706, i32 5
  %8733 = sext i32 %8732 to i64
  %8734 = getelementptr inbounds i16, i16* %77, i64 %8733
  %8735 = load i16, i16* %8734, align 2, !tbaa !386
  %8736 = insertelement <64 x i16> %8731, i16 %8735, i32 5
  %8737 = extractelement <64 x i32> %8706, i32 6
  %8738 = sext i32 %8737 to i64
  %8739 = getelementptr inbounds i16, i16* %77, i64 %8738
  %8740 = load i16, i16* %8739, align 2, !tbaa !386
  %8741 = insertelement <64 x i16> %8736, i16 %8740, i32 6
  %8742 = extractelement <64 x i32> %8706, i32 7
  %8743 = sext i32 %8742 to i64
  %8744 = getelementptr inbounds i16, i16* %77, i64 %8743
  %8745 = load i16, i16* %8744, align 2, !tbaa !386
  %8746 = insertelement <64 x i16> %8741, i16 %8745, i32 7
  %8747 = extractelement <64 x i32> %8706, i32 8
  %8748 = sext i32 %8747 to i64
  %8749 = getelementptr inbounds i16, i16* %77, i64 %8748
  %8750 = load i16, i16* %8749, align 2, !tbaa !386
  %8751 = insertelement <64 x i16> %8746, i16 %8750, i32 8
  %8752 = extractelement <64 x i32> %8706, i32 9
  %8753 = sext i32 %8752 to i64
  %8754 = getelementptr inbounds i16, i16* %77, i64 %8753
  %8755 = load i16, i16* %8754, align 2, !tbaa !386
  %8756 = insertelement <64 x i16> %8751, i16 %8755, i32 9
  %8757 = extractelement <64 x i32> %8706, i32 10
  %8758 = sext i32 %8757 to i64
  %8759 = getelementptr inbounds i16, i16* %77, i64 %8758
  %8760 = load i16, i16* %8759, align 2, !tbaa !386
  %8761 = insertelement <64 x i16> %8756, i16 %8760, i32 10
  %8762 = extractelement <64 x i32> %8706, i32 11
  %8763 = sext i32 %8762 to i64
  %8764 = getelementptr inbounds i16, i16* %77, i64 %8763
  %8765 = load i16, i16* %8764, align 2, !tbaa !386
  %8766 = insertelement <64 x i16> %8761, i16 %8765, i32 11
  %8767 = extractelement <64 x i32> %8706, i32 12
  %8768 = sext i32 %8767 to i64
  %8769 = getelementptr inbounds i16, i16* %77, i64 %8768
  %8770 = load i16, i16* %8769, align 2, !tbaa !386
  %8771 = insertelement <64 x i16> %8766, i16 %8770, i32 12
  %8772 = extractelement <64 x i32> %8706, i32 13
  %8773 = sext i32 %8772 to i64
  %8774 = getelementptr inbounds i16, i16* %77, i64 %8773
  %8775 = load i16, i16* %8774, align 2, !tbaa !386
  %8776 = insertelement <64 x i16> %8771, i16 %8775, i32 13
  %8777 = extractelement <64 x i32> %8706, i32 14
  %8778 = sext i32 %8777 to i64
  %8779 = getelementptr inbounds i16, i16* %77, i64 %8778
  %8780 = load i16, i16* %8779, align 2, !tbaa !386
  %8781 = insertelement <64 x i16> %8776, i16 %8780, i32 14
  %8782 = extractelement <64 x i32> %8706, i32 15
  %8783 = sext i32 %8782 to i64
  %8784 = getelementptr inbounds i16, i16* %77, i64 %8783
  %8785 = load i16, i16* %8784, align 2, !tbaa !386
  %8786 = insertelement <64 x i16> %8781, i16 %8785, i32 15
  %8787 = extractelement <64 x i32> %8706, i32 16
  %8788 = sext i32 %8787 to i64
  %8789 = getelementptr inbounds i16, i16* %77, i64 %8788
  %8790 = load i16, i16* %8789, align 2, !tbaa !386
  %8791 = insertelement <64 x i16> %8786, i16 %8790, i32 16
  %8792 = extractelement <64 x i32> %8706, i32 17
  %8793 = sext i32 %8792 to i64
  %8794 = getelementptr inbounds i16, i16* %77, i64 %8793
  %8795 = load i16, i16* %8794, align 2, !tbaa !386
  %8796 = insertelement <64 x i16> %8791, i16 %8795, i32 17
  %8797 = extractelement <64 x i32> %8706, i32 18
  %8798 = sext i32 %8797 to i64
  %8799 = getelementptr inbounds i16, i16* %77, i64 %8798
  %8800 = load i16, i16* %8799, align 2, !tbaa !386
  %8801 = insertelement <64 x i16> %8796, i16 %8800, i32 18
  %8802 = extractelement <64 x i32> %8706, i32 19
  %8803 = sext i32 %8802 to i64
  %8804 = getelementptr inbounds i16, i16* %77, i64 %8803
  %8805 = load i16, i16* %8804, align 2, !tbaa !386
  %8806 = insertelement <64 x i16> %8801, i16 %8805, i32 19
  %8807 = extractelement <64 x i32> %8706, i32 20
  %8808 = sext i32 %8807 to i64
  %8809 = getelementptr inbounds i16, i16* %77, i64 %8808
  %8810 = load i16, i16* %8809, align 2, !tbaa !386
  %8811 = insertelement <64 x i16> %8806, i16 %8810, i32 20
  %8812 = extractelement <64 x i32> %8706, i32 21
  %8813 = sext i32 %8812 to i64
  %8814 = getelementptr inbounds i16, i16* %77, i64 %8813
  %8815 = load i16, i16* %8814, align 2, !tbaa !386
  %8816 = insertelement <64 x i16> %8811, i16 %8815, i32 21
  %8817 = extractelement <64 x i32> %8706, i32 22
  %8818 = sext i32 %8817 to i64
  %8819 = getelementptr inbounds i16, i16* %77, i64 %8818
  %8820 = load i16, i16* %8819, align 2, !tbaa !386
  %8821 = insertelement <64 x i16> %8816, i16 %8820, i32 22
  %8822 = extractelement <64 x i32> %8706, i32 23
  %8823 = sext i32 %8822 to i64
  %8824 = getelementptr inbounds i16, i16* %77, i64 %8823
  %8825 = load i16, i16* %8824, align 2, !tbaa !386
  %8826 = insertelement <64 x i16> %8821, i16 %8825, i32 23
  %8827 = extractelement <64 x i32> %8706, i32 24
  %8828 = sext i32 %8827 to i64
  %8829 = getelementptr inbounds i16, i16* %77, i64 %8828
  %8830 = load i16, i16* %8829, align 2, !tbaa !386
  %8831 = insertelement <64 x i16> %8826, i16 %8830, i32 24
  %8832 = extractelement <64 x i32> %8706, i32 25
  %8833 = sext i32 %8832 to i64
  %8834 = getelementptr inbounds i16, i16* %77, i64 %8833
  %8835 = load i16, i16* %8834, align 2, !tbaa !386
  %8836 = insertelement <64 x i16> %8831, i16 %8835, i32 25
  %8837 = extractelement <64 x i32> %8706, i32 26
  %8838 = sext i32 %8837 to i64
  %8839 = getelementptr inbounds i16, i16* %77, i64 %8838
  %8840 = load i16, i16* %8839, align 2, !tbaa !386
  %8841 = insertelement <64 x i16> %8836, i16 %8840, i32 26
  %8842 = extractelement <64 x i32> %8706, i32 27
  %8843 = sext i32 %8842 to i64
  %8844 = getelementptr inbounds i16, i16* %77, i64 %8843
  %8845 = load i16, i16* %8844, align 2, !tbaa !386
  %8846 = insertelement <64 x i16> %8841, i16 %8845, i32 27
  %8847 = extractelement <64 x i32> %8706, i32 28
  %8848 = sext i32 %8847 to i64
  %8849 = getelementptr inbounds i16, i16* %77, i64 %8848
  %8850 = load i16, i16* %8849, align 2, !tbaa !386
  %8851 = insertelement <64 x i16> %8846, i16 %8850, i32 28
  %8852 = extractelement <64 x i32> %8706, i32 29
  %8853 = sext i32 %8852 to i64
  %8854 = getelementptr inbounds i16, i16* %77, i64 %8853
  %8855 = load i16, i16* %8854, align 2, !tbaa !386
  %8856 = insertelement <64 x i16> %8851, i16 %8855, i32 29
  %8857 = extractelement <64 x i32> %8706, i32 30
  %8858 = sext i32 %8857 to i64
  %8859 = getelementptr inbounds i16, i16* %77, i64 %8858
  %8860 = load i16, i16* %8859, align 2, !tbaa !386
  %8861 = insertelement <64 x i16> %8856, i16 %8860, i32 30
  %8862 = extractelement <64 x i32> %8706, i32 31
  %8863 = sext i32 %8862 to i64
  %8864 = getelementptr inbounds i16, i16* %77, i64 %8863
  %8865 = load i16, i16* %8864, align 2, !tbaa !386
  %8866 = insertelement <64 x i16> %8861, i16 %8865, i32 31
  %8867 = extractelement <64 x i32> %8706, i32 32
  %8868 = sext i32 %8867 to i64
  %8869 = getelementptr inbounds i16, i16* %77, i64 %8868
  %8870 = load i16, i16* %8869, align 2, !tbaa !386
  %8871 = insertelement <64 x i16> %8866, i16 %8870, i32 32
  %8872 = extractelement <64 x i32> %8706, i32 33
  %8873 = sext i32 %8872 to i64
  %8874 = getelementptr inbounds i16, i16* %77, i64 %8873
  %8875 = load i16, i16* %8874, align 2, !tbaa !386
  %8876 = insertelement <64 x i16> %8871, i16 %8875, i32 33
  %8877 = extractelement <64 x i32> %8706, i32 34
  %8878 = sext i32 %8877 to i64
  %8879 = getelementptr inbounds i16, i16* %77, i64 %8878
  %8880 = load i16, i16* %8879, align 2, !tbaa !386
  %8881 = insertelement <64 x i16> %8876, i16 %8880, i32 34
  %8882 = extractelement <64 x i32> %8706, i32 35
  %8883 = sext i32 %8882 to i64
  %8884 = getelementptr inbounds i16, i16* %77, i64 %8883
  %8885 = load i16, i16* %8884, align 2, !tbaa !386
  %8886 = insertelement <64 x i16> %8881, i16 %8885, i32 35
  %8887 = extractelement <64 x i32> %8706, i32 36
  %8888 = sext i32 %8887 to i64
  %8889 = getelementptr inbounds i16, i16* %77, i64 %8888
  %8890 = load i16, i16* %8889, align 2, !tbaa !386
  %8891 = insertelement <64 x i16> %8886, i16 %8890, i32 36
  %8892 = extractelement <64 x i32> %8706, i32 37
  %8893 = sext i32 %8892 to i64
  %8894 = getelementptr inbounds i16, i16* %77, i64 %8893
  %8895 = load i16, i16* %8894, align 2, !tbaa !386
  %8896 = insertelement <64 x i16> %8891, i16 %8895, i32 37
  %8897 = extractelement <64 x i32> %8706, i32 38
  %8898 = sext i32 %8897 to i64
  %8899 = getelementptr inbounds i16, i16* %77, i64 %8898
  %8900 = load i16, i16* %8899, align 2, !tbaa !386
  %8901 = insertelement <64 x i16> %8896, i16 %8900, i32 38
  %8902 = extractelement <64 x i32> %8706, i32 39
  %8903 = sext i32 %8902 to i64
  %8904 = getelementptr inbounds i16, i16* %77, i64 %8903
  %8905 = load i16, i16* %8904, align 2, !tbaa !386
  %8906 = insertelement <64 x i16> %8901, i16 %8905, i32 39
  %8907 = extractelement <64 x i32> %8706, i32 40
  %8908 = sext i32 %8907 to i64
  %8909 = getelementptr inbounds i16, i16* %77, i64 %8908
  %8910 = load i16, i16* %8909, align 2, !tbaa !386
  %8911 = insertelement <64 x i16> %8906, i16 %8910, i32 40
  %8912 = extractelement <64 x i32> %8706, i32 41
  %8913 = sext i32 %8912 to i64
  %8914 = getelementptr inbounds i16, i16* %77, i64 %8913
  %8915 = load i16, i16* %8914, align 2, !tbaa !386
  %8916 = insertelement <64 x i16> %8911, i16 %8915, i32 41
  %8917 = extractelement <64 x i32> %8706, i32 42
  %8918 = sext i32 %8917 to i64
  %8919 = getelementptr inbounds i16, i16* %77, i64 %8918
  %8920 = load i16, i16* %8919, align 2, !tbaa !386
  %8921 = insertelement <64 x i16> %8916, i16 %8920, i32 42
  %8922 = extractelement <64 x i32> %8706, i32 43
  %8923 = sext i32 %8922 to i64
  %8924 = getelementptr inbounds i16, i16* %77, i64 %8923
  %8925 = load i16, i16* %8924, align 2, !tbaa !386
  %8926 = insertelement <64 x i16> %8921, i16 %8925, i32 43
  %8927 = extractelement <64 x i32> %8706, i32 44
  %8928 = sext i32 %8927 to i64
  %8929 = getelementptr inbounds i16, i16* %77, i64 %8928
  %8930 = load i16, i16* %8929, align 2, !tbaa !386
  %8931 = insertelement <64 x i16> %8926, i16 %8930, i32 44
  %8932 = extractelement <64 x i32> %8706, i32 45
  %8933 = sext i32 %8932 to i64
  %8934 = getelementptr inbounds i16, i16* %77, i64 %8933
  %8935 = load i16, i16* %8934, align 2, !tbaa !386
  %8936 = insertelement <64 x i16> %8931, i16 %8935, i32 45
  %8937 = extractelement <64 x i32> %8706, i32 46
  %8938 = sext i32 %8937 to i64
  %8939 = getelementptr inbounds i16, i16* %77, i64 %8938
  %8940 = load i16, i16* %8939, align 2, !tbaa !386
  %8941 = insertelement <64 x i16> %8936, i16 %8940, i32 46
  %8942 = extractelement <64 x i32> %8706, i32 47
  %8943 = sext i32 %8942 to i64
  %8944 = getelementptr inbounds i16, i16* %77, i64 %8943
  %8945 = load i16, i16* %8944, align 2, !tbaa !386
  %8946 = insertelement <64 x i16> %8941, i16 %8945, i32 47
  %8947 = extractelement <64 x i32> %8706, i32 48
  %8948 = sext i32 %8947 to i64
  %8949 = getelementptr inbounds i16, i16* %77, i64 %8948
  %8950 = load i16, i16* %8949, align 2, !tbaa !386
  %8951 = insertelement <64 x i16> %8946, i16 %8950, i32 48
  %8952 = extractelement <64 x i32> %8706, i32 49
  %8953 = sext i32 %8952 to i64
  %8954 = getelementptr inbounds i16, i16* %77, i64 %8953
  %8955 = load i16, i16* %8954, align 2, !tbaa !386
  %8956 = insertelement <64 x i16> %8951, i16 %8955, i32 49
  %8957 = extractelement <64 x i32> %8706, i32 50
  %8958 = sext i32 %8957 to i64
  %8959 = getelementptr inbounds i16, i16* %77, i64 %8958
  %8960 = load i16, i16* %8959, align 2, !tbaa !386
  %8961 = insertelement <64 x i16> %8956, i16 %8960, i32 50
  %8962 = extractelement <64 x i32> %8706, i32 51
  %8963 = sext i32 %8962 to i64
  %8964 = getelementptr inbounds i16, i16* %77, i64 %8963
  %8965 = load i16, i16* %8964, align 2, !tbaa !386
  %8966 = insertelement <64 x i16> %8961, i16 %8965, i32 51
  %8967 = extractelement <64 x i32> %8706, i32 52
  %8968 = sext i32 %8967 to i64
  %8969 = getelementptr inbounds i16, i16* %77, i64 %8968
  %8970 = load i16, i16* %8969, align 2, !tbaa !386
  %8971 = insertelement <64 x i16> %8966, i16 %8970, i32 52
  %8972 = extractelement <64 x i32> %8706, i32 53
  %8973 = sext i32 %8972 to i64
  %8974 = getelementptr inbounds i16, i16* %77, i64 %8973
  %8975 = load i16, i16* %8974, align 2, !tbaa !386
  %8976 = insertelement <64 x i16> %8971, i16 %8975, i32 53
  %8977 = extractelement <64 x i32> %8706, i32 54
  %8978 = sext i32 %8977 to i64
  %8979 = getelementptr inbounds i16, i16* %77, i64 %8978
  %8980 = load i16, i16* %8979, align 2, !tbaa !386
  %8981 = insertelement <64 x i16> %8976, i16 %8980, i32 54
  %8982 = extractelement <64 x i32> %8706, i32 55
  %8983 = sext i32 %8982 to i64
  %8984 = getelementptr inbounds i16, i16* %77, i64 %8983
  %8985 = load i16, i16* %8984, align 2, !tbaa !386
  %8986 = insertelement <64 x i16> %8981, i16 %8985, i32 55
  %8987 = extractelement <64 x i32> %8706, i32 56
  %8988 = sext i32 %8987 to i64
  %8989 = getelementptr inbounds i16, i16* %77, i64 %8988
  %8990 = load i16, i16* %8989, align 2, !tbaa !386
  %8991 = insertelement <64 x i16> %8986, i16 %8990, i32 56
  %8992 = extractelement <64 x i32> %8706, i32 57
  %8993 = sext i32 %8992 to i64
  %8994 = getelementptr inbounds i16, i16* %77, i64 %8993
  %8995 = load i16, i16* %8994, align 2, !tbaa !386
  %8996 = insertelement <64 x i16> %8991, i16 %8995, i32 57
  %8997 = extractelement <64 x i32> %8706, i32 58
  %8998 = sext i32 %8997 to i64
  %8999 = getelementptr inbounds i16, i16* %77, i64 %8998
  %9000 = load i16, i16* %8999, align 2, !tbaa !386
  %9001 = insertelement <64 x i16> %8996, i16 %9000, i32 58
  %9002 = extractelement <64 x i32> %8706, i32 59
  %9003 = sext i32 %9002 to i64
  %9004 = getelementptr inbounds i16, i16* %77, i64 %9003
  %9005 = load i16, i16* %9004, align 2, !tbaa !386
  %9006 = insertelement <64 x i16> %9001, i16 %9005, i32 59
  %9007 = extractelement <64 x i32> %8706, i32 60
  %9008 = sext i32 %9007 to i64
  %9009 = getelementptr inbounds i16, i16* %77, i64 %9008
  %9010 = load i16, i16* %9009, align 2, !tbaa !386
  %9011 = insertelement <64 x i16> %9006, i16 %9010, i32 60
  %9012 = extractelement <64 x i32> %8706, i32 61
  %9013 = sext i32 %9012 to i64
  %9014 = getelementptr inbounds i16, i16* %77, i64 %9013
  %9015 = load i16, i16* %9014, align 2, !tbaa !386
  %9016 = insertelement <64 x i16> %9011, i16 %9015, i32 61
  %9017 = extractelement <64 x i32> %8706, i32 62
  %9018 = sext i32 %9017 to i64
  %9019 = getelementptr inbounds i16, i16* %77, i64 %9018
  %9020 = load i16, i16* %9019, align 2, !tbaa !386
  %9021 = insertelement <64 x i16> %9016, i16 %9020, i32 62
  %9022 = extractelement <64 x i32> %8706, i32 63
  %9023 = sext i32 %9022 to i64
  %9024 = getelementptr inbounds i16, i16* %77, i64 %9023
  %9025 = load i16, i16* %9024, align 2, !tbaa !386
  %9026 = insertelement <64 x i16> %9021, i16 %9025, i32 63
  %9027 = add nsw <64 x i32> %7318, %t247
  %9028 = extractelement <64 x i32> %9027, i32 0
  %9029 = sext i32 %9028 to i64
  %9030 = getelementptr inbounds i16, i16* %77, i64 %9029
  %9031 = load i16, i16* %9030, align 2, !tbaa !386
  %9032 = insertelement <64 x i16> undef, i16 %9031, i32 0
  %9033 = extractelement <64 x i32> %9027, i32 1
  %9034 = sext i32 %9033 to i64
  %9035 = getelementptr inbounds i16, i16* %77, i64 %9034
  %9036 = load i16, i16* %9035, align 2, !tbaa !386
  %9037 = insertelement <64 x i16> %9032, i16 %9036, i32 1
  %9038 = extractelement <64 x i32> %9027, i32 2
  %9039 = sext i32 %9038 to i64
  %9040 = getelementptr inbounds i16, i16* %77, i64 %9039
  %9041 = load i16, i16* %9040, align 2, !tbaa !386
  %9042 = insertelement <64 x i16> %9037, i16 %9041, i32 2
  %9043 = extractelement <64 x i32> %9027, i32 3
  %9044 = sext i32 %9043 to i64
  %9045 = getelementptr inbounds i16, i16* %77, i64 %9044
  %9046 = load i16, i16* %9045, align 2, !tbaa !386
  %9047 = insertelement <64 x i16> %9042, i16 %9046, i32 3
  %9048 = extractelement <64 x i32> %9027, i32 4
  %9049 = sext i32 %9048 to i64
  %9050 = getelementptr inbounds i16, i16* %77, i64 %9049
  %9051 = load i16, i16* %9050, align 2, !tbaa !386
  %9052 = insertelement <64 x i16> %9047, i16 %9051, i32 4
  %9053 = extractelement <64 x i32> %9027, i32 5
  %9054 = sext i32 %9053 to i64
  %9055 = getelementptr inbounds i16, i16* %77, i64 %9054
  %9056 = load i16, i16* %9055, align 2, !tbaa !386
  %9057 = insertelement <64 x i16> %9052, i16 %9056, i32 5
  %9058 = extractelement <64 x i32> %9027, i32 6
  %9059 = sext i32 %9058 to i64
  %9060 = getelementptr inbounds i16, i16* %77, i64 %9059
  %9061 = load i16, i16* %9060, align 2, !tbaa !386
  %9062 = insertelement <64 x i16> %9057, i16 %9061, i32 6
  %9063 = extractelement <64 x i32> %9027, i32 7
  %9064 = sext i32 %9063 to i64
  %9065 = getelementptr inbounds i16, i16* %77, i64 %9064
  %9066 = load i16, i16* %9065, align 2, !tbaa !386
  %9067 = insertelement <64 x i16> %9062, i16 %9066, i32 7
  %9068 = extractelement <64 x i32> %9027, i32 8
  %9069 = sext i32 %9068 to i64
  %9070 = getelementptr inbounds i16, i16* %77, i64 %9069
  %9071 = load i16, i16* %9070, align 2, !tbaa !386
  %9072 = insertelement <64 x i16> %9067, i16 %9071, i32 8
  %9073 = extractelement <64 x i32> %9027, i32 9
  %9074 = sext i32 %9073 to i64
  %9075 = getelementptr inbounds i16, i16* %77, i64 %9074
  %9076 = load i16, i16* %9075, align 2, !tbaa !386
  %9077 = insertelement <64 x i16> %9072, i16 %9076, i32 9
  %9078 = extractelement <64 x i32> %9027, i32 10
  %9079 = sext i32 %9078 to i64
  %9080 = getelementptr inbounds i16, i16* %77, i64 %9079
  %9081 = load i16, i16* %9080, align 2, !tbaa !386
  %9082 = insertelement <64 x i16> %9077, i16 %9081, i32 10
  %9083 = extractelement <64 x i32> %9027, i32 11
  %9084 = sext i32 %9083 to i64
  %9085 = getelementptr inbounds i16, i16* %77, i64 %9084
  %9086 = load i16, i16* %9085, align 2, !tbaa !386
  %9087 = insertelement <64 x i16> %9082, i16 %9086, i32 11
  %9088 = extractelement <64 x i32> %9027, i32 12
  %9089 = sext i32 %9088 to i64
  %9090 = getelementptr inbounds i16, i16* %77, i64 %9089
  %9091 = load i16, i16* %9090, align 2, !tbaa !386
  %9092 = insertelement <64 x i16> %9087, i16 %9091, i32 12
  %9093 = extractelement <64 x i32> %9027, i32 13
  %9094 = sext i32 %9093 to i64
  %9095 = getelementptr inbounds i16, i16* %77, i64 %9094
  %9096 = load i16, i16* %9095, align 2, !tbaa !386
  %9097 = insertelement <64 x i16> %9092, i16 %9096, i32 13
  %9098 = extractelement <64 x i32> %9027, i32 14
  %9099 = sext i32 %9098 to i64
  %9100 = getelementptr inbounds i16, i16* %77, i64 %9099
  %9101 = load i16, i16* %9100, align 2, !tbaa !386
  %9102 = insertelement <64 x i16> %9097, i16 %9101, i32 14
  %9103 = extractelement <64 x i32> %9027, i32 15
  %9104 = sext i32 %9103 to i64
  %9105 = getelementptr inbounds i16, i16* %77, i64 %9104
  %9106 = load i16, i16* %9105, align 2, !tbaa !386
  %9107 = insertelement <64 x i16> %9102, i16 %9106, i32 15
  %9108 = extractelement <64 x i32> %9027, i32 16
  %9109 = sext i32 %9108 to i64
  %9110 = getelementptr inbounds i16, i16* %77, i64 %9109
  %9111 = load i16, i16* %9110, align 2, !tbaa !386
  %9112 = insertelement <64 x i16> %9107, i16 %9111, i32 16
  %9113 = extractelement <64 x i32> %9027, i32 17
  %9114 = sext i32 %9113 to i64
  %9115 = getelementptr inbounds i16, i16* %77, i64 %9114
  %9116 = load i16, i16* %9115, align 2, !tbaa !386
  %9117 = insertelement <64 x i16> %9112, i16 %9116, i32 17
  %9118 = extractelement <64 x i32> %9027, i32 18
  %9119 = sext i32 %9118 to i64
  %9120 = getelementptr inbounds i16, i16* %77, i64 %9119
  %9121 = load i16, i16* %9120, align 2, !tbaa !386
  %9122 = insertelement <64 x i16> %9117, i16 %9121, i32 18
  %9123 = extractelement <64 x i32> %9027, i32 19
  %9124 = sext i32 %9123 to i64
  %9125 = getelementptr inbounds i16, i16* %77, i64 %9124
  %9126 = load i16, i16* %9125, align 2, !tbaa !386
  %9127 = insertelement <64 x i16> %9122, i16 %9126, i32 19
  %9128 = extractelement <64 x i32> %9027, i32 20
  %9129 = sext i32 %9128 to i64
  %9130 = getelementptr inbounds i16, i16* %77, i64 %9129
  %9131 = load i16, i16* %9130, align 2, !tbaa !386
  %9132 = insertelement <64 x i16> %9127, i16 %9131, i32 20
  %9133 = extractelement <64 x i32> %9027, i32 21
  %9134 = sext i32 %9133 to i64
  %9135 = getelementptr inbounds i16, i16* %77, i64 %9134
  %9136 = load i16, i16* %9135, align 2, !tbaa !386
  %9137 = insertelement <64 x i16> %9132, i16 %9136, i32 21
  %9138 = extractelement <64 x i32> %9027, i32 22
  %9139 = sext i32 %9138 to i64
  %9140 = getelementptr inbounds i16, i16* %77, i64 %9139
  %9141 = load i16, i16* %9140, align 2, !tbaa !386
  %9142 = insertelement <64 x i16> %9137, i16 %9141, i32 22
  %9143 = extractelement <64 x i32> %9027, i32 23
  %9144 = sext i32 %9143 to i64
  %9145 = getelementptr inbounds i16, i16* %77, i64 %9144
  %9146 = load i16, i16* %9145, align 2, !tbaa !386
  %9147 = insertelement <64 x i16> %9142, i16 %9146, i32 23
  %9148 = extractelement <64 x i32> %9027, i32 24
  %9149 = sext i32 %9148 to i64
  %9150 = getelementptr inbounds i16, i16* %77, i64 %9149
  %9151 = load i16, i16* %9150, align 2, !tbaa !386
  %9152 = insertelement <64 x i16> %9147, i16 %9151, i32 24
  %9153 = extractelement <64 x i32> %9027, i32 25
  %9154 = sext i32 %9153 to i64
  %9155 = getelementptr inbounds i16, i16* %77, i64 %9154
  %9156 = load i16, i16* %9155, align 2, !tbaa !386
  %9157 = insertelement <64 x i16> %9152, i16 %9156, i32 25
  %9158 = extractelement <64 x i32> %9027, i32 26
  %9159 = sext i32 %9158 to i64
  %9160 = getelementptr inbounds i16, i16* %77, i64 %9159
  %9161 = load i16, i16* %9160, align 2, !tbaa !386
  %9162 = insertelement <64 x i16> %9157, i16 %9161, i32 26
  %9163 = extractelement <64 x i32> %9027, i32 27
  %9164 = sext i32 %9163 to i64
  %9165 = getelementptr inbounds i16, i16* %77, i64 %9164
  %9166 = load i16, i16* %9165, align 2, !tbaa !386
  %9167 = insertelement <64 x i16> %9162, i16 %9166, i32 27
  %9168 = extractelement <64 x i32> %9027, i32 28
  %9169 = sext i32 %9168 to i64
  %9170 = getelementptr inbounds i16, i16* %77, i64 %9169
  %9171 = load i16, i16* %9170, align 2, !tbaa !386
  %9172 = insertelement <64 x i16> %9167, i16 %9171, i32 28
  %9173 = extractelement <64 x i32> %9027, i32 29
  %9174 = sext i32 %9173 to i64
  %9175 = getelementptr inbounds i16, i16* %77, i64 %9174
  %9176 = load i16, i16* %9175, align 2, !tbaa !386
  %9177 = insertelement <64 x i16> %9172, i16 %9176, i32 29
  %9178 = extractelement <64 x i32> %9027, i32 30
  %9179 = sext i32 %9178 to i64
  %9180 = getelementptr inbounds i16, i16* %77, i64 %9179
  %9181 = load i16, i16* %9180, align 2, !tbaa !386
  %9182 = insertelement <64 x i16> %9177, i16 %9181, i32 30
  %9183 = extractelement <64 x i32> %9027, i32 31
  %9184 = sext i32 %9183 to i64
  %9185 = getelementptr inbounds i16, i16* %77, i64 %9184
  %9186 = load i16, i16* %9185, align 2, !tbaa !386
  %9187 = insertelement <64 x i16> %9182, i16 %9186, i32 31
  %9188 = extractelement <64 x i32> %9027, i32 32
  %9189 = sext i32 %9188 to i64
  %9190 = getelementptr inbounds i16, i16* %77, i64 %9189
  %9191 = load i16, i16* %9190, align 2, !tbaa !386
  %9192 = insertelement <64 x i16> %9187, i16 %9191, i32 32
  %9193 = extractelement <64 x i32> %9027, i32 33
  %9194 = sext i32 %9193 to i64
  %9195 = getelementptr inbounds i16, i16* %77, i64 %9194
  %9196 = load i16, i16* %9195, align 2, !tbaa !386
  %9197 = insertelement <64 x i16> %9192, i16 %9196, i32 33
  %9198 = extractelement <64 x i32> %9027, i32 34
  %9199 = sext i32 %9198 to i64
  %9200 = getelementptr inbounds i16, i16* %77, i64 %9199
  %9201 = load i16, i16* %9200, align 2, !tbaa !386
  %9202 = insertelement <64 x i16> %9197, i16 %9201, i32 34
  %9203 = extractelement <64 x i32> %9027, i32 35
  %9204 = sext i32 %9203 to i64
  %9205 = getelementptr inbounds i16, i16* %77, i64 %9204
  %9206 = load i16, i16* %9205, align 2, !tbaa !386
  %9207 = insertelement <64 x i16> %9202, i16 %9206, i32 35
  %9208 = extractelement <64 x i32> %9027, i32 36
  %9209 = sext i32 %9208 to i64
  %9210 = getelementptr inbounds i16, i16* %77, i64 %9209
  %9211 = load i16, i16* %9210, align 2, !tbaa !386
  %9212 = insertelement <64 x i16> %9207, i16 %9211, i32 36
  %9213 = extractelement <64 x i32> %9027, i32 37
  %9214 = sext i32 %9213 to i64
  %9215 = getelementptr inbounds i16, i16* %77, i64 %9214
  %9216 = load i16, i16* %9215, align 2, !tbaa !386
  %9217 = insertelement <64 x i16> %9212, i16 %9216, i32 37
  %9218 = extractelement <64 x i32> %9027, i32 38
  %9219 = sext i32 %9218 to i64
  %9220 = getelementptr inbounds i16, i16* %77, i64 %9219
  %9221 = load i16, i16* %9220, align 2, !tbaa !386
  %9222 = insertelement <64 x i16> %9217, i16 %9221, i32 38
  %9223 = extractelement <64 x i32> %9027, i32 39
  %9224 = sext i32 %9223 to i64
  %9225 = getelementptr inbounds i16, i16* %77, i64 %9224
  %9226 = load i16, i16* %9225, align 2, !tbaa !386
  %9227 = insertelement <64 x i16> %9222, i16 %9226, i32 39
  %9228 = extractelement <64 x i32> %9027, i32 40
  %9229 = sext i32 %9228 to i64
  %9230 = getelementptr inbounds i16, i16* %77, i64 %9229
  %9231 = load i16, i16* %9230, align 2, !tbaa !386
  %9232 = insertelement <64 x i16> %9227, i16 %9231, i32 40
  %9233 = extractelement <64 x i32> %9027, i32 41
  %9234 = sext i32 %9233 to i64
  %9235 = getelementptr inbounds i16, i16* %77, i64 %9234
  %9236 = load i16, i16* %9235, align 2, !tbaa !386
  %9237 = insertelement <64 x i16> %9232, i16 %9236, i32 41
  %9238 = extractelement <64 x i32> %9027, i32 42
  %9239 = sext i32 %9238 to i64
  %9240 = getelementptr inbounds i16, i16* %77, i64 %9239
  %9241 = load i16, i16* %9240, align 2, !tbaa !386
  %9242 = insertelement <64 x i16> %9237, i16 %9241, i32 42
  %9243 = extractelement <64 x i32> %9027, i32 43
  %9244 = sext i32 %9243 to i64
  %9245 = getelementptr inbounds i16, i16* %77, i64 %9244
  %9246 = load i16, i16* %9245, align 2, !tbaa !386
  %9247 = insertelement <64 x i16> %9242, i16 %9246, i32 43
  %9248 = extractelement <64 x i32> %9027, i32 44
  %9249 = sext i32 %9248 to i64
  %9250 = getelementptr inbounds i16, i16* %77, i64 %9249
  %9251 = load i16, i16* %9250, align 2, !tbaa !386
  %9252 = insertelement <64 x i16> %9247, i16 %9251, i32 44
  %9253 = extractelement <64 x i32> %9027, i32 45
  %9254 = sext i32 %9253 to i64
  %9255 = getelementptr inbounds i16, i16* %77, i64 %9254
  %9256 = load i16, i16* %9255, align 2, !tbaa !386
  %9257 = insertelement <64 x i16> %9252, i16 %9256, i32 45
  %9258 = extractelement <64 x i32> %9027, i32 46
  %9259 = sext i32 %9258 to i64
  %9260 = getelementptr inbounds i16, i16* %77, i64 %9259
  %9261 = load i16, i16* %9260, align 2, !tbaa !386
  %9262 = insertelement <64 x i16> %9257, i16 %9261, i32 46
  %9263 = extractelement <64 x i32> %9027, i32 47
  %9264 = sext i32 %9263 to i64
  %9265 = getelementptr inbounds i16, i16* %77, i64 %9264
  %9266 = load i16, i16* %9265, align 2, !tbaa !386
  %9267 = insertelement <64 x i16> %9262, i16 %9266, i32 47
  %9268 = extractelement <64 x i32> %9027, i32 48
  %9269 = sext i32 %9268 to i64
  %9270 = getelementptr inbounds i16, i16* %77, i64 %9269
  %9271 = load i16, i16* %9270, align 2, !tbaa !386
  %9272 = insertelement <64 x i16> %9267, i16 %9271, i32 48
  %9273 = extractelement <64 x i32> %9027, i32 49
  %9274 = sext i32 %9273 to i64
  %9275 = getelementptr inbounds i16, i16* %77, i64 %9274
  %9276 = load i16, i16* %9275, align 2, !tbaa !386
  %9277 = insertelement <64 x i16> %9272, i16 %9276, i32 49
  %9278 = extractelement <64 x i32> %9027, i32 50
  %9279 = sext i32 %9278 to i64
  %9280 = getelementptr inbounds i16, i16* %77, i64 %9279
  %9281 = load i16, i16* %9280, align 2, !tbaa !386
  %9282 = insertelement <64 x i16> %9277, i16 %9281, i32 50
  %9283 = extractelement <64 x i32> %9027, i32 51
  %9284 = sext i32 %9283 to i64
  %9285 = getelementptr inbounds i16, i16* %77, i64 %9284
  %9286 = load i16, i16* %9285, align 2, !tbaa !386
  %9287 = insertelement <64 x i16> %9282, i16 %9286, i32 51
  %9288 = extractelement <64 x i32> %9027, i32 52
  %9289 = sext i32 %9288 to i64
  %9290 = getelementptr inbounds i16, i16* %77, i64 %9289
  %9291 = load i16, i16* %9290, align 2, !tbaa !386
  %9292 = insertelement <64 x i16> %9287, i16 %9291, i32 52
  %9293 = extractelement <64 x i32> %9027, i32 53
  %9294 = sext i32 %9293 to i64
  %9295 = getelementptr inbounds i16, i16* %77, i64 %9294
  %9296 = load i16, i16* %9295, align 2, !tbaa !386
  %9297 = insertelement <64 x i16> %9292, i16 %9296, i32 53
  %9298 = extractelement <64 x i32> %9027, i32 54
  %9299 = sext i32 %9298 to i64
  %9300 = getelementptr inbounds i16, i16* %77, i64 %9299
  %9301 = load i16, i16* %9300, align 2, !tbaa !386
  %9302 = insertelement <64 x i16> %9297, i16 %9301, i32 54
  %9303 = extractelement <64 x i32> %9027, i32 55
  %9304 = sext i32 %9303 to i64
  %9305 = getelementptr inbounds i16, i16* %77, i64 %9304
  %9306 = load i16, i16* %9305, align 2, !tbaa !386
  %9307 = insertelement <64 x i16> %9302, i16 %9306, i32 55
  %9308 = extractelement <64 x i32> %9027, i32 56
  %9309 = sext i32 %9308 to i64
  %9310 = getelementptr inbounds i16, i16* %77, i64 %9309
  %9311 = load i16, i16* %9310, align 2, !tbaa !386
  %9312 = insertelement <64 x i16> %9307, i16 %9311, i32 56
  %9313 = extractelement <64 x i32> %9027, i32 57
  %9314 = sext i32 %9313 to i64
  %9315 = getelementptr inbounds i16, i16* %77, i64 %9314
  %9316 = load i16, i16* %9315, align 2, !tbaa !386
  %9317 = insertelement <64 x i16> %9312, i16 %9316, i32 57
  %9318 = extractelement <64 x i32> %9027, i32 58
  %9319 = sext i32 %9318 to i64
  %9320 = getelementptr inbounds i16, i16* %77, i64 %9319
  %9321 = load i16, i16* %9320, align 2, !tbaa !386
  %9322 = insertelement <64 x i16> %9317, i16 %9321, i32 58
  %9323 = extractelement <64 x i32> %9027, i32 59
  %9324 = sext i32 %9323 to i64
  %9325 = getelementptr inbounds i16, i16* %77, i64 %9324
  %9326 = load i16, i16* %9325, align 2, !tbaa !386
  %9327 = insertelement <64 x i16> %9322, i16 %9326, i32 59
  %9328 = extractelement <64 x i32> %9027, i32 60
  %9329 = sext i32 %9328 to i64
  %9330 = getelementptr inbounds i16, i16* %77, i64 %9329
  %9331 = load i16, i16* %9330, align 2, !tbaa !386
  %9332 = insertelement <64 x i16> %9327, i16 %9331, i32 60
  %9333 = extractelement <64 x i32> %9027, i32 61
  %9334 = sext i32 %9333 to i64
  %9335 = getelementptr inbounds i16, i16* %77, i64 %9334
  %9336 = load i16, i16* %9335, align 2, !tbaa !386
  %9337 = insertelement <64 x i16> %9332, i16 %9336, i32 61
  %9338 = extractelement <64 x i32> %9027, i32 62
  %9339 = sext i32 %9338 to i64
  %9340 = getelementptr inbounds i16, i16* %77, i64 %9339
  %9341 = load i16, i16* %9340, align 2, !tbaa !386
  %9342 = insertelement <64 x i16> %9337, i16 %9341, i32 62
  %9343 = extractelement <64 x i32> %9027, i32 63
  %9344 = sext i32 %9343 to i64
  %9345 = getelementptr inbounds i16, i16* %77, i64 %9344
  %9346 = load i16, i16* %9345, align 2, !tbaa !386
  %9347 = insertelement <64 x i16> %9342, i16 %9346, i32 63
  %9348 = add nsw <64 x i32> %7390, %t247
  %9349 = extractelement <64 x i32> %9348, i32 0
  %9350 = sext i32 %9349 to i64
  %9351 = getelementptr inbounds i16, i16* %77, i64 %9350
  %9352 = load i16, i16* %9351, align 2, !tbaa !386
  %9353 = insertelement <64 x i16> undef, i16 %9352, i32 0
  %9354 = extractelement <64 x i32> %9348, i32 1
  %9355 = sext i32 %9354 to i64
  %9356 = getelementptr inbounds i16, i16* %77, i64 %9355
  %9357 = load i16, i16* %9356, align 2, !tbaa !386
  %9358 = insertelement <64 x i16> %9353, i16 %9357, i32 1
  %9359 = extractelement <64 x i32> %9348, i32 2
  %9360 = sext i32 %9359 to i64
  %9361 = getelementptr inbounds i16, i16* %77, i64 %9360
  %9362 = load i16, i16* %9361, align 2, !tbaa !386
  %9363 = insertelement <64 x i16> %9358, i16 %9362, i32 2
  %9364 = extractelement <64 x i32> %9348, i32 3
  %9365 = sext i32 %9364 to i64
  %9366 = getelementptr inbounds i16, i16* %77, i64 %9365
  %9367 = load i16, i16* %9366, align 2, !tbaa !386
  %9368 = insertelement <64 x i16> %9363, i16 %9367, i32 3
  %9369 = extractelement <64 x i32> %9348, i32 4
  %9370 = sext i32 %9369 to i64
  %9371 = getelementptr inbounds i16, i16* %77, i64 %9370
  %9372 = load i16, i16* %9371, align 2, !tbaa !386
  %9373 = insertelement <64 x i16> %9368, i16 %9372, i32 4
  %9374 = extractelement <64 x i32> %9348, i32 5
  %9375 = sext i32 %9374 to i64
  %9376 = getelementptr inbounds i16, i16* %77, i64 %9375
  %9377 = load i16, i16* %9376, align 2, !tbaa !386
  %9378 = insertelement <64 x i16> %9373, i16 %9377, i32 5
  %9379 = extractelement <64 x i32> %9348, i32 6
  %9380 = sext i32 %9379 to i64
  %9381 = getelementptr inbounds i16, i16* %77, i64 %9380
  %9382 = load i16, i16* %9381, align 2, !tbaa !386
  %9383 = insertelement <64 x i16> %9378, i16 %9382, i32 6
  %9384 = extractelement <64 x i32> %9348, i32 7
  %9385 = sext i32 %9384 to i64
  %9386 = getelementptr inbounds i16, i16* %77, i64 %9385
  %9387 = load i16, i16* %9386, align 2, !tbaa !386
  %9388 = insertelement <64 x i16> %9383, i16 %9387, i32 7
  %9389 = extractelement <64 x i32> %9348, i32 8
  %9390 = sext i32 %9389 to i64
  %9391 = getelementptr inbounds i16, i16* %77, i64 %9390
  %9392 = load i16, i16* %9391, align 2, !tbaa !386
  %9393 = insertelement <64 x i16> %9388, i16 %9392, i32 8
  %9394 = extractelement <64 x i32> %9348, i32 9
  %9395 = sext i32 %9394 to i64
  %9396 = getelementptr inbounds i16, i16* %77, i64 %9395
  %9397 = load i16, i16* %9396, align 2, !tbaa !386
  %9398 = insertelement <64 x i16> %9393, i16 %9397, i32 9
  %9399 = extractelement <64 x i32> %9348, i32 10
  %9400 = sext i32 %9399 to i64
  %9401 = getelementptr inbounds i16, i16* %77, i64 %9400
  %9402 = load i16, i16* %9401, align 2, !tbaa !386
  %9403 = insertelement <64 x i16> %9398, i16 %9402, i32 10
  %9404 = extractelement <64 x i32> %9348, i32 11
  %9405 = sext i32 %9404 to i64
  %9406 = getelementptr inbounds i16, i16* %77, i64 %9405
  %9407 = load i16, i16* %9406, align 2, !tbaa !386
  %9408 = insertelement <64 x i16> %9403, i16 %9407, i32 11
  %9409 = extractelement <64 x i32> %9348, i32 12
  %9410 = sext i32 %9409 to i64
  %9411 = getelementptr inbounds i16, i16* %77, i64 %9410
  %9412 = load i16, i16* %9411, align 2, !tbaa !386
  %9413 = insertelement <64 x i16> %9408, i16 %9412, i32 12
  %9414 = extractelement <64 x i32> %9348, i32 13
  %9415 = sext i32 %9414 to i64
  %9416 = getelementptr inbounds i16, i16* %77, i64 %9415
  %9417 = load i16, i16* %9416, align 2, !tbaa !386
  %9418 = insertelement <64 x i16> %9413, i16 %9417, i32 13
  %9419 = extractelement <64 x i32> %9348, i32 14
  %9420 = sext i32 %9419 to i64
  %9421 = getelementptr inbounds i16, i16* %77, i64 %9420
  %9422 = load i16, i16* %9421, align 2, !tbaa !386
  %9423 = insertelement <64 x i16> %9418, i16 %9422, i32 14
  %9424 = extractelement <64 x i32> %9348, i32 15
  %9425 = sext i32 %9424 to i64
  %9426 = getelementptr inbounds i16, i16* %77, i64 %9425
  %9427 = load i16, i16* %9426, align 2, !tbaa !386
  %9428 = insertelement <64 x i16> %9423, i16 %9427, i32 15
  %9429 = extractelement <64 x i32> %9348, i32 16
  %9430 = sext i32 %9429 to i64
  %9431 = getelementptr inbounds i16, i16* %77, i64 %9430
  %9432 = load i16, i16* %9431, align 2, !tbaa !386
  %9433 = insertelement <64 x i16> %9428, i16 %9432, i32 16
  %9434 = extractelement <64 x i32> %9348, i32 17
  %9435 = sext i32 %9434 to i64
  %9436 = getelementptr inbounds i16, i16* %77, i64 %9435
  %9437 = load i16, i16* %9436, align 2, !tbaa !386
  %9438 = insertelement <64 x i16> %9433, i16 %9437, i32 17
  %9439 = extractelement <64 x i32> %9348, i32 18
  %9440 = sext i32 %9439 to i64
  %9441 = getelementptr inbounds i16, i16* %77, i64 %9440
  %9442 = load i16, i16* %9441, align 2, !tbaa !386
  %9443 = insertelement <64 x i16> %9438, i16 %9442, i32 18
  %9444 = extractelement <64 x i32> %9348, i32 19
  %9445 = sext i32 %9444 to i64
  %9446 = getelementptr inbounds i16, i16* %77, i64 %9445
  %9447 = load i16, i16* %9446, align 2, !tbaa !386
  %9448 = insertelement <64 x i16> %9443, i16 %9447, i32 19
  %9449 = extractelement <64 x i32> %9348, i32 20
  %9450 = sext i32 %9449 to i64
  %9451 = getelementptr inbounds i16, i16* %77, i64 %9450
  %9452 = load i16, i16* %9451, align 2, !tbaa !386
  %9453 = insertelement <64 x i16> %9448, i16 %9452, i32 20
  %9454 = extractelement <64 x i32> %9348, i32 21
  %9455 = sext i32 %9454 to i64
  %9456 = getelementptr inbounds i16, i16* %77, i64 %9455
  %9457 = load i16, i16* %9456, align 2, !tbaa !386
  %9458 = insertelement <64 x i16> %9453, i16 %9457, i32 21
  %9459 = extractelement <64 x i32> %9348, i32 22
  %9460 = sext i32 %9459 to i64
  %9461 = getelementptr inbounds i16, i16* %77, i64 %9460
  %9462 = load i16, i16* %9461, align 2, !tbaa !386
  %9463 = insertelement <64 x i16> %9458, i16 %9462, i32 22
  %9464 = extractelement <64 x i32> %9348, i32 23
  %9465 = sext i32 %9464 to i64
  %9466 = getelementptr inbounds i16, i16* %77, i64 %9465
  %9467 = load i16, i16* %9466, align 2, !tbaa !386
  %9468 = insertelement <64 x i16> %9463, i16 %9467, i32 23
  %9469 = extractelement <64 x i32> %9348, i32 24
  %9470 = sext i32 %9469 to i64
  %9471 = getelementptr inbounds i16, i16* %77, i64 %9470
  %9472 = load i16, i16* %9471, align 2, !tbaa !386
  %9473 = insertelement <64 x i16> %9468, i16 %9472, i32 24
  %9474 = extractelement <64 x i32> %9348, i32 25
  %9475 = sext i32 %9474 to i64
  %9476 = getelementptr inbounds i16, i16* %77, i64 %9475
  %9477 = load i16, i16* %9476, align 2, !tbaa !386
  %9478 = insertelement <64 x i16> %9473, i16 %9477, i32 25
  %9479 = extractelement <64 x i32> %9348, i32 26
  %9480 = sext i32 %9479 to i64
  %9481 = getelementptr inbounds i16, i16* %77, i64 %9480
  %9482 = load i16, i16* %9481, align 2, !tbaa !386
  %9483 = insertelement <64 x i16> %9478, i16 %9482, i32 26
  %9484 = extractelement <64 x i32> %9348, i32 27
  %9485 = sext i32 %9484 to i64
  %9486 = getelementptr inbounds i16, i16* %77, i64 %9485
  %9487 = load i16, i16* %9486, align 2, !tbaa !386
  %9488 = insertelement <64 x i16> %9483, i16 %9487, i32 27
  %9489 = extractelement <64 x i32> %9348, i32 28
  %9490 = sext i32 %9489 to i64
  %9491 = getelementptr inbounds i16, i16* %77, i64 %9490
  %9492 = load i16, i16* %9491, align 2, !tbaa !386
  %9493 = insertelement <64 x i16> %9488, i16 %9492, i32 28
  %9494 = extractelement <64 x i32> %9348, i32 29
  %9495 = sext i32 %9494 to i64
  %9496 = getelementptr inbounds i16, i16* %77, i64 %9495
  %9497 = load i16, i16* %9496, align 2, !tbaa !386
  %9498 = insertelement <64 x i16> %9493, i16 %9497, i32 29
  %9499 = extractelement <64 x i32> %9348, i32 30
  %9500 = sext i32 %9499 to i64
  %9501 = getelementptr inbounds i16, i16* %77, i64 %9500
  %9502 = load i16, i16* %9501, align 2, !tbaa !386
  %9503 = insertelement <64 x i16> %9498, i16 %9502, i32 30
  %9504 = extractelement <64 x i32> %9348, i32 31
  %9505 = sext i32 %9504 to i64
  %9506 = getelementptr inbounds i16, i16* %77, i64 %9505
  %9507 = load i16, i16* %9506, align 2, !tbaa !386
  %9508 = insertelement <64 x i16> %9503, i16 %9507, i32 31
  %9509 = extractelement <64 x i32> %9348, i32 32
  %9510 = sext i32 %9509 to i64
  %9511 = getelementptr inbounds i16, i16* %77, i64 %9510
  %9512 = load i16, i16* %9511, align 2, !tbaa !386
  %9513 = insertelement <64 x i16> %9508, i16 %9512, i32 32
  %9514 = extractelement <64 x i32> %9348, i32 33
  %9515 = sext i32 %9514 to i64
  %9516 = getelementptr inbounds i16, i16* %77, i64 %9515
  %9517 = load i16, i16* %9516, align 2, !tbaa !386
  %9518 = insertelement <64 x i16> %9513, i16 %9517, i32 33
  %9519 = extractelement <64 x i32> %9348, i32 34
  %9520 = sext i32 %9519 to i64
  %9521 = getelementptr inbounds i16, i16* %77, i64 %9520
  %9522 = load i16, i16* %9521, align 2, !tbaa !386
  %9523 = insertelement <64 x i16> %9518, i16 %9522, i32 34
  %9524 = extractelement <64 x i32> %9348, i32 35
  %9525 = sext i32 %9524 to i64
  %9526 = getelementptr inbounds i16, i16* %77, i64 %9525
  %9527 = load i16, i16* %9526, align 2, !tbaa !386
  %9528 = insertelement <64 x i16> %9523, i16 %9527, i32 35
  %9529 = extractelement <64 x i32> %9348, i32 36
  %9530 = sext i32 %9529 to i64
  %9531 = getelementptr inbounds i16, i16* %77, i64 %9530
  %9532 = load i16, i16* %9531, align 2, !tbaa !386
  %9533 = insertelement <64 x i16> %9528, i16 %9532, i32 36
  %9534 = extractelement <64 x i32> %9348, i32 37
  %9535 = sext i32 %9534 to i64
  %9536 = getelementptr inbounds i16, i16* %77, i64 %9535
  %9537 = load i16, i16* %9536, align 2, !tbaa !386
  %9538 = insertelement <64 x i16> %9533, i16 %9537, i32 37
  %9539 = extractelement <64 x i32> %9348, i32 38
  %9540 = sext i32 %9539 to i64
  %9541 = getelementptr inbounds i16, i16* %77, i64 %9540
  %9542 = load i16, i16* %9541, align 2, !tbaa !386
  %9543 = insertelement <64 x i16> %9538, i16 %9542, i32 38
  %9544 = extractelement <64 x i32> %9348, i32 39
  %9545 = sext i32 %9544 to i64
  %9546 = getelementptr inbounds i16, i16* %77, i64 %9545
  %9547 = load i16, i16* %9546, align 2, !tbaa !386
  %9548 = insertelement <64 x i16> %9543, i16 %9547, i32 39
  %9549 = extractelement <64 x i32> %9348, i32 40
  %9550 = sext i32 %9549 to i64
  %9551 = getelementptr inbounds i16, i16* %77, i64 %9550
  %9552 = load i16, i16* %9551, align 2, !tbaa !386
  %9553 = insertelement <64 x i16> %9548, i16 %9552, i32 40
  %9554 = extractelement <64 x i32> %9348, i32 41
  %9555 = sext i32 %9554 to i64
  %9556 = getelementptr inbounds i16, i16* %77, i64 %9555
  %9557 = load i16, i16* %9556, align 2, !tbaa !386
  %9558 = insertelement <64 x i16> %9553, i16 %9557, i32 41
  %9559 = extractelement <64 x i32> %9348, i32 42
  %9560 = sext i32 %9559 to i64
  %9561 = getelementptr inbounds i16, i16* %77, i64 %9560
  %9562 = load i16, i16* %9561, align 2, !tbaa !386
  %9563 = insertelement <64 x i16> %9558, i16 %9562, i32 42
  %9564 = extractelement <64 x i32> %9348, i32 43
  %9565 = sext i32 %9564 to i64
  %9566 = getelementptr inbounds i16, i16* %77, i64 %9565
  %9567 = load i16, i16* %9566, align 2, !tbaa !386
  %9568 = insertelement <64 x i16> %9563, i16 %9567, i32 43
  %9569 = extractelement <64 x i32> %9348, i32 44
  %9570 = sext i32 %9569 to i64
  %9571 = getelementptr inbounds i16, i16* %77, i64 %9570
  %9572 = load i16, i16* %9571, align 2, !tbaa !386
  %9573 = insertelement <64 x i16> %9568, i16 %9572, i32 44
  %9574 = extractelement <64 x i32> %9348, i32 45
  %9575 = sext i32 %9574 to i64
  %9576 = getelementptr inbounds i16, i16* %77, i64 %9575
  %9577 = load i16, i16* %9576, align 2, !tbaa !386
  %9578 = insertelement <64 x i16> %9573, i16 %9577, i32 45
  %9579 = extractelement <64 x i32> %9348, i32 46
  %9580 = sext i32 %9579 to i64
  %9581 = getelementptr inbounds i16, i16* %77, i64 %9580
  %9582 = load i16, i16* %9581, align 2, !tbaa !386
  %9583 = insertelement <64 x i16> %9578, i16 %9582, i32 46
  %9584 = extractelement <64 x i32> %9348, i32 47
  %9585 = sext i32 %9584 to i64
  %9586 = getelementptr inbounds i16, i16* %77, i64 %9585
  %9587 = load i16, i16* %9586, align 2, !tbaa !386
  %9588 = insertelement <64 x i16> %9583, i16 %9587, i32 47
  %9589 = extractelement <64 x i32> %9348, i32 48
  %9590 = sext i32 %9589 to i64
  %9591 = getelementptr inbounds i16, i16* %77, i64 %9590
  %9592 = load i16, i16* %9591, align 2, !tbaa !386
  %9593 = insertelement <64 x i16> %9588, i16 %9592, i32 48
  %9594 = extractelement <64 x i32> %9348, i32 49
  %9595 = sext i32 %9594 to i64
  %9596 = getelementptr inbounds i16, i16* %77, i64 %9595
  %9597 = load i16, i16* %9596, align 2, !tbaa !386
  %9598 = insertelement <64 x i16> %9593, i16 %9597, i32 49
  %9599 = extractelement <64 x i32> %9348, i32 50
  %9600 = sext i32 %9599 to i64
  %9601 = getelementptr inbounds i16, i16* %77, i64 %9600
  %9602 = load i16, i16* %9601, align 2, !tbaa !386
  %9603 = insertelement <64 x i16> %9598, i16 %9602, i32 50
  %9604 = extractelement <64 x i32> %9348, i32 51
  %9605 = sext i32 %9604 to i64
  %9606 = getelementptr inbounds i16, i16* %77, i64 %9605
  %9607 = load i16, i16* %9606, align 2, !tbaa !386
  %9608 = insertelement <64 x i16> %9603, i16 %9607, i32 51
  %9609 = extractelement <64 x i32> %9348, i32 52
  %9610 = sext i32 %9609 to i64
  %9611 = getelementptr inbounds i16, i16* %77, i64 %9610
  %9612 = load i16, i16* %9611, align 2, !tbaa !386
  %9613 = insertelement <64 x i16> %9608, i16 %9612, i32 52
  %9614 = extractelement <64 x i32> %9348, i32 53
  %9615 = sext i32 %9614 to i64
  %9616 = getelementptr inbounds i16, i16* %77, i64 %9615
  %9617 = load i16, i16* %9616, align 2, !tbaa !386
  %9618 = insertelement <64 x i16> %9613, i16 %9617, i32 53
  %9619 = extractelement <64 x i32> %9348, i32 54
  %9620 = sext i32 %9619 to i64
  %9621 = getelementptr inbounds i16, i16* %77, i64 %9620
  %9622 = load i16, i16* %9621, align 2, !tbaa !386
  %9623 = insertelement <64 x i16> %9618, i16 %9622, i32 54
  %9624 = extractelement <64 x i32> %9348, i32 55
  %9625 = sext i32 %9624 to i64
  %9626 = getelementptr inbounds i16, i16* %77, i64 %9625
  %9627 = load i16, i16* %9626, align 2, !tbaa !386
  %9628 = insertelement <64 x i16> %9623, i16 %9627, i32 55
  %9629 = extractelement <64 x i32> %9348, i32 56
  %9630 = sext i32 %9629 to i64
  %9631 = getelementptr inbounds i16, i16* %77, i64 %9630
  %9632 = load i16, i16* %9631, align 2, !tbaa !386
  %9633 = insertelement <64 x i16> %9628, i16 %9632, i32 56
  %9634 = extractelement <64 x i32> %9348, i32 57
  %9635 = sext i32 %9634 to i64
  %9636 = getelementptr inbounds i16, i16* %77, i64 %9635
  %9637 = load i16, i16* %9636, align 2, !tbaa !386
  %9638 = insertelement <64 x i16> %9633, i16 %9637, i32 57
  %9639 = extractelement <64 x i32> %9348, i32 58
  %9640 = sext i32 %9639 to i64
  %9641 = getelementptr inbounds i16, i16* %77, i64 %9640
  %9642 = load i16, i16* %9641, align 2, !tbaa !386
  %9643 = insertelement <64 x i16> %9638, i16 %9642, i32 58
  %9644 = extractelement <64 x i32> %9348, i32 59
  %9645 = sext i32 %9644 to i64
  %9646 = getelementptr inbounds i16, i16* %77, i64 %9645
  %9647 = load i16, i16* %9646, align 2, !tbaa !386
  %9648 = insertelement <64 x i16> %9643, i16 %9647, i32 59
  %9649 = extractelement <64 x i32> %9348, i32 60
  %9650 = sext i32 %9649 to i64
  %9651 = getelementptr inbounds i16, i16* %77, i64 %9650
  %9652 = load i16, i16* %9651, align 2, !tbaa !386
  %9653 = insertelement <64 x i16> %9648, i16 %9652, i32 60
  %9654 = extractelement <64 x i32> %9348, i32 61
  %9655 = sext i32 %9654 to i64
  %9656 = getelementptr inbounds i16, i16* %77, i64 %9655
  %9657 = load i16, i16* %9656, align 2, !tbaa !386
  %9658 = insertelement <64 x i16> %9653, i16 %9657, i32 61
  %9659 = extractelement <64 x i32> %9348, i32 62
  %9660 = sext i32 %9659 to i64
  %9661 = getelementptr inbounds i16, i16* %77, i64 %9660
  %9662 = load i16, i16* %9661, align 2, !tbaa !386
  %9663 = insertelement <64 x i16> %9658, i16 %9662, i32 62
  %9664 = extractelement <64 x i32> %9348, i32 63
  %9665 = sext i32 %9664 to i64
  %9666 = getelementptr inbounds i16, i16* %77, i64 %9665
  %9667 = load i16, i16* %9666, align 2, !tbaa !386
  %9668 = insertelement <64 x i16> %9663, i16 %9667, i32 63
  %9669 = add <64 x i16> %8063, %7742
  %9670 = add <64 x i16> %9669, %8384
  %9671 = add <64 x i16> %9670, %8705
  %9672 = add <64 x i16> %9671, %9026
  %9673 = add <64 x i16> %9672, %9347
  %9674 = add <64 x i16> %9673, %9668
  %9675 = shufflevector <64 x i16> %9674, <64 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %9676 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9675, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %9677 = shufflevector <64 x i16> %9674, <64 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %9678 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9677, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %9679 = shufflevector <64 x i16> %9674, <64 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %9680 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9679, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %9681 = shufflevector <64 x i16> %9674, <64 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %9682 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9681, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %9683 = shufflevector <64 x i16> %9674, <64 x i16> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %9684 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9683, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %9685 = shufflevector <64 x i16> %9674, <64 x i16> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %9686 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9685, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %9687 = shufflevector <64 x i16> %9674, <64 x i16> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %9688 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9687, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %9689 = shufflevector <64 x i16> %9674, <64 x i16> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %9690 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9689, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %9691 = shufflevector <64 x i16> %9674, <64 x i16> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %9692 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9691, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %9693 = shufflevector <64 x i16> %9674, <64 x i16> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %9694 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9693, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %9695 = shufflevector <64 x i16> %9674, <64 x i16> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %9696 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9695, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %9697 = shufflevector <64 x i16> %9674, <64 x i16> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %9698 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9697, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %9699 = shufflevector <64 x i16> %9674, <64 x i16> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %9700 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9699, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %9701 = shufflevector <64 x i16> %9674, <64 x i16> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %9702 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9701, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %9703 = shufflevector <64 x i16> %9674, <64 x i16> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %9704 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9703, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %9705 = shufflevector <64 x i16> %9674, <64 x i16> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %9706 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %9705, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %9707 = shufflevector <4 x i32> %9676, <4 x i32> %9678, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9708 = shufflevector <4 x i32> %9680, <4 x i32> %9682, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9709 = shufflevector <4 x i32> %9684, <4 x i32> %9686, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9710 = shufflevector <4 x i32> %9688, <4 x i32> %9690, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9711 = shufflevector <4 x i32> %9692, <4 x i32> %9694, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9712 = shufflevector <4 x i32> %9696, <4 x i32> %9698, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9713 = shufflevector <4 x i32> %9700, <4 x i32> %9702, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9714 = shufflevector <4 x i32> %9704, <4 x i32> %9706, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9715 = shufflevector <8 x i32> %9707, <8 x i32> %9708, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9716 = shufflevector <8 x i32> %9709, <8 x i32> %9710, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9717 = shufflevector <8 x i32> %9711, <8 x i32> %9712, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9718 = shufflevector <8 x i32> %9713, <8 x i32> %9714, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9719 = shufflevector <16 x i32> %9715, <16 x i32> %9716, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9720 = shufflevector <16 x i32> %9717, <16 x i32> %9718, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9721 = shufflevector <32 x i32> %9719, <32 x i32> %9720, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %9722 = lshr <64 x i32> %9721, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %9723 = trunc <64 x i32> %9722 to <64 x i16>
  %9724 = shufflevector <64 x i16> %9723, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9725 = shufflevector <64 x i16> %9674, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9726 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %9724, <8 x i16> %9725)
  %9727 = shufflevector <64 x i16> %9723, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9728 = shufflevector <64 x i16> %9674, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9729 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %9727, <8 x i16> %9728)
  %9730 = shufflevector <64 x i16> %9723, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %9731 = shufflevector <64 x i16> %9674, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %9732 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %9730, <8 x i16> %9731)
  %9733 = shufflevector <64 x i16> %9723, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9734 = shufflevector <64 x i16> %9674, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9735 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %9733, <8 x i16> %9734)
  %9736 = shufflevector <64 x i16> %9723, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %9737 = shufflevector <64 x i16> %9674, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %9738 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %9736, <8 x i16> %9737)
  %9739 = shufflevector <64 x i16> %9723, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %9740 = shufflevector <64 x i16> %9674, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %9741 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %9739, <8 x i16> %9740)
  %9742 = shufflevector <64 x i16> %9723, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %9743 = shufflevector <64 x i16> %9674, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %9744 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %9742, <8 x i16> %9743)
  %9745 = shufflevector <64 x i16> %9723, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %9746 = shufflevector <64 x i16> %9674, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %9747 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %9745, <8 x i16> %9746)
  %9748 = shufflevector <8 x i16> %9726, <8 x i16> %9729, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9749 = shufflevector <8 x i16> %9732, <8 x i16> %9735, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9750 = shufflevector <8 x i16> %9738, <8 x i16> %9741, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9751 = shufflevector <8 x i16> %9744, <8 x i16> %9747, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9752 = shufflevector <16 x i16> %9748, <16 x i16> %9749, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9753 = shufflevector <16 x i16> %9750, <16 x i16> %9751, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9754 = shufflevector <32 x i16> %9752, <32 x i16> %9753, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %9755 = lshr <64 x i16> %9754, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %9756 = shufflevector <64 x i16> %9755, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9757 = and i32 %7415, 15
  %9758 = zext i32 %9757 to i64
  %9759 = mul nsw i64 %79, %9758
  %9760 = add nsw i64 %9759, %7391
  %9761 = getelementptr inbounds i16, i16* %blur_x, i64 %9760
  %9762 = bitcast i16* %9761 to <8 x i16>*
  store <8 x i16> %9756, <8 x i16>* %9762, align 2, !tbaa !389
  %9763 = shufflevector <64 x i16> %9755, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9764 = getelementptr inbounds i16, i16* %9761, i64 8
  %9765 = bitcast i16* %9764 to <8 x i16>*
  store <8 x i16> %9763, <8 x i16>* %9765, align 2, !tbaa !389
  %9766 = shufflevector <64 x i16> %9755, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %9767 = getelementptr inbounds i16, i16* %9761, i64 16
  %9768 = bitcast i16* %9767 to <8 x i16>*
  store <8 x i16> %9766, <8 x i16>* %9768, align 2, !tbaa !389
  %9769 = shufflevector <64 x i16> %9755, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9770 = getelementptr inbounds i16, i16* %9761, i64 24
  %9771 = bitcast i16* %9770 to <8 x i16>*
  store <8 x i16> %9769, <8 x i16>* %9771, align 2, !tbaa !389
  %9772 = shufflevector <64 x i16> %9755, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %9773 = getelementptr inbounds i16, i16* %9761, i64 32
  %9774 = bitcast i16* %9773 to <8 x i16>*
  store <8 x i16> %9772, <8 x i16>* %9774, align 2, !tbaa !389
  %9775 = shufflevector <64 x i16> %9755, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %9776 = getelementptr inbounds i16, i16* %9761, i64 40
  %9777 = bitcast i16* %9776 to <8 x i16>*
  store <8 x i16> %9775, <8 x i16>* %9777, align 2, !tbaa !389
  %9778 = shufflevector <64 x i16> %9755, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %9779 = getelementptr inbounds i16, i16* %9761, i64 48
  %9780 = bitcast i16* %9779 to <8 x i16>*
  store <8 x i16> %9778, <8 x i16>* %9780, align 2, !tbaa !389
  %9781 = shufflevector <64 x i16> %9755, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %9782 = getelementptr inbounds i16, i16* %9761, i64 56
  %9783 = bitcast i16* %9782 to <8 x i16>*
  store <8 x i16> %9781, <8 x i16>* %9783, align 2, !tbaa !389
  %9784 = add nuw nsw i32 %blur_x.s0.y.yi30, 1
  %.not162 = icmp eq i32 %9784, 4
  br i1 %.not162, label %"end for blur_x.s0.y.yi29", label %"for blur_x.s0.y.yi28"

"end for blur_x.s0.y.yi29":                       ; preds = %"for blur_x.s0.y.yi28"
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %.not163 = icmp eq i64 %indvars.iv.next, %85
  br i1 %.not163, label %"end for blur_x.s0.x.x25", label %"for blur_x.s0.x.x24"

after_bb31:                                       ; preds = %"for blur_y.s0.x.x35", %"end for blur_x.s0.x.x25"
  %indvars.iv.next198 = add nuw nsw i64 %indvars.iv197, 1
  %.not = icmp eq i64 %indvars.iv.next198, 134
  br i1 %.not, label %"end for blur_y.s0.y.yi.$n.rebased21", label %"for blur_y.s0.y.yi.$n.rebased20"

"for blur_y.s0.x.x35":                            ; preds = %"for blur_y.s0.x.x35.preheader", %"for blur_y.s0.x.x35"
  %blur_y.s0.x.x37 = phi i32 [ %10120, %"for blur_y.s0.x.x35" ], [ 0, %"for blur_y.s0.x.x35.preheader" ]
  %a11 = shl nsw i32 %blur_y.s0.x.x37, 6
  %9785 = icmp slt i32 %a11, %b13
  %blur_y.s0.x.v0.base = select i1 %9785, i32 %a11, i32 %b13
  %t212 = sub nsw i32 %blur_y.s0.x.v0.base, %t265
  %9786 = sext i32 %t212 to i64
  %9787 = add nsw i64 %7395, %9786
  %9788 = getelementptr inbounds i16, i16* %blur_x, i64 %9787
  %9789 = getelementptr inbounds i16, i16* %9788, i64 64
  %9790 = bitcast i16* %9789 to <8 x i16>*
  %9791 = load <8 x i16>, <8 x i16>* %9790, align 2, !tbaa !389
  %9792 = getelementptr inbounds i16, i16* %9788, i64 72
  %9793 = bitcast i16* %9792 to <8 x i16>*
  %9794 = load <8 x i16>, <8 x i16>* %9793, align 2, !tbaa !389
  %9795 = getelementptr inbounds i16, i16* %9788, i64 80
  %9796 = bitcast i16* %9795 to <8 x i16>*
  %9797 = load <8 x i16>, <8 x i16>* %9796, align 2, !tbaa !389
  %9798 = getelementptr inbounds i16, i16* %9788, i64 88
  %9799 = bitcast i16* %9798 to <8 x i16>*
  %9800 = load <8 x i16>, <8 x i16>* %9799, align 2, !tbaa !389
  %9801 = getelementptr inbounds i16, i16* %9788, i64 96
  %9802 = bitcast i16* %9801 to <8 x i16>*
  %9803 = load <8 x i16>, <8 x i16>* %9802, align 2, !tbaa !389
  %9804 = getelementptr inbounds i16, i16* %9788, i64 104
  %9805 = bitcast i16* %9804 to <8 x i16>*
  %9806 = load <8 x i16>, <8 x i16>* %9805, align 2, !tbaa !389
  %9807 = getelementptr inbounds i16, i16* %9788, i64 112
  %9808 = bitcast i16* %9807 to <8 x i16>*
  %9809 = load <8 x i16>, <8 x i16>* %9808, align 2, !tbaa !389
  %9810 = getelementptr inbounds i16, i16* %9788, i64 120
  %9811 = bitcast i16* %9810 to <8 x i16>*
  %9812 = load <8 x i16>, <8 x i16>* %9811, align 2, !tbaa !389
  %9813 = add nsw i64 %7398, %9786
  %9814 = getelementptr inbounds i16, i16* %blur_x, i64 %9813
  %9815 = getelementptr inbounds i16, i16* %9814, i64 64
  %9816 = bitcast i16* %9815 to <8 x i16>*
  %9817 = load <8 x i16>, <8 x i16>* %9816, align 2, !tbaa !389
  %9818 = getelementptr inbounds i16, i16* %9814, i64 72
  %9819 = bitcast i16* %9818 to <8 x i16>*
  %9820 = load <8 x i16>, <8 x i16>* %9819, align 2, !tbaa !389
  %9821 = getelementptr inbounds i16, i16* %9814, i64 80
  %9822 = bitcast i16* %9821 to <8 x i16>*
  %9823 = load <8 x i16>, <8 x i16>* %9822, align 2, !tbaa !389
  %9824 = getelementptr inbounds i16, i16* %9814, i64 88
  %9825 = bitcast i16* %9824 to <8 x i16>*
  %9826 = load <8 x i16>, <8 x i16>* %9825, align 2, !tbaa !389
  %9827 = getelementptr inbounds i16, i16* %9814, i64 96
  %9828 = bitcast i16* %9827 to <8 x i16>*
  %9829 = load <8 x i16>, <8 x i16>* %9828, align 2, !tbaa !389
  %9830 = getelementptr inbounds i16, i16* %9814, i64 104
  %9831 = bitcast i16* %9830 to <8 x i16>*
  %9832 = load <8 x i16>, <8 x i16>* %9831, align 2, !tbaa !389
  %9833 = getelementptr inbounds i16, i16* %9814, i64 112
  %9834 = bitcast i16* %9833 to <8 x i16>*
  %9835 = load <8 x i16>, <8 x i16>* %9834, align 2, !tbaa !389
  %9836 = getelementptr inbounds i16, i16* %9814, i64 120
  %9837 = bitcast i16* %9836 to <8 x i16>*
  %9838 = load <8 x i16>, <8 x i16>* %9837, align 2, !tbaa !389
  %9839 = add nsw i64 %7401, %9786
  %9840 = getelementptr inbounds i16, i16* %blur_x, i64 %9839
  %9841 = getelementptr inbounds i16, i16* %9840, i64 64
  %9842 = bitcast i16* %9841 to <8 x i16>*
  %9843 = load <8 x i16>, <8 x i16>* %9842, align 2, !tbaa !389
  %9844 = getelementptr inbounds i16, i16* %9840, i64 72
  %9845 = bitcast i16* %9844 to <8 x i16>*
  %9846 = load <8 x i16>, <8 x i16>* %9845, align 2, !tbaa !389
  %9847 = getelementptr inbounds i16, i16* %9840, i64 80
  %9848 = bitcast i16* %9847 to <8 x i16>*
  %9849 = load <8 x i16>, <8 x i16>* %9848, align 2, !tbaa !389
  %9850 = getelementptr inbounds i16, i16* %9840, i64 88
  %9851 = bitcast i16* %9850 to <8 x i16>*
  %9852 = load <8 x i16>, <8 x i16>* %9851, align 2, !tbaa !389
  %9853 = getelementptr inbounds i16, i16* %9840, i64 96
  %9854 = bitcast i16* %9853 to <8 x i16>*
  %9855 = load <8 x i16>, <8 x i16>* %9854, align 2, !tbaa !389
  %9856 = getelementptr inbounds i16, i16* %9840, i64 104
  %9857 = bitcast i16* %9856 to <8 x i16>*
  %9858 = load <8 x i16>, <8 x i16>* %9857, align 2, !tbaa !389
  %9859 = getelementptr inbounds i16, i16* %9840, i64 112
  %9860 = bitcast i16* %9859 to <8 x i16>*
  %9861 = load <8 x i16>, <8 x i16>* %9860, align 2, !tbaa !389
  %9862 = getelementptr inbounds i16, i16* %9840, i64 120
  %9863 = bitcast i16* %9862 to <8 x i16>*
  %9864 = load <8 x i16>, <8 x i16>* %9863, align 2, !tbaa !389
  %9865 = add nsw i64 %7404, %9786
  %9866 = getelementptr inbounds i16, i16* %blur_x, i64 %9865
  %9867 = getelementptr inbounds i16, i16* %9866, i64 64
  %9868 = bitcast i16* %9867 to <8 x i16>*
  %9869 = load <8 x i16>, <8 x i16>* %9868, align 2, !tbaa !389
  %9870 = getelementptr inbounds i16, i16* %9866, i64 72
  %9871 = bitcast i16* %9870 to <8 x i16>*
  %9872 = load <8 x i16>, <8 x i16>* %9871, align 2, !tbaa !389
  %9873 = getelementptr inbounds i16, i16* %9866, i64 80
  %9874 = bitcast i16* %9873 to <8 x i16>*
  %9875 = load <8 x i16>, <8 x i16>* %9874, align 2, !tbaa !389
  %9876 = getelementptr inbounds i16, i16* %9866, i64 88
  %9877 = bitcast i16* %9876 to <8 x i16>*
  %9878 = load <8 x i16>, <8 x i16>* %9877, align 2, !tbaa !389
  %9879 = getelementptr inbounds i16, i16* %9866, i64 96
  %9880 = bitcast i16* %9879 to <8 x i16>*
  %9881 = load <8 x i16>, <8 x i16>* %9880, align 2, !tbaa !389
  %9882 = getelementptr inbounds i16, i16* %9866, i64 104
  %9883 = bitcast i16* %9882 to <8 x i16>*
  %9884 = load <8 x i16>, <8 x i16>* %9883, align 2, !tbaa !389
  %9885 = getelementptr inbounds i16, i16* %9866, i64 112
  %9886 = bitcast i16* %9885 to <8 x i16>*
  %9887 = load <8 x i16>, <8 x i16>* %9886, align 2, !tbaa !389
  %9888 = getelementptr inbounds i16, i16* %9866, i64 120
  %9889 = bitcast i16* %9888 to <8 x i16>*
  %9890 = load <8 x i16>, <8 x i16>* %9889, align 2, !tbaa !389
  %9891 = add nsw i64 %7407, %9786
  %9892 = getelementptr inbounds i16, i16* %blur_x, i64 %9891
  %9893 = getelementptr inbounds i16, i16* %9892, i64 64
  %9894 = bitcast i16* %9893 to <8 x i16>*
  %9895 = load <8 x i16>, <8 x i16>* %9894, align 2, !tbaa !389
  %9896 = getelementptr inbounds i16, i16* %9892, i64 72
  %9897 = bitcast i16* %9896 to <8 x i16>*
  %9898 = load <8 x i16>, <8 x i16>* %9897, align 2, !tbaa !389
  %9899 = getelementptr inbounds i16, i16* %9892, i64 80
  %9900 = bitcast i16* %9899 to <8 x i16>*
  %9901 = load <8 x i16>, <8 x i16>* %9900, align 2, !tbaa !389
  %9902 = getelementptr inbounds i16, i16* %9892, i64 88
  %9903 = bitcast i16* %9902 to <8 x i16>*
  %9904 = load <8 x i16>, <8 x i16>* %9903, align 2, !tbaa !389
  %9905 = getelementptr inbounds i16, i16* %9892, i64 96
  %9906 = bitcast i16* %9905 to <8 x i16>*
  %9907 = load <8 x i16>, <8 x i16>* %9906, align 2, !tbaa !389
  %9908 = getelementptr inbounds i16, i16* %9892, i64 104
  %9909 = bitcast i16* %9908 to <8 x i16>*
  %9910 = load <8 x i16>, <8 x i16>* %9909, align 2, !tbaa !389
  %9911 = getelementptr inbounds i16, i16* %9892, i64 112
  %9912 = bitcast i16* %9911 to <8 x i16>*
  %9913 = load <8 x i16>, <8 x i16>* %9912, align 2, !tbaa !389
  %9914 = getelementptr inbounds i16, i16* %9892, i64 120
  %9915 = bitcast i16* %9914 to <8 x i16>*
  %9916 = load <8 x i16>, <8 x i16>* %9915, align 2, !tbaa !389
  %9917 = add nsw i64 %7409, %9786
  %9918 = getelementptr inbounds i16, i16* %blur_x, i64 %9917
  %9919 = getelementptr inbounds i16, i16* %9918, i64 64
  %9920 = bitcast i16* %9919 to <8 x i16>*
  %9921 = load <8 x i16>, <8 x i16>* %9920, align 2, !tbaa !389
  %9922 = getelementptr inbounds i16, i16* %9918, i64 72
  %9923 = bitcast i16* %9922 to <8 x i16>*
  %9924 = load <8 x i16>, <8 x i16>* %9923, align 2, !tbaa !389
  %9925 = getelementptr inbounds i16, i16* %9918, i64 80
  %9926 = bitcast i16* %9925 to <8 x i16>*
  %9927 = load <8 x i16>, <8 x i16>* %9926, align 2, !tbaa !389
  %9928 = getelementptr inbounds i16, i16* %9918, i64 88
  %9929 = bitcast i16* %9928 to <8 x i16>*
  %9930 = load <8 x i16>, <8 x i16>* %9929, align 2, !tbaa !389
  %9931 = getelementptr inbounds i16, i16* %9918, i64 96
  %9932 = bitcast i16* %9931 to <8 x i16>*
  %9933 = load <8 x i16>, <8 x i16>* %9932, align 2, !tbaa !389
  %9934 = getelementptr inbounds i16, i16* %9918, i64 104
  %9935 = bitcast i16* %9934 to <8 x i16>*
  %9936 = load <8 x i16>, <8 x i16>* %9935, align 2, !tbaa !389
  %9937 = getelementptr inbounds i16, i16* %9918, i64 112
  %9938 = bitcast i16* %9937 to <8 x i16>*
  %9939 = load <8 x i16>, <8 x i16>* %9938, align 2, !tbaa !389
  %9940 = getelementptr inbounds i16, i16* %9918, i64 120
  %9941 = bitcast i16* %9940 to <8 x i16>*
  %9942 = load <8 x i16>, <8 x i16>* %9941, align 2, !tbaa !389
  %9943 = add nsw i64 %7412, %9786
  %9944 = getelementptr inbounds i16, i16* %blur_x, i64 %9943
  %9945 = getelementptr inbounds i16, i16* %9944, i64 64
  %9946 = bitcast i16* %9945 to <8 x i16>*
  %9947 = load <8 x i16>, <8 x i16>* %9946, align 2, !tbaa !389
  %9948 = getelementptr inbounds i16, i16* %9944, i64 72
  %9949 = bitcast i16* %9948 to <8 x i16>*
  %9950 = load <8 x i16>, <8 x i16>* %9949, align 2, !tbaa !389
  %9951 = getelementptr inbounds i16, i16* %9944, i64 80
  %9952 = bitcast i16* %9951 to <8 x i16>*
  %9953 = load <8 x i16>, <8 x i16>* %9952, align 2, !tbaa !389
  %9954 = getelementptr inbounds i16, i16* %9944, i64 88
  %9955 = bitcast i16* %9954 to <8 x i16>*
  %9956 = load <8 x i16>, <8 x i16>* %9955, align 2, !tbaa !389
  %9957 = getelementptr inbounds i16, i16* %9944, i64 96
  %9958 = bitcast i16* %9957 to <8 x i16>*
  %9959 = load <8 x i16>, <8 x i16>* %9958, align 2, !tbaa !389
  %9960 = getelementptr inbounds i16, i16* %9944, i64 104
  %9961 = bitcast i16* %9960 to <8 x i16>*
  %9962 = load <8 x i16>, <8 x i16>* %9961, align 2, !tbaa !389
  %9963 = getelementptr inbounds i16, i16* %9944, i64 112
  %9964 = bitcast i16* %9963 to <8 x i16>*
  %9965 = load <8 x i16>, <8 x i16>* %9964, align 2, !tbaa !389
  %9966 = getelementptr inbounds i16, i16* %9944, i64 120
  %9967 = bitcast i16* %9966 to <8 x i16>*
  %9968 = load <8 x i16>, <8 x i16>* %9967, align 2, !tbaa !389
  %9969 = add <8 x i16> %9817, %9791
  %9970 = add <8 x i16> %9969, %9843
  %9971 = add <8 x i16> %9970, %9869
  %9972 = add <8 x i16> %9971, %9895
  %9973 = add <8 x i16> %9972, %9921
  %9974 = add <8 x i16> %9973, %9947
  %9975 = add <8 x i16> %9820, %9794
  %9976 = add <8 x i16> %9975, %9846
  %9977 = add <8 x i16> %9976, %9872
  %9978 = add <8 x i16> %9977, %9898
  %9979 = add <8 x i16> %9978, %9924
  %9980 = add <8 x i16> %9979, %9950
  %9981 = add <8 x i16> %9823, %9797
  %9982 = add <8 x i16> %9981, %9849
  %9983 = add <8 x i16> %9982, %9875
  %9984 = add <8 x i16> %9983, %9901
  %9985 = add <8 x i16> %9984, %9927
  %9986 = add <8 x i16> %9985, %9953
  %9987 = add <8 x i16> %9826, %9800
  %9988 = add <8 x i16> %9987, %9852
  %9989 = add <8 x i16> %9988, %9878
  %9990 = add <8 x i16> %9989, %9904
  %9991 = add <8 x i16> %9990, %9930
  %9992 = add <8 x i16> %9991, %9956
  %9993 = add <8 x i16> %9829, %9803
  %9994 = add <8 x i16> %9993, %9855
  %9995 = add <8 x i16> %9994, %9881
  %9996 = add <8 x i16> %9995, %9907
  %9997 = add <8 x i16> %9996, %9933
  %9998 = add <8 x i16> %9997, %9959
  %9999 = add <8 x i16> %9832, %9806
  %10000 = add <8 x i16> %9999, %9858
  %10001 = add <8 x i16> %10000, %9884
  %10002 = add <8 x i16> %10001, %9910
  %10003 = add <8 x i16> %10002, %9936
  %10004 = add <8 x i16> %10003, %9962
  %10005 = add <8 x i16> %9835, %9809
  %10006 = add <8 x i16> %10005, %9861
  %10007 = add <8 x i16> %10006, %9887
  %10008 = add <8 x i16> %10007, %9913
  %10009 = add <8 x i16> %10008, %9939
  %10010 = add <8 x i16> %10009, %9965
  %10011 = add <8 x i16> %9838, %9812
  %10012 = add <8 x i16> %10011, %9864
  %10013 = add <8 x i16> %10012, %9890
  %10014 = add <8 x i16> %10013, %9916
  %10015 = add <8 x i16> %10014, %9942
  %10016 = add <8 x i16> %10015, %9968
  %10017 = shufflevector <8 x i16> %10016, <8 x i16> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10018 = shufflevector <16 x i16> %10017, <16 x i16> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10019 = shufflevector <32 x i16> %10018, <32 x i16> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10020 = shufflevector <8 x i16> %9974, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %10021 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %10020, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %10022 = shufflevector <8 x i16> %9974, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %10023 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %10022, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %10024 = shufflevector <8 x i16> %9980, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %10025 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %10024, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %10026 = shufflevector <8 x i16> %9980, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %10027 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %10026, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %10028 = shufflevector <8 x i16> %9986, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %10029 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %10028, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %10030 = shufflevector <8 x i16> %9986, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %10031 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %10030, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %10032 = shufflevector <8 x i16> %9992, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %10033 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %10032, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %10034 = shufflevector <8 x i16> %9992, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %10035 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %10034, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %10036 = shufflevector <8 x i16> %9998, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %10037 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %10036, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %10038 = shufflevector <8 x i16> %9998, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %10039 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %10038, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %10040 = shufflevector <8 x i16> %10004, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %10041 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %10040, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %10042 = shufflevector <8 x i16> %10004, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %10043 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %10042, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %10044 = shufflevector <8 x i16> %10010, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %10045 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %10044, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %10046 = shufflevector <8 x i16> %10010, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %10047 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %10046, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %10048 = shufflevector <8 x i16> %10016, <8 x i16> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %10049 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %10048, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %10050 = shufflevector <8 x i16> %10016, <8 x i16> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %10051 = tail call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %10050, <4 x i16> <i16 9362, i16 9362, i16 9362, i16 9362>)
  %10052 = shufflevector <4 x i32> %10021, <4 x i32> %10023, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10053 = shufflevector <4 x i32> %10025, <4 x i32> %10027, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10054 = shufflevector <4 x i32> %10029, <4 x i32> %10031, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10055 = shufflevector <4 x i32> %10033, <4 x i32> %10035, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10056 = shufflevector <4 x i32> %10037, <4 x i32> %10039, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10057 = shufflevector <4 x i32> %10041, <4 x i32> %10043, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10058 = shufflevector <4 x i32> %10045, <4 x i32> %10047, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10059 = shufflevector <4 x i32> %10049, <4 x i32> %10051, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10060 = shufflevector <8 x i32> %10052, <8 x i32> %10053, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10061 = shufflevector <8 x i32> %10054, <8 x i32> %10055, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10062 = shufflevector <8 x i32> %10056, <8 x i32> %10057, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10063 = shufflevector <8 x i32> %10058, <8 x i32> %10059, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10064 = shufflevector <16 x i32> %10060, <16 x i32> %10061, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10065 = shufflevector <16 x i32> %10062, <16 x i32> %10063, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10066 = shufflevector <32 x i32> %10064, <32 x i32> %10065, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %10067 = lshr <64 x i32> %10066, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %10068 = trunc <64 x i32> %10067 to <64 x i16>
  %10069 = shufflevector <64 x i16> %10068, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10070 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %10069, <8 x i16> %9974)
  %10071 = shufflevector <64 x i16> %10068, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10072 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %10071, <8 x i16> %9980)
  %10073 = shufflevector <64 x i16> %10068, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %10074 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %10073, <8 x i16> %9986)
  %10075 = shufflevector <64 x i16> %10068, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10076 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %10075, <8 x i16> %9992)
  %10077 = shufflevector <64 x i16> %10068, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %10078 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %10077, <8 x i16> %9998)
  %10079 = shufflevector <64 x i16> %10068, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %10080 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %10079, <8 x i16> %10004)
  %10081 = shufflevector <64 x i16> %10068, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %10082 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %10081, <8 x i16> %10010)
  %10083 = shufflevector <64 x i16> %10068, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %10084 = shufflevector <64 x i16> %10019, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %10085 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %10083, <8 x i16> %10084)
  %10086 = shufflevector <8 x i16> %10070, <8 x i16> %10072, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10087 = shufflevector <8 x i16> %10074, <8 x i16> %10076, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10088 = shufflevector <8 x i16> %10078, <8 x i16> %10080, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10089 = shufflevector <8 x i16> %10082, <8 x i16> %10085, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10090 = shufflevector <16 x i16> %10086, <16 x i16> %10087, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10091 = shufflevector <16 x i16> %10088, <16 x i16> %10089, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10092 = shufflevector <32 x i16> %10090, <32 x i16> %10091, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %10093 = lshr <64 x i16> %10092, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %10094 = shufflevector <64 x i16> %10093, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10095 = sext i32 %blur_y.s0.x.v0.base to i64
  %10096 = add nsw i64 %7414, %10095
  %10097 = getelementptr inbounds i16, i16* %84, i64 %10096
  %10098 = bitcast i16* %10097 to <8 x i16>*
  store <8 x i16> %10094, <8 x i16>* %10098, align 2, !tbaa !391
  %10099 = shufflevector <64 x i16> %10093, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10100 = getelementptr inbounds i16, i16* %10097, i64 8
  %10101 = bitcast i16* %10100 to <8 x i16>*
  store <8 x i16> %10099, <8 x i16>* %10101, align 2, !tbaa !391
  %10102 = shufflevector <64 x i16> %10093, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %10103 = getelementptr inbounds i16, i16* %10097, i64 16
  %10104 = bitcast i16* %10103 to <8 x i16>*
  store <8 x i16> %10102, <8 x i16>* %10104, align 2, !tbaa !391
  %10105 = shufflevector <64 x i16> %10093, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10106 = getelementptr inbounds i16, i16* %10097, i64 24
  %10107 = bitcast i16* %10106 to <8 x i16>*
  store <8 x i16> %10105, <8 x i16>* %10107, align 2, !tbaa !391
  %10108 = shufflevector <64 x i16> %10093, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %10109 = getelementptr inbounds i16, i16* %10097, i64 32
  %10110 = bitcast i16* %10109 to <8 x i16>*
  store <8 x i16> %10108, <8 x i16>* %10110, align 2, !tbaa !391
  %10111 = shufflevector <64 x i16> %10093, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %10112 = getelementptr inbounds i16, i16* %10097, i64 40
  %10113 = bitcast i16* %10112 to <8 x i16>*
  store <8 x i16> %10111, <8 x i16>* %10113, align 2, !tbaa !391
  %10114 = shufflevector <64 x i16> %10093, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %10115 = getelementptr inbounds i16, i16* %10097, i64 48
  %10116 = bitcast i16* %10115 to <8 x i16>*
  store <8 x i16> %10114, <8 x i16>* %10116, align 2, !tbaa !391
  %10117 = shufflevector <64 x i16> %10093, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %10118 = getelementptr inbounds i16, i16* %10097, i64 56
  %10119 = bitcast i16* %10118 to <8 x i16>*
  store <8 x i16> %10117, <8 x i16>* %10119, align 2, !tbaa !391
  %10120 = add nuw nsw i32 %blur_y.s0.x.x37, 1
  %.not161 = icmp eq i32 %10120, %t261
  br i1 %.not161, label %after_bb31, label %"for blur_y.s0.x.x35"

after_bb54:                                       ; preds = %if.then.i185, %"end for blur_y.s0.y.yi.$n.rebased114", %if.then.i182, %"end for blur_y.s0.y.yi.$n.rebased63"
  ret i32 0

then_bb55:                                        ; preds = %after_bb
  %t26860 = sub nsw i32 %t26451, %t25447
  %10121 = select i1 %43, i32 %a12, i32 %b14
  %10122 = icmp sgt i32 %t26653, 0
  %10123 = add nsw i32 %input.extent.044, -1
  %10124 = insertelement <4 x i32> undef, i32 %10123, i32 0
  %10125 = shufflevector <4 x i32> %10124, <4 x i32> undef, <4 x i32> zeroinitializer
  %10126 = bitcast i8* %input40 to i16*
  %10127 = sext i32 %a31 to i64
  %10128 = add nsw i64 %10127, 64
  %t27376 = sub nsw i32 %t25447, %t26653
  %10129 = icmp sgt i32 %t27376, 0
  %10130 = icmp sgt i32 %t26860, 0
  %10131 = icmp sgt i32 %t26249, 0
  %10132 = add i32 %t26350, 63
  %10133 = and i32 %10132, -64
  %10134 = sext i32 %blur_y.stride.143 to i64
  %10135 = bitcast i8* %blur_y39 to i16*
  %10136 = icmp sgt i32 %t26148, %t26249
  %10137 = sext i32 %blur_y.extent.041 to i64
  %10138 = zext i32 %t26653 to i64
  %10139 = zext i32 %t27376 to i64
  %10140 = zext i32 %t26860 to i64
  %10141 = zext i32 %t26249 to i64
  %10142 = sext i32 %t26552 to i64
  %10143 = sext i32 %10121 to i64
  %10144 = insertelement <4 x i32> poison, i32 %10133, i32 0
  %10145 = shufflevector <4 x i32> %10144, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %"for blur_y.s0.y.yi.$n.rebased62"

next_bb56:                                        ; preds = %after_bb
  %10146 = select i1 %43, i32 %a12, i32 %b14
  %10147 = icmp sgt i32 %t26451, 0
  %10148 = add nsw i32 %input.extent.044, -1
  %10149 = insertelement <4 x i32> undef, i32 %10148, i32 0
  %10150 = shufflevector <4 x i32> %10149, <4 x i32> undef, <4 x i32> zeroinitializer
  %10151 = bitcast i8* %input40 to i16*
  %10152 = sext i32 %a31 to i64
  %10153 = add nsw i64 %10152, 64
  %10154 = icmp sgt i32 %t26148, 0
  %b40 = add nsw i32 %blur_y.extent.041, -64
  %10155 = add i32 %t26350, 63
  %10156 = and i32 %10155, -64
  %10157 = sext i32 %blur_y.stride.143 to i64
  %10158 = bitcast i8* %blur_y39 to i16*
  %10159 = zext i32 %t26451 to i64
  %10160 = sext i32 %10146 to i64
  br label %"for blur_y.s0.y.yi.$n.rebased113"

"for blur_y.s0.y.yi.$n.rebased62":                ; preds = %then_bb55, %after_bb97
  %indvars.iv233 = phi i64 [ 0, %then_bb55 ], [ %indvars.iv.next234, %after_bb97 ]
  br i1 %10122, label %"for blur_x.s0.x.x67.preheader", label %"end for blur_x.s0.x.x68", !prof !385

"for blur_x.s0.x.x67.preheader":                  ; preds = %"for blur_y.s0.y.yi.$n.rebased62"
  %10161 = trunc i64 %indvars.iv233 to i32
  %10162 = add i32 %10121, %10161
  br label %"for blur_x.s0.x.x67"

"end for blur_y.s0.y.yi.$n.rebased63":            ; preds = %after_bb97
  %tobool.not.i181.not = icmp eq i8* %49, null
  br i1 %tobool.not.i181.not, label %after_bb54, label %if.then.i182

if.then.i182:                                     ; preds = %"end for blur_y.s0.y.yi.$n.rebased63"
  tail call void @halide_free(i8* %__user_context, i8* nonnull %49) #14
  br label %after_bb54

"for blur_x.s0.x.x67":                            ; preds = %"for blur_x.s0.x.x67.preheader", %"end for blur_x.s0.y.yi73"
  %indvars.iv217 = phi i64 [ 0, %"for blur_x.s0.x.x67.preheader" ], [ %indvars.iv.next218, %"end for blur_x.s0.y.yi73" ]
  %10163 = trunc i64 %indvars.iv217 to i32
  %10164 = shl nsw i32 %10163, 6
  %blur_x.s0.x.xi.base.s70 = add nsw i32 %10164, %t26552
  %10165 = add nsw i32 %blur_x.s0.x.xi.base.s70, -63
  %10166 = insertelement <4 x i32> undef, i32 %10165, i32 0
  %10167 = shufflevector <4 x i32> %10166, <4 x i32> undef, <4 x i32> zeroinitializer
  %10168 = add nsw <4 x i32> %10167, <i32 0, i32 1, i32 2, i32 3>
  %10169 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10168, <4 x i32> %10125) #11
  %10170 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10169, <4 x i32> zeroinitializer) #11
  %10171 = add nsw i32 %blur_x.s0.x.xi.base.s70, -59
  %10172 = insertelement <4 x i32> undef, i32 %10171, i32 0
  %10173 = shufflevector <4 x i32> %10172, <4 x i32> undef, <4 x i32> zeroinitializer
  %10174 = add nsw <4 x i32> %10173, <i32 0, i32 1, i32 2, i32 3>
  %10175 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10174, <4 x i32> %10125) #11
  %10176 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10175, <4 x i32> zeroinitializer) #11
  %10177 = add nsw i32 %blur_x.s0.x.xi.base.s70, -64
  %10178 = insertelement <4 x i32> undef, i32 %10177, i32 0
  %10179 = shufflevector <4 x i32> %10178, <4 x i32> undef, <4 x i32> zeroinitializer
  %10180 = add nsw <4 x i32> %10179, <i32 0, i32 1, i32 2, i32 3>
  %10181 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10180, <4 x i32> %10125) #11
  %10182 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10181, <4 x i32> zeroinitializer) #11
  %10183 = add nsw i32 %blur_x.s0.x.xi.base.s70, -60
  %10184 = insertelement <4 x i32> undef, i32 %10183, i32 0
  %10185 = shufflevector <4 x i32> %10184, <4 x i32> undef, <4 x i32> zeroinitializer
  %10186 = add nsw <4 x i32> %10185, <i32 0, i32 1, i32 2, i32 3>
  %10187 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10186, <4 x i32> %10125) #11
  %10188 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10187, <4 x i32> zeroinitializer) #11
  %10189 = add nsw i32 %blur_x.s0.x.xi.base.s70, -62
  %10190 = insertelement <4 x i32> undef, i32 %10189, i32 0
  %10191 = shufflevector <4 x i32> %10190, <4 x i32> undef, <4 x i32> zeroinitializer
  %10192 = add nsw <4 x i32> %10191, <i32 0, i32 1, i32 2, i32 3>
  %10193 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10192, <4 x i32> %10125) #11
  %10194 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10193, <4 x i32> zeroinitializer) #11
  %10195 = add nsw i32 %blur_x.s0.x.xi.base.s70, -58
  %10196 = insertelement <4 x i32> undef, i32 %10195, i32 0
  %10197 = shufflevector <4 x i32> %10196, <4 x i32> undef, <4 x i32> zeroinitializer
  %10198 = add nsw <4 x i32> %10197, <i32 0, i32 1, i32 2, i32 3>
  %10199 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10198, <4 x i32> %10125) #11
  %10200 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10199, <4 x i32> zeroinitializer) #11
  %10201 = add nsw i32 %blur_x.s0.x.xi.base.s70, -61
  %10202 = insertelement <4 x i32> undef, i32 %10201, i32 0
  %10203 = shufflevector <4 x i32> %10202, <4 x i32> undef, <4 x i32> zeroinitializer
  %10204 = add nsw <4 x i32> %10203, <i32 0, i32 1, i32 2, i32 3>
  %10205 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10204, <4 x i32> %10125) #11
  %10206 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10205, <4 x i32> zeroinitializer) #11
  %10207 = add nsw i32 %blur_x.s0.x.xi.base.s70, -57
  %10208 = insertelement <4 x i32> undef, i32 %10207, i32 0
  %10209 = shufflevector <4 x i32> %10208, <4 x i32> undef, <4 x i32> zeroinitializer
  %10210 = add nsw <4 x i32> %10209, <i32 0, i32 1, i32 2, i32 3>
  %10211 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10210, <4 x i32> %10125) #11
  %10212 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10211, <4 x i32> zeroinitializer) #11
  %10213 = add nsw i32 %blur_x.s0.x.xi.base.s70, -56
  %10214 = insertelement <4 x i32> undef, i32 %10213, i32 0
  %10215 = shufflevector <4 x i32> %10214, <4 x i32> undef, <4 x i32> zeroinitializer
  %10216 = add nsw <4 x i32> %10215, <i32 0, i32 1, i32 2, i32 3>
  %10217 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10216, <4 x i32> %10125) #11
  %10218 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10217, <4 x i32> zeroinitializer) #11
  %10219 = add nsw i32 %blur_x.s0.x.xi.base.s70, -54
  %10220 = insertelement <4 x i32> undef, i32 %10219, i32 0
  %10221 = shufflevector <4 x i32> %10220, <4 x i32> undef, <4 x i32> zeroinitializer
  %10222 = add nsw <4 x i32> %10221, <i32 0, i32 1, i32 2, i32 3>
  %10223 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10222, <4 x i32> %10125) #11
  %10224 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10223, <4 x i32> zeroinitializer) #11
  %10225 = add nsw i32 %blur_x.s0.x.xi.base.s70, -55
  %10226 = insertelement <4 x i32> undef, i32 %10225, i32 0
  %10227 = shufflevector <4 x i32> %10226, <4 x i32> undef, <4 x i32> zeroinitializer
  %10228 = add nsw <4 x i32> %10227, <i32 0, i32 1, i32 2, i32 3>
  %10229 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10228, <4 x i32> %10125) #11
  %10230 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10229, <4 x i32> zeroinitializer) #11
  %10231 = add nsw i32 %blur_x.s0.x.xi.base.s70, -51
  %10232 = insertelement <4 x i32> undef, i32 %10231, i32 0
  %10233 = shufflevector <4 x i32> %10232, <4 x i32> undef, <4 x i32> zeroinitializer
  %10234 = add nsw <4 x i32> %10233, <i32 0, i32 1, i32 2, i32 3>
  %10235 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10234, <4 x i32> %10125) #11
  %10236 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10235, <4 x i32> zeroinitializer) #11
  %10237 = add nsw i32 %blur_x.s0.x.xi.base.s70, -52
  %10238 = insertelement <4 x i32> undef, i32 %10237, i32 0
  %10239 = shufflevector <4 x i32> %10238, <4 x i32> undef, <4 x i32> zeroinitializer
  %10240 = add nsw <4 x i32> %10239, <i32 0, i32 1, i32 2, i32 3>
  %10241 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10240, <4 x i32> %10125) #11
  %10242 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10241, <4 x i32> zeroinitializer) #11
  %10243 = add nsw i32 %blur_x.s0.x.xi.base.s70, -50
  %10244 = insertelement <4 x i32> undef, i32 %10243, i32 0
  %10245 = shufflevector <4 x i32> %10244, <4 x i32> undef, <4 x i32> zeroinitializer
  %10246 = add nsw <4 x i32> %10245, <i32 0, i32 1, i32 2, i32 3>
  %10247 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10246, <4 x i32> %10125) #11
  %10248 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10247, <4 x i32> zeroinitializer) #11
  %10249 = add nsw i32 %blur_x.s0.x.xi.base.s70, -53
  %10250 = insertelement <4 x i32> undef, i32 %10249, i32 0
  %10251 = shufflevector <4 x i32> %10250, <4 x i32> undef, <4 x i32> zeroinitializer
  %10252 = add nsw <4 x i32> %10251, <i32 0, i32 1, i32 2, i32 3>
  %10253 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10252, <4 x i32> %10125) #11
  %10254 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10253, <4 x i32> zeroinitializer) #11
  %10255 = add nsw i32 %blur_x.s0.x.xi.base.s70, -49
  %10256 = insertelement <4 x i32> undef, i32 %10255, i32 0
  %10257 = shufflevector <4 x i32> %10256, <4 x i32> undef, <4 x i32> zeroinitializer
  %10258 = add nsw <4 x i32> %10257, <i32 0, i32 1, i32 2, i32 3>
  %10259 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10258, <4 x i32> %10125) #11
  %10260 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10259, <4 x i32> zeroinitializer) #11
  %10261 = add nsw i32 %blur_x.s0.x.xi.base.s70, -48
  %10262 = insertelement <4 x i32> undef, i32 %10261, i32 0
  %10263 = shufflevector <4 x i32> %10262, <4 x i32> undef, <4 x i32> zeroinitializer
  %10264 = add nsw <4 x i32> %10263, <i32 0, i32 1, i32 2, i32 3>
  %10265 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10264, <4 x i32> %10125) #11
  %10266 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10265, <4 x i32> zeroinitializer) #11
  %10267 = add nsw i32 %blur_x.s0.x.xi.base.s70, -46
  %10268 = insertelement <4 x i32> undef, i32 %10267, i32 0
  %10269 = shufflevector <4 x i32> %10268, <4 x i32> undef, <4 x i32> zeroinitializer
  %10270 = add nsw <4 x i32> %10269, <i32 0, i32 1, i32 2, i32 3>
  %10271 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10270, <4 x i32> %10125) #11
  %10272 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10271, <4 x i32> zeroinitializer) #11
  %10273 = add nsw i32 %blur_x.s0.x.xi.base.s70, -47
  %10274 = insertelement <4 x i32> undef, i32 %10273, i32 0
  %10275 = shufflevector <4 x i32> %10274, <4 x i32> undef, <4 x i32> zeroinitializer
  %10276 = add nsw <4 x i32> %10275, <i32 0, i32 1, i32 2, i32 3>
  %10277 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10276, <4 x i32> %10125) #11
  %10278 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10277, <4 x i32> zeroinitializer) #11
  %10279 = add nsw i32 %blur_x.s0.x.xi.base.s70, -43
  %10280 = insertelement <4 x i32> undef, i32 %10279, i32 0
  %10281 = shufflevector <4 x i32> %10280, <4 x i32> undef, <4 x i32> zeroinitializer
  %10282 = add nsw <4 x i32> %10281, <i32 0, i32 1, i32 2, i32 3>
  %10283 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10282, <4 x i32> %10125) #11
  %10284 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10283, <4 x i32> zeroinitializer) #11
  %10285 = add nsw i32 %blur_x.s0.x.xi.base.s70, -44
  %10286 = insertelement <4 x i32> undef, i32 %10285, i32 0
  %10287 = shufflevector <4 x i32> %10286, <4 x i32> undef, <4 x i32> zeroinitializer
  %10288 = add nsw <4 x i32> %10287, <i32 0, i32 1, i32 2, i32 3>
  %10289 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10288, <4 x i32> %10125) #11
  %10290 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10289, <4 x i32> zeroinitializer) #11
  %10291 = add nsw i32 %blur_x.s0.x.xi.base.s70, -42
  %10292 = insertelement <4 x i32> undef, i32 %10291, i32 0
  %10293 = shufflevector <4 x i32> %10292, <4 x i32> undef, <4 x i32> zeroinitializer
  %10294 = add nsw <4 x i32> %10293, <i32 0, i32 1, i32 2, i32 3>
  %10295 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10294, <4 x i32> %10125) #11
  %10296 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10295, <4 x i32> zeroinitializer) #11
  %10297 = add nsw i32 %blur_x.s0.x.xi.base.s70, -45
  %10298 = insertelement <4 x i32> undef, i32 %10297, i32 0
  %10299 = shufflevector <4 x i32> %10298, <4 x i32> undef, <4 x i32> zeroinitializer
  %10300 = add nsw <4 x i32> %10299, <i32 0, i32 1, i32 2, i32 3>
  %10301 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10300, <4 x i32> %10125) #11
  %10302 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10301, <4 x i32> zeroinitializer) #11
  %10303 = add nsw i32 %blur_x.s0.x.xi.base.s70, -41
  %10304 = insertelement <4 x i32> undef, i32 %10303, i32 0
  %10305 = shufflevector <4 x i32> %10304, <4 x i32> undef, <4 x i32> zeroinitializer
  %10306 = add nsw <4 x i32> %10305, <i32 0, i32 1, i32 2, i32 3>
  %10307 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10306, <4 x i32> %10125) #11
  %10308 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10307, <4 x i32> zeroinitializer) #11
  %10309 = add nsw i32 %blur_x.s0.x.xi.base.s70, -40
  %10310 = insertelement <4 x i32> undef, i32 %10309, i32 0
  %10311 = shufflevector <4 x i32> %10310, <4 x i32> undef, <4 x i32> zeroinitializer
  %10312 = add nsw <4 x i32> %10311, <i32 0, i32 1, i32 2, i32 3>
  %10313 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10312, <4 x i32> %10125) #11
  %10314 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10313, <4 x i32> zeroinitializer) #11
  %10315 = add nsw i32 %blur_x.s0.x.xi.base.s70, -38
  %10316 = insertelement <4 x i32> undef, i32 %10315, i32 0
  %10317 = shufflevector <4 x i32> %10316, <4 x i32> undef, <4 x i32> zeroinitializer
  %10318 = add nsw <4 x i32> %10317, <i32 0, i32 1, i32 2, i32 3>
  %10319 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10318, <4 x i32> %10125) #11
  %10320 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10319, <4 x i32> zeroinitializer) #11
  %10321 = add nsw i32 %blur_x.s0.x.xi.base.s70, -39
  %10322 = insertelement <4 x i32> undef, i32 %10321, i32 0
  %10323 = shufflevector <4 x i32> %10322, <4 x i32> undef, <4 x i32> zeroinitializer
  %10324 = add nsw <4 x i32> %10323, <i32 0, i32 1, i32 2, i32 3>
  %10325 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10324, <4 x i32> %10125) #11
  %10326 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10325, <4 x i32> zeroinitializer) #11
  %10327 = add nsw i32 %blur_x.s0.x.xi.base.s70, -35
  %10328 = insertelement <4 x i32> undef, i32 %10327, i32 0
  %10329 = shufflevector <4 x i32> %10328, <4 x i32> undef, <4 x i32> zeroinitializer
  %10330 = add nsw <4 x i32> %10329, <i32 0, i32 1, i32 2, i32 3>
  %10331 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10330, <4 x i32> %10125) #11
  %10332 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10331, <4 x i32> zeroinitializer) #11
  %10333 = add nsw i32 %blur_x.s0.x.xi.base.s70, -36
  %10334 = insertelement <4 x i32> undef, i32 %10333, i32 0
  %10335 = shufflevector <4 x i32> %10334, <4 x i32> undef, <4 x i32> zeroinitializer
  %10336 = add nsw <4 x i32> %10335, <i32 0, i32 1, i32 2, i32 3>
  %10337 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10336, <4 x i32> %10125) #11
  %10338 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10337, <4 x i32> zeroinitializer) #11
  %10339 = add nsw i32 %blur_x.s0.x.xi.base.s70, -34
  %10340 = insertelement <4 x i32> undef, i32 %10339, i32 0
  %10341 = shufflevector <4 x i32> %10340, <4 x i32> undef, <4 x i32> zeroinitializer
  %10342 = add nsw <4 x i32> %10341, <i32 0, i32 1, i32 2, i32 3>
  %10343 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10342, <4 x i32> %10125) #11
  %10344 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10343, <4 x i32> zeroinitializer) #11
  %10345 = add nsw i32 %blur_x.s0.x.xi.base.s70, -37
  %10346 = insertelement <4 x i32> undef, i32 %10345, i32 0
  %10347 = shufflevector <4 x i32> %10346, <4 x i32> undef, <4 x i32> zeroinitializer
  %10348 = add nsw <4 x i32> %10347, <i32 0, i32 1, i32 2, i32 3>
  %10349 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10348, <4 x i32> %10125) #11
  %10350 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10349, <4 x i32> zeroinitializer) #11
  %10351 = add nsw i32 %blur_x.s0.x.xi.base.s70, -33
  %10352 = insertelement <4 x i32> undef, i32 %10351, i32 0
  %10353 = shufflevector <4 x i32> %10352, <4 x i32> undef, <4 x i32> zeroinitializer
  %10354 = add nsw <4 x i32> %10353, <i32 0, i32 1, i32 2, i32 3>
  %10355 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10354, <4 x i32> %10125) #11
  %10356 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10355, <4 x i32> zeroinitializer) #11
  %10357 = add nsw i32 %blur_x.s0.x.xi.base.s70, -32
  %10358 = insertelement <4 x i32> undef, i32 %10357, i32 0
  %10359 = shufflevector <4 x i32> %10358, <4 x i32> undef, <4 x i32> zeroinitializer
  %10360 = add nsw <4 x i32> %10359, <i32 0, i32 1, i32 2, i32 3>
  %10361 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10360, <4 x i32> %10125) #11
  %10362 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10361, <4 x i32> zeroinitializer) #11
  %10363 = add nsw i32 %blur_x.s0.x.xi.base.s70, -30
  %10364 = insertelement <4 x i32> undef, i32 %10363, i32 0
  %10365 = shufflevector <4 x i32> %10364, <4 x i32> undef, <4 x i32> zeroinitializer
  %10366 = add nsw <4 x i32> %10365, <i32 0, i32 1, i32 2, i32 3>
  %10367 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10366, <4 x i32> %10125) #11
  %10368 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10367, <4 x i32> zeroinitializer) #11
  %10369 = add nsw i32 %blur_x.s0.x.xi.base.s70, -31
  %10370 = insertelement <4 x i32> undef, i32 %10369, i32 0
  %10371 = shufflevector <4 x i32> %10370, <4 x i32> undef, <4 x i32> zeroinitializer
  %10372 = add nsw <4 x i32> %10371, <i32 0, i32 1, i32 2, i32 3>
  %10373 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10372, <4 x i32> %10125) #11
  %10374 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10373, <4 x i32> zeroinitializer) #11
  %10375 = add nsw i32 %blur_x.s0.x.xi.base.s70, -27
  %10376 = insertelement <4 x i32> undef, i32 %10375, i32 0
  %10377 = shufflevector <4 x i32> %10376, <4 x i32> undef, <4 x i32> zeroinitializer
  %10378 = add nsw <4 x i32> %10377, <i32 0, i32 1, i32 2, i32 3>
  %10379 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10378, <4 x i32> %10125) #11
  %10380 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10379, <4 x i32> zeroinitializer) #11
  %10381 = add nsw i32 %blur_x.s0.x.xi.base.s70, -28
  %10382 = insertelement <4 x i32> undef, i32 %10381, i32 0
  %10383 = shufflevector <4 x i32> %10382, <4 x i32> undef, <4 x i32> zeroinitializer
  %10384 = add nsw <4 x i32> %10383, <i32 0, i32 1, i32 2, i32 3>
  %10385 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10384, <4 x i32> %10125) #11
  %10386 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10385, <4 x i32> zeroinitializer) #11
  %10387 = add nsw i32 %blur_x.s0.x.xi.base.s70, -26
  %10388 = insertelement <4 x i32> undef, i32 %10387, i32 0
  %10389 = shufflevector <4 x i32> %10388, <4 x i32> undef, <4 x i32> zeroinitializer
  %10390 = add nsw <4 x i32> %10389, <i32 0, i32 1, i32 2, i32 3>
  %10391 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10390, <4 x i32> %10125) #11
  %10392 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10391, <4 x i32> zeroinitializer) #11
  %10393 = add nsw i32 %blur_x.s0.x.xi.base.s70, -29
  %10394 = insertelement <4 x i32> undef, i32 %10393, i32 0
  %10395 = shufflevector <4 x i32> %10394, <4 x i32> undef, <4 x i32> zeroinitializer
  %10396 = add nsw <4 x i32> %10395, <i32 0, i32 1, i32 2, i32 3>
  %10397 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10396, <4 x i32> %10125) #11
  %10398 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10397, <4 x i32> zeroinitializer) #11
  %10399 = add nsw i32 %blur_x.s0.x.xi.base.s70, -25
  %10400 = insertelement <4 x i32> undef, i32 %10399, i32 0
  %10401 = shufflevector <4 x i32> %10400, <4 x i32> undef, <4 x i32> zeroinitializer
  %10402 = add nsw <4 x i32> %10401, <i32 0, i32 1, i32 2, i32 3>
  %10403 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10402, <4 x i32> %10125) #11
  %10404 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10403, <4 x i32> zeroinitializer) #11
  %10405 = add nsw i32 %blur_x.s0.x.xi.base.s70, -24
  %10406 = insertelement <4 x i32> undef, i32 %10405, i32 0
  %10407 = shufflevector <4 x i32> %10406, <4 x i32> undef, <4 x i32> zeroinitializer
  %10408 = add nsw <4 x i32> %10407, <i32 0, i32 1, i32 2, i32 3>
  %10409 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10408, <4 x i32> %10125) #11
  %10410 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10409, <4 x i32> zeroinitializer) #11
  %10411 = add nsw i32 %blur_x.s0.x.xi.base.s70, -22
  %10412 = insertelement <4 x i32> undef, i32 %10411, i32 0
  %10413 = shufflevector <4 x i32> %10412, <4 x i32> undef, <4 x i32> zeroinitializer
  %10414 = add nsw <4 x i32> %10413, <i32 0, i32 1, i32 2, i32 3>
  %10415 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10414, <4 x i32> %10125) #11
  %10416 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10415, <4 x i32> zeroinitializer) #11
  %10417 = add nsw i32 %blur_x.s0.x.xi.base.s70, -23
  %10418 = insertelement <4 x i32> undef, i32 %10417, i32 0
  %10419 = shufflevector <4 x i32> %10418, <4 x i32> undef, <4 x i32> zeroinitializer
  %10420 = add nsw <4 x i32> %10419, <i32 0, i32 1, i32 2, i32 3>
  %10421 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10420, <4 x i32> %10125) #11
  %10422 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10421, <4 x i32> zeroinitializer) #11
  %10423 = add nsw i32 %blur_x.s0.x.xi.base.s70, -19
  %10424 = insertelement <4 x i32> undef, i32 %10423, i32 0
  %10425 = shufflevector <4 x i32> %10424, <4 x i32> undef, <4 x i32> zeroinitializer
  %10426 = add nsw <4 x i32> %10425, <i32 0, i32 1, i32 2, i32 3>
  %10427 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10426, <4 x i32> %10125) #11
  %10428 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10427, <4 x i32> zeroinitializer) #11
  %10429 = add nsw i32 %blur_x.s0.x.xi.base.s70, -20
  %10430 = insertelement <4 x i32> undef, i32 %10429, i32 0
  %10431 = shufflevector <4 x i32> %10430, <4 x i32> undef, <4 x i32> zeroinitializer
  %10432 = add nsw <4 x i32> %10431, <i32 0, i32 1, i32 2, i32 3>
  %10433 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10432, <4 x i32> %10125) #11
  %10434 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10433, <4 x i32> zeroinitializer) #11
  %10435 = add nsw i32 %blur_x.s0.x.xi.base.s70, -18
  %10436 = insertelement <4 x i32> undef, i32 %10435, i32 0
  %10437 = shufflevector <4 x i32> %10436, <4 x i32> undef, <4 x i32> zeroinitializer
  %10438 = add nsw <4 x i32> %10437, <i32 0, i32 1, i32 2, i32 3>
  %10439 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10438, <4 x i32> %10125) #11
  %10440 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10439, <4 x i32> zeroinitializer) #11
  %10441 = add nsw i32 %blur_x.s0.x.xi.base.s70, -21
  %10442 = insertelement <4 x i32> undef, i32 %10441, i32 0
  %10443 = shufflevector <4 x i32> %10442, <4 x i32> undef, <4 x i32> zeroinitializer
  %10444 = add nsw <4 x i32> %10443, <i32 0, i32 1, i32 2, i32 3>
  %10445 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10444, <4 x i32> %10125) #11
  %10446 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10445, <4 x i32> zeroinitializer) #11
  %10447 = add nsw i32 %blur_x.s0.x.xi.base.s70, -17
  %10448 = insertelement <4 x i32> undef, i32 %10447, i32 0
  %10449 = shufflevector <4 x i32> %10448, <4 x i32> undef, <4 x i32> zeroinitializer
  %10450 = add nsw <4 x i32> %10449, <i32 0, i32 1, i32 2, i32 3>
  %10451 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10450, <4 x i32> %10125) #11
  %10452 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10451, <4 x i32> zeroinitializer) #11
  %10453 = add nsw i32 %blur_x.s0.x.xi.base.s70, -16
  %10454 = insertelement <4 x i32> undef, i32 %10453, i32 0
  %10455 = shufflevector <4 x i32> %10454, <4 x i32> undef, <4 x i32> zeroinitializer
  %10456 = add nsw <4 x i32> %10455, <i32 0, i32 1, i32 2, i32 3>
  %10457 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10456, <4 x i32> %10125) #11
  %10458 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10457, <4 x i32> zeroinitializer) #11
  %10459 = add nsw i32 %blur_x.s0.x.xi.base.s70, -14
  %10460 = insertelement <4 x i32> undef, i32 %10459, i32 0
  %10461 = shufflevector <4 x i32> %10460, <4 x i32> undef, <4 x i32> zeroinitializer
  %10462 = add nsw <4 x i32> %10461, <i32 0, i32 1, i32 2, i32 3>
  %10463 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10462, <4 x i32> %10125) #11
  %10464 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10463, <4 x i32> zeroinitializer) #11
  %10465 = add nsw i32 %blur_x.s0.x.xi.base.s70, -15
  %10466 = insertelement <4 x i32> undef, i32 %10465, i32 0
  %10467 = shufflevector <4 x i32> %10466, <4 x i32> undef, <4 x i32> zeroinitializer
  %10468 = add nsw <4 x i32> %10467, <i32 0, i32 1, i32 2, i32 3>
  %10469 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10468, <4 x i32> %10125) #11
  %10470 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10469, <4 x i32> zeroinitializer) #11
  %10471 = add nsw i32 %blur_x.s0.x.xi.base.s70, -11
  %10472 = insertelement <4 x i32> undef, i32 %10471, i32 0
  %10473 = shufflevector <4 x i32> %10472, <4 x i32> undef, <4 x i32> zeroinitializer
  %10474 = add nsw <4 x i32> %10473, <i32 0, i32 1, i32 2, i32 3>
  %10475 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10474, <4 x i32> %10125) #11
  %10476 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10475, <4 x i32> zeroinitializer) #11
  %10477 = add nsw i32 %blur_x.s0.x.xi.base.s70, -12
  %10478 = insertelement <4 x i32> undef, i32 %10477, i32 0
  %10479 = shufflevector <4 x i32> %10478, <4 x i32> undef, <4 x i32> zeroinitializer
  %10480 = add nsw <4 x i32> %10479, <i32 0, i32 1, i32 2, i32 3>
  %10481 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10480, <4 x i32> %10125) #11
  %10482 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10481, <4 x i32> zeroinitializer) #11
  %10483 = add nsw i32 %blur_x.s0.x.xi.base.s70, -10
  %10484 = insertelement <4 x i32> undef, i32 %10483, i32 0
  %10485 = shufflevector <4 x i32> %10484, <4 x i32> undef, <4 x i32> zeroinitializer
  %10486 = add nsw <4 x i32> %10485, <i32 0, i32 1, i32 2, i32 3>
  %10487 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10486, <4 x i32> %10125) #11
  %10488 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10487, <4 x i32> zeroinitializer) #11
  %10489 = add nsw i32 %blur_x.s0.x.xi.base.s70, -13
  %10490 = insertelement <4 x i32> undef, i32 %10489, i32 0
  %10491 = shufflevector <4 x i32> %10490, <4 x i32> undef, <4 x i32> zeroinitializer
  %10492 = add nsw <4 x i32> %10491, <i32 0, i32 1, i32 2, i32 3>
  %10493 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10492, <4 x i32> %10125) #11
  %10494 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10493, <4 x i32> zeroinitializer) #11
  %10495 = add nsw i32 %blur_x.s0.x.xi.base.s70, -9
  %10496 = insertelement <4 x i32> undef, i32 %10495, i32 0
  %10497 = shufflevector <4 x i32> %10496, <4 x i32> undef, <4 x i32> zeroinitializer
  %10498 = add nsw <4 x i32> %10497, <i32 0, i32 1, i32 2, i32 3>
  %10499 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10498, <4 x i32> %10125) #11
  %10500 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10499, <4 x i32> zeroinitializer) #11
  %10501 = add nsw i32 %blur_x.s0.x.xi.base.s70, -8
  %10502 = insertelement <4 x i32> undef, i32 %10501, i32 0
  %10503 = shufflevector <4 x i32> %10502, <4 x i32> undef, <4 x i32> zeroinitializer
  %10504 = add nsw <4 x i32> %10503, <i32 0, i32 1, i32 2, i32 3>
  %10505 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10504, <4 x i32> %10125) #11
  %10506 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10505, <4 x i32> zeroinitializer) #11
  %10507 = add nsw i32 %blur_x.s0.x.xi.base.s70, -6
  %10508 = insertelement <4 x i32> undef, i32 %10507, i32 0
  %10509 = shufflevector <4 x i32> %10508, <4 x i32> undef, <4 x i32> zeroinitializer
  %10510 = add nsw <4 x i32> %10509, <i32 0, i32 1, i32 2, i32 3>
  %10511 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10510, <4 x i32> %10125) #11
  %10512 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10511, <4 x i32> zeroinitializer) #11
  %10513 = add nsw i32 %blur_x.s0.x.xi.base.s70, -7
  %10514 = insertelement <4 x i32> undef, i32 %10513, i32 0
  %10515 = shufflevector <4 x i32> %10514, <4 x i32> undef, <4 x i32> zeroinitializer
  %10516 = add nsw <4 x i32> %10515, <i32 0, i32 1, i32 2, i32 3>
  %10517 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10516, <4 x i32> %10125) #11
  %10518 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10517, <4 x i32> zeroinitializer) #11
  %10519 = add nsw i32 %blur_x.s0.x.xi.base.s70, -3
  %10520 = insertelement <4 x i32> undef, i32 %10519, i32 0
  %10521 = shufflevector <4 x i32> %10520, <4 x i32> undef, <4 x i32> zeroinitializer
  %10522 = add nsw <4 x i32> %10521, <i32 0, i32 1, i32 2, i32 3>
  %10523 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10522, <4 x i32> %10125) #11
  %10524 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10523, <4 x i32> zeroinitializer) #11
  %10525 = add nsw i32 %blur_x.s0.x.xi.base.s70, -4
  %10526 = insertelement <4 x i32> undef, i32 %10525, i32 0
  %10527 = shufflevector <4 x i32> %10526, <4 x i32> undef, <4 x i32> zeroinitializer
  %10528 = add nsw <4 x i32> %10527, <i32 0, i32 1, i32 2, i32 3>
  %10529 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10528, <4 x i32> %10125) #11
  %10530 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10529, <4 x i32> zeroinitializer) #11
  %10531 = add nsw i32 %blur_x.s0.x.xi.base.s70, -2
  %10532 = insertelement <4 x i32> undef, i32 %10531, i32 0
  %10533 = shufflevector <4 x i32> %10532, <4 x i32> undef, <4 x i32> zeroinitializer
  %10534 = add nsw <4 x i32> %10533, <i32 0, i32 1, i32 2, i32 3>
  %10535 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10534, <4 x i32> %10125) #11
  %10536 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10535, <4 x i32> zeroinitializer) #11
  %10537 = add nsw i32 %blur_x.s0.x.xi.base.s70, -5
  %10538 = insertelement <4 x i32> undef, i32 %10537, i32 0
  %10539 = shufflevector <4 x i32> %10538, <4 x i32> undef, <4 x i32> zeroinitializer
  %10540 = add nsw <4 x i32> %10539, <i32 0, i32 1, i32 2, i32 3>
  %10541 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10540, <4 x i32> %10125) #11
  %10542 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10541, <4 x i32> zeroinitializer) #11
  %10543 = add nsw i32 %blur_x.s0.x.xi.base.s70, -1
  %10544 = insertelement <4 x i32> undef, i32 %10543, i32 0
  %10545 = shufflevector <4 x i32> %10544, <4 x i32> undef, <4 x i32> zeroinitializer
  %10546 = add nsw <4 x i32> %10545, <i32 0, i32 1, i32 2, i32 3>
  %10547 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10546, <4 x i32> %10125) #11
  %10548 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10547, <4 x i32> zeroinitializer) #11
  %10549 = insertelement <4 x i32> undef, i32 %blur_x.s0.x.xi.base.s70, i32 0
  %10550 = shufflevector <4 x i32> %10549, <4 x i32> undef, <4 x i32> zeroinitializer
  %10551 = add nsw <4 x i32> %10550, <i32 0, i32 1, i32 2, i32 3>
  %10552 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10551, <4 x i32> %10125) #11
  %10553 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10552, <4 x i32> zeroinitializer) #11
  %10554 = add nsw i32 %blur_x.s0.x.xi.base.s70, 2
  %10555 = insertelement <4 x i32> undef, i32 %10554, i32 0
  %10556 = shufflevector <4 x i32> %10555, <4 x i32> undef, <4 x i32> zeroinitializer
  %10557 = add nsw <4 x i32> %10556, <i32 0, i32 1, i32 2, i32 3>
  %10558 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10557, <4 x i32> %10125) #11
  %10559 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10558, <4 x i32> zeroinitializer) #11
  %10560 = add nsw i32 %blur_x.s0.x.xi.base.s70, 1
  %10561 = insertelement <4 x i32> undef, i32 %10560, i32 0
  %10562 = shufflevector <4 x i32> %10561, <4 x i32> undef, <4 x i32> zeroinitializer
  %10563 = add nsw <4 x i32> %10562, <i32 0, i32 1, i32 2, i32 3>
  %10564 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10563, <4 x i32> %10125) #11
  %10565 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10564, <4 x i32> zeroinitializer) #11
  %10566 = zext i32 %10164 to i64
  br label %"for blur_x.s0.y.yi72"

"end for blur_x.s0.x.x68":                        ; preds = %"end for blur_x.s0.y.yi73", %"for blur_y.s0.y.yi.$n.rebased62"
  br i1 %10129, label %"for blur_x.s0.x.x.rebased78.preheader", label %"end for blur_x.s0.x.x.rebased79", !prof !385

"for blur_x.s0.x.x.rebased78.preheader":          ; preds = %"end for blur_x.s0.x.x68"
  %10567 = trunc i64 %indvars.iv233 to i32
  %10568 = add i32 %10121, %10567
  br label %"for blur_x.s0.x.x.rebased78"

"for blur_x.s0.y.yi72":                           ; preds = %"for blur_x.s0.x.x67", %"for blur_x.s0.y.yi72"
  %blur_x.s0.y.yi74 = phi i32 [ 0, %"for blur_x.s0.x.x67" ], [ %12220, %"for blur_x.s0.y.yi72" ]
  %a18 = add nsw i32 %10162, %blur_x.s0.y.yi74
  %10569 = icmp sgt i32 %a18, 0
  %10570 = select i1 %10569, i32 %a18, i32 0
  %10571 = mul nsw i32 %10570, %input.stride.145
  %10572 = insertelement <4 x i32> undef, i32 %10571, i32 0
  %t287 = shufflevector <4 x i32> %10572, <4 x i32> undef, <4 x i32> zeroinitializer
  %10573 = add <4 x i32> %t287, %10170
  %10574 = extractelement <4 x i32> %10573, i32 0
  %10575 = sext i32 %10574 to i64
  %10576 = getelementptr inbounds i16, i16* %10126, i64 %10575
  %10577 = load i16, i16* %10576, align 2, !tbaa !386
  %10578 = insertelement <4 x i16> undef, i16 %10577, i32 0
  %10579 = extractelement <4 x i32> %10573, i32 1
  %10580 = sext i32 %10579 to i64
  %10581 = getelementptr inbounds i16, i16* %10126, i64 %10580
  %10582 = load i16, i16* %10581, align 2, !tbaa !386
  %10583 = insertelement <4 x i16> %10578, i16 %10582, i32 1
  %10584 = extractelement <4 x i32> %10573, i32 2
  %10585 = sext i32 %10584 to i64
  %10586 = getelementptr inbounds i16, i16* %10126, i64 %10585
  %10587 = load i16, i16* %10586, align 2, !tbaa !386
  %10588 = insertelement <4 x i16> %10583, i16 %10587, i32 2
  %10589 = extractelement <4 x i32> %10573, i32 3
  %10590 = sext i32 %10589 to i64
  %10591 = getelementptr inbounds i16, i16* %10126, i64 %10590
  %10592 = load i16, i16* %10591, align 2, !tbaa !386
  %10593 = insertelement <4 x i16> %10588, i16 %10592, i32 3
  %10594 = add <4 x i32> %10176, %t287
  %10595 = extractelement <4 x i32> %10594, i32 0
  %10596 = sext i32 %10595 to i64
  %10597 = getelementptr inbounds i16, i16* %10126, i64 %10596
  %10598 = load i16, i16* %10597, align 2, !tbaa !386
  %10599 = insertelement <4 x i16> undef, i16 %10598, i32 0
  %10600 = extractelement <4 x i32> %10594, i32 1
  %10601 = sext i32 %10600 to i64
  %10602 = getelementptr inbounds i16, i16* %10126, i64 %10601
  %10603 = load i16, i16* %10602, align 2, !tbaa !386
  %10604 = insertelement <4 x i16> %10599, i16 %10603, i32 1
  %10605 = extractelement <4 x i32> %10594, i32 2
  %10606 = sext i32 %10605 to i64
  %10607 = getelementptr inbounds i16, i16* %10126, i64 %10606
  %10608 = load i16, i16* %10607, align 2, !tbaa !386
  %10609 = insertelement <4 x i16> %10604, i16 %10608, i32 2
  %10610 = extractelement <4 x i32> %10594, i32 3
  %10611 = sext i32 %10610 to i64
  %10612 = getelementptr inbounds i16, i16* %10126, i64 %10611
  %10613 = load i16, i16* %10612, align 2, !tbaa !386
  %10614 = insertelement <4 x i16> %10609, i16 %10613, i32 3
  %10615 = add <4 x i32> %10182, %t287
  %10616 = extractelement <4 x i32> %10615, i32 0
  %10617 = sext i32 %10616 to i64
  %10618 = getelementptr inbounds i16, i16* %10126, i64 %10617
  %10619 = load i16, i16* %10618, align 2, !tbaa !386
  %10620 = insertelement <4 x i16> undef, i16 %10619, i32 0
  %10621 = extractelement <4 x i32> %10615, i32 1
  %10622 = sext i32 %10621 to i64
  %10623 = getelementptr inbounds i16, i16* %10126, i64 %10622
  %10624 = load i16, i16* %10623, align 2, !tbaa !386
  %10625 = insertelement <4 x i16> %10620, i16 %10624, i32 1
  %10626 = extractelement <4 x i32> %10615, i32 2
  %10627 = sext i32 %10626 to i64
  %10628 = getelementptr inbounds i16, i16* %10126, i64 %10627
  %10629 = load i16, i16* %10628, align 2, !tbaa !386
  %10630 = insertelement <4 x i16> %10625, i16 %10629, i32 2
  %10631 = extractelement <4 x i32> %10615, i32 3
  %10632 = sext i32 %10631 to i64
  %10633 = getelementptr inbounds i16, i16* %10126, i64 %10632
  %10634 = load i16, i16* %10633, align 2, !tbaa !386
  %10635 = insertelement <4 x i16> %10630, i16 %10634, i32 3
  %10636 = add <4 x i32> %10188, %t287
  %10637 = extractelement <4 x i32> %10636, i32 0
  %10638 = sext i32 %10637 to i64
  %10639 = getelementptr inbounds i16, i16* %10126, i64 %10638
  %10640 = load i16, i16* %10639, align 2, !tbaa !386
  %10641 = insertelement <4 x i16> undef, i16 %10640, i32 0
  %10642 = extractelement <4 x i32> %10636, i32 1
  %10643 = sext i32 %10642 to i64
  %10644 = getelementptr inbounds i16, i16* %10126, i64 %10643
  %10645 = load i16, i16* %10644, align 2, !tbaa !386
  %10646 = insertelement <4 x i16> %10641, i16 %10645, i32 1
  %10647 = extractelement <4 x i32> %10636, i32 2
  %10648 = sext i32 %10647 to i64
  %10649 = getelementptr inbounds i16, i16* %10126, i64 %10648
  %10650 = load i16, i16* %10649, align 2, !tbaa !386
  %10651 = insertelement <4 x i16> %10646, i16 %10650, i32 2
  %10652 = extractelement <4 x i32> %10636, i32 3
  %10653 = sext i32 %10652 to i64
  %10654 = getelementptr inbounds i16, i16* %10126, i64 %10653
  %10655 = load i16, i16* %10654, align 2, !tbaa !386
  %10656 = insertelement <4 x i16> %10651, i16 %10655, i32 3
  %10657 = add <4 x i32> %10194, %t287
  %10658 = extractelement <4 x i32> %10657, i32 0
  %10659 = sext i32 %10658 to i64
  %10660 = getelementptr inbounds i16, i16* %10126, i64 %10659
  %10661 = load i16, i16* %10660, align 2, !tbaa !386
  %10662 = insertelement <4 x i16> undef, i16 %10661, i32 0
  %10663 = extractelement <4 x i32> %10657, i32 1
  %10664 = sext i32 %10663 to i64
  %10665 = getelementptr inbounds i16, i16* %10126, i64 %10664
  %10666 = load i16, i16* %10665, align 2, !tbaa !386
  %10667 = insertelement <4 x i16> %10662, i16 %10666, i32 1
  %10668 = extractelement <4 x i32> %10657, i32 2
  %10669 = sext i32 %10668 to i64
  %10670 = getelementptr inbounds i16, i16* %10126, i64 %10669
  %10671 = load i16, i16* %10670, align 2, !tbaa !386
  %10672 = insertelement <4 x i16> %10667, i16 %10671, i32 2
  %10673 = extractelement <4 x i32> %10657, i32 3
  %10674 = sext i32 %10673 to i64
  %10675 = getelementptr inbounds i16, i16* %10126, i64 %10674
  %10676 = load i16, i16* %10675, align 2, !tbaa !386
  %10677 = insertelement <4 x i16> %10672, i16 %10676, i32 3
  %10678 = add <4 x i32> %10200, %t287
  %10679 = extractelement <4 x i32> %10678, i32 0
  %10680 = sext i32 %10679 to i64
  %10681 = getelementptr inbounds i16, i16* %10126, i64 %10680
  %10682 = load i16, i16* %10681, align 2, !tbaa !386
  %10683 = insertelement <4 x i16> undef, i16 %10682, i32 0
  %10684 = extractelement <4 x i32> %10678, i32 1
  %10685 = sext i32 %10684 to i64
  %10686 = getelementptr inbounds i16, i16* %10126, i64 %10685
  %10687 = load i16, i16* %10686, align 2, !tbaa !386
  %10688 = insertelement <4 x i16> %10683, i16 %10687, i32 1
  %10689 = extractelement <4 x i32> %10678, i32 2
  %10690 = sext i32 %10689 to i64
  %10691 = getelementptr inbounds i16, i16* %10126, i64 %10690
  %10692 = load i16, i16* %10691, align 2, !tbaa !386
  %10693 = insertelement <4 x i16> %10688, i16 %10692, i32 2
  %10694 = extractelement <4 x i32> %10678, i32 3
  %10695 = sext i32 %10694 to i64
  %10696 = getelementptr inbounds i16, i16* %10126, i64 %10695
  %10697 = load i16, i16* %10696, align 2, !tbaa !386
  %10698 = insertelement <4 x i16> %10693, i16 %10697, i32 3
  %10699 = add <4 x i32> %10206, %t287
  %10700 = extractelement <4 x i32> %10699, i32 0
  %10701 = sext i32 %10700 to i64
  %10702 = getelementptr inbounds i16, i16* %10126, i64 %10701
  %10703 = load i16, i16* %10702, align 2, !tbaa !386
  %10704 = insertelement <4 x i16> undef, i16 %10703, i32 0
  %10705 = extractelement <4 x i32> %10699, i32 1
  %10706 = sext i32 %10705 to i64
  %10707 = getelementptr inbounds i16, i16* %10126, i64 %10706
  %10708 = load i16, i16* %10707, align 2, !tbaa !386
  %10709 = insertelement <4 x i16> %10704, i16 %10708, i32 1
  %10710 = extractelement <4 x i32> %10699, i32 2
  %10711 = sext i32 %10710 to i64
  %10712 = getelementptr inbounds i16, i16* %10126, i64 %10711
  %10713 = load i16, i16* %10712, align 2, !tbaa !386
  %10714 = insertelement <4 x i16> %10709, i16 %10713, i32 2
  %10715 = extractelement <4 x i32> %10699, i32 3
  %10716 = sext i32 %10715 to i64
  %10717 = getelementptr inbounds i16, i16* %10126, i64 %10716
  %10718 = load i16, i16* %10717, align 2, !tbaa !386
  %10719 = insertelement <4 x i16> %10714, i16 %10718, i32 3
  %10720 = add <4 x i32> %10212, %t287
  %10721 = extractelement <4 x i32> %10720, i32 0
  %10722 = sext i32 %10721 to i64
  %10723 = getelementptr inbounds i16, i16* %10126, i64 %10722
  %10724 = load i16, i16* %10723, align 2, !tbaa !386
  %10725 = insertelement <4 x i16> undef, i16 %10724, i32 0
  %10726 = extractelement <4 x i32> %10720, i32 1
  %10727 = sext i32 %10726 to i64
  %10728 = getelementptr inbounds i16, i16* %10126, i64 %10727
  %10729 = load i16, i16* %10728, align 2, !tbaa !386
  %10730 = insertelement <4 x i16> %10725, i16 %10729, i32 1
  %10731 = extractelement <4 x i32> %10720, i32 2
  %10732 = sext i32 %10731 to i64
  %10733 = getelementptr inbounds i16, i16* %10126, i64 %10732
  %10734 = load i16, i16* %10733, align 2, !tbaa !386
  %10735 = insertelement <4 x i16> %10730, i16 %10734, i32 2
  %10736 = extractelement <4 x i32> %10720, i32 3
  %10737 = sext i32 %10736 to i64
  %10738 = getelementptr inbounds i16, i16* %10126, i64 %10737
  %10739 = load i16, i16* %10738, align 2, !tbaa !386
  %10740 = insertelement <4 x i16> %10735, i16 %10739, i32 3
  %10741 = add <4 x i32> %10218, %t287
  %10742 = extractelement <4 x i32> %10741, i32 0
  %10743 = sext i32 %10742 to i64
  %10744 = getelementptr inbounds i16, i16* %10126, i64 %10743
  %10745 = load i16, i16* %10744, align 2, !tbaa !386
  %10746 = insertelement <4 x i16> undef, i16 %10745, i32 0
  %10747 = extractelement <4 x i32> %10741, i32 1
  %10748 = sext i32 %10747 to i64
  %10749 = getelementptr inbounds i16, i16* %10126, i64 %10748
  %10750 = load i16, i16* %10749, align 2, !tbaa !386
  %10751 = insertelement <4 x i16> %10746, i16 %10750, i32 1
  %10752 = extractelement <4 x i32> %10741, i32 2
  %10753 = sext i32 %10752 to i64
  %10754 = getelementptr inbounds i16, i16* %10126, i64 %10753
  %10755 = load i16, i16* %10754, align 2, !tbaa !386
  %10756 = insertelement <4 x i16> %10751, i16 %10755, i32 2
  %10757 = extractelement <4 x i32> %10741, i32 3
  %10758 = sext i32 %10757 to i64
  %10759 = getelementptr inbounds i16, i16* %10126, i64 %10758
  %10760 = load i16, i16* %10759, align 2, !tbaa !386
  %10761 = insertelement <4 x i16> %10756, i16 %10760, i32 3
  %10762 = add <4 x i32> %10224, %t287
  %10763 = extractelement <4 x i32> %10762, i32 0
  %10764 = sext i32 %10763 to i64
  %10765 = getelementptr inbounds i16, i16* %10126, i64 %10764
  %10766 = load i16, i16* %10765, align 2, !tbaa !386
  %10767 = insertelement <4 x i16> undef, i16 %10766, i32 0
  %10768 = extractelement <4 x i32> %10762, i32 1
  %10769 = sext i32 %10768 to i64
  %10770 = getelementptr inbounds i16, i16* %10126, i64 %10769
  %10771 = load i16, i16* %10770, align 2, !tbaa !386
  %10772 = insertelement <4 x i16> %10767, i16 %10771, i32 1
  %10773 = extractelement <4 x i32> %10762, i32 2
  %10774 = sext i32 %10773 to i64
  %10775 = getelementptr inbounds i16, i16* %10126, i64 %10774
  %10776 = load i16, i16* %10775, align 2, !tbaa !386
  %10777 = insertelement <4 x i16> %10772, i16 %10776, i32 2
  %10778 = extractelement <4 x i32> %10762, i32 3
  %10779 = sext i32 %10778 to i64
  %10780 = getelementptr inbounds i16, i16* %10126, i64 %10779
  %10781 = load i16, i16* %10780, align 2, !tbaa !386
  %10782 = insertelement <4 x i16> %10777, i16 %10781, i32 3
  %10783 = add <4 x i32> %10230, %t287
  %10784 = extractelement <4 x i32> %10783, i32 0
  %10785 = sext i32 %10784 to i64
  %10786 = getelementptr inbounds i16, i16* %10126, i64 %10785
  %10787 = load i16, i16* %10786, align 2, !tbaa !386
  %10788 = insertelement <4 x i16> undef, i16 %10787, i32 0
  %10789 = extractelement <4 x i32> %10783, i32 1
  %10790 = sext i32 %10789 to i64
  %10791 = getelementptr inbounds i16, i16* %10126, i64 %10790
  %10792 = load i16, i16* %10791, align 2, !tbaa !386
  %10793 = insertelement <4 x i16> %10788, i16 %10792, i32 1
  %10794 = extractelement <4 x i32> %10783, i32 2
  %10795 = sext i32 %10794 to i64
  %10796 = getelementptr inbounds i16, i16* %10126, i64 %10795
  %10797 = load i16, i16* %10796, align 2, !tbaa !386
  %10798 = insertelement <4 x i16> %10793, i16 %10797, i32 2
  %10799 = extractelement <4 x i32> %10783, i32 3
  %10800 = sext i32 %10799 to i64
  %10801 = getelementptr inbounds i16, i16* %10126, i64 %10800
  %10802 = load i16, i16* %10801, align 2, !tbaa !386
  %10803 = insertelement <4 x i16> %10798, i16 %10802, i32 3
  %10804 = add <4 x i16> %10698, %10656
  %10805 = add <4 x i16> %10782, %10761
  %10806 = add <4 x i16> %10614, %10593
  %10807 = add <4 x i16> %10806, %10635
  %10808 = add <4 x i16> %10807, %10677
  %10809 = add <4 x i16> %10808, %10804
  %10810 = add <4 x i16> %10809, %10719
  %10811 = add <4 x i16> %10804, %10614
  %10812 = add <4 x i16> %10811, %10740
  %10813 = add <4 x i16> %10812, %10805
  %10814 = add <4 x i16> %10813, %10803
  %10815 = shufflevector <4 x i16> %10810, <4 x i16> %10814, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10816 = zext <8 x i16> %10815 to <8 x i32>
  %10817 = mul nuw nsw <8 x i32> %10816, <i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362>
  %10818 = shufflevector <8 x i32> %10817, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %10819 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %10818, i32 16)
  %10820 = shufflevector <8 x i32> %10817, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %10821 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %10820, i32 16)
  %10822 = shufflevector <4 x i16> %10819, <4 x i16> %10821, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10823 = add <4 x i16> %10804, %10593
  %10824 = add <4 x i16> %10823, %10614
  %10825 = add <4 x i16> %10824, %10635
  %10826 = add <4 x i16> %10825, %10677
  %10827 = add <4 x i16> %10826, %10719
  %10828 = add <4 x i16> %10812, %10761
  %10829 = add <4 x i16> %10828, %10782
  %10830 = add <4 x i16> %10829, %10803
  %10831 = shufflevector <4 x i16> %10827, <4 x i16> %10830, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10832 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %10822, <8 x i16> %10831) #11
  %10833 = lshr <8 x i16> %10832, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %10834 = add <4 x i32> %10236, %t287
  %10835 = extractelement <4 x i32> %10834, i32 0
  %10836 = sext i32 %10835 to i64
  %10837 = getelementptr inbounds i16, i16* %10126, i64 %10836
  %10838 = load i16, i16* %10837, align 2, !tbaa !386
  %10839 = insertelement <4 x i16> undef, i16 %10838, i32 0
  %10840 = extractelement <4 x i32> %10834, i32 1
  %10841 = sext i32 %10840 to i64
  %10842 = getelementptr inbounds i16, i16* %10126, i64 %10841
  %10843 = load i16, i16* %10842, align 2, !tbaa !386
  %10844 = insertelement <4 x i16> %10839, i16 %10843, i32 1
  %10845 = extractelement <4 x i32> %10834, i32 2
  %10846 = sext i32 %10845 to i64
  %10847 = getelementptr inbounds i16, i16* %10126, i64 %10846
  %10848 = load i16, i16* %10847, align 2, !tbaa !386
  %10849 = insertelement <4 x i16> %10844, i16 %10848, i32 2
  %10850 = extractelement <4 x i32> %10834, i32 3
  %10851 = sext i32 %10850 to i64
  %10852 = getelementptr inbounds i16, i16* %10126, i64 %10851
  %10853 = load i16, i16* %10852, align 2, !tbaa !386
  %10854 = insertelement <4 x i16> %10849, i16 %10853, i32 3
  %10855 = add <4 x i32> %10242, %t287
  %10856 = extractelement <4 x i32> %10855, i32 0
  %10857 = sext i32 %10856 to i64
  %10858 = getelementptr inbounds i16, i16* %10126, i64 %10857
  %10859 = load i16, i16* %10858, align 2, !tbaa !386
  %10860 = insertelement <4 x i16> undef, i16 %10859, i32 0
  %10861 = extractelement <4 x i32> %10855, i32 1
  %10862 = sext i32 %10861 to i64
  %10863 = getelementptr inbounds i16, i16* %10126, i64 %10862
  %10864 = load i16, i16* %10863, align 2, !tbaa !386
  %10865 = insertelement <4 x i16> %10860, i16 %10864, i32 1
  %10866 = extractelement <4 x i32> %10855, i32 2
  %10867 = sext i32 %10866 to i64
  %10868 = getelementptr inbounds i16, i16* %10126, i64 %10867
  %10869 = load i16, i16* %10868, align 2, !tbaa !386
  %10870 = insertelement <4 x i16> %10865, i16 %10869, i32 2
  %10871 = extractelement <4 x i32> %10855, i32 3
  %10872 = sext i32 %10871 to i64
  %10873 = getelementptr inbounds i16, i16* %10126, i64 %10872
  %10874 = load i16, i16* %10873, align 2, !tbaa !386
  %10875 = insertelement <4 x i16> %10870, i16 %10874, i32 3
  %10876 = add <4 x i32> %10248, %t287
  %10877 = extractelement <4 x i32> %10876, i32 0
  %10878 = sext i32 %10877 to i64
  %10879 = getelementptr inbounds i16, i16* %10126, i64 %10878
  %10880 = load i16, i16* %10879, align 2, !tbaa !386
  %10881 = insertelement <4 x i16> undef, i16 %10880, i32 0
  %10882 = extractelement <4 x i32> %10876, i32 1
  %10883 = sext i32 %10882 to i64
  %10884 = getelementptr inbounds i16, i16* %10126, i64 %10883
  %10885 = load i16, i16* %10884, align 2, !tbaa !386
  %10886 = insertelement <4 x i16> %10881, i16 %10885, i32 1
  %10887 = extractelement <4 x i32> %10876, i32 2
  %10888 = sext i32 %10887 to i64
  %10889 = getelementptr inbounds i16, i16* %10126, i64 %10888
  %10890 = load i16, i16* %10889, align 2, !tbaa !386
  %10891 = insertelement <4 x i16> %10886, i16 %10890, i32 2
  %10892 = extractelement <4 x i32> %10876, i32 3
  %10893 = sext i32 %10892 to i64
  %10894 = getelementptr inbounds i16, i16* %10126, i64 %10893
  %10895 = load i16, i16* %10894, align 2, !tbaa !386
  %10896 = insertelement <4 x i16> %10891, i16 %10895, i32 3
  %10897 = add <4 x i32> %10254, %t287
  %10898 = extractelement <4 x i32> %10897, i32 0
  %10899 = sext i32 %10898 to i64
  %10900 = getelementptr inbounds i16, i16* %10126, i64 %10899
  %10901 = load i16, i16* %10900, align 2, !tbaa !386
  %10902 = insertelement <4 x i16> undef, i16 %10901, i32 0
  %10903 = extractelement <4 x i32> %10897, i32 1
  %10904 = sext i32 %10903 to i64
  %10905 = getelementptr inbounds i16, i16* %10126, i64 %10904
  %10906 = load i16, i16* %10905, align 2, !tbaa !386
  %10907 = insertelement <4 x i16> %10902, i16 %10906, i32 1
  %10908 = extractelement <4 x i32> %10897, i32 2
  %10909 = sext i32 %10908 to i64
  %10910 = getelementptr inbounds i16, i16* %10126, i64 %10909
  %10911 = load i16, i16* %10910, align 2, !tbaa !386
  %10912 = insertelement <4 x i16> %10907, i16 %10911, i32 2
  %10913 = extractelement <4 x i32> %10897, i32 3
  %10914 = sext i32 %10913 to i64
  %10915 = getelementptr inbounds i16, i16* %10126, i64 %10914
  %10916 = load i16, i16* %10915, align 2, !tbaa !386
  %10917 = insertelement <4 x i16> %10912, i16 %10916, i32 3
  %10918 = add <4 x i32> %10260, %t287
  %10919 = extractelement <4 x i32> %10918, i32 0
  %10920 = sext i32 %10919 to i64
  %10921 = getelementptr inbounds i16, i16* %10126, i64 %10920
  %10922 = load i16, i16* %10921, align 2, !tbaa !386
  %10923 = insertelement <4 x i16> undef, i16 %10922, i32 0
  %10924 = extractelement <4 x i32> %10918, i32 1
  %10925 = sext i32 %10924 to i64
  %10926 = getelementptr inbounds i16, i16* %10126, i64 %10925
  %10927 = load i16, i16* %10926, align 2, !tbaa !386
  %10928 = insertelement <4 x i16> %10923, i16 %10927, i32 1
  %10929 = extractelement <4 x i32> %10918, i32 2
  %10930 = sext i32 %10929 to i64
  %10931 = getelementptr inbounds i16, i16* %10126, i64 %10930
  %10932 = load i16, i16* %10931, align 2, !tbaa !386
  %10933 = insertelement <4 x i16> %10928, i16 %10932, i32 2
  %10934 = extractelement <4 x i32> %10918, i32 3
  %10935 = sext i32 %10934 to i64
  %10936 = getelementptr inbounds i16, i16* %10126, i64 %10935
  %10937 = load i16, i16* %10936, align 2, !tbaa !386
  %10938 = insertelement <4 x i16> %10933, i16 %10937, i32 3
  %10939 = add <4 x i32> %10266, %t287
  %10940 = extractelement <4 x i32> %10939, i32 0
  %10941 = sext i32 %10940 to i64
  %10942 = getelementptr inbounds i16, i16* %10126, i64 %10941
  %10943 = load i16, i16* %10942, align 2, !tbaa !386
  %10944 = insertelement <4 x i16> undef, i16 %10943, i32 0
  %10945 = extractelement <4 x i32> %10939, i32 1
  %10946 = sext i32 %10945 to i64
  %10947 = getelementptr inbounds i16, i16* %10126, i64 %10946
  %10948 = load i16, i16* %10947, align 2, !tbaa !386
  %10949 = insertelement <4 x i16> %10944, i16 %10948, i32 1
  %10950 = extractelement <4 x i32> %10939, i32 2
  %10951 = sext i32 %10950 to i64
  %10952 = getelementptr inbounds i16, i16* %10126, i64 %10951
  %10953 = load i16, i16* %10952, align 2, !tbaa !386
  %10954 = insertelement <4 x i16> %10949, i16 %10953, i32 2
  %10955 = extractelement <4 x i32> %10939, i32 3
  %10956 = sext i32 %10955 to i64
  %10957 = getelementptr inbounds i16, i16* %10126, i64 %10956
  %10958 = load i16, i16* %10957, align 2, !tbaa !386
  %10959 = insertelement <4 x i16> %10954, i16 %10958, i32 3
  %10960 = add <4 x i32> %10272, %t287
  %10961 = extractelement <4 x i32> %10960, i32 0
  %10962 = sext i32 %10961 to i64
  %10963 = getelementptr inbounds i16, i16* %10126, i64 %10962
  %10964 = load i16, i16* %10963, align 2, !tbaa !386
  %10965 = insertelement <4 x i16> undef, i16 %10964, i32 0
  %10966 = extractelement <4 x i32> %10960, i32 1
  %10967 = sext i32 %10966 to i64
  %10968 = getelementptr inbounds i16, i16* %10126, i64 %10967
  %10969 = load i16, i16* %10968, align 2, !tbaa !386
  %10970 = insertelement <4 x i16> %10965, i16 %10969, i32 1
  %10971 = extractelement <4 x i32> %10960, i32 2
  %10972 = sext i32 %10971 to i64
  %10973 = getelementptr inbounds i16, i16* %10126, i64 %10972
  %10974 = load i16, i16* %10973, align 2, !tbaa !386
  %10975 = insertelement <4 x i16> %10970, i16 %10974, i32 2
  %10976 = extractelement <4 x i32> %10960, i32 3
  %10977 = sext i32 %10976 to i64
  %10978 = getelementptr inbounds i16, i16* %10126, i64 %10977
  %10979 = load i16, i16* %10978, align 2, !tbaa !386
  %10980 = insertelement <4 x i16> %10975, i16 %10979, i32 3
  %10981 = add <4 x i32> %10278, %t287
  %10982 = extractelement <4 x i32> %10981, i32 0
  %10983 = sext i32 %10982 to i64
  %10984 = getelementptr inbounds i16, i16* %10126, i64 %10983
  %10985 = load i16, i16* %10984, align 2, !tbaa !386
  %10986 = insertelement <4 x i16> undef, i16 %10985, i32 0
  %10987 = extractelement <4 x i32> %10981, i32 1
  %10988 = sext i32 %10987 to i64
  %10989 = getelementptr inbounds i16, i16* %10126, i64 %10988
  %10990 = load i16, i16* %10989, align 2, !tbaa !386
  %10991 = insertelement <4 x i16> %10986, i16 %10990, i32 1
  %10992 = extractelement <4 x i32> %10981, i32 2
  %10993 = sext i32 %10992 to i64
  %10994 = getelementptr inbounds i16, i16* %10126, i64 %10993
  %10995 = load i16, i16* %10994, align 2, !tbaa !386
  %10996 = insertelement <4 x i16> %10991, i16 %10995, i32 2
  %10997 = extractelement <4 x i32> %10981, i32 3
  %10998 = sext i32 %10997 to i64
  %10999 = getelementptr inbounds i16, i16* %10126, i64 %10998
  %11000 = load i16, i16* %10999, align 2, !tbaa !386
  %11001 = insertelement <4 x i16> %10996, i16 %11000, i32 3
  %11002 = add <4 x i16> %10896, %10875
  %11003 = add <4 x i16> %10980, %10959
  %11004 = add <4 x i16> %10803, %10805
  %11005 = add <4 x i16> %11004, %10854
  %11006 = add <4 x i16> %11005, %11002
  %11007 = add <4 x i16> %11006, %10917
  %11008 = add <4 x i16> %11002, %10854
  %11009 = add <4 x i16> %11008, %10938
  %11010 = add <4 x i16> %11009, %11003
  %11011 = add <4 x i16> %11010, %11001
  %11012 = shufflevector <4 x i16> %11007, <4 x i16> %11011, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %11013 = zext <8 x i16> %11012 to <8 x i32>
  %11014 = mul nuw nsw <8 x i32> %11013, <i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362>
  %11015 = shufflevector <8 x i32> %11014, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %11016 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %11015, i32 16)
  %11017 = shufflevector <8 x i32> %11014, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %11018 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %11017, i32 16)
  %11019 = shufflevector <4 x i16> %11016, <4 x i16> %11018, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %11020 = add <4 x i16> %11005, %10875
  %11021 = add <4 x i16> %11020, %10896
  %11022 = add <4 x i16> %11021, %10917
  %11023 = add <4 x i16> %11009, %10959
  %11024 = add <4 x i16> %11023, %10980
  %11025 = add <4 x i16> %11024, %11001
  %11026 = shufflevector <4 x i16> %11022, <4 x i16> %11025, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %11027 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %11019, <8 x i16> %11026) #11
  %11028 = lshr <8 x i16> %11027, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %11029 = add <4 x i32> %10284, %t287
  %11030 = extractelement <4 x i32> %11029, i32 0
  %11031 = sext i32 %11030 to i64
  %11032 = getelementptr inbounds i16, i16* %10126, i64 %11031
  %11033 = load i16, i16* %11032, align 2, !tbaa !386
  %11034 = insertelement <4 x i16> undef, i16 %11033, i32 0
  %11035 = extractelement <4 x i32> %11029, i32 1
  %11036 = sext i32 %11035 to i64
  %11037 = getelementptr inbounds i16, i16* %10126, i64 %11036
  %11038 = load i16, i16* %11037, align 2, !tbaa !386
  %11039 = insertelement <4 x i16> %11034, i16 %11038, i32 1
  %11040 = extractelement <4 x i32> %11029, i32 2
  %11041 = sext i32 %11040 to i64
  %11042 = getelementptr inbounds i16, i16* %10126, i64 %11041
  %11043 = load i16, i16* %11042, align 2, !tbaa !386
  %11044 = insertelement <4 x i16> %11039, i16 %11043, i32 2
  %11045 = extractelement <4 x i32> %11029, i32 3
  %11046 = sext i32 %11045 to i64
  %11047 = getelementptr inbounds i16, i16* %10126, i64 %11046
  %11048 = load i16, i16* %11047, align 2, !tbaa !386
  %11049 = insertelement <4 x i16> %11044, i16 %11048, i32 3
  %11050 = add <4 x i32> %10290, %t287
  %11051 = extractelement <4 x i32> %11050, i32 0
  %11052 = sext i32 %11051 to i64
  %11053 = getelementptr inbounds i16, i16* %10126, i64 %11052
  %11054 = load i16, i16* %11053, align 2, !tbaa !386
  %11055 = insertelement <4 x i16> undef, i16 %11054, i32 0
  %11056 = extractelement <4 x i32> %11050, i32 1
  %11057 = sext i32 %11056 to i64
  %11058 = getelementptr inbounds i16, i16* %10126, i64 %11057
  %11059 = load i16, i16* %11058, align 2, !tbaa !386
  %11060 = insertelement <4 x i16> %11055, i16 %11059, i32 1
  %11061 = extractelement <4 x i32> %11050, i32 2
  %11062 = sext i32 %11061 to i64
  %11063 = getelementptr inbounds i16, i16* %10126, i64 %11062
  %11064 = load i16, i16* %11063, align 2, !tbaa !386
  %11065 = insertelement <4 x i16> %11060, i16 %11064, i32 2
  %11066 = extractelement <4 x i32> %11050, i32 3
  %11067 = sext i32 %11066 to i64
  %11068 = getelementptr inbounds i16, i16* %10126, i64 %11067
  %11069 = load i16, i16* %11068, align 2, !tbaa !386
  %11070 = insertelement <4 x i16> %11065, i16 %11069, i32 3
  %11071 = add <4 x i32> %10296, %t287
  %11072 = extractelement <4 x i32> %11071, i32 0
  %11073 = sext i32 %11072 to i64
  %11074 = getelementptr inbounds i16, i16* %10126, i64 %11073
  %11075 = load i16, i16* %11074, align 2, !tbaa !386
  %11076 = insertelement <4 x i16> undef, i16 %11075, i32 0
  %11077 = extractelement <4 x i32> %11071, i32 1
  %11078 = sext i32 %11077 to i64
  %11079 = getelementptr inbounds i16, i16* %10126, i64 %11078
  %11080 = load i16, i16* %11079, align 2, !tbaa !386
  %11081 = insertelement <4 x i16> %11076, i16 %11080, i32 1
  %11082 = extractelement <4 x i32> %11071, i32 2
  %11083 = sext i32 %11082 to i64
  %11084 = getelementptr inbounds i16, i16* %10126, i64 %11083
  %11085 = load i16, i16* %11084, align 2, !tbaa !386
  %11086 = insertelement <4 x i16> %11081, i16 %11085, i32 2
  %11087 = extractelement <4 x i32> %11071, i32 3
  %11088 = sext i32 %11087 to i64
  %11089 = getelementptr inbounds i16, i16* %10126, i64 %11088
  %11090 = load i16, i16* %11089, align 2, !tbaa !386
  %11091 = insertelement <4 x i16> %11086, i16 %11090, i32 3
  %11092 = add <4 x i32> %10302, %t287
  %11093 = extractelement <4 x i32> %11092, i32 0
  %11094 = sext i32 %11093 to i64
  %11095 = getelementptr inbounds i16, i16* %10126, i64 %11094
  %11096 = load i16, i16* %11095, align 2, !tbaa !386
  %11097 = insertelement <4 x i16> undef, i16 %11096, i32 0
  %11098 = extractelement <4 x i32> %11092, i32 1
  %11099 = sext i32 %11098 to i64
  %11100 = getelementptr inbounds i16, i16* %10126, i64 %11099
  %11101 = load i16, i16* %11100, align 2, !tbaa !386
  %11102 = insertelement <4 x i16> %11097, i16 %11101, i32 1
  %11103 = extractelement <4 x i32> %11092, i32 2
  %11104 = sext i32 %11103 to i64
  %11105 = getelementptr inbounds i16, i16* %10126, i64 %11104
  %11106 = load i16, i16* %11105, align 2, !tbaa !386
  %11107 = insertelement <4 x i16> %11102, i16 %11106, i32 2
  %11108 = extractelement <4 x i32> %11092, i32 3
  %11109 = sext i32 %11108 to i64
  %11110 = getelementptr inbounds i16, i16* %10126, i64 %11109
  %11111 = load i16, i16* %11110, align 2, !tbaa !386
  %11112 = insertelement <4 x i16> %11107, i16 %11111, i32 3
  %11113 = add <4 x i32> %10308, %t287
  %11114 = extractelement <4 x i32> %11113, i32 0
  %11115 = sext i32 %11114 to i64
  %11116 = getelementptr inbounds i16, i16* %10126, i64 %11115
  %11117 = load i16, i16* %11116, align 2, !tbaa !386
  %11118 = insertelement <4 x i16> undef, i16 %11117, i32 0
  %11119 = extractelement <4 x i32> %11113, i32 1
  %11120 = sext i32 %11119 to i64
  %11121 = getelementptr inbounds i16, i16* %10126, i64 %11120
  %11122 = load i16, i16* %11121, align 2, !tbaa !386
  %11123 = insertelement <4 x i16> %11118, i16 %11122, i32 1
  %11124 = extractelement <4 x i32> %11113, i32 2
  %11125 = sext i32 %11124 to i64
  %11126 = getelementptr inbounds i16, i16* %10126, i64 %11125
  %11127 = load i16, i16* %11126, align 2, !tbaa !386
  %11128 = insertelement <4 x i16> %11123, i16 %11127, i32 2
  %11129 = extractelement <4 x i32> %11113, i32 3
  %11130 = sext i32 %11129 to i64
  %11131 = getelementptr inbounds i16, i16* %10126, i64 %11130
  %11132 = load i16, i16* %11131, align 2, !tbaa !386
  %11133 = insertelement <4 x i16> %11128, i16 %11132, i32 3
  %11134 = add <4 x i32> %10314, %t287
  %11135 = extractelement <4 x i32> %11134, i32 0
  %11136 = sext i32 %11135 to i64
  %11137 = getelementptr inbounds i16, i16* %10126, i64 %11136
  %11138 = load i16, i16* %11137, align 2, !tbaa !386
  %11139 = insertelement <4 x i16> undef, i16 %11138, i32 0
  %11140 = extractelement <4 x i32> %11134, i32 1
  %11141 = sext i32 %11140 to i64
  %11142 = getelementptr inbounds i16, i16* %10126, i64 %11141
  %11143 = load i16, i16* %11142, align 2, !tbaa !386
  %11144 = insertelement <4 x i16> %11139, i16 %11143, i32 1
  %11145 = extractelement <4 x i32> %11134, i32 2
  %11146 = sext i32 %11145 to i64
  %11147 = getelementptr inbounds i16, i16* %10126, i64 %11146
  %11148 = load i16, i16* %11147, align 2, !tbaa !386
  %11149 = insertelement <4 x i16> %11144, i16 %11148, i32 2
  %11150 = extractelement <4 x i32> %11134, i32 3
  %11151 = sext i32 %11150 to i64
  %11152 = getelementptr inbounds i16, i16* %10126, i64 %11151
  %11153 = load i16, i16* %11152, align 2, !tbaa !386
  %11154 = insertelement <4 x i16> %11149, i16 %11153, i32 3
  %11155 = add <4 x i32> %10320, %t287
  %11156 = extractelement <4 x i32> %11155, i32 0
  %11157 = sext i32 %11156 to i64
  %11158 = getelementptr inbounds i16, i16* %10126, i64 %11157
  %11159 = load i16, i16* %11158, align 2, !tbaa !386
  %11160 = insertelement <4 x i16> undef, i16 %11159, i32 0
  %11161 = extractelement <4 x i32> %11155, i32 1
  %11162 = sext i32 %11161 to i64
  %11163 = getelementptr inbounds i16, i16* %10126, i64 %11162
  %11164 = load i16, i16* %11163, align 2, !tbaa !386
  %11165 = insertelement <4 x i16> %11160, i16 %11164, i32 1
  %11166 = extractelement <4 x i32> %11155, i32 2
  %11167 = sext i32 %11166 to i64
  %11168 = getelementptr inbounds i16, i16* %10126, i64 %11167
  %11169 = load i16, i16* %11168, align 2, !tbaa !386
  %11170 = insertelement <4 x i16> %11165, i16 %11169, i32 2
  %11171 = extractelement <4 x i32> %11155, i32 3
  %11172 = sext i32 %11171 to i64
  %11173 = getelementptr inbounds i16, i16* %10126, i64 %11172
  %11174 = load i16, i16* %11173, align 2, !tbaa !386
  %11175 = insertelement <4 x i16> %11170, i16 %11174, i32 3
  %11176 = add <4 x i32> %10326, %t287
  %11177 = extractelement <4 x i32> %11176, i32 0
  %11178 = sext i32 %11177 to i64
  %11179 = getelementptr inbounds i16, i16* %10126, i64 %11178
  %11180 = load i16, i16* %11179, align 2, !tbaa !386
  %11181 = insertelement <4 x i16> undef, i16 %11180, i32 0
  %11182 = extractelement <4 x i32> %11176, i32 1
  %11183 = sext i32 %11182 to i64
  %11184 = getelementptr inbounds i16, i16* %10126, i64 %11183
  %11185 = load i16, i16* %11184, align 2, !tbaa !386
  %11186 = insertelement <4 x i16> %11181, i16 %11185, i32 1
  %11187 = extractelement <4 x i32> %11176, i32 2
  %11188 = sext i32 %11187 to i64
  %11189 = getelementptr inbounds i16, i16* %10126, i64 %11188
  %11190 = load i16, i16* %11189, align 2, !tbaa !386
  %11191 = insertelement <4 x i16> %11186, i16 %11190, i32 2
  %11192 = extractelement <4 x i32> %11176, i32 3
  %11193 = sext i32 %11192 to i64
  %11194 = getelementptr inbounds i16, i16* %10126, i64 %11193
  %11195 = load i16, i16* %11194, align 2, !tbaa !386
  %11196 = insertelement <4 x i16> %11191, i16 %11195, i32 3
  %11197 = add <4 x i16> %11091, %11070
  %11198 = add <4 x i16> %11175, %11154
  %11199 = add <4 x i16> %11001, %11003
  %11200 = add <4 x i16> %11199, %11049
  %11201 = add <4 x i16> %11200, %11197
  %11202 = add <4 x i16> %11201, %11112
  %11203 = add <4 x i16> %11197, %11049
  %11204 = add <4 x i16> %11203, %11133
  %11205 = add <4 x i16> %11204, %11198
  %11206 = add <4 x i16> %11205, %11196
  %11207 = shufflevector <4 x i16> %11202, <4 x i16> %11206, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %11208 = zext <8 x i16> %11207 to <8 x i32>
  %11209 = mul nuw nsw <8 x i32> %11208, <i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362>
  %11210 = shufflevector <8 x i32> %11209, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %11211 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %11210, i32 16)
  %11212 = shufflevector <8 x i32> %11209, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %11213 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %11212, i32 16)
  %11214 = shufflevector <4 x i16> %11211, <4 x i16> %11213, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %11215 = add <4 x i16> %11200, %11070
  %11216 = add <4 x i16> %11215, %11091
  %11217 = add <4 x i16> %11216, %11112
  %11218 = add <4 x i16> %11204, %11154
  %11219 = add <4 x i16> %11218, %11175
  %11220 = add <4 x i16> %11219, %11196
  %11221 = shufflevector <4 x i16> %11217, <4 x i16> %11220, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %11222 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %11214, <8 x i16> %11221) #11
  %11223 = lshr <8 x i16> %11222, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %11224 = add <4 x i32> %10332, %t287
  %11225 = extractelement <4 x i32> %11224, i32 0
  %11226 = sext i32 %11225 to i64
  %11227 = getelementptr inbounds i16, i16* %10126, i64 %11226
  %11228 = load i16, i16* %11227, align 2, !tbaa !386
  %11229 = insertelement <4 x i16> undef, i16 %11228, i32 0
  %11230 = extractelement <4 x i32> %11224, i32 1
  %11231 = sext i32 %11230 to i64
  %11232 = getelementptr inbounds i16, i16* %10126, i64 %11231
  %11233 = load i16, i16* %11232, align 2, !tbaa !386
  %11234 = insertelement <4 x i16> %11229, i16 %11233, i32 1
  %11235 = extractelement <4 x i32> %11224, i32 2
  %11236 = sext i32 %11235 to i64
  %11237 = getelementptr inbounds i16, i16* %10126, i64 %11236
  %11238 = load i16, i16* %11237, align 2, !tbaa !386
  %11239 = insertelement <4 x i16> %11234, i16 %11238, i32 2
  %11240 = extractelement <4 x i32> %11224, i32 3
  %11241 = sext i32 %11240 to i64
  %11242 = getelementptr inbounds i16, i16* %10126, i64 %11241
  %11243 = load i16, i16* %11242, align 2, !tbaa !386
  %11244 = insertelement <4 x i16> %11239, i16 %11243, i32 3
  %11245 = add <4 x i32> %10338, %t287
  %11246 = extractelement <4 x i32> %11245, i32 0
  %11247 = sext i32 %11246 to i64
  %11248 = getelementptr inbounds i16, i16* %10126, i64 %11247
  %11249 = load i16, i16* %11248, align 2, !tbaa !386
  %11250 = insertelement <4 x i16> undef, i16 %11249, i32 0
  %11251 = extractelement <4 x i32> %11245, i32 1
  %11252 = sext i32 %11251 to i64
  %11253 = getelementptr inbounds i16, i16* %10126, i64 %11252
  %11254 = load i16, i16* %11253, align 2, !tbaa !386
  %11255 = insertelement <4 x i16> %11250, i16 %11254, i32 1
  %11256 = extractelement <4 x i32> %11245, i32 2
  %11257 = sext i32 %11256 to i64
  %11258 = getelementptr inbounds i16, i16* %10126, i64 %11257
  %11259 = load i16, i16* %11258, align 2, !tbaa !386
  %11260 = insertelement <4 x i16> %11255, i16 %11259, i32 2
  %11261 = extractelement <4 x i32> %11245, i32 3
  %11262 = sext i32 %11261 to i64
  %11263 = getelementptr inbounds i16, i16* %10126, i64 %11262
  %11264 = load i16, i16* %11263, align 2, !tbaa !386
  %11265 = insertelement <4 x i16> %11260, i16 %11264, i32 3
  %11266 = add <4 x i32> %10344, %t287
  %11267 = extractelement <4 x i32> %11266, i32 0
  %11268 = sext i32 %11267 to i64
  %11269 = getelementptr inbounds i16, i16* %10126, i64 %11268
  %11270 = load i16, i16* %11269, align 2, !tbaa !386
  %11271 = insertelement <4 x i16> undef, i16 %11270, i32 0
  %11272 = extractelement <4 x i32> %11266, i32 1
  %11273 = sext i32 %11272 to i64
  %11274 = getelementptr inbounds i16, i16* %10126, i64 %11273
  %11275 = load i16, i16* %11274, align 2, !tbaa !386
  %11276 = insertelement <4 x i16> %11271, i16 %11275, i32 1
  %11277 = extractelement <4 x i32> %11266, i32 2
  %11278 = sext i32 %11277 to i64
  %11279 = getelementptr inbounds i16, i16* %10126, i64 %11278
  %11280 = load i16, i16* %11279, align 2, !tbaa !386
  %11281 = insertelement <4 x i16> %11276, i16 %11280, i32 2
  %11282 = extractelement <4 x i32> %11266, i32 3
  %11283 = sext i32 %11282 to i64
  %11284 = getelementptr inbounds i16, i16* %10126, i64 %11283
  %11285 = load i16, i16* %11284, align 2, !tbaa !386
  %11286 = insertelement <4 x i16> %11281, i16 %11285, i32 3
  %11287 = add <4 x i32> %10350, %t287
  %11288 = extractelement <4 x i32> %11287, i32 0
  %11289 = sext i32 %11288 to i64
  %11290 = getelementptr inbounds i16, i16* %10126, i64 %11289
  %11291 = load i16, i16* %11290, align 2, !tbaa !386
  %11292 = insertelement <4 x i16> undef, i16 %11291, i32 0
  %11293 = extractelement <4 x i32> %11287, i32 1
  %11294 = sext i32 %11293 to i64
  %11295 = getelementptr inbounds i16, i16* %10126, i64 %11294
  %11296 = load i16, i16* %11295, align 2, !tbaa !386
  %11297 = insertelement <4 x i16> %11292, i16 %11296, i32 1
  %11298 = extractelement <4 x i32> %11287, i32 2
  %11299 = sext i32 %11298 to i64
  %11300 = getelementptr inbounds i16, i16* %10126, i64 %11299
  %11301 = load i16, i16* %11300, align 2, !tbaa !386
  %11302 = insertelement <4 x i16> %11297, i16 %11301, i32 2
  %11303 = extractelement <4 x i32> %11287, i32 3
  %11304 = sext i32 %11303 to i64
  %11305 = getelementptr inbounds i16, i16* %10126, i64 %11304
  %11306 = load i16, i16* %11305, align 2, !tbaa !386
  %11307 = insertelement <4 x i16> %11302, i16 %11306, i32 3
  %11308 = add <4 x i32> %10356, %t287
  %11309 = extractelement <4 x i32> %11308, i32 0
  %11310 = sext i32 %11309 to i64
  %11311 = getelementptr inbounds i16, i16* %10126, i64 %11310
  %11312 = load i16, i16* %11311, align 2, !tbaa !386
  %11313 = insertelement <4 x i16> undef, i16 %11312, i32 0
  %11314 = extractelement <4 x i32> %11308, i32 1
  %11315 = sext i32 %11314 to i64
  %11316 = getelementptr inbounds i16, i16* %10126, i64 %11315
  %11317 = load i16, i16* %11316, align 2, !tbaa !386
  %11318 = insertelement <4 x i16> %11313, i16 %11317, i32 1
  %11319 = extractelement <4 x i32> %11308, i32 2
  %11320 = sext i32 %11319 to i64
  %11321 = getelementptr inbounds i16, i16* %10126, i64 %11320
  %11322 = load i16, i16* %11321, align 2, !tbaa !386
  %11323 = insertelement <4 x i16> %11318, i16 %11322, i32 2
  %11324 = extractelement <4 x i32> %11308, i32 3
  %11325 = sext i32 %11324 to i64
  %11326 = getelementptr inbounds i16, i16* %10126, i64 %11325
  %11327 = load i16, i16* %11326, align 2, !tbaa !386
  %11328 = insertelement <4 x i16> %11323, i16 %11327, i32 3
  %11329 = add <4 x i32> %10362, %t287
  %11330 = extractelement <4 x i32> %11329, i32 0
  %11331 = sext i32 %11330 to i64
  %11332 = getelementptr inbounds i16, i16* %10126, i64 %11331
  %11333 = load i16, i16* %11332, align 2, !tbaa !386
  %11334 = insertelement <4 x i16> undef, i16 %11333, i32 0
  %11335 = extractelement <4 x i32> %11329, i32 1
  %11336 = sext i32 %11335 to i64
  %11337 = getelementptr inbounds i16, i16* %10126, i64 %11336
  %11338 = load i16, i16* %11337, align 2, !tbaa !386
  %11339 = insertelement <4 x i16> %11334, i16 %11338, i32 1
  %11340 = extractelement <4 x i32> %11329, i32 2
  %11341 = sext i32 %11340 to i64
  %11342 = getelementptr inbounds i16, i16* %10126, i64 %11341
  %11343 = load i16, i16* %11342, align 2, !tbaa !386
  %11344 = insertelement <4 x i16> %11339, i16 %11343, i32 2
  %11345 = extractelement <4 x i32> %11329, i32 3
  %11346 = sext i32 %11345 to i64
  %11347 = getelementptr inbounds i16, i16* %10126, i64 %11346
  %11348 = load i16, i16* %11347, align 2, !tbaa !386
  %11349 = insertelement <4 x i16> %11344, i16 %11348, i32 3
  %11350 = add <4 x i32> %10368, %t287
  %11351 = extractelement <4 x i32> %11350, i32 0
  %11352 = sext i32 %11351 to i64
  %11353 = getelementptr inbounds i16, i16* %10126, i64 %11352
  %11354 = load i16, i16* %11353, align 2, !tbaa !386
  %11355 = insertelement <4 x i16> undef, i16 %11354, i32 0
  %11356 = extractelement <4 x i32> %11350, i32 1
  %11357 = sext i32 %11356 to i64
  %11358 = getelementptr inbounds i16, i16* %10126, i64 %11357
  %11359 = load i16, i16* %11358, align 2, !tbaa !386
  %11360 = insertelement <4 x i16> %11355, i16 %11359, i32 1
  %11361 = extractelement <4 x i32> %11350, i32 2
  %11362 = sext i32 %11361 to i64
  %11363 = getelementptr inbounds i16, i16* %10126, i64 %11362
  %11364 = load i16, i16* %11363, align 2, !tbaa !386
  %11365 = insertelement <4 x i16> %11360, i16 %11364, i32 2
  %11366 = extractelement <4 x i32> %11350, i32 3
  %11367 = sext i32 %11366 to i64
  %11368 = getelementptr inbounds i16, i16* %10126, i64 %11367
  %11369 = load i16, i16* %11368, align 2, !tbaa !386
  %11370 = insertelement <4 x i16> %11365, i16 %11369, i32 3
  %11371 = add <4 x i32> %10374, %t287
  %11372 = extractelement <4 x i32> %11371, i32 0
  %11373 = sext i32 %11372 to i64
  %11374 = getelementptr inbounds i16, i16* %10126, i64 %11373
  %11375 = load i16, i16* %11374, align 2, !tbaa !386
  %11376 = insertelement <4 x i16> undef, i16 %11375, i32 0
  %11377 = extractelement <4 x i32> %11371, i32 1
  %11378 = sext i32 %11377 to i64
  %11379 = getelementptr inbounds i16, i16* %10126, i64 %11378
  %11380 = load i16, i16* %11379, align 2, !tbaa !386
  %11381 = insertelement <4 x i16> %11376, i16 %11380, i32 1
  %11382 = extractelement <4 x i32> %11371, i32 2
  %11383 = sext i32 %11382 to i64
  %11384 = getelementptr inbounds i16, i16* %10126, i64 %11383
  %11385 = load i16, i16* %11384, align 2, !tbaa !386
  %11386 = insertelement <4 x i16> %11381, i16 %11385, i32 2
  %11387 = extractelement <4 x i32> %11371, i32 3
  %11388 = sext i32 %11387 to i64
  %11389 = getelementptr inbounds i16, i16* %10126, i64 %11388
  %11390 = load i16, i16* %11389, align 2, !tbaa !386
  %11391 = insertelement <4 x i16> %11386, i16 %11390, i32 3
  %11392 = add <4 x i16> %11286, %11265
  %11393 = add <4 x i16> %11370, %11349
  %11394 = add <4 x i16> %11196, %11198
  %11395 = add <4 x i16> %11394, %11244
  %11396 = add <4 x i16> %11395, %11392
  %11397 = add <4 x i16> %11396, %11307
  %11398 = add <4 x i16> %11392, %11244
  %11399 = add <4 x i16> %11398, %11328
  %11400 = add <4 x i16> %11399, %11393
  %11401 = add <4 x i16> %11400, %11391
  %11402 = shufflevector <4 x i16> %11397, <4 x i16> %11401, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %11403 = zext <8 x i16> %11402 to <8 x i32>
  %11404 = mul nuw nsw <8 x i32> %11403, <i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362>
  %11405 = shufflevector <8 x i32> %11404, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %11406 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %11405, i32 16)
  %11407 = shufflevector <8 x i32> %11404, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %11408 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %11407, i32 16)
  %11409 = shufflevector <4 x i16> %11406, <4 x i16> %11408, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %11410 = add <4 x i16> %11395, %11265
  %11411 = add <4 x i16> %11410, %11286
  %11412 = add <4 x i16> %11411, %11307
  %11413 = add <4 x i16> %11399, %11349
  %11414 = add <4 x i16> %11413, %11370
  %11415 = add <4 x i16> %11414, %11391
  %11416 = shufflevector <4 x i16> %11412, <4 x i16> %11415, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %11417 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %11409, <8 x i16> %11416) #11
  %11418 = lshr <8 x i16> %11417, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %11419 = add <4 x i32> %10380, %t287
  %11420 = extractelement <4 x i32> %11419, i32 0
  %11421 = sext i32 %11420 to i64
  %11422 = getelementptr inbounds i16, i16* %10126, i64 %11421
  %11423 = load i16, i16* %11422, align 2, !tbaa !386
  %11424 = insertelement <4 x i16> undef, i16 %11423, i32 0
  %11425 = extractelement <4 x i32> %11419, i32 1
  %11426 = sext i32 %11425 to i64
  %11427 = getelementptr inbounds i16, i16* %10126, i64 %11426
  %11428 = load i16, i16* %11427, align 2, !tbaa !386
  %11429 = insertelement <4 x i16> %11424, i16 %11428, i32 1
  %11430 = extractelement <4 x i32> %11419, i32 2
  %11431 = sext i32 %11430 to i64
  %11432 = getelementptr inbounds i16, i16* %10126, i64 %11431
  %11433 = load i16, i16* %11432, align 2, !tbaa !386
  %11434 = insertelement <4 x i16> %11429, i16 %11433, i32 2
  %11435 = extractelement <4 x i32> %11419, i32 3
  %11436 = sext i32 %11435 to i64
  %11437 = getelementptr inbounds i16, i16* %10126, i64 %11436
  %11438 = load i16, i16* %11437, align 2, !tbaa !386
  %11439 = insertelement <4 x i16> %11434, i16 %11438, i32 3
  %11440 = add <4 x i32> %10386, %t287
  %11441 = extractelement <4 x i32> %11440, i32 0
  %11442 = sext i32 %11441 to i64
  %11443 = getelementptr inbounds i16, i16* %10126, i64 %11442
  %11444 = load i16, i16* %11443, align 2, !tbaa !386
  %11445 = insertelement <4 x i16> undef, i16 %11444, i32 0
  %11446 = extractelement <4 x i32> %11440, i32 1
  %11447 = sext i32 %11446 to i64
  %11448 = getelementptr inbounds i16, i16* %10126, i64 %11447
  %11449 = load i16, i16* %11448, align 2, !tbaa !386
  %11450 = insertelement <4 x i16> %11445, i16 %11449, i32 1
  %11451 = extractelement <4 x i32> %11440, i32 2
  %11452 = sext i32 %11451 to i64
  %11453 = getelementptr inbounds i16, i16* %10126, i64 %11452
  %11454 = load i16, i16* %11453, align 2, !tbaa !386
  %11455 = insertelement <4 x i16> %11450, i16 %11454, i32 2
  %11456 = extractelement <4 x i32> %11440, i32 3
  %11457 = sext i32 %11456 to i64
  %11458 = getelementptr inbounds i16, i16* %10126, i64 %11457
  %11459 = load i16, i16* %11458, align 2, !tbaa !386
  %11460 = insertelement <4 x i16> %11455, i16 %11459, i32 3
  %11461 = add <4 x i32> %10392, %t287
  %11462 = extractelement <4 x i32> %11461, i32 0
  %11463 = sext i32 %11462 to i64
  %11464 = getelementptr inbounds i16, i16* %10126, i64 %11463
  %11465 = load i16, i16* %11464, align 2, !tbaa !386
  %11466 = insertelement <4 x i16> undef, i16 %11465, i32 0
  %11467 = extractelement <4 x i32> %11461, i32 1
  %11468 = sext i32 %11467 to i64
  %11469 = getelementptr inbounds i16, i16* %10126, i64 %11468
  %11470 = load i16, i16* %11469, align 2, !tbaa !386
  %11471 = insertelement <4 x i16> %11466, i16 %11470, i32 1
  %11472 = extractelement <4 x i32> %11461, i32 2
  %11473 = sext i32 %11472 to i64
  %11474 = getelementptr inbounds i16, i16* %10126, i64 %11473
  %11475 = load i16, i16* %11474, align 2, !tbaa !386
  %11476 = insertelement <4 x i16> %11471, i16 %11475, i32 2
  %11477 = extractelement <4 x i32> %11461, i32 3
  %11478 = sext i32 %11477 to i64
  %11479 = getelementptr inbounds i16, i16* %10126, i64 %11478
  %11480 = load i16, i16* %11479, align 2, !tbaa !386
  %11481 = insertelement <4 x i16> %11476, i16 %11480, i32 3
  %11482 = add <4 x i32> %10398, %t287
  %11483 = extractelement <4 x i32> %11482, i32 0
  %11484 = sext i32 %11483 to i64
  %11485 = getelementptr inbounds i16, i16* %10126, i64 %11484
  %11486 = load i16, i16* %11485, align 2, !tbaa !386
  %11487 = insertelement <4 x i16> undef, i16 %11486, i32 0
  %11488 = extractelement <4 x i32> %11482, i32 1
  %11489 = sext i32 %11488 to i64
  %11490 = getelementptr inbounds i16, i16* %10126, i64 %11489
  %11491 = load i16, i16* %11490, align 2, !tbaa !386
  %11492 = insertelement <4 x i16> %11487, i16 %11491, i32 1
  %11493 = extractelement <4 x i32> %11482, i32 2
  %11494 = sext i32 %11493 to i64
  %11495 = getelementptr inbounds i16, i16* %10126, i64 %11494
  %11496 = load i16, i16* %11495, align 2, !tbaa !386
  %11497 = insertelement <4 x i16> %11492, i16 %11496, i32 2
  %11498 = extractelement <4 x i32> %11482, i32 3
  %11499 = sext i32 %11498 to i64
  %11500 = getelementptr inbounds i16, i16* %10126, i64 %11499
  %11501 = load i16, i16* %11500, align 2, !tbaa !386
  %11502 = insertelement <4 x i16> %11497, i16 %11501, i32 3
  %11503 = add <4 x i32> %10404, %t287
  %11504 = extractelement <4 x i32> %11503, i32 0
  %11505 = sext i32 %11504 to i64
  %11506 = getelementptr inbounds i16, i16* %10126, i64 %11505
  %11507 = load i16, i16* %11506, align 2, !tbaa !386
  %11508 = insertelement <4 x i16> undef, i16 %11507, i32 0
  %11509 = extractelement <4 x i32> %11503, i32 1
  %11510 = sext i32 %11509 to i64
  %11511 = getelementptr inbounds i16, i16* %10126, i64 %11510
  %11512 = load i16, i16* %11511, align 2, !tbaa !386
  %11513 = insertelement <4 x i16> %11508, i16 %11512, i32 1
  %11514 = extractelement <4 x i32> %11503, i32 2
  %11515 = sext i32 %11514 to i64
  %11516 = getelementptr inbounds i16, i16* %10126, i64 %11515
  %11517 = load i16, i16* %11516, align 2, !tbaa !386
  %11518 = insertelement <4 x i16> %11513, i16 %11517, i32 2
  %11519 = extractelement <4 x i32> %11503, i32 3
  %11520 = sext i32 %11519 to i64
  %11521 = getelementptr inbounds i16, i16* %10126, i64 %11520
  %11522 = load i16, i16* %11521, align 2, !tbaa !386
  %11523 = insertelement <4 x i16> %11518, i16 %11522, i32 3
  %11524 = add <4 x i32> %10410, %t287
  %11525 = extractelement <4 x i32> %11524, i32 0
  %11526 = sext i32 %11525 to i64
  %11527 = getelementptr inbounds i16, i16* %10126, i64 %11526
  %11528 = load i16, i16* %11527, align 2, !tbaa !386
  %11529 = insertelement <4 x i16> undef, i16 %11528, i32 0
  %11530 = extractelement <4 x i32> %11524, i32 1
  %11531 = sext i32 %11530 to i64
  %11532 = getelementptr inbounds i16, i16* %10126, i64 %11531
  %11533 = load i16, i16* %11532, align 2, !tbaa !386
  %11534 = insertelement <4 x i16> %11529, i16 %11533, i32 1
  %11535 = extractelement <4 x i32> %11524, i32 2
  %11536 = sext i32 %11535 to i64
  %11537 = getelementptr inbounds i16, i16* %10126, i64 %11536
  %11538 = load i16, i16* %11537, align 2, !tbaa !386
  %11539 = insertelement <4 x i16> %11534, i16 %11538, i32 2
  %11540 = extractelement <4 x i32> %11524, i32 3
  %11541 = sext i32 %11540 to i64
  %11542 = getelementptr inbounds i16, i16* %10126, i64 %11541
  %11543 = load i16, i16* %11542, align 2, !tbaa !386
  %11544 = insertelement <4 x i16> %11539, i16 %11543, i32 3
  %11545 = add <4 x i32> %10416, %t287
  %11546 = extractelement <4 x i32> %11545, i32 0
  %11547 = sext i32 %11546 to i64
  %11548 = getelementptr inbounds i16, i16* %10126, i64 %11547
  %11549 = load i16, i16* %11548, align 2, !tbaa !386
  %11550 = insertelement <4 x i16> undef, i16 %11549, i32 0
  %11551 = extractelement <4 x i32> %11545, i32 1
  %11552 = sext i32 %11551 to i64
  %11553 = getelementptr inbounds i16, i16* %10126, i64 %11552
  %11554 = load i16, i16* %11553, align 2, !tbaa !386
  %11555 = insertelement <4 x i16> %11550, i16 %11554, i32 1
  %11556 = extractelement <4 x i32> %11545, i32 2
  %11557 = sext i32 %11556 to i64
  %11558 = getelementptr inbounds i16, i16* %10126, i64 %11557
  %11559 = load i16, i16* %11558, align 2, !tbaa !386
  %11560 = insertelement <4 x i16> %11555, i16 %11559, i32 2
  %11561 = extractelement <4 x i32> %11545, i32 3
  %11562 = sext i32 %11561 to i64
  %11563 = getelementptr inbounds i16, i16* %10126, i64 %11562
  %11564 = load i16, i16* %11563, align 2, !tbaa !386
  %11565 = insertelement <4 x i16> %11560, i16 %11564, i32 3
  %11566 = add <4 x i32> %10422, %t287
  %11567 = extractelement <4 x i32> %11566, i32 0
  %11568 = sext i32 %11567 to i64
  %11569 = getelementptr inbounds i16, i16* %10126, i64 %11568
  %11570 = load i16, i16* %11569, align 2, !tbaa !386
  %11571 = insertelement <4 x i16> undef, i16 %11570, i32 0
  %11572 = extractelement <4 x i32> %11566, i32 1
  %11573 = sext i32 %11572 to i64
  %11574 = getelementptr inbounds i16, i16* %10126, i64 %11573
  %11575 = load i16, i16* %11574, align 2, !tbaa !386
  %11576 = insertelement <4 x i16> %11571, i16 %11575, i32 1
  %11577 = extractelement <4 x i32> %11566, i32 2
  %11578 = sext i32 %11577 to i64
  %11579 = getelementptr inbounds i16, i16* %10126, i64 %11578
  %11580 = load i16, i16* %11579, align 2, !tbaa !386
  %11581 = insertelement <4 x i16> %11576, i16 %11580, i32 2
  %11582 = extractelement <4 x i32> %11566, i32 3
  %11583 = sext i32 %11582 to i64
  %11584 = getelementptr inbounds i16, i16* %10126, i64 %11583
  %11585 = load i16, i16* %11584, align 2, !tbaa !386
  %11586 = insertelement <4 x i16> %11581, i16 %11585, i32 3
  %11587 = add <4 x i16> %11481, %11460
  %11588 = add <4 x i16> %11565, %11544
  %11589 = add <4 x i16> %11391, %11393
  %11590 = add <4 x i16> %11589, %11439
  %11591 = add <4 x i16> %11590, %11587
  %11592 = add <4 x i16> %11591, %11502
  %11593 = add <4 x i16> %11587, %11439
  %11594 = add <4 x i16> %11593, %11523
  %11595 = add <4 x i16> %11594, %11588
  %11596 = add <4 x i16> %11595, %11586
  %11597 = shufflevector <4 x i16> %11592, <4 x i16> %11596, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %11598 = zext <8 x i16> %11597 to <8 x i32>
  %11599 = mul nuw nsw <8 x i32> %11598, <i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362>
  %11600 = shufflevector <8 x i32> %11599, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %11601 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %11600, i32 16)
  %11602 = shufflevector <8 x i32> %11599, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %11603 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %11602, i32 16)
  %11604 = shufflevector <4 x i16> %11601, <4 x i16> %11603, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %11605 = add <4 x i16> %11590, %11460
  %11606 = add <4 x i16> %11605, %11481
  %11607 = add <4 x i16> %11606, %11502
  %11608 = add <4 x i16> %11594, %11544
  %11609 = add <4 x i16> %11608, %11565
  %11610 = add <4 x i16> %11609, %11586
  %11611 = shufflevector <4 x i16> %11607, <4 x i16> %11610, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %11612 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %11604, <8 x i16> %11611) #11
  %11613 = lshr <8 x i16> %11612, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %11614 = add <4 x i32> %10428, %t287
  %11615 = extractelement <4 x i32> %11614, i32 0
  %11616 = sext i32 %11615 to i64
  %11617 = getelementptr inbounds i16, i16* %10126, i64 %11616
  %11618 = load i16, i16* %11617, align 2, !tbaa !386
  %11619 = insertelement <4 x i16> undef, i16 %11618, i32 0
  %11620 = extractelement <4 x i32> %11614, i32 1
  %11621 = sext i32 %11620 to i64
  %11622 = getelementptr inbounds i16, i16* %10126, i64 %11621
  %11623 = load i16, i16* %11622, align 2, !tbaa !386
  %11624 = insertelement <4 x i16> %11619, i16 %11623, i32 1
  %11625 = extractelement <4 x i32> %11614, i32 2
  %11626 = sext i32 %11625 to i64
  %11627 = getelementptr inbounds i16, i16* %10126, i64 %11626
  %11628 = load i16, i16* %11627, align 2, !tbaa !386
  %11629 = insertelement <4 x i16> %11624, i16 %11628, i32 2
  %11630 = extractelement <4 x i32> %11614, i32 3
  %11631 = sext i32 %11630 to i64
  %11632 = getelementptr inbounds i16, i16* %10126, i64 %11631
  %11633 = load i16, i16* %11632, align 2, !tbaa !386
  %11634 = insertelement <4 x i16> %11629, i16 %11633, i32 3
  %11635 = add <4 x i32> %10434, %t287
  %11636 = extractelement <4 x i32> %11635, i32 0
  %11637 = sext i32 %11636 to i64
  %11638 = getelementptr inbounds i16, i16* %10126, i64 %11637
  %11639 = load i16, i16* %11638, align 2, !tbaa !386
  %11640 = insertelement <4 x i16> undef, i16 %11639, i32 0
  %11641 = extractelement <4 x i32> %11635, i32 1
  %11642 = sext i32 %11641 to i64
  %11643 = getelementptr inbounds i16, i16* %10126, i64 %11642
  %11644 = load i16, i16* %11643, align 2, !tbaa !386
  %11645 = insertelement <4 x i16> %11640, i16 %11644, i32 1
  %11646 = extractelement <4 x i32> %11635, i32 2
  %11647 = sext i32 %11646 to i64
  %11648 = getelementptr inbounds i16, i16* %10126, i64 %11647
  %11649 = load i16, i16* %11648, align 2, !tbaa !386
  %11650 = insertelement <4 x i16> %11645, i16 %11649, i32 2
  %11651 = extractelement <4 x i32> %11635, i32 3
  %11652 = sext i32 %11651 to i64
  %11653 = getelementptr inbounds i16, i16* %10126, i64 %11652
  %11654 = load i16, i16* %11653, align 2, !tbaa !386
  %11655 = insertelement <4 x i16> %11650, i16 %11654, i32 3
  %11656 = add <4 x i32> %10440, %t287
  %11657 = extractelement <4 x i32> %11656, i32 0
  %11658 = sext i32 %11657 to i64
  %11659 = getelementptr inbounds i16, i16* %10126, i64 %11658
  %11660 = load i16, i16* %11659, align 2, !tbaa !386
  %11661 = insertelement <4 x i16> undef, i16 %11660, i32 0
  %11662 = extractelement <4 x i32> %11656, i32 1
  %11663 = sext i32 %11662 to i64
  %11664 = getelementptr inbounds i16, i16* %10126, i64 %11663
  %11665 = load i16, i16* %11664, align 2, !tbaa !386
  %11666 = insertelement <4 x i16> %11661, i16 %11665, i32 1
  %11667 = extractelement <4 x i32> %11656, i32 2
  %11668 = sext i32 %11667 to i64
  %11669 = getelementptr inbounds i16, i16* %10126, i64 %11668
  %11670 = load i16, i16* %11669, align 2, !tbaa !386
  %11671 = insertelement <4 x i16> %11666, i16 %11670, i32 2
  %11672 = extractelement <4 x i32> %11656, i32 3
  %11673 = sext i32 %11672 to i64
  %11674 = getelementptr inbounds i16, i16* %10126, i64 %11673
  %11675 = load i16, i16* %11674, align 2, !tbaa !386
  %11676 = insertelement <4 x i16> %11671, i16 %11675, i32 3
  %11677 = add <4 x i32> %10446, %t287
  %11678 = extractelement <4 x i32> %11677, i32 0
  %11679 = sext i32 %11678 to i64
  %11680 = getelementptr inbounds i16, i16* %10126, i64 %11679
  %11681 = load i16, i16* %11680, align 2, !tbaa !386
  %11682 = insertelement <4 x i16> undef, i16 %11681, i32 0
  %11683 = extractelement <4 x i32> %11677, i32 1
  %11684 = sext i32 %11683 to i64
  %11685 = getelementptr inbounds i16, i16* %10126, i64 %11684
  %11686 = load i16, i16* %11685, align 2, !tbaa !386
  %11687 = insertelement <4 x i16> %11682, i16 %11686, i32 1
  %11688 = extractelement <4 x i32> %11677, i32 2
  %11689 = sext i32 %11688 to i64
  %11690 = getelementptr inbounds i16, i16* %10126, i64 %11689
  %11691 = load i16, i16* %11690, align 2, !tbaa !386
  %11692 = insertelement <4 x i16> %11687, i16 %11691, i32 2
  %11693 = extractelement <4 x i32> %11677, i32 3
  %11694 = sext i32 %11693 to i64
  %11695 = getelementptr inbounds i16, i16* %10126, i64 %11694
  %11696 = load i16, i16* %11695, align 2, !tbaa !386
  %11697 = insertelement <4 x i16> %11692, i16 %11696, i32 3
  %11698 = add <4 x i32> %10452, %t287
  %11699 = extractelement <4 x i32> %11698, i32 0
  %11700 = sext i32 %11699 to i64
  %11701 = getelementptr inbounds i16, i16* %10126, i64 %11700
  %11702 = load i16, i16* %11701, align 2, !tbaa !386
  %11703 = insertelement <4 x i16> undef, i16 %11702, i32 0
  %11704 = extractelement <4 x i32> %11698, i32 1
  %11705 = sext i32 %11704 to i64
  %11706 = getelementptr inbounds i16, i16* %10126, i64 %11705
  %11707 = load i16, i16* %11706, align 2, !tbaa !386
  %11708 = insertelement <4 x i16> %11703, i16 %11707, i32 1
  %11709 = extractelement <4 x i32> %11698, i32 2
  %11710 = sext i32 %11709 to i64
  %11711 = getelementptr inbounds i16, i16* %10126, i64 %11710
  %11712 = load i16, i16* %11711, align 2, !tbaa !386
  %11713 = insertelement <4 x i16> %11708, i16 %11712, i32 2
  %11714 = extractelement <4 x i32> %11698, i32 3
  %11715 = sext i32 %11714 to i64
  %11716 = getelementptr inbounds i16, i16* %10126, i64 %11715
  %11717 = load i16, i16* %11716, align 2, !tbaa !386
  %11718 = insertelement <4 x i16> %11713, i16 %11717, i32 3
  %11719 = add <4 x i32> %10458, %t287
  %11720 = extractelement <4 x i32> %11719, i32 0
  %11721 = sext i32 %11720 to i64
  %11722 = getelementptr inbounds i16, i16* %10126, i64 %11721
  %11723 = load i16, i16* %11722, align 2, !tbaa !386
  %11724 = insertelement <4 x i16> undef, i16 %11723, i32 0
  %11725 = extractelement <4 x i32> %11719, i32 1
  %11726 = sext i32 %11725 to i64
  %11727 = getelementptr inbounds i16, i16* %10126, i64 %11726
  %11728 = load i16, i16* %11727, align 2, !tbaa !386
  %11729 = insertelement <4 x i16> %11724, i16 %11728, i32 1
  %11730 = extractelement <4 x i32> %11719, i32 2
  %11731 = sext i32 %11730 to i64
  %11732 = getelementptr inbounds i16, i16* %10126, i64 %11731
  %11733 = load i16, i16* %11732, align 2, !tbaa !386
  %11734 = insertelement <4 x i16> %11729, i16 %11733, i32 2
  %11735 = extractelement <4 x i32> %11719, i32 3
  %11736 = sext i32 %11735 to i64
  %11737 = getelementptr inbounds i16, i16* %10126, i64 %11736
  %11738 = load i16, i16* %11737, align 2, !tbaa !386
  %11739 = insertelement <4 x i16> %11734, i16 %11738, i32 3
  %11740 = add <4 x i32> %10464, %t287
  %11741 = extractelement <4 x i32> %11740, i32 0
  %11742 = sext i32 %11741 to i64
  %11743 = getelementptr inbounds i16, i16* %10126, i64 %11742
  %11744 = load i16, i16* %11743, align 2, !tbaa !386
  %11745 = insertelement <4 x i16> undef, i16 %11744, i32 0
  %11746 = extractelement <4 x i32> %11740, i32 1
  %11747 = sext i32 %11746 to i64
  %11748 = getelementptr inbounds i16, i16* %10126, i64 %11747
  %11749 = load i16, i16* %11748, align 2, !tbaa !386
  %11750 = insertelement <4 x i16> %11745, i16 %11749, i32 1
  %11751 = extractelement <4 x i32> %11740, i32 2
  %11752 = sext i32 %11751 to i64
  %11753 = getelementptr inbounds i16, i16* %10126, i64 %11752
  %11754 = load i16, i16* %11753, align 2, !tbaa !386
  %11755 = insertelement <4 x i16> %11750, i16 %11754, i32 2
  %11756 = extractelement <4 x i32> %11740, i32 3
  %11757 = sext i32 %11756 to i64
  %11758 = getelementptr inbounds i16, i16* %10126, i64 %11757
  %11759 = load i16, i16* %11758, align 2, !tbaa !386
  %11760 = insertelement <4 x i16> %11755, i16 %11759, i32 3
  %11761 = add <4 x i32> %10470, %t287
  %11762 = extractelement <4 x i32> %11761, i32 0
  %11763 = sext i32 %11762 to i64
  %11764 = getelementptr inbounds i16, i16* %10126, i64 %11763
  %11765 = load i16, i16* %11764, align 2, !tbaa !386
  %11766 = insertelement <4 x i16> undef, i16 %11765, i32 0
  %11767 = extractelement <4 x i32> %11761, i32 1
  %11768 = sext i32 %11767 to i64
  %11769 = getelementptr inbounds i16, i16* %10126, i64 %11768
  %11770 = load i16, i16* %11769, align 2, !tbaa !386
  %11771 = insertelement <4 x i16> %11766, i16 %11770, i32 1
  %11772 = extractelement <4 x i32> %11761, i32 2
  %11773 = sext i32 %11772 to i64
  %11774 = getelementptr inbounds i16, i16* %10126, i64 %11773
  %11775 = load i16, i16* %11774, align 2, !tbaa !386
  %11776 = insertelement <4 x i16> %11771, i16 %11775, i32 2
  %11777 = extractelement <4 x i32> %11761, i32 3
  %11778 = sext i32 %11777 to i64
  %11779 = getelementptr inbounds i16, i16* %10126, i64 %11778
  %11780 = load i16, i16* %11779, align 2, !tbaa !386
  %11781 = insertelement <4 x i16> %11776, i16 %11780, i32 3
  %11782 = add <4 x i16> %11676, %11655
  %11783 = add <4 x i16> %11760, %11739
  %11784 = add <4 x i16> %11586, %11588
  %11785 = add <4 x i16> %11784, %11634
  %11786 = add <4 x i16> %11785, %11782
  %11787 = add <4 x i16> %11786, %11697
  %11788 = add <4 x i16> %11782, %11634
  %11789 = add <4 x i16> %11788, %11718
  %11790 = add <4 x i16> %11789, %11783
  %11791 = add <4 x i16> %11790, %11781
  %11792 = shufflevector <4 x i16> %11787, <4 x i16> %11791, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %11793 = zext <8 x i16> %11792 to <8 x i32>
  %11794 = mul nuw nsw <8 x i32> %11793, <i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362>
  %11795 = shufflevector <8 x i32> %11794, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %11796 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %11795, i32 16)
  %11797 = shufflevector <8 x i32> %11794, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %11798 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %11797, i32 16)
  %11799 = shufflevector <4 x i16> %11796, <4 x i16> %11798, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %11800 = add <4 x i16> %11785, %11655
  %11801 = add <4 x i16> %11800, %11676
  %11802 = add <4 x i16> %11801, %11697
  %11803 = add <4 x i16> %11789, %11739
  %11804 = add <4 x i16> %11803, %11760
  %11805 = add <4 x i16> %11804, %11781
  %11806 = shufflevector <4 x i16> %11802, <4 x i16> %11805, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %11807 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %11799, <8 x i16> %11806) #11
  %11808 = lshr <8 x i16> %11807, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %11809 = add <4 x i32> %10476, %t287
  %11810 = extractelement <4 x i32> %11809, i32 0
  %11811 = sext i32 %11810 to i64
  %11812 = getelementptr inbounds i16, i16* %10126, i64 %11811
  %11813 = load i16, i16* %11812, align 2, !tbaa !386
  %11814 = insertelement <4 x i16> undef, i16 %11813, i32 0
  %11815 = extractelement <4 x i32> %11809, i32 1
  %11816 = sext i32 %11815 to i64
  %11817 = getelementptr inbounds i16, i16* %10126, i64 %11816
  %11818 = load i16, i16* %11817, align 2, !tbaa !386
  %11819 = insertelement <4 x i16> %11814, i16 %11818, i32 1
  %11820 = extractelement <4 x i32> %11809, i32 2
  %11821 = sext i32 %11820 to i64
  %11822 = getelementptr inbounds i16, i16* %10126, i64 %11821
  %11823 = load i16, i16* %11822, align 2, !tbaa !386
  %11824 = insertelement <4 x i16> %11819, i16 %11823, i32 2
  %11825 = extractelement <4 x i32> %11809, i32 3
  %11826 = sext i32 %11825 to i64
  %11827 = getelementptr inbounds i16, i16* %10126, i64 %11826
  %11828 = load i16, i16* %11827, align 2, !tbaa !386
  %11829 = insertelement <4 x i16> %11824, i16 %11828, i32 3
  %11830 = add <4 x i32> %10482, %t287
  %11831 = extractelement <4 x i32> %11830, i32 0
  %11832 = sext i32 %11831 to i64
  %11833 = getelementptr inbounds i16, i16* %10126, i64 %11832
  %11834 = load i16, i16* %11833, align 2, !tbaa !386
  %11835 = insertelement <4 x i16> undef, i16 %11834, i32 0
  %11836 = extractelement <4 x i32> %11830, i32 1
  %11837 = sext i32 %11836 to i64
  %11838 = getelementptr inbounds i16, i16* %10126, i64 %11837
  %11839 = load i16, i16* %11838, align 2, !tbaa !386
  %11840 = insertelement <4 x i16> %11835, i16 %11839, i32 1
  %11841 = extractelement <4 x i32> %11830, i32 2
  %11842 = sext i32 %11841 to i64
  %11843 = getelementptr inbounds i16, i16* %10126, i64 %11842
  %11844 = load i16, i16* %11843, align 2, !tbaa !386
  %11845 = insertelement <4 x i16> %11840, i16 %11844, i32 2
  %11846 = extractelement <4 x i32> %11830, i32 3
  %11847 = sext i32 %11846 to i64
  %11848 = getelementptr inbounds i16, i16* %10126, i64 %11847
  %11849 = load i16, i16* %11848, align 2, !tbaa !386
  %11850 = insertelement <4 x i16> %11845, i16 %11849, i32 3
  %11851 = add <4 x i32> %10488, %t287
  %11852 = extractelement <4 x i32> %11851, i32 0
  %11853 = sext i32 %11852 to i64
  %11854 = getelementptr inbounds i16, i16* %10126, i64 %11853
  %11855 = load i16, i16* %11854, align 2, !tbaa !386
  %11856 = insertelement <4 x i16> undef, i16 %11855, i32 0
  %11857 = extractelement <4 x i32> %11851, i32 1
  %11858 = sext i32 %11857 to i64
  %11859 = getelementptr inbounds i16, i16* %10126, i64 %11858
  %11860 = load i16, i16* %11859, align 2, !tbaa !386
  %11861 = insertelement <4 x i16> %11856, i16 %11860, i32 1
  %11862 = extractelement <4 x i32> %11851, i32 2
  %11863 = sext i32 %11862 to i64
  %11864 = getelementptr inbounds i16, i16* %10126, i64 %11863
  %11865 = load i16, i16* %11864, align 2, !tbaa !386
  %11866 = insertelement <4 x i16> %11861, i16 %11865, i32 2
  %11867 = extractelement <4 x i32> %11851, i32 3
  %11868 = sext i32 %11867 to i64
  %11869 = getelementptr inbounds i16, i16* %10126, i64 %11868
  %11870 = load i16, i16* %11869, align 2, !tbaa !386
  %11871 = insertelement <4 x i16> %11866, i16 %11870, i32 3
  %11872 = add <4 x i32> %10494, %t287
  %11873 = extractelement <4 x i32> %11872, i32 0
  %11874 = sext i32 %11873 to i64
  %11875 = getelementptr inbounds i16, i16* %10126, i64 %11874
  %11876 = load i16, i16* %11875, align 2, !tbaa !386
  %11877 = insertelement <4 x i16> undef, i16 %11876, i32 0
  %11878 = extractelement <4 x i32> %11872, i32 1
  %11879 = sext i32 %11878 to i64
  %11880 = getelementptr inbounds i16, i16* %10126, i64 %11879
  %11881 = load i16, i16* %11880, align 2, !tbaa !386
  %11882 = insertelement <4 x i16> %11877, i16 %11881, i32 1
  %11883 = extractelement <4 x i32> %11872, i32 2
  %11884 = sext i32 %11883 to i64
  %11885 = getelementptr inbounds i16, i16* %10126, i64 %11884
  %11886 = load i16, i16* %11885, align 2, !tbaa !386
  %11887 = insertelement <4 x i16> %11882, i16 %11886, i32 2
  %11888 = extractelement <4 x i32> %11872, i32 3
  %11889 = sext i32 %11888 to i64
  %11890 = getelementptr inbounds i16, i16* %10126, i64 %11889
  %11891 = load i16, i16* %11890, align 2, !tbaa !386
  %11892 = insertelement <4 x i16> %11887, i16 %11891, i32 3
  %11893 = add <4 x i32> %10500, %t287
  %11894 = extractelement <4 x i32> %11893, i32 0
  %11895 = sext i32 %11894 to i64
  %11896 = getelementptr inbounds i16, i16* %10126, i64 %11895
  %11897 = load i16, i16* %11896, align 2, !tbaa !386
  %11898 = insertelement <4 x i16> undef, i16 %11897, i32 0
  %11899 = extractelement <4 x i32> %11893, i32 1
  %11900 = sext i32 %11899 to i64
  %11901 = getelementptr inbounds i16, i16* %10126, i64 %11900
  %11902 = load i16, i16* %11901, align 2, !tbaa !386
  %11903 = insertelement <4 x i16> %11898, i16 %11902, i32 1
  %11904 = extractelement <4 x i32> %11893, i32 2
  %11905 = sext i32 %11904 to i64
  %11906 = getelementptr inbounds i16, i16* %10126, i64 %11905
  %11907 = load i16, i16* %11906, align 2, !tbaa !386
  %11908 = insertelement <4 x i16> %11903, i16 %11907, i32 2
  %11909 = extractelement <4 x i32> %11893, i32 3
  %11910 = sext i32 %11909 to i64
  %11911 = getelementptr inbounds i16, i16* %10126, i64 %11910
  %11912 = load i16, i16* %11911, align 2, !tbaa !386
  %11913 = insertelement <4 x i16> %11908, i16 %11912, i32 3
  %11914 = add <4 x i32> %10506, %t287
  %11915 = extractelement <4 x i32> %11914, i32 0
  %11916 = sext i32 %11915 to i64
  %11917 = getelementptr inbounds i16, i16* %10126, i64 %11916
  %11918 = load i16, i16* %11917, align 2, !tbaa !386
  %11919 = insertelement <4 x i16> undef, i16 %11918, i32 0
  %11920 = extractelement <4 x i32> %11914, i32 1
  %11921 = sext i32 %11920 to i64
  %11922 = getelementptr inbounds i16, i16* %10126, i64 %11921
  %11923 = load i16, i16* %11922, align 2, !tbaa !386
  %11924 = insertelement <4 x i16> %11919, i16 %11923, i32 1
  %11925 = extractelement <4 x i32> %11914, i32 2
  %11926 = sext i32 %11925 to i64
  %11927 = getelementptr inbounds i16, i16* %10126, i64 %11926
  %11928 = load i16, i16* %11927, align 2, !tbaa !386
  %11929 = insertelement <4 x i16> %11924, i16 %11928, i32 2
  %11930 = extractelement <4 x i32> %11914, i32 3
  %11931 = sext i32 %11930 to i64
  %11932 = getelementptr inbounds i16, i16* %10126, i64 %11931
  %11933 = load i16, i16* %11932, align 2, !tbaa !386
  %11934 = insertelement <4 x i16> %11929, i16 %11933, i32 3
  %11935 = add <4 x i32> %10512, %t287
  %11936 = extractelement <4 x i32> %11935, i32 0
  %11937 = sext i32 %11936 to i64
  %11938 = getelementptr inbounds i16, i16* %10126, i64 %11937
  %11939 = load i16, i16* %11938, align 2, !tbaa !386
  %11940 = insertelement <4 x i16> undef, i16 %11939, i32 0
  %11941 = extractelement <4 x i32> %11935, i32 1
  %11942 = sext i32 %11941 to i64
  %11943 = getelementptr inbounds i16, i16* %10126, i64 %11942
  %11944 = load i16, i16* %11943, align 2, !tbaa !386
  %11945 = insertelement <4 x i16> %11940, i16 %11944, i32 1
  %11946 = extractelement <4 x i32> %11935, i32 2
  %11947 = sext i32 %11946 to i64
  %11948 = getelementptr inbounds i16, i16* %10126, i64 %11947
  %11949 = load i16, i16* %11948, align 2, !tbaa !386
  %11950 = insertelement <4 x i16> %11945, i16 %11949, i32 2
  %11951 = extractelement <4 x i32> %11935, i32 3
  %11952 = sext i32 %11951 to i64
  %11953 = getelementptr inbounds i16, i16* %10126, i64 %11952
  %11954 = load i16, i16* %11953, align 2, !tbaa !386
  %11955 = insertelement <4 x i16> %11950, i16 %11954, i32 3
  %11956 = add <4 x i32> %10518, %t287
  %11957 = extractelement <4 x i32> %11956, i32 0
  %11958 = sext i32 %11957 to i64
  %11959 = getelementptr inbounds i16, i16* %10126, i64 %11958
  %11960 = load i16, i16* %11959, align 2, !tbaa !386
  %11961 = insertelement <4 x i16> undef, i16 %11960, i32 0
  %11962 = extractelement <4 x i32> %11956, i32 1
  %11963 = sext i32 %11962 to i64
  %11964 = getelementptr inbounds i16, i16* %10126, i64 %11963
  %11965 = load i16, i16* %11964, align 2, !tbaa !386
  %11966 = insertelement <4 x i16> %11961, i16 %11965, i32 1
  %11967 = extractelement <4 x i32> %11956, i32 2
  %11968 = sext i32 %11967 to i64
  %11969 = getelementptr inbounds i16, i16* %10126, i64 %11968
  %11970 = load i16, i16* %11969, align 2, !tbaa !386
  %11971 = insertelement <4 x i16> %11966, i16 %11970, i32 2
  %11972 = extractelement <4 x i32> %11956, i32 3
  %11973 = sext i32 %11972 to i64
  %11974 = getelementptr inbounds i16, i16* %10126, i64 %11973
  %11975 = load i16, i16* %11974, align 2, !tbaa !386
  %11976 = insertelement <4 x i16> %11971, i16 %11975, i32 3
  %11977 = add <4 x i16> %11871, %11850
  %11978 = add <4 x i16> %11955, %11934
  %11979 = add <4 x i16> %11781, %11783
  %11980 = add <4 x i16> %11979, %11829
  %11981 = add <4 x i16> %11980, %11977
  %11982 = add <4 x i16> %11981, %11892
  %11983 = add <4 x i16> %11977, %11829
  %11984 = add <4 x i16> %11983, %11913
  %11985 = add <4 x i16> %11984, %11978
  %11986 = add <4 x i16> %11985, %11976
  %11987 = shufflevector <4 x i16> %11982, <4 x i16> %11986, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %11988 = zext <8 x i16> %11987 to <8 x i32>
  %11989 = mul nuw nsw <8 x i32> %11988, <i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362>
  %11990 = shufflevector <8 x i32> %11989, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %11991 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %11990, i32 16)
  %11992 = shufflevector <8 x i32> %11989, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %11993 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %11992, i32 16)
  %11994 = shufflevector <4 x i16> %11991, <4 x i16> %11993, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %11995 = add <4 x i16> %11980, %11850
  %11996 = add <4 x i16> %11995, %11871
  %11997 = add <4 x i16> %11996, %11892
  %11998 = add <4 x i16> %11984, %11934
  %11999 = add <4 x i16> %11998, %11955
  %12000 = add <4 x i16> %11999, %11976
  %12001 = shufflevector <4 x i16> %11997, <4 x i16> %12000, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %12002 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %11994, <8 x i16> %12001) #11
  %12003 = lshr <8 x i16> %12002, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %12004 = add <4 x i32> %10524, %t287
  %12005 = extractelement <4 x i32> %12004, i32 0
  %12006 = sext i32 %12005 to i64
  %12007 = getelementptr inbounds i16, i16* %10126, i64 %12006
  %12008 = load i16, i16* %12007, align 2, !tbaa !386
  %12009 = insertelement <4 x i16> undef, i16 %12008, i32 0
  %12010 = extractelement <4 x i32> %12004, i32 1
  %12011 = sext i32 %12010 to i64
  %12012 = getelementptr inbounds i16, i16* %10126, i64 %12011
  %12013 = load i16, i16* %12012, align 2, !tbaa !386
  %12014 = insertelement <4 x i16> %12009, i16 %12013, i32 1
  %12015 = extractelement <4 x i32> %12004, i32 2
  %12016 = sext i32 %12015 to i64
  %12017 = getelementptr inbounds i16, i16* %10126, i64 %12016
  %12018 = load i16, i16* %12017, align 2, !tbaa !386
  %12019 = insertelement <4 x i16> %12014, i16 %12018, i32 2
  %12020 = extractelement <4 x i32> %12004, i32 3
  %12021 = sext i32 %12020 to i64
  %12022 = getelementptr inbounds i16, i16* %10126, i64 %12021
  %12023 = load i16, i16* %12022, align 2, !tbaa !386
  %12024 = insertelement <4 x i16> %12019, i16 %12023, i32 3
  %12025 = add <4 x i32> %10530, %t287
  %12026 = extractelement <4 x i32> %12025, i32 0
  %12027 = sext i32 %12026 to i64
  %12028 = getelementptr inbounds i16, i16* %10126, i64 %12027
  %12029 = load i16, i16* %12028, align 2, !tbaa !386
  %12030 = insertelement <4 x i16> undef, i16 %12029, i32 0
  %12031 = extractelement <4 x i32> %12025, i32 1
  %12032 = sext i32 %12031 to i64
  %12033 = getelementptr inbounds i16, i16* %10126, i64 %12032
  %12034 = load i16, i16* %12033, align 2, !tbaa !386
  %12035 = insertelement <4 x i16> %12030, i16 %12034, i32 1
  %12036 = extractelement <4 x i32> %12025, i32 2
  %12037 = sext i32 %12036 to i64
  %12038 = getelementptr inbounds i16, i16* %10126, i64 %12037
  %12039 = load i16, i16* %12038, align 2, !tbaa !386
  %12040 = insertelement <4 x i16> %12035, i16 %12039, i32 2
  %12041 = extractelement <4 x i32> %12025, i32 3
  %12042 = sext i32 %12041 to i64
  %12043 = getelementptr inbounds i16, i16* %10126, i64 %12042
  %12044 = load i16, i16* %12043, align 2, !tbaa !386
  %12045 = insertelement <4 x i16> %12040, i16 %12044, i32 3
  %12046 = add <4 x i32> %10536, %t287
  %12047 = extractelement <4 x i32> %12046, i32 0
  %12048 = sext i32 %12047 to i64
  %12049 = getelementptr inbounds i16, i16* %10126, i64 %12048
  %12050 = load i16, i16* %12049, align 2, !tbaa !386
  %12051 = insertelement <4 x i16> undef, i16 %12050, i32 0
  %12052 = extractelement <4 x i32> %12046, i32 1
  %12053 = sext i32 %12052 to i64
  %12054 = getelementptr inbounds i16, i16* %10126, i64 %12053
  %12055 = load i16, i16* %12054, align 2, !tbaa !386
  %12056 = insertelement <4 x i16> %12051, i16 %12055, i32 1
  %12057 = extractelement <4 x i32> %12046, i32 2
  %12058 = sext i32 %12057 to i64
  %12059 = getelementptr inbounds i16, i16* %10126, i64 %12058
  %12060 = load i16, i16* %12059, align 2, !tbaa !386
  %12061 = insertelement <4 x i16> %12056, i16 %12060, i32 2
  %12062 = extractelement <4 x i32> %12046, i32 3
  %12063 = sext i32 %12062 to i64
  %12064 = getelementptr inbounds i16, i16* %10126, i64 %12063
  %12065 = load i16, i16* %12064, align 2, !tbaa !386
  %12066 = insertelement <4 x i16> %12061, i16 %12065, i32 3
  %12067 = add <4 x i32> %10542, %t287
  %12068 = extractelement <4 x i32> %12067, i32 0
  %12069 = sext i32 %12068 to i64
  %12070 = getelementptr inbounds i16, i16* %10126, i64 %12069
  %12071 = load i16, i16* %12070, align 2, !tbaa !386
  %12072 = insertelement <4 x i16> undef, i16 %12071, i32 0
  %12073 = extractelement <4 x i32> %12067, i32 1
  %12074 = sext i32 %12073 to i64
  %12075 = getelementptr inbounds i16, i16* %10126, i64 %12074
  %12076 = load i16, i16* %12075, align 2, !tbaa !386
  %12077 = insertelement <4 x i16> %12072, i16 %12076, i32 1
  %12078 = extractelement <4 x i32> %12067, i32 2
  %12079 = sext i32 %12078 to i64
  %12080 = getelementptr inbounds i16, i16* %10126, i64 %12079
  %12081 = load i16, i16* %12080, align 2, !tbaa !386
  %12082 = insertelement <4 x i16> %12077, i16 %12081, i32 2
  %12083 = extractelement <4 x i32> %12067, i32 3
  %12084 = sext i32 %12083 to i64
  %12085 = getelementptr inbounds i16, i16* %10126, i64 %12084
  %12086 = load i16, i16* %12085, align 2, !tbaa !386
  %12087 = insertelement <4 x i16> %12082, i16 %12086, i32 3
  %12088 = add <4 x i32> %10548, %t287
  %12089 = extractelement <4 x i32> %12088, i32 0
  %12090 = sext i32 %12089 to i64
  %12091 = getelementptr inbounds i16, i16* %10126, i64 %12090
  %12092 = load i16, i16* %12091, align 2, !tbaa !386
  %12093 = insertelement <4 x i16> undef, i16 %12092, i32 0
  %12094 = extractelement <4 x i32> %12088, i32 1
  %12095 = sext i32 %12094 to i64
  %12096 = getelementptr inbounds i16, i16* %10126, i64 %12095
  %12097 = load i16, i16* %12096, align 2, !tbaa !386
  %12098 = insertelement <4 x i16> %12093, i16 %12097, i32 1
  %12099 = extractelement <4 x i32> %12088, i32 2
  %12100 = sext i32 %12099 to i64
  %12101 = getelementptr inbounds i16, i16* %10126, i64 %12100
  %12102 = load i16, i16* %12101, align 2, !tbaa !386
  %12103 = insertelement <4 x i16> %12098, i16 %12102, i32 2
  %12104 = extractelement <4 x i32> %12088, i32 3
  %12105 = sext i32 %12104 to i64
  %12106 = getelementptr inbounds i16, i16* %10126, i64 %12105
  %12107 = load i16, i16* %12106, align 2, !tbaa !386
  %12108 = insertelement <4 x i16> %12103, i16 %12107, i32 3
  %12109 = add <4 x i32> %10553, %t287
  %12110 = extractelement <4 x i32> %12109, i32 0
  %12111 = sext i32 %12110 to i64
  %12112 = getelementptr inbounds i16, i16* %10126, i64 %12111
  %12113 = load i16, i16* %12112, align 2, !tbaa !386
  %12114 = insertelement <4 x i16> undef, i16 %12113, i32 0
  %12115 = extractelement <4 x i32> %12109, i32 1
  %12116 = sext i32 %12115 to i64
  %12117 = getelementptr inbounds i16, i16* %10126, i64 %12116
  %12118 = load i16, i16* %12117, align 2, !tbaa !386
  %12119 = insertelement <4 x i16> %12114, i16 %12118, i32 1
  %12120 = extractelement <4 x i32> %12109, i32 2
  %12121 = sext i32 %12120 to i64
  %12122 = getelementptr inbounds i16, i16* %10126, i64 %12121
  %12123 = load i16, i16* %12122, align 2, !tbaa !386
  %12124 = insertelement <4 x i16> %12119, i16 %12123, i32 2
  %12125 = extractelement <4 x i32> %12109, i32 3
  %12126 = sext i32 %12125 to i64
  %12127 = getelementptr inbounds i16, i16* %10126, i64 %12126
  %12128 = load i16, i16* %12127, align 2, !tbaa !386
  %12129 = insertelement <4 x i16> %12124, i16 %12128, i32 3
  %12130 = add <4 x i32> %10559, %t287
  %12131 = extractelement <4 x i32> %12130, i32 0
  %12132 = sext i32 %12131 to i64
  %12133 = getelementptr inbounds i16, i16* %10126, i64 %12132
  %12134 = load i16, i16* %12133, align 2, !tbaa !386
  %12135 = insertelement <4 x i16> undef, i16 %12134, i32 0
  %12136 = extractelement <4 x i32> %12130, i32 1
  %12137 = sext i32 %12136 to i64
  %12138 = getelementptr inbounds i16, i16* %10126, i64 %12137
  %12139 = load i16, i16* %12138, align 2, !tbaa !386
  %12140 = insertelement <4 x i16> %12135, i16 %12139, i32 1
  %12141 = extractelement <4 x i32> %12130, i32 2
  %12142 = sext i32 %12141 to i64
  %12143 = getelementptr inbounds i16, i16* %10126, i64 %12142
  %12144 = load i16, i16* %12143, align 2, !tbaa !386
  %12145 = insertelement <4 x i16> %12140, i16 %12144, i32 2
  %12146 = extractelement <4 x i32> %12130, i32 3
  %12147 = sext i32 %12146 to i64
  %12148 = getelementptr inbounds i16, i16* %10126, i64 %12147
  %12149 = load i16, i16* %12148, align 2, !tbaa !386
  %12150 = insertelement <4 x i16> %12145, i16 %12149, i32 3
  %12151 = add <4 x i32> %10565, %t287
  %12152 = extractelement <4 x i32> %12151, i32 0
  %12153 = sext i32 %12152 to i64
  %12154 = getelementptr inbounds i16, i16* %10126, i64 %12153
  %12155 = load i16, i16* %12154, align 2, !tbaa !386
  %12156 = insertelement <4 x i16> undef, i16 %12155, i32 0
  %12157 = extractelement <4 x i32> %12151, i32 1
  %12158 = sext i32 %12157 to i64
  %12159 = getelementptr inbounds i16, i16* %10126, i64 %12158
  %12160 = load i16, i16* %12159, align 2, !tbaa !386
  %12161 = insertelement <4 x i16> %12156, i16 %12160, i32 1
  %12162 = extractelement <4 x i32> %12151, i32 2
  %12163 = sext i32 %12162 to i64
  %12164 = getelementptr inbounds i16, i16* %10126, i64 %12163
  %12165 = load i16, i16* %12164, align 2, !tbaa !386
  %12166 = insertelement <4 x i16> %12161, i16 %12165, i32 2
  %12167 = extractelement <4 x i32> %12151, i32 3
  %12168 = sext i32 %12167 to i64
  %12169 = getelementptr inbounds i16, i16* %10126, i64 %12168
  %12170 = load i16, i16* %12169, align 2, !tbaa !386
  %12171 = insertelement <4 x i16> %12166, i16 %12170, i32 3
  %12172 = add <4 x i16> %12066, %12045
  %12173 = add <4 x i16> %11976, %11978
  %12174 = add <4 x i16> %12173, %12024
  %12175 = add <4 x i16> %12174, %12172
  %12176 = add <4 x i16> %12175, %12087
  %12177 = add <4 x i16> %12172, %12024
  %12178 = add <4 x i16> %12177, %12108
  %12179 = add <4 x i16> %12178, %12129
  %12180 = add <4 x i16> %12179, %12150
  %12181 = add <4 x i16> %12180, %12171
  %12182 = shufflevector <4 x i16> %12176, <4 x i16> %12181, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %12183 = zext <8 x i16> %12182 to <8 x i32>
  %12184 = mul nuw nsw <8 x i32> %12183, <i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362>
  %12185 = shufflevector <8 x i32> %12184, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %12186 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %12185, i32 16)
  %12187 = shufflevector <8 x i32> %12184, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %12188 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %12187, i32 16)
  %12189 = shufflevector <4 x i16> %12186, <4 x i16> %12188, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %12190 = add <4 x i16> %12174, %12045
  %12191 = add <4 x i16> %12190, %12066
  %12192 = add <4 x i16> %12191, %12087
  %12193 = shufflevector <4 x i16> %12192, <4 x i16> %12181, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %12194 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %12189, <8 x i16> %12193) #11
  %12195 = lshr <8 x i16> %12194, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %12196 = shufflevector <8 x i16> %12195, <8 x i16> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %12197 = shufflevector <16 x i16> %12196, <16 x i16> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12198 = shufflevector <32 x i16> %12197, <32 x i16> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12199 = and i32 %a18, 15
  %12200 = zext i32 %12199 to i64
  %12201 = mul nsw i64 %10128, %12200
  %12202 = add nsw i64 %12201, %10566
  %12203 = getelementptr inbounds i16, i16* %blur_x58, i64 %12202
  %12204 = bitcast i16* %12203 to <8 x i16>*
  store <8 x i16> %10833, <8 x i16>* %12204, align 2, !tbaa !389
  %12205 = getelementptr inbounds i16, i16* %12203, i64 8
  %12206 = bitcast i16* %12205 to <8 x i16>*
  store <8 x i16> %11028, <8 x i16>* %12206, align 2, !tbaa !389
  %12207 = getelementptr inbounds i16, i16* %12203, i64 16
  %12208 = bitcast i16* %12207 to <8 x i16>*
  store <8 x i16> %11223, <8 x i16>* %12208, align 2, !tbaa !389
  %12209 = getelementptr inbounds i16, i16* %12203, i64 24
  %12210 = bitcast i16* %12209 to <8 x i16>*
  store <8 x i16> %11418, <8 x i16>* %12210, align 2, !tbaa !389
  %12211 = getelementptr inbounds i16, i16* %12203, i64 32
  %12212 = bitcast i16* %12211 to <8 x i16>*
  store <8 x i16> %11613, <8 x i16>* %12212, align 2, !tbaa !389
  %12213 = getelementptr inbounds i16, i16* %12203, i64 40
  %12214 = bitcast i16* %12213 to <8 x i16>*
  store <8 x i16> %11808, <8 x i16>* %12214, align 2, !tbaa !389
  %12215 = getelementptr inbounds i16, i16* %12203, i64 48
  %12216 = bitcast i16* %12215 to <8 x i16>*
  store <8 x i16> %12003, <8 x i16>* %12216, align 2, !tbaa !389
  %12217 = shufflevector <64 x i16> %12198, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %12218 = getelementptr inbounds i16, i16* %12203, i64 56
  %12219 = bitcast i16* %12218 to <8 x i16>*
  store <8 x i16> %12217, <8 x i16>* %12219, align 2, !tbaa !389
  %12220 = add nuw nsw i32 %blur_x.s0.y.yi74, 1
  %.not159 = icmp eq i32 %12220, 4
  br i1 %.not159, label %"end for blur_x.s0.y.yi73", label %"for blur_x.s0.y.yi72"

"end for blur_x.s0.y.yi73":                       ; preds = %"for blur_x.s0.y.yi72"
  %indvars.iv.next218 = add nuw nsw i64 %indvars.iv217, 1
  %.not160 = icmp eq i64 %indvars.iv.next218, %10138
  br i1 %.not160, label %"end for blur_x.s0.x.x68", label %"for blur_x.s0.x.x67"

"for blur_x.s0.x.x.rebased78":                    ; preds = %"for blur_x.s0.x.x.rebased78.preheader", %"end for blur_x.s0.y.yi84"
  %indvars.iv219 = phi i64 [ 0, %"for blur_x.s0.x.x.rebased78.preheader" ], [ %indvars.iv.next220, %"end for blur_x.s0.y.yi84" ]
  %blur_x.s0.x.x.rebased80 = phi i32 [ 0, %"for blur_x.s0.x.x.rebased78.preheader" ], [ %12489, %"end for blur_x.s0.y.yi84" ]
  %12221 = add nsw i32 %blur_x.s0.x.x.rebased80, %t26653
  %12222 = shl nsw i32 %12221, 6
  %12223 = add nsw i32 %12222, %t26552
  %12224 = sext i32 %12222 to i64
  br label %"for blur_x.s0.y.yi83"

"end for blur_x.s0.x.x.rebased79":                ; preds = %"end for blur_x.s0.y.yi84", %"end for blur_x.s0.x.x68"
  br i1 %10130, label %"for blur_x.s0.x.x.rebased88.preheader", label %"end for blur_x.s0.x.x.rebased89", !prof !385

"for blur_x.s0.x.x.rebased88.preheader":          ; preds = %"end for blur_x.s0.x.x.rebased79"
  %12225 = trunc i64 %indvars.iv233 to i32
  %12226 = add i32 %10121, %12225
  br label %"for blur_x.s0.x.x.rebased88"

"for blur_x.s0.y.yi83":                           ; preds = %"for blur_x.s0.x.x.rebased78", %"for blur_x.s0.y.yi83"
  %blur_x.s0.y.yi85 = phi i32 [ 0, %"for blur_x.s0.x.x.rebased78" ], [ %12488, %"for blur_x.s0.y.yi83" ]
  %t239 = add nsw i32 %10568, %blur_x.s0.y.yi85
  %12227 = icmp sgt i32 %t239, 0
  %12228 = select i1 %12227, i32 %t239, i32 0
  %12229 = mul nsw i32 %12228, %input.stride.145
  %t24086 = add nsw i32 %12223, %12229
  %12230 = sext i32 %t24086 to i64
  %12231 = getelementptr inbounds i16, i16* %10126, i64 %12230
  %12232 = getelementptr inbounds i16, i16* %12231, i64 -63
  %12233 = bitcast i16* %12232 to <8 x i16>*
  %t288 = load <8 x i16>, <8 x i16>* %12233, align 2, !tbaa !386
  %12234 = getelementptr inbounds i16, i16* %12231, i64 -64
  %12235 = bitcast i16* %12234 to <8 x i16>*
  %t289 = load <8 x i16>, <8 x i16>* %12235, align 2, !tbaa !386
  %12236 = getelementptr inbounds i16, i16* %12231, i64 -62
  %12237 = bitcast i16* %12236 to <8 x i16>*
  %t290 = load <8 x i16>, <8 x i16>* %12237, align 2, !tbaa !386
  %12238 = getelementptr inbounds i16, i16* %12231, i64 -61
  %12239 = bitcast i16* %12238 to <8 x i16>*
  %t291 = load <8 x i16>, <8 x i16>* %12239, align 2, !tbaa !386
  %12240 = getelementptr inbounds i16, i16* %12231, i64 -60
  %12241 = bitcast i16* %12240 to <8 x i16>*
  %t292 = load <8 x i16>, <8 x i16>* %12241, align 2, !tbaa !386
  %12242 = getelementptr inbounds i16, i16* %12231, i64 -58
  %12243 = bitcast i16* %12242 to <8 x i16>*
  %t293 = load <8 x i16>, <8 x i16>* %12243, align 2, !tbaa !386
  %12244 = getelementptr inbounds i16, i16* %12231, i64 -59
  %12245 = bitcast i16* %12244 to <8 x i16>*
  %t294 = load <8 x i16>, <8 x i16>* %12245, align 2, !tbaa !386
  %12246 = getelementptr inbounds i16, i16* %12231, i64 -55
  %12247 = bitcast i16* %12246 to <8 x i16>*
  %t295 = load <8 x i16>, <8 x i16>* %12247, align 2, !tbaa !386
  %12248 = getelementptr inbounds i16, i16* %12231, i64 -56
  %12249 = bitcast i16* %12248 to <8 x i16>*
  %t296 = load <8 x i16>, <8 x i16>* %12249, align 2, !tbaa !386
  %12250 = getelementptr inbounds i16, i16* %12231, i64 -54
  %12251 = bitcast i16* %12250 to <8 x i16>*
  %t297 = load <8 x i16>, <8 x i16>* %12251, align 2, !tbaa !386
  %12252 = getelementptr inbounds i16, i16* %12231, i64 -53
  %12253 = bitcast i16* %12252 to <8 x i16>*
  %t298 = load <8 x i16>, <8 x i16>* %12253, align 2, !tbaa !386
  %12254 = getelementptr inbounds i16, i16* %12231, i64 -52
  %12255 = bitcast i16* %12254 to <8 x i16>*
  %t299 = load <8 x i16>, <8 x i16>* %12255, align 2, !tbaa !386
  %12256 = getelementptr inbounds i16, i16* %12231, i64 -50
  %12257 = bitcast i16* %12256 to <8 x i16>*
  %t300 = load <8 x i16>, <8 x i16>* %12257, align 2, !tbaa !386
  %12258 = getelementptr inbounds i16, i16* %12231, i64 -51
  %12259 = bitcast i16* %12258 to <8 x i16>*
  %t301 = load <8 x i16>, <8 x i16>* %12259, align 2, !tbaa !386
  %12260 = getelementptr inbounds i16, i16* %12231, i64 -47
  %12261 = bitcast i16* %12260 to <8 x i16>*
  %t302 = load <8 x i16>, <8 x i16>* %12261, align 2, !tbaa !386
  %12262 = getelementptr inbounds i16, i16* %12231, i64 -48
  %12263 = bitcast i16* %12262 to <8 x i16>*
  %t303 = load <8 x i16>, <8 x i16>* %12263, align 2, !tbaa !386
  %12264 = getelementptr inbounds i16, i16* %12231, i64 -46
  %12265 = bitcast i16* %12264 to <8 x i16>*
  %t304 = load <8 x i16>, <8 x i16>* %12265, align 2, !tbaa !386
  %12266 = getelementptr inbounds i16, i16* %12231, i64 -45
  %12267 = bitcast i16* %12266 to <8 x i16>*
  %t305 = load <8 x i16>, <8 x i16>* %12267, align 2, !tbaa !386
  %12268 = getelementptr inbounds i16, i16* %12231, i64 -44
  %12269 = bitcast i16* %12268 to <8 x i16>*
  %t306 = load <8 x i16>, <8 x i16>* %12269, align 2, !tbaa !386
  %12270 = getelementptr inbounds i16, i16* %12231, i64 -42
  %12271 = bitcast i16* %12270 to <8 x i16>*
  %t307 = load <8 x i16>, <8 x i16>* %12271, align 2, !tbaa !386
  %12272 = getelementptr inbounds i16, i16* %12231, i64 -43
  %12273 = bitcast i16* %12272 to <8 x i16>*
  %t308 = load <8 x i16>, <8 x i16>* %12273, align 2, !tbaa !386
  %12274 = getelementptr inbounds i16, i16* %12231, i64 -39
  %12275 = bitcast i16* %12274 to <8 x i16>*
  %t309 = load <8 x i16>, <8 x i16>* %12275, align 2, !tbaa !386
  %12276 = getelementptr inbounds i16, i16* %12231, i64 -40
  %12277 = bitcast i16* %12276 to <8 x i16>*
  %t310 = load <8 x i16>, <8 x i16>* %12277, align 2, !tbaa !386
  %12278 = getelementptr inbounds i16, i16* %12231, i64 -38
  %12279 = bitcast i16* %12278 to <8 x i16>*
  %t311 = load <8 x i16>, <8 x i16>* %12279, align 2, !tbaa !386
  %12280 = getelementptr inbounds i16, i16* %12231, i64 -37
  %12281 = bitcast i16* %12280 to <8 x i16>*
  %t312 = load <8 x i16>, <8 x i16>* %12281, align 2, !tbaa !386
  %12282 = getelementptr inbounds i16, i16* %12231, i64 -36
  %12283 = bitcast i16* %12282 to <8 x i16>*
  %t313 = load <8 x i16>, <8 x i16>* %12283, align 2, !tbaa !386
  %12284 = getelementptr inbounds i16, i16* %12231, i64 -34
  %12285 = bitcast i16* %12284 to <8 x i16>*
  %t314 = load <8 x i16>, <8 x i16>* %12285, align 2, !tbaa !386
  %12286 = getelementptr inbounds i16, i16* %12231, i64 -35
  %12287 = bitcast i16* %12286 to <8 x i16>*
  %t315 = load <8 x i16>, <8 x i16>* %12287, align 2, !tbaa !386
  %12288 = getelementptr inbounds i16, i16* %12231, i64 -31
  %12289 = bitcast i16* %12288 to <8 x i16>*
  %t316 = load <8 x i16>, <8 x i16>* %12289, align 2, !tbaa !386
  %12290 = getelementptr inbounds i16, i16* %12231, i64 -32
  %12291 = bitcast i16* %12290 to <8 x i16>*
  %t317 = load <8 x i16>, <8 x i16>* %12291, align 2, !tbaa !386
  %12292 = getelementptr inbounds i16, i16* %12231, i64 -30
  %12293 = bitcast i16* %12292 to <8 x i16>*
  %t318 = load <8 x i16>, <8 x i16>* %12293, align 2, !tbaa !386
  %12294 = getelementptr inbounds i16, i16* %12231, i64 -29
  %12295 = bitcast i16* %12294 to <8 x i16>*
  %t319 = load <8 x i16>, <8 x i16>* %12295, align 2, !tbaa !386
  %12296 = getelementptr inbounds i16, i16* %12231, i64 -28
  %12297 = bitcast i16* %12296 to <8 x i16>*
  %t320 = load <8 x i16>, <8 x i16>* %12297, align 2, !tbaa !386
  %12298 = getelementptr inbounds i16, i16* %12231, i64 -26
  %12299 = bitcast i16* %12298 to <8 x i16>*
  %t321 = load <8 x i16>, <8 x i16>* %12299, align 2, !tbaa !386
  %12300 = getelementptr inbounds i16, i16* %12231, i64 -27
  %12301 = bitcast i16* %12300 to <8 x i16>*
  %t322 = load <8 x i16>, <8 x i16>* %12301, align 2, !tbaa !386
  %12302 = getelementptr inbounds i16, i16* %12231, i64 -23
  %12303 = bitcast i16* %12302 to <8 x i16>*
  %t323 = load <8 x i16>, <8 x i16>* %12303, align 2, !tbaa !386
  %12304 = getelementptr inbounds i16, i16* %12231, i64 -24
  %12305 = bitcast i16* %12304 to <8 x i16>*
  %t324 = load <8 x i16>, <8 x i16>* %12305, align 2, !tbaa !386
  %12306 = getelementptr inbounds i16, i16* %12231, i64 -22
  %12307 = bitcast i16* %12306 to <8 x i16>*
  %t325 = load <8 x i16>, <8 x i16>* %12307, align 2, !tbaa !386
  %12308 = getelementptr inbounds i16, i16* %12231, i64 -21
  %12309 = bitcast i16* %12308 to <8 x i16>*
  %t326 = load <8 x i16>, <8 x i16>* %12309, align 2, !tbaa !386
  %12310 = getelementptr inbounds i16, i16* %12231, i64 -20
  %12311 = bitcast i16* %12310 to <8 x i16>*
  %t327 = load <8 x i16>, <8 x i16>* %12311, align 2, !tbaa !386
  %12312 = getelementptr inbounds i16, i16* %12231, i64 -18
  %12313 = bitcast i16* %12312 to <8 x i16>*
  %t328 = load <8 x i16>, <8 x i16>* %12313, align 2, !tbaa !386
  %12314 = getelementptr inbounds i16, i16* %12231, i64 -19
  %12315 = bitcast i16* %12314 to <8 x i16>*
  %t329 = load <8 x i16>, <8 x i16>* %12315, align 2, !tbaa !386
  %12316 = getelementptr inbounds i16, i16* %12231, i64 -15
  %12317 = bitcast i16* %12316 to <8 x i16>*
  %t330 = load <8 x i16>, <8 x i16>* %12317, align 2, !tbaa !386
  %12318 = getelementptr inbounds i16, i16* %12231, i64 -16
  %12319 = bitcast i16* %12318 to <8 x i16>*
  %t331 = load <8 x i16>, <8 x i16>* %12319, align 2, !tbaa !386
  %12320 = getelementptr inbounds i16, i16* %12231, i64 -14
  %12321 = bitcast i16* %12320 to <8 x i16>*
  %t332 = load <8 x i16>, <8 x i16>* %12321, align 2, !tbaa !386
  %12322 = getelementptr inbounds i16, i16* %12231, i64 -13
  %12323 = bitcast i16* %12322 to <8 x i16>*
  %t333 = load <8 x i16>, <8 x i16>* %12323, align 2, !tbaa !386
  %12324 = getelementptr inbounds i16, i16* %12231, i64 -12
  %12325 = bitcast i16* %12324 to <8 x i16>*
  %t334 = load <8 x i16>, <8 x i16>* %12325, align 2, !tbaa !386
  %12326 = getelementptr inbounds i16, i16* %12231, i64 -10
  %12327 = bitcast i16* %12326 to <8 x i16>*
  %t335 = load <8 x i16>, <8 x i16>* %12327, align 2, !tbaa !386
  %12328 = getelementptr inbounds i16, i16* %12231, i64 -11
  %12329 = bitcast i16* %12328 to <8 x i16>*
  %t336 = load <8 x i16>, <8 x i16>* %12329, align 2, !tbaa !386
  %12330 = getelementptr inbounds i16, i16* %12231, i64 -7
  %12331 = bitcast i16* %12330 to <8 x i16>*
  %t337 = load <8 x i16>, <8 x i16>* %12331, align 2, !tbaa !386
  %12332 = getelementptr inbounds i16, i16* %12231, i64 -8
  %12333 = bitcast i16* %12332 to <8 x i16>*
  %t338 = load <8 x i16>, <8 x i16>* %12333, align 2, !tbaa !386
  %12334 = getelementptr inbounds i16, i16* %12231, i64 -6
  %12335 = bitcast i16* %12334 to <8 x i16>*
  %t339 = load <8 x i16>, <8 x i16>* %12335, align 2, !tbaa !386
  %12336 = getelementptr inbounds i16, i16* %12231, i64 -5
  %12337 = bitcast i16* %12336 to <8 x i16>*
  %t340 = load <8 x i16>, <8 x i16>* %12337, align 2, !tbaa !386
  %12338 = getelementptr inbounds i16, i16* %12231, i64 -4
  %12339 = bitcast i16* %12338 to <8 x i16>*
  %t341 = load <8 x i16>, <8 x i16>* %12339, align 2, !tbaa !386
  %12340 = getelementptr inbounds i16, i16* %12231, i64 -2
  %12341 = bitcast i16* %12340 to <8 x i16>*
  %t342 = load <8 x i16>, <8 x i16>* %12341, align 2, !tbaa !386
  %12342 = getelementptr inbounds i16, i16* %12231, i64 -3
  %12343 = bitcast i16* %12342 to <8 x i16>*
  %t343 = load <8 x i16>, <8 x i16>* %12343, align 2, !tbaa !386
  %12344 = add <8 x i16> %t289, %t288
  %12345 = add <8 x i16> %12344, %t290
  %12346 = add <8 x i16> %12345, %t291
  %12347 = add <8 x i16> %12346, %t292
  %12348 = add <8 x i16> %12347, %t293
  %12349 = add <8 x i16> %12348, %t294
  %12350 = zext <8 x i16> %12349 to <8 x i32>
  %12351 = mul nuw nsw <8 x i32> %12350, <i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362>
  %12352 = shufflevector <8 x i32> %12351, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %12353 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %12352, i32 16)
  %12354 = shufflevector <8 x i32> %12351, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %12355 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %12354, i32 16)
  %12356 = shufflevector <4 x i16> %12353, <4 x i16> %12355, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %12357 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %12356, <8 x i16> %12349) #11
  %12358 = lshr <8 x i16> %12357, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %12359 = add <8 x i16> %t296, %t295
  %12360 = add <8 x i16> %12359, %t297
  %12361 = add <8 x i16> %12360, %t298
  %12362 = add <8 x i16> %12361, %t299
  %12363 = add <8 x i16> %12362, %t300
  %12364 = add <8 x i16> %12363, %t301
  %12365 = zext <8 x i16> %12364 to <8 x i32>
  %12366 = mul nuw nsw <8 x i32> %12365, <i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362>
  %12367 = shufflevector <8 x i32> %12366, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %12368 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %12367, i32 16)
  %12369 = shufflevector <8 x i32> %12366, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %12370 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %12369, i32 16)
  %12371 = shufflevector <4 x i16> %12368, <4 x i16> %12370, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %12372 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %12371, <8 x i16> %12364) #11
  %12373 = lshr <8 x i16> %12372, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %12374 = add <8 x i16> %t303, %t302
  %12375 = add <8 x i16> %12374, %t304
  %12376 = add <8 x i16> %12375, %t305
  %12377 = add <8 x i16> %12376, %t306
  %12378 = add <8 x i16> %12377, %t307
  %12379 = add <8 x i16> %12378, %t308
  %12380 = zext <8 x i16> %12379 to <8 x i32>
  %12381 = mul nuw nsw <8 x i32> %12380, <i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362>
  %12382 = shufflevector <8 x i32> %12381, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %12383 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %12382, i32 16)
  %12384 = shufflevector <8 x i32> %12381, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %12385 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %12384, i32 16)
  %12386 = shufflevector <4 x i16> %12383, <4 x i16> %12385, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %12387 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %12386, <8 x i16> %12379) #11
  %12388 = lshr <8 x i16> %12387, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %12389 = add <8 x i16> %t310, %t309
  %12390 = add <8 x i16> %12389, %t311
  %12391 = add <8 x i16> %12390, %t312
  %12392 = add <8 x i16> %12391, %t313
  %12393 = add <8 x i16> %12392, %t314
  %12394 = add <8 x i16> %12393, %t315
  %12395 = zext <8 x i16> %12394 to <8 x i32>
  %12396 = mul nuw nsw <8 x i32> %12395, <i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362>
  %12397 = shufflevector <8 x i32> %12396, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %12398 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %12397, i32 16)
  %12399 = shufflevector <8 x i32> %12396, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %12400 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %12399, i32 16)
  %12401 = shufflevector <4 x i16> %12398, <4 x i16> %12400, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %12402 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %12401, <8 x i16> %12394) #11
  %12403 = lshr <8 x i16> %12402, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %12404 = add <8 x i16> %t317, %t316
  %12405 = add <8 x i16> %12404, %t318
  %12406 = add <8 x i16> %12405, %t319
  %12407 = add <8 x i16> %12406, %t320
  %12408 = add <8 x i16> %12407, %t321
  %12409 = add <8 x i16> %12408, %t322
  %12410 = zext <8 x i16> %12409 to <8 x i32>
  %12411 = mul nuw nsw <8 x i32> %12410, <i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362>
  %12412 = shufflevector <8 x i32> %12411, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %12413 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %12412, i32 16)
  %12414 = shufflevector <8 x i32> %12411, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %12415 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %12414, i32 16)
  %12416 = shufflevector <4 x i16> %12413, <4 x i16> %12415, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %12417 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %12416, <8 x i16> %12409) #11
  %12418 = lshr <8 x i16> %12417, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %12419 = add <8 x i16> %t324, %t323
  %12420 = add <8 x i16> %12419, %t325
  %12421 = add <8 x i16> %12420, %t326
  %12422 = add <8 x i16> %12421, %t327
  %12423 = add <8 x i16> %12422, %t328
  %12424 = add <8 x i16> %12423, %t329
  %12425 = zext <8 x i16> %12424 to <8 x i32>
  %12426 = mul nuw nsw <8 x i32> %12425, <i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362>
  %12427 = shufflevector <8 x i32> %12426, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %12428 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %12427, i32 16)
  %12429 = shufflevector <8 x i32> %12426, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %12430 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %12429, i32 16)
  %12431 = shufflevector <4 x i16> %12428, <4 x i16> %12430, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %12432 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %12431, <8 x i16> %12424) #11
  %12433 = lshr <8 x i16> %12432, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %12434 = add <8 x i16> %t331, %t330
  %12435 = add <8 x i16> %12434, %t332
  %12436 = add <8 x i16> %12435, %t333
  %12437 = add <8 x i16> %12436, %t334
  %12438 = add <8 x i16> %12437, %t335
  %12439 = add <8 x i16> %12438, %t336
  %12440 = zext <8 x i16> %12439 to <8 x i32>
  %12441 = mul nuw nsw <8 x i32> %12440, <i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362>
  %12442 = shufflevector <8 x i32> %12441, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %12443 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %12442, i32 16)
  %12444 = shufflevector <8 x i32> %12441, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %12445 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %12444, i32 16)
  %12446 = shufflevector <4 x i16> %12443, <4 x i16> %12445, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %12447 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %12446, <8 x i16> %12439) #11
  %12448 = lshr <8 x i16> %12447, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %12449 = add <8 x i16> %t338, %t337
  %12450 = add <8 x i16> %12449, %t339
  %12451 = add <8 x i16> %12450, %t340
  %12452 = add <8 x i16> %12451, %t341
  %12453 = add <8 x i16> %12452, %t342
  %12454 = add <8 x i16> %12453, %t343
  %12455 = zext <8 x i16> %12454 to <8 x i32>
  %12456 = mul nuw nsw <8 x i32> %12455, <i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362>
  %12457 = shufflevector <8 x i32> %12456, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %12458 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %12457, i32 16)
  %12459 = shufflevector <8 x i32> %12456, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %12460 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %12459, i32 16)
  %12461 = shufflevector <4 x i16> %12458, <4 x i16> %12460, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %12462 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %12461, <8 x i16> %12454) #11
  %12463 = lshr <8 x i16> %12462, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %12464 = shufflevector <8 x i16> %12463, <8 x i16> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %12465 = shufflevector <16 x i16> %12464, <16 x i16> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12466 = shufflevector <32 x i16> %12465, <32 x i16> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12467 = and i32 %t239, 15
  %12468 = zext i32 %12467 to i64
  %12469 = mul nsw i64 %10128, %12468
  %12470 = add nsw i64 %12469, %12224
  %12471 = getelementptr inbounds i16, i16* %blur_x58, i64 %12470
  %12472 = bitcast i16* %12471 to <8 x i16>*
  store <8 x i16> %12358, <8 x i16>* %12472, align 2, !tbaa !389
  %12473 = getelementptr inbounds i16, i16* %12471, i64 8
  %12474 = bitcast i16* %12473 to <8 x i16>*
  store <8 x i16> %12373, <8 x i16>* %12474, align 2, !tbaa !389
  %12475 = getelementptr inbounds i16, i16* %12471, i64 16
  %12476 = bitcast i16* %12475 to <8 x i16>*
  store <8 x i16> %12388, <8 x i16>* %12476, align 2, !tbaa !389
  %12477 = getelementptr inbounds i16, i16* %12471, i64 24
  %12478 = bitcast i16* %12477 to <8 x i16>*
  store <8 x i16> %12403, <8 x i16>* %12478, align 2, !tbaa !389
  %12479 = getelementptr inbounds i16, i16* %12471, i64 32
  %12480 = bitcast i16* %12479 to <8 x i16>*
  store <8 x i16> %12418, <8 x i16>* %12480, align 2, !tbaa !389
  %12481 = getelementptr inbounds i16, i16* %12471, i64 40
  %12482 = bitcast i16* %12481 to <8 x i16>*
  store <8 x i16> %12433, <8 x i16>* %12482, align 2, !tbaa !389
  %12483 = getelementptr inbounds i16, i16* %12471, i64 48
  %12484 = bitcast i16* %12483 to <8 x i16>*
  store <8 x i16> %12448, <8 x i16>* %12484, align 2, !tbaa !389
  %12485 = shufflevector <64 x i16> %12466, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %12486 = getelementptr inbounds i16, i16* %12471, i64 56
  %12487 = bitcast i16* %12486 to <8 x i16>*
  store <8 x i16> %12485, <8 x i16>* %12487, align 2, !tbaa !389
  %12488 = add nuw nsw i32 %blur_x.s0.y.yi85, 1
  %.not157 = icmp eq i32 %12488, 4
  br i1 %.not157, label %"end for blur_x.s0.y.yi84", label %"for blur_x.s0.y.yi83"

"end for blur_x.s0.y.yi84":                       ; preds = %"for blur_x.s0.y.yi83"
  %indvars.iv.next220 = add nuw nsw i64 %indvars.iv219, 1
  %12489 = add nuw nsw i32 %blur_x.s0.x.x.rebased80, 1
  %.not158 = icmp eq i64 %indvars.iv.next220, %10139
  br i1 %.not158, label %"end for blur_x.s0.x.x.rebased79", label %"for blur_x.s0.x.x.rebased78"

"for blur_x.s0.x.x.rebased88":                    ; preds = %"for blur_x.s0.x.x.rebased88.preheader", %"end for blur_x.s0.y.yi94"
  %indvars.iv221 = phi i64 [ 0, %"for blur_x.s0.x.x.rebased88.preheader" ], [ %indvars.iv.next222, %"end for blur_x.s0.y.yi94" ]
  %12490 = trunc i64 %indvars.iv221 to i32
  %12491 = add i32 %t25447, %12490
  %12492 = shl nsw i32 %12491, 6
  %blur_x.s0.x.xi.base.s91 = add nsw i32 %12492, %t26552
  %12493 = add nsw i32 %blur_x.s0.x.xi.base.s91, -63
  %12494 = insertelement <4 x i32> undef, i32 %12493, i32 0
  %12495 = shufflevector <4 x i32> %12494, <4 x i32> undef, <4 x i32> zeroinitializer
  %12496 = add nsw <4 x i32> %12495, <i32 0, i32 1, i32 2, i32 3>
  %12497 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12496, <4 x i32> %10125) #11
  %12498 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12497, <4 x i32> zeroinitializer) #11
  %12499 = add nsw i32 %blur_x.s0.x.xi.base.s91, -59
  %12500 = insertelement <4 x i32> undef, i32 %12499, i32 0
  %12501 = shufflevector <4 x i32> %12500, <4 x i32> undef, <4 x i32> zeroinitializer
  %12502 = add nsw <4 x i32> %12501, <i32 0, i32 1, i32 2, i32 3>
  %12503 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12502, <4 x i32> %10125) #11
  %12504 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12503, <4 x i32> zeroinitializer) #11
  %12505 = add nsw i32 %blur_x.s0.x.xi.base.s91, -64
  %12506 = insertelement <4 x i32> undef, i32 %12505, i32 0
  %12507 = shufflevector <4 x i32> %12506, <4 x i32> undef, <4 x i32> zeroinitializer
  %12508 = add nsw <4 x i32> %12507, <i32 0, i32 1, i32 2, i32 3>
  %12509 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12508, <4 x i32> %10125) #11
  %12510 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12509, <4 x i32> zeroinitializer) #11
  %12511 = add nsw i32 %blur_x.s0.x.xi.base.s91, -60
  %12512 = insertelement <4 x i32> undef, i32 %12511, i32 0
  %12513 = shufflevector <4 x i32> %12512, <4 x i32> undef, <4 x i32> zeroinitializer
  %12514 = add nsw <4 x i32> %12513, <i32 0, i32 1, i32 2, i32 3>
  %12515 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12514, <4 x i32> %10125) #11
  %12516 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12515, <4 x i32> zeroinitializer) #11
  %12517 = add nsw i32 %blur_x.s0.x.xi.base.s91, -62
  %12518 = insertelement <4 x i32> undef, i32 %12517, i32 0
  %12519 = shufflevector <4 x i32> %12518, <4 x i32> undef, <4 x i32> zeroinitializer
  %12520 = add nsw <4 x i32> %12519, <i32 0, i32 1, i32 2, i32 3>
  %12521 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12520, <4 x i32> %10125) #11
  %12522 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12521, <4 x i32> zeroinitializer) #11
  %12523 = add nsw i32 %blur_x.s0.x.xi.base.s91, -58
  %12524 = insertelement <4 x i32> undef, i32 %12523, i32 0
  %12525 = shufflevector <4 x i32> %12524, <4 x i32> undef, <4 x i32> zeroinitializer
  %12526 = add nsw <4 x i32> %12525, <i32 0, i32 1, i32 2, i32 3>
  %12527 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12526, <4 x i32> %10125) #11
  %12528 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12527, <4 x i32> zeroinitializer) #11
  %12529 = add nsw i32 %blur_x.s0.x.xi.base.s91, -61
  %12530 = insertelement <4 x i32> undef, i32 %12529, i32 0
  %12531 = shufflevector <4 x i32> %12530, <4 x i32> undef, <4 x i32> zeroinitializer
  %12532 = add nsw <4 x i32> %12531, <i32 0, i32 1, i32 2, i32 3>
  %12533 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12532, <4 x i32> %10125) #11
  %12534 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12533, <4 x i32> zeroinitializer) #11
  %12535 = add nsw i32 %blur_x.s0.x.xi.base.s91, -57
  %12536 = insertelement <4 x i32> undef, i32 %12535, i32 0
  %12537 = shufflevector <4 x i32> %12536, <4 x i32> undef, <4 x i32> zeroinitializer
  %12538 = add nsw <4 x i32> %12537, <i32 0, i32 1, i32 2, i32 3>
  %12539 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12538, <4 x i32> %10125) #11
  %12540 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12539, <4 x i32> zeroinitializer) #11
  %12541 = add nsw i32 %blur_x.s0.x.xi.base.s91, -56
  %12542 = insertelement <4 x i32> undef, i32 %12541, i32 0
  %12543 = shufflevector <4 x i32> %12542, <4 x i32> undef, <4 x i32> zeroinitializer
  %12544 = add nsw <4 x i32> %12543, <i32 0, i32 1, i32 2, i32 3>
  %12545 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12544, <4 x i32> %10125) #11
  %12546 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12545, <4 x i32> zeroinitializer) #11
  %12547 = add nsw i32 %blur_x.s0.x.xi.base.s91, -54
  %12548 = insertelement <4 x i32> undef, i32 %12547, i32 0
  %12549 = shufflevector <4 x i32> %12548, <4 x i32> undef, <4 x i32> zeroinitializer
  %12550 = add nsw <4 x i32> %12549, <i32 0, i32 1, i32 2, i32 3>
  %12551 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12550, <4 x i32> %10125) #11
  %12552 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12551, <4 x i32> zeroinitializer) #11
  %12553 = add nsw i32 %blur_x.s0.x.xi.base.s91, -55
  %12554 = insertelement <4 x i32> undef, i32 %12553, i32 0
  %12555 = shufflevector <4 x i32> %12554, <4 x i32> undef, <4 x i32> zeroinitializer
  %12556 = add nsw <4 x i32> %12555, <i32 0, i32 1, i32 2, i32 3>
  %12557 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12556, <4 x i32> %10125) #11
  %12558 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12557, <4 x i32> zeroinitializer) #11
  %12559 = add nsw i32 %blur_x.s0.x.xi.base.s91, -51
  %12560 = insertelement <4 x i32> undef, i32 %12559, i32 0
  %12561 = shufflevector <4 x i32> %12560, <4 x i32> undef, <4 x i32> zeroinitializer
  %12562 = add nsw <4 x i32> %12561, <i32 0, i32 1, i32 2, i32 3>
  %12563 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12562, <4 x i32> %10125) #11
  %12564 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12563, <4 x i32> zeroinitializer) #11
  %12565 = add nsw i32 %blur_x.s0.x.xi.base.s91, -52
  %12566 = insertelement <4 x i32> undef, i32 %12565, i32 0
  %12567 = shufflevector <4 x i32> %12566, <4 x i32> undef, <4 x i32> zeroinitializer
  %12568 = add nsw <4 x i32> %12567, <i32 0, i32 1, i32 2, i32 3>
  %12569 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12568, <4 x i32> %10125) #11
  %12570 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12569, <4 x i32> zeroinitializer) #11
  %12571 = add nsw i32 %blur_x.s0.x.xi.base.s91, -50
  %12572 = insertelement <4 x i32> undef, i32 %12571, i32 0
  %12573 = shufflevector <4 x i32> %12572, <4 x i32> undef, <4 x i32> zeroinitializer
  %12574 = add nsw <4 x i32> %12573, <i32 0, i32 1, i32 2, i32 3>
  %12575 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12574, <4 x i32> %10125) #11
  %12576 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12575, <4 x i32> zeroinitializer) #11
  %12577 = add nsw i32 %blur_x.s0.x.xi.base.s91, -53
  %12578 = insertelement <4 x i32> undef, i32 %12577, i32 0
  %12579 = shufflevector <4 x i32> %12578, <4 x i32> undef, <4 x i32> zeroinitializer
  %12580 = add nsw <4 x i32> %12579, <i32 0, i32 1, i32 2, i32 3>
  %12581 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12580, <4 x i32> %10125) #11
  %12582 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12581, <4 x i32> zeroinitializer) #11
  %12583 = add nsw i32 %blur_x.s0.x.xi.base.s91, -49
  %12584 = insertelement <4 x i32> undef, i32 %12583, i32 0
  %12585 = shufflevector <4 x i32> %12584, <4 x i32> undef, <4 x i32> zeroinitializer
  %12586 = add nsw <4 x i32> %12585, <i32 0, i32 1, i32 2, i32 3>
  %12587 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12586, <4 x i32> %10125) #11
  %12588 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12587, <4 x i32> zeroinitializer) #11
  %12589 = add nsw i32 %blur_x.s0.x.xi.base.s91, -48
  %12590 = insertelement <4 x i32> undef, i32 %12589, i32 0
  %12591 = shufflevector <4 x i32> %12590, <4 x i32> undef, <4 x i32> zeroinitializer
  %12592 = add nsw <4 x i32> %12591, <i32 0, i32 1, i32 2, i32 3>
  %12593 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12592, <4 x i32> %10125) #11
  %12594 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12593, <4 x i32> zeroinitializer) #11
  %12595 = add nsw i32 %blur_x.s0.x.xi.base.s91, -46
  %12596 = insertelement <4 x i32> undef, i32 %12595, i32 0
  %12597 = shufflevector <4 x i32> %12596, <4 x i32> undef, <4 x i32> zeroinitializer
  %12598 = add nsw <4 x i32> %12597, <i32 0, i32 1, i32 2, i32 3>
  %12599 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12598, <4 x i32> %10125) #11
  %12600 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12599, <4 x i32> zeroinitializer) #11
  %12601 = add nsw i32 %blur_x.s0.x.xi.base.s91, -47
  %12602 = insertelement <4 x i32> undef, i32 %12601, i32 0
  %12603 = shufflevector <4 x i32> %12602, <4 x i32> undef, <4 x i32> zeroinitializer
  %12604 = add nsw <4 x i32> %12603, <i32 0, i32 1, i32 2, i32 3>
  %12605 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12604, <4 x i32> %10125) #11
  %12606 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12605, <4 x i32> zeroinitializer) #11
  %12607 = add nsw i32 %blur_x.s0.x.xi.base.s91, -43
  %12608 = insertelement <4 x i32> undef, i32 %12607, i32 0
  %12609 = shufflevector <4 x i32> %12608, <4 x i32> undef, <4 x i32> zeroinitializer
  %12610 = add nsw <4 x i32> %12609, <i32 0, i32 1, i32 2, i32 3>
  %12611 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12610, <4 x i32> %10125) #11
  %12612 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12611, <4 x i32> zeroinitializer) #11
  %12613 = add nsw i32 %blur_x.s0.x.xi.base.s91, -44
  %12614 = insertelement <4 x i32> undef, i32 %12613, i32 0
  %12615 = shufflevector <4 x i32> %12614, <4 x i32> undef, <4 x i32> zeroinitializer
  %12616 = add nsw <4 x i32> %12615, <i32 0, i32 1, i32 2, i32 3>
  %12617 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12616, <4 x i32> %10125) #11
  %12618 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12617, <4 x i32> zeroinitializer) #11
  %12619 = add nsw i32 %blur_x.s0.x.xi.base.s91, -42
  %12620 = insertelement <4 x i32> undef, i32 %12619, i32 0
  %12621 = shufflevector <4 x i32> %12620, <4 x i32> undef, <4 x i32> zeroinitializer
  %12622 = add nsw <4 x i32> %12621, <i32 0, i32 1, i32 2, i32 3>
  %12623 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12622, <4 x i32> %10125) #11
  %12624 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12623, <4 x i32> zeroinitializer) #11
  %12625 = add nsw i32 %blur_x.s0.x.xi.base.s91, -45
  %12626 = insertelement <4 x i32> undef, i32 %12625, i32 0
  %12627 = shufflevector <4 x i32> %12626, <4 x i32> undef, <4 x i32> zeroinitializer
  %12628 = add nsw <4 x i32> %12627, <i32 0, i32 1, i32 2, i32 3>
  %12629 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12628, <4 x i32> %10125) #11
  %12630 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12629, <4 x i32> zeroinitializer) #11
  %12631 = add nsw i32 %blur_x.s0.x.xi.base.s91, -41
  %12632 = insertelement <4 x i32> undef, i32 %12631, i32 0
  %12633 = shufflevector <4 x i32> %12632, <4 x i32> undef, <4 x i32> zeroinitializer
  %12634 = add nsw <4 x i32> %12633, <i32 0, i32 1, i32 2, i32 3>
  %12635 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12634, <4 x i32> %10125) #11
  %12636 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12635, <4 x i32> zeroinitializer) #11
  %12637 = add nsw i32 %blur_x.s0.x.xi.base.s91, -40
  %12638 = insertelement <4 x i32> undef, i32 %12637, i32 0
  %12639 = shufflevector <4 x i32> %12638, <4 x i32> undef, <4 x i32> zeroinitializer
  %12640 = add nsw <4 x i32> %12639, <i32 0, i32 1, i32 2, i32 3>
  %12641 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12640, <4 x i32> %10125) #11
  %12642 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12641, <4 x i32> zeroinitializer) #11
  %12643 = add nsw i32 %blur_x.s0.x.xi.base.s91, -38
  %12644 = insertelement <4 x i32> undef, i32 %12643, i32 0
  %12645 = shufflevector <4 x i32> %12644, <4 x i32> undef, <4 x i32> zeroinitializer
  %12646 = add nsw <4 x i32> %12645, <i32 0, i32 1, i32 2, i32 3>
  %12647 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12646, <4 x i32> %10125) #11
  %12648 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12647, <4 x i32> zeroinitializer) #11
  %12649 = add nsw i32 %blur_x.s0.x.xi.base.s91, -39
  %12650 = insertelement <4 x i32> undef, i32 %12649, i32 0
  %12651 = shufflevector <4 x i32> %12650, <4 x i32> undef, <4 x i32> zeroinitializer
  %12652 = add nsw <4 x i32> %12651, <i32 0, i32 1, i32 2, i32 3>
  %12653 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12652, <4 x i32> %10125) #11
  %12654 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12653, <4 x i32> zeroinitializer) #11
  %12655 = add nsw i32 %blur_x.s0.x.xi.base.s91, -35
  %12656 = insertelement <4 x i32> undef, i32 %12655, i32 0
  %12657 = shufflevector <4 x i32> %12656, <4 x i32> undef, <4 x i32> zeroinitializer
  %12658 = add nsw <4 x i32> %12657, <i32 0, i32 1, i32 2, i32 3>
  %12659 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12658, <4 x i32> %10125) #11
  %12660 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12659, <4 x i32> zeroinitializer) #11
  %12661 = add nsw i32 %blur_x.s0.x.xi.base.s91, -36
  %12662 = insertelement <4 x i32> undef, i32 %12661, i32 0
  %12663 = shufflevector <4 x i32> %12662, <4 x i32> undef, <4 x i32> zeroinitializer
  %12664 = add nsw <4 x i32> %12663, <i32 0, i32 1, i32 2, i32 3>
  %12665 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12664, <4 x i32> %10125) #11
  %12666 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12665, <4 x i32> zeroinitializer) #11
  %12667 = add nsw i32 %blur_x.s0.x.xi.base.s91, -34
  %12668 = insertelement <4 x i32> undef, i32 %12667, i32 0
  %12669 = shufflevector <4 x i32> %12668, <4 x i32> undef, <4 x i32> zeroinitializer
  %12670 = add nsw <4 x i32> %12669, <i32 0, i32 1, i32 2, i32 3>
  %12671 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12670, <4 x i32> %10125) #11
  %12672 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12671, <4 x i32> zeroinitializer) #11
  %12673 = add nsw i32 %blur_x.s0.x.xi.base.s91, -37
  %12674 = insertelement <4 x i32> undef, i32 %12673, i32 0
  %12675 = shufflevector <4 x i32> %12674, <4 x i32> undef, <4 x i32> zeroinitializer
  %12676 = add nsw <4 x i32> %12675, <i32 0, i32 1, i32 2, i32 3>
  %12677 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12676, <4 x i32> %10125) #11
  %12678 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12677, <4 x i32> zeroinitializer) #11
  %12679 = add nsw i32 %blur_x.s0.x.xi.base.s91, -33
  %12680 = insertelement <4 x i32> undef, i32 %12679, i32 0
  %12681 = shufflevector <4 x i32> %12680, <4 x i32> undef, <4 x i32> zeroinitializer
  %12682 = add nsw <4 x i32> %12681, <i32 0, i32 1, i32 2, i32 3>
  %12683 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12682, <4 x i32> %10125) #11
  %12684 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12683, <4 x i32> zeroinitializer) #11
  %12685 = add nsw i32 %blur_x.s0.x.xi.base.s91, -32
  %12686 = insertelement <4 x i32> undef, i32 %12685, i32 0
  %12687 = shufflevector <4 x i32> %12686, <4 x i32> undef, <4 x i32> zeroinitializer
  %12688 = add nsw <4 x i32> %12687, <i32 0, i32 1, i32 2, i32 3>
  %12689 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12688, <4 x i32> %10125) #11
  %12690 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12689, <4 x i32> zeroinitializer) #11
  %12691 = add nsw i32 %blur_x.s0.x.xi.base.s91, -30
  %12692 = insertelement <4 x i32> undef, i32 %12691, i32 0
  %12693 = shufflevector <4 x i32> %12692, <4 x i32> undef, <4 x i32> zeroinitializer
  %12694 = add nsw <4 x i32> %12693, <i32 0, i32 1, i32 2, i32 3>
  %12695 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12694, <4 x i32> %10125) #11
  %12696 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12695, <4 x i32> zeroinitializer) #11
  %12697 = add nsw i32 %blur_x.s0.x.xi.base.s91, -31
  %12698 = insertelement <4 x i32> undef, i32 %12697, i32 0
  %12699 = shufflevector <4 x i32> %12698, <4 x i32> undef, <4 x i32> zeroinitializer
  %12700 = add nsw <4 x i32> %12699, <i32 0, i32 1, i32 2, i32 3>
  %12701 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12700, <4 x i32> %10125) #11
  %12702 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12701, <4 x i32> zeroinitializer) #11
  %12703 = add nsw i32 %blur_x.s0.x.xi.base.s91, -27
  %12704 = insertelement <4 x i32> undef, i32 %12703, i32 0
  %12705 = shufflevector <4 x i32> %12704, <4 x i32> undef, <4 x i32> zeroinitializer
  %12706 = add nsw <4 x i32> %12705, <i32 0, i32 1, i32 2, i32 3>
  %12707 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12706, <4 x i32> %10125) #11
  %12708 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12707, <4 x i32> zeroinitializer) #11
  %12709 = add nsw i32 %blur_x.s0.x.xi.base.s91, -28
  %12710 = insertelement <4 x i32> undef, i32 %12709, i32 0
  %12711 = shufflevector <4 x i32> %12710, <4 x i32> undef, <4 x i32> zeroinitializer
  %12712 = add nsw <4 x i32> %12711, <i32 0, i32 1, i32 2, i32 3>
  %12713 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12712, <4 x i32> %10125) #11
  %12714 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12713, <4 x i32> zeroinitializer) #11
  %12715 = add nsw i32 %blur_x.s0.x.xi.base.s91, -26
  %12716 = insertelement <4 x i32> undef, i32 %12715, i32 0
  %12717 = shufflevector <4 x i32> %12716, <4 x i32> undef, <4 x i32> zeroinitializer
  %12718 = add nsw <4 x i32> %12717, <i32 0, i32 1, i32 2, i32 3>
  %12719 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12718, <4 x i32> %10125) #11
  %12720 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12719, <4 x i32> zeroinitializer) #11
  %12721 = add nsw i32 %blur_x.s0.x.xi.base.s91, -29
  %12722 = insertelement <4 x i32> undef, i32 %12721, i32 0
  %12723 = shufflevector <4 x i32> %12722, <4 x i32> undef, <4 x i32> zeroinitializer
  %12724 = add nsw <4 x i32> %12723, <i32 0, i32 1, i32 2, i32 3>
  %12725 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12724, <4 x i32> %10125) #11
  %12726 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12725, <4 x i32> zeroinitializer) #11
  %12727 = add nsw i32 %blur_x.s0.x.xi.base.s91, -25
  %12728 = insertelement <4 x i32> undef, i32 %12727, i32 0
  %12729 = shufflevector <4 x i32> %12728, <4 x i32> undef, <4 x i32> zeroinitializer
  %12730 = add nsw <4 x i32> %12729, <i32 0, i32 1, i32 2, i32 3>
  %12731 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12730, <4 x i32> %10125) #11
  %12732 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12731, <4 x i32> zeroinitializer) #11
  %12733 = add nsw i32 %blur_x.s0.x.xi.base.s91, -24
  %12734 = insertelement <4 x i32> undef, i32 %12733, i32 0
  %12735 = shufflevector <4 x i32> %12734, <4 x i32> undef, <4 x i32> zeroinitializer
  %12736 = add nsw <4 x i32> %12735, <i32 0, i32 1, i32 2, i32 3>
  %12737 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12736, <4 x i32> %10125) #11
  %12738 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12737, <4 x i32> zeroinitializer) #11
  %12739 = add nsw i32 %blur_x.s0.x.xi.base.s91, -22
  %12740 = insertelement <4 x i32> undef, i32 %12739, i32 0
  %12741 = shufflevector <4 x i32> %12740, <4 x i32> undef, <4 x i32> zeroinitializer
  %12742 = add nsw <4 x i32> %12741, <i32 0, i32 1, i32 2, i32 3>
  %12743 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12742, <4 x i32> %10125) #11
  %12744 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12743, <4 x i32> zeroinitializer) #11
  %12745 = add nsw i32 %blur_x.s0.x.xi.base.s91, -23
  %12746 = insertelement <4 x i32> undef, i32 %12745, i32 0
  %12747 = shufflevector <4 x i32> %12746, <4 x i32> undef, <4 x i32> zeroinitializer
  %12748 = add nsw <4 x i32> %12747, <i32 0, i32 1, i32 2, i32 3>
  %12749 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12748, <4 x i32> %10125) #11
  %12750 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12749, <4 x i32> zeroinitializer) #11
  %12751 = add nsw i32 %blur_x.s0.x.xi.base.s91, -19
  %12752 = insertelement <4 x i32> undef, i32 %12751, i32 0
  %12753 = shufflevector <4 x i32> %12752, <4 x i32> undef, <4 x i32> zeroinitializer
  %12754 = add nsw <4 x i32> %12753, <i32 0, i32 1, i32 2, i32 3>
  %12755 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12754, <4 x i32> %10125) #11
  %12756 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12755, <4 x i32> zeroinitializer) #11
  %12757 = add nsw i32 %blur_x.s0.x.xi.base.s91, -20
  %12758 = insertelement <4 x i32> undef, i32 %12757, i32 0
  %12759 = shufflevector <4 x i32> %12758, <4 x i32> undef, <4 x i32> zeroinitializer
  %12760 = add nsw <4 x i32> %12759, <i32 0, i32 1, i32 2, i32 3>
  %12761 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12760, <4 x i32> %10125) #11
  %12762 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12761, <4 x i32> zeroinitializer) #11
  %12763 = add nsw i32 %blur_x.s0.x.xi.base.s91, -18
  %12764 = insertelement <4 x i32> undef, i32 %12763, i32 0
  %12765 = shufflevector <4 x i32> %12764, <4 x i32> undef, <4 x i32> zeroinitializer
  %12766 = add nsw <4 x i32> %12765, <i32 0, i32 1, i32 2, i32 3>
  %12767 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12766, <4 x i32> %10125) #11
  %12768 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12767, <4 x i32> zeroinitializer) #11
  %12769 = add nsw i32 %blur_x.s0.x.xi.base.s91, -21
  %12770 = insertelement <4 x i32> undef, i32 %12769, i32 0
  %12771 = shufflevector <4 x i32> %12770, <4 x i32> undef, <4 x i32> zeroinitializer
  %12772 = add nsw <4 x i32> %12771, <i32 0, i32 1, i32 2, i32 3>
  %12773 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12772, <4 x i32> %10125) #11
  %12774 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12773, <4 x i32> zeroinitializer) #11
  %12775 = add nsw i32 %blur_x.s0.x.xi.base.s91, -17
  %12776 = insertelement <4 x i32> undef, i32 %12775, i32 0
  %12777 = shufflevector <4 x i32> %12776, <4 x i32> undef, <4 x i32> zeroinitializer
  %12778 = add nsw <4 x i32> %12777, <i32 0, i32 1, i32 2, i32 3>
  %12779 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12778, <4 x i32> %10125) #11
  %12780 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12779, <4 x i32> zeroinitializer) #11
  %12781 = add nsw i32 %blur_x.s0.x.xi.base.s91, -16
  %12782 = insertelement <4 x i32> undef, i32 %12781, i32 0
  %12783 = shufflevector <4 x i32> %12782, <4 x i32> undef, <4 x i32> zeroinitializer
  %12784 = add nsw <4 x i32> %12783, <i32 0, i32 1, i32 2, i32 3>
  %12785 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12784, <4 x i32> %10125) #11
  %12786 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12785, <4 x i32> zeroinitializer) #11
  %12787 = add nsw i32 %blur_x.s0.x.xi.base.s91, -14
  %12788 = insertelement <4 x i32> undef, i32 %12787, i32 0
  %12789 = shufflevector <4 x i32> %12788, <4 x i32> undef, <4 x i32> zeroinitializer
  %12790 = add nsw <4 x i32> %12789, <i32 0, i32 1, i32 2, i32 3>
  %12791 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12790, <4 x i32> %10125) #11
  %12792 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12791, <4 x i32> zeroinitializer) #11
  %12793 = add nsw i32 %blur_x.s0.x.xi.base.s91, -15
  %12794 = insertelement <4 x i32> undef, i32 %12793, i32 0
  %12795 = shufflevector <4 x i32> %12794, <4 x i32> undef, <4 x i32> zeroinitializer
  %12796 = add nsw <4 x i32> %12795, <i32 0, i32 1, i32 2, i32 3>
  %12797 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12796, <4 x i32> %10125) #11
  %12798 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12797, <4 x i32> zeroinitializer) #11
  %12799 = add nsw i32 %blur_x.s0.x.xi.base.s91, -11
  %12800 = insertelement <4 x i32> undef, i32 %12799, i32 0
  %12801 = shufflevector <4 x i32> %12800, <4 x i32> undef, <4 x i32> zeroinitializer
  %12802 = add nsw <4 x i32> %12801, <i32 0, i32 1, i32 2, i32 3>
  %12803 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12802, <4 x i32> %10125) #11
  %12804 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12803, <4 x i32> zeroinitializer) #11
  %12805 = add nsw i32 %blur_x.s0.x.xi.base.s91, -12
  %12806 = insertelement <4 x i32> undef, i32 %12805, i32 0
  %12807 = shufflevector <4 x i32> %12806, <4 x i32> undef, <4 x i32> zeroinitializer
  %12808 = add nsw <4 x i32> %12807, <i32 0, i32 1, i32 2, i32 3>
  %12809 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12808, <4 x i32> %10125) #11
  %12810 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12809, <4 x i32> zeroinitializer) #11
  %12811 = add nsw i32 %blur_x.s0.x.xi.base.s91, -10
  %12812 = insertelement <4 x i32> undef, i32 %12811, i32 0
  %12813 = shufflevector <4 x i32> %12812, <4 x i32> undef, <4 x i32> zeroinitializer
  %12814 = add nsw <4 x i32> %12813, <i32 0, i32 1, i32 2, i32 3>
  %12815 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12814, <4 x i32> %10125) #11
  %12816 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12815, <4 x i32> zeroinitializer) #11
  %12817 = add nsw i32 %blur_x.s0.x.xi.base.s91, -13
  %12818 = insertelement <4 x i32> undef, i32 %12817, i32 0
  %12819 = shufflevector <4 x i32> %12818, <4 x i32> undef, <4 x i32> zeroinitializer
  %12820 = add nsw <4 x i32> %12819, <i32 0, i32 1, i32 2, i32 3>
  %12821 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12820, <4 x i32> %10125) #11
  %12822 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12821, <4 x i32> zeroinitializer) #11
  %12823 = add nsw i32 %blur_x.s0.x.xi.base.s91, -9
  %12824 = insertelement <4 x i32> undef, i32 %12823, i32 0
  %12825 = shufflevector <4 x i32> %12824, <4 x i32> undef, <4 x i32> zeroinitializer
  %12826 = add nsw <4 x i32> %12825, <i32 0, i32 1, i32 2, i32 3>
  %12827 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12826, <4 x i32> %10125) #11
  %12828 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12827, <4 x i32> zeroinitializer) #11
  %12829 = add nsw i32 %blur_x.s0.x.xi.base.s91, -8
  %12830 = insertelement <4 x i32> undef, i32 %12829, i32 0
  %12831 = shufflevector <4 x i32> %12830, <4 x i32> undef, <4 x i32> zeroinitializer
  %12832 = add nsw <4 x i32> %12831, <i32 0, i32 1, i32 2, i32 3>
  %12833 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12832, <4 x i32> %10125) #11
  %12834 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12833, <4 x i32> zeroinitializer) #11
  %12835 = add nsw i32 %blur_x.s0.x.xi.base.s91, -6
  %12836 = insertelement <4 x i32> undef, i32 %12835, i32 0
  %12837 = shufflevector <4 x i32> %12836, <4 x i32> undef, <4 x i32> zeroinitializer
  %12838 = add nsw <4 x i32> %12837, <i32 0, i32 1, i32 2, i32 3>
  %12839 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12838, <4 x i32> %10125) #11
  %12840 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12839, <4 x i32> zeroinitializer) #11
  %12841 = add nsw i32 %blur_x.s0.x.xi.base.s91, -7
  %12842 = insertelement <4 x i32> undef, i32 %12841, i32 0
  %12843 = shufflevector <4 x i32> %12842, <4 x i32> undef, <4 x i32> zeroinitializer
  %12844 = add nsw <4 x i32> %12843, <i32 0, i32 1, i32 2, i32 3>
  %12845 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12844, <4 x i32> %10125) #11
  %12846 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12845, <4 x i32> zeroinitializer) #11
  %12847 = add nsw i32 %blur_x.s0.x.xi.base.s91, -3
  %12848 = insertelement <4 x i32> undef, i32 %12847, i32 0
  %12849 = shufflevector <4 x i32> %12848, <4 x i32> undef, <4 x i32> zeroinitializer
  %12850 = add nsw <4 x i32> %12849, <i32 0, i32 1, i32 2, i32 3>
  %12851 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12850, <4 x i32> %10125) #11
  %12852 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12851, <4 x i32> zeroinitializer) #11
  %12853 = add nsw i32 %blur_x.s0.x.xi.base.s91, -4
  %12854 = insertelement <4 x i32> undef, i32 %12853, i32 0
  %12855 = shufflevector <4 x i32> %12854, <4 x i32> undef, <4 x i32> zeroinitializer
  %12856 = add nsw <4 x i32> %12855, <i32 0, i32 1, i32 2, i32 3>
  %12857 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12856, <4 x i32> %10125) #11
  %12858 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12857, <4 x i32> zeroinitializer) #11
  %12859 = add nsw i32 %blur_x.s0.x.xi.base.s91, -2
  %12860 = insertelement <4 x i32> undef, i32 %12859, i32 0
  %12861 = shufflevector <4 x i32> %12860, <4 x i32> undef, <4 x i32> zeroinitializer
  %12862 = add nsw <4 x i32> %12861, <i32 0, i32 1, i32 2, i32 3>
  %12863 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12862, <4 x i32> %10125) #11
  %12864 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12863, <4 x i32> zeroinitializer) #11
  %12865 = add nsw i32 %blur_x.s0.x.xi.base.s91, -5
  %12866 = insertelement <4 x i32> undef, i32 %12865, i32 0
  %12867 = shufflevector <4 x i32> %12866, <4 x i32> undef, <4 x i32> zeroinitializer
  %12868 = add nsw <4 x i32> %12867, <i32 0, i32 1, i32 2, i32 3>
  %12869 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12868, <4 x i32> %10125) #11
  %12870 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12869, <4 x i32> zeroinitializer) #11
  %12871 = add nsw i32 %blur_x.s0.x.xi.base.s91, -1
  %12872 = insertelement <4 x i32> undef, i32 %12871, i32 0
  %12873 = shufflevector <4 x i32> %12872, <4 x i32> undef, <4 x i32> zeroinitializer
  %12874 = add nsw <4 x i32> %12873, <i32 0, i32 1, i32 2, i32 3>
  %12875 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12874, <4 x i32> %10125) #11
  %12876 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12875, <4 x i32> zeroinitializer) #11
  %12877 = insertelement <4 x i32> undef, i32 %blur_x.s0.x.xi.base.s91, i32 0
  %12878 = shufflevector <4 x i32> %12877, <4 x i32> undef, <4 x i32> zeroinitializer
  %12879 = add nsw <4 x i32> %12878, <i32 0, i32 1, i32 2, i32 3>
  %12880 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12879, <4 x i32> %10125) #11
  %12881 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12880, <4 x i32> zeroinitializer) #11
  %12882 = add nsw i32 %blur_x.s0.x.xi.base.s91, 2
  %12883 = insertelement <4 x i32> undef, i32 %12882, i32 0
  %12884 = shufflevector <4 x i32> %12883, <4 x i32> undef, <4 x i32> zeroinitializer
  %12885 = add nsw <4 x i32> %12884, <i32 0, i32 1, i32 2, i32 3>
  %12886 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12885, <4 x i32> %10125) #11
  %12887 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12886, <4 x i32> zeroinitializer) #11
  %12888 = add nsw i32 %blur_x.s0.x.xi.base.s91, 1
  %12889 = insertelement <4 x i32> undef, i32 %12888, i32 0
  %12890 = shufflevector <4 x i32> %12889, <4 x i32> undef, <4 x i32> zeroinitializer
  %12891 = add nsw <4 x i32> %12890, <i32 0, i32 1, i32 2, i32 3>
  %12892 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %12891, <4 x i32> %10125) #11
  %12893 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %12892, <4 x i32> zeroinitializer) #11
  %12894 = sext i32 %12492 to i64
  br label %"for blur_x.s0.y.yi93"

"end for blur_x.s0.x.x.rebased89":                ; preds = %"end for blur_x.s0.y.yi94", %"end for blur_x.s0.x.x.rebased79"
  %12895 = icmp ugt i64 %indvars.iv233, 5
  br i1 %12895, label %"consume blur_x100", label %after_bb97

"for blur_x.s0.y.yi93":                           ; preds = %"for blur_x.s0.x.x.rebased88", %"for blur_x.s0.y.yi93"
  %blur_x.s0.y.yi95 = phi i32 [ 0, %"for blur_x.s0.x.x.rebased88" ], [ %14547, %"for blur_x.s0.y.yi93" ]
  %a26 = add nsw i32 %12226, %blur_x.s0.y.yi95
  %12896 = icmp sgt i32 %a26, 0
  %12897 = select i1 %12896, i32 %a26, i32 0
  %12898 = mul nsw i32 %12897, %input.stride.145
  %12899 = insertelement <4 x i32> undef, i32 %12898, i32 0
  %t344 = shufflevector <4 x i32> %12899, <4 x i32> undef, <4 x i32> zeroinitializer
  %12900 = add <4 x i32> %t344, %12498
  %12901 = extractelement <4 x i32> %12900, i32 0
  %12902 = sext i32 %12901 to i64
  %12903 = getelementptr inbounds i16, i16* %10126, i64 %12902
  %12904 = load i16, i16* %12903, align 2, !tbaa !386
  %12905 = insertelement <4 x i16> undef, i16 %12904, i32 0
  %12906 = extractelement <4 x i32> %12900, i32 1
  %12907 = sext i32 %12906 to i64
  %12908 = getelementptr inbounds i16, i16* %10126, i64 %12907
  %12909 = load i16, i16* %12908, align 2, !tbaa !386
  %12910 = insertelement <4 x i16> %12905, i16 %12909, i32 1
  %12911 = extractelement <4 x i32> %12900, i32 2
  %12912 = sext i32 %12911 to i64
  %12913 = getelementptr inbounds i16, i16* %10126, i64 %12912
  %12914 = load i16, i16* %12913, align 2, !tbaa !386
  %12915 = insertelement <4 x i16> %12910, i16 %12914, i32 2
  %12916 = extractelement <4 x i32> %12900, i32 3
  %12917 = sext i32 %12916 to i64
  %12918 = getelementptr inbounds i16, i16* %10126, i64 %12917
  %12919 = load i16, i16* %12918, align 2, !tbaa !386
  %12920 = insertelement <4 x i16> %12915, i16 %12919, i32 3
  %12921 = add <4 x i32> %12504, %t344
  %12922 = extractelement <4 x i32> %12921, i32 0
  %12923 = sext i32 %12922 to i64
  %12924 = getelementptr inbounds i16, i16* %10126, i64 %12923
  %12925 = load i16, i16* %12924, align 2, !tbaa !386
  %12926 = insertelement <4 x i16> undef, i16 %12925, i32 0
  %12927 = extractelement <4 x i32> %12921, i32 1
  %12928 = sext i32 %12927 to i64
  %12929 = getelementptr inbounds i16, i16* %10126, i64 %12928
  %12930 = load i16, i16* %12929, align 2, !tbaa !386
  %12931 = insertelement <4 x i16> %12926, i16 %12930, i32 1
  %12932 = extractelement <4 x i32> %12921, i32 2
  %12933 = sext i32 %12932 to i64
  %12934 = getelementptr inbounds i16, i16* %10126, i64 %12933
  %12935 = load i16, i16* %12934, align 2, !tbaa !386
  %12936 = insertelement <4 x i16> %12931, i16 %12935, i32 2
  %12937 = extractelement <4 x i32> %12921, i32 3
  %12938 = sext i32 %12937 to i64
  %12939 = getelementptr inbounds i16, i16* %10126, i64 %12938
  %12940 = load i16, i16* %12939, align 2, !tbaa !386
  %12941 = insertelement <4 x i16> %12936, i16 %12940, i32 3
  %12942 = add <4 x i32> %12510, %t344
  %12943 = extractelement <4 x i32> %12942, i32 0
  %12944 = sext i32 %12943 to i64
  %12945 = getelementptr inbounds i16, i16* %10126, i64 %12944
  %12946 = load i16, i16* %12945, align 2, !tbaa !386
  %12947 = insertelement <4 x i16> undef, i16 %12946, i32 0
  %12948 = extractelement <4 x i32> %12942, i32 1
  %12949 = sext i32 %12948 to i64
  %12950 = getelementptr inbounds i16, i16* %10126, i64 %12949
  %12951 = load i16, i16* %12950, align 2, !tbaa !386
  %12952 = insertelement <4 x i16> %12947, i16 %12951, i32 1
  %12953 = extractelement <4 x i32> %12942, i32 2
  %12954 = sext i32 %12953 to i64
  %12955 = getelementptr inbounds i16, i16* %10126, i64 %12954
  %12956 = load i16, i16* %12955, align 2, !tbaa !386
  %12957 = insertelement <4 x i16> %12952, i16 %12956, i32 2
  %12958 = extractelement <4 x i32> %12942, i32 3
  %12959 = sext i32 %12958 to i64
  %12960 = getelementptr inbounds i16, i16* %10126, i64 %12959
  %12961 = load i16, i16* %12960, align 2, !tbaa !386
  %12962 = insertelement <4 x i16> %12957, i16 %12961, i32 3
  %12963 = add <4 x i32> %12516, %t344
  %12964 = extractelement <4 x i32> %12963, i32 0
  %12965 = sext i32 %12964 to i64
  %12966 = getelementptr inbounds i16, i16* %10126, i64 %12965
  %12967 = load i16, i16* %12966, align 2, !tbaa !386
  %12968 = insertelement <4 x i16> undef, i16 %12967, i32 0
  %12969 = extractelement <4 x i32> %12963, i32 1
  %12970 = sext i32 %12969 to i64
  %12971 = getelementptr inbounds i16, i16* %10126, i64 %12970
  %12972 = load i16, i16* %12971, align 2, !tbaa !386
  %12973 = insertelement <4 x i16> %12968, i16 %12972, i32 1
  %12974 = extractelement <4 x i32> %12963, i32 2
  %12975 = sext i32 %12974 to i64
  %12976 = getelementptr inbounds i16, i16* %10126, i64 %12975
  %12977 = load i16, i16* %12976, align 2, !tbaa !386
  %12978 = insertelement <4 x i16> %12973, i16 %12977, i32 2
  %12979 = extractelement <4 x i32> %12963, i32 3
  %12980 = sext i32 %12979 to i64
  %12981 = getelementptr inbounds i16, i16* %10126, i64 %12980
  %12982 = load i16, i16* %12981, align 2, !tbaa !386
  %12983 = insertelement <4 x i16> %12978, i16 %12982, i32 3
  %12984 = add <4 x i32> %12522, %t344
  %12985 = extractelement <4 x i32> %12984, i32 0
  %12986 = sext i32 %12985 to i64
  %12987 = getelementptr inbounds i16, i16* %10126, i64 %12986
  %12988 = load i16, i16* %12987, align 2, !tbaa !386
  %12989 = insertelement <4 x i16> undef, i16 %12988, i32 0
  %12990 = extractelement <4 x i32> %12984, i32 1
  %12991 = sext i32 %12990 to i64
  %12992 = getelementptr inbounds i16, i16* %10126, i64 %12991
  %12993 = load i16, i16* %12992, align 2, !tbaa !386
  %12994 = insertelement <4 x i16> %12989, i16 %12993, i32 1
  %12995 = extractelement <4 x i32> %12984, i32 2
  %12996 = sext i32 %12995 to i64
  %12997 = getelementptr inbounds i16, i16* %10126, i64 %12996
  %12998 = load i16, i16* %12997, align 2, !tbaa !386
  %12999 = insertelement <4 x i16> %12994, i16 %12998, i32 2
  %13000 = extractelement <4 x i32> %12984, i32 3
  %13001 = sext i32 %13000 to i64
  %13002 = getelementptr inbounds i16, i16* %10126, i64 %13001
  %13003 = load i16, i16* %13002, align 2, !tbaa !386
  %13004 = insertelement <4 x i16> %12999, i16 %13003, i32 3
  %13005 = add <4 x i32> %12528, %t344
  %13006 = extractelement <4 x i32> %13005, i32 0
  %13007 = sext i32 %13006 to i64
  %13008 = getelementptr inbounds i16, i16* %10126, i64 %13007
  %13009 = load i16, i16* %13008, align 2, !tbaa !386
  %13010 = insertelement <4 x i16> undef, i16 %13009, i32 0
  %13011 = extractelement <4 x i32> %13005, i32 1
  %13012 = sext i32 %13011 to i64
  %13013 = getelementptr inbounds i16, i16* %10126, i64 %13012
  %13014 = load i16, i16* %13013, align 2, !tbaa !386
  %13015 = insertelement <4 x i16> %13010, i16 %13014, i32 1
  %13016 = extractelement <4 x i32> %13005, i32 2
  %13017 = sext i32 %13016 to i64
  %13018 = getelementptr inbounds i16, i16* %10126, i64 %13017
  %13019 = load i16, i16* %13018, align 2, !tbaa !386
  %13020 = insertelement <4 x i16> %13015, i16 %13019, i32 2
  %13021 = extractelement <4 x i32> %13005, i32 3
  %13022 = sext i32 %13021 to i64
  %13023 = getelementptr inbounds i16, i16* %10126, i64 %13022
  %13024 = load i16, i16* %13023, align 2, !tbaa !386
  %13025 = insertelement <4 x i16> %13020, i16 %13024, i32 3
  %13026 = add <4 x i32> %12534, %t344
  %13027 = extractelement <4 x i32> %13026, i32 0
  %13028 = sext i32 %13027 to i64
  %13029 = getelementptr inbounds i16, i16* %10126, i64 %13028
  %13030 = load i16, i16* %13029, align 2, !tbaa !386
  %13031 = insertelement <4 x i16> undef, i16 %13030, i32 0
  %13032 = extractelement <4 x i32> %13026, i32 1
  %13033 = sext i32 %13032 to i64
  %13034 = getelementptr inbounds i16, i16* %10126, i64 %13033
  %13035 = load i16, i16* %13034, align 2, !tbaa !386
  %13036 = insertelement <4 x i16> %13031, i16 %13035, i32 1
  %13037 = extractelement <4 x i32> %13026, i32 2
  %13038 = sext i32 %13037 to i64
  %13039 = getelementptr inbounds i16, i16* %10126, i64 %13038
  %13040 = load i16, i16* %13039, align 2, !tbaa !386
  %13041 = insertelement <4 x i16> %13036, i16 %13040, i32 2
  %13042 = extractelement <4 x i32> %13026, i32 3
  %13043 = sext i32 %13042 to i64
  %13044 = getelementptr inbounds i16, i16* %10126, i64 %13043
  %13045 = load i16, i16* %13044, align 2, !tbaa !386
  %13046 = insertelement <4 x i16> %13041, i16 %13045, i32 3
  %13047 = add <4 x i32> %12540, %t344
  %13048 = extractelement <4 x i32> %13047, i32 0
  %13049 = sext i32 %13048 to i64
  %13050 = getelementptr inbounds i16, i16* %10126, i64 %13049
  %13051 = load i16, i16* %13050, align 2, !tbaa !386
  %13052 = insertelement <4 x i16> undef, i16 %13051, i32 0
  %13053 = extractelement <4 x i32> %13047, i32 1
  %13054 = sext i32 %13053 to i64
  %13055 = getelementptr inbounds i16, i16* %10126, i64 %13054
  %13056 = load i16, i16* %13055, align 2, !tbaa !386
  %13057 = insertelement <4 x i16> %13052, i16 %13056, i32 1
  %13058 = extractelement <4 x i32> %13047, i32 2
  %13059 = sext i32 %13058 to i64
  %13060 = getelementptr inbounds i16, i16* %10126, i64 %13059
  %13061 = load i16, i16* %13060, align 2, !tbaa !386
  %13062 = insertelement <4 x i16> %13057, i16 %13061, i32 2
  %13063 = extractelement <4 x i32> %13047, i32 3
  %13064 = sext i32 %13063 to i64
  %13065 = getelementptr inbounds i16, i16* %10126, i64 %13064
  %13066 = load i16, i16* %13065, align 2, !tbaa !386
  %13067 = insertelement <4 x i16> %13062, i16 %13066, i32 3
  %13068 = add <4 x i32> %12546, %t344
  %13069 = extractelement <4 x i32> %13068, i32 0
  %13070 = sext i32 %13069 to i64
  %13071 = getelementptr inbounds i16, i16* %10126, i64 %13070
  %13072 = load i16, i16* %13071, align 2, !tbaa !386
  %13073 = insertelement <4 x i16> undef, i16 %13072, i32 0
  %13074 = extractelement <4 x i32> %13068, i32 1
  %13075 = sext i32 %13074 to i64
  %13076 = getelementptr inbounds i16, i16* %10126, i64 %13075
  %13077 = load i16, i16* %13076, align 2, !tbaa !386
  %13078 = insertelement <4 x i16> %13073, i16 %13077, i32 1
  %13079 = extractelement <4 x i32> %13068, i32 2
  %13080 = sext i32 %13079 to i64
  %13081 = getelementptr inbounds i16, i16* %10126, i64 %13080
  %13082 = load i16, i16* %13081, align 2, !tbaa !386
  %13083 = insertelement <4 x i16> %13078, i16 %13082, i32 2
  %13084 = extractelement <4 x i32> %13068, i32 3
  %13085 = sext i32 %13084 to i64
  %13086 = getelementptr inbounds i16, i16* %10126, i64 %13085
  %13087 = load i16, i16* %13086, align 2, !tbaa !386
  %13088 = insertelement <4 x i16> %13083, i16 %13087, i32 3
  %13089 = add <4 x i32> %12552, %t344
  %13090 = extractelement <4 x i32> %13089, i32 0
  %13091 = sext i32 %13090 to i64
  %13092 = getelementptr inbounds i16, i16* %10126, i64 %13091
  %13093 = load i16, i16* %13092, align 2, !tbaa !386
  %13094 = insertelement <4 x i16> undef, i16 %13093, i32 0
  %13095 = extractelement <4 x i32> %13089, i32 1
  %13096 = sext i32 %13095 to i64
  %13097 = getelementptr inbounds i16, i16* %10126, i64 %13096
  %13098 = load i16, i16* %13097, align 2, !tbaa !386
  %13099 = insertelement <4 x i16> %13094, i16 %13098, i32 1
  %13100 = extractelement <4 x i32> %13089, i32 2
  %13101 = sext i32 %13100 to i64
  %13102 = getelementptr inbounds i16, i16* %10126, i64 %13101
  %13103 = load i16, i16* %13102, align 2, !tbaa !386
  %13104 = insertelement <4 x i16> %13099, i16 %13103, i32 2
  %13105 = extractelement <4 x i32> %13089, i32 3
  %13106 = sext i32 %13105 to i64
  %13107 = getelementptr inbounds i16, i16* %10126, i64 %13106
  %13108 = load i16, i16* %13107, align 2, !tbaa !386
  %13109 = insertelement <4 x i16> %13104, i16 %13108, i32 3
  %13110 = add <4 x i32> %12558, %t344
  %13111 = extractelement <4 x i32> %13110, i32 0
  %13112 = sext i32 %13111 to i64
  %13113 = getelementptr inbounds i16, i16* %10126, i64 %13112
  %13114 = load i16, i16* %13113, align 2, !tbaa !386
  %13115 = insertelement <4 x i16> undef, i16 %13114, i32 0
  %13116 = extractelement <4 x i32> %13110, i32 1
  %13117 = sext i32 %13116 to i64
  %13118 = getelementptr inbounds i16, i16* %10126, i64 %13117
  %13119 = load i16, i16* %13118, align 2, !tbaa !386
  %13120 = insertelement <4 x i16> %13115, i16 %13119, i32 1
  %13121 = extractelement <4 x i32> %13110, i32 2
  %13122 = sext i32 %13121 to i64
  %13123 = getelementptr inbounds i16, i16* %10126, i64 %13122
  %13124 = load i16, i16* %13123, align 2, !tbaa !386
  %13125 = insertelement <4 x i16> %13120, i16 %13124, i32 2
  %13126 = extractelement <4 x i32> %13110, i32 3
  %13127 = sext i32 %13126 to i64
  %13128 = getelementptr inbounds i16, i16* %10126, i64 %13127
  %13129 = load i16, i16* %13128, align 2, !tbaa !386
  %13130 = insertelement <4 x i16> %13125, i16 %13129, i32 3
  %13131 = add <4 x i16> %13025, %12983
  %13132 = add <4 x i16> %13109, %13088
  %13133 = add <4 x i16> %12941, %12920
  %13134 = add <4 x i16> %13133, %12962
  %13135 = add <4 x i16> %13134, %13004
  %13136 = add <4 x i16> %13135, %13131
  %13137 = add <4 x i16> %13136, %13046
  %13138 = add <4 x i16> %13131, %12941
  %13139 = add <4 x i16> %13138, %13067
  %13140 = add <4 x i16> %13139, %13132
  %13141 = add <4 x i16> %13140, %13130
  %13142 = shufflevector <4 x i16> %13137, <4 x i16> %13141, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %13143 = zext <8 x i16> %13142 to <8 x i32>
  %13144 = mul nuw nsw <8 x i32> %13143, <i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362>
  %13145 = shufflevector <8 x i32> %13144, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %13146 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %13145, i32 16)
  %13147 = shufflevector <8 x i32> %13144, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %13148 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %13147, i32 16)
  %13149 = shufflevector <4 x i16> %13146, <4 x i16> %13148, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %13150 = add <4 x i16> %13131, %12920
  %13151 = add <4 x i16> %13150, %12941
  %13152 = add <4 x i16> %13151, %12962
  %13153 = add <4 x i16> %13152, %13004
  %13154 = add <4 x i16> %13153, %13046
  %13155 = add <4 x i16> %13139, %13088
  %13156 = add <4 x i16> %13155, %13109
  %13157 = add <4 x i16> %13156, %13130
  %13158 = shufflevector <4 x i16> %13154, <4 x i16> %13157, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %13159 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %13149, <8 x i16> %13158) #11
  %13160 = lshr <8 x i16> %13159, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %13161 = add <4 x i32> %12564, %t344
  %13162 = extractelement <4 x i32> %13161, i32 0
  %13163 = sext i32 %13162 to i64
  %13164 = getelementptr inbounds i16, i16* %10126, i64 %13163
  %13165 = load i16, i16* %13164, align 2, !tbaa !386
  %13166 = insertelement <4 x i16> undef, i16 %13165, i32 0
  %13167 = extractelement <4 x i32> %13161, i32 1
  %13168 = sext i32 %13167 to i64
  %13169 = getelementptr inbounds i16, i16* %10126, i64 %13168
  %13170 = load i16, i16* %13169, align 2, !tbaa !386
  %13171 = insertelement <4 x i16> %13166, i16 %13170, i32 1
  %13172 = extractelement <4 x i32> %13161, i32 2
  %13173 = sext i32 %13172 to i64
  %13174 = getelementptr inbounds i16, i16* %10126, i64 %13173
  %13175 = load i16, i16* %13174, align 2, !tbaa !386
  %13176 = insertelement <4 x i16> %13171, i16 %13175, i32 2
  %13177 = extractelement <4 x i32> %13161, i32 3
  %13178 = sext i32 %13177 to i64
  %13179 = getelementptr inbounds i16, i16* %10126, i64 %13178
  %13180 = load i16, i16* %13179, align 2, !tbaa !386
  %13181 = insertelement <4 x i16> %13176, i16 %13180, i32 3
  %13182 = add <4 x i32> %12570, %t344
  %13183 = extractelement <4 x i32> %13182, i32 0
  %13184 = sext i32 %13183 to i64
  %13185 = getelementptr inbounds i16, i16* %10126, i64 %13184
  %13186 = load i16, i16* %13185, align 2, !tbaa !386
  %13187 = insertelement <4 x i16> undef, i16 %13186, i32 0
  %13188 = extractelement <4 x i32> %13182, i32 1
  %13189 = sext i32 %13188 to i64
  %13190 = getelementptr inbounds i16, i16* %10126, i64 %13189
  %13191 = load i16, i16* %13190, align 2, !tbaa !386
  %13192 = insertelement <4 x i16> %13187, i16 %13191, i32 1
  %13193 = extractelement <4 x i32> %13182, i32 2
  %13194 = sext i32 %13193 to i64
  %13195 = getelementptr inbounds i16, i16* %10126, i64 %13194
  %13196 = load i16, i16* %13195, align 2, !tbaa !386
  %13197 = insertelement <4 x i16> %13192, i16 %13196, i32 2
  %13198 = extractelement <4 x i32> %13182, i32 3
  %13199 = sext i32 %13198 to i64
  %13200 = getelementptr inbounds i16, i16* %10126, i64 %13199
  %13201 = load i16, i16* %13200, align 2, !tbaa !386
  %13202 = insertelement <4 x i16> %13197, i16 %13201, i32 3
  %13203 = add <4 x i32> %12576, %t344
  %13204 = extractelement <4 x i32> %13203, i32 0
  %13205 = sext i32 %13204 to i64
  %13206 = getelementptr inbounds i16, i16* %10126, i64 %13205
  %13207 = load i16, i16* %13206, align 2, !tbaa !386
  %13208 = insertelement <4 x i16> undef, i16 %13207, i32 0
  %13209 = extractelement <4 x i32> %13203, i32 1
  %13210 = sext i32 %13209 to i64
  %13211 = getelementptr inbounds i16, i16* %10126, i64 %13210
  %13212 = load i16, i16* %13211, align 2, !tbaa !386
  %13213 = insertelement <4 x i16> %13208, i16 %13212, i32 1
  %13214 = extractelement <4 x i32> %13203, i32 2
  %13215 = sext i32 %13214 to i64
  %13216 = getelementptr inbounds i16, i16* %10126, i64 %13215
  %13217 = load i16, i16* %13216, align 2, !tbaa !386
  %13218 = insertelement <4 x i16> %13213, i16 %13217, i32 2
  %13219 = extractelement <4 x i32> %13203, i32 3
  %13220 = sext i32 %13219 to i64
  %13221 = getelementptr inbounds i16, i16* %10126, i64 %13220
  %13222 = load i16, i16* %13221, align 2, !tbaa !386
  %13223 = insertelement <4 x i16> %13218, i16 %13222, i32 3
  %13224 = add <4 x i32> %12582, %t344
  %13225 = extractelement <4 x i32> %13224, i32 0
  %13226 = sext i32 %13225 to i64
  %13227 = getelementptr inbounds i16, i16* %10126, i64 %13226
  %13228 = load i16, i16* %13227, align 2, !tbaa !386
  %13229 = insertelement <4 x i16> undef, i16 %13228, i32 0
  %13230 = extractelement <4 x i32> %13224, i32 1
  %13231 = sext i32 %13230 to i64
  %13232 = getelementptr inbounds i16, i16* %10126, i64 %13231
  %13233 = load i16, i16* %13232, align 2, !tbaa !386
  %13234 = insertelement <4 x i16> %13229, i16 %13233, i32 1
  %13235 = extractelement <4 x i32> %13224, i32 2
  %13236 = sext i32 %13235 to i64
  %13237 = getelementptr inbounds i16, i16* %10126, i64 %13236
  %13238 = load i16, i16* %13237, align 2, !tbaa !386
  %13239 = insertelement <4 x i16> %13234, i16 %13238, i32 2
  %13240 = extractelement <4 x i32> %13224, i32 3
  %13241 = sext i32 %13240 to i64
  %13242 = getelementptr inbounds i16, i16* %10126, i64 %13241
  %13243 = load i16, i16* %13242, align 2, !tbaa !386
  %13244 = insertelement <4 x i16> %13239, i16 %13243, i32 3
  %13245 = add <4 x i32> %12588, %t344
  %13246 = extractelement <4 x i32> %13245, i32 0
  %13247 = sext i32 %13246 to i64
  %13248 = getelementptr inbounds i16, i16* %10126, i64 %13247
  %13249 = load i16, i16* %13248, align 2, !tbaa !386
  %13250 = insertelement <4 x i16> undef, i16 %13249, i32 0
  %13251 = extractelement <4 x i32> %13245, i32 1
  %13252 = sext i32 %13251 to i64
  %13253 = getelementptr inbounds i16, i16* %10126, i64 %13252
  %13254 = load i16, i16* %13253, align 2, !tbaa !386
  %13255 = insertelement <4 x i16> %13250, i16 %13254, i32 1
  %13256 = extractelement <4 x i32> %13245, i32 2
  %13257 = sext i32 %13256 to i64
  %13258 = getelementptr inbounds i16, i16* %10126, i64 %13257
  %13259 = load i16, i16* %13258, align 2, !tbaa !386
  %13260 = insertelement <4 x i16> %13255, i16 %13259, i32 2
  %13261 = extractelement <4 x i32> %13245, i32 3
  %13262 = sext i32 %13261 to i64
  %13263 = getelementptr inbounds i16, i16* %10126, i64 %13262
  %13264 = load i16, i16* %13263, align 2, !tbaa !386
  %13265 = insertelement <4 x i16> %13260, i16 %13264, i32 3
  %13266 = add <4 x i32> %12594, %t344
  %13267 = extractelement <4 x i32> %13266, i32 0
  %13268 = sext i32 %13267 to i64
  %13269 = getelementptr inbounds i16, i16* %10126, i64 %13268
  %13270 = load i16, i16* %13269, align 2, !tbaa !386
  %13271 = insertelement <4 x i16> undef, i16 %13270, i32 0
  %13272 = extractelement <4 x i32> %13266, i32 1
  %13273 = sext i32 %13272 to i64
  %13274 = getelementptr inbounds i16, i16* %10126, i64 %13273
  %13275 = load i16, i16* %13274, align 2, !tbaa !386
  %13276 = insertelement <4 x i16> %13271, i16 %13275, i32 1
  %13277 = extractelement <4 x i32> %13266, i32 2
  %13278 = sext i32 %13277 to i64
  %13279 = getelementptr inbounds i16, i16* %10126, i64 %13278
  %13280 = load i16, i16* %13279, align 2, !tbaa !386
  %13281 = insertelement <4 x i16> %13276, i16 %13280, i32 2
  %13282 = extractelement <4 x i32> %13266, i32 3
  %13283 = sext i32 %13282 to i64
  %13284 = getelementptr inbounds i16, i16* %10126, i64 %13283
  %13285 = load i16, i16* %13284, align 2, !tbaa !386
  %13286 = insertelement <4 x i16> %13281, i16 %13285, i32 3
  %13287 = add <4 x i32> %12600, %t344
  %13288 = extractelement <4 x i32> %13287, i32 0
  %13289 = sext i32 %13288 to i64
  %13290 = getelementptr inbounds i16, i16* %10126, i64 %13289
  %13291 = load i16, i16* %13290, align 2, !tbaa !386
  %13292 = insertelement <4 x i16> undef, i16 %13291, i32 0
  %13293 = extractelement <4 x i32> %13287, i32 1
  %13294 = sext i32 %13293 to i64
  %13295 = getelementptr inbounds i16, i16* %10126, i64 %13294
  %13296 = load i16, i16* %13295, align 2, !tbaa !386
  %13297 = insertelement <4 x i16> %13292, i16 %13296, i32 1
  %13298 = extractelement <4 x i32> %13287, i32 2
  %13299 = sext i32 %13298 to i64
  %13300 = getelementptr inbounds i16, i16* %10126, i64 %13299
  %13301 = load i16, i16* %13300, align 2, !tbaa !386
  %13302 = insertelement <4 x i16> %13297, i16 %13301, i32 2
  %13303 = extractelement <4 x i32> %13287, i32 3
  %13304 = sext i32 %13303 to i64
  %13305 = getelementptr inbounds i16, i16* %10126, i64 %13304
  %13306 = load i16, i16* %13305, align 2, !tbaa !386
  %13307 = insertelement <4 x i16> %13302, i16 %13306, i32 3
  %13308 = add <4 x i32> %12606, %t344
  %13309 = extractelement <4 x i32> %13308, i32 0
  %13310 = sext i32 %13309 to i64
  %13311 = getelementptr inbounds i16, i16* %10126, i64 %13310
  %13312 = load i16, i16* %13311, align 2, !tbaa !386
  %13313 = insertelement <4 x i16> undef, i16 %13312, i32 0
  %13314 = extractelement <4 x i32> %13308, i32 1
  %13315 = sext i32 %13314 to i64
  %13316 = getelementptr inbounds i16, i16* %10126, i64 %13315
  %13317 = load i16, i16* %13316, align 2, !tbaa !386
  %13318 = insertelement <4 x i16> %13313, i16 %13317, i32 1
  %13319 = extractelement <4 x i32> %13308, i32 2
  %13320 = sext i32 %13319 to i64
  %13321 = getelementptr inbounds i16, i16* %10126, i64 %13320
  %13322 = load i16, i16* %13321, align 2, !tbaa !386
  %13323 = insertelement <4 x i16> %13318, i16 %13322, i32 2
  %13324 = extractelement <4 x i32> %13308, i32 3
  %13325 = sext i32 %13324 to i64
  %13326 = getelementptr inbounds i16, i16* %10126, i64 %13325
  %13327 = load i16, i16* %13326, align 2, !tbaa !386
  %13328 = insertelement <4 x i16> %13323, i16 %13327, i32 3
  %13329 = add <4 x i16> %13223, %13202
  %13330 = add <4 x i16> %13307, %13286
  %13331 = add <4 x i16> %13130, %13132
  %13332 = add <4 x i16> %13331, %13181
  %13333 = add <4 x i16> %13332, %13329
  %13334 = add <4 x i16> %13333, %13244
  %13335 = add <4 x i16> %13329, %13181
  %13336 = add <4 x i16> %13335, %13265
  %13337 = add <4 x i16> %13336, %13330
  %13338 = add <4 x i16> %13337, %13328
  %13339 = shufflevector <4 x i16> %13334, <4 x i16> %13338, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %13340 = zext <8 x i16> %13339 to <8 x i32>
  %13341 = mul nuw nsw <8 x i32> %13340, <i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362>
  %13342 = shufflevector <8 x i32> %13341, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %13343 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %13342, i32 16)
  %13344 = shufflevector <8 x i32> %13341, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %13345 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %13344, i32 16)
  %13346 = shufflevector <4 x i16> %13343, <4 x i16> %13345, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %13347 = add <4 x i16> %13332, %13202
  %13348 = add <4 x i16> %13347, %13223
  %13349 = add <4 x i16> %13348, %13244
  %13350 = add <4 x i16> %13336, %13286
  %13351 = add <4 x i16> %13350, %13307
  %13352 = add <4 x i16> %13351, %13328
  %13353 = shufflevector <4 x i16> %13349, <4 x i16> %13352, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %13354 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %13346, <8 x i16> %13353) #11
  %13355 = lshr <8 x i16> %13354, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %13356 = add <4 x i32> %12612, %t344
  %13357 = extractelement <4 x i32> %13356, i32 0
  %13358 = sext i32 %13357 to i64
  %13359 = getelementptr inbounds i16, i16* %10126, i64 %13358
  %13360 = load i16, i16* %13359, align 2, !tbaa !386
  %13361 = insertelement <4 x i16> undef, i16 %13360, i32 0
  %13362 = extractelement <4 x i32> %13356, i32 1
  %13363 = sext i32 %13362 to i64
  %13364 = getelementptr inbounds i16, i16* %10126, i64 %13363
  %13365 = load i16, i16* %13364, align 2, !tbaa !386
  %13366 = insertelement <4 x i16> %13361, i16 %13365, i32 1
  %13367 = extractelement <4 x i32> %13356, i32 2
  %13368 = sext i32 %13367 to i64
  %13369 = getelementptr inbounds i16, i16* %10126, i64 %13368
  %13370 = load i16, i16* %13369, align 2, !tbaa !386
  %13371 = insertelement <4 x i16> %13366, i16 %13370, i32 2
  %13372 = extractelement <4 x i32> %13356, i32 3
  %13373 = sext i32 %13372 to i64
  %13374 = getelementptr inbounds i16, i16* %10126, i64 %13373
  %13375 = load i16, i16* %13374, align 2, !tbaa !386
  %13376 = insertelement <4 x i16> %13371, i16 %13375, i32 3
  %13377 = add <4 x i32> %12618, %t344
  %13378 = extractelement <4 x i32> %13377, i32 0
  %13379 = sext i32 %13378 to i64
  %13380 = getelementptr inbounds i16, i16* %10126, i64 %13379
  %13381 = load i16, i16* %13380, align 2, !tbaa !386
  %13382 = insertelement <4 x i16> undef, i16 %13381, i32 0
  %13383 = extractelement <4 x i32> %13377, i32 1
  %13384 = sext i32 %13383 to i64
  %13385 = getelementptr inbounds i16, i16* %10126, i64 %13384
  %13386 = load i16, i16* %13385, align 2, !tbaa !386
  %13387 = insertelement <4 x i16> %13382, i16 %13386, i32 1
  %13388 = extractelement <4 x i32> %13377, i32 2
  %13389 = sext i32 %13388 to i64
  %13390 = getelementptr inbounds i16, i16* %10126, i64 %13389
  %13391 = load i16, i16* %13390, align 2, !tbaa !386
  %13392 = insertelement <4 x i16> %13387, i16 %13391, i32 2
  %13393 = extractelement <4 x i32> %13377, i32 3
  %13394 = sext i32 %13393 to i64
  %13395 = getelementptr inbounds i16, i16* %10126, i64 %13394
  %13396 = load i16, i16* %13395, align 2, !tbaa !386
  %13397 = insertelement <4 x i16> %13392, i16 %13396, i32 3
  %13398 = add <4 x i32> %12624, %t344
  %13399 = extractelement <4 x i32> %13398, i32 0
  %13400 = sext i32 %13399 to i64
  %13401 = getelementptr inbounds i16, i16* %10126, i64 %13400
  %13402 = load i16, i16* %13401, align 2, !tbaa !386
  %13403 = insertelement <4 x i16> undef, i16 %13402, i32 0
  %13404 = extractelement <4 x i32> %13398, i32 1
  %13405 = sext i32 %13404 to i64
  %13406 = getelementptr inbounds i16, i16* %10126, i64 %13405
  %13407 = load i16, i16* %13406, align 2, !tbaa !386
  %13408 = insertelement <4 x i16> %13403, i16 %13407, i32 1
  %13409 = extractelement <4 x i32> %13398, i32 2
  %13410 = sext i32 %13409 to i64
  %13411 = getelementptr inbounds i16, i16* %10126, i64 %13410
  %13412 = load i16, i16* %13411, align 2, !tbaa !386
  %13413 = insertelement <4 x i16> %13408, i16 %13412, i32 2
  %13414 = extractelement <4 x i32> %13398, i32 3
  %13415 = sext i32 %13414 to i64
  %13416 = getelementptr inbounds i16, i16* %10126, i64 %13415
  %13417 = load i16, i16* %13416, align 2, !tbaa !386
  %13418 = insertelement <4 x i16> %13413, i16 %13417, i32 3
  %13419 = add <4 x i32> %12630, %t344
  %13420 = extractelement <4 x i32> %13419, i32 0
  %13421 = sext i32 %13420 to i64
  %13422 = getelementptr inbounds i16, i16* %10126, i64 %13421
  %13423 = load i16, i16* %13422, align 2, !tbaa !386
  %13424 = insertelement <4 x i16> undef, i16 %13423, i32 0
  %13425 = extractelement <4 x i32> %13419, i32 1
  %13426 = sext i32 %13425 to i64
  %13427 = getelementptr inbounds i16, i16* %10126, i64 %13426
  %13428 = load i16, i16* %13427, align 2, !tbaa !386
  %13429 = insertelement <4 x i16> %13424, i16 %13428, i32 1
  %13430 = extractelement <4 x i32> %13419, i32 2
  %13431 = sext i32 %13430 to i64
  %13432 = getelementptr inbounds i16, i16* %10126, i64 %13431
  %13433 = load i16, i16* %13432, align 2, !tbaa !386
  %13434 = insertelement <4 x i16> %13429, i16 %13433, i32 2
  %13435 = extractelement <4 x i32> %13419, i32 3
  %13436 = sext i32 %13435 to i64
  %13437 = getelementptr inbounds i16, i16* %10126, i64 %13436
  %13438 = load i16, i16* %13437, align 2, !tbaa !386
  %13439 = insertelement <4 x i16> %13434, i16 %13438, i32 3
  %13440 = add <4 x i32> %12636, %t344
  %13441 = extractelement <4 x i32> %13440, i32 0
  %13442 = sext i32 %13441 to i64
  %13443 = getelementptr inbounds i16, i16* %10126, i64 %13442
  %13444 = load i16, i16* %13443, align 2, !tbaa !386
  %13445 = insertelement <4 x i16> undef, i16 %13444, i32 0
  %13446 = extractelement <4 x i32> %13440, i32 1
  %13447 = sext i32 %13446 to i64
  %13448 = getelementptr inbounds i16, i16* %10126, i64 %13447
  %13449 = load i16, i16* %13448, align 2, !tbaa !386
  %13450 = insertelement <4 x i16> %13445, i16 %13449, i32 1
  %13451 = extractelement <4 x i32> %13440, i32 2
  %13452 = sext i32 %13451 to i64
  %13453 = getelementptr inbounds i16, i16* %10126, i64 %13452
  %13454 = load i16, i16* %13453, align 2, !tbaa !386
  %13455 = insertelement <4 x i16> %13450, i16 %13454, i32 2
  %13456 = extractelement <4 x i32> %13440, i32 3
  %13457 = sext i32 %13456 to i64
  %13458 = getelementptr inbounds i16, i16* %10126, i64 %13457
  %13459 = load i16, i16* %13458, align 2, !tbaa !386
  %13460 = insertelement <4 x i16> %13455, i16 %13459, i32 3
  %13461 = add <4 x i32> %12642, %t344
  %13462 = extractelement <4 x i32> %13461, i32 0
  %13463 = sext i32 %13462 to i64
  %13464 = getelementptr inbounds i16, i16* %10126, i64 %13463
  %13465 = load i16, i16* %13464, align 2, !tbaa !386
  %13466 = insertelement <4 x i16> undef, i16 %13465, i32 0
  %13467 = extractelement <4 x i32> %13461, i32 1
  %13468 = sext i32 %13467 to i64
  %13469 = getelementptr inbounds i16, i16* %10126, i64 %13468
  %13470 = load i16, i16* %13469, align 2, !tbaa !386
  %13471 = insertelement <4 x i16> %13466, i16 %13470, i32 1
  %13472 = extractelement <4 x i32> %13461, i32 2
  %13473 = sext i32 %13472 to i64
  %13474 = getelementptr inbounds i16, i16* %10126, i64 %13473
  %13475 = load i16, i16* %13474, align 2, !tbaa !386
  %13476 = insertelement <4 x i16> %13471, i16 %13475, i32 2
  %13477 = extractelement <4 x i32> %13461, i32 3
  %13478 = sext i32 %13477 to i64
  %13479 = getelementptr inbounds i16, i16* %10126, i64 %13478
  %13480 = load i16, i16* %13479, align 2, !tbaa !386
  %13481 = insertelement <4 x i16> %13476, i16 %13480, i32 3
  %13482 = add <4 x i32> %12648, %t344
  %13483 = extractelement <4 x i32> %13482, i32 0
  %13484 = sext i32 %13483 to i64
  %13485 = getelementptr inbounds i16, i16* %10126, i64 %13484
  %13486 = load i16, i16* %13485, align 2, !tbaa !386
  %13487 = insertelement <4 x i16> undef, i16 %13486, i32 0
  %13488 = extractelement <4 x i32> %13482, i32 1
  %13489 = sext i32 %13488 to i64
  %13490 = getelementptr inbounds i16, i16* %10126, i64 %13489
  %13491 = load i16, i16* %13490, align 2, !tbaa !386
  %13492 = insertelement <4 x i16> %13487, i16 %13491, i32 1
  %13493 = extractelement <4 x i32> %13482, i32 2
  %13494 = sext i32 %13493 to i64
  %13495 = getelementptr inbounds i16, i16* %10126, i64 %13494
  %13496 = load i16, i16* %13495, align 2, !tbaa !386
  %13497 = insertelement <4 x i16> %13492, i16 %13496, i32 2
  %13498 = extractelement <4 x i32> %13482, i32 3
  %13499 = sext i32 %13498 to i64
  %13500 = getelementptr inbounds i16, i16* %10126, i64 %13499
  %13501 = load i16, i16* %13500, align 2, !tbaa !386
  %13502 = insertelement <4 x i16> %13497, i16 %13501, i32 3
  %13503 = add <4 x i32> %12654, %t344
  %13504 = extractelement <4 x i32> %13503, i32 0
  %13505 = sext i32 %13504 to i64
  %13506 = getelementptr inbounds i16, i16* %10126, i64 %13505
  %13507 = load i16, i16* %13506, align 2, !tbaa !386
  %13508 = insertelement <4 x i16> undef, i16 %13507, i32 0
  %13509 = extractelement <4 x i32> %13503, i32 1
  %13510 = sext i32 %13509 to i64
  %13511 = getelementptr inbounds i16, i16* %10126, i64 %13510
  %13512 = load i16, i16* %13511, align 2, !tbaa !386
  %13513 = insertelement <4 x i16> %13508, i16 %13512, i32 1
  %13514 = extractelement <4 x i32> %13503, i32 2
  %13515 = sext i32 %13514 to i64
  %13516 = getelementptr inbounds i16, i16* %10126, i64 %13515
  %13517 = load i16, i16* %13516, align 2, !tbaa !386
  %13518 = insertelement <4 x i16> %13513, i16 %13517, i32 2
  %13519 = extractelement <4 x i32> %13503, i32 3
  %13520 = sext i32 %13519 to i64
  %13521 = getelementptr inbounds i16, i16* %10126, i64 %13520
  %13522 = load i16, i16* %13521, align 2, !tbaa !386
  %13523 = insertelement <4 x i16> %13518, i16 %13522, i32 3
  %13524 = add <4 x i16> %13418, %13397
  %13525 = add <4 x i16> %13502, %13481
  %13526 = add <4 x i16> %13328, %13330
  %13527 = add <4 x i16> %13526, %13376
  %13528 = add <4 x i16> %13527, %13524
  %13529 = add <4 x i16> %13528, %13439
  %13530 = add <4 x i16> %13524, %13376
  %13531 = add <4 x i16> %13530, %13460
  %13532 = add <4 x i16> %13531, %13525
  %13533 = add <4 x i16> %13532, %13523
  %13534 = shufflevector <4 x i16> %13529, <4 x i16> %13533, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %13535 = zext <8 x i16> %13534 to <8 x i32>
  %13536 = mul nuw nsw <8 x i32> %13535, <i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362>
  %13537 = shufflevector <8 x i32> %13536, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %13538 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %13537, i32 16)
  %13539 = shufflevector <8 x i32> %13536, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %13540 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %13539, i32 16)
  %13541 = shufflevector <4 x i16> %13538, <4 x i16> %13540, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %13542 = add <4 x i16> %13527, %13397
  %13543 = add <4 x i16> %13542, %13418
  %13544 = add <4 x i16> %13543, %13439
  %13545 = add <4 x i16> %13531, %13481
  %13546 = add <4 x i16> %13545, %13502
  %13547 = add <4 x i16> %13546, %13523
  %13548 = shufflevector <4 x i16> %13544, <4 x i16> %13547, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %13549 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %13541, <8 x i16> %13548) #11
  %13550 = lshr <8 x i16> %13549, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %13551 = add <4 x i32> %12660, %t344
  %13552 = extractelement <4 x i32> %13551, i32 0
  %13553 = sext i32 %13552 to i64
  %13554 = getelementptr inbounds i16, i16* %10126, i64 %13553
  %13555 = load i16, i16* %13554, align 2, !tbaa !386
  %13556 = insertelement <4 x i16> undef, i16 %13555, i32 0
  %13557 = extractelement <4 x i32> %13551, i32 1
  %13558 = sext i32 %13557 to i64
  %13559 = getelementptr inbounds i16, i16* %10126, i64 %13558
  %13560 = load i16, i16* %13559, align 2, !tbaa !386
  %13561 = insertelement <4 x i16> %13556, i16 %13560, i32 1
  %13562 = extractelement <4 x i32> %13551, i32 2
  %13563 = sext i32 %13562 to i64
  %13564 = getelementptr inbounds i16, i16* %10126, i64 %13563
  %13565 = load i16, i16* %13564, align 2, !tbaa !386
  %13566 = insertelement <4 x i16> %13561, i16 %13565, i32 2
  %13567 = extractelement <4 x i32> %13551, i32 3
  %13568 = sext i32 %13567 to i64
  %13569 = getelementptr inbounds i16, i16* %10126, i64 %13568
  %13570 = load i16, i16* %13569, align 2, !tbaa !386
  %13571 = insertelement <4 x i16> %13566, i16 %13570, i32 3
  %13572 = add <4 x i32> %12666, %t344
  %13573 = extractelement <4 x i32> %13572, i32 0
  %13574 = sext i32 %13573 to i64
  %13575 = getelementptr inbounds i16, i16* %10126, i64 %13574
  %13576 = load i16, i16* %13575, align 2, !tbaa !386
  %13577 = insertelement <4 x i16> undef, i16 %13576, i32 0
  %13578 = extractelement <4 x i32> %13572, i32 1
  %13579 = sext i32 %13578 to i64
  %13580 = getelementptr inbounds i16, i16* %10126, i64 %13579
  %13581 = load i16, i16* %13580, align 2, !tbaa !386
  %13582 = insertelement <4 x i16> %13577, i16 %13581, i32 1
  %13583 = extractelement <4 x i32> %13572, i32 2
  %13584 = sext i32 %13583 to i64
  %13585 = getelementptr inbounds i16, i16* %10126, i64 %13584
  %13586 = load i16, i16* %13585, align 2, !tbaa !386
  %13587 = insertelement <4 x i16> %13582, i16 %13586, i32 2
  %13588 = extractelement <4 x i32> %13572, i32 3
  %13589 = sext i32 %13588 to i64
  %13590 = getelementptr inbounds i16, i16* %10126, i64 %13589
  %13591 = load i16, i16* %13590, align 2, !tbaa !386
  %13592 = insertelement <4 x i16> %13587, i16 %13591, i32 3
  %13593 = add <4 x i32> %12672, %t344
  %13594 = extractelement <4 x i32> %13593, i32 0
  %13595 = sext i32 %13594 to i64
  %13596 = getelementptr inbounds i16, i16* %10126, i64 %13595
  %13597 = load i16, i16* %13596, align 2, !tbaa !386
  %13598 = insertelement <4 x i16> undef, i16 %13597, i32 0
  %13599 = extractelement <4 x i32> %13593, i32 1
  %13600 = sext i32 %13599 to i64
  %13601 = getelementptr inbounds i16, i16* %10126, i64 %13600
  %13602 = load i16, i16* %13601, align 2, !tbaa !386
  %13603 = insertelement <4 x i16> %13598, i16 %13602, i32 1
  %13604 = extractelement <4 x i32> %13593, i32 2
  %13605 = sext i32 %13604 to i64
  %13606 = getelementptr inbounds i16, i16* %10126, i64 %13605
  %13607 = load i16, i16* %13606, align 2, !tbaa !386
  %13608 = insertelement <4 x i16> %13603, i16 %13607, i32 2
  %13609 = extractelement <4 x i32> %13593, i32 3
  %13610 = sext i32 %13609 to i64
  %13611 = getelementptr inbounds i16, i16* %10126, i64 %13610
  %13612 = load i16, i16* %13611, align 2, !tbaa !386
  %13613 = insertelement <4 x i16> %13608, i16 %13612, i32 3
  %13614 = add <4 x i32> %12678, %t344
  %13615 = extractelement <4 x i32> %13614, i32 0
  %13616 = sext i32 %13615 to i64
  %13617 = getelementptr inbounds i16, i16* %10126, i64 %13616
  %13618 = load i16, i16* %13617, align 2, !tbaa !386
  %13619 = insertelement <4 x i16> undef, i16 %13618, i32 0
  %13620 = extractelement <4 x i32> %13614, i32 1
  %13621 = sext i32 %13620 to i64
  %13622 = getelementptr inbounds i16, i16* %10126, i64 %13621
  %13623 = load i16, i16* %13622, align 2, !tbaa !386
  %13624 = insertelement <4 x i16> %13619, i16 %13623, i32 1
  %13625 = extractelement <4 x i32> %13614, i32 2
  %13626 = sext i32 %13625 to i64
  %13627 = getelementptr inbounds i16, i16* %10126, i64 %13626
  %13628 = load i16, i16* %13627, align 2, !tbaa !386
  %13629 = insertelement <4 x i16> %13624, i16 %13628, i32 2
  %13630 = extractelement <4 x i32> %13614, i32 3
  %13631 = sext i32 %13630 to i64
  %13632 = getelementptr inbounds i16, i16* %10126, i64 %13631
  %13633 = load i16, i16* %13632, align 2, !tbaa !386
  %13634 = insertelement <4 x i16> %13629, i16 %13633, i32 3
  %13635 = add <4 x i32> %12684, %t344
  %13636 = extractelement <4 x i32> %13635, i32 0
  %13637 = sext i32 %13636 to i64
  %13638 = getelementptr inbounds i16, i16* %10126, i64 %13637
  %13639 = load i16, i16* %13638, align 2, !tbaa !386
  %13640 = insertelement <4 x i16> undef, i16 %13639, i32 0
  %13641 = extractelement <4 x i32> %13635, i32 1
  %13642 = sext i32 %13641 to i64
  %13643 = getelementptr inbounds i16, i16* %10126, i64 %13642
  %13644 = load i16, i16* %13643, align 2, !tbaa !386
  %13645 = insertelement <4 x i16> %13640, i16 %13644, i32 1
  %13646 = extractelement <4 x i32> %13635, i32 2
  %13647 = sext i32 %13646 to i64
  %13648 = getelementptr inbounds i16, i16* %10126, i64 %13647
  %13649 = load i16, i16* %13648, align 2, !tbaa !386
  %13650 = insertelement <4 x i16> %13645, i16 %13649, i32 2
  %13651 = extractelement <4 x i32> %13635, i32 3
  %13652 = sext i32 %13651 to i64
  %13653 = getelementptr inbounds i16, i16* %10126, i64 %13652
  %13654 = load i16, i16* %13653, align 2, !tbaa !386
  %13655 = insertelement <4 x i16> %13650, i16 %13654, i32 3
  %13656 = add <4 x i32> %12690, %t344
  %13657 = extractelement <4 x i32> %13656, i32 0
  %13658 = sext i32 %13657 to i64
  %13659 = getelementptr inbounds i16, i16* %10126, i64 %13658
  %13660 = load i16, i16* %13659, align 2, !tbaa !386
  %13661 = insertelement <4 x i16> undef, i16 %13660, i32 0
  %13662 = extractelement <4 x i32> %13656, i32 1
  %13663 = sext i32 %13662 to i64
  %13664 = getelementptr inbounds i16, i16* %10126, i64 %13663
  %13665 = load i16, i16* %13664, align 2, !tbaa !386
  %13666 = insertelement <4 x i16> %13661, i16 %13665, i32 1
  %13667 = extractelement <4 x i32> %13656, i32 2
  %13668 = sext i32 %13667 to i64
  %13669 = getelementptr inbounds i16, i16* %10126, i64 %13668
  %13670 = load i16, i16* %13669, align 2, !tbaa !386
  %13671 = insertelement <4 x i16> %13666, i16 %13670, i32 2
  %13672 = extractelement <4 x i32> %13656, i32 3
  %13673 = sext i32 %13672 to i64
  %13674 = getelementptr inbounds i16, i16* %10126, i64 %13673
  %13675 = load i16, i16* %13674, align 2, !tbaa !386
  %13676 = insertelement <4 x i16> %13671, i16 %13675, i32 3
  %13677 = add <4 x i32> %12696, %t344
  %13678 = extractelement <4 x i32> %13677, i32 0
  %13679 = sext i32 %13678 to i64
  %13680 = getelementptr inbounds i16, i16* %10126, i64 %13679
  %13681 = load i16, i16* %13680, align 2, !tbaa !386
  %13682 = insertelement <4 x i16> undef, i16 %13681, i32 0
  %13683 = extractelement <4 x i32> %13677, i32 1
  %13684 = sext i32 %13683 to i64
  %13685 = getelementptr inbounds i16, i16* %10126, i64 %13684
  %13686 = load i16, i16* %13685, align 2, !tbaa !386
  %13687 = insertelement <4 x i16> %13682, i16 %13686, i32 1
  %13688 = extractelement <4 x i32> %13677, i32 2
  %13689 = sext i32 %13688 to i64
  %13690 = getelementptr inbounds i16, i16* %10126, i64 %13689
  %13691 = load i16, i16* %13690, align 2, !tbaa !386
  %13692 = insertelement <4 x i16> %13687, i16 %13691, i32 2
  %13693 = extractelement <4 x i32> %13677, i32 3
  %13694 = sext i32 %13693 to i64
  %13695 = getelementptr inbounds i16, i16* %10126, i64 %13694
  %13696 = load i16, i16* %13695, align 2, !tbaa !386
  %13697 = insertelement <4 x i16> %13692, i16 %13696, i32 3
  %13698 = add <4 x i32> %12702, %t344
  %13699 = extractelement <4 x i32> %13698, i32 0
  %13700 = sext i32 %13699 to i64
  %13701 = getelementptr inbounds i16, i16* %10126, i64 %13700
  %13702 = load i16, i16* %13701, align 2, !tbaa !386
  %13703 = insertelement <4 x i16> undef, i16 %13702, i32 0
  %13704 = extractelement <4 x i32> %13698, i32 1
  %13705 = sext i32 %13704 to i64
  %13706 = getelementptr inbounds i16, i16* %10126, i64 %13705
  %13707 = load i16, i16* %13706, align 2, !tbaa !386
  %13708 = insertelement <4 x i16> %13703, i16 %13707, i32 1
  %13709 = extractelement <4 x i32> %13698, i32 2
  %13710 = sext i32 %13709 to i64
  %13711 = getelementptr inbounds i16, i16* %10126, i64 %13710
  %13712 = load i16, i16* %13711, align 2, !tbaa !386
  %13713 = insertelement <4 x i16> %13708, i16 %13712, i32 2
  %13714 = extractelement <4 x i32> %13698, i32 3
  %13715 = sext i32 %13714 to i64
  %13716 = getelementptr inbounds i16, i16* %10126, i64 %13715
  %13717 = load i16, i16* %13716, align 2, !tbaa !386
  %13718 = insertelement <4 x i16> %13713, i16 %13717, i32 3
  %13719 = add <4 x i16> %13613, %13592
  %13720 = add <4 x i16> %13697, %13676
  %13721 = add <4 x i16> %13523, %13525
  %13722 = add <4 x i16> %13721, %13571
  %13723 = add <4 x i16> %13722, %13719
  %13724 = add <4 x i16> %13723, %13634
  %13725 = add <4 x i16> %13719, %13571
  %13726 = add <4 x i16> %13725, %13655
  %13727 = add <4 x i16> %13726, %13720
  %13728 = add <4 x i16> %13727, %13718
  %13729 = shufflevector <4 x i16> %13724, <4 x i16> %13728, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %13730 = zext <8 x i16> %13729 to <8 x i32>
  %13731 = mul nuw nsw <8 x i32> %13730, <i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362>
  %13732 = shufflevector <8 x i32> %13731, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %13733 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %13732, i32 16)
  %13734 = shufflevector <8 x i32> %13731, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %13735 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %13734, i32 16)
  %13736 = shufflevector <4 x i16> %13733, <4 x i16> %13735, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %13737 = add <4 x i16> %13722, %13592
  %13738 = add <4 x i16> %13737, %13613
  %13739 = add <4 x i16> %13738, %13634
  %13740 = add <4 x i16> %13726, %13676
  %13741 = add <4 x i16> %13740, %13697
  %13742 = add <4 x i16> %13741, %13718
  %13743 = shufflevector <4 x i16> %13739, <4 x i16> %13742, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %13744 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %13736, <8 x i16> %13743) #11
  %13745 = lshr <8 x i16> %13744, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %13746 = add <4 x i32> %12708, %t344
  %13747 = extractelement <4 x i32> %13746, i32 0
  %13748 = sext i32 %13747 to i64
  %13749 = getelementptr inbounds i16, i16* %10126, i64 %13748
  %13750 = load i16, i16* %13749, align 2, !tbaa !386
  %13751 = insertelement <4 x i16> undef, i16 %13750, i32 0
  %13752 = extractelement <4 x i32> %13746, i32 1
  %13753 = sext i32 %13752 to i64
  %13754 = getelementptr inbounds i16, i16* %10126, i64 %13753
  %13755 = load i16, i16* %13754, align 2, !tbaa !386
  %13756 = insertelement <4 x i16> %13751, i16 %13755, i32 1
  %13757 = extractelement <4 x i32> %13746, i32 2
  %13758 = sext i32 %13757 to i64
  %13759 = getelementptr inbounds i16, i16* %10126, i64 %13758
  %13760 = load i16, i16* %13759, align 2, !tbaa !386
  %13761 = insertelement <4 x i16> %13756, i16 %13760, i32 2
  %13762 = extractelement <4 x i32> %13746, i32 3
  %13763 = sext i32 %13762 to i64
  %13764 = getelementptr inbounds i16, i16* %10126, i64 %13763
  %13765 = load i16, i16* %13764, align 2, !tbaa !386
  %13766 = insertelement <4 x i16> %13761, i16 %13765, i32 3
  %13767 = add <4 x i32> %12714, %t344
  %13768 = extractelement <4 x i32> %13767, i32 0
  %13769 = sext i32 %13768 to i64
  %13770 = getelementptr inbounds i16, i16* %10126, i64 %13769
  %13771 = load i16, i16* %13770, align 2, !tbaa !386
  %13772 = insertelement <4 x i16> undef, i16 %13771, i32 0
  %13773 = extractelement <4 x i32> %13767, i32 1
  %13774 = sext i32 %13773 to i64
  %13775 = getelementptr inbounds i16, i16* %10126, i64 %13774
  %13776 = load i16, i16* %13775, align 2, !tbaa !386
  %13777 = insertelement <4 x i16> %13772, i16 %13776, i32 1
  %13778 = extractelement <4 x i32> %13767, i32 2
  %13779 = sext i32 %13778 to i64
  %13780 = getelementptr inbounds i16, i16* %10126, i64 %13779
  %13781 = load i16, i16* %13780, align 2, !tbaa !386
  %13782 = insertelement <4 x i16> %13777, i16 %13781, i32 2
  %13783 = extractelement <4 x i32> %13767, i32 3
  %13784 = sext i32 %13783 to i64
  %13785 = getelementptr inbounds i16, i16* %10126, i64 %13784
  %13786 = load i16, i16* %13785, align 2, !tbaa !386
  %13787 = insertelement <4 x i16> %13782, i16 %13786, i32 3
  %13788 = add <4 x i32> %12720, %t344
  %13789 = extractelement <4 x i32> %13788, i32 0
  %13790 = sext i32 %13789 to i64
  %13791 = getelementptr inbounds i16, i16* %10126, i64 %13790
  %13792 = load i16, i16* %13791, align 2, !tbaa !386
  %13793 = insertelement <4 x i16> undef, i16 %13792, i32 0
  %13794 = extractelement <4 x i32> %13788, i32 1
  %13795 = sext i32 %13794 to i64
  %13796 = getelementptr inbounds i16, i16* %10126, i64 %13795
  %13797 = load i16, i16* %13796, align 2, !tbaa !386
  %13798 = insertelement <4 x i16> %13793, i16 %13797, i32 1
  %13799 = extractelement <4 x i32> %13788, i32 2
  %13800 = sext i32 %13799 to i64
  %13801 = getelementptr inbounds i16, i16* %10126, i64 %13800
  %13802 = load i16, i16* %13801, align 2, !tbaa !386
  %13803 = insertelement <4 x i16> %13798, i16 %13802, i32 2
  %13804 = extractelement <4 x i32> %13788, i32 3
  %13805 = sext i32 %13804 to i64
  %13806 = getelementptr inbounds i16, i16* %10126, i64 %13805
  %13807 = load i16, i16* %13806, align 2, !tbaa !386
  %13808 = insertelement <4 x i16> %13803, i16 %13807, i32 3
  %13809 = add <4 x i32> %12726, %t344
  %13810 = extractelement <4 x i32> %13809, i32 0
  %13811 = sext i32 %13810 to i64
  %13812 = getelementptr inbounds i16, i16* %10126, i64 %13811
  %13813 = load i16, i16* %13812, align 2, !tbaa !386
  %13814 = insertelement <4 x i16> undef, i16 %13813, i32 0
  %13815 = extractelement <4 x i32> %13809, i32 1
  %13816 = sext i32 %13815 to i64
  %13817 = getelementptr inbounds i16, i16* %10126, i64 %13816
  %13818 = load i16, i16* %13817, align 2, !tbaa !386
  %13819 = insertelement <4 x i16> %13814, i16 %13818, i32 1
  %13820 = extractelement <4 x i32> %13809, i32 2
  %13821 = sext i32 %13820 to i64
  %13822 = getelementptr inbounds i16, i16* %10126, i64 %13821
  %13823 = load i16, i16* %13822, align 2, !tbaa !386
  %13824 = insertelement <4 x i16> %13819, i16 %13823, i32 2
  %13825 = extractelement <4 x i32> %13809, i32 3
  %13826 = sext i32 %13825 to i64
  %13827 = getelementptr inbounds i16, i16* %10126, i64 %13826
  %13828 = load i16, i16* %13827, align 2, !tbaa !386
  %13829 = insertelement <4 x i16> %13824, i16 %13828, i32 3
  %13830 = add <4 x i32> %12732, %t344
  %13831 = extractelement <4 x i32> %13830, i32 0
  %13832 = sext i32 %13831 to i64
  %13833 = getelementptr inbounds i16, i16* %10126, i64 %13832
  %13834 = load i16, i16* %13833, align 2, !tbaa !386
  %13835 = insertelement <4 x i16> undef, i16 %13834, i32 0
  %13836 = extractelement <4 x i32> %13830, i32 1
  %13837 = sext i32 %13836 to i64
  %13838 = getelementptr inbounds i16, i16* %10126, i64 %13837
  %13839 = load i16, i16* %13838, align 2, !tbaa !386
  %13840 = insertelement <4 x i16> %13835, i16 %13839, i32 1
  %13841 = extractelement <4 x i32> %13830, i32 2
  %13842 = sext i32 %13841 to i64
  %13843 = getelementptr inbounds i16, i16* %10126, i64 %13842
  %13844 = load i16, i16* %13843, align 2, !tbaa !386
  %13845 = insertelement <4 x i16> %13840, i16 %13844, i32 2
  %13846 = extractelement <4 x i32> %13830, i32 3
  %13847 = sext i32 %13846 to i64
  %13848 = getelementptr inbounds i16, i16* %10126, i64 %13847
  %13849 = load i16, i16* %13848, align 2, !tbaa !386
  %13850 = insertelement <4 x i16> %13845, i16 %13849, i32 3
  %13851 = add <4 x i32> %12738, %t344
  %13852 = extractelement <4 x i32> %13851, i32 0
  %13853 = sext i32 %13852 to i64
  %13854 = getelementptr inbounds i16, i16* %10126, i64 %13853
  %13855 = load i16, i16* %13854, align 2, !tbaa !386
  %13856 = insertelement <4 x i16> undef, i16 %13855, i32 0
  %13857 = extractelement <4 x i32> %13851, i32 1
  %13858 = sext i32 %13857 to i64
  %13859 = getelementptr inbounds i16, i16* %10126, i64 %13858
  %13860 = load i16, i16* %13859, align 2, !tbaa !386
  %13861 = insertelement <4 x i16> %13856, i16 %13860, i32 1
  %13862 = extractelement <4 x i32> %13851, i32 2
  %13863 = sext i32 %13862 to i64
  %13864 = getelementptr inbounds i16, i16* %10126, i64 %13863
  %13865 = load i16, i16* %13864, align 2, !tbaa !386
  %13866 = insertelement <4 x i16> %13861, i16 %13865, i32 2
  %13867 = extractelement <4 x i32> %13851, i32 3
  %13868 = sext i32 %13867 to i64
  %13869 = getelementptr inbounds i16, i16* %10126, i64 %13868
  %13870 = load i16, i16* %13869, align 2, !tbaa !386
  %13871 = insertelement <4 x i16> %13866, i16 %13870, i32 3
  %13872 = add <4 x i32> %12744, %t344
  %13873 = extractelement <4 x i32> %13872, i32 0
  %13874 = sext i32 %13873 to i64
  %13875 = getelementptr inbounds i16, i16* %10126, i64 %13874
  %13876 = load i16, i16* %13875, align 2, !tbaa !386
  %13877 = insertelement <4 x i16> undef, i16 %13876, i32 0
  %13878 = extractelement <4 x i32> %13872, i32 1
  %13879 = sext i32 %13878 to i64
  %13880 = getelementptr inbounds i16, i16* %10126, i64 %13879
  %13881 = load i16, i16* %13880, align 2, !tbaa !386
  %13882 = insertelement <4 x i16> %13877, i16 %13881, i32 1
  %13883 = extractelement <4 x i32> %13872, i32 2
  %13884 = sext i32 %13883 to i64
  %13885 = getelementptr inbounds i16, i16* %10126, i64 %13884
  %13886 = load i16, i16* %13885, align 2, !tbaa !386
  %13887 = insertelement <4 x i16> %13882, i16 %13886, i32 2
  %13888 = extractelement <4 x i32> %13872, i32 3
  %13889 = sext i32 %13888 to i64
  %13890 = getelementptr inbounds i16, i16* %10126, i64 %13889
  %13891 = load i16, i16* %13890, align 2, !tbaa !386
  %13892 = insertelement <4 x i16> %13887, i16 %13891, i32 3
  %13893 = add <4 x i32> %12750, %t344
  %13894 = extractelement <4 x i32> %13893, i32 0
  %13895 = sext i32 %13894 to i64
  %13896 = getelementptr inbounds i16, i16* %10126, i64 %13895
  %13897 = load i16, i16* %13896, align 2, !tbaa !386
  %13898 = insertelement <4 x i16> undef, i16 %13897, i32 0
  %13899 = extractelement <4 x i32> %13893, i32 1
  %13900 = sext i32 %13899 to i64
  %13901 = getelementptr inbounds i16, i16* %10126, i64 %13900
  %13902 = load i16, i16* %13901, align 2, !tbaa !386
  %13903 = insertelement <4 x i16> %13898, i16 %13902, i32 1
  %13904 = extractelement <4 x i32> %13893, i32 2
  %13905 = sext i32 %13904 to i64
  %13906 = getelementptr inbounds i16, i16* %10126, i64 %13905
  %13907 = load i16, i16* %13906, align 2, !tbaa !386
  %13908 = insertelement <4 x i16> %13903, i16 %13907, i32 2
  %13909 = extractelement <4 x i32> %13893, i32 3
  %13910 = sext i32 %13909 to i64
  %13911 = getelementptr inbounds i16, i16* %10126, i64 %13910
  %13912 = load i16, i16* %13911, align 2, !tbaa !386
  %13913 = insertelement <4 x i16> %13908, i16 %13912, i32 3
  %13914 = add <4 x i16> %13808, %13787
  %13915 = add <4 x i16> %13892, %13871
  %13916 = add <4 x i16> %13718, %13720
  %13917 = add <4 x i16> %13916, %13766
  %13918 = add <4 x i16> %13917, %13914
  %13919 = add <4 x i16> %13918, %13829
  %13920 = add <4 x i16> %13914, %13766
  %13921 = add <4 x i16> %13920, %13850
  %13922 = add <4 x i16> %13921, %13915
  %13923 = add <4 x i16> %13922, %13913
  %13924 = shufflevector <4 x i16> %13919, <4 x i16> %13923, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %13925 = zext <8 x i16> %13924 to <8 x i32>
  %13926 = mul nuw nsw <8 x i32> %13925, <i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362>
  %13927 = shufflevector <8 x i32> %13926, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %13928 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %13927, i32 16)
  %13929 = shufflevector <8 x i32> %13926, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %13930 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %13929, i32 16)
  %13931 = shufflevector <4 x i16> %13928, <4 x i16> %13930, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %13932 = add <4 x i16> %13917, %13787
  %13933 = add <4 x i16> %13932, %13808
  %13934 = add <4 x i16> %13933, %13829
  %13935 = add <4 x i16> %13921, %13871
  %13936 = add <4 x i16> %13935, %13892
  %13937 = add <4 x i16> %13936, %13913
  %13938 = shufflevector <4 x i16> %13934, <4 x i16> %13937, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %13939 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %13931, <8 x i16> %13938) #11
  %13940 = lshr <8 x i16> %13939, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %13941 = add <4 x i32> %12756, %t344
  %13942 = extractelement <4 x i32> %13941, i32 0
  %13943 = sext i32 %13942 to i64
  %13944 = getelementptr inbounds i16, i16* %10126, i64 %13943
  %13945 = load i16, i16* %13944, align 2, !tbaa !386
  %13946 = insertelement <4 x i16> undef, i16 %13945, i32 0
  %13947 = extractelement <4 x i32> %13941, i32 1
  %13948 = sext i32 %13947 to i64
  %13949 = getelementptr inbounds i16, i16* %10126, i64 %13948
  %13950 = load i16, i16* %13949, align 2, !tbaa !386
  %13951 = insertelement <4 x i16> %13946, i16 %13950, i32 1
  %13952 = extractelement <4 x i32> %13941, i32 2
  %13953 = sext i32 %13952 to i64
  %13954 = getelementptr inbounds i16, i16* %10126, i64 %13953
  %13955 = load i16, i16* %13954, align 2, !tbaa !386
  %13956 = insertelement <4 x i16> %13951, i16 %13955, i32 2
  %13957 = extractelement <4 x i32> %13941, i32 3
  %13958 = sext i32 %13957 to i64
  %13959 = getelementptr inbounds i16, i16* %10126, i64 %13958
  %13960 = load i16, i16* %13959, align 2, !tbaa !386
  %13961 = insertelement <4 x i16> %13956, i16 %13960, i32 3
  %13962 = add <4 x i32> %12762, %t344
  %13963 = extractelement <4 x i32> %13962, i32 0
  %13964 = sext i32 %13963 to i64
  %13965 = getelementptr inbounds i16, i16* %10126, i64 %13964
  %13966 = load i16, i16* %13965, align 2, !tbaa !386
  %13967 = insertelement <4 x i16> undef, i16 %13966, i32 0
  %13968 = extractelement <4 x i32> %13962, i32 1
  %13969 = sext i32 %13968 to i64
  %13970 = getelementptr inbounds i16, i16* %10126, i64 %13969
  %13971 = load i16, i16* %13970, align 2, !tbaa !386
  %13972 = insertelement <4 x i16> %13967, i16 %13971, i32 1
  %13973 = extractelement <4 x i32> %13962, i32 2
  %13974 = sext i32 %13973 to i64
  %13975 = getelementptr inbounds i16, i16* %10126, i64 %13974
  %13976 = load i16, i16* %13975, align 2, !tbaa !386
  %13977 = insertelement <4 x i16> %13972, i16 %13976, i32 2
  %13978 = extractelement <4 x i32> %13962, i32 3
  %13979 = sext i32 %13978 to i64
  %13980 = getelementptr inbounds i16, i16* %10126, i64 %13979
  %13981 = load i16, i16* %13980, align 2, !tbaa !386
  %13982 = insertelement <4 x i16> %13977, i16 %13981, i32 3
  %13983 = add <4 x i32> %12768, %t344
  %13984 = extractelement <4 x i32> %13983, i32 0
  %13985 = sext i32 %13984 to i64
  %13986 = getelementptr inbounds i16, i16* %10126, i64 %13985
  %13987 = load i16, i16* %13986, align 2, !tbaa !386
  %13988 = insertelement <4 x i16> undef, i16 %13987, i32 0
  %13989 = extractelement <4 x i32> %13983, i32 1
  %13990 = sext i32 %13989 to i64
  %13991 = getelementptr inbounds i16, i16* %10126, i64 %13990
  %13992 = load i16, i16* %13991, align 2, !tbaa !386
  %13993 = insertelement <4 x i16> %13988, i16 %13992, i32 1
  %13994 = extractelement <4 x i32> %13983, i32 2
  %13995 = sext i32 %13994 to i64
  %13996 = getelementptr inbounds i16, i16* %10126, i64 %13995
  %13997 = load i16, i16* %13996, align 2, !tbaa !386
  %13998 = insertelement <4 x i16> %13993, i16 %13997, i32 2
  %13999 = extractelement <4 x i32> %13983, i32 3
  %14000 = sext i32 %13999 to i64
  %14001 = getelementptr inbounds i16, i16* %10126, i64 %14000
  %14002 = load i16, i16* %14001, align 2, !tbaa !386
  %14003 = insertelement <4 x i16> %13998, i16 %14002, i32 3
  %14004 = add <4 x i32> %12774, %t344
  %14005 = extractelement <4 x i32> %14004, i32 0
  %14006 = sext i32 %14005 to i64
  %14007 = getelementptr inbounds i16, i16* %10126, i64 %14006
  %14008 = load i16, i16* %14007, align 2, !tbaa !386
  %14009 = insertelement <4 x i16> undef, i16 %14008, i32 0
  %14010 = extractelement <4 x i32> %14004, i32 1
  %14011 = sext i32 %14010 to i64
  %14012 = getelementptr inbounds i16, i16* %10126, i64 %14011
  %14013 = load i16, i16* %14012, align 2, !tbaa !386
  %14014 = insertelement <4 x i16> %14009, i16 %14013, i32 1
  %14015 = extractelement <4 x i32> %14004, i32 2
  %14016 = sext i32 %14015 to i64
  %14017 = getelementptr inbounds i16, i16* %10126, i64 %14016
  %14018 = load i16, i16* %14017, align 2, !tbaa !386
  %14019 = insertelement <4 x i16> %14014, i16 %14018, i32 2
  %14020 = extractelement <4 x i32> %14004, i32 3
  %14021 = sext i32 %14020 to i64
  %14022 = getelementptr inbounds i16, i16* %10126, i64 %14021
  %14023 = load i16, i16* %14022, align 2, !tbaa !386
  %14024 = insertelement <4 x i16> %14019, i16 %14023, i32 3
  %14025 = add <4 x i32> %12780, %t344
  %14026 = extractelement <4 x i32> %14025, i32 0
  %14027 = sext i32 %14026 to i64
  %14028 = getelementptr inbounds i16, i16* %10126, i64 %14027
  %14029 = load i16, i16* %14028, align 2, !tbaa !386
  %14030 = insertelement <4 x i16> undef, i16 %14029, i32 0
  %14031 = extractelement <4 x i32> %14025, i32 1
  %14032 = sext i32 %14031 to i64
  %14033 = getelementptr inbounds i16, i16* %10126, i64 %14032
  %14034 = load i16, i16* %14033, align 2, !tbaa !386
  %14035 = insertelement <4 x i16> %14030, i16 %14034, i32 1
  %14036 = extractelement <4 x i32> %14025, i32 2
  %14037 = sext i32 %14036 to i64
  %14038 = getelementptr inbounds i16, i16* %10126, i64 %14037
  %14039 = load i16, i16* %14038, align 2, !tbaa !386
  %14040 = insertelement <4 x i16> %14035, i16 %14039, i32 2
  %14041 = extractelement <4 x i32> %14025, i32 3
  %14042 = sext i32 %14041 to i64
  %14043 = getelementptr inbounds i16, i16* %10126, i64 %14042
  %14044 = load i16, i16* %14043, align 2, !tbaa !386
  %14045 = insertelement <4 x i16> %14040, i16 %14044, i32 3
  %14046 = add <4 x i32> %12786, %t344
  %14047 = extractelement <4 x i32> %14046, i32 0
  %14048 = sext i32 %14047 to i64
  %14049 = getelementptr inbounds i16, i16* %10126, i64 %14048
  %14050 = load i16, i16* %14049, align 2, !tbaa !386
  %14051 = insertelement <4 x i16> undef, i16 %14050, i32 0
  %14052 = extractelement <4 x i32> %14046, i32 1
  %14053 = sext i32 %14052 to i64
  %14054 = getelementptr inbounds i16, i16* %10126, i64 %14053
  %14055 = load i16, i16* %14054, align 2, !tbaa !386
  %14056 = insertelement <4 x i16> %14051, i16 %14055, i32 1
  %14057 = extractelement <4 x i32> %14046, i32 2
  %14058 = sext i32 %14057 to i64
  %14059 = getelementptr inbounds i16, i16* %10126, i64 %14058
  %14060 = load i16, i16* %14059, align 2, !tbaa !386
  %14061 = insertelement <4 x i16> %14056, i16 %14060, i32 2
  %14062 = extractelement <4 x i32> %14046, i32 3
  %14063 = sext i32 %14062 to i64
  %14064 = getelementptr inbounds i16, i16* %10126, i64 %14063
  %14065 = load i16, i16* %14064, align 2, !tbaa !386
  %14066 = insertelement <4 x i16> %14061, i16 %14065, i32 3
  %14067 = add <4 x i32> %12792, %t344
  %14068 = extractelement <4 x i32> %14067, i32 0
  %14069 = sext i32 %14068 to i64
  %14070 = getelementptr inbounds i16, i16* %10126, i64 %14069
  %14071 = load i16, i16* %14070, align 2, !tbaa !386
  %14072 = insertelement <4 x i16> undef, i16 %14071, i32 0
  %14073 = extractelement <4 x i32> %14067, i32 1
  %14074 = sext i32 %14073 to i64
  %14075 = getelementptr inbounds i16, i16* %10126, i64 %14074
  %14076 = load i16, i16* %14075, align 2, !tbaa !386
  %14077 = insertelement <4 x i16> %14072, i16 %14076, i32 1
  %14078 = extractelement <4 x i32> %14067, i32 2
  %14079 = sext i32 %14078 to i64
  %14080 = getelementptr inbounds i16, i16* %10126, i64 %14079
  %14081 = load i16, i16* %14080, align 2, !tbaa !386
  %14082 = insertelement <4 x i16> %14077, i16 %14081, i32 2
  %14083 = extractelement <4 x i32> %14067, i32 3
  %14084 = sext i32 %14083 to i64
  %14085 = getelementptr inbounds i16, i16* %10126, i64 %14084
  %14086 = load i16, i16* %14085, align 2, !tbaa !386
  %14087 = insertelement <4 x i16> %14082, i16 %14086, i32 3
  %14088 = add <4 x i32> %12798, %t344
  %14089 = extractelement <4 x i32> %14088, i32 0
  %14090 = sext i32 %14089 to i64
  %14091 = getelementptr inbounds i16, i16* %10126, i64 %14090
  %14092 = load i16, i16* %14091, align 2, !tbaa !386
  %14093 = insertelement <4 x i16> undef, i16 %14092, i32 0
  %14094 = extractelement <4 x i32> %14088, i32 1
  %14095 = sext i32 %14094 to i64
  %14096 = getelementptr inbounds i16, i16* %10126, i64 %14095
  %14097 = load i16, i16* %14096, align 2, !tbaa !386
  %14098 = insertelement <4 x i16> %14093, i16 %14097, i32 1
  %14099 = extractelement <4 x i32> %14088, i32 2
  %14100 = sext i32 %14099 to i64
  %14101 = getelementptr inbounds i16, i16* %10126, i64 %14100
  %14102 = load i16, i16* %14101, align 2, !tbaa !386
  %14103 = insertelement <4 x i16> %14098, i16 %14102, i32 2
  %14104 = extractelement <4 x i32> %14088, i32 3
  %14105 = sext i32 %14104 to i64
  %14106 = getelementptr inbounds i16, i16* %10126, i64 %14105
  %14107 = load i16, i16* %14106, align 2, !tbaa !386
  %14108 = insertelement <4 x i16> %14103, i16 %14107, i32 3
  %14109 = add <4 x i16> %14003, %13982
  %14110 = add <4 x i16> %14087, %14066
  %14111 = add <4 x i16> %13913, %13915
  %14112 = add <4 x i16> %14111, %13961
  %14113 = add <4 x i16> %14112, %14109
  %14114 = add <4 x i16> %14113, %14024
  %14115 = add <4 x i16> %14109, %13961
  %14116 = add <4 x i16> %14115, %14045
  %14117 = add <4 x i16> %14116, %14110
  %14118 = add <4 x i16> %14117, %14108
  %14119 = shufflevector <4 x i16> %14114, <4 x i16> %14118, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %14120 = zext <8 x i16> %14119 to <8 x i32>
  %14121 = mul nuw nsw <8 x i32> %14120, <i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362>
  %14122 = shufflevector <8 x i32> %14121, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %14123 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %14122, i32 16)
  %14124 = shufflevector <8 x i32> %14121, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %14125 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %14124, i32 16)
  %14126 = shufflevector <4 x i16> %14123, <4 x i16> %14125, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %14127 = add <4 x i16> %14112, %13982
  %14128 = add <4 x i16> %14127, %14003
  %14129 = add <4 x i16> %14128, %14024
  %14130 = add <4 x i16> %14116, %14066
  %14131 = add <4 x i16> %14130, %14087
  %14132 = add <4 x i16> %14131, %14108
  %14133 = shufflevector <4 x i16> %14129, <4 x i16> %14132, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %14134 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %14126, <8 x i16> %14133) #11
  %14135 = lshr <8 x i16> %14134, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %14136 = add <4 x i32> %12804, %t344
  %14137 = extractelement <4 x i32> %14136, i32 0
  %14138 = sext i32 %14137 to i64
  %14139 = getelementptr inbounds i16, i16* %10126, i64 %14138
  %14140 = load i16, i16* %14139, align 2, !tbaa !386
  %14141 = insertelement <4 x i16> undef, i16 %14140, i32 0
  %14142 = extractelement <4 x i32> %14136, i32 1
  %14143 = sext i32 %14142 to i64
  %14144 = getelementptr inbounds i16, i16* %10126, i64 %14143
  %14145 = load i16, i16* %14144, align 2, !tbaa !386
  %14146 = insertelement <4 x i16> %14141, i16 %14145, i32 1
  %14147 = extractelement <4 x i32> %14136, i32 2
  %14148 = sext i32 %14147 to i64
  %14149 = getelementptr inbounds i16, i16* %10126, i64 %14148
  %14150 = load i16, i16* %14149, align 2, !tbaa !386
  %14151 = insertelement <4 x i16> %14146, i16 %14150, i32 2
  %14152 = extractelement <4 x i32> %14136, i32 3
  %14153 = sext i32 %14152 to i64
  %14154 = getelementptr inbounds i16, i16* %10126, i64 %14153
  %14155 = load i16, i16* %14154, align 2, !tbaa !386
  %14156 = insertelement <4 x i16> %14151, i16 %14155, i32 3
  %14157 = add <4 x i32> %12810, %t344
  %14158 = extractelement <4 x i32> %14157, i32 0
  %14159 = sext i32 %14158 to i64
  %14160 = getelementptr inbounds i16, i16* %10126, i64 %14159
  %14161 = load i16, i16* %14160, align 2, !tbaa !386
  %14162 = insertelement <4 x i16> undef, i16 %14161, i32 0
  %14163 = extractelement <4 x i32> %14157, i32 1
  %14164 = sext i32 %14163 to i64
  %14165 = getelementptr inbounds i16, i16* %10126, i64 %14164
  %14166 = load i16, i16* %14165, align 2, !tbaa !386
  %14167 = insertelement <4 x i16> %14162, i16 %14166, i32 1
  %14168 = extractelement <4 x i32> %14157, i32 2
  %14169 = sext i32 %14168 to i64
  %14170 = getelementptr inbounds i16, i16* %10126, i64 %14169
  %14171 = load i16, i16* %14170, align 2, !tbaa !386
  %14172 = insertelement <4 x i16> %14167, i16 %14171, i32 2
  %14173 = extractelement <4 x i32> %14157, i32 3
  %14174 = sext i32 %14173 to i64
  %14175 = getelementptr inbounds i16, i16* %10126, i64 %14174
  %14176 = load i16, i16* %14175, align 2, !tbaa !386
  %14177 = insertelement <4 x i16> %14172, i16 %14176, i32 3
  %14178 = add <4 x i32> %12816, %t344
  %14179 = extractelement <4 x i32> %14178, i32 0
  %14180 = sext i32 %14179 to i64
  %14181 = getelementptr inbounds i16, i16* %10126, i64 %14180
  %14182 = load i16, i16* %14181, align 2, !tbaa !386
  %14183 = insertelement <4 x i16> undef, i16 %14182, i32 0
  %14184 = extractelement <4 x i32> %14178, i32 1
  %14185 = sext i32 %14184 to i64
  %14186 = getelementptr inbounds i16, i16* %10126, i64 %14185
  %14187 = load i16, i16* %14186, align 2, !tbaa !386
  %14188 = insertelement <4 x i16> %14183, i16 %14187, i32 1
  %14189 = extractelement <4 x i32> %14178, i32 2
  %14190 = sext i32 %14189 to i64
  %14191 = getelementptr inbounds i16, i16* %10126, i64 %14190
  %14192 = load i16, i16* %14191, align 2, !tbaa !386
  %14193 = insertelement <4 x i16> %14188, i16 %14192, i32 2
  %14194 = extractelement <4 x i32> %14178, i32 3
  %14195 = sext i32 %14194 to i64
  %14196 = getelementptr inbounds i16, i16* %10126, i64 %14195
  %14197 = load i16, i16* %14196, align 2, !tbaa !386
  %14198 = insertelement <4 x i16> %14193, i16 %14197, i32 3
  %14199 = add <4 x i32> %12822, %t344
  %14200 = extractelement <4 x i32> %14199, i32 0
  %14201 = sext i32 %14200 to i64
  %14202 = getelementptr inbounds i16, i16* %10126, i64 %14201
  %14203 = load i16, i16* %14202, align 2, !tbaa !386
  %14204 = insertelement <4 x i16> undef, i16 %14203, i32 0
  %14205 = extractelement <4 x i32> %14199, i32 1
  %14206 = sext i32 %14205 to i64
  %14207 = getelementptr inbounds i16, i16* %10126, i64 %14206
  %14208 = load i16, i16* %14207, align 2, !tbaa !386
  %14209 = insertelement <4 x i16> %14204, i16 %14208, i32 1
  %14210 = extractelement <4 x i32> %14199, i32 2
  %14211 = sext i32 %14210 to i64
  %14212 = getelementptr inbounds i16, i16* %10126, i64 %14211
  %14213 = load i16, i16* %14212, align 2, !tbaa !386
  %14214 = insertelement <4 x i16> %14209, i16 %14213, i32 2
  %14215 = extractelement <4 x i32> %14199, i32 3
  %14216 = sext i32 %14215 to i64
  %14217 = getelementptr inbounds i16, i16* %10126, i64 %14216
  %14218 = load i16, i16* %14217, align 2, !tbaa !386
  %14219 = insertelement <4 x i16> %14214, i16 %14218, i32 3
  %14220 = add <4 x i32> %12828, %t344
  %14221 = extractelement <4 x i32> %14220, i32 0
  %14222 = sext i32 %14221 to i64
  %14223 = getelementptr inbounds i16, i16* %10126, i64 %14222
  %14224 = load i16, i16* %14223, align 2, !tbaa !386
  %14225 = insertelement <4 x i16> undef, i16 %14224, i32 0
  %14226 = extractelement <4 x i32> %14220, i32 1
  %14227 = sext i32 %14226 to i64
  %14228 = getelementptr inbounds i16, i16* %10126, i64 %14227
  %14229 = load i16, i16* %14228, align 2, !tbaa !386
  %14230 = insertelement <4 x i16> %14225, i16 %14229, i32 1
  %14231 = extractelement <4 x i32> %14220, i32 2
  %14232 = sext i32 %14231 to i64
  %14233 = getelementptr inbounds i16, i16* %10126, i64 %14232
  %14234 = load i16, i16* %14233, align 2, !tbaa !386
  %14235 = insertelement <4 x i16> %14230, i16 %14234, i32 2
  %14236 = extractelement <4 x i32> %14220, i32 3
  %14237 = sext i32 %14236 to i64
  %14238 = getelementptr inbounds i16, i16* %10126, i64 %14237
  %14239 = load i16, i16* %14238, align 2, !tbaa !386
  %14240 = insertelement <4 x i16> %14235, i16 %14239, i32 3
  %14241 = add <4 x i32> %12834, %t344
  %14242 = extractelement <4 x i32> %14241, i32 0
  %14243 = sext i32 %14242 to i64
  %14244 = getelementptr inbounds i16, i16* %10126, i64 %14243
  %14245 = load i16, i16* %14244, align 2, !tbaa !386
  %14246 = insertelement <4 x i16> undef, i16 %14245, i32 0
  %14247 = extractelement <4 x i32> %14241, i32 1
  %14248 = sext i32 %14247 to i64
  %14249 = getelementptr inbounds i16, i16* %10126, i64 %14248
  %14250 = load i16, i16* %14249, align 2, !tbaa !386
  %14251 = insertelement <4 x i16> %14246, i16 %14250, i32 1
  %14252 = extractelement <4 x i32> %14241, i32 2
  %14253 = sext i32 %14252 to i64
  %14254 = getelementptr inbounds i16, i16* %10126, i64 %14253
  %14255 = load i16, i16* %14254, align 2, !tbaa !386
  %14256 = insertelement <4 x i16> %14251, i16 %14255, i32 2
  %14257 = extractelement <4 x i32> %14241, i32 3
  %14258 = sext i32 %14257 to i64
  %14259 = getelementptr inbounds i16, i16* %10126, i64 %14258
  %14260 = load i16, i16* %14259, align 2, !tbaa !386
  %14261 = insertelement <4 x i16> %14256, i16 %14260, i32 3
  %14262 = add <4 x i32> %12840, %t344
  %14263 = extractelement <4 x i32> %14262, i32 0
  %14264 = sext i32 %14263 to i64
  %14265 = getelementptr inbounds i16, i16* %10126, i64 %14264
  %14266 = load i16, i16* %14265, align 2, !tbaa !386
  %14267 = insertelement <4 x i16> undef, i16 %14266, i32 0
  %14268 = extractelement <4 x i32> %14262, i32 1
  %14269 = sext i32 %14268 to i64
  %14270 = getelementptr inbounds i16, i16* %10126, i64 %14269
  %14271 = load i16, i16* %14270, align 2, !tbaa !386
  %14272 = insertelement <4 x i16> %14267, i16 %14271, i32 1
  %14273 = extractelement <4 x i32> %14262, i32 2
  %14274 = sext i32 %14273 to i64
  %14275 = getelementptr inbounds i16, i16* %10126, i64 %14274
  %14276 = load i16, i16* %14275, align 2, !tbaa !386
  %14277 = insertelement <4 x i16> %14272, i16 %14276, i32 2
  %14278 = extractelement <4 x i32> %14262, i32 3
  %14279 = sext i32 %14278 to i64
  %14280 = getelementptr inbounds i16, i16* %10126, i64 %14279
  %14281 = load i16, i16* %14280, align 2, !tbaa !386
  %14282 = insertelement <4 x i16> %14277, i16 %14281, i32 3
  %14283 = add <4 x i32> %12846, %t344
  %14284 = extractelement <4 x i32> %14283, i32 0
  %14285 = sext i32 %14284 to i64
  %14286 = getelementptr inbounds i16, i16* %10126, i64 %14285
  %14287 = load i16, i16* %14286, align 2, !tbaa !386
  %14288 = insertelement <4 x i16> undef, i16 %14287, i32 0
  %14289 = extractelement <4 x i32> %14283, i32 1
  %14290 = sext i32 %14289 to i64
  %14291 = getelementptr inbounds i16, i16* %10126, i64 %14290
  %14292 = load i16, i16* %14291, align 2, !tbaa !386
  %14293 = insertelement <4 x i16> %14288, i16 %14292, i32 1
  %14294 = extractelement <4 x i32> %14283, i32 2
  %14295 = sext i32 %14294 to i64
  %14296 = getelementptr inbounds i16, i16* %10126, i64 %14295
  %14297 = load i16, i16* %14296, align 2, !tbaa !386
  %14298 = insertelement <4 x i16> %14293, i16 %14297, i32 2
  %14299 = extractelement <4 x i32> %14283, i32 3
  %14300 = sext i32 %14299 to i64
  %14301 = getelementptr inbounds i16, i16* %10126, i64 %14300
  %14302 = load i16, i16* %14301, align 2, !tbaa !386
  %14303 = insertelement <4 x i16> %14298, i16 %14302, i32 3
  %14304 = add <4 x i16> %14198, %14177
  %14305 = add <4 x i16> %14282, %14261
  %14306 = add <4 x i16> %14108, %14110
  %14307 = add <4 x i16> %14306, %14156
  %14308 = add <4 x i16> %14307, %14304
  %14309 = add <4 x i16> %14308, %14219
  %14310 = add <4 x i16> %14304, %14156
  %14311 = add <4 x i16> %14310, %14240
  %14312 = add <4 x i16> %14311, %14305
  %14313 = add <4 x i16> %14312, %14303
  %14314 = shufflevector <4 x i16> %14309, <4 x i16> %14313, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %14315 = zext <8 x i16> %14314 to <8 x i32>
  %14316 = mul nuw nsw <8 x i32> %14315, <i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362>
  %14317 = shufflevector <8 x i32> %14316, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %14318 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %14317, i32 16)
  %14319 = shufflevector <8 x i32> %14316, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %14320 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %14319, i32 16)
  %14321 = shufflevector <4 x i16> %14318, <4 x i16> %14320, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %14322 = add <4 x i16> %14307, %14177
  %14323 = add <4 x i16> %14322, %14198
  %14324 = add <4 x i16> %14323, %14219
  %14325 = add <4 x i16> %14311, %14261
  %14326 = add <4 x i16> %14325, %14282
  %14327 = add <4 x i16> %14326, %14303
  %14328 = shufflevector <4 x i16> %14324, <4 x i16> %14327, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %14329 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %14321, <8 x i16> %14328) #11
  %14330 = lshr <8 x i16> %14329, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %14331 = add <4 x i32> %12852, %t344
  %14332 = extractelement <4 x i32> %14331, i32 0
  %14333 = sext i32 %14332 to i64
  %14334 = getelementptr inbounds i16, i16* %10126, i64 %14333
  %14335 = load i16, i16* %14334, align 2, !tbaa !386
  %14336 = insertelement <4 x i16> undef, i16 %14335, i32 0
  %14337 = extractelement <4 x i32> %14331, i32 1
  %14338 = sext i32 %14337 to i64
  %14339 = getelementptr inbounds i16, i16* %10126, i64 %14338
  %14340 = load i16, i16* %14339, align 2, !tbaa !386
  %14341 = insertelement <4 x i16> %14336, i16 %14340, i32 1
  %14342 = extractelement <4 x i32> %14331, i32 2
  %14343 = sext i32 %14342 to i64
  %14344 = getelementptr inbounds i16, i16* %10126, i64 %14343
  %14345 = load i16, i16* %14344, align 2, !tbaa !386
  %14346 = insertelement <4 x i16> %14341, i16 %14345, i32 2
  %14347 = extractelement <4 x i32> %14331, i32 3
  %14348 = sext i32 %14347 to i64
  %14349 = getelementptr inbounds i16, i16* %10126, i64 %14348
  %14350 = load i16, i16* %14349, align 2, !tbaa !386
  %14351 = insertelement <4 x i16> %14346, i16 %14350, i32 3
  %14352 = add <4 x i32> %12858, %t344
  %14353 = extractelement <4 x i32> %14352, i32 0
  %14354 = sext i32 %14353 to i64
  %14355 = getelementptr inbounds i16, i16* %10126, i64 %14354
  %14356 = load i16, i16* %14355, align 2, !tbaa !386
  %14357 = insertelement <4 x i16> undef, i16 %14356, i32 0
  %14358 = extractelement <4 x i32> %14352, i32 1
  %14359 = sext i32 %14358 to i64
  %14360 = getelementptr inbounds i16, i16* %10126, i64 %14359
  %14361 = load i16, i16* %14360, align 2, !tbaa !386
  %14362 = insertelement <4 x i16> %14357, i16 %14361, i32 1
  %14363 = extractelement <4 x i32> %14352, i32 2
  %14364 = sext i32 %14363 to i64
  %14365 = getelementptr inbounds i16, i16* %10126, i64 %14364
  %14366 = load i16, i16* %14365, align 2, !tbaa !386
  %14367 = insertelement <4 x i16> %14362, i16 %14366, i32 2
  %14368 = extractelement <4 x i32> %14352, i32 3
  %14369 = sext i32 %14368 to i64
  %14370 = getelementptr inbounds i16, i16* %10126, i64 %14369
  %14371 = load i16, i16* %14370, align 2, !tbaa !386
  %14372 = insertelement <4 x i16> %14367, i16 %14371, i32 3
  %14373 = add <4 x i32> %12864, %t344
  %14374 = extractelement <4 x i32> %14373, i32 0
  %14375 = sext i32 %14374 to i64
  %14376 = getelementptr inbounds i16, i16* %10126, i64 %14375
  %14377 = load i16, i16* %14376, align 2, !tbaa !386
  %14378 = insertelement <4 x i16> undef, i16 %14377, i32 0
  %14379 = extractelement <4 x i32> %14373, i32 1
  %14380 = sext i32 %14379 to i64
  %14381 = getelementptr inbounds i16, i16* %10126, i64 %14380
  %14382 = load i16, i16* %14381, align 2, !tbaa !386
  %14383 = insertelement <4 x i16> %14378, i16 %14382, i32 1
  %14384 = extractelement <4 x i32> %14373, i32 2
  %14385 = sext i32 %14384 to i64
  %14386 = getelementptr inbounds i16, i16* %10126, i64 %14385
  %14387 = load i16, i16* %14386, align 2, !tbaa !386
  %14388 = insertelement <4 x i16> %14383, i16 %14387, i32 2
  %14389 = extractelement <4 x i32> %14373, i32 3
  %14390 = sext i32 %14389 to i64
  %14391 = getelementptr inbounds i16, i16* %10126, i64 %14390
  %14392 = load i16, i16* %14391, align 2, !tbaa !386
  %14393 = insertelement <4 x i16> %14388, i16 %14392, i32 3
  %14394 = add <4 x i32> %12870, %t344
  %14395 = extractelement <4 x i32> %14394, i32 0
  %14396 = sext i32 %14395 to i64
  %14397 = getelementptr inbounds i16, i16* %10126, i64 %14396
  %14398 = load i16, i16* %14397, align 2, !tbaa !386
  %14399 = insertelement <4 x i16> undef, i16 %14398, i32 0
  %14400 = extractelement <4 x i32> %14394, i32 1
  %14401 = sext i32 %14400 to i64
  %14402 = getelementptr inbounds i16, i16* %10126, i64 %14401
  %14403 = load i16, i16* %14402, align 2, !tbaa !386
  %14404 = insertelement <4 x i16> %14399, i16 %14403, i32 1
  %14405 = extractelement <4 x i32> %14394, i32 2
  %14406 = sext i32 %14405 to i64
  %14407 = getelementptr inbounds i16, i16* %10126, i64 %14406
  %14408 = load i16, i16* %14407, align 2, !tbaa !386
  %14409 = insertelement <4 x i16> %14404, i16 %14408, i32 2
  %14410 = extractelement <4 x i32> %14394, i32 3
  %14411 = sext i32 %14410 to i64
  %14412 = getelementptr inbounds i16, i16* %10126, i64 %14411
  %14413 = load i16, i16* %14412, align 2, !tbaa !386
  %14414 = insertelement <4 x i16> %14409, i16 %14413, i32 3
  %14415 = add <4 x i32> %12876, %t344
  %14416 = extractelement <4 x i32> %14415, i32 0
  %14417 = sext i32 %14416 to i64
  %14418 = getelementptr inbounds i16, i16* %10126, i64 %14417
  %14419 = load i16, i16* %14418, align 2, !tbaa !386
  %14420 = insertelement <4 x i16> undef, i16 %14419, i32 0
  %14421 = extractelement <4 x i32> %14415, i32 1
  %14422 = sext i32 %14421 to i64
  %14423 = getelementptr inbounds i16, i16* %10126, i64 %14422
  %14424 = load i16, i16* %14423, align 2, !tbaa !386
  %14425 = insertelement <4 x i16> %14420, i16 %14424, i32 1
  %14426 = extractelement <4 x i32> %14415, i32 2
  %14427 = sext i32 %14426 to i64
  %14428 = getelementptr inbounds i16, i16* %10126, i64 %14427
  %14429 = load i16, i16* %14428, align 2, !tbaa !386
  %14430 = insertelement <4 x i16> %14425, i16 %14429, i32 2
  %14431 = extractelement <4 x i32> %14415, i32 3
  %14432 = sext i32 %14431 to i64
  %14433 = getelementptr inbounds i16, i16* %10126, i64 %14432
  %14434 = load i16, i16* %14433, align 2, !tbaa !386
  %14435 = insertelement <4 x i16> %14430, i16 %14434, i32 3
  %14436 = add <4 x i32> %12881, %t344
  %14437 = extractelement <4 x i32> %14436, i32 0
  %14438 = sext i32 %14437 to i64
  %14439 = getelementptr inbounds i16, i16* %10126, i64 %14438
  %14440 = load i16, i16* %14439, align 2, !tbaa !386
  %14441 = insertelement <4 x i16> undef, i16 %14440, i32 0
  %14442 = extractelement <4 x i32> %14436, i32 1
  %14443 = sext i32 %14442 to i64
  %14444 = getelementptr inbounds i16, i16* %10126, i64 %14443
  %14445 = load i16, i16* %14444, align 2, !tbaa !386
  %14446 = insertelement <4 x i16> %14441, i16 %14445, i32 1
  %14447 = extractelement <4 x i32> %14436, i32 2
  %14448 = sext i32 %14447 to i64
  %14449 = getelementptr inbounds i16, i16* %10126, i64 %14448
  %14450 = load i16, i16* %14449, align 2, !tbaa !386
  %14451 = insertelement <4 x i16> %14446, i16 %14450, i32 2
  %14452 = extractelement <4 x i32> %14436, i32 3
  %14453 = sext i32 %14452 to i64
  %14454 = getelementptr inbounds i16, i16* %10126, i64 %14453
  %14455 = load i16, i16* %14454, align 2, !tbaa !386
  %14456 = insertelement <4 x i16> %14451, i16 %14455, i32 3
  %14457 = add <4 x i32> %12887, %t344
  %14458 = extractelement <4 x i32> %14457, i32 0
  %14459 = sext i32 %14458 to i64
  %14460 = getelementptr inbounds i16, i16* %10126, i64 %14459
  %14461 = load i16, i16* %14460, align 2, !tbaa !386
  %14462 = insertelement <4 x i16> undef, i16 %14461, i32 0
  %14463 = extractelement <4 x i32> %14457, i32 1
  %14464 = sext i32 %14463 to i64
  %14465 = getelementptr inbounds i16, i16* %10126, i64 %14464
  %14466 = load i16, i16* %14465, align 2, !tbaa !386
  %14467 = insertelement <4 x i16> %14462, i16 %14466, i32 1
  %14468 = extractelement <4 x i32> %14457, i32 2
  %14469 = sext i32 %14468 to i64
  %14470 = getelementptr inbounds i16, i16* %10126, i64 %14469
  %14471 = load i16, i16* %14470, align 2, !tbaa !386
  %14472 = insertelement <4 x i16> %14467, i16 %14471, i32 2
  %14473 = extractelement <4 x i32> %14457, i32 3
  %14474 = sext i32 %14473 to i64
  %14475 = getelementptr inbounds i16, i16* %10126, i64 %14474
  %14476 = load i16, i16* %14475, align 2, !tbaa !386
  %14477 = insertelement <4 x i16> %14472, i16 %14476, i32 3
  %14478 = add <4 x i32> %12893, %t344
  %14479 = extractelement <4 x i32> %14478, i32 0
  %14480 = sext i32 %14479 to i64
  %14481 = getelementptr inbounds i16, i16* %10126, i64 %14480
  %14482 = load i16, i16* %14481, align 2, !tbaa !386
  %14483 = insertelement <4 x i16> undef, i16 %14482, i32 0
  %14484 = extractelement <4 x i32> %14478, i32 1
  %14485 = sext i32 %14484 to i64
  %14486 = getelementptr inbounds i16, i16* %10126, i64 %14485
  %14487 = load i16, i16* %14486, align 2, !tbaa !386
  %14488 = insertelement <4 x i16> %14483, i16 %14487, i32 1
  %14489 = extractelement <4 x i32> %14478, i32 2
  %14490 = sext i32 %14489 to i64
  %14491 = getelementptr inbounds i16, i16* %10126, i64 %14490
  %14492 = load i16, i16* %14491, align 2, !tbaa !386
  %14493 = insertelement <4 x i16> %14488, i16 %14492, i32 2
  %14494 = extractelement <4 x i32> %14478, i32 3
  %14495 = sext i32 %14494 to i64
  %14496 = getelementptr inbounds i16, i16* %10126, i64 %14495
  %14497 = load i16, i16* %14496, align 2, !tbaa !386
  %14498 = insertelement <4 x i16> %14493, i16 %14497, i32 3
  %14499 = add <4 x i16> %14393, %14372
  %14500 = add <4 x i16> %14303, %14305
  %14501 = add <4 x i16> %14500, %14351
  %14502 = add <4 x i16> %14501, %14499
  %14503 = add <4 x i16> %14502, %14414
  %14504 = add <4 x i16> %14499, %14351
  %14505 = add <4 x i16> %14504, %14435
  %14506 = add <4 x i16> %14505, %14456
  %14507 = add <4 x i16> %14506, %14477
  %14508 = add <4 x i16> %14507, %14498
  %14509 = shufflevector <4 x i16> %14503, <4 x i16> %14508, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %14510 = zext <8 x i16> %14509 to <8 x i32>
  %14511 = mul nuw nsw <8 x i32> %14510, <i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362>
  %14512 = shufflevector <8 x i32> %14511, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %14513 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %14512, i32 16)
  %14514 = shufflevector <8 x i32> %14511, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %14515 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %14514, i32 16)
  %14516 = shufflevector <4 x i16> %14513, <4 x i16> %14515, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %14517 = add <4 x i16> %14501, %14372
  %14518 = add <4 x i16> %14517, %14393
  %14519 = add <4 x i16> %14518, %14414
  %14520 = shufflevector <4 x i16> %14519, <4 x i16> %14508, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %14521 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %14516, <8 x i16> %14520) #11
  %14522 = lshr <8 x i16> %14521, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %14523 = shufflevector <8 x i16> %14522, <8 x i16> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %14524 = shufflevector <16 x i16> %14523, <16 x i16> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14525 = shufflevector <32 x i16> %14524, <32 x i16> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14526 = and i32 %a26, 15
  %14527 = zext i32 %14526 to i64
  %14528 = mul nsw i64 %10128, %14527
  %14529 = add nsw i64 %14528, %12894
  %14530 = getelementptr inbounds i16, i16* %blur_x58, i64 %14529
  %14531 = bitcast i16* %14530 to <8 x i16>*
  store <8 x i16> %13160, <8 x i16>* %14531, align 2, !tbaa !389
  %14532 = getelementptr inbounds i16, i16* %14530, i64 8
  %14533 = bitcast i16* %14532 to <8 x i16>*
  store <8 x i16> %13355, <8 x i16>* %14533, align 2, !tbaa !389
  %14534 = getelementptr inbounds i16, i16* %14530, i64 16
  %14535 = bitcast i16* %14534 to <8 x i16>*
  store <8 x i16> %13550, <8 x i16>* %14535, align 2, !tbaa !389
  %14536 = getelementptr inbounds i16, i16* %14530, i64 24
  %14537 = bitcast i16* %14536 to <8 x i16>*
  store <8 x i16> %13745, <8 x i16>* %14537, align 2, !tbaa !389
  %14538 = getelementptr inbounds i16, i16* %14530, i64 32
  %14539 = bitcast i16* %14538 to <8 x i16>*
  store <8 x i16> %13940, <8 x i16>* %14539, align 2, !tbaa !389
  %14540 = getelementptr inbounds i16, i16* %14530, i64 40
  %14541 = bitcast i16* %14540 to <8 x i16>*
  store <8 x i16> %14135, <8 x i16>* %14541, align 2, !tbaa !389
  %14542 = getelementptr inbounds i16, i16* %14530, i64 48
  %14543 = bitcast i16* %14542 to <8 x i16>*
  store <8 x i16> %14330, <8 x i16>* %14543, align 2, !tbaa !389
  %14544 = shufflevector <64 x i16> %14525, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %14545 = getelementptr inbounds i16, i16* %14530, i64 56
  %14546 = bitcast i16* %14545 to <8 x i16>*
  store <8 x i16> %14544, <8 x i16>* %14546, align 2, !tbaa !389
  %14547 = add nuw nsw i32 %blur_x.s0.y.yi95, 1
  %.not155 = icmp eq i32 %14547, 4
  br i1 %.not155, label %"end for blur_x.s0.y.yi94", label %"for blur_x.s0.y.yi93"

"end for blur_x.s0.y.yi94":                       ; preds = %"for blur_x.s0.y.yi93"
  %indvars.iv.next222 = add nuw nsw i64 %indvars.iv221, 1
  %.not156 = icmp eq i64 %indvars.iv.next222, %10140
  br i1 %.not156, label %"end for blur_x.s0.x.x.rebased89", label %"for blur_x.s0.x.x.rebased88"

after_bb97:                                       ; preds = %"for blur_y.s0.x.x107.preheader", %"end for blur_y.s0.x.x103", %"end for blur_x.s0.x.x.rebased89"
  %indvars.iv.next234 = add nuw nsw i64 %indvars.iv233, 1
  %.not152 = icmp eq i64 %indvars.iv.next234, 134
  br i1 %.not152, label %"end for blur_y.s0.y.yi.$n.rebased63", label %"for blur_y.s0.y.yi.$n.rebased62"

"consume blur_x100":                              ; preds = %"end for blur_x.s0.x.x.rebased89"
  %14548 = add nsw i64 %indvars.iv233, %10143
  br i1 %10131, label %"for blur_y.s0.x.x102.preheader", label %"end for blur_y.s0.x.x103", !prof !385

"for blur_y.s0.x.x102.preheader":                 ; preds = %"consume blur_x100"
  %14549 = trunc i64 %14548 to i32
  %14550 = insertelement <4 x i32> undef, i32 %14549, i32 0
  %14551 = shufflevector <4 x i32> %14550, <4 x i32> undef, <4 x i32> zeroinitializer
  %14552 = add <4 x i32> %14551, <i32 11, i32 10, i32 12, i32 13>
  %14553 = and <4 x i32> %14552, <i32 15, i32 15, i32 15, i32 15>
  %14554 = mul nsw <4 x i32> %14553, %10145
  %14555 = trunc i64 %14548 to i32
  %14556 = add i32 %14555, 14
  %14557 = and i32 %14556, 15
  %14558 = mul nsw i32 %14557, %10133
  %14559 = trunc i64 %14548 to i32
  %14560 = and i32 %14559, 15
  %14561 = mul nsw i32 %14560, %10133
  %14562 = trunc i64 %14548 to i32
  %14563 = add i32 %14562, 15
  %14564 = and i32 %14563, 15
  %14565 = mul nsw i32 %14564, %10133
  %14566 = add nsw i64 %14548, -6
  %14567 = mul nsw i64 %14566, %10134
  %14568 = sext <4 x i32> %14554 to <4 x i64>
  %14569 = sext i32 %14558 to i64
  %14570 = sext i32 %14561 to i64
  %14571 = sext i32 %14565 to i64
  br label %"for blur_y.s0.x.x102"

"for blur_y.s0.x.x102":                           ; preds = %"for blur_y.s0.x.x102.preheader", %"for blur_y.s0.x.x102"
  %indvars.iv223 = phi i64 [ 0, %"for blur_y.s0.x.x102.preheader" ], [ %indvars.iv.next224, %"for blur_y.s0.x.x102" ]
  %14572 = shl nsw i64 %indvars.iv223, 6
  %14573 = sub nsw i64 %14572, %10142
  %14574 = insertelement <4 x i64> poison, i64 %14573, i32 0
  %14575 = shufflevector <4 x i64> %14574, <4 x i64> undef, <4 x i32> zeroinitializer
  %14576 = add nsw <4 x i64> %14575, %14568
  %14577 = extractelement <4 x i64> %14576, i32 0
  %14578 = getelementptr inbounds i16, i16* %blur_x58, i64 %14577
  %14579 = getelementptr inbounds i16, i16* %14578, i64 64
  %14580 = bitcast i16* %14579 to <8 x i16>*
  %t346 = load <8 x i16>, <8 x i16>* %14580, align 2, !tbaa !389
  %14581 = extractelement <4 x i64> %14576, i32 1
  %14582 = getelementptr inbounds i16, i16* %blur_x58, i64 %14581
  %14583 = getelementptr inbounds i16, i16* %14582, i64 64
  %14584 = bitcast i16* %14583 to <8 x i16>*
  %t348 = load <8 x i16>, <8 x i16>* %14584, align 2, !tbaa !389
  %14585 = extractelement <4 x i64> %14576, i32 2
  %14586 = getelementptr inbounds i16, i16* %blur_x58, i64 %14585
  %14587 = getelementptr inbounds i16, i16* %14586, i64 64
  %14588 = bitcast i16* %14587 to <8 x i16>*
  %t350 = load <8 x i16>, <8 x i16>* %14588, align 2, !tbaa !389
  %14589 = extractelement <4 x i64> %14576, i32 3
  %14590 = getelementptr inbounds i16, i16* %blur_x58, i64 %14589
  %14591 = getelementptr inbounds i16, i16* %14590, i64 64
  %14592 = bitcast i16* %14591 to <8 x i16>*
  %t352 = load <8 x i16>, <8 x i16>* %14592, align 2, !tbaa !389
  %14593 = add nsw i64 %14573, %14569
  %14594 = getelementptr inbounds i16, i16* %blur_x58, i64 %14593
  %14595 = getelementptr inbounds i16, i16* %14594, i64 64
  %14596 = bitcast i16* %14595 to <8 x i16>*
  %t354 = load <8 x i16>, <8 x i16>* %14596, align 2, !tbaa !389
  %14597 = add nsw i64 %14573, %14570
  %14598 = getelementptr inbounds i16, i16* %blur_x58, i64 %14597
  %14599 = getelementptr inbounds i16, i16* %14598, i64 64
  %14600 = bitcast i16* %14599 to <8 x i16>*
  %t356 = load <8 x i16>, <8 x i16>* %14600, align 2, !tbaa !389
  %14601 = add nsw i64 %14573, %14571
  %14602 = getelementptr inbounds i16, i16* %blur_x58, i64 %14601
  %14603 = getelementptr inbounds i16, i16* %14602, i64 64
  %14604 = bitcast i16* %14603 to <8 x i16>*
  %t358 = load <8 x i16>, <8 x i16>* %14604, align 2, !tbaa !389
  %14605 = getelementptr inbounds i16, i16* %14578, i64 72
  %14606 = bitcast i16* %14605 to <8 x i16>*
  %t359 = load <8 x i16>, <8 x i16>* %14606, align 2, !tbaa !389
  %14607 = getelementptr inbounds i16, i16* %14582, i64 72
  %14608 = bitcast i16* %14607 to <8 x i16>*
  %t360 = load <8 x i16>, <8 x i16>* %14608, align 2, !tbaa !389
  %14609 = getelementptr inbounds i16, i16* %14586, i64 72
  %14610 = bitcast i16* %14609 to <8 x i16>*
  %t361 = load <8 x i16>, <8 x i16>* %14610, align 2, !tbaa !389
  %14611 = getelementptr inbounds i16, i16* %14590, i64 72
  %14612 = bitcast i16* %14611 to <8 x i16>*
  %t362 = load <8 x i16>, <8 x i16>* %14612, align 2, !tbaa !389
  %14613 = getelementptr inbounds i16, i16* %14594, i64 72
  %14614 = bitcast i16* %14613 to <8 x i16>*
  %t363 = load <8 x i16>, <8 x i16>* %14614, align 2, !tbaa !389
  %14615 = getelementptr inbounds i16, i16* %14598, i64 72
  %14616 = bitcast i16* %14615 to <8 x i16>*
  %t364 = load <8 x i16>, <8 x i16>* %14616, align 2, !tbaa !389
  %14617 = getelementptr inbounds i16, i16* %14602, i64 72
  %14618 = bitcast i16* %14617 to <8 x i16>*
  %t365 = load <8 x i16>, <8 x i16>* %14618, align 2, !tbaa !389
  %14619 = getelementptr inbounds i16, i16* %14578, i64 80
  %14620 = bitcast i16* %14619 to <8 x i16>*
  %t366 = load <8 x i16>, <8 x i16>* %14620, align 2, !tbaa !389
  %14621 = getelementptr inbounds i16, i16* %14582, i64 80
  %14622 = bitcast i16* %14621 to <8 x i16>*
  %t367 = load <8 x i16>, <8 x i16>* %14622, align 2, !tbaa !389
  %14623 = getelementptr inbounds i16, i16* %14586, i64 80
  %14624 = bitcast i16* %14623 to <8 x i16>*
  %t368 = load <8 x i16>, <8 x i16>* %14624, align 2, !tbaa !389
  %14625 = getelementptr inbounds i16, i16* %14590, i64 80
  %14626 = bitcast i16* %14625 to <8 x i16>*
  %t369 = load <8 x i16>, <8 x i16>* %14626, align 2, !tbaa !389
  %14627 = getelementptr inbounds i16, i16* %14594, i64 80
  %14628 = bitcast i16* %14627 to <8 x i16>*
  %t370 = load <8 x i16>, <8 x i16>* %14628, align 2, !tbaa !389
  %14629 = getelementptr inbounds i16, i16* %14598, i64 80
  %14630 = bitcast i16* %14629 to <8 x i16>*
  %t371 = load <8 x i16>, <8 x i16>* %14630, align 2, !tbaa !389
  %14631 = getelementptr inbounds i16, i16* %14602, i64 80
  %14632 = bitcast i16* %14631 to <8 x i16>*
  %t372 = load <8 x i16>, <8 x i16>* %14632, align 2, !tbaa !389
  %14633 = getelementptr inbounds i16, i16* %14578, i64 88
  %14634 = bitcast i16* %14633 to <8 x i16>*
  %t373 = load <8 x i16>, <8 x i16>* %14634, align 2, !tbaa !389
  %14635 = getelementptr inbounds i16, i16* %14582, i64 88
  %14636 = bitcast i16* %14635 to <8 x i16>*
  %t374 = load <8 x i16>, <8 x i16>* %14636, align 2, !tbaa !389
  %14637 = getelementptr inbounds i16, i16* %14586, i64 88
  %14638 = bitcast i16* %14637 to <8 x i16>*
  %t375 = load <8 x i16>, <8 x i16>* %14638, align 2, !tbaa !389
  %14639 = getelementptr inbounds i16, i16* %14590, i64 88
  %14640 = bitcast i16* %14639 to <8 x i16>*
  %t376 = load <8 x i16>, <8 x i16>* %14640, align 2, !tbaa !389
  %14641 = getelementptr inbounds i16, i16* %14594, i64 88
  %14642 = bitcast i16* %14641 to <8 x i16>*
  %t377 = load <8 x i16>, <8 x i16>* %14642, align 2, !tbaa !389
  %14643 = getelementptr inbounds i16, i16* %14598, i64 88
  %14644 = bitcast i16* %14643 to <8 x i16>*
  %t378 = load <8 x i16>, <8 x i16>* %14644, align 2, !tbaa !389
  %14645 = getelementptr inbounds i16, i16* %14602, i64 88
  %14646 = bitcast i16* %14645 to <8 x i16>*
  %t379 = load <8 x i16>, <8 x i16>* %14646, align 2, !tbaa !389
  %14647 = getelementptr inbounds i16, i16* %14578, i64 96
  %14648 = bitcast i16* %14647 to <8 x i16>*
  %t380 = load <8 x i16>, <8 x i16>* %14648, align 2, !tbaa !389
  %14649 = getelementptr inbounds i16, i16* %14582, i64 96
  %14650 = bitcast i16* %14649 to <8 x i16>*
  %t381 = load <8 x i16>, <8 x i16>* %14650, align 2, !tbaa !389
  %14651 = getelementptr inbounds i16, i16* %14586, i64 96
  %14652 = bitcast i16* %14651 to <8 x i16>*
  %t382 = load <8 x i16>, <8 x i16>* %14652, align 2, !tbaa !389
  %14653 = getelementptr inbounds i16, i16* %14590, i64 96
  %14654 = bitcast i16* %14653 to <8 x i16>*
  %t383 = load <8 x i16>, <8 x i16>* %14654, align 2, !tbaa !389
  %14655 = getelementptr inbounds i16, i16* %14594, i64 96
  %14656 = bitcast i16* %14655 to <8 x i16>*
  %t384 = load <8 x i16>, <8 x i16>* %14656, align 2, !tbaa !389
  %14657 = getelementptr inbounds i16, i16* %14598, i64 96
  %14658 = bitcast i16* %14657 to <8 x i16>*
  %t385 = load <8 x i16>, <8 x i16>* %14658, align 2, !tbaa !389
  %14659 = getelementptr inbounds i16, i16* %14602, i64 96
  %14660 = bitcast i16* %14659 to <8 x i16>*
  %t386 = load <8 x i16>, <8 x i16>* %14660, align 2, !tbaa !389
  %14661 = getelementptr inbounds i16, i16* %14578, i64 104
  %14662 = bitcast i16* %14661 to <8 x i16>*
  %t387 = load <8 x i16>, <8 x i16>* %14662, align 2, !tbaa !389
  %14663 = getelementptr inbounds i16, i16* %14582, i64 104
  %14664 = bitcast i16* %14663 to <8 x i16>*
  %t388 = load <8 x i16>, <8 x i16>* %14664, align 2, !tbaa !389
  %14665 = getelementptr inbounds i16, i16* %14586, i64 104
  %14666 = bitcast i16* %14665 to <8 x i16>*
  %t389 = load <8 x i16>, <8 x i16>* %14666, align 2, !tbaa !389
  %14667 = getelementptr inbounds i16, i16* %14590, i64 104
  %14668 = bitcast i16* %14667 to <8 x i16>*
  %t390 = load <8 x i16>, <8 x i16>* %14668, align 2, !tbaa !389
  %14669 = getelementptr inbounds i16, i16* %14594, i64 104
  %14670 = bitcast i16* %14669 to <8 x i16>*
  %t391 = load <8 x i16>, <8 x i16>* %14670, align 2, !tbaa !389
  %14671 = getelementptr inbounds i16, i16* %14598, i64 104
  %14672 = bitcast i16* %14671 to <8 x i16>*
  %t392 = load <8 x i16>, <8 x i16>* %14672, align 2, !tbaa !389
  %14673 = getelementptr inbounds i16, i16* %14602, i64 104
  %14674 = bitcast i16* %14673 to <8 x i16>*
  %t393 = load <8 x i16>, <8 x i16>* %14674, align 2, !tbaa !389
  %14675 = getelementptr inbounds i16, i16* %14578, i64 112
  %14676 = bitcast i16* %14675 to <8 x i16>*
  %t394 = load <8 x i16>, <8 x i16>* %14676, align 2, !tbaa !389
  %14677 = getelementptr inbounds i16, i16* %14582, i64 112
  %14678 = bitcast i16* %14677 to <8 x i16>*
  %t395 = load <8 x i16>, <8 x i16>* %14678, align 2, !tbaa !389
  %14679 = getelementptr inbounds i16, i16* %14586, i64 112
  %14680 = bitcast i16* %14679 to <8 x i16>*
  %t396 = load <8 x i16>, <8 x i16>* %14680, align 2, !tbaa !389
  %14681 = getelementptr inbounds i16, i16* %14590, i64 112
  %14682 = bitcast i16* %14681 to <8 x i16>*
  %t397 = load <8 x i16>, <8 x i16>* %14682, align 2, !tbaa !389
  %14683 = getelementptr inbounds i16, i16* %14594, i64 112
  %14684 = bitcast i16* %14683 to <8 x i16>*
  %t398 = load <8 x i16>, <8 x i16>* %14684, align 2, !tbaa !389
  %14685 = getelementptr inbounds i16, i16* %14598, i64 112
  %14686 = bitcast i16* %14685 to <8 x i16>*
  %t399 = load <8 x i16>, <8 x i16>* %14686, align 2, !tbaa !389
  %14687 = getelementptr inbounds i16, i16* %14602, i64 112
  %14688 = bitcast i16* %14687 to <8 x i16>*
  %t400 = load <8 x i16>, <8 x i16>* %14688, align 2, !tbaa !389
  %14689 = getelementptr inbounds i16, i16* %14578, i64 120
  %14690 = bitcast i16* %14689 to <8 x i16>*
  %t401 = load <8 x i16>, <8 x i16>* %14690, align 2, !tbaa !389
  %14691 = getelementptr inbounds i16, i16* %14582, i64 120
  %14692 = bitcast i16* %14691 to <8 x i16>*
  %t402 = load <8 x i16>, <8 x i16>* %14692, align 2, !tbaa !389
  %14693 = getelementptr inbounds i16, i16* %14586, i64 120
  %14694 = bitcast i16* %14693 to <8 x i16>*
  %t403 = load <8 x i16>, <8 x i16>* %14694, align 2, !tbaa !389
  %14695 = getelementptr inbounds i16, i16* %14590, i64 120
  %14696 = bitcast i16* %14695 to <8 x i16>*
  %t404 = load <8 x i16>, <8 x i16>* %14696, align 2, !tbaa !389
  %14697 = getelementptr inbounds i16, i16* %14594, i64 120
  %14698 = bitcast i16* %14697 to <8 x i16>*
  %t405 = load <8 x i16>, <8 x i16>* %14698, align 2, !tbaa !389
  %14699 = getelementptr inbounds i16, i16* %14598, i64 120
  %14700 = bitcast i16* %14699 to <8 x i16>*
  %t406 = load <8 x i16>, <8 x i16>* %14700, align 2, !tbaa !389
  %14701 = getelementptr inbounds i16, i16* %14602, i64 120
  %14702 = bitcast i16* %14701 to <8 x i16>*
  %t407 = load <8 x i16>, <8 x i16>* %14702, align 2, !tbaa !389
  %14703 = add <8 x i16> %t348, %t346
  %14704 = add <8 x i16> %14703, %t350
  %14705 = add <8 x i16> %14704, %t352
  %14706 = add <8 x i16> %14705, %t354
  %14707 = add <8 x i16> %14706, %t356
  %14708 = add <8 x i16> %14707, %t358
  %14709 = zext <8 x i16> %14708 to <8 x i32>
  %14710 = mul nuw nsw <8 x i32> %14709, <i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362>
  %14711 = shufflevector <8 x i32> %14710, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %14712 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %14711, i32 16)
  %14713 = shufflevector <8 x i32> %14710, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %14714 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %14713, i32 16)
  %14715 = shufflevector <4 x i16> %14712, <4 x i16> %14714, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %14716 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %14715, <8 x i16> %14708) #11
  %14717 = lshr <8 x i16> %14716, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %14718 = add <8 x i16> %t360, %t359
  %14719 = add <8 x i16> %14718, %t361
  %14720 = add <8 x i16> %14719, %t362
  %14721 = add <8 x i16> %14720, %t363
  %14722 = add <8 x i16> %14721, %t364
  %14723 = add <8 x i16> %14722, %t365
  %14724 = zext <8 x i16> %14723 to <8 x i32>
  %14725 = mul nuw nsw <8 x i32> %14724, <i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362>
  %14726 = shufflevector <8 x i32> %14725, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %14727 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %14726, i32 16)
  %14728 = shufflevector <8 x i32> %14725, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %14729 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %14728, i32 16)
  %14730 = shufflevector <4 x i16> %14727, <4 x i16> %14729, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %14731 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %14730, <8 x i16> %14723) #11
  %14732 = lshr <8 x i16> %14731, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %14733 = add <8 x i16> %t367, %t366
  %14734 = add <8 x i16> %14733, %t368
  %14735 = add <8 x i16> %14734, %t369
  %14736 = add <8 x i16> %14735, %t370
  %14737 = add <8 x i16> %14736, %t371
  %14738 = add <8 x i16> %14737, %t372
  %14739 = zext <8 x i16> %14738 to <8 x i32>
  %14740 = mul nuw nsw <8 x i32> %14739, <i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362>
  %14741 = shufflevector <8 x i32> %14740, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %14742 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %14741, i32 16)
  %14743 = shufflevector <8 x i32> %14740, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %14744 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %14743, i32 16)
  %14745 = shufflevector <4 x i16> %14742, <4 x i16> %14744, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %14746 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %14745, <8 x i16> %14738) #11
  %14747 = lshr <8 x i16> %14746, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %14748 = add <8 x i16> %t374, %t373
  %14749 = add <8 x i16> %14748, %t375
  %14750 = add <8 x i16> %14749, %t376
  %14751 = add <8 x i16> %14750, %t377
  %14752 = add <8 x i16> %14751, %t378
  %14753 = add <8 x i16> %14752, %t379
  %14754 = zext <8 x i16> %14753 to <8 x i32>
  %14755 = mul nuw nsw <8 x i32> %14754, <i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362>
  %14756 = shufflevector <8 x i32> %14755, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %14757 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %14756, i32 16)
  %14758 = shufflevector <8 x i32> %14755, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %14759 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %14758, i32 16)
  %14760 = shufflevector <4 x i16> %14757, <4 x i16> %14759, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %14761 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %14760, <8 x i16> %14753) #11
  %14762 = lshr <8 x i16> %14761, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %14763 = add <8 x i16> %t381, %t380
  %14764 = add <8 x i16> %14763, %t382
  %14765 = add <8 x i16> %14764, %t383
  %14766 = add <8 x i16> %14765, %t384
  %14767 = add <8 x i16> %14766, %t385
  %14768 = add <8 x i16> %14767, %t386
  %14769 = zext <8 x i16> %14768 to <8 x i32>
  %14770 = mul nuw nsw <8 x i32> %14769, <i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362>
  %14771 = shufflevector <8 x i32> %14770, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %14772 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %14771, i32 16)
  %14773 = shufflevector <8 x i32> %14770, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %14774 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %14773, i32 16)
  %14775 = shufflevector <4 x i16> %14772, <4 x i16> %14774, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %14776 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %14775, <8 x i16> %14768) #11
  %14777 = lshr <8 x i16> %14776, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %14778 = add <8 x i16> %t388, %t387
  %14779 = add <8 x i16> %14778, %t389
  %14780 = add <8 x i16> %14779, %t390
  %14781 = add <8 x i16> %14780, %t391
  %14782 = add <8 x i16> %14781, %t392
  %14783 = add <8 x i16> %14782, %t393
  %14784 = zext <8 x i16> %14783 to <8 x i32>
  %14785 = mul nuw nsw <8 x i32> %14784, <i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362>
  %14786 = shufflevector <8 x i32> %14785, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %14787 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %14786, i32 16)
  %14788 = shufflevector <8 x i32> %14785, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %14789 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %14788, i32 16)
  %14790 = shufflevector <4 x i16> %14787, <4 x i16> %14789, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %14791 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %14790, <8 x i16> %14783) #11
  %14792 = lshr <8 x i16> %14791, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %14793 = add <8 x i16> %t395, %t394
  %14794 = add <8 x i16> %14793, %t396
  %14795 = add <8 x i16> %14794, %t397
  %14796 = add <8 x i16> %14795, %t398
  %14797 = add <8 x i16> %14796, %t399
  %14798 = add <8 x i16> %14797, %t400
  %14799 = zext <8 x i16> %14798 to <8 x i32>
  %14800 = mul nuw nsw <8 x i32> %14799, <i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362>
  %14801 = shufflevector <8 x i32> %14800, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %14802 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %14801, i32 16)
  %14803 = shufflevector <8 x i32> %14800, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %14804 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %14803, i32 16)
  %14805 = shufflevector <4 x i16> %14802, <4 x i16> %14804, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %14806 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %14805, <8 x i16> %14798) #11
  %14807 = lshr <8 x i16> %14806, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %14808 = add <8 x i16> %t402, %t401
  %14809 = add <8 x i16> %14808, %t403
  %14810 = add <8 x i16> %14809, %t404
  %14811 = add <8 x i16> %14810, %t405
  %14812 = add <8 x i16> %14811, %t406
  %14813 = add <8 x i16> %14812, %t407
  %14814 = zext <8 x i16> %14813 to <8 x i32>
  %14815 = mul nuw nsw <8 x i32> %14814, <i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362>
  %14816 = shufflevector <8 x i32> %14815, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %14817 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %14816, i32 16)
  %14818 = shufflevector <8 x i32> %14815, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %14819 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %14818, i32 16)
  %14820 = shufflevector <4 x i16> %14817, <4 x i16> %14819, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %14821 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %14820, <8 x i16> %14813) #11
  %14822 = lshr <8 x i16> %14821, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %14823 = shufflevector <8 x i16> %14822, <8 x i16> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %14824 = shufflevector <16 x i16> %14823, <16 x i16> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14825 = shufflevector <32 x i16> %14824, <32 x i16> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14826 = add nsw i64 %14572, %14567
  %14827 = getelementptr inbounds i16, i16* %10135, i64 %14826
  %14828 = bitcast i16* %14827 to <8 x i16>*
  store <8 x i16> %14717, <8 x i16>* %14828, align 2, !tbaa !391
  %14829 = getelementptr inbounds i16, i16* %14827, i64 8
  %14830 = bitcast i16* %14829 to <8 x i16>*
  store <8 x i16> %14732, <8 x i16>* %14830, align 2, !tbaa !391
  %14831 = getelementptr inbounds i16, i16* %14827, i64 16
  %14832 = bitcast i16* %14831 to <8 x i16>*
  store <8 x i16> %14747, <8 x i16>* %14832, align 2, !tbaa !391
  %14833 = getelementptr inbounds i16, i16* %14827, i64 24
  %14834 = bitcast i16* %14833 to <8 x i16>*
  store <8 x i16> %14762, <8 x i16>* %14834, align 2, !tbaa !391
  %14835 = getelementptr inbounds i16, i16* %14827, i64 32
  %14836 = bitcast i16* %14835 to <8 x i16>*
  store <8 x i16> %14777, <8 x i16>* %14836, align 2, !tbaa !391
  %14837 = getelementptr inbounds i16, i16* %14827, i64 40
  %14838 = bitcast i16* %14837 to <8 x i16>*
  store <8 x i16> %14792, <8 x i16>* %14838, align 2, !tbaa !391
  %14839 = getelementptr inbounds i16, i16* %14827, i64 48
  %14840 = bitcast i16* %14839 to <8 x i16>*
  store <8 x i16> %14807, <8 x i16>* %14840, align 2, !tbaa !391
  %14841 = shufflevector <64 x i16> %14825, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %14842 = getelementptr inbounds i16, i16* %14827, i64 56
  %14843 = bitcast i16* %14842 to <8 x i16>*
  store <8 x i16> %14841, <8 x i16>* %14843, align 2, !tbaa !391
  %indvars.iv.next224 = add nuw nsw i64 %indvars.iv223, 1
  %.not154 = icmp eq i64 %indvars.iv.next224, %10141
  br i1 %.not154, label %"end for blur_y.s0.x.x103", label %"for blur_y.s0.x.x102"

"end for blur_y.s0.x.x103":                       ; preds = %"for blur_y.s0.x.x102", %"consume blur_x100"
  br i1 %10136, label %"for blur_y.s0.x.x107.preheader", label %after_bb97, !prof !385

"for blur_y.s0.x.x107.preheader":                 ; preds = %"end for blur_y.s0.x.x103"
  %14844 = trunc i64 %14548 to i32
  %14845 = add i32 %14844, 11
  %14846 = and i32 %14845, 15
  %14847 = mul nsw i32 %14846, %10133
  %t408 = add nsw i32 %14847, %t26350
  %14848 = sext i32 %t408 to i64
  %14849 = getelementptr inbounds i16, i16* %blur_x58, i64 %14848
  %14850 = getelementptr inbounds i16, i16* %14849, i64 -64
  %14851 = bitcast i16* %14850 to <8 x i16>*
  %t409 = load <8 x i16>, <8 x i16>* %14851, align 2, !tbaa !389
  %14852 = trunc i64 %14548 to i32
  %14853 = add i32 %14852, 10
  %14854 = and i32 %14853, 15
  %14855 = mul nsw i32 %14854, %10133
  %t410 = add nsw i32 %14855, %t26350
  %14856 = sext i32 %t410 to i64
  %14857 = getelementptr inbounds i16, i16* %blur_x58, i64 %14856
  %14858 = getelementptr inbounds i16, i16* %14857, i64 -64
  %14859 = bitcast i16* %14858 to <8 x i16>*
  %t411 = load <8 x i16>, <8 x i16>* %14859, align 2, !tbaa !389
  %14860 = trunc i64 %14548 to i32
  %14861 = add i32 %14860, 12
  %14862 = and i32 %14861, 15
  %14863 = mul nsw i32 %14862, %10133
  %t412 = add nsw i32 %14863, %t26350
  %14864 = sext i32 %t412 to i64
  %14865 = getelementptr inbounds i16, i16* %blur_x58, i64 %14864
  %14866 = getelementptr inbounds i16, i16* %14865, i64 -64
  %14867 = bitcast i16* %14866 to <8 x i16>*
  %t413 = load <8 x i16>, <8 x i16>* %14867, align 2, !tbaa !389
  %14868 = trunc i64 %14548 to i32
  %14869 = add i32 %14868, 13
  %14870 = and i32 %14869, 15
  %14871 = mul nsw i32 %14870, %10133
  %t414 = add nsw i32 %14871, %t26350
  %14872 = sext i32 %t414 to i64
  %14873 = getelementptr inbounds i16, i16* %blur_x58, i64 %14872
  %14874 = getelementptr inbounds i16, i16* %14873, i64 -64
  %14875 = bitcast i16* %14874 to <8 x i16>*
  %t415 = load <8 x i16>, <8 x i16>* %14875, align 2, !tbaa !389
  %14876 = trunc i64 %14548 to i32
  %14877 = add i32 %14876, 14
  %14878 = and i32 %14877, 15
  %14879 = mul nsw i32 %14878, %10133
  %t416 = add nsw i32 %14879, %t26350
  %14880 = sext i32 %t416 to i64
  %14881 = getelementptr inbounds i16, i16* %blur_x58, i64 %14880
  %14882 = getelementptr inbounds i16, i16* %14881, i64 -64
  %14883 = bitcast i16* %14882 to <8 x i16>*
  %t417 = load <8 x i16>, <8 x i16>* %14883, align 2, !tbaa !389
  %14884 = trunc i64 %14548 to i32
  %14885 = and i32 %14884, 15
  %14886 = mul nsw i32 %14885, %10133
  %t418 = add nsw i32 %14886, %t26350
  %14887 = sext i32 %t418 to i64
  %14888 = getelementptr inbounds i16, i16* %blur_x58, i64 %14887
  %14889 = getelementptr inbounds i16, i16* %14888, i64 -64
  %14890 = bitcast i16* %14889 to <8 x i16>*
  %t419 = load <8 x i16>, <8 x i16>* %14890, align 2, !tbaa !389
  %14891 = trunc i64 %14548 to i32
  %14892 = add i32 %14891, 15
  %14893 = and i32 %14892, 15
  %14894 = mul nsw i32 %14893, %10133
  %t420 = add nsw i32 %14894, %t26350
  %14895 = sext i32 %t420 to i64
  %14896 = getelementptr inbounds i16, i16* %blur_x58, i64 %14895
  %14897 = getelementptr inbounds i16, i16* %14896, i64 -64
  %14898 = bitcast i16* %14897 to <8 x i16>*
  %t421 = load <8 x i16>, <8 x i16>* %14898, align 2, !tbaa !389
  %14899 = getelementptr inbounds i16, i16* %14849, i64 -56
  %14900 = bitcast i16* %14899 to <8 x i16>*
  %t422 = load <8 x i16>, <8 x i16>* %14900, align 2, !tbaa !389
  %14901 = getelementptr inbounds i16, i16* %14857, i64 -56
  %14902 = bitcast i16* %14901 to <8 x i16>*
  %t423 = load <8 x i16>, <8 x i16>* %14902, align 2, !tbaa !389
  %14903 = getelementptr inbounds i16, i16* %14865, i64 -56
  %14904 = bitcast i16* %14903 to <8 x i16>*
  %t424 = load <8 x i16>, <8 x i16>* %14904, align 2, !tbaa !389
  %14905 = getelementptr inbounds i16, i16* %14873, i64 -56
  %14906 = bitcast i16* %14905 to <8 x i16>*
  %t425 = load <8 x i16>, <8 x i16>* %14906, align 2, !tbaa !389
  %14907 = getelementptr inbounds i16, i16* %14881, i64 -56
  %14908 = bitcast i16* %14907 to <8 x i16>*
  %t426 = load <8 x i16>, <8 x i16>* %14908, align 2, !tbaa !389
  %14909 = getelementptr inbounds i16, i16* %14888, i64 -56
  %14910 = bitcast i16* %14909 to <8 x i16>*
  %t427 = load <8 x i16>, <8 x i16>* %14910, align 2, !tbaa !389
  %14911 = getelementptr inbounds i16, i16* %14896, i64 -56
  %14912 = bitcast i16* %14911 to <8 x i16>*
  %t428 = load <8 x i16>, <8 x i16>* %14912, align 2, !tbaa !389
  %14913 = getelementptr inbounds i16, i16* %14849, i64 -48
  %14914 = bitcast i16* %14913 to <8 x i16>*
  %t429 = load <8 x i16>, <8 x i16>* %14914, align 2, !tbaa !389
  %14915 = getelementptr inbounds i16, i16* %14857, i64 -48
  %14916 = bitcast i16* %14915 to <8 x i16>*
  %t430 = load <8 x i16>, <8 x i16>* %14916, align 2, !tbaa !389
  %14917 = getelementptr inbounds i16, i16* %14865, i64 -48
  %14918 = bitcast i16* %14917 to <8 x i16>*
  %t431 = load <8 x i16>, <8 x i16>* %14918, align 2, !tbaa !389
  %14919 = getelementptr inbounds i16, i16* %14873, i64 -48
  %14920 = bitcast i16* %14919 to <8 x i16>*
  %t432 = load <8 x i16>, <8 x i16>* %14920, align 2, !tbaa !389
  %14921 = getelementptr inbounds i16, i16* %14881, i64 -48
  %14922 = bitcast i16* %14921 to <8 x i16>*
  %t433 = load <8 x i16>, <8 x i16>* %14922, align 2, !tbaa !389
  %14923 = getelementptr inbounds i16, i16* %14888, i64 -48
  %14924 = bitcast i16* %14923 to <8 x i16>*
  %t434 = load <8 x i16>, <8 x i16>* %14924, align 2, !tbaa !389
  %14925 = getelementptr inbounds i16, i16* %14896, i64 -48
  %14926 = bitcast i16* %14925 to <8 x i16>*
  %t435 = load <8 x i16>, <8 x i16>* %14926, align 2, !tbaa !389
  %14927 = getelementptr inbounds i16, i16* %14849, i64 -40
  %14928 = bitcast i16* %14927 to <8 x i16>*
  %t436 = load <8 x i16>, <8 x i16>* %14928, align 2, !tbaa !389
  %14929 = getelementptr inbounds i16, i16* %14857, i64 -40
  %14930 = bitcast i16* %14929 to <8 x i16>*
  %t437 = load <8 x i16>, <8 x i16>* %14930, align 2, !tbaa !389
  %14931 = getelementptr inbounds i16, i16* %14865, i64 -40
  %14932 = bitcast i16* %14931 to <8 x i16>*
  %t438 = load <8 x i16>, <8 x i16>* %14932, align 2, !tbaa !389
  %14933 = getelementptr inbounds i16, i16* %14873, i64 -40
  %14934 = bitcast i16* %14933 to <8 x i16>*
  %t439 = load <8 x i16>, <8 x i16>* %14934, align 2, !tbaa !389
  %14935 = getelementptr inbounds i16, i16* %14881, i64 -40
  %14936 = bitcast i16* %14935 to <8 x i16>*
  %t440 = load <8 x i16>, <8 x i16>* %14936, align 2, !tbaa !389
  %14937 = getelementptr inbounds i16, i16* %14888, i64 -40
  %14938 = bitcast i16* %14937 to <8 x i16>*
  %t441 = load <8 x i16>, <8 x i16>* %14938, align 2, !tbaa !389
  %14939 = getelementptr inbounds i16, i16* %14896, i64 -40
  %14940 = bitcast i16* %14939 to <8 x i16>*
  %t442 = load <8 x i16>, <8 x i16>* %14940, align 2, !tbaa !389
  %14941 = getelementptr inbounds i16, i16* %14849, i64 -32
  %14942 = bitcast i16* %14941 to <8 x i16>*
  %t443 = load <8 x i16>, <8 x i16>* %14942, align 2, !tbaa !389
  %14943 = getelementptr inbounds i16, i16* %14857, i64 -32
  %14944 = bitcast i16* %14943 to <8 x i16>*
  %t444 = load <8 x i16>, <8 x i16>* %14944, align 2, !tbaa !389
  %14945 = getelementptr inbounds i16, i16* %14865, i64 -32
  %14946 = bitcast i16* %14945 to <8 x i16>*
  %t445 = load <8 x i16>, <8 x i16>* %14946, align 2, !tbaa !389
  %14947 = getelementptr inbounds i16, i16* %14873, i64 -32
  %14948 = bitcast i16* %14947 to <8 x i16>*
  %t446 = load <8 x i16>, <8 x i16>* %14948, align 2, !tbaa !389
  %14949 = getelementptr inbounds i16, i16* %14881, i64 -32
  %14950 = bitcast i16* %14949 to <8 x i16>*
  %t447 = load <8 x i16>, <8 x i16>* %14950, align 2, !tbaa !389
  %14951 = getelementptr inbounds i16, i16* %14888, i64 -32
  %14952 = bitcast i16* %14951 to <8 x i16>*
  %t448 = load <8 x i16>, <8 x i16>* %14952, align 2, !tbaa !389
  %14953 = getelementptr inbounds i16, i16* %14896, i64 -32
  %14954 = bitcast i16* %14953 to <8 x i16>*
  %t449 = load <8 x i16>, <8 x i16>* %14954, align 2, !tbaa !389
  %14955 = getelementptr inbounds i16, i16* %14849, i64 -24
  %14956 = bitcast i16* %14955 to <8 x i16>*
  %t450 = load <8 x i16>, <8 x i16>* %14956, align 2, !tbaa !389
  %14957 = getelementptr inbounds i16, i16* %14857, i64 -24
  %14958 = bitcast i16* %14957 to <8 x i16>*
  %t451 = load <8 x i16>, <8 x i16>* %14958, align 2, !tbaa !389
  %14959 = getelementptr inbounds i16, i16* %14865, i64 -24
  %14960 = bitcast i16* %14959 to <8 x i16>*
  %t452 = load <8 x i16>, <8 x i16>* %14960, align 2, !tbaa !389
  %14961 = getelementptr inbounds i16, i16* %14873, i64 -24
  %14962 = bitcast i16* %14961 to <8 x i16>*
  %t453 = load <8 x i16>, <8 x i16>* %14962, align 2, !tbaa !389
  %14963 = getelementptr inbounds i16, i16* %14881, i64 -24
  %14964 = bitcast i16* %14963 to <8 x i16>*
  %t454 = load <8 x i16>, <8 x i16>* %14964, align 2, !tbaa !389
  %14965 = getelementptr inbounds i16, i16* %14888, i64 -24
  %14966 = bitcast i16* %14965 to <8 x i16>*
  %t455 = load <8 x i16>, <8 x i16>* %14966, align 2, !tbaa !389
  %14967 = getelementptr inbounds i16, i16* %14896, i64 -24
  %14968 = bitcast i16* %14967 to <8 x i16>*
  %t456 = load <8 x i16>, <8 x i16>* %14968, align 2, !tbaa !389
  %14969 = getelementptr inbounds i16, i16* %14849, i64 -16
  %14970 = bitcast i16* %14969 to <8 x i16>*
  %t457 = load <8 x i16>, <8 x i16>* %14970, align 2, !tbaa !389
  %14971 = getelementptr inbounds i16, i16* %14857, i64 -16
  %14972 = bitcast i16* %14971 to <8 x i16>*
  %t458 = load <8 x i16>, <8 x i16>* %14972, align 2, !tbaa !389
  %14973 = getelementptr inbounds i16, i16* %14865, i64 -16
  %14974 = bitcast i16* %14973 to <8 x i16>*
  %t459 = load <8 x i16>, <8 x i16>* %14974, align 2, !tbaa !389
  %14975 = getelementptr inbounds i16, i16* %14873, i64 -16
  %14976 = bitcast i16* %14975 to <8 x i16>*
  %t460 = load <8 x i16>, <8 x i16>* %14976, align 2, !tbaa !389
  %14977 = getelementptr inbounds i16, i16* %14881, i64 -16
  %14978 = bitcast i16* %14977 to <8 x i16>*
  %t461 = load <8 x i16>, <8 x i16>* %14978, align 2, !tbaa !389
  %14979 = getelementptr inbounds i16, i16* %14888, i64 -16
  %14980 = bitcast i16* %14979 to <8 x i16>*
  %t462 = load <8 x i16>, <8 x i16>* %14980, align 2, !tbaa !389
  %14981 = getelementptr inbounds i16, i16* %14896, i64 -16
  %14982 = bitcast i16* %14981 to <8 x i16>*
  %t463 = load <8 x i16>, <8 x i16>* %14982, align 2, !tbaa !389
  %14983 = getelementptr inbounds i16, i16* %14849, i64 -8
  %14984 = bitcast i16* %14983 to <8 x i16>*
  %t464 = load <8 x i16>, <8 x i16>* %14984, align 2, !tbaa !389
  %14985 = getelementptr inbounds i16, i16* %14857, i64 -8
  %14986 = bitcast i16* %14985 to <8 x i16>*
  %t465 = load <8 x i16>, <8 x i16>* %14986, align 2, !tbaa !389
  %14987 = getelementptr inbounds i16, i16* %14865, i64 -8
  %14988 = bitcast i16* %14987 to <8 x i16>*
  %t466 = load <8 x i16>, <8 x i16>* %14988, align 2, !tbaa !389
  %14989 = getelementptr inbounds i16, i16* %14873, i64 -8
  %14990 = bitcast i16* %14989 to <8 x i16>*
  %t467 = load <8 x i16>, <8 x i16>* %14990, align 2, !tbaa !389
  %14991 = getelementptr inbounds i16, i16* %14881, i64 -8
  %14992 = bitcast i16* %14991 to <8 x i16>*
  %t468 = load <8 x i16>, <8 x i16>* %14992, align 2, !tbaa !389
  %14993 = getelementptr inbounds i16, i16* %14888, i64 -8
  %14994 = bitcast i16* %14993 to <8 x i16>*
  %t469 = load <8 x i16>, <8 x i16>* %14994, align 2, !tbaa !389
  %14995 = getelementptr inbounds i16, i16* %14896, i64 -8
  %14996 = bitcast i16* %14995 to <8 x i16>*
  %t470 = load <8 x i16>, <8 x i16>* %14996, align 2, !tbaa !389
  %14997 = add <8 x i16> %t411, %t409
  %14998 = add <8 x i16> %14997, %t413
  %14999 = add <8 x i16> %14998, %t415
  %15000 = add <8 x i16> %14999, %t417
  %15001 = add <8 x i16> %15000, %t419
  %15002 = add <8 x i16> %15001, %t421
  %15003 = zext <8 x i16> %15002 to <8 x i32>
  %15004 = mul nuw nsw <8 x i32> %15003, <i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362>
  %15005 = shufflevector <8 x i32> %15004, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %15006 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %15005, i32 16)
  %15007 = shufflevector <8 x i32> %15004, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %15008 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %15007, i32 16)
  %15009 = shufflevector <4 x i16> %15006, <4 x i16> %15008, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %15010 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %15009, <8 x i16> %15002) #11
  %15011 = add <8 x i16> %t423, %t422
  %15012 = add <8 x i16> %15011, %t424
  %15013 = add <8 x i16> %15012, %t425
  %15014 = add <8 x i16> %15013, %t426
  %15015 = add <8 x i16> %15014, %t427
  %15016 = add <8 x i16> %15015, %t428
  %15017 = zext <8 x i16> %15016 to <8 x i32>
  %15018 = mul nuw nsw <8 x i32> %15017, <i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362>
  %15019 = shufflevector <8 x i32> %15018, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %15020 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %15019, i32 16)
  %15021 = shufflevector <8 x i32> %15018, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %15022 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %15021, i32 16)
  %15023 = shufflevector <4 x i16> %15020, <4 x i16> %15022, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %15024 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %15023, <8 x i16> %15016) #11
  %15025 = add <8 x i16> %t430, %t429
  %15026 = add <8 x i16> %15025, %t431
  %15027 = add <8 x i16> %15026, %t432
  %15028 = add <8 x i16> %15027, %t433
  %15029 = add <8 x i16> %15028, %t434
  %15030 = add <8 x i16> %15029, %t435
  %15031 = zext <8 x i16> %15030 to <8 x i32>
  %15032 = mul nuw nsw <8 x i32> %15031, <i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362>
  %15033 = shufflevector <8 x i32> %15032, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %15034 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %15033, i32 16)
  %15035 = shufflevector <8 x i32> %15032, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %15036 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %15035, i32 16)
  %15037 = shufflevector <4 x i16> %15034, <4 x i16> %15036, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %15038 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %15037, <8 x i16> %15030) #11
  %15039 = add <8 x i16> %t437, %t436
  %15040 = add <8 x i16> %15039, %t438
  %15041 = add <8 x i16> %15040, %t439
  %15042 = add <8 x i16> %15041, %t440
  %15043 = add <8 x i16> %15042, %t441
  %15044 = add <8 x i16> %15043, %t442
  %15045 = zext <8 x i16> %15044 to <8 x i32>
  %15046 = mul nuw nsw <8 x i32> %15045, <i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362>
  %15047 = shufflevector <8 x i32> %15046, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %15048 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %15047, i32 16)
  %15049 = shufflevector <8 x i32> %15046, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %15050 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %15049, i32 16)
  %15051 = shufflevector <4 x i16> %15048, <4 x i16> %15050, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %15052 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %15051, <8 x i16> %15044) #11
  %15053 = add <8 x i16> %t444, %t443
  %15054 = add <8 x i16> %15053, %t445
  %15055 = add <8 x i16> %15054, %t446
  %15056 = add <8 x i16> %15055, %t447
  %15057 = add <8 x i16> %15056, %t448
  %15058 = add <8 x i16> %15057, %t449
  %15059 = zext <8 x i16> %15058 to <8 x i32>
  %15060 = mul nuw nsw <8 x i32> %15059, <i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362>
  %15061 = shufflevector <8 x i32> %15060, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %15062 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %15061, i32 16)
  %15063 = shufflevector <8 x i32> %15060, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %15064 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %15063, i32 16)
  %15065 = shufflevector <4 x i16> %15062, <4 x i16> %15064, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %15066 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %15065, <8 x i16> %15058) #11
  %15067 = add <8 x i16> %t451, %t450
  %15068 = add <8 x i16> %15067, %t452
  %15069 = add <8 x i16> %15068, %t453
  %15070 = add <8 x i16> %15069, %t454
  %15071 = add <8 x i16> %15070, %t455
  %15072 = add <8 x i16> %15071, %t456
  %15073 = zext <8 x i16> %15072 to <8 x i32>
  %15074 = mul nuw nsw <8 x i32> %15073, <i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362>
  %15075 = shufflevector <8 x i32> %15074, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %15076 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %15075, i32 16)
  %15077 = shufflevector <8 x i32> %15074, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %15078 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %15077, i32 16)
  %15079 = shufflevector <4 x i16> %15076, <4 x i16> %15078, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %15080 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %15079, <8 x i16> %15072) #11
  %15081 = add <8 x i16> %t458, %t457
  %15082 = add <8 x i16> %15081, %t459
  %15083 = add <8 x i16> %15082, %t460
  %15084 = add <8 x i16> %15083, %t461
  %15085 = add <8 x i16> %15084, %t462
  %15086 = add <8 x i16> %15085, %t463
  %15087 = zext <8 x i16> %15086 to <8 x i32>
  %15088 = mul nuw nsw <8 x i32> %15087, <i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362>
  %15089 = shufflevector <8 x i32> %15088, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %15090 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %15089, i32 16)
  %15091 = shufflevector <8 x i32> %15088, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %15092 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %15091, i32 16)
  %15093 = shufflevector <4 x i16> %15090, <4 x i16> %15092, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %15094 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %15093, <8 x i16> %15086) #11
  %15095 = add <8 x i16> %t465, %t464
  %15096 = add <8 x i16> %15095, %t466
  %15097 = add <8 x i16> %15096, %t467
  %15098 = add <8 x i16> %15097, %t468
  %15099 = add <8 x i16> %15098, %t469
  %15100 = add <8 x i16> %15099, %t470
  %15101 = zext <8 x i16> %15100 to <8 x i32>
  %15102 = mul nuw nsw <8 x i32> %15101, <i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362>
  %15103 = shufflevector <8 x i32> %15102, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %15104 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %15103, i32 16)
  %15105 = shufflevector <8 x i32> %15102, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %15106 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %15105, i32 16)
  %15107 = shufflevector <4 x i16> %15104, <4 x i16> %15106, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %15108 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %15107, <8 x i16> %15100) #11
  %15109 = lshr <8 x i16> %15108, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %15110 = shufflevector <8 x i16> %15109, <8 x i16> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %15111 = shufflevector <16 x i16> %15110, <16 x i16> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15112 = add nsw i64 %14548, -6
  %15113 = mul nsw i64 %15112, %10134
  %15114 = add nsw i64 %15113, %10137
  %15115 = getelementptr inbounds i16, i16* %10135, i64 %15114
  %15116 = getelementptr inbounds i16, i16* %15115, i64 -64
  %15117 = getelementptr inbounds i16, i16* %15115, i64 -56
  %15118 = getelementptr inbounds i16, i16* %15115, i64 -48
  %15119 = getelementptr inbounds i16, i16* %15115, i64 -40
  %15120 = getelementptr inbounds i16, i16* %15115, i64 -32
  %15121 = getelementptr inbounds i16, i16* %15115, i64 -24
  %15122 = getelementptr inbounds i16, i16* %15115, i64 -16
  %15123 = bitcast i16* %15122 to <8 x i16>*
  %15124 = getelementptr inbounds i16, i16* %15115, i64 -8
  %15125 = lshr <8 x i16> %15010, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %15126 = lshr <8 x i16> %15024, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %15127 = lshr <8 x i16> %15038, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %15128 = lshr <8 x i16> %15052, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %15129 = lshr <8 x i16> %15066, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %15130 = lshr <8 x i16> %15080, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %15131 = lshr <8 x i16> %15094, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %15132 = shufflevector <32 x i16> %15111, <32 x i16> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15133 = bitcast i16* %15116 to <8 x i16>*
  %15134 = bitcast i16* %15117 to <8 x i16>*
  %15135 = bitcast i16* %15118 to <8 x i16>*
  %15136 = bitcast i16* %15119 to <8 x i16>*
  %15137 = bitcast i16* %15120 to <8 x i16>*
  %15138 = bitcast i16* %15121 to <8 x i16>*
  %15139 = shufflevector <64 x i16> %15132, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %15140 = bitcast i16* %15124 to <8 x i16>*
  store <8 x i16> %15125, <8 x i16>* %15133, align 2, !tbaa !391
  store <8 x i16> %15126, <8 x i16>* %15134, align 2, !tbaa !391
  store <8 x i16> %15127, <8 x i16>* %15135, align 2, !tbaa !391
  store <8 x i16> %15128, <8 x i16>* %15136, align 2, !tbaa !391
  store <8 x i16> %15129, <8 x i16>* %15137, align 2, !tbaa !391
  store <8 x i16> %15130, <8 x i16>* %15138, align 2, !tbaa !391
  store <8 x i16> %15131, <8 x i16>* %15123, align 2, !tbaa !391
  store <8 x i16> %15139, <8 x i16>* %15140, align 2, !tbaa !391
  br label %after_bb97

"for blur_y.s0.y.yi.$n.rebased113":               ; preds = %next_bb56, %after_bb127
  %indvars.iv214 = phi i64 [ 0, %next_bb56 ], [ %indvars.iv.next215, %after_bb127 ]
  %15141 = add nsw i64 %indvars.iv214, %10160
  br i1 %10147, label %"for blur_x.s0.x.x118.preheader", label %"end for blur_x.s0.x.x119", !prof !385

"for blur_x.s0.x.x118.preheader":                 ; preds = %"for blur_y.s0.y.yi.$n.rebased113"
  %15142 = trunc i64 %15141 to i32
  br label %"for blur_x.s0.x.x118"

"end for blur_y.s0.y.yi.$n.rebased114":           ; preds = %after_bb127
  %tobool.not.i184.not = icmp eq i8* %49, null
  br i1 %tobool.not.i184.not, label %after_bb54, label %if.then.i185

if.then.i185:                                     ; preds = %"end for blur_y.s0.y.yi.$n.rebased114"
  tail call void @halide_free(i8* %__user_context, i8* nonnull %49) #14
  br label %after_bb54

"for blur_x.s0.x.x118":                           ; preds = %"for blur_x.s0.x.x118.preheader", %"end for blur_x.s0.y.yi124"
  %indvars.iv212 = phi i64 [ 0, %"for blur_x.s0.x.x118.preheader" ], [ %indvars.iv.next213, %"end for blur_x.s0.y.yi124" ]
  %15143 = trunc i64 %indvars.iv212 to i32
  %15144 = shl nsw i32 %15143, 6
  %blur_x.s0.x.xi.base.s121 = add nsw i32 %15144, %t26552
  %15145 = add nsw i32 %blur_x.s0.x.xi.base.s121, -63
  %15146 = insertelement <4 x i32> undef, i32 %15145, i32 0
  %15147 = shufflevector <4 x i32> %15146, <4 x i32> undef, <4 x i32> zeroinitializer
  %15148 = add nsw <4 x i32> %15147, <i32 0, i32 1, i32 2, i32 3>
  %15149 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15148, <4 x i32> %10150) #11
  %15150 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15149, <4 x i32> zeroinitializer) #11
  %15151 = add nsw i32 %blur_x.s0.x.xi.base.s121, -59
  %15152 = insertelement <4 x i32> undef, i32 %15151, i32 0
  %15153 = shufflevector <4 x i32> %15152, <4 x i32> undef, <4 x i32> zeroinitializer
  %15154 = add nsw <4 x i32> %15153, <i32 0, i32 1, i32 2, i32 3>
  %15155 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15154, <4 x i32> %10150) #11
  %15156 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15155, <4 x i32> zeroinitializer) #11
  %15157 = add nsw i32 %blur_x.s0.x.xi.base.s121, -64
  %15158 = insertelement <4 x i32> undef, i32 %15157, i32 0
  %15159 = shufflevector <4 x i32> %15158, <4 x i32> undef, <4 x i32> zeroinitializer
  %15160 = add nsw <4 x i32> %15159, <i32 0, i32 1, i32 2, i32 3>
  %15161 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15160, <4 x i32> %10150) #11
  %15162 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15161, <4 x i32> zeroinitializer) #11
  %15163 = add nsw i32 %blur_x.s0.x.xi.base.s121, -60
  %15164 = insertelement <4 x i32> undef, i32 %15163, i32 0
  %15165 = shufflevector <4 x i32> %15164, <4 x i32> undef, <4 x i32> zeroinitializer
  %15166 = add nsw <4 x i32> %15165, <i32 0, i32 1, i32 2, i32 3>
  %15167 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15166, <4 x i32> %10150) #11
  %15168 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15167, <4 x i32> zeroinitializer) #11
  %15169 = add nsw i32 %blur_x.s0.x.xi.base.s121, -62
  %15170 = insertelement <4 x i32> undef, i32 %15169, i32 0
  %15171 = shufflevector <4 x i32> %15170, <4 x i32> undef, <4 x i32> zeroinitializer
  %15172 = add nsw <4 x i32> %15171, <i32 0, i32 1, i32 2, i32 3>
  %15173 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15172, <4 x i32> %10150) #11
  %15174 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15173, <4 x i32> zeroinitializer) #11
  %15175 = add nsw i32 %blur_x.s0.x.xi.base.s121, -58
  %15176 = insertelement <4 x i32> undef, i32 %15175, i32 0
  %15177 = shufflevector <4 x i32> %15176, <4 x i32> undef, <4 x i32> zeroinitializer
  %15178 = add nsw <4 x i32> %15177, <i32 0, i32 1, i32 2, i32 3>
  %15179 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15178, <4 x i32> %10150) #11
  %15180 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15179, <4 x i32> zeroinitializer) #11
  %15181 = add nsw i32 %blur_x.s0.x.xi.base.s121, -61
  %15182 = insertelement <4 x i32> undef, i32 %15181, i32 0
  %15183 = shufflevector <4 x i32> %15182, <4 x i32> undef, <4 x i32> zeroinitializer
  %15184 = add nsw <4 x i32> %15183, <i32 0, i32 1, i32 2, i32 3>
  %15185 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15184, <4 x i32> %10150) #11
  %15186 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15185, <4 x i32> zeroinitializer) #11
  %15187 = add nsw i32 %blur_x.s0.x.xi.base.s121, -57
  %15188 = insertelement <4 x i32> undef, i32 %15187, i32 0
  %15189 = shufflevector <4 x i32> %15188, <4 x i32> undef, <4 x i32> zeroinitializer
  %15190 = add nsw <4 x i32> %15189, <i32 0, i32 1, i32 2, i32 3>
  %15191 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15190, <4 x i32> %10150) #11
  %15192 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15191, <4 x i32> zeroinitializer) #11
  %15193 = add nsw i32 %blur_x.s0.x.xi.base.s121, -56
  %15194 = insertelement <4 x i32> undef, i32 %15193, i32 0
  %15195 = shufflevector <4 x i32> %15194, <4 x i32> undef, <4 x i32> zeroinitializer
  %15196 = add nsw <4 x i32> %15195, <i32 0, i32 1, i32 2, i32 3>
  %15197 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15196, <4 x i32> %10150) #11
  %15198 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15197, <4 x i32> zeroinitializer) #11
  %15199 = add nsw i32 %blur_x.s0.x.xi.base.s121, -54
  %15200 = insertelement <4 x i32> undef, i32 %15199, i32 0
  %15201 = shufflevector <4 x i32> %15200, <4 x i32> undef, <4 x i32> zeroinitializer
  %15202 = add nsw <4 x i32> %15201, <i32 0, i32 1, i32 2, i32 3>
  %15203 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15202, <4 x i32> %10150) #11
  %15204 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15203, <4 x i32> zeroinitializer) #11
  %15205 = add nsw i32 %blur_x.s0.x.xi.base.s121, -55
  %15206 = insertelement <4 x i32> undef, i32 %15205, i32 0
  %15207 = shufflevector <4 x i32> %15206, <4 x i32> undef, <4 x i32> zeroinitializer
  %15208 = add nsw <4 x i32> %15207, <i32 0, i32 1, i32 2, i32 3>
  %15209 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15208, <4 x i32> %10150) #11
  %15210 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15209, <4 x i32> zeroinitializer) #11
  %15211 = add nsw i32 %blur_x.s0.x.xi.base.s121, -51
  %15212 = insertelement <4 x i32> undef, i32 %15211, i32 0
  %15213 = shufflevector <4 x i32> %15212, <4 x i32> undef, <4 x i32> zeroinitializer
  %15214 = add nsw <4 x i32> %15213, <i32 0, i32 1, i32 2, i32 3>
  %15215 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15214, <4 x i32> %10150) #11
  %15216 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15215, <4 x i32> zeroinitializer) #11
  %15217 = add nsw i32 %blur_x.s0.x.xi.base.s121, -52
  %15218 = insertelement <4 x i32> undef, i32 %15217, i32 0
  %15219 = shufflevector <4 x i32> %15218, <4 x i32> undef, <4 x i32> zeroinitializer
  %15220 = add nsw <4 x i32> %15219, <i32 0, i32 1, i32 2, i32 3>
  %15221 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15220, <4 x i32> %10150) #11
  %15222 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15221, <4 x i32> zeroinitializer) #11
  %15223 = add nsw i32 %blur_x.s0.x.xi.base.s121, -50
  %15224 = insertelement <4 x i32> undef, i32 %15223, i32 0
  %15225 = shufflevector <4 x i32> %15224, <4 x i32> undef, <4 x i32> zeroinitializer
  %15226 = add nsw <4 x i32> %15225, <i32 0, i32 1, i32 2, i32 3>
  %15227 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15226, <4 x i32> %10150) #11
  %15228 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15227, <4 x i32> zeroinitializer) #11
  %15229 = add nsw i32 %blur_x.s0.x.xi.base.s121, -53
  %15230 = insertelement <4 x i32> undef, i32 %15229, i32 0
  %15231 = shufflevector <4 x i32> %15230, <4 x i32> undef, <4 x i32> zeroinitializer
  %15232 = add nsw <4 x i32> %15231, <i32 0, i32 1, i32 2, i32 3>
  %15233 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15232, <4 x i32> %10150) #11
  %15234 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15233, <4 x i32> zeroinitializer) #11
  %15235 = add nsw i32 %blur_x.s0.x.xi.base.s121, -49
  %15236 = insertelement <4 x i32> undef, i32 %15235, i32 0
  %15237 = shufflevector <4 x i32> %15236, <4 x i32> undef, <4 x i32> zeroinitializer
  %15238 = add nsw <4 x i32> %15237, <i32 0, i32 1, i32 2, i32 3>
  %15239 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15238, <4 x i32> %10150) #11
  %15240 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15239, <4 x i32> zeroinitializer) #11
  %15241 = add nsw i32 %blur_x.s0.x.xi.base.s121, -48
  %15242 = insertelement <4 x i32> undef, i32 %15241, i32 0
  %15243 = shufflevector <4 x i32> %15242, <4 x i32> undef, <4 x i32> zeroinitializer
  %15244 = add nsw <4 x i32> %15243, <i32 0, i32 1, i32 2, i32 3>
  %15245 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15244, <4 x i32> %10150) #11
  %15246 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15245, <4 x i32> zeroinitializer) #11
  %15247 = add nsw i32 %blur_x.s0.x.xi.base.s121, -46
  %15248 = insertelement <4 x i32> undef, i32 %15247, i32 0
  %15249 = shufflevector <4 x i32> %15248, <4 x i32> undef, <4 x i32> zeroinitializer
  %15250 = add nsw <4 x i32> %15249, <i32 0, i32 1, i32 2, i32 3>
  %15251 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15250, <4 x i32> %10150) #11
  %15252 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15251, <4 x i32> zeroinitializer) #11
  %15253 = add nsw i32 %blur_x.s0.x.xi.base.s121, -47
  %15254 = insertelement <4 x i32> undef, i32 %15253, i32 0
  %15255 = shufflevector <4 x i32> %15254, <4 x i32> undef, <4 x i32> zeroinitializer
  %15256 = add nsw <4 x i32> %15255, <i32 0, i32 1, i32 2, i32 3>
  %15257 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15256, <4 x i32> %10150) #11
  %15258 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15257, <4 x i32> zeroinitializer) #11
  %15259 = add nsw i32 %blur_x.s0.x.xi.base.s121, -43
  %15260 = insertelement <4 x i32> undef, i32 %15259, i32 0
  %15261 = shufflevector <4 x i32> %15260, <4 x i32> undef, <4 x i32> zeroinitializer
  %15262 = add nsw <4 x i32> %15261, <i32 0, i32 1, i32 2, i32 3>
  %15263 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15262, <4 x i32> %10150) #11
  %15264 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15263, <4 x i32> zeroinitializer) #11
  %15265 = add nsw i32 %blur_x.s0.x.xi.base.s121, -44
  %15266 = insertelement <4 x i32> undef, i32 %15265, i32 0
  %15267 = shufflevector <4 x i32> %15266, <4 x i32> undef, <4 x i32> zeroinitializer
  %15268 = add nsw <4 x i32> %15267, <i32 0, i32 1, i32 2, i32 3>
  %15269 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15268, <4 x i32> %10150) #11
  %15270 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15269, <4 x i32> zeroinitializer) #11
  %15271 = add nsw i32 %blur_x.s0.x.xi.base.s121, -42
  %15272 = insertelement <4 x i32> undef, i32 %15271, i32 0
  %15273 = shufflevector <4 x i32> %15272, <4 x i32> undef, <4 x i32> zeroinitializer
  %15274 = add nsw <4 x i32> %15273, <i32 0, i32 1, i32 2, i32 3>
  %15275 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15274, <4 x i32> %10150) #11
  %15276 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15275, <4 x i32> zeroinitializer) #11
  %15277 = add nsw i32 %blur_x.s0.x.xi.base.s121, -45
  %15278 = insertelement <4 x i32> undef, i32 %15277, i32 0
  %15279 = shufflevector <4 x i32> %15278, <4 x i32> undef, <4 x i32> zeroinitializer
  %15280 = add nsw <4 x i32> %15279, <i32 0, i32 1, i32 2, i32 3>
  %15281 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15280, <4 x i32> %10150) #11
  %15282 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15281, <4 x i32> zeroinitializer) #11
  %15283 = add nsw i32 %blur_x.s0.x.xi.base.s121, -41
  %15284 = insertelement <4 x i32> undef, i32 %15283, i32 0
  %15285 = shufflevector <4 x i32> %15284, <4 x i32> undef, <4 x i32> zeroinitializer
  %15286 = add nsw <4 x i32> %15285, <i32 0, i32 1, i32 2, i32 3>
  %15287 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15286, <4 x i32> %10150) #11
  %15288 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15287, <4 x i32> zeroinitializer) #11
  %15289 = add nsw i32 %blur_x.s0.x.xi.base.s121, -40
  %15290 = insertelement <4 x i32> undef, i32 %15289, i32 0
  %15291 = shufflevector <4 x i32> %15290, <4 x i32> undef, <4 x i32> zeroinitializer
  %15292 = add nsw <4 x i32> %15291, <i32 0, i32 1, i32 2, i32 3>
  %15293 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15292, <4 x i32> %10150) #11
  %15294 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15293, <4 x i32> zeroinitializer) #11
  %15295 = add nsw i32 %blur_x.s0.x.xi.base.s121, -38
  %15296 = insertelement <4 x i32> undef, i32 %15295, i32 0
  %15297 = shufflevector <4 x i32> %15296, <4 x i32> undef, <4 x i32> zeroinitializer
  %15298 = add nsw <4 x i32> %15297, <i32 0, i32 1, i32 2, i32 3>
  %15299 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15298, <4 x i32> %10150) #11
  %15300 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15299, <4 x i32> zeroinitializer) #11
  %15301 = add nsw i32 %blur_x.s0.x.xi.base.s121, -39
  %15302 = insertelement <4 x i32> undef, i32 %15301, i32 0
  %15303 = shufflevector <4 x i32> %15302, <4 x i32> undef, <4 x i32> zeroinitializer
  %15304 = add nsw <4 x i32> %15303, <i32 0, i32 1, i32 2, i32 3>
  %15305 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15304, <4 x i32> %10150) #11
  %15306 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15305, <4 x i32> zeroinitializer) #11
  %15307 = add nsw i32 %blur_x.s0.x.xi.base.s121, -35
  %15308 = insertelement <4 x i32> undef, i32 %15307, i32 0
  %15309 = shufflevector <4 x i32> %15308, <4 x i32> undef, <4 x i32> zeroinitializer
  %15310 = add nsw <4 x i32> %15309, <i32 0, i32 1, i32 2, i32 3>
  %15311 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15310, <4 x i32> %10150) #11
  %15312 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15311, <4 x i32> zeroinitializer) #11
  %15313 = add nsw i32 %blur_x.s0.x.xi.base.s121, -36
  %15314 = insertelement <4 x i32> undef, i32 %15313, i32 0
  %15315 = shufflevector <4 x i32> %15314, <4 x i32> undef, <4 x i32> zeroinitializer
  %15316 = add nsw <4 x i32> %15315, <i32 0, i32 1, i32 2, i32 3>
  %15317 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15316, <4 x i32> %10150) #11
  %15318 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15317, <4 x i32> zeroinitializer) #11
  %15319 = add nsw i32 %blur_x.s0.x.xi.base.s121, -34
  %15320 = insertelement <4 x i32> undef, i32 %15319, i32 0
  %15321 = shufflevector <4 x i32> %15320, <4 x i32> undef, <4 x i32> zeroinitializer
  %15322 = add nsw <4 x i32> %15321, <i32 0, i32 1, i32 2, i32 3>
  %15323 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15322, <4 x i32> %10150) #11
  %15324 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15323, <4 x i32> zeroinitializer) #11
  %15325 = add nsw i32 %blur_x.s0.x.xi.base.s121, -37
  %15326 = insertelement <4 x i32> undef, i32 %15325, i32 0
  %15327 = shufflevector <4 x i32> %15326, <4 x i32> undef, <4 x i32> zeroinitializer
  %15328 = add nsw <4 x i32> %15327, <i32 0, i32 1, i32 2, i32 3>
  %15329 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15328, <4 x i32> %10150) #11
  %15330 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15329, <4 x i32> zeroinitializer) #11
  %15331 = add nsw i32 %blur_x.s0.x.xi.base.s121, -33
  %15332 = insertelement <4 x i32> undef, i32 %15331, i32 0
  %15333 = shufflevector <4 x i32> %15332, <4 x i32> undef, <4 x i32> zeroinitializer
  %15334 = add nsw <4 x i32> %15333, <i32 0, i32 1, i32 2, i32 3>
  %15335 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15334, <4 x i32> %10150) #11
  %15336 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15335, <4 x i32> zeroinitializer) #11
  %15337 = add nsw i32 %blur_x.s0.x.xi.base.s121, -32
  %15338 = insertelement <4 x i32> undef, i32 %15337, i32 0
  %15339 = shufflevector <4 x i32> %15338, <4 x i32> undef, <4 x i32> zeroinitializer
  %15340 = add nsw <4 x i32> %15339, <i32 0, i32 1, i32 2, i32 3>
  %15341 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15340, <4 x i32> %10150) #11
  %15342 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15341, <4 x i32> zeroinitializer) #11
  %15343 = add nsw i32 %blur_x.s0.x.xi.base.s121, -30
  %15344 = insertelement <4 x i32> undef, i32 %15343, i32 0
  %15345 = shufflevector <4 x i32> %15344, <4 x i32> undef, <4 x i32> zeroinitializer
  %15346 = add nsw <4 x i32> %15345, <i32 0, i32 1, i32 2, i32 3>
  %15347 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15346, <4 x i32> %10150) #11
  %15348 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15347, <4 x i32> zeroinitializer) #11
  %15349 = add nsw i32 %blur_x.s0.x.xi.base.s121, -31
  %15350 = insertelement <4 x i32> undef, i32 %15349, i32 0
  %15351 = shufflevector <4 x i32> %15350, <4 x i32> undef, <4 x i32> zeroinitializer
  %15352 = add nsw <4 x i32> %15351, <i32 0, i32 1, i32 2, i32 3>
  %15353 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15352, <4 x i32> %10150) #11
  %15354 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15353, <4 x i32> zeroinitializer) #11
  %15355 = add nsw i32 %blur_x.s0.x.xi.base.s121, -27
  %15356 = insertelement <4 x i32> undef, i32 %15355, i32 0
  %15357 = shufflevector <4 x i32> %15356, <4 x i32> undef, <4 x i32> zeroinitializer
  %15358 = add nsw <4 x i32> %15357, <i32 0, i32 1, i32 2, i32 3>
  %15359 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15358, <4 x i32> %10150) #11
  %15360 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15359, <4 x i32> zeroinitializer) #11
  %15361 = add nsw i32 %blur_x.s0.x.xi.base.s121, -28
  %15362 = insertelement <4 x i32> undef, i32 %15361, i32 0
  %15363 = shufflevector <4 x i32> %15362, <4 x i32> undef, <4 x i32> zeroinitializer
  %15364 = add nsw <4 x i32> %15363, <i32 0, i32 1, i32 2, i32 3>
  %15365 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15364, <4 x i32> %10150) #11
  %15366 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15365, <4 x i32> zeroinitializer) #11
  %15367 = add nsw i32 %blur_x.s0.x.xi.base.s121, -26
  %15368 = insertelement <4 x i32> undef, i32 %15367, i32 0
  %15369 = shufflevector <4 x i32> %15368, <4 x i32> undef, <4 x i32> zeroinitializer
  %15370 = add nsw <4 x i32> %15369, <i32 0, i32 1, i32 2, i32 3>
  %15371 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15370, <4 x i32> %10150) #11
  %15372 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15371, <4 x i32> zeroinitializer) #11
  %15373 = add nsw i32 %blur_x.s0.x.xi.base.s121, -29
  %15374 = insertelement <4 x i32> undef, i32 %15373, i32 0
  %15375 = shufflevector <4 x i32> %15374, <4 x i32> undef, <4 x i32> zeroinitializer
  %15376 = add nsw <4 x i32> %15375, <i32 0, i32 1, i32 2, i32 3>
  %15377 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15376, <4 x i32> %10150) #11
  %15378 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15377, <4 x i32> zeroinitializer) #11
  %15379 = add nsw i32 %blur_x.s0.x.xi.base.s121, -25
  %15380 = insertelement <4 x i32> undef, i32 %15379, i32 0
  %15381 = shufflevector <4 x i32> %15380, <4 x i32> undef, <4 x i32> zeroinitializer
  %15382 = add nsw <4 x i32> %15381, <i32 0, i32 1, i32 2, i32 3>
  %15383 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15382, <4 x i32> %10150) #11
  %15384 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15383, <4 x i32> zeroinitializer) #11
  %15385 = add nsw i32 %blur_x.s0.x.xi.base.s121, -24
  %15386 = insertelement <4 x i32> undef, i32 %15385, i32 0
  %15387 = shufflevector <4 x i32> %15386, <4 x i32> undef, <4 x i32> zeroinitializer
  %15388 = add nsw <4 x i32> %15387, <i32 0, i32 1, i32 2, i32 3>
  %15389 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15388, <4 x i32> %10150) #11
  %15390 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15389, <4 x i32> zeroinitializer) #11
  %15391 = add nsw i32 %blur_x.s0.x.xi.base.s121, -22
  %15392 = insertelement <4 x i32> undef, i32 %15391, i32 0
  %15393 = shufflevector <4 x i32> %15392, <4 x i32> undef, <4 x i32> zeroinitializer
  %15394 = add nsw <4 x i32> %15393, <i32 0, i32 1, i32 2, i32 3>
  %15395 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15394, <4 x i32> %10150) #11
  %15396 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15395, <4 x i32> zeroinitializer) #11
  %15397 = add nsw i32 %blur_x.s0.x.xi.base.s121, -23
  %15398 = insertelement <4 x i32> undef, i32 %15397, i32 0
  %15399 = shufflevector <4 x i32> %15398, <4 x i32> undef, <4 x i32> zeroinitializer
  %15400 = add nsw <4 x i32> %15399, <i32 0, i32 1, i32 2, i32 3>
  %15401 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15400, <4 x i32> %10150) #11
  %15402 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15401, <4 x i32> zeroinitializer) #11
  %15403 = add nsw i32 %blur_x.s0.x.xi.base.s121, -19
  %15404 = insertelement <4 x i32> undef, i32 %15403, i32 0
  %15405 = shufflevector <4 x i32> %15404, <4 x i32> undef, <4 x i32> zeroinitializer
  %15406 = add nsw <4 x i32> %15405, <i32 0, i32 1, i32 2, i32 3>
  %15407 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15406, <4 x i32> %10150) #11
  %15408 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15407, <4 x i32> zeroinitializer) #11
  %15409 = add nsw i32 %blur_x.s0.x.xi.base.s121, -20
  %15410 = insertelement <4 x i32> undef, i32 %15409, i32 0
  %15411 = shufflevector <4 x i32> %15410, <4 x i32> undef, <4 x i32> zeroinitializer
  %15412 = add nsw <4 x i32> %15411, <i32 0, i32 1, i32 2, i32 3>
  %15413 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15412, <4 x i32> %10150) #11
  %15414 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15413, <4 x i32> zeroinitializer) #11
  %15415 = add nsw i32 %blur_x.s0.x.xi.base.s121, -18
  %15416 = insertelement <4 x i32> undef, i32 %15415, i32 0
  %15417 = shufflevector <4 x i32> %15416, <4 x i32> undef, <4 x i32> zeroinitializer
  %15418 = add nsw <4 x i32> %15417, <i32 0, i32 1, i32 2, i32 3>
  %15419 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15418, <4 x i32> %10150) #11
  %15420 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15419, <4 x i32> zeroinitializer) #11
  %15421 = add nsw i32 %blur_x.s0.x.xi.base.s121, -21
  %15422 = insertelement <4 x i32> undef, i32 %15421, i32 0
  %15423 = shufflevector <4 x i32> %15422, <4 x i32> undef, <4 x i32> zeroinitializer
  %15424 = add nsw <4 x i32> %15423, <i32 0, i32 1, i32 2, i32 3>
  %15425 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15424, <4 x i32> %10150) #11
  %15426 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15425, <4 x i32> zeroinitializer) #11
  %15427 = add nsw i32 %blur_x.s0.x.xi.base.s121, -17
  %15428 = insertelement <4 x i32> undef, i32 %15427, i32 0
  %15429 = shufflevector <4 x i32> %15428, <4 x i32> undef, <4 x i32> zeroinitializer
  %15430 = add nsw <4 x i32> %15429, <i32 0, i32 1, i32 2, i32 3>
  %15431 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15430, <4 x i32> %10150) #11
  %15432 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15431, <4 x i32> zeroinitializer) #11
  %15433 = add nsw i32 %blur_x.s0.x.xi.base.s121, -16
  %15434 = insertelement <4 x i32> undef, i32 %15433, i32 0
  %15435 = shufflevector <4 x i32> %15434, <4 x i32> undef, <4 x i32> zeroinitializer
  %15436 = add nsw <4 x i32> %15435, <i32 0, i32 1, i32 2, i32 3>
  %15437 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15436, <4 x i32> %10150) #11
  %15438 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15437, <4 x i32> zeroinitializer) #11
  %15439 = add nsw i32 %blur_x.s0.x.xi.base.s121, -14
  %15440 = insertelement <4 x i32> undef, i32 %15439, i32 0
  %15441 = shufflevector <4 x i32> %15440, <4 x i32> undef, <4 x i32> zeroinitializer
  %15442 = add nsw <4 x i32> %15441, <i32 0, i32 1, i32 2, i32 3>
  %15443 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15442, <4 x i32> %10150) #11
  %15444 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15443, <4 x i32> zeroinitializer) #11
  %15445 = add nsw i32 %blur_x.s0.x.xi.base.s121, -15
  %15446 = insertelement <4 x i32> undef, i32 %15445, i32 0
  %15447 = shufflevector <4 x i32> %15446, <4 x i32> undef, <4 x i32> zeroinitializer
  %15448 = add nsw <4 x i32> %15447, <i32 0, i32 1, i32 2, i32 3>
  %15449 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15448, <4 x i32> %10150) #11
  %15450 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15449, <4 x i32> zeroinitializer) #11
  %15451 = add nsw i32 %blur_x.s0.x.xi.base.s121, -11
  %15452 = insertelement <4 x i32> undef, i32 %15451, i32 0
  %15453 = shufflevector <4 x i32> %15452, <4 x i32> undef, <4 x i32> zeroinitializer
  %15454 = add nsw <4 x i32> %15453, <i32 0, i32 1, i32 2, i32 3>
  %15455 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15454, <4 x i32> %10150) #11
  %15456 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15455, <4 x i32> zeroinitializer) #11
  %15457 = add nsw i32 %blur_x.s0.x.xi.base.s121, -12
  %15458 = insertelement <4 x i32> undef, i32 %15457, i32 0
  %15459 = shufflevector <4 x i32> %15458, <4 x i32> undef, <4 x i32> zeroinitializer
  %15460 = add nsw <4 x i32> %15459, <i32 0, i32 1, i32 2, i32 3>
  %15461 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15460, <4 x i32> %10150) #11
  %15462 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15461, <4 x i32> zeroinitializer) #11
  %15463 = add nsw i32 %blur_x.s0.x.xi.base.s121, -10
  %15464 = insertelement <4 x i32> undef, i32 %15463, i32 0
  %15465 = shufflevector <4 x i32> %15464, <4 x i32> undef, <4 x i32> zeroinitializer
  %15466 = add nsw <4 x i32> %15465, <i32 0, i32 1, i32 2, i32 3>
  %15467 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15466, <4 x i32> %10150) #11
  %15468 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15467, <4 x i32> zeroinitializer) #11
  %15469 = add nsw i32 %blur_x.s0.x.xi.base.s121, -13
  %15470 = insertelement <4 x i32> undef, i32 %15469, i32 0
  %15471 = shufflevector <4 x i32> %15470, <4 x i32> undef, <4 x i32> zeroinitializer
  %15472 = add nsw <4 x i32> %15471, <i32 0, i32 1, i32 2, i32 3>
  %15473 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15472, <4 x i32> %10150) #11
  %15474 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15473, <4 x i32> zeroinitializer) #11
  %15475 = add nsw i32 %blur_x.s0.x.xi.base.s121, -9
  %15476 = insertelement <4 x i32> undef, i32 %15475, i32 0
  %15477 = shufflevector <4 x i32> %15476, <4 x i32> undef, <4 x i32> zeroinitializer
  %15478 = add nsw <4 x i32> %15477, <i32 0, i32 1, i32 2, i32 3>
  %15479 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15478, <4 x i32> %10150) #11
  %15480 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15479, <4 x i32> zeroinitializer) #11
  %15481 = add nsw i32 %blur_x.s0.x.xi.base.s121, -8
  %15482 = insertelement <4 x i32> undef, i32 %15481, i32 0
  %15483 = shufflevector <4 x i32> %15482, <4 x i32> undef, <4 x i32> zeroinitializer
  %15484 = add nsw <4 x i32> %15483, <i32 0, i32 1, i32 2, i32 3>
  %15485 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15484, <4 x i32> %10150) #11
  %15486 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15485, <4 x i32> zeroinitializer) #11
  %15487 = add nsw i32 %blur_x.s0.x.xi.base.s121, -6
  %15488 = insertelement <4 x i32> undef, i32 %15487, i32 0
  %15489 = shufflevector <4 x i32> %15488, <4 x i32> undef, <4 x i32> zeroinitializer
  %15490 = add nsw <4 x i32> %15489, <i32 0, i32 1, i32 2, i32 3>
  %15491 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15490, <4 x i32> %10150) #11
  %15492 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15491, <4 x i32> zeroinitializer) #11
  %15493 = add nsw i32 %blur_x.s0.x.xi.base.s121, -7
  %15494 = insertelement <4 x i32> undef, i32 %15493, i32 0
  %15495 = shufflevector <4 x i32> %15494, <4 x i32> undef, <4 x i32> zeroinitializer
  %15496 = add nsw <4 x i32> %15495, <i32 0, i32 1, i32 2, i32 3>
  %15497 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15496, <4 x i32> %10150) #11
  %15498 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15497, <4 x i32> zeroinitializer) #11
  %15499 = add nsw i32 %blur_x.s0.x.xi.base.s121, -3
  %15500 = insertelement <4 x i32> undef, i32 %15499, i32 0
  %15501 = shufflevector <4 x i32> %15500, <4 x i32> undef, <4 x i32> zeroinitializer
  %15502 = add nsw <4 x i32> %15501, <i32 0, i32 1, i32 2, i32 3>
  %15503 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15502, <4 x i32> %10150) #11
  %15504 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15503, <4 x i32> zeroinitializer) #11
  %15505 = add nsw i32 %blur_x.s0.x.xi.base.s121, -4
  %15506 = insertelement <4 x i32> undef, i32 %15505, i32 0
  %15507 = shufflevector <4 x i32> %15506, <4 x i32> undef, <4 x i32> zeroinitializer
  %15508 = add nsw <4 x i32> %15507, <i32 0, i32 1, i32 2, i32 3>
  %15509 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15508, <4 x i32> %10150) #11
  %15510 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15509, <4 x i32> zeroinitializer) #11
  %15511 = add nsw i32 %blur_x.s0.x.xi.base.s121, -2
  %15512 = insertelement <4 x i32> undef, i32 %15511, i32 0
  %15513 = shufflevector <4 x i32> %15512, <4 x i32> undef, <4 x i32> zeroinitializer
  %15514 = add nsw <4 x i32> %15513, <i32 0, i32 1, i32 2, i32 3>
  %15515 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15514, <4 x i32> %10150) #11
  %15516 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15515, <4 x i32> zeroinitializer) #11
  %15517 = add nsw i32 %blur_x.s0.x.xi.base.s121, -5
  %15518 = insertelement <4 x i32> undef, i32 %15517, i32 0
  %15519 = shufflevector <4 x i32> %15518, <4 x i32> undef, <4 x i32> zeroinitializer
  %15520 = add nsw <4 x i32> %15519, <i32 0, i32 1, i32 2, i32 3>
  %15521 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15520, <4 x i32> %10150) #11
  %15522 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15521, <4 x i32> zeroinitializer) #11
  %15523 = add nsw i32 %blur_x.s0.x.xi.base.s121, -1
  %15524 = insertelement <4 x i32> undef, i32 %15523, i32 0
  %15525 = shufflevector <4 x i32> %15524, <4 x i32> undef, <4 x i32> zeroinitializer
  %15526 = add nsw <4 x i32> %15525, <i32 0, i32 1, i32 2, i32 3>
  %15527 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15526, <4 x i32> %10150) #11
  %15528 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15527, <4 x i32> zeroinitializer) #11
  %15529 = insertelement <4 x i32> undef, i32 %blur_x.s0.x.xi.base.s121, i32 0
  %15530 = shufflevector <4 x i32> %15529, <4 x i32> undef, <4 x i32> zeroinitializer
  %15531 = add nsw <4 x i32> %15530, <i32 0, i32 1, i32 2, i32 3>
  %15532 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15531, <4 x i32> %10150) #11
  %15533 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15532, <4 x i32> zeroinitializer) #11
  %15534 = add nsw i32 %blur_x.s0.x.xi.base.s121, 2
  %15535 = insertelement <4 x i32> undef, i32 %15534, i32 0
  %15536 = shufflevector <4 x i32> %15535, <4 x i32> undef, <4 x i32> zeroinitializer
  %15537 = add nsw <4 x i32> %15536, <i32 0, i32 1, i32 2, i32 3>
  %15538 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15537, <4 x i32> %10150) #11
  %15539 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15538, <4 x i32> zeroinitializer) #11
  %15540 = add nsw i32 %blur_x.s0.x.xi.base.s121, 1
  %15541 = insertelement <4 x i32> undef, i32 %15540, i32 0
  %15542 = shufflevector <4 x i32> %15541, <4 x i32> undef, <4 x i32> zeroinitializer
  %15543 = add nsw <4 x i32> %15542, <i32 0, i32 1, i32 2, i32 3>
  %15544 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %15543, <4 x i32> %10150) #11
  %15545 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %15544, <4 x i32> zeroinitializer) #11
  %15546 = zext i32 %15144 to i64
  br label %"for blur_x.s0.y.yi123"

"end for blur_x.s0.x.x119":                       ; preds = %"end for blur_x.s0.y.yi124", %"for blur_y.s0.y.yi.$n.rebased113"
  %15547 = icmp ugt i64 %indvars.iv214, 5
  %or.cond173 = and i1 %10154, %15547
  br i1 %or.cond173, label %"for blur_y.s0.x.x132.preheader", label %after_bb127, !prof !393

"for blur_y.s0.x.x132.preheader":                 ; preds = %"end for blur_x.s0.x.x119"
  %15548 = trunc i64 %15141 to i32
  %15549 = add i32 %15548, 11
  %15550 = and i32 %15549, 15
  %15551 = mul nsw i32 %15550, %10156
  %15552 = trunc i64 %15141 to i32
  %15553 = add i32 %15552, 10
  %15554 = and i32 %15553, 15
  %15555 = mul nsw i32 %15554, %10156
  %15556 = trunc i64 %15141 to i32
  %15557 = add i32 %15556, 12
  %15558 = and i32 %15557, 15
  %15559 = mul nsw i32 %15558, %10156
  %15560 = trunc i64 %15141 to i32
  %15561 = add i32 %15560, 13
  %15562 = and i32 %15561, 15
  %15563 = mul nsw i32 %15562, %10156
  %15564 = trunc i64 %15141 to i32
  %15565 = add i32 %15564, 14
  %15566 = and i32 %15565, 15
  %15567 = mul nsw i32 %15566, %10156
  %15568 = trunc i64 %15141 to i32
  %15569 = and i32 %15568, 15
  %15570 = mul nsw i32 %15569, %10156
  %15571 = trunc i64 %15141 to i32
  %15572 = add i32 %15571, 15
  %15573 = and i32 %15572, 15
  %15574 = mul nsw i32 %15573, %10156
  %15575 = add nsw i64 %15141, -6
  %15576 = mul nsw i64 %15575, %10157
  br label %"for blur_y.s0.x.x132"

"for blur_x.s0.y.yi123":                          ; preds = %"for blur_x.s0.x.x118", %"for blur_x.s0.y.yi123"
  %blur_x.s0.y.yi125 = phi i32 [ 0, %"for blur_x.s0.x.x118" ], [ %17231, %"for blur_x.s0.y.yi123" ]
  %15577 = add nsw i32 %blur_x.s0.y.yi125, %15142
  %a33 = add nsw i32 %15577, 1
  %15578 = icmp slt i32 %a33, %b35
  %a36 = select i1 %15578, i32 %a33, i32 %b35
  %15579 = icmp sgt i32 %a36, 1
  %15580 = select i1 %15579, i32 %a36, i32 1
  %15581 = add nsw i32 %15580, -1
  %15582 = mul nsw i32 %15581, %input.stride.145
  %15583 = insertelement <4 x i32> undef, i32 %15582, i32 0
  %t471 = shufflevector <4 x i32> %15583, <4 x i32> undef, <4 x i32> zeroinitializer
  %15584 = add <4 x i32> %t471, %15150
  %15585 = extractelement <4 x i32> %15584, i32 0
  %15586 = sext i32 %15585 to i64
  %15587 = getelementptr inbounds i16, i16* %10151, i64 %15586
  %15588 = load i16, i16* %15587, align 2, !tbaa !386
  %15589 = insertelement <4 x i16> undef, i16 %15588, i32 0
  %15590 = extractelement <4 x i32> %15584, i32 1
  %15591 = sext i32 %15590 to i64
  %15592 = getelementptr inbounds i16, i16* %10151, i64 %15591
  %15593 = load i16, i16* %15592, align 2, !tbaa !386
  %15594 = insertelement <4 x i16> %15589, i16 %15593, i32 1
  %15595 = extractelement <4 x i32> %15584, i32 2
  %15596 = sext i32 %15595 to i64
  %15597 = getelementptr inbounds i16, i16* %10151, i64 %15596
  %15598 = load i16, i16* %15597, align 2, !tbaa !386
  %15599 = insertelement <4 x i16> %15594, i16 %15598, i32 2
  %15600 = extractelement <4 x i32> %15584, i32 3
  %15601 = sext i32 %15600 to i64
  %15602 = getelementptr inbounds i16, i16* %10151, i64 %15601
  %15603 = load i16, i16* %15602, align 2, !tbaa !386
  %15604 = insertelement <4 x i16> %15599, i16 %15603, i32 3
  %15605 = add <4 x i32> %t471, %15156
  %15606 = extractelement <4 x i32> %15605, i32 0
  %15607 = sext i32 %15606 to i64
  %15608 = getelementptr inbounds i16, i16* %10151, i64 %15607
  %15609 = load i16, i16* %15608, align 2, !tbaa !386
  %15610 = insertelement <4 x i16> undef, i16 %15609, i32 0
  %15611 = extractelement <4 x i32> %15605, i32 1
  %15612 = sext i32 %15611 to i64
  %15613 = getelementptr inbounds i16, i16* %10151, i64 %15612
  %15614 = load i16, i16* %15613, align 2, !tbaa !386
  %15615 = insertelement <4 x i16> %15610, i16 %15614, i32 1
  %15616 = extractelement <4 x i32> %15605, i32 2
  %15617 = sext i32 %15616 to i64
  %15618 = getelementptr inbounds i16, i16* %10151, i64 %15617
  %15619 = load i16, i16* %15618, align 2, !tbaa !386
  %15620 = insertelement <4 x i16> %15615, i16 %15619, i32 2
  %15621 = extractelement <4 x i32> %15605, i32 3
  %15622 = sext i32 %15621 to i64
  %15623 = getelementptr inbounds i16, i16* %10151, i64 %15622
  %15624 = load i16, i16* %15623, align 2, !tbaa !386
  %15625 = insertelement <4 x i16> %15620, i16 %15624, i32 3
  %15626 = add <4 x i32> %15162, %t471
  %15627 = extractelement <4 x i32> %15626, i32 0
  %15628 = sext i32 %15627 to i64
  %15629 = getelementptr inbounds i16, i16* %10151, i64 %15628
  %15630 = load i16, i16* %15629, align 2, !tbaa !386
  %15631 = insertelement <4 x i16> undef, i16 %15630, i32 0
  %15632 = extractelement <4 x i32> %15626, i32 1
  %15633 = sext i32 %15632 to i64
  %15634 = getelementptr inbounds i16, i16* %10151, i64 %15633
  %15635 = load i16, i16* %15634, align 2, !tbaa !386
  %15636 = insertelement <4 x i16> %15631, i16 %15635, i32 1
  %15637 = extractelement <4 x i32> %15626, i32 2
  %15638 = sext i32 %15637 to i64
  %15639 = getelementptr inbounds i16, i16* %10151, i64 %15638
  %15640 = load i16, i16* %15639, align 2, !tbaa !386
  %15641 = insertelement <4 x i16> %15636, i16 %15640, i32 2
  %15642 = extractelement <4 x i32> %15626, i32 3
  %15643 = sext i32 %15642 to i64
  %15644 = getelementptr inbounds i16, i16* %10151, i64 %15643
  %15645 = load i16, i16* %15644, align 2, !tbaa !386
  %15646 = insertelement <4 x i16> %15641, i16 %15645, i32 3
  %15647 = add <4 x i32> %15168, %t471
  %15648 = extractelement <4 x i32> %15647, i32 0
  %15649 = sext i32 %15648 to i64
  %15650 = getelementptr inbounds i16, i16* %10151, i64 %15649
  %15651 = load i16, i16* %15650, align 2, !tbaa !386
  %15652 = insertelement <4 x i16> undef, i16 %15651, i32 0
  %15653 = extractelement <4 x i32> %15647, i32 1
  %15654 = sext i32 %15653 to i64
  %15655 = getelementptr inbounds i16, i16* %10151, i64 %15654
  %15656 = load i16, i16* %15655, align 2, !tbaa !386
  %15657 = insertelement <4 x i16> %15652, i16 %15656, i32 1
  %15658 = extractelement <4 x i32> %15647, i32 2
  %15659 = sext i32 %15658 to i64
  %15660 = getelementptr inbounds i16, i16* %10151, i64 %15659
  %15661 = load i16, i16* %15660, align 2, !tbaa !386
  %15662 = insertelement <4 x i16> %15657, i16 %15661, i32 2
  %15663 = extractelement <4 x i32> %15647, i32 3
  %15664 = sext i32 %15663 to i64
  %15665 = getelementptr inbounds i16, i16* %10151, i64 %15664
  %15666 = load i16, i16* %15665, align 2, !tbaa !386
  %15667 = insertelement <4 x i16> %15662, i16 %15666, i32 3
  %15668 = add <4 x i32> %15174, %t471
  %15669 = extractelement <4 x i32> %15668, i32 0
  %15670 = sext i32 %15669 to i64
  %15671 = getelementptr inbounds i16, i16* %10151, i64 %15670
  %15672 = load i16, i16* %15671, align 2, !tbaa !386
  %15673 = insertelement <4 x i16> undef, i16 %15672, i32 0
  %15674 = extractelement <4 x i32> %15668, i32 1
  %15675 = sext i32 %15674 to i64
  %15676 = getelementptr inbounds i16, i16* %10151, i64 %15675
  %15677 = load i16, i16* %15676, align 2, !tbaa !386
  %15678 = insertelement <4 x i16> %15673, i16 %15677, i32 1
  %15679 = extractelement <4 x i32> %15668, i32 2
  %15680 = sext i32 %15679 to i64
  %15681 = getelementptr inbounds i16, i16* %10151, i64 %15680
  %15682 = load i16, i16* %15681, align 2, !tbaa !386
  %15683 = insertelement <4 x i16> %15678, i16 %15682, i32 2
  %15684 = extractelement <4 x i32> %15668, i32 3
  %15685 = sext i32 %15684 to i64
  %15686 = getelementptr inbounds i16, i16* %10151, i64 %15685
  %15687 = load i16, i16* %15686, align 2, !tbaa !386
  %15688 = insertelement <4 x i16> %15683, i16 %15687, i32 3
  %15689 = add <4 x i32> %15180, %t471
  %15690 = extractelement <4 x i32> %15689, i32 0
  %15691 = sext i32 %15690 to i64
  %15692 = getelementptr inbounds i16, i16* %10151, i64 %15691
  %15693 = load i16, i16* %15692, align 2, !tbaa !386
  %15694 = insertelement <4 x i16> undef, i16 %15693, i32 0
  %15695 = extractelement <4 x i32> %15689, i32 1
  %15696 = sext i32 %15695 to i64
  %15697 = getelementptr inbounds i16, i16* %10151, i64 %15696
  %15698 = load i16, i16* %15697, align 2, !tbaa !386
  %15699 = insertelement <4 x i16> %15694, i16 %15698, i32 1
  %15700 = extractelement <4 x i32> %15689, i32 2
  %15701 = sext i32 %15700 to i64
  %15702 = getelementptr inbounds i16, i16* %10151, i64 %15701
  %15703 = load i16, i16* %15702, align 2, !tbaa !386
  %15704 = insertelement <4 x i16> %15699, i16 %15703, i32 2
  %15705 = extractelement <4 x i32> %15689, i32 3
  %15706 = sext i32 %15705 to i64
  %15707 = getelementptr inbounds i16, i16* %10151, i64 %15706
  %15708 = load i16, i16* %15707, align 2, !tbaa !386
  %15709 = insertelement <4 x i16> %15704, i16 %15708, i32 3
  %15710 = add <4 x i32> %15186, %t471
  %15711 = extractelement <4 x i32> %15710, i32 0
  %15712 = sext i32 %15711 to i64
  %15713 = getelementptr inbounds i16, i16* %10151, i64 %15712
  %15714 = load i16, i16* %15713, align 2, !tbaa !386
  %15715 = insertelement <4 x i16> undef, i16 %15714, i32 0
  %15716 = extractelement <4 x i32> %15710, i32 1
  %15717 = sext i32 %15716 to i64
  %15718 = getelementptr inbounds i16, i16* %10151, i64 %15717
  %15719 = load i16, i16* %15718, align 2, !tbaa !386
  %15720 = insertelement <4 x i16> %15715, i16 %15719, i32 1
  %15721 = extractelement <4 x i32> %15710, i32 2
  %15722 = sext i32 %15721 to i64
  %15723 = getelementptr inbounds i16, i16* %10151, i64 %15722
  %15724 = load i16, i16* %15723, align 2, !tbaa !386
  %15725 = insertelement <4 x i16> %15720, i16 %15724, i32 2
  %15726 = extractelement <4 x i32> %15710, i32 3
  %15727 = sext i32 %15726 to i64
  %15728 = getelementptr inbounds i16, i16* %10151, i64 %15727
  %15729 = load i16, i16* %15728, align 2, !tbaa !386
  %15730 = insertelement <4 x i16> %15725, i16 %15729, i32 3
  %15731 = add <4 x i32> %15192, %t471
  %15732 = extractelement <4 x i32> %15731, i32 0
  %15733 = sext i32 %15732 to i64
  %15734 = getelementptr inbounds i16, i16* %10151, i64 %15733
  %15735 = load i16, i16* %15734, align 2, !tbaa !386
  %15736 = insertelement <4 x i16> undef, i16 %15735, i32 0
  %15737 = extractelement <4 x i32> %15731, i32 1
  %15738 = sext i32 %15737 to i64
  %15739 = getelementptr inbounds i16, i16* %10151, i64 %15738
  %15740 = load i16, i16* %15739, align 2, !tbaa !386
  %15741 = insertelement <4 x i16> %15736, i16 %15740, i32 1
  %15742 = extractelement <4 x i32> %15731, i32 2
  %15743 = sext i32 %15742 to i64
  %15744 = getelementptr inbounds i16, i16* %10151, i64 %15743
  %15745 = load i16, i16* %15744, align 2, !tbaa !386
  %15746 = insertelement <4 x i16> %15741, i16 %15745, i32 2
  %15747 = extractelement <4 x i32> %15731, i32 3
  %15748 = sext i32 %15747 to i64
  %15749 = getelementptr inbounds i16, i16* %10151, i64 %15748
  %15750 = load i16, i16* %15749, align 2, !tbaa !386
  %15751 = insertelement <4 x i16> %15746, i16 %15750, i32 3
  %15752 = add <4 x i32> %15198, %t471
  %15753 = extractelement <4 x i32> %15752, i32 0
  %15754 = sext i32 %15753 to i64
  %15755 = getelementptr inbounds i16, i16* %10151, i64 %15754
  %15756 = load i16, i16* %15755, align 2, !tbaa !386
  %15757 = insertelement <4 x i16> undef, i16 %15756, i32 0
  %15758 = extractelement <4 x i32> %15752, i32 1
  %15759 = sext i32 %15758 to i64
  %15760 = getelementptr inbounds i16, i16* %10151, i64 %15759
  %15761 = load i16, i16* %15760, align 2, !tbaa !386
  %15762 = insertelement <4 x i16> %15757, i16 %15761, i32 1
  %15763 = extractelement <4 x i32> %15752, i32 2
  %15764 = sext i32 %15763 to i64
  %15765 = getelementptr inbounds i16, i16* %10151, i64 %15764
  %15766 = load i16, i16* %15765, align 2, !tbaa !386
  %15767 = insertelement <4 x i16> %15762, i16 %15766, i32 2
  %15768 = extractelement <4 x i32> %15752, i32 3
  %15769 = sext i32 %15768 to i64
  %15770 = getelementptr inbounds i16, i16* %10151, i64 %15769
  %15771 = load i16, i16* %15770, align 2, !tbaa !386
  %15772 = insertelement <4 x i16> %15767, i16 %15771, i32 3
  %15773 = add <4 x i32> %15204, %t471
  %15774 = extractelement <4 x i32> %15773, i32 0
  %15775 = sext i32 %15774 to i64
  %15776 = getelementptr inbounds i16, i16* %10151, i64 %15775
  %15777 = load i16, i16* %15776, align 2, !tbaa !386
  %15778 = insertelement <4 x i16> undef, i16 %15777, i32 0
  %15779 = extractelement <4 x i32> %15773, i32 1
  %15780 = sext i32 %15779 to i64
  %15781 = getelementptr inbounds i16, i16* %10151, i64 %15780
  %15782 = load i16, i16* %15781, align 2, !tbaa !386
  %15783 = insertelement <4 x i16> %15778, i16 %15782, i32 1
  %15784 = extractelement <4 x i32> %15773, i32 2
  %15785 = sext i32 %15784 to i64
  %15786 = getelementptr inbounds i16, i16* %10151, i64 %15785
  %15787 = load i16, i16* %15786, align 2, !tbaa !386
  %15788 = insertelement <4 x i16> %15783, i16 %15787, i32 2
  %15789 = extractelement <4 x i32> %15773, i32 3
  %15790 = sext i32 %15789 to i64
  %15791 = getelementptr inbounds i16, i16* %10151, i64 %15790
  %15792 = load i16, i16* %15791, align 2, !tbaa !386
  %15793 = insertelement <4 x i16> %15788, i16 %15792, i32 3
  %15794 = add <4 x i32> %15210, %t471
  %15795 = extractelement <4 x i32> %15794, i32 0
  %15796 = sext i32 %15795 to i64
  %15797 = getelementptr inbounds i16, i16* %10151, i64 %15796
  %15798 = load i16, i16* %15797, align 2, !tbaa !386
  %15799 = insertelement <4 x i16> undef, i16 %15798, i32 0
  %15800 = extractelement <4 x i32> %15794, i32 1
  %15801 = sext i32 %15800 to i64
  %15802 = getelementptr inbounds i16, i16* %10151, i64 %15801
  %15803 = load i16, i16* %15802, align 2, !tbaa !386
  %15804 = insertelement <4 x i16> %15799, i16 %15803, i32 1
  %15805 = extractelement <4 x i32> %15794, i32 2
  %15806 = sext i32 %15805 to i64
  %15807 = getelementptr inbounds i16, i16* %10151, i64 %15806
  %15808 = load i16, i16* %15807, align 2, !tbaa !386
  %15809 = insertelement <4 x i16> %15804, i16 %15808, i32 2
  %15810 = extractelement <4 x i32> %15794, i32 3
  %15811 = sext i32 %15810 to i64
  %15812 = getelementptr inbounds i16, i16* %10151, i64 %15811
  %15813 = load i16, i16* %15812, align 2, !tbaa !386
  %15814 = insertelement <4 x i16> %15809, i16 %15813, i32 3
  %15815 = add <4 x i16> %15709, %15667
  %15816 = add <4 x i16> %15793, %15772
  %15817 = add <4 x i16> %15625, %15604
  %15818 = add <4 x i16> %15817, %15646
  %15819 = add <4 x i16> %15818, %15688
  %15820 = add <4 x i16> %15819, %15815
  %15821 = add <4 x i16> %15820, %15730
  %15822 = add <4 x i16> %15815, %15625
  %15823 = add <4 x i16> %15822, %15751
  %15824 = add <4 x i16> %15823, %15816
  %15825 = add <4 x i16> %15824, %15814
  %15826 = shufflevector <4 x i16> %15821, <4 x i16> %15825, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %15827 = zext <8 x i16> %15826 to <8 x i32>
  %15828 = mul nuw nsw <8 x i32> %15827, <i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362>
  %15829 = shufflevector <8 x i32> %15828, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %15830 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %15829, i32 16)
  %15831 = shufflevector <8 x i32> %15828, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %15832 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %15831, i32 16)
  %15833 = shufflevector <4 x i16> %15830, <4 x i16> %15832, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %15834 = add <4 x i16> %15815, %15604
  %15835 = add <4 x i16> %15834, %15625
  %15836 = add <4 x i16> %15835, %15646
  %15837 = add <4 x i16> %15836, %15688
  %15838 = add <4 x i16> %15837, %15730
  %15839 = add <4 x i16> %15823, %15772
  %15840 = add <4 x i16> %15839, %15793
  %15841 = add <4 x i16> %15840, %15814
  %15842 = shufflevector <4 x i16> %15838, <4 x i16> %15841, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %15843 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %15833, <8 x i16> %15842) #11
  %15844 = lshr <8 x i16> %15843, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %15845 = add <4 x i32> %15216, %t471
  %15846 = extractelement <4 x i32> %15845, i32 0
  %15847 = sext i32 %15846 to i64
  %15848 = getelementptr inbounds i16, i16* %10151, i64 %15847
  %15849 = load i16, i16* %15848, align 2, !tbaa !386
  %15850 = insertelement <4 x i16> undef, i16 %15849, i32 0
  %15851 = extractelement <4 x i32> %15845, i32 1
  %15852 = sext i32 %15851 to i64
  %15853 = getelementptr inbounds i16, i16* %10151, i64 %15852
  %15854 = load i16, i16* %15853, align 2, !tbaa !386
  %15855 = insertelement <4 x i16> %15850, i16 %15854, i32 1
  %15856 = extractelement <4 x i32> %15845, i32 2
  %15857 = sext i32 %15856 to i64
  %15858 = getelementptr inbounds i16, i16* %10151, i64 %15857
  %15859 = load i16, i16* %15858, align 2, !tbaa !386
  %15860 = insertelement <4 x i16> %15855, i16 %15859, i32 2
  %15861 = extractelement <4 x i32> %15845, i32 3
  %15862 = sext i32 %15861 to i64
  %15863 = getelementptr inbounds i16, i16* %10151, i64 %15862
  %15864 = load i16, i16* %15863, align 2, !tbaa !386
  %15865 = insertelement <4 x i16> %15860, i16 %15864, i32 3
  %15866 = add <4 x i32> %15222, %t471
  %15867 = extractelement <4 x i32> %15866, i32 0
  %15868 = sext i32 %15867 to i64
  %15869 = getelementptr inbounds i16, i16* %10151, i64 %15868
  %15870 = load i16, i16* %15869, align 2, !tbaa !386
  %15871 = insertelement <4 x i16> undef, i16 %15870, i32 0
  %15872 = extractelement <4 x i32> %15866, i32 1
  %15873 = sext i32 %15872 to i64
  %15874 = getelementptr inbounds i16, i16* %10151, i64 %15873
  %15875 = load i16, i16* %15874, align 2, !tbaa !386
  %15876 = insertelement <4 x i16> %15871, i16 %15875, i32 1
  %15877 = extractelement <4 x i32> %15866, i32 2
  %15878 = sext i32 %15877 to i64
  %15879 = getelementptr inbounds i16, i16* %10151, i64 %15878
  %15880 = load i16, i16* %15879, align 2, !tbaa !386
  %15881 = insertelement <4 x i16> %15876, i16 %15880, i32 2
  %15882 = extractelement <4 x i32> %15866, i32 3
  %15883 = sext i32 %15882 to i64
  %15884 = getelementptr inbounds i16, i16* %10151, i64 %15883
  %15885 = load i16, i16* %15884, align 2, !tbaa !386
  %15886 = insertelement <4 x i16> %15881, i16 %15885, i32 3
  %15887 = add <4 x i32> %15228, %t471
  %15888 = extractelement <4 x i32> %15887, i32 0
  %15889 = sext i32 %15888 to i64
  %15890 = getelementptr inbounds i16, i16* %10151, i64 %15889
  %15891 = load i16, i16* %15890, align 2, !tbaa !386
  %15892 = insertelement <4 x i16> undef, i16 %15891, i32 0
  %15893 = extractelement <4 x i32> %15887, i32 1
  %15894 = sext i32 %15893 to i64
  %15895 = getelementptr inbounds i16, i16* %10151, i64 %15894
  %15896 = load i16, i16* %15895, align 2, !tbaa !386
  %15897 = insertelement <4 x i16> %15892, i16 %15896, i32 1
  %15898 = extractelement <4 x i32> %15887, i32 2
  %15899 = sext i32 %15898 to i64
  %15900 = getelementptr inbounds i16, i16* %10151, i64 %15899
  %15901 = load i16, i16* %15900, align 2, !tbaa !386
  %15902 = insertelement <4 x i16> %15897, i16 %15901, i32 2
  %15903 = extractelement <4 x i32> %15887, i32 3
  %15904 = sext i32 %15903 to i64
  %15905 = getelementptr inbounds i16, i16* %10151, i64 %15904
  %15906 = load i16, i16* %15905, align 2, !tbaa !386
  %15907 = insertelement <4 x i16> %15902, i16 %15906, i32 3
  %15908 = add <4 x i32> %15234, %t471
  %15909 = extractelement <4 x i32> %15908, i32 0
  %15910 = sext i32 %15909 to i64
  %15911 = getelementptr inbounds i16, i16* %10151, i64 %15910
  %15912 = load i16, i16* %15911, align 2, !tbaa !386
  %15913 = insertelement <4 x i16> undef, i16 %15912, i32 0
  %15914 = extractelement <4 x i32> %15908, i32 1
  %15915 = sext i32 %15914 to i64
  %15916 = getelementptr inbounds i16, i16* %10151, i64 %15915
  %15917 = load i16, i16* %15916, align 2, !tbaa !386
  %15918 = insertelement <4 x i16> %15913, i16 %15917, i32 1
  %15919 = extractelement <4 x i32> %15908, i32 2
  %15920 = sext i32 %15919 to i64
  %15921 = getelementptr inbounds i16, i16* %10151, i64 %15920
  %15922 = load i16, i16* %15921, align 2, !tbaa !386
  %15923 = insertelement <4 x i16> %15918, i16 %15922, i32 2
  %15924 = extractelement <4 x i32> %15908, i32 3
  %15925 = sext i32 %15924 to i64
  %15926 = getelementptr inbounds i16, i16* %10151, i64 %15925
  %15927 = load i16, i16* %15926, align 2, !tbaa !386
  %15928 = insertelement <4 x i16> %15923, i16 %15927, i32 3
  %15929 = add <4 x i32> %15240, %t471
  %15930 = extractelement <4 x i32> %15929, i32 0
  %15931 = sext i32 %15930 to i64
  %15932 = getelementptr inbounds i16, i16* %10151, i64 %15931
  %15933 = load i16, i16* %15932, align 2, !tbaa !386
  %15934 = insertelement <4 x i16> undef, i16 %15933, i32 0
  %15935 = extractelement <4 x i32> %15929, i32 1
  %15936 = sext i32 %15935 to i64
  %15937 = getelementptr inbounds i16, i16* %10151, i64 %15936
  %15938 = load i16, i16* %15937, align 2, !tbaa !386
  %15939 = insertelement <4 x i16> %15934, i16 %15938, i32 1
  %15940 = extractelement <4 x i32> %15929, i32 2
  %15941 = sext i32 %15940 to i64
  %15942 = getelementptr inbounds i16, i16* %10151, i64 %15941
  %15943 = load i16, i16* %15942, align 2, !tbaa !386
  %15944 = insertelement <4 x i16> %15939, i16 %15943, i32 2
  %15945 = extractelement <4 x i32> %15929, i32 3
  %15946 = sext i32 %15945 to i64
  %15947 = getelementptr inbounds i16, i16* %10151, i64 %15946
  %15948 = load i16, i16* %15947, align 2, !tbaa !386
  %15949 = insertelement <4 x i16> %15944, i16 %15948, i32 3
  %15950 = add <4 x i32> %15246, %t471
  %15951 = extractelement <4 x i32> %15950, i32 0
  %15952 = sext i32 %15951 to i64
  %15953 = getelementptr inbounds i16, i16* %10151, i64 %15952
  %15954 = load i16, i16* %15953, align 2, !tbaa !386
  %15955 = insertelement <4 x i16> undef, i16 %15954, i32 0
  %15956 = extractelement <4 x i32> %15950, i32 1
  %15957 = sext i32 %15956 to i64
  %15958 = getelementptr inbounds i16, i16* %10151, i64 %15957
  %15959 = load i16, i16* %15958, align 2, !tbaa !386
  %15960 = insertelement <4 x i16> %15955, i16 %15959, i32 1
  %15961 = extractelement <4 x i32> %15950, i32 2
  %15962 = sext i32 %15961 to i64
  %15963 = getelementptr inbounds i16, i16* %10151, i64 %15962
  %15964 = load i16, i16* %15963, align 2, !tbaa !386
  %15965 = insertelement <4 x i16> %15960, i16 %15964, i32 2
  %15966 = extractelement <4 x i32> %15950, i32 3
  %15967 = sext i32 %15966 to i64
  %15968 = getelementptr inbounds i16, i16* %10151, i64 %15967
  %15969 = load i16, i16* %15968, align 2, !tbaa !386
  %15970 = insertelement <4 x i16> %15965, i16 %15969, i32 3
  %15971 = add <4 x i32> %15252, %t471
  %15972 = extractelement <4 x i32> %15971, i32 0
  %15973 = sext i32 %15972 to i64
  %15974 = getelementptr inbounds i16, i16* %10151, i64 %15973
  %15975 = load i16, i16* %15974, align 2, !tbaa !386
  %15976 = insertelement <4 x i16> undef, i16 %15975, i32 0
  %15977 = extractelement <4 x i32> %15971, i32 1
  %15978 = sext i32 %15977 to i64
  %15979 = getelementptr inbounds i16, i16* %10151, i64 %15978
  %15980 = load i16, i16* %15979, align 2, !tbaa !386
  %15981 = insertelement <4 x i16> %15976, i16 %15980, i32 1
  %15982 = extractelement <4 x i32> %15971, i32 2
  %15983 = sext i32 %15982 to i64
  %15984 = getelementptr inbounds i16, i16* %10151, i64 %15983
  %15985 = load i16, i16* %15984, align 2, !tbaa !386
  %15986 = insertelement <4 x i16> %15981, i16 %15985, i32 2
  %15987 = extractelement <4 x i32> %15971, i32 3
  %15988 = sext i32 %15987 to i64
  %15989 = getelementptr inbounds i16, i16* %10151, i64 %15988
  %15990 = load i16, i16* %15989, align 2, !tbaa !386
  %15991 = insertelement <4 x i16> %15986, i16 %15990, i32 3
  %15992 = add <4 x i32> %15258, %t471
  %15993 = extractelement <4 x i32> %15992, i32 0
  %15994 = sext i32 %15993 to i64
  %15995 = getelementptr inbounds i16, i16* %10151, i64 %15994
  %15996 = load i16, i16* %15995, align 2, !tbaa !386
  %15997 = insertelement <4 x i16> undef, i16 %15996, i32 0
  %15998 = extractelement <4 x i32> %15992, i32 1
  %15999 = sext i32 %15998 to i64
  %16000 = getelementptr inbounds i16, i16* %10151, i64 %15999
  %16001 = load i16, i16* %16000, align 2, !tbaa !386
  %16002 = insertelement <4 x i16> %15997, i16 %16001, i32 1
  %16003 = extractelement <4 x i32> %15992, i32 2
  %16004 = sext i32 %16003 to i64
  %16005 = getelementptr inbounds i16, i16* %10151, i64 %16004
  %16006 = load i16, i16* %16005, align 2, !tbaa !386
  %16007 = insertelement <4 x i16> %16002, i16 %16006, i32 2
  %16008 = extractelement <4 x i32> %15992, i32 3
  %16009 = sext i32 %16008 to i64
  %16010 = getelementptr inbounds i16, i16* %10151, i64 %16009
  %16011 = load i16, i16* %16010, align 2, !tbaa !386
  %16012 = insertelement <4 x i16> %16007, i16 %16011, i32 3
  %16013 = add <4 x i16> %15907, %15886
  %16014 = add <4 x i16> %15991, %15970
  %16015 = add <4 x i16> %15814, %15816
  %16016 = add <4 x i16> %16015, %15865
  %16017 = add <4 x i16> %16016, %16013
  %16018 = add <4 x i16> %16017, %15928
  %16019 = add <4 x i16> %16013, %15865
  %16020 = add <4 x i16> %16019, %15949
  %16021 = add <4 x i16> %16020, %16014
  %16022 = add <4 x i16> %16021, %16012
  %16023 = shufflevector <4 x i16> %16018, <4 x i16> %16022, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %16024 = zext <8 x i16> %16023 to <8 x i32>
  %16025 = mul nuw nsw <8 x i32> %16024, <i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362>
  %16026 = shufflevector <8 x i32> %16025, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %16027 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %16026, i32 16)
  %16028 = shufflevector <8 x i32> %16025, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %16029 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %16028, i32 16)
  %16030 = shufflevector <4 x i16> %16027, <4 x i16> %16029, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %16031 = add <4 x i16> %16016, %15886
  %16032 = add <4 x i16> %16031, %15907
  %16033 = add <4 x i16> %16032, %15928
  %16034 = add <4 x i16> %16020, %15970
  %16035 = add <4 x i16> %16034, %15991
  %16036 = add <4 x i16> %16035, %16012
  %16037 = shufflevector <4 x i16> %16033, <4 x i16> %16036, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %16038 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %16030, <8 x i16> %16037) #11
  %16039 = lshr <8 x i16> %16038, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %16040 = add <4 x i32> %15264, %t471
  %16041 = extractelement <4 x i32> %16040, i32 0
  %16042 = sext i32 %16041 to i64
  %16043 = getelementptr inbounds i16, i16* %10151, i64 %16042
  %16044 = load i16, i16* %16043, align 2, !tbaa !386
  %16045 = insertelement <4 x i16> undef, i16 %16044, i32 0
  %16046 = extractelement <4 x i32> %16040, i32 1
  %16047 = sext i32 %16046 to i64
  %16048 = getelementptr inbounds i16, i16* %10151, i64 %16047
  %16049 = load i16, i16* %16048, align 2, !tbaa !386
  %16050 = insertelement <4 x i16> %16045, i16 %16049, i32 1
  %16051 = extractelement <4 x i32> %16040, i32 2
  %16052 = sext i32 %16051 to i64
  %16053 = getelementptr inbounds i16, i16* %10151, i64 %16052
  %16054 = load i16, i16* %16053, align 2, !tbaa !386
  %16055 = insertelement <4 x i16> %16050, i16 %16054, i32 2
  %16056 = extractelement <4 x i32> %16040, i32 3
  %16057 = sext i32 %16056 to i64
  %16058 = getelementptr inbounds i16, i16* %10151, i64 %16057
  %16059 = load i16, i16* %16058, align 2, !tbaa !386
  %16060 = insertelement <4 x i16> %16055, i16 %16059, i32 3
  %16061 = add <4 x i32> %15270, %t471
  %16062 = extractelement <4 x i32> %16061, i32 0
  %16063 = sext i32 %16062 to i64
  %16064 = getelementptr inbounds i16, i16* %10151, i64 %16063
  %16065 = load i16, i16* %16064, align 2, !tbaa !386
  %16066 = insertelement <4 x i16> undef, i16 %16065, i32 0
  %16067 = extractelement <4 x i32> %16061, i32 1
  %16068 = sext i32 %16067 to i64
  %16069 = getelementptr inbounds i16, i16* %10151, i64 %16068
  %16070 = load i16, i16* %16069, align 2, !tbaa !386
  %16071 = insertelement <4 x i16> %16066, i16 %16070, i32 1
  %16072 = extractelement <4 x i32> %16061, i32 2
  %16073 = sext i32 %16072 to i64
  %16074 = getelementptr inbounds i16, i16* %10151, i64 %16073
  %16075 = load i16, i16* %16074, align 2, !tbaa !386
  %16076 = insertelement <4 x i16> %16071, i16 %16075, i32 2
  %16077 = extractelement <4 x i32> %16061, i32 3
  %16078 = sext i32 %16077 to i64
  %16079 = getelementptr inbounds i16, i16* %10151, i64 %16078
  %16080 = load i16, i16* %16079, align 2, !tbaa !386
  %16081 = insertelement <4 x i16> %16076, i16 %16080, i32 3
  %16082 = add <4 x i32> %15276, %t471
  %16083 = extractelement <4 x i32> %16082, i32 0
  %16084 = sext i32 %16083 to i64
  %16085 = getelementptr inbounds i16, i16* %10151, i64 %16084
  %16086 = load i16, i16* %16085, align 2, !tbaa !386
  %16087 = insertelement <4 x i16> undef, i16 %16086, i32 0
  %16088 = extractelement <4 x i32> %16082, i32 1
  %16089 = sext i32 %16088 to i64
  %16090 = getelementptr inbounds i16, i16* %10151, i64 %16089
  %16091 = load i16, i16* %16090, align 2, !tbaa !386
  %16092 = insertelement <4 x i16> %16087, i16 %16091, i32 1
  %16093 = extractelement <4 x i32> %16082, i32 2
  %16094 = sext i32 %16093 to i64
  %16095 = getelementptr inbounds i16, i16* %10151, i64 %16094
  %16096 = load i16, i16* %16095, align 2, !tbaa !386
  %16097 = insertelement <4 x i16> %16092, i16 %16096, i32 2
  %16098 = extractelement <4 x i32> %16082, i32 3
  %16099 = sext i32 %16098 to i64
  %16100 = getelementptr inbounds i16, i16* %10151, i64 %16099
  %16101 = load i16, i16* %16100, align 2, !tbaa !386
  %16102 = insertelement <4 x i16> %16097, i16 %16101, i32 3
  %16103 = add <4 x i32> %15282, %t471
  %16104 = extractelement <4 x i32> %16103, i32 0
  %16105 = sext i32 %16104 to i64
  %16106 = getelementptr inbounds i16, i16* %10151, i64 %16105
  %16107 = load i16, i16* %16106, align 2, !tbaa !386
  %16108 = insertelement <4 x i16> undef, i16 %16107, i32 0
  %16109 = extractelement <4 x i32> %16103, i32 1
  %16110 = sext i32 %16109 to i64
  %16111 = getelementptr inbounds i16, i16* %10151, i64 %16110
  %16112 = load i16, i16* %16111, align 2, !tbaa !386
  %16113 = insertelement <4 x i16> %16108, i16 %16112, i32 1
  %16114 = extractelement <4 x i32> %16103, i32 2
  %16115 = sext i32 %16114 to i64
  %16116 = getelementptr inbounds i16, i16* %10151, i64 %16115
  %16117 = load i16, i16* %16116, align 2, !tbaa !386
  %16118 = insertelement <4 x i16> %16113, i16 %16117, i32 2
  %16119 = extractelement <4 x i32> %16103, i32 3
  %16120 = sext i32 %16119 to i64
  %16121 = getelementptr inbounds i16, i16* %10151, i64 %16120
  %16122 = load i16, i16* %16121, align 2, !tbaa !386
  %16123 = insertelement <4 x i16> %16118, i16 %16122, i32 3
  %16124 = add <4 x i32> %15288, %t471
  %16125 = extractelement <4 x i32> %16124, i32 0
  %16126 = sext i32 %16125 to i64
  %16127 = getelementptr inbounds i16, i16* %10151, i64 %16126
  %16128 = load i16, i16* %16127, align 2, !tbaa !386
  %16129 = insertelement <4 x i16> undef, i16 %16128, i32 0
  %16130 = extractelement <4 x i32> %16124, i32 1
  %16131 = sext i32 %16130 to i64
  %16132 = getelementptr inbounds i16, i16* %10151, i64 %16131
  %16133 = load i16, i16* %16132, align 2, !tbaa !386
  %16134 = insertelement <4 x i16> %16129, i16 %16133, i32 1
  %16135 = extractelement <4 x i32> %16124, i32 2
  %16136 = sext i32 %16135 to i64
  %16137 = getelementptr inbounds i16, i16* %10151, i64 %16136
  %16138 = load i16, i16* %16137, align 2, !tbaa !386
  %16139 = insertelement <4 x i16> %16134, i16 %16138, i32 2
  %16140 = extractelement <4 x i32> %16124, i32 3
  %16141 = sext i32 %16140 to i64
  %16142 = getelementptr inbounds i16, i16* %10151, i64 %16141
  %16143 = load i16, i16* %16142, align 2, !tbaa !386
  %16144 = insertelement <4 x i16> %16139, i16 %16143, i32 3
  %16145 = add <4 x i32> %15294, %t471
  %16146 = extractelement <4 x i32> %16145, i32 0
  %16147 = sext i32 %16146 to i64
  %16148 = getelementptr inbounds i16, i16* %10151, i64 %16147
  %16149 = load i16, i16* %16148, align 2, !tbaa !386
  %16150 = insertelement <4 x i16> undef, i16 %16149, i32 0
  %16151 = extractelement <4 x i32> %16145, i32 1
  %16152 = sext i32 %16151 to i64
  %16153 = getelementptr inbounds i16, i16* %10151, i64 %16152
  %16154 = load i16, i16* %16153, align 2, !tbaa !386
  %16155 = insertelement <4 x i16> %16150, i16 %16154, i32 1
  %16156 = extractelement <4 x i32> %16145, i32 2
  %16157 = sext i32 %16156 to i64
  %16158 = getelementptr inbounds i16, i16* %10151, i64 %16157
  %16159 = load i16, i16* %16158, align 2, !tbaa !386
  %16160 = insertelement <4 x i16> %16155, i16 %16159, i32 2
  %16161 = extractelement <4 x i32> %16145, i32 3
  %16162 = sext i32 %16161 to i64
  %16163 = getelementptr inbounds i16, i16* %10151, i64 %16162
  %16164 = load i16, i16* %16163, align 2, !tbaa !386
  %16165 = insertelement <4 x i16> %16160, i16 %16164, i32 3
  %16166 = add <4 x i32> %15300, %t471
  %16167 = extractelement <4 x i32> %16166, i32 0
  %16168 = sext i32 %16167 to i64
  %16169 = getelementptr inbounds i16, i16* %10151, i64 %16168
  %16170 = load i16, i16* %16169, align 2, !tbaa !386
  %16171 = insertelement <4 x i16> undef, i16 %16170, i32 0
  %16172 = extractelement <4 x i32> %16166, i32 1
  %16173 = sext i32 %16172 to i64
  %16174 = getelementptr inbounds i16, i16* %10151, i64 %16173
  %16175 = load i16, i16* %16174, align 2, !tbaa !386
  %16176 = insertelement <4 x i16> %16171, i16 %16175, i32 1
  %16177 = extractelement <4 x i32> %16166, i32 2
  %16178 = sext i32 %16177 to i64
  %16179 = getelementptr inbounds i16, i16* %10151, i64 %16178
  %16180 = load i16, i16* %16179, align 2, !tbaa !386
  %16181 = insertelement <4 x i16> %16176, i16 %16180, i32 2
  %16182 = extractelement <4 x i32> %16166, i32 3
  %16183 = sext i32 %16182 to i64
  %16184 = getelementptr inbounds i16, i16* %10151, i64 %16183
  %16185 = load i16, i16* %16184, align 2, !tbaa !386
  %16186 = insertelement <4 x i16> %16181, i16 %16185, i32 3
  %16187 = add <4 x i32> %15306, %t471
  %16188 = extractelement <4 x i32> %16187, i32 0
  %16189 = sext i32 %16188 to i64
  %16190 = getelementptr inbounds i16, i16* %10151, i64 %16189
  %16191 = load i16, i16* %16190, align 2, !tbaa !386
  %16192 = insertelement <4 x i16> undef, i16 %16191, i32 0
  %16193 = extractelement <4 x i32> %16187, i32 1
  %16194 = sext i32 %16193 to i64
  %16195 = getelementptr inbounds i16, i16* %10151, i64 %16194
  %16196 = load i16, i16* %16195, align 2, !tbaa !386
  %16197 = insertelement <4 x i16> %16192, i16 %16196, i32 1
  %16198 = extractelement <4 x i32> %16187, i32 2
  %16199 = sext i32 %16198 to i64
  %16200 = getelementptr inbounds i16, i16* %10151, i64 %16199
  %16201 = load i16, i16* %16200, align 2, !tbaa !386
  %16202 = insertelement <4 x i16> %16197, i16 %16201, i32 2
  %16203 = extractelement <4 x i32> %16187, i32 3
  %16204 = sext i32 %16203 to i64
  %16205 = getelementptr inbounds i16, i16* %10151, i64 %16204
  %16206 = load i16, i16* %16205, align 2, !tbaa !386
  %16207 = insertelement <4 x i16> %16202, i16 %16206, i32 3
  %16208 = add <4 x i16> %16102, %16081
  %16209 = add <4 x i16> %16186, %16165
  %16210 = add <4 x i16> %16012, %16014
  %16211 = add <4 x i16> %16210, %16060
  %16212 = add <4 x i16> %16211, %16208
  %16213 = add <4 x i16> %16212, %16123
  %16214 = add <4 x i16> %16208, %16060
  %16215 = add <4 x i16> %16214, %16144
  %16216 = add <4 x i16> %16215, %16209
  %16217 = add <4 x i16> %16216, %16207
  %16218 = shufflevector <4 x i16> %16213, <4 x i16> %16217, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %16219 = zext <8 x i16> %16218 to <8 x i32>
  %16220 = mul nuw nsw <8 x i32> %16219, <i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362>
  %16221 = shufflevector <8 x i32> %16220, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %16222 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %16221, i32 16)
  %16223 = shufflevector <8 x i32> %16220, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %16224 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %16223, i32 16)
  %16225 = shufflevector <4 x i16> %16222, <4 x i16> %16224, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %16226 = add <4 x i16> %16211, %16081
  %16227 = add <4 x i16> %16226, %16102
  %16228 = add <4 x i16> %16227, %16123
  %16229 = add <4 x i16> %16215, %16165
  %16230 = add <4 x i16> %16229, %16186
  %16231 = add <4 x i16> %16230, %16207
  %16232 = shufflevector <4 x i16> %16228, <4 x i16> %16231, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %16233 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %16225, <8 x i16> %16232) #11
  %16234 = lshr <8 x i16> %16233, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %16235 = add <4 x i32> %15312, %t471
  %16236 = extractelement <4 x i32> %16235, i32 0
  %16237 = sext i32 %16236 to i64
  %16238 = getelementptr inbounds i16, i16* %10151, i64 %16237
  %16239 = load i16, i16* %16238, align 2, !tbaa !386
  %16240 = insertelement <4 x i16> undef, i16 %16239, i32 0
  %16241 = extractelement <4 x i32> %16235, i32 1
  %16242 = sext i32 %16241 to i64
  %16243 = getelementptr inbounds i16, i16* %10151, i64 %16242
  %16244 = load i16, i16* %16243, align 2, !tbaa !386
  %16245 = insertelement <4 x i16> %16240, i16 %16244, i32 1
  %16246 = extractelement <4 x i32> %16235, i32 2
  %16247 = sext i32 %16246 to i64
  %16248 = getelementptr inbounds i16, i16* %10151, i64 %16247
  %16249 = load i16, i16* %16248, align 2, !tbaa !386
  %16250 = insertelement <4 x i16> %16245, i16 %16249, i32 2
  %16251 = extractelement <4 x i32> %16235, i32 3
  %16252 = sext i32 %16251 to i64
  %16253 = getelementptr inbounds i16, i16* %10151, i64 %16252
  %16254 = load i16, i16* %16253, align 2, !tbaa !386
  %16255 = insertelement <4 x i16> %16250, i16 %16254, i32 3
  %16256 = add <4 x i32> %15318, %t471
  %16257 = extractelement <4 x i32> %16256, i32 0
  %16258 = sext i32 %16257 to i64
  %16259 = getelementptr inbounds i16, i16* %10151, i64 %16258
  %16260 = load i16, i16* %16259, align 2, !tbaa !386
  %16261 = insertelement <4 x i16> undef, i16 %16260, i32 0
  %16262 = extractelement <4 x i32> %16256, i32 1
  %16263 = sext i32 %16262 to i64
  %16264 = getelementptr inbounds i16, i16* %10151, i64 %16263
  %16265 = load i16, i16* %16264, align 2, !tbaa !386
  %16266 = insertelement <4 x i16> %16261, i16 %16265, i32 1
  %16267 = extractelement <4 x i32> %16256, i32 2
  %16268 = sext i32 %16267 to i64
  %16269 = getelementptr inbounds i16, i16* %10151, i64 %16268
  %16270 = load i16, i16* %16269, align 2, !tbaa !386
  %16271 = insertelement <4 x i16> %16266, i16 %16270, i32 2
  %16272 = extractelement <4 x i32> %16256, i32 3
  %16273 = sext i32 %16272 to i64
  %16274 = getelementptr inbounds i16, i16* %10151, i64 %16273
  %16275 = load i16, i16* %16274, align 2, !tbaa !386
  %16276 = insertelement <4 x i16> %16271, i16 %16275, i32 3
  %16277 = add <4 x i32> %15324, %t471
  %16278 = extractelement <4 x i32> %16277, i32 0
  %16279 = sext i32 %16278 to i64
  %16280 = getelementptr inbounds i16, i16* %10151, i64 %16279
  %16281 = load i16, i16* %16280, align 2, !tbaa !386
  %16282 = insertelement <4 x i16> undef, i16 %16281, i32 0
  %16283 = extractelement <4 x i32> %16277, i32 1
  %16284 = sext i32 %16283 to i64
  %16285 = getelementptr inbounds i16, i16* %10151, i64 %16284
  %16286 = load i16, i16* %16285, align 2, !tbaa !386
  %16287 = insertelement <4 x i16> %16282, i16 %16286, i32 1
  %16288 = extractelement <4 x i32> %16277, i32 2
  %16289 = sext i32 %16288 to i64
  %16290 = getelementptr inbounds i16, i16* %10151, i64 %16289
  %16291 = load i16, i16* %16290, align 2, !tbaa !386
  %16292 = insertelement <4 x i16> %16287, i16 %16291, i32 2
  %16293 = extractelement <4 x i32> %16277, i32 3
  %16294 = sext i32 %16293 to i64
  %16295 = getelementptr inbounds i16, i16* %10151, i64 %16294
  %16296 = load i16, i16* %16295, align 2, !tbaa !386
  %16297 = insertelement <4 x i16> %16292, i16 %16296, i32 3
  %16298 = add <4 x i32> %15330, %t471
  %16299 = extractelement <4 x i32> %16298, i32 0
  %16300 = sext i32 %16299 to i64
  %16301 = getelementptr inbounds i16, i16* %10151, i64 %16300
  %16302 = load i16, i16* %16301, align 2, !tbaa !386
  %16303 = insertelement <4 x i16> undef, i16 %16302, i32 0
  %16304 = extractelement <4 x i32> %16298, i32 1
  %16305 = sext i32 %16304 to i64
  %16306 = getelementptr inbounds i16, i16* %10151, i64 %16305
  %16307 = load i16, i16* %16306, align 2, !tbaa !386
  %16308 = insertelement <4 x i16> %16303, i16 %16307, i32 1
  %16309 = extractelement <4 x i32> %16298, i32 2
  %16310 = sext i32 %16309 to i64
  %16311 = getelementptr inbounds i16, i16* %10151, i64 %16310
  %16312 = load i16, i16* %16311, align 2, !tbaa !386
  %16313 = insertelement <4 x i16> %16308, i16 %16312, i32 2
  %16314 = extractelement <4 x i32> %16298, i32 3
  %16315 = sext i32 %16314 to i64
  %16316 = getelementptr inbounds i16, i16* %10151, i64 %16315
  %16317 = load i16, i16* %16316, align 2, !tbaa !386
  %16318 = insertelement <4 x i16> %16313, i16 %16317, i32 3
  %16319 = add <4 x i32> %15336, %t471
  %16320 = extractelement <4 x i32> %16319, i32 0
  %16321 = sext i32 %16320 to i64
  %16322 = getelementptr inbounds i16, i16* %10151, i64 %16321
  %16323 = load i16, i16* %16322, align 2, !tbaa !386
  %16324 = insertelement <4 x i16> undef, i16 %16323, i32 0
  %16325 = extractelement <4 x i32> %16319, i32 1
  %16326 = sext i32 %16325 to i64
  %16327 = getelementptr inbounds i16, i16* %10151, i64 %16326
  %16328 = load i16, i16* %16327, align 2, !tbaa !386
  %16329 = insertelement <4 x i16> %16324, i16 %16328, i32 1
  %16330 = extractelement <4 x i32> %16319, i32 2
  %16331 = sext i32 %16330 to i64
  %16332 = getelementptr inbounds i16, i16* %10151, i64 %16331
  %16333 = load i16, i16* %16332, align 2, !tbaa !386
  %16334 = insertelement <4 x i16> %16329, i16 %16333, i32 2
  %16335 = extractelement <4 x i32> %16319, i32 3
  %16336 = sext i32 %16335 to i64
  %16337 = getelementptr inbounds i16, i16* %10151, i64 %16336
  %16338 = load i16, i16* %16337, align 2, !tbaa !386
  %16339 = insertelement <4 x i16> %16334, i16 %16338, i32 3
  %16340 = add <4 x i32> %15342, %t471
  %16341 = extractelement <4 x i32> %16340, i32 0
  %16342 = sext i32 %16341 to i64
  %16343 = getelementptr inbounds i16, i16* %10151, i64 %16342
  %16344 = load i16, i16* %16343, align 2, !tbaa !386
  %16345 = insertelement <4 x i16> undef, i16 %16344, i32 0
  %16346 = extractelement <4 x i32> %16340, i32 1
  %16347 = sext i32 %16346 to i64
  %16348 = getelementptr inbounds i16, i16* %10151, i64 %16347
  %16349 = load i16, i16* %16348, align 2, !tbaa !386
  %16350 = insertelement <4 x i16> %16345, i16 %16349, i32 1
  %16351 = extractelement <4 x i32> %16340, i32 2
  %16352 = sext i32 %16351 to i64
  %16353 = getelementptr inbounds i16, i16* %10151, i64 %16352
  %16354 = load i16, i16* %16353, align 2, !tbaa !386
  %16355 = insertelement <4 x i16> %16350, i16 %16354, i32 2
  %16356 = extractelement <4 x i32> %16340, i32 3
  %16357 = sext i32 %16356 to i64
  %16358 = getelementptr inbounds i16, i16* %10151, i64 %16357
  %16359 = load i16, i16* %16358, align 2, !tbaa !386
  %16360 = insertelement <4 x i16> %16355, i16 %16359, i32 3
  %16361 = add <4 x i32> %15348, %t471
  %16362 = extractelement <4 x i32> %16361, i32 0
  %16363 = sext i32 %16362 to i64
  %16364 = getelementptr inbounds i16, i16* %10151, i64 %16363
  %16365 = load i16, i16* %16364, align 2, !tbaa !386
  %16366 = insertelement <4 x i16> undef, i16 %16365, i32 0
  %16367 = extractelement <4 x i32> %16361, i32 1
  %16368 = sext i32 %16367 to i64
  %16369 = getelementptr inbounds i16, i16* %10151, i64 %16368
  %16370 = load i16, i16* %16369, align 2, !tbaa !386
  %16371 = insertelement <4 x i16> %16366, i16 %16370, i32 1
  %16372 = extractelement <4 x i32> %16361, i32 2
  %16373 = sext i32 %16372 to i64
  %16374 = getelementptr inbounds i16, i16* %10151, i64 %16373
  %16375 = load i16, i16* %16374, align 2, !tbaa !386
  %16376 = insertelement <4 x i16> %16371, i16 %16375, i32 2
  %16377 = extractelement <4 x i32> %16361, i32 3
  %16378 = sext i32 %16377 to i64
  %16379 = getelementptr inbounds i16, i16* %10151, i64 %16378
  %16380 = load i16, i16* %16379, align 2, !tbaa !386
  %16381 = insertelement <4 x i16> %16376, i16 %16380, i32 3
  %16382 = add <4 x i32> %15354, %t471
  %16383 = extractelement <4 x i32> %16382, i32 0
  %16384 = sext i32 %16383 to i64
  %16385 = getelementptr inbounds i16, i16* %10151, i64 %16384
  %16386 = load i16, i16* %16385, align 2, !tbaa !386
  %16387 = insertelement <4 x i16> undef, i16 %16386, i32 0
  %16388 = extractelement <4 x i32> %16382, i32 1
  %16389 = sext i32 %16388 to i64
  %16390 = getelementptr inbounds i16, i16* %10151, i64 %16389
  %16391 = load i16, i16* %16390, align 2, !tbaa !386
  %16392 = insertelement <4 x i16> %16387, i16 %16391, i32 1
  %16393 = extractelement <4 x i32> %16382, i32 2
  %16394 = sext i32 %16393 to i64
  %16395 = getelementptr inbounds i16, i16* %10151, i64 %16394
  %16396 = load i16, i16* %16395, align 2, !tbaa !386
  %16397 = insertelement <4 x i16> %16392, i16 %16396, i32 2
  %16398 = extractelement <4 x i32> %16382, i32 3
  %16399 = sext i32 %16398 to i64
  %16400 = getelementptr inbounds i16, i16* %10151, i64 %16399
  %16401 = load i16, i16* %16400, align 2, !tbaa !386
  %16402 = insertelement <4 x i16> %16397, i16 %16401, i32 3
  %16403 = add <4 x i16> %16297, %16276
  %16404 = add <4 x i16> %16381, %16360
  %16405 = add <4 x i16> %16207, %16209
  %16406 = add <4 x i16> %16405, %16255
  %16407 = add <4 x i16> %16406, %16403
  %16408 = add <4 x i16> %16407, %16318
  %16409 = add <4 x i16> %16403, %16255
  %16410 = add <4 x i16> %16409, %16339
  %16411 = add <4 x i16> %16410, %16404
  %16412 = add <4 x i16> %16411, %16402
  %16413 = shufflevector <4 x i16> %16408, <4 x i16> %16412, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %16414 = zext <8 x i16> %16413 to <8 x i32>
  %16415 = mul nuw nsw <8 x i32> %16414, <i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362>
  %16416 = shufflevector <8 x i32> %16415, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %16417 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %16416, i32 16)
  %16418 = shufflevector <8 x i32> %16415, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %16419 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %16418, i32 16)
  %16420 = shufflevector <4 x i16> %16417, <4 x i16> %16419, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %16421 = add <4 x i16> %16406, %16276
  %16422 = add <4 x i16> %16421, %16297
  %16423 = add <4 x i16> %16422, %16318
  %16424 = add <4 x i16> %16410, %16360
  %16425 = add <4 x i16> %16424, %16381
  %16426 = add <4 x i16> %16425, %16402
  %16427 = shufflevector <4 x i16> %16423, <4 x i16> %16426, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %16428 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %16420, <8 x i16> %16427) #11
  %16429 = lshr <8 x i16> %16428, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %16430 = add <4 x i32> %15360, %t471
  %16431 = extractelement <4 x i32> %16430, i32 0
  %16432 = sext i32 %16431 to i64
  %16433 = getelementptr inbounds i16, i16* %10151, i64 %16432
  %16434 = load i16, i16* %16433, align 2, !tbaa !386
  %16435 = insertelement <4 x i16> undef, i16 %16434, i32 0
  %16436 = extractelement <4 x i32> %16430, i32 1
  %16437 = sext i32 %16436 to i64
  %16438 = getelementptr inbounds i16, i16* %10151, i64 %16437
  %16439 = load i16, i16* %16438, align 2, !tbaa !386
  %16440 = insertelement <4 x i16> %16435, i16 %16439, i32 1
  %16441 = extractelement <4 x i32> %16430, i32 2
  %16442 = sext i32 %16441 to i64
  %16443 = getelementptr inbounds i16, i16* %10151, i64 %16442
  %16444 = load i16, i16* %16443, align 2, !tbaa !386
  %16445 = insertelement <4 x i16> %16440, i16 %16444, i32 2
  %16446 = extractelement <4 x i32> %16430, i32 3
  %16447 = sext i32 %16446 to i64
  %16448 = getelementptr inbounds i16, i16* %10151, i64 %16447
  %16449 = load i16, i16* %16448, align 2, !tbaa !386
  %16450 = insertelement <4 x i16> %16445, i16 %16449, i32 3
  %16451 = add <4 x i32> %15366, %t471
  %16452 = extractelement <4 x i32> %16451, i32 0
  %16453 = sext i32 %16452 to i64
  %16454 = getelementptr inbounds i16, i16* %10151, i64 %16453
  %16455 = load i16, i16* %16454, align 2, !tbaa !386
  %16456 = insertelement <4 x i16> undef, i16 %16455, i32 0
  %16457 = extractelement <4 x i32> %16451, i32 1
  %16458 = sext i32 %16457 to i64
  %16459 = getelementptr inbounds i16, i16* %10151, i64 %16458
  %16460 = load i16, i16* %16459, align 2, !tbaa !386
  %16461 = insertelement <4 x i16> %16456, i16 %16460, i32 1
  %16462 = extractelement <4 x i32> %16451, i32 2
  %16463 = sext i32 %16462 to i64
  %16464 = getelementptr inbounds i16, i16* %10151, i64 %16463
  %16465 = load i16, i16* %16464, align 2, !tbaa !386
  %16466 = insertelement <4 x i16> %16461, i16 %16465, i32 2
  %16467 = extractelement <4 x i32> %16451, i32 3
  %16468 = sext i32 %16467 to i64
  %16469 = getelementptr inbounds i16, i16* %10151, i64 %16468
  %16470 = load i16, i16* %16469, align 2, !tbaa !386
  %16471 = insertelement <4 x i16> %16466, i16 %16470, i32 3
  %16472 = add <4 x i32> %15372, %t471
  %16473 = extractelement <4 x i32> %16472, i32 0
  %16474 = sext i32 %16473 to i64
  %16475 = getelementptr inbounds i16, i16* %10151, i64 %16474
  %16476 = load i16, i16* %16475, align 2, !tbaa !386
  %16477 = insertelement <4 x i16> undef, i16 %16476, i32 0
  %16478 = extractelement <4 x i32> %16472, i32 1
  %16479 = sext i32 %16478 to i64
  %16480 = getelementptr inbounds i16, i16* %10151, i64 %16479
  %16481 = load i16, i16* %16480, align 2, !tbaa !386
  %16482 = insertelement <4 x i16> %16477, i16 %16481, i32 1
  %16483 = extractelement <4 x i32> %16472, i32 2
  %16484 = sext i32 %16483 to i64
  %16485 = getelementptr inbounds i16, i16* %10151, i64 %16484
  %16486 = load i16, i16* %16485, align 2, !tbaa !386
  %16487 = insertelement <4 x i16> %16482, i16 %16486, i32 2
  %16488 = extractelement <4 x i32> %16472, i32 3
  %16489 = sext i32 %16488 to i64
  %16490 = getelementptr inbounds i16, i16* %10151, i64 %16489
  %16491 = load i16, i16* %16490, align 2, !tbaa !386
  %16492 = insertelement <4 x i16> %16487, i16 %16491, i32 3
  %16493 = add <4 x i32> %15378, %t471
  %16494 = extractelement <4 x i32> %16493, i32 0
  %16495 = sext i32 %16494 to i64
  %16496 = getelementptr inbounds i16, i16* %10151, i64 %16495
  %16497 = load i16, i16* %16496, align 2, !tbaa !386
  %16498 = insertelement <4 x i16> undef, i16 %16497, i32 0
  %16499 = extractelement <4 x i32> %16493, i32 1
  %16500 = sext i32 %16499 to i64
  %16501 = getelementptr inbounds i16, i16* %10151, i64 %16500
  %16502 = load i16, i16* %16501, align 2, !tbaa !386
  %16503 = insertelement <4 x i16> %16498, i16 %16502, i32 1
  %16504 = extractelement <4 x i32> %16493, i32 2
  %16505 = sext i32 %16504 to i64
  %16506 = getelementptr inbounds i16, i16* %10151, i64 %16505
  %16507 = load i16, i16* %16506, align 2, !tbaa !386
  %16508 = insertelement <4 x i16> %16503, i16 %16507, i32 2
  %16509 = extractelement <4 x i32> %16493, i32 3
  %16510 = sext i32 %16509 to i64
  %16511 = getelementptr inbounds i16, i16* %10151, i64 %16510
  %16512 = load i16, i16* %16511, align 2, !tbaa !386
  %16513 = insertelement <4 x i16> %16508, i16 %16512, i32 3
  %16514 = add <4 x i32> %15384, %t471
  %16515 = extractelement <4 x i32> %16514, i32 0
  %16516 = sext i32 %16515 to i64
  %16517 = getelementptr inbounds i16, i16* %10151, i64 %16516
  %16518 = load i16, i16* %16517, align 2, !tbaa !386
  %16519 = insertelement <4 x i16> undef, i16 %16518, i32 0
  %16520 = extractelement <4 x i32> %16514, i32 1
  %16521 = sext i32 %16520 to i64
  %16522 = getelementptr inbounds i16, i16* %10151, i64 %16521
  %16523 = load i16, i16* %16522, align 2, !tbaa !386
  %16524 = insertelement <4 x i16> %16519, i16 %16523, i32 1
  %16525 = extractelement <4 x i32> %16514, i32 2
  %16526 = sext i32 %16525 to i64
  %16527 = getelementptr inbounds i16, i16* %10151, i64 %16526
  %16528 = load i16, i16* %16527, align 2, !tbaa !386
  %16529 = insertelement <4 x i16> %16524, i16 %16528, i32 2
  %16530 = extractelement <4 x i32> %16514, i32 3
  %16531 = sext i32 %16530 to i64
  %16532 = getelementptr inbounds i16, i16* %10151, i64 %16531
  %16533 = load i16, i16* %16532, align 2, !tbaa !386
  %16534 = insertelement <4 x i16> %16529, i16 %16533, i32 3
  %16535 = add <4 x i32> %15390, %t471
  %16536 = extractelement <4 x i32> %16535, i32 0
  %16537 = sext i32 %16536 to i64
  %16538 = getelementptr inbounds i16, i16* %10151, i64 %16537
  %16539 = load i16, i16* %16538, align 2, !tbaa !386
  %16540 = insertelement <4 x i16> undef, i16 %16539, i32 0
  %16541 = extractelement <4 x i32> %16535, i32 1
  %16542 = sext i32 %16541 to i64
  %16543 = getelementptr inbounds i16, i16* %10151, i64 %16542
  %16544 = load i16, i16* %16543, align 2, !tbaa !386
  %16545 = insertelement <4 x i16> %16540, i16 %16544, i32 1
  %16546 = extractelement <4 x i32> %16535, i32 2
  %16547 = sext i32 %16546 to i64
  %16548 = getelementptr inbounds i16, i16* %10151, i64 %16547
  %16549 = load i16, i16* %16548, align 2, !tbaa !386
  %16550 = insertelement <4 x i16> %16545, i16 %16549, i32 2
  %16551 = extractelement <4 x i32> %16535, i32 3
  %16552 = sext i32 %16551 to i64
  %16553 = getelementptr inbounds i16, i16* %10151, i64 %16552
  %16554 = load i16, i16* %16553, align 2, !tbaa !386
  %16555 = insertelement <4 x i16> %16550, i16 %16554, i32 3
  %16556 = add <4 x i32> %15396, %t471
  %16557 = extractelement <4 x i32> %16556, i32 0
  %16558 = sext i32 %16557 to i64
  %16559 = getelementptr inbounds i16, i16* %10151, i64 %16558
  %16560 = load i16, i16* %16559, align 2, !tbaa !386
  %16561 = insertelement <4 x i16> undef, i16 %16560, i32 0
  %16562 = extractelement <4 x i32> %16556, i32 1
  %16563 = sext i32 %16562 to i64
  %16564 = getelementptr inbounds i16, i16* %10151, i64 %16563
  %16565 = load i16, i16* %16564, align 2, !tbaa !386
  %16566 = insertelement <4 x i16> %16561, i16 %16565, i32 1
  %16567 = extractelement <4 x i32> %16556, i32 2
  %16568 = sext i32 %16567 to i64
  %16569 = getelementptr inbounds i16, i16* %10151, i64 %16568
  %16570 = load i16, i16* %16569, align 2, !tbaa !386
  %16571 = insertelement <4 x i16> %16566, i16 %16570, i32 2
  %16572 = extractelement <4 x i32> %16556, i32 3
  %16573 = sext i32 %16572 to i64
  %16574 = getelementptr inbounds i16, i16* %10151, i64 %16573
  %16575 = load i16, i16* %16574, align 2, !tbaa !386
  %16576 = insertelement <4 x i16> %16571, i16 %16575, i32 3
  %16577 = add <4 x i32> %15402, %t471
  %16578 = extractelement <4 x i32> %16577, i32 0
  %16579 = sext i32 %16578 to i64
  %16580 = getelementptr inbounds i16, i16* %10151, i64 %16579
  %16581 = load i16, i16* %16580, align 2, !tbaa !386
  %16582 = insertelement <4 x i16> undef, i16 %16581, i32 0
  %16583 = extractelement <4 x i32> %16577, i32 1
  %16584 = sext i32 %16583 to i64
  %16585 = getelementptr inbounds i16, i16* %10151, i64 %16584
  %16586 = load i16, i16* %16585, align 2, !tbaa !386
  %16587 = insertelement <4 x i16> %16582, i16 %16586, i32 1
  %16588 = extractelement <4 x i32> %16577, i32 2
  %16589 = sext i32 %16588 to i64
  %16590 = getelementptr inbounds i16, i16* %10151, i64 %16589
  %16591 = load i16, i16* %16590, align 2, !tbaa !386
  %16592 = insertelement <4 x i16> %16587, i16 %16591, i32 2
  %16593 = extractelement <4 x i32> %16577, i32 3
  %16594 = sext i32 %16593 to i64
  %16595 = getelementptr inbounds i16, i16* %10151, i64 %16594
  %16596 = load i16, i16* %16595, align 2, !tbaa !386
  %16597 = insertelement <4 x i16> %16592, i16 %16596, i32 3
  %16598 = add <4 x i16> %16492, %16471
  %16599 = add <4 x i16> %16576, %16555
  %16600 = add <4 x i16> %16402, %16404
  %16601 = add <4 x i16> %16600, %16450
  %16602 = add <4 x i16> %16601, %16598
  %16603 = add <4 x i16> %16602, %16513
  %16604 = add <4 x i16> %16598, %16450
  %16605 = add <4 x i16> %16604, %16534
  %16606 = add <4 x i16> %16605, %16599
  %16607 = add <4 x i16> %16606, %16597
  %16608 = shufflevector <4 x i16> %16603, <4 x i16> %16607, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %16609 = zext <8 x i16> %16608 to <8 x i32>
  %16610 = mul nuw nsw <8 x i32> %16609, <i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362>
  %16611 = shufflevector <8 x i32> %16610, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %16612 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %16611, i32 16)
  %16613 = shufflevector <8 x i32> %16610, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %16614 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %16613, i32 16)
  %16615 = shufflevector <4 x i16> %16612, <4 x i16> %16614, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %16616 = add <4 x i16> %16601, %16471
  %16617 = add <4 x i16> %16616, %16492
  %16618 = add <4 x i16> %16617, %16513
  %16619 = add <4 x i16> %16605, %16555
  %16620 = add <4 x i16> %16619, %16576
  %16621 = add <4 x i16> %16620, %16597
  %16622 = shufflevector <4 x i16> %16618, <4 x i16> %16621, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %16623 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %16615, <8 x i16> %16622) #11
  %16624 = lshr <8 x i16> %16623, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %16625 = add <4 x i32> %15408, %t471
  %16626 = extractelement <4 x i32> %16625, i32 0
  %16627 = sext i32 %16626 to i64
  %16628 = getelementptr inbounds i16, i16* %10151, i64 %16627
  %16629 = load i16, i16* %16628, align 2, !tbaa !386
  %16630 = insertelement <4 x i16> undef, i16 %16629, i32 0
  %16631 = extractelement <4 x i32> %16625, i32 1
  %16632 = sext i32 %16631 to i64
  %16633 = getelementptr inbounds i16, i16* %10151, i64 %16632
  %16634 = load i16, i16* %16633, align 2, !tbaa !386
  %16635 = insertelement <4 x i16> %16630, i16 %16634, i32 1
  %16636 = extractelement <4 x i32> %16625, i32 2
  %16637 = sext i32 %16636 to i64
  %16638 = getelementptr inbounds i16, i16* %10151, i64 %16637
  %16639 = load i16, i16* %16638, align 2, !tbaa !386
  %16640 = insertelement <4 x i16> %16635, i16 %16639, i32 2
  %16641 = extractelement <4 x i32> %16625, i32 3
  %16642 = sext i32 %16641 to i64
  %16643 = getelementptr inbounds i16, i16* %10151, i64 %16642
  %16644 = load i16, i16* %16643, align 2, !tbaa !386
  %16645 = insertelement <4 x i16> %16640, i16 %16644, i32 3
  %16646 = add <4 x i32> %15414, %t471
  %16647 = extractelement <4 x i32> %16646, i32 0
  %16648 = sext i32 %16647 to i64
  %16649 = getelementptr inbounds i16, i16* %10151, i64 %16648
  %16650 = load i16, i16* %16649, align 2, !tbaa !386
  %16651 = insertelement <4 x i16> undef, i16 %16650, i32 0
  %16652 = extractelement <4 x i32> %16646, i32 1
  %16653 = sext i32 %16652 to i64
  %16654 = getelementptr inbounds i16, i16* %10151, i64 %16653
  %16655 = load i16, i16* %16654, align 2, !tbaa !386
  %16656 = insertelement <4 x i16> %16651, i16 %16655, i32 1
  %16657 = extractelement <4 x i32> %16646, i32 2
  %16658 = sext i32 %16657 to i64
  %16659 = getelementptr inbounds i16, i16* %10151, i64 %16658
  %16660 = load i16, i16* %16659, align 2, !tbaa !386
  %16661 = insertelement <4 x i16> %16656, i16 %16660, i32 2
  %16662 = extractelement <4 x i32> %16646, i32 3
  %16663 = sext i32 %16662 to i64
  %16664 = getelementptr inbounds i16, i16* %10151, i64 %16663
  %16665 = load i16, i16* %16664, align 2, !tbaa !386
  %16666 = insertelement <4 x i16> %16661, i16 %16665, i32 3
  %16667 = add <4 x i32> %15420, %t471
  %16668 = extractelement <4 x i32> %16667, i32 0
  %16669 = sext i32 %16668 to i64
  %16670 = getelementptr inbounds i16, i16* %10151, i64 %16669
  %16671 = load i16, i16* %16670, align 2, !tbaa !386
  %16672 = insertelement <4 x i16> undef, i16 %16671, i32 0
  %16673 = extractelement <4 x i32> %16667, i32 1
  %16674 = sext i32 %16673 to i64
  %16675 = getelementptr inbounds i16, i16* %10151, i64 %16674
  %16676 = load i16, i16* %16675, align 2, !tbaa !386
  %16677 = insertelement <4 x i16> %16672, i16 %16676, i32 1
  %16678 = extractelement <4 x i32> %16667, i32 2
  %16679 = sext i32 %16678 to i64
  %16680 = getelementptr inbounds i16, i16* %10151, i64 %16679
  %16681 = load i16, i16* %16680, align 2, !tbaa !386
  %16682 = insertelement <4 x i16> %16677, i16 %16681, i32 2
  %16683 = extractelement <4 x i32> %16667, i32 3
  %16684 = sext i32 %16683 to i64
  %16685 = getelementptr inbounds i16, i16* %10151, i64 %16684
  %16686 = load i16, i16* %16685, align 2, !tbaa !386
  %16687 = insertelement <4 x i16> %16682, i16 %16686, i32 3
  %16688 = add <4 x i32> %15426, %t471
  %16689 = extractelement <4 x i32> %16688, i32 0
  %16690 = sext i32 %16689 to i64
  %16691 = getelementptr inbounds i16, i16* %10151, i64 %16690
  %16692 = load i16, i16* %16691, align 2, !tbaa !386
  %16693 = insertelement <4 x i16> undef, i16 %16692, i32 0
  %16694 = extractelement <4 x i32> %16688, i32 1
  %16695 = sext i32 %16694 to i64
  %16696 = getelementptr inbounds i16, i16* %10151, i64 %16695
  %16697 = load i16, i16* %16696, align 2, !tbaa !386
  %16698 = insertelement <4 x i16> %16693, i16 %16697, i32 1
  %16699 = extractelement <4 x i32> %16688, i32 2
  %16700 = sext i32 %16699 to i64
  %16701 = getelementptr inbounds i16, i16* %10151, i64 %16700
  %16702 = load i16, i16* %16701, align 2, !tbaa !386
  %16703 = insertelement <4 x i16> %16698, i16 %16702, i32 2
  %16704 = extractelement <4 x i32> %16688, i32 3
  %16705 = sext i32 %16704 to i64
  %16706 = getelementptr inbounds i16, i16* %10151, i64 %16705
  %16707 = load i16, i16* %16706, align 2, !tbaa !386
  %16708 = insertelement <4 x i16> %16703, i16 %16707, i32 3
  %16709 = add <4 x i32> %15432, %t471
  %16710 = extractelement <4 x i32> %16709, i32 0
  %16711 = sext i32 %16710 to i64
  %16712 = getelementptr inbounds i16, i16* %10151, i64 %16711
  %16713 = load i16, i16* %16712, align 2, !tbaa !386
  %16714 = insertelement <4 x i16> undef, i16 %16713, i32 0
  %16715 = extractelement <4 x i32> %16709, i32 1
  %16716 = sext i32 %16715 to i64
  %16717 = getelementptr inbounds i16, i16* %10151, i64 %16716
  %16718 = load i16, i16* %16717, align 2, !tbaa !386
  %16719 = insertelement <4 x i16> %16714, i16 %16718, i32 1
  %16720 = extractelement <4 x i32> %16709, i32 2
  %16721 = sext i32 %16720 to i64
  %16722 = getelementptr inbounds i16, i16* %10151, i64 %16721
  %16723 = load i16, i16* %16722, align 2, !tbaa !386
  %16724 = insertelement <4 x i16> %16719, i16 %16723, i32 2
  %16725 = extractelement <4 x i32> %16709, i32 3
  %16726 = sext i32 %16725 to i64
  %16727 = getelementptr inbounds i16, i16* %10151, i64 %16726
  %16728 = load i16, i16* %16727, align 2, !tbaa !386
  %16729 = insertelement <4 x i16> %16724, i16 %16728, i32 3
  %16730 = add <4 x i32> %15438, %t471
  %16731 = extractelement <4 x i32> %16730, i32 0
  %16732 = sext i32 %16731 to i64
  %16733 = getelementptr inbounds i16, i16* %10151, i64 %16732
  %16734 = load i16, i16* %16733, align 2, !tbaa !386
  %16735 = insertelement <4 x i16> undef, i16 %16734, i32 0
  %16736 = extractelement <4 x i32> %16730, i32 1
  %16737 = sext i32 %16736 to i64
  %16738 = getelementptr inbounds i16, i16* %10151, i64 %16737
  %16739 = load i16, i16* %16738, align 2, !tbaa !386
  %16740 = insertelement <4 x i16> %16735, i16 %16739, i32 1
  %16741 = extractelement <4 x i32> %16730, i32 2
  %16742 = sext i32 %16741 to i64
  %16743 = getelementptr inbounds i16, i16* %10151, i64 %16742
  %16744 = load i16, i16* %16743, align 2, !tbaa !386
  %16745 = insertelement <4 x i16> %16740, i16 %16744, i32 2
  %16746 = extractelement <4 x i32> %16730, i32 3
  %16747 = sext i32 %16746 to i64
  %16748 = getelementptr inbounds i16, i16* %10151, i64 %16747
  %16749 = load i16, i16* %16748, align 2, !tbaa !386
  %16750 = insertelement <4 x i16> %16745, i16 %16749, i32 3
  %16751 = add <4 x i32> %15444, %t471
  %16752 = extractelement <4 x i32> %16751, i32 0
  %16753 = sext i32 %16752 to i64
  %16754 = getelementptr inbounds i16, i16* %10151, i64 %16753
  %16755 = load i16, i16* %16754, align 2, !tbaa !386
  %16756 = insertelement <4 x i16> undef, i16 %16755, i32 0
  %16757 = extractelement <4 x i32> %16751, i32 1
  %16758 = sext i32 %16757 to i64
  %16759 = getelementptr inbounds i16, i16* %10151, i64 %16758
  %16760 = load i16, i16* %16759, align 2, !tbaa !386
  %16761 = insertelement <4 x i16> %16756, i16 %16760, i32 1
  %16762 = extractelement <4 x i32> %16751, i32 2
  %16763 = sext i32 %16762 to i64
  %16764 = getelementptr inbounds i16, i16* %10151, i64 %16763
  %16765 = load i16, i16* %16764, align 2, !tbaa !386
  %16766 = insertelement <4 x i16> %16761, i16 %16765, i32 2
  %16767 = extractelement <4 x i32> %16751, i32 3
  %16768 = sext i32 %16767 to i64
  %16769 = getelementptr inbounds i16, i16* %10151, i64 %16768
  %16770 = load i16, i16* %16769, align 2, !tbaa !386
  %16771 = insertelement <4 x i16> %16766, i16 %16770, i32 3
  %16772 = add <4 x i32> %15450, %t471
  %16773 = extractelement <4 x i32> %16772, i32 0
  %16774 = sext i32 %16773 to i64
  %16775 = getelementptr inbounds i16, i16* %10151, i64 %16774
  %16776 = load i16, i16* %16775, align 2, !tbaa !386
  %16777 = insertelement <4 x i16> undef, i16 %16776, i32 0
  %16778 = extractelement <4 x i32> %16772, i32 1
  %16779 = sext i32 %16778 to i64
  %16780 = getelementptr inbounds i16, i16* %10151, i64 %16779
  %16781 = load i16, i16* %16780, align 2, !tbaa !386
  %16782 = insertelement <4 x i16> %16777, i16 %16781, i32 1
  %16783 = extractelement <4 x i32> %16772, i32 2
  %16784 = sext i32 %16783 to i64
  %16785 = getelementptr inbounds i16, i16* %10151, i64 %16784
  %16786 = load i16, i16* %16785, align 2, !tbaa !386
  %16787 = insertelement <4 x i16> %16782, i16 %16786, i32 2
  %16788 = extractelement <4 x i32> %16772, i32 3
  %16789 = sext i32 %16788 to i64
  %16790 = getelementptr inbounds i16, i16* %10151, i64 %16789
  %16791 = load i16, i16* %16790, align 2, !tbaa !386
  %16792 = insertelement <4 x i16> %16787, i16 %16791, i32 3
  %16793 = add <4 x i16> %16687, %16666
  %16794 = add <4 x i16> %16771, %16750
  %16795 = add <4 x i16> %16597, %16599
  %16796 = add <4 x i16> %16795, %16645
  %16797 = add <4 x i16> %16796, %16793
  %16798 = add <4 x i16> %16797, %16708
  %16799 = add <4 x i16> %16793, %16645
  %16800 = add <4 x i16> %16799, %16729
  %16801 = add <4 x i16> %16800, %16794
  %16802 = add <4 x i16> %16801, %16792
  %16803 = shufflevector <4 x i16> %16798, <4 x i16> %16802, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %16804 = zext <8 x i16> %16803 to <8 x i32>
  %16805 = mul nuw nsw <8 x i32> %16804, <i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362>
  %16806 = shufflevector <8 x i32> %16805, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %16807 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %16806, i32 16)
  %16808 = shufflevector <8 x i32> %16805, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %16809 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %16808, i32 16)
  %16810 = shufflevector <4 x i16> %16807, <4 x i16> %16809, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %16811 = add <4 x i16> %16796, %16666
  %16812 = add <4 x i16> %16811, %16687
  %16813 = add <4 x i16> %16812, %16708
  %16814 = add <4 x i16> %16800, %16750
  %16815 = add <4 x i16> %16814, %16771
  %16816 = add <4 x i16> %16815, %16792
  %16817 = shufflevector <4 x i16> %16813, <4 x i16> %16816, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %16818 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %16810, <8 x i16> %16817) #11
  %16819 = lshr <8 x i16> %16818, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %16820 = add <4 x i32> %15456, %t471
  %16821 = extractelement <4 x i32> %16820, i32 0
  %16822 = sext i32 %16821 to i64
  %16823 = getelementptr inbounds i16, i16* %10151, i64 %16822
  %16824 = load i16, i16* %16823, align 2, !tbaa !386
  %16825 = insertelement <4 x i16> undef, i16 %16824, i32 0
  %16826 = extractelement <4 x i32> %16820, i32 1
  %16827 = sext i32 %16826 to i64
  %16828 = getelementptr inbounds i16, i16* %10151, i64 %16827
  %16829 = load i16, i16* %16828, align 2, !tbaa !386
  %16830 = insertelement <4 x i16> %16825, i16 %16829, i32 1
  %16831 = extractelement <4 x i32> %16820, i32 2
  %16832 = sext i32 %16831 to i64
  %16833 = getelementptr inbounds i16, i16* %10151, i64 %16832
  %16834 = load i16, i16* %16833, align 2, !tbaa !386
  %16835 = insertelement <4 x i16> %16830, i16 %16834, i32 2
  %16836 = extractelement <4 x i32> %16820, i32 3
  %16837 = sext i32 %16836 to i64
  %16838 = getelementptr inbounds i16, i16* %10151, i64 %16837
  %16839 = load i16, i16* %16838, align 2, !tbaa !386
  %16840 = insertelement <4 x i16> %16835, i16 %16839, i32 3
  %16841 = add <4 x i32> %15462, %t471
  %16842 = extractelement <4 x i32> %16841, i32 0
  %16843 = sext i32 %16842 to i64
  %16844 = getelementptr inbounds i16, i16* %10151, i64 %16843
  %16845 = load i16, i16* %16844, align 2, !tbaa !386
  %16846 = insertelement <4 x i16> undef, i16 %16845, i32 0
  %16847 = extractelement <4 x i32> %16841, i32 1
  %16848 = sext i32 %16847 to i64
  %16849 = getelementptr inbounds i16, i16* %10151, i64 %16848
  %16850 = load i16, i16* %16849, align 2, !tbaa !386
  %16851 = insertelement <4 x i16> %16846, i16 %16850, i32 1
  %16852 = extractelement <4 x i32> %16841, i32 2
  %16853 = sext i32 %16852 to i64
  %16854 = getelementptr inbounds i16, i16* %10151, i64 %16853
  %16855 = load i16, i16* %16854, align 2, !tbaa !386
  %16856 = insertelement <4 x i16> %16851, i16 %16855, i32 2
  %16857 = extractelement <4 x i32> %16841, i32 3
  %16858 = sext i32 %16857 to i64
  %16859 = getelementptr inbounds i16, i16* %10151, i64 %16858
  %16860 = load i16, i16* %16859, align 2, !tbaa !386
  %16861 = insertelement <4 x i16> %16856, i16 %16860, i32 3
  %16862 = add <4 x i32> %15468, %t471
  %16863 = extractelement <4 x i32> %16862, i32 0
  %16864 = sext i32 %16863 to i64
  %16865 = getelementptr inbounds i16, i16* %10151, i64 %16864
  %16866 = load i16, i16* %16865, align 2, !tbaa !386
  %16867 = insertelement <4 x i16> undef, i16 %16866, i32 0
  %16868 = extractelement <4 x i32> %16862, i32 1
  %16869 = sext i32 %16868 to i64
  %16870 = getelementptr inbounds i16, i16* %10151, i64 %16869
  %16871 = load i16, i16* %16870, align 2, !tbaa !386
  %16872 = insertelement <4 x i16> %16867, i16 %16871, i32 1
  %16873 = extractelement <4 x i32> %16862, i32 2
  %16874 = sext i32 %16873 to i64
  %16875 = getelementptr inbounds i16, i16* %10151, i64 %16874
  %16876 = load i16, i16* %16875, align 2, !tbaa !386
  %16877 = insertelement <4 x i16> %16872, i16 %16876, i32 2
  %16878 = extractelement <4 x i32> %16862, i32 3
  %16879 = sext i32 %16878 to i64
  %16880 = getelementptr inbounds i16, i16* %10151, i64 %16879
  %16881 = load i16, i16* %16880, align 2, !tbaa !386
  %16882 = insertelement <4 x i16> %16877, i16 %16881, i32 3
  %16883 = add <4 x i32> %15474, %t471
  %16884 = extractelement <4 x i32> %16883, i32 0
  %16885 = sext i32 %16884 to i64
  %16886 = getelementptr inbounds i16, i16* %10151, i64 %16885
  %16887 = load i16, i16* %16886, align 2, !tbaa !386
  %16888 = insertelement <4 x i16> undef, i16 %16887, i32 0
  %16889 = extractelement <4 x i32> %16883, i32 1
  %16890 = sext i32 %16889 to i64
  %16891 = getelementptr inbounds i16, i16* %10151, i64 %16890
  %16892 = load i16, i16* %16891, align 2, !tbaa !386
  %16893 = insertelement <4 x i16> %16888, i16 %16892, i32 1
  %16894 = extractelement <4 x i32> %16883, i32 2
  %16895 = sext i32 %16894 to i64
  %16896 = getelementptr inbounds i16, i16* %10151, i64 %16895
  %16897 = load i16, i16* %16896, align 2, !tbaa !386
  %16898 = insertelement <4 x i16> %16893, i16 %16897, i32 2
  %16899 = extractelement <4 x i32> %16883, i32 3
  %16900 = sext i32 %16899 to i64
  %16901 = getelementptr inbounds i16, i16* %10151, i64 %16900
  %16902 = load i16, i16* %16901, align 2, !tbaa !386
  %16903 = insertelement <4 x i16> %16898, i16 %16902, i32 3
  %16904 = add <4 x i32> %15480, %t471
  %16905 = extractelement <4 x i32> %16904, i32 0
  %16906 = sext i32 %16905 to i64
  %16907 = getelementptr inbounds i16, i16* %10151, i64 %16906
  %16908 = load i16, i16* %16907, align 2, !tbaa !386
  %16909 = insertelement <4 x i16> undef, i16 %16908, i32 0
  %16910 = extractelement <4 x i32> %16904, i32 1
  %16911 = sext i32 %16910 to i64
  %16912 = getelementptr inbounds i16, i16* %10151, i64 %16911
  %16913 = load i16, i16* %16912, align 2, !tbaa !386
  %16914 = insertelement <4 x i16> %16909, i16 %16913, i32 1
  %16915 = extractelement <4 x i32> %16904, i32 2
  %16916 = sext i32 %16915 to i64
  %16917 = getelementptr inbounds i16, i16* %10151, i64 %16916
  %16918 = load i16, i16* %16917, align 2, !tbaa !386
  %16919 = insertelement <4 x i16> %16914, i16 %16918, i32 2
  %16920 = extractelement <4 x i32> %16904, i32 3
  %16921 = sext i32 %16920 to i64
  %16922 = getelementptr inbounds i16, i16* %10151, i64 %16921
  %16923 = load i16, i16* %16922, align 2, !tbaa !386
  %16924 = insertelement <4 x i16> %16919, i16 %16923, i32 3
  %16925 = add <4 x i32> %15486, %t471
  %16926 = extractelement <4 x i32> %16925, i32 0
  %16927 = sext i32 %16926 to i64
  %16928 = getelementptr inbounds i16, i16* %10151, i64 %16927
  %16929 = load i16, i16* %16928, align 2, !tbaa !386
  %16930 = insertelement <4 x i16> undef, i16 %16929, i32 0
  %16931 = extractelement <4 x i32> %16925, i32 1
  %16932 = sext i32 %16931 to i64
  %16933 = getelementptr inbounds i16, i16* %10151, i64 %16932
  %16934 = load i16, i16* %16933, align 2, !tbaa !386
  %16935 = insertelement <4 x i16> %16930, i16 %16934, i32 1
  %16936 = extractelement <4 x i32> %16925, i32 2
  %16937 = sext i32 %16936 to i64
  %16938 = getelementptr inbounds i16, i16* %10151, i64 %16937
  %16939 = load i16, i16* %16938, align 2, !tbaa !386
  %16940 = insertelement <4 x i16> %16935, i16 %16939, i32 2
  %16941 = extractelement <4 x i32> %16925, i32 3
  %16942 = sext i32 %16941 to i64
  %16943 = getelementptr inbounds i16, i16* %10151, i64 %16942
  %16944 = load i16, i16* %16943, align 2, !tbaa !386
  %16945 = insertelement <4 x i16> %16940, i16 %16944, i32 3
  %16946 = add <4 x i32> %15492, %t471
  %16947 = extractelement <4 x i32> %16946, i32 0
  %16948 = sext i32 %16947 to i64
  %16949 = getelementptr inbounds i16, i16* %10151, i64 %16948
  %16950 = load i16, i16* %16949, align 2, !tbaa !386
  %16951 = insertelement <4 x i16> undef, i16 %16950, i32 0
  %16952 = extractelement <4 x i32> %16946, i32 1
  %16953 = sext i32 %16952 to i64
  %16954 = getelementptr inbounds i16, i16* %10151, i64 %16953
  %16955 = load i16, i16* %16954, align 2, !tbaa !386
  %16956 = insertelement <4 x i16> %16951, i16 %16955, i32 1
  %16957 = extractelement <4 x i32> %16946, i32 2
  %16958 = sext i32 %16957 to i64
  %16959 = getelementptr inbounds i16, i16* %10151, i64 %16958
  %16960 = load i16, i16* %16959, align 2, !tbaa !386
  %16961 = insertelement <4 x i16> %16956, i16 %16960, i32 2
  %16962 = extractelement <4 x i32> %16946, i32 3
  %16963 = sext i32 %16962 to i64
  %16964 = getelementptr inbounds i16, i16* %10151, i64 %16963
  %16965 = load i16, i16* %16964, align 2, !tbaa !386
  %16966 = insertelement <4 x i16> %16961, i16 %16965, i32 3
  %16967 = add <4 x i32> %15498, %t471
  %16968 = extractelement <4 x i32> %16967, i32 0
  %16969 = sext i32 %16968 to i64
  %16970 = getelementptr inbounds i16, i16* %10151, i64 %16969
  %16971 = load i16, i16* %16970, align 2, !tbaa !386
  %16972 = insertelement <4 x i16> undef, i16 %16971, i32 0
  %16973 = extractelement <4 x i32> %16967, i32 1
  %16974 = sext i32 %16973 to i64
  %16975 = getelementptr inbounds i16, i16* %10151, i64 %16974
  %16976 = load i16, i16* %16975, align 2, !tbaa !386
  %16977 = insertelement <4 x i16> %16972, i16 %16976, i32 1
  %16978 = extractelement <4 x i32> %16967, i32 2
  %16979 = sext i32 %16978 to i64
  %16980 = getelementptr inbounds i16, i16* %10151, i64 %16979
  %16981 = load i16, i16* %16980, align 2, !tbaa !386
  %16982 = insertelement <4 x i16> %16977, i16 %16981, i32 2
  %16983 = extractelement <4 x i32> %16967, i32 3
  %16984 = sext i32 %16983 to i64
  %16985 = getelementptr inbounds i16, i16* %10151, i64 %16984
  %16986 = load i16, i16* %16985, align 2, !tbaa !386
  %16987 = insertelement <4 x i16> %16982, i16 %16986, i32 3
  %16988 = add <4 x i16> %16882, %16861
  %16989 = add <4 x i16> %16966, %16945
  %16990 = add <4 x i16> %16792, %16794
  %16991 = add <4 x i16> %16990, %16840
  %16992 = add <4 x i16> %16991, %16988
  %16993 = add <4 x i16> %16992, %16903
  %16994 = add <4 x i16> %16988, %16840
  %16995 = add <4 x i16> %16994, %16924
  %16996 = add <4 x i16> %16995, %16989
  %16997 = add <4 x i16> %16996, %16987
  %16998 = shufflevector <4 x i16> %16993, <4 x i16> %16997, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %16999 = zext <8 x i16> %16998 to <8 x i32>
  %17000 = mul nuw nsw <8 x i32> %16999, <i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362>
  %17001 = shufflevector <8 x i32> %17000, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %17002 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %17001, i32 16)
  %17003 = shufflevector <8 x i32> %17000, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %17004 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %17003, i32 16)
  %17005 = shufflevector <4 x i16> %17002, <4 x i16> %17004, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %17006 = add <4 x i16> %16991, %16861
  %17007 = add <4 x i16> %17006, %16882
  %17008 = add <4 x i16> %17007, %16903
  %17009 = add <4 x i16> %16995, %16945
  %17010 = add <4 x i16> %17009, %16966
  %17011 = add <4 x i16> %17010, %16987
  %17012 = shufflevector <4 x i16> %17008, <4 x i16> %17011, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %17013 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %17005, <8 x i16> %17012) #11
  %17014 = lshr <8 x i16> %17013, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %17015 = add <4 x i32> %15504, %t471
  %17016 = extractelement <4 x i32> %17015, i32 0
  %17017 = sext i32 %17016 to i64
  %17018 = getelementptr inbounds i16, i16* %10151, i64 %17017
  %17019 = load i16, i16* %17018, align 2, !tbaa !386
  %17020 = insertelement <4 x i16> undef, i16 %17019, i32 0
  %17021 = extractelement <4 x i32> %17015, i32 1
  %17022 = sext i32 %17021 to i64
  %17023 = getelementptr inbounds i16, i16* %10151, i64 %17022
  %17024 = load i16, i16* %17023, align 2, !tbaa !386
  %17025 = insertelement <4 x i16> %17020, i16 %17024, i32 1
  %17026 = extractelement <4 x i32> %17015, i32 2
  %17027 = sext i32 %17026 to i64
  %17028 = getelementptr inbounds i16, i16* %10151, i64 %17027
  %17029 = load i16, i16* %17028, align 2, !tbaa !386
  %17030 = insertelement <4 x i16> %17025, i16 %17029, i32 2
  %17031 = extractelement <4 x i32> %17015, i32 3
  %17032 = sext i32 %17031 to i64
  %17033 = getelementptr inbounds i16, i16* %10151, i64 %17032
  %17034 = load i16, i16* %17033, align 2, !tbaa !386
  %17035 = insertelement <4 x i16> %17030, i16 %17034, i32 3
  %17036 = add <4 x i32> %15510, %t471
  %17037 = extractelement <4 x i32> %17036, i32 0
  %17038 = sext i32 %17037 to i64
  %17039 = getelementptr inbounds i16, i16* %10151, i64 %17038
  %17040 = load i16, i16* %17039, align 2, !tbaa !386
  %17041 = insertelement <4 x i16> undef, i16 %17040, i32 0
  %17042 = extractelement <4 x i32> %17036, i32 1
  %17043 = sext i32 %17042 to i64
  %17044 = getelementptr inbounds i16, i16* %10151, i64 %17043
  %17045 = load i16, i16* %17044, align 2, !tbaa !386
  %17046 = insertelement <4 x i16> %17041, i16 %17045, i32 1
  %17047 = extractelement <4 x i32> %17036, i32 2
  %17048 = sext i32 %17047 to i64
  %17049 = getelementptr inbounds i16, i16* %10151, i64 %17048
  %17050 = load i16, i16* %17049, align 2, !tbaa !386
  %17051 = insertelement <4 x i16> %17046, i16 %17050, i32 2
  %17052 = extractelement <4 x i32> %17036, i32 3
  %17053 = sext i32 %17052 to i64
  %17054 = getelementptr inbounds i16, i16* %10151, i64 %17053
  %17055 = load i16, i16* %17054, align 2, !tbaa !386
  %17056 = insertelement <4 x i16> %17051, i16 %17055, i32 3
  %17057 = add <4 x i32> %15516, %t471
  %17058 = extractelement <4 x i32> %17057, i32 0
  %17059 = sext i32 %17058 to i64
  %17060 = getelementptr inbounds i16, i16* %10151, i64 %17059
  %17061 = load i16, i16* %17060, align 2, !tbaa !386
  %17062 = insertelement <4 x i16> undef, i16 %17061, i32 0
  %17063 = extractelement <4 x i32> %17057, i32 1
  %17064 = sext i32 %17063 to i64
  %17065 = getelementptr inbounds i16, i16* %10151, i64 %17064
  %17066 = load i16, i16* %17065, align 2, !tbaa !386
  %17067 = insertelement <4 x i16> %17062, i16 %17066, i32 1
  %17068 = extractelement <4 x i32> %17057, i32 2
  %17069 = sext i32 %17068 to i64
  %17070 = getelementptr inbounds i16, i16* %10151, i64 %17069
  %17071 = load i16, i16* %17070, align 2, !tbaa !386
  %17072 = insertelement <4 x i16> %17067, i16 %17071, i32 2
  %17073 = extractelement <4 x i32> %17057, i32 3
  %17074 = sext i32 %17073 to i64
  %17075 = getelementptr inbounds i16, i16* %10151, i64 %17074
  %17076 = load i16, i16* %17075, align 2, !tbaa !386
  %17077 = insertelement <4 x i16> %17072, i16 %17076, i32 3
  %17078 = add <4 x i32> %15522, %t471
  %17079 = extractelement <4 x i32> %17078, i32 0
  %17080 = sext i32 %17079 to i64
  %17081 = getelementptr inbounds i16, i16* %10151, i64 %17080
  %17082 = load i16, i16* %17081, align 2, !tbaa !386
  %17083 = insertelement <4 x i16> undef, i16 %17082, i32 0
  %17084 = extractelement <4 x i32> %17078, i32 1
  %17085 = sext i32 %17084 to i64
  %17086 = getelementptr inbounds i16, i16* %10151, i64 %17085
  %17087 = load i16, i16* %17086, align 2, !tbaa !386
  %17088 = insertelement <4 x i16> %17083, i16 %17087, i32 1
  %17089 = extractelement <4 x i32> %17078, i32 2
  %17090 = sext i32 %17089 to i64
  %17091 = getelementptr inbounds i16, i16* %10151, i64 %17090
  %17092 = load i16, i16* %17091, align 2, !tbaa !386
  %17093 = insertelement <4 x i16> %17088, i16 %17092, i32 2
  %17094 = extractelement <4 x i32> %17078, i32 3
  %17095 = sext i32 %17094 to i64
  %17096 = getelementptr inbounds i16, i16* %10151, i64 %17095
  %17097 = load i16, i16* %17096, align 2, !tbaa !386
  %17098 = insertelement <4 x i16> %17093, i16 %17097, i32 3
  %17099 = add <4 x i32> %15528, %t471
  %17100 = extractelement <4 x i32> %17099, i32 0
  %17101 = sext i32 %17100 to i64
  %17102 = getelementptr inbounds i16, i16* %10151, i64 %17101
  %17103 = load i16, i16* %17102, align 2, !tbaa !386
  %17104 = insertelement <4 x i16> undef, i16 %17103, i32 0
  %17105 = extractelement <4 x i32> %17099, i32 1
  %17106 = sext i32 %17105 to i64
  %17107 = getelementptr inbounds i16, i16* %10151, i64 %17106
  %17108 = load i16, i16* %17107, align 2, !tbaa !386
  %17109 = insertelement <4 x i16> %17104, i16 %17108, i32 1
  %17110 = extractelement <4 x i32> %17099, i32 2
  %17111 = sext i32 %17110 to i64
  %17112 = getelementptr inbounds i16, i16* %10151, i64 %17111
  %17113 = load i16, i16* %17112, align 2, !tbaa !386
  %17114 = insertelement <4 x i16> %17109, i16 %17113, i32 2
  %17115 = extractelement <4 x i32> %17099, i32 3
  %17116 = sext i32 %17115 to i64
  %17117 = getelementptr inbounds i16, i16* %10151, i64 %17116
  %17118 = load i16, i16* %17117, align 2, !tbaa !386
  %17119 = insertelement <4 x i16> %17114, i16 %17118, i32 3
  %17120 = add <4 x i32> %15533, %t471
  %17121 = extractelement <4 x i32> %17120, i32 0
  %17122 = sext i32 %17121 to i64
  %17123 = getelementptr inbounds i16, i16* %10151, i64 %17122
  %17124 = load i16, i16* %17123, align 2, !tbaa !386
  %17125 = insertelement <4 x i16> undef, i16 %17124, i32 0
  %17126 = extractelement <4 x i32> %17120, i32 1
  %17127 = sext i32 %17126 to i64
  %17128 = getelementptr inbounds i16, i16* %10151, i64 %17127
  %17129 = load i16, i16* %17128, align 2, !tbaa !386
  %17130 = insertelement <4 x i16> %17125, i16 %17129, i32 1
  %17131 = extractelement <4 x i32> %17120, i32 2
  %17132 = sext i32 %17131 to i64
  %17133 = getelementptr inbounds i16, i16* %10151, i64 %17132
  %17134 = load i16, i16* %17133, align 2, !tbaa !386
  %17135 = insertelement <4 x i16> %17130, i16 %17134, i32 2
  %17136 = extractelement <4 x i32> %17120, i32 3
  %17137 = sext i32 %17136 to i64
  %17138 = getelementptr inbounds i16, i16* %10151, i64 %17137
  %17139 = load i16, i16* %17138, align 2, !tbaa !386
  %17140 = insertelement <4 x i16> %17135, i16 %17139, i32 3
  %17141 = add <4 x i32> %15539, %t471
  %17142 = extractelement <4 x i32> %17141, i32 0
  %17143 = sext i32 %17142 to i64
  %17144 = getelementptr inbounds i16, i16* %10151, i64 %17143
  %17145 = load i16, i16* %17144, align 2, !tbaa !386
  %17146 = insertelement <4 x i16> undef, i16 %17145, i32 0
  %17147 = extractelement <4 x i32> %17141, i32 1
  %17148 = sext i32 %17147 to i64
  %17149 = getelementptr inbounds i16, i16* %10151, i64 %17148
  %17150 = load i16, i16* %17149, align 2, !tbaa !386
  %17151 = insertelement <4 x i16> %17146, i16 %17150, i32 1
  %17152 = extractelement <4 x i32> %17141, i32 2
  %17153 = sext i32 %17152 to i64
  %17154 = getelementptr inbounds i16, i16* %10151, i64 %17153
  %17155 = load i16, i16* %17154, align 2, !tbaa !386
  %17156 = insertelement <4 x i16> %17151, i16 %17155, i32 2
  %17157 = extractelement <4 x i32> %17141, i32 3
  %17158 = sext i32 %17157 to i64
  %17159 = getelementptr inbounds i16, i16* %10151, i64 %17158
  %17160 = load i16, i16* %17159, align 2, !tbaa !386
  %17161 = insertelement <4 x i16> %17156, i16 %17160, i32 3
  %17162 = add <4 x i32> %15545, %t471
  %17163 = extractelement <4 x i32> %17162, i32 0
  %17164 = sext i32 %17163 to i64
  %17165 = getelementptr inbounds i16, i16* %10151, i64 %17164
  %17166 = load i16, i16* %17165, align 2, !tbaa !386
  %17167 = insertelement <4 x i16> undef, i16 %17166, i32 0
  %17168 = extractelement <4 x i32> %17162, i32 1
  %17169 = sext i32 %17168 to i64
  %17170 = getelementptr inbounds i16, i16* %10151, i64 %17169
  %17171 = load i16, i16* %17170, align 2, !tbaa !386
  %17172 = insertelement <4 x i16> %17167, i16 %17171, i32 1
  %17173 = extractelement <4 x i32> %17162, i32 2
  %17174 = sext i32 %17173 to i64
  %17175 = getelementptr inbounds i16, i16* %10151, i64 %17174
  %17176 = load i16, i16* %17175, align 2, !tbaa !386
  %17177 = insertelement <4 x i16> %17172, i16 %17176, i32 2
  %17178 = extractelement <4 x i32> %17162, i32 3
  %17179 = sext i32 %17178 to i64
  %17180 = getelementptr inbounds i16, i16* %10151, i64 %17179
  %17181 = load i16, i16* %17180, align 2, !tbaa !386
  %17182 = insertelement <4 x i16> %17177, i16 %17181, i32 3
  %17183 = add <4 x i16> %17077, %17056
  %17184 = add <4 x i16> %16987, %16989
  %17185 = add <4 x i16> %17184, %17035
  %17186 = add <4 x i16> %17185, %17183
  %17187 = add <4 x i16> %17186, %17098
  %17188 = add <4 x i16> %17183, %17035
  %17189 = add <4 x i16> %17188, %17119
  %17190 = add <4 x i16> %17189, %17140
  %17191 = add <4 x i16> %17190, %17161
  %17192 = add <4 x i16> %17191, %17182
  %17193 = shufflevector <4 x i16> %17187, <4 x i16> %17192, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %17194 = zext <8 x i16> %17193 to <8 x i32>
  %17195 = mul nuw nsw <8 x i32> %17194, <i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362>
  %17196 = shufflevector <8 x i32> %17195, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %17197 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %17196, i32 16)
  %17198 = shufflevector <8 x i32> %17195, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %17199 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %17198, i32 16)
  %17200 = shufflevector <4 x i16> %17197, <4 x i16> %17199, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %17201 = add <4 x i16> %17185, %17056
  %17202 = add <4 x i16> %17201, %17077
  %17203 = add <4 x i16> %17202, %17098
  %17204 = shufflevector <4 x i16> %17203, <4 x i16> %17192, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %17205 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %17200, <8 x i16> %17204) #11
  %17206 = lshr <8 x i16> %17205, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %17207 = shufflevector <8 x i16> %17206, <8 x i16> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %17208 = shufflevector <16 x i16> %17207, <16 x i16> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17209 = shufflevector <32 x i16> %17208, <32 x i16> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17210 = and i32 %15577, 15
  %17211 = zext i32 %17210 to i64
  %17212 = mul nsw i64 %10153, %17211
  %17213 = add nsw i64 %17212, %15546
  %17214 = getelementptr inbounds i16, i16* %blur_x58, i64 %17213
  %17215 = bitcast i16* %17214 to <8 x i16>*
  store <8 x i16> %15844, <8 x i16>* %17215, align 2, !tbaa !389
  %17216 = getelementptr inbounds i16, i16* %17214, i64 8
  %17217 = bitcast i16* %17216 to <8 x i16>*
  store <8 x i16> %16039, <8 x i16>* %17217, align 2, !tbaa !389
  %17218 = getelementptr inbounds i16, i16* %17214, i64 16
  %17219 = bitcast i16* %17218 to <8 x i16>*
  store <8 x i16> %16234, <8 x i16>* %17219, align 2, !tbaa !389
  %17220 = getelementptr inbounds i16, i16* %17214, i64 24
  %17221 = bitcast i16* %17220 to <8 x i16>*
  store <8 x i16> %16429, <8 x i16>* %17221, align 2, !tbaa !389
  %17222 = getelementptr inbounds i16, i16* %17214, i64 32
  %17223 = bitcast i16* %17222 to <8 x i16>*
  store <8 x i16> %16624, <8 x i16>* %17223, align 2, !tbaa !389
  %17224 = getelementptr inbounds i16, i16* %17214, i64 40
  %17225 = bitcast i16* %17224 to <8 x i16>*
  store <8 x i16> %16819, <8 x i16>* %17225, align 2, !tbaa !389
  %17226 = getelementptr inbounds i16, i16* %17214, i64 48
  %17227 = bitcast i16* %17226 to <8 x i16>*
  store <8 x i16> %17014, <8 x i16>* %17227, align 2, !tbaa !389
  %17228 = shufflevector <64 x i16> %17209, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %17229 = getelementptr inbounds i16, i16* %17214, i64 56
  %17230 = bitcast i16* %17229 to <8 x i16>*
  store <8 x i16> %17228, <8 x i16>* %17230, align 2, !tbaa !389
  %17231 = add nuw nsw i32 %blur_x.s0.y.yi125, 1
  %.not150 = icmp eq i32 %17231, 4
  br i1 %.not150, label %"end for blur_x.s0.y.yi124", label %"for blur_x.s0.y.yi123"

"end for blur_x.s0.y.yi124":                      ; preds = %"for blur_x.s0.y.yi123"
  %indvars.iv.next213 = add nuw nsw i64 %indvars.iv212, 1
  %.not151 = icmp eq i64 %indvars.iv.next213, %10159
  br i1 %.not151, label %"end for blur_x.s0.x.x119", label %"for blur_x.s0.x.x118"

after_bb127:                                      ; preds = %"for blur_y.s0.x.x132", %"end for blur_x.s0.x.x119"
  %indvars.iv.next215 = add nuw nsw i64 %indvars.iv214, 1
  %.not148 = icmp eq i64 %indvars.iv.next215, 134
  br i1 %.not148, label %"end for blur_y.s0.y.yi.$n.rebased114", label %"for blur_y.s0.y.yi.$n.rebased113"

"for blur_y.s0.x.x132":                           ; preds = %"for blur_y.s0.x.x132.preheader", %"for blur_y.s0.x.x132"
  %blur_y.s0.x.x134 = phi i32 [ %17501, %"for blur_y.s0.x.x132" ], [ 0, %"for blur_y.s0.x.x132.preheader" ]
  %a38 = shl nsw i32 %blur_y.s0.x.x134, 6
  %17232 = icmp slt i32 %a38, %b40
  %blur_y.s0.x.v0.base135 = select i1 %17232, i32 %a38, i32 %b40
  %t212136 = sub nsw i32 %blur_y.s0.x.v0.base135, %t26552
  %t472 = add nsw i32 %t212136, %15551
  %17233 = sext i32 %t472 to i64
  %17234 = getelementptr inbounds i16, i16* %blur_x58, i64 %17233
  %17235 = getelementptr inbounds i16, i16* %17234, i64 64
  %17236 = bitcast i16* %17235 to <8 x i16>*
  %t473 = load <8 x i16>, <8 x i16>* %17236, align 2, !tbaa !389
  %t474 = add nsw i32 %t212136, %15555
  %17237 = sext i32 %t474 to i64
  %17238 = getelementptr inbounds i16, i16* %blur_x58, i64 %17237
  %17239 = getelementptr inbounds i16, i16* %17238, i64 64
  %17240 = bitcast i16* %17239 to <8 x i16>*
  %t475 = load <8 x i16>, <8 x i16>* %17240, align 2, !tbaa !389
  %t476 = add nsw i32 %t212136, %15559
  %17241 = sext i32 %t476 to i64
  %17242 = getelementptr inbounds i16, i16* %blur_x58, i64 %17241
  %17243 = getelementptr inbounds i16, i16* %17242, i64 64
  %17244 = bitcast i16* %17243 to <8 x i16>*
  %t477 = load <8 x i16>, <8 x i16>* %17244, align 2, !tbaa !389
  %t478 = add nsw i32 %t212136, %15563
  %17245 = sext i32 %t478 to i64
  %17246 = getelementptr inbounds i16, i16* %blur_x58, i64 %17245
  %17247 = getelementptr inbounds i16, i16* %17246, i64 64
  %17248 = bitcast i16* %17247 to <8 x i16>*
  %t479 = load <8 x i16>, <8 x i16>* %17248, align 2, !tbaa !389
  %t480 = add nsw i32 %t212136, %15567
  %17249 = sext i32 %t480 to i64
  %17250 = getelementptr inbounds i16, i16* %blur_x58, i64 %17249
  %17251 = getelementptr inbounds i16, i16* %17250, i64 64
  %17252 = bitcast i16* %17251 to <8 x i16>*
  %t481 = load <8 x i16>, <8 x i16>* %17252, align 2, !tbaa !389
  %t482 = add nsw i32 %t212136, %15570
  %17253 = sext i32 %t482 to i64
  %17254 = getelementptr inbounds i16, i16* %blur_x58, i64 %17253
  %17255 = getelementptr inbounds i16, i16* %17254, i64 64
  %17256 = bitcast i16* %17255 to <8 x i16>*
  %t483 = load <8 x i16>, <8 x i16>* %17256, align 2, !tbaa !389
  %t484 = add nsw i32 %t212136, %15574
  %17257 = sext i32 %t484 to i64
  %17258 = getelementptr inbounds i16, i16* %blur_x58, i64 %17257
  %17259 = getelementptr inbounds i16, i16* %17258, i64 64
  %17260 = bitcast i16* %17259 to <8 x i16>*
  %t485 = load <8 x i16>, <8 x i16>* %17260, align 2, !tbaa !389
  %17261 = getelementptr inbounds i16, i16* %17234, i64 72
  %17262 = bitcast i16* %17261 to <8 x i16>*
  %t486 = load <8 x i16>, <8 x i16>* %17262, align 2, !tbaa !389
  %17263 = getelementptr inbounds i16, i16* %17238, i64 72
  %17264 = bitcast i16* %17263 to <8 x i16>*
  %t487 = load <8 x i16>, <8 x i16>* %17264, align 2, !tbaa !389
  %17265 = getelementptr inbounds i16, i16* %17242, i64 72
  %17266 = bitcast i16* %17265 to <8 x i16>*
  %t488 = load <8 x i16>, <8 x i16>* %17266, align 2, !tbaa !389
  %17267 = getelementptr inbounds i16, i16* %17246, i64 72
  %17268 = bitcast i16* %17267 to <8 x i16>*
  %t489 = load <8 x i16>, <8 x i16>* %17268, align 2, !tbaa !389
  %17269 = getelementptr inbounds i16, i16* %17250, i64 72
  %17270 = bitcast i16* %17269 to <8 x i16>*
  %t490 = load <8 x i16>, <8 x i16>* %17270, align 2, !tbaa !389
  %17271 = getelementptr inbounds i16, i16* %17254, i64 72
  %17272 = bitcast i16* %17271 to <8 x i16>*
  %t491 = load <8 x i16>, <8 x i16>* %17272, align 2, !tbaa !389
  %17273 = getelementptr inbounds i16, i16* %17258, i64 72
  %17274 = bitcast i16* %17273 to <8 x i16>*
  %t492 = load <8 x i16>, <8 x i16>* %17274, align 2, !tbaa !389
  %17275 = getelementptr inbounds i16, i16* %17234, i64 80
  %17276 = bitcast i16* %17275 to <8 x i16>*
  %t493 = load <8 x i16>, <8 x i16>* %17276, align 2, !tbaa !389
  %17277 = getelementptr inbounds i16, i16* %17238, i64 80
  %17278 = bitcast i16* %17277 to <8 x i16>*
  %t494 = load <8 x i16>, <8 x i16>* %17278, align 2, !tbaa !389
  %17279 = getelementptr inbounds i16, i16* %17242, i64 80
  %17280 = bitcast i16* %17279 to <8 x i16>*
  %t495 = load <8 x i16>, <8 x i16>* %17280, align 2, !tbaa !389
  %17281 = getelementptr inbounds i16, i16* %17246, i64 80
  %17282 = bitcast i16* %17281 to <8 x i16>*
  %t496 = load <8 x i16>, <8 x i16>* %17282, align 2, !tbaa !389
  %17283 = getelementptr inbounds i16, i16* %17250, i64 80
  %17284 = bitcast i16* %17283 to <8 x i16>*
  %t497 = load <8 x i16>, <8 x i16>* %17284, align 2, !tbaa !389
  %17285 = getelementptr inbounds i16, i16* %17254, i64 80
  %17286 = bitcast i16* %17285 to <8 x i16>*
  %t498 = load <8 x i16>, <8 x i16>* %17286, align 2, !tbaa !389
  %17287 = getelementptr inbounds i16, i16* %17258, i64 80
  %17288 = bitcast i16* %17287 to <8 x i16>*
  %t499 = load <8 x i16>, <8 x i16>* %17288, align 2, !tbaa !389
  %17289 = getelementptr inbounds i16, i16* %17234, i64 88
  %17290 = bitcast i16* %17289 to <8 x i16>*
  %t500 = load <8 x i16>, <8 x i16>* %17290, align 2, !tbaa !389
  %17291 = getelementptr inbounds i16, i16* %17238, i64 88
  %17292 = bitcast i16* %17291 to <8 x i16>*
  %t501 = load <8 x i16>, <8 x i16>* %17292, align 2, !tbaa !389
  %17293 = getelementptr inbounds i16, i16* %17242, i64 88
  %17294 = bitcast i16* %17293 to <8 x i16>*
  %t502 = load <8 x i16>, <8 x i16>* %17294, align 2, !tbaa !389
  %17295 = getelementptr inbounds i16, i16* %17246, i64 88
  %17296 = bitcast i16* %17295 to <8 x i16>*
  %t503 = load <8 x i16>, <8 x i16>* %17296, align 2, !tbaa !389
  %17297 = getelementptr inbounds i16, i16* %17250, i64 88
  %17298 = bitcast i16* %17297 to <8 x i16>*
  %t504 = load <8 x i16>, <8 x i16>* %17298, align 2, !tbaa !389
  %17299 = getelementptr inbounds i16, i16* %17254, i64 88
  %17300 = bitcast i16* %17299 to <8 x i16>*
  %t505 = load <8 x i16>, <8 x i16>* %17300, align 2, !tbaa !389
  %17301 = getelementptr inbounds i16, i16* %17258, i64 88
  %17302 = bitcast i16* %17301 to <8 x i16>*
  %t506 = load <8 x i16>, <8 x i16>* %17302, align 2, !tbaa !389
  %17303 = getelementptr inbounds i16, i16* %17234, i64 96
  %17304 = bitcast i16* %17303 to <8 x i16>*
  %t507 = load <8 x i16>, <8 x i16>* %17304, align 2, !tbaa !389
  %17305 = getelementptr inbounds i16, i16* %17238, i64 96
  %17306 = bitcast i16* %17305 to <8 x i16>*
  %t508 = load <8 x i16>, <8 x i16>* %17306, align 2, !tbaa !389
  %17307 = getelementptr inbounds i16, i16* %17242, i64 96
  %17308 = bitcast i16* %17307 to <8 x i16>*
  %t509 = load <8 x i16>, <8 x i16>* %17308, align 2, !tbaa !389
  %17309 = getelementptr inbounds i16, i16* %17246, i64 96
  %17310 = bitcast i16* %17309 to <8 x i16>*
  %t510 = load <8 x i16>, <8 x i16>* %17310, align 2, !tbaa !389
  %17311 = getelementptr inbounds i16, i16* %17250, i64 96
  %17312 = bitcast i16* %17311 to <8 x i16>*
  %t511 = load <8 x i16>, <8 x i16>* %17312, align 2, !tbaa !389
  %17313 = getelementptr inbounds i16, i16* %17254, i64 96
  %17314 = bitcast i16* %17313 to <8 x i16>*
  %t512 = load <8 x i16>, <8 x i16>* %17314, align 2, !tbaa !389
  %17315 = getelementptr inbounds i16, i16* %17258, i64 96
  %17316 = bitcast i16* %17315 to <8 x i16>*
  %t513 = load <8 x i16>, <8 x i16>* %17316, align 2, !tbaa !389
  %17317 = getelementptr inbounds i16, i16* %17234, i64 104
  %17318 = bitcast i16* %17317 to <8 x i16>*
  %t514 = load <8 x i16>, <8 x i16>* %17318, align 2, !tbaa !389
  %17319 = getelementptr inbounds i16, i16* %17238, i64 104
  %17320 = bitcast i16* %17319 to <8 x i16>*
  %t515 = load <8 x i16>, <8 x i16>* %17320, align 2, !tbaa !389
  %17321 = getelementptr inbounds i16, i16* %17242, i64 104
  %17322 = bitcast i16* %17321 to <8 x i16>*
  %t516 = load <8 x i16>, <8 x i16>* %17322, align 2, !tbaa !389
  %17323 = getelementptr inbounds i16, i16* %17246, i64 104
  %17324 = bitcast i16* %17323 to <8 x i16>*
  %t517 = load <8 x i16>, <8 x i16>* %17324, align 2, !tbaa !389
  %17325 = getelementptr inbounds i16, i16* %17250, i64 104
  %17326 = bitcast i16* %17325 to <8 x i16>*
  %t518 = load <8 x i16>, <8 x i16>* %17326, align 2, !tbaa !389
  %17327 = getelementptr inbounds i16, i16* %17254, i64 104
  %17328 = bitcast i16* %17327 to <8 x i16>*
  %t519 = load <8 x i16>, <8 x i16>* %17328, align 2, !tbaa !389
  %17329 = getelementptr inbounds i16, i16* %17258, i64 104
  %17330 = bitcast i16* %17329 to <8 x i16>*
  %t520 = load <8 x i16>, <8 x i16>* %17330, align 2, !tbaa !389
  %17331 = getelementptr inbounds i16, i16* %17234, i64 112
  %17332 = bitcast i16* %17331 to <8 x i16>*
  %t521 = load <8 x i16>, <8 x i16>* %17332, align 2, !tbaa !389
  %17333 = getelementptr inbounds i16, i16* %17238, i64 112
  %17334 = bitcast i16* %17333 to <8 x i16>*
  %t522 = load <8 x i16>, <8 x i16>* %17334, align 2, !tbaa !389
  %17335 = getelementptr inbounds i16, i16* %17242, i64 112
  %17336 = bitcast i16* %17335 to <8 x i16>*
  %t523 = load <8 x i16>, <8 x i16>* %17336, align 2, !tbaa !389
  %17337 = getelementptr inbounds i16, i16* %17246, i64 112
  %17338 = bitcast i16* %17337 to <8 x i16>*
  %t524 = load <8 x i16>, <8 x i16>* %17338, align 2, !tbaa !389
  %17339 = getelementptr inbounds i16, i16* %17250, i64 112
  %17340 = bitcast i16* %17339 to <8 x i16>*
  %t525 = load <8 x i16>, <8 x i16>* %17340, align 2, !tbaa !389
  %17341 = getelementptr inbounds i16, i16* %17254, i64 112
  %17342 = bitcast i16* %17341 to <8 x i16>*
  %t526 = load <8 x i16>, <8 x i16>* %17342, align 2, !tbaa !389
  %17343 = getelementptr inbounds i16, i16* %17258, i64 112
  %17344 = bitcast i16* %17343 to <8 x i16>*
  %t527 = load <8 x i16>, <8 x i16>* %17344, align 2, !tbaa !389
  %17345 = getelementptr inbounds i16, i16* %17234, i64 120
  %17346 = bitcast i16* %17345 to <8 x i16>*
  %t528 = load <8 x i16>, <8 x i16>* %17346, align 2, !tbaa !389
  %17347 = getelementptr inbounds i16, i16* %17238, i64 120
  %17348 = bitcast i16* %17347 to <8 x i16>*
  %t529 = load <8 x i16>, <8 x i16>* %17348, align 2, !tbaa !389
  %17349 = getelementptr inbounds i16, i16* %17242, i64 120
  %17350 = bitcast i16* %17349 to <8 x i16>*
  %t530 = load <8 x i16>, <8 x i16>* %17350, align 2, !tbaa !389
  %17351 = getelementptr inbounds i16, i16* %17246, i64 120
  %17352 = bitcast i16* %17351 to <8 x i16>*
  %t531 = load <8 x i16>, <8 x i16>* %17352, align 2, !tbaa !389
  %17353 = getelementptr inbounds i16, i16* %17250, i64 120
  %17354 = bitcast i16* %17353 to <8 x i16>*
  %t532 = load <8 x i16>, <8 x i16>* %17354, align 2, !tbaa !389
  %17355 = getelementptr inbounds i16, i16* %17254, i64 120
  %17356 = bitcast i16* %17355 to <8 x i16>*
  %t533 = load <8 x i16>, <8 x i16>* %17356, align 2, !tbaa !389
  %17357 = getelementptr inbounds i16, i16* %17258, i64 120
  %17358 = bitcast i16* %17357 to <8 x i16>*
  %t534 = load <8 x i16>, <8 x i16>* %17358, align 2, !tbaa !389
  %17359 = add <8 x i16> %t475, %t473
  %17360 = add <8 x i16> %17359, %t477
  %17361 = add <8 x i16> %17360, %t479
  %17362 = add <8 x i16> %17361, %t481
  %17363 = add <8 x i16> %17362, %t483
  %17364 = add <8 x i16> %17363, %t485
  %17365 = zext <8 x i16> %17364 to <8 x i32>
  %17366 = mul nuw nsw <8 x i32> %17365, <i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362>
  %17367 = shufflevector <8 x i32> %17366, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %17368 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %17367, i32 16)
  %17369 = shufflevector <8 x i32> %17366, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %17370 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %17369, i32 16)
  %17371 = shufflevector <4 x i16> %17368, <4 x i16> %17370, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %17372 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %17371, <8 x i16> %17364) #11
  %17373 = lshr <8 x i16> %17372, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %17374 = add <8 x i16> %t487, %t486
  %17375 = add <8 x i16> %17374, %t488
  %17376 = add <8 x i16> %17375, %t489
  %17377 = add <8 x i16> %17376, %t490
  %17378 = add <8 x i16> %17377, %t491
  %17379 = add <8 x i16> %17378, %t492
  %17380 = zext <8 x i16> %17379 to <8 x i32>
  %17381 = mul nuw nsw <8 x i32> %17380, <i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362>
  %17382 = shufflevector <8 x i32> %17381, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %17383 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %17382, i32 16)
  %17384 = shufflevector <8 x i32> %17381, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %17385 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %17384, i32 16)
  %17386 = shufflevector <4 x i16> %17383, <4 x i16> %17385, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %17387 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %17386, <8 x i16> %17379) #11
  %17388 = lshr <8 x i16> %17387, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %17389 = add <8 x i16> %t494, %t493
  %17390 = add <8 x i16> %17389, %t495
  %17391 = add <8 x i16> %17390, %t496
  %17392 = add <8 x i16> %17391, %t497
  %17393 = add <8 x i16> %17392, %t498
  %17394 = add <8 x i16> %17393, %t499
  %17395 = zext <8 x i16> %17394 to <8 x i32>
  %17396 = mul nuw nsw <8 x i32> %17395, <i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362>
  %17397 = shufflevector <8 x i32> %17396, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %17398 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %17397, i32 16)
  %17399 = shufflevector <8 x i32> %17396, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %17400 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %17399, i32 16)
  %17401 = shufflevector <4 x i16> %17398, <4 x i16> %17400, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %17402 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %17401, <8 x i16> %17394) #11
  %17403 = lshr <8 x i16> %17402, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %17404 = add <8 x i16> %t501, %t500
  %17405 = add <8 x i16> %17404, %t502
  %17406 = add <8 x i16> %17405, %t503
  %17407 = add <8 x i16> %17406, %t504
  %17408 = add <8 x i16> %17407, %t505
  %17409 = add <8 x i16> %17408, %t506
  %17410 = zext <8 x i16> %17409 to <8 x i32>
  %17411 = mul nuw nsw <8 x i32> %17410, <i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362>
  %17412 = shufflevector <8 x i32> %17411, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %17413 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %17412, i32 16)
  %17414 = shufflevector <8 x i32> %17411, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %17415 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %17414, i32 16)
  %17416 = shufflevector <4 x i16> %17413, <4 x i16> %17415, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %17417 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %17416, <8 x i16> %17409) #11
  %17418 = lshr <8 x i16> %17417, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %17419 = add <8 x i16> %t508, %t507
  %17420 = add <8 x i16> %17419, %t509
  %17421 = add <8 x i16> %17420, %t510
  %17422 = add <8 x i16> %17421, %t511
  %17423 = add <8 x i16> %17422, %t512
  %17424 = add <8 x i16> %17423, %t513
  %17425 = zext <8 x i16> %17424 to <8 x i32>
  %17426 = mul nuw nsw <8 x i32> %17425, <i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362>
  %17427 = shufflevector <8 x i32> %17426, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %17428 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %17427, i32 16)
  %17429 = shufflevector <8 x i32> %17426, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %17430 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %17429, i32 16)
  %17431 = shufflevector <4 x i16> %17428, <4 x i16> %17430, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %17432 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %17431, <8 x i16> %17424) #11
  %17433 = lshr <8 x i16> %17432, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %17434 = add <8 x i16> %t515, %t514
  %17435 = add <8 x i16> %17434, %t516
  %17436 = add <8 x i16> %17435, %t517
  %17437 = add <8 x i16> %17436, %t518
  %17438 = add <8 x i16> %17437, %t519
  %17439 = add <8 x i16> %17438, %t520
  %17440 = zext <8 x i16> %17439 to <8 x i32>
  %17441 = mul nuw nsw <8 x i32> %17440, <i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362>
  %17442 = shufflevector <8 x i32> %17441, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %17443 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %17442, i32 16)
  %17444 = shufflevector <8 x i32> %17441, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %17445 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %17444, i32 16)
  %17446 = shufflevector <4 x i16> %17443, <4 x i16> %17445, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %17447 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %17446, <8 x i16> %17439) #11
  %17448 = lshr <8 x i16> %17447, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %17449 = add <8 x i16> %t522, %t521
  %17450 = add <8 x i16> %17449, %t523
  %17451 = add <8 x i16> %17450, %t524
  %17452 = add <8 x i16> %17451, %t525
  %17453 = add <8 x i16> %17452, %t526
  %17454 = add <8 x i16> %17453, %t527
  %17455 = zext <8 x i16> %17454 to <8 x i32>
  %17456 = mul nuw nsw <8 x i32> %17455, <i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362>
  %17457 = shufflevector <8 x i32> %17456, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %17458 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %17457, i32 16)
  %17459 = shufflevector <8 x i32> %17456, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %17460 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %17459, i32 16)
  %17461 = shufflevector <4 x i16> %17458, <4 x i16> %17460, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %17462 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %17461, <8 x i16> %17454) #11
  %17463 = lshr <8 x i16> %17462, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %17464 = add <8 x i16> %t529, %t528
  %17465 = add <8 x i16> %17464, %t530
  %17466 = add <8 x i16> %17465, %t531
  %17467 = add <8 x i16> %17466, %t532
  %17468 = add <8 x i16> %17467, %t533
  %17469 = add <8 x i16> %17468, %t534
  %17470 = zext <8 x i16> %17469 to <8 x i32>
  %17471 = mul nuw nsw <8 x i32> %17470, <i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362, i32 9362>
  %17472 = shufflevector <8 x i32> %17471, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %17473 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %17472, i32 16)
  %17474 = shufflevector <8 x i32> %17471, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %17475 = tail call <4 x i16> @llvm.aarch64.neon.uqshrn.v4i16(<4 x i32> %17474, i32 16)
  %17476 = shufflevector <4 x i16> %17473, <4 x i16> %17475, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %17477 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %17476, <8 x i16> %17469) #11
  %17478 = lshr <8 x i16> %17477, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %17479 = shufflevector <8 x i16> %17478, <8 x i16> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %17480 = shufflevector <16 x i16> %17479, <16 x i16> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17481 = shufflevector <32 x i16> %17480, <32 x i16> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17482 = sext i32 %blur_y.s0.x.v0.base135 to i64
  %17483 = add nsw i64 %15576, %17482
  %17484 = getelementptr inbounds i16, i16* %10158, i64 %17483
  %17485 = bitcast i16* %17484 to <8 x i16>*
  store <8 x i16> %17373, <8 x i16>* %17485, align 2, !tbaa !391
  %17486 = getelementptr inbounds i16, i16* %17484, i64 8
  %17487 = bitcast i16* %17486 to <8 x i16>*
  store <8 x i16> %17388, <8 x i16>* %17487, align 2, !tbaa !391
  %17488 = getelementptr inbounds i16, i16* %17484, i64 16
  %17489 = bitcast i16* %17488 to <8 x i16>*
  store <8 x i16> %17403, <8 x i16>* %17489, align 2, !tbaa !391
  %17490 = getelementptr inbounds i16, i16* %17484, i64 24
  %17491 = bitcast i16* %17490 to <8 x i16>*
  store <8 x i16> %17418, <8 x i16>* %17491, align 2, !tbaa !391
  %17492 = getelementptr inbounds i16, i16* %17484, i64 32
  %17493 = bitcast i16* %17492 to <8 x i16>*
  store <8 x i16> %17433, <8 x i16>* %17493, align 2, !tbaa !391
  %17494 = getelementptr inbounds i16, i16* %17484, i64 40
  %17495 = bitcast i16* %17494 to <8 x i16>*
  store <8 x i16> %17448, <8 x i16>* %17495, align 2, !tbaa !391
  %17496 = getelementptr inbounds i16, i16* %17484, i64 48
  %17497 = bitcast i16* %17496 to <8 x i16>*
  store <8 x i16> %17463, <8 x i16>* %17497, align 2, !tbaa !391
  %17498 = shufflevector <64 x i16> %17481, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %17499 = getelementptr inbounds i16, i16* %17484, i64 56
  %17500 = bitcast i16* %17499 to <8 x i16>*
  store <8 x i16> %17498, <8 x i16>* %17500, align 2, !tbaa !391
  %17501 = add nuw nsw i32 %blur_y.s0.x.x134, 1
  %.not149 = icmp eq i32 %17501, %t26148
  br i1 %.not149, label %after_bb127, label %"for blur_y.s0.x.x132"
}

; Function Attrs: nounwind
define i32 @blur7x7(%struct.halide_buffer_t* noalias nocapture readonly %input.buffer, %struct.halide_buffer_t* noalias nocapture readonly %blur_y.buffer) local_unnamed_addr #10 {
entry:
  %parallel_closure23 = alloca { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, align 8
  %parallel_closure = alloca { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, align 8
  %host.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %blur_y.buffer, i64 0, i32 2
  %0 = load i8*, i8** %host.i, align 8, !tbaa !180
  %dim.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %blur_y.buffer, i64 0, i32 6
  %1 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i, align 8, !tbaa !184
  %extent.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %1, i64 0, i32 1
  %2 = load i32, i32* %extent.i, align 4, !tbaa !189
  %extent.i30 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %1, i64 1, i32 1
  %3 = bitcast i32* %extent.i30 to <2 x i32>*
  %4 = load <2 x i32>, <2 x i32>* %3, align 4, !tbaa !41
  %host.i33 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %input.buffer, i64 0, i32 2
  %5 = load i8*, i8** %host.i33, align 8, !tbaa !180
  %dim.i34 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %input.buffer, i64 0, i32 6
  %6 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i34, align 8, !tbaa !184
  %extent.i37 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %6, i64 0, i32 1
  %7 = load i32, i32* %extent.i37, align 4, !tbaa !189
  %extent.i43 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %6, i64 1, i32 1
  %8 = bitcast i32* %extent.i43 to <2 x i32>*
  %9 = load <2 x i32>, <2 x i32>* %8, align 4, !tbaa !41
  %10 = extractelement <2 x i32> %4, i32 0
  %a40 = add nsw i32 %10, 136
  %11 = extractelement <2 x i32> %9, i32 0
  %12 = icmp slt i32 %a40, %11
  %blur_y.s0.y.y.epilogue.s = select i1 %12, i32 %a40, i32 %11
  %13 = add nsw i32 %2, 63
  %t261 = ashr i32 %13, 6
  %a41 = ashr i32 %2, 6
  %14 = icmp sgt i32 %a41, 0
  %t262 = select i1 %14, i32 %a41, i32 0
  %15 = icmp sgt i32 %2, 64
  %t263 = select i1 %15, i32 %2, i32 64
  %16 = add nuw nsw i32 %t263, 63
  %17 = lshr i32 %16, 6
  %18 = icmp slt i32 %2, 64
  %t265 = select i1 %18, i32 %2, i32 64
  %19 = sub nsw i32 126, %t265
  %a45 = ashr i32 %19, 6
  %20 = ashr i32 %t265, 6
  %b47 = sub nsw i32 1, %20
  %21 = icmp sgt i32 %a45, %b47
  %a44 = select i1 %21, i32 %a45, i32 %b47
  %22 = icmp slt i32 %a44, %17
  %b48 = select i1 %22, i32 %a44, i32 %17
  %a47 = sub nsw i32 %7, %t265
  %b49 = add nuw nsw i32 %t263, 5
  %23 = icmp slt i32 %a47, %b49
  %24 = select i1 %23, i32 %a47, i32 %b49
  %25 = add nsw i32 %24, 58
  %a46 = ashr i32 %25, 6
  %26 = icmp sgt i32 %a46, %b48
  %t254 = select i1 %26, i32 %a46, i32 %b48
  %27 = add nsw i32 %blur_y.s0.y.y.epilogue.s, -9
  %a48 = ashr i32 %27, 7
  %28 = icmp sgt i32 %a48, 0
  %t251 = select i1 %28, i32 %a48, i32 0
  %29 = add nsw i32 %10, 127
  %t250 = ashr i32 %29, 7
  %30 = add nsw i32 %t263, -1
  %t252 = and i32 %30, -64
  %31 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure, i64 0, i32 0
  store i8* %0, i8** %31, align 8
  %32 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure, i64 0, i32 1
  store i8* %5, i8** %32, align 8
  %33 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure, i64 0, i32 2
  store i32 %2, i32* %33, align 8
  %34 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure, i64 0, i32 3
  %35 = bitcast i32* %34 to <2 x i32>*
  store <2 x i32> %4, <2 x i32>* %35, align 4
  %36 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure, i64 0, i32 5
  store i32 %7, i32* %36, align 4
  %37 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure, i64 0, i32 6
  %38 = bitcast i32* %37 to <2 x i32>*
  store <2 x i32> %9, <2 x i32>* %38, align 8
  %39 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure, i64 0, i32 8
  store i32 %t251, i32* %39, align 8
  %40 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure, i64 0, i32 9
  store i32 %t252, i32* %40, align 4
  %41 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure, i64 0, i32 10
  store i32 %t254, i32* %41, align 8
  %42 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure, i64 0, i32 11
  store i32 %t261, i32* %42, align 4
  %43 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure, i64 0, i32 12
  store i32 %t262, i32* %43, align 8
  %44 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure, i64 0, i32 13
  store i32 %t263, i32* %44, align 4
  %45 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure, i64 0, i32 14
  store i32 %17, i32* %45, align 8
  %46 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure, i64 0, i32 15
  store i32 %t265, i32* %46, align 4
  %47 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure, i64 0, i32 16
  store i32 %b48, i32* %47, align 8
  %48 = bitcast { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure to i8*
  %closure_result = call i32 @halide_do_par_for(i8* null, i32 (i8*, i32, i8*)* nonnull @blur7x7_par_for_blur_y_s0_y_y, i32 0, i32 %t250, i8* nonnull %48) #11
  %49 = load i32, i32* %extent.i, align 4, !tbaa !189
  %50 = bitcast i32* %extent.i30 to <2 x i32>*
  %51 = load <2 x i32>, <2 x i32>* %50, align 4, !tbaa !41
  %52 = load i32, i32* %extent.i37, align 4, !tbaa !189
  %53 = bitcast i32* %extent.i43 to <2 x i32>*
  %54 = load <2 x i32>, <2 x i32>* %53, align 4, !tbaa !41
  %55 = extractelement <2 x i32> %51, i32 0
  %a49 = add nsw i32 %55, 136
  %56 = extractelement <2 x i32> %54, i32 0
  %57 = icmp slt i32 %a49, %56
  %58 = add nsw i32 %49, 63
  %t26115 = ashr i32 %58, 6
  %a50 = ashr i32 %49, 6
  %59 = icmp sgt i32 %a50, 0
  %t26216 = select i1 %59, i32 %a50, i32 0
  %60 = icmp sgt i32 %49, 64
  %t26317 = select i1 %60, i32 %49, i32 64
  %61 = add nuw nsw i32 %t26317, 63
  %62 = lshr i32 %61, 6
  %63 = icmp slt i32 %49, 64
  %t26518 = select i1 %63, i32 %49, i32 64
  %64 = sub nsw i32 126, %t26518
  %a56 = ashr i32 %64, 6
  %65 = ashr i32 %t26518, 6
  %b58 = sub nsw i32 1, %65
  %66 = icmp sgt i32 %a56, %b58
  %a55 = select i1 %66, i32 %a56, i32 %b58
  %67 = icmp slt i32 %a55, %62
  %t266 = select i1 %67, i32 %a55, i32 %62
  %a61 = sub nsw i32 %52, %t26518
  %b63 = add nuw nsw i32 %t26317, 5
  %68 = icmp slt i32 %a61, %b63
  %69 = select i1 %68, i32 %a61, i32 %b63
  %70 = add nsw i32 %69, 58
  %a60 = ashr i32 %70, 6
  %71 = icmp sgt i32 %a60, %t266
  %t25419 = select i1 %71, i32 %a60, i32 %t266
  %72 = select i1 %57, i32 %a49, i32 %56
  %73 = add nsw i32 %72, -9
  %a64 = ashr i32 %73, 7
  %74 = icmp sgt i32 %a64, 0
  %t25120 = select i1 %74, i32 %a64, i32 0
  %75 = add nsw i32 %55, 127
  %t25021 = ashr i32 %75, 7
  %76 = add nsw i32 %t26317, -1
  %t25222 = and i32 %76, -64
  %77 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure23, i64 0, i32 0
  store i8* %0, i8** %77, align 8
  %78 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure23, i64 0, i32 1
  store i8* %5, i8** %78, align 8
  %79 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure23, i64 0, i32 2
  store i32 %49, i32* %79, align 8
  %80 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure23, i64 0, i32 3
  %81 = bitcast i32* %80 to <2 x i32>*
  store <2 x i32> %51, <2 x i32>* %81, align 4
  %82 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure23, i64 0, i32 5
  store i32 %52, i32* %82, align 4
  %83 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure23, i64 0, i32 6
  %84 = bitcast i32* %83 to <2 x i32>*
  store <2 x i32> %54, <2 x i32>* %84, align 8
  %85 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure23, i64 0, i32 8
  store i32 %t25120, i32* %85, align 8
  %86 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure23, i64 0, i32 9
  store i32 %t25222, i32* %86, align 4
  %87 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure23, i64 0, i32 10
  store i32 %t25419, i32* %87, align 8
  %88 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure23, i64 0, i32 11
  store i32 %t26115, i32* %88, align 4
  %89 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure23, i64 0, i32 12
  store i32 %t26216, i32* %89, align 8
  %90 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure23, i64 0, i32 13
  store i32 %t26317, i32* %90, align 4
  %91 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure23, i64 0, i32 14
  store i32 %62, i32* %91, align 8
  %92 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure23, i64 0, i32 15
  store i32 %t26518, i32* %92, align 4
  %93 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure23, i64 0, i32 16
  store i32 %t266, i32* %93, align 8
  %94 = bitcast { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }* %parallel_closure23 to i8*
  %closure_result24 = call i32 @halide_do_par_for(i8* null, i32 (i8*, i32, i8*)* nonnull @blur7x7_par_for_blur_y_s0_y_y, i32 0, i32 %t25021, i8* nonnull %94) #11
  ret i32 0
}

; Function Attrs: nounwind
define i32 @blur7x7_argv(i8** nocapture readonly %0) local_unnamed_addr #11 {
entry:
  %1 = bitcast i8** %0 to %struct.halide_buffer_t**
  %2 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %1, align 8
  %3 = getelementptr i8*, i8** %0, i64 1
  %4 = bitcast i8** %3 to %struct.halide_buffer_t**
  %5 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %4, align 8
  %6 = tail call i32 @blur7x7(%struct.halide_buffer_t* %2, %struct.halide_buffer_t* %5) #16
  ret i32 0
}

; Function Attrs: norecurse nounwind readnone willreturn
define nonnull %struct.halide_filter_metadata_t* @blur7x7_metadata() local_unnamed_addr #12 {
entry:
  ret %struct.halide_filter_metadata_t* @blur7x7_metadata_storage
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.0(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6, <8 x i16> %arg.7) local_unnamed_addr #13 {
entry:
  %0 = add <8 x i16> %arg.2, %arg.1
  %1 = add <8 x i16> %0, %arg.3
  %2 = add <8 x i16> %1, %arg.4
  %3 = add <8 x i16> %2, %arg.5
  %4 = add <8 x i16> %3, %arg.6
  %5 = add <8 x i16> %4, %arg.7
  %6 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %arg, <8 x i16> %5) #11
  %7 = lshr <8 x i16> %6, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  ret <8 x i16> %7
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.1(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  %4 = add <8 x i16> %3, %arg.5
  %5 = add <8 x i16> %4, %arg.6
  ret <8 x i16> %5
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.2(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.3(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.4(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.5(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.6(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.7(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.8(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.9(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.10(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.11(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.12(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.13(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.14(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.15(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.16(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.17(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.18(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.19(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.20(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.21(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.22(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.23(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.24(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.25(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.26(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.27(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.28(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.29(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.30(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6, <8 x i16> %arg.7) local_unnamed_addr #13 {
entry:
  %0 = add <8 x i16> %arg.2, %arg.1
  %1 = add <8 x i16> %0, %arg.3
  %2 = add <8 x i16> %1, %arg.4
  %3 = add <8 x i16> %2, %arg.5
  %4 = add <8 x i16> %3, %arg.6
  %5 = add <8 x i16> %4, %arg.7
  %6 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %arg, <8 x i16> %5) #11
  %7 = lshr <8 x i16> %6, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  ret <8 x i16> %7
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.31(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  %4 = add <8 x i16> %3, %arg.5
  %5 = add <8 x i16> %4, %arg.6
  ret <8 x i16> %5
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.32(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.33(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.34(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.35(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.36(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.37(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.38(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.39(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.40(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.41(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.42(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.43(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.44(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.45(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.46(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.47(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.48(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.49(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.50(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.51(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.52(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.53(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.54(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.55(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.56(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.57(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.58(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.59(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.60(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6, <8 x i16> %arg.7) local_unnamed_addr #13 {
entry:
  %0 = add <8 x i16> %arg.2, %arg.1
  %1 = add <8 x i16> %0, %arg.3
  %2 = add <8 x i16> %1, %arg.4
  %3 = add <8 x i16> %2, %arg.5
  %4 = add <8 x i16> %3, %arg.6
  %5 = add <8 x i16> %4, %arg.7
  %6 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %arg, <8 x i16> %5) #11
  %7 = lshr <8 x i16> %6, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  ret <8 x i16> %7
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.61(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  %4 = add <8 x i16> %3, %arg.5
  %5 = add <8 x i16> %4, %arg.6
  ret <8 x i16> %5
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.62(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.63(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.64(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.65(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.66(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.67(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.68(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.69(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.70(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.71(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.72(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.73(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.74(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.75(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.76(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.77(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.78(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.79(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.80(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.81(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.82(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.83(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.84(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.85(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.86(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.87(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.88(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.89(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.90(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6, <8 x i16> %arg.7) local_unnamed_addr #13 {
entry:
  %0 = add <8 x i16> %arg.2, %arg.1
  %1 = add <8 x i16> %0, %arg.3
  %2 = add <8 x i16> %1, %arg.4
  %3 = add <8 x i16> %2, %arg.5
  %4 = add <8 x i16> %3, %arg.6
  %5 = add <8 x i16> %4, %arg.7
  %6 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %arg, <8 x i16> %5) #11
  %7 = lshr <8 x i16> %6, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  ret <8 x i16> %7
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.91(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  %4 = add <8 x i16> %3, %arg.5
  %5 = add <8 x i16> %4, %arg.6
  ret <8 x i16> %5
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.92(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.93(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.94(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.95(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.96(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.97(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.98(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.99(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.100(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.101(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.102(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.103(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.104(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.105(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.106(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.107(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.108(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.109(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.110(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.111(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.112(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.113(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.114(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.115(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.116(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.117(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.118(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.119(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.120(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6, <8 x i16> %arg.7) local_unnamed_addr #13 {
entry:
  %0 = add <8 x i16> %arg.2, %arg.1
  %1 = add <8 x i16> %0, %arg.3
  %2 = add <8 x i16> %1, %arg.4
  %3 = add <8 x i16> %2, %arg.5
  %4 = add <8 x i16> %3, %arg.6
  %5 = add <8 x i16> %4, %arg.7
  %6 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %arg, <8 x i16> %5) #11
  %7 = lshr <8 x i16> %6, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  ret <8 x i16> %7
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.121(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  %4 = add <8 x i16> %3, %arg.5
  %5 = add <8 x i16> %4, %arg.6
  ret <8 x i16> %5
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.122(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.123(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.124(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.125(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.126(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.127(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.128(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.129(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.130(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.131(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.132(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.133(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.134(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.135(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.136(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.137(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.138(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.139(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.140(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.141(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.142(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.143(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.144(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.145(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.146(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.147(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.148(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.149(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.150(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6, <8 x i16> %arg.7) local_unnamed_addr #13 {
entry:
  %0 = add <8 x i16> %arg.2, %arg.1
  %1 = add <8 x i16> %0, %arg.3
  %2 = add <8 x i16> %1, %arg.4
  %3 = add <8 x i16> %2, %arg.5
  %4 = add <8 x i16> %3, %arg.6
  %5 = add <8 x i16> %4, %arg.7
  %6 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %arg, <8 x i16> %5) #11
  %7 = lshr <8 x i16> %6, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  ret <8 x i16> %7
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.151(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  %4 = add <8 x i16> %3, %arg.5
  %5 = add <8 x i16> %4, %arg.6
  ret <8 x i16> %5
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.152(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.153(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.154(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.155(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.156(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.157(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.158(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.159(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.160(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.161(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.162(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.163(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.164(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.165(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.166(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.167(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.168(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.169(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.170(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.171(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.172(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.173(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.174(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.175(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.176(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.177(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.178(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.179(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.180(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6, <8 x i16> %arg.7) local_unnamed_addr #13 {
entry:
  %0 = add <8 x i16> %arg.2, %arg.1
  %1 = add <8 x i16> %0, %arg.3
  %2 = add <8 x i16> %1, %arg.4
  %3 = add <8 x i16> %2, %arg.5
  %4 = add <8 x i16> %3, %arg.6
  %5 = add <8 x i16> %4, %arg.7
  %6 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %arg, <8 x i16> %5) #11
  %7 = lshr <8 x i16> %6, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  ret <8 x i16> %7
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.181(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  %4 = add <8 x i16> %3, %arg.5
  %5 = add <8 x i16> %4, %arg.6
  ret <8 x i16> %5
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.182(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.183(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.184(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.185(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.186(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.187(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.188(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.189(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.190(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.191(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.192(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.193(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.194(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.195(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.196(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.197(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.198(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.199(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.200(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.201(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.202(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.203(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.204(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.205(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.206(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.207(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.208(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.209(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.210(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6, <8 x i16> %arg.7) local_unnamed_addr #13 {
entry:
  %0 = add <8 x i16> %arg.2, %arg.1
  %1 = add <8 x i16> %0, %arg.3
  %2 = add <8 x i16> %1, %arg.4
  %3 = add <8 x i16> %2, %arg.5
  %4 = add <8 x i16> %3, %arg.6
  %5 = add <8 x i16> %4, %arg.7
  %6 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %arg, <8 x i16> %5) #11
  %7 = lshr <8 x i16> %6, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  ret <8 x i16> %7
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.211(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  %4 = add <8 x i16> %3, %arg.5
  %5 = add <8 x i16> %4, %arg.6
  ret <8 x i16> %5
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.212(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.213(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.214(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.215(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.216(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.217(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.218(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.219(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.220(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.221(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.222(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.223(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.224(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.225(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.226(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.227(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.228(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.229(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.230(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.231(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.232(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.233(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.234(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.235(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.236(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.237(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.238(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.239(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.240(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6, <8 x i16> %arg.7) local_unnamed_addr #13 {
entry:
  %0 = add <8 x i16> %arg.2, %arg.1
  %1 = add <8 x i16> %0, %arg.3
  %2 = add <8 x i16> %1, %arg.4
  %3 = add <8 x i16> %2, %arg.5
  %4 = add <8 x i16> %3, %arg.6
  %5 = add <8 x i16> %4, %arg.7
  %6 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %arg, <8 x i16> %5) #11
  %7 = lshr <8 x i16> %6, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  ret <8 x i16> %7
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.241(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  %4 = add <8 x i16> %3, %arg.5
  %5 = add <8 x i16> %4, %arg.6
  ret <8 x i16> %5
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.242(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6, <8 x i16> %arg.7) local_unnamed_addr #13 {
entry:
  %0 = add <8 x i16> %arg.2, %arg.1
  %1 = add <8 x i16> %0, %arg.3
  %2 = add <8 x i16> %1, %arg.4
  %3 = add <8 x i16> %2, %arg.5
  %4 = add <8 x i16> %3, %arg.6
  %5 = add <8 x i16> %4, %arg.7
  %6 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %arg, <8 x i16> %5) #11
  %7 = lshr <8 x i16> %6, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  ret <8 x i16> %7
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.243(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  %4 = add <8 x i16> %3, %arg.5
  %5 = add <8 x i16> %4, %arg.6
  ret <8 x i16> %5
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.244(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6, <8 x i16> %arg.7) local_unnamed_addr #13 {
entry:
  %0 = add <8 x i16> %arg.2, %arg.1
  %1 = add <8 x i16> %0, %arg.3
  %2 = add <8 x i16> %1, %arg.4
  %3 = add <8 x i16> %2, %arg.5
  %4 = add <8 x i16> %3, %arg.6
  %5 = add <8 x i16> %4, %arg.7
  %6 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %arg, <8 x i16> %5) #11
  %7 = lshr <8 x i16> %6, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  ret <8 x i16> %7
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.245(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  %4 = add <8 x i16> %3, %arg.5
  %5 = add <8 x i16> %4, %arg.6
  ret <8 x i16> %5
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.246(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6, <8 x i16> %arg.7) local_unnamed_addr #13 {
entry:
  %0 = add <8 x i16> %arg.2, %arg.1
  %1 = add <8 x i16> %0, %arg.3
  %2 = add <8 x i16> %1, %arg.4
  %3 = add <8 x i16> %2, %arg.5
  %4 = add <8 x i16> %3, %arg.6
  %5 = add <8 x i16> %4, %arg.7
  %6 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %arg, <8 x i16> %5) #11
  %7 = lshr <8 x i16> %6, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  ret <8 x i16> %7
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.247(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  %4 = add <8 x i16> %3, %arg.5
  %5 = add <8 x i16> %4, %arg.6
  ret <8 x i16> %5
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.248(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6, <8 x i16> %arg.7) local_unnamed_addr #13 {
entry:
  %0 = add <8 x i16> %arg.2, %arg.1
  %1 = add <8 x i16> %0, %arg.3
  %2 = add <8 x i16> %1, %arg.4
  %3 = add <8 x i16> %2, %arg.5
  %4 = add <8 x i16> %3, %arg.6
  %5 = add <8 x i16> %4, %arg.7
  %6 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %arg, <8 x i16> %5) #11
  %7 = lshr <8 x i16> %6, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  ret <8 x i16> %7
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.249(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  %4 = add <8 x i16> %3, %arg.5
  %5 = add <8 x i16> %4, %arg.6
  ret <8 x i16> %5
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.250(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6, <8 x i16> %arg.7) local_unnamed_addr #13 {
entry:
  %0 = add <8 x i16> %arg.2, %arg.1
  %1 = add <8 x i16> %0, %arg.3
  %2 = add <8 x i16> %1, %arg.4
  %3 = add <8 x i16> %2, %arg.5
  %4 = add <8 x i16> %3, %arg.6
  %5 = add <8 x i16> %4, %arg.7
  %6 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %arg, <8 x i16> %5) #11
  %7 = lshr <8 x i16> %6, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  ret <8 x i16> %7
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.251(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  %4 = add <8 x i16> %3, %arg.5
  %5 = add <8 x i16> %4, %arg.6
  ret <8 x i16> %5
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.252(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6, <8 x i16> %arg.7) local_unnamed_addr #13 {
entry:
  %0 = add <8 x i16> %arg.2, %arg.1
  %1 = add <8 x i16> %0, %arg.3
  %2 = add <8 x i16> %1, %arg.4
  %3 = add <8 x i16> %2, %arg.5
  %4 = add <8 x i16> %3, %arg.6
  %5 = add <8 x i16> %4, %arg.7
  %6 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %arg, <8 x i16> %5) #11
  %7 = lshr <8 x i16> %6, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  ret <8 x i16> %7
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.253(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  %4 = add <8 x i16> %3, %arg.5
  %5 = add <8 x i16> %4, %arg.6
  ret <8 x i16> %5
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.254(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6, <8 x i16> %arg.7) local_unnamed_addr #13 {
entry:
  %0 = add <8 x i16> %arg.2, %arg.1
  %1 = add <8 x i16> %0, %arg.3
  %2 = add <8 x i16> %1, %arg.4
  %3 = add <8 x i16> %2, %arg.5
  %4 = add <8 x i16> %3, %arg.6
  %5 = add <8 x i16> %4, %arg.7
  %6 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %arg, <8 x i16> %5) #11
  %7 = lshr <8 x i16> %6, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  ret <8 x i16> %7
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.255(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  %4 = add <8 x i16> %3, %arg.5
  %5 = add <8 x i16> %4, %arg.6
  ret <8 x i16> %5
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.256(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6, <8 x i16> %arg.7) local_unnamed_addr #13 {
entry:
  %0 = add <8 x i16> %arg.2, %arg.1
  %1 = add <8 x i16> %0, %arg.3
  %2 = add <8 x i16> %1, %arg.4
  %3 = add <8 x i16> %2, %arg.5
  %4 = add <8 x i16> %3, %arg.6
  %5 = add <8 x i16> %4, %arg.7
  %6 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %arg, <8 x i16> %5) #11
  %7 = lshr <8 x i16> %6, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  ret <8 x i16> %7
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.257(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  %4 = add <8 x i16> %3, %arg.5
  %5 = add <8 x i16> %4, %arg.6
  ret <8 x i16> %5
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.258(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.259(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.260(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.261(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.262(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.263(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.264(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.265(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.266(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.267(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.268(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.269(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.270(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.271(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.272(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.273(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.274(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.275(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.276(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.277(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.278(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.279(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.280(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.281(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.282(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.283(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.284(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.285(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.286(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6, <8 x i16> %arg.7) local_unnamed_addr #13 {
entry:
  %0 = add <8 x i16> %arg.2, %arg.1
  %1 = add <8 x i16> %0, %arg.3
  %2 = add <8 x i16> %1, %arg.4
  %3 = add <8 x i16> %2, %arg.5
  %4 = add <8 x i16> %3, %arg.6
  %5 = add <8 x i16> %4, %arg.7
  %6 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %arg, <8 x i16> %5) #11
  %7 = lshr <8 x i16> %6, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  ret <8 x i16> %7
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.287(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  %4 = add <8 x i16> %3, %arg.5
  %5 = add <8 x i16> %4, %arg.6
  ret <8 x i16> %5
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.288(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.289(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.290(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.291(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.292(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.293(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.294(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.295(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.296(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.297(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.298(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.299(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.300(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.301(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.302(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.303(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.304(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.305(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.306(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.307(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.308(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.309(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.310(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.311(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.312(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.313(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.314(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.315(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.316(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6, <8 x i16> %arg.7) local_unnamed_addr #13 {
entry:
  %0 = add <8 x i16> %arg.2, %arg.1
  %1 = add <8 x i16> %0, %arg.3
  %2 = add <8 x i16> %1, %arg.4
  %3 = add <8 x i16> %2, %arg.5
  %4 = add <8 x i16> %3, %arg.6
  %5 = add <8 x i16> %4, %arg.7
  %6 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %arg, <8 x i16> %5) #11
  %7 = lshr <8 x i16> %6, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  ret <8 x i16> %7
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.317(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  %4 = add <8 x i16> %3, %arg.5
  %5 = add <8 x i16> %4, %arg.6
  ret <8 x i16> %5
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.318(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.319(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.320(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.321(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.322(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.323(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.324(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.325(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.326(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.327(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.328(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.329(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.330(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.331(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.332(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.333(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.334(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.335(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.336(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.337(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.338(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.339(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.340(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.341(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.342(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.343(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.344(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.345(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.346(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6, <8 x i16> %arg.7) local_unnamed_addr #13 {
entry:
  %0 = add <8 x i16> %arg.2, %arg.1
  %1 = add <8 x i16> %0, %arg.3
  %2 = add <8 x i16> %1, %arg.4
  %3 = add <8 x i16> %2, %arg.5
  %4 = add <8 x i16> %3, %arg.6
  %5 = add <8 x i16> %4, %arg.7
  %6 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %arg, <8 x i16> %5) #11
  %7 = lshr <8 x i16> %6, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  ret <8 x i16> %7
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.347(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  %4 = add <8 x i16> %3, %arg.5
  %5 = add <8 x i16> %4, %arg.6
  ret <8 x i16> %5
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.348(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.349(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.350(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.351(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.352(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.353(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.354(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.355(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.356(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.357(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.358(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.359(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.360(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.361(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.362(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.363(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.364(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.365(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.366(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.367(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.368(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.369(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.370(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.371(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.372(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.373(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.374(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.375(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.376(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6, <8 x i16> %arg.7) local_unnamed_addr #13 {
entry:
  %0 = add <8 x i16> %arg.2, %arg.1
  %1 = add <8 x i16> %0, %arg.3
  %2 = add <8 x i16> %1, %arg.4
  %3 = add <8 x i16> %2, %arg.5
  %4 = add <8 x i16> %3, %arg.6
  %5 = add <8 x i16> %4, %arg.7
  %6 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %arg, <8 x i16> %5) #11
  %7 = lshr <8 x i16> %6, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  ret <8 x i16> %7
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.377(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  %4 = add <8 x i16> %3, %arg.5
  %5 = add <8 x i16> %4, %arg.6
  ret <8 x i16> %5
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.378(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.379(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.380(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.381(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.382(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.383(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.384(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.385(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.386(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.387(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.388(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.389(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.390(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.391(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.392(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.393(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.394(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.395(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.396(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.397(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.398(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.399(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.400(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.401(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.402(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.403(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.404(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.405(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.406(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6, <8 x i16> %arg.7) local_unnamed_addr #13 {
entry:
  %0 = add <8 x i16> %arg.2, %arg.1
  %1 = add <8 x i16> %0, %arg.3
  %2 = add <8 x i16> %1, %arg.4
  %3 = add <8 x i16> %2, %arg.5
  %4 = add <8 x i16> %3, %arg.6
  %5 = add <8 x i16> %4, %arg.7
  %6 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %arg, <8 x i16> %5) #11
  %7 = lshr <8 x i16> %6, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  ret <8 x i16> %7
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.407(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  %4 = add <8 x i16> %3, %arg.5
  %5 = add <8 x i16> %4, %arg.6
  ret <8 x i16> %5
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.408(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.409(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.410(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.411(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.412(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.413(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.414(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.415(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.416(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.417(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.418(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.419(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.420(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.421(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.422(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.423(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.424(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.425(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.426(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.427(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.428(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.429(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.430(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.431(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.432(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.433(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.434(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.435(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.436(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6, <8 x i16> %arg.7) local_unnamed_addr #13 {
entry:
  %0 = add <8 x i16> %arg.2, %arg.1
  %1 = add <8 x i16> %0, %arg.3
  %2 = add <8 x i16> %1, %arg.4
  %3 = add <8 x i16> %2, %arg.5
  %4 = add <8 x i16> %3, %arg.6
  %5 = add <8 x i16> %4, %arg.7
  %6 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %arg, <8 x i16> %5) #11
  %7 = lshr <8 x i16> %6, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  ret <8 x i16> %7
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.437(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  %4 = add <8 x i16> %3, %arg.5
  %5 = add <8 x i16> %4, %arg.6
  ret <8 x i16> %5
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.438(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.439(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.440(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.441(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.442(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.443(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.444(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.445(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.446(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.447(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.448(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.449(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.450(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.451(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.452(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.453(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.454(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.455(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.456(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.457(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.458(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.459(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.460(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.461(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.462(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.463(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.464(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.465(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.466(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6, <8 x i16> %arg.7) local_unnamed_addr #13 {
entry:
  %0 = add <8 x i16> %arg.2, %arg.1
  %1 = add <8 x i16> %0, %arg.3
  %2 = add <8 x i16> %1, %arg.4
  %3 = add <8 x i16> %2, %arg.5
  %4 = add <8 x i16> %3, %arg.6
  %5 = add <8 x i16> %4, %arg.7
  %6 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %arg, <8 x i16> %5) #11
  %7 = lshr <8 x i16> %6, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  ret <8 x i16> %7
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.467(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  %4 = add <8 x i16> %3, %arg.5
  %5 = add <8 x i16> %4, %arg.6
  ret <8 x i16> %5
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.468(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.469(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.470(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.471(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.472(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.473(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.474(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.475(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.476(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.477(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.478(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.479(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.480(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.481(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.482(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.483(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.484(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.485(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.486(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.487(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.488(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.489(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.490(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.491(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.492(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.493(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.494(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.495(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.496(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6, <8 x i16> %arg.7) local_unnamed_addr #13 {
entry:
  %0 = add <8 x i16> %arg.2, %arg.1
  %1 = add <8 x i16> %0, %arg.3
  %2 = add <8 x i16> %1, %arg.4
  %3 = add <8 x i16> %2, %arg.5
  %4 = add <8 x i16> %3, %arg.6
  %5 = add <8 x i16> %4, %arg.7
  %6 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %arg, <8 x i16> %5) #11
  %7 = lshr <8 x i16> %6, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  ret <8 x i16> %7
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.497(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  %4 = add <8 x i16> %3, %arg.5
  %5 = add <8 x i16> %4, %arg.6
  ret <8 x i16> %5
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.498(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6, <8 x i16> %arg.7) local_unnamed_addr #13 {
entry:
  %0 = add <8 x i16> %arg.2, %arg.1
  %1 = add <8 x i16> %0, %arg.3
  %2 = add <8 x i16> %1, %arg.4
  %3 = add <8 x i16> %2, %arg.5
  %4 = add <8 x i16> %3, %arg.6
  %5 = add <8 x i16> %4, %arg.7
  %6 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %arg, <8 x i16> %5) #11
  %7 = lshr <8 x i16> %6, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  ret <8 x i16> %7
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.499(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  %4 = add <8 x i16> %3, %arg.5
  %5 = add <8 x i16> %4, %arg.6
  ret <8 x i16> %5
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.500(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6, <8 x i16> %arg.7) local_unnamed_addr #13 {
entry:
  %0 = add <8 x i16> %arg.2, %arg.1
  %1 = add <8 x i16> %0, %arg.3
  %2 = add <8 x i16> %1, %arg.4
  %3 = add <8 x i16> %2, %arg.5
  %4 = add <8 x i16> %3, %arg.6
  %5 = add <8 x i16> %4, %arg.7
  %6 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %arg, <8 x i16> %5) #11
  %7 = lshr <8 x i16> %6, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  ret <8 x i16> %7
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.501(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  %4 = add <8 x i16> %3, %arg.5
  %5 = add <8 x i16> %4, %arg.6
  ret <8 x i16> %5
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.502(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6, <8 x i16> %arg.7) local_unnamed_addr #13 {
entry:
  %0 = add <8 x i16> %arg.2, %arg.1
  %1 = add <8 x i16> %0, %arg.3
  %2 = add <8 x i16> %1, %arg.4
  %3 = add <8 x i16> %2, %arg.5
  %4 = add <8 x i16> %3, %arg.6
  %5 = add <8 x i16> %4, %arg.7
  %6 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %arg, <8 x i16> %5) #11
  %7 = lshr <8 x i16> %6, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  ret <8 x i16> %7
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.503(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  %4 = add <8 x i16> %3, %arg.5
  %5 = add <8 x i16> %4, %arg.6
  ret <8 x i16> %5
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.504(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6, <8 x i16> %arg.7) local_unnamed_addr #13 {
entry:
  %0 = add <8 x i16> %arg.2, %arg.1
  %1 = add <8 x i16> %0, %arg.3
  %2 = add <8 x i16> %1, %arg.4
  %3 = add <8 x i16> %2, %arg.5
  %4 = add <8 x i16> %3, %arg.6
  %5 = add <8 x i16> %4, %arg.7
  %6 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %arg, <8 x i16> %5) #11
  %7 = lshr <8 x i16> %6, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  ret <8 x i16> %7
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.505(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  %4 = add <8 x i16> %3, %arg.5
  %5 = add <8 x i16> %4, %arg.6
  ret <8 x i16> %5
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.506(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6, <8 x i16> %arg.7) local_unnamed_addr #13 {
entry:
  %0 = add <8 x i16> %arg.2, %arg.1
  %1 = add <8 x i16> %0, %arg.3
  %2 = add <8 x i16> %1, %arg.4
  %3 = add <8 x i16> %2, %arg.5
  %4 = add <8 x i16> %3, %arg.6
  %5 = add <8 x i16> %4, %arg.7
  %6 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %arg, <8 x i16> %5) #11
  %7 = lshr <8 x i16> %6, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  ret <8 x i16> %7
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.507(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  %4 = add <8 x i16> %3, %arg.5
  %5 = add <8 x i16> %4, %arg.6
  ret <8 x i16> %5
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.508(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6, <8 x i16> %arg.7) local_unnamed_addr #13 {
entry:
  %0 = add <8 x i16> %arg.2, %arg.1
  %1 = add <8 x i16> %0, %arg.3
  %2 = add <8 x i16> %1, %arg.4
  %3 = add <8 x i16> %2, %arg.5
  %4 = add <8 x i16> %3, %arg.6
  %5 = add <8 x i16> %4, %arg.7
  %6 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %arg, <8 x i16> %5) #11
  %7 = lshr <8 x i16> %6, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  ret <8 x i16> %7
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.509(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  %4 = add <8 x i16> %3, %arg.5
  %5 = add <8 x i16> %4, %arg.6
  ret <8 x i16> %5
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.510(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6, <8 x i16> %arg.7) local_unnamed_addr #13 {
entry:
  %0 = add <8 x i16> %arg.2, %arg.1
  %1 = add <8 x i16> %0, %arg.3
  %2 = add <8 x i16> %1, %arg.4
  %3 = add <8 x i16> %2, %arg.5
  %4 = add <8 x i16> %3, %arg.6
  %5 = add <8 x i16> %4, %arg.7
  %6 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %arg, <8 x i16> %5) #11
  %7 = lshr <8 x i16> %6, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  ret <8 x i16> %7
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.511(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  %4 = add <8 x i16> %3, %arg.5
  %5 = add <8 x i16> %4, %arg.6
  ret <8 x i16> %5
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.512(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6, <8 x i16> %arg.7) local_unnamed_addr #13 {
entry:
  %0 = add <8 x i16> %arg.2, %arg.1
  %1 = add <8 x i16> %0, %arg.3
  %2 = add <8 x i16> %1, %arg.4
  %3 = add <8 x i16> %2, %arg.5
  %4 = add <8 x i16> %3, %arg.6
  %5 = add <8 x i16> %4, %arg.7
  %6 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %arg, <8 x i16> %5) #11
  %7 = lshr <8 x i16> %6, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  ret <8 x i16> %7
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.513(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  %4 = add <8 x i16> %3, %arg.5
  %5 = add <8 x i16> %4, %arg.6
  ret <8 x i16> %5
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.514(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6, <8 x i16> %arg.7) local_unnamed_addr #13 {
entry:
  %0 = add <8 x i16> %arg.2, %arg.1
  %1 = add <8 x i16> %0, %arg.3
  %2 = add <8 x i16> %1, %arg.4
  %3 = add <8 x i16> %2, %arg.5
  %4 = add <8 x i16> %3, %arg.6
  %5 = add <8 x i16> %4, %arg.7
  %6 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %arg, <8 x i16> %5) #11
  %7 = lshr <8 x i16> %6, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  ret <8 x i16> %7
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.515(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  %4 = add <8 x i16> %3, %arg.5
  %5 = add <8 x i16> %4, %arg.6
  ret <8 x i16> %5
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.516(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6, <8 x i16> %arg.7) local_unnamed_addr #13 {
entry:
  %0 = add <8 x i16> %arg.2, %arg.1
  %1 = add <8 x i16> %0, %arg.3
  %2 = add <8 x i16> %1, %arg.4
  %3 = add <8 x i16> %2, %arg.5
  %4 = add <8 x i16> %3, %arg.6
  %5 = add <8 x i16> %4, %arg.7
  %6 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %arg, <8 x i16> %5) #11
  %7 = lshr <8 x i16> %6, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  ret <8 x i16> %7
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.517(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  %4 = add <8 x i16> %3, %arg.5
  %5 = add <8 x i16> %4, %arg.6
  ret <8 x i16> %5
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.518(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6, <8 x i16> %arg.7) local_unnamed_addr #13 {
entry:
  %0 = add <8 x i16> %arg.2, %arg.1
  %1 = add <8 x i16> %0, %arg.3
  %2 = add <8 x i16> %1, %arg.4
  %3 = add <8 x i16> %2, %arg.5
  %4 = add <8 x i16> %3, %arg.6
  %5 = add <8 x i16> %4, %arg.7
  %6 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %arg, <8 x i16> %5) #11
  %7 = lshr <8 x i16> %6, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  ret <8 x i16> %7
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.519(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  %4 = add <8 x i16> %3, %arg.5
  %5 = add <8 x i16> %4, %arg.6
  ret <8 x i16> %5
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.520(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6, <8 x i16> %arg.7) local_unnamed_addr #13 {
entry:
  %0 = add <8 x i16> %arg.2, %arg.1
  %1 = add <8 x i16> %0, %arg.3
  %2 = add <8 x i16> %1, %arg.4
  %3 = add <8 x i16> %2, %arg.5
  %4 = add <8 x i16> %3, %arg.6
  %5 = add <8 x i16> %4, %arg.7
  %6 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %arg, <8 x i16> %5) #11
  %7 = lshr <8 x i16> %6, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  ret <8 x i16> %7
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.521(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  %4 = add <8 x i16> %3, %arg.5
  %5 = add <8 x i16> %4, %arg.6
  ret <8 x i16> %5
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.522(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6, <8 x i16> %arg.7) local_unnamed_addr #13 {
entry:
  %0 = add <8 x i16> %arg.2, %arg.1
  %1 = add <8 x i16> %0, %arg.3
  %2 = add <8 x i16> %1, %arg.4
  %3 = add <8 x i16> %2, %arg.5
  %4 = add <8 x i16> %3, %arg.6
  %5 = add <8 x i16> %4, %arg.7
  %6 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %arg, <8 x i16> %5) #11
  %7 = lshr <8 x i16> %6, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  ret <8 x i16> %7
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.523(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  %4 = add <8 x i16> %3, %arg.5
  %5 = add <8 x i16> %4, %arg.6
  ret <8 x i16> %5
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.524(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6, <8 x i16> %arg.7) local_unnamed_addr #13 {
entry:
  %0 = add <8 x i16> %arg.2, %arg.1
  %1 = add <8 x i16> %0, %arg.3
  %2 = add <8 x i16> %1, %arg.4
  %3 = add <8 x i16> %2, %arg.5
  %4 = add <8 x i16> %3, %arg.6
  %5 = add <8 x i16> %4, %arg.7
  %6 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %arg, <8 x i16> %5) #11
  %7 = lshr <8 x i16> %6, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  ret <8 x i16> %7
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.525(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  %4 = add <8 x i16> %3, %arg.5
  %5 = add <8 x i16> %4, %arg.6
  ret <8 x i16> %5
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.526(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6, <8 x i16> %arg.7) local_unnamed_addr #13 {
entry:
  %0 = add <8 x i16> %arg.2, %arg.1
  %1 = add <8 x i16> %0, %arg.3
  %2 = add <8 x i16> %1, %arg.4
  %3 = add <8 x i16> %2, %arg.5
  %4 = add <8 x i16> %3, %arg.6
  %5 = add <8 x i16> %4, %arg.7
  %6 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %arg, <8 x i16> %5) #11
  %7 = lshr <8 x i16> %6, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  ret <8 x i16> %7
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.527(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  %4 = add <8 x i16> %3, %arg.5
  %5 = add <8 x i16> %4, %arg.6
  ret <8 x i16> %5
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.528(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6, <8 x i16> %arg.7) local_unnamed_addr #13 {
entry:
  %0 = add <8 x i16> %arg.2, %arg.1
  %1 = add <8 x i16> %0, %arg.3
  %2 = add <8 x i16> %1, %arg.4
  %3 = add <8 x i16> %2, %arg.5
  %4 = add <8 x i16> %3, %arg.6
  %5 = add <8 x i16> %4, %arg.7
  %6 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %arg, <8 x i16> %5) #11
  %7 = lshr <8 x i16> %6, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  ret <8 x i16> %7
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.529(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  %4 = add <8 x i16> %3, %arg.5
  %5 = add <8 x i16> %4, %arg.6
  ret <8 x i16> %5
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.530(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.531(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.532(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.533(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.534(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.535(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.536(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.537(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.538(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.539(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.540(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.541(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.542(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.543(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.544(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.545(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.546(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.547(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.548(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.549(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.550(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.551(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.552(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.553(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.554(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.555(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.556(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.557(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.558(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6, <8 x i16> %arg.7) local_unnamed_addr #13 {
entry:
  %0 = add <8 x i16> %arg.2, %arg.1
  %1 = add <8 x i16> %0, %arg.3
  %2 = add <8 x i16> %1, %arg.4
  %3 = add <8 x i16> %2, %arg.5
  %4 = add <8 x i16> %3, %arg.6
  %5 = add <8 x i16> %4, %arg.7
  %6 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %arg, <8 x i16> %5) #11
  %7 = lshr <8 x i16> %6, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  ret <8 x i16> %7
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.559(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  %4 = add <8 x i16> %3, %arg.5
  %5 = add <8 x i16> %4, %arg.6
  ret <8 x i16> %5
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.560(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.561(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.562(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.563(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.564(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.565(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.566(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.567(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.568(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.569(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.570(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.571(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.572(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.573(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.574(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.575(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.576(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.577(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.578(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.579(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.580(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.581(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.582(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.583(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.584(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.585(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.586(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.587(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.588(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6, <8 x i16> %arg.7) local_unnamed_addr #13 {
entry:
  %0 = add <8 x i16> %arg.2, %arg.1
  %1 = add <8 x i16> %0, %arg.3
  %2 = add <8 x i16> %1, %arg.4
  %3 = add <8 x i16> %2, %arg.5
  %4 = add <8 x i16> %3, %arg.6
  %5 = add <8 x i16> %4, %arg.7
  %6 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %arg, <8 x i16> %5) #11
  %7 = lshr <8 x i16> %6, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  ret <8 x i16> %7
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.589(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  %4 = add <8 x i16> %3, %arg.5
  %5 = add <8 x i16> %4, %arg.6
  ret <8 x i16> %5
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.590(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.591(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.592(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.593(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.594(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.595(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.596(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.597(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.598(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.599(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.600(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.601(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.602(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.603(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.604(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.605(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.606(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.607(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.608(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.609(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.610(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.611(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.612(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.613(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.614(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.615(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.616(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.617(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.618(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6, <8 x i16> %arg.7) local_unnamed_addr #13 {
entry:
  %0 = add <8 x i16> %arg.2, %arg.1
  %1 = add <8 x i16> %0, %arg.3
  %2 = add <8 x i16> %1, %arg.4
  %3 = add <8 x i16> %2, %arg.5
  %4 = add <8 x i16> %3, %arg.6
  %5 = add <8 x i16> %4, %arg.7
  %6 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %arg, <8 x i16> %5) #11
  %7 = lshr <8 x i16> %6, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  ret <8 x i16> %7
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.619(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  %4 = add <8 x i16> %3, %arg.5
  %5 = add <8 x i16> %4, %arg.6
  ret <8 x i16> %5
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.620(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.621(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.622(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.623(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.624(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.625(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.626(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.627(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.628(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.629(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.630(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.631(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.632(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.633(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.634(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.635(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.636(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.637(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.638(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.639(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.640(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.641(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.642(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.643(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.644(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.645(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.646(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.647(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.648(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6, <8 x i16> %arg.7) local_unnamed_addr #13 {
entry:
  %0 = add <8 x i16> %arg.2, %arg.1
  %1 = add <8 x i16> %0, %arg.3
  %2 = add <8 x i16> %1, %arg.4
  %3 = add <8 x i16> %2, %arg.5
  %4 = add <8 x i16> %3, %arg.6
  %5 = add <8 x i16> %4, %arg.7
  %6 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %arg, <8 x i16> %5) #11
  %7 = lshr <8 x i16> %6, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  ret <8 x i16> %7
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.649(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  %4 = add <8 x i16> %3, %arg.5
  %5 = add <8 x i16> %4, %arg.6
  ret <8 x i16> %5
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.650(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.651(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.652(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.653(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.654(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.655(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.656(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.657(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.658(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.659(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.660(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.661(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.662(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.663(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.664(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.665(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.666(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.667(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.668(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.669(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.670(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.671(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.672(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.673(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.674(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.675(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.676(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.677(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.678(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6, <8 x i16> %arg.7) local_unnamed_addr #13 {
entry:
  %0 = add <8 x i16> %arg.2, %arg.1
  %1 = add <8 x i16> %0, %arg.3
  %2 = add <8 x i16> %1, %arg.4
  %3 = add <8 x i16> %2, %arg.5
  %4 = add <8 x i16> %3, %arg.6
  %5 = add <8 x i16> %4, %arg.7
  %6 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %arg, <8 x i16> %5) #11
  %7 = lshr <8 x i16> %6, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  ret <8 x i16> %7
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.679(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  %4 = add <8 x i16> %3, %arg.5
  %5 = add <8 x i16> %4, %arg.6
  ret <8 x i16> %5
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.680(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.681(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.682(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.683(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.684(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.685(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.686(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.687(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.688(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.689(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.690(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.691(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.692(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.693(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.694(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.695(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.696(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.697(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.698(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.699(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.700(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.701(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.702(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.703(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.704(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.705(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.706(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.707(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.708(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6, <8 x i16> %arg.7) local_unnamed_addr #13 {
entry:
  %0 = add <8 x i16> %arg.2, %arg.1
  %1 = add <8 x i16> %0, %arg.3
  %2 = add <8 x i16> %1, %arg.4
  %3 = add <8 x i16> %2, %arg.5
  %4 = add <8 x i16> %3, %arg.6
  %5 = add <8 x i16> %4, %arg.7
  %6 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %arg, <8 x i16> %5) #11
  %7 = lshr <8 x i16> %6, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  ret <8 x i16> %7
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.709(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  %4 = add <8 x i16> %3, %arg.5
  %5 = add <8 x i16> %4, %arg.6
  ret <8 x i16> %5
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.710(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.711(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.712(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.713(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.714(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.715(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.716(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.717(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.718(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.719(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.720(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.721(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.722(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.723(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.724(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.725(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.726(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.727(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.728(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.729(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.730(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.731(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.732(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.733(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.734(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.735(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.736(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.737(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.738(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6, <8 x i16> %arg.7) local_unnamed_addr #13 {
entry:
  %0 = add <8 x i16> %arg.2, %arg.1
  %1 = add <8 x i16> %0, %arg.3
  %2 = add <8 x i16> %1, %arg.4
  %3 = add <8 x i16> %2, %arg.5
  %4 = add <8 x i16> %3, %arg.6
  %5 = add <8 x i16> %4, %arg.7
  %6 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %arg, <8 x i16> %5) #11
  %7 = lshr <8 x i16> %6, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  ret <8 x i16> %7
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.739(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  %4 = add <8 x i16> %3, %arg.5
  %5 = add <8 x i16> %4, %arg.6
  ret <8 x i16> %5
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.740(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.741(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.742(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.743(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.744(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.745(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.746(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.747(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.748(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.749(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.750(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.751(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.752(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.753(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.754(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.755(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.756(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.757(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.758(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.759(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.760(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.761(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.762(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.763(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.764(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.765(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.766(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <4 x i32> @hydride.node.blur7x7_arm_depth3.767(<4 x i32> %arg, <4 x i32> %arg.1, <4 x i32> %arg.2) local_unnamed_addr #13 {
entry:
  %0 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %arg, <4 x i32> %arg.1) #11
  %1 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %0, <4 x i32> zeroinitializer) #11
  %2 = add <4 x i32> %1, %arg.2
  ret <4 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.768(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6, <8 x i16> %arg.7) local_unnamed_addr #13 {
entry:
  %0 = add <8 x i16> %arg.2, %arg.1
  %1 = add <8 x i16> %0, %arg.3
  %2 = add <8 x i16> %1, %arg.4
  %3 = add <8 x i16> %2, %arg.5
  %4 = add <8 x i16> %3, %arg.6
  %5 = add <8 x i16> %4, %arg.7
  %6 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %arg, <8 x i16> %5) #11
  %7 = lshr <8 x i16> %6, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  ret <8 x i16> %7
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.769(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  %4 = add <8 x i16> %3, %arg.5
  %5 = add <8 x i16> %4, %arg.6
  ret <8 x i16> %5
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.770(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6, <8 x i16> %arg.7) local_unnamed_addr #13 {
entry:
  %0 = add <8 x i16> %arg.2, %arg.1
  %1 = add <8 x i16> %0, %arg.3
  %2 = add <8 x i16> %1, %arg.4
  %3 = add <8 x i16> %2, %arg.5
  %4 = add <8 x i16> %3, %arg.6
  %5 = add <8 x i16> %4, %arg.7
  %6 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %arg, <8 x i16> %5) #11
  %7 = lshr <8 x i16> %6, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  ret <8 x i16> %7
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.771(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  %4 = add <8 x i16> %3, %arg.5
  %5 = add <8 x i16> %4, %arg.6
  ret <8 x i16> %5
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.772(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6, <8 x i16> %arg.7) local_unnamed_addr #13 {
entry:
  %0 = add <8 x i16> %arg.2, %arg.1
  %1 = add <8 x i16> %0, %arg.3
  %2 = add <8 x i16> %1, %arg.4
  %3 = add <8 x i16> %2, %arg.5
  %4 = add <8 x i16> %3, %arg.6
  %5 = add <8 x i16> %4, %arg.7
  %6 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %arg, <8 x i16> %5) #11
  %7 = lshr <8 x i16> %6, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  ret <8 x i16> %7
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.773(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  %4 = add <8 x i16> %3, %arg.5
  %5 = add <8 x i16> %4, %arg.6
  ret <8 x i16> %5
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.774(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6, <8 x i16> %arg.7) local_unnamed_addr #13 {
entry:
  %0 = add <8 x i16> %arg.2, %arg.1
  %1 = add <8 x i16> %0, %arg.3
  %2 = add <8 x i16> %1, %arg.4
  %3 = add <8 x i16> %2, %arg.5
  %4 = add <8 x i16> %3, %arg.6
  %5 = add <8 x i16> %4, %arg.7
  %6 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %arg, <8 x i16> %5) #11
  %7 = lshr <8 x i16> %6, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  ret <8 x i16> %7
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.775(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  %4 = add <8 x i16> %3, %arg.5
  %5 = add <8 x i16> %4, %arg.6
  ret <8 x i16> %5
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.776(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6, <8 x i16> %arg.7) local_unnamed_addr #13 {
entry:
  %0 = add <8 x i16> %arg.2, %arg.1
  %1 = add <8 x i16> %0, %arg.3
  %2 = add <8 x i16> %1, %arg.4
  %3 = add <8 x i16> %2, %arg.5
  %4 = add <8 x i16> %3, %arg.6
  %5 = add <8 x i16> %4, %arg.7
  %6 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %arg, <8 x i16> %5) #11
  %7 = lshr <8 x i16> %6, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  ret <8 x i16> %7
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.777(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  %4 = add <8 x i16> %3, %arg.5
  %5 = add <8 x i16> %4, %arg.6
  ret <8 x i16> %5
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.778(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6, <8 x i16> %arg.7) local_unnamed_addr #13 {
entry:
  %0 = add <8 x i16> %arg.2, %arg.1
  %1 = add <8 x i16> %0, %arg.3
  %2 = add <8 x i16> %1, %arg.4
  %3 = add <8 x i16> %2, %arg.5
  %4 = add <8 x i16> %3, %arg.6
  %5 = add <8 x i16> %4, %arg.7
  %6 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %arg, <8 x i16> %5) #11
  %7 = lshr <8 x i16> %6, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  ret <8 x i16> %7
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.779(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  %4 = add <8 x i16> %3, %arg.5
  %5 = add <8 x i16> %4, %arg.6
  ret <8 x i16> %5
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.780(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6, <8 x i16> %arg.7) local_unnamed_addr #13 {
entry:
  %0 = add <8 x i16> %arg.2, %arg.1
  %1 = add <8 x i16> %0, %arg.3
  %2 = add <8 x i16> %1, %arg.4
  %3 = add <8 x i16> %2, %arg.5
  %4 = add <8 x i16> %3, %arg.6
  %5 = add <8 x i16> %4, %arg.7
  %6 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %arg, <8 x i16> %5) #11
  %7 = lshr <8 x i16> %6, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  ret <8 x i16> %7
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.781(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  %4 = add <8 x i16> %3, %arg.5
  %5 = add <8 x i16> %4, %arg.6
  ret <8 x i16> %5
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.782(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6, <8 x i16> %arg.7) local_unnamed_addr #13 {
entry:
  %0 = add <8 x i16> %arg.2, %arg.1
  %1 = add <8 x i16> %0, %arg.3
  %2 = add <8 x i16> %1, %arg.4
  %3 = add <8 x i16> %2, %arg.5
  %4 = add <8 x i16> %3, %arg.6
  %5 = add <8 x i16> %4, %arg.7
  %6 = tail call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %arg, <8 x i16> %5) #11
  %7 = lshr <8 x i16> %6, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  ret <8 x i16> %7
}

; Function Attrs: norecurse nounwind readnone willreturn
define <8 x i16> @hydride.node.blur7x7_arm_depth3.783(<8 x i16> %arg, <8 x i16> %arg.1, <8 x i16> %arg.2, <8 x i16> %arg.3, <8 x i16> %arg.4, <8 x i16> %arg.5, <8 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <8 x i16> %arg.1, %arg
  %1 = add <8 x i16> %0, %arg.2
  %2 = add <8 x i16> %1, %arg.3
  %3 = add <8 x i16> %2, %arg.4
  %4 = add <8 x i16> %3, %arg.5
  %5 = add <8 x i16> %4, %arg.6
  ret <8 x i16> %5
}

; Function Attrs: nofree nosync nounwind readnone willreturn
declare i64 @llvm.vector.reduce.add.v2i64(<2 x i64>) #9

attributes #0 = { nounwind mustprogress "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-builtins" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind willreturn mustprogress "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nofree nosync nounwind willreturn }
attributes #4 = { nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nofree nosync nounwind willreturn writeonly }
attributes #6 = { alwaysinline nounwind willreturn mustprogress "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #8 = { nounwind willreturn "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nofree nosync nounwind readnone willreturn }
attributes #10 = { nounwind "reciprocal-estimates"="none" }
attributes #11 = { nounwind }
attributes #12 = { norecurse nounwind readnone willreturn }
attributes #13 = { nounwind readnone willreturn }
attributes #14 = { nobuiltin nounwind "no-builtins" }
attributes #15 = { nobuiltin "no-builtins" }
attributes #16 = { noinline }

!llvm.module.flags = !{!0, !1, !2, !3, !4, !5, !6, !7, !8, !9, !10, !11, !12}
!llvm.ident = !{!13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 2, !"halide_use_soft_float_abi", i32 0}
!3 = !{i32 2, !"halide_mcpu", !"apple-a12"}
!4 = !{i32 2, !"halide_mattrs", !"+reserve-x18"}
!5 = !{i32 2, !"halide_mabi", !""}
!6 = !{i32 2, !"halide_use_pic", i32 1}
!7 = !{i32 2, !"halide_use_large_code_model", i32 0}
!8 = !{i32 2, !"halide_per_instruction_fast_math_flags", i32 0}
!9 = !{i32 1, !"branch-target-enforcement", i32 0}
!10 = !{i32 1, !"sign-return-address", i32 0}
!11 = !{i32 1, !"sign-return-address-all", i32 0}
!12 = !{i32 1, !"sign-return-address-with-bkey", i32 0}
!13 = !{!"clang version 12.0.1 (https://github.com/llvm/llvm-project.git fed41342a82f5a3a9201819a82bf7a48313e296b)"}
!14 = !{!15, !15, i64 0}
!15 = !{!"any pointer", !16, i64 0}
!16 = !{!"omnipotent char", !17, i64 0}
!17 = !{!"Simple C++ TBAA"}
!18 = !{!16, !16, i64 0}
!19 = !{!20, !20, i64 0}
!20 = !{!"bool", !16, i64 0}
!21 = !{i8 0, i8 2}
!22 = !{!23, !23, i64 0}
!23 = !{!"long long", !16, i64 0}
!24 = !{!25, !26, i64 0}
!25 = !{!"_ZTS18mach_timebase_info", !26, i64 0, !26, i64 4}
!26 = !{!"int", !16, i64 0}
!27 = !{!25, !26, i64 4}
!28 = !{!29, !15, i64 0}
!29 = !{!"_ZTSN6Halide7Runtime8Internal4workE", !30, i64 0, !15, i64 56, !15, i64 64, !15, i64 72, !26, i64 80, !15, i64 88, !26, i64 96, !15, i64 104, !26, i64 112, !26, i64 116, !26, i64 120, !20, i64 124}
!30 = !{!"_ZTS22halide_parallel_task_t", !15, i64 0, !15, i64 8, !15, i64 16, !15, i64 24, !26, i64 32, !26, i64 36, !26, i64 40, !26, i64 44, !20, i64 48}
!31 = !{!29, !26, i64 36}
!32 = !{!29, !26, i64 40}
!33 = !{!29, !20, i64 48}
!34 = !{!29, !15, i64 24}
!35 = !{!29, !26, i64 32}
!36 = !{!29, !15, i64 8}
!37 = !{!29, !26, i64 44}
!38 = !{!29, !15, i64 16}
!39 = !{!29, !15, i64 56}
!40 = !{!29, !15, i64 104}
!41 = !{!26, !26, i64 0}
!42 = !{!29, !26, i64 120}
!43 = !{!29, !20, i64 124}
!44 = !{!29, !15, i64 72}
!45 = !{!29, !26, i64 80}
!46 = !{!29, !15, i64 88}
!47 = !{!29, !26, i64 116}
!48 = !{!49, !49, i64 0}
!49 = !{!"vtable pointer", !17, i64 0}
!50 = !{!51, !15, i64 8}
!51 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE", !15, i64 8}
!52 = !{!53, !20, i64 2121}
!53 = !{!"_ZTSN6Halide7Runtime8Internal12work_queue_tE", !54, i64 0, !26, i64 8, !26, i64 12, !15, i64 16, !26, i64 24, !26, i64 28, !26, i64 32, !55, i64 40, !55, i64 48, !55, i64 56, !26, i64 64, !26, i64 68, !16, i64 72, !20, i64 2120, !20, i64 2121, !26, i64 2124}
!54 = !{!"_ZTS12halide_mutex", !16, i64 0}
!55 = !{!"_ZTS11halide_cond", !16, i64 0}
!56 = distinct !{!56, !57}
!57 = !{!"llvm.loop.mustprogress"}
!58 = !{!53, !26, i64 8}
!59 = distinct !{!59, !57}
!60 = !{!53, !26, i64 24}
!61 = !{!53, !26, i64 2124}
!62 = !{!53, !26, i64 28}
!63 = distinct !{!63, !57}
!64 = !{!29, !26, i64 112}
!65 = !{!29, !26, i64 96}
!66 = !{!53, !15, i64 16}
!67 = !{!29, !15, i64 64}
!68 = distinct !{!68, !57, !69}
!69 = !{!"llvm.loop.isvectorized", i32 1}
!70 = !{!53, !26, i64 68}
!71 = !{!53, !26, i64 32}
!72 = distinct !{!72, !57, !69}
!73 = !{!53, !20, i64 2120}
!74 = distinct !{!74, !57}
!75 = !{!76, !15, i64 0}
!76 = !{!"_ZTS26halide_semaphore_acquire_t", !15, i64 0, !26, i64 8}
!77 = !{!76, !26, i64 8}
!78 = distinct !{!78, !57}
!79 = !{!53, !26, i64 64}
!80 = distinct !{!80, !57}
!81 = distinct !{!81, !57}
!82 = !{i64 0, i64 8, !14, i64 8, i64 8, !14, i64 16, i64 8, !14, i64 24, i64 8, !14, i64 32, i64 4, !41, i64 36, i64 4, !41, i64 40, i64 4, !41, i64 44, i64 4, !41, i64 48, i64 1, !19, i64 56, i64 8, !14, i64 64, i64 8, !14, i64 72, i64 8, !14, i64 80, i64 4, !41, i64 88, i64 8, !14, i64 96, i64 4, !41, i64 104, i64 8, !14, i64 112, i64 4, !41, i64 116, i64 4, !41, i64 120, i64 4, !41, i64 124, i64 1, !19}
!83 = !{i64 0, i64 8, !14, i64 8, i64 8, !14, i64 16, i64 8, !14, i64 24, i64 4, !41, i64 28, i64 4, !41, i64 32, i64 4, !41, i64 36, i64 4, !41, i64 40, i64 1, !19, i64 48, i64 8, !14, i64 56, i64 8, !14, i64 64, i64 8, !14, i64 72, i64 4, !41, i64 80, i64 8, !14, i64 88, i64 4, !41, i64 96, i64 8, !14, i64 104, i64 4, !41, i64 108, i64 4, !41, i64 112, i64 4, !41, i64 116, i64 1, !19}
!84 = !{i64 0, i64 8, !14, i64 8, i64 8, !14, i64 16, i64 8, !14, i64 24, i64 4, !41, i64 32, i64 8, !14, i64 40, i64 4, !41, i64 48, i64 8, !14, i64 56, i64 4, !41, i64 60, i64 4, !41, i64 64, i64 4, !41, i64 68, i64 1, !19}
!85 = !{i64 0, i64 8, !14, i64 8, i64 4, !41, i64 12, i64 4, !41, i64 16, i64 4, !41, i64 20, i64 1, !19}
!86 = distinct !{!86, !57}
!87 = distinct !{!87, !57}
!88 = !{!89, !15, i64 144}
!89 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization10queue_dataE", !90, i64 0, !23, i64 136, !15, i64 144, !23, i64 152}
!90 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization13thread_parkerE", !91, i64 0, !92, i64 64, !20, i64 128}
!91 = !{!"_ZTS15pthread_mutex_t", !16, i64 0}
!92 = !{!"_ZTS14pthread_cond_t", !16, i64 0}
!93 = !{!94, !15, i64 16}
!94 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization11hash_bucketE", !95, i64 0, !15, i64 8, !15, i64 16}
!95 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization9word_lockE", !23, i64 0}
!96 = distinct !{!96, !57}
!97 = !{!89, !23, i64 152}
!98 = !{!90, !20, i64 128}
!99 = distinct !{!99, !57}
!100 = !{!101, !15, i64 152}
!101 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization20word_lock_queue_dataE", !90, i64 0, !15, i64 136, !15, i64 144, !15, i64 152}
!102 = !{!101, !15, i64 136}
!103 = !{!101, !15, i64 144}
!104 = distinct !{!104, !57}
!105 = distinct !{!105, !57}
!106 = distinct !{!106, !57}
!107 = !{!108, !15, i64 8}
!108 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization25broadcast_parking_controlE", !15, i64 8, !15, i64 16}
!109 = !{!108, !15, i64 16}
!110 = !{!111, !15, i64 8}
!111 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization20wait_parking_controlE", !15, i64 8, !15, i64 16}
!112 = !{!111, !15, i64 16}
!113 = !{!89, !23, i64 136}
!114 = !{!115, !20, i64 0}
!115 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization15validate_actionE", !20, i64 0, !23, i64 8}
!116 = !{!115, !23, i64 8}
!117 = !{!94, !15, i64 8}
!118 = !{!119, !15, i64 0}
!119 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization11bucket_pairE", !15, i64 0, !15, i64 8}
!120 = distinct !{!120, !57}
!121 = !{!119, !15, i64 8}
!122 = !{!123, !15, i64 0}
!123 = !{!"_ZTSN6Halide7Runtime8Internal14spawned_threadE", !15, i64 0, !15, i64 8, !124, i64 16}
!124 = !{!"long", !16, i64 0}
!125 = !{!123, !15, i64 8}
!126 = !{!123, !124, i64 16}
!127 = !{!30, !26, i64 40}
!128 = !{i64 0, i64 8, !14, i64 8, i64 8, !14, i64 16, i64 8, !14, i64 24, i64 8, !14, i64 32, i64 4, !41, i64 36, i64 4, !41, i64 40, i64 4, !41, i64 44, i64 4, !41, i64 48, i64 1, !19}
!129 = distinct !{!129, !57}
!130 = distinct !{!130, !57}
!131 = distinct !{!131, !57}
!132 = !{!133, !15, i64 8}
!133 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization22signal_parking_controlE", !15, i64 8, !15, i64 16}
!134 = !{!133, !15, i64 16}
!135 = !{!136, !15, i64 0}
!136 = !{!"_ZTS18halide_mutex_array", !15, i64 0}
!137 = distinct !{!137, !57}
!138 = !{!139, !142, i64 34}
!139 = !{!"_ZTS20halide_trace_event_t", !15, i64 0, !15, i64 8, !15, i64 16, !15, i64 24, !140, i64 32, !143, i64 36, !26, i64 40, !26, i64 44, !26, i64 48}
!140 = !{!"_ZTS13halide_type_t", !141, i64 0, !16, i64 1, !142, i64 2}
!141 = !{!"_ZTS18halide_type_code_t", !16, i64 0}
!142 = !{!"short", !16, i64 0}
!143 = !{!"_ZTS25halide_trace_event_code_t", !16, i64 0}
!144 = !{!140, !16, i64 1}
!145 = !{!139, !26, i64 48}
!146 = !{!139, !15, i64 0}
!147 = !{!139, !15, i64 24}
!148 = !{!149, !26, i64 0}
!149 = !{!"_ZTSN6Halide7Runtime8Internal23SharedExclusiveSpinLockE", !26, i64 0}
!150 = !{!151, !26, i64 4}
!151 = !{!"_ZTSN6Halide7Runtime8Internal11TraceBufferE", !149, i64 0, !26, i64 4, !26, i64 8, !16, i64 12}
!152 = !{!151, !26, i64 8}
!153 = distinct !{!153, !57}
!154 = !{!155, !26, i64 0}
!155 = !{!"_ZTS21halide_trace_packet_t", !26, i64 0, !26, i64 4, !140, i64 8, !143, i64 12, !26, i64 16, !26, i64 20, !26, i64 24}
!156 = !{!155, !26, i64 4}
!157 = !{!139, !15, i64 16}
!158 = !{!139, !15, i64 8}
!159 = !{!155, !26, i64 24}
!160 = !{!155, !142, i64 10}
!161 = distinct !{!161, !57}
!162 = !{!139, !143, i64 36}
!163 = !{!139, !16, i64 33}
!164 = distinct !{!164, !57}
!165 = !{!139, !26, i64 44}
!166 = distinct !{!166, !57, !167}
!167 = !{!"llvm.loop.peeled.count", i32 1}
!168 = !{!139, !141, i64 32}
!169 = !{!142, !142, i64 0}
!170 = !{!171, !171, i64 0}
!171 = !{!"float", !16, i64 0}
!172 = !{!173, !173, i64 0}
!173 = !{!"double", !16, i64 0}
!174 = distinct !{!174, !57, !167}
!175 = distinct !{!175, !57}
!176 = !{!139, !26, i64 40}
!177 = distinct !{!177, !57}
!178 = distinct !{!178, !57}
!179 = distinct !{!179, !57}
!180 = !{!181, !15, i64 16}
!181 = !{!"_ZTS15halide_buffer_t", !23, i64 0, !15, i64 8, !15, i64 16, !23, i64 24, !140, i64 32, !26, i64 36, !15, i64 40, !15, i64 48}
!182 = !{!181, !23, i64 0}
!183 = !{!181, !26, i64 36}
!184 = !{!181, !15, i64 40}
!185 = !{!186, !26, i64 8}
!186 = !{!"_ZTS18halide_dimension_t", !26, i64 0, !26, i64 4, !26, i64 8, !26, i64 12}
!187 = distinct !{!187, !57, !69}
!188 = !{i64 0, i64 4, !41, i64 4, i64 4, !41, i64 8, i64 4, !41, i64 12, i64 4, !41}
!189 = !{!186, !26, i64 4}
!190 = distinct !{!190, !57}
!191 = distinct !{!191, !57, !69}
!192 = !{!193, !142, i64 0}
!193 = !{!"_ZTSN6Halide7Runtime8Internal18halide_tiff_headerE", !142, i64 0, !142, i64 2, !26, i64 4, !142, i64 8, !16, i64 10, !26, i64 190, !16, i64 194, !16, i64 202}
!194 = !{!193, !142, i64 2}
!195 = !{!193, !26, i64 4}
!196 = !{!193, !142, i64 8}
!197 = !{!198, !142, i64 0}
!198 = !{!"_ZTSN6Halide7Runtime8Internal8tiff_tagE", !142, i64 0, !142, i64 2, !26, i64 4, !16, i64 8}
!199 = !{!198, !142, i64 2}
!200 = !{!198, !26, i64 4}
!201 = distinct !{!201, !57}
!202 = distinct !{!202, !57}
!203 = distinct !{!203, !57}
!204 = distinct !{!204, !57}
!205 = distinct !{!205, !57}
!206 = !{!207}
!207 = distinct !{!207, !208}
!208 = distinct !{!208, !"LVerDomain"}
!209 = !{!210}
!210 = distinct !{!210, !208}
!211 = distinct !{!211, !57, !69}
!212 = distinct !{!212, !57, !69}
!213 = distinct !{!213, !57, !69}
!214 = distinct !{!214, !57, !69}
!215 = distinct !{!215, !57, !216, !69}
!216 = !{!"llvm.loop.unroll.runtime.disable"}
!217 = distinct !{!217, !57, !69}
!218 = distinct !{!218, !57, !69}
!219 = distinct !{!219, !57, !69}
!220 = distinct !{!220, !57, !69}
!221 = !{!186, !26, i64 0}
!222 = distinct !{!222, !57}
!223 = distinct !{!223, !57, !69}
!224 = distinct !{!224, !57, !216, !69}
!225 = distinct !{!225, !57}
!226 = distinct !{!226, !57}
!227 = distinct !{!227, !57}
!228 = distinct !{!228, !57}
!229 = !{!230, !15, i64 0}
!230 = !{!"_ZTSN6Halide7Runtime8Internal10CacheEntryE", !15, i64 0, !15, i64 8, !15, i64 16, !15, i64 24, !124, i64 32, !15, i64 40, !26, i64 48, !26, i64 52, !26, i64 56, !26, i64 60, !15, i64 64, !15, i64 72, !23, i64 80, !20, i64 88}
!231 = distinct !{!231, !57}
!232 = !{!230, !26, i64 56}
!233 = !{!230, !15, i64 24}
!234 = !{!230, !15, i64 72}
!235 = distinct !{!235, !57}
!236 = distinct !{!236, !57}
!237 = !{!238, !23, i64 0}
!238 = !{!"_ZTSN6Halide7Runtime8Internal11device_copyE", !23, i64 0, !23, i64 8, !23, i64 16, !16, i64 24, !16, i64 152, !16, i64 280, !23, i64 408}
!239 = !{!238, !23, i64 8}
!240 = !{!238, !23, i64 408}
!241 = distinct !{!241, !57}
!242 = !{!238, !23, i64 16}
!243 = distinct !{!243, !57, !69}
!244 = distinct !{!244, !57, !216, !69}
!245 = distinct !{!245, !57}
!246 = distinct !{!246, !57}
!247 = distinct !{!247, !57}
!248 = distinct !{!248, !57}
!249 = !{i64 0, i64 8, !22, i64 8, i64 8, !22, i64 16, i64 8, !22, i64 24, i64 128, !18, i64 152, i64 128, !18, i64 280, i64 128, !18, i64 408, i64 8, !22}
!250 = distinct !{!250, !57}
!251 = !{!186, !26, i64 12}
!252 = !{!230, !15, i64 16}
!253 = !{!230, !124, i64 32}
!254 = !{!230, !26, i64 48}
!255 = !{!230, !26, i64 52}
!256 = !{!230, !26, i64 60}
!257 = !{!230, !15, i64 64}
!258 = !{!230, !15, i64 40}
!259 = distinct !{!259, !57}
!260 = distinct !{!260, !57}
!261 = distinct !{!261, !57}
!262 = !{!230, !20, i64 88}
!263 = !{!230, !23, i64 80}
!264 = !{i64 0, i64 8, !22, i64 8, i64 8, !14, i64 16, i64 8, !14, i64 24, i64 8, !22, i64 32, i64 1, !265, i64 33, i64 1, !18, i64 34, i64 2, !169, i64 36, i64 4, !41, i64 40, i64 8, !14, i64 48, i64 8, !14}
!265 = !{!141, !141, i64 0}
!266 = distinct !{!266, !57}
!267 = distinct !{!267, !57}
!268 = !{!230, !15, i64 8}
!269 = distinct !{!269, !57}
!270 = distinct !{!270, !57, !69}
!271 = distinct !{!271, !57, !69}
!272 = distinct !{!272, !57, !69}
!273 = distinct !{!273, !57, !69}
!274 = distinct !{!274, !57}
!275 = distinct !{!275, !57}
!276 = distinct !{!276, !57}
!277 = distinct !{!277, !57}
!278 = distinct !{!278, !57}
!279 = distinct !{!279, !57, !69}
!280 = distinct !{!280, !57, !69}
!281 = distinct !{!281, !57, !69}
!282 = distinct !{!282, !57, !69}
!283 = distinct !{!283, !57}
!284 = !{!285, !26, i64 8}
!285 = !{!"_ZTSN6Halide7Runtime8Internal16CacheBlockHeaderE", !15, i64 0, !26, i64 8}
!286 = !{!285, !15, i64 0}
!287 = distinct !{!287, !57}
!288 = distinct !{!288, !57}
!289 = distinct !{!289, !57}
!290 = distinct !{!290, !57}
!291 = distinct !{!291, !57, !69}
!292 = distinct !{!292, !57, !69}
!293 = distinct !{!293, !57, !69}
!294 = distinct !{!294, !57, !69}
!295 = distinct !{!295, !57}
!296 = distinct !{!296, !57}
!297 = distinct !{!297, !57}
!298 = distinct !{!298, !57}
!299 = distinct !{!299, !57}
!300 = distinct !{!300, !57}
!301 = distinct !{!301, !57}
!302 = distinct !{!302, !57}
!303 = distinct !{!303, !57}
!304 = !{!140, !141, i64 0}
!305 = !{!140, !142, i64 2}
!306 = !{!181, !15, i64 8}
!307 = !{!181, !23, i64 24}
!308 = distinct !{!308, !57}
!309 = !{!310, !15, i64 0}
!310 = !{!"_ZTS29halide_device_allocation_pool", !15, i64 0, !15, i64 8}
!311 = distinct !{!311, !57}
!312 = !{!310, !15, i64 8}
!313 = !{!314, !15, i64 120}
!314 = !{!"_ZTS25halide_device_interface_t", !15, i64 0, !15, i64 8, !15, i64 16, !15, i64 24, !15, i64 32, !15, i64 40, !15, i64 48, !15, i64 56, !15, i64 64, !15, i64 72, !15, i64 80, !15, i64 88, !15, i64 96, !15, i64 104, !15, i64 112, !15, i64 120}
!315 = !{!316, !15, i64 48}
!316 = !{!"_ZTS30halide_device_interface_impl_t", !15, i64 0, !15, i64 8, !15, i64 16, !15, i64 24, !15, i64 32, !15, i64 40, !15, i64 48, !15, i64 56, !15, i64 64, !15, i64 72, !15, i64 80, !15, i64 88, !15, i64 96, !15, i64 104, !15, i64 112, !15, i64 120}
!317 = !{!316, !15, i64 40}
!318 = !{!316, !15, i64 56}
!319 = !{!316, !15, i64 0}
!320 = !{!316, !15, i64 16}
!321 = !{!316, !15, i64 8}
!322 = !{!316, !15, i64 32}
!323 = !{!316, !15, i64 24}
!324 = !{!316, !15, i64 64}
!325 = !{!316, !15, i64 72}
!326 = distinct !{!326, !57, !69}
!327 = distinct !{!327, !57, !69}
!328 = distinct !{!328, !57, !69}
!329 = distinct !{!329, !57, !69}
!330 = !{!316, !15, i64 112}
!331 = !{!316, !15, i64 120}
!332 = !{!316, !15, i64 80}
!333 = !{!316, !15, i64 88}
!334 = !{!316, !15, i64 96}
!335 = !{!316, !15, i64 104}
!336 = !{i32 22, i32 33}
!337 = !{!338, !15, i64 40}
!338 = !{!"_ZTS21halide_profiler_state", !54, i64 0, !26, i64 8, !26, i64 12, !26, i64 16, !26, i64 20, !15, i64 24, !15, i64 32, !15, i64 40}
!339 = !{!338, !26, i64 16}
!340 = !{!341, !23, i64 0}
!341 = !{!"_ZTS30halide_profiler_pipeline_stats", !23, i64 0, !23, i64 8, !23, i64 16, !23, i64 24, !23, i64 32, !23, i64 40, !15, i64 48, !15, i64 56, !15, i64 64, !26, i64 72, !26, i64 76, !26, i64 80, !26, i64 84, !26, i64 88}
!342 = !{!341, !26, i64 80}
!343 = !{!341, !23, i64 32}
!344 = !{!341, !23, i64 40}
!345 = !{!341, !15, i64 48}
!346 = !{!341, !26, i64 84}
!347 = !{!341, !26, i64 88}
!348 = !{!341, !23, i64 16}
!349 = !{!341, !23, i64 24}
!350 = !{!341, !26, i64 72}
!351 = !{!341, !15, i64 56}
!352 = distinct !{!352, !57}
!353 = !{!354, !23, i64 32}
!354 = !{!"_ZTS26halide_profiler_func_stats", !23, i64 0, !23, i64 8, !23, i64 16, !23, i64 24, !23, i64 32, !23, i64 40, !23, i64 48, !15, i64 56, !26, i64 64}
!355 = !{!354, !23, i64 0}
!356 = !{!354, !15, i64 56}
!357 = distinct !{!357, !57}
!358 = distinct !{!358, !57}
!359 = distinct !{!359, !57}
!360 = !{!354, !23, i64 40}
!361 = !{!354, !23, i64 48}
!362 = distinct !{!362, !57}
!363 = !{!354, !23, i64 16}
!364 = distinct !{!364, !57}
!365 = !{!354, !26, i64 64}
!366 = distinct !{!366, !57}
!367 = !{!354, !23, i64 24}
!368 = distinct !{!368, !57}
!369 = distinct !{!369, !57}
!370 = !{!338, !15, i64 24}
!371 = !{!341, !15, i64 64}
!372 = distinct !{!372, !57}
!373 = !{!338, !26, i64 12}
!374 = distinct !{!374, !57}
!375 = !{!341, !26, i64 76}
!376 = distinct !{!376, !57}
!377 = distinct !{!377, !57}
!378 = !{!338, !15, i64 32}
!379 = !{!338, !26, i64 20}
!380 = !{!338, !26, i64 8}
!381 = distinct !{!381, !57}
!382 = distinct !{!382, !57}
!383 = distinct !{!383, !57}
!384 = distinct !{!384, !57}
!385 = !{!"branch_weights", i32 1073741824, i32 0}
!386 = !{!387, !387, i64 0}
!387 = !{!"input", !388, i64 0}
!388 = !{!"Halide buffer"}
!389 = !{!390, !390, i64 0}
!390 = !{!"blur_x", !388, i64 0}
!391 = !{!392, !392, i64 0}
!392 = !{!"blur_y", !388, i64 0}
!393 = !{!"branch_weights", i32 1073741824, i32 1073741824}
