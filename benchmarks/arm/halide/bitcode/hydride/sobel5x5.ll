; ModuleID = 'sobel5x5'
source_filename = "/home/muchenx2/Hydride/frontends/halide/src/runtime/posix_allocator.cpp"
target datalayout = "e-m:o-i64:64-i128:128-n32:64-S128"
target triple = "arm64-apple-macosx"

%struct.mach_timebase_info = type { i32, i32 }
%"struct.Halide::Runtime::Internal::Synchronization::hash_table" = type { [1024 x %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"] }
%"struct.Halide::Runtime::Internal::Synchronization::hash_bucket" = type { %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* }
%"class.Halide::Runtime::Internal::Synchronization::word_lock" = type { i64 }
%"struct.Halide::Runtime::Internal::Synchronization::queue_data" = type { %"struct.Halide::Runtime::Internal::Synchronization::thread_parker", i64, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, i64 }
%"struct.Halide::Runtime::Internal::Synchronization::thread_parker" = type <{ %struct.pthread_mutex_t, %struct.pthread_mutex_t, i8, [7 x i8] }>
%struct.pthread_mutex_t = type { [8 x i64] }
%"struct.Halide::Runtime::Internal::work_queue_t" = type { %struct.halide_mutex, i32, i32, %"struct.Halide::Runtime::Internal::work"*, i32, i32, i32, [4 x i8], %struct.halide_mutex, %struct.halide_mutex, %struct.halide_mutex, i32, i32, [256 x %struct.halide_thread*], i8, i8, i32 }
%"struct.Halide::Runtime::Internal::work" = type { %struct.halide_parallel_task_t, i32 (i8*, i32, i8*)*, %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"*, i32, %"struct.Halide::Runtime::Internal::work"*, i32, i8*, i32, i32, i32, i8 }
%struct.halide_parallel_task_t = type { i32 (i8*, i32, i32, i8*, i8*)*, i8*, i8*, %struct.halide_semaphore_acquire_t*, i32, i32, i32, i32, i8, [7 x i8] }
%struct.halide_semaphore_acquire_t = type { %struct.halide_semaphore_t*, i32, [4 x i8] }
%struct.halide_semaphore_t = type { [2 x i64] }
%struct.halide_mutex = type { [1 x i64] }
%struct.halide_thread = type opaque
%"class.Halide::Runtime::Internal::TraceBuffer" = type { %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock", i32, i32, [1048576 x i8] }
%"class.Halide::Runtime::Internal::SharedExclusiveSpinLock" = type { i32 }
%struct.halide_trace_event_t = type <{ i8*, i8*, i32*, i8*, %struct.halide_type_t, i32, i32, i32, i32, [4 x i8] }>
%struct.halide_type_t = type { i8, i8, i16 }
%"struct.Halide::Runtime::Internal::CacheEntry" = type { %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"*, i8*, i64, i8*, i32, i32, i32, i32, %struct.halide_dimension_t*, %struct.halide_buffer_t*, i64, i8, [7 x i8] }
%struct.halide_dimension_t = type { i32, i32, i32, i32 }
%struct.halide_buffer_t = type { i64, %struct.halide_device_interface_t*, i8*, i64, %struct.halide_type_t, i32, %struct.halide_dimension_t*, i8* }
%struct.halide_device_interface_t = type { i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, void (i8*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i64, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, i32*, i32*)*, %struct.halide_device_interface_impl_t* }
%struct.halide_device_interface_impl_t = type { void ()*, void ()*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i64)*, i32 (i8*, %struct.halide_buffer_t*)* }
%struct.halide_device_allocation_pool = type { i32 (i8*)*, %struct.halide_device_allocation_pool* }
%struct.halide_profiler_state = type { %struct.halide_mutex, i32, i32, i32, i32, %struct.halide_profiler_pipeline_stats*, void (i32*, i32*)*, %struct.halide_thread* }
%struct.halide_profiler_pipeline_stats = type { i64, i64, i64, i64, i64, i64, i8*, %struct.halide_profiler_func_stats*, i8*, i32, i32, i32, i32, i32, [4 x i8] }
%struct.halide_profiler_func_stats = type { i64, i64, i64, i64, i64, i64, i64, i8*, i32, [4 x i8] }
%struct.halide_filter_argument_t = type { i8*, i32, i32, %struct.halide_type_t, %struct.halide_scalar_value_t*, %struct.halide_scalar_value_t*, %struct.halide_scalar_value_t*, %struct.halide_scalar_value_t*, i64** }
%struct.halide_scalar_value_t = type { %union.anon.28 }
%union.anon.28 = type { double }
%struct.halide_filter_metadata_t = type { i32, i32, %struct.halide_filter_argument_t*, i8*, i8* }
%"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control" = type { %"struct.Halide::Runtime::Internal::Synchronization::parking_control", i64* }
%"struct.Halide::Runtime::Internal::Synchronization::parking_control" = type { i32 (...)** }
%"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data" = type { %"struct.Halide::Runtime::Internal::Synchronization::thread_parker", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* }
%"struct.Halide::Runtime::Internal::Synchronization::validate_action" = type { i8, [7 x i8], i64 }
%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control" = type { %"struct.Halide::Runtime::Internal::Synchronization::parking_control", i64*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"* }
%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair" = type { %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* }
%"struct.Halide::Runtime::Internal::spawned_thread" = type { void (i8*)*, i8*, i64 }
%struct.halide_mutex_array = type { %struct.halide_mutex* }
%"struct.Halide::Runtime::Internal::halide_tiff_header" = type <{ i16, i16, i32, i16, [15 x %"struct.Halide::Runtime::Internal::tiff_tag"], i32, [2 x i32], [2 x i32] }>
%"struct.Halide::Runtime::Internal::tiff_tag" = type { i16, i16, i32, %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock" }
%"struct.Halide::Runtime::Internal::CacheBlockHeader" = type { %"struct.Halide::Runtime::Internal::CacheEntry"*, i32, [4 x i8] }
%"struct.Halide::Runtime::Internal::device_copy" = type { i64, i64, i64, [16 x i64], [16 x i64], [16 x i64], i64 }
%"struct.Halide::Runtime::Internal::CpuFeatures" = type { [2 x i64], [2 x i64] }

@_ZN6Halide7Runtime8Internal13custom_mallocE = linkonce local_unnamed_addr global i8* (i8*, i64)* @halide_default_malloc, align 8
@_ZN6Halide7Runtime8Internal11custom_freeE = linkonce local_unnamed_addr global void (i8*, i8*)* @halide_default_free, align 8
@_ZN6Halide7Runtime8Internal13error_handlerE = linkonce local_unnamed_addr global void (i8*, i8*)* @halide_default_error, align 8
@.str = private unnamed_addr constant [8 x i8] c"Error: \00", align 1
@_ZN6Halide7Runtime8Internal12custom_printE = linkonce local_unnamed_addr global void (i8*, i8*)* @halide_default_print, align 8
@_ZN6Halide7Runtime8Internal29halide_reference_clock_initedE = linkonce local_unnamed_addr global i8 0, align 1
@_ZN6Halide7Runtime8Internal22halide_reference_clockE = linkonce local_unnamed_addr global i64 0, align 8
@_ZN6Halide7Runtime8Internal20halide_timebase_infoE = linkonce global %struct.mach_timebase_info zeroinitializer, align 4
@_ZN6Halide7Runtime8Internal15Synchronization5tableE = linkonce global %"struct.Halide::Runtime::Internal::Synchronization::hash_table" zeroinitializer, align 8
@_ZN6Halide7Runtime8Internal10work_queueE = linkonce global %"struct.Halide::Runtime::Internal::work_queue_t" { %struct.halide_mutex zeroinitializer, i32 0, i32 0, %"struct.Halide::Runtime::Internal::work"* null, i32 0, i32 0, i32 0, [4 x i8] undef, %struct.halide_mutex zeroinitializer, %struct.halide_mutex zeroinitializer, %struct.halide_mutex zeroinitializer, i32 0, i32 0, [256 x %struct.halide_thread*] zeroinitializer, i8 0, i8 0, i32 0 }, align 8
@_ZN6Halide7Runtime8Internal14custom_do_taskE = linkonce local_unnamed_addr global i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* @halide_default_do_task, align 8
@_ZN6Halide7Runtime8Internal19custom_do_loop_taskE = linkonce local_unnamed_addr global i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* @halide_default_do_loop_task, align 8
@_ZN6Halide7Runtime8Internal17custom_do_par_forE = linkonce local_unnamed_addr global i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* @halide_default_do_par_for, align 8
@_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE = linkonce_odr unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (i1 (%"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)* @_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control8validateERNS2_15validate_actionE to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control12before_sleepEv to i8*), i8* bitcast (i64 (%"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"*, i32, i1)* @_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control6unparkEib to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control16requeue_callbackERKNS2_15validate_actionEbb to i8*)] }, align 8
@.str.5 = private unnamed_addr constant [130 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/synchronization_common.h:386 halide_abort_if_false() failed: next != nullptr\0A\00", align 1
@_ZTVN6Halide7Runtime8Internal15Synchronization20wait_parking_controlE = linkonce_odr unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (i1 (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)* @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control8validateERNS2_15validate_actionE to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*)* @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control12before_sleepEv to i8*), i8* bitcast (i64 (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*, i32, i1)* @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control6unparkEib to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control16requeue_callbackERKNS2_15validate_actionEbb to i8*)] }, align 8
@.str.5.6 = private unnamed_addr constant [124 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/synchronization_common.h:994 halide_abort_if_false() failed: val & 0x1\0A\00", align 1
@_ZTVN6Halide7Runtime8Internal15Synchronization25broadcast_parking_controlE = linkonce_odr unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (i1 (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)* @_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control8validateERNS2_15validate_actionE to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control12before_sleepEv to i8*), i8* bitcast (i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control6unparkEib to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)* @_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control16requeue_callbackERKNS2_15validate_actionEbb to i8*)] }, align 8
@.str.6 = private unnamed_addr constant [186 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/thread_pool_common.h:155 halide_abort_if_false() failed: bytes == limit && \22Logic error in thread pool work queue initialization.\\n\22\0A\00", align 1
@.str.3 = private unnamed_addr constant [263 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/thread_pool_common.h:527 halide_abort_if_false() failed: (min_threads <= ((task_parent->task.min_threads * task_parent->active_workers) - task_parent->threads_reserved)) && \22Logic error: thread over commit.\\n\22\0A\00", align 1
@.str.1 = private unnamed_addr constant [15 x i8] c"HL_NUM_THREADS\00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"HL_NUMTHREADS\00", align 1
@_ZN6Halide7Runtime8Internal24custom_do_parallel_tasksE = linkonce local_unnamed_addr global i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)* @halide_default_do_parallel_tasks, align 8
@_ZN6Halide7Runtime8Internal21custom_semaphore_initE = linkonce local_unnamed_addr global i32 (%struct.halide_semaphore_t*, i32)* @halide_default_semaphore_init, align 8
@_ZN6Halide7Runtime8Internal28custom_semaphore_try_acquireE = linkonce local_unnamed_addr global i1 (%struct.halide_semaphore_t*, i32)* @halide_default_semaphore_try_acquire, align 8
@_ZN6Halide7Runtime8Internal24custom_semaphore_releaseE = linkonce local_unnamed_addr global i32 (%struct.halide_semaphore_t*, i32)* @halide_default_semaphore_release, align 8
@llvm.global_dtors = appending global [4 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @halide_thread_pool_cleanup, i8* null }, { i32, void ()*, i8* } { i32 65535, void ()* @halide_trace_cleanup, i8* null }, { i32, void ()*, i8* } { i32 65535, void ()* @halide_cache_cleanup, i8* null }, { i32, void ()*, i8* } { i32 65535, void ()* @halide_profiler_shutdown, i8* null }]
@_ZTVN6Halide7Runtime8Internal15Synchronization22signal_parking_controlE = linkonce_odr unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control8validateERNS2_15validate_actionE to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control12before_sleepEv to i8*), i8* bitcast (i64 (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*, i32, i1)* @_ZN6Halide7Runtime8Internal15Synchronization22signal_parking_control6unparkEib to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control16requeue_callbackERKNS2_15validate_actionEbb to i8*)] }, align 8
@.str.4 = private unnamed_addr constant [38 x i8] c"halide_set_num_threads: must be >= 0.\00", align 1
@_ZN6Halide7Runtime8Internal17custom_get_symbolE = linkonce local_unnamed_addr global i8* (i8*)* @halide_default_get_symbol, align 8
@_ZN6Halide7Runtime8Internal19custom_load_libraryE = linkonce local_unnamed_addr global i8* (i8*)* @halide_default_load_library, align 8
@_ZN6Halide7Runtime8Internal25custom_get_library_symbolE = linkonce local_unnamed_addr global i8* (i8*, i8*)* @halide_default_get_library_symbol, align 8
@_ZN6Halide7Runtime8Internal17halide_gpu_deviceE = linkonce local_unnamed_addr global i32 0, align 4
@_ZN6Halide7Runtime8Internal22halide_gpu_device_lockE = linkonce global i8 0, align 1
@_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE = linkonce local_unnamed_addr global i8 0, align 1
@.str.8 = private unnamed_addr constant [14 x i8] c"HL_GPU_DEVICE\00", align 1
@_ZN6Halide7Runtime8Internal19halide_trace_bufferE = linkonce local_unnamed_addr global %"class.Halide::Runtime::Internal::TraceBuffer"* null, align 8
@_ZN6Halide7Runtime8Internal17halide_trace_fileE = linkonce local_unnamed_addr global i32 -1, align 4
@_ZN6Halide7Runtime8Internal22halide_trace_file_lockE = linkonce global i8 0, align 1
@_ZN6Halide7Runtime8Internal29halide_trace_file_initializedE = linkonce local_unnamed_addr global i8 0, align 1
@_ZN6Halide7Runtime8Internal35halide_trace_file_internally_openedE = linkonce local_unnamed_addr global i8* null, align 8
@_ZN6Halide7Runtime8Internal19halide_custom_traceE = linkonce local_unnamed_addr global i32 (i8*, %struct.halide_trace_event_t*)* @halide_default_trace, align 8
@_ZZ20halide_default_traceE3ids = internal global i32 1, align 4
@.str.32 = private unnamed_addr constant [144 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/tracing.cpp:115 halide_abort_if_false() failed: success && \22Could not write to trace file\22\0A\00", align 1
@.str.31 = private unnamed_addr constant [120 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/tracing.cpp:87 halide_abort_if_false() failed: size <= buffer_size\0A\00", align 1
@.str.1.10 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.2.11 = private unnamed_addr constant [140 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/tracing.cpp:218 halide_abort_if_false() failed: print_bits <= 64 && \22Tracing bad type\22\0A\00", align 1
@__const.halide_default_trace.event_types = private unnamed_addr constant [11 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3.12, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4.13, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.5.14, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.6.15, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.8.16, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.9.17, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i32 0, i32 0)], align 8
@.str.17 = private unnamed_addr constant [2 x i8] c"<\00", align 1
@.str.20 = private unnamed_addr constant [3 x i8] c">)\00", align 1
@.str.18 = private unnamed_addr constant [5 x i8] c">, <\00", align 1
@.str.22 = private unnamed_addr constant [5 x i8] c" = <\00", align 1
@.str.23 = private unnamed_addr constant [4 x i8] c" = \00", align 1
@.str.24 = private unnamed_addr constant [142 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/tracing.cpp:287 halide_abort_if_false() failed: print_bits >= 16 && \22Tracing a bad type\22\0A\00", align 1
@.str.25 = private unnamed_addr constant [2 x i8] c">\00", align 1
@.str.26 = private unnamed_addr constant [9 x i8] c" tag = \22\00", align 1
@.str.27 = private unnamed_addr constant [2 x i8] c"\22\00", align 1
@.str.3.12 = private unnamed_addr constant [5 x i8] c"Load\00", align 1
@.str.4.13 = private unnamed_addr constant [6 x i8] c"Store\00", align 1
@.str.5.14 = private unnamed_addr constant [18 x i8] c"Begin realization\00", align 1
@.str.6.15 = private unnamed_addr constant [16 x i8] c"End realization\00", align 1
@.str.7 = private unnamed_addr constant [8 x i8] c"Produce\00", align 1
@.str.8.16 = private unnamed_addr constant [12 x i8] c"End produce\00", align 1
@.str.9.17 = private unnamed_addr constant [8 x i8] c"Consume\00", align 1
@.str.10 = private unnamed_addr constant [12 x i8] c"End consume\00", align 1
@.str.11 = private unnamed_addr constant [15 x i8] c"Begin pipeline\00", align 1
@.str.12 = private unnamed_addr constant [13 x i8] c"End pipeline\00", align 1
@.str.13 = private unnamed_addr constant [4 x i8] c"Tag\00", align 1
@.str.28 = private unnamed_addr constant [14 x i8] c"HL_TRACE_FILE\00", align 1
@.str.29 = private unnamed_addr constant [3 x i8] c"ab\00", align 1
@.str.30 = private unnamed_addr constant [139 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/tracing.cpp:351 halide_abort_if_false() failed: file && \22Failed to open trace file\\n\22\0A\00", align 1
@_ZN6Halide7Runtime8Internal30pixel_type_to_tiff_sample_typeE = linkonce local_unnamed_addr global [10 x i16] [i16 3, i16 3, i16 1, i16 2, i16 1, i16 2, i16 1, i16 2, i16 1, i16 2], align 2
@_ZN6Halide7Runtime8Internal31pixel_type_to_matlab_class_codeE = linkonce local_unnamed_addr global [10 x i8] c"\07\06\09\08\0B\0A\0D\0C\0F\0E", align 1
@_ZN6Halide7Runtime8Internal30pixel_type_to_matlab_type_codeE = linkonce local_unnamed_addr global [10 x i8] c"\07\09\02\01\04\03\06\05\0D\0C", align 1
@.str.34 = private unnamed_addr constant [51 x i8] c"Bounds query buffer passed to halide_debug_to_file\00", align 1
@.str.1.35 = private unnamed_addr constant [59 x i8] c"Can't debug_to_file a Func with more than four dimensions\0A\00", align 1
@.str.2.36 = private unnamed_addr constant [3 x i8] c"wb\00", align 1
@.str.3.37 = private unnamed_addr constant [6 x i8] c".tiff\00", align 1
@.str.4.38 = private unnamed_addr constant [5 x i8] c".tif\00", align 1
@.str.5.39 = private unnamed_addr constant [5 x i8] c".mat\00", align 1
@__const.halide_debug_to_file.header = private unnamed_addr constant [129 x i8] c"MATLAB 5.0 MAT-file, produced by Halide                                                                                     \00\01IM\00", align 1
@.str.6.40 = private unnamed_addr constant [53 x i8] c"Can't debug_to_file to a .mat file greater than 4GB\0A\00", align 1
@_ZN6Halide7Runtime8Internal16memoization_lockE = linkonce global %struct.halide_mutex zeroinitializer, align 8
@_ZN6Halide7Runtime8Internal13cache_entriesE = linkonce global [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*] zeroinitializer, align 8
@_ZN6Halide7Runtime8Internal18most_recently_usedE = linkonce local_unnamed_addr global %"struct.Halide::Runtime::Internal::CacheEntry"* null, align 8
@_ZN6Halide7Runtime8Internal19least_recently_usedE = linkonce local_unnamed_addr global %"struct.Halide::Runtime::Internal::CacheEntry"* null, align 8
@_ZN6Halide7Runtime8Internal14max_cache_sizeE = linkonce local_unnamed_addr global i64 1048576, align 8
@_ZN6Halide7Runtime8Internal18current_cache_sizeE = linkonce local_unnamed_addr global i64 0, align 8
@.str.2.42 = private unnamed_addr constant [126 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/cache.cpp:284 halide_abort_if_false() failed: prev_hash_entry != nullptr\0A\00", align 1
@.str.3.43 = private unnamed_addr constant [129 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/cache.cpp:373 halide_abort_if_false() failed: entry->more_recent != nullptr\0A\00", align 1
@.str.4.44 = private unnamed_addr constant [128 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/cache.cpp:377 halide_abort_if_false() failed: least_recently_used == entry\0A\00", align 1
@.str.5.45 = private unnamed_addr constant [129 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/cache.cpp:380 halide_abort_if_false() failed: entry->more_recent != nullptr\0A\00", align 1
@.str.9.46 = private unnamed_addr constant [122 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/cache.cpp:472 halide_abort_if_false() failed: no_host_pointers_equal\0A\00", align 1
@.str.12.47 = private unnamed_addr constant [123 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/cache.cpp:550 halide_abort_if_false() failed: entry->in_use_count > 0\0A\00", align 1
@.str.50 = private unnamed_addr constant [10 x i8] c"<nullptr>\00", align 1
@.str.1.57 = private unnamed_addr constant [5 x i8] c"-nan\00", align 1
@.str.2.58 = private unnamed_addr constant [4 x i8] c"nan\00", align 1
@.str.3.59 = private unnamed_addr constant [5 x i8] c"-inf\00", align 1
@.str.4.60 = private unnamed_addr constant [4 x i8] c"inf\00", align 1
@.str.5.61 = private unnamed_addr constant [14 x i8] c"-0.000000e+00\00", align 1
@.str.6.62 = private unnamed_addr constant [13 x i8] c"0.000000e+00\00", align 1
@.str.7.63 = private unnamed_addr constant [10 x i8] c"-0.000000\00", align 1
@.str.8.64 = private unnamed_addr constant [9 x i8] c"0.000000\00", align 1
@.str.9.65 = private unnamed_addr constant [2 x i8] c"-\00", align 1
@.str.11.67 = private unnamed_addr constant [3 x i8] c"e+\00", align 1
@.str.12.68 = private unnamed_addr constant [3 x i8] c"e-\00", align 1
@.str.13.71 = private unnamed_addr constant [17 x i8] c"0123456789abcdef\00", align 1
@.str.18.72 = private unnamed_addr constant [14 x i8] c"bad_type_code\00", align 1
@.str.17.73 = private unnamed_addr constant [7 x i8] c"handle\00", align 1
@.str.16.74 = private unnamed_addr constant [6 x i8] c"float\00", align 1
@.str.15.75 = private unnamed_addr constant [5 x i8] c"uint\00", align 1
@.str.14.76 = private unnamed_addr constant [4 x i8] c"int\00", align 1
@.str.19.77 = private unnamed_addr constant [2 x i8] c"x\00", align 1
@.str.20.78 = private unnamed_addr constant [8 x i8] c"nullptr\00", align 1
@.str.21.79 = private unnamed_addr constant [8 x i8] c"buffer(\00", align 1
@.str.23.82 = private unnamed_addr constant [4 x i8] c", {\00", align 1
@.str.24.83 = private unnamed_addr constant [2 x i8] c"}\00", align 1
@_ZN6Halide7Runtime8Internal36halide_reuse_device_allocations_flagE = linkonce local_unnamed_addr global i8 1, align 1
@_ZN6Halide7Runtime8Internal21allocation_pools_lockE = linkonce global %struct.halide_mutex zeroinitializer, align 8
@_ZN6Halide7Runtime8Internal23device_allocation_poolsE = linkonce local_unnamed_addr global %struct.halide_device_allocation_pool* null, align 8
@_ZN6Halide7Runtime8Internal17device_copy_mutexE = linkonce global %struct.halide_mutex zeroinitializer, align 8
@.str.6.88 = private unnamed_addr constant [20 x i8] c"halide_copy_to_host\00", align 1
@.str.7.89 = private unnamed_addr constant [22 x i8] c"halide_copy_to_device\00", align 1
@.str.9.90 = private unnamed_addr constant [61 x i8] c"halide_copy_to_device does not support switching interfaces\0A\00", align 1
@.str.17.91 = private unnamed_addr constant [21 x i8] c"halide_device_malloc\00", align 1
@.str.20.92 = private unnamed_addr constant [59 x i8] c"halide_device_malloc doesn't support switching interfaces\0A\00", align 1
@.str.16.93 = private unnamed_addr constant [19 x i8] c"halide_device_sync\00", align 1
@.str.21.96 = private unnamed_addr constant [19 x i8] c"halide_device_free\00", align 1
@.str.22.97 = private unnamed_addr constant [127 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/device_interface.cpp:252 halide_abort_if_false() failed: buf->device == 0\0A\00", align 1
@.str.23.98 = private unnamed_addr constant [30 x i8] c"halide_device_and_host_malloc\00", align 1
@.str.25.99 = private unnamed_addr constant [68 x i8] c"halide_device_and_host_malloc doesn't support switching interfaces\0A\00", align 1
@.str.26.100 = private unnamed_addr constant [42 x i8] c"allocating host and device memory failed\0A\00", align 1
@.str.27.101 = private unnamed_addr constant [28 x i8] c"halide_device_and_host_free\00", align 1
@.str.28.102 = private unnamed_addr constant [127 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/device_interface.cpp:317 halide_abort_if_false() failed: buf->device == 0\0A\00", align 1
@.str.29.103 = private unnamed_addr constant [38 x i8] c"halide_default_device_and_host_malloc\00", align 1
@.str.30.104 = private unnamed_addr constant [36 x i8] c"halide_default_device_and_host_free\00", align 1
@.str.31.105 = private unnamed_addr constant [26 x i8] c"halide_device_wrap_native\00", align 1
@.str.32.106 = private unnamed_addr constant [64 x i8] c"halide_device_wrap_native doesn't support switching interfaces\0A\00", align 1
@.str.33.107 = private unnamed_addr constant [28 x i8] c"halide_device_detach_native\00", align 1
@.str.34.108 = private unnamed_addr constant [127 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/device_interface.cpp:403 halide_abort_if_false() failed: buf->device == 0\0A\00", align 1
@.str.35 = private unnamed_addr constant [36 x i8] c"halide_default_device_detach_native\00", align 1
@.str.41 = private unnamed_addr constant [64 x i8] c"halide_buffer_copy does not support switching device interfaces\00", align 1
@.str.58 = private unnamed_addr constant [44 x i8] c"device_interface does not support cropping\0A\00", align 1
@.str.59 = private unnamed_addr constant [43 x i8] c"device_interface does not support slicing\0A\00", align 1
@.str.60 = private unnamed_addr constant [52 x i8] c"destination buffer already has a device allocation\0A\00", align 1
@.str.61 = private unnamed_addr constant [48 x i8] c"src and dst must have identical dimensionality\0A\00", align 1
@.str.64 = private unnamed_addr constant [52 x i8] c"dst must have exactly one fewer dimension than src\0A\00", align 1
@.str.111 = private unnamed_addr constant [41 x i8] c"Bounds inference call to external stage \00", align 1
@.str.1.112 = private unnamed_addr constant [27 x i8] c" returned non-zero value: \00", align 1
@.str.2.113 = private unnamed_addr constant [24 x i8] c"Call to external stage \00", align 1
@.str.3.114 = private unnamed_addr constant [18 x i8] c"Bounds given for \00", align 1
@.str.4.115 = private unnamed_addr constant [5 x i8] c" in \00", align 1
@.str.5.116 = private unnamed_addr constant [8 x i8] c" (from \00", align 1
@.str.6.117 = private unnamed_addr constant [5 x i8] c" to \00", align 1
@.str.7.118 = private unnamed_addr constant [38 x i8] c") do not cover required region (from \00", align 1
@.str.8.119 = private unnamed_addr constant [2 x i8] c")\00", align 1
@.str.9.120 = private unnamed_addr constant [11 x i8] c" has type \00", align 1
@.str.10.121 = private unnamed_addr constant [38 x i8] c" but type of the buffer passed in is \00", align 1
@.str.11.122 = private unnamed_addr constant [31 x i8] c" requires a buffer of exactly \00", align 1
@.str.12.123 = private unnamed_addr constant [43 x i8] c" dimensions, but the buffer passed in has \00", align 1
@.str.13.124 = private unnamed_addr constant [12 x i8] c" dimensions\00", align 1
@.str.14.125 = private unnamed_addr constant [17 x i8] c" is accessed at \00", align 1
@.str.15.126 = private unnamed_addr constant [28 x i8] c", which is before the min (\00", align 1
@.str.16.127 = private unnamed_addr constant [16 x i8] c") in dimension \00", align 1
@.str.17.128 = private unnamed_addr constant [28 x i8] c", which is beyond the max (\00", align 1
@.str.18.129 = private unnamed_addr constant [29 x i8] c"Total allocation for buffer \00", align 1
@.str.19.130 = private unnamed_addr constant [5 x i8] c" is \00", align 1
@.str.20.131 = private unnamed_addr constant [37 x i8] c", which exceeds the maximum size of \00", align 1
@.str.21.132 = private unnamed_addr constant [24 x i8] c"The extents for buffer \00", align 1
@.str.22.133 = private unnamed_addr constant [12 x i8] c" dimension \00", align 1
@.str.23.134 = private unnamed_addr constant [15 x i8] c" is negative (\00", align 1
@.str.24.135 = private unnamed_addr constant [31 x i8] c"Product of extents for buffer \00", align 1
@.str.25.136 = private unnamed_addr constant [29 x i8] c"Applying the constraints on \00", align 1
@.str.26.137 = private unnamed_addr constant [54 x i8] c" to the required region made it smaller in dimension \00", align 1
@.str.27.138 = private unnamed_addr constant [3 x i8] c". \00", align 1
@.str.28.139 = private unnamed_addr constant [16 x i8] c"Required size: \00", align 1
@.str.29.140 = private unnamed_addr constant [19 x i8] c"Constrained size: \00", align 1
@.str.30.141 = private unnamed_addr constant [2 x i8] c".\00", align 1
@.str.31.142 = private unnamed_addr constant [22 x i8] c"Constraint violated: \00", align 1
@.str.32.143 = private unnamed_addr constant [3 x i8] c" (\00", align 1
@.str.33.144 = private unnamed_addr constant [6 x i8] c") == \00", align 1
@.str.34.145 = private unnamed_addr constant [11 x i8] c"Parameter \00", align 1
@.str.35.146 = private unnamed_addr constant [23 x i8] c" but must be at least \00", align 1
@.str.36 = private unnamed_addr constant [22 x i8] c" but must be at most \00", align 1
@.str.37 = private unnamed_addr constant [47 x i8] c"Out of memory (halide_malloc returned nullptr)\00", align 1
@.str.38 = private unnamed_addr constant [17 x i8] c"Buffer argument \00", align 1
@.str.39 = private unnamed_addr constant [12 x i8] c" is nullptr\00", align 1
@.str.40 = private unnamed_addr constant [25 x i8] c"Failed to dump function \00", align 1
@.str.41.147 = private unnamed_addr constant [10 x i8] c" to file \00", align 1
@.str.42 = private unnamed_addr constant [13 x i8] c" with error \00", align 1
@.str.43 = private unnamed_addr constant [21 x i8] c"The host pointer of \00", align 1
@.str.44 = private unnamed_addr constant [22 x i8] c" is not aligned to a \00", align 1
@.str.45 = private unnamed_addr constant [17 x i8] c" bytes boundary.\00", align 1
@.str.46 = private unnamed_addr constant [12 x i8] c"The buffer \00", align 1
@.str.47 = private unnamed_addr constant [53 x i8] c" is dirty on device, but this pipeline was compiled \00", align 1
@.str.48 = private unnamed_addr constant [43 x i8] c"with no support for device to host copies.\00", align 1
@.str.49 = private unnamed_addr constant [55 x i8] c" is null, but the pipeline will access it on the host.\00", align 1
@.str.50.148 = private unnamed_addr constant [30 x i8] c"The folded storage dimension \00", align 1
@.str.51 = private unnamed_addr constant [5 x i8] c" of \00", align 1
@.str.52 = private unnamed_addr constant [36 x i8] c" was accessed out of order by loop \00", align 1
@.str.53 = private unnamed_addr constant [23 x i8] c"Cannot fold dimension \00", align 1
@.str.54 = private unnamed_addr constant [36 x i8] c" because an extern stage accesses [\00", align 1
@.str.55 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.56 = private unnamed_addr constant [3 x i8] c"],\00", align 1
@.str.57 = private unnamed_addr constant [47 x i8] c" which is outside the range currently valid: [\00", align 1
@.str.58.149 = private unnamed_addr constant [3 x i8] c"].\00", align 1
@.str.59.150 = private unnamed_addr constant [47 x i8] c" which wraps around the boundary of the fold, \00", align 1
@.str.60.151 = private unnamed_addr constant [30 x i8] c"which occurs at multiples of \00", align 1
@.str.61.152 = private unnamed_addr constant [18 x i8] c"The fold factor (\00", align 1
@.str.62 = private unnamed_addr constant [16 x i8] c") of dimension \00", align 1
@.str.63 = private unnamed_addr constant [61 x i8] c" is too small to store the required region accessed by loop \00", align 1
@.str.64.153 = private unnamed_addr constant [3 x i8] c").\00", align 1
@.str.65 = private unnamed_addr constant [22 x i8] c"Requirement Failed: (\00", align 1
@.str.66 = private unnamed_addr constant [3 x i8] c") \00", align 1
@.str.67 = private unnamed_addr constant [59 x i8] c"A schedule specialized with specialize_fail() was chosen: \00", align 1
@.str.68 = private unnamed_addr constant [55 x i8] c"Buffer has a non-zero device but no device interface.\0A\00", align 1
@.str.69 = private unnamed_addr constant [57 x i8] c"Buffer has a non-null device_interface but device is 0.\0A\00", align 1
@.str.70 = private unnamed_addr constant [49 x i8] c"Buffer has both host and device dirty bits set.\0A\00", align 1
@.str.71 = private unnamed_addr constant [26 x i8] c"Buffer pointer passed to \00", align 1
@.str.72 = private unnamed_addr constant [11 x i8] c" is null.\0A\00", align 1
@.str.73 = private unnamed_addr constant [32 x i8] c"The explicit allocation bound (\00", align 1
@.str.74 = private unnamed_addr constant [45 x i8] c" is too small to store the required region (\00", align 1
@.str.75 = private unnamed_addr constant [77 x i8] c"Buffer could not be cropped (runtime error or unimplemented device option).\0A\00", align 1
@.str.29.163 = private unnamed_addr constant [35 x i8] c"Printer buffer allocation failed.\0A\00", align 1
@.str.7.164 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.8.165 = private unnamed_addr constant [14 x i8] c" total time: \00", align 1
@.str.9.166 = private unnamed_addr constant [4 x i8] c" ms\00", align 1
@.str.10.167 = private unnamed_addr constant [12 x i8] c"  samples: \00", align 1
@.str.11.168 = private unnamed_addr constant [9 x i8] c"  runs: \00", align 1
@.str.12.169 = private unnamed_addr constant [13 x i8] c"  time/run: \00", align 1
@.str.13.170 = private unnamed_addr constant [5 x i8] c" ms\0A\00", align 1
@.str.14.171 = private unnamed_addr constant [24 x i8] c" average threads used: \00", align 1
@.str.15.172 = private unnamed_addr constant [20 x i8] c" heap allocations: \00", align 1
@.str.16.173 = private unnamed_addr constant [20 x i8] c"  peak heap usage: \00", align 1
@.str.17.174 = private unnamed_addr constant [8 x i8] c" bytes\0A\00", align 1
@.str.18.175 = private unnamed_addr constant [3 x i8] c"  \00", align 1
@.str.19.176 = private unnamed_addr constant [3 x i8] c": \00", align 1
@.str.20.177 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.21.178 = private unnamed_addr constant [3 x i8] c"ms\00", align 1
@.str.22.179 = private unnamed_addr constant [2 x i8] c"(\00", align 1
@.str.23.180 = private unnamed_addr constant [3 x i8] c"%)\00", align 1
@.str.24.181 = private unnamed_addr constant [10 x i8] c"threads: \00", align 1
@.str.25.182 = private unnamed_addr constant [8 x i8] c" peak: \00", align 1
@.str.26.183 = private unnamed_addr constant [7 x i8] c" num: \00", align 1
@.str.27.184 = private unnamed_addr constant [7 x i8] c" avg: \00", align 1
@.str.28.185 = private unnamed_addr constant [9 x i8] c" stack: \00", align 1
@_ZZ25halide_profiler_get_stateE1s = internal global %struct.halide_profiler_state { %struct.halide_mutex zeroinitializer, i32 1, i32 0, i32 0, i32 0, %struct.halide_profiler_pipeline_stats* null, void (i32*, i32*)* null, %struct.halide_thread* null }, align 8
@.str.186 = private unnamed_addr constant [128 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:246 halide_abort_if_false() failed: p_stats != nullptr\0A\00", align 1
@.str.1.187 = private unnamed_addr constant [128 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:273 halide_abort_if_false() failed: p_stats != nullptr\0A\00", align 1
@.str.2.188 = private unnamed_addr constant [122 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:274 halide_abort_if_false() failed: func_id >= 0\0A\00", align 1
@.str.3.189 = private unnamed_addr constant [138 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:275 halide_abort_if_false() failed: func_id < p_stats->num_funcs\0A\00", align 1
@.str.4.190 = private unnamed_addr constant [128 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:309 halide_abort_if_false() failed: p_stats != nullptr\0A\00", align 1
@.str.5.191 = private unnamed_addr constant [122 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:310 halide_abort_if_false() failed: func_id >= 0\0A\00", align 1
@.str.6.192 = private unnamed_addr constant [138 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:311 halide_abort_if_false() failed: func_id < p_stats->num_funcs\0A\00", align 1
@_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE = linkonce local_unnamed_addr global i32 (i32, i64*)* @halide_default_can_use_target_features, align 8
@_ZN6Halide7Runtime8Internal36halide_cpu_features_initialized_lockE = linkonce global %struct.halide_mutex zeroinitializer, align 8
@_ZN6Halide7Runtime8Internal31halide_cpu_features_initializedE = linkonce local_unnamed_addr global i8 0, align 1
@_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE = linkonce global [4 x i64] zeroinitializer, align 8
@.str.197 = private unnamed_addr constant [81 x i8] c"Internal error: wrong structure size passed to halide_can_use_target_features()\0A\00", align 1
@0 = private constant i64 0
@1 = private constant i64 0
@2 = private constant [4 x i64*] [i64* @0, i64* null, i64* @1, i64* null]
@str = private constant [6 x i8] c"input\00", align 32
@3 = private constant [4 x i64*] zeroinitializer
@str.200 = private constant [7 x i8] c"output\00", align 32
@4 = private constant [2 x %struct.halide_filter_argument_t] [%struct.halide_filter_argument_t { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str, i32 0, i32 0), i32 1, i32 2, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** getelementptr inbounds ([4 x i64*], [4 x i64*]* @2, i32 0, i32 0) }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str.200, i32 0, i32 0), i32 2, i32 2, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** getelementptr inbounds ([4 x i64*], [4 x i64*]* @3, i32 0, i32 0) }]
@str.201 = private constant [38 x i8] c"arm-64-osx-no_asserts-no_bounds_query\00", align 32
@str.202 = private constant [9 x i8] c"sobel5x5\00", align 32
@sobel5x5_metadata_storage = private constant %struct.halide_filter_metadata_t { i32 1, i32 2, %struct.halide_filter_argument_t* getelementptr inbounds ([2 x %struct.halide_filter_argument_t], [2 x %struct.halide_filter_argument_t]* @4, i32 0, i32 0), i8* getelementptr inbounds ([38 x i8], [38 x i8]* @str.201, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @str.202, i32 0, i32 0) }
@switch.table.halide_type_to_string = private unnamed_addr constant [4 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14.76, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.15.75, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.16.74, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.17.73, i64 0, i64 0)], align 8

; Function Attrs: nounwind mustprogress
define weak i8* @halide_default_malloc(i8* %user_context, i64 %x) #0 {
entry:
  %add = add i64 %x, 32
  %call1 = tail call i8* @malloc(i64 %add) #15
  %cmp = icmp eq i8* %call1, null
  br i1 %cmp, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %0 = ptrtoint i8* %call1 to i64
  %sub = add i64 %0, 39
  %and = and i64 %sub, -32
  %1 = inttoptr i64 %and to i8*
  %2 = inttoptr i64 %and to i8**
  %arrayidx = getelementptr inbounds i8*, i8** %2, i64 -1
  store i8* %call1, i8** %arrayidx, align 8, !tbaa !14
  br label %cleanup

cleanup:                                          ; preds = %if.end, %entry
  %retval.0 = phi i8* [ %1, %if.end ], [ null, %entry ]
  ret i8* %retval.0
}

declare i8* @malloc(i64) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_default_free(i8* %user_context, i8* %ptr) #0 {
entry:
  %arrayidx = getelementptr inbounds i8, i8* %ptr, i64 -8
  %0 = bitcast i8* %arrayidx to i8**
  %1 = load i8*, i8** %0, align 8, !tbaa !14
  tail call void @free(i8* %1) #15
  ret void
}

declare void @free(i8*) local_unnamed_addr #1

; Function Attrs: nounwind willreturn mustprogress
define weak i8* (i8*, i64)* @halide_set_custom_malloc(i8* (i8*, i64)* %user_malloc) local_unnamed_addr #2 {
entry:
  %0 = load i8* (i8*, i64)*, i8* (i8*, i64)** @_ZN6Halide7Runtime8Internal13custom_mallocE, align 8, !tbaa !14
  store i8* (i8*, i64)* %user_malloc, i8* (i8*, i64)** @_ZN6Halide7Runtime8Internal13custom_mallocE, align 8, !tbaa !14
  ret i8* (i8*, i64)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak void (i8*, i8*)* @halide_set_custom_free(void (i8*, i8*)* %user_free) local_unnamed_addr #2 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal11custom_freeE, align 8, !tbaa !14
  store void (i8*, i8*)* %user_free, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal11custom_freeE, align 8, !tbaa !14
  ret void (i8*, i8*)* %0
}

; Function Attrs: nounwind mustprogress
define weak noalias i8* @halide_malloc(i8* %user_context, i64 %x) local_unnamed_addr #0 {
entry:
  %0 = load i8* (i8*, i64)*, i8* (i8*, i64)** @_ZN6Halide7Runtime8Internal13custom_mallocE, align 8, !tbaa !14
  %call = tail call i8* %0(i8* %user_context, i64 %x) #15
  ret i8* %call
}

; Function Attrs: nounwind mustprogress
define weak void @halide_free(i8* %user_context, i8* %ptr) local_unnamed_addr #0 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal11custom_freeE, align 8, !tbaa !14
  tail call void %0(i8* %user_context, i8* %ptr) #15
  ret void
}

; Function Attrs: nounwind mustprogress
define weak void @halide_default_error(i8* %user_context, i8* %msg) #0 {
entry:
  %buf = alloca [4096 x i8], align 1
  %0 = getelementptr inbounds [4096 x i8], [4096 x i8]* %buf, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %0) #12
  %add.ptr = getelementptr inbounds [4096 x i8], [4096 x i8]* %buf, i64 0, i64 4094
  %call = call i8* @halide_string_to_string(i8* nonnull %0, i8* nonnull %add.ptr, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0)) #15
  %add.ptr2 = getelementptr inbounds i8, i8* %call, i64 4094
  %call3 = call i8* @halide_string_to_string(i8* %call, i8* nonnull %add.ptr2, i8* %msg) #15
  %arrayidx = getelementptr inbounds i8, i8* %call3, i64 -1
  %1 = load i8, i8* %arrayidx, align 1, !tbaa !18
  %cmp.not = icmp eq i8 %1, 10
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i8 10, i8* %call3, align 1, !tbaa !18
  %arrayidx5 = getelementptr inbounds i8, i8* %call3, i64 1
  store i8 0, i8* %arrayidx5, align 1, !tbaa !18
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %dst.0 = phi i8* [ %arrayidx5, %if.then ], [ %call3, %entry ]
  %sub.ptr.lhs.cast = ptrtoint i8* %dst.0 to i64
  %sub.ptr.rhs.cast = ptrtoint [4096 x i8]* %buf to i64
  %sub.ptr.sub = sub i64 1, %sub.ptr.rhs.cast
  %add = add i64 %sub.ptr.sub, %sub.ptr.lhs.cast
  %call9 = call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %0, i64 %add) #15
  call void @halide_print(i8* %user_context, i8* nonnull %0) #15
  call void @abort() #15
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %0) #12
  ret void
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

declare void @abort() local_unnamed_addr #1

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind mustprogress
define weak void @halide_error(i8* %user_context, i8* %msg) local_unnamed_addr #0 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal13error_handlerE, align 8, !tbaa !14
  tail call void %0(i8* %user_context, i8* %msg) #15
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void (i8*, i8*)* @halide_set_error_handler(void (i8*, i8*)* %handler) local_unnamed_addr #2 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal13error_handlerE, align 8, !tbaa !14
  store void (i8*, i8*)* %handler, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal13error_handlerE, align 8, !tbaa !14
  ret void (i8*, i8*)* %0
}

; Function Attrs: nounwind mustprogress
define weak void @halide_print(i8* %user_context, i8* %msg) local_unnamed_addr #0 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal12custom_printE, align 8, !tbaa !14
  tail call void %0(i8* %user_context, i8* %msg) #15
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void (i8*, i8*)* @halide_set_custom_print(void (i8*, i8*)* %print) local_unnamed_addr #2 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal12custom_printE, align 8, !tbaa !14
  store void (i8*, i8*)* %print, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal12custom_printE, align 8, !tbaa !14
  ret void (i8*, i8*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_start_clock(i8* %user_context) local_unnamed_addr #0 {
entry:
  %0 = load i8, i8* @_ZN6Halide7Runtime8Internal29halide_reference_clock_initedE, align 1, !tbaa !19, !range !21
  %tobool.not = icmp eq i8 %0, 0
  br i1 %tobool.not, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = tail call i32 @mach_timebase_info(%struct.mach_timebase_info* nonnull @_ZN6Halide7Runtime8Internal20halide_timebase_infoE) #15
  %call1 = tail call i64 @mach_absolute_time() #15
  store i64 %call1, i64* @_ZN6Halide7Runtime8Internal22halide_reference_clockE, align 8, !tbaa !22
  store i8 1, i8* @_ZN6Halide7Runtime8Internal29halide_reference_clock_initedE, align 1, !tbaa !19
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i32 0
}

declare i32 @mach_timebase_info(%struct.mach_timebase_info*) local_unnamed_addr #1

declare i64 @mach_absolute_time() local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i64 @halide_current_time_ns(i8* %user_context) local_unnamed_addr #0 {
entry:
  %call = tail call i64 @mach_absolute_time() #15
  %0 = load i64, i64* @_ZN6Halide7Runtime8Internal22halide_reference_clockE, align 8, !tbaa !22
  %sub = sub i64 %call, %0
  %1 = load i32, i32* getelementptr inbounds (%struct.mach_timebase_info, %struct.mach_timebase_info* @_ZN6Halide7Runtime8Internal20halide_timebase_infoE, i64 0, i32 0), align 4, !tbaa !24
  %conv = zext i32 %1 to i64
  %mul = mul i64 %sub, %conv
  %2 = load i32, i32* getelementptr inbounds (%struct.mach_timebase_info, %struct.mach_timebase_info* @_ZN6Halide7Runtime8Internal20halide_timebase_infoE, i64 0, i32 1), align 4, !tbaa !27
  %conv1 = zext i32 %2 to i64
  %div = udiv i64 %mul, %conv1
  ret i64 %div
}

; Function Attrs: nounwind mustprogress
define weak void @halide_sleep_ms(i8* %user_context, i32 %ms) local_unnamed_addr #0 {
entry:
  %mul = mul nsw i32 %ms, 1000
  %call = tail call i32 @usleep(i32 %mul) #15
  ret void
}

declare i32 @usleep(i32) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_default_print(i8* %user_context, i8* %str) #0 {
entry:
  %call = tail call i64 @strlen(i8* %str) #15
  %call1 = tail call i64 @write(i32 1, i8* %str, i64 %call) #15
  ret void
}

declare i64 @strlen(i8*) local_unnamed_addr #1

declare i64 @write(i32, i8*, i64) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i32 @halide_host_cpu_count() local_unnamed_addr #0 {
entry:
  %call = tail call i64 @sysconf(i32 58) #15
  %conv = trunc i64 %call to i32
  ret i32 %conv
}

declare i64 @sysconf(i32) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_thread_yield() local_unnamed_addr #0 {
entry:
  %call = tail call i32 @swtch_pri(i32 0) #15
  ret void
}

declare i32 @swtch_pri(i32) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_task(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %idx, i8* %closure) #0 {
entry:
  %call = tail call i32 %f(i8* %user_context, i32 %idx, i8* %closure) #15
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_loop_task(i8* %user_context, i32 (i8*, i32, i32, i8*, i8*)* %f, i32 %min, i32 %extent, i8* %closure, i8* %task_parent) #0 {
entry:
  %call = tail call i32 %f(i8* %user_context, i32 %min, i32 %extent, i8* %closure, i8* %task_parent) #15
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_par_for(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %min, i32 %size, i8* %closure) #0 {
entry:
  %job = alloca %"struct.Halide::Runtime::Internal::work", align 8
  %cmp = icmp slt i32 %size, 1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %0 = bitcast %"struct.Halide::Runtime::Internal::work"* %job to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %0) #12
  %fn = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 0
  store i32 (i8*, i32, i32, i8*, i8*)* null, i32 (i8*, i32, i32, i8*, i8*)** %fn, align 8, !tbaa !28
  %min2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 5
  store i32 %min, i32* %min2, align 4, !tbaa !31
  %extent = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 6
  store i32 %size, i32* %extent, align 8, !tbaa !32
  %serial = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 8
  store i8 0, i8* %serial, align 8, !tbaa !33
  %semaphores = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 3
  store %struct.halide_semaphore_acquire_t* null, %struct.halide_semaphore_acquire_t** %semaphores, align 8, !tbaa !34
  %num_semaphores = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 4
  store i32 0, i32* %num_semaphores, align 8, !tbaa !35
  %closure8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 1
  store i8* %closure, i8** %closure8, align 8, !tbaa !36
  %min_threads = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 7
  store i32 0, i32* %min_threads, align 4, !tbaa !37
  %name = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 2
  store i8* null, i8** %name, align 8, !tbaa !38
  %task_fn = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 1
  store i32 (i8*, i32, i8*)* %f, i32 (i8*, i32, i8*)** %task_fn, align 8, !tbaa !39
  %user_context11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 7
  store i8* %user_context, i8** %user_context11, align 8, !tbaa !40
  %exit_status = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 9
  %active_workers = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 8
  %1 = bitcast i32* %active_workers to <2 x i32>*
  store <2 x i32> zeroinitializer, <2 x i32>* %1, align 8, !tbaa !41
  %next_semaphore = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 10
  store i32 0, i32* %next_semaphore, align 8, !tbaa !42
  %owner_is_sleeping = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 11
  store i8 0, i8* %owner_is_sleeping, align 4, !tbaa !43
  %siblings = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 3
  store %"struct.Halide::Runtime::Internal::work"* %job, %"struct.Halide::Runtime::Internal::work"** %siblings, align 8, !tbaa !44
  %sibling_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 4
  store i32 0, i32* %sibling_count, align 8, !tbaa !45
  %parent_job = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 5
  store %"struct.Halide::Runtime::Internal::work"* null, %"struct.Halide::Runtime::Internal::work"** %parent_job, align 8, !tbaa !46
  call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #16
  call void @_ZN6Halide7Runtime8Internal27enqueue_work_already_lockedEiPNS1_4workES3_(i32 1, %"struct.Halide::Runtime::Internal::work"* nonnull %job, %"struct.Halide::Runtime::Internal::work"* null) #16
  call void @_ZN6Halide7Runtime8Internal28worker_thread_already_lockedEPNS1_4workE(%"struct.Halide::Runtime::Internal::work"* nonnull %job) #16
  call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #16
  %2 = load i32, i32* %exit_status, align 4, !tbaa !47
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %0) #12
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i32 [ %2, %if.end ], [ 0, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind
define weak void @halide_mutex_lock(%struct.halide_mutex* %mutex) local_unnamed_addr #4 {
entry:
  %control.i.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", align 8
  %state.i = getelementptr %struct.halide_mutex, %struct.halide_mutex* %mutex, i64 0, i32 0, i64 0
  %0 = cmpxchg weak i64* %state.i, i64 0, i64 1 acquire monotonic
  %1 = extractvalue { i64, i1 } %0, 1
  br i1 %1, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex4lockEv.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %2 = load atomic i64, i64* %state.i monotonic, align 8
  %3 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i to i8*
  %4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0, i32 0
  %lock_state2.i.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 1
  %5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0
  %6 = ptrtoint %struct.halide_mutex* %mutex to i64
  br label %while.cond.outer.i.i

while.cond.outer.i.i:                             ; preds = %while.cond.outer.i.i.backedge, %if.then.i
  %expected.0.ph.i.i = phi i64 [ %2, %if.then.i ], [ %expected.0.ph.i.i.be, %while.cond.outer.i.i.backedge ]
  %spinner.sroa.0.0.ph.i.i = phi i32 [ 40, %if.then.i ], [ %spinner.sroa.0.0.ph.i.i.be, %while.cond.outer.i.i.backedge ]
  %and55.i.i = and i64 %expected.0.ph.i.i, 1
  %tobool.not56.i.i = icmp eq i64 %and55.i.i, 0
  br i1 %tobool.not56.i.i, label %if.then.i.i, label %if.end4.i.i

if.then.i.i:                                      ; preds = %while.cond.outer.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i
  %expected.057.i.i = phi i64 [ %9, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i ], [ %expected.0.ph.i.i, %while.cond.outer.i.i ]
  %or.i.i = or i64 %expected.057.i.i, 1
  %7 = cmpxchg weak i64* %state.i, i64 %expected.057.i.i, i64 %or.i.i acquire monotonic
  %8 = extractvalue { i64, i1 } %7, 1
  br i1 %8, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex4lockEv.exit, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i: ; preds = %if.then.i.i
  %9 = extractvalue { i64, i1 } %7, 0
  %and.i.i = and i64 %9, 1
  %tobool.not.i.i = icmp eq i64 %and.i.i, 0
  br i1 %tobool.not.i.i, label %if.then.i.i, label %if.end4.i.i.loopexit

if.end4.i.i.loopexit:                             ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i
  %10 = extractvalue { i64, i1 } %7, 0
  br label %if.end4.i.i

if.end4.i.i:                                      ; preds = %if.end4.i.i.loopexit, %while.cond.outer.i.i
  %expected.0.lcssa.i.i = phi i64 [ %expected.0.ph.i.i, %while.cond.outer.i.i ], [ %10, %if.end4.i.i.loopexit ]
  %cmp.i.i.i = icmp sgt i32 %spinner.sroa.0.0.ph.i.i, 0
  br i1 %cmp.i.i.i, label %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i, label %if.end8.i.i

_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i: ; preds = %if.end4.i.i
  %cmp4.i.not.i.i = icmp eq i32 %spinner.sroa.0.0.ph.i.i, 1
  br i1 %cmp4.i.not.i.i, label %if.end8.i.i, label %if.then6.i.i

if.then6.i.i:                                     ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i
  %dec.i.i.i = add nsw i32 %spinner.sroa.0.0.ph.i.i, -1
  call void @halide_thread_yield() #15
  %11 = load atomic i64, i64* %state.i monotonic, align 8
  br label %while.cond.outer.i.i.backedge

if.end8.i.i:                                      ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i, %if.end4.i.i
  %spinner.sroa.0.152.i.i = phi i32 [ 0, %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i ], [ %spinner.sroa.0.0.ph.i.i, %if.end4.i.i ]
  %and9.i.i = and i64 %expected.0.lcssa.i.i, 2
  %cmp.i.i = icmp eq i64 %and9.i.i, 0
  br i1 %cmp.i.i, label %if.then10.i.i, label %if.end19.i.i

if.then10.i.i:                                    ; preds = %if.end8.i.i
  %or12.i.i = or i64 %expected.0.lcssa.i.i, 2
  %12 = cmpxchg weak i64* %state.i, i64 %expected.0.lcssa.i.i, i64 %or12.i.i monotonic monotonic
  %13 = extractvalue { i64, i1 } %12, 1
  br i1 %13, label %if.end19.i.i, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i: ; preds = %if.then10.i.i
  %14 = extractvalue { i64, i1 } %12, 0
  br label %while.cond.outer.i.i.backedge

if.end19.i.i:                                     ; preds = %if.then10.i.i, %if.end8.i.i
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %3) #12
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8, !tbaa !48
  store i64* %state.i, i64** %lock_state2.i.i.i, align 8, !tbaa !50
  %call21.i.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control4parkEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %5, i64 %6) #15
  %cmp22.i.i = icmp eq i64 %call21.i.i, %6
  br i1 %cmp22.i.i, label %cleanup30.critedge.i.i, label %if.end24.i.i

if.end24.i.i:                                     ; preds = %if.end19.i.i
  %15 = load atomic i64, i64* %state.i monotonic, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %3) #12
  br label %while.cond.outer.i.i.backedge

while.cond.outer.i.i.backedge:                    ; preds = %if.end24.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i, %if.then6.i.i
  %expected.0.ph.i.i.be = phi i64 [ %14, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i ], [ %15, %if.end24.i.i ], [ %11, %if.then6.i.i ]
  %spinner.sroa.0.0.ph.i.i.be = phi i32 [ %spinner.sroa.0.152.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i ], [ 40, %if.end24.i.i ], [ %dec.i.i.i, %if.then6.i.i ]
  br label %while.cond.outer.i.i

cleanup30.critedge.i.i:                           ; preds = %if.end19.i.i
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %3) #12
  br label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex4lockEv.exit

_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex4lockEv.exit: ; preds = %if.then.i.i, %cleanup30.critedge.i.i, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal27enqueue_work_already_lockedEiPNS1_4workES3_(i32 %num_jobs, %"struct.Halide::Runtime::Internal::work"* %jobs, %"struct.Halide::Runtime::Internal::work"* %task_parent) local_unnamed_addr #0 {
entry:
  %0 = load i8, i8* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 15), align 1, !tbaa !52, !range !21
  %tobool.not = icmp eq i8 %0, 0
  br i1 %tobool.not, label %land.rhs.i, label %if.end4

land.rhs.i:                                       ; preds = %entry, %while.body.i
  %bytes.011.i = phi i8* [ %incdec.ptr.i, %while.body.i ], [ bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), %entry ]
  %1 = load i8, i8* %bytes.011.i, align 1, !tbaa !18
  %cmp2.i = icmp eq i8 %1, 0
  br i1 %cmp2.i, label %while.body.i, label %do.body.i

while.body.i:                                     ; preds = %land.rhs.i
  %incdec.ptr.i = getelementptr inbounds i8, i8* %bytes.011.i, i64 1
  %exitcond.not.i = icmp eq i8* %incdec.ptr.i, bitcast (%"struct.Halide::Runtime::Internal::work_queue_t"* select (i1 icmp ugt (i8* bitcast (%"struct.Halide::Runtime::Internal::work_queue_t"* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 1) to i8*), i8* getelementptr (i8, i8* bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), i64 1)), %"struct.Halide::Runtime::Internal::work_queue_t"* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 1), %"struct.Halide::Runtime::Internal::work_queue_t"* bitcast (i8* getelementptr (i8, i8* bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), i64 1) to %"struct.Halide::Runtime::Internal::work_queue_t"*)) to i8*)
  br i1 %exitcond.not.i, label %do.body.i, label %land.rhs.i, !llvm.loop !56

do.body.i:                                        ; preds = %while.body.i, %land.rhs.i
  %bytes.0.lcssa.i = phi i8* [ %bytes.011.i, %land.rhs.i ], [ bitcast (%"struct.Halide::Runtime::Internal::work_queue_t"* select (i1 icmp ugt (i8* bitcast (%"struct.Halide::Runtime::Internal::work_queue_t"* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 1) to i8*), i8* getelementptr (i8, i8* bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), i64 1)), %"struct.Halide::Runtime::Internal::work_queue_t"* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 1), %"struct.Halide::Runtime::Internal::work_queue_t"* bitcast (i8* getelementptr (i8, i8* bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), i64 1) to %"struct.Halide::Runtime::Internal::work_queue_t"*)) to i8*), %while.body.i ]
  %cmp3.i = icmp eq i8* %bytes.0.lcssa.i, bitcast (%"struct.Halide::Runtime::Internal::work_queue_t"* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 1) to i8*)
  br i1 %cmp3.i, label %_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit, label %if.then.i

if.then.i:                                        ; preds = %do.body.i
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.6, i64 0, i64 0)) #15
  tail call void @abort() #15
  br label %_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit

_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit: ; preds = %if.then.i, %do.body.i
  %2 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !58
  %tobool1.not = icmp eq i32 %2, 0
  br i1 %tobool1.not, label %if.then2, label %if.end

if.then2:                                         ; preds = %_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit
  %call = tail call i32 @_ZN6Halide7Runtime8Internal27default_desired_num_threadsEv() #16
  br label %if.end

if.end:                                           ; preds = %if.then2, %_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit
  %3 = phi i32 [ %call, %if.then2 ], [ %2, %_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit ]
  %4 = icmp sgt i32 %3, 1
  %spec.select.i = select i1 %4, i32 %3, i32 1
  %5 = icmp slt i32 %spec.select.i, 256
  %call3176 = select i1 %5, i32 %spec.select.i, i32 256
  store i32 %call3176, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !58
  store i8 1, i8* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 15), align 1, !tbaa !52
  br label %if.end4

if.end4:                                          ; preds = %if.end, %entry
  %cmp181 = icmp sgt i32 %num_jobs, 0
  br i1 %cmp181, label %for.body.preheader, label %for.cond.cleanup

for.body.preheader:                               ; preds = %if.end4
  %wide.trip.count = zext i32 %num_jobs to i64
  br label %for.body

for.cond.cleanup.loopexit:                        ; preds = %for.inc
  %phi.bo = and i8 %stealable_jobs.1, 1
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %if.end4
  %workers_to_wake.0.lcssa = phi i32 [ -1, %if.end4 ], [ %workers_to_wake.1, %for.cond.cleanup.loopexit ]
  %stealable_jobs.0.lcssa = phi i8 [ 0, %if.end4 ], [ %phi.bo, %for.cond.cleanup.loopexit ]
  %job_has_acquires.0.lcssa = phi i8 [ 0, %if.end4 ], [ %spec.select, %for.cond.cleanup.loopexit ]
  %job_may_block.0.lcssa = phi i8 [ 0, %if.end4 ], [ %job_may_block.1, %for.cond.cleanup.loopexit ]
  %min_threads.0.lcssa = phi i32 [ 0, %if.end4 ], [ %add, %for.cond.cleanup.loopexit ]
  %cmp31 = icmp eq %"struct.Halide::Runtime::Internal::work"* %task_parent, null
  br i1 %cmp31, label %if.then32, label %do.body61

for.body:                                         ; preds = %for.inc, %for.body.preheader
  %indvars.iv193 = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next194, %for.inc ]
  %min_threads.0187 = phi i32 [ 0, %for.body.preheader ], [ %add, %for.inc ]
  %job_may_block.0185 = phi i8 [ 0, %for.body.preheader ], [ %job_may_block.1, %for.inc ]
  %job_has_acquires.0184 = phi i8 [ 0, %for.body.preheader ], [ %spec.select, %for.inc ]
  %stealable_jobs.0183 = phi i8 [ 0, %for.body.preheader ], [ %stealable_jobs.1, %for.inc ]
  %workers_to_wake.0182 = phi i32 [ -1, %for.body.preheader ], [ %workers_to_wake.1, %for.inc ]
  %min_threads5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193, i32 0, i32 7
  %6 = load i32, i32* %min_threads5, align 4, !tbaa !37
  %cmp6 = icmp eq i32 %6, 0
  %add = add i32 %6, %min_threads.0187
  %stealable_jobs.1 = select i1 %cmp6, i8 1, i8 %stealable_jobs.0183
  %job_may_block.1 = select i1 %cmp6, i8 %job_may_block.0185, i8 1
  %num_semaphores = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193, i32 0, i32 4
  %7 = load i32, i32* %num_semaphores, align 8, !tbaa !35
  %cmp16.not = icmp eq i32 %7, 0
  %spec.select = select i1 %cmp16.not, i8 %job_has_acquires.0184, i8 1
  %serial = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193, i32 0, i32 8
  %8 = load i8, i8* %serial, align 8, !tbaa !33, !range !21
  %tobool22.not = icmp eq i8 %8, 0
  br i1 %tobool22.not, label %if.else24, label %if.then23

if.then23:                                        ; preds = %for.body
  %inc = add nsw i32 %workers_to_wake.0182, 1
  br label %for.inc

if.else24:                                        ; preds = %for.body
  %extent = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193, i32 0, i32 6
  %9 = load i32, i32* %extent, align 8, !tbaa !32
  %add28 = add nsw i32 %9, %workers_to_wake.0182
  br label %for.inc

for.inc:                                          ; preds = %if.else24, %if.then23
  %workers_to_wake.1 = phi i32 [ %inc, %if.then23 ], [ %add28, %if.else24 ]
  %indvars.iv.next194 = add nuw nsw i64 %indvars.iv193, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next194, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.cleanup.loopexit, label %for.body, !llvm.loop !59

if.then32:                                        ; preds = %for.cond.cleanup
  %10 = or i8 %job_may_block.0.lcssa, %job_has_acquires.0.lcssa
  %11 = and i8 %10, 1
  %12 = icmp eq i8 %11, 0
  %not. = xor i1 %12, true
  %add36 = zext i1 %not. to i32
  %min_threads.2 = add nsw i32 %min_threads.0.lcssa, %add36
  %13 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !60
  %cmp38180 = icmp slt i32 %13, 256
  br i1 %cmp38180, label %land.rhs, label %do.end50

land.rhs:                                         ; preds = %if.then32, %while.body
  %14 = phi i32 [ %inc45, %while.body ], [ %13, %if.then32 ]
  %15 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !58
  %sub = add nsw i32 %15, -1
  %cmp39 = icmp slt i32 %14, %sub
  br i1 %cmp39, label %while.body, label %lor.rhs

lor.rhs:                                          ; preds = %land.rhs
  %add40 = add nsw i32 %14, 1
  %16 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !61
  %sub41 = sub i32 %add40, %16
  %cmp42 = icmp slt i32 %sub41, %min_threads.2
  br i1 %cmp42, label %while.body, label %do.end50

while.body:                                       ; preds = %lor.rhs, %land.rhs
  %17 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !62
  %inc43 = add nsw i32 %17, 1
  store i32 %inc43, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !62
  %call44 = tail call %struct.halide_thread* @halide_spawn_thread(void (i8*)* nonnull @_ZN6Halide7Runtime8Internal13worker_threadEPv, i8* null) #16
  %18 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !60
  %inc45 = add nsw i32 %18, 1
  store i32 %inc45, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !60
  %idxprom46 = sext i32 %18 to i64
  %arrayidx47 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 13, i64 %idxprom46
  store %struct.halide_thread* %call44, %struct.halide_thread** %arrayidx47, align 8, !tbaa !14
  %cmp38 = icmp slt i32 %18, 255
  br i1 %cmp38, label %land.rhs, label %do.end50, !llvm.loop !63

do.end50:                                         ; preds = %while.body, %lor.rhs, %if.then32
  br i1 %12, label %if.end77, label %if.then54

if.then54:                                        ; preds = %do.end50
  %19 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !61
  %inc55 = add nsw i32 %19, 1
  store i32 %inc55, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !61
  br label %if.end77

do.body61:                                        ; preds = %for.cond.cleanup
  %min_threads63 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %task_parent, i64 0, i32 0, i32 7
  %20 = load i32, i32* %min_threads63, align 4, !tbaa !37
  %active_workers = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %task_parent, i64 0, i32 8
  %21 = load i32, i32* %active_workers, align 8, !tbaa !64
  %mul = mul nsw i32 %21, %20
  %threads_reserved = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %task_parent, i64 0, i32 6
  %22 = load i32, i32* %threads_reserved, align 8, !tbaa !65
  %sub64 = sub nsw i32 %mul, %22
  %cmp65.not = icmp sgt i32 %min_threads.0.lcssa, %sub64
  br i1 %cmp65.not, label %if.then66, label %do.end69

if.then66:                                        ; preds = %do.body61
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([263 x i8], [263 x i8]* @.str.3, i64 0, i64 0)) #15
  tail call void @abort() #15
  br label %do.end69

do.end69:                                         ; preds = %if.then66, %do.body61
  %23 = or i8 %job_may_block.0.lcssa, %job_has_acquires.0.lcssa
  %24 = and i8 %23, 1
  %25 = icmp eq i8 %24, 0
  br i1 %25, label %if.end77, label %if.then73

if.then73:                                        ; preds = %do.end69
  %26 = load i32, i32* %threads_reserved, align 8, !tbaa !65
  %inc75 = add nsw i32 %26, 1
  store i32 %inc75, i32* %threads_reserved, align 8, !tbaa !65
  br label %if.end77

if.end77:                                         ; preds = %if.then73, %do.end69, %if.then54, %do.end50
  br i1 %cmp181, label %for.body83.lr.ph, label %for.cond.cleanup82

for.body83.lr.ph:                                 ; preds = %if.end77
  %.promoted = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !66
  %27 = zext i32 %num_jobs to i64
  %min.iters.check = icmp eq i32 %num_jobs, 1
  br i1 %min.iters.check, label %for.body83.preheader, label %vector.ph

vector.ph:                                        ; preds = %for.body83.lr.ph
  %n.vec = and i64 %27, 4294967294
  %ind.end = and i64 %27, 1
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %vector.recur = phi %"struct.Halide::Runtime::Internal::work"* [ %.promoted, %vector.ph ], [ %31, %vector.body ]
  %offset.idx = sub i64 %27, %index
  %28 = add nsw i64 %offset.idx, -1
  %29 = add i64 %offset.idx, -2
  %30 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %28
  %31 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %29
  %32 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %28, i32 2
  %33 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %29, i32 2
  store %"struct.Halide::Runtime::Internal::work"* %vector.recur, %"struct.Halide::Runtime::Internal::work"** %32, align 8, !tbaa !67
  store %"struct.Halide::Runtime::Internal::work"* %30, %"struct.Halide::Runtime::Internal::work"** %33, align 8, !tbaa !67
  %34 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %28, i32 3
  %35 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %29, i32 3
  store %"struct.Halide::Runtime::Internal::work"* %jobs, %"struct.Halide::Runtime::Internal::work"** %34, align 8, !tbaa !44
  store %"struct.Halide::Runtime::Internal::work"* %jobs, %"struct.Halide::Runtime::Internal::work"** %35, align 8, !tbaa !44
  %36 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %28, i32 4
  %37 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %29, i32 4
  store i32 %num_jobs, i32* %36, align 8, !tbaa !45
  store i32 %num_jobs, i32* %37, align 8, !tbaa !45
  %38 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %28, i32 6
  %39 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %29, i32 6
  store i32 0, i32* %38, align 8, !tbaa !65
  store i32 0, i32* %39, align 8, !tbaa !65
  %index.next = add i64 %index, 2
  %40 = icmp eq i64 %index.next, %n.vec
  br i1 %40, label %middle.block, label %vector.body, !llvm.loop !68

middle.block:                                     ; preds = %vector.body
  %cmp.n = icmp eq i64 %n.vec, %27
  br i1 %cmp.n, label %for.cond80.for.cond.cleanup82_crit_edge, label %for.body83.preheader

for.body83.preheader:                             ; preds = %for.body83.lr.ph, %middle.block
  %indvars.iv.ph = phi i64 [ %ind.end, %middle.block ], [ %27, %for.body83.lr.ph ]
  %scalar.recur.ph = phi %"struct.Halide::Runtime::Internal::work"* [ %31, %middle.block ], [ %.promoted, %for.body83.lr.ph ]
  br label %for.body83

for.cond80.for.cond.cleanup82_crit_edge:          ; preds = %for.body83, %middle.block
  store %"struct.Halide::Runtime::Internal::work"* %jobs, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !66
  br label %for.cond.cleanup82

for.cond.cleanup82:                               ; preds = %for.cond80.for.cond.cleanup82_crit_edge, %if.end77
  %41 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 12), align 4, !tbaa !70
  %tobool96 = icmp ne i32 %41, 0
  %42 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 11), align 8
  %43 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8
  %cmp98 = icmp slt i32 %42, %43
  %44 = or i1 %tobool96, %cmp98
  %cmp102 = icmp sgt i32 %workers_to_wake.0.lcssa, %42
  %or.cond174 = or i1 %cmp102, %44
  %storemerge = select i1 %or.cond174, i32 %43, i32 %workers_to_wake.0.lcssa
  store i32 %storemerge, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 6), align 8, !tbaa !71
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 8)) #16
  %45 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 6), align 8, !tbaa !71
  %46 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !62
  %cmp106 = icmp sgt i32 %45, %46
  br i1 %cmp106, label %if.then107, label %if.end111

for.body83:                                       ; preds = %for.body83.preheader, %for.body83
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body83 ], [ %indvars.iv.ph, %for.body83.preheader ]
  %scalar.recur = phi %"struct.Halide::Runtime::Internal::work"* [ %arrayidx85, %for.body83 ], [ %scalar.recur.ph, %for.body83.preheader ]
  %indvars.iv.next = add nsw i64 %indvars.iv, -1
  %arrayidx85 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next
  %next_job = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next, i32 2
  store %"struct.Halide::Runtime::Internal::work"* %scalar.recur, %"struct.Halide::Runtime::Internal::work"** %next_job, align 8, !tbaa !67
  %siblings = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next, i32 3
  store %"struct.Halide::Runtime::Internal::work"* %jobs, %"struct.Halide::Runtime::Internal::work"** %siblings, align 8, !tbaa !44
  %sibling_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next, i32 4
  store i32 %num_jobs, i32* %sibling_count, align 8, !tbaa !45
  %threads_reserved93 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next, i32 6
  store i32 0, i32* %threads_reserved93, align 8, !tbaa !65
  %cmp81 = icmp sgt i64 %indvars.iv, 1
  br i1 %cmp81, label %for.body83, label %for.cond80.for.cond.cleanup82_crit_edge, !llvm.loop !72

if.then107:                                       ; preds = %for.cond.cleanup82
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 9)) #16
  %tobool108.not = icmp eq i8 %stealable_jobs.0.lcssa, 0
  br i1 %tobool108.not, label %if.end111, label %if.then109

if.then109:                                       ; preds = %if.then107
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10)) #16
  br label %if.end111

if.end111:                                        ; preds = %if.then109, %if.then107, %for.cond.cleanup82
  %47 = or i8 %job_may_block.0.lcssa, %job_has_acquires.0.lcssa
  %48 = and i8 %47, 1
  %49 = icmp eq i8 %48, 0
  br i1 %49, label %if.end123, label %if.then115

if.then115:                                       ; preds = %if.end111
  br i1 %cmp31, label %if.else120, label %if.then117

if.then117:                                       ; preds = %if.then115
  %threads_reserved118 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %task_parent, i64 0, i32 6
  %50 = load i32, i32* %threads_reserved118, align 8, !tbaa !65
  %dec119 = add nsw i32 %50, -1
  store i32 %dec119, i32* %threads_reserved118, align 8, !tbaa !65
  br label %if.end123

if.else120:                                       ; preds = %if.then115
  %51 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !61
  %dec121 = add nsw i32 %51, -1
  store i32 %dec121, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !61
  br label %if.end123

if.end123:                                        ; preds = %if.else120, %if.then117, %if.end111
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal28worker_thread_already_lockedEPNS1_4workE(%"struct.Halide::Runtime::Internal::work"* %owned_job) local_unnamed_addr #0 {
entry:
  %active_workers.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 8
  %tobool.not = icmp eq %"struct.Halide::Runtime::Internal::work"* %owned_job, null
  %extent.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 0, i32 6
  %exit_status = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 9
  %parent_job = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 5
  %siblings56 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 3
  %owner_is_sleeping = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 11
  %next_job10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 2
  br label %while.cond

while.cond:                                       ; preds = %while.cond.backedge, %entry
  %spin_count.0 = phi i32 [ 0, %entry ], [ %spin_count.0.be, %while.cond.backedge ]
  br i1 %tobool.not, label %cond.false, label %cond.true

cond.true:                                        ; preds = %while.cond
  %0 = load i32, i32* %extent.i, align 8, !tbaa !32
  %tobool.not.i = icmp eq i32 %0, 0
  br i1 %tobool.not.i, label %cond.end, label %if.then

cond.false:                                       ; preds = %while.cond
  %1 = load i8, i8* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 14), align 8, !tbaa !73, !range !21
  %tobool1.not = icmp eq i8 %1, 0
  br i1 %tobool1.not, label %do.end.thread, label %while.end316

cond.end:                                         ; preds = %cond.true
  %2 = load i32, i32* %active_workers.i, align 8, !tbaa !64
  %tobool2.i.not = icmp eq i32 %2, 0
  br i1 %tobool2.i.not, label %while.end316, label %if.then

if.then:                                          ; preds = %cond.end, %cond.true
  %3 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !66
  %4 = load i32, i32* %exit_status, align 4, !tbaa !47
  %cmp.not = icmp eq i32 %4, 0
  br i1 %cmp.not, label %if.else, label %if.then3

if.then3:                                         ; preds = %if.then
  %5 = load i32, i32* %active_workers.i, align 8, !tbaa !64
  %cmp4 = icmp eq i32 %5, 0
  br i1 %cmp4, label %while.cond6.preheader, label %do.end

while.cond6.preheader:                            ; preds = %if.then3
  %cmp7.not524 = icmp eq %"struct.Halide::Runtime::Internal::work"* %3, %owned_job
  br i1 %cmp7.not524, label %while.end, label %while.body8

while.body8:                                      ; preds = %while.cond6.preheader, %while.body8
  %job.0525 = phi %"struct.Halide::Runtime::Internal::work"* [ %6, %while.body8 ], [ %3, %while.cond6.preheader ]
  %next_job = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.0525, i64 0, i32 2
  %6 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job, align 8, !tbaa !67
  %cmp7.not = icmp eq %"struct.Halide::Runtime::Internal::work"* %6, %owned_job
  br i1 %cmp7.not, label %while.end.loopexit, label %while.body8, !llvm.loop !74

while.end.loopexit:                               ; preds = %while.body8
  %next_job.le = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.0525, i64 0, i32 2
  br label %while.end

while.end:                                        ; preds = %while.end.loopexit, %while.cond6.preheader
  %prev_ptr.0.lcssa = phi %"struct.Halide::Runtime::Internal::work"** [ getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), %while.cond6.preheader ], [ %next_job.le, %while.end.loopexit ]
  %7 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job10, align 8, !tbaa !67
  store %"struct.Halide::Runtime::Internal::work"* %7, %"struct.Halide::Runtime::Internal::work"** %prev_ptr.0.lcssa, align 8, !tbaa !14
  store i32 0, i32* %extent.i, align 8, !tbaa !32
  br label %while.cond.backedge

if.else:                                          ; preds = %if.then
  %8 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %parent_job, align 8, !tbaa !46
  %tobool11.not = icmp eq %"struct.Halide::Runtime::Internal::work"* %8, null
  br i1 %tobool11.not, label %do.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.else
  %exit_status13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %8, i64 0, i32 9
  %9 = load i32, i32* %exit_status13, align 4, !tbaa !47
  %cmp14.not = icmp eq i32 %9, 0
  br i1 %cmp14.not, label %do.end, label %if.then15

if.then15:                                        ; preds = %land.lhs.true
  store i32 %9, i32* %exit_status, align 4, !tbaa !47
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10)) #16
  br label %while.cond.backedge

do.end:                                           ; preds = %land.lhs.true, %if.else, %if.then3
  %tobool23.not527 = icmp eq %"struct.Halide::Runtime::Internal::work"* %3, null
  br i1 %tobool23.not527, label %if.then105, label %do.end27

do.end.thread:                                    ; preds = %cond.false
  %10 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !66
  %tobool23.not527563 = icmp eq %"struct.Halide::Runtime::Internal::work"* %10, null
  br i1 %tobool23.not527563, label %if.else112, label %do.end27.us

do.end27.us:                                      ; preds = %do.end.thread, %cleanup.us
  %job.1529.us = phi %"struct.Halide::Runtime::Internal::work"* [ %29, %cleanup.us ], [ %10, %do.end.thread ]
  %prev_ptr.1528.us = phi %"struct.Halide::Runtime::Internal::work"** [ %next_job95.us, %cleanup.us ], [ getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), %do.end.thread ]
  %parent_job29.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 5
  %11 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %parent_job29.us, align 8, !tbaa !46
  %cmp30.us = icmp eq %"struct.Halide::Runtime::Internal::work"* %11, null
  br i1 %cmp30.us, label %if.then31.us, label %if.else32.us

if.else32.us:                                     ; preds = %do.end27.us
  %active_workers33.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %11, i64 0, i32 8
  %12 = load i32, i32* %active_workers33.us, align 8, !tbaa !64
  %cmp34.us = icmp eq i32 %12, 0
  %min_threads.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %11, i64 0, i32 0, i32 7
  %13 = load i32, i32* %min_threads.us, align 4, !tbaa !37
  br i1 %cmp34.us, label %if.then35.us, label %if.else38.us

if.else38.us:                                     ; preds = %if.else32.us
  %mul.us = mul nsw i32 %13, %12
  %threads_reserved42.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %11, i64 0, i32 6
  %14 = load i32, i32* %threads_reserved42.us, align 8, !tbaa !65
  %sub43.us = sub nsw i32 %mul.us, %14
  br label %if.end45.us

if.then35.us:                                     ; preds = %if.else32.us
  %threads_reserved.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %11, i64 0, i32 6
  %15 = load i32, i32* %threads_reserved.us, align 8, !tbaa !65
  %sub37.us = sub nsw i32 %13, %15
  br label %if.end45.us

if.then31.us:                                     ; preds = %do.end27.us
  %16 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !60
  %add.us = add nsw i32 %16, 1
  %17 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !61
  %sub.us = sub i32 %add.us, %17
  br label %if.end45.us

if.end45.us:                                      ; preds = %if.then31.us, %if.then35.us, %if.else38.us
  %threads_available.0.us = phi i32 [ %sub.us, %if.then31.us ], [ %sub37.us, %if.then35.us ], [ %sub43.us, %if.else38.us ]
  %min_threads47.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 0, i32 7
  %18 = load i32, i32* %min_threads47.us, align 4, !tbaa !37
  %cmp48.not.us = icmp sge i32 %threads_available.0.us, %18
  %serial.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 0, i32 8
  %19 = load i8, i8* %serial.us, align 8, !tbaa !33, !range !21
  %tobool69.not.us = icmp eq i8 %19, 0
  br i1 %tobool69.not.us, label %if.end45.us.lor.end73.us_crit_edge, label %lor.rhs70.us

if.end45.us.lor.end73.us_crit_edge:               ; preds = %if.end45.us
  %.0 = and i1 %cmp48.not.us, true
  br label %lor.end73.us

lor.rhs70.us:                                     ; preds = %if.end45.us
  %active_workers71.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 8
  %20 = load i32, i32* %active_workers71.us, align 8, !tbaa !64
  %cmp72.us = icmp eq i32 %20, 0
  %.1 = and i1 %cmp48.not.us, %cmp72.us
  br label %lor.end73.us

lor.end73.us:                                     ; preds = %if.end45.us.lor.end73.us_crit_edge, %lor.rhs70.us
  %.phi = phi i1 [ %.0, %if.end45.us.lor.end73.us_crit_edge ], [ %.1, %lor.rhs70.us ]
  br i1 %.phi, label %if.then86.us, label %cleanup.us

if.then86.us:                                     ; preds = %lor.end73.us
  %next_semaphore.i.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 10
  %21 = load i32, i32* %next_semaphore.i.us, align 8, !tbaa !42
  %num_semaphores.i.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 0, i32 4
  %22 = load i32, i32* %num_semaphores.i.us, align 8, !tbaa !35
  %cmp14.i.us = icmp slt i32 %21, %22
  br i1 %cmp14.i.us, label %for.body.lr.ph.i.us, label %if.else127

for.body.lr.ph.i.us:                              ; preds = %if.then86.us
  %semaphores.i.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 0, i32 3
  br label %for.body.i.us

for.body.i.us:                                    ; preds = %for.inc.i.us, %for.body.lr.ph.i.us
  %23 = phi i32 [ %21, %for.body.lr.ph.i.us ], [ %inc.i.us, %for.inc.i.us ]
  %24 = load %struct.halide_semaphore_acquire_t*, %struct.halide_semaphore_acquire_t** %semaphores.i.us, align 8, !tbaa !34
  %idxprom.i.us = sext i32 %23 to i64
  %semaphore.i.us = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %24, i64 %idxprom.i.us, i32 0
  %25 = load %struct.halide_semaphore_t*, %struct.halide_semaphore_t** %semaphore.i.us, align 8, !tbaa !75
  %count.i.us = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %24, i64 %idxprom.i.us, i32 1
  %26 = load i32, i32* %count.i.us, align 8, !tbaa !77
  %call.i.us = tail call zeroext i1 @halide_default_semaphore_try_acquire(%struct.halide_semaphore_t* %25, i32 %26) #15
  br i1 %call.i.us, label %for.inc.i.us, label %cleanup.us

for.inc.i.us:                                     ; preds = %for.body.i.us
  %27 = load i32, i32* %next_semaphore.i.us, align 8, !tbaa !42
  %inc.i.us = add nsw i32 %27, 1
  store i32 %inc.i.us, i32* %next_semaphore.i.us, align 8, !tbaa !42
  %28 = load i32, i32* %num_semaphores.i.us, align 8, !tbaa !35
  %cmp.i.us = icmp slt i32 %inc.i.us, %28
  br i1 %cmp.i.us, label %for.body.i.us, label %if.else127, !llvm.loop !78

cleanup.us:                                       ; preds = %for.body.i.us, %lor.end73.us
  %next_job95.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 2
  %29 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job95.us, align 8, !tbaa !67
  %tobool23.not.us = icmp eq %"struct.Halide::Runtime::Internal::work"* %29, null
  br i1 %tobool23.not.us, label %if.then103, label %do.end27.us

do.end27:                                         ; preds = %do.end, %cleanup
  %job.1529 = phi %"struct.Halide::Runtime::Internal::work"* [ %50, %cleanup ], [ %3, %do.end ]
  %prev_ptr.1528 = phi %"struct.Halide::Runtime::Internal::work"** [ %next_job95, %cleanup ], [ getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), %do.end ]
  %parent_job29 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 5
  %30 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %parent_job29, align 8, !tbaa !46
  %cmp30 = icmp eq %"struct.Halide::Runtime::Internal::work"* %30, null
  br i1 %cmp30, label %if.then31, label %if.else32

if.then31:                                        ; preds = %do.end27
  %31 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !60
  %add = add nsw i32 %31, 1
  %32 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !61
  %sub = sub i32 %add, %32
  br label %if.end45

if.else32:                                        ; preds = %do.end27
  %active_workers33 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %30, i64 0, i32 8
  %33 = load i32, i32* %active_workers33, align 8, !tbaa !64
  %cmp34 = icmp eq i32 %33, 0
  %min_threads = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %30, i64 0, i32 0, i32 7
  %34 = load i32, i32* %min_threads, align 4, !tbaa !37
  br i1 %cmp34, label %if.then35, label %if.else38

if.then35:                                        ; preds = %if.else32
  %threads_reserved = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %30, i64 0, i32 6
  %35 = load i32, i32* %threads_reserved, align 8, !tbaa !65
  %sub37 = sub nsw i32 %34, %35
  br label %if.end45

if.else38:                                        ; preds = %if.else32
  %mul = mul nsw i32 %34, %33
  %threads_reserved42 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %30, i64 0, i32 6
  %36 = load i32, i32* %threads_reserved42, align 8, !tbaa !65
  %sub43 = sub nsw i32 %mul, %36
  br label %if.end45

if.end45:                                         ; preds = %if.else38, %if.then35, %if.then31
  %threads_available.0 = phi i32 [ %sub, %if.then31 ], [ %sub37, %if.then35 ], [ %sub43, %if.else38 ]
  %min_threads47 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 0, i32 7
  %37 = load i32, i32* %min_threads47, align 4, !tbaa !37
  %cmp48.not = icmp slt i32 %threads_available.0, %37
  %siblings = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 3
  %38 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %siblings, align 8, !tbaa !44
  %39 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %siblings56, align 8, !tbaa !44
  %cmp57 = icmp ne %"struct.Halide::Runtime::Internal::work"* %38, %39
  %cmp60 = icmp ne i32 %37, 0
  %serial = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 0, i32 8
  %40 = load i8, i8* %serial, align 8, !tbaa !33, !range !21
  %tobool69.not = icmp eq i8 %40, 0
  br i1 %tobool69.not, label %if.end45.lor.end73_crit_edge, label %lor.rhs70

if.end45.lor.end73_crit_edge:                     ; preds = %if.end45
  %.not472.0 = xor i1 true, true
  br label %lor.end73

lor.rhs70:                                        ; preds = %if.end45
  %active_workers71 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 8
  %41 = load i32, i32* %active_workers71, align 8, !tbaa !64
  %cmp72 = icmp eq i32 %41, 0
  %.not472.1 = xor i1 %cmp72, true
  br label %lor.end73

lor.end73:                                        ; preds = %if.end45.lor.end73_crit_edge, %lor.rhs70
  %.not472.phi = phi i1 [ %.not472.0, %if.end45.lor.end73_crit_edge ], [ %.not472.1, %lor.rhs70 ]
  %.not = and i1 %cmp60, %cmp57
  %brmerge = or i1 %cmp48.not, %.not
  %brmerge473 = or i1 %brmerge, %.not472.phi
  br i1 %brmerge473, label %cleanup, label %if.then86

if.then86:                                        ; preds = %lor.end73
  %next_semaphore.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 10
  %42 = load i32, i32* %next_semaphore.i, align 8, !tbaa !42
  %num_semaphores.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 0, i32 4
  %43 = load i32, i32* %num_semaphores.i, align 8, !tbaa !35
  %cmp14.i = icmp slt i32 %42, %43
  br i1 %cmp14.i, label %for.body.lr.ph.i, label %if.else127

for.body.lr.ph.i:                                 ; preds = %if.then86
  %semaphores.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 0, i32 3
  br label %for.body.i

for.body.i:                                       ; preds = %for.inc.i, %for.body.lr.ph.i
  %44 = phi i32 [ %42, %for.body.lr.ph.i ], [ %inc.i, %for.inc.i ]
  %45 = load %struct.halide_semaphore_acquire_t*, %struct.halide_semaphore_acquire_t** %semaphores.i, align 8, !tbaa !34
  %idxprom.i = sext i32 %44 to i64
  %semaphore.i = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %45, i64 %idxprom.i, i32 0
  %46 = load %struct.halide_semaphore_t*, %struct.halide_semaphore_t** %semaphore.i, align 8, !tbaa !75
  %count.i = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %45, i64 %idxprom.i, i32 1
  %47 = load i32, i32* %count.i, align 8, !tbaa !77
  %call.i = tail call zeroext i1 @halide_default_semaphore_try_acquire(%struct.halide_semaphore_t* %46, i32 %47) #15
  br i1 %call.i, label %for.inc.i, label %cleanup

for.inc.i:                                        ; preds = %for.body.i
  %48 = load i32, i32* %next_semaphore.i, align 8, !tbaa !42
  %inc.i = add nsw i32 %48, 1
  store i32 %inc.i, i32* %next_semaphore.i, align 8, !tbaa !42
  %49 = load i32, i32* %num_semaphores.i, align 8, !tbaa !35
  %cmp.i = icmp slt i32 %inc.i, %49
  br i1 %cmp.i, label %for.body.i, label %if.else127, !llvm.loop !78

cleanup:                                          ; preds = %for.body.i, %lor.end73
  %next_job95 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 2
  %50 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job95, align 8, !tbaa !67
  %tobool23.not = icmp eq %"struct.Halide::Runtime::Internal::work"* %50, null
  br i1 %tobool23.not, label %if.then103, label %do.end27

if.then103:                                       ; preds = %cleanup, %cleanup.us
  br i1 %tobool.not, label %if.else112, label %if.then105

if.then105:                                       ; preds = %do.end, %if.then103
  %inc = add nsw i32 %spin_count.0, 1
  %cmp106 = icmp slt i32 %spin_count.0, 40
  br i1 %cmp106, label %if.then107, label %if.else108

if.then107:                                       ; preds = %if.then105
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #16
  tail call void @halide_thread_yield() #15
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #16
  br label %while.cond.backedge

if.else108:                                       ; preds = %if.then105
  %51 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 12), align 4, !tbaa !70
  %inc109 = add nsw i32 %51, 1
  store i32 %inc109, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 12), align 4, !tbaa !70
  store i8 1, i8* %owner_is_sleeping, align 4, !tbaa !43
  tail call void @halide_cond_wait(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10), %struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #16
  store i8 0, i8* %owner_is_sleeping, align 4, !tbaa !43
  %52 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 12), align 4, !tbaa !70
  %dec = add nsw i32 %52, -1
  store i32 %dec, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 12), align 4, !tbaa !70
  br label %while.cond.backedge

if.else112:                                       ; preds = %if.then103, %do.end.thread
  %53 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 11), align 8, !tbaa !79
  %inc113 = add nsw i32 %53, 1
  store i32 %inc113, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 11), align 8, !tbaa !79
  %54 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !62
  %55 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 6), align 8, !tbaa !71
  %cmp114 = icmp sgt i32 %54, %55
  br i1 %cmp114, label %if.then115, label %if.else118

if.then115:                                       ; preds = %if.else112
  %dec116 = add nsw i32 %54, -1
  store i32 %dec116, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !62
  tail call void @halide_cond_wait(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 9), %struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #16
  %56 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !62
  %inc117 = add nsw i32 %56, 1
  store i32 %inc117, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !62
  br label %if.end124

if.else118:                                       ; preds = %if.else112
  %inc119 = add nsw i32 %spin_count.0, 1
  %cmp120 = icmp slt i32 %spin_count.0, 40
  br i1 %cmp120, label %if.then121, label %if.else122

if.then121:                                       ; preds = %if.else118
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #16
  tail call void @halide_thread_yield() #15
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #16
  br label %if.end124

if.else122:                                       ; preds = %if.else118
  tail call void @halide_cond_wait(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 8), %struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #16
  br label %if.end124

if.end124:                                        ; preds = %if.else122, %if.then121, %if.then115
  %spin_count.1 = phi i32 [ %spin_count.0, %if.then115 ], [ %inc119, %if.then121 ], [ %inc119, %if.else122 ]
  %57 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 11), align 8, !tbaa !79
  %dec125 = add nsw i32 %57, -1
  store i32 %dec125, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 11), align 8, !tbaa !79
  br label %while.cond.backedge

if.else127:                                       ; preds = %if.then86, %if.then86.us, %for.inc.i, %for.inc.i.us
  %next_semaphore.i521 = phi i32* [ %next_semaphore.i.us, %for.inc.i.us ], [ %next_semaphore.i, %for.inc.i ], [ %next_semaphore.i.us, %if.then86.us ], [ %next_semaphore.i, %if.then86 ]
  %prev_ptr.1519 = phi %"struct.Halide::Runtime::Internal::work"** [ %prev_ptr.1528.us, %for.inc.i.us ], [ %prev_ptr.1528, %for.inc.i ], [ %prev_ptr.1528.us, %if.then86.us ], [ %prev_ptr.1528, %if.then86 ]
  %job.1515 = phi %"struct.Halide::Runtime::Internal::work"* [ %job.1529.us, %for.inc.i.us ], [ %job.1529, %for.inc.i ], [ %job.1529.us, %if.then86.us ], [ %job.1529, %if.then86 ]
  store i32 0, i32* %next_semaphore.i521, align 8, !tbaa !42
  %active_workers132 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 8
  %58 = load i32, i32* %active_workers132, align 8, !tbaa !64
  %inc133 = add nsw i32 %58, 1
  store i32 %inc133, i32* %active_workers132, align 8, !tbaa !64
  %parent_job134 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 5
  %59 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %parent_job134, align 8, !tbaa !46
  %cmp135 = icmp eq %"struct.Halide::Runtime::Internal::work"* %59, null
  %min_threads138 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 7
  %60 = load i32, i32* %min_threads138, align 4, !tbaa !37
  br i1 %cmp135, label %if.then136, label %if.else143

if.then136:                                       ; preds = %if.else127
  %61 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !61
  %add139 = add nsw i32 %61, %60
  store i32 %add139, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !61
  br label %if.end152

if.else143:                                       ; preds = %if.else127
  %threads_reserved147 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %59, i64 0, i32 6
  %62 = load i32, i32* %threads_reserved147, align 8, !tbaa !65
  %add148 = add nsw i32 %62, %60
  store i32 %add148, i32* %threads_reserved147, align 8, !tbaa !65
  br label %if.end152

if.end152:                                        ; preds = %if.else143, %if.then136
  %serial154 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 8
  %63 = load i8, i8* %serial154, align 8, !tbaa !33, !range !21
  %tobool155.not = icmp eq i8 %63, 0
  br i1 %tobool155.not, label %if.else198, label %if.then156

if.then156:                                       ; preds = %if.end152
  %next_job157 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 2
  %64 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job157, align 8, !tbaa !67
  store %"struct.Halide::Runtime::Internal::work"* %64, %"struct.Halide::Runtime::Internal::work"** %prev_ptr.1519, align 8, !tbaa !14
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #16
  %extent163 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 6
  %next_semaphore.i474 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 10
  %num_semaphores.i475 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 4
  %semaphores.i477 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 3
  %user_context = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 7
  %fn = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 0
  %min = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 5
  %closure = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 1
  %65 = bitcast %"struct.Halide::Runtime::Internal::work"* %job.1515 to i8*
  br label %while.cond161.preheader

while.cond161.preheader:                          ; preds = %if.end172, %if.then156
  %iters.0538 = phi i32 [ 1, %if.then156 ], [ 0, %if.end172 ]
  %total_iters.0537 = phi i32 [ 0, %if.then156 ], [ %add178, %if.end172 ]
  %66 = load i32, i32* %extent163, align 8, !tbaa !32
  %sub164531 = sub nsw i32 %66, %total_iters.0537
  %cmp165532 = icmp sgt i32 %sub164531, %iters.0538
  br i1 %cmp165532, label %land.rhs.preheader, label %while.end169

land.rhs.preheader:                               ; preds = %while.cond161.preheader
  %.pre = load i32, i32* %next_semaphore.i474, align 8, !tbaa !42
  %.pre560 = load i32, i32* %num_semaphores.i475, align 8, !tbaa !35
  br label %land.rhs

land.rhs:                                         ; preds = %while.body167, %land.rhs.preheader
  %67 = phi i32 [ %76, %while.body167 ], [ %66, %land.rhs.preheader ]
  %68 = phi i32 [ %77, %while.body167 ], [ %.pre560, %land.rhs.preheader ]
  %69 = phi i32 [ 0, %while.body167 ], [ %.pre, %land.rhs.preheader ]
  %iters.1533 = phi i32 [ %inc168, %while.body167 ], [ %iters.0538, %land.rhs.preheader ]
  %cmp14.i476 = icmp slt i32 %69, %68
  br i1 %cmp14.i476, label %for.body.i483, label %while.body167

for.body.i483:                                    ; preds = %land.rhs, %for.inc.i486
  %70 = phi i32 [ %inc.i484, %for.inc.i486 ], [ %69, %land.rhs ]
  %71 = load %struct.halide_semaphore_acquire_t*, %struct.halide_semaphore_acquire_t** %semaphores.i477, align 8, !tbaa !34
  %idxprom.i479 = sext i32 %70 to i64
  %semaphore.i480 = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %71, i64 %idxprom.i479, i32 0
  %72 = load %struct.halide_semaphore_t*, %struct.halide_semaphore_t** %semaphore.i480, align 8, !tbaa !75
  %count.i481 = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %71, i64 %idxprom.i479, i32 1
  %73 = load i32, i32* %count.i481, align 8, !tbaa !77
  %call.i482 = tail call zeroext i1 @halide_default_semaphore_try_acquire(%struct.halide_semaphore_t* %72, i32 %73) #15
  br i1 %call.i482, label %for.inc.i486, label %while.end169

for.inc.i486:                                     ; preds = %for.body.i483
  %74 = load i32, i32* %next_semaphore.i474, align 8, !tbaa !42
  %inc.i484 = add nsw i32 %74, 1
  store i32 %inc.i484, i32* %next_semaphore.i474, align 8, !tbaa !42
  %75 = load i32, i32* %num_semaphores.i475, align 8, !tbaa !35
  %cmp.i485 = icmp slt i32 %inc.i484, %75
  br i1 %cmp.i485, label %for.body.i483, label %while.body167.loopexit, !llvm.loop !78

while.body167.loopexit:                           ; preds = %for.inc.i486
  %.pre561 = load i32, i32* %extent163, align 8, !tbaa !32
  br label %while.body167

while.body167:                                    ; preds = %while.body167.loopexit, %land.rhs
  %76 = phi i32 [ %.pre561, %while.body167.loopexit ], [ %67, %land.rhs ]
  %77 = phi i32 [ %75, %while.body167.loopexit ], [ %68, %land.rhs ]
  store i32 0, i32* %next_semaphore.i474, align 8, !tbaa !42
  %inc168 = add nuw nsw i32 %iters.1533, 1
  %sub164 = sub nsw i32 %76, %total_iters.0537
  %cmp165 = icmp sgt i32 %sub164, %inc168
  br i1 %cmp165, label %land.rhs, label %if.end172, !llvm.loop !80

while.end169:                                     ; preds = %for.body.i483, %while.cond161.preheader
  %iters.1523 = phi i32 [ %iters.0538, %while.cond161.preheader ], [ %iters.1533, %for.body.i483 ]
  %cmp170 = icmp eq i32 %iters.1523, 0
  br i1 %cmp170, label %while.end179, label %if.end172

if.end172:                                        ; preds = %while.body167, %while.end169
  %iters.1523566 = phi i32 [ %iters.1523, %while.end169 ], [ %inc168, %while.body167 ]
  %78 = load i8*, i8** %user_context, align 8, !tbaa !40
  %79 = load i32 (i8*, i32, i32, i8*, i8*)*, i32 (i8*, i32, i32, i8*, i8*)** %fn, align 8, !tbaa !28
  %80 = load i32, i32* %min, align 4, !tbaa !31
  %add175 = add nsw i32 %80, %total_iters.0537
  %81 = load i8*, i8** %closure, align 8, !tbaa !36
  %call177 = tail call i32 @halide_do_loop_task(i8* %78, i32 (i8*, i32, i32, i8*, i8*)* %79, i32 %add175, i32 %iters.1523566, i8* %81, i8* nonnull %65) #16
  %add178 = add nuw nsw i32 %iters.1523566, %total_iters.0537
  %cmp159 = icmp eq i32 %call177, 0
  br i1 %cmp159, label %while.cond161.preheader, label %while.end179, !llvm.loop !81

while.end179:                                     ; preds = %if.end172, %while.end169
  %cmp170568 = phi i1 [ true, %while.end169 ], [ false, %if.end172 ]
  %result.0.lcssa = phi i32 [ 0, %while.end169 ], [ %call177, %if.end172 ]
  %total_iters.0.lcssa = phi i32 [ %total_iters.0537, %while.end169 ], [ %add178, %if.end172 ]
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #16
  %82 = load i32, i32* %min, align 4, !tbaa !31
  %add182 = add nsw i32 %82, %total_iters.0.lcssa
  store i32 %add182, i32* %min, align 4, !tbaa !31
  %83 = load i32, i32* %extent163, align 8, !tbaa !32
  %sub185 = sub nsw i32 %83, %total_iters.0.lcssa
  store i32 %sub185, i32* %extent163, align 8, !tbaa !32
  br i1 %cmp170568, label %if.else190, label %if.end230.thread505

if.end230.thread505:                              ; preds = %while.end179
  store i32 0, i32* %extent163, align 8, !tbaa !32
  br label %if.then238

if.else190:                                       ; preds = %while.end179
  %cmp193 = icmp sgt i32 %sub185, 0
  br i1 %cmp193, label %if.then194, label %if.end271

if.then194:                                       ; preds = %if.else190
  %84 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !66
  store %"struct.Halide::Runtime::Internal::work"* %84, %"struct.Halide::Runtime::Internal::work"** %next_job157, align 8, !tbaa !67
  store %"struct.Halide::Runtime::Internal::work"* %job.1515, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !66
  br label %if.end271

if.else198:                                       ; preds = %if.end152
  %myjob.sroa.0.0..sroa_idx = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 0
  %myjob.sroa.0.0.copyload = load i32 (i8*, i32, i32, i8*, i8*)*, i32 (i8*, i32, i32, i8*, i8*)** %myjob.sroa.0.0..sroa_idx, align 8, !tbaa.struct !82
  %myjob.sroa.4.0..sroa_idx327 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 1
  %myjob.sroa.4.0.copyload = load i8*, i8** %myjob.sroa.4.0..sroa_idx327, align 8, !tbaa.struct !83
  %myjob.sroa.6333.0..sroa_idx334 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 5
  %myjob.sroa.6333.0.copyload = load i32, i32* %myjob.sroa.6333.0..sroa_idx334, align 4
  %myjob.sroa.8340.0..sroa_idx341 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 1
  %myjob.sroa.8340.0.copyload = load i32 (i8*, i32, i8*)*, i32 (i8*, i32, i8*)** %myjob.sroa.8340.0..sroa_idx341, align 8, !tbaa.struct !84
  %myjob.sroa.10347.0..sroa_idx348 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 7
  %myjob.sroa.10347.0.copyload = load i8*, i8** %myjob.sroa.10347.0..sroa_idx348, align 8, !tbaa.struct !85
  %inc201 = add nsw i32 %myjob.sroa.6333.0.copyload, 1
  store i32 %inc201, i32* %myjob.sroa.6333.0..sroa_idx334, align 4, !tbaa !31
  %extent203 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 6
  %85 = load i32, i32* %extent203, align 8, !tbaa !32
  %dec204 = add nsw i32 %85, -1
  store i32 %dec204, i32* %extent203, align 8, !tbaa !32
  %cmp207 = icmp eq i32 %dec204, 0
  br i1 %cmp207, label %if.then208, label %if.end210

if.then208:                                       ; preds = %if.else198
  %next_job209 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 2
  %86 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job209, align 8, !tbaa !67
  store %"struct.Halide::Runtime::Internal::work"* %86, %"struct.Halide::Runtime::Internal::work"** %prev_ptr.1519, align 8, !tbaa !14
  br label %if.end210

if.end210:                                        ; preds = %if.then208, %if.else198
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #16
  %tobool211.not = icmp eq i32 (i8*, i32, i8*)* %myjob.sroa.8340.0.copyload, null
  br i1 %tobool211.not, label %if.else220, label %if.then212

if.then212:                                       ; preds = %if.end210
  %call219 = tail call i32 @halide_do_task(i8* %myjob.sroa.10347.0.copyload, i32 (i8*, i32, i8*)* nonnull %myjob.sroa.8340.0.copyload, i32 %myjob.sroa.6333.0.copyload, i8* %myjob.sroa.4.0.copyload) #16
  br label %if.end230

if.else220:                                       ; preds = %if.end210
  %87 = bitcast %"struct.Halide::Runtime::Internal::work"* %job.1515 to i8*
  %call228 = tail call i32 @halide_do_loop_task(i8* %myjob.sroa.10347.0.copyload, i32 (i8*, i32, i32, i8*, i8*)* %myjob.sroa.0.0.copyload, i32 %myjob.sroa.6333.0.copyload, i32 1, i8* %myjob.sroa.4.0.copyload, i8* %87) #16
  br label %if.end230

if.end230:                                        ; preds = %if.else220, %if.then212
  %result.1 = phi i32 [ %call219, %if.then212 ], [ %call228, %if.else220 ]
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #16
  %cmp237.not = icmp eq i32 %result.1, 0
  br i1 %cmp237.not, label %if.end271, label %if.then238

if.then238:                                       ; preds = %if.end230, %if.end230.thread505
  %result.2510 = phi i32 [ %result.0.lcssa, %if.end230.thread505 ], [ %result.1, %if.end230 ]
  %exit_status239 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 9
  store i32 %result.2510, i32* %exit_status239, align 4, !tbaa !47
  %sibling_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 4
  %88 = load i32, i32* %sibling_count, align 8, !tbaa !45
  %cmp240540 = icmp sgt i32 %88, 0
  br i1 %cmp240540, label %do.end243.lr.ph, label %if.end271

do.end243.lr.ph:                                  ; preds = %if.then238
  %siblings244 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 3
  %89 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %siblings244, align 8, !tbaa !44
  %wide.trip.count = zext i32 %88 to i64
  br label %do.end243

do.end243:                                        ; preds = %for.inc, %do.end243.lr.ph
  %indvars.iv = phi i64 [ 0, %do.end243.lr.ph ], [ %indvars.iv.next, %for.inc ]
  %wake_owners.0541 = phi i8 [ 0, %do.end243.lr.ph ], [ %wake_owners.1, %for.inc ]
  %exit_status245 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %89, i64 %indvars.iv, i32 9
  %90 = load i32, i32* %exit_status245, align 4, !tbaa !47
  %cmp246 = icmp eq i32 %90, 0
  br i1 %cmp246, label %if.then247, label %for.inc

if.then247:                                       ; preds = %do.end243
  store i32 %result.2510, i32* %exit_status245, align 4, !tbaa !47
  %91 = load i32, i32* %active_workers132, align 8, !tbaa !64
  %cmp253 = icmp eq i32 %91, 0
  br i1 %cmp253, label %land.rhs254, label %land.end260

land.rhs254:                                      ; preds = %if.then247
  %owner_is_sleeping258 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %89, i64 %indvars.iv, i32 11
  %92 = load i8, i8* %owner_is_sleeping258, align 4, !tbaa !43, !range !21
  br label %land.end260

land.end260:                                      ; preds = %land.rhs254, %if.then247
  %93 = phi i8 [ 0, %if.then247 ], [ %92, %land.rhs254 ]
  %94 = and i8 %wake_owners.0541, 1
  %or = or i8 %93, %94
  br label %for.inc

for.inc:                                          ; preds = %land.end260, %do.end243
  %wake_owners.1 = phi i8 [ %or, %land.end260 ], [ %wake_owners.0541, %do.end243 ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %if.end271, label %do.end243, !llvm.loop !86

if.end271:                                        ; preds = %for.inc, %if.then238, %if.end230, %if.then194, %if.else190
  %wake_owners.2 = phi i8 [ 0, %if.end230 ], [ 0, %if.else190 ], [ 0, %if.then194 ], [ 0, %if.then238 ], [ %wake_owners.1, %for.inc ]
  %95 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %parent_job134, align 8, !tbaa !46
  %cmp273 = icmp eq %"struct.Halide::Runtime::Internal::work"* %95, null
  %96 = load i32, i32* %min_threads138, align 4, !tbaa !37
  br i1 %cmp273, label %if.then274, label %if.else281

if.then274:                                       ; preds = %if.end271
  %97 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !61
  %sub277 = sub nsw i32 %97, %96
  store i32 %sub277, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !61
  br label %if.end290

if.else281:                                       ; preds = %if.end271
  %threads_reserved285 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %95, i64 0, i32 6
  %98 = load i32, i32* %threads_reserved285, align 8, !tbaa !65
  %sub286 = sub nsw i32 %98, %96
  store i32 %sub286, i32* %threads_reserved285, align 8, !tbaa !65
  br label %if.end290

if.end290:                                        ; preds = %if.else281, %if.then274
  %99 = load i32, i32* %active_workers132, align 8, !tbaa !64
  %dec292 = add nsw i32 %99, -1
  store i32 %dec292, i32* %active_workers132, align 8, !tbaa !64
  %100 = and i8 %wake_owners.2, 1
  %tobool296.not = icmp eq i8 %100, 0
  br i1 %tobool296.not, label %lor.lhs.false297, label %if.then310

lor.lhs.false297:                                 ; preds = %if.end290
  %cmp299 = icmp eq i32 %dec292, 0
  br i1 %cmp299, label %land.lhs.true300, label %while.cond.backedge

land.lhs.true300:                                 ; preds = %lor.lhs.false297
  %extent302 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 6
  %101 = load i32, i32* %extent302, align 8, !tbaa !32
  %cmp303 = icmp eq i32 %101, 0
  br i1 %cmp303, label %land.lhs.true307, label %lor.lhs.false304

lor.lhs.false304:                                 ; preds = %land.lhs.true300
  %exit_status305 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 9
  %102 = load i32, i32* %exit_status305, align 4, !tbaa !47
  %cmp306.not = icmp eq i32 %102, 0
  br i1 %cmp306.not, label %while.cond.backedge, label %land.lhs.true307

land.lhs.true307:                                 ; preds = %lor.lhs.false304, %land.lhs.true300
  %owner_is_sleeping308 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 11
  %103 = load i8, i8* %owner_is_sleeping308, align 4, !tbaa !43, !range !21
  %tobool309.not = icmp eq i8 %103, 0
  br i1 %tobool309.not, label %while.cond.backedge, label %if.then310

if.then310:                                       ; preds = %land.lhs.true307, %if.end290
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10)) #16
  br label %while.cond.backedge

while.cond.backedge:                              ; preds = %if.then310, %land.lhs.true307, %lor.lhs.false304, %lor.lhs.false297, %if.end124, %if.else108, %if.then107, %if.then15, %while.end
  %spin_count.0.be = phi i32 [ %spin_count.0, %while.end ], [ %spin_count.0, %if.then15 ], [ %inc, %if.then107 ], [ %inc, %if.else108 ], [ %spin_count.1, %if.end124 ], [ 0, %if.then310 ], [ 0, %land.lhs.true307 ], [ 0, %lor.lhs.false304 ], [ 0, %lor.lhs.false297 ]
  br label %while.cond, !llvm.loop !87

while.end316:                                     ; preds = %cond.end, %cond.false
  ret void
}

; Function Attrs: nounwind
define weak void @halide_mutex_unlock(%struct.halide_mutex* %mutex) local_unnamed_addr #4 {
entry:
  %control.i.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", align 8
  %state.i = getelementptr %struct.halide_mutex, %struct.halide_mutex* %mutex, i64 0, i32 0, i64 0
  %0 = cmpxchg weak i64* %state.i, i64 1, i64 0 release monotonic
  %1 = extractvalue { i64, i1 } %0, 1
  br i1 %1, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %2 = cmpxchg i64* %state.i, i64 1, i64 0 release monotonic
  %3 = extractvalue { i64, i1 } %2, 1
  br i1 %3, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit, label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i
  %4 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %4) #12
  %5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8, !tbaa !48
  %lock_state2.i.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 1
  store i64* %state.i, i64** %lock_state2.i.i.i, align 8, !tbaa !50
  %6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0
  %7 = ptrtoint %struct.halide_mutex* %mutex to i64
  %call3.i.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control10unpark_oneEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %6, i64 %7) #15
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %4) #12
  br label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit

_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit: ; preds = %if.end.i.i, %if.then.i, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control10unpark_oneEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i64 %addr) local_unnamed_addr #0 align 2 {
entry:
  %call = tail call nonnull align 8 dereferenceable(24) %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* @_ZN6Halide7Runtime8Internal15Synchronization11lock_bucketEy(i64 %addr) #16
  %head = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 1
  %0 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head, align 8, !tbaa !14
  %tail = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 2
  %1 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::parking_control"* %this to i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)***
  %state.i60 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0, i32 0
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0
  br label %while.cond

while.cond:                                       ; preds = %cleanup, %entry
  %data_location.0 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** [ %head, %entry ], [ %data_location.1, %cleanup ]
  %prev.0 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ null, %entry ], [ %prev.1, %cleanup ]
  %data.0 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %0, %entry ], [ %data.1, %cleanup ]
  %retval.0 = phi i64 [ undef, %entry ], [ %retval.1, %cleanup ]
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, null
  br i1 %cmp.not, label %while.end22, label %while.body

while.body:                                       ; preds = %while.cond
  %sleep_address = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 1
  %2 = load atomic i64, i64* %sleep_address monotonic, align 8
  %cmp2 = icmp eq i64 %2, %addr
  %next3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 2
  %3 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next3, align 8, !tbaa !88
  br i1 %cmp2, label %if.then, label %cleanup

if.then:                                          ; preds = %while.body
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %3, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %data_location.0, align 8, !tbaa !14
  %4 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8, !tbaa !93
  %cmp4 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %4, %data.0
  br i1 %cmp4, label %if.then5, label %while.cond7.preheader

while.cond7.preheader:                            ; preds = %if.then
  %cmp872.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %3, null
  br i1 %cmp872.not, label %if.end, label %while.body9

if.then5:                                         ; preds = %if.then
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %prev.0, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8, !tbaa !93
  br label %if.end

while.body9:                                      ; preds = %while.cond7.preheader, %while.body9
  %data2.073 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %6, %while.body9 ], [ %3, %while.cond7.preheader ]
  %sleep_address10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data2.073, i64 0, i32 1
  %5 = load atomic i64, i64* %sleep_address10 monotonic, align 8
  %cmp11 = icmp eq i64 %5, %addr
  %next12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data2.073, i64 0, i32 2
  %6 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next12, align 8, !tbaa !88
  %cmp8 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %6, null
  %7 = or i1 %cmp11, %cmp8
  br i1 %7, label %if.end.loopexit, label %while.body9, !llvm.loop !96

if.end.loopexit:                                  ; preds = %while.body9
  %frombool = zext i1 %cmp11 to i8
  br label %if.end

if.end:                                           ; preds = %if.end.loopexit, %if.then5, %while.cond7.preheader
  %more_waiters.1 = phi i8 [ 0, %if.then5 ], [ 0, %while.cond7.preheader ], [ %frombool, %if.end.loopexit ]
  %tobool13 = icmp ne i8 %more_waiters.1, 0
  %vtable = load i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)**, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*** %1, align 8, !tbaa !48
  %vfn = getelementptr inbounds i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)** %vtable, i64 2
  %8 = load i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)** %vfn, align 8
  %call14 = tail call i64 %8(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i32 1, i1 zeroext %tobool13) #15
  %unpark_info = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 3
  store i64 %call14, i64* %unpark_info, align 8, !tbaa !97
  %mutex.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 0, i32 0
  %call.i = tail call i32 @pthread_mutex_lock(%struct.pthread_mutex_t* nonnull %mutex.i) #15
  %9 = atomicrmw and i64* %state.i60, i64 -2 release
  %and.i61 = and i64 %9, 2
  %cmp.i62 = icmp ne i64 %and.i61, 0
  %cmp3.not.i63 = icmp ult i64 %9, 4
  %or.cond.i64 = or i1 %cmp3.not.i63, %cmp.i62
  br i1 %or.cond.i64, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66, label %if.then.i65

if.then.i65:                                      ; preds = %if.end
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #15
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66

_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66: ; preds = %if.then.i65, %if.end
  %should_park.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 0, i32 2
  store i8 0, i8* %should_park.i, align 8, !tbaa !98
  %condvar.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 0, i32 1
  %call.i67 = tail call i32 @pthread_cond_signal(%struct.pthread_mutex_t* nonnull %condvar.i) #15
  %call.i69 = tail call i32 @pthread_mutex_unlock(%struct.pthread_mutex_t* nonnull %mutex.i) #15
  %10 = zext i8 %more_waiters.1 to i64
  br label %cleanup

cleanup:                                          ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66, %while.body
  %data_location.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** [ %data_location.0, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66 ], [ %next3, %while.body ]
  %prev.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %prev.0, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66 ], [ %data.0, %while.body ]
  %data.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %data.0, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66 ], [ %3, %while.body ]
  %retval.1 = phi i64 [ %10, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66 ], [ %retval.0, %while.body ]
  br i1 %cmp2, label %cleanup27, label %while.cond, !llvm.loop !99

while.end22:                                      ; preds = %while.cond
  %vtable23 = load i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)**, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*** %1, align 8, !tbaa !48
  %vfn24 = getelementptr inbounds i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)** %vtable23, i64 2
  %11 = load i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)** %vfn24, align 8
  %call25 = tail call i64 %11(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i32 0, i1 zeroext false) #15
  %12 = atomicrmw and i64* %state.i60, i64 -2 release
  %and.i = and i64 %12, 2
  %cmp.i = icmp ne i64 %and.i, 0
  %cmp3.not.i = icmp ult i64 %12, 4
  %or.cond.i = or i1 %cmp3.not.i, %cmp.i
  br i1 %or.cond.i, label %cleanup27, label %if.then.i

if.then.i:                                        ; preds = %while.end22
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #15
  br label %cleanup27

cleanup27:                                        ; preds = %cleanup, %if.then.i, %while.end22
  %retval.2 = phi i64 [ 0, %while.end22 ], [ 0, %if.then.i ], [ %retval.1, %cleanup ]
  ret i64 %retval.2
}

; Function Attrs: nounwind mustprogress
define linkonce nonnull align 8 dereferenceable(24) %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* @_ZN6Halide7Runtime8Internal15Synchronization11lock_bucketEy(i64 %addr) local_unnamed_addr #0 {
entry:
  %mul.i = mul i64 %addr, -7046029254386353131
  %shr.i = lshr i64 %mul.i, 54
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i
  %state.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx, i64 0, i32 0, i32 0
  %0 = cmpxchg weak i64* %state.i, i64 0, i64 1 acquire monotonic
  %1 = extractvalue { i64, i1 } %0, 1
  br i1 %1, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #15
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit

_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit: ; preds = %if.then.i, %entry
  ret %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx
}

declare i32 @pthread_mutex_lock(%struct.pthread_mutex_t*) local_unnamed_addr #1

; Function Attrs: nounwind
define linkonce void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %this) local_unnamed_addr #4 align 2 {
entry:
  %state = getelementptr inbounds %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %this, i64 0, i32 0
  %0 = load atomic i64, i64* %state monotonic, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %expected.0 = phi i64 [ %0, %entry ], [ %3, %if.end ]
  %and = and i64 %expected.0, 2
  %tobool.not = icmp ne i64 %and, 0
  %cmp = icmp ult i64 %expected.0, 4
  %or.cond = or i1 %cmp, %tobool.not
  br i1 %or.cond, label %cleanup75, label %if.end

if.end:                                           ; preds = %while.cond
  %or = or i64 %expected.0, 2
  %1 = cmpxchg weak i64* %state, i64 %expected.0, i64 %or acquire monotonic
  %2 = extractvalue { i64, i1 } %1, 1
  %3 = extractvalue { i64, i1 } %1, 0
  br i1 %2, label %while.cond11, label %while.cond

while.cond11:                                     ; preds = %if.end, %cleanup70
  %.pn.pn = phi { i64, i1 } [ %.pn, %cleanup70 ], [ %1, %if.end ]
  %expected.3 = extractvalue { i64, i1 } %.pn.pn, 0
  %and13 = and i64 %expected.3, -4
  %4 = inttoptr i64 %and13 to %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*
  %tail14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %4, i64 0, i32 3
  %tail.0143 = load %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail14, align 8, !tbaa !100
  %cmp16144 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0143, null
  br i1 %cmp16144, label %while.body17, label %while.end23

while.body17:                                     ; preds = %while.cond11, %do.end
  %current.0145 = phi %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* [ %5, %do.end ], [ %4, %while.cond11 ]
  %next18 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %current.0145, i64 0, i32 1
  %5 = load %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %next18, align 8, !tbaa !102
  %cmp19.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %5, null
  br i1 %cmp19.not, label %if.then20, label %do.end

if.then20:                                        ; preds = %while.body17
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([130 x i8], [130 x i8]* @.str.5, i64 0, i64 0)) #15
  tail call void @abort() #15
  br label %do.end

do.end:                                           ; preds = %if.then20, %while.body17
  %prev = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %5, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %current.0145, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %prev, align 8, !tbaa !103
  %tail22 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %5, i64 0, i32 3
  %tail.0 = load %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail22, align 8, !tbaa !100
  %cmp16 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0, null
  br i1 %cmp16, label %while.body17, label %while.end23, !llvm.loop !104

while.end23:                                      ; preds = %do.end, %while.cond11
  %tail.0.lcssa = phi %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* [ %tail.0143, %while.cond11 ], [ %tail.0, %do.end ]
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0.lcssa, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail14, align 8, !tbaa !100
  %and25 = and i64 %expected.3, 1
  %tobool26.not = icmp eq i64 %and25, 0
  br i1 %tobool26.not, label %if.end35, label %if.then27

if.then27:                                        ; preds = %while.end23
  %and29 = and i64 %expected.3, -3
  %6 = cmpxchg weak i64* %state, i64 %expected.3, i64 %and29 acq_rel monotonic
  %7 = extractvalue { i64, i1 } %6, 1
  br i1 %7, label %cleanup75, label %cleanup70

if.end35:                                         ; preds = %while.end23
  %prev36 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0.lcssa, i64 0, i32 2
  %8 = load %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %prev36, align 8, !tbaa !103
  %cmp37 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %8, null
  br i1 %cmp37, label %while.body41, label %if.else62

while.body41:                                     ; preds = %if.end35, %if.end47
  %expected.5146 = phi i64 [ %11, %if.end47 ], [ %expected.3, %if.end35 ]
  %and43 = and i64 %expected.5146, 1
  %9 = cmpxchg weak i64* %state, i64 %expected.5146, i64 %and43 acq_rel monotonic
  %10 = extractvalue { i64, i1 } %9, 1
  br i1 %10, label %if.end66, label %if.end47

if.end47:                                         ; preds = %while.body41
  %11 = extractvalue { i64, i1 } %9, 0
  %cmp49 = icmp ult i64 %11, 4
  br i1 %cmp49, label %while.body41, label %cleanup70, !llvm.loop !105

if.else62:                                        ; preds = %if.end35
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %8, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail14, align 8, !tbaa !100
  %12 = atomicrmw and i64* %state, i64 -3 release
  br label %if.end66

if.end66:                                         ; preds = %while.body41, %if.else62
  %mutex.i103 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0.lcssa, i64 0, i32 0, i32 0
  %call.i104 = tail call i32 @pthread_mutex_lock(%struct.pthread_mutex_t* nonnull %mutex.i103) #15
  %should_park.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0.lcssa, i64 0, i32 0, i32 2
  store i8 0, i8* %should_park.i, align 8, !tbaa !98
  %condvar.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0.lcssa, i64 0, i32 0, i32 1
  %call.i101 = tail call i32 @pthread_cond_signal(%struct.pthread_mutex_t* nonnull %condvar.i) #15
  %call.i = tail call i32 @pthread_mutex_unlock(%struct.pthread_mutex_t* nonnull %mutex.i103) #15
  br label %cleanup75

cleanup70:                                        ; preds = %if.end47, %if.then27
  %.pn = phi { i64, i1 } [ %6, %if.then27 ], [ %9, %if.end47 ]
  fence acquire
  br label %while.cond11

cleanup75:                                        ; preds = %while.cond, %if.then27, %if.end66
  ret void
}

declare i32 @pthread_cond_signal(%struct.pthread_mutex_t*) local_unnamed_addr #1

declare i32 @pthread_mutex_unlock(%struct.pthread_mutex_t*) local_unnamed_addr #1

; Function Attrs: nounwind
define linkonce void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %this) local_unnamed_addr #4 align 2 {
entry:
  %node = alloca %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", align 8
  %state = getelementptr inbounds %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %this, i64 0, i32 0
  %0 = load atomic i64, i64* %state monotonic, align 8
  %1 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node to i8*
  %should_park.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, i64 0, i32 0, i32 2
  %mutex2.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, i64 0, i32 0, i32 0
  %condvar3.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, i64 0, i32 0, i32 1
  %next.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, i64 0, i32 1
  %tail.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, i64 0, i32 3
  %2 = ptrtoint %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node to i64
  %3 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %next.i to <2 x %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*>*
  br label %while.cond.outer

while.cond.outer:                                 ; preds = %while.cond.outer.backedge, %entry
  %expected.0.ph = phi i64 [ %0, %entry ], [ %expected.0.ph.be, %while.cond.outer.backedge ]
  %spinner.sroa.0.0.ph = phi i32 [ 40, %entry ], [ %spinner.sroa.0.0.ph.be, %while.cond.outer.backedge ]
  %and46 = and i64 %expected.0.ph, 1
  %tobool.not47 = icmp eq i64 %and46, 0
  br i1 %tobool.not47, label %if.then, label %if.end4

if.then:                                          ; preds = %while.cond.outer, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit
  %expected.048 = phi i64 [ %6, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit ], [ %expected.0.ph, %while.cond.outer ]
  %or = or i64 %expected.048, 1
  %4 = cmpxchg weak i64* %state, i64 %expected.048, i64 %or acquire monotonic
  %5 = extractvalue { i64, i1 } %4, 1
  br i1 %5, label %cleanup23, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit: ; preds = %if.then
  %6 = extractvalue { i64, i1 } %4, 0
  %and = and i64 %6, 1
  %tobool.not = icmp eq i64 %and, 0
  br i1 %tobool.not, label %if.then, label %if.end4.loopexit

if.end4.loopexit:                                 ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit
  %7 = extractvalue { i64, i1 } %4, 0
  br label %if.end4

if.end4:                                          ; preds = %if.end4.loopexit, %while.cond.outer
  %expected.0.lcssa = phi i64 [ %expected.0.ph, %while.cond.outer ], [ %7, %if.end4.loopexit ]
  %cmp.not = icmp ugt i64 %expected.0.lcssa, 3
  %cmp.i = icmp sgt i32 %spinner.sroa.0.0.ph, 0
  %or.cond = and i1 %cmp.i, %cmp.not
  br i1 %or.cond, label %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit, label %if.end9

_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit: ; preds = %if.end4
  %cmp4.i = icmp sgt i32 %spinner.sroa.0.0.ph, 1
  br i1 %cmp4.i, label %if.then7, label %if.end9

if.then7:                                         ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit
  %dec.i = add nsw i32 %spinner.sroa.0.0.ph, -1
  call void @halide_thread_yield() #15
  %8 = load atomic i64, i64* %state monotonic, align 8
  br label %while.cond.outer.backedge

if.end9:                                          ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit, %if.end4
  %spinner.sroa.0.2 = phi i32 [ %spinner.sroa.0.0.ph, %if.end4 ], [ 0, %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit ]
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %1) #12
  store i8 0, i8* %should_park.i.i, align 8, !tbaa !98
  %call.i.i29 = call i32 @pthread_mutex_init(%struct.pthread_mutex_t* nonnull %mutex2.i.i, i8* null) #15
  %call4.i.i = call i32 @pthread_cond_init(%struct.pthread_mutex_t* nonnull %condvar3.i.i, i8* null) #15
  store <2 x %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*> zeroinitializer, <2 x %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*>* %3, align 8, !tbaa !14
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* null, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail.i, align 8, !tbaa !100
  store i8 1, i8* %should_park.i.i, align 8, !tbaa !98
  %and10 = and i64 %expected.0.lcssa, -4
  %cmp11 = icmp eq i64 %and10, 0
  br i1 %cmp11, label %if.then12, label %if.else

if.then12:                                        ; preds = %if.end9
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail.i, align 8, !tbaa !100
  br label %if.end13

if.else:                                          ; preds = %if.end9
  %9 = inttoptr i64 %and10 to %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %9, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %next.i, align 8, !tbaa !102
  br label %if.end13

if.end13:                                         ; preds = %if.else, %if.then12
  %and15 = and i64 %expected.0.lcssa, 3
  %or16 = or i64 %and15, %2
  %10 = cmpxchg weak i64* %state, i64 %expected.0.lcssa, i64 %or16 release monotonic
  %11 = extractvalue { i64, i1 } %10, 1
  br i1 %11, label %if.then19, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_release_relaxedEPyS4_S4_.exit

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_release_relaxedEPyS4_S4_.exit: ; preds = %if.end13
  %12 = extractvalue { i64, i1 } %10, 0
  br label %if.end22

if.then19:                                        ; preds = %if.end13
  %call.i = call i32 @pthread_mutex_lock(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #15
  %13 = load i8, i8* %should_park.i.i, align 8, !tbaa !98, !range !21
  %tobool.not6.i = icmp eq i8 %13, 0
  br i1 %tobool.not6.i, label %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, label %while.body.i

while.body.i:                                     ; preds = %if.then19, %while.body.i
  %call3.i = call i32 @pthread_cond_wait(%struct.pthread_mutex_t* nonnull %condvar3.i.i, %struct.pthread_mutex_t* nonnull %mutex2.i.i) #15
  %14 = load i8, i8* %should_park.i.i, align 8, !tbaa !98, !range !21
  %tobool.not.i = icmp eq i8 %14, 0
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, label %while.body.i, !llvm.loop !106

_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit: ; preds = %while.body.i, %if.then19
  %call5.i = call i32 @pthread_mutex_unlock(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #15
  %15 = load atomic i64, i64* %state monotonic, align 8
  br label %if.end22

if.end22:                                         ; preds = %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_release_relaxedEPyS4_S4_.exit
  %expected.3 = phi i64 [ %15, %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit ], [ %12, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_release_relaxedEPyS4_S4_.exit ]
  %spinner.sroa.0.3 = phi i32 [ 40, %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit ], [ %spinner.sroa.0.2, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_release_relaxedEPyS4_S4_.exit ]
  %call.i.i = call i32 @pthread_cond_destroy(%struct.pthread_mutex_t* nonnull %condvar3.i.i) #15
  %call2.i.i = call i32 @pthread_mutex_destroy(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #15
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %1) #12
  br label %while.cond.outer.backedge

while.cond.outer.backedge:                        ; preds = %if.end22, %if.then7
  %expected.0.ph.be = phi i64 [ %8, %if.then7 ], [ %expected.3, %if.end22 ]
  %spinner.sroa.0.0.ph.be = phi i32 [ %dec.i, %if.then7 ], [ %spinner.sroa.0.3, %if.end22 ]
  br label %while.cond.outer

cleanup23:                                        ; preds = %if.then
  ret void
}

declare i32 @pthread_mutex_init(%struct.pthread_mutex_t*, i8*) local_unnamed_addr #1

declare i32 @pthread_cond_init(%struct.pthread_mutex_t*, i8*) local_unnamed_addr #1

declare i32 @pthread_cond_wait(%struct.pthread_mutex_t*, %struct.pthread_mutex_t*) local_unnamed_addr #1

declare i32 @pthread_cond_destroy(%struct.pthread_mutex_t*) local_unnamed_addr #1

declare i32 @pthread_mutex_destroy(%struct.pthread_mutex_t*) local_unnamed_addr #1

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr zeroext i1 @_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control8validateERNS2_15validate_actionE(%"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* nonnull dereferenceable(16) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) unnamed_addr #2 align 2 {
entry:
  %lock_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %this, i64 0, i32 1
  %0 = load i64*, i64** %lock_state, align 8, !tbaa !50
  %1 = load atomic i64, i64* %0 monotonic, align 8
  %cmp = icmp eq i64 %1, 3
  ret i1 %cmp
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr void @_ZN6Halide7Runtime8Internal15Synchronization15parking_control12before_sleepEv(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this) unnamed_addr #2 align 2 {
entry:
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr i64 @_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control6unparkEib(%"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* nonnull dereferenceable(16) %this, i32 %unparked, i1 zeroext %more_waiters) unnamed_addr #2 align 2 {
entry:
  %0 = select i1 %more_waiters, i64 2, i64 0
  %lock_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %this, i64 0, i32 1
  %1 = load i64*, i64** %lock_state, align 8, !tbaa !50
  store atomic i64 %0, i64* %1 release, align 8
  ret i64 0
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr void @_ZN6Halide7Runtime8Internal15Synchronization15parking_control16requeue_callbackERKNS2_15validate_actionEbb(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action, i1 zeroext %one_to_wake, i1 zeroext %some_requeued) unnamed_addr #2 align 2 {
entry:
  ret void
}

; Function Attrs: nounwind
define weak void @halide_cond_broadcast(%struct.halide_mutex* %cond) local_unnamed_addr #4 {
entry:
  %control.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", align 8
  %state.i = getelementptr %struct.halide_mutex, %struct.halide_mutex* %cond, i64 0, i32 0, i64 0
  %0 = load atomic i64, i64* %state.i monotonic, align 8
  %cmp.i = icmp eq i64 %0, 0
  br i1 %cmp.i, label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond9broadcastEv.exit, label %if.end.i

if.end.i:                                         ; preds = %entry
  %1 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1) #12
  %2 = inttoptr i64 %0 to %"class.Halide::Runtime::Internal::Synchronization::word_lock"*
  %3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization25broadcast_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8, !tbaa !48
  %cond_state2.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 1
  store i64* %state.i, i64** %cond_state2.i.i, align 8, !tbaa !107
  %mutex3.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 2
  store %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %2, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex3.i.i, align 8, !tbaa !109
  %4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0
  %5 = ptrtoint %struct.halide_mutex* %cond to i64
  %call.i = call i32 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control14unpark_requeueEyyy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %4, i64 %5, i64 %0, i64 0) #15
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1) #12
  br label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond9broadcastEv.exit

_ZN6Halide7Runtime8Internal15Synchronization9fast_cond9broadcastEv.exit: ; preds = %if.end.i, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define weak zeroext i1 @halide_default_semaphore_try_acquire(%struct.halide_semaphore_t* %s, i32 %n) #0 {
entry:
  %cmp = icmp eq i32 %n, 0
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %value = bitcast %struct.halide_semaphore_t* %s to i32*
  %0 = load atomic i32, i32* %value acquire, align 4
  %sub12 = sub nsw i32 %0, %n
  %cmp113 = icmp sgt i32 %sub12, -1
  br i1 %cmp113, label %land.rhs, label %return

land.rhs:                                         ; preds = %if.end, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit
  %sub15 = phi i32 [ %sub, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit ], [ %sub12, %if.end ]
  %expected.014 = phi i32 [ %3, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit ], [ %0, %if.end ]
  %1 = cmpxchg weak i32* %value, i32 %expected.014, i32 %sub15 acq_rel monotonic
  %2 = extractvalue { i32, i1 } %1, 1
  br i1 %2, label %return.loopexit, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit: ; preds = %land.rhs
  %3 = extractvalue { i32, i1 } %1, 0
  %sub = sub nsw i32 %3, %n
  %cmp1 = icmp sgt i32 %sub, -1
  br i1 %cmp1, label %land.rhs, label %return.loopexit

return.loopexit:                                  ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit, %land.rhs
  %4 = extractvalue { i32, i1 } %1, 1
  br label %return

return:                                           ; preds = %return.loopexit, %if.end, %entry
  %retval.0 = phi i1 [ true, %entry ], [ false, %if.end ], [ %4, %return.loopexit ]
  ret i1 %retval.0
}

; Function Attrs: nounwind
define weak void @halide_cond_wait(%struct.halide_mutex* %cond, %struct.halide_mutex* %mutex) local_unnamed_addr #4 {
entry:
  %control.i.i.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", align 8
  %control.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", align 8
  %0 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %0) #12
  %state.i = getelementptr %struct.halide_mutex, %struct.halide_mutex* %cond, i64 0, i32 0, i64 0
  %1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization20wait_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %1, align 8, !tbaa !48
  %cond_state2.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 1
  store i64* %state.i, i64** %cond_state2.i.i, align 8, !tbaa !110
  %mutex3.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 2
  %2 = bitcast %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex3.i.i to %struct.halide_mutex**
  store %struct.halide_mutex* %mutex, %struct.halide_mutex** %2, align 8, !tbaa !112
  %3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0
  %4 = ptrtoint %struct.halide_mutex* %cond to i64
  %call.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control4parkEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %3, i64 %4) #15
  %5 = ptrtoint %struct.halide_mutex* %mutex to i64
  %cmp.not.i = icmp eq i64 %call.i, %5
  %6 = getelementptr %struct.halide_mutex, %struct.halide_mutex* %mutex, i64 0, i32 0, i64 0
  br i1 %cmp.not.i, label %if.else.i, label %if.then.i

if.then.i:                                        ; preds = %entry
  %7 = cmpxchg weak i64* %6, i64 0, i64 1 acquire monotonic
  %8 = extractvalue { i64, i1 } %7, 1
  br i1 %8, label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit, label %if.then.i.i

if.then.i.i:                                      ; preds = %if.then.i
  %9 = load atomic i64, i64* %6 monotonic, align 8
  %10 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i.i to i8*
  %11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i.i, i64 0, i32 0, i32 0
  %lock_state2.i.i.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i.i, i64 0, i32 1
  %12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i.i, i64 0, i32 0
  br label %while.cond.outer.i.i.i

while.cond.outer.i.i.i:                           ; preds = %while.cond.outer.i.i.i.backedge, %if.then.i.i
  %expected.0.ph.i.i.i = phi i64 [ %9, %if.then.i.i ], [ %expected.0.ph.i.i.i.be, %while.cond.outer.i.i.i.backedge ]
  %spinner.sroa.0.0.ph.i.i.i = phi i32 [ 40, %if.then.i.i ], [ %spinner.sroa.0.0.ph.i.i.i.be, %while.cond.outer.i.i.i.backedge ]
  %and55.i.i.i = and i64 %expected.0.ph.i.i.i, 1
  %tobool.not56.i.i.i = icmp eq i64 %and55.i.i.i, 0
  br i1 %tobool.not56.i.i.i, label %if.then.i.i.i, label %if.end4.i.i.i

if.then.i.i.i:                                    ; preds = %while.cond.outer.i.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i.i
  %expected.057.i.i.i = phi i64 [ %15, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i.i ], [ %expected.0.ph.i.i.i, %while.cond.outer.i.i.i ]
  %or.i.i.i = or i64 %expected.057.i.i.i, 1
  %13 = cmpxchg weak i64* %6, i64 %expected.057.i.i.i, i64 %or.i.i.i acquire monotonic
  %14 = extractvalue { i64, i1 } %13, 1
  br i1 %14, label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i.i

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i.i: ; preds = %if.then.i.i.i
  %15 = extractvalue { i64, i1 } %13, 0
  %and.i.i.i = and i64 %15, 1
  %tobool.not.i.i.i = icmp eq i64 %and.i.i.i, 0
  br i1 %tobool.not.i.i.i, label %if.then.i.i.i, label %if.end4.i.i.i.loopexit

if.end4.i.i.i.loopexit:                           ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i.i
  %16 = extractvalue { i64, i1 } %13, 0
  br label %if.end4.i.i.i

if.end4.i.i.i:                                    ; preds = %if.end4.i.i.i.loopexit, %while.cond.outer.i.i.i
  %expected.0.lcssa.i.i.i = phi i64 [ %expected.0.ph.i.i.i, %while.cond.outer.i.i.i ], [ %16, %if.end4.i.i.i.loopexit ]
  %cmp.i.i.i.i = icmp sgt i32 %spinner.sroa.0.0.ph.i.i.i, 0
  br i1 %cmp.i.i.i.i, label %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i.i, label %if.end8.i.i.i

_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i.i: ; preds = %if.end4.i.i.i
  %cmp4.i.not.i.i.i = icmp eq i32 %spinner.sroa.0.0.ph.i.i.i, 1
  br i1 %cmp4.i.not.i.i.i, label %if.end8.i.i.i, label %if.then6.i.i.i

if.then6.i.i.i:                                   ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i.i
  %dec.i.i.i.i = add nsw i32 %spinner.sroa.0.0.ph.i.i.i, -1
  call void @halide_thread_yield() #15
  %17 = load atomic i64, i64* %6 monotonic, align 8
  br label %while.cond.outer.i.i.i.backedge

if.end8.i.i.i:                                    ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i.i, %if.end4.i.i.i
  %spinner.sroa.0.152.i.i.i = phi i32 [ 0, %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i.i ], [ %spinner.sroa.0.0.ph.i.i.i, %if.end4.i.i.i ]
  %and9.i.i.i = and i64 %expected.0.lcssa.i.i.i, 2
  %cmp.i.i.i = icmp eq i64 %and9.i.i.i, 0
  br i1 %cmp.i.i.i, label %if.then10.i.i.i, label %if.end19.i.i.i

if.then10.i.i.i:                                  ; preds = %if.end8.i.i.i
  %or12.i.i.i = or i64 %expected.0.lcssa.i.i.i, 2
  %18 = cmpxchg weak i64* %6, i64 %expected.0.lcssa.i.i.i, i64 %or12.i.i.i monotonic monotonic
  %19 = extractvalue { i64, i1 } %18, 1
  br i1 %19, label %if.end19.i.i.i, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i.i

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i.i: ; preds = %if.then10.i.i.i
  %20 = extractvalue { i64, i1 } %18, 0
  br label %while.cond.outer.i.i.i.backedge

if.end19.i.i.i:                                   ; preds = %if.then10.i.i.i, %if.end8.i.i.i
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %10) #12
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %11, align 8, !tbaa !48
  store i64* %6, i64** %lock_state2.i.i.i.i, align 8, !tbaa !50
  %call21.i.i.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control4parkEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %12, i64 %5) #15
  %cmp22.i.i.i = icmp eq i64 %call21.i.i.i, %5
  br i1 %cmp22.i.i.i, label %cleanup30.critedge.i.i.i, label %if.end24.i.i.i

if.end24.i.i.i:                                   ; preds = %if.end19.i.i.i
  %21 = load atomic i64, i64* %6 monotonic, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %10) #12
  br label %while.cond.outer.i.i.i.backedge

while.cond.outer.i.i.i.backedge:                  ; preds = %if.end24.i.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i.i, %if.then6.i.i.i
  %expected.0.ph.i.i.i.be = phi i64 [ %20, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i.i ], [ %21, %if.end24.i.i.i ], [ %17, %if.then6.i.i.i ]
  %spinner.sroa.0.0.ph.i.i.i.be = phi i32 [ %spinner.sroa.0.152.i.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i.i ], [ 40, %if.end24.i.i.i ], [ %dec.i.i.i.i, %if.then6.i.i.i ]
  br label %while.cond.outer.i.i.i

cleanup30.critedge.i.i.i:                         ; preds = %if.end19.i.i.i
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %10) #12
  br label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit

if.else.i:                                        ; preds = %entry
  %22 = load atomic i64, i64* %6 monotonic, align 8
  %and.i = and i64 %22, 1
  %tobool.not.i = icmp eq i64 %and.i, 0
  br i1 %tobool.not.i, label %if.then2.i, label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit

if.then2.i:                                       ; preds = %if.else.i
  call void @halide_print(i8* null, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @.str.5.6, i64 0, i64 0)) #15
  call void @abort() #15
  br label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit

_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit: ; preds = %if.then.i.i.i, %if.then2.i, %if.else.i, %cleanup30.critedge.i.i.i, %if.then.i
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %0) #12
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_loop_task(i8* %user_context, i32 (i8*, i32, i32, i8*, i8*)* %f, i32 %min, i32 %size, i8* %closure, i8* %task_parent) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)*, i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)** @_ZN6Halide7Runtime8Internal19custom_do_loop_taskE, align 8, !tbaa !14
  %call = tail call i32 %0(i8* %user_context, i32 (i8*, i32, i32, i8*, i8*)* %f, i32 %min, i32 %size, i8* %closure, i8* %task_parent) #15
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_task(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %idx, i8* %closure) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 8, !tbaa !14
  %call = tail call i32 %0(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %idx, i8* %closure) #15
  ret i32 %call
}

; Function Attrs: nounwind
define linkonce i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control4parkEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i64 %addr) local_unnamed_addr #4 align 2 {
entry:
  %queue_data = alloca %"struct.Halide::Runtime::Internal::Synchronization::queue_data", align 8
  %action = alloca %"struct.Halide::Runtime::Internal::Synchronization::validate_action", align 8
  %0 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %0) #12
  %should_park.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 0, i32 2
  store i8 0, i8* %should_park.i.i, align 8, !tbaa !98
  %mutex2.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 0, i32 0
  %call.i.i = call i32 @pthread_mutex_init(%struct.pthread_mutex_t* nonnull %mutex2.i.i, i8* null) #15
  %condvar3.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 0, i32 1
  %call4.i.i = call i32 @pthread_cond_init(%struct.pthread_mutex_t* nonnull %condvar3.i.i, i8* null) #15
  %sleep_address.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 1
  store i64 0, i64* %sleep_address.i, align 8, !tbaa !113
  %next.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* null, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next.i, align 8, !tbaa !88
  %unpark_info.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 3
  store i64 0, i64* %unpark_info.i, align 8, !tbaa !97
  %call = call nonnull align 8 dereferenceable(24) %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* @_ZN6Halide7Runtime8Internal15Synchronization11lock_bucketEy(i64 %addr) #16
  %1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1) #12
  store i8 0, i8* %1, align 8, !tbaa !114
  %invalid_unpark_info.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 2
  store i64 0, i64* %invalid_unpark_info.i, align 8, !tbaa !116
  %2 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::parking_control"* %this to i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)***
  %vtable = load i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)**, i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)*** %2, align 8, !tbaa !48
  %3 = load i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)*, i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)** %vtable, align 8
  %call2 = call zeroext i1 %3(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) #15
  br i1 %call2, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %state.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0, i32 0
  %4 = atomicrmw and i64* %state.i, i64 -2 release
  %and.i = and i64 %4, 2
  %cmp.i = icmp ne i64 %and.i, 0
  %cmp3.not.i = icmp ult i64 %4, 4
  %or.cond.i = or i1 %cmp3.not.i, %cmp.i
  br i1 %or.cond.i, label %cleanup, label %if.then.i

if.then.i:                                        ; preds = %if.then
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0
  call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #15
  br label %cleanup

if.end:                                           ; preds = %entry
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* null, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next.i, align 8, !tbaa !88
  store i64 %addr, i64* %sleep_address.i, align 8, !tbaa !113
  store i8 1, i8* %should_park.i.i, align 8, !tbaa !98
  %head = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 1
  %5 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head, align 8, !tbaa !117
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %5, null
  %tail = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 2
  %6 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8
  %next4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %6, i64 0, i32 2
  %head.sink = select i1 %cmp.not, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next4
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head.sink, align 8, !tbaa !14
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8, !tbaa !93
  %state.i23 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0, i32 0
  %7 = atomicrmw and i64* %state.i23, i64 -2 release
  %and.i24 = and i64 %7, 2
  %cmp.i25 = icmp ne i64 %and.i24, 0
  %cmp3.not.i26 = icmp ult i64 %7, 4
  %or.cond.i27 = or i1 %cmp3.not.i26, %cmp.i25
  br i1 %or.cond.i27, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit29, label %if.then.i28

if.then.i28:                                      ; preds = %if.end
  %mutex8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0
  call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex8) #15
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit29

_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit29: ; preds = %if.then.i28, %if.end
  %8 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::parking_control"* %this to void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)***
  %vtable9 = load void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)**, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)*** %8, align 8, !tbaa !48
  %vfn10 = getelementptr inbounds void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)*, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)** %vtable9, i64 1
  %9 = load void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)*, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)** %vfn10, align 8
  call void %9(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this) #15
  %call.i = call i32 @pthread_mutex_lock(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #15
  %10 = load i8, i8* %should_park.i.i, align 8, !tbaa !98, !range !21
  %tobool.not6.i = icmp eq i8 %10, 0
  br i1 %tobool.not6.i, label %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, label %while.body.i

while.body.i:                                     ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit29, %while.body.i
  %call3.i = call i32 @pthread_cond_wait(%struct.pthread_mutex_t* nonnull %condvar3.i.i, %struct.pthread_mutex_t* nonnull %mutex2.i.i) #15
  %11 = load i8, i8* %should_park.i.i, align 8, !tbaa !98, !range !21
  %tobool.not.i = icmp eq i8 %11, 0
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, label %while.body.i, !llvm.loop !106

_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit: ; preds = %while.body.i, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit29
  %call5.i = call i32 @pthread_mutex_unlock(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #15
  br label %cleanup

cleanup:                                          ; preds = %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, %if.then.i, %if.then
  %unpark_info.i.sink = phi i64* [ %unpark_info.i, %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit ], [ %invalid_unpark_info.i, %if.then ], [ %invalid_unpark_info.i, %if.then.i ]
  %12 = load i64, i64* %unpark_info.i.sink, align 8, !tbaa !22
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1) #12
  %call.i.i22 = call i32 @pthread_cond_destroy(%struct.pthread_mutex_t* nonnull %condvar3.i.i) #15
  %call2.i.i = call i32 @pthread_mutex_destroy(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #15
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %0) #12
  ret i64 %12
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr zeroext i1 @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control8validateERNS2_15validate_actionE(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) unnamed_addr #2 align 2 {
entry:
  %cond_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 1
  %0 = load i64*, i64** %cond_state, align 8, !tbaa !110
  %1 = load atomic i64, i64* %0 monotonic, align 8
  %cmp = icmp eq i64 %1, 0
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 2
  %2 = load %"class.Halide::Runtime::Internal::Synchronization::word_lock"*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex, align 8, !tbaa !112
  %3 = ptrtoint %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %2 to i64
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store atomic i64 %3, i64* %0 monotonic, align 8
  br label %cleanup

if.else:                                          ; preds = %entry
  %cmp4.not = icmp eq i64 %1, %3
  br i1 %cmp4.not, label %cleanup, label %if.then5

if.then5:                                         ; preds = %if.else
  %invalid_unpark_info = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 2
  store i64 %3, i64* %invalid_unpark_info, align 8, !tbaa !116
  br label %cleanup

cleanup:                                          ; preds = %if.then5, %if.else, %if.then
  %retval.0 = phi i1 [ false, %if.then5 ], [ true, %if.else ], [ true, %if.then ]
  ret i1 %retval.0
}

; Function Attrs: nounwind
define linkonce_odr void @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control12before_sleepEv(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this) unnamed_addr #4 align 2 {
entry:
  %control.i.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", align 8
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 2
  %0 = load %"class.Halide::Runtime::Internal::Synchronization::word_lock"*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex, align 8, !tbaa !112
  %state.i = getelementptr inbounds %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %0, i64 0, i32 0
  %1 = cmpxchg weak i64* %state.i, i64 1, i64 0 release monotonic
  %2 = extractvalue { i64, i1 } %1, 1
  br i1 %2, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %3 = cmpxchg i64* %state.i, i64 1, i64 0 release monotonic
  %4 = extractvalue { i64, i1 } %3, 1
  br i1 %4, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit, label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i
  %5 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %5) #12
  %6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %6, align 8, !tbaa !48
  %lock_state2.i.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 1
  store i64* %state.i, i64** %lock_state2.i.i.i, align 8, !tbaa !50
  %7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0
  %8 = ptrtoint %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %0 to i64
  %call3.i.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control10unpark_oneEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %7, i64 %8) #15
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %5) #12
  br label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit

_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit: ; preds = %if.end.i.i, %if.then.i, %entry
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr i64 @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control6unparkEib(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this, i32 %unparked, i1 zeroext %more_waiters) unnamed_addr #2 align 2 {
entry:
  br i1 %more_waiters, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %cond_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 1
  %0 = load i64*, i64** %cond_state, align 8, !tbaa !110
  store atomic i64 0, i64* %0 monotonic, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i64 0
}

; Function Attrs: nounwind
define linkonce i32 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control14unpark_requeueEyyy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i64 %addr_from, i64 %addr_to, i64 %unpark_info) local_unnamed_addr #4 align 2 {
entry:
  %buckets = alloca %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", align 8
  %action = alloca %"struct.Halide::Runtime::Internal::Synchronization::validate_action", align 8
  %0 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %buckets to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %0) #12
  call void @_ZN6Halide7Runtime8Internal15Synchronization16lock_bucket_pairEyy(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* nonnull sret(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair") align 8 %buckets, i64 %addr_from, i64 %addr_to) #16
  %1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1) #12
  store i8 0, i8* %1, align 8, !tbaa !114
  %invalid_unpark_info.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 2
  store i64 0, i64* %invalid_unpark_info.i, align 8, !tbaa !116
  %2 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::parking_control"* %this to i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)***
  %vtable = load i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)**, i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)*** %2, align 8, !tbaa !48
  %3 = load i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)*, i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)** %vtable, align 8
  %call = call zeroext i1 %3(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) #15
  br i1 %call, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  call void @_ZN6Halide7Runtime8Internal15Synchronization18unlock_bucket_pairERNS2_11bucket_pairE(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* nonnull align 8 dereferenceable(16) %buckets) #16
  br label %cleanup

if.end:                                           ; preds = %entry
  %from = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %buckets, i64 0, i32 0
  %4 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %from, align 8, !tbaa !118
  %head = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %4, i64 0, i32 1
  %5 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head, align 8, !tbaa !14
  %cmp.not92 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %5, null
  br i1 %cmp.not92, label %if.end38, label %while.body

while.body:                                       ; preds = %if.end, %if.end22
  %wakeup.098 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %wakeup.2, %if.end22 ], [ null, %if.end ]
  %requeue_tail.097 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %requeue_tail.2, %if.end22 ], [ null, %if.end ]
  %requeue.096 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %requeue.3, %if.end22 ], [ null, %if.end ]
  %data.095 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %7, %if.end22 ], [ %5, %if.end ]
  %prev.094 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %prev.1, %if.end22 ], [ null, %if.end ]
  %data_location.093 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** [ %data_location.1, %if.end22 ], [ %head, %if.end ]
  %sleep_address = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.095, i64 0, i32 1
  %6 = load atomic i64, i64* %sleep_address monotonic, align 8
  %next2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.095, i64 0, i32 2
  %7 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next2, align 8, !tbaa !88
  %cmp3 = icmp eq i64 %6, %addr_from
  br i1 %cmp3, label %if.then4, label %if.end22

if.then4:                                         ; preds = %while.body
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %7, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %data_location.093, align 8, !tbaa !14
  %8 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %from, align 8, !tbaa !118
  %tail = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %8, i64 0, i32 2
  %9 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8, !tbaa !93
  %cmp6 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %9, %data.095
  br i1 %cmp6, label %if.then7, label %if.end10

if.then7:                                         ; preds = %if.then4
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %prev.094, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8, !tbaa !93
  br label %if.end10

if.end10:                                         ; preds = %if.then7, %if.then4
  %10 = load i8, i8* %1, align 8, !tbaa !114, !range !21
  %tobool = icmp ne i8 %10, 0
  %cmp11 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.098, null
  %or.cond = and i1 %cmp11, %tobool
  br i1 %or.cond, label %if.end22, label %if.else

if.else:                                          ; preds = %if.end10
  %cmp13 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue.096, null
  br i1 %cmp13, label %if.end17, label %if.else15

if.else15:                                        ; preds = %if.else
  %next16 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue_tail.097, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.095, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next16, align 8, !tbaa !88
  br label %if.end17

if.end17:                                         ; preds = %if.else15, %if.else
  %requeue.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %requeue.096, %if.else15 ], [ %data.095, %if.else ]
  store atomic i64 %addr_to, i64* %sleep_address monotonic, align 8
  br label %if.end22

if.end22:                                         ; preds = %if.end17, %if.end10, %while.body
  %data_location.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** [ %data_location.093, %if.end10 ], [ %data_location.093, %if.end17 ], [ %next2, %while.body ]
  %prev.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %prev.094, %if.end10 ], [ %prev.094, %if.end17 ], [ %data.095, %while.body ]
  %requeue.3 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %requeue.096, %if.end10 ], [ %requeue.1, %if.end17 ], [ %requeue.096, %while.body ]
  %requeue_tail.2 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %requeue_tail.097, %if.end10 ], [ %data.095, %if.end17 ], [ %requeue_tail.097, %while.body ]
  %wakeup.2 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %data.095, %if.end10 ], [ %wakeup.098, %if.end17 ], [ %wakeup.098, %while.body ]
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %7, null
  br i1 %cmp.not, label %while.end, label %while.body, !llvm.loop !120

while.end:                                        ; preds = %if.end22
  %cmp23.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue.3, null
  br i1 %cmp23.not, label %if.end38, label %if.then24

if.then24:                                        ; preds = %while.end
  %next25 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue_tail.2, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* null, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next25, align 8, !tbaa !88
  %to = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %buckets, i64 0, i32 1
  %11 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %to, align 8, !tbaa !121
  %head26 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %11, i64 0, i32 1
  %12 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head26, align 8, !tbaa !117
  %cmp27 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %12, null
  br i1 %cmp27, label %if.end35, label %if.else31

if.else31:                                        ; preds = %if.then24
  %tail33 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %11, i64 0, i32 2
  %13 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail33, align 8, !tbaa !93
  %next34 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %13, i64 0, i32 2
  br label %if.end35

if.end35:                                         ; preds = %if.else31, %if.then24
  %next34.sink = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** [ %next34, %if.else31 ], [ %head26, %if.then24 ]
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue.3, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next34.sink, align 8, !tbaa !14
  %tail37 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %11, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue_tail.2, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail37, align 8, !tbaa !93
  br label %if.end38

if.end38:                                         ; preds = %if.end35, %while.end, %if.end
  %cmp23106 = phi i1 [ true, %if.end35 ], [ false, %while.end ], [ false, %if.end ]
  %wakeup.0.lcssa105 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %wakeup.2, %if.end35 ], [ %wakeup.2, %while.end ], [ null, %if.end ]
  %cmp39 = icmp ne %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.0.lcssa105, null
  %14 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::parking_control"* %this to void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)***
  %vtable41 = load void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)**, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)*** %14, align 8, !tbaa !48
  %vfn42 = getelementptr inbounds void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)*, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)** %vtable41, i64 3
  %15 = load void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)*, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)** %vfn42, align 8
  call void %15(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action, i1 zeroext %cmp39, i1 zeroext %cmp23106) #15
  br i1 %cmp39, label %if.then44, label %if.else48

if.then44:                                        ; preds = %if.end38
  %unpark_info45 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.0.lcssa105, i64 0, i32 3
  store i64 %unpark_info, i64* %unpark_info45, align 8, !tbaa !97
  %mutex.i89 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.0.lcssa105, i64 0, i32 0, i32 0
  %call.i90 = call i32 @pthread_mutex_lock(%struct.pthread_mutex_t* nonnull %mutex.i89) #15
  call void @_ZN6Halide7Runtime8Internal15Synchronization18unlock_bucket_pairERNS2_11bucket_pairE(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* nonnull align 8 dereferenceable(16) %buckets) #16
  %should_park.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.0.lcssa105, i64 0, i32 0, i32 2
  store i8 0, i8* %should_park.i, align 8, !tbaa !98
  %condvar.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.0.lcssa105, i64 0, i32 0, i32 1
  %call.i88 = call i32 @pthread_cond_signal(%struct.pthread_mutex_t* nonnull %condvar.i) #15
  %call.i = call i32 @pthread_mutex_unlock(%struct.pthread_mutex_t* nonnull %mutex.i89) #15
  br label %if.end49

if.else48:                                        ; preds = %if.end38
  call void @_ZN6Halide7Runtime8Internal15Synchronization18unlock_bucket_pairERNS2_11bucket_pairE(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* nonnull align 8 dereferenceable(16) %buckets) #16
  br label %if.end49

if.end49:                                         ; preds = %if.else48, %if.then44
  %16 = load i8, i8* %1, align 8
  %17 = and i8 %16, 1
  %tobool52 = icmp ne i8 %17, 0
  %18 = and i1 %cmp39, %tobool52
  %conv = zext i1 %18 to i32
  br label %cleanup

cleanup:                                          ; preds = %if.end49, %if.then
  %retval.0 = phi i32 [ %conv, %if.end49 ], [ 0, %if.then ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %0) #12
  ret i32 %retval.0
}

; Function Attrs: nounwind
define linkonce void @_ZN6Halide7Runtime8Internal15Synchronization16lock_bucket_pairEyy(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* noalias sret(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair") align 8 %agg.result, i64 %addr_from, i64 %addr_to) local_unnamed_addr #4 {
entry:
  %mul.i = mul i64 %addr_from, -7046029254386353131
  %shr.i = lshr i64 %mul.i, 54
  %mul.i37 = mul i64 %addr_to, -7046029254386353131
  %shr.i38 = lshr i64 %mul.i37, 54
  %cmp = icmp eq i64 %shr.i, %shr.i38
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i
  %state.i42 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx, i64 0, i32 0, i32 0
  %0 = cmpxchg weak i64* %state.i42, i64 0, i64 1 acquire monotonic
  %1 = extractvalue { i64, i1 } %0, 1
  br i1 %1, label %cleanup, label %if.then.i43

if.then.i43:                                      ; preds = %if.then
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #15
  br label %cleanup

if.else:                                          ; preds = %entry
  %cmp2 = icmp ult i64 %shr.i, %shr.i38
  br i1 %cmp2, label %if.then3, label %if.else9

if.then3:                                         ; preds = %if.else
  %arrayidx5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i
  %arrayidx6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i38
  %state.i52 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx5, i64 0, i32 0, i32 0
  %2 = cmpxchg weak i64* %state.i52, i64 0, i64 1 acquire monotonic
  %3 = extractvalue { i64, i1 } %2, 1
  br i1 %3, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54, label %if.then.i53

if.then.i53:                                      ; preds = %if.then3
  %mutex7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx5, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex7) #15
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54

_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54: ; preds = %if.then.i53, %if.then3
  %state.i49 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx6, i64 0, i32 0, i32 0
  %4 = cmpxchg weak i64* %state.i49, i64 0, i64 1 acquire monotonic
  %5 = extractvalue { i64, i1 } %4, 1
  br i1 %5, label %cleanup, label %if.then.i50

if.then.i50:                                      ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54
  %mutex8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx6, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex8) #15
  br label %cleanup

if.else9:                                         ; preds = %if.else
  %arrayidx11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i38
  %arrayidx13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i
  %state.i39 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx11, i64 0, i32 0, i32 0
  %6 = cmpxchg weak i64* %state.i39, i64 0, i64 1 acquire monotonic
  %7 = extractvalue { i64, i1 } %6, 1
  br i1 %7, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41, label %if.then.i40

if.then.i40:                                      ; preds = %if.else9
  %mutex14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx11, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex14) #15
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41

_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41: ; preds = %if.then.i40, %if.else9
  %state.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx13, i64 0, i32 0, i32 0
  %8 = cmpxchg weak i64* %state.i, i64 0, i64 1 acquire monotonic
  %9 = extractvalue { i64, i1 } %8, 1
  br i1 %9, label %cleanup, label %if.then.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41
  %mutex15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx13, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex15) #15
  br label %cleanup

cleanup:                                          ; preds = %if.then.i, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41, %if.then.i50, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54, %if.then.i43, %if.then
  %arrayidx13.sink = phi %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* [ %arrayidx, %if.then ], [ %arrayidx, %if.then.i43 ], [ %arrayidx5, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54 ], [ %arrayidx5, %if.then.i50 ], [ %arrayidx13, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41 ], [ %arrayidx13, %if.then.i ]
  %arrayidx11.sink = phi %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* [ %arrayidx, %if.then ], [ %arrayidx, %if.then.i43 ], [ %arrayidx6, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54 ], [ %arrayidx6, %if.then.i50 ], [ %arrayidx11, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41 ], [ %arrayidx11, %if.then.i ]
  %from2.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %agg.result, i64 0, i32 0
  store %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx13.sink, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %from2.i, align 8, !tbaa !14
  %to3.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %agg.result, i64 0, i32 1
  store %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx11.sink, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %to3.i, align 8, !tbaa !14
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal15Synchronization18unlock_bucket_pairERNS2_11bucket_pairE(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* nonnull align 8 dereferenceable(16) %buckets) local_unnamed_addr #0 {
entry:
  %from = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %buckets, i64 0, i32 0
  %0 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %from, align 8, !tbaa !118
  %to = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %buckets, i64 0, i32 1
  %1 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %to, align 8, !tbaa !121
  %cmp = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, %1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %state.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, i64 0, i32 0, i32 0
  %2 = atomicrmw and i64* %state.i, i64 -2 release
  %and.i = and i64 %2, 2
  %cmp.i = icmp ne i64 %and.i, 0
  %cmp3.not.i = icmp ult i64 %2, 4
  %or.cond.i = or i1 %cmp3.not.i, %cmp.i
  br i1 %or.cond.i, label %if.end15, label %if.then.i

if.then.i:                                        ; preds = %if.then
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #15
  br label %if.end15

if.else:                                          ; preds = %entry
  %cmp4 = icmp ugt %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, %1
  br i1 %cmp4, label %if.then5, label %if.else10

if.then5:                                         ; preds = %if.else
  %state.i25 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, i64 0, i32 0, i32 0
  %3 = atomicrmw and i64* %state.i25, i64 -2 release
  %and.i26 = and i64 %3, 2
  %cmp.i27 = icmp ne i64 %and.i26, 0
  %cmp3.not.i28 = icmp ult i64 %3, 4
  %or.cond.i29 = or i1 %cmp3.not.i28, %cmp.i27
  br i1 %or.cond.i29, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit31, label %if.then.i30

if.then.i30:                                      ; preds = %if.then5
  %mutex7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex7) #15
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit31

_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit31: ; preds = %if.then.i30, %if.then5
  %4 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %to, align 8, !tbaa !121
  %state.i32 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %4, i64 0, i32 0, i32 0
  %5 = atomicrmw and i64* %state.i32, i64 -2 release
  %and.i33 = and i64 %5, 2
  %cmp.i34 = icmp ne i64 %and.i33, 0
  %cmp3.not.i35 = icmp ult i64 %5, 4
  %or.cond.i36 = or i1 %cmp3.not.i35, %cmp.i34
  br i1 %or.cond.i36, label %if.end15, label %if.then.i37

if.then.i37:                                      ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit31
  %mutex9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %4, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex9) #15
  br label %if.end15

if.else10:                                        ; preds = %if.else
  %state.i39 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %1, i64 0, i32 0, i32 0
  %6 = atomicrmw and i64* %state.i39, i64 -2 release
  %and.i40 = and i64 %6, 2
  %cmp.i41 = icmp ne i64 %and.i40, 0
  %cmp3.not.i42 = icmp ult i64 %6, 4
  %or.cond.i43 = or i1 %cmp3.not.i42, %cmp.i41
  br i1 %or.cond.i43, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit45, label %if.then.i44

if.then.i44:                                      ; preds = %if.else10
  %mutex12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %1, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex12) #15
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit45

_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit45: ; preds = %if.then.i44, %if.else10
  %7 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %from, align 8, !tbaa !118
  %state.i46 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %7, i64 0, i32 0, i32 0
  %8 = atomicrmw and i64* %state.i46, i64 -2 release
  %and.i47 = and i64 %8, 2
  %cmp.i48 = icmp ne i64 %and.i47, 0
  %cmp3.not.i49 = icmp ult i64 %8, 4
  %or.cond.i50 = or i1 %cmp3.not.i49, %cmp.i48
  br i1 %or.cond.i50, label %if.end15, label %if.then.i51

if.then.i51:                                      ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit45
  %mutex14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %7, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex14) #15
  br label %if.end15

if.end15:                                         ; preds = %if.then.i51, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit45, %if.then.i37, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit31, %if.then.i, %if.then
  ret void
}

; Function Attrs: nounwind
define linkonce_odr zeroext i1 @_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control8validateERNS2_15validate_actionE(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) unnamed_addr #4 align 2 {
entry:
  %cond_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 1
  %0 = load i64*, i64** %cond_state, align 8, !tbaa !107
  %1 = load atomic i64, i64* %0 monotonic, align 8
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 2
  %2 = load %"class.Halide::Runtime::Internal::Synchronization::word_lock"*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex, align 8, !tbaa !109
  %3 = ptrtoint %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %2 to i64
  %cmp.not = icmp eq i64 %1, %3
  br i1 %cmp.not, label %if.end, label %cleanup

if.end:                                           ; preds = %entry
  store atomic i64 0, i64* %0 monotonic, align 8
  %4 = load %"class.Halide::Runtime::Internal::Synchronization::word_lock"*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex, align 8, !tbaa !109
  %state.i = getelementptr inbounds %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %4, i64 0, i32 0
  %5 = load atomic i64, i64* %state.i monotonic, align 8
  %and11.i = and i64 %5, 1
  %tobool.not12.i = icmp eq i64 %and11.i, 0
  br i1 %tobool.not12.i, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex21make_parked_if_lockedEv.exit, label %if.end.i

if.end.i:                                         ; preds = %if.end, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i
  %val.013.i = phi i64 [ %8, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i ], [ %5, %if.end ]
  %or.i = or i64 %val.013.i, 2
  %6 = cmpxchg weak i64* %state.i, i64 %val.013.i, i64 %or.i monotonic monotonic
  %7 = extractvalue { i64, i1 } %6, 1
  br i1 %7, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex21make_parked_if_lockedEv.exit, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i: ; preds = %if.end.i
  %8 = extractvalue { i64, i1 } %6, 0
  %and.i = and i64 %8, 1
  %tobool.not.i = icmp eq i64 %and.i, 0
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex21make_parked_if_lockedEv.exit, label %if.end.i

_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex21make_parked_if_lockedEv.exit: ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i, %if.end.i, %if.end
  %tobool.not.lcssa.i = phi i8 [ 1, %if.end ], [ 1, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i ], [ 0, %if.end.i ]
  %unpark_one = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 0
  store i8 %tobool.not.lcssa.i, i8* %unpark_one, align 8, !tbaa !114
  br label %cleanup

cleanup:                                          ; preds = %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex21make_parked_if_lockedEv.exit, %entry
  ret i1 %cmp.not
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control6unparkEib(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i32 %unparked, i1 zeroext %more_waiters) unnamed_addr #2 align 2 {
entry:
  ret i64 0
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr void @_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control16requeue_callbackERKNS2_15validate_actionEbb(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action, i1 zeroext %one_to_wake, i1 zeroext %some_requeued) unnamed_addr #2 align 2 {
entry:
  %unpark_one = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 0
  %0 = load i8, i8* %unpark_one, align 8, !tbaa !114, !range !21
  %tobool.not = icmp ne i8 %0, 0
  %1 = and i1 %tobool.not, %some_requeued
  br i1 %1, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 2
  %2 = load %"class.Halide::Runtime::Internal::Synchronization::word_lock"*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex, align 8, !tbaa !109
  %state.i = getelementptr inbounds %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %2, i64 0, i32 0
  %3 = atomicrmw or i64* %state.i, i64 2 monotonic
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce i32 @_ZN6Halide7Runtime8Internal27default_desired_num_threadsEv() local_unnamed_addr #0 {
entry:
  %call = tail call i8* @getenv(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i64 0, i64 0)) #15
  %tobool.not = icmp eq i8* %call, null
  br i1 %tobool.not, label %if.end, label %cond.true

if.end:                                           ; preds = %entry
  %call1 = tail call i8* @getenv(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0)) #15
  %tobool2.not = icmp eq i8* %call1, null
  br i1 %tobool2.not, label %cond.false, label %cond.true

cond.true:                                        ; preds = %if.end, %entry
  %threads_str.010 = phi i8* [ %call1, %if.end ], [ %call, %entry ]
  %call3 = tail call i32 @atoi(i8* nonnull %threads_str.010) #15
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %call4 = tail call i32 @halide_host_cpu_count() #15
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call3, %cond.true ], [ %call4, %cond.false ]
  ret i32 %cond
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal13worker_threadEPv(i8* %arg) #0 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #16
  %0 = bitcast i8* %arg to %"struct.Halide::Runtime::Internal::work"*
  tail call void @_ZN6Halide7Runtime8Internal28worker_thread_already_lockedEPNS1_4workE(%"struct.Halide::Runtime::Internal::work"* %0) #16
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #16
  ret void
}

; Function Attrs: nounwind mustprogress
define weak %struct.halide_thread* @halide_spawn_thread(void (i8*)* %f, i8* %closure) local_unnamed_addr #0 {
entry:
  %call = tail call i8* @malloc(i64 24) #15
  %f1 = bitcast i8* %call to void (i8*)**
  store void (i8*)* %f, void (i8*)** %f1, align 8, !tbaa !122
  %closure2 = getelementptr inbounds i8, i8* %call, i64 8
  %0 = bitcast i8* %closure2 to i8**
  store i8* %closure, i8** %0, align 8, !tbaa !125
  %handle = getelementptr inbounds i8, i8* %call, i64 16
  %1 = bitcast i8* %handle to i64*
  store i64 0, i64* %1, align 8, !tbaa !126
  %call4 = tail call i32 @pthread_create(i64* nonnull %1, i8* null, i8* (i8*)* nonnull @_ZN6Halide7Runtime8Internal19spawn_thread_helperEPv, i8* %call) #15
  %2 = bitcast i8* %call to %struct.halide_thread*
  ret %struct.halide_thread* %2
}

; Function Attrs: nounwind mustprogress
define linkonce i8* @_ZN6Halide7Runtime8Internal19spawn_thread_helperEPv(i8* %arg) #0 {
entry:
  %f = bitcast i8* %arg to void (i8*)**
  %0 = load void (i8*)*, void (i8*)** %f, align 8, !tbaa !122
  %closure = getelementptr inbounds i8, i8* %arg, i64 8
  %1 = bitcast i8* %closure to i8**
  %2 = load i8*, i8** %1, align 8, !tbaa !125
  tail call void %0(i8* %2) #15
  ret i8* null
}

declare i32 @pthread_create(i64*, i8*, i8* (i8*)*, i8*) local_unnamed_addr #1

declare i8* @getenv(i8*) local_unnamed_addr #1

declare i32 @atoi(i8*) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_parallel_tasks(i8* %user_context, i32 %num_tasks, %struct.halide_parallel_task_t* %tasks, i8* %task_parent) #0 {
entry:
  %conv = sext i32 %num_tasks to i64
  %0 = alloca %"struct.Halide::Runtime::Internal::work", i64 %conv, align 8
  %cmp76 = icmp sgt i32 %num_tasks, 0
  br i1 %cmp76, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.inc, %entry
  %num_tasks.addr.0.lcssa = phi i32 [ %num_tasks, %entry ], [ %num_tasks.addr.1, %for.inc ]
  %cmp17 = icmp eq i32 %num_tasks.addr.0.lcssa, 0
  br i1 %cmp17, label %cleanup, label %if.end19

for.body:                                         ; preds = %entry, %for.inc
  %indvars.iv82 = phi i64 [ %indvars.iv.next83, %for.inc ], [ 0, %entry ]
  %num_tasks.addr.078 = phi i32 [ %num_tasks.addr.1, %for.inc ], [ %num_tasks, %entry ]
  %tasks.addr.077 = phi %struct.halide_parallel_task_t* [ %tasks.addr.1, %for.inc ], [ %tasks, %entry ]
  %extent = getelementptr inbounds %struct.halide_parallel_task_t, %struct.halide_parallel_task_t* %tasks.addr.077, i64 0, i32 6
  %1 = load i32, i32* %extent, align 8, !tbaa !127
  %cmp1 = icmp slt i32 %1, 1
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %dec = add nsw i32 %num_tasks.addr.078, -1
  br label %for.inc

if.end:                                           ; preds = %for.body
  %incdec.ptr = getelementptr inbounds %struct.halide_parallel_task_t, %struct.halide_parallel_task_t* %tasks.addr.077, i64 1
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82
  %2 = bitcast %"struct.Halide::Runtime::Internal::work"* %arrayidx to i8*
  %3 = bitcast %struct.halide_parallel_task_t* %tasks.addr.077 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(56) %2, i8* nonnull align 8 dereferenceable(56) %3, i64 56, i1 false), !tbaa.struct !128
  %task_fn = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 1
  store i32 (i8*, i32, i8*)* null, i32 (i8*, i32, i8*)** %task_fn, align 8, !tbaa !39
  %user_context6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 7
  store i8* %user_context, i8** %user_context6, align 8, !tbaa !40
  %active_workers = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 8
  %4 = bitcast i32* %active_workers to <2 x i32>*
  store <2 x i32> zeroinitializer, <2 x i32>* %4, align 8, !tbaa !41
  %next_semaphore = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 10
  store i32 0, i32* %next_semaphore, align 8, !tbaa !42
  %owner_is_sleeping = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 11
  store i8 0, i8* %owner_is_sleeping, align 4, !tbaa !43
  %parent_job = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 5
  %5 = bitcast %"struct.Halide::Runtime::Internal::work"** %parent_job to i8**
  store i8* %task_parent, i8** %5, align 8, !tbaa !46
  br label %for.inc

for.inc:                                          ; preds = %if.end, %if.then
  %tasks.addr.1 = phi %struct.halide_parallel_task_t* [ %tasks.addr.077, %if.then ], [ %incdec.ptr, %if.end ]
  %num_tasks.addr.1 = phi i32 [ %dec, %if.then ], [ %num_tasks.addr.078, %if.end ]
  %indvars.iv.next83 = add nuw nsw i64 %indvars.iv82, 1
  %6 = sext i32 %num_tasks.addr.1 to i64
  %cmp = icmp slt i64 %indvars.iv.next83, %6
  br i1 %cmp, label %for.body, label %for.cond.cleanup, !llvm.loop !129

if.end19:                                         ; preds = %for.cond.cleanup
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #16
  %7 = bitcast i8* %task_parent to %"struct.Halide::Runtime::Internal::work"*
  call void @_ZN6Halide7Runtime8Internal27enqueue_work_already_lockedEiPNS1_4workES3_(i32 %num_tasks.addr.0.lcssa, %"struct.Halide::Runtime::Internal::work"* nonnull %0, %"struct.Halide::Runtime::Internal::work"* %7) #16
  %cmp2373 = icmp sgt i32 %num_tasks.addr.0.lcssa, 0
  br i1 %cmp2373, label %for.body25.preheader, label %for.cond.cleanup24

for.body25.preheader:                             ; preds = %if.end19
  %wide.trip.count = zext i32 %num_tasks.addr.0.lcssa to i64
  br label %for.body25

for.cond.cleanup24:                               ; preds = %for.body25, %if.end19
  %exit_status20.0.lcssa = phi i32 [ 0, %if.end19 ], [ %spec.select, %for.body25 ]
  call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #16
  br label %cleanup

for.body25:                                       ; preds = %for.body25, %for.body25.preheader
  %indvars.iv = phi i64 [ 0, %for.body25.preheader ], [ %indvars.iv.next, %for.body25 ]
  %exit_status20.074 = phi i32 [ 0, %for.body25.preheader ], [ %spec.select, %for.body25 ]
  %add.ptr = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv
  call void @_ZN6Halide7Runtime8Internal28worker_thread_already_lockedEPNS1_4workE(%"struct.Halide::Runtime::Internal::work"* nonnull %add.ptr) #16
  %exit_status28 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv, i32 9
  %8 = load i32, i32* %exit_status28, align 4, !tbaa !47
  %cmp29.not = icmp eq i32 %8, 0
  %spec.select = select i1 %cmp29.not, i32 %exit_status20.074, i32 %8
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.cleanup24, label %for.body25, !llvm.loop !130

cleanup:                                          ; preds = %for.cond.cleanup24, %for.cond.cleanup
  %retval.0 = phi i32 [ %exit_status20.0.lcssa, %for.cond.cleanup24 ], [ 0, %for.cond.cleanup ]
  ret i32 %retval.0
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_default_semaphore_init(%struct.halide_semaphore_t* %s, i32 %n) #2 {
entry:
  %value = bitcast %struct.halide_semaphore_t* %s to i32*
  store atomic i32 %n, i32* %value release, align 4
  ret i32 %n
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_semaphore_release(%struct.halide_semaphore_t* %s, i32 %n) #0 {
entry:
  %value = bitcast %struct.halide_semaphore_t* %s to i32*
  %0 = atomicrmw add i32* %value, i32 %n acq_rel
  %cmp = icmp eq i32 %0, 0
  %cmp1 = icmp ne i32 %n, 0
  %or.cond = and i1 %cmp1, %cmp
  br i1 %or.cond, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #16
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 8)) #16
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10)) #16
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #16
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %add = add nsw i32 %0, %n
  ret i32 %add
}

; Function Attrs: nounwind mustprogress
define weak void @halide_thread_pool_cleanup() #0 {
entry:
  tail call void @halide_shutdown_thread_pool() #16
  ret void
}

; Function Attrs: nounwind mustprogress
define weak void @halide_shutdown_thread_pool() local_unnamed_addr #0 {
entry:
  %0 = load i8, i8* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 15), align 1, !tbaa !52, !range !21
  %tobool.not = icmp eq i8 %0, 0
  br i1 %tobool.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #16
  store i8 1, i8* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 14), align 8, !tbaa !73
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10)) #16
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 8)) #16
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 9)) #16
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #16
  %1 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !60
  %cmp4 = icmp sgt i32 %1, 0
  br i1 %cmp4, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.body, %if.then
  %call.i = tail call i8* @memset(i8* nonnull bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), i32 0, i64 2116) #15
  br label %if.end

for.body:                                         ; preds = %if.then, %for.body
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body ], [ 0, %if.then ]
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 13, i64 %indvars.iv
  %2 = load %struct.halide_thread*, %struct.halide_thread** %arrayidx, align 8, !tbaa !14
  tail call void @halide_join_thread(%struct.halide_thread* %2) #16
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %3 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !60
  %4 = sext i32 %3 to i64
  %cmp = icmp slt i64 %indvars.iv.next, %4
  br i1 %cmp, label %for.body, label %for.cond.cleanup, !llvm.loop !131

if.end:                                           ; preds = %for.cond.cleanup, %entry
  ret void
}

declare i8* @memset(i8*, i32, i64) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_join_thread(%struct.halide_thread* %thread_arg) local_unnamed_addr #0 {
entry:
  %ret = alloca i8*, align 8
  %0 = bitcast %struct.halide_thread* %thread_arg to %"struct.Halide::Runtime::Internal::spawned_thread"*
  %1 = bitcast i8** %ret to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #12
  store i8* null, i8** %ret, align 8, !tbaa !14
  %handle = getelementptr inbounds %"struct.Halide::Runtime::Internal::spawned_thread", %"struct.Halide::Runtime::Internal::spawned_thread"* %0, i64 0, i32 2
  %2 = load i64, i64* %handle, align 8, !tbaa !126
  %call = call i32 @pthread_join(i64 %2, i8** nonnull %ret) #15
  %3 = bitcast %struct.halide_thread* %thread_arg to i8*
  call void @free(i8* %3) #15
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #12
  ret void
}

declare i32 @pthread_join(i64, i8**) local_unnamed_addr #1

; Function Attrs: nounwind
define weak void @halide_cond_signal(%struct.halide_mutex* %cond) local_unnamed_addr #4 {
entry:
  %control.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", align 8
  %state.i = getelementptr %struct.halide_mutex, %struct.halide_mutex* %cond, i64 0, i32 0, i64 0
  %0 = load atomic i64, i64* %state.i monotonic, align 8
  %cmp.i = icmp eq i64 %0, 0
  br i1 %cmp.i, label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond6signalEv.exit, label %if.end.i

if.end.i:                                         ; preds = %entry
  %1 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1) #12
  %2 = inttoptr i64 %0 to %"class.Halide::Runtime::Internal::Synchronization::word_lock"*
  %3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization22signal_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8, !tbaa !48
  %cond_state2.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 1
  store i64* %state.i, i64** %cond_state2.i.i, align 8, !tbaa !132
  %mutex3.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 2
  store %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %2, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex3.i.i, align 8, !tbaa !134
  %4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0
  %5 = ptrtoint %struct.halide_mutex* %cond to i64
  %call.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control10unpark_oneEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %4, i64 %5) #15
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1) #12
  br label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond6signalEv.exit

_ZN6Halide7Runtime8Internal15Synchronization9fast_cond6signalEv.exit: ; preds = %if.end.i, %entry
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr zeroext i1 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control8validateERNS2_15validate_actionE(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) unnamed_addr #2 align 2 {
entry:
  ret i1 true
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr i64 @_ZN6Halide7Runtime8Internal15Synchronization22signal_parking_control6unparkEib(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this, i32 %unparked, i1 zeroext %more_waiters) unnamed_addr #2 align 2 {
entry:
  br i1 %more_waiters, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %cond_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 1
  %0 = load i64*, i64** %cond_state, align 8, !tbaa !132
  store atomic i64 0, i64* %0 monotonic, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i64 0
}

; Function Attrs: nounwind mustprogress
define weak %struct.halide_mutex_array* @halide_mutex_array_create(i32 %sz) local_unnamed_addr #0 {
entry:
  %call = tail call i8* @halide_malloc(i8* null, i64 8) #15
  %0 = bitcast i8* %call to %struct.halide_mutex_array*
  %cmp = icmp eq i8* %call, null
  br i1 %cmp, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %conv = sext i32 %sz to i64
  %mul = shl nsw i64 %conv, 3
  %call1 = tail call i8* @halide_malloc(i8* null, i64 %mul) #15
  %1 = bitcast i8* %call to i8**
  store i8* %call1, i8** %1, align 8, !tbaa !135
  %cmp4 = icmp eq i8* %call1, null
  br i1 %cmp4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.end
  tail call void @halide_free(i8* null, i8* nonnull %call) #15
  br label %cleanup

if.end6:                                          ; preds = %if.end
  %call10 = tail call i8* @memset(i8* nonnull %call1, i32 0, i64 %mul) #15
  br label %cleanup

cleanup:                                          ; preds = %if.end6, %if.then5, %entry
  %retval.0 = phi %struct.halide_mutex_array* [ null, %if.then5 ], [ %0, %if.end6 ], [ null, %entry ]
  ret %struct.halide_mutex_array* %retval.0
}

; Function Attrs: nounwind mustprogress
define weak void @halide_mutex_array_destroy(i8* %user_context, i8* %array) local_unnamed_addr #0 {
entry:
  %0 = bitcast i8* %array to i8**
  %1 = load i8*, i8** %0, align 8, !tbaa !135
  tail call void @halide_free(i8* %user_context, i8* %1) #15
  tail call void @halide_free(i8* %user_context, i8* %array) #15
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_mutex_array_lock(%struct.halide_mutex_array* %array, i32 %entry1) local_unnamed_addr #0 {
entry:
  %array2 = getelementptr inbounds %struct.halide_mutex_array, %struct.halide_mutex_array* %array, i64 0, i32 0
  %0 = load %struct.halide_mutex*, %struct.halide_mutex** %array2, align 8, !tbaa !135
  %idxprom = sext i32 %entry1 to i64
  %arrayidx = getelementptr inbounds %struct.halide_mutex, %struct.halide_mutex* %0, i64 %idxprom
  tail call void @halide_mutex_lock(%struct.halide_mutex* %arrayidx) #16
  ret i32 0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_mutex_array_unlock(%struct.halide_mutex_array* %array, i32 %entry1) local_unnamed_addr #0 {
entry:
  %array2 = getelementptr inbounds %struct.halide_mutex_array, %struct.halide_mutex_array* %array, i64 0, i32 0
  %0 = load %struct.halide_mutex*, %struct.halide_mutex** %array2, align 8, !tbaa !135
  %idxprom = sext i32 %entry1 to i64
  %arrayidx = getelementptr inbounds %struct.halide_mutex, %struct.halide_mutex* %0, i64 %idxprom
  tail call void @halide_mutex_unlock(%struct.halide_mutex* %arrayidx) #16
  ret i32 0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_set_num_threads(i32 %n) local_unnamed_addr #0 {
entry:
  %cmp = icmp slt i32 %n, 0
  br i1 %cmp, label %if.end3.thread, label %if.end

if.end3.thread:                                   ; preds = %entry
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.4, i64 0, i64 0)) #15
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #16
  %0 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !58
  br label %if.else.i

if.end:                                           ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #16
  %cmp1 = icmp eq i32 %n, 0
  br i1 %cmp1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  %call = tail call i32 @_ZN6Halide7Runtime8Internal27default_desired_num_threadsEv() #16
  br label %if.end3

if.end3:                                          ; preds = %if.then2, %if.end
  %n.addr.0 = phi i32 [ %call, %if.then2 ], [ %n, %if.end ]
  %1 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !58
  %cmp.i = icmp sgt i32 %n.addr.0, 256
  br i1 %cmp.i, label %_ZN6Halide7Runtime8Internal17clamp_num_threadsEi.exit, label %if.else.i

if.else.i:                                        ; preds = %if.end3, %if.end3.thread
  %2 = phi i32 [ %0, %if.end3.thread ], [ %1, %if.end3 ]
  %n.addr.012 = phi i32 [ %n, %if.end3.thread ], [ %n.addr.0, %if.end3 ]
  %3 = icmp sgt i32 %n.addr.012, 1
  %spec.select.i = select i1 %3, i32 %n.addr.012, i32 1
  br label %_ZN6Halide7Runtime8Internal17clamp_num_threadsEi.exit

_ZN6Halide7Runtime8Internal17clamp_num_threadsEi.exit: ; preds = %if.else.i, %if.end3
  %4 = phi i32 [ %2, %if.else.i ], [ %1, %if.end3 ]
  %call48 = phi i32 [ %spec.select.i, %if.else.i ], [ 256, %if.end3 ]
  store i32 %call48, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !58
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #16
  ret i32 %4
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* @halide_set_custom_do_task(i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 8, !tbaa !14
  store i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %f, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 8, !tbaa !14
  ret i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* @halide_set_custom_do_loop_task(i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)*, i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)** @_ZN6Halide7Runtime8Internal19custom_do_loop_taskE, align 8, !tbaa !14
  store i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* %f, i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)** @_ZN6Halide7Runtime8Internal19custom_do_loop_taskE, align 8, !tbaa !14
  ret i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* @halide_set_custom_do_par_for(i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 8, !tbaa !14
  store i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %f, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 8, !tbaa !14
  ret i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_set_custom_parallel_runtime(i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %do_par_for, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %do_task, i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* %do_loop_task, i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)* %do_parallel_tasks, i32 (%struct.halide_semaphore_t*, i32)* %semaphore_init, i1 (%struct.halide_semaphore_t*, i32)* %semaphore_try_acquire, i32 (%struct.halide_semaphore_t*, i32)* %semaphore_release) local_unnamed_addr #2 {
entry:
  store i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %do_par_for, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 8, !tbaa !14
  store i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %do_task, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 8, !tbaa !14
  store i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* %do_loop_task, i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)** @_ZN6Halide7Runtime8Internal19custom_do_loop_taskE, align 8, !tbaa !14
  store i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)* %do_parallel_tasks, i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)** @_ZN6Halide7Runtime8Internal24custom_do_parallel_tasksE, align 8, !tbaa !14
  store i32 (%struct.halide_semaphore_t*, i32)* %semaphore_init, i32 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal21custom_semaphore_initE, align 8, !tbaa !14
  store i1 (%struct.halide_semaphore_t*, i32)* %semaphore_try_acquire, i1 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal28custom_semaphore_try_acquireE, align 8, !tbaa !14
  store i32 (%struct.halide_semaphore_t*, i32)* %semaphore_release, i32 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal24custom_semaphore_releaseE, align 8, !tbaa !14
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_par_for(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %min, i32 %size, i8* %closure) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 8, !tbaa !14
  %call = tail call i32 %0(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %min, i32 %size, i8* %closure) #15
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_parallel_tasks(i8* %user_context, i32 %num_tasks, %struct.halide_parallel_task_t* %tasks, i8* %task_parent) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)*, i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)** @_ZN6Halide7Runtime8Internal24custom_do_parallel_tasksE, align 8, !tbaa !14
  %call = tail call i32 %0(i8* %user_context, i32 %num_tasks, %struct.halide_parallel_task_t* %tasks, i8* %task_parent) #15
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_semaphore_init(%struct.halide_semaphore_t* %sema, i32 %count) local_unnamed_addr #0 {
entry:
  %0 = load i32 (%struct.halide_semaphore_t*, i32)*, i32 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal21custom_semaphore_initE, align 8, !tbaa !14
  %call = tail call i32 %0(%struct.halide_semaphore_t* %sema, i32 %count) #15
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_semaphore_release(%struct.halide_semaphore_t* %sema, i32 %count) local_unnamed_addr #0 {
entry:
  %0 = load i32 (%struct.halide_semaphore_t*, i32)*, i32 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal24custom_semaphore_releaseE, align 8, !tbaa !14
  %call = tail call i32 %0(%struct.halide_semaphore_t* %sema, i32 %count) #15
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak zeroext i1 @halide_semaphore_try_acquire(%struct.halide_semaphore_t* %sema, i32 %count) local_unnamed_addr #0 {
entry:
  %0 = load i1 (%struct.halide_semaphore_t*, i32)*, i1 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal28custom_semaphore_try_acquireE, align 8, !tbaa !14
  %call = tail call zeroext i1 %0(%struct.halide_semaphore_t* %sema, i32 %count) #15
  ret i1 %call
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_default_get_symbol(i8* %name) #0 {
entry:
  %call = tail call i8* @dlsym(i8* nonnull inttoptr (i64 -2 to i8*), i8* %name) #15
  ret i8* %call
}

declare i8* @dlsym(i8*, i8*) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i8* @halide_default_load_library(i8* %name) #0 {
entry:
  %call = tail call i8* @dlopen(i8* %name, i32 5) #15
  ret i8* %call
}

declare i8* @dlopen(i8*, i32) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i8* @halide_default_get_library_symbol(i8* %lib, i8* %name) #0 {
entry:
  %cmp = icmp eq i8* %lib, null
  %spec.select = select i1 %cmp, i8* inttoptr (i64 -2 to i8*), i8* %lib
  %call = tail call i8* @dlsym(i8* %spec.select, i8* %name) #15
  ret i8* %call
}

; Function Attrs: nounwind willreturn mustprogress
define weak i8* (i8*)* @halide_set_custom_get_symbol(i8* (i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i8* (i8*)*, i8* (i8*)** @_ZN6Halide7Runtime8Internal17custom_get_symbolE, align 8, !tbaa !14
  store i8* (i8*)* %f, i8* (i8*)** @_ZN6Halide7Runtime8Internal17custom_get_symbolE, align 8, !tbaa !14
  ret i8* (i8*)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i8* (i8*)* @halide_set_custom_load_library(i8* (i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i8* (i8*)*, i8* (i8*)** @_ZN6Halide7Runtime8Internal19custom_load_libraryE, align 8, !tbaa !14
  store i8* (i8*)* %f, i8* (i8*)** @_ZN6Halide7Runtime8Internal19custom_load_libraryE, align 8, !tbaa !14
  ret i8* (i8*)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i8* (i8*, i8*)* @halide_set_custom_get_library_symbol(i8* (i8*, i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i8* (i8*, i8*)*, i8* (i8*, i8*)** @_ZN6Halide7Runtime8Internal25custom_get_library_symbolE, align 8, !tbaa !14
  store i8* (i8*, i8*)* %f, i8* (i8*, i8*)** @_ZN6Halide7Runtime8Internal25custom_get_library_symbolE, align 8, !tbaa !14
  ret i8* (i8*, i8*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_get_symbol(i8* %name) local_unnamed_addr #0 {
entry:
  %0 = load i8* (i8*)*, i8* (i8*)** @_ZN6Halide7Runtime8Internal17custom_get_symbolE, align 8, !tbaa !14
  %call = tail call i8* %0(i8* %name) #15
  ret i8* %call
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_load_library(i8* %name) local_unnamed_addr #0 {
entry:
  %0 = load i8* (i8*)*, i8* (i8*)** @_ZN6Halide7Runtime8Internal19custom_load_libraryE, align 8, !tbaa !14
  %call = tail call i8* %0(i8* %name) #15
  ret i8* %call
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_get_library_symbol(i8* %lib, i8* %name) local_unnamed_addr #0 {
entry:
  %0 = load i8* (i8*, i8*)*, i8* (i8*, i8*)** @_ZN6Halide7Runtime8Internal25custom_get_library_symbolE, align 8, !tbaa !14
  %call = tail call i8* %0(i8* %lib, i8* %name) #15
  ret i8* %call
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_set_gpu_device(i32 %d) local_unnamed_addr #2 {
entry:
  store i32 %d, i32* @_ZN6Halide7Runtime8Internal17halide_gpu_deviceE, align 4, !tbaa !41
  store i8 1, i8* @_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE, align 1, !tbaa !19
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_get_gpu_device(i8* %user_context) local_unnamed_addr #4 {
entry:
  br label %while.cond.i

while.cond.i:                                     ; preds = %while.cond.i, %entry
  %0 = atomicrmw volatile xchg i8* @_ZN6Halide7Runtime8Internal22halide_gpu_device_lockE, i8 1 acquire
  %tobool.not.i = icmp eq i8 %0, 0
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit, label %while.cond.i, !llvm.loop !137

_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit: ; preds = %while.cond.i
  %1 = load i8, i8* @_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE, align 1, !tbaa !19, !range !21
  %tobool.not = icmp eq i8 %1, 0
  br i1 %tobool.not, label %if.then, label %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge

_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge: ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %.pre = load i32, i32* @_ZN6Halide7Runtime8Internal17halide_gpu_deviceE, align 4, !tbaa !41
  br label %if.end4

if.then:                                          ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %call = tail call i8* @getenv(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.8, i64 0, i64 0)) #15
  %tobool1.not = icmp eq i8* %call, null
  br i1 %tobool1.not, label %if.end, label %if.then2

if.then2:                                         ; preds = %if.then
  %call3 = tail call i32 @atoi(i8* nonnull %call) #15
  br label %if.end

if.end:                                           ; preds = %if.then2, %if.then
  %storemerge = phi i32 [ %call3, %if.then2 ], [ -1, %if.then ]
  store i32 %storemerge, i32* @_ZN6Halide7Runtime8Internal17halide_gpu_deviceE, align 4, !tbaa !41
  store i8 1, i8* @_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE, align 1, !tbaa !19
  br label %if.end4

if.end4:                                          ; preds = %if.end, %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge
  %2 = phi i32 [ %.pre, %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge ], [ %storemerge, %if.end ]
  store atomic volatile i8 0, i8* @_ZN6Halide7Runtime8Internal22halide_gpu_device_lockE release, align 1
  ret i32 %2
}

; Function Attrs: nounwind
define weak i32 @halide_default_trace(i8* %user_context, %struct.halide_trace_event_t* %e) #4 {
entry:
  %0 = atomicrmw add i32* @_ZZ20halide_default_traceE3ids, i32 1 seq_cst
  %call = tail call i32 @halide_get_trace_file(i8* %user_context) #16
  %cmp = icmp sgt i32 %call, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %type = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4
  %lanes = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4, i32 2
  %1 = load i16, i16* %lanes, align 2, !tbaa !138
  %conv = zext i16 %1 to i32
  %bits.i = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4, i32 1
  %2 = load i8, i8* %bits.i, align 1, !tbaa !144
  %conv.i = zext i8 %2 to i32
  %add.i = add nuw nsw i32 %conv.i, 7
  %div.i = lshr i32 %add.i, 3
  %mul = mul nuw nsw i32 %div.i, %conv
  %dimensions = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 8
  %3 = load i32, i32* %dimensions, align 8, !tbaa !145
  %mul3 = shl i32 %3, 2
  %func = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 0
  %4 = load i8*, i8** %func, align 8, !tbaa !146
  %call4 = tail call i64 @strlen(i8* %4) #15
  %5 = trunc i64 %call4 to i32
  %conv5 = add i32 %5, 1
  %trace_tag = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 3
  %6 = load i8*, i8** %trace_tag, align 8, !tbaa !147
  %tobool.not = icmp eq i8* %6, null
  br i1 %tobool.not, label %cond.end, label %cond.true

cond.true:                                        ; preds = %if.then
  %call7 = tail call i64 @strlen(i8* nonnull %6) #15
  %7 = trunc i64 %call7 to i32
  %phi.cast = add i32 %7, 1
  br label %cond.end

cond.end:                                         ; preds = %cond.true, %if.then
  %cond = phi i32 [ %phi.cast, %cond.true ], [ 1, %if.then ]
  %add11 = add i32 %mul3, 31
  %add12 = add i32 %add11, %mul
  %add13 = add i32 %add12, %conv5
  %add14 = add i32 %add13, %cond
  %and = and i32 %add14, -4
  %8 = load %"class.Halide::Runtime::Internal::TraceBuffer"*, %"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE, align 8, !tbaa !14
  %lock.i.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %8, i64 0, i32 0, i32 0
  %cmp.i.i = icmp ult i32 %and, 1048577
  %cursor.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %8, i64 0, i32 1
  %overage.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %8, i64 0, i32 2
  %arraydecay.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %8, i64 0, i32 3, i64 0
  br i1 %cmp.i.i, label %while.body.i.i.us.i.preheader, label %while.body.i.i.i.preheader

while.body.i.i.i.preheader:                       ; preds = %cond.end
  %9 = bitcast i32* %cursor.i.i to <2 x i32>*
  br label %while.body.i.i.i

while.body.i.i.us.i.preheader:                    ; preds = %cond.end
  %10 = bitcast i32* %cursor.i.i to <2 x i32>*
  br label %while.body.i.i.us.i

while.body.i.i.us.i:                              ; preds = %while.body.i.i.us.i.backedge, %while.body.i.i.us.i.preheader
  %11 = load volatile i32, i32* %lock.i.i.i, align 4, !tbaa !148
  %and.i.i.us.i = and i32 %11, 1073741823
  %add.i.i.us.i = add nuw nsw i32 %and.i.i.us.i, 1
  %12 = cmpxchg i32* %lock.i.i.i, i32 %and.i.i.us.i, i32 %add.i.i.us.i seq_cst seq_cst
  %13 = extractvalue { i32, i1 } %12, 1
  br i1 %13, label %do.end.i.us.i, label %while.body.i.i.us.i.backedge

do.end.i.us.i:                                    ; preds = %while.body.i.i.us.i
  %14 = atomicrmw add i32* %cursor.i.i, i32 %and seq_cst
  %add.i.us.i = add i32 %14, %and
  %cmp2.i.us.i = icmp ugt i32 %add.i.us.i, 1048576
  br i1 %cmp2.i.us.i, label %while.body.us.i, label %_ZN6Halide7Runtime8Internal11TraceBuffer14acquire_packetEPvij.exit

while.body.us.i:                                  ; preds = %do.end.i.us.i
  %15 = atomicrmw add i32* %overage.i.i, i32 %and seq_cst
  %16 = atomicrmw sub i32* %lock.i.i.i, i32 1 seq_cst
  br label %while.body.i.i5.us.i

while.body.i.i5.us.i:                             ; preds = %while.body.i.i5.us.i, %while.body.us.i
  %17 = atomicrmw or i32* %lock.i.i.i, i32 1073741824 seq_cst
  %18 = cmpxchg i32* %lock.i.i.i, i32 1073741824, i32 -2147483648 seq_cst seq_cst
  %19 = extractvalue { i32, i1 } %18, 1
  br i1 %19, label %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.us.i, label %while.body.i.i5.us.i

_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.us.i: ; preds = %while.body.i.i5.us.i
  %20 = load i32, i32* %cursor.i.i, align 4, !tbaa !150
  %tobool.not.i.us.i = icmp eq i32 %20, 0
  br i1 %tobool.not.i.us.i, label %do.end.critedge.i.us.i, label %if.then.i9.us.i

if.then.i9.us.i:                                  ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.us.i
  %21 = load i32, i32* %overage.i.i, align 4, !tbaa !152
  %sub.i.us.i = sub i32 %20, %21
  store i32 %sub.i.us.i, i32* %cursor.i.i, align 4, !tbaa !150
  %conv.i.us.i = zext i32 %sub.i.us.i to i64
  %call.i.us.i = tail call i64 @write(i32 %call, i8* nonnull %arraydecay.i.i, i64 %conv.i.us.i) #15
  %conv5.i.us.i = trunc i64 %call.i.us.i to i32
  %cmp.i8.us.i = icmp eq i32 %sub.i.us.i, %conv5.i.us.i
  store <2 x i32> zeroinitializer, <2 x i32>* %10, align 4, !tbaa !41
  %22 = atomicrmw and i32* %lock.i.i.i, i32 2147483647 seq_cst
  br i1 %cmp.i8.us.i, label %while.body.i.i.us.i.backedge, label %if.then10.i.us.i

if.then10.i.us.i:                                 ; preds = %if.then.i9.us.i
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([144 x i8], [144 x i8]* @.str.32, i64 0, i64 0)) #15
  tail call void @abort() #15
  br label %while.body.i.i.us.i.backedge

do.end.critedge.i.us.i:                           ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.us.i
  %23 = atomicrmw and i32* %lock.i.i.i, i32 2147483647 seq_cst
  br label %while.body.i.i.us.i.backedge

while.body.i.i.us.i.backedge:                     ; preds = %do.end.critedge.i.us.i, %if.then10.i.us.i, %if.then.i9.us.i, %while.body.i.i.us.i
  br label %while.body.i.i.us.i, !llvm.loop !153

while.body.i.i.i:                                 ; preds = %while.body.i.i.i.backedge, %while.body.i.i.i.preheader
  %24 = load volatile i32, i32* %lock.i.i.i, align 4, !tbaa !148
  %and.i.i.i = and i32 %24, 1073741823
  %add.i.i.i = add nuw nsw i32 %and.i.i.i, 1
  %25 = cmpxchg i32* %lock.i.i.i, i32 %and.i.i.i, i32 %add.i.i.i seq_cst seq_cst
  %26 = extractvalue { i32, i1 } %25, 1
  br i1 %26, label %if.then.i.i, label %while.body.i.i.i.backedge

if.then.i.i:                                      ; preds = %while.body.i.i.i
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([120 x i8], [120 x i8]* @.str.31, i64 0, i64 0)) #15
  tail call void @abort() #15
  %27 = atomicrmw add i32* %cursor.i.i, i32 %and seq_cst
  %add.i.i400 = add i32 %27, %and
  %cmp2.i.i = icmp ugt i32 %add.i.i400, 1048576
  br i1 %cmp2.i.i, label %while.body.i, label %_ZN6Halide7Runtime8Internal11TraceBuffer14acquire_packetEPvij.exit

while.body.i:                                     ; preds = %if.then.i.i
  %28 = atomicrmw add i32* %overage.i.i, i32 %and seq_cst
  %29 = atomicrmw sub i32* %lock.i.i.i, i32 1 seq_cst
  br label %while.body.i.i5.i

while.body.i.i5.i:                                ; preds = %while.body.i.i5.i, %while.body.i
  %30 = atomicrmw or i32* %lock.i.i.i, i32 1073741824 seq_cst
  %31 = cmpxchg i32* %lock.i.i.i, i32 1073741824, i32 -2147483648 seq_cst seq_cst
  %32 = extractvalue { i32, i1 } %31, 1
  br i1 %32, label %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.i, label %while.body.i.i5.i

_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.i: ; preds = %while.body.i.i5.i
  %33 = load i32, i32* %cursor.i.i, align 4, !tbaa !150
  %tobool.not.i.i = icmp eq i32 %33, 0
  br i1 %tobool.not.i.i, label %do.end.critedge.i.i, label %if.then.i9.i

if.then.i9.i:                                     ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.i
  %34 = load i32, i32* %overage.i.i, align 4, !tbaa !152
  %sub.i.i = sub i32 %33, %34
  store i32 %sub.i.i, i32* %cursor.i.i, align 4, !tbaa !150
  %conv.i.i = zext i32 %sub.i.i to i64
  %call.i.i401 = tail call i64 @write(i32 %call, i8* nonnull %arraydecay.i.i, i64 %conv.i.i) #15
  %conv5.i.i = trunc i64 %call.i.i401 to i32
  %cmp.i8.i = icmp eq i32 %sub.i.i, %conv5.i.i
  store <2 x i32> zeroinitializer, <2 x i32>* %9, align 4, !tbaa !41
  %35 = atomicrmw and i32* %lock.i.i.i, i32 2147483647 seq_cst
  br i1 %cmp.i8.i, label %while.body.i.i.i.backedge, label %if.then10.i.i

if.then10.i.i:                                    ; preds = %if.then.i9.i
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([144 x i8], [144 x i8]* @.str.32, i64 0, i64 0)) #15
  tail call void @abort() #15
  br label %while.body.i.i.i.backedge

do.end.critedge.i.i:                              ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.i
  %36 = atomicrmw and i32* %lock.i.i.i, i32 2147483647 seq_cst
  br label %while.body.i.i.i.backedge

while.body.i.i.i.backedge:                        ; preds = %do.end.critedge.i.i, %if.then10.i.i, %if.then.i9.i, %while.body.i.i.i
  br label %while.body.i.i.i, !llvm.loop !153

_ZN6Halide7Runtime8Internal11TraceBuffer14acquire_packetEPvij.exit: ; preds = %if.then.i.i, %do.end.i.us.i
  %.lcssa.i = phi i32 [ %14, %do.end.i.us.i ], [ %27, %if.then.i.i ]
  %idx.ext.i.i = zext i32 %.lcssa.i to i64
  %add.ptr.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %8, i64 0, i32 3, i64 %idx.ext.i.i
  %cmp16 = icmp ugt i32 %and, 4096
  br i1 %cmp16, label %if.then17, label %if.end

if.then17:                                        ; preds = %_ZN6Halide7Runtime8Internal11TraceBuffer14acquire_packetEPvij.exit
  %call.i = tail call i8* @malloc(i64 1024) #15
  %tobool.not.i404 = icmp eq i8* %call.i, null
  br i1 %tobool.not.i404, label %if.then.i415, label %if.else.i421

if.then.i415:                                     ; preds = %if.then17
  %conv.i4071 = zext i32 %and to i64
  %call.i4082 = tail call i8* @halide_uint64_to_string(i8* null, i8* null, i64 %conv.i4071, i32 1) #15
  %call.i41117 = tail call i8* @halide_string_to_string(i8* %call.i4082, i8* null, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #15
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE0ELy1024EED2Ev.exit

if.else.i421:                                     ; preds = %if.then17
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %conv.i4073 = zext i32 %and to i64
  %call.i4084 = tail call i8* @halide_uint64_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i64 %conv.i4073, i32 1) #15
  %call.i411 = tail call i8* @halide_string_to_string(i8* %call.i4084, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #15
  %sub.ptr.lhs.cast.i.i416 = ptrtoint i8* %call.i411 to i64
  %sub.ptr.rhs.cast.i.i417 = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i418 = sub i64 1, %sub.ptr.rhs.cast.i.i417
  %add.i.i419 = add i64 %sub.ptr.sub.i.i418, %sub.ptr.lhs.cast.i.i416
  %call.i.i420 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* null, i8* nonnull %call.i, i64 %add.i.i419) #15
  tail call void @halide_print(i8* null, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE0ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE0ELy1024EED2Ev.exit: ; preds = %if.else.i421, %if.then.i415
  tail call void @free(i8* %call.i) #15
  br label %if.end

if.end:                                           ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE0ELy1024EED2Ev.exit, %_ZN6Halide7Runtime8Internal11TraceBuffer14acquire_packetEPvij.exit
  %size = bitcast i8* %add.ptr.i.i to i32*
  store i32 %and, i32* %size, align 4, !tbaa !154
  %id = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 4
  %37 = bitcast i8* %id to i32*
  store i32 %0, i32* %37, align 4, !tbaa !156
  %38 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 8
  %39 = bitcast %struct.halide_type_t* %type to i32*
  %40 = bitcast i8* %38 to i32*
  %41 = load i32, i32* %39, align 8
  store i32 %41, i32* %40, align 4
  %event = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 5
  %event22 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 12
  %42 = bitcast i32* %event to <4 x i32>*
  %43 = load <4 x i32>, <4 x i32>* %42, align 4, !tbaa !18
  %dimensions26 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 24
  %44 = bitcast i8* %dimensions26 to i32*
  %45 = bitcast i8* %event22 to <4 x i32>*
  store <4 x i32> %43, <4 x i32>* %45, align 4, !tbaa !18
  %coordinates = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 2
  %46 = load i32*, i32** %coordinates, align 8, !tbaa !157
  %tobool27.not = icmp eq i32* %46, null
  br i1 %tobool27.not, label %if.end33, label %if.then28

if.then28:                                        ; preds = %if.end
  %47 = bitcast i32* %46 to i8*
  %48 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 28
  %conv31 = zext i32 %mul3 to i64
  %call32 = tail call i8* @memcpy(i8* nonnull %48, i8* nonnull %47, i64 %conv31) #15
  br label %if.end33

if.end33:                                         ; preds = %if.then28, %if.end
  %value = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 1
  %49 = load i8*, i8** %value, align 8, !tbaa !158
  %tobool34.not = icmp eq i8* %49, null
  br i1 %tobool34.not, label %if.end40, label %if.then35

if.then35:                                        ; preds = %if.end33
  %50 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 28
  %51 = bitcast i8* %50 to i32*
  %52 = load i32, i32* %44, align 4, !tbaa !159
  %idx.ext.i = sext i32 %52 to i64
  %add.ptr.i424 = getelementptr inbounds i32, i32* %51, i64 %idx.ext.i
  %53 = bitcast i32* %add.ptr.i424 to i8*
  %conv38 = zext i32 %mul to i64
  %call39 = tail call i8* @memcpy(i8* nonnull %53, i8* nonnull %49, i64 %conv38) #15
  br label %if.end40

if.end40:                                         ; preds = %if.end33, %if.then35
  %54 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 28
  %55 = bitcast i8* %54 to i32*
  %56 = load i32, i32* %44, align 4, !tbaa !159
  %idx.ext.i.i425 = sext i32 %56 to i64
  %add.ptr.i.i426 = getelementptr inbounds i32, i32* %55, i64 %idx.ext.i.i425
  %57 = bitcast i32* %add.ptr.i.i426 to i8*
  %lanes.i = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 10
  %58 = bitcast i8* %lanes.i to i16*
  %59 = load i16, i16* %58, align 2, !tbaa !160
  %conv.i427 = zext i16 %59 to i32
  %60 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 9
  %61 = load i8, i8* %60, align 1, !tbaa !144
  %conv.i.i428 = zext i8 %61 to i32
  %add.i.i429 = add nuw nsw i32 %conv.i.i428, 7
  %div.i.i = lshr i32 %add.i.i429, 3
  %mul.i = mul nuw nsw i32 %div.i.i, %conv.i427
  %idx.ext.i430 = zext i32 %mul.i to i64
  %add.ptr.i431 = getelementptr inbounds i8, i8* %57, i64 %idx.ext.i430
  %62 = load i8*, i8** %func, align 8, !tbaa !146
  %conv43 = zext i32 %conv5 to i64
  %call44 = tail call i8* @memcpy(i8* nonnull %add.ptr.i431, i8* %62, i64 %conv43) #15
  %63 = load i32, i32* %44, align 4, !tbaa !159
  %idx.ext.i.i.i = sext i32 %63 to i64
  %add.ptr.i.i.i = getelementptr inbounds i32, i32* %55, i64 %idx.ext.i.i.i
  %64 = bitcast i32* %add.ptr.i.i.i to i8*
  %65 = load i16, i16* %58, align 2, !tbaa !160
  %conv.i.i432 = zext i16 %65 to i32
  %66 = load i8, i8* %60, align 1, !tbaa !144
  %conv.i.i.i = zext i8 %66 to i32
  %add.i.i.i433 = add nuw nsw i32 %conv.i.i.i, 7
  %div.i.i.i = lshr i32 %add.i.i.i433, 3
  %mul.i.i = mul nuw nsw i32 %div.i.i.i, %conv.i.i432
  %idx.ext.i.i434 = zext i32 %mul.i.i to i64
  %add.ptr.i.i435 = getelementptr inbounds i8, i8* %64, i64 %idx.ext.i.i434
  br label %while.cond.i437

while.cond.i437:                                  ; preds = %while.cond.i437, %if.end40
  %f.0.i = phi i8* [ %add.ptr.i.i435, %if.end40 ], [ %incdec.ptr.i, %while.cond.i437 ]
  %incdec.ptr.i = getelementptr inbounds i8, i8* %f.0.i, i64 1
  %67 = load i8, i8* %f.0.i, align 1, !tbaa !18
  %tobool.not.i436 = icmp eq i8 %67, 0
  br i1 %tobool.not.i436, label %_ZN21halide_trace_packet_t9trace_tagEv.exit, label %while.cond.i437, !llvm.loop !161

_ZN21halide_trace_packet_t9trace_tagEv.exit:      ; preds = %while.cond.i437
  %68 = load i8*, i8** %trace_tag, align 8, !tbaa !147
  %tobool47.not = icmp eq i8* %68, null
  %spec.select = select i1 %tobool47.not, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1.10, i64 0, i64 0), i8* %68
  %conv53 = zext i32 %cond to i64
  %call54 = tail call i8* @memcpy(i8* nonnull %incdec.ptr.i, i8* %spec.select, i64 %conv53) #15
  %69 = load %"class.Halide::Runtime::Internal::TraceBuffer"*, %"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE, align 8, !tbaa !14
  fence seq_cst
  %lock.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %69, i64 0, i32 0, i32 0
  %70 = atomicrmw sub i32* %lock.i.i, i32 1 seq_cst
  %71 = load i32, i32* %event, align 4, !tbaa !162
  %cmp56 = icmp eq i32 %71, 9
  br i1 %cmp56, label %if.then57, label %if.end277

if.then57:                                        ; preds = %_ZN21halide_trace_packet_t9trace_tagEv.exit
  %72 = load %"class.Halide::Runtime::Internal::TraceBuffer"*, %"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE, align 8, !tbaa !14
  %lock.i.i438 = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %72, i64 0, i32 0, i32 0
  br label %while.body.i.i

while.body.i.i:                                   ; preds = %while.body.i.i, %if.then57
  %73 = atomicrmw or i32* %lock.i.i438, i32 1073741824 seq_cst
  %74 = cmpxchg i32* %lock.i.i438, i32 1073741824, i32 -2147483648 seq_cst seq_cst
  %75 = extractvalue { i32, i1 } %74, 1
  br i1 %75, label %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i, label %while.body.i.i

_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i: ; preds = %while.body.i.i
  %cursor.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %72, i64 0, i32 1
  %76 = load i32, i32* %cursor.i, align 4, !tbaa !150
  %tobool.not.i439 = icmp eq i32 %76, 0
  br i1 %tobool.not.i439, label %do.end.critedge.i, label %if.then.i442

if.then.i442:                                     ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i
  %overage.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %72, i64 0, i32 2
  %77 = load i32, i32* %overage.i, align 4, !tbaa !152
  %sub.i = sub i32 %76, %77
  store i32 %sub.i, i32* %cursor.i, align 4, !tbaa !150
  %arraydecay.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %72, i64 0, i32 3, i64 0
  %conv.i440 = zext i32 %sub.i to i64
  %call.i441 = tail call i64 @write(i32 %call, i8* nonnull %arraydecay.i, i64 %conv.i440) #15
  %conv5.i = trunc i64 %call.i441 to i32
  %cmp.i = icmp eq i32 %sub.i, %conv5.i
  %78 = bitcast i32* %cursor.i to <2 x i32>*
  store <2 x i32> zeroinitializer, <2 x i32>* %78, align 4, !tbaa !41
  %79 = atomicrmw and i32* %lock.i.i438, i32 2147483647 seq_cst
  br i1 %cmp.i, label %if.end277, label %if.then10.i

if.then10.i:                                      ; preds = %if.then.i442
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([144 x i8], [144 x i8]* @.str.32, i64 0, i64 0)) #15
  tail call void @abort() #15
  br label %if.end277

do.end.critedge.i:                                ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i
  %80 = atomicrmw and i32* %lock.i.i438, i32 2147483647 seq_cst
  br label %if.end277

if.else:                                          ; preds = %entry
  %call.i445 = tail call i8* @malloc(i64 4096) #15
  %tobool.not.i448 = icmp eq i8* %call.i445, null
  br i1 %tobool.not.i448, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EEC2EPvPc.exit, label %if.then6.i451

if.then6.i451:                                    ; preds = %if.else
  %add.ptr.i449 = getelementptr inbounds i8, i8* %call.i445, i64 4095
  store i8 0, i8* %add.ptr.i449, align 1, !tbaa !18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EEC2EPvPc.exit: ; preds = %if.then6.i451, %if.else
  %ss.sroa.74.0 = phi i8* [ %add.ptr.i449, %if.then6.i451 ], [ null, %if.else ]
  %bits = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4, i32 1
  %81 = load i8, i8* %bits, align 1, !tbaa !163
  %conv60 = zext i8 %81 to i32
  br label %while.cond

while.cond:                                       ; preds = %while.cond, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EEC2EPvPc.exit
  %print_bits.0 = phi i32 [ 8, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EEC2EPvPc.exit ], [ %shl, %while.cond ]
  %cmp61 = icmp slt i32 %print_bits.0, %conv60
  %shl = shl i32 %print_bits.0, 1
  br i1 %cmp61, label %while.cond, label %do.body, !llvm.loop !164

do.body:                                          ; preds = %while.cond
  %cmp62 = icmp slt i32 %print_bits.0, 65
  br i1 %cmp62, label %do.end, label %if.then63

if.then63:                                        ; preds = %do.body
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([140 x i8], [140 x i8]* @.str.2.11, i64 0, i64 0)) #15
  tail call void @abort() #15
  br label %do.end

do.end:                                           ; preds = %if.then63, %do.body
  %event65 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 5
  %82 = load i32, i32* %event65, align 4, !tbaa !162
  %cmp66 = icmp slt i32 %82, 2
  %idxprom = zext i32 %82 to i64
  %arrayidx = getelementptr inbounds [11 x i8*], [11 x i8*]* @__const.halide_default_trace.event_types, i64 0, i64 %idxprom
  %83 = load i8*, i8** %arrayidx, align 8, !tbaa !14
  %call.i456 = tail call i8* @halide_string_to_string(i8* %call.i445, i8* %ss.sroa.74.0, i8* %83) #15
  %call.i459 = tail call i8* @halide_string_to_string(i8* %call.i456, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #15
  %func70 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 0
  %84 = load i8*, i8** %func70, align 8, !tbaa !146
  %call.i462 = tail call i8* @halide_string_to_string(i8* %call.i459, i8* %ss.sroa.74.0, i8* %84) #15
  %call.i465 = tail call i8* @halide_string_to_string(i8* %call.i462, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #15
  %value_index73 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 7
  %85 = load i32, i32* %value_index73, align 4, !tbaa !165
  %conv.i468 = sext i32 %85 to i64
  %call.i469 = tail call i8* @halide_int64_to_string(i8* %call.i465, i8* %ss.sroa.74.0, i64 %conv.i468, i32 1) #15
  %call.i472 = tail call i8* @halide_string_to_string(i8* %call.i469, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.22.179, i64 0, i64 0)) #15
  %lanes77 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4, i32 2
  %86 = load i16, i16* %lanes77, align 2, !tbaa !138
  %cmp79 = icmp ugt i16 %86, 1
  br i1 %cmp79, label %if.then80, label %if.end82

if.then80:                                        ; preds = %do.end
  %call.i475 = tail call i8* @halide_string_to_string(i8* %call.i472, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.17, i64 0, i64 0)) #15
  br label %if.end82

if.end82:                                         ; preds = %if.then80, %do.end
  %ss.sroa.7.0 = phi i8* [ %call.i475, %if.then80 ], [ %call.i472, %do.end ]
  %dimensions83 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 8
  %87 = load i32, i32* %dimensions83, align 8, !tbaa !145
  %cmp84660 = icmp sgt i32 %87, 0
  br i1 %cmp84660, label %if.end100.peel, label %for.cond.cleanup

if.end100.peel:                                   ; preds = %if.end82
  %coordinates101 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 2
  %.pre = load i32*, i32** %coordinates101, align 8, !tbaa !157
  %.pre673 = load i32, i32* %.pre, align 4, !tbaa !41
  %conv.i484.peel = sext i32 %.pre673 to i64
  %call.i485.peel = tail call i8* @halide_int64_to_string(i8* %ss.sroa.7.0, i8* %ss.sroa.74.0, i64 %conv.i484.peel, i32 1) #15
  %88 = load i32, i32* %dimensions83, align 8, !tbaa !145
  %cmp84.peel = icmp sgt i32 %88, 1
  br i1 %cmp84.peel, label %if.then86, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %if.end100, %if.end100.peel, %if.end82
  %ss.sroa.7.1.lcssa = phi i8* [ %ss.sroa.7.0, %if.end82 ], [ %call.i485.peel, %if.end100.peel ], [ %call.i485, %if.end100 ]
  %89 = load i16, i16* %lanes77, align 2, !tbaa !138
  %cmp108 = icmp ugt i16 %89, 1
  %.sink684 = select i1 %cmp108, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.20, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.119, i64 0, i64 0)
  %call.i491 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.1.lcssa, i8* %ss.sroa.74.0, i8* %.sink684) #15
  br i1 %cmp66, label %if.then115, label %if.end263

if.then86:                                        ; preds = %if.end100.peel, %if.end100
  %indvars.iv670 = phi i64 [ %indvars.iv.next671, %if.end100 ], [ 1, %if.end100.peel ]
  %ss.sroa.7.1661 = phi i8* [ %call.i485, %if.end100 ], [ %call.i485.peel, %if.end100.peel ]
  %90 = load i16, i16* %lanes77, align 2, !tbaa !138
  %cmp90 = icmp ugt i16 %90, 1
  br i1 %cmp90, label %land.lhs.true, label %if.else97.split

land.lhs.true:                                    ; preds = %if.then86
  %conv89 = zext i16 %90 to i32
  %91 = trunc i64 %indvars.iv670 to i32
  %rem = urem i32 %91, %conv89
  %cmp94 = icmp eq i32 %rem, 0
  br i1 %cmp94, label %if.end100, label %if.else97.split

if.else97.split:                                  ; preds = %if.then86, %land.lhs.true
  br label %if.end100

if.end100:                                        ; preds = %land.lhs.true, %if.else97.split
  %.sink = phi i8* [ getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0), %if.else97.split ], [ getelementptr inbounds ([5 x i8], [5 x i8]* @.str.18, i64 0, i64 0), %land.lhs.true ]
  %call.i4786 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.1661, i8* %ss.sroa.74.0, i8* %.sink) #15
  %92 = load i32*, i32** %coordinates101, align 8, !tbaa !157
  %arrayidx103 = getelementptr inbounds i32, i32* %92, i64 %indvars.iv670
  %93 = load i32, i32* %arrayidx103, align 4, !tbaa !41
  %conv.i484 = sext i32 %93 to i64
  %call.i485 = tail call i8* @halide_int64_to_string(i8* %call.i4786, i8* %ss.sroa.74.0, i64 %conv.i484, i32 1) #15
  %indvars.iv.next671 = add nuw nsw i64 %indvars.iv670, 1
  %94 = load i32, i32* %dimensions83, align 8, !tbaa !145
  %95 = sext i32 %94 to i64
  %cmp84 = icmp slt i64 %indvars.iv.next671, %95
  br i1 %cmp84, label %if.then86, label %for.cond.cleanup, !llvm.loop !166

if.then115:                                       ; preds = %for.cond.cleanup
  %96 = load i16, i16* %lanes77, align 2, !tbaa !138
  %cmp119 = icmp ugt i16 %96, 1
  %.sink685 = select i1 %cmp119, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.22, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.23, i64 0, i64 0)
  %call.i497 = tail call i8* @halide_string_to_string(i8* %call.i491, i8* %ss.sroa.74.0, i8* %.sink685) #15
  %97 = load i16, i16* %lanes77, align 2, !tbaa !138
  %cmp130655.not = icmp eq i16 %97, 0
  br i1 %cmp130655.not, label %if.end263, label %if.end136.peel

if.end136.peel:                                   ; preds = %if.then115
  %code = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4, i32 0
  %value245 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 1
  %98 = bitcast i8** %value245 to i8***
  %cmp214 = icmp sgt i32 %print_bits.0, 15
  %99 = bitcast i8** %value245 to i16**
  %100 = bitcast i8** %value245 to float**
  %101 = bitcast i8** %value245 to double**
  %102 = bitcast i8** %value245 to i32**
  %103 = bitcast i8** %value245 to i64**
  %.pre674 = load i8, i8* %code, align 8, !tbaa !168
  switch i8 %.pre674, label %for.inc253.peel [
    i8 0, label %if.then140.peel
    i8 1, label %if.then176.peel
    i8 2, label %do.body213.peel
    i8 3, label %if.then244.peel
  ]

if.then244.peel:                                  ; preds = %if.end136.peel
  %104 = load i8**, i8*** %98, align 8, !tbaa !158
  %105 = load i8*, i8** %104, align 8, !tbaa !14
  %call.i543.peel = tail call i8* @halide_pointer_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i8* %105) #15
  br label %for.inc253.peel

do.body213.peel:                                  ; preds = %if.end136.peel
  br i1 %cmp214, label %do.end218.peel, label %if.then215.peel

if.then215.peel:                                  ; preds = %do.body213.peel
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([142 x i8], [142 x i8]* @.str.24, i64 0, i64 0)) #15
  tail call void @abort() #15
  br label %do.end218.peel

do.end218.peel:                                   ; preds = %if.then215.peel, %do.body213.peel
  switch i32 %print_bits.0, label %if.else232.peel [
    i32 32, label %if.then220.peel
    i32 16, label %if.then227.peel
  ]

if.then227.peel:                                  ; preds = %do.end218.peel
  %106 = load i16*, i16** %99, align 8, !tbaa !158
  %107 = load i16, i16* %106, align 2, !tbaa !169
  %call.i535.peel = tail call double @halide_float16_bits_to_double(i16 zeroext %107) #15
  %call2.i.peel = tail call i8* @halide_double_to_string(i8* %call.i497, i8* %ss.sroa.74.0, double %call.i535.peel, i32 1) #15
  br label %for.inc253.peel

if.then220.peel:                                  ; preds = %do.end218.peel
  %108 = load float*, float** %100, align 8, !tbaa !158
  %109 = load float, float* %108, align 4, !tbaa !170
  %conv.i533.peel = fpext float %109 to double
  %call.i534.peel = tail call i8* @halide_double_to_string(i8* %call.i497, i8* %ss.sroa.74.0, double %conv.i533.peel, i32 0) #15
  br label %for.inc253.peel

if.else232.peel:                                  ; preds = %do.end218.peel
  %110 = load double*, double** %101, align 8, !tbaa !158
  %111 = load double, double* %110, align 8, !tbaa !172
  %call.i540.peel = tail call i8* @halide_double_to_string(i8* %call.i497, i8* %ss.sroa.74.0, double %111, i32 1) #15
  br label %for.inc253.peel

if.then176.peel:                                  ; preds = %if.end136.peel
  switch i32 %print_bits.0, label %if.else199.peel [
    i32 8, label %if.then178.peel
    i32 16, label %if.then186.peel
    i32 32, label %if.then194.peel
  ]

if.then194.peel:                                  ; preds = %if.then176.peel
  %112 = load i32*, i32** %102, align 8, !tbaa !158
  %113 = load i32, i32* %112, align 4, !tbaa !41
  %conv.i526.peel = zext i32 %113 to i64
  %call.i527.peel = tail call i8* @halide_uint64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i526.peel, i32 1) #15
  br label %for.inc253.peel

if.then186.peel:                                  ; preds = %if.then176.peel
  %114 = load i16*, i16** %99, align 8, !tbaa !158
  %115 = load i16, i16* %114, align 2, !tbaa !169
  %conv.i522.peel = zext i16 %115 to i64
  %call.i523.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i522.peel, i32 1) #15
  br label %for.inc253.peel

if.then178.peel:                                  ; preds = %if.then176.peel
  %116 = load i8*, i8** %value245, align 8, !tbaa !158
  %117 = load i8, i8* %116, align 1, !tbaa !18
  %conv.i518.peel = zext i8 %117 to i64
  %call.i519.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i518.peel, i32 1) #15
  br label %for.inc253.peel

if.else199.peel:                                  ; preds = %if.then176.peel
  %118 = load i64*, i64** %103, align 8, !tbaa !158
  %119 = load i64, i64* %118, align 8, !tbaa !22
  %call.i530.peel = tail call i8* @halide_uint64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %119, i32 1) #15
  br label %for.inc253.peel

if.then140.peel:                                  ; preds = %if.end136.peel
  switch i32 %print_bits.0, label %if.else163.peel [
    i32 8, label %if.then142.peel
    i32 16, label %if.then150.peel
    i32 32, label %if.then158.peel
  ]

if.then158.peel:                                  ; preds = %if.then140.peel
  %120 = load i32*, i32** %102, align 8, !tbaa !158
  %121 = load i32, i32* %120, align 4, !tbaa !41
  %conv.i511.peel = sext i32 %121 to i64
  %call.i512.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i511.peel, i32 1) #15
  br label %for.inc253.peel

if.then150.peel:                                  ; preds = %if.then140.peel
  %122 = load i16*, i16** %99, align 8, !tbaa !158
  %123 = load i16, i16* %122, align 2, !tbaa !169
  %conv.i507.peel = sext i16 %123 to i64
  %call.i508.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i507.peel, i32 1) #15
  br label %for.inc253.peel

if.then142.peel:                                  ; preds = %if.then140.peel
  %124 = load i8*, i8** %value245, align 8, !tbaa !158
  %125 = load i8, i8* %124, align 1, !tbaa !18
  %conv.i503.peel = sext i8 %125 to i64
  %call.i504.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i503.peel, i32 1) #15
  br label %for.inc253.peel

if.else163.peel:                                  ; preds = %if.then140.peel
  %126 = load i64*, i64** %103, align 8, !tbaa !158
  %127 = load i64, i64* %126, align 8, !tbaa !22
  %call.i515.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %127, i32 1) #15
  br label %for.inc253.peel

for.inc253.peel:                                  ; preds = %if.else163.peel, %if.then142.peel, %if.then150.peel, %if.then158.peel, %if.else199.peel, %if.then178.peel, %if.then186.peel, %if.then194.peel, %if.else232.peel, %if.then220.peel, %if.then227.peel, %if.then244.peel, %if.end136.peel
  %ss.sroa.7.7.peel = phi i8* [ %call.i497, %if.end136.peel ], [ %call.i543.peel, %if.then244.peel ], [ %call.i540.peel, %if.else232.peel ], [ %call2.i.peel, %if.then227.peel ], [ %call.i534.peel, %if.then220.peel ], [ %call.i530.peel, %if.else199.peel ], [ %call.i527.peel, %if.then194.peel ], [ %call.i523.peel, %if.then186.peel ], [ %call.i519.peel, %if.then178.peel ], [ %call.i515.peel, %if.else163.peel ], [ %call.i512.peel, %if.then158.peel ], [ %call.i508.peel, %if.then150.peel ], [ %call.i504.peel, %if.then142.peel ]
  %128 = load i16, i16* %lanes77, align 2, !tbaa !138
  %cmp130.peel = icmp ugt i16 %128, 1
  br i1 %cmp130.peel, label %if.end136, label %if.end263

for.cond.cleanup131:                              ; preds = %for.inc253
  %cmp259 = icmp ugt i16 %154, 1
  br i1 %cmp259, label %if.then260, label %if.end263

if.end136:                                        ; preds = %for.inc253.peel, %for.inc253
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc253 ], [ 1, %for.inc253.peel ]
  %ss.sroa.7.5656 = phi i8* [ %ss.sroa.7.7, %for.inc253 ], [ %ss.sroa.7.7.peel, %for.inc253.peel ]
  %call.i500 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.5656, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #15
  %129 = load i8, i8* %code, align 8, !tbaa !168
  switch i8 %129, label %for.inc253 [
    i8 0, label %if.then140
    i8 1, label %if.then176
    i8 2, label %do.body213
    i8 3, label %if.then244
  ]

if.then140:                                       ; preds = %if.end136
  switch i32 %print_bits.0, label %if.else163 [
    i32 8, label %if.then142
    i32 16, label %if.then150
    i32 32, label %if.then158
  ]

if.then142:                                       ; preds = %if.then140
  %130 = load i8*, i8** %value245, align 8, !tbaa !158
  %arrayidx145 = getelementptr inbounds i8, i8* %130, i64 %indvars.iv
  %131 = load i8, i8* %arrayidx145, align 1, !tbaa !18
  %conv.i503 = sext i8 %131 to i64
  %call.i504 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i503, i32 1) #15
  br label %for.inc253

if.then150:                                       ; preds = %if.then140
  %132 = load i16*, i16** %99, align 8, !tbaa !158
  %arrayidx153 = getelementptr inbounds i16, i16* %132, i64 %indvars.iv
  %133 = load i16, i16* %arrayidx153, align 2, !tbaa !169
  %conv.i507 = sext i16 %133 to i64
  %call.i508 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i507, i32 1) #15
  br label %for.inc253

if.then158:                                       ; preds = %if.then140
  %134 = load i32*, i32** %102, align 8, !tbaa !158
  %arrayidx161 = getelementptr inbounds i32, i32* %134, i64 %indvars.iv
  %135 = load i32, i32* %arrayidx161, align 4, !tbaa !41
  %conv.i511 = sext i32 %135 to i64
  %call.i512 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i511, i32 1) #15
  br label %for.inc253

if.else163:                                       ; preds = %if.then140
  %136 = load i64*, i64** %103, align 8, !tbaa !158
  %arrayidx166 = getelementptr inbounds i64, i64* %136, i64 %indvars.iv
  %137 = load i64, i64* %arrayidx166, align 8, !tbaa !22
  %call.i515 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %137, i32 1) #15
  br label %for.inc253

if.then176:                                       ; preds = %if.end136
  switch i32 %print_bits.0, label %if.else199 [
    i32 8, label %if.then178
    i32 16, label %if.then186
    i32 32, label %if.then194
  ]

if.then178:                                       ; preds = %if.then176
  %138 = load i8*, i8** %value245, align 8, !tbaa !158
  %arrayidx181 = getelementptr inbounds i8, i8* %138, i64 %indvars.iv
  %139 = load i8, i8* %arrayidx181, align 1, !tbaa !18
  %conv.i518 = zext i8 %139 to i64
  %call.i519 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i518, i32 1) #15
  br label %for.inc253

if.then186:                                       ; preds = %if.then176
  %140 = load i16*, i16** %99, align 8, !tbaa !158
  %arrayidx189 = getelementptr inbounds i16, i16* %140, i64 %indvars.iv
  %141 = load i16, i16* %arrayidx189, align 2, !tbaa !169
  %conv.i522 = zext i16 %141 to i64
  %call.i523 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i522, i32 1) #15
  br label %for.inc253

if.then194:                                       ; preds = %if.then176
  %142 = load i32*, i32** %102, align 8, !tbaa !158
  %arrayidx197 = getelementptr inbounds i32, i32* %142, i64 %indvars.iv
  %143 = load i32, i32* %arrayidx197, align 4, !tbaa !41
  %conv.i526 = zext i32 %143 to i64
  %call.i527 = tail call i8* @halide_uint64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i526, i32 1) #15
  br label %for.inc253

if.else199:                                       ; preds = %if.then176
  %144 = load i64*, i64** %103, align 8, !tbaa !158
  %arrayidx202 = getelementptr inbounds i64, i64* %144, i64 %indvars.iv
  %145 = load i64, i64* %arrayidx202, align 8, !tbaa !22
  %call.i530 = tail call i8* @halide_uint64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %145, i32 1) #15
  br label %for.inc253

do.body213:                                       ; preds = %if.end136
  br i1 %cmp214, label %do.end218, label %if.then215

if.then215:                                       ; preds = %do.body213
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([142 x i8], [142 x i8]* @.str.24, i64 0, i64 0)) #15
  tail call void @abort() #15
  br label %do.end218

do.end218:                                        ; preds = %if.then215, %do.body213
  switch i32 %print_bits.0, label %if.else232 [
    i32 32, label %if.then220
    i32 16, label %if.then227
  ]

if.then220:                                       ; preds = %do.end218
  %146 = load float*, float** %100, align 8, !tbaa !158
  %arrayidx223 = getelementptr inbounds float, float* %146, i64 %indvars.iv
  %147 = load float, float* %arrayidx223, align 4, !tbaa !170
  %conv.i533 = fpext float %147 to double
  %call.i534 = tail call i8* @halide_double_to_string(i8* %call.i500, i8* %ss.sroa.74.0, double %conv.i533, i32 0) #15
  br label %for.inc253

if.then227:                                       ; preds = %do.end218
  %148 = load i16*, i16** %99, align 8, !tbaa !158
  %arrayidx230 = getelementptr inbounds i16, i16* %148, i64 %indvars.iv
  %149 = load i16, i16* %arrayidx230, align 2, !tbaa !169
  %call.i535 = tail call double @halide_float16_bits_to_double(i16 zeroext %149) #15
  %call2.i = tail call i8* @halide_double_to_string(i8* %call.i500, i8* %ss.sroa.74.0, double %call.i535, i32 1) #15
  br label %for.inc253

if.else232:                                       ; preds = %do.end218
  %150 = load double*, double** %101, align 8, !tbaa !158
  %arrayidx235 = getelementptr inbounds double, double* %150, i64 %indvars.iv
  %151 = load double, double* %arrayidx235, align 8, !tbaa !172
  %call.i540 = tail call i8* @halide_double_to_string(i8* %call.i500, i8* %ss.sroa.74.0, double %151, i32 1) #15
  br label %for.inc253

if.then244:                                       ; preds = %if.end136
  %152 = load i8**, i8*** %98, align 8, !tbaa !158
  %arrayidx247 = getelementptr inbounds i8*, i8** %152, i64 %indvars.iv
  %153 = load i8*, i8** %arrayidx247, align 8, !tbaa !14
  %call.i543 = tail call i8* @halide_pointer_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i8* %153) #15
  br label %for.inc253

for.inc253:                                       ; preds = %if.then244, %if.else232, %if.then227, %if.then220, %if.else199, %if.then194, %if.then186, %if.then178, %if.else163, %if.then158, %if.then150, %if.then142, %if.end136
  %ss.sroa.7.7 = phi i8* [ %call.i500, %if.end136 ], [ %call.i543, %if.then244 ], [ %call.i540, %if.else232 ], [ %call2.i, %if.then227 ], [ %call.i534, %if.then220 ], [ %call.i530, %if.else199 ], [ %call.i527, %if.then194 ], [ %call.i523, %if.then186 ], [ %call.i519, %if.then178 ], [ %call.i515, %if.else163 ], [ %call.i512, %if.then158 ], [ %call.i508, %if.then150 ], [ %call.i504, %if.then142 ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %154 = load i16, i16* %lanes77, align 2, !tbaa !138
  %155 = zext i16 %154 to i64
  %cmp130 = icmp ult i64 %indvars.iv.next, %155
  br i1 %cmp130, label %if.end136, label %for.cond.cleanup131, !llvm.loop !174

if.then260:                                       ; preds = %for.cond.cleanup131
  %call.i546 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.7, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.25, i64 0, i64 0)) #15
  br label %if.end263

if.end263:                                        ; preds = %if.then260, %for.cond.cleanup131, %for.inc253.peel, %if.then115, %for.cond.cleanup
  %ss.sroa.7.8 = phi i8* [ %call.i546, %if.then260 ], [ %ss.sroa.7.7, %for.cond.cleanup131 ], [ %call.i491, %for.cond.cleanup ], [ %ss.sroa.7.7.peel, %for.inc253.peel ], [ %call.i497, %if.then115 ]
  %trace_tag264 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 3
  %156 = load i8*, i8** %trace_tag264, align 8, !tbaa !147
  %tobool265.not = icmp eq i8* %156, null
  br i1 %tobool265.not, label %if.end274, label %land.lhs.true266

land.lhs.true266:                                 ; preds = %if.end263
  %157 = load i8, i8* %156, align 1, !tbaa !18
  %tobool268.not = icmp eq i8 %157, 0
  br i1 %tobool268.not, label %if.end274, label %if.then269

if.then269:                                       ; preds = %land.lhs.true266
  %call.i549 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.8, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.26, i64 0, i64 0)) #15
  %158 = load i8*, i8** %trace_tag264, align 8, !tbaa !147
  %call.i552 = tail call i8* @halide_string_to_string(i8* %call.i549, i8* %ss.sroa.74.0, i8* %158) #15
  %call.i555 = tail call i8* @halide_string_to_string(i8* %call.i552, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.27, i64 0, i64 0)) #15
  br label %if.end274

if.end274:                                        ; preds = %if.then269, %land.lhs.true266, %if.end263
  %ss.sroa.7.9 = phi i8* [ %ss.sroa.7.8, %if.end263 ], [ %ss.sroa.7.8, %land.lhs.true266 ], [ %call.i555, %if.then269 ]
  %call.i558 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.9, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #15
  br label %while.cond.i560

while.cond.i560:                                  ; preds = %while.cond.i560, %if.end274
  %159 = atomicrmw volatile xchg i8* @_ZN6Halide7Runtime8Internal22halide_trace_file_lockE, i8 1 acquire
  %tobool.not.i559 = icmp eq i8 %159, 0
  br i1 %tobool.not.i559, label %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit, label %while.cond.i560, !llvm.loop !175

_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit: ; preds = %while.cond.i560
  br i1 %tobool.not.i448, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #15
  store atomic volatile i8 0, i8* @_ZN6Halide7Runtime8Internal22halide_trace_file_lockE release, align 1
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %sub.ptr.lhs.cast.i.i563 = ptrtoint i8* %call.i558 to i64
  %sub.ptr.rhs.cast.i.i564 = ptrtoint i8* %call.i445 to i64
  %sub.ptr.sub.i.i565 = sub i64 1, %sub.ptr.rhs.cast.i.i564
  %add.i.i566 = add i64 %sub.ptr.sub.i.i565, %sub.ptr.lhs.cast.i.i563
  %call.i.i567 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i445, i64 %add.i.i566) #15
  tail call void @halide_print(i8* %user_context, i8* nonnull %call.i445) #15
  store atomic volatile i8 0, i8* @_ZN6Halide7Runtime8Internal22halide_trace_file_lockE release, align 1
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i445, i64 %add.i.i566) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i445) #15
  br label %if.end277

if.end277:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EED2Ev.exit, %do.end.critedge.i, %if.then10.i, %if.then.i442, %_ZN21halide_trace_packet_t9trace_tagEv.exit
  ret i32 %0
}

; Function Attrs: nounwind
define weak i32 @halide_get_trace_file(i8* %user_context) local_unnamed_addr #4 {
entry:
  br label %while.cond.i

while.cond.i:                                     ; preds = %while.cond.i, %entry
  %0 = atomicrmw volatile xchg i8* @_ZN6Halide7Runtime8Internal22halide_trace_file_lockE, i8 1 acquire
  %tobool.not.i = icmp eq i8 %0, 0
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit, label %while.cond.i, !llvm.loop !175

_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit: ; preds = %while.cond.i
  %1 = load i32, i32* @_ZN6Halide7Runtime8Internal17halide_trace_fileE, align 4, !tbaa !41
  %cmp = icmp slt i32 %1, 0
  br i1 %cmp, label %if.then, label %if.end11

if.then:                                          ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %call = tail call i8* @getenv(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.28, i64 0, i64 0)) #15
  %tobool.not = icmp eq i8* %call, null
  br i1 %tobool.not, label %if.else, label %if.then1

if.then1:                                         ; preds = %if.then
  %call2 = tail call i8* @fopen(i8* nonnull %call, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.29, i64 0, i64 0)) #15
  %tobool3.not = icmp eq i8* %call2, null
  br i1 %tobool3.not, label %if.then4, label %do.end

if.then4:                                         ; preds = %if.then1
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([139 x i8], [139 x i8]* @.str.30, i64 0, i64 0)) #15
  tail call void @abort() #15
  br label %do.end

do.end:                                           ; preds = %if.then4, %if.then1
  %call5 = tail call i32 @fileno(i8* %call2) #15
  tail call void @halide_set_trace_file(i32 %call5) #16
  store i8* %call2, i8** @_ZN6Halide7Runtime8Internal35halide_trace_file_internally_openedE, align 8, !tbaa !14
  %2 = load %"class.Halide::Runtime::Internal::TraceBuffer"*, %"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE, align 8, !tbaa !14
  %tobool6.not = icmp eq %"class.Halide::Runtime::Internal::TraceBuffer"* %2, null
  br i1 %tobool6.not, label %if.then7, label %if.end11

if.then7:                                         ; preds = %do.end
  %call8 = tail call i8* @malloc(i64 1048588) #15
  store i8* %call8, i8** bitcast (%"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE to i8**), align 8, !tbaa !14
  %cursor.i = getelementptr inbounds i8, i8* %call8, i64 4
  %3 = bitcast i8* %cursor.i to <2 x i32>*
  store <2 x i32> zeroinitializer, <2 x i32>* %3, align 4, !tbaa !41
  %lock.i.i = bitcast i8* %call8 to i32*
  store volatile i32 0, i32* %lock.i.i, align 4, !tbaa !148
  br label %if.end11

if.else:                                          ; preds = %if.then
  tail call void @halide_set_trace_file(i32 0) #16
  br label %if.end11

if.end11:                                         ; preds = %if.else, %if.then7, %do.end, %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %4 = load i32, i32* @_ZN6Halide7Runtime8Internal17halide_trace_fileE, align 4, !tbaa !41
  store atomic volatile i8 0, i8* @_ZN6Halide7Runtime8Internal22halide_trace_file_lockE release, align 1
  ret i32 %4
}

declare i8* @memcpy(i8*, i8*, i64) local_unnamed_addr #1

declare i8* @fopen(i8*, i8*) local_unnamed_addr #1

declare i32 @fileno(i8*) local_unnamed_addr #1

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_set_trace_file(i32 %fd) local_unnamed_addr #2 {
entry:
  store i32 %fd, i32* @_ZN6Halide7Runtime8Internal17halide_trace_fileE, align 4, !tbaa !41
  ret void
}

; Function Attrs: nounwind mustprogress
define weak void @halide_trace_cleanup() #0 {
entry:
  %call = tail call i32 @halide_shutdown_trace() #16
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_shutdown_trace() local_unnamed_addr #0 {
entry:
  %0 = load i8*, i8** @_ZN6Halide7Runtime8Internal35halide_trace_file_internally_openedE, align 8, !tbaa !14
  %tobool.not = icmp eq i8* %0, null
  br i1 %tobool.not, label %return, label %if.then

if.then:                                          ; preds = %entry
  %call = tail call i32 @fclose(i8* nonnull %0) #15
  store i32 0, i32* @_ZN6Halide7Runtime8Internal17halide_trace_fileE, align 4, !tbaa !41
  store i8 0, i8* @_ZN6Halide7Runtime8Internal29halide_trace_file_initializedE, align 1, !tbaa !19
  store i8* null, i8** @_ZN6Halide7Runtime8Internal35halide_trace_file_internally_openedE, align 8, !tbaa !14
  %1 = load %"class.Halide::Runtime::Internal::TraceBuffer"*, %"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE, align 8, !tbaa !14
  %tobool1.not = icmp eq %"class.Halide::Runtime::Internal::TraceBuffer"* %1, null
  br i1 %tobool1.not, label %return, label %if.then2

if.then2:                                         ; preds = %if.then
  %2 = bitcast %"class.Halide::Runtime::Internal::TraceBuffer"* %1 to i8*
  tail call void @free(i8* nonnull %2) #15
  br label %return

return:                                           ; preds = %if.then2, %if.then, %entry
  %retval.0 = phi i32 [ %call, %if.then2 ], [ %call, %if.then ], [ 0, %entry ]
  ret i32 %retval.0
}

declare i32 @fclose(i8*) local_unnamed_addr #1

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i8*, %struct.halide_trace_event_t*)* @halide_set_custom_trace(i32 (i8*, %struct.halide_trace_event_t*)* %t) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i8*, %struct.halide_trace_event_t*)*, i32 (i8*, %struct.halide_trace_event_t*)** @_ZN6Halide7Runtime8Internal19halide_custom_traceE, align 8, !tbaa !14
  store i32 (i8*, %struct.halide_trace_event_t*)* %t, i32 (i8*, %struct.halide_trace_event_t*)** @_ZN6Halide7Runtime8Internal19halide_custom_traceE, align 8, !tbaa !14
  ret i32 (i8*, %struct.halide_trace_event_t*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_trace(i8* %user_context, %struct.halide_trace_event_t* %e) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, %struct.halide_trace_event_t*)*, i32 (i8*, %struct.halide_trace_event_t*)** @_ZN6Halide7Runtime8Internal19halide_custom_traceE, align 8, !tbaa !14
  %call = tail call i32 %0(i8* %user_context, %struct.halide_trace_event_t* %e) #15
  ret i32 %call
}

; Function Attrs: nounwind
define weak i32 @halide_trace_helper(i8* %user_context, i8* %func, i8* %value, i32* %coords, i32 %type_code, i32 %type_bits, i32 %type_lanes, i32 %code, i32 %parent_id, i32 %value_index, i32 %dimensions, i8* %trace_tag) local_unnamed_addr #4 {
entry:
  %event = alloca %struct.halide_trace_event_t, align 8
  %0 = bitcast %struct.halide_trace_event_t* %event to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %0) #12
  %code.i.i = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 4, i32 0
  %bits.i.i = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 4, i32 1
  %lanes.i.i = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 4, i32 2
  %func1 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 0
  store i8* %func, i8** %func1, align 8, !tbaa !146
  %value2 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 1
  store i8* %value, i8** %value2, align 8, !tbaa !158
  %coordinates = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 2
  store i32* %coords, i32** %coordinates, align 8, !tbaa !157
  %trace_tag3 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 3
  store i8* %trace_tag, i8** %trace_tag3, align 8, !tbaa !147
  %conv = trunc i32 %type_code to i8
  store i8 %conv, i8* %code.i.i, align 8, !tbaa !168
  %conv5 = trunc i32 %type_bits to i8
  store i8 %conv5, i8* %bits.i.i, align 1, !tbaa !163
  %conv7 = trunc i32 %type_lanes to i16
  store i16 %conv7, i16* %lanes.i.i, align 2, !tbaa !138
  %event9 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 5
  store i32 %code, i32* %event9, align 4, !tbaa !162
  %parent_id10 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 6
  store i32 %parent_id, i32* %parent_id10, align 8, !tbaa !176
  %value_index11 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 7
  store i32 %value_index, i32* %value_index11, align 4, !tbaa !165
  %dimensions12 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 8
  store i32 %dimensions, i32* %dimensions12, align 8, !tbaa !145
  %call = call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %0, i64 56) #15
  %add = add nsw i32 %type_bits, 7
  %div = sdiv i32 %add, 8
  %mul = mul nsw i32 %div, %type_lanes
  %conv13 = sext i32 %mul to i64
  %call14 = call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* %value, i64 %conv13) #15
  %1 = bitcast i32* %coords to i8*
  %conv15 = sext i32 %dimensions to i64
  %mul16 = shl nsw i64 %conv15, 2
  %call17 = call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* %1, i64 %mul16) #15
  %call18 = call i32 @halide_trace(i8* %user_context, %struct.halide_trace_event_t* nonnull %event) #15
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %0) #12
  ret i32 %call18
}

; Function Attrs: nounwind mustprogress
define linkonce zeroext i1 @_ZN6Halide7Runtime8Internal9ends_withEPKcS3_(i8* %filename, i8* %suffix) local_unnamed_addr #0 {
entry:
  br label %while.cond

while.cond:                                       ; preds = %while.cond, %entry
  %f.0 = phi i8* [ %filename, %entry ], [ %incdec.ptr, %while.cond ]
  %0 = load i8, i8* %f.0, align 1, !tbaa !18
  %tobool.not = icmp eq i8 %0, 0
  %incdec.ptr = getelementptr inbounds i8, i8* %f.0, i64 1
  br i1 %tobool.not, label %while.cond1, label %while.cond, !llvm.loop !177

while.cond1:                                      ; preds = %while.cond, %while.cond1
  %s.0 = phi i8* [ %incdec.ptr4, %while.cond1 ], [ %suffix, %while.cond ]
  %1 = load i8, i8* %s.0, align 1, !tbaa !18
  %tobool2.not = icmp eq i8 %1, 0
  %incdec.ptr4 = getelementptr inbounds i8, i8* %s.0, i64 1
  br i1 %tobool2.not, label %while.cond6.preheader, label %while.cond1, !llvm.loop !178

while.cond6.preheader:                            ; preds = %while.cond1
  %cmp34 = icmp ne i8* %s.0, %suffix
  %cmp735 = icmp ne i8* %f.0, %filename
  %2 = and i1 %cmp735, %cmp34
  br i1 %2, label %if.end, label %while.cond6.preheader.while.end13_crit_edge

while.cond6.preheader.while.end13_crit_edge:      ; preds = %while.cond6.preheader
  %cmp16.0 = icmp eq i8 0, 0
  br label %while.end13

if.end:                                           ; preds = %while.cond6.preheader, %if.end.while.body8_crit_edge
  %f.13649 = phi i8* [ %incdec.ptr11, %if.end.while.body8_crit_edge ], [ %f.0, %while.cond6.preheader ]
  %s.13748 = phi i8* [ %incdec.ptr12, %if.end.while.body8_crit_edge ], [ %s.0, %while.cond6.preheader ]
  %incdec.ptr11 = getelementptr inbounds i8, i8* %f.13649, i64 -1
  %incdec.ptr12 = getelementptr inbounds i8, i8* %s.13748, i64 -1
  %cmp = icmp ne i8* %incdec.ptr12, %suffix
  %cmp7 = icmp ne i8* %incdec.ptr11, %filename
  %3 = and i1 %cmp7, %cmp
  %.pre = load i8, i8* %incdec.ptr11, align 1, !tbaa !18
  %.pre45 = load i8, i8* %incdec.ptr12, align 1, !tbaa !18
  br i1 %3, label %if.end.while.body8_crit_edge, label %if.end.while.end13_crit_edge, !llvm.loop !179

if.end.while.end13_crit_edge:                     ; preds = %if.end
  %cmp16.1 = icmp eq i8 %.pre, %.pre45
  br label %while.end13

if.end.while.body8_crit_edge:                     ; preds = %if.end
  %cmp10.not = icmp eq i8 %.pre, %.pre45
  br i1 %cmp10.not, label %if.end, label %cleanup

while.end13:                                      ; preds = %if.end.while.end13_crit_edge, %while.cond6.preheader.while.end13_crit_edge
  %cmp16.phi = phi i1 [ %cmp16.0, %while.cond6.preheader.while.end13_crit_edge ], [ %cmp16.1, %if.end.while.end13_crit_edge ]
  br label %cleanup

cleanup:                                          ; preds = %if.end.while.body8_crit_edge, %while.end13
  %retval.0 = phi i1 [ %cmp16.phi, %while.end13 ], [ false, %if.end.while.body8_crit_edge ]
  ret i1 %retval.0
}

; Function Attrs: nounwind
define weak i32 @halide_debug_to_file(i8* %user_context, i8* %filename, i32 %type_code, %struct.halide_buffer_t* %buf) local_unnamed_addr #4 {
entry:
  %shape = alloca [4 x %struct.halide_dimension_t], align 16
  %header = alloca %"struct.Halide::Runtime::Internal::halide_tiff_header", align 2
  %offset = alloca i32, align 4
  %count = alloca i32, align 4
  %array_name = alloca [256 x i8], align 1
  %array_name43 = getelementptr inbounds [256 x i8], [256 x i8]* %array_name, i64 0, i64 0
  %header198 = alloca [129 x i8], align 1
  %tags = alloca [8 x i32], align 4
  %extents = alloca [4 x i32], align 4
  %name_header = alloca [2 x i32], align 4
  %payload_header = alloca [2 x i32], align 4
  %header289 = alloca [5 x i32], align 4
  %temp = alloca [4096 x i8], align 1
  %idx = alloca [4 x i32], align 4
  %zero = alloca i64, align 8
  %host.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 2
  %0 = load i8*, i8** %host.i, align 8, !tbaa !180
  %cmp.i = icmp eq i8* %0, null
  br i1 %cmp.i, label %_ZNK15halide_buffer_t15is_bounds_queryEv.exit, label %if.end

_ZNK15halide_buffer_t15is_bounds_queryEv.exit:    ; preds = %entry
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !182
  %cmp2.i = icmp eq i64 %1, 0
  br i1 %cmp2.i, label %if.then, label %if.end

if.then:                                          ; preds = %_ZNK15halide_buffer_t15is_bounds_queryEv.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.34, i64 0, i64 0)) #15
  br label %return

if.end:                                           ; preds = %_ZNK15halide_buffer_t15is_bounds_queryEv.exit, %entry
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 5
  %2 = load i32, i32* %dimensions, align 4, !tbaa !183
  %cmp = icmp sgt i32 %2, 4
  br i1 %cmp, label %if.then1, label %if.end2

if.then1:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.1.35, i64 0, i64 0)) #15
  br label %return

if.end2:                                          ; preds = %if.end
  %call3 = tail call i32 @halide_copy_to_host(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #15
  %cmp4.not = icmp eq i32 %call3, 0
  br i1 %cmp4.not, label %if.end6, label %return

if.end6:                                          ; preds = %if.end2
  %call.i598 = tail call i8* @fopen(i8* %filename, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2.36, i64 0, i64 0)) #15
  %cmp.i601.not = icmp eq i8* %call.i598, null
  br i1 %cmp.i601.not, label %return, label %if.end9

if.end9:                                          ; preds = %if.end6
  %3 = bitcast [4 x %struct.halide_dimension_t]* %shape to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %3) #12
  %min.i = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 0, i32 0
  %extent.i = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 0, i32 1
  %4 = bitcast [4 x %struct.halide_dimension_t]* %shape to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %4, align 16, !tbaa !41
  %min.i.1 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 1, i32 0
  %extent.i.1 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 1, i32 1
  %5 = bitcast i32* %min.i.1 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %5, align 16, !tbaa !41
  %min.i.2 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 2, i32 0
  %extent.i.2 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 2, i32 1
  %6 = bitcast i32* %min.i.2 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %6, align 16, !tbaa !41
  %min.i.3 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 3, i32 0
  %extent.i.3 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 3, i32 1
  %7 = bitcast i32* %min.i.3 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %7, align 16, !tbaa !41
  %8 = load i32, i32* %dimensions, align 4, !tbaa !183
  %cmp11875 = icmp sgt i32 %8, 0
  br i1 %cmp11875, label %for.body.lr.ph, label %for.body22.preheader

for.body.lr.ph:                                   ; preds = %if.end9
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  %9 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !184
  %10 = zext i32 %8 to i64
  %11 = add nsw i64 %10, -1
  %12 = icmp ult i64 %11, 3
  %13 = select i1 %12, i64 %10, i64 4
  br label %for.body

for.cond19.preheader:                             ; preds = %for.body
  %cmp20873 = icmp slt i32 %8, 4
  br i1 %cmp20873, label %for.body22.preheader, label %for.cond.cleanup21

for.body22.preheader:                             ; preds = %for.cond19.preheader, %if.end9
  %elts.0.lcssa907 = phi i64 [ %mul, %for.cond19.preheader ], [ 1, %if.end9 ]
  %14 = sext i32 %8 to i64
  %15 = sub i32 3, %8
  %16 = zext i32 %15 to i64
  %17 = add nuw nsw i64 %16, 1
  %min.iters.check = icmp eq i32 %15, 0
  br i1 %min.iters.check, label %for.body22.preheader162, label %vector.ph

vector.ph:                                        ; preds = %for.body22.preheader
  %n.vec = and i64 %17, 8589934590
  %ind.end = add nsw i64 %n.vec, %14
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %offset.idx = add i64 %index, %14
  %induction36 = add i64 %offset.idx, 1
  %18 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 %offset.idx, i32 0
  %19 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 %induction36, i32 0
  %20 = bitcast i32* %18 to <2 x i32>*
  store <2 x i32> <i32 0, i32 1>, <2 x i32>* %20, align 16, !tbaa !41
  %21 = bitcast i32* %19 to <2 x i32>*
  store <2 x i32> <i32 0, i32 1>, <2 x i32>* %21, align 16, !tbaa !41
  %22 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 %offset.idx, i32 2
  %23 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 %induction36, i32 2
  store i32 0, i32* %22, align 8, !tbaa !185
  store i32 0, i32* %23, align 8, !tbaa !185
  %index.next = add i64 %index, 2
  %24 = icmp eq i64 %index.next, %n.vec
  br i1 %24, label %middle.block, label %vector.body, !llvm.loop !187

middle.block:                                     ; preds = %vector.body
  %cmp.n = icmp eq i64 %17, %n.vec
  br i1 %cmp.n, label %for.cond.cleanup21, label %for.body22.preheader162

for.body22.preheader162:                          ; preds = %for.body22.preheader, %middle.block
  %indvars.iv.ph = phi i64 [ %14, %for.body22.preheader ], [ %ind.end, %middle.block ]
  br label %for.body22

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %indvars.iv887 = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next888, %for.body ]
  %elts.0877 = phi i64 [ 1, %for.body.lr.ph ], [ %mul, %for.body ]
  %arrayidx = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %9, i64 %indvars.iv887
  %arrayidx14 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 %indvars.iv887
  %25 = bitcast %struct.halide_dimension_t* %arrayidx14 to i8*
  %26 = bitcast %struct.halide_dimension_t* %arrayidx to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 dereferenceable(16) %25, i8* nonnull align 4 dereferenceable(16) %26, i64 16, i1 false), !tbaa.struct !188
  %extent = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 %indvars.iv887, i32 1
  %27 = load i32, i32* %extent, align 4, !tbaa !189
  %conv903 = zext i32 %27 to i64
  %mul = mul i64 %elts.0877, %conv903
  %indvars.iv.next888 = add nuw nsw i64 %indvars.iv887, 1
  %exitcond.not17 = icmp eq i64 %indvars.iv.next888, %13
  br i1 %exitcond.not17, label %for.cond19.preheader, label %for.body, !llvm.loop !190

for.cond.cleanup21:                               ; preds = %for.body22, %middle.block, %for.cond19.preheader
  %elts.0.lcssa906 = phi i64 [ %mul, %for.cond19.preheader ], [ %elts.0.lcssa907, %middle.block ], [ %elts.0.lcssa907, %for.body22 ]
  %bits.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 4, i32 1
  %28 = load i8, i8* %bits.i, align 1, !tbaa !144
  %conv.i = zext i8 %28 to i32
  %add.i = add nuw nsw i32 %conv.i, 7
  %div.i = lshr i32 %add.i, 3
  %call34 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal9ends_withEPKcS3_(i8* %filename, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3.37, i64 0, i64 0)) #16
  br i1 %call34, label %if.then36, label %lor.lhs.false

for.body22:                                       ; preds = %for.body22.preheader162, %for.body22
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body22 ], [ %indvars.iv.ph, %for.body22.preheader162 ]
  %min = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 %indvars.iv, i32 0
  %29 = bitcast i32* %min to <2 x i32>*
  store <2 x i32> <i32 0, i32 1>, <2 x i32>* %29, align 16, !tbaa !41
  %stride = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 %indvars.iv, i32 2
  store i32 0, i32* %stride, align 8, !tbaa !185
  %indvars.iv.next = add nsw i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond886.not = icmp eq i32 %lftr.wideiv, 4
  br i1 %exitcond886.not, label %for.cond.cleanup21, label %for.body22, !llvm.loop !191

lor.lhs.false:                                    ; preds = %for.cond.cleanup21
  %call35 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal9ends_withEPKcS3_(i8* %filename, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4.38, i64 0, i64 0)) #16
  br i1 %call35, label %if.then36, label %if.else164

if.then36:                                        ; preds = %lor.lhs.false, %for.cond.cleanup21
  %30 = load i32, i32* %extent.i, align 4, !tbaa !189
  %31 = load i32, i32* %extent.i.1, align 4, !tbaa !189
  %32 = load i32, i32* %extent.i.3, align 4, !tbaa !189
  %switch = icmp ult i32 %32, 2
  %33 = load i32, i32* %extent.i.2, align 4, !tbaa !189
  %cmp50 = icmp slt i32 %33, 5
  %or.cond = and i1 %switch, %cmp50
  %depth.0 = select i1 %or.cond, i32 1, i32 %33
  %channels.0 = select i1 %or.cond, i32 %33, i32 %32
  %34 = bitcast %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header to i8*
  call void @llvm.lifetime.start.p0i8(i64 210, i8* nonnull %34) #12
  %byte_order_marker = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 0
  store i16 18761, i16* %byte_order_marker, align 2, !tbaa !192
  %version = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 1
  store i16 42, i16* %version, align 2, !tbaa !194
  %ifd0_offset = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 2
  store i32 8, i32* %ifd0_offset, align 2, !tbaa !195
  %entry_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 3
  store i16 15, i16* %entry_count, align 2, !tbaa !196
  %tag_code2.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 0, i32 0
  store i16 256, i16* %tag_code2.i, align 2, !tbaa !197
  %type_code.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 0, i32 1
  store i16 4, i16* %type_code.i, align 2, !tbaa !199
  %count3.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 0, i32 2
  store i32 1, i32* %count3.i, align 2, !tbaa !200
  %i32.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 0, i32 3, i32 0
  store i32 %30, i32* %i32.i, align 2, !tbaa !18
  %tag_code2.i632 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 1, i32 0
  store i16 257, i16* %tag_code2.i632, align 2, !tbaa !197
  %type_code.i633 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 1, i32 1
  store i16 4, i16* %type_code.i633, align 2, !tbaa !199
  %count3.i634 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 1, i32 2
  store i32 1, i32* %count3.i634, align 2, !tbaa !200
  %i32.i635 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 1, i32 3, i32 0
  store i32 %31, i32* %i32.i635, align 2, !tbaa !18
  %35 = trunc i32 %add.i to i16
  %conv68 = and i16 %35, 504
  %tag_code2.i643 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 2, i32 0
  store i16 258, i16* %tag_code2.i643, align 2, !tbaa !197
  %type_code.i644 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 2, i32 1
  store i16 3, i16* %type_code.i644, align 2, !tbaa !199
  %count3.i645 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 2, i32 2
  store i32 1, i32* %count3.i645, align 2, !tbaa !200
  %value4.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 2, i32 3
  %i16.i = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i to i16*
  store i16 %conv68, i16* %i16.i, align 2, !tbaa !18
  %tag_code2.i653 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 3, i32 0
  store i16 259, i16* %tag_code2.i653, align 2, !tbaa !197
  %type_code.i654 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 3, i32 1
  store i16 3, i16* %type_code.i654, align 2, !tbaa !199
  %count3.i655 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 3, i32 2
  store i32 1, i32* %count3.i655, align 2, !tbaa !200
  %value4.i656 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 3, i32 3
  %i16.i657 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i656 to i16*
  store i16 1, i16* %i16.i657, align 2, !tbaa !18
  %cmp71 = icmp sgt i32 %channels.0, 2
  %conv72 = select i1 %cmp71, i16 2, i16 1
  %tag_code2.i665 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 4, i32 0
  store i16 262, i16* %tag_code2.i665, align 2, !tbaa !197
  %type_code.i666 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 4, i32 1
  store i16 3, i16* %type_code.i666, align 2, !tbaa !199
  %count3.i667 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 4, i32 2
  store i32 1, i32* %count3.i667, align 2, !tbaa !200
  %value4.i668 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 4, i32 3
  %i16.i669 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i668 to i16*
  store i16 %conv72, i16* %i16.i669, align 2, !tbaa !18
  %tag_code2.i677 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 5, i32 0
  store i16 273, i16* %tag_code2.i677, align 2, !tbaa !197
  %type_code.i678 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 5, i32 1
  store i16 4, i16* %type_code.i678, align 2, !tbaa !199
  %count3.i679 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 5, i32 2
  store i32 %channels.0, i32* %count3.i679, align 2, !tbaa !200
  %i32.i680 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 5, i32 3, i32 0
  store i32 210, i32* %i32.i680, align 2, !tbaa !18
  %conv75 = trunc i32 %channels.0 to i16
  %tag_code2.i688 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 6, i32 0
  store i16 277, i16* %tag_code2.i688, align 2, !tbaa !197
  %type_code.i689 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 6, i32 1
  store i16 3, i16* %type_code.i689, align 2, !tbaa !199
  %count3.i690 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 6, i32 2
  store i32 1, i32* %count3.i690, align 2, !tbaa !200
  %value4.i691 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 6, i32 3
  %i16.i692 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i691 to i16*
  store i16 %conv75, i16* %i16.i692, align 2, !tbaa !18
  %tag_code2.i706 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 7, i32 0
  store i16 278, i16* %tag_code2.i706, align 2, !tbaa !197
  %type_code.i707 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 7, i32 1
  store i16 4, i16* %type_code.i707, align 2, !tbaa !199
  %count3.i708 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 7, i32 2
  store i32 1, i32* %count3.i708, align 2, !tbaa !200
  %i32.i709 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 7, i32 3, i32 0
  store i32 %31, i32* %i32.i709, align 2, !tbaa !18
  %cmp80 = icmp eq i32 %channels.0, 1
  %36 = trunc i64 %elts.0.lcssa906 to i32
  %conv86595 = mul i32 %div.i, %36
  %mul84 = shl i32 %channels.0, 2
  %add = add i32 %mul84, 210
  %add.sink = select i1 %cmp80, i32 %conv86595, i32 %add
  %37 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 8, i32 0
  store i16 279, i16* %37, align 2
  %38 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 8, i32 1
  store i16 4, i16* %38, align 2
  %39 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 8, i32 2
  store i32 %channels.0, i32* %39, align 2
  %40 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 8, i32 3, i32 0
  store i32 %add.sink, i32* %40, align 2
  %tag_code2.i732 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 9, i32 0
  store i16 282, i16* %tag_code2.i732, align 2, !tbaa !197
  %type_code3.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 9, i32 1
  store i16 5, i16* %type_code3.i, align 2, !tbaa !199
  %count4.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 9, i32 2
  %41 = bitcast i32* %count4.i to <2 x i32>*
  store <2 x i32> <i32 1, i32 194>, <2 x i32>* %41, align 2, !tbaa !18
  %tag_code2.i741 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 10, i32 0
  store i16 283, i16* %tag_code2.i741, align 2, !tbaa !197
  %type_code3.i742 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 10, i32 1
  store i16 5, i16* %type_code3.i742, align 2, !tbaa !199
  %count4.i743 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 10, i32 2
  %42 = bitcast i32* %count4.i743 to <2 x i32>*
  store <2 x i32> <i32 1, i32 202>, <2 x i32>* %42, align 2, !tbaa !18
  %tag_code2.i759 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 11, i32 0
  store i16 284, i16* %tag_code2.i759, align 2, !tbaa !197
  %type_code.i760 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 11, i32 1
  store i16 3, i16* %type_code.i760, align 2, !tbaa !199
  %count3.i761 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 11, i32 2
  store i32 1, i32* %count3.i761, align 2, !tbaa !200
  %value4.i762 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 11, i32 3
  %i16.i763 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i762 to i16*
  store i16 2, i16* %i16.i763, align 2, !tbaa !18
  %tag_code2.i754 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 12, i32 0
  store i16 296, i16* %tag_code2.i754, align 2, !tbaa !197
  %type_code.i755 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 12, i32 1
  store i16 3, i16* %type_code.i755, align 2, !tbaa !199
  %count3.i756 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 12, i32 2
  store i32 1, i32* %count3.i756, align 2, !tbaa !200
  %value4.i757 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 12, i32 3
  %i16.i758 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i757 to i16*
  store i16 1, i16* %i16.i758, align 2, !tbaa !18
  %idxprom92 = sext i32 %type_code to i64
  %arrayidx93 = getelementptr inbounds [10 x i16], [10 x i16]* @_ZN6Halide7Runtime8Internal30pixel_type_to_tiff_sample_typeE, i64 0, i64 %idxprom92
  %43 = load i16, i16* %arrayidx93, align 2, !tbaa !169
  %tag_code2.i749 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 13, i32 0
  store i16 339, i16* %tag_code2.i749, align 2, !tbaa !197
  %type_code.i750 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 13, i32 1
  store i16 3, i16* %type_code.i750, align 2, !tbaa !199
  %count3.i751 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 13, i32 2
  store i32 1, i32* %count3.i751, align 2, !tbaa !200
  %value4.i752 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 13, i32 3
  %i16.i753 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i752 to i16*
  store i16 %43, i16* %i16.i753, align 2, !tbaa !18
  %tag_code2.i745 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 14, i32 0
  store i16 -32539, i16* %tag_code2.i745, align 2, !tbaa !197
  %type_code.i746 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 14, i32 1
  store i16 4, i16* %type_code.i746, align 2, !tbaa !199
  %count3.i747 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 14, i32 2
  store i32 1, i32* %count3.i747, align 2, !tbaa !200
  %i32.i748 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 14, i32 3, i32 0
  store i32 %depth.0, i32* %i32.i748, align 2, !tbaa !18
  %ifd0_end = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 5
  %44 = bitcast i32* %ifd0_end to <4 x i32>*
  store <4 x i32> <i32 0, i32 1, i32 1, i32 1>, <4 x i32>* %44, align 2, !tbaa !41
  %arrayidx100 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 7, i64 1
  store i32 1, i32* %arrayidx100, align 2, !tbaa !41
  %call.i736 = call i64 @fwrite(i8* nonnull %34, i64 210, i64 1, i8* nonnull %call.i598) #15
  %cmp.i737.not = icmp eq i64 %call.i736, 0
  br i1 %cmp.i737.not, label %cleanup154, label %if.end103

if.end103:                                        ; preds = %if.then36
  %cmp104 = icmp sgt i32 %channels.0, 1
  br i1 %cmp104, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731.lr.ph, label %cleanup154.thread

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731.lr.ph: ; preds = %if.end103
  %45 = bitcast i32* %offset to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %45) #12
  %mul108 = shl i32 %channels.0, 3
  %add109 = add i32 %mul108, 210
  store i32 %add109, i32* %offset, align 4, !tbaa !41
  %mul123 = mul i32 %depth.0, %div.i
  %46 = load i32, i32* %extent.i, align 4
  %47 = load i32, i32* %extent.i.1, align 4
  %mul124 = mul i32 %mul123, %46
  %mul125 = mul i32 %mul124, %47
  br label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731: ; preds = %if.end118, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731.lr.ph
  %i111.0865 = phi i32 [ 0, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731.lr.ph ], [ %inc128, %if.end118 ]
  %call.i727 = call i64 @fwrite(i8* nonnull %45, i64 4, i64 1, i8* nonnull %call.i598) #15
  %cmp.i728.not = icmp eq i64 %call.i727, 0
  br i1 %cmp.i728.not, label %cleanup151.thread, label %if.end118

if.end118:                                        ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731
  %48 = load i32, i32* %offset, align 4, !tbaa !41
  %add126 = add nsw i32 %mul125, %48
  store i32 %add126, i32* %offset, align 4, !tbaa !41
  %inc128 = add nuw nsw i32 %i111.0865, 1
  %exitcond881.not = icmp eq i32 %inc128, %channels.0
  br i1 %exitcond881.not, label %for.end129, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731, !llvm.loop !201

for.end129:                                       ; preds = %if.end118
  %49 = bitcast i32* %count to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %49) #12
  store i32 %mul125, i32* %count, align 4, !tbaa !41
  %inc146.1 = add nuw nsw i32 0, 1
  br label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720

for.cond138:                                      ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720
  %exitcond.not = icmp eq i32 %inc146.phi, %channels.0
  br i1 %exitcond.not, label %cleanup151, label %for.cond138._ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720_crit_edge, !llvm.loop !202

for.cond138._ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720_crit_edge: ; preds = %for.cond138
  %inc146.0 = add nuw nsw i32 %inc146.phi, 1
  br label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720: ; preds = %for.cond138._ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720_crit_edge, %for.end129
  %inc146.phi = phi i32 [ %inc146.0, %for.cond138._ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720_crit_edge ], [ %inc146.1, %for.end129 ]
  %call.i716 = call i64 @fwrite(i8* nonnull %49, i64 4, i64 1, i8* nonnull %call.i598) #15
  %cmp.i717.not = icmp eq i64 %call.i716, 0
  br i1 %cmp.i717.not, label %select.unfold, label %for.cond138

select.unfold:                                    ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %49) #12
  br label %cleanup151.thread

cleanup151.thread:                                ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731, %select.unfold
  %retval.2.ph = phi i32 [ -5, %select.unfold ], [ -4, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %45) #12
  br label %cleanup154

cleanup151:                                       ; preds = %for.cond138
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %49) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %45) #12
  br label %cleanup154.thread

cleanup154.thread:                                ; preds = %cleanup151, %if.end103
  call void @llvm.lifetime.end.p0i8(i64 210, i8* nonnull %34) #12
  br label %if.end311

cleanup154:                                       ; preds = %cleanup151.thread, %if.then36
  %retval.4 = phi i32 [ -3, %if.then36 ], [ %retval.2.ph, %cleanup151.thread ]
  call void @llvm.lifetime.end.p0i8(i64 210, i8* nonnull %34) #12
  br label %cleanup433

if.else164:                                       ; preds = %lor.lhs.false
  %call165 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal9ends_withEPKcS3_(i8* %filename, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5.39, i64 0, i64 0)) #16
  br i1 %call165, label %while.cond, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631

while.cond:                                       ; preds = %if.else164, %while.cond
  %end.0 = phi i8* [ %incdec.ptr167, %while.cond ], [ %filename, %if.else164 ]
  %50 = load i8, i8* %end.0, align 1, !tbaa !18
  %tobool.not = icmp eq i8 %50, 0
  %incdec.ptr167 = getelementptr inbounds i8, i8* %end.0, i64 1
  br i1 %tobool.not, label %while.body171, label %while.cond, !llvm.loop !203

while.cond174.preheader:                          ; preds = %while.body171
  %end.1872.lcssa883 = ptrtoint i8* %end.1872 to i64
  %51 = ptrtoint i8* %filename to i64
  %52 = sub i64 %51, %end.1872.lcssa883
  br label %while.cond174

while.body171:                                    ; preds = %while.cond, %while.body171
  %end.1872 = phi i8* [ %incdec.ptr172.ptr, %while.body171 ], [ %end.0, %while.cond ]
  %incdec.ptr172.ptr = getelementptr inbounds i8, i8* %end.1872, i64 -1
  %.pr = load i8, i8* %incdec.ptr172.ptr, align 1, !tbaa !18
  %cmp170.not = icmp eq i8 %.pr, 46
  br i1 %cmp170.not, label %while.cond174.preheader, label %while.body171, !llvm.loop !204

while.cond174:                                    ; preds = %land.rhs176, %while.cond174.preheader
  %start.0.idx = phi i64 [ %start.0.add, %land.rhs176 ], [ -1, %while.cond174.preheader ]
  %start.0.ptr.ptr = getelementptr inbounds i8, i8* %end.1872, i64 %start.0.idx
  %cmp175.not = icmp eq i8* %start.0.ptr.ptr, %filename
  br i1 %cmp175.not, label %while.end183, label %land.rhs176

land.rhs176:                                      ; preds = %while.cond174
  %start.0.add = add nsw i64 %start.0.idx, -1
  %arrayidx177.ptr = getelementptr inbounds i8, i8* %end.1872, i64 %start.0.add
  %53 = load i8, i8* %arrayidx177.ptr, align 1, !tbaa !18
  %cmp179.not = icmp eq i8 %53, 47
  br i1 %cmp179.not, label %while.end183, label %while.cond174, !llvm.loop !205

while.end183:                                     ; preds = %land.rhs176, %while.cond174
  %start.0.idx.lcssa = phi i64 [ %52, %while.cond174 ], [ %start.0.idx, %land.rhs176 ]
  %54 = trunc i64 %start.0.idx.lcssa to i32
  %conv184 = xor i32 %54, -1
  %55 = getelementptr inbounds [256 x i8], [256 x i8]* %array_name, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %55) #12
  %cmp186.not868 = icmp eq i64 %start.0.idx.lcssa, -1
  br i1 %cmp186.not868, label %iter.check, label %while.body187.preheader

while.body187.preheader:                          ; preds = %while.end183
  %56 = xor i64 %start.0.idx.lcssa, -1
  %min.iters.check40 = icmp ugt i64 %start.0.idx.lcssa, -33
  br i1 %min.iters.check40, label %while.body187.preheader160, label %vector.memcheck

vector.memcheck:                                  ; preds = %while.body187.preheader
  %57 = xor i64 %start.0.idx.lcssa, -1
  %scevgep44 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 0, i64 %57
  %scevgep45 = getelementptr i8, i8* %end.1872, i64 %start.0.idx.lcssa
  %scevgep46 = getelementptr i8, i8* %end.1872, i64 -1
  %bound0 = icmp ult i8* %array_name43, %scevgep46
  %bound1 = icmp ult i8* %scevgep45, %scevgep44
  %found.conflict = and i1 %bound0, %bound1
  br i1 %found.conflict, label %while.body187.preheader160, label %vector.ph42

vector.ph42:                                      ; preds = %vector.memcheck
  %n.vec48 = and i64 %56, -32
  %ind.end52 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 0, i64 %n.vec48
  %ind.end54 = add i64 %start.0.idx.lcssa, %n.vec48
  br label %vector.body39

vector.body39:                                    ; preds = %vector.body39, %vector.ph42
  %index49 = phi i64 [ 0, %vector.ph42 ], [ %index.next50, %vector.body39 ]
  %next.gep = getelementptr [256 x i8], [256 x i8]* %array_name, i64 0, i64 %index49
  %offset.idx57 = add i64 %start.0.idx.lcssa, %index49
  %58 = getelementptr inbounds i8, i8* %end.1872, i64 %offset.idx57
  %59 = bitcast i8* %58 to <16 x i8>*
  %wide.load = load <16 x i8>, <16 x i8>* %59, align 1, !tbaa !18, !alias.scope !206
  %60 = getelementptr inbounds i8, i8* %58, i64 16
  %61 = bitcast i8* %60 to <16 x i8>*
  %wide.load58 = load <16 x i8>, <16 x i8>* %61, align 1, !tbaa !18, !alias.scope !206
  %62 = bitcast i8* %next.gep to <16 x i8>*
  store <16 x i8> %wide.load, <16 x i8>* %62, align 1, !tbaa !18, !alias.scope !209, !noalias !206
  %63 = getelementptr i8, i8* %next.gep, i64 16
  %64 = bitcast i8* %63 to <16 x i8>*
  store <16 x i8> %wide.load58, <16 x i8>* %64, align 1, !tbaa !18, !alias.scope !209, !noalias !206
  %index.next50 = add i64 %index49, 32
  %65 = icmp eq i64 %index.next50, %n.vec48
  br i1 %65, label %middle.block37, label %vector.body39, !llvm.loop !211

middle.block37:                                   ; preds = %vector.body39
  %cmp.n55 = icmp eq i64 %n.vec48, %56
  br i1 %cmp.n55, label %while.cond191.preheader, label %while.body187.preheader160

while.body187.preheader160:                       ; preds = %vector.memcheck, %while.body187.preheader, %middle.block37
  %dst.0870.ph = phi i8* [ %55, %vector.memcheck ], [ %55, %while.body187.preheader ], [ %ind.end52, %middle.block37 ]
  %start.1869.idx.ph = phi i64 [ %start.0.idx.lcssa, %vector.memcheck ], [ %start.0.idx.lcssa, %while.body187.preheader ], [ %ind.end54, %middle.block37 ]
  br label %while.body187

while.cond191.preheader:                          ; preds = %while.body187, %middle.block37
  %incdec.ptr189.lcssa = phi i8* [ %ind.end52, %middle.block37 ], [ %incdec.ptr189, %while.body187 ]
  %add.ptr = getelementptr inbounds [256 x i8], [256 x i8]* %array_name, i64 0, i64 256
  %cmp193866 = icmp ult i8* %incdec.ptr189.lcssa, %add.ptr
  br i1 %cmp193866, label %iter.check, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705

iter.check:                                       ; preds = %while.cond191.preheader, %while.end183
  %dst.0.lcssa911 = phi i8* [ %incdec.ptr189.lcssa, %while.cond191.preheader ], [ %55, %while.end183 ]
  %dst.0.lcssa91162 = ptrtoint i8* %dst.0.lcssa911 to i64
  %scevgep = getelementptr inbounds [256 x i8], [256 x i8]* %array_name, i64 1, i64 0
  %66 = sub i64 0, %dst.0.lcssa91162
  %scevgep63 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 1, i64 %66
  %exitcount.ptrcnt.to.int = ptrtoint i8* %scevgep63 to i64
  %min.iters.check65 = icmp ult i8* %scevgep63, inttoptr (i64 4 to i8*)
  br i1 %min.iters.check65, label %while.body194.preheader, label %vector.main.loop.iter.check

vector.main.loop.iter.check:                      ; preds = %iter.check
  %min.iters.check67 = icmp ult i8* %scevgep63, inttoptr (i64 32 to i8*)
  br i1 %min.iters.check67, label %vec.epilog.ph, label %vector.ph68

vector.ph68:                                      ; preds = %vector.main.loop.iter.check
  %n.vec70 = and i64 %exitcount.ptrcnt.to.int, -32
  %next.gep74.0 = getelementptr i8, i8* %dst.0.lcssa911, i64 0
  %index.next72.0 = add i64 0, 32
  br label %vector.body61

vector.body61:                                    ; preds = %vector.body61.vector.body61_crit_edge, %vector.ph68
  %index.next72.phi = phi i64 [ %index.next72.0, %vector.ph68 ], [ %index.next72.1, %vector.body61.vector.body61_crit_edge ]
  %next.gep74.phi = phi i8* [ %next.gep74.0, %vector.ph68 ], [ %next.gep74.1, %vector.body61.vector.body61_crit_edge ]
  %67 = bitcast i8* %next.gep74.phi to <16 x i8>*
  store <16 x i8> zeroinitializer, <16 x i8>* %67, align 1, !tbaa !18
  %68 = getelementptr i8, i8* %next.gep74.phi, i64 16
  %69 = bitcast i8* %68 to <16 x i8>*
  store <16 x i8> zeroinitializer, <16 x i8>* %69, align 1, !tbaa !18
  %70 = icmp eq i64 %index.next72.phi, %n.vec70
  br i1 %70, label %middle.block59, label %vector.body61.vector.body61_crit_edge, !llvm.loop !212

vector.body61.vector.body61_crit_edge:            ; preds = %vector.body61
  %next.gep74.1 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index.next72.phi
  %index.next72.1 = add i64 %index.next72.phi, 32
  br label %vector.body61

middle.block59:                                   ; preds = %vector.body61
  %cmp.n73 = icmp eq i64 %n.vec70, %exitcount.ptrcnt.to.int
  br i1 %cmp.n73, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705, label %vec.epilog.iter.check

vec.epilog.iter.check:                            ; preds = %middle.block59
  %ind.end85 = getelementptr i8, i8* %dst.0.lcssa911, i64 %n.vec70
  %n.vec.remaining = and i64 %exitcount.ptrcnt.to.int, 28
  %min.epilog.iters.check = icmp eq i64 %n.vec.remaining, 0
  br i1 %min.epilog.iters.check, label %while.body194.preheader, label %vec.epilog.ph

vec.epilog.ph:                                    ; preds = %vector.main.loop.iter.check, %vec.epilog.iter.check
  %vec.epilog.resume.val = phi i64 [ %n.vec70, %vec.epilog.iter.check ], [ 0, %vector.main.loop.iter.check ]
  %71 = sub i64 0, %dst.0.lcssa91162
  %scevgep76 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 1, i64 %71
  %exitcount.ptrcnt.to.int78 = ptrtoint i8* %scevgep76 to i64
  %n.vec80 = and i64 %exitcount.ptrcnt.to.int78, -4
  %ind.end84 = getelementptr i8, i8* %dst.0.lcssa911, i64 %n.vec80
  br label %vec.epilog.vector.body

vec.epilog.vector.body:                           ; preds = %vec.epilog.vector.body, %vec.epilog.ph
  %index81 = phi i64 [ %vec.epilog.resume.val, %vec.epilog.ph ], [ %index.next82, %vec.epilog.vector.body ]
  %next.gep87 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index81
  %72 = bitcast i8* %next.gep87 to <4 x i8>*
  store <4 x i8> zeroinitializer, <4 x i8>* %72, align 1, !tbaa !18
  %index.next82 = add i64 %index81, 4
  %73 = icmp eq i64 %index.next82, %n.vec80
  br i1 %73, label %vec.epilog.middle.block, label %vec.epilog.vector.body, !llvm.loop !213

vec.epilog.middle.block:                          ; preds = %vec.epilog.vector.body
  %cmp.n86 = icmp eq i64 %n.vec80, %exitcount.ptrcnt.to.int78
  br i1 %cmp.n86, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705, label %while.body194.preheader

while.body194.preheader:                          ; preds = %iter.check, %vec.epilog.iter.check, %vec.epilog.middle.block
  %dst.1867.ph = phi i8* [ %dst.0.lcssa911, %iter.check ], [ %ind.end85, %vec.epilog.iter.check ], [ %ind.end84, %vec.epilog.middle.block ]
  br label %while.body194

while.body187:                                    ; preds = %while.body187.preheader160, %while.body187
  %dst.0870 = phi i8* [ %incdec.ptr189, %while.body187 ], [ %dst.0870.ph, %while.body187.preheader160 ]
  %start.1869.idx = phi i64 [ %start.1869.add, %while.body187 ], [ %start.1869.idx.ph, %while.body187.preheader160 ]
  %start.1869.ptr = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.idx
  %start.1869.add = add nuw nsw i64 %start.1869.idx, 1
  %74 = load i8, i8* %start.1869.ptr, align 1, !tbaa !18
  %incdec.ptr189 = getelementptr inbounds i8, i8* %dst.0870, i64 1
  store i8 %74, i8* %dst.0870, align 1, !tbaa !18
  %cmp186.not = icmp eq i64 %start.1869.add, -1
  br i1 %cmp186.not, label %while.cond191.preheader, label %while.body187, !llvm.loop !214

while.body194:                                    ; preds = %while.body194.preheader, %while.body194
  %dst.1867 = phi i8* [ %incdec.ptr195, %while.body194 ], [ %dst.1867.ph, %while.body194.preheader ]
  %incdec.ptr195 = getelementptr inbounds i8, i8* %dst.1867, i64 1
  store i8 0, i8* %dst.1867, align 1, !tbaa !18
  %exitcond882.not = icmp eq i8* %incdec.ptr195, %scevgep
  br i1 %exitcond882.not, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705, label %while.body194, !llvm.loop !215

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705: ; preds = %while.body194, %middle.block59, %vec.epilog.middle.block, %while.cond191.preheader
  %add197 = sub i32 6, %54
  %and = and i32 %add197, -8
  %75 = getelementptr inbounds [129 x i8], [129 x i8]* %header198, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 129, i8* nonnull %75) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 dereferenceable(129) %75, i8* nonnull align 1 dereferenceable(129) getelementptr inbounds ([129 x i8], [129 x i8]* @__const.halide_debug_to_file.header, i64 0, i64 0), i64 129, i1 false)
  %call.i701 = call i64 @fwrite(i8* nonnull %75, i64 128, i64 1, i8* nonnull %call.i598) #15
  %76 = load i32, i32* %dimensions, align 4, !tbaa !183
  %cmp19.i.i = icmp sgt i32 %76, 0
  br i1 %cmp19.i.i, label %for.body.lr.ph.i.i, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge: ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705
  %sub.i694.0 = sub nsw i64 1, 0
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.lr.ph.i.i:                               ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  %77 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8, !tbaa !184
  %wide.trip.count.i.i = zext i32 %76 to i64
  %min.iters.check91 = icmp ult i32 %76, 3
  br i1 %min.iters.check91, label %for.body.i.i.preheader, label %vector.ph92

vector.ph92:                                      ; preds = %for.body.lr.ph.i.i
  %n.vec94 = and i64 %wide.trip.count.i.i, 4294967294
  br label %vector.body90

vector.body90:                                    ; preds = %pred.load.continue103, %vector.ph92
  %index95 = phi i64 [ 0, %vector.ph92 ], [ %index.next96, %pred.load.continue103 ]
  %vec.phi = phi i64 [ 0, %vector.ph92 ], [ %predphi, %pred.load.continue103 ]
  %vec.phi101 = phi i64 [ 0, %vector.ph92 ], [ %predphi104, %pred.load.continue103 ]
  %induction100 = or i64 %index95, 1
  %78 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %77, i64 %index95, i32 2
  %79 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %77, i64 %induction100, i32 2
  %80 = load i32, i32* %78, align 4, !tbaa !185
  %81 = load i32, i32* %79, align 4, !tbaa !185
  %82 = icmp sgt i32 %80, 0
  %83 = icmp sgt i32 %81, 0
  %84 = zext i32 %80 to i64
  %85 = zext i32 %81 to i64
  br i1 %82, label %pred.load.if, label %pred.load.continue

pred.load.if:                                     ; preds = %vector.body90
  %86 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %77, i64 %index95, i32 1
  %87 = load i32, i32* %86, align 4, !tbaa !189
  br label %pred.load.continue

pred.load.continue:                               ; preds = %pred.load.if, %vector.body90
  %88 = phi i32 [ poison, %vector.body90 ], [ %87, %pred.load.if ]
  br i1 %83, label %pred.load.if102, label %pred.load.continue103

pred.load.if102:                                  ; preds = %pred.load.continue
  %89 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %77, i64 %induction100, i32 1
  %90 = load i32, i32* %89, align 4, !tbaa !189
  br label %pred.load.continue103

pred.load.continue103:                            ; preds = %pred.load.if102, %pred.load.continue
  %91 = phi i32 [ poison, %pred.load.continue ], [ %90, %pred.load.if102 ]
  %92 = add nsw i32 %88, -1
  %93 = add nsw i32 %91, -1
  %94 = sext i32 %92 to i64
  %95 = sext i32 %93 to i64
  %96 = mul nsw i64 %94, %84
  %97 = mul nsw i64 %95, %85
  %98 = select i1 %82, i64 %96, i64 0
  %predphi = add i64 %vec.phi, %98
  %99 = select i1 %83, i64 %97, i64 0
  %predphi104 = add i64 %vec.phi101, %99
  %index.next96 = add i64 %index95, 2
  %100 = icmp eq i64 %index.next96, %n.vec94
  br i1 %100, label %middle.block88, label %vector.body90, !llvm.loop !217

middle.block88:                                   ; preds = %pred.load.continue103
  %bin.rdx = add i64 %predphi104, %predphi
  %cmp.n98 = icmp eq i64 %n.vec94, %wide.trip.count.i.i
  br i1 %cmp.n98, label %for.body.i13.i.preheader, label %for.body.i.i.preheader

for.body.i.i.preheader:                           ; preds = %for.body.lr.ph.i.i, %middle.block88
  %indvars.iv.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %n.vec94, %middle.block88 ]
  %index.021.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %bin.rdx, %middle.block88 ]
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.body.i.i.preheader, %if.end.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %if.end.i.i ], [ %indvars.iv.i.i.ph, %for.body.i.i.preheader ]
  %index.021.i.i = phi i64 [ %index.1.i.i, %if.end.i.i ], [ %index.021.i.i.ph, %for.body.i.i.preheader ]
  %stride2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %77, i64 %indvars.iv.i.i, i32 2
  %101 = load i32, i32* %stride2.i.i, align 4, !tbaa !185
  %cmp3.i.i = icmp sgt i32 %101, 0
  br i1 %cmp3.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %conv18.i.i = zext i32 %101 to i64
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %77, i64 %indvars.iv.i.i, i32 1
  %102 = load i32, i32* %extent.i.i, align 4, !tbaa !189
  %sub.i.i = add nsw i32 %102, -1
  %conv7.i.i = sext i32 %sub.i.i to i64
  %mul.i.i = mul nsw i64 %conv7.i.i, %conv18.i.i
  %add.i.i693 = add nsw i64 %mul.i.i, %index.021.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i64 [ %add.i.i693, %if.then.i.i ], [ %index.021.i.i, %for.body.i.i ]
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %exitcond.not.i.i = icmp eq i64 %indvars.iv.next.i.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i.i, label %for.body.i13.i.preheader, label %for.body.i.i, !llvm.loop !218

for.body.i13.i.preheader:                         ; preds = %if.end.i.i, %middle.block88
  %index.1.i.i.lcssa = phi i64 [ %bin.rdx, %middle.block88 ], [ %index.1.i.i, %if.end.i.i ]
  %min.iters.check108 = icmp ult i32 %76, 3
  br i1 %min.iters.check108, label %for.body.i13.i.preheader157, label %vector.ph109

vector.ph109:                                     ; preds = %for.body.i13.i.preheader
  %n.vec111 = and i64 %wide.trip.count.i.i, 4294967294
  br label %vector.body107

vector.body107:                                   ; preds = %pred.load.continue123, %vector.ph109
  %index112 = phi i64 [ 0, %vector.ph109 ], [ %index.next113, %pred.load.continue123 ]
  %vec.phi118 = phi i64 [ 0, %vector.ph109 ], [ %predphi124, %pred.load.continue123 ]
  %vec.phi119 = phi i64 [ 0, %vector.ph109 ], [ %predphi125, %pred.load.continue123 ]
  %induction117 = or i64 %index112, 1
  %103 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %77, i64 %index112, i32 2
  %104 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %77, i64 %induction117, i32 2
  %105 = load i32, i32* %103, align 4, !tbaa !185
  %106 = load i32, i32* %104, align 4, !tbaa !185
  %107 = icmp slt i32 %105, 0
  %108 = icmp slt i32 %106, 0
  %109 = sext i32 %105 to i64
  %110 = sext i32 %106 to i64
  br i1 %107, label %pred.load.if120, label %pred.load.continue121

pred.load.if120:                                  ; preds = %vector.body107
  %111 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %77, i64 %index112, i32 1
  %112 = load i32, i32* %111, align 4, !tbaa !189
  br label %pred.load.continue121

pred.load.continue121:                            ; preds = %pred.load.if120, %vector.body107
  %113 = phi i32 [ poison, %vector.body107 ], [ %112, %pred.load.if120 ]
  br i1 %108, label %pred.load.if122, label %pred.load.continue123

pred.load.if122:                                  ; preds = %pred.load.continue121
  %114 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %77, i64 %induction117, i32 1
  %115 = load i32, i32* %114, align 4, !tbaa !189
  br label %pred.load.continue123

pred.load.continue123:                            ; preds = %pred.load.if122, %pred.load.continue121
  %116 = phi i32 [ poison, %pred.load.continue121 ], [ %115, %pred.load.if122 ]
  %117 = add nsw i32 %113, -1
  %118 = add nsw i32 %116, -1
  %119 = sext i32 %117 to i64
  %120 = sext i32 %118 to i64
  %121 = mul nsw i64 %119, %109
  %122 = mul nsw i64 %120, %110
  %123 = select i1 %107, i64 %121, i64 0
  %predphi124 = add i64 %vec.phi118, %123
  %124 = select i1 %108, i64 %122, i64 0
  %predphi125 = add i64 %vec.phi119, %124
  %index.next113 = add i64 %index112, 2
  %125 = icmp eq i64 %index.next113, %n.vec111
  br i1 %125, label %middle.block105, label %vector.body107, !llvm.loop !219

middle.block105:                                  ; preds = %pred.load.continue123
  %bin.rdx126 = add i64 %predphi125, %predphi124
  %cmp.n115 = icmp eq i64 %n.vec111, %wide.trip.count.i.i
  br i1 %cmp.n115, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i.preheader157

for.body.i13.i.preheader157:                      ; preds = %for.body.i13.i.preheader, %middle.block105
  %indvars.iv.i10.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %n.vec111, %middle.block105 ]
  %index.018.i.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %bin.rdx126, %middle.block105 ]
  br label %for.body.i13.i

for.body.i13.i:                                   ; preds = %for.body.i13.i.preheader157, %if.end.i24.i
  %indvars.iv.i10.i = phi i64 [ %indvars.iv.next.i22.i, %if.end.i24.i ], [ %indvars.iv.i10.i.ph, %for.body.i13.i.preheader157 ]
  %index.018.i.i = phi i64 [ %index.1.i21.i, %if.end.i24.i ], [ %index.018.i.i.ph, %for.body.i13.i.preheader157 ]
  %stride2.i11.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %77, i64 %indvars.iv.i10.i, i32 2
  %126 = load i32, i32* %stride2.i11.i, align 4, !tbaa !185
  %cmp3.i12.i = icmp slt i32 %126, 0
  br i1 %cmp3.i12.i, label %if.then.i20.i, label %if.end.i24.i

if.then.i20.i:                                    ; preds = %for.body.i13.i
  %conv.i14.i = sext i32 %126 to i64
  %extent.i15.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %77, i64 %indvars.iv.i10.i, i32 1
  %127 = load i32, i32* %extent.i15.i, align 4, !tbaa !189
  %sub.i16.i = add nsw i32 %127, -1
  %conv7.i17.i = sext i32 %sub.i16.i to i64
  %mul.i18.i = mul nsw i64 %conv7.i17.i, %conv.i14.i
  %add.i19.i = add nsw i64 %mul.i18.i, %index.018.i.i
  br label %if.end.i24.i

if.end.i24.i:                                     ; preds = %if.then.i20.i, %for.body.i13.i
  %index.1.i21.i = phi i64 [ %add.i19.i, %if.then.i20.i ], [ %index.018.i.i, %for.body.i13.i ]
  %indvars.iv.next.i22.i = add nuw nsw i64 %indvars.iv.i10.i, 1
  %exitcond.not.i23.i = icmp eq i64 %indvars.iv.next.i22.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i23.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i, !llvm.loop !220

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %if.end.i24.i, %middle.block105
  %index.1.i21.i.lcssa = phi i64 [ %bin.rdx126, %middle.block105 ], [ %index.1.i21.i, %if.end.i24.i ]
  %add8.i.i = add nsw i64 %index.1.i.i.lcssa, 1
  %sub.i694.1 = sub nsw i64 %add8.i.i, %index.1.i21.i.lcssa
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit
  %add8.i27.i = phi i64 [ 1, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge ], [ %add8.i.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %sub.i694.phi = phi i64 [ %sub.i694.0, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge ], [ %sub.i694.1, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %128 = load i8, i8* %bits.i, align 1, !tbaa !144
  %conv.i.i696 = zext i8 %128 to i64
  %add.i4.i = add nuw nsw i64 %conv.i.i696, 7
  %div.i.i697 = lshr i64 %add.i4.i, 3
  %mul.i698 = mul i64 %div.i.i697, %sub.i694.phi
  %129 = trunc i64 %mul.i698 to i32
  %130 = add i32 %129, 7
  %131 = and i32 %130, 7
  %conv204 = xor i32 %131, 7
  %conv205 = zext i32 %conv204 to i64
  %add206 = add i64 %mul.i698, %conv205
  %tobool207.not = icmp ult i64 %add206, 4294967296
  br i1 %tobool207.not, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687, label %cleanup278.thread

cleanup278.thread:                                ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.6.40, i64 0, i64 0)) #15
  call void @llvm.lifetime.end.p0i8(i64 129, i8* nonnull %75) #12
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %55) #12
  br label %cleanup433

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687: ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  %132 = icmp sgt i32 %76, 2
  %spec.store.select = select i1 %132, i32 %76, i32 2
  %133 = bitcast [8 x i32]* %tags to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %133) #12
  %arrayinit.begin = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 0
  store i32 14, i32* %arrayinit.begin, align 4, !tbaa !41
  %arrayinit.element = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 1
  %add214 = shl i32 %spec.store.select, 2
  %and215 = add i32 %add214, 4
  %mul216 = and i32 %and215, -8
  %add217 = add i32 %and, 40
  %add218 = add i32 %add217, %mul216
  %add220 = add i32 %add218, %129
  %add221 = add i32 %add220, %conv204
  store i32 %add221, i32* %arrayinit.element, align 4, !tbaa !41
  %arrayinit.element222 = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 2
  %134 = bitcast i32* %arrayinit.element222 to <2 x i32>*
  store <2 x i32> <i32 6, i32 8>, <2 x i32>* %134, align 4, !tbaa !41
  %arrayinit.element224 = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 4
  %idxprom225 = sext i32 %type_code to i64
  %arrayidx226 = getelementptr inbounds [10 x i8], [10 x i8]* @_ZN6Halide7Runtime8Internal31pixel_type_to_matlab_class_codeE, i64 0, i64 %idxprom225
  %135 = load i8, i8* %arrayidx226, align 1, !tbaa !18
  %conv227 = zext i8 %135 to i32
  store i32 %conv227, i32* %arrayinit.element224, align 4, !tbaa !41
  %arrayinit.element228 = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 5
  %136 = bitcast i32* %arrayinit.element228 to <2 x i32>*
  store <2 x i32> <i32 1, i32 5>, <2 x i32>* %136, align 4, !tbaa !41
  %arrayinit.element230 = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 7
  store i32 %add214, i32* %arrayinit.element230, align 4, !tbaa !41
  %call.i683 = call i64 @fwrite(i8* nonnull %133, i64 32, i64 1, i8* nonnull %call.i598) #15
  %cmp.i684.not = icmp eq i64 %call.i683, 0
  br i1 %cmp.i684.not, label %cleanup278, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676: ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687
  %137 = bitcast [4 x i32]* %extents to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %137) #12
  %arrayinit.begin235 = getelementptr inbounds [4 x i32], [4 x i32]* %extents, i64 0, i64 0
  %138 = load i32, i32* %extent.i, align 4, !tbaa !189
  store i32 %138, i32* %arrayinit.begin235, align 4, !tbaa !41
  %arrayinit.element238 = getelementptr inbounds [4 x i32], [4 x i32]* %extents, i64 0, i64 1
  %139 = load i32, i32* %extent.i.1, align 4, !tbaa !189
  store i32 %139, i32* %arrayinit.element238, align 4, !tbaa !41
  %arrayinit.element241 = getelementptr inbounds [4 x i32], [4 x i32]* %extents, i64 0, i64 2
  %140 = load i32, i32* %extent.i.2, align 4, !tbaa !189
  store i32 %140, i32* %arrayinit.element241, align 4, !tbaa !41
  %arrayinit.element244 = getelementptr inbounds [4 x i32], [4 x i32]* %extents, i64 0, i64 3
  %141 = load i32, i32* %extent.i.3, align 4, !tbaa !189
  store i32 %141, i32* %arrayinit.element244, align 4, !tbaa !41
  %conv248 = sext i32 %mul216 to i64
  %call.i672 = call i64 @fwrite(i8* nonnull %137, i64 %conv248, i64 1, i8* nonnull %call.i598) #15
  %cmp.i673.not = icmp eq i64 %call.i672, 0
  br i1 %cmp.i673.not, label %cleanup274, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664: ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676
  %142 = bitcast [2 x i32]* %name_header to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %142) #12
  %arrayinit.begin252 = getelementptr inbounds [2 x i32], [2 x i32]* %name_header, i64 0, i64 0
  store i32 1, i32* %arrayinit.begin252, align 4, !tbaa !41
  %arrayinit.element253 = getelementptr inbounds [2 x i32], [2 x i32]* %name_header, i64 0, i64 1
  store i32 %conv184, i32* %arrayinit.element253, align 4, !tbaa !41
  %call.i660 = call i64 @fwrite(i8* nonnull %142, i64 8, i64 1, i8* nonnull %call.i598) #15
  %cmp.i661.not = icmp eq i64 %call.i660, 0
  br i1 %cmp.i661.not, label %cleanup273, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652: ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664
  %conv258 = zext i32 %and to i64
  %call.i648 = call i64 @fwrite(i8* nonnull %55, i64 %conv258, i64 1, i8* nonnull %call.i598) #15
  %cmp.i649.not = icmp eq i64 %call.i648, 0
  br i1 %cmp.i649.not, label %cleanup273, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit642

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit642: ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652
  %143 = bitcast [2 x i32]* %payload_header to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %143) #12
  %arrayinit.begin262 = getelementptr inbounds [2 x i32], [2 x i32]* %payload_header, i64 0, i64 0
  %arrayidx264 = getelementptr inbounds [10 x i8], [10 x i8]* @_ZN6Halide7Runtime8Internal30pixel_type_to_matlab_type_codeE, i64 0, i64 %idxprom225
  %144 = load i8, i8* %arrayidx264, align 1, !tbaa !18
  %conv265 = zext i8 %144 to i32
  store i32 %conv265, i32* %arrayinit.begin262, align 4, !tbaa !41
  %arrayinit.element266 = getelementptr inbounds [2 x i32], [2 x i32]* %payload_header, i64 0, i64 1
  store i32 %129, i32* %arrayinit.element266, align 4, !tbaa !41
  %call.i638 = call i64 @fwrite(i8* nonnull %143, i64 8, i64 1, i8* nonnull %call.i598) #15
  %cmp.i639.not = icmp eq i64 %call.i638, 0
  %cleanup.dest.slot.5 = zext i1 %cmp.i639.not to i32
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %143) #12
  br label %cleanup273

cleanup273:                                       ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit642, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664
  %cleanup.dest.slot.6 = phi i32 [ %cleanup.dest.slot.5, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit642 ], [ 1, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664 ], [ 1, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652 ]
  %retval.6 = phi i32 [ -11, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit642 ], [ -9, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664 ], [ -10, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %142) #12
  br label %cleanup274

cleanup274:                                       ; preds = %cleanup273, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676
  %cleanup.dest.slot.7 = phi i32 [ %cleanup.dest.slot.6, %cleanup273 ], [ 1, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676 ]
  %retval.7 = phi i32 [ %retval.6, %cleanup273 ], [ -8, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %137) #12
  br label %cleanup278

cleanup278:                                       ; preds = %cleanup274, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687
  %cleanup.dest.slot.8 = phi i32 [ %cleanup.dest.slot.7, %cleanup274 ], [ 1, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687 ]
  %retval.8 = phi i32 [ %retval.7, %cleanup274 ], [ -7, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %133) #12
  call void @llvm.lifetime.end.p0i8(i64 129, i8* nonnull %75) #12
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %55) #12
  %cond442 = icmp eq i32 %cleanup.dest.slot.8, 0
  br i1 %cond442, label %if.end311, label %cleanup433

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631: ; preds = %if.else164
  %145 = bitcast [5 x i32]* %header289 to i8*
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %145) #12
  %arrayinit.begin290 = getelementptr inbounds [5 x i32], [5 x i32]* %header289, i64 0, i64 0
  %146 = load i32, i32* %extent.i, align 4, !tbaa !189
  store i32 %146, i32* %arrayinit.begin290, align 4, !tbaa !41
  %arrayinit.element293 = getelementptr inbounds [5 x i32], [5 x i32]* %header289, i64 0, i64 1
  %147 = load i32, i32* %extent.i.1, align 4, !tbaa !189
  store i32 %147, i32* %arrayinit.element293, align 4, !tbaa !41
  %arrayinit.element296 = getelementptr inbounds [5 x i32], [5 x i32]* %header289, i64 0, i64 2
  %148 = load i32, i32* %extent.i.2, align 4, !tbaa !189
  store i32 %148, i32* %arrayinit.element296, align 4, !tbaa !41
  %arrayinit.element299 = getelementptr inbounds [5 x i32], [5 x i32]* %header289, i64 0, i64 3
  %149 = load i32, i32* %extent.i.3, align 4, !tbaa !189
  store i32 %149, i32* %arrayinit.element299, align 4, !tbaa !41
  %arrayinit.element302 = getelementptr inbounds [5 x i32], [5 x i32]* %header289, i64 0, i64 4
  store i32 %type_code, i32* %arrayinit.element302, align 4, !tbaa !41
  %call.i627 = call i64 @fwrite(i8* nonnull %145, i64 20, i64 1, i8* nonnull %call.i598) #15
  %cmp.i628.not = icmp eq i64 %call.i627, 0
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %145) #12
  br i1 %cmp.i628.not, label %cleanup433, label %if.end311

if.end311:                                        ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631, %cleanup278, %cleanup154.thread
  %final_padding_bytes.0 = phi i32 [ %conv204, %cleanup278 ], [ 0, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631 ], [ 0, %cleanup154.thread ]
  %150 = getelementptr inbounds [4096 x i8], [4096 x i8]* %temp, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %150) #12
  %div = udiv i32 4096, %div.i
  %151 = load i32, i32* %extent.i.3, align 4, !tbaa !189
  %cmp320856 = icmp sgt i32 %151, 0
  br i1 %cmp320856, label %for.body322.lr.ph, label %if.end412

for.body322.lr.ph:                                ; preds = %if.end311
  %152 = load i32, i32* %min.i.3, align 16, !tbaa !221
  %153 = bitcast [4 x i32]* %idx to i8*
  %arrayinit.begin357 = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 0
  %arrayinit.element358 = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 1
  %arrayinit.element359 = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 2
  %arrayinit.element360 = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 3
  %dim.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  %conv368 = zext i32 %div.i to i64
  %mul373 = mul nuw nsw i32 %div, %div.i
  %conv374 = zext i32 %mul373 to i64
  %.pre891 = load i32, i32* %min.i.2, align 16, !tbaa !221
  %.pre892 = load i32, i32* %extent.i.2, align 4, !tbaa !189
  %.pre893 = load i32, i32* %min.i.1, align 16
  %.pre894 = load i32, i32* %extent.i.1, align 4
  %.pre = load i32, i32* %extent.i, align 4
  %154 = load i32, i32* %min.i, align 16
  %155 = load i32, i32* %extent.i, align 4
  %156 = load i32, i32* %min.i, align 16
  %add352 = add nsw i32 %156, %155
  %.pre15 = load i32, i32* %extent.i.1, align 4
  %.pre16 = load i32, i32* %min.i.1, align 16
  %.pre896 = load i32, i32* %extent.i.2, align 4
  %.pre897 = load i32, i32* %min.i.2, align 16
  %.pre898 = load i32, i32* %extent.i.3, align 4
  %.pre899 = load i32, i32* %min.i.3, align 16
  br label %for.body322

for.body322:                                      ; preds = %for.inc399, %for.body322.lr.ph
  %157 = phi i32 [ %152, %for.body322.lr.ph ], [ %218, %for.inc399 ]
  %158 = phi i32 [ %151, %for.body322.lr.ph ], [ %219, %for.inc399 ]
  %159 = phi i32 [ %.pre891, %for.body322.lr.ph ], [ %220, %for.inc399 ]
  %160 = phi i32 [ %.pre892, %for.body322.lr.ph ], [ %221, %for.inc399 ]
  %161 = phi i32 [ %.pre892, %for.body322.lr.ph ], [ %222, %for.inc399 ]
  %162 = phi i32 [ %.pre891, %for.body322.lr.ph ], [ %223, %for.inc399 ]
  %dim3.0858 = phi i32 [ %152, %for.body322.lr.ph ], [ %inc400, %for.inc399 ]
  %counter.0857 = phi i32 [ 0, %for.body322.lr.ph ], [ %counter.1.lcssa, %for.inc399 ]
  %cmp331848 = icmp sgt i32 %161, 0
  br i1 %cmp331848, label %for.body333, label %for.inc399

for.body333:                                      ; preds = %for.body322, %for.inc394
  %163 = phi i32 [ %212, %for.inc394 ], [ %.pre893, %for.body322 ]
  %164 = phi i32 [ %213, %for.inc394 ], [ %.pre894, %for.body322 ]
  %165 = phi i32 [ %214, %for.inc394 ], [ %159, %for.body322 ]
  %166 = phi i32 [ %215, %for.inc394 ], [ %160, %for.body322 ]
  %167 = phi i32 [ %216, %for.inc394 ], [ %.pre894, %for.body322 ]
  %168 = phi i32 [ %217, %for.inc394 ], [ %.pre893, %for.body322 ]
  %dim2.0850 = phi i32 [ %inc395, %for.inc394 ], [ %162, %for.body322 ]
  %counter.1849 = phi i32 [ %counter.2.lcssa, %for.inc394 ], [ %counter.0857, %for.body322 ]
  %cmp342839 = icmp sgt i32 %167, 0
  br i1 %cmp342839, label %for.body344, label %for.inc394

for.body344:                                      ; preds = %for.body333, %for.inc389
  %169 = phi i32 [ %209, %for.inc389 ], [ %163, %for.body333 ]
  %170 = phi i32 [ %210, %for.inc389 ], [ %164, %for.body333 ]
  %171 = phi i32 [ %211, %for.inc389 ], [ %.pre, %for.body333 ]
  %dim1.0841 = phi i32 [ %inc390, %for.inc389 ], [ %168, %for.body333 ]
  %counter.2840 = phi i32 [ %counter.6797, %for.inc389 ], [ %counter.1849, %for.body333 ]
  %cmp353834 = icmp sgt i32 %171, 0
  br i1 %cmp353834, label %for.body355, label %for.inc389

for.body355:                                      ; preds = %for.body344, %for.inc384
  %dim0.0836 = phi i32 [ %inc385, %for.inc384 ], [ %154, %for.body344 ]
  %counter.3835 = phi i32 [ %counter.4, %for.inc384 ], [ %counter.2840, %for.body344 ]
  %inc356 = add nsw i32 %counter.3835, 1
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %153) #12
  store i32 %dim0.0836, i32* %arrayinit.begin357, align 4, !tbaa !41
  store i32 %dim1.0841, i32* %arrayinit.element358, align 4, !tbaa !41
  store i32 %dim2.0850, i32* %arrayinit.element359, align 4, !tbaa !41
  store i32 %dim3.0858, i32* %arrayinit.element360, align 4, !tbaa !41
  %172 = load i32, i32* %dimensions, align 4, !tbaa !183
  %cmp17.i = icmp sgt i32 %172, 0
  br i1 %cmp17.i, label %for.body.lr.ph.i, label %_ZNK15halide_buffer_t10address_ofEPKi.exit

for.body.lr.ph.i:                                 ; preds = %for.body355
  %173 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i, align 8, !tbaa !184
  %wide.trip.count.i = zext i32 %172 to i64
  %stride.i621920 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %173, i64 0, i32 2
  %174 = load i32, i32* %stride.i621920, align 4, !tbaa !185
  %conv.i622921 = sext i32 %174 to i64
  %min.i623922 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %173, i64 0, i32 0
  %175 = load i32, i32* %min.i623922, align 4, !tbaa !221
  %sub.i923 = sub nsw i32 %dim0.0836, %175
  %conv7.i924 = sext i32 %sub.i923 to i64
  %mul.i925 = mul nsw i64 %conv7.i924, %conv.i622921
  %exitcond.not.i927 = icmp eq i32 %172, 1
  br i1 %exitcond.not.i927, label %_ZNK15halide_buffer_t10address_ofEPKi.exit, label %for.body.i.for.body.i_crit_edge.preheader, !llvm.loop !222

for.body.i.for.body.i_crit_edge.preheader:        ; preds = %for.body.lr.ph.i
  %stride.i62126 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %173, i64 1, i32 2
  %176 = load i32, i32* %stride.i62126, align 4, !tbaa !185
  %conv.i62227 = sext i32 %176 to i64
  %min.i62328 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %173, i64 1, i32 0
  %177 = load i32, i32* %min.i62328, align 4, !tbaa !221
  %sub.i29 = sub nsw i32 %dim1.0841, %177
  %conv7.i30 = sext i32 %sub.i29 to i64
  %mul.i31 = mul nsw i64 %conv7.i30, %conv.i62227
  %add.i62432 = add nsw i64 %mul.i31, %mul.i925
  %exitcond.not.i33 = icmp eq i32 %172, 2
  br i1 %exitcond.not.i33, label %_ZNK15halide_buffer_t10address_ofEPKi.exit, label %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph, !llvm.loop !222

for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph: ; preds = %for.body.i.for.body.i_crit_edge.preheader
  %178 = add nsw i64 %wide.trip.count.i, -2
  %min.iters.check131 = icmp ult i64 %178, 5
  br i1 %min.iters.check131, label %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader, label %vector.ph132

vector.ph132:                                     ; preds = %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph
  %n.mod.vf133 = and i64 %178, 3
  %179 = icmp eq i64 %n.mod.vf133, 0
  %180 = select i1 %179, i64 4, i64 %n.mod.vf133
  %n.vec134 = sub nsw i64 %178, %180
  %ind.end138 = add nsw i64 %n.vec134, 2
  %181 = insertelement <2 x i64> <i64 poison, i64 0>, i64 %add.i62432, i32 0
  br label %vector.body130

vector.body130:                                   ; preds = %vector.body130, %vector.ph132
  %index135 = phi i64 [ 0, %vector.ph132 ], [ %index.next136, %vector.body130 ]
  %vec.phi141 = phi <2 x i64> [ %181, %vector.ph132 ], [ %201, %vector.body130 ]
  %vec.phi142 = phi <2 x i64> [ zeroinitializer, %vector.ph132 ], [ %202, %vector.body130 ]
  %offset.idx140 = or i64 %index135, 2
  %182 = add i64 %offset.idx140, 2
  %183 = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 %offset.idx140
  %184 = bitcast i32* %183 to <2 x i32>*
  %wide.load143 = load <2 x i32>, <2 x i32>* %184, align 4, !tbaa !41
  %185 = getelementptr inbounds i32, i32* %183, i64 2
  %186 = bitcast i32* %185 to <2 x i32>*
  %wide.load144 = load <2 x i32>, <2 x i32>* %186, align 4, !tbaa !41
  %187 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %173, i64 %offset.idx140, i32 2
  %188 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %173, i64 %182, i32 2
  %189 = getelementptr inbounds i32, i32* %187, i64 -2
  %190 = bitcast i32* %189 to <8 x i32>*
  %191 = getelementptr inbounds i32, i32* %188, i64 -2
  %192 = bitcast i32* %191 to <8 x i32>*
  %wide.vec = load <8 x i32>, <8 x i32>* %190, align 4, !tbaa !41
  %wide.vec145 = load <8 x i32>, <8 x i32>* %192, align 4, !tbaa !41
  %strided.vec = shufflevector <8 x i32> %wide.vec, <8 x i32> poison, <2 x i32> <i32 0, i32 4>
  %strided.vec146 = shufflevector <8 x i32> %wide.vec145, <8 x i32> poison, <2 x i32> <i32 0, i32 4>
  %strided.vec147 = shufflevector <8 x i32> %wide.vec, <8 x i32> poison, <2 x i32> <i32 2, i32 6>
  %strided.vec148 = shufflevector <8 x i32> %wide.vec145, <8 x i32> poison, <2 x i32> <i32 2, i32 6>
  %193 = sext <2 x i32> %strided.vec147 to <2 x i64>
  %194 = sext <2 x i32> %strided.vec148 to <2 x i64>
  %195 = sub nsw <2 x i32> %wide.load143, %strided.vec
  %196 = sub nsw <2 x i32> %wide.load144, %strided.vec146
  %197 = sext <2 x i32> %195 to <2 x i64>
  %198 = sext <2 x i32> %196 to <2 x i64>
  %199 = mul nsw <2 x i64> %197, %193
  %200 = mul nsw <2 x i64> %198, %194
  %201 = add <2 x i64> %199, %vec.phi141
  %202 = add <2 x i64> %200, %vec.phi142
  %index.next136 = add i64 %index135, 4
  %203 = icmp eq i64 %index.next136, %n.vec134
  br i1 %203, label %middle.block128, label %vector.body130, !llvm.loop !223

middle.block128:                                  ; preds = %vector.body130
  %bin.rdx149 = add <2 x i64> %202, %201
  %204 = call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %bin.rdx149)
  br label %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader

for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader: ; preds = %middle.block128, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph
  %indvars.iv.next.i35.ph = phi i64 [ 2, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph ], [ %ind.end138, %middle.block128 ]
  %add.i62434.ph = phi i64 [ %add.i62432, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph ], [ %204, %middle.block128 ]
  br label %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge

for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge: ; preds = %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge
  %indvars.iv.next.i35 = phi i64 [ %indvars.iv.next.i, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge ], [ %indvars.iv.next.i35.ph, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader ]
  %add.i62434 = phi i64 [ %add.i624, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge ], [ %add.i62434.ph, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader ]
  %arrayidx3.i.phi.trans.insert.phi.trans.insert = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 %indvars.iv.next.i35
  %.pre895.pre = load i32, i32* %arrayidx3.i.phi.trans.insert.phi.trans.insert, align 4, !tbaa !41
  %stride.i621 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %173, i64 %indvars.iv.next.i35, i32 2
  %205 = load i32, i32* %stride.i621, align 4, !tbaa !185
  %conv.i622 = sext i32 %205 to i64
  %min.i623 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %173, i64 %indvars.iv.next.i35, i32 0
  %206 = load i32, i32* %min.i623, align 4, !tbaa !221
  %sub.i = sub nsw i32 %.pre895.pre, %206
  %conv7.i = sext i32 %sub.i to i64
  %mul.i = mul nsw i64 %conv7.i, %conv.i622
  %add.i624 = add nsw i64 %mul.i, %add.i62434
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.next.i35, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.next.i, %wide.trip.count.i
  br i1 %exitcond.not.i, label %_ZNK15halide_buffer_t10address_ofEPKi.exit, label %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge, !llvm.loop !224

_ZNK15halide_buffer_t10address_ofEPKi.exit:       ; preds = %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge, %for.body.i.for.body.i_crit_edge.preheader, %for.body.lr.ph.i, %for.body355
  %index.0.lcssa.i = phi i64 [ 0, %for.body355 ], [ %mul.i925, %for.body.lr.ph.i ], [ %add.i62432, %for.body.i.for.body.i_crit_edge.preheader ], [ %add.i624, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge ]
  %207 = load i8*, i8** %host.i, align 8, !tbaa !180
  %208 = load i8, i8* %bits.i, align 1, !tbaa !144
  %conv.i.i = zext i8 %208 to i64
  %add.i.i = add nuw nsw i64 %conv.i.i, 7
  %div.i.i = lshr i64 %add.i.i, 3
  %mul9.i = mul nsw i64 %div.i.i, %index.0.lcssa.i
  %add.ptr.i = getelementptr inbounds i8, i8* %207, i64 %mul9.i
  %mul366 = mul nsw i32 %counter.3835, %div.i
  %idx.ext = sext i32 %mul366 to i64
  %add.ptr367 = getelementptr inbounds [4096 x i8], [4096 x i8]* %temp, i64 0, i64 %idx.ext
  %call369 = call i8* @memcpy(i8* nonnull %add.ptr367, i8* %add.ptr.i, i64 %conv368) #15
  %cmp370 = icmp eq i32 %inc356, %div
  br i1 %cmp370, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit619, label %for.inc384

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit619: ; preds = %_ZNK15halide_buffer_t10address_ofEPKi.exit
  %call.i615 = call i64 @fwrite(i8* nonnull %150, i64 %conv374, i64 1, i8* nonnull %call.i598) #15
  %cmp.i616.not = icmp eq i64 %call.i615, 0
  br i1 %cmp.i616.not, label %cleanup425.loopexit, label %for.inc384

for.inc384:                                       ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit619, %_ZNK15halide_buffer_t10address_ofEPKi.exit
  %counter.4 = phi i32 [ 0, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit619 ], [ %inc356, %_ZNK15halide_buffer_t10address_ofEPKi.exit ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %153) #12
  %inc385 = add nsw i32 %dim0.0836, 1
  %cmp353 = icmp slt i32 %inc385, %add352
  br i1 %cmp353, label %for.body355, label %for.inc389, !llvm.loop !225

for.inc389:                                       ; preds = %for.inc384, %for.body344
  %209 = phi i32 [ %169, %for.body344 ], [ %.pre16, %for.inc384 ]
  %210 = phi i32 [ %170, %for.body344 ], [ %.pre15, %for.inc384 ]
  %211 = phi i32 [ %171, %for.body344 ], [ %155, %for.inc384 ]
  %counter.6797 = phi i32 [ %counter.2840, %for.body344 ], [ %counter.4, %for.inc384 ]
  %inc390 = add nsw i32 %dim1.0841, 1
  %add341 = add nsw i32 %209, %210
  %cmp342 = icmp slt i32 %inc390, %add341
  br i1 %cmp342, label %for.body344, label %for.inc394, !llvm.loop !226

for.inc394:                                       ; preds = %for.inc389, %for.body333
  %212 = phi i32 [ %163, %for.body333 ], [ %209, %for.inc389 ]
  %213 = phi i32 [ %164, %for.body333 ], [ %210, %for.inc389 ]
  %214 = phi i32 [ %165, %for.body333 ], [ %.pre897, %for.inc389 ]
  %215 = phi i32 [ %166, %for.body333 ], [ %.pre896, %for.inc389 ]
  %216 = phi i32 [ %167, %for.body333 ], [ %210, %for.inc389 ]
  %217 = phi i32 [ %168, %for.body333 ], [ %209, %for.inc389 ]
  %counter.2.lcssa = phi i32 [ %counter.1849, %for.body333 ], [ %counter.6797, %for.inc389 ]
  %inc395 = add nsw i32 %dim2.0850, 1
  %add330 = add nsw i32 %215, %214
  %cmp331 = icmp slt i32 %inc395, %add330
  br i1 %cmp331, label %for.body333, label %for.inc399, !llvm.loop !227

for.inc399:                                       ; preds = %for.inc394, %for.body322
  %218 = phi i32 [ %157, %for.body322 ], [ %.pre899, %for.inc394 ]
  %219 = phi i32 [ %158, %for.body322 ], [ %.pre898, %for.inc394 ]
  %220 = phi i32 [ %159, %for.body322 ], [ %214, %for.inc394 ]
  %221 = phi i32 [ %160, %for.body322 ], [ %215, %for.inc394 ]
  %222 = phi i32 [ %161, %for.body322 ], [ %215, %for.inc394 ]
  %223 = phi i32 [ %162, %for.body322 ], [ %214, %for.inc394 ]
  %counter.1.lcssa = phi i32 [ %counter.0857, %for.body322 ], [ %counter.2.lcssa, %for.inc394 ]
  %inc400 = add nsw i32 %dim3.0858, 1
  %add319 = add nsw i32 %219, %218
  %cmp320 = icmp slt i32 %inc400, %add319
  br i1 %cmp320, label %for.body322, label %for.end403, !llvm.loop !228

for.end403:                                       ; preds = %for.inc399
  %cmp404 = icmp sgt i32 %counter.1.lcssa, 0
  br i1 %cmp404, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit612, label %if.end412

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit612: ; preds = %for.end403
  %mul407 = mul nsw i32 %counter.1.lcssa, %div.i
  %conv408 = sext i32 %mul407 to i64
  %call.i608 = call i64 @fwrite(i8* nonnull %150, i64 %conv408, i64 1, i8* nonnull %call.i598) #15
  %cmp.i609.not = icmp eq i64 %call.i608, 0
  br i1 %cmp.i609.not, label %cleanup425, label %if.end412

if.end412:                                        ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit612, %for.end403, %if.end311
  %224 = bitcast i64* %zero to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %224) #12
  store i64 0, i64* %zero, align 8, !tbaa !22
  %tobool413.not = icmp eq i32 %final_padding_bytes.0, 0
  br i1 %tobool413.not, label %if.end423, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit: ; preds = %if.end412
  %conv415 = zext i32 %final_padding_bytes.0 to i64
  %call.i604 = call i64 @fwrite(i8* nonnull %224, i64 %conv415, i64 1, i8* nonnull %call.i598) #15
  %cmp.i605.not = icmp eq i64 %call.i604, 0
  br i1 %cmp.i605.not, label %cleanup424, label %if.end423

if.end423:                                        ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit, %if.end412
  br label %cleanup424

cleanup424:                                       ; preds = %if.end423, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit
  %retval.21 = phi i32 [ 0, %if.end423 ], [ -16, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %224) #12
  br label %cleanup425

cleanup425.loopexit:                              ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit619
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %153) #12
  br label %cleanup425

cleanup425:                                       ; preds = %cleanup425.loopexit, %cleanup424, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit612
  %retval.22 = phi i32 [ %retval.21, %cleanup424 ], [ -14, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit612 ], [ -13, %cleanup425.loopexit ]
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %150) #12
  br label %cleanup433

cleanup433:                                       ; preds = %cleanup425, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631, %cleanup278, %cleanup278.thread, %cleanup154
  %retval.23 = phi i32 [ %retval.22, %cleanup425 ], [ %retval.4, %cleanup154 ], [ %retval.8, %cleanup278 ], [ -12, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631 ], [ -6, %cleanup278.thread ]
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %3) #12
  %call.i = call i32 @fclose(i8* nonnull %call.i598) #15
  br label %return

return:                                           ; preds = %cleanup433, %if.end6, %if.end2, %if.then1, %if.then
  %retval.26 = phi i32 [ -1, %if.then ], [ -1, %if.then1 ], [ %call3, %if.end2 ], [ %retval.23, %cleanup433 ], [ -2, %if.end6 ]
  ret i32 %retval.26
}

declare i64 @fwrite(i8*, i64, i64, i8*) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_cache_cleanup() #0 {
entry:
  tail call void @halide_memoization_cache_cleanup() #16
  ret void
}

; Function Attrs: nounwind mustprogress
define weak void @halide_memoization_cache_cleanup() local_unnamed_addr #0 {
entry:
  br label %for.body

for.cond.cleanup:                                 ; preds = %while.end
  store i64 0, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !22
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !14
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !14
  ret void

for.body:                                         ; preds = %while.end, %entry
  %__begin1.018 = phi %"struct.Halide::Runtime::Internal::CacheEntry"** [ getelementptr inbounds ([256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 0, i64 0), %entry ], [ %incdec.ptr, %while.end ]
  %0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %__begin1.018, align 8, !tbaa !14
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %__begin1.018, align 8, !tbaa !14
  %cmp2.not16 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %0, null
  br i1 %cmp2.not16, label %while.end, label %while.body

while.body:                                       ; preds = %for.body, %while.body
  %entry1.017 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %1, %while.body ], [ %0, %for.body ]
  %next3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.017, i64 0, i32 0
  %1 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next3, align 8, !tbaa !229
  tail call void @_ZN6Halide7Runtime8Internal10CacheEntry7destroyEv(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %entry1.017) #16
  %2 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.017 to i8*
  tail call void @halide_free(i8* null, i8* nonnull %2) #15
  %cmp2.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %1, null
  br i1 %cmp2.not, label %while.end, label %while.body, !llvm.loop !231

while.end:                                        ; preds = %while.body, %for.body
  %incdec.ptr = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %__begin1.018, i64 1
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"** %incdec.ptr, getelementptr inbounds ([256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 1, i64 0)
  br i1 %cmp.not, label %for.cond.cleanup, label %for.body
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal10CacheEntry7destroyEv(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %this) local_unnamed_addr #0 align 2 {
entry:
  %tuple_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 8
  %0 = load i32, i32* %tuple_count, align 8, !tbaa !232
  %cmp11.not = icmp eq i32 %0, 0
  br i1 %cmp11.not, label %for.cond.cleanup, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %entry
  %buf = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 11
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %entry
  %metadata_storage = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 3
  %1 = load i8*, i8** %metadata_storage, align 8, !tbaa !233
  tail call void @halide_free(i8* null, i8* %1) #15
  ret void

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.body ]
  %2 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !234
  %arrayidx = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %2, i64 %indvars.iv
  %call = tail call i32 @halide_device_free(i8* null, %struct.halide_buffer_t* %arrayidx) #15
  %3 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !234
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %3, i64 %indvars.iv, i32 2
  %4 = load i8*, i8** %host, align 8, !tbaa !180
  %call6 = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %4) #16
  %5 = bitcast %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call6 to i8*
  tail call void @halide_free(i8* null, i8* %5) #15
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %6 = load i32, i32* %tuple_count, align 8, !tbaa !232
  %7 = zext i32 %6 to i64
  %cmp = icmp ult i64 %indvars.iv.next, %7
  br i1 %cmp, label %for.body, label %for.cond.cleanup, !llvm.loop !235
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %host) local_unnamed_addr #2 {
entry:
  %add.ptr = getelementptr inbounds i8, i8* %host, i64 -32
  %0 = bitcast i8* %add.ptr to %"struct.Halide::Runtime::Internal::CacheBlockHeader"*
  ret %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %0
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal18copy_memory_helperERKNS1_11device_copyEixx(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i32 %d, i64 %src_off, i64 %dst_off) local_unnamed_addr #0 {
entry:
  %cmp41 = icmp sgt i32 %d, -1
  br i1 %cmp41, label %land.rhs, label %while.end

land.rhs:                                         ; preds = %entry, %while.body
  %d.addr.042 = phi i32 [ %dec, %while.body ], [ %d, %entry ]
  %idxprom36 = zext i32 %d.addr.042 to i64
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 3, i64 %idxprom36
  %0 = load i64, i64* %arrayidx, align 8, !tbaa !22
  %cmp1 = icmp eq i64 %0, 1
  br i1 %cmp1, label %while.body, label %while.end

while.body:                                       ; preds = %land.rhs
  %dec = add nsw i32 %d.addr.042, -1
  %cmp = icmp sgt i32 %d.addr.042, 0
  br i1 %cmp, label %land.rhs, label %if.then, !llvm.loop !236

while.end:                                        ; preds = %land.rhs, %entry
  %d.addr.0.lcssa = phi i32 [ %d, %entry ], [ %d.addr.042, %land.rhs ]
  %cmp2 = icmp eq i32 %d.addr.0.lcssa, -1
  br i1 %cmp2, label %if.then, label %for.cond.preheader

for.cond.preheader:                               ; preds = %while.end
  %idxprom5 = sext i32 %d.addr.0.lcssa to i64
  %arrayidx6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 3, i64 %idxprom5
  %1 = load i64, i64* %arrayidx6, align 8, !tbaa !22
  %cmp737.not = icmp eq i64 %1, 0
  br i1 %cmp737.not, label %if.end, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %for.cond.preheader
  %sub = add nsw i32 %d.addr.0.lcssa, -1
  %arrayidx9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 4, i64 %idxprom5
  %arrayidx12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 5, i64 %idxprom5
  %inc.0 = add nuw i64 0, 1
  br label %for.body

if.then:                                          ; preds = %while.body, %while.end
  %src = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 0
  %2 = load i64, i64* %src, align 8, !tbaa !237
  %add = add i64 %2, %src_off
  %3 = inttoptr i64 %add to i8*
  %dst = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 1
  %4 = load i64, i64* %dst, align 8, !tbaa !239
  %add3 = add i64 %4, %dst_off
  %5 = inttoptr i64 %add3 to i8*
  %chunk_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 6
  %6 = load i64, i64* %chunk_size, align 8, !tbaa !240
  %call = tail call i8* @memcpy(i8* %5, i8* %3, i64 %6) #15
  br label %if.end

for.body:                                         ; preds = %for.body.for.body_crit_edge, %for.body.lr.ph
  %inc.phi = phi i64 [ %inc.0, %for.body.lr.ph ], [ %inc.1, %for.body.for.body_crit_edge ]
  %src_off.addr.039 = phi i64 [ %src_off, %for.body.lr.ph ], [ %add10, %for.body.for.body_crit_edge ]
  %dst_off.addr.038 = phi i64 [ %dst_off, %for.body.lr.ph ], [ %add13, %for.body.for.body_crit_edge ]
  tail call void @_ZN6Halide7Runtime8Internal18copy_memory_helperERKNS1_11device_copyEixx(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i32 %sub, i64 %src_off.addr.039, i64 %dst_off.addr.038) #16
  %7 = load i64, i64* %arrayidx9, align 8, !tbaa !22
  %add10 = add i64 %7, %src_off.addr.039
  %8 = load i64, i64* %arrayidx12, align 8, !tbaa !22
  %add13 = add i64 %8, %dst_off.addr.038
  %9 = load i64, i64* %arrayidx6, align 8, !tbaa !22
  %cmp7 = icmp ult i64 %inc.phi, %9
  br i1 %cmp7, label %for.body.for.body_crit_edge, label %if.end, !llvm.loop !241

for.body.for.body_crit_edge:                      ; preds = %for.body
  %inc.1 = add nuw i64 %inc.phi, 1
  br label %for.body

if.end:                                           ; preds = %for.body, %if.then, %for.cond.preheader
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal11copy_memoryERKNS1_11device_copyEPv(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i8* %user_context) local_unnamed_addr #0 {
entry:
  %src = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 0
  %0 = load i64, i64* %src, align 8, !tbaa !237
  %dst = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 1
  %1 = load i64, i64* %dst, align 8, !tbaa !239
  %cmp.not = icmp eq i64 %0, %1
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %src_begin = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 2
  %2 = load i64, i64* %src_begin, align 8, !tbaa !242
  tail call void @_ZN6Halide7Runtime8Internal18copy_memory_helperERKNS1_11device_copyEixx(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i32 15, i64 %2, i64 0) #16
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal16make_buffer_copyEPK15halide_buffer_tbS4_b(%"struct.Halide::Runtime::Internal::device_copy"* noalias sret(%"struct.Halide::Runtime::Internal::device_copy") align 8 %agg.result, %struct.halide_buffer_t* %src, i1 zeroext %src_host, %struct.halide_buffer_t* %dst, i1 zeroext %dst_host) local_unnamed_addr #0 {
entry:
  %c = alloca %"struct.Halide::Runtime::Internal::device_copy", align 8
  %0 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %c to i8*
  call void @llvm.lifetime.start.p0i8(i64 416, i8* nonnull %0) #12
  br i1 %src_host, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 2
  %1 = load i8*, i8** %host, align 8, !tbaa !180
  %2 = ptrtoint i8* %1 to i64
  br label %cond.end

cond.false:                                       ; preds = %entry
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 0
  %3 = load i64, i64* %device, align 8, !tbaa !182
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %2, %cond.true ], [ %3, %cond.false ]
  %src2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 0
  store i64 %cond, i64* %src2, align 8, !tbaa !237
  br i1 %dst_host, label %cond.true4, label %cond.false6

cond.true4:                                       ; preds = %cond.end
  %host5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 2
  %4 = load i8*, i8** %host5, align 8, !tbaa !180
  %5 = ptrtoint i8* %4 to i64
  br label %cond.end8

cond.false6:                                      ; preds = %cond.end
  %device7 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 0
  %6 = load i64, i64* %device7, align 8, !tbaa !182
  br label %cond.end8

cond.end8:                                        ; preds = %cond.false6, %cond.true4
  %cond9 = phi i64 [ %5, %cond.true4 ], [ %6, %cond.false6 ]
  %dst10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 1
  store i64 %cond9, i64* %dst10, align 8, !tbaa !239
  %bits.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 4, i32 1
  %7 = load i8, i8* %bits.i, align 1, !tbaa !144
  %conv.i = zext i8 %7 to i32
  %add.i = add nuw nsw i32 %conv.i, 7
  %div.i = lshr i32 %add.i, 3
  %conv = zext i32 %div.i to i64
  %chunk_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 6
  store i64 %conv, i64* %chunk_size, align 8, !tbaa !240
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 0
  %arrayidx12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 0
  %arrayidx14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 0
  %arrayidx.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 1
  %8 = bitcast i64* %arrayidx to <2 x i64>*
  store <2 x i64> <i64 1, i64 1>, <2 x i64>* %8, align 8, !tbaa !22
  %arrayidx12.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 1
  %9 = bitcast i64* %arrayidx12 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %9, align 8, !tbaa !22
  %arrayidx14.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 1
  %10 = bitcast i64* %arrayidx14 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %10, align 8, !tbaa !22
  %arrayidx.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 2
  %arrayidx12.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 2
  %arrayidx14.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 2
  %arrayidx.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 3
  %11 = bitcast i64* %arrayidx.2 to <2 x i64>*
  store <2 x i64> <i64 1, i64 1>, <2 x i64>* %11, align 8, !tbaa !22
  %arrayidx12.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 3
  %12 = bitcast i64* %arrayidx12.2 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %12, align 8, !tbaa !22
  %arrayidx14.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 3
  %13 = bitcast i64* %arrayidx14.2 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %13, align 8, !tbaa !22
  %arrayidx.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 4
  %arrayidx12.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 4
  %arrayidx14.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 4
  %arrayidx.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 5
  %14 = bitcast i64* %arrayidx.4 to <2 x i64>*
  store <2 x i64> <i64 1, i64 1>, <2 x i64>* %14, align 8, !tbaa !22
  %arrayidx12.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 5
  %15 = bitcast i64* %arrayidx12.4 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %15, align 8, !tbaa !22
  %arrayidx14.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 5
  %16 = bitcast i64* %arrayidx14.4 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %16, align 8, !tbaa !22
  %arrayidx.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 6
  %arrayidx12.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 6
  %arrayidx14.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 6
  %arrayidx.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 7
  %17 = bitcast i64* %arrayidx.6 to <2 x i64>*
  store <2 x i64> <i64 1, i64 1>, <2 x i64>* %17, align 8, !tbaa !22
  %arrayidx12.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 7
  %18 = bitcast i64* %arrayidx12.6 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %18, align 8, !tbaa !22
  %arrayidx14.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 7
  %19 = bitcast i64* %arrayidx14.6 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %19, align 8, !tbaa !22
  %arrayidx.8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 8
  %arrayidx12.8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 8
  %arrayidx14.8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 8
  %arrayidx.9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 9
  %20 = bitcast i64* %arrayidx.8 to <2 x i64>*
  store <2 x i64> <i64 1, i64 1>, <2 x i64>* %20, align 8, !tbaa !22
  %arrayidx12.9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 9
  %21 = bitcast i64* %arrayidx12.8 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %21, align 8, !tbaa !22
  %arrayidx14.9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 9
  %22 = bitcast i64* %arrayidx14.8 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %22, align 8, !tbaa !22
  %arrayidx.10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 10
  %arrayidx12.10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 10
  %arrayidx14.10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 10
  %arrayidx.11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 11
  %23 = bitcast i64* %arrayidx.10 to <2 x i64>*
  store <2 x i64> <i64 1, i64 1>, <2 x i64>* %23, align 8, !tbaa !22
  %arrayidx12.11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 11
  %24 = bitcast i64* %arrayidx12.10 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %24, align 8, !tbaa !22
  %arrayidx14.11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 11
  %25 = bitcast i64* %arrayidx14.10 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %25, align 8, !tbaa !22
  %arrayidx.12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 12
  %arrayidx12.12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 12
  %arrayidx14.12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 12
  %arrayidx.13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 13
  %26 = bitcast i64* %arrayidx.12 to <2 x i64>*
  store <2 x i64> <i64 1, i64 1>, <2 x i64>* %26, align 8, !tbaa !22
  %arrayidx12.13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 13
  %27 = bitcast i64* %arrayidx12.12 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %27, align 8, !tbaa !22
  %arrayidx14.13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 13
  %28 = bitcast i64* %arrayidx14.12 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %28, align 8, !tbaa !22
  %arrayidx.14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 14
  %arrayidx12.14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 14
  %arrayidx14.14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 14
  %arrayidx.15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 15
  %29 = bitcast i64* %arrayidx.14 to <2 x i64>*
  store <2 x i64> <i64 1, i64 1>, <2 x i64>* %29, align 8, !tbaa !22
  %arrayidx12.15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 15
  %30 = bitcast i64* %arrayidx12.14 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %30, align 8, !tbaa !22
  %arrayidx14.15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 15
  %31 = bitcast i64* %arrayidx14.14 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %31, align 8, !tbaa !22
  %src_begin = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 2
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 5
  %32 = load i32, i32* %dimensions, align 4, !tbaa !183
  %cmp17272 = icmp sgt i32 %32, 0
  br i1 %cmp17272, label %for.body19.lr.ph, label %cond.end8.for.cond.cleanup18_crit_edge

cond.end8.for.cond.cleanup18_crit_edge:           ; preds = %cond.end8
  %mul37.0 = mul i64 %conv, 0
  br label %for.cond.cleanup18

for.body19.lr.ph:                                 ; preds = %cond.end8
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 6
  %33 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !184
  %dim23 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 6
  %34 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim23, align 8, !tbaa !184
  %wide.trip.count = zext i32 %32 to i64
  %min.iters.check = icmp ult i32 %32, 5
  br i1 %min.iters.check, label %for.body19.preheader, label %vector.ph

for.body19.preheader:                             ; preds = %middle.block, %for.body19.lr.ph
  %indvars.iv284.ph = phi i64 [ 0, %for.body19.lr.ph ], [ %n.vec, %middle.block ]
  %.ph = phi i64 [ 0, %for.body19.lr.ph ], [ %61, %middle.block ]
  br label %for.body19

vector.ph:                                        ; preds = %for.body19.lr.ph
  %n.mod.vf = and i64 %wide.trip.count, 3
  %35 = icmp eq i64 %n.mod.vf, 0
  %36 = select i1 %35, i64 4, i64 %n.mod.vf
  %n.vec = sub nsw i64 %wide.trip.count, %36
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %vec.phi = phi <2 x i64> [ zeroinitializer, %vector.ph ], [ %58, %vector.body ]
  %vec.phi2 = phi <2 x i64> [ zeroinitializer, %vector.ph ], [ %59, %vector.body ]
  %37 = or i64 %index, 2
  %38 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %33, i64 %index, i32 2
  %39 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %33, i64 %37, i32 2
  %40 = getelementptr inbounds i32, i32* %38, i64 -2
  %41 = bitcast i32* %40 to <8 x i32>*
  %42 = getelementptr inbounds i32, i32* %39, i64 -2
  %43 = bitcast i32* %42 to <8 x i32>*
  %wide.vec = load <8 x i32>, <8 x i32>* %41, align 4, !tbaa !41
  %wide.vec3 = load <8 x i32>, <8 x i32>* %43, align 4, !tbaa !41
  %strided.vec5 = shufflevector <8 x i32> %wide.vec, <8 x i32> poison, <2 x i32> <i32 2, i32 6>
  %strided.vec6 = shufflevector <8 x i32> %wide.vec3, <8 x i32> poison, <2 x i32> <i32 2, i32 6>
  %44 = sext <2 x i32> %strided.vec5 to <2 x i64>
  %45 = sext <2 x i32> %strided.vec6 to <2 x i64>
  %46 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %34, i64 %index, i32 0
  %47 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %34, i64 %37, i32 0
  %48 = bitcast i32* %46 to <8 x i32>*
  %49 = bitcast i32* %47 to <8 x i32>*
  %wide.vec7 = load <8 x i32>, <8 x i32>* %48, align 4, !tbaa !221
  %wide.vec8 = load <8 x i32>, <8 x i32>* %49, align 4, !tbaa !221
  %50 = sub nsw <8 x i32> %wide.vec7, %wide.vec
  %51 = shufflevector <8 x i32> %50, <8 x i32> undef, <2 x i32> <i32 0, i32 4>
  %52 = sub nsw <8 x i32> %wide.vec8, %wide.vec3
  %53 = shufflevector <8 x i32> %52, <8 x i32> undef, <2 x i32> <i32 0, i32 4>
  %54 = sext <2 x i32> %51 to <2 x i64>
  %55 = sext <2 x i32> %53 to <2 x i64>
  %56 = mul nsw <2 x i64> %54, %44
  %57 = mul nsw <2 x i64> %55, %45
  %58 = add <2 x i64> %56, %vec.phi
  %59 = add <2 x i64> %57, %vec.phi2
  %index.next = add i64 %index, 4
  %60 = icmp eq i64 %index.next, %n.vec
  br i1 %60, label %middle.block, label %vector.body, !llvm.loop !243

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <2 x i64> %59, %58
  %61 = call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %bin.rdx)
  br label %for.body19.preheader

for.cond.cleanup18:                               ; preds = %for.body19.for.cond.cleanup18_crit_edge, %cond.end8.for.cond.cleanup18_crit_edge
  %mul37.phi = phi i64 [ %mul37.0, %cond.end8.for.cond.cleanup18_crit_edge ], [ %mul37.1, %for.body19.for.cond.cleanup18_crit_edge ]
  store i64 %mul37.phi, i64* %src_begin, align 8, !tbaa !242
  %dimensions39 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 5
  %62 = load i32, i32* %dimensions39, align 4, !tbaa !183
  %cmp40.not = icmp eq i32 %32, %62
  br i1 %cmp40.not, label %lor.lhs.false, label %if.then

for.body19:                                       ; preds = %for.body19.preheader, %for.body19
  %indvars.iv284 = phi i64 [ %indvars.iv.next285, %for.body19 ], [ %indvars.iv284.ph, %for.body19.preheader ]
  %63 = phi i64 [ %add, %for.body19 ], [ %.ph, %for.body19.preheader ]
  %stride = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %33, i64 %indvars.iv284, i32 2
  %64 = load i32, i32* %stride, align 4, !tbaa !185
  %conv22 = sext i32 %64 to i64
  %min = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %34, i64 %indvars.iv284, i32 0
  %65 = load i32, i32* %min, align 4, !tbaa !221
  %min29 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %33, i64 %indvars.iv284, i32 0
  %66 = load i32, i32* %min29, align 4, !tbaa !221
  %sub = sub nsw i32 %65, %66
  %conv30 = sext i32 %sub to i64
  %mul = mul nsw i64 %conv30, %conv22
  %add = add i64 %mul, %63
  %indvars.iv.next285 = add nuw nsw i64 %indvars.iv284, 1
  %exitcond286.not = icmp eq i64 %indvars.iv.next285, %wide.trip.count
  br i1 %exitcond286.not, label %for.body19.for.cond.cleanup18_crit_edge, label %for.body19, !llvm.loop !244

for.body19.for.cond.cleanup18_crit_edge:          ; preds = %for.body19
  %mul37.1 = mul i64 %add, %conv
  br label %for.cond.cleanup18

lor.lhs.false:                                    ; preds = %for.cond.cleanup18
  %bits.i253 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 4, i32 1
  %67 = load i8, i8* %bits.i253, align 1, !tbaa !144
  %conv.i254 = zext i8 %67 to i32
  %add.i255 = add nuw nsw i32 %conv.i254, 7
  %div.i256 = lshr i32 %add.i255, 3
  %cmp45.not = icmp ne i32 %div.i, %div.i256
  %cmp48 = icmp sgt i32 %32, 16
  %or.cond261 = or i1 %cmp48, %cmp45.not
  br i1 %or.cond261, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %for.cond.cleanup18
  %68 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %agg.result to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(416) %68, i8 0, i64 416, i1 false)
  br label %cleanup

if.end:                                           ; preds = %lor.lhs.false
  %cmp50 = icmp eq i32 %div.i, 0
  br i1 %cmp50, label %if.then51, label %for.cond54.preheader

for.cond54.preheader:                             ; preds = %if.end
  br i1 %cmp17272, label %for.body58.lr.ph, label %while.end

for.body58.lr.ph:                                 ; preds = %for.cond54.preheader
  %dim60 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 6
  %69 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim60, align 8, !tbaa !184
  %dim70 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 6
  %70 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim70, align 8, !tbaa !184
  %wide.trip.count282 = zext i32 %32 to i64
  br label %for.body58

if.then51:                                        ; preds = %if.end
  %71 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %agg.result to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(416) %71, i8 0, i64 416, i1 false)
  br label %cleanup

while.cond.preheader:                             ; preds = %for.cond.cleanup94
  %.pre = load i64, i64* %chunk_size, align 8, !tbaa !240
  %.pre290 = load i64, i64* %arrayidx12, align 8, !tbaa !22
  %cmp139263 = icmp eq i64 %.pre, %.pre290
  br i1 %cmp139263, label %land.rhs.lr.ph, label %while.end

land.rhs.lr.ph:                                   ; preds = %while.cond.preheader
  %.pre291 = load i64, i64* %arrayidx14, align 8, !tbaa !22
  %72 = bitcast i64* %arrayidx.1 to <2 x i64>*
  %73 = bitcast i64* %arrayidx to <2 x i64>*
  %74 = bitcast i64* %arrayidx12.1 to <2 x i64>*
  %75 = bitcast i64* %arrayidx12 to <2 x i64>*
  %76 = bitcast i64* %arrayidx14.1 to <2 x i64>*
  %77 = bitcast i64* %arrayidx14 to <2 x i64>*
  %78 = bitcast i64* %arrayidx.3 to <2 x i64>*
  %79 = bitcast i64* %arrayidx.2 to <2 x i64>*
  %80 = bitcast i64* %arrayidx12.3 to <2 x i64>*
  %81 = bitcast i64* %arrayidx12.2 to <2 x i64>*
  %82 = bitcast i64* %arrayidx14.3 to <2 x i64>*
  %83 = bitcast i64* %arrayidx14.2 to <2 x i64>*
  %84 = bitcast i64* %arrayidx.5 to <2 x i64>*
  %85 = bitcast i64* %arrayidx.4 to <2 x i64>*
  %86 = bitcast i64* %arrayidx12.5 to <2 x i64>*
  %87 = bitcast i64* %arrayidx12.4 to <2 x i64>*
  %88 = bitcast i64* %arrayidx14.5 to <2 x i64>*
  %89 = bitcast i64* %arrayidx14.4 to <2 x i64>*
  %90 = bitcast i64* %arrayidx.7 to <2 x i64>*
  %91 = bitcast i64* %arrayidx.6 to <2 x i64>*
  %92 = bitcast i64* %arrayidx12.7 to <2 x i64>*
  %93 = bitcast i64* %arrayidx12.6 to <2 x i64>*
  %94 = bitcast i64* %arrayidx14.7 to <2 x i64>*
  %95 = bitcast i64* %arrayidx14.6 to <2 x i64>*
  %96 = bitcast i64* %arrayidx.9 to <2 x i64>*
  %97 = bitcast i64* %arrayidx.8 to <2 x i64>*
  %98 = bitcast i64* %arrayidx12.9 to <2 x i64>*
  %99 = bitcast i64* %arrayidx12.8 to <2 x i64>*
  %100 = bitcast i64* %arrayidx14.9 to <2 x i64>*
  %101 = bitcast i64* %arrayidx14.8 to <2 x i64>*
  %102 = bitcast i64* %arrayidx.11 to <2 x i64>*
  %103 = bitcast i64* %arrayidx.10 to <2 x i64>*
  %104 = bitcast i64* %arrayidx12.11 to <2 x i64>*
  %105 = bitcast i64* %arrayidx12.10 to <2 x i64>*
  %106 = bitcast i64* %arrayidx14.11 to <2 x i64>*
  %107 = bitcast i64* %arrayidx14.10 to <2 x i64>*
  %108 = bitcast i64* %arrayidx.13 to <2 x i64>*
  %109 = bitcast i64* %arrayidx.12 to <2 x i64>*
  %110 = bitcast i64* %arrayidx12.13 to <2 x i64>*
  %111 = bitcast i64* %arrayidx12.12 to <2 x i64>*
  %112 = bitcast i64* %arrayidx14.13 to <2 x i64>*
  %113 = bitcast i64* %arrayidx14.12 to <2 x i64>*
  br label %land.rhs

for.body58:                                       ; preds = %for.cond.cleanup94, %for.body58.lr.ph
  %indvars.iv278 = phi i64 [ 0, %for.body58.lr.ph ], [ %indvars.iv.next279, %for.cond.cleanup94 ]
  %stride63 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %69, i64 %indvars.iv278, i32 2
  %114 = load i32, i32* %stride63, align 4, !tbaa !185
  %conv64 = sext i32 %114 to i64
  %mul68 = mul nsw i64 %conv64, %conv
  %stride73 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %70, i64 %indvars.iv278, i32 2
  %115 = load i32, i32* %stride73, align 4, !tbaa !185
  %conv74 = sext i32 %115 to i64
  %mul78 = mul nsw i64 %conv74, %conv
  %cmp80264.not = icmp eq i64 %indvars.iv278, 0
  br i1 %cmp80264.not, label %for.end91, label %for.body81.lr.ph

for.body81.lr.ph:                                 ; preds = %for.body58
  %cmp86.not = icmp eq i64 %mul68, 0
  br i1 %cmp86.not, label %for.body81.preheader, label %for.body81.us

for.body81.preheader:                             ; preds = %for.body81.lr.ph
  %116 = trunc i64 %indvars.iv278 to i32
  br label %for.end91

for.body81.us:                                    ; preds = %for.body81.lr.ph, %for.inc89.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc89.us ], [ 0, %for.body81.lr.ph ]
  %arrayidx84.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv
  %117 = load i64, i64* %arrayidx84.us, align 8, !tbaa !22
  %cmp85.us = icmp ult i64 %mul68, %117
  br i1 %cmp85.us, label %for.end91.loopexit, label %for.inc89.us

for.inc89.us:                                     ; preds = %for.body81.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %indvars.iv278
  br i1 %exitcond.not, label %for.end91.loopexit, label %for.body81.us, !llvm.loop !245

for.end91.loopexit:                               ; preds = %for.inc89.us, %for.body81.us
  %insert.0.lcssa.ph.in = phi i64 [ %indvars.iv278, %for.inc89.us ], [ %indvars.iv, %for.body81.us ]
  %insert.0.lcssa.ph = trunc i64 %insert.0.lcssa.ph.in to i32
  br label %for.end91

for.end91:                                        ; preds = %for.end91.loopexit, %for.body81.preheader, %for.body58
  %insert.0.lcssa = phi i32 [ 0, %for.body58 ], [ %insert.0.lcssa.ph, %for.end91.loopexit ], [ %116, %for.body81.preheader ]
  %118 = zext i32 %insert.0.lcssa to i64
  %cmp93267 = icmp ugt i64 %indvars.iv278, %118
  br i1 %cmp93267, label %for.body95.preheader, label %for.cond.cleanup94

for.body95.preheader:                             ; preds = %for.end91
  %119 = sext i32 %insert.0.lcssa to i64
  br label %for.body95

for.cond.cleanup94:                               ; preds = %for.body95, %for.end91
  %extent122 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %69, i64 %indvars.iv278, i32 1
  %120 = load i32, i32* %extent122, align 4, !tbaa !189
  %conv123 = sext i32 %120 to i64
  %arrayidx126 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %118
  store i64 %conv123, i64* %arrayidx126, align 8, !tbaa !22
  %arrayidx129 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %118
  store i64 %mul68, i64* %arrayidx129, align 8, !tbaa !22
  %arrayidx132 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %118
  store i64 %mul78, i64* %arrayidx132, align 8, !tbaa !22
  %indvars.iv.next279 = add nuw nsw i64 %indvars.iv278, 1
  %exitcond283.not = icmp eq i64 %indvars.iv.next279, %wide.trip.count282
  br i1 %exitcond283.not, label %while.cond.preheader, label %for.body58, !llvm.loop !246

for.body95:                                       ; preds = %for.body95, %for.body95.preheader
  %indvars.iv280 = phi i64 [ %indvars.iv278, %for.body95.preheader ], [ %indvars.iv.next281, %for.body95 ]
  %indvars.iv.next281 = add nsw i64 %indvars.iv280, -1
  %arrayidx99 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv.next281
  %121 = load i64, i64* %arrayidx99, align 8, !tbaa !22
  %arrayidx102 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv280
  store i64 %121, i64* %arrayidx102, align 8, !tbaa !22
  %arrayidx106 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv.next281
  %122 = load i64, i64* %arrayidx106, align 8, !tbaa !22
  %arrayidx109 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv280
  store i64 %122, i64* %arrayidx109, align 8, !tbaa !22
  %arrayidx113 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv.next281
  %123 = load i64, i64* %arrayidx113, align 8, !tbaa !22
  %arrayidx116 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv280
  store i64 %123, i64* %arrayidx116, align 8, !tbaa !22
  %cmp93 = icmp sgt i64 %indvars.iv.next281, %119
  br i1 %cmp93, label %for.body95, label %for.cond.cleanup94, !llvm.loop !247

land.rhs:                                         ; preds = %while.body, %land.rhs.lr.ph
  %124 = phi i64 [ %.pre291, %land.rhs.lr.ph ], [ %152, %while.body ]
  %125 = phi i64 [ %.pre, %land.rhs.lr.ph ], [ %mul147, %while.body ]
  %cmp143 = icmp eq i64 %125, %124
  br i1 %cmp143, label %while.body, label %while.end

while.body:                                       ; preds = %land.rhs
  %126 = load i64, i64* %arrayidx, align 8, !tbaa !22
  %mul147 = mul i64 %126, %124
  store i64 %mul147, i64* %chunk_size, align 8, !tbaa !240
  %127 = load <2 x i64>, <2 x i64>* %72, align 8, !tbaa !22
  store <2 x i64> %127, <2 x i64>* %73, align 8, !tbaa !22
  %128 = load <2 x i64>, <2 x i64>* %74, align 8, !tbaa !22
  store <2 x i64> %128, <2 x i64>* %75, align 8, !tbaa !22
  %129 = load <2 x i64>, <2 x i64>* %76, align 8, !tbaa !22
  store <2 x i64> %129, <2 x i64>* %77, align 8, !tbaa !22
  %130 = load <2 x i64>, <2 x i64>* %78, align 8, !tbaa !22
  store <2 x i64> %130, <2 x i64>* %79, align 8, !tbaa !22
  %131 = load <2 x i64>, <2 x i64>* %80, align 8, !tbaa !22
  store <2 x i64> %131, <2 x i64>* %81, align 8, !tbaa !22
  %132 = load <2 x i64>, <2 x i64>* %82, align 8, !tbaa !22
  store <2 x i64> %132, <2 x i64>* %83, align 8, !tbaa !22
  %133 = load <2 x i64>, <2 x i64>* %84, align 8, !tbaa !22
  store <2 x i64> %133, <2 x i64>* %85, align 8, !tbaa !22
  %134 = load <2 x i64>, <2 x i64>* %86, align 8, !tbaa !22
  store <2 x i64> %134, <2 x i64>* %87, align 8, !tbaa !22
  %135 = load <2 x i64>, <2 x i64>* %88, align 8, !tbaa !22
  store <2 x i64> %135, <2 x i64>* %89, align 8, !tbaa !22
  %136 = load <2 x i64>, <2 x i64>* %90, align 8, !tbaa !22
  store <2 x i64> %136, <2 x i64>* %91, align 8, !tbaa !22
  %137 = load <2 x i64>, <2 x i64>* %92, align 8, !tbaa !22
  store <2 x i64> %137, <2 x i64>* %93, align 8, !tbaa !22
  %138 = load <2 x i64>, <2 x i64>* %94, align 8, !tbaa !22
  store <2 x i64> %138, <2 x i64>* %95, align 8, !tbaa !22
  %139 = load <2 x i64>, <2 x i64>* %96, align 8, !tbaa !22
  store <2 x i64> %139, <2 x i64>* %97, align 8, !tbaa !22
  %140 = load <2 x i64>, <2 x i64>* %98, align 8, !tbaa !22
  store <2 x i64> %140, <2 x i64>* %99, align 8, !tbaa !22
  %141 = load <2 x i64>, <2 x i64>* %100, align 8, !tbaa !22
  store <2 x i64> %141, <2 x i64>* %101, align 8, !tbaa !22
  %142 = load <2 x i64>, <2 x i64>* %102, align 8, !tbaa !22
  store <2 x i64> %142, <2 x i64>* %103, align 8, !tbaa !22
  %143 = load <2 x i64>, <2 x i64>* %104, align 8, !tbaa !22
  store <2 x i64> %143, <2 x i64>* %105, align 8, !tbaa !22
  %144 = load <2 x i64>, <2 x i64>* %106, align 8, !tbaa !22
  store <2 x i64> %144, <2 x i64>* %107, align 8, !tbaa !22
  %145 = load <2 x i64>, <2 x i64>* %108, align 8, !tbaa !22
  store <2 x i64> %145, <2 x i64>* %109, align 8, !tbaa !22
  %146 = load <2 x i64>, <2 x i64>* %110, align 8, !tbaa !22
  store <2 x i64> %146, <2 x i64>* %111, align 8, !tbaa !22
  %147 = load <2 x i64>, <2 x i64>* %112, align 8, !tbaa !22
  store <2 x i64> %147, <2 x i64>* %113, align 8, !tbaa !22
  %148 = load i64, i64* %arrayidx.15, align 8, !tbaa !22
  store i64 %148, i64* %arrayidx.14, align 8, !tbaa !22
  %149 = load i64, i64* %arrayidx12.15, align 8, !tbaa !22
  store i64 %149, i64* %arrayidx12.14, align 8, !tbaa !22
  %150 = load i64, i64* %arrayidx14.15, align 8, !tbaa !22
  store i64 %150, i64* %arrayidx14.14, align 8, !tbaa !22
  store i64 1, i64* %arrayidx.15, align 8, !tbaa !22
  store i64 0, i64* %arrayidx12.15, align 8, !tbaa !22
  store i64 0, i64* %arrayidx14.15, align 8, !tbaa !22
  %151 = extractelement <2 x i64> %128, i32 0
  %cmp139 = icmp eq i64 %mul147, %151
  %152 = extractelement <2 x i64> %129, i32 0
  br i1 %cmp139, label %land.rhs, label %while.end, !llvm.loop !248

while.end:                                        ; preds = %while.body, %land.rhs, %while.cond.preheader, %for.cond54.preheader
  %153 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %agg.result to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(416) %153, i8* nonnull align 8 dereferenceable(416) %0, i64 416, i1 false), !tbaa.struct !249
  br label %cleanup

cleanup:                                          ; preds = %while.end, %if.then51, %if.then
  call void @llvm.lifetime.end.p0i8(i64 416, i8* nonnull %0) #12
  ret void
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #5

; Function Attrs: nounwind mustprogress
define linkonce zeroext i1 @_ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m(i8* %key1, i8* %key2, i64 %key_size) local_unnamed_addr #0 {
entry:
  %call = tail call i32 @memcmp(i8* %key1, i8* %key2, i64 %key_size) #15
  %cmp = icmp eq i32 %call, 0
  ret i1 %cmp
}

declare i32 @memcmp(i8*, i8*, i64) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define linkonce zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %buf, %struct.halide_dimension_t* %shape) local_unnamed_addr #0 {
entry:
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 5
  %0 = load i32, i32* %dimensions, align 4, !tbaa !183
  %cmp9 = icmp sgt i32 %0, 0
  br i1 %cmp9, label %for.body.lr.ph, label %return

for.body.lr.ph:                                   ; preds = %entry
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  %1 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !184
  %2 = zext i32 %0 to i64
  br label %for.body

for.cond:                                         ; preds = %_ZNK18halide_dimension_tneERKS_.exit
  %exitcond.not = icmp eq i64 %indvars.iv.next, %2
  br i1 %exitcond.not, label %return, label %for.body, !llvm.loop !250

for.body:                                         ; preds = %for.cond, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.cond ]
  %min.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %1, i64 %indvars.iv, i32 0
  %3 = load i32, i32* %min.i.i, align 4, !tbaa !221
  %min2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %shape, i64 %indvars.iv, i32 0
  %4 = load i32, i32* %min2.i.i, align 4, !tbaa !221
  %cmp.i.i = icmp eq i32 %3, %4
  br i1 %cmp.i.i, label %land.lhs.true.i.i, label %return

land.lhs.true.i.i:                                ; preds = %for.body
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %1, i64 %indvars.iv, i32 1
  %5 = load i32, i32* %extent.i.i, align 4, !tbaa !189
  %extent3.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %shape, i64 %indvars.iv, i32 1
  %6 = load i32, i32* %extent3.i.i, align 4, !tbaa !189
  %cmp4.i.i = icmp eq i32 %5, %6
  br i1 %cmp4.i.i, label %land.lhs.true5.i.i, label %return

land.lhs.true5.i.i:                               ; preds = %land.lhs.true.i.i
  %stride.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %1, i64 %indvars.iv, i32 2
  %7 = load i32, i32* %stride.i.i, align 4, !tbaa !185
  %stride6.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %shape, i64 %indvars.iv, i32 2
  %8 = load i32, i32* %stride6.i.i, align 4, !tbaa !185
  %cmp7.i.i = icmp eq i32 %7, %8
  br i1 %cmp7.i.i, label %_ZNK18halide_dimension_tneERKS_.exit, label %return

_ZNK18halide_dimension_tneERKS_.exit:             ; preds = %land.lhs.true5.i.i
  %flags.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %1, i64 %indvars.iv, i32 3
  %9 = load i32, i32* %flags.i.i, align 4, !tbaa !251
  %flags8.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %shape, i64 %indvars.iv, i32 3
  %10 = load i32, i32* %flags8.i.i, align 4, !tbaa !251
  %cmp9.i.i.not = icmp eq i32 %9, %10
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  br i1 %cmp9.i.i.not, label %for.cond, label %return

return:                                           ; preds = %_ZNK18halide_dimension_tneERKS_.exit, %land.lhs.true5.i.i, %land.lhs.true.i.i, %for.body, %for.cond, %entry
  %cmp.lcssa = phi i1 [ true, %entry ], [ false, %_ZNK18halide_dimension_tneERKS_.exit ], [ true, %for.cond ], [ false, %land.lhs.true5.i.i ], [ false, %land.lhs.true.i.i ], [ false, %for.body ]
  ret i1 %cmp.lcssa
}

; Function Attrs: nounwind mustprogress
define linkonce zeroext i1 @_ZN6Halide7Runtime8Internal10CacheEntry4initEPKhmjPK15halide_buffer_tiPPS5_by(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %this, i8* %cache_key, i64 %cache_key_size, i32 %key_hash, %struct.halide_buffer_t* %computed_bounds_buf, i32 %tuples, %struct.halide_buffer_t** %tuple_buffers, i1 zeroext %has_eviction_key_arg, i64 %eviction_key_arg) local_unnamed_addr #0 align 2 {
entry:
  %frombool = zext i1 %has_eviction_key_arg to i8
  %0 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"* %this to <2 x %"struct.Halide::Runtime::Internal::CacheEntry"*>*
  store <2 x %"struct.Halide::Runtime::Internal::CacheEntry"*> zeroinitializer, <2 x %"struct.Halide::Runtime::Internal::CacheEntry"*>* %0, align 8, !tbaa !14
  %less_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent, align 8, !tbaa !252
  %key_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 4
  store i64 %cache_key_size, i64* %key_size, align 8, !tbaa !253
  %hash = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 6
  store i32 %key_hash, i32* %hash, align 8, !tbaa !254
  %in_use_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 7
  store i32 0, i32* %in_use_count, align 4, !tbaa !255
  %tuple_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 8
  store i32 %tuples, i32* %tuple_count, align 8, !tbaa !232
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %computed_bounds_buf, i64 0, i32 5
  %1 = load i32, i32* %dimensions, align 4, !tbaa !183
  %dimensions2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 9
  store i32 %1, i32* %dimensions2, align 4, !tbaa !256
  %conv = zext i32 %tuples to i64
  %mul = mul nuw nsw i64 %conv, 56
  %conv5 = sext i32 %1 to i64
  %add8 = add i32 %tuples, 1
  %conv9 = zext i32 %add8 to i64
  %mul6 = shl nuw nsw i64 %conv9, 4
  %mul10 = mul i64 %mul6, %conv5
  %add11 = add i64 %mul10, %mul
  %add13 = add i64 %add11, %cache_key_size
  %call = tail call i8* @halide_malloc(i8* null, i64 %add13) #15
  %metadata_storage = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 3
  store i8* %call, i8** %metadata_storage, align 8, !tbaa !233
  %tobool.not = icmp eq i8* %call, null
  br i1 %tobool.not, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %buf = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 11
  %2 = bitcast %struct.halide_buffer_t** %buf to i8**
  store i8* %call, i8** %2, align 8, !tbaa !234
  %add.ptr = getelementptr inbounds i8, i8* %call, i64 %mul
  %computed_bounds = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 10
  %3 = bitcast %struct.halide_dimension_t** %computed_bounds to i8**
  store i8* %add.ptr, i8** %3, align 8, !tbaa !257
  %add.ptr18 = getelementptr inbounds i8, i8* %call, i64 %add11
  %key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 5
  store i8* %add.ptr18, i8** %key, align 8, !tbaa !258
  %4 = load i64, i64* %key_size, align 8, !tbaa !253
  %cmp117.not = icmp eq i64 %4, 0
  br i1 %cmp117.not, label %for.cond23.preheader, label %for.body.preheader

for.body.preheader:                               ; preds = %if.end
  %5 = load i8, i8* %cache_key, align 1, !tbaa !18
  store i8 %5, i8* %add.ptr18, align 1, !tbaa !18
  %cmp130.not = icmp eq i64 %4, 1
  br i1 %cmp130.not, label %for.cond23.preheader, label %for.body.for.body_crit_edge.preheader, !llvm.loop !259

for.body.for.body_crit_edge.preheader:            ; preds = %for.body.preheader
  %arrayidx2 = getelementptr inbounds i8, i8* %cache_key, i64 1
  %6 = load i8, i8* %arrayidx2, align 1, !tbaa !18
  %arrayidx213 = getelementptr inbounds i8, i8* %add.ptr18, i64 1
  store i8 %6, i8* %arrayidx213, align 1, !tbaa !18
  %7 = load i64, i64* %key_size, align 8, !tbaa !253
  %cmp4 = icmp ugt i64 %7, 2
  br i1 %cmp4, label %for.body.for.body_crit_edge.for.body.for.body_crit_edge_crit_edge, label %for.cond23.preheader, !llvm.loop !259

for.cond23.preheader:                             ; preds = %for.body.for.body_crit_edge.for.body.for.body_crit_edge_crit_edge, %for.body.for.body_crit_edge.preheader, %for.body.preheader, %if.end
  %8 = load i32, i32* %dimensions2, align 4, !tbaa !256
  %cmp25115 = icmp sgt i32 %8, 0
  br i1 %cmp25115, label %for.body27.lr.ph, label %for.cond36.preheader

for.body27.lr.ph:                                 ; preds = %for.cond23.preheader
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %computed_bounds_buf, i64 0, i32 6
  br label %for.body27

for.body.for.body_crit_edge.for.body.for.body_crit_edge_crit_edge: ; preds = %for.body.for.body_crit_edge.preheader, %for.body.for.body_crit_edge.for.body.for.body_crit_edge_crit_edge
  %inc5 = phi i64 [ %inc, %for.body.for.body_crit_edge.for.body.for.body_crit_edge_crit_edge ], [ 2, %for.body.for.body_crit_edge.preheader ]
  %.pre.pre = load i8*, i8** %key, align 8, !tbaa !258
  %arrayidx = getelementptr inbounds i8, i8* %cache_key, i64 %inc5
  %9 = load i8, i8* %arrayidx, align 1, !tbaa !18
  %arrayidx21 = getelementptr inbounds i8, i8* %.pre.pre, i64 %inc5
  store i8 %9, i8* %arrayidx21, align 1, !tbaa !18
  %inc = add nuw i64 %inc5, 1
  %10 = load i64, i64* %key_size, align 8, !tbaa !253
  %cmp = icmp ult i64 %inc, %10
  br i1 %cmp, label %for.body.for.body_crit_edge.for.body.for.body_crit_edge_crit_edge, label %for.cond23.preheader, !llvm.loop !259

for.cond36.preheader:                             ; preds = %for.body27, %for.cond23.preheader
  %11 = load i32, i32* %tuple_count, align 8, !tbaa !232
  %cmp38113.not = icmp eq i32 %11, 0
  br i1 %cmp38113.not, label %for.cond.cleanup39, label %for.body40

for.body27:                                       ; preds = %for.body27, %for.body27.lr.ph
  %indvars.iv121 = phi i64 [ 0, %for.body27.lr.ph ], [ %indvars.iv.next122, %for.body27 ]
  %12 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !184
  %arrayidx28 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i64 %indvars.iv121
  %13 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds, align 8, !tbaa !257
  %arrayidx31 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %13, i64 %indvars.iv121
  %14 = bitcast %struct.halide_dimension_t* %arrayidx31 to i8*
  %15 = bitcast %struct.halide_dimension_t* %arrayidx28 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %14, i8* nonnull align 4 dereferenceable(16) %15, i64 16, i1 false), !tbaa.struct !188
  %indvars.iv.next122 = add nuw nsw i64 %indvars.iv121, 1
  %16 = load i32, i32* %dimensions2, align 4, !tbaa !256
  %17 = sext i32 %16 to i64
  %cmp25 = icmp slt i64 %indvars.iv.next122, %17
  br i1 %cmp25, label %for.body27, label %for.cond36.preheader, !llvm.loop !260

for.cond36.loopexit:                              ; preds = %for.body59.for.body59_crit_edge, %for.body59.preheader, %for.body40
  %18 = load i32, i32* %tuple_count, align 8, !tbaa !232
  %19 = zext i32 %18 to i64
  %cmp38 = icmp ult i64 %indvars.iv.next120, %19
  br i1 %cmp38, label %for.body40, label %for.cond.cleanup39, !llvm.loop !261

for.cond.cleanup39:                               ; preds = %for.cond36.loopexit, %for.cond36.preheader
  %has_eviction_key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 13
  store i8 %frombool, i8* %has_eviction_key, align 8, !tbaa !262
  %eviction_key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 12
  store i64 %eviction_key_arg, i64* %eviction_key, align 8, !tbaa !263
  br label %cleanup

for.body40:                                       ; preds = %for.cond36.preheader, %for.cond36.loopexit
  %indvars.iv119 = phi i64 [ %indvars.iv.next120, %for.cond36.loopexit ], [ 0, %for.cond36.preheader ]
  %arrayidx42 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv119
  %20 = bitcast %struct.halide_buffer_t** %arrayidx42 to i8**
  %21 = load i8*, i8** %20, align 8, !tbaa !14
  %22 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !234
  %arrayidx45 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %22, i64 %indvars.iv119
  %23 = bitcast %struct.halide_buffer_t* %arrayidx45 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(56) %23, i8* nonnull align 8 dereferenceable(56) %21, i64 56, i1 false), !tbaa.struct !264
  %24 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds, align 8, !tbaa !257
  %indvars.iv.next120 = add nuw nsw i64 %indvars.iv119, 1
  %25 = load i32, i32* %dimensions2, align 4, !tbaa !256
  %26 = trunc i64 %indvars.iv.next120 to i32
  %mul49 = mul i32 %25, %26
  %idx.ext = zext i32 %mul49 to i64
  %add.ptr50 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %24, i64 %idx.ext
  %27 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !234
  %dim54 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %27, i64 %indvars.iv119, i32 6
  store %struct.halide_dimension_t* %add.ptr50, %struct.halide_dimension_t** %dim54, align 8, !tbaa !184
  %cmp57111 = icmp sgt i32 %25, 0
  br i1 %cmp57111, label %for.body59.preheader, label %for.cond36.loopexit

for.body59.preheader:                             ; preds = %for.body40
  %28 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx42, align 8, !tbaa !14
  %dim62125 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %28, i64 0, i32 6
  %29 = bitcast %struct.halide_dimension_t** %dim62125 to i8**
  %30 = load i8*, i8** %29, align 8, !tbaa !184
  %31 = bitcast %struct.halide_dimension_t* %add.ptr50 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %31, i8* nonnull align 4 dereferenceable(16) %30, i64 16, i1 false), !tbaa.struct !188
  %32 = load i32, i32* %dimensions2, align 4, !tbaa !256
  %cmp57128 = icmp sgt i32 %32, 1
  br i1 %cmp57128, label %for.body59.for.body59_crit_edge, label %for.cond36.loopexit, !llvm.loop !266

for.body59.for.body59_crit_edge:                  ; preds = %for.body59.preheader, %for.body59.for.body59_crit_edge
  %indvars.iv.next129 = phi i64 [ %indvars.iv.next, %for.body59.for.body59_crit_edge ], [ 1, %for.body59.preheader ]
  %.pre123 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !234
  %dim68.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %.pre123, i64 %indvars.iv119, i32 6
  %.pre124 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim68.phi.trans.insert, align 8, !tbaa !184
  %33 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx42, align 8, !tbaa !14
  %dim62 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %33, i64 0, i32 6
  %34 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim62, align 8, !tbaa !184
  %arrayidx64 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %34, i64 %indvars.iv.next129
  %arrayidx70 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %.pre124, i64 %indvars.iv.next129
  %35 = bitcast %struct.halide_dimension_t* %arrayidx70 to i8*
  %36 = bitcast %struct.halide_dimension_t* %arrayidx64 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %35, i8* nonnull align 4 dereferenceable(16) %36, i64 16, i1 false), !tbaa.struct !188
  %indvars.iv.next = add nuw nsw i64 %indvars.iv.next129, 1
  %37 = load i32, i32* %dimensions2, align 4, !tbaa !256
  %38 = sext i32 %37 to i64
  %cmp57 = icmp slt i64 %indvars.iv.next, %38
  br i1 %cmp57, label %for.body59.for.body59_crit_edge, label %for.cond36.loopexit, !llvm.loop !266

cleanup:                                          ; preds = %for.cond.cleanup39, %entry
  %39 = xor i1 %tobool.not, true
  ret i1 %39
}

; Function Attrs: nounwind mustprogress
define linkonce i32 @_ZN6Halide7Runtime8Internal8djb_hashEPKhm(i8* %key, i64 %key_size) local_unnamed_addr #0 {
entry:
  %cmp8.not = icmp eq i64 %key_size, 0
  br i1 %cmp8.not, label %for.cond.cleanup, label %entry.for.body_crit_edge

entry.for.body_crit_edge:                         ; preds = %entry
  %inc.1 = add nuw i64 0, 1
  %arrayidx.1 = getelementptr inbounds i8, i8* %key, i64 0
  %add.1 = mul i32 5381, 33
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %entry
  %h.0.lcssa = phi i32 [ 5381, %entry ], [ %add1, %for.body ]
  ret i32 %h.0.lcssa

for.body:                                         ; preds = %entry.for.body_crit_edge, %for.body.for.body_crit_edge
  %add.phi = phi i32 [ %add.0, %for.body.for.body_crit_edge ], [ %add.1, %entry.for.body_crit_edge ]
  %arrayidx.phi = phi i8* [ %arrayidx.0, %for.body.for.body_crit_edge ], [ %arrayidx.1, %entry.for.body_crit_edge ]
  %inc.phi = phi i64 [ %inc.0, %for.body.for.body_crit_edge ], [ %inc.1, %entry.for.body_crit_edge ]
  %0 = load i8, i8* %arrayidx.phi, align 1, !tbaa !18
  %conv = zext i8 %0 to i32
  %add1 = add i32 %add.phi, %conv
  %exitcond.not = icmp eq i64 %inc.phi, %key_size
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body.for.body_crit_edge, !llvm.loop !267

for.body.for.body_crit_edge:                      ; preds = %for.body
  %inc.0 = add nuw i64 %inc.phi, 1
  %arrayidx.0 = getelementptr inbounds i8, i8* %key, i64 %inc.phi
  %add.0 = mul i32 %add1, 33
  br label %for.body
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal11prune_cacheEv() local_unnamed_addr #0 {
entry:
  %0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !14
  %1 = load i64, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !22
  %2 = load i64, i64* @_ZN6Halide7Runtime8Internal14max_cache_sizeE, align 8, !tbaa !22
  %cmp84 = icmp sgt i64 %1, %2
  %cmp185 = icmp ne %"struct.Halide::Runtime::Internal::CacheEntry"* %0, null
  %3 = and i1 %cmp185, %cmp84
  br i1 %3, label %while.body, label %while.end42

while.body:                                       ; preds = %entry, %if.end41
  %4 = phi i64 [ %74, %if.end41 ], [ %2, %entry ]
  %5 = phi i64 [ %75, %if.end41 ], [ %1, %entry ]
  %prune_candidate.086 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %6, %if.end41 ], [ %0, %entry ]
  %more_recent2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 1
  %6 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent2, align 8, !tbaa !268
  %in_use_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 7
  %7 = load i32, i32* %in_use_count, align 4, !tbaa !255
  %cmp3 = icmp eq i32 %7, 0
  br i1 %cmp3, label %if.then, label %if.end41

if.then:                                          ; preds = %while.body
  %hash = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 6
  %8 = load i32, i32* %hash, align 8, !tbaa !254
  %9 = and i32 %8, 255
  %idxprom = zext i32 %9 to i64
  %arrayidx = getelementptr inbounds [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 0, i64 %idxprom
  %10 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx, align 8, !tbaa !14
  %cmp5 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %10, %prune_candidate.086
  br i1 %cmp5, label %if.then6, label %while.cond9

if.then6:                                         ; preds = %if.then
  %next = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 0
  %11 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next, align 8, !tbaa !229
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %11, %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx, align 8, !tbaa !14
  br label %if.end21

while.cond9:                                      ; preds = %if.then, %land.rhs11
  %prev_hash_entry.0 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %12, %land.rhs11 ], [ %10, %if.then ]
  %cmp10.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %prev_hash_entry.0, null
  br i1 %cmp10.not, label %if.then18, label %land.rhs11

land.rhs11:                                       ; preds = %while.cond9
  %next12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prev_hash_entry.0, i64 0, i32 0
  %12 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next12, align 8, !tbaa !229
  %cmp13.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %12, %prune_candidate.086
  br i1 %cmp13.not, label %do.end, label %while.cond9, !llvm.loop !269

if.then18:                                        ; preds = %while.cond9
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([126 x i8], [126 x i8]* @.str.2.42, i64 0, i64 0)) #15
  tail call void @abort() #15
  br label %do.end

do.end:                                           ; preds = %land.rhs11, %if.then18
  %next19 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 0
  %13 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next19, align 8, !tbaa !229
  %next20 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prev_hash_entry.0, i64 0, i32 0
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %13, %"struct.Halide::Runtime::Internal::CacheEntry"** %next20, align 8, !tbaa !229
  br label %if.end21

if.end21:                                         ; preds = %do.end, %if.then6
  %14 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !14
  %cmp22 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %14, %prune_candidate.086
  br i1 %cmp22, label %if.then23, label %if.end24

if.then23:                                        ; preds = %if.end21
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %6, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !14
  br label %if.end24

if.end24:                                         ; preds = %if.then23, %if.end21
  %cmp25.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %6, null
  br i1 %cmp25.not, label %if.end28, label %if.then26

if.then26:                                        ; preds = %if.end24
  %less_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 2
  %15 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent, align 8, !tbaa !252
  %less_recent27 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %6, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %15, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent27, align 8, !tbaa !252
  br label %if.end28

if.end28:                                         ; preds = %if.then26, %if.end24
  %16 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !14
  %cmp29 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %16, %prune_candidate.086
  %less_recent31 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 2
  %17 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent31, align 8, !tbaa !252
  br i1 %cmp29, label %if.then30, label %if.end32

if.then30:                                        ; preds = %if.end28
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %17, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !14
  br label %if.end32

if.end32:                                         ; preds = %if.then30, %if.end28
  %cmp34.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %17, null
  br i1 %cmp34.not, label %if.end37, label %if.then35

if.then35:                                        ; preds = %if.end32
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %6, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent31, align 8, !tbaa !252
  br label %if.end37

if.end37:                                         ; preds = %if.then35, %if.end32
  %tuple_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 8
  %18 = load i32, i32* %tuple_count, align 8, !tbaa !232
  %cmp3882.not = icmp eq i32 %18, 0
  br i1 %cmp3882.not, label %for.cond.cleanup, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %if.end37
  %buf = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 11
  %19 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !234
  %_ZN6Halide7Runtime8Internal18current_cache_sizeE.promoted = load i64, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !22
  %wide.trip.count = zext i32 %18 to i64
  br label %for.body

for.cond.for.cond.cleanup_crit_edge:              ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  store i64 %sub, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !22
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.for.cond.cleanup_crit_edge, %if.end37
  tail call void @_ZN6Halide7Runtime8Internal10CacheEntry7destroyEv(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %prune_candidate.086) #16
  %20 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086 to i8*
  tail call void @halide_free(i8* null, i8* nonnull %20) #15
  %.pre92 = load i64, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !22
  %.pre93 = load i64, i64* @_ZN6Halide7Runtime8Internal14max_cache_sizeE, align 8, !tbaa !22
  br label %if.end41

for.body:                                         ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ]
  %sub89 = phi i64 [ %_ZN6Halide7Runtime8Internal18current_cache_sizeE.promoted, %for.body.lr.ph ], [ %sub, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ]
  %dimensions.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %19, i64 %indvars.iv, i32 5
  %21 = load i32, i32* %dimensions.i.i, align 4, !tbaa !183
  %cmp19.i.i = icmp sgt i32 %21, 0
  br i1 %cmp19.i.i, label %for.body.lr.ph.i.i, label %for.body._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge

for.body._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge: ; preds = %for.body
  %sub.i.neg.0 = add i64 0, -1
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.lr.ph.i.i:                               ; preds = %for.body
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %19, i64 %indvars.iv, i32 6
  %22 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8, !tbaa !184
  %wide.trip.count.i.i = zext i32 %21 to i64
  %min.iters.check28 = icmp ult i32 %21, 3
  br i1 %min.iters.check28, label %for.body.i.i.preheader, label %vector.ph29

vector.ph29:                                      ; preds = %for.body.lr.ph.i.i
  %n.vec31 = and i64 %wide.trip.count.i.i, 4294967294
  br label %vector.body27

vector.body27:                                    ; preds = %pred.load.continue43, %vector.ph29
  %index32 = phi i64 [ 0, %vector.ph29 ], [ %index.next33, %pred.load.continue43 ]
  %vec.phi38 = phi i64 [ 0, %vector.ph29 ], [ %predphi44, %pred.load.continue43 ]
  %vec.phi39 = phi i64 [ 0, %vector.ph29 ], [ %predphi45, %pred.load.continue43 ]
  %induction37 = or i64 %index32, 1
  %23 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %index32, i32 2
  %24 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %induction37, i32 2
  %25 = load i32, i32* %23, align 4, !tbaa !185
  %26 = load i32, i32* %24, align 4, !tbaa !185
  %27 = icmp sgt i32 %25, 0
  %28 = icmp sgt i32 %26, 0
  %29 = zext i32 %25 to i64
  %30 = zext i32 %26 to i64
  br i1 %27, label %pred.load.if40, label %pred.load.continue41

pred.load.if40:                                   ; preds = %vector.body27
  %31 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %index32, i32 1
  %32 = load i32, i32* %31, align 4, !tbaa !189
  br label %pred.load.continue41

pred.load.continue41:                             ; preds = %pred.load.if40, %vector.body27
  %33 = phi i32 [ poison, %vector.body27 ], [ %32, %pred.load.if40 ]
  br i1 %28, label %pred.load.if42, label %pred.load.continue43

pred.load.if42:                                   ; preds = %pred.load.continue41
  %34 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %induction37, i32 1
  %35 = load i32, i32* %34, align 4, !tbaa !189
  br label %pred.load.continue43

pred.load.continue43:                             ; preds = %pred.load.if42, %pred.load.continue41
  %36 = phi i32 [ poison, %pred.load.continue41 ], [ %35, %pred.load.if42 ]
  %37 = add nsw i32 %33, -1
  %38 = add nsw i32 %36, -1
  %39 = sext i32 %37 to i64
  %40 = sext i32 %38 to i64
  %41 = mul nsw i64 %39, %29
  %42 = mul nsw i64 %40, %30
  %43 = select i1 %27, i64 %41, i64 0
  %predphi44 = add i64 %vec.phi38, %43
  %44 = select i1 %28, i64 %42, i64 0
  %predphi45 = add i64 %vec.phi39, %44
  %index.next33 = add i64 %index32, 2
  %45 = icmp eq i64 %index.next33, %n.vec31
  br i1 %45, label %middle.block25, label %vector.body27, !llvm.loop !270

middle.block25:                                   ; preds = %pred.load.continue43
  %bin.rdx46 = add i64 %predphi45, %predphi44
  %cmp.n35 = icmp eq i64 %n.vec31, %wide.trip.count.i.i
  br i1 %cmp.n35, label %for.body.i13.i.preheader, label %for.body.i.i.preheader

for.body.i.i.preheader:                           ; preds = %for.body.lr.ph.i.i, %middle.block25
  %indvars.iv.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %n.vec31, %middle.block25 ]
  %index.021.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %bin.rdx46, %middle.block25 ]
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.body.i.i.preheader, %if.end.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %if.end.i.i ], [ %indvars.iv.i.i.ph, %for.body.i.i.preheader ]
  %index.021.i.i = phi i64 [ %index.1.i.i, %if.end.i.i ], [ %index.021.i.i.ph, %for.body.i.i.preheader ]
  %stride2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %indvars.iv.i.i, i32 2
  %46 = load i32, i32* %stride2.i.i, align 4, !tbaa !185
  %cmp3.i.i = icmp sgt i32 %46, 0
  br i1 %cmp3.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %conv18.i.i = zext i32 %46 to i64
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %indvars.iv.i.i, i32 1
  %47 = load i32, i32* %extent.i.i, align 4, !tbaa !189
  %sub.i.i = add nsw i32 %47, -1
  %conv7.i.i = sext i32 %sub.i.i to i64
  %mul.i.i = mul nsw i64 %conv7.i.i, %conv18.i.i
  %add.i.i = add nsw i64 %mul.i.i, %index.021.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i64 [ %add.i.i, %if.then.i.i ], [ %index.021.i.i, %for.body.i.i ]
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %exitcond.not.i.i = icmp eq i64 %indvars.iv.next.i.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i.i, label %for.body.i13.i.preheader, label %for.body.i.i, !llvm.loop !271

for.body.i13.i.preheader:                         ; preds = %if.end.i.i, %middle.block25
  %index.1.i.i.lcssa = phi i64 [ %bin.rdx46, %middle.block25 ], [ %index.1.i.i, %if.end.i.i ]
  %min.iters.check = icmp ult i32 %21, 3
  br i1 %min.iters.check, label %for.body.i13.i.preheader48, label %vector.ph

vector.ph:                                        ; preds = %for.body.i13.i.preheader
  %n.vec = and i64 %wide.trip.count.i.i, 4294967294
  br label %vector.body

vector.body:                                      ; preds = %pred.load.continue23, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %pred.load.continue23 ]
  %vec.phi = phi i64 [ 0, %vector.ph ], [ %predphi, %pred.load.continue23 ]
  %vec.phi21 = phi i64 [ 0, %vector.ph ], [ %predphi24, %pred.load.continue23 ]
  %induction20 = or i64 %index, 1
  %48 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %index, i32 2
  %49 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %induction20, i32 2
  %50 = load i32, i32* %48, align 4, !tbaa !185
  %51 = load i32, i32* %49, align 4, !tbaa !185
  %52 = icmp slt i32 %50, 0
  %53 = icmp slt i32 %51, 0
  %54 = sext i32 %50 to i64
  %55 = sext i32 %51 to i64
  br i1 %52, label %pred.load.if, label %pred.load.continue

pred.load.if:                                     ; preds = %vector.body
  %56 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %index, i32 1
  %57 = load i32, i32* %56, align 4, !tbaa !189
  br label %pred.load.continue

pred.load.continue:                               ; preds = %pred.load.if, %vector.body
  %58 = phi i32 [ poison, %vector.body ], [ %57, %pred.load.if ]
  br i1 %53, label %pred.load.if22, label %pred.load.continue23

pred.load.if22:                                   ; preds = %pred.load.continue
  %59 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %induction20, i32 1
  %60 = load i32, i32* %59, align 4, !tbaa !189
  br label %pred.load.continue23

pred.load.continue23:                             ; preds = %pred.load.if22, %pred.load.continue
  %61 = phi i32 [ poison, %pred.load.continue ], [ %60, %pred.load.if22 ]
  %62 = add nsw i32 %58, -1
  %63 = add nsw i32 %61, -1
  %64 = sext i32 %62 to i64
  %65 = sext i32 %63 to i64
  %66 = mul nsw i64 %64, %54
  %67 = mul nsw i64 %65, %55
  %68 = select i1 %52, i64 %66, i64 0
  %predphi = add i64 %vec.phi, %68
  %69 = select i1 %53, i64 %67, i64 0
  %predphi24 = add i64 %vec.phi21, %69
  %index.next = add i64 %index, 2
  %70 = icmp eq i64 %index.next, %n.vec
  br i1 %70, label %middle.block, label %vector.body, !llvm.loop !272

middle.block:                                     ; preds = %pred.load.continue23
  %bin.rdx = add i64 %predphi24, %predphi
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count.i.i
  br i1 %cmp.n, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i.preheader48

for.body.i13.i.preheader48:                       ; preds = %for.body.i13.i.preheader, %middle.block
  %indvars.iv.i10.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %n.vec, %middle.block ]
  %index.018.i.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %bin.rdx, %middle.block ]
  br label %for.body.i13.i

for.body.i13.i:                                   ; preds = %for.body.i13.i.preheader48, %if.end.i24.i
  %indvars.iv.i10.i = phi i64 [ %indvars.iv.next.i22.i, %if.end.i24.i ], [ %indvars.iv.i10.i.ph, %for.body.i13.i.preheader48 ]
  %index.018.i.i = phi i64 [ %index.1.i21.i, %if.end.i24.i ], [ %index.018.i.i.ph, %for.body.i13.i.preheader48 ]
  %stride2.i11.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %indvars.iv.i10.i, i32 2
  %71 = load i32, i32* %stride2.i11.i, align 4, !tbaa !185
  %cmp3.i12.i = icmp slt i32 %71, 0
  br i1 %cmp3.i12.i, label %if.then.i20.i, label %if.end.i24.i

if.then.i20.i:                                    ; preds = %for.body.i13.i
  %conv.i14.i = sext i32 %71 to i64
  %extent.i15.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %indvars.iv.i10.i, i32 1
  %72 = load i32, i32* %extent.i15.i, align 4, !tbaa !189
  %sub.i16.i = add nsw i32 %72, -1
  %conv7.i17.i = sext i32 %sub.i16.i to i64
  %mul.i18.i = mul nsw i64 %conv7.i17.i, %conv.i14.i
  %add.i19.i = add nsw i64 %mul.i18.i, %index.018.i.i
  br label %if.end.i24.i

if.end.i24.i:                                     ; preds = %if.then.i20.i, %for.body.i13.i
  %index.1.i21.i = phi i64 [ %add.i19.i, %if.then.i20.i ], [ %index.018.i.i, %for.body.i13.i ]
  %indvars.iv.next.i22.i = add nuw nsw i64 %indvars.iv.i10.i, 1
  %exitcond.not.i23.i = icmp eq i64 %indvars.iv.next.i22.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i23.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i, !llvm.loop !273

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %if.end.i24.i, %middle.block
  %index.1.i21.i.lcssa = phi i64 [ %bin.rdx, %middle.block ], [ %index.1.i21.i, %if.end.i24.i ]
  %add8.i.i.neg = xor i64 %index.1.i.i.lcssa, -1
  %sub.i.neg.1 = add i64 %index.1.i21.i.lcssa, %add8.i.i.neg
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %for.body._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit
  %sub.i.neg.phi = phi i64 [ %sub.i.neg.0, %for.body._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge ], [ %sub.i.neg.1, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %bits.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %19, i64 %indvars.iv, i32 4, i32 1
  %73 = load i8, i8* %bits.i.i, align 1, !tbaa !144
  %conv.i.i = zext i8 %73 to i64
  %add.i4.i = add nuw nsw i64 %conv.i.i, 7
  %div.i.i = lshr i64 %add.i4.i, 3
  %mul.i.neg = mul i64 %div.i.i, %sub.i.neg.phi
  %sub = add i64 %mul.i.neg, %sub89
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.for.cond.cleanup_crit_edge, label %for.body, !llvm.loop !274

if.end41:                                         ; preds = %for.cond.cleanup, %while.body
  %74 = phi i64 [ %.pre93, %for.cond.cleanup ], [ %4, %while.body ]
  %75 = phi i64 [ %.pre92, %for.cond.cleanup ], [ %5, %while.body ]
  %cmp = icmp sgt i64 %75, %74
  %cmp1 = icmp ne %"struct.Halide::Runtime::Internal::CacheEntry"* %6, null
  %76 = and i1 %cmp1, %cmp
  br i1 %76, label %while.body, label %while.end42, !llvm.loop !275

while.end42:                                      ; preds = %if.end41, %entry
  ret void
}

; Function Attrs: nounwind
define weak void @halide_memoization_cache_set_size(i64 %size) local_unnamed_addr #4 {
entry:
  %cmp = icmp eq i64 %size, 0
  %spec.store.select = select i1 %cmp, i64 1048576, i64 %size
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #15
  store i64 %spec.store.select, i64* @_ZN6Halide7Runtime8Internal14max_cache_sizeE, align 8, !tbaa !22
  tail call void @_ZN6Halide7Runtime8Internal11prune_cacheEv() #16
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #15
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_memoization_cache_lookup(i8* %user_context, i8* %cache_key, i32 %size, %struct.halide_buffer_t* %computed_bounds, i32 %tuple_count, %struct.halide_buffer_t** %tuple_buffers) local_unnamed_addr #4 {
entry:
  %conv = sext i32 %size to i64
  %call = tail call i32 @_ZN6Halide7Runtime8Internal8djb_hashEPKhm(i8* %cache_key, i64 %conv) #16
  %0 = and i32 %call, 255
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #15
  %idxprom = zext i32 %0 to i64
  %arrayidx = getelementptr inbounds [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 0, i64 %idxprom
  %entry3.0220 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx, align 8, !tbaa !14
  %cmp.not221 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0220, null
  br i1 %cmp.not221, label %for.cond75.preheader, label %while.body.lr.ph

while.body.lr.ph:                                 ; preds = %entry
  %cmp16215 = icmp sgt i32 %tuple_count, 0
  %1 = sext i32 %tuple_count to i64
  br i1 %cmp16215, label %while.body.us, label %while.body

while.body.us:                                    ; preds = %while.body.lr.ph, %if.end73.us
  %entry3.0222.us = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %entry3.0.us, %if.end73.us ], [ %entry3.0220, %while.body.lr.ph ]
  %hash.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 6
  %2 = load i32, i32* %hash.us, align 8, !tbaa !254
  %cmp4.us = icmp eq i32 %2, %call
  br i1 %cmp4.us, label %land.lhs.true.us, label %if.end73.us

land.lhs.true.us:                                 ; preds = %while.body.us
  %key_size.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 4
  %3 = load i64, i64* %key_size.us, align 8, !tbaa !253
  %cmp6.us = icmp eq i64 %3, %conv
  br i1 %cmp6.us, label %land.lhs.true7.us, label %if.end73.us

land.lhs.true7.us:                                ; preds = %land.lhs.true.us
  %key.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 5
  %4 = load i8*, i8** %key.us, align 8, !tbaa !258
  %call9.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m(i8* %4, i8* %cache_key, i64 %conv) #16
  br i1 %call9.us, label %land.lhs.true10.us, label %if.end73.us

land.lhs.true10.us:                               ; preds = %land.lhs.true7.us
  %computed_bounds11.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 10
  %5 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds11.us, align 8, !tbaa !257
  %call12.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %computed_bounds, %struct.halide_dimension_t* %5) #16
  br i1 %call12.us, label %land.lhs.true13.us, label %if.end73.us

land.lhs.true13.us:                               ; preds = %land.lhs.true10.us
  %tuple_count14.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 8
  %6 = load i32, i32* %tuple_count14.us, align 8, !tbaa !232
  %cmp15.us = icmp eq i32 %6, %tuple_count
  br i1 %cmp15.us, label %for.cond.preheader.us, label %if.end73.us

for.cond.preheader.us:                            ; preds = %land.lhs.true13.us
  %buf.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 11
  br label %for.body.us

for.body.us:                                      ; preds = %for.body.us, %for.cond.preheader.us
  %indvars.iv226.us = phi i64 [ 0, %for.cond.preheader.us ], [ %indvars.iv.next227.us, %for.body.us ]
  %arrayidx18.us = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv226.us
  %7 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx18.us, align 8, !tbaa !14
  %8 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf.us, align 8, !tbaa !234
  %dim.us = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %8, i64 %indvars.iv226.us, i32 6
  %9 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.us, align 8, !tbaa !184
  %call21.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %7, %struct.halide_dimension_t* %9) #16
  %indvars.iv.next227.us = add nuw nsw i64 %indvars.iv226.us, 1
  %cmp16.us = icmp slt i64 %indvars.iv.next227.us, %1
  %10 = and i1 %cmp16.us, %call21.us
  br i1 %10, label %for.body.us, label %for.cond.cleanup.us, !llvm.loop !276

for.cond.cleanup.us:                              ; preds = %for.body.us
  br i1 %call21.us, label %if.then23, label %if.end73.us

if.end73.us:                                      ; preds = %for.cond.cleanup.us, %land.lhs.true13.us, %land.lhs.true10.us, %land.lhs.true7.us, %land.lhs.true.us, %while.body.us
  %next.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 0
  %entry3.0.us = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next.us, align 8, !tbaa !14
  %cmp.not.us = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0.us, null
  br i1 %cmp.not.us, label %for.cond75.preheader, label %while.body.us, !llvm.loop !277

for.cond75.preheader:                             ; preds = %if.end73, %if.end73.us, %entry
  %cmp76210 = icmp sgt i32 %tuple_count, 0
  br i1 %cmp76210, label %for.body78.preheader, label %cleanup119

for.body78.preheader:                             ; preds = %for.cond75.preheader
  %wide.trip.count = zext i32 %tuple_count to i64
  br label %for.body78

while.body:                                       ; preds = %while.body.lr.ph, %if.end73
  %entry3.0222 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %entry3.0, %if.end73 ], [ %entry3.0220, %while.body.lr.ph ]
  %hash = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 6
  %11 = load i32, i32* %hash, align 8, !tbaa !254
  %cmp4 = icmp eq i32 %11, %call
  br i1 %cmp4, label %land.lhs.true, label %if.end73

land.lhs.true:                                    ; preds = %while.body
  %key_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 4
  %12 = load i64, i64* %key_size, align 8, !tbaa !253
  %cmp6 = icmp eq i64 %12, %conv
  br i1 %cmp6, label %land.lhs.true7, label %if.end73

land.lhs.true7:                                   ; preds = %land.lhs.true
  %key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 5
  %13 = load i8*, i8** %key, align 8, !tbaa !258
  %call9 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m(i8* %13, i8* %cache_key, i64 %conv) #16
  br i1 %call9, label %land.lhs.true10, label %if.end73

land.lhs.true10:                                  ; preds = %land.lhs.true7
  %computed_bounds11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 10
  %14 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds11, align 8, !tbaa !257
  %call12 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %computed_bounds, %struct.halide_dimension_t* %14) #16
  br i1 %call12, label %land.lhs.true13, label %if.end73

land.lhs.true13:                                  ; preds = %land.lhs.true10
  %tuple_count14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 8
  %15 = load i32, i32* %tuple_count14, align 8, !tbaa !232
  %cmp15 = icmp eq i32 %15, %tuple_count
  br i1 %cmp15, label %if.then23, label %if.end73

if.then23:                                        ; preds = %land.lhs.true13, %for.cond.cleanup.us
  %.us-phi = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %entry3.0222.us, %for.cond.cleanup.us ], [ %entry3.0222, %land.lhs.true13 ]
  %16 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !14
  %cmp24.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, %16
  br i1 %cmp24.not, label %if.end57, label %do.body

do.body:                                          ; preds = %if.then23
  %more_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, i64 0, i32 1
  %17 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !268
  %cmp26.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %17, null
  br i1 %cmp26.not, label %if.then27, label %do.end

if.then27:                                        ; preds = %do.body
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([129 x i8], [129 x i8]* @.str.3.43, i64 0, i64 0)) #15
  tail call void @abort() #15
  br label %do.end

do.end:                                           ; preds = %if.then27, %do.body
  %less_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, i64 0, i32 2
  %18 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent, align 8, !tbaa !252
  %cmp28.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %18, null
  br i1 %cmp28.not, label %do.body33, label %if.then29

if.then29:                                        ; preds = %do.end
  %19 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !268
  %more_recent32 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %18, i64 0, i32 1
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %19, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent32, align 8, !tbaa !268
  %.pr = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !268
  br label %do.body41

do.body33:                                        ; preds = %do.end
  %20 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !14
  %cmp34 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %20, %.us-phi
  br i1 %cmp34, label %do.end38, label %if.then35

if.then35:                                        ; preds = %do.body33
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @.str.4.44, i64 0, i64 0)) #15
  tail call void @abort() #15
  br label %do.end38

do.end38:                                         ; preds = %if.then35, %do.body33
  %21 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !268
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %21, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !14
  br label %do.body41

do.body41:                                        ; preds = %do.end38, %if.then29
  %22 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %.pr, %if.then29 ], [ %21, %do.end38 ]
  %cmp43.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %22, null
  br i1 %cmp43.not, label %if.then44, label %do.end47

if.then44:                                        ; preds = %do.body41
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([129 x i8], [129 x i8]* @.str.5.45, i64 0, i64 0)) #15
  tail call void @abort() #15
  %.pre = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !268
  br label %do.end47

do.end47:                                         ; preds = %if.then44, %do.body41
  %23 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %.pre, %if.then44 ], [ %22, %do.body41 ]
  %24 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent, align 8, !tbaa !252
  %less_recent50 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %23, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %24, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent50, align 8, !tbaa !252
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !268
  %25 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !14
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %25, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent, align 8, !tbaa !252
  %cmp53.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %25, null
  br i1 %cmp53.not, label %if.end56, label %if.then54

if.then54:                                        ; preds = %do.end47
  %more_recent55 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %25, i64 0, i32 1
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent55, align 8, !tbaa !268
  br label %if.end56

if.end56:                                         ; preds = %if.then54, %do.end47
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !14
  br label %if.end57

if.end57:                                         ; preds = %if.end56, %if.then23
  br i1 %cmp16215, label %for.body62.lr.ph, label %cleanup119.loopexit223

for.body62.lr.ph:                                 ; preds = %if.end57
  %buf66 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, i64 0, i32 11
  %wide.trip.count230 = zext i32 %tuple_count to i64
  br label %for.body62

for.body62:                                       ; preds = %for.body62, %for.body62.lr.ph
  %indvars.iv228 = phi i64 [ 0, %for.body62.lr.ph ], [ %indvars.iv.next229, %for.body62 ]
  %arrayidx65 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv228
  %26 = bitcast %struct.halide_buffer_t** %arrayidx65 to i8**
  %27 = load i8*, i8** %26, align 8, !tbaa !14
  %28 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf66, align 8, !tbaa !234
  %arrayidx68 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %28, i64 %indvars.iv228
  %29 = bitcast %struct.halide_buffer_t* %arrayidx68 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(56) %27, i8* nonnull align 8 dereferenceable(56) %29, i64 56, i1 false), !tbaa.struct !264
  %indvars.iv.next229 = add nuw nsw i64 %indvars.iv228, 1
  %exitcond231.not = icmp eq i64 %indvars.iv.next229, %wide.trip.count230
  br i1 %exitcond231.not, label %cleanup119.loopexit223, label %for.body62, !llvm.loop !278

if.end73:                                         ; preds = %land.lhs.true13, %land.lhs.true10, %land.lhs.true7, %land.lhs.true, %while.body
  %next = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 0
  %entry3.0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next, align 8, !tbaa !14
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0, null
  br i1 %cmp.not, label %for.cond75.preheader, label %while.body, !llvm.loop !277

for.body78:                                       ; preds = %for.inc114, %for.body78.preheader
  %indvars.iv = phi i64 [ 0, %for.body78.preheader ], [ %indvars.iv.next, %for.inc114 ]
  %arrayidx81 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv
  %30 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx81, align 8, !tbaa !14
  %dimensions.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %30, i64 0, i32 5
  %31 = load i32, i32* %dimensions.i.i, align 4, !tbaa !183
  %cmp19.i.i = icmp sgt i32 %31, 0
  br i1 %cmp19.i.i, label %for.body.lr.ph.i.i, label %for.body78._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge

for.body78._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge: ; preds = %for.body78
  %sub.i.0 = sub nsw i64 1, 0
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.lr.ph.i.i:                               ; preds = %for.body78
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %30, i64 0, i32 6
  %32 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8, !tbaa !184
  %wide.trip.count.i.i = zext i32 %31 to i64
  %min.iters.check38 = icmp ult i32 %31, 3
  br i1 %min.iters.check38, label %for.body.i.i.preheader, label %vector.ph39

vector.ph39:                                      ; preds = %for.body.lr.ph.i.i
  %n.vec41 = and i64 %wide.trip.count.i.i, 4294967294
  br label %vector.body37

vector.body37:                                    ; preds = %pred.load.continue53, %vector.ph39
  %index42 = phi i64 [ 0, %vector.ph39 ], [ %index.next43, %pred.load.continue53 ]
  %vec.phi48 = phi i64 [ 0, %vector.ph39 ], [ %predphi54, %pred.load.continue53 ]
  %vec.phi49 = phi i64 [ 0, %vector.ph39 ], [ %predphi55, %pred.load.continue53 ]
  %induction47 = or i64 %index42, 1
  %33 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %32, i64 %index42, i32 2
  %34 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %32, i64 %induction47, i32 2
  %35 = load i32, i32* %33, align 4, !tbaa !185
  %36 = load i32, i32* %34, align 4, !tbaa !185
  %37 = icmp sgt i32 %35, 0
  %38 = icmp sgt i32 %36, 0
  %39 = zext i32 %35 to i64
  %40 = zext i32 %36 to i64
  br i1 %37, label %pred.load.if50, label %pred.load.continue51

pred.load.if50:                                   ; preds = %vector.body37
  %41 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %32, i64 %index42, i32 1
  %42 = load i32, i32* %41, align 4, !tbaa !189
  br label %pred.load.continue51

pred.load.continue51:                             ; preds = %pred.load.if50, %vector.body37
  %43 = phi i32 [ poison, %vector.body37 ], [ %42, %pred.load.if50 ]
  br i1 %38, label %pred.load.if52, label %pred.load.continue53

pred.load.if52:                                   ; preds = %pred.load.continue51
  %44 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %32, i64 %induction47, i32 1
  %45 = load i32, i32* %44, align 4, !tbaa !189
  br label %pred.load.continue53

pred.load.continue53:                             ; preds = %pred.load.if52, %pred.load.continue51
  %46 = phi i32 [ poison, %pred.load.continue51 ], [ %45, %pred.load.if52 ]
  %47 = add nsw i32 %43, -1
  %48 = add nsw i32 %46, -1
  %49 = sext i32 %47 to i64
  %50 = sext i32 %48 to i64
  %51 = mul nsw i64 %49, %39
  %52 = mul nsw i64 %50, %40
  %53 = select i1 %37, i64 %51, i64 0
  %predphi54 = add i64 %vec.phi48, %53
  %54 = select i1 %38, i64 %52, i64 0
  %predphi55 = add i64 %vec.phi49, %54
  %index.next43 = add i64 %index42, 2
  %55 = icmp eq i64 %index.next43, %n.vec41
  br i1 %55, label %middle.block35, label %vector.body37, !llvm.loop !279

middle.block35:                                   ; preds = %pred.load.continue53
  %bin.rdx56 = add i64 %predphi55, %predphi54
  %cmp.n45 = icmp eq i64 %n.vec41, %wide.trip.count.i.i
  br i1 %cmp.n45, label %for.body.i13.i.preheader, label %for.body.i.i.preheader

for.body.i.i.preheader:                           ; preds = %for.body.lr.ph.i.i, %middle.block35
  %indvars.iv.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %n.vec41, %middle.block35 ]
  %index.021.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %bin.rdx56, %middle.block35 ]
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.body.i.i.preheader, %if.end.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %if.end.i.i ], [ %indvars.iv.i.i.ph, %for.body.i.i.preheader ]
  %index.021.i.i = phi i64 [ %index.1.i.i, %if.end.i.i ], [ %index.021.i.i.ph, %for.body.i.i.preheader ]
  %stride2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %32, i64 %indvars.iv.i.i, i32 2
  %56 = load i32, i32* %stride2.i.i, align 4, !tbaa !185
  %cmp3.i.i = icmp sgt i32 %56, 0
  br i1 %cmp3.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %conv18.i.i = zext i32 %56 to i64
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %32, i64 %indvars.iv.i.i, i32 1
  %57 = load i32, i32* %extent.i.i, align 4, !tbaa !189
  %sub.i.i = add nsw i32 %57, -1
  %conv7.i.i = sext i32 %sub.i.i to i64
  %mul.i.i = mul nsw i64 %conv7.i.i, %conv18.i.i
  %add.i.i = add nsw i64 %mul.i.i, %index.021.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i64 [ %add.i.i, %if.then.i.i ], [ %index.021.i.i, %for.body.i.i ]
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %exitcond.not.i.i = icmp eq i64 %indvars.iv.next.i.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i.i, label %for.body.i13.i.preheader, label %for.body.i.i, !llvm.loop !280

for.body.i13.i.preheader:                         ; preds = %if.end.i.i, %middle.block35
  %index.1.i.i.lcssa = phi i64 [ %bin.rdx56, %middle.block35 ], [ %index.1.i.i, %if.end.i.i ]
  %min.iters.check = icmp ult i32 %31, 3
  br i1 %min.iters.check, label %for.body.i13.i.preheader58, label %vector.ph

vector.ph:                                        ; preds = %for.body.i13.i.preheader
  %n.vec = and i64 %wide.trip.count.i.i, 4294967294
  br label %vector.body

vector.body:                                      ; preds = %pred.load.continue33, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %pred.load.continue33 ]
  %vec.phi = phi i64 [ 0, %vector.ph ], [ %predphi, %pred.load.continue33 ]
  %vec.phi31 = phi i64 [ 0, %vector.ph ], [ %predphi34, %pred.load.continue33 ]
  %induction30 = or i64 %index, 1
  %58 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %32, i64 %index, i32 2
  %59 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %32, i64 %induction30, i32 2
  %60 = load i32, i32* %58, align 4, !tbaa !185
  %61 = load i32, i32* %59, align 4, !tbaa !185
  %62 = icmp slt i32 %60, 0
  %63 = icmp slt i32 %61, 0
  %64 = sext i32 %60 to i64
  %65 = sext i32 %61 to i64
  br i1 %62, label %pred.load.if, label %pred.load.continue

pred.load.if:                                     ; preds = %vector.body
  %66 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %32, i64 %index, i32 1
  %67 = load i32, i32* %66, align 4, !tbaa !189
  br label %pred.load.continue

pred.load.continue:                               ; preds = %pred.load.if, %vector.body
  %68 = phi i32 [ poison, %vector.body ], [ %67, %pred.load.if ]
  br i1 %63, label %pred.load.if32, label %pred.load.continue33

pred.load.if32:                                   ; preds = %pred.load.continue
  %69 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %32, i64 %induction30, i32 1
  %70 = load i32, i32* %69, align 4, !tbaa !189
  br label %pred.load.continue33

pred.load.continue33:                             ; preds = %pred.load.if32, %pred.load.continue
  %71 = phi i32 [ poison, %pred.load.continue ], [ %70, %pred.load.if32 ]
  %72 = add nsw i32 %68, -1
  %73 = add nsw i32 %71, -1
  %74 = sext i32 %72 to i64
  %75 = sext i32 %73 to i64
  %76 = mul nsw i64 %74, %64
  %77 = mul nsw i64 %75, %65
  %78 = select i1 %62, i64 %76, i64 0
  %predphi = add i64 %vec.phi, %78
  %79 = select i1 %63, i64 %77, i64 0
  %predphi34 = add i64 %vec.phi31, %79
  %index.next = add i64 %index, 2
  %80 = icmp eq i64 %index.next, %n.vec
  br i1 %80, label %middle.block, label %vector.body, !llvm.loop !281

middle.block:                                     ; preds = %pred.load.continue33
  %bin.rdx = add i64 %predphi34, %predphi
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count.i.i
  br i1 %cmp.n, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i.preheader58

for.body.i13.i.preheader58:                       ; preds = %for.body.i13.i.preheader, %middle.block
  %indvars.iv.i10.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %n.vec, %middle.block ]
  %index.018.i.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %bin.rdx, %middle.block ]
  br label %for.body.i13.i

for.body.i13.i:                                   ; preds = %for.body.i13.i.preheader58, %if.end.i24.i
  %indvars.iv.i10.i = phi i64 [ %indvars.iv.next.i22.i, %if.end.i24.i ], [ %indvars.iv.i10.i.ph, %for.body.i13.i.preheader58 ]
  %index.018.i.i = phi i64 [ %index.1.i21.i, %if.end.i24.i ], [ %index.018.i.i.ph, %for.body.i13.i.preheader58 ]
  %stride2.i11.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %32, i64 %indvars.iv.i10.i, i32 2
  %81 = load i32, i32* %stride2.i11.i, align 4, !tbaa !185
  %cmp3.i12.i = icmp slt i32 %81, 0
  br i1 %cmp3.i12.i, label %if.then.i20.i, label %if.end.i24.i

if.then.i20.i:                                    ; preds = %for.body.i13.i
  %conv.i14.i = sext i32 %81 to i64
  %extent.i15.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %32, i64 %indvars.iv.i10.i, i32 1
  %82 = load i32, i32* %extent.i15.i, align 4, !tbaa !189
  %sub.i16.i = add nsw i32 %82, -1
  %conv7.i17.i = sext i32 %sub.i16.i to i64
  %mul.i18.i = mul nsw i64 %conv7.i17.i, %conv.i14.i
  %add.i19.i = add nsw i64 %mul.i18.i, %index.018.i.i
  br label %if.end.i24.i

if.end.i24.i:                                     ; preds = %if.then.i20.i, %for.body.i13.i
  %index.1.i21.i = phi i64 [ %add.i19.i, %if.then.i20.i ], [ %index.018.i.i, %for.body.i13.i ]
  %indvars.iv.next.i22.i = add nuw nsw i64 %indvars.iv.i10.i, 1
  %exitcond.not.i23.i = icmp eq i64 %indvars.iv.next.i22.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i23.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i, !llvm.loop !282

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %if.end.i24.i, %middle.block
  %index.1.i21.i.lcssa = phi i64 [ %bin.rdx, %middle.block ], [ %index.1.i21.i, %if.end.i24.i ]
  %add8.i.i = add nsw i64 %index.1.i.i.lcssa, 1
  %sub.i.1 = sub nsw i64 %add8.i.i, %index.1.i21.i.lcssa
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %for.body78._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit
  %add8.i27.i = phi i64 [ 1, %for.body78._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge ], [ %add8.i.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %sub.i.phi = phi i64 [ %sub.i.0, %for.body78._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge ], [ %sub.i.1, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %bits.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %30, i64 0, i32 4, i32 1
  %83 = load i8, i8* %bits.i.i, align 1, !tbaa !144
  %conv.i.i = zext i8 %83 to i64
  %add.i4.i = add nuw nsw i64 %conv.i.i, 7
  %div.i.i = lshr i64 %add.i4.i, 3
  %mul.i = mul i64 %div.i.i, %sub.i.phi
  %add84 = add i64 %mul.i, 32
  %call85 = tail call i8* @halide_malloc(i8* %user_context, i64 %add84) #15
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %30, i64 0, i32 2
  store i8* %call85, i8** %host, align 8, !tbaa !180
  %cmp87 = icmp eq i8* %call85, null
  br i1 %cmp87, label %for.cond89.preheader, label %for.inc114

for.cond89.preheader:                             ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  %cmp90208.not = icmp eq i64 %indvars.iv, 0
  br i1 %cmp90208.not, label %cleanup119, label %for.body92

for.body92:                                       ; preds = %for.cond89.preheader, %for.body92
  %indvars.iv224 = phi i64 [ %indvars.iv.next225, %for.body92 ], [ %indvars.iv, %for.cond89.preheader ]
  %sub = add nuw nsw i64 %indvars.iv224, 4294967295
  %84 = and i64 %sub, 4294967295
  %arrayidx94 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %84
  %85 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx94, align 8, !tbaa !14
  %host95 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %85, i64 0, i32 2
  %86 = load i8*, i8** %host95, align 8, !tbaa !180
  %call96 = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %86) #16
  %87 = bitcast %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call96 to i8*
  tail call void @halide_free(i8* %user_context, i8* %87) #15
  %88 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx94, align 8, !tbaa !14
  %host100 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %88, i64 0, i32 2
  store i8* null, i8** %host100, align 8, !tbaa !180
  %89 = icmp sgt i64 %indvars.iv224, 1
  %indvars.iv.next225 = add nsw i64 %indvars.iv224, -1
  br i1 %89, label %for.body92, label %cleanup119, !llvm.loop !283

for.inc114:                                       ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  %add.ptr = getelementptr inbounds i8, i8* %call85, i64 32
  store i8* %add.ptr, i8** %host, align 8, !tbaa !180
  %call108 = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* nonnull %add.ptr) #16
  %hash109 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call108, i64 0, i32 1
  store i32 %call, i32* %hash109, align 8, !tbaa !284
  %entry110 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call108, i64 0, i32 0
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %entry110, align 8, !tbaa !286
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %cleanup119, label %for.body78, !llvm.loop !287

cleanup119.loopexit223:                           ; preds = %for.body62, %if.end57
  %in_use_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, i64 0, i32 7
  %90 = load i32, i32* %in_use_count, align 4, !tbaa !255
  %add = add i32 %90, %tuple_count
  store i32 %add, i32* %in_use_count, align 4, !tbaa !255
  br label %cleanup119

cleanup119:                                       ; preds = %for.inc114, %for.body92, %cleanup119.loopexit223, %for.cond89.preheader, %for.cond75.preheader
  %retval.6 = phi i32 [ 1, %for.cond75.preheader ], [ 0, %cleanup119.loopexit223 ], [ -1, %for.cond89.preheader ], [ -1, %for.body92 ], [ 1, %for.inc114 ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #15
  ret i32 %retval.6
}

; Function Attrs: nounwind
define weak i32 @halide_memoization_cache_store(i8* %user_context, i8* %cache_key, i32 %size, %struct.halide_buffer_t* %computed_bounds, i32 %tuple_count, %struct.halide_buffer_t** %tuple_buffers, i1 zeroext %has_eviction_key, i64 %eviction_key) local_unnamed_addr #4 {
entry:
  %0 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, align 8, !tbaa !14
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %0, i64 0, i32 2
  %1 = load i8*, i8** %host, align 8, !tbaa !180
  %call = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %1) #16
  %hash = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call, i64 0, i32 1
  %2 = load i32, i32* %hash, align 8, !tbaa !284
  %3 = and i32 %2, 255
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #15
  %idxprom = zext i32 %3 to i64
  %arrayidx7 = getelementptr inbounds [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 0, i64 %idxprom
  %entry6.0228 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx7, align 8, !tbaa !14
  %cmp.not229 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0228, null
  br i1 %cmp.not229, label %for.cond61.preheader, label %while.body.lr.ph

while.body.lr.ph:                                 ; preds = %entry
  %conv10 = sext i32 %size to i64
  %cmp22221 = icmp sgt i32 %tuple_count, 0
  br i1 %cmp22221, label %while.body.us.preheader, label %while.body

while.body.us.preheader:                          ; preds = %while.body.lr.ph
  %4 = zext i32 %tuple_count to i64
  br label %while.body.us

while.body.us:                                    ; preds = %if.end59.us, %while.body.us.preheader
  %entry6.0230.us = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %entry6.0.us, %if.end59.us ], [ %entry6.0228, %while.body.us.preheader ]
  %hash8.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 6
  %5 = load i32, i32* %hash8.us, align 8, !tbaa !254
  %cmp9.us = icmp eq i32 %5, %2
  br i1 %cmp9.us, label %land.lhs.true.us, label %if.end59.us

land.lhs.true.us:                                 ; preds = %while.body.us
  %key_size.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 4
  %6 = load i64, i64* %key_size.us, align 8, !tbaa !253
  %cmp11.us = icmp eq i64 %6, %conv10
  br i1 %cmp11.us, label %land.lhs.true12.us, label %if.end59.us

land.lhs.true12.us:                               ; preds = %land.lhs.true.us
  %key.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 5
  %7 = load i8*, i8** %key.us, align 8, !tbaa !258
  %call14.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m(i8* %7, i8* %cache_key, i64 %conv10) #16
  br i1 %call14.us, label %land.lhs.true15.us, label %if.end59.us

land.lhs.true15.us:                               ; preds = %land.lhs.true12.us
  %computed_bounds16.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 10
  %8 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds16.us, align 8, !tbaa !257
  %call17.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %computed_bounds, %struct.halide_dimension_t* %8) #16
  br i1 %call17.us, label %land.lhs.true18.us, label %if.end59.us

land.lhs.true18.us:                               ; preds = %land.lhs.true15.us
  %tuple_count19.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 8
  %9 = load i32, i32* %tuple_count19.us, align 8, !tbaa !232
  %cmp20.us = icmp eq i32 %9, %tuple_count
  br i1 %cmp20.us, label %for.body.lr.ph.us, label %if.end59.us

for.cond.cleanup.us:                              ; preds = %for.body.us
  br i1 %call30.us, label %do.body.us, label %if.end59.us

do.body.us:                                       ; preds = %for.cond.cleanup.us
  %10 = and i8 %spec.select.us, 1
  %tobool41.not.us = icmp eq i8 %10, 0
  br i1 %tobool41.not.us, label %if.then42.us, label %for.body48.us.preheader

for.body48.us.preheader:                          ; preds = %if.then42.us, %do.body.us
  %indvars.iv.next245.1 = add nuw nsw i64 0, 1
  %arrayidx50.us.1 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 0
  br label %for.body48.us

if.then42.us:                                     ; preds = %do.body.us
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([122 x i8], [122 x i8]* @.str.9.46, i64 0, i64 0)) #15
  tail call void @abort() #15
  br label %for.body48.us.preheader

if.end59.us:                                      ; preds = %for.cond.cleanup.us, %land.lhs.true18.us, %land.lhs.true15.us, %land.lhs.true12.us, %land.lhs.true.us, %while.body.us
  %next.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 0
  %entry6.0.us = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next.us, align 8, !tbaa !14
  %cmp.not.us = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0.us, null
  br i1 %cmp.not.us, label %for.cond61.preheader, label %while.body.us, !llvm.loop !288

for.body48.us:                                    ; preds = %for.body48.us.for.body48.us_crit_edge, %for.body48.us.preheader
  %arrayidx50.us.phi = phi %struct.halide_buffer_t** [ %arrayidx50.us.0, %for.body48.us.for.body48.us_crit_edge ], [ %arrayidx50.us.1, %for.body48.us.preheader ]
  %indvars.iv.next245.phi = phi i64 [ %indvars.iv.next245.0, %for.body48.us.for.body48.us_crit_edge ], [ %indvars.iv.next245.1, %for.body48.us.preheader ]
  %11 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx50.us.phi, align 8, !tbaa !14
  %host51.us = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %11, i64 0, i32 2
  %12 = load i8*, i8** %host51.us, align 8, !tbaa !180
  %call52.us = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %12) #16
  %entry53.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call52.us, i64 0, i32 0
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %entry53.us, align 8, !tbaa !286
  %exitcond247.not = icmp eq i64 %indvars.iv.next245.phi, %4
  br i1 %exitcond247.not, label %cleanup132, label %for.body48.us.for.body48.us_crit_edge, !llvm.loop !289

for.body48.us.for.body48.us_crit_edge:            ; preds = %for.body48.us
  %indvars.iv.next245.0 = add nuw nsw i64 %indvars.iv.next245.phi, 1
  %arrayidx50.us.0 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv.next245.phi
  br label %for.body48.us

for.body.us:                                      ; preds = %for.body.lr.ph.us, %for.body.us
  %13 = phi %struct.halide_buffer_t* [ %.pre, %for.body.lr.ph.us ], [ %16, %for.body.us ]
  %indvars.iv242 = phi i64 [ 0, %for.body.lr.ph.us ], [ %indvars.iv.next243, %for.body.us ]
  %no_host_pointers_equal.0222.us = phi i8 [ 1, %for.body.lr.ph.us ], [ %spec.select.us, %for.body.us ]
  %arrayidx24.us = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv242
  %14 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx24.us, align 8, !tbaa !14
  %dim.us = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %13, i64 %indvars.iv242, i32 6
  %15 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.us, align 8, !tbaa !184
  %call30.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %14, %struct.halide_dimension_t* %15) #16
  %16 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf27.us, align 8, !tbaa !234
  %host35.us = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %16, i64 %indvars.iv242, i32 2
  %17 = load i8*, i8** %host35.us, align 8, !tbaa !180
  %host36.us = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %14, i64 0, i32 2
  %18 = load i8*, i8** %host36.us, align 8, !tbaa !180
  %cmp37.us = icmp eq i8* %17, %18
  %spec.select.us = select i1 %cmp37.us, i8 0, i8 %no_host_pointers_equal.0222.us
  %indvars.iv.next243 = add nuw nsw i64 %indvars.iv242, 1
  %cmp22.us = icmp ult i64 %indvars.iv.next243, %4
  %19 = and i1 %cmp22.us, %call30.us
  br i1 %19, label %for.body.us, label %for.cond.cleanup.us, !llvm.loop !290

for.body.lr.ph.us:                                ; preds = %land.lhs.true18.us
  %buf27.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 11
  %.pre = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf27.us, align 8, !tbaa !234
  br label %for.body.us

for.cond61.preheader:                             ; preds = %if.end59, %if.end59.us, %entry
  %cmp62218 = icmp sgt i32 %tuple_count, 0
  br i1 %cmp62218, label %for.body64.preheader, label %for.cond.cleanup63

for.body64.preheader:                             ; preds = %for.cond61.preheader
  %wide.trip.count240 = zext i32 %tuple_count to i64
  br label %for.body64

while.body:                                       ; preds = %while.body.lr.ph, %if.end59
  %entry6.0230 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %entry6.0, %if.end59 ], [ %entry6.0228, %while.body.lr.ph ]
  %hash8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 6
  %20 = load i32, i32* %hash8, align 8, !tbaa !254
  %cmp9 = icmp eq i32 %20, %2
  br i1 %cmp9, label %land.lhs.true, label %if.end59

land.lhs.true:                                    ; preds = %while.body
  %key_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 4
  %21 = load i64, i64* %key_size, align 8, !tbaa !253
  %cmp11 = icmp eq i64 %21, %conv10
  br i1 %cmp11, label %land.lhs.true12, label %if.end59

land.lhs.true12:                                  ; preds = %land.lhs.true
  %key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 5
  %22 = load i8*, i8** %key, align 8, !tbaa !258
  %call14 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m(i8* %22, i8* %cache_key, i64 %conv10) #16
  br i1 %call14, label %land.lhs.true15, label %if.end59

land.lhs.true15:                                  ; preds = %land.lhs.true12
  %computed_bounds16 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 10
  %23 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds16, align 8, !tbaa !257
  %call17 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %computed_bounds, %struct.halide_dimension_t* %23) #16
  br i1 %call17, label %land.lhs.true18, label %if.end59

land.lhs.true18:                                  ; preds = %land.lhs.true15
  %tuple_count19 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 8
  %24 = load i32, i32* %tuple_count19, align 8, !tbaa !232
  %cmp20 = icmp eq i32 %24, %tuple_count
  br i1 %cmp20, label %cleanup132, label %if.end59

if.end59:                                         ; preds = %land.lhs.true18, %land.lhs.true15, %land.lhs.true12, %land.lhs.true, %while.body
  %next = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 0
  %entry6.0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next, align 8, !tbaa !14
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0, null
  br i1 %cmp.not, label %for.cond61.preheader, label %while.body, !llvm.loop !288

for.cond.cleanup63:                               ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit, %for.cond61.preheader
  %added_size.0.lcssa = phi i64 [ 0, %for.cond61.preheader ], [ %add, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ]
  %25 = load i64, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !22
  %add73 = add i64 %25, %added_size.0.lcssa
  store i64 %add73, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !22
  tail call void @_ZN6Halide7Runtime8Internal11prune_cacheEv() #16
  %call74 = tail call i8* @halide_malloc(i8* null, i64 96) #15
  %tobool75.not = icmp eq i8* %call74, null
  br i1 %tobool75.not, label %if.then83, label %if.then76

for.body64:                                       ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit, %for.body64.preheader
  %indvars.iv238 = phi i64 [ 0, %for.body64.preheader ], [ %indvars.iv.next239, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ]
  %added_size.0219 = phi i64 [ 0, %for.body64.preheader ], [ %add, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ]
  %arrayidx67 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv238
  %26 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx67, align 8, !tbaa !14
  %dimensions.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %26, i64 0, i32 5
  %27 = load i32, i32* %dimensions.i.i, align 4, !tbaa !183
  %cmp19.i.i = icmp sgt i32 %27, 0
  br i1 %cmp19.i.i, label %for.body.lr.ph.i.i, label %for.body64._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge

for.body64._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge: ; preds = %for.body64
  %sub.i.0 = sub nsw i64 1, 0
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.lr.ph.i.i:                               ; preds = %for.body64
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %26, i64 0, i32 6
  %28 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8, !tbaa !184
  %wide.trip.count.i.i = zext i32 %27 to i64
  %min.iters.check24 = icmp ult i32 %27, 3
  br i1 %min.iters.check24, label %for.body.i.i.preheader, label %vector.ph25

vector.ph25:                                      ; preds = %for.body.lr.ph.i.i
  %n.vec27 = and i64 %wide.trip.count.i.i, 4294967294
  br label %vector.body23

vector.body23:                                    ; preds = %pred.load.continue39, %vector.ph25
  %index28 = phi i64 [ 0, %vector.ph25 ], [ %index.next29, %pred.load.continue39 ]
  %vec.phi34 = phi i64 [ 0, %vector.ph25 ], [ %predphi40, %pred.load.continue39 ]
  %vec.phi35 = phi i64 [ 0, %vector.ph25 ], [ %predphi41, %pred.load.continue39 ]
  %induction33 = or i64 %index28, 1
  %29 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %index28, i32 2
  %30 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %induction33, i32 2
  %31 = load i32, i32* %29, align 4, !tbaa !185
  %32 = load i32, i32* %30, align 4, !tbaa !185
  %33 = icmp sgt i32 %31, 0
  %34 = icmp sgt i32 %32, 0
  %35 = zext i32 %31 to i64
  %36 = zext i32 %32 to i64
  br i1 %33, label %pred.load.if36, label %pred.load.continue37

pred.load.if36:                                   ; preds = %vector.body23
  %37 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %index28, i32 1
  %38 = load i32, i32* %37, align 4, !tbaa !189
  br label %pred.load.continue37

pred.load.continue37:                             ; preds = %pred.load.if36, %vector.body23
  %39 = phi i32 [ poison, %vector.body23 ], [ %38, %pred.load.if36 ]
  br i1 %34, label %pred.load.if38, label %pred.load.continue39

pred.load.if38:                                   ; preds = %pred.load.continue37
  %40 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %induction33, i32 1
  %41 = load i32, i32* %40, align 4, !tbaa !189
  br label %pred.load.continue39

pred.load.continue39:                             ; preds = %pred.load.if38, %pred.load.continue37
  %42 = phi i32 [ poison, %pred.load.continue37 ], [ %41, %pred.load.if38 ]
  %43 = add nsw i32 %39, -1
  %44 = add nsw i32 %42, -1
  %45 = sext i32 %43 to i64
  %46 = sext i32 %44 to i64
  %47 = mul nsw i64 %45, %35
  %48 = mul nsw i64 %46, %36
  %49 = select i1 %33, i64 %47, i64 0
  %predphi40 = add i64 %vec.phi34, %49
  %50 = select i1 %34, i64 %48, i64 0
  %predphi41 = add i64 %vec.phi35, %50
  %index.next29 = add i64 %index28, 2
  %51 = icmp eq i64 %index.next29, %n.vec27
  br i1 %51, label %middle.block21, label %vector.body23, !llvm.loop !291

middle.block21:                                   ; preds = %pred.load.continue39
  %bin.rdx42 = add i64 %predphi41, %predphi40
  %cmp.n31 = icmp eq i64 %n.vec27, %wide.trip.count.i.i
  br i1 %cmp.n31, label %for.body.i13.i.preheader, label %for.body.i.i.preheader

for.body.i.i.preheader:                           ; preds = %for.body.lr.ph.i.i, %middle.block21
  %indvars.iv.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %n.vec27, %middle.block21 ]
  %index.021.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %bin.rdx42, %middle.block21 ]
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.body.i.i.preheader, %if.end.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %if.end.i.i ], [ %indvars.iv.i.i.ph, %for.body.i.i.preheader ]
  %index.021.i.i = phi i64 [ %index.1.i.i, %if.end.i.i ], [ %index.021.i.i.ph, %for.body.i.i.preheader ]
  %stride2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %indvars.iv.i.i, i32 2
  %52 = load i32, i32* %stride2.i.i, align 4, !tbaa !185
  %cmp3.i.i = icmp sgt i32 %52, 0
  br i1 %cmp3.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %conv18.i.i = zext i32 %52 to i64
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %indvars.iv.i.i, i32 1
  %53 = load i32, i32* %extent.i.i, align 4, !tbaa !189
  %sub.i.i = add nsw i32 %53, -1
  %conv7.i.i = sext i32 %sub.i.i to i64
  %mul.i.i = mul nsw i64 %conv7.i.i, %conv18.i.i
  %add.i.i = add nsw i64 %mul.i.i, %index.021.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i64 [ %add.i.i, %if.then.i.i ], [ %index.021.i.i, %for.body.i.i ]
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %exitcond.not.i.i = icmp eq i64 %indvars.iv.next.i.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i.i, label %for.body.i13.i.preheader, label %for.body.i.i, !llvm.loop !292

for.body.i13.i.preheader:                         ; preds = %if.end.i.i, %middle.block21
  %index.1.i.i.lcssa = phi i64 [ %bin.rdx42, %middle.block21 ], [ %index.1.i.i, %if.end.i.i ]
  %min.iters.check = icmp ult i32 %27, 3
  br i1 %min.iters.check, label %for.body.i13.i.preheader44, label %vector.ph

vector.ph:                                        ; preds = %for.body.i13.i.preheader
  %n.vec = and i64 %wide.trip.count.i.i, 4294967294
  br label %vector.body

vector.body:                                      ; preds = %pred.load.continue19, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %pred.load.continue19 ]
  %vec.phi = phi i64 [ 0, %vector.ph ], [ %predphi, %pred.load.continue19 ]
  %vec.phi17 = phi i64 [ 0, %vector.ph ], [ %predphi20, %pred.load.continue19 ]
  %induction16 = or i64 %index, 1
  %54 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %index, i32 2
  %55 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %induction16, i32 2
  %56 = load i32, i32* %54, align 4, !tbaa !185
  %57 = load i32, i32* %55, align 4, !tbaa !185
  %58 = icmp slt i32 %56, 0
  %59 = icmp slt i32 %57, 0
  %60 = sext i32 %56 to i64
  %61 = sext i32 %57 to i64
  br i1 %58, label %pred.load.if, label %pred.load.continue

pred.load.if:                                     ; preds = %vector.body
  %62 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %index, i32 1
  %63 = load i32, i32* %62, align 4, !tbaa !189
  br label %pred.load.continue

pred.load.continue:                               ; preds = %pred.load.if, %vector.body
  %64 = phi i32 [ poison, %vector.body ], [ %63, %pred.load.if ]
  br i1 %59, label %pred.load.if18, label %pred.load.continue19

pred.load.if18:                                   ; preds = %pred.load.continue
  %65 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %induction16, i32 1
  %66 = load i32, i32* %65, align 4, !tbaa !189
  br label %pred.load.continue19

pred.load.continue19:                             ; preds = %pred.load.if18, %pred.load.continue
  %67 = phi i32 [ poison, %pred.load.continue ], [ %66, %pred.load.if18 ]
  %68 = add nsw i32 %64, -1
  %69 = add nsw i32 %67, -1
  %70 = sext i32 %68 to i64
  %71 = sext i32 %69 to i64
  %72 = mul nsw i64 %70, %60
  %73 = mul nsw i64 %71, %61
  %74 = select i1 %58, i64 %72, i64 0
  %predphi = add i64 %vec.phi, %74
  %75 = select i1 %59, i64 %73, i64 0
  %predphi20 = add i64 %vec.phi17, %75
  %index.next = add i64 %index, 2
  %76 = icmp eq i64 %index.next, %n.vec
  br i1 %76, label %middle.block, label %vector.body, !llvm.loop !293

middle.block:                                     ; preds = %pred.load.continue19
  %bin.rdx = add i64 %predphi20, %predphi
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count.i.i
  br i1 %cmp.n, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i.preheader44

for.body.i13.i.preheader44:                       ; preds = %for.body.i13.i.preheader, %middle.block
  %indvars.iv.i10.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %n.vec, %middle.block ]
  %index.018.i.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %bin.rdx, %middle.block ]
  br label %for.body.i13.i

for.body.i13.i:                                   ; preds = %for.body.i13.i.preheader44, %if.end.i24.i
  %indvars.iv.i10.i = phi i64 [ %indvars.iv.next.i22.i, %if.end.i24.i ], [ %indvars.iv.i10.i.ph, %for.body.i13.i.preheader44 ]
  %index.018.i.i = phi i64 [ %index.1.i21.i, %if.end.i24.i ], [ %index.018.i.i.ph, %for.body.i13.i.preheader44 ]
  %stride2.i11.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %indvars.iv.i10.i, i32 2
  %77 = load i32, i32* %stride2.i11.i, align 4, !tbaa !185
  %cmp3.i12.i = icmp slt i32 %77, 0
  br i1 %cmp3.i12.i, label %if.then.i20.i, label %if.end.i24.i

if.then.i20.i:                                    ; preds = %for.body.i13.i
  %conv.i14.i = sext i32 %77 to i64
  %extent.i15.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %indvars.iv.i10.i, i32 1
  %78 = load i32, i32* %extent.i15.i, align 4, !tbaa !189
  %sub.i16.i = add nsw i32 %78, -1
  %conv7.i17.i = sext i32 %sub.i16.i to i64
  %mul.i18.i = mul nsw i64 %conv7.i17.i, %conv.i14.i
  %add.i19.i = add nsw i64 %mul.i18.i, %index.018.i.i
  br label %if.end.i24.i

if.end.i24.i:                                     ; preds = %if.then.i20.i, %for.body.i13.i
  %index.1.i21.i = phi i64 [ %add.i19.i, %if.then.i20.i ], [ %index.018.i.i, %for.body.i13.i ]
  %indvars.iv.next.i22.i = add nuw nsw i64 %indvars.iv.i10.i, 1
  %exitcond.not.i23.i = icmp eq i64 %indvars.iv.next.i22.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i23.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i, !llvm.loop !294

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %if.end.i24.i, %middle.block
  %index.1.i21.i.lcssa = phi i64 [ %bin.rdx, %middle.block ], [ %index.1.i21.i, %if.end.i24.i ]
  %add8.i.i = add nsw i64 %index.1.i.i.lcssa, 1
  %sub.i.1 = sub nsw i64 %add8.i.i, %index.1.i21.i.lcssa
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %for.body64._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit
  %add8.i27.i = phi i64 [ 1, %for.body64._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge ], [ %add8.i.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %sub.i.phi = phi i64 [ %sub.i.0, %for.body64._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge ], [ %sub.i.1, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %bits.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %26, i64 0, i32 4, i32 1
  %79 = load i8, i8* %bits.i.i, align 1, !tbaa !144
  %conv.i.i = zext i8 %79 to i64
  %add.i4.i = add nuw nsw i64 %conv.i.i, 7
  %div.i.i = lshr i64 %add.i4.i, 3
  %mul.i = mul i64 %div.i.i, %sub.i.phi
  %add = add i64 %mul.i, %added_size.0219
  %indvars.iv.next239 = add nuw nsw i64 %indvars.iv238, 1
  %exitcond241.not = icmp eq i64 %indvars.iv.next239, %wide.trip.count240
  br i1 %exitcond241.not, label %for.cond.cleanup63, label %for.body64, !llvm.loop !295

if.then76:                                        ; preds = %for.cond.cleanup63
  %80 = bitcast i8* %call74 to %"struct.Halide::Runtime::Internal::CacheEntry"*
  %conv77 = sext i32 %size to i64
  %call79 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal10CacheEntry4initEPKhmjPK15halide_buffer_tiPPS5_by(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %80, i8* %cache_key, i64 %conv77, i32 %2, %struct.halide_buffer_t* %computed_bounds, i32 %tuple_count, %struct.halide_buffer_t** nonnull %tuple_buffers, i1 zeroext %has_eviction_key, i64 %eviction_key) #16
  br i1 %call79, label %if.end101, label %if.then83

if.then83:                                        ; preds = %if.then76, %for.cond.cleanup63
  %81 = load i64, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !22
  %sub = sub i64 %81, %added_size.0.lcssa
  store i64 %sub, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !22
  br i1 %cmp62218, label %for.body88.preheader, label %for.cond.cleanup87

for.body88.preheader:                             ; preds = %if.then83
  %wide.trip.count = zext i32 %tuple_count to i64
  %indvars.iv.next.0 = add nuw nsw i64 0, 1
  %arrayidx90.0 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 0
  br label %for.body88

for.cond.cleanup87:                               ; preds = %for.body88, %if.then83
  br i1 %tobool75.not, label %cleanup132, label %if.then99

for.body88:                                       ; preds = %for.body88.for.body88_crit_edge, %for.body88.preheader
  %arrayidx90.phi = phi %struct.halide_buffer_t** [ %arrayidx90.0, %for.body88.preheader ], [ %arrayidx90.1, %for.body88.for.body88_crit_edge ]
  %indvars.iv.next.phi = phi i64 [ %indvars.iv.next.0, %for.body88.preheader ], [ %indvars.iv.next.1, %for.body88.for.body88_crit_edge ]
  %82 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx90.phi, align 8, !tbaa !14
  %host91 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %82, i64 0, i32 2
  %83 = load i8*, i8** %host91, align 8, !tbaa !180
  %call92 = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %83) #16
  %entry93 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call92, i64 0, i32 0
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %entry93, align 8, !tbaa !286
  %exitcond.not = icmp eq i64 %indvars.iv.next.phi, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.cleanup87, label %for.body88.for.body88_crit_edge, !llvm.loop !296

for.body88.for.body88_crit_edge:                  ; preds = %for.body88
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv.next.phi, 1
  %arrayidx90.1 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv.next.phi
  br label %for.body88

if.then99:                                        ; preds = %for.cond.cleanup87
  tail call void @halide_free(i8* %user_context, i8* nonnull %call74) #15
  br label %cleanup132

if.end101:                                        ; preds = %if.then76
  %84 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx7, align 8, !tbaa !14
  %next104 = bitcast i8* %call74 to %"struct.Halide::Runtime::Internal::CacheEntry"**
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %84, %"struct.Halide::Runtime::Internal::CacheEntry"** %next104, align 8, !tbaa !229
  %85 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !14
  %less_recent = getelementptr inbounds i8, i8* %call74, i64 16
  %86 = bitcast i8* %less_recent to %"struct.Halide::Runtime::Internal::CacheEntry"**
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %85, %"struct.Halide::Runtime::Internal::CacheEntry"** %86, align 8, !tbaa !252
  %cmp105.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %85, null
  br i1 %cmp105.not, label %if.end107, label %if.then106

if.then106:                                       ; preds = %if.end101
  %more_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %85, i64 0, i32 1
  %87 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent to i8**
  store i8* %call74, i8** %87, align 8, !tbaa !268
  br label %if.end107

if.end107:                                        ; preds = %if.then106, %if.end101
  store i8* %call74, i8** bitcast (%"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE to i8**), align 8, !tbaa !14
  %88 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !14
  %cmp108 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %88, null
  br i1 %cmp108, label %if.then109, label %if.end110

if.then109:                                       ; preds = %if.end107
  store i8* %call74, i8** bitcast (%"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE to i8**), align 8, !tbaa !14
  br label %if.end110

if.end110:                                        ; preds = %if.then109, %if.end107
  %89 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx7 to i8**
  store i8* %call74, i8** %89, align 8, !tbaa !14
  %in_use_count = getelementptr inbounds i8, i8* %call74, i64 52
  %90 = bitcast i8* %in_use_count to i32*
  store i32 %tuple_count, i32* %90, align 4, !tbaa !255
  br i1 %cmp62218, label %for.body117.preheader, label %cleanup132

for.body117.preheader:                            ; preds = %if.end110
  %wide.trip.count236 = zext i32 %tuple_count to i64
  %indvars.iv.next235.0 = add nuw nsw i64 0, 1
  %arrayidx119.0 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 0
  br label %for.body117

for.body117:                                      ; preds = %for.body117.for.body117_crit_edge, %for.body117.preheader
  %arrayidx119.phi = phi %struct.halide_buffer_t** [ %arrayidx119.0, %for.body117.preheader ], [ %arrayidx119.1, %for.body117.for.body117_crit_edge ]
  %indvars.iv.next235.phi = phi i64 [ %indvars.iv.next235.0, %for.body117.preheader ], [ %indvars.iv.next235.1, %for.body117.for.body117_crit_edge ]
  %91 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx119.phi, align 8, !tbaa !14
  %host120 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %91, i64 0, i32 2
  %92 = load i8*, i8** %host120, align 8, !tbaa !180
  %call121 = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %92) #16
  %93 = bitcast %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call121 to i8**
  store i8* %call74, i8** %93, align 8, !tbaa !286
  %exitcond237.not = icmp eq i64 %indvars.iv.next235.phi, %wide.trip.count236
  br i1 %exitcond237.not, label %cleanup132, label %for.body117.for.body117_crit_edge, !llvm.loop !297

for.body117.for.body117_crit_edge:                ; preds = %for.body117
  %indvars.iv.next235.1 = add nuw nsw i64 %indvars.iv.next235.phi, 1
  %arrayidx119.1 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv.next235.phi
  br label %for.body117

cleanup132:                                       ; preds = %land.lhs.true18, %for.body48.us, %for.body117, %if.end110, %if.then99, %for.cond.cleanup87
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #15
  ret i32 0
}

; Function Attrs: nounwind
define weak void @halide_memoization_cache_release(i8* %user_context, i8* %host) local_unnamed_addr #4 {
entry:
  %call = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %host) #16
  %entry2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call, i64 0, i32 0
  %0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %entry2, align 8, !tbaa !286
  %cmp = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %0, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = bitcast %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call to i8*
  tail call void @halide_free(i8* %user_context, i8* %1) #15
  br label %if.end6

if.else:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #15
  %in_use_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %0, i64 0, i32 7
  %2 = load i32, i32* %in_use_count, align 4, !tbaa !255
  %cmp3.not = icmp eq i32 %2, 0
  br i1 %cmp3.not, label %if.then4, label %do.end

if.then4:                                         ; preds = %if.else
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([123 x i8], [123 x i8]* @.str.12.47, i64 0, i64 0)) #15
  tail call void @abort() #15
  %.pre = load i32, i32* %in_use_count, align 4, !tbaa !255
  br label %do.end

do.end:                                           ; preds = %if.then4, %if.else
  %3 = phi i32 [ %.pre, %if.then4 ], [ %2, %if.else ]
  %dec = add i32 %3, -1
  store i32 %dec, i32* %in_use_count, align 4, !tbaa !255
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #15
  br label %if.end6

if.end6:                                          ; preds = %do.end, %if.then
  ret void
}

; Function Attrs: nounwind
define weak void @halide_memoization_cache_evict(i8* %user_context, i64 %eviction_key) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #15
  br label %for.body

for.cond.cleanup:                                 ; preds = %if.end25
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #15
  ret void

for.body:                                         ; preds = %if.end25, %entry
  %__begin1.059 = phi %"struct.Halide::Runtime::Internal::CacheEntry"** [ getelementptr inbounds ([256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 0, i64 0), %entry ], [ %incdec.ptr, %if.end25 ]
  %0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %__begin1.059, align 8, !tbaa !14
  %cmp2.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %0, null
  br i1 %cmp2.not, label %if.end25, label %while.body

while.body:                                       ; preds = %for.body, %if.end24
  %prev.058 = phi %"struct.Halide::Runtime::Internal::CacheEntry"** [ %prev.1, %if.end24 ], [ %__begin1.059, %for.body ]
  %entry1.056 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %1, %if.end24 ], [ %0, %for.body ]
  %next4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056, i64 0, i32 0
  %1 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next4, align 8, !tbaa !229
  %has_eviction_key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056, i64 0, i32 13
  %2 = load i8, i8* %has_eviction_key, align 8, !tbaa !262, !range !21
  %tobool.not = icmp eq i8 %2, 0
  br i1 %tobool.not, label %if.end24, label %land.lhs.true

land.lhs.true:                                    ; preds = %while.body
  %eviction_key5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056, i64 0, i32 12
  %3 = load i64, i64* %eviction_key5, align 8, !tbaa !263
  %cmp6 = icmp eq i64 %3, %eviction_key
  br i1 %cmp6, label %if.then7, label %if.end24

if.then7:                                         ; preds = %land.lhs.true
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %1, %"struct.Halide::Runtime::Internal::CacheEntry"** %prev.058, align 8, !tbaa !14
  %more_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056, i64 0, i32 1
  %4 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !268
  %cmp8.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %4, null
  %less_recent12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056, i64 0, i32 2
  %5 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent12, align 8, !tbaa !252
  br i1 %cmp8.not, label %if.else, label %if.then9

if.then9:                                         ; preds = %if.then7
  %less_recent11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %4, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %5, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent11, align 8, !tbaa !252
  %.pre = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent12, align 8, !tbaa !252
  br label %if.end

if.else:                                          ; preds = %if.then7
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %5, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !14
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then9
  %6 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %5, %if.else ], [ %.pre, %if.then9 ]
  %cmp14.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %6, null
  %more_recent18 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %6, i64 0, i32 1
  %_ZN6Halide7Runtime8Internal19least_recently_usedE.sink = select i1 %cmp14.not, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent18
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %4, %"struct.Halide::Runtime::Internal::CacheEntry"** %_ZN6Halide7Runtime8Internal19least_recently_usedE.sink, align 8, !tbaa !14
  tail call void @_ZN6Halide7Runtime8Internal10CacheEntry7destroyEv(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %entry1.056) #16
  %7 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056 to i8*
  tail call void @halide_free(i8* %user_context, i8* nonnull %7) #15
  br label %if.end24

if.end24:                                         ; preds = %if.end, %land.lhs.true, %while.body
  %prev.1 = phi %"struct.Halide::Runtime::Internal::CacheEntry"** [ %prev.058, %if.end ], [ %next4, %land.lhs.true ], [ %next4, %while.body ]
  %cmp3.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %1, null
  br i1 %cmp3.not, label %if.end25, label %while.body, !llvm.loop !298

if.end25:                                         ; preds = %if.end24, %for.body
  %incdec.ptr = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %__begin1.059, i64 1
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"** %incdec.ptr, getelementptr inbounds ([256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 1, i64 0)
  br i1 %cmp.not, label %for.cond.cleanup, label %for.body
}

; Function Attrs: nounwind
define weak i8* @halide_string_to_string(i8* %dst, i8* %end, i8* %arg) local_unnamed_addr #4 {
entry:
  %cmp.not = icmp ult i8* %dst, %end
  br i1 %cmp.not, label %if.end, label %return

if.end:                                           ; preds = %entry
  %tobool.not = icmp eq i8* %arg, null
  %spec.select = select i1 %tobool.not, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.50, i64 0, i64 0), i8* %arg
  br label %if.end5

if.then4:                                         ; preds = %if.end8
  store i8 0, i8* %dst.addr.023, align 1, !tbaa !18
  br label %return

if.end5:                                          ; preds = %if.end8, %if.end
  %arg.addr.124 = phi i8* [ %spec.select, %if.end ], [ %incdec.ptr9, %if.end8 ]
  %dst.addr.023 = phi i8* [ %dst, %if.end ], [ %incdec.ptr, %if.end8 ]
  %0 = load i8, i8* %arg.addr.124, align 1, !tbaa !18
  store i8 %0, i8* %dst.addr.023, align 1, !tbaa !18
  %cmp6 = icmp eq i8 %0, 0
  br i1 %cmp6, label %return, label %if.end8

if.end8:                                          ; preds = %if.end5
  %incdec.ptr = getelementptr inbounds i8, i8* %dst.addr.023, i64 1
  %incdec.ptr9 = getelementptr inbounds i8, i8* %arg.addr.124, i64 1
  %cmp3 = icmp eq i8* %incdec.ptr, %end
  br i1 %cmp3, label %if.then4, label %if.end5

return:                                           ; preds = %if.end5, %if.then4, %entry
  %retval.0 = phi i8* [ %end, %if.then4 ], [ %dst, %entry ], [ %dst.addr.023, %if.end5 ]
  ret i8* %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_uint64_to_string(i8* %dst, i8* %end, i64 %arg, i32 %min_digits) local_unnamed_addr #0 {
entry:
  %buf = alloca [32 x i8], align 1
  %0 = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %0) #12
  %arrayidx = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i64 0, i64 31
  store i8 0, i8* %arrayidx, align 1, !tbaa !18
  %add.ptr = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i64 0, i64 30
  %cmp13 = icmp sgt i32 %min_digits, 0
  %tobool14 = icmp ne i64 %arg, 0
  %1 = or i1 %tobool14, %cmp13
  br i1 %1, label %entry.for.body_crit_edge, label %for.cond.cleanup

entry.for.body_crit_edge:                         ; preds = %entry
  %inc.1 = add nuw nsw i32 0, 1
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %entry
  %digits.0.lcssa = phi i8* [ %add.ptr, %entry ], [ %incdec.ptr, %for.body ]
  %incdec.ptr1 = getelementptr inbounds i8, i8* %digits.0.lcssa, i64 1
  %call = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* nonnull %incdec.ptr1) #16
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %0) #12
  ret i8* %call

for.body:                                         ; preds = %entry.for.body_crit_edge, %for.body.for.body_crit_edge
  %arg.addr.017 = phi i64 [ %div, %for.body.for.body_crit_edge ], [ %arg, %entry.for.body_crit_edge ]
  %digits.016 = phi i8* [ %incdec.ptr, %for.body.for.body_crit_edge ], [ %add.ptr, %entry.for.body_crit_edge ]
  %inc.phi = phi i32 [ %inc.0, %for.body.for.body_crit_edge ], [ %inc.1, %entry.for.body_crit_edge ]
  %div = udiv i64 %arg.addr.017, 10
  %mul.neg = mul i64 %div, -10
  %sub = add i64 %mul.neg, %arg.addr.017
  %2 = trunc i64 %sub to i8
  %conv = add i8 %2, 48
  store i8 %conv, i8* %digits.016, align 1, !tbaa !18
  %incdec.ptr = getelementptr inbounds i8, i8* %digits.016, i64 -1
  %cmp = icmp slt i32 %inc.phi, %min_digits
  %3 = icmp ugt i64 %arg.addr.017, 9
  %4 = or i1 %3, %cmp
  br i1 %4, label %for.body.for.body_crit_edge, label %for.cond.cleanup, !llvm.loop !299

for.body.for.body_crit_edge:                      ; preds = %for.body
  %inc.0 = add nuw nsw i32 %inc.phi, 1
  br label %for.body
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_int64_to_string(i8* %dst, i8* %end, i64 %arg, i32 %min_digits) local_unnamed_addr #0 {
entry:
  %cmp = icmp slt i64 %arg, 0
  %cmp1 = icmp ult i8* %dst, %end
  %or.cond = and i1 %cmp1, %cmp
  br i1 %or.cond, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %incdec.ptr = getelementptr inbounds i8, i8* %dst, i64 1
  store i8 45, i8* %dst, align 1, !tbaa !18
  %sub = sub nsw i64 0, %arg
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %arg.addr.0 = phi i64 [ %sub, %if.then ], [ %arg, %entry ]
  %dst.addr.0 = phi i8* [ %incdec.ptr, %if.then ], [ %dst, %entry ]
  %call = tail call i8* @halide_uint64_to_string(i8* %dst.addr.0, i8* %end, i64 %arg.addr.0, i32 %min_digits) #16
  ret i8* %call
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_double_to_string(i8* %dst, i8* %end, double %arg, i32 %scientific) local_unnamed_addr #0 {
entry:
  %arg.addr = alloca double, align 8
  %bits = alloca i64, align 8
  %buf = alloca [512 x i8], align 1
  store double %arg, double* %arg.addr, align 8, !tbaa !172
  %0 = bitcast i64* %bits to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #12
  store i64 0, i64* %bits, align 8, !tbaa !22
  %1 = bitcast double* %arg.addr to i8*
  %call = call i8* @memcpy(i8* nonnull %0, i8* nonnull %1, i64 8) #15
  %2 = load i64, i64* %bits, align 8, !tbaa !22
  %and = and i64 %2, 4503599627370495
  %shr = lshr i64 %2, 52
  %3 = trunc i64 %shr to i32
  %conv = and i32 %3, 2047
  %cmp = icmp eq i32 %conv, 2047
  br i1 %cmp, label %if.then, label %if.else15

if.then:                                          ; preds = %entry
  %tobool.not = icmp eq i64 %and, 0
  %tobool10.not = icmp sgt i64 %2, -1
  br i1 %tobool.not, label %if.else9, label %if.then4

if.then4:                                         ; preds = %if.then
  br i1 %tobool10.not, label %if.else, label %if.then6

if.then6:                                         ; preds = %if.then4
  %call7 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1.57, i64 0, i64 0)) #16
  br label %cleanup147

if.else:                                          ; preds = %if.then4
  %call8 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.58, i64 0, i64 0)) #16
  br label %cleanup147

if.else9:                                         ; preds = %if.then
  br i1 %tobool10.not, label %if.else13, label %if.then11

if.then11:                                        ; preds = %if.else9
  %call12 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3.59, i64 0, i64 0)) #16
  br label %cleanup147

if.else13:                                        ; preds = %if.else9
  %call14 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4.60, i64 0, i64 0)) #16
  br label %cleanup147

if.else15:                                        ; preds = %entry
  %cmp16 = icmp eq i32 %conv, 0
  %cmp17 = icmp eq i64 %and, 0
  %or.cond = and i1 %cmp17, %cmp16
  br i1 %or.cond, label %if.then18, label %if.end32

if.then18:                                        ; preds = %if.else15
  %tobool19.not = icmp eq i32 %scientific, 0
  %tobool27.not = icmp sgt i64 %2, -1
  br i1 %tobool19.not, label %if.else26, label %if.then20

if.then20:                                        ; preds = %if.then18
  br i1 %tobool27.not, label %if.else24, label %if.then22

if.then22:                                        ; preds = %if.then20
  %call23 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.5.61, i64 0, i64 0)) #16
  br label %cleanup147

if.else24:                                        ; preds = %if.then20
  %call25 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.6.62, i64 0, i64 0)) #16
  br label %cleanup147

if.else26:                                        ; preds = %if.then18
  br i1 %tobool27.not, label %if.else30, label %if.then28

if.then28:                                        ; preds = %if.else26
  %call29 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.7.63, i64 0, i64 0)) #16
  br label %cleanup147

if.else30:                                        ; preds = %if.else26
  %call31 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.8.64, i64 0, i64 0)) #16
  br label %cleanup147

if.end32:                                         ; preds = %if.else15
  %tobool33.not = icmp sgt i64 %2, -1
  br i1 %tobool33.not, label %if.end36, label %if.then34

if.then34:                                        ; preds = %if.end32
  %call35 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9.65, i64 0, i64 0)) #16
  %4 = load double, double* %arg.addr, align 8, !tbaa !172
  %fneg = fneg double %4
  store double %fneg, double* %arg.addr, align 8, !tbaa !172
  br label %if.end36

if.end36:                                         ; preds = %if.then34, %if.end32
  %dst.addr.0 = phi i8* [ %call35, %if.then34 ], [ %dst, %if.end32 ]
  %tobool37.not = icmp eq i32 %scientific, 0
  br i1 %tobool37.not, label %if.else61, label %while.condthread-pre-split

while.condthread-pre-split:                       ; preds = %if.end36
  %.pr = load double, double* %arg.addr, align 8, !tbaa !172
  %cmp39276 = fcmp olt double %.pr, 1.000000e+00
  br i1 %cmp39276, label %while.condthread-pre-split.while.body_crit_edge, label %while.cond40thread-pre-split

while.condthread-pre-split.while.body_crit_edge:  ; preds = %while.condthread-pre-split
  %dec.1 = add nsw i32 0, -1
  br label %while.body

while.body:                                       ; preds = %while.condthread-pre-split.while.body_crit_edge, %while.body.while.body_crit_edge
  %dec.phi = phi i32 [ %dec.0, %while.body.while.body_crit_edge ], [ %dec.1, %while.condthread-pre-split.while.body_crit_edge ]
  %5 = phi double [ %mul, %while.body.while.body_crit_edge ], [ %.pr, %while.condthread-pre-split.while.body_crit_edge ]
  %mul = fmul double %5, 1.000000e+01
  %cmp39 = fcmp olt double %mul, 1.000000e+00
  br i1 %cmp39, label %while.body.while.body_crit_edge, label %while.cond.while.cond40thread-pre-split_crit_edge, !llvm.loop !300

while.body.while.body_crit_edge:                  ; preds = %while.body
  %dec.0 = add nsw i32 %dec.phi, -1
  br label %while.body

while.cond.while.cond40thread-pre-split_crit_edge: ; preds = %while.body
  store double %mul, double* %arg.addr, align 8, !tbaa !172
  br label %while.cond40thread-pre-split

while.cond40thread-pre-split:                     ; preds = %while.cond.while.cond40thread-pre-split_crit_edge, %while.condthread-pre-split
  %.pr261 = phi double [ %mul, %while.cond.while.cond40thread-pre-split_crit_edge ], [ %.pr, %while.condthread-pre-split ]
  %exponent_base_10.0.lcssa = phi i32 [ %dec.phi, %while.cond.while.cond40thread-pre-split_crit_edge ], [ 0, %while.condthread-pre-split ]
  %cmp41272 = fcmp ult double %.pr261, 1.000000e+01
  br i1 %cmp41272, label %while.end43, label %while.body42

while.body42:                                     ; preds = %while.cond40thread-pre-split, %while.body42
  %exponent_base_10.1273 = phi i32 [ %inc, %while.body42 ], [ %exponent_base_10.0.lcssa, %while.cond40thread-pre-split ]
  %6 = phi double [ %div, %while.body42 ], [ %.pr261, %while.cond40thread-pre-split ]
  %div = fdiv double %6, 1.000000e+01
  %inc = add nsw i32 %exponent_base_10.1273, 1
  %cmp41 = fcmp ult double %div, 1.000000e+01
  br i1 %cmp41, label %while.cond40.while.end43_crit_edge, label %while.body42, !llvm.loop !301

while.cond40.while.end43_crit_edge:               ; preds = %while.body42
  store double %div, double* %arg.addr, align 8, !tbaa !172
  br label %while.end43

while.end43:                                      ; preds = %while.cond40.while.end43_crit_edge, %while.cond40thread-pre-split
  %.lcssa = phi double [ %div, %while.cond40.while.end43_crit_edge ], [ %.pr261, %while.cond40thread-pre-split ]
  %exponent_base_10.1.lcssa = phi i32 [ %inc, %while.cond40.while.end43_crit_edge ], [ %exponent_base_10.0.lcssa, %while.cond40thread-pre-split ]
  %mul44 = fmul double %.lcssa, 1.000000e+06
  %add = fadd double %mul44, 5.000000e-01
  %conv45 = fptoui double %add to i64
  %div46 = udiv i64 %conv45, 1000000
  %mul47.neg = mul i64 %div46, -1000000
  %sub48 = add i64 %mul47.neg, %conv45
  %call49 = call i8* @halide_int64_to_string(i8* %dst.addr.0, i8* %end, i64 %div46, i32 1) #16
  %call50 = call i8* @halide_string_to_string(i8* %call49, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #16
  %call51 = call i8* @halide_int64_to_string(i8* %call50, i8* %end, i64 %sub48, i32 6) #16
  %cmp52 = icmp sgt i32 %exponent_base_10.1.lcssa, -1
  br i1 %cmp52, label %if.then53, label %if.else55

if.then53:                                        ; preds = %while.end43
  %call54 = call i8* @halide_string_to_string(i8* %call51, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11.67, i64 0, i64 0)) #16
  br label %if.end58

if.else55:                                        ; preds = %while.end43
  %call56 = call i8* @halide_string_to_string(i8* %call51, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12.68, i64 0, i64 0)) #16
  %sub57 = sub nsw i32 0, %exponent_base_10.1.lcssa
  br label %if.end58

if.end58:                                         ; preds = %if.else55, %if.then53
  %exponent_base_10.2 = phi i32 [ %exponent_base_10.1.lcssa, %if.then53 ], [ %sub57, %if.else55 ]
  %dst.addr.1 = phi i8* [ %call54, %if.then53 ], [ %call56, %if.else55 ]
  %conv59262 = zext i32 %exponent_base_10.2 to i64
  %call60 = call i8* @halide_int64_to_string(i8* %dst.addr.1, i8* %end, i64 %conv59262, i32 2) #16
  br label %cleanup147

if.else61:                                        ; preds = %if.end36
  br i1 %cmp16, label %if.then63, label %if.end65

if.then63:                                        ; preds = %if.else61
  %call64 = call i8* @halide_double_to_string(i8* %dst.addr.0, i8* %end, double 0.000000e+00, i32 0) #16
  br label %cleanup147

if.end65:                                         ; preds = %if.else61
  %add67 = or i64 %and, 4503599627370496
  %sub69 = add nsw i32 %conv, -1075
  %cmp70 = icmp ult i32 %conv, 1075
  br i1 %cmp70, label %if.then71, label %if.end104

if.then71:                                        ; preds = %if.end65
  %cmp72 = icmp ult i32 %conv, 1023
  %sub76 = sub nuw nsw i32 1075, %conv
  %sh_prom = zext i32 %sub76 to i64
  %shr77 = lshr i64 %add67, %sh_prom
  %shl80 = shl i64 %shr77, %sh_prom
  %integer_part.0 = select i1 %cmp72, i64 0, i64 %shr77
  %sub81 = select i1 %cmp72, i64 0, i64 %shl80
  %f.0.in = sub i64 %add67, %sub81
  %f.0 = uitofp i64 %f.0.in to double
  %conv84258 = zext i32 %sub69 to i64
  %shl85 = shl i64 %conv84258, 52
  %add87 = add i64 %shl85, 4696837146684686336
  %7 = bitcast i64 %add87 to double
  %mul89 = fmul double %7, %f.0
  %add90 = fadd double %mul89, 5.000000e-01
  %conv91 = fptoui double %add90 to i64
  %conv92 = uitofp i64 %conv91 to double
  %cmp93 = fcmp oeq double %add90, %conv92
  %and95 = and i64 %conv91, 1
  %tobool96.not = icmp ne i64 %and95, 0
  %not.or.cond259 = and i1 %cmp93, %tobool96.not
  %dec98 = sext i1 %not.or.cond259 to i64
  %fractional_part.0 = add i64 %dec98, %conv91
  %cmp100 = icmp eq i64 %fractional_part.0, 1000000
  %inc102 = zext i1 %cmp100 to i64
  %spec.select = add nuw i64 %integer_part.0, %inc102
  %spec.select260 = select i1 %cmp100, i64 0, i64 %fractional_part.0
  br label %if.end104

if.end104:                                        ; preds = %if.then71, %if.end65
  %integer_part.2 = phi i64 [ %spec.select, %if.then71 ], [ %add67, %if.end65 ]
  %integer_exponent.0 = phi i32 [ 0, %if.then71 ], [ %sub69, %if.end65 ]
  %fractional_part.2 = phi i64 [ %spec.select260, %if.then71 ], [ 0, %if.end65 ]
  %8 = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %8) #12
  %add.ptr = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i64 0, i64 512
  %add.ptr105 = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i64 0, i64 480
  %call108 = call i8* @halide_int64_to_string(i8* nonnull %add.ptr105, i8* nonnull %add.ptr, i64 %integer_part.2, i32 1) #16
  %cmp109267 = icmp sgt i32 %integer_exponent.0, 0
  br i1 %cmp109267, label %for.cond111.preheader, label %for.cond.cleanup

for.cond111.preheader:                            ; preds = %if.end104, %if.end137
  %i.0270 = phi i32 [ %inc139, %if.end137 ], [ 0, %if.end104 ]
  %int_part_ptr.0268 = phi i8* [ %int_part_ptr.1, %if.end137 ], [ %add.ptr105, %if.end104 ]
  %cmp113.not264 = icmp eq i8* %call108, %int_part_ptr.0268
  br i1 %cmp113.not264, label %if.end137, label %for.body115

for.cond.cleanup:                                 ; preds = %if.end137, %if.end104
  %int_part_ptr.0.lcssa = phi i8* [ %add.ptr105, %if.end104 ], [ %int_part_ptr.1, %if.end137 ]
  %call141 = call i8* @halide_string_to_string(i8* %dst.addr.0, i8* %end, i8* %int_part_ptr.0.lcssa) #16
  %call142 = call i8* @halide_string_to_string(i8* %call141, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #16
  %call143 = call i8* @halide_int64_to_string(i8* %call142, i8* %end, i64 %fractional_part.2, i32 6) #16
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %8) #12
  br label %cleanup147

for.cond.cleanup114:                              ; preds = %for.body115
  br i1 %cmp124, label %if.then135, label %if.end137

for.body115:                                      ; preds = %for.cond111.preheader, %for.body115
  %p.0266.pn = phi i8* [ %p.0266, %for.body115 ], [ %call108, %for.cond111.preheader ]
  %carry.0265 = phi i32 [ %carry.1, %for.body115 ], [ 0, %for.cond111.preheader ]
  %p.0266 = getelementptr inbounds i8, i8* %p.0266.pn, i64 -1
  %9 = load i8, i8* %p.0266, align 1, !tbaa !18
  %sub117 = add i8 %9, -48
  %conv119 = sext i8 %sub117 to i32
  %mul120 = shl nsw i32 %conv119, 1
  %add121 = or i32 %mul120, %carry.0265
  %10 = trunc i32 %add121 to i8
  %cmp124 = icmp sgt i8 %10, 9
  %sub127 = add nsw i32 %add121, 246
  %carry.1 = zext i1 %cmp124 to i32
  %new_digit.0.in = select i1 %cmp124, i32 %sub127, i32 %add121
  %11 = trunc i32 %new_digit.0.in to i8
  %conv133 = add i8 %11, 48
  store i8 %conv133, i8* %p.0266, align 1, !tbaa !18
  %cmp113.not = icmp eq i8* %p.0266, %int_part_ptr.0268
  br i1 %cmp113.not, label %for.cond.cleanup114, label %for.body115, !llvm.loop !302

if.then135:                                       ; preds = %for.cond.cleanup114
  %incdec.ptr136 = getelementptr inbounds i8, i8* %int_part_ptr.0268, i64 -1
  store i8 49, i8* %incdec.ptr136, align 1, !tbaa !18
  br label %if.end137

if.end137:                                        ; preds = %if.then135, %for.cond.cleanup114, %for.cond111.preheader
  %int_part_ptr.1 = phi i8* [ %incdec.ptr136, %if.then135 ], [ %int_part_ptr.0268, %for.cond.cleanup114 ], [ %call108, %for.cond111.preheader ]
  %inc139 = add nuw nsw i32 %i.0270, 1
  %exitcond.not = icmp eq i32 %inc139, %integer_exponent.0
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond111.preheader, !llvm.loop !303

cleanup147:                                       ; preds = %for.cond.cleanup, %if.then63, %if.end58, %if.else30, %if.then28, %if.else24, %if.then22, %if.else13, %if.then11, %if.else, %if.then6
  %retval.1 = phi i8* [ %call7, %if.then6 ], [ %call8, %if.else ], [ %call12, %if.then11 ], [ %call14, %if.else13 ], [ %call23, %if.then22 ], [ %call25, %if.else24 ], [ %call29, %if.then28 ], [ %call31, %if.else30 ], [ %call64, %if.then63 ], [ %call60, %if.end58 ], [ %call143, %for.cond.cleanup ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #12
  ret i8* %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_pointer_to_string(i8* %dst, i8* %end, i8* %arg) local_unnamed_addr #0 {
entry:
  %buf = alloca [20 x i8], align 1
  %0 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %0) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(20) %0, i8 0, i64 20, i1 false)
  %add.ptr = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 18
  %1 = ptrtoint i8* %arg to i64
  %and = and i64 %1, 15
  %arrayidx = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and
  %2 = load i8, i8* %arrayidx, align 1, !tbaa !18
  %incdec.ptr = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 17
  store i8 %2, i8* %add.ptr, align 1, !tbaa !18
  %shr = lshr i64 %1, 4
  %tobool.not = icmp eq i64 %shr, 0
  br i1 %tobool.not, label %cleanup, label %for.cond

for.cond:                                         ; preds = %entry
  %and.1 = and i64 %shr, 15
  %arrayidx.1 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.1
  %3 = load i8, i8* %arrayidx.1, align 1, !tbaa !18
  %incdec.ptr.1 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 16
  store i8 %3, i8* %incdec.ptr, align 1, !tbaa !18
  %shr.1 = lshr i64 %1, 8
  %tobool.not.1 = icmp eq i64 %shr.1, 0
  br i1 %tobool.not.1, label %cleanup, label %for.cond.1

cleanup:                                          ; preds = %for.cond.14, %for.cond.13, %for.cond.12, %for.cond.11, %for.cond.10, %for.cond.9, %for.cond.8, %for.cond.7, %for.cond.6, %for.cond.5, %for.cond.4, %for.cond.3, %for.cond.2, %for.cond.1, %for.cond, %entry
  %buf_ptr.016.lcssa = phi i8* [ %add.ptr, %entry ], [ %incdec.ptr, %for.cond ], [ %incdec.ptr.1, %for.cond.1 ], [ %incdec.ptr.2, %for.cond.2 ], [ %incdec.ptr.3, %for.cond.3 ], [ %incdec.ptr.4, %for.cond.4 ], [ %incdec.ptr.5, %for.cond.5 ], [ %incdec.ptr.6, %for.cond.6 ], [ %incdec.ptr.7, %for.cond.7 ], [ %incdec.ptr.8, %for.cond.8 ], [ %incdec.ptr.9, %for.cond.9 ], [ %incdec.ptr.10, %for.cond.10 ], [ %incdec.ptr.11, %for.cond.11 ], [ %incdec.ptr.12, %for.cond.12 ], [ %incdec.ptr.13, %for.cond.13 ], [ %incdec.ptr.14, %for.cond.14 ]
  %incdec.ptr.lcssa = phi i8* [ %incdec.ptr, %entry ], [ %incdec.ptr.1, %for.cond ], [ %incdec.ptr.2, %for.cond.1 ], [ %incdec.ptr.3, %for.cond.2 ], [ %incdec.ptr.4, %for.cond.3 ], [ %incdec.ptr.5, %for.cond.4 ], [ %incdec.ptr.6, %for.cond.5 ], [ %incdec.ptr.7, %for.cond.6 ], [ %incdec.ptr.8, %for.cond.7 ], [ %incdec.ptr.9, %for.cond.8 ], [ %incdec.ptr.10, %for.cond.9 ], [ %incdec.ptr.11, %for.cond.10 ], [ %incdec.ptr.12, %for.cond.11 ], [ %incdec.ptr.13, %for.cond.12 ], [ %incdec.ptr.14, %for.cond.13 ], [ %incdec.ptr.15, %for.cond.14 ]
  %incdec.ptr1 = getelementptr inbounds i8, i8* %buf_ptr.016.lcssa, i64 -2
  store i8 120, i8* %incdec.ptr.lcssa, align 1, !tbaa !18
  store i8 48, i8* %incdec.ptr1, align 1, !tbaa !18
  %call = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* nonnull %incdec.ptr1) #16
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %0) #12
  ret i8* %call

for.cond.1:                                       ; preds = %for.cond
  %and.2 = and i64 %shr.1, 15
  %arrayidx.2 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.2
  %4 = load i8, i8* %arrayidx.2, align 1, !tbaa !18
  %incdec.ptr.2 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 15
  store i8 %4, i8* %incdec.ptr.1, align 1, !tbaa !18
  %shr.2 = lshr i64 %1, 12
  %tobool.not.2 = icmp eq i64 %shr.2, 0
  br i1 %tobool.not.2, label %cleanup, label %for.cond.2

for.cond.2:                                       ; preds = %for.cond.1
  %and.3 = and i64 %shr.2, 15
  %arrayidx.3 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.3
  %5 = load i8, i8* %arrayidx.3, align 1, !tbaa !18
  %incdec.ptr.3 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 14
  store i8 %5, i8* %incdec.ptr.2, align 1, !tbaa !18
  %shr.3 = lshr i64 %1, 16
  %tobool.not.3 = icmp eq i64 %shr.3, 0
  br i1 %tobool.not.3, label %cleanup, label %for.cond.3

for.cond.3:                                       ; preds = %for.cond.2
  %and.4 = and i64 %shr.3, 15
  %arrayidx.4 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.4
  %6 = load i8, i8* %arrayidx.4, align 1, !tbaa !18
  %incdec.ptr.4 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 13
  store i8 %6, i8* %incdec.ptr.3, align 1, !tbaa !18
  %shr.4 = lshr i64 %1, 20
  %tobool.not.4 = icmp eq i64 %shr.4, 0
  br i1 %tobool.not.4, label %cleanup, label %for.cond.4

for.cond.4:                                       ; preds = %for.cond.3
  %and.5 = and i64 %shr.4, 15
  %arrayidx.5 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.5
  %7 = load i8, i8* %arrayidx.5, align 1, !tbaa !18
  %incdec.ptr.5 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 12
  store i8 %7, i8* %incdec.ptr.4, align 1, !tbaa !18
  %shr.5 = lshr i64 %1, 24
  %tobool.not.5 = icmp eq i64 %shr.5, 0
  br i1 %tobool.not.5, label %cleanup, label %for.cond.5

for.cond.5:                                       ; preds = %for.cond.4
  %and.6 = and i64 %shr.5, 15
  %arrayidx.6 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.6
  %8 = load i8, i8* %arrayidx.6, align 1, !tbaa !18
  %incdec.ptr.6 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 11
  store i8 %8, i8* %incdec.ptr.5, align 1, !tbaa !18
  %shr.6 = lshr i64 %1, 28
  %tobool.not.6 = icmp eq i64 %shr.6, 0
  br i1 %tobool.not.6, label %cleanup, label %for.cond.6

for.cond.6:                                       ; preds = %for.cond.5
  %and.7 = and i64 %shr.6, 15
  %arrayidx.7 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.7
  %9 = load i8, i8* %arrayidx.7, align 1, !tbaa !18
  %incdec.ptr.7 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 10
  store i8 %9, i8* %incdec.ptr.6, align 1, !tbaa !18
  %shr.7 = lshr i64 %1, 32
  %tobool.not.7 = icmp eq i64 %shr.7, 0
  br i1 %tobool.not.7, label %cleanup, label %for.cond.7

for.cond.7:                                       ; preds = %for.cond.6
  %and.8 = and i64 %shr.7, 15
  %arrayidx.8 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.8
  %10 = load i8, i8* %arrayidx.8, align 1, !tbaa !18
  %incdec.ptr.8 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 9
  store i8 %10, i8* %incdec.ptr.7, align 1, !tbaa !18
  %shr.8 = lshr i64 %1, 36
  %tobool.not.8 = icmp eq i64 %shr.8, 0
  br i1 %tobool.not.8, label %cleanup, label %for.cond.8

for.cond.8:                                       ; preds = %for.cond.7
  %and.9 = and i64 %shr.8, 15
  %arrayidx.9 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.9
  %11 = load i8, i8* %arrayidx.9, align 1, !tbaa !18
  %incdec.ptr.9 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 8
  store i8 %11, i8* %incdec.ptr.8, align 1, !tbaa !18
  %shr.9 = lshr i64 %1, 40
  %tobool.not.9 = icmp eq i64 %shr.9, 0
  br i1 %tobool.not.9, label %cleanup, label %for.cond.9

for.cond.9:                                       ; preds = %for.cond.8
  %and.10 = and i64 %shr.9, 15
  %arrayidx.10 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.10
  %12 = load i8, i8* %arrayidx.10, align 1, !tbaa !18
  %incdec.ptr.10 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 7
  store i8 %12, i8* %incdec.ptr.9, align 1, !tbaa !18
  %shr.10 = lshr i64 %1, 44
  %tobool.not.10 = icmp eq i64 %shr.10, 0
  br i1 %tobool.not.10, label %cleanup, label %for.cond.10

for.cond.10:                                      ; preds = %for.cond.9
  %and.11 = and i64 %shr.10, 15
  %arrayidx.11 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.11
  %13 = load i8, i8* %arrayidx.11, align 1, !tbaa !18
  %incdec.ptr.11 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 6
  store i8 %13, i8* %incdec.ptr.10, align 1, !tbaa !18
  %shr.11 = lshr i64 %1, 48
  %tobool.not.11 = icmp eq i64 %shr.11, 0
  br i1 %tobool.not.11, label %cleanup, label %for.cond.11

for.cond.11:                                      ; preds = %for.cond.10
  %and.12 = and i64 %shr.11, 15
  %arrayidx.12 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.12
  %14 = load i8, i8* %arrayidx.12, align 1, !tbaa !18
  %incdec.ptr.12 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 5
  store i8 %14, i8* %incdec.ptr.11, align 1, !tbaa !18
  %shr.12 = lshr i64 %1, 52
  %tobool.not.12 = icmp eq i64 %shr.12, 0
  br i1 %tobool.not.12, label %cleanup, label %for.cond.12

for.cond.12:                                      ; preds = %for.cond.11
  %and.13 = and i64 %shr.12, 15
  %arrayidx.13 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.13
  %15 = load i8, i8* %arrayidx.13, align 1, !tbaa !18
  %incdec.ptr.13 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 4
  store i8 %15, i8* %incdec.ptr.12, align 1, !tbaa !18
  %shr.13 = lshr i64 %1, 56
  %tobool.not.13 = icmp eq i64 %shr.13, 0
  br i1 %tobool.not.13, label %cleanup, label %for.cond.13

for.cond.13:                                      ; preds = %for.cond.12
  %and.14 = and i64 %shr.13, 15
  %arrayidx.14 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.14
  %16 = load i8, i8* %arrayidx.14, align 1, !tbaa !18
  %incdec.ptr.14 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 3
  store i8 %16, i8* %incdec.ptr.13, align 1, !tbaa !18
  %shr.14 = lshr i64 %1, 60
  %tobool.not.14 = icmp eq i64 %shr.14, 0
  br i1 %tobool.not.14, label %cleanup, label %for.cond.14

for.cond.14:                                      ; preds = %for.cond.13
  %arrayidx.15 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %shr.14
  %17 = load i8, i8* %arrayidx.15, align 1, !tbaa !18
  %incdec.ptr.15 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 2
  store i8 %17, i8* %incdec.ptr.14, align 1, !tbaa !18
  br label %cleanup
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_type_to_string(i8* %dst, i8* %end, %struct.halide_type_t* %t) local_unnamed_addr #0 {
entry:
  %code = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %t, i64 0, i32 0
  %0 = load i8, i8* %code, align 2, !tbaa !304
  %1 = icmp ult i8 %0, 4
  br i1 %1, label %switch.lookup, label %sw.epilog

switch.lookup:                                    ; preds = %entry
  %2 = sext i8 %0 to i64
  %switch.gep = getelementptr inbounds [4 x i8*], [4 x i8*]* @switch.table.halide_type_to_string, i64 0, i64 %2
  %switch.load = load i8*, i8** %switch.gep, align 8
  br label %sw.epilog

sw.epilog:                                        ; preds = %entry, %switch.lookup
  %code_name.0 = phi i8* [ %switch.load, %switch.lookup ], [ getelementptr inbounds ([14 x i8], [14 x i8]* @.str.18.72, i64 0, i64 0), %entry ]
  %call = tail call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* nonnull %code_name.0) #16
  %bits = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %t, i64 0, i32 1
  %3 = load i8, i8* %bits, align 1, !tbaa !144
  %conv4 = zext i8 %3 to i64
  %call5 = tail call i8* @halide_uint64_to_string(i8* %call, i8* %end, i64 %conv4, i32 1) #16
  %lanes = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %t, i64 0, i32 2
  %4 = load i16, i16* %lanes, align 2, !tbaa !305
  %cmp.not = icmp eq i16 %4, 1
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %sw.epilog
  %call7 = tail call i8* @halide_string_to_string(i8* %call5, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.19.77, i64 0, i64 0)) #16
  %5 = load i16, i16* %lanes, align 2, !tbaa !305
  %conv9 = zext i16 %5 to i64
  %call10 = tail call i8* @halide_uint64_to_string(i8* %call7, i8* %end, i64 %conv9, i32 1) #16
  br label %if.end

if.end:                                           ; preds = %if.then, %sw.epilog
  %dst.addr.0 = phi i8* [ %call10, %if.then ], [ %call5, %sw.epilog ]
  ret i8* %dst.addr.0
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_buffer_to_string(i8* %dst, i8* %end, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = tail call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.20.78, i64 0, i64 0)) #16
  br label %return

if.end:                                           ; preds = %entry
  %call1 = tail call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.21.79, i64 0, i64 0)) #16
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !182
  %call2 = tail call i8* @halide_uint64_to_string(i8* %call1, i8* %end, i64 %0, i32 1) #16
  %call3 = tail call i8* @halide_string_to_string(i8* %call2, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #16
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %1 = bitcast %struct.halide_device_interface_t** %device_interface to i8**
  %2 = load i8*, i8** %1, align 8, !tbaa !306
  %call4 = tail call i8* @halide_pointer_to_string(i8* %call3, i8* %end, i8* %2) #16
  %call5 = tail call i8* @halide_string_to_string(i8* %call4, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #16
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 2
  %3 = load i8*, i8** %host, align 8, !tbaa !180
  %call6 = tail call i8* @halide_pointer_to_string(i8* %call5, i8* %end, i8* %3) #16
  %call7 = tail call i8* @halide_string_to_string(i8* %call6, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #16
  %flags = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %4 = load i64, i64* %flags, align 8, !tbaa !307
  %call8 = tail call i8* @halide_uint64_to_string(i8* %call7, i8* %end, i64 %4, i32 1) #16
  %call9 = tail call i8* @halide_string_to_string(i8* %call8, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #16
  %type = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 4
  %call10 = tail call i8* @halide_type_to_string(i8* %call9, i8* %end, %struct.halide_type_t* nonnull %type) #16
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 5
  %5 = load i32, i32* %dimensions, align 4, !tbaa !183
  %cmp1179 = icmp sgt i32 %5, 0
  br i1 %cmp1179, label %for.body.lr.ph, label %for.cond.cleanup

for.body.lr.ph:                                   ; preds = %if.end
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %if.end
  %dst.addr.0.lcssa = phi i8* [ %call10, %if.end ], [ %call26, %for.body ]
  %call27 = tail call i8* @halide_string_to_string(i8* %dst.addr.0.lcssa, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.119, i64 0, i64 0)) #16
  br label %return

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.body ]
  %dst.addr.080 = phi i8* [ %call10, %for.body.lr.ph ], [ %call26, %for.body ]
  %call12 = tail call i8* @halide_string_to_string(i8* %dst.addr.080, i8* %end, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.23.82, i64 0, i64 0)) #16
  %6 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !184
  %min = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %6, i64 %indvars.iv, i32 0
  %7 = load i32, i32* %min, align 4, !tbaa !221
  %conv = sext i32 %7 to i64
  %call13 = tail call i8* @halide_int64_to_string(i8* %call12, i8* %end, i64 %conv, i32 1) #16
  %call14 = tail call i8* @halide_string_to_string(i8* %call13, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #16
  %8 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !184
  %extent = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %8, i64 %indvars.iv, i32 1
  %9 = load i32, i32* %extent, align 4, !tbaa !189
  %conv18 = sext i32 %9 to i64
  %call19 = tail call i8* @halide_int64_to_string(i8* %call14, i8* %end, i64 %conv18, i32 1) #16
  %call20 = tail call i8* @halide_string_to_string(i8* %call19, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #16
  %10 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !184
  %stride = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %10, i64 %indvars.iv, i32 2
  %11 = load i32, i32* %stride, align 4, !tbaa !185
  %conv24 = sext i32 %11 to i64
  %call25 = tail call i8* @halide_int64_to_string(i8* %call20, i8* %end, i64 %conv24, i32 1) #16
  %call26 = tail call i8* @halide_string_to_string(i8* %call25, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.24.83, i64 0, i64 0)) #16
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %12 = load i32, i32* %dimensions, align 4, !tbaa !183
  %13 = sext i32 %12 to i64
  %cmp11 = icmp slt i64 %indvars.iv.next, %13
  br i1 %cmp11, label %for.body, label %for.cond.cleanup, !llvm.loop !308

return:                                           ; preds = %for.cond.cleanup, %if.then
  %retval.0 = phi i8* [ %call, %if.then ], [ %call27, %for.cond.cleanup ]
  ret i8* %retval.0
}

; Function Attrs: alwaysinline nounwind willreturn mustprogress
define weak i32 @halide_malloc_alignment() local_unnamed_addr #6 {
entry:
  ret i32 32
}

; Function Attrs: nounwind
define weak i32 @halide_reuse_device_allocations(i8* %user_context, i1 zeroext %flag) local_unnamed_addr #4 {
entry:
  %frombool = zext i1 %flag to i8
  store i8 %frombool, i8* @_ZN6Halide7Runtime8Internal36halide_reuse_device_allocations_flagE, align 1, !tbaa !19
  br i1 %flag, label %if.end5, label %if.then

if.then:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #15
  %p.014 = load %struct.halide_device_allocation_pool*, %struct.halide_device_allocation_pool** @_ZN6Halide7Runtime8Internal23device_allocation_poolsE, align 8, !tbaa !14
  %cmp.not15 = icmp eq %struct.halide_device_allocation_pool* %p.014, null
  br i1 %cmp.not15, label %for.cond.cleanup, label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %if.then
  %err.0.lcssa = phi i32 [ 0, %if.then ], [ %spec.select, %for.body ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #15
  br label %if.end5

for.body:                                         ; preds = %if.then, %for.body
  %p.017 = phi %struct.halide_device_allocation_pool* [ %p.0, %for.body ], [ %p.014, %if.then ]
  %err.016 = phi i32 [ %spec.select, %for.body ], [ 0, %if.then ]
  %release_unused = getelementptr inbounds %struct.halide_device_allocation_pool, %struct.halide_device_allocation_pool* %p.017, i64 0, i32 0
  %0 = load i32 (i8*)*, i32 (i8*)** %release_unused, align 8, !tbaa !309
  %call = tail call i32 %0(i8* %user_context) #15
  %tobool3.not = icmp eq i32 %call, 0
  %spec.select = select i1 %tobool3.not, i32 %err.016, i32 %call
  %next = getelementptr inbounds %struct.halide_device_allocation_pool, %struct.halide_device_allocation_pool* %p.017, i64 0, i32 1
  %p.0 = load %struct.halide_device_allocation_pool*, %struct.halide_device_allocation_pool** %next, align 8, !tbaa !14
  %cmp.not = icmp eq %struct.halide_device_allocation_pool* %p.0, null
  br i1 %cmp.not, label %for.cond.cleanup, label %for.body, !llvm.loop !311

if.end5:                                          ; preds = %for.cond.cleanup, %entry
  %err.2 = phi i32 [ 0, %entry ], [ %err.0.lcssa, %for.cond.cleanup ]
  ret i32 %err.2
}

; Function Attrs: nounwind willreturn mustprogress
define weak zeroext i1 @halide_can_reuse_device_allocations(i8* %user_context) local_unnamed_addr #2 {
entry:
  %0 = load i8, i8* @_ZN6Halide7Runtime8Internal36halide_reuse_device_allocations_flagE, align 1, !tbaa !19, !range !21
  %tobool = icmp ne i8 %0, 0
  ret i1 %tobool
}

; Function Attrs: nounwind
define weak void @halide_register_device_allocation_pool(%struct.halide_device_allocation_pool* %pool) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #15
  %0 = load %struct.halide_device_allocation_pool*, %struct.halide_device_allocation_pool** @_ZN6Halide7Runtime8Internal23device_allocation_poolsE, align 8, !tbaa !14
  %next = getelementptr inbounds %struct.halide_device_allocation_pool, %struct.halide_device_allocation_pool* %pool, i64 0, i32 1
  store %struct.halide_device_allocation_pool* %0, %struct.halide_device_allocation_pool** %next, align 8, !tbaa !312
  store %struct.halide_device_allocation_pool* %pool, %struct.halide_device_allocation_pool** @_ZN6Halide7Runtime8Internal23device_allocation_poolsE, align 8, !tbaa !14
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #15
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %flags.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %0 = load i64, i64* %flags.i.i, align 8, !tbaa !307
  %and.i.i = and i64 %0, 2
  %cmp.i.i.not = icmp eq i64 %and.i.i, 0
  br i1 %cmp.i.i.not, label %return, label %if.end

if.end:                                           ; preds = %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %1 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !306
  %and.i.i46 = and i64 %0, 1
  %cmp.i.i47.not = icmp eq i64 %and.i.i46, 0
  br i1 %cmp.i.i47.not, label %if.end9, label %return

if.end9:                                          ; preds = %if.end
  %cmp = icmp eq %struct.halide_device_interface_t* %1, null
  br i1 %cmp, label %return, label %if.end15

if.end15:                                         ; preds = %if.end9
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %1, i64 0, i32 15
  %2 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %copy_to_host = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %2, i64 0, i32 6
  %3 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %copy_to_host, align 8, !tbaa !315
  %call16 = tail call i32 %3(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #15
  %cmp17.not = icmp eq i32 %call16, 0
  br i1 %cmp17.not, label %if.end23, label %return

if.end23:                                         ; preds = %if.end15
  %4 = load i64, i64* %flags.i.i, align 8, !tbaa !307
  %and.i.i44 = and i64 %4, -3
  store i64 %and.i.i44, i64* %flags.i.i, align 8, !tbaa !307
  %call24 = tail call i32 @halide_msan_annotate_buffer_is_initialized(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #15
  br label %return

return:                                           ; preds = %if.end23, %if.end15, %if.end9, %if.end, %entry
  %retval.2 = phi i32 [ 0, %entry ], [ 0, %if.end23 ], [ -14, %if.end ], [ -19, %if.end9 ], [ -14, %if.end15 ]
  ret i32 %retval.2
}

; Function Attrs: nounwind mustprogress
define weak void @halide_device_release(i8* %user_context, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i64 0, i32 15
  %0 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %device_release = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %0, i64 0, i32 5
  %1 = load i32 (i8*)*, i32 (i8*)** %device_release, align 8, !tbaa !317
  %call = tail call i32 %1(i8* %user_context) #15
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_copy_to_host(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #15
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.6.88, i64 0, i64 0)) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !306
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !182
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !307
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end16.i.split

if.end16.i.split:                                 ; preds = %if.end16.i
  %call11 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  br label %cleanup

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %call12 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* %buf) #16
  br label %cleanup

cleanup:                                          ; preds = %if.end16.i.split, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ %call11, %if.end16.i.split ], [ %call12, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #15
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define linkonce i32 @copy_to_device_already_locked(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7.89, i64 0, i64 0)) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !306
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !182
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !307
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %if.end, label %cleanup

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit, %if.end16.i
  %cmp1 = icmp eq %struct.halide_device_interface_t* %device_interface, null
  br i1 %cmp1, label %if.then2, label %if.end11

if.then2:                                         ; preds = %if.end
  %device_interface5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %4 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface5, align 8, !tbaa !306
  %cmp6 = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp6, label %if.then7, label %if.end11

if.then7:                                         ; preds = %if.then2
  %call8 = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %cleanup

if.end11:                                         ; preds = %if.then2, %if.end
  %device_interface.addr.0 = phi %struct.halide_device_interface_t* [ %device_interface, %if.end ], [ %4, %if.then2 ]
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %5 = load i64, i64* %device, align 8, !tbaa !182
  %tobool.not = icmp eq i64 %5, 0
  br i1 %tobool.not, label %if.then18, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end11
  %device_interface12 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %6 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface12, align 8, !tbaa !306
  %cmp13.not = icmp eq %struct.halide_device_interface_t* %6, %device_interface.addr.0
  br i1 %cmp13.not, label %if.end27, label %if.then14

if.then14:                                        ; preds = %land.lhs.true
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.9.90, i64 0, i64 0)) #15
  br label %cleanup

if.then18:                                        ; preds = %if.end11
  %call19 = tail call i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* nonnull %buf, %struct.halide_device_interface_t* nonnull %device_interface.addr.0) #16
  %cmp20.not = icmp eq i32 %call19, 0
  br i1 %cmp20.not, label %if.end27, label %cleanup

if.end27:                                         ; preds = %if.then18, %land.lhs.true
  %flags.i.i97 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %7 = load i64, i64* %flags.i.i97, align 8, !tbaa !307
  %and.i.i98 = and i64 %7, 1
  %cmp.i.i99.not = icmp eq i64 %and.i.i98, 0
  br i1 %cmp.i.i99.not, label %cleanup, label %if.then29

if.then29:                                        ; preds = %if.end27
  %and.i.i96 = and i64 %7, 2
  %cmp.i.i.not = icmp eq i64 %and.i.i96, 0
  br i1 %cmp.i.i.not, label %if.else, label %cleanup

if.else:                                          ; preds = %if.then29
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface.addr.0, i64 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %copy_to_device = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i64 0, i32 7
  %9 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %copy_to_device, align 8, !tbaa !318
  %call44 = tail call i32 %9(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #15
  %cmp45 = icmp eq i32 %call44, 0
  br i1 %cmp45, label %if.then46, label %cleanup

if.then46:                                        ; preds = %if.else
  %10 = load i64, i64* %flags.i.i97, align 8, !tbaa !307
  %and.i.i = and i64 %10, -2
  store i64 %and.i.i, i64* %flags.i.i97, align 8, !tbaa !307
  br label %cleanup

cleanup:                                          ; preds = %if.then46, %if.else, %if.then29, %if.end27, %if.then18, %if.then14, %if.then7, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %call8, %if.then7 ], [ -42, %if.then14 ], [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.then46 ], [ %call19, %if.then18 ], [ -15, %if.then29 ], [ -15, %if.else ], [ 0, %if.end27 ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.17.91, i64 0, i64 0)) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !306
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !182
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !307
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup12

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface3.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface3.phi.trans.insert, align 8, !tbaa !306
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp4.not = icmp eq %struct.halide_device_interface_t* %4, null
  %cmp5.not = icmp eq %struct.halide_device_interface_t* %4, %device_interface
  %or.cond = or i1 %cmp4.not, %cmp5.not
  br i1 %or.cond, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.20.92, i64 0, i64 0)) #15
  br label %cleanup12

if.end7:                                          ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !319
  tail call void %6() #15
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %device_malloc = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 2
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_malloc, align 8, !tbaa !320
  %call9 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #15
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !321
  tail call void %10() #15
  %tobool.not = icmp eq i32 %call9, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -16
  ret i32 %spec.select

cleanup12:                                        ; preds = %if.then6, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -42, %if.then6 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind
define weak i32 @halide_copy_to_device(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #15
  %call = tail call i32 @copy_to_device_already_locked(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) #16
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #15
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_sync(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.16.93, i64 0, i64 0)) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !306
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !182
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !307
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup8

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !306
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2 = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %if.end
  %call4 = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %cleanup8

if.end5:                                          ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %device_sync = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 4
  %6 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_sync, align 8, !tbaa !322
  %call6 = tail call i32 %6(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #15
  %tobool.not = icmp eq i32 %call6, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -17
  ret i32 %spec.select

cleanup8:                                         ; preds = %if.then3, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ %call4, %if.then3 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.21.96, i64 0, i64 0)) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !306
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !182
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !307
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup12

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !306
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2.not, label %if.end11, label %if.then3

if.then3:                                         ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !319
  tail call void %6() #15
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %device_free = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 3
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_free, align 8, !tbaa !323
  %call5 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #15
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !321
  tail call void %10() #15
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %11 = load i64, i64* %device, align 8, !tbaa !182
  %cmp7 = icmp eq i64 %11, 0
  br i1 %cmp7, label %do.end, label %if.then8

if.then8:                                         ; preds = %if.then3
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([127 x i8], [127 x i8]* @.str.22.97, i64 0, i64 0)) #15
  tail call void @abort() #15
  br label %do.end

do.end:                                           ; preds = %if.then8, %if.then3
  %tobool.not = icmp eq i32 %call5, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -18
  ret i32 %spec.select

if.end11:                                         ; preds = %if.end
  %flags3.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %12 = load i64, i64* %flags3.i.i, align 8, !tbaa !307
  %and.i.i = and i64 %12, -3
  store i64 %and.i.i, i64* %flags3.i.i, align 8, !tbaa !307
  br label %cleanup12

cleanup12:                                        ; preds = %if.end11, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end11 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak void @halide_device_free_as_destructor(i8* %user_context, i8* %obj) local_unnamed_addr #0 {
entry:
  %0 = bitcast i8* %obj to %struct.halide_buffer_t*
  %call = tail call i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* %0) #16
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_and_host_malloc(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.23.98, i64 0, i64 0)) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !306
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !182
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !307
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup14

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface3.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface3.phi.trans.insert, align 8, !tbaa !306
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp4.not = icmp eq %struct.halide_device_interface_t* %4, null
  %cmp5.not = icmp eq %struct.halide_device_interface_t* %4, %device_interface
  %or.cond = or i1 %cmp4.not, %cmp5.not
  br i1 %or.cond, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.25.99, i64 0, i64 0)) #15
  br label %cleanup14

if.end7:                                          ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !319
  tail call void %6() #15
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %device_and_host_malloc = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 8
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_and_host_malloc, align 8, !tbaa !324
  %call9 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #15
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !321
  tail call void %10() #15
  %cmp11.not = icmp eq i32 %call9, 0
  br i1 %cmp11.not, label %cleanup14, label %if.then12

if.then12:                                        ; preds = %if.end7
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.26.100, i64 0, i64 0)) #15
  br label %cleanup14

cleanup14:                                        ; preds = %if.then12, %if.end7, %if.then6, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -42, %if.then6 ], [ -16, %if.then12 ], [ 0, %if.end7 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_and_host_free(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.27.101, i64 0, i64 0)) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !306
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !182
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !307
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup18

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !306
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2.not, label %if.else11, label %if.then3

if.then3:                                         ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !319
  tail call void %6() #15
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %device_and_host_free = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 9
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_and_host_free, align 8, !tbaa !325
  %call5 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #15
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !321
  tail call void %10() #15
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %11 = load i64, i64* %device, align 8, !tbaa !182
  %cmp7 = icmp eq i64 %11, 0
  br i1 %cmp7, label %do.end, label %if.then8

if.then8:                                         ; preds = %if.then3
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([127 x i8], [127 x i8]* @.str.28.102, i64 0, i64 0)) #15
  tail call void @abort() #15
  br label %do.end

do.end:                                           ; preds = %if.then8, %if.then3
  %tobool.not = icmp eq i32 %call5, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -18
  ret i32 %spec.select

if.else11:                                        ; preds = %if.end
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 2
  %12 = load i8*, i8** %host, align 8, !tbaa !180
  %tobool12.not = icmp eq i8* %12, null
  br i1 %tobool12.not, label %if.end17, label %if.then13

if.then13:                                        ; preds = %if.else11
  tail call void @halide_free(i8* %user_context, i8* nonnull %12) #15
  store i8* null, i8** %host, align 8, !tbaa !180
  br label %if.end17

if.end17:                                         ; preds = %if.then13, %if.else11
  %flags3.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %13 = load i64, i64* %flags3.i.i, align 8, !tbaa !307
  %and.i.i = and i64 %13, -3
  store i64 %and.i.i, i64* %flags3.i.i, align 8, !tbaa !307
  br label %cleanup18

cleanup18:                                        ; preds = %if.end17, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end17 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_and_host_malloc(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.29.103, i64 0, i64 0)) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !306
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !182
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !307
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %if.end, label %cleanup13

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit, %if.end16.i
  %dimensions.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 5
  %4 = load i32, i32* %dimensions.i.i, align 4, !tbaa !183
  %cmp19.i.i = icmp sgt i32 %4, 0
  br i1 %cmp19.i.i, label %for.body.lr.ph.i.i, label %if.end._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge

if.end._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge: ; preds = %if.end
  %sub.i.0 = sub nsw i64 1, 0
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.lr.ph.i.i:                               ; preds = %if.end
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  %5 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8, !tbaa !184
  %wide.trip.count.i.i = zext i32 %4 to i64
  %min.iters.check = icmp ult i32 %4, 3
  br i1 %min.iters.check, label %for.body.i.i.preheader, label %vector.ph

vector.ph:                                        ; preds = %for.body.lr.ph.i.i
  %n.vec = and i64 %wide.trip.count.i.i, 4294967294
  br label %vector.body

vector.body:                                      ; preds = %pred.load.continue6, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %pred.load.continue6 ]
  %vec.phi = phi i64 [ 0, %vector.ph ], [ %predphi, %pred.load.continue6 ]
  %vec.phi4 = phi i64 [ 0, %vector.ph ], [ %predphi7, %pred.load.continue6 ]
  %induction3 = or i64 %index, 1
  %6 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %index, i32 2
  %7 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %induction3, i32 2
  %8 = load i32, i32* %6, align 4, !tbaa !185
  %9 = load i32, i32* %7, align 4, !tbaa !185
  %10 = icmp sgt i32 %8, 0
  %11 = icmp sgt i32 %9, 0
  %12 = zext i32 %8 to i64
  %13 = zext i32 %9 to i64
  br i1 %10, label %pred.load.if, label %pred.load.continue

pred.load.if:                                     ; preds = %vector.body
  %14 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %index, i32 1
  %15 = load i32, i32* %14, align 4, !tbaa !189
  br label %pred.load.continue

pred.load.continue:                               ; preds = %pred.load.if, %vector.body
  %16 = phi i32 [ poison, %vector.body ], [ %15, %pred.load.if ]
  br i1 %11, label %pred.load.if5, label %pred.load.continue6

pred.load.if5:                                    ; preds = %pred.load.continue
  %17 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %induction3, i32 1
  %18 = load i32, i32* %17, align 4, !tbaa !189
  br label %pred.load.continue6

pred.load.continue6:                              ; preds = %pred.load.if5, %pred.load.continue
  %19 = phi i32 [ poison, %pred.load.continue ], [ %18, %pred.load.if5 ]
  %20 = add nsw i32 %16, -1
  %21 = add nsw i32 %19, -1
  %22 = sext i32 %20 to i64
  %23 = sext i32 %21 to i64
  %24 = mul nsw i64 %22, %12
  %25 = mul nsw i64 %23, %13
  %26 = select i1 %10, i64 %24, i64 0
  %predphi = add i64 %vec.phi, %26
  %27 = select i1 %11, i64 %25, i64 0
  %predphi7 = add i64 %vec.phi4, %27
  %index.next = add i64 %index, 2
  %28 = icmp eq i64 %index.next, %n.vec
  br i1 %28, label %middle.block, label %vector.body, !llvm.loop !326

middle.block:                                     ; preds = %pred.load.continue6
  %bin.rdx = add i64 %predphi7, %predphi
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count.i.i
  br i1 %cmp.n, label %for.body.i13.i.preheader, label %for.body.i.i.preheader

for.body.i.i.preheader:                           ; preds = %for.body.lr.ph.i.i, %middle.block
  %indvars.iv.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %n.vec, %middle.block ]
  %index.021.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %bin.rdx, %middle.block ]
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.body.i.i.preheader, %if.end.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %if.end.i.i ], [ %indvars.iv.i.i.ph, %for.body.i.i.preheader ]
  %index.021.i.i = phi i64 [ %index.1.i.i, %if.end.i.i ], [ %index.021.i.i.ph, %for.body.i.i.preheader ]
  %stride2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %indvars.iv.i.i, i32 2
  %29 = load i32, i32* %stride2.i.i, align 4, !tbaa !185
  %cmp3.i.i = icmp sgt i32 %29, 0
  br i1 %cmp3.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %conv18.i.i = zext i32 %29 to i64
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %indvars.iv.i.i, i32 1
  %30 = load i32, i32* %extent.i.i, align 4, !tbaa !189
  %sub.i.i = add nsw i32 %30, -1
  %conv7.i.i = sext i32 %sub.i.i to i64
  %mul.i.i = mul nsw i64 %conv7.i.i, %conv18.i.i
  %add.i.i = add nsw i64 %mul.i.i, %index.021.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i64 [ %add.i.i, %if.then.i.i ], [ %index.021.i.i, %for.body.i.i ]
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %exitcond.not.i.i = icmp eq i64 %indvars.iv.next.i.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i.i, label %for.body.i13.i.preheader, label %for.body.i.i, !llvm.loop !327

for.body.i13.i.preheader:                         ; preds = %if.end.i.i, %middle.block
  %index.1.i.i.lcssa = phi i64 [ %bin.rdx, %middle.block ], [ %index.1.i.i, %if.end.i.i ]
  %min.iters.check11 = icmp ult i32 %4, 3
  br i1 %min.iters.check11, label %for.body.i13.i.preheader31, label %vector.ph12

vector.ph12:                                      ; preds = %for.body.i13.i.preheader
  %n.vec14 = and i64 %wide.trip.count.i.i, 4294967294
  br label %vector.body10

vector.body10:                                    ; preds = %pred.load.continue26, %vector.ph12
  %index15 = phi i64 [ 0, %vector.ph12 ], [ %index.next16, %pred.load.continue26 ]
  %vec.phi21 = phi i64 [ 0, %vector.ph12 ], [ %predphi27, %pred.load.continue26 ]
  %vec.phi22 = phi i64 [ 0, %vector.ph12 ], [ %predphi28, %pred.load.continue26 ]
  %induction20 = or i64 %index15, 1
  %31 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %index15, i32 2
  %32 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %induction20, i32 2
  %33 = load i32, i32* %31, align 4, !tbaa !185
  %34 = load i32, i32* %32, align 4, !tbaa !185
  %35 = icmp slt i32 %33, 0
  %36 = icmp slt i32 %34, 0
  %37 = sext i32 %33 to i64
  %38 = sext i32 %34 to i64
  br i1 %35, label %pred.load.if23, label %pred.load.continue24

pred.load.if23:                                   ; preds = %vector.body10
  %39 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %index15, i32 1
  %40 = load i32, i32* %39, align 4, !tbaa !189
  br label %pred.load.continue24

pred.load.continue24:                             ; preds = %pred.load.if23, %vector.body10
  %41 = phi i32 [ poison, %vector.body10 ], [ %40, %pred.load.if23 ]
  br i1 %36, label %pred.load.if25, label %pred.load.continue26

pred.load.if25:                                   ; preds = %pred.load.continue24
  %42 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %induction20, i32 1
  %43 = load i32, i32* %42, align 4, !tbaa !189
  br label %pred.load.continue26

pred.load.continue26:                             ; preds = %pred.load.if25, %pred.load.continue24
  %44 = phi i32 [ poison, %pred.load.continue24 ], [ %43, %pred.load.if25 ]
  %45 = add nsw i32 %41, -1
  %46 = add nsw i32 %44, -1
  %47 = sext i32 %45 to i64
  %48 = sext i32 %46 to i64
  %49 = mul nsw i64 %47, %37
  %50 = mul nsw i64 %48, %38
  %51 = select i1 %35, i64 %49, i64 0
  %predphi27 = add i64 %vec.phi21, %51
  %52 = select i1 %36, i64 %50, i64 0
  %predphi28 = add i64 %vec.phi22, %52
  %index.next16 = add i64 %index15, 2
  %53 = icmp eq i64 %index.next16, %n.vec14
  br i1 %53, label %middle.block8, label %vector.body10, !llvm.loop !328

middle.block8:                                    ; preds = %pred.load.continue26
  %bin.rdx29 = add i64 %predphi28, %predphi27
  %cmp.n18 = icmp eq i64 %n.vec14, %wide.trip.count.i.i
  br i1 %cmp.n18, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i.preheader31

for.body.i13.i.preheader31:                       ; preds = %for.body.i13.i.preheader, %middle.block8
  %indvars.iv.i10.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %n.vec14, %middle.block8 ]
  %index.018.i.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %bin.rdx29, %middle.block8 ]
  br label %for.body.i13.i

for.body.i13.i:                                   ; preds = %for.body.i13.i.preheader31, %if.end.i24.i
  %indvars.iv.i10.i = phi i64 [ %indvars.iv.next.i22.i, %if.end.i24.i ], [ %indvars.iv.i10.i.ph, %for.body.i13.i.preheader31 ]
  %index.018.i.i = phi i64 [ %index.1.i21.i, %if.end.i24.i ], [ %index.018.i.i.ph, %for.body.i13.i.preheader31 ]
  %stride2.i11.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %indvars.iv.i10.i, i32 2
  %54 = load i32, i32* %stride2.i11.i, align 4, !tbaa !185
  %cmp3.i12.i = icmp slt i32 %54, 0
  br i1 %cmp3.i12.i, label %if.then.i20.i, label %if.end.i24.i

if.then.i20.i:                                    ; preds = %for.body.i13.i
  %conv.i14.i = sext i32 %54 to i64
  %extent.i15.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %indvars.iv.i10.i, i32 1
  %55 = load i32, i32* %extent.i15.i, align 4, !tbaa !189
  %sub.i16.i = add nsw i32 %55, -1
  %conv7.i17.i = sext i32 %sub.i16.i to i64
  %mul.i18.i = mul nsw i64 %conv7.i17.i, %conv.i14.i
  %add.i19.i = add nsw i64 %mul.i18.i, %index.018.i.i
  br label %if.end.i24.i

if.end.i24.i:                                     ; preds = %if.then.i20.i, %for.body.i13.i
  %index.1.i21.i = phi i64 [ %add.i19.i, %if.then.i20.i ], [ %index.018.i.i, %for.body.i13.i ]
  %indvars.iv.next.i22.i = add nuw nsw i64 %indvars.iv.i10.i, 1
  %exitcond.not.i23.i = icmp eq i64 %indvars.iv.next.i22.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i23.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i, !llvm.loop !329

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %if.end.i24.i, %middle.block8
  %index.1.i21.i.lcssa = phi i64 [ %bin.rdx29, %middle.block8 ], [ %index.1.i21.i, %if.end.i24.i ]
  %add8.i.i = add nsw i64 %index.1.i.i.lcssa, 1
  %sub.i.1 = sub nsw i64 %add8.i.i, %index.1.i21.i.lcssa
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %if.end._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit
  %add8.i27.i = phi i64 [ 1, %if.end._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge ], [ %add8.i.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %sub.i.phi = phi i64 [ %sub.i.0, %if.end._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge ], [ %sub.i.1, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %bits.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 4, i32 1
  %56 = load i8, i8* %bits.i.i, align 1, !tbaa !144
  %conv.i.i = zext i8 %56 to i64
  %add.i4.i = add nuw nsw i64 %conv.i.i, 7
  %div.i.i = lshr i64 %add.i4.i, 3
  %mul.i = mul i64 %div.i.i, %sub.i.phi
  %call2 = tail call i8* @halide_malloc(i8* %user_context, i64 %mul.i) #15
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 2
  store i8* %call2, i8** %host, align 8, !tbaa !180
  %cmp4 = icmp eq i8* %call2, null
  br i1 %cmp4, label %cleanup13, label %if.end6

if.end6:                                          ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  %call7 = tail call i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* nonnull %buf, %struct.halide_device_interface_t* %device_interface) #16
  %cmp8.not = icmp eq i32 %call7, 0
  br i1 %cmp8.not, label %cleanup13, label %if.then9

if.then9:                                         ; preds = %if.end6
  %57 = load i8*, i8** %host, align 8, !tbaa !180
  tail call void @halide_free(i8* %user_context, i8* %57) #15
  store i8* null, i8** %host, align 8, !tbaa !180
  br label %cleanup13

cleanup13:                                        ; preds = %if.then9, %if.end6, %_ZNK15halide_buffer_t13size_in_bytesEv.exit, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -1, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ], [ %call7, %if.then9 ], [ 0, %if.end6 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_and_host_free(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.30.104, i64 0, i64 0)) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !306
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !182
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !307
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end16.i.split

if.end16.i.split:                                 ; preds = %if.end16.i
  %call11 = tail call i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  br label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %call12 = tail call i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* %buf) #16
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, %if.end16.i.split
  %phi.call = phi i32 [ %call11, %if.end16.i.split ], [ %call12, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split ]
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 2
  %4 = load i8*, i8** %host, align 8, !tbaa !180
  %tobool.not = icmp eq i8* %4, null
  br i1 %tobool.not, label %if.end5, label %if.then2

if.then2:                                         ; preds = %if.end
  tail call void @halide_free(i8* %user_context, i8* nonnull %4) #15
  store i8* null, i8** %host, align 8, !tbaa !180
  br label %if.end5

if.end5:                                          ; preds = %if.then2, %if.end
  %flags3.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %5 = load i64, i64* %flags3.i.i, align 8, !tbaa !307
  %and.i.i18 = and i64 %5, -4
  store i64 %and.i.i18, i64* %flags3.i.i, align 8, !tbaa !307
  br label %cleanup

cleanup:                                          ; preds = %if.end5, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %phi.call, %if.end5 ], [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_wrap_native(i8* %user_context, %struct.halide_buffer_t* %buf, i64 %handle, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.31.105, i64 0, i64 0)) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !306
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !182
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !307
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup12

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !306
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  %cmp3.not = icmp eq %struct.halide_device_interface_t* %4, %device_interface
  %or.cond = or i1 %cmp2.not, %cmp3.not
  br i1 %or.cond, label %if.end5, label %if.then4

if.then4:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.32.106, i64 0, i64 0)) #15
  br label %cleanup12

if.end5:                                          ; preds = %if.end
  %device_interface1 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !319
  tail call void %6() #15
  store %struct.halide_device_interface_t* %device_interface, %struct.halide_device_interface_t** %device_interface1, align 8, !tbaa !306
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %wrap_native = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 14
  %8 = load i32 (i8*, %struct.halide_buffer_t*, i64)*, i32 (i8*, %struct.halide_buffer_t*, i64)** %wrap_native, align 8, !tbaa !330
  %call8 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf, i64 %handle) #15
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !321
  tail call void %10() #15
  %tobool.not = icmp eq i32 %call8, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -16
  ret i32 %spec.select

cleanup12:                                        ; preds = %if.then4, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -42, %if.then4 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_detach_native(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.33.107, i64 0, i64 0)) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !306
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !182
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !307
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !306
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2.not, label %cleanup, label %if.then3

if.then3:                                         ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !319
  tail call void %6() #15
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %detach_native = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 15
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %detach_native, align 8, !tbaa !331
  %call5 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #15
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !321
  tail call void %10() #15
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %11 = load i64, i64* %device, align 8, !tbaa !182
  %cmp7 = icmp eq i64 %11, 0
  br i1 %cmp7, label %do.end, label %if.then8

if.then8:                                         ; preds = %if.then3
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([127 x i8], [127 x i8]* @.str.34.108, i64 0, i64 0)) #15
  tail call void @abort() #15
  br label %do.end

do.end:                                           ; preds = %if.then8, %if.then3
  %tobool.not = icmp eq i32 %call5, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -33
  ret i32 %spec.select

cleanup:                                          ; preds = %if.end, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_wrap_native(i8* %user_context, %struct.halide_buffer_t* %buf, i64 %handle) local_unnamed_addr #0 {
entry:
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !182
  %cmp.not = icmp eq i64 %0, 0
  br i1 %cmp.not, label %if.end, label %return

if.end:                                           ; preds = %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %1 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !306
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %1, i64 0, i32 15
  %2 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %2, i64 0, i32 0
  %3 = load void ()*, void ()** %use_module, align 8, !tbaa !319
  tail call void %3() #15
  store i64 %handle, i64* %device, align 8, !tbaa !182
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i32 [ 0, %if.end ], [ -32, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_detach_native(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.35, i64 0, i64 0)) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !306
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !182
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !307
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %.pre = load i64, i64* %device.phi.trans.insert, align 8, !tbaa !182
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi i64 [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %1, %if.end16.i ]
  %cmp1 = icmp eq i64 %4, 0
  br i1 %cmp1, label %cleanup, label %if.end3

if.end3:                                          ; preds = %if.end
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %5 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !306
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %5, i64 0, i32 15
  %6 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %6, i64 0, i32 1
  %7 = load void ()*, void ()** %release_module, align 8, !tbaa !321
  tail call void %7() #15
  store i64 0, i64* %device, align 8, !tbaa !182
  store %struct.halide_device_interface_t* null, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !306
  br label %cleanup

cleanup:                                          ; preds = %if.end3, %if.end, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ 0, %if.end3 ], [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak void @halide_device_and_host_free_as_destructor(i8* %user_context, i8* %obj) local_unnamed_addr #0 {
entry:
  %0 = bitcast i8* %obj to %struct.halide_buffer_t*
  %call = tail call i32 @halide_device_and_host_free(i8* %user_context, %struct.halide_buffer_t* %0) #16
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_device_host_nop_free(i8* %user_context, i8* %obj) local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_default_buffer_copy(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) local_unnamed_addr #2 {
entry:
  ret i32 -39
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_buffer_copy_already_locked(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) local_unnamed_addr #0 {
entry:
  %c = alloca %"struct.Halide::Runtime::Internal::device_copy", align 8
  %tobool.not = icmp eq %struct.halide_device_interface_t* %dst_device_interface, null
  br i1 %tobool.not, label %if.end13, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !306
  %tobool1.not = icmp eq %struct.halide_device_interface_t* %0, null
  %cmp.not = icmp eq %struct.halide_device_interface_t* %0, %dst_device_interface
  %or.cond = or i1 %tobool1.not, %cmp.not
  br i1 %or.cond, label %land.lhs.true5, label %if.then

if.then:                                          ; preds = %land.lhs.true
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.41, i64 0, i64 0)) #15
  br label %cleanup143

land.lhs.true5:                                   ; preds = %land.lhs.true
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 0
  %1 = load i64, i64* %device, align 8, !tbaa !182
  %tobool6.not = icmp eq i64 %1, 0
  br i1 %tobool6.not, label %if.then7, label %if.end13

if.then7:                                         ; preds = %land.lhs.true5
  %call = tail call i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* nonnull %dst, %struct.halide_device_interface_t* nonnull %dst_device_interface) #16
  %tobool10.not = icmp eq i32 %call, 0
  br i1 %tobool10.not, label %if.end13, label %cleanup143

if.end13:                                         ; preds = %if.then7, %land.lhs.true5, %entry
  %device14 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 0
  %2 = load i64, i64* %device14, align 8, !tbaa !182
  %cmp15.not = icmp eq i64 %2, 0
  %host22.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 2
  %.pre = load i8*, i8** %host22.phi.trans.insert, align 8, !tbaa !180
  %cmp23.not = icmp eq i8* %.pre, null
  br i1 %cmp15.not, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %if.end13
  br i1 %cmp23.not, label %land.end32, label %land.end.thread264

land.end.thread264:                               ; preds = %land.rhs
  %flags.i.i243 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 3
  %3 = load i64, i64* %flags.i.i243, align 8, !tbaa !307
  %and.i.i244 = and i64 %3, 1
  %cmp.i.i.not = icmp ne i64 %and.i.i244, 0
  br label %land.rhs26

land.end:                                         ; preds = %if.end13
  br i1 %cmp23.not, label %land.end32, label %land.end.land.rhs26_crit_edge

land.end.land.rhs26_crit_edge:                    ; preds = %land.end
  %flags.i.i247.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 3
  %.pre1 = load i64, i64* %flags.i.i247.phi.trans.insert, align 8, !tbaa !307
  br label %land.rhs26

land.rhs26:                                       ; preds = %land.end.land.rhs26_crit_edge, %land.end.thread264
  %4 = phi i64 [ %3, %land.end.thread264 ], [ %.pre1, %land.end.land.rhs26_crit_edge ]
  %5 = phi i1 [ %cmp.i.i.not, %land.end.thread264 ], [ true, %land.end.land.rhs26_crit_edge ]
  %and.i.i248 = and i64 %4, 2
  %cmp.i.i249.not = icmp eq i64 %and.i.i248, 0
  br i1 %cmp.i.i249.not, label %land.end32, label %lor.rhs28

lor.rhs28:                                        ; preds = %land.rhs26
  %device_interface29 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %6 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface29, align 8, !tbaa !306
  %cmp30 = icmp ne %struct.halide_device_interface_t* %6, null
  br label %land.end32

land.end32:                                       ; preds = %lor.rhs28, %land.rhs26, %land.end, %land.rhs
  %cmp23.not263 = phi i1 [ true, %land.end ], [ false, %land.rhs26 ], [ false, %lor.rhs28 ], [ true, %land.rhs ]
  %7 = phi i1 [ true, %land.end ], [ %5, %land.rhs26 ], [ %5, %lor.rhs28 ], [ false, %land.rhs ]
  %8 = phi i1 [ true, %land.end ], [ false, %land.rhs26 ], [ %cmp30, %lor.rhs28 ], [ true, %land.rhs ]
  %host34 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 2
  %9 = load i8*, i8** %host34, align 8, !tbaa !180
  %cmp35.not = icmp eq i8* %9, null
  %cmp20.not = xor i1 %tobool.not, true
  %10 = and i1 %tobool.not, %cmp35.not
  br i1 %10, label %cleanup143, label %if.end41

if.end41:                                         ; preds = %land.end32
  %brmerge229 = or i1 %tobool.not, %7
  br i1 %brmerge229, label %if.then51, label %if.end49

if.end49:                                         ; preds = %if.end41
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i64 0, i32 15
  %11 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %buffer_copy = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %11, i64 0, i32 10
  %12 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy, align 8, !tbaa !332
  %call48 = tail call i32 %12(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* nonnull %dst_device_interface, %struct.halide_buffer_t* nonnull %dst) #15
  %cmp50 = icmp eq i32 %call48, -42
  br i1 %cmp50, label %if.then51, label %if.end117

if.then51:                                        ; preds = %if.end49, %if.end41
  %brmerge231.demorgan = and i1 %cmp23.not263, %cmp35.not
  br i1 %brmerge231.demorgan, label %cleanup143, label %if.end58

if.end58:                                         ; preds = %if.then51
  %brmerge234 = or i1 %8, %cmp20.not
  br i1 %brmerge234, label %if.else, label %if.end117.thread258

if.end117.thread258:                              ; preds = %if.end58
  %13 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %c to i8*
  call void @llvm.lifetime.start.p0i8(i64 416, i8* nonnull %13) #12
  call void @_ZN6Halide7Runtime8Internal16make_buffer_copyEPK15halide_buffer_tbS4_b(%"struct.Halide::Runtime::Internal::device_copy"* nonnull sret(%"struct.Halide::Runtime::Internal::device_copy") align 8 %c, %struct.halide_buffer_t* nonnull %src, i1 zeroext true, %struct.halide_buffer_t* nonnull %dst, i1 zeroext true) #16
  call void @_ZN6Halide7Runtime8Internal11copy_memoryERKNS1_11device_copyEPv(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %c, i8* %user_context) #16
  call void @llvm.lifetime.end.p0i8(i64 416, i8* nonnull %13) #12
  br label %land.lhs.true126

if.else:                                          ; preds = %if.end58
  %brmerge237 = or i1 %7, %cmp20.not
  br i1 %brmerge237, label %if.else81, label %if.then66

if.then66:                                        ; preds = %if.else
  %device_interface69 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %14 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface69, align 8, !tbaa !306
  %impl70 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %14, i64 0, i32 15
  %15 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl70, align 8, !tbaa !313
  %buffer_copy71 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %15, i64 0, i32 10
  %16 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy71, align 8, !tbaa !332
  %call72 = tail call i32 %16(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* null, %struct.halide_buffer_t* nonnull %dst) #15
  %cmp73 = icmp eq i32 %call72, -42
  br i1 %cmp73, label %if.then74, label %if.end117

if.then74:                                        ; preds = %if.then66
  %call75 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* nonnull %src) #16
  %tobool76.not = icmp eq i32 %call75, 0
  br i1 %tobool76.not, label %if.then77, label %cleanup143

if.then77:                                        ; preds = %if.then74
  %call78 = tail call i32 @halide_buffer_copy_already_locked(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* null, %struct.halide_buffer_t* nonnull %dst) #16
  br label %if.end117

if.else81:                                        ; preds = %if.else
  %brmerge239 = or i1 %7, %cmp35.not
  br i1 %brmerge239, label %if.else98, label %if.then85

if.then85:                                        ; preds = %if.else81
  %device_interface90 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %17 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface90, align 8, !tbaa !306
  %impl91 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %17, i64 0, i32 15
  %18 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl91, align 8, !tbaa !313
  %buffer_copy92 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %18, i64 0, i32 10
  %19 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy92, align 8, !tbaa !332
  %call93 = tail call i32 %19(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* null, %struct.halide_buffer_t* nonnull %dst) #15
  %cmp94 = icmp eq i32 %call93, 0
  br i1 %cmp94, label %if.then95, label %cleanup143

if.then95:                                        ; preds = %if.then85
  %flags.i.i245 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 3
  %20 = load i64, i64* %flags.i.i245, align 8, !tbaa !307
  %or.i.i246 = or i64 %20, 1
  store i64 %or.i.i246, i64* %flags.i.i245, align 8, !tbaa !307
  %call96 = tail call i32 @copy_to_device_already_locked(i8* %user_context, %struct.halide_buffer_t* nonnull %dst, %struct.halide_device_interface_t* %dst_device_interface) #16
  br label %if.end117

if.else98:                                        ; preds = %if.else81
  br i1 %tobool.not, label %cleanup143, label %if.then100

if.then100:                                       ; preds = %if.else98
  %call103 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* nonnull %src) #16
  %cmp104 = icmp eq i32 %call103, 0
  br i1 %cmp104, label %if.then105, label %cleanup143

if.then105:                                       ; preds = %if.then100
  %impl106 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i64 0, i32 15
  %21 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl106, align 8, !tbaa !313
  %buffer_copy107 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %21, i64 0, i32 10
  %22 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy107, align 8, !tbaa !332
  %call108 = tail call i32 %22(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* nonnull %dst_device_interface, %struct.halide_buffer_t* nonnull %dst) #15
  br label %if.end117

if.end117:                                        ; preds = %if.then105, %if.then95, %if.then77, %if.then66, %if.end49
  %err.1 = phi i32 [ %call78, %if.then77 ], [ %call72, %if.then66 ], [ %call96, %if.then95 ], [ %call108, %if.then105 ], [ %call48, %if.end49 ]
  %cond = icmp eq i32 %err.1, 0
  br i1 %cond, label %land.lhs.true126, label %cleanup143

land.lhs.true126:                                 ; preds = %if.end117, %if.end117.thread258
  %cmp127.not.old = icmp eq %struct.halide_buffer_t* %dst, %src
  br i1 %cmp127.not.old, label %cleanup143, label %if.then128

if.then128:                                       ; preds = %land.lhs.true126
  %flags.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 3
  %23 = load i64, i64* %flags.i.i, align 8, !tbaa !307
  %or.i.i = and i64 %23, -4
  br i1 %tobool.not, label %if.else133, label %if.then130

if.then130:                                       ; preds = %if.then128
  %or.i.i242 = or i64 %or.i.i, 2
  store i64 %or.i.i242, i64* %flags.i.i, align 8, !tbaa !307
  br label %cleanup143

if.else133:                                       ; preds = %if.then128
  %and.i.i251 = or i64 %or.i.i, 1
  store i64 %and.i.i251, i64* %flags.i.i, align 8, !tbaa !307
  br label %cleanup143

cleanup143:                                       ; preds = %if.else133, %if.then130, %land.lhs.true126, %if.end117, %if.then100, %if.else98, %if.then85, %if.then74, %if.then51, %land.end32, %if.then7, %if.then
  %retval.1 = phi i32 [ -42, %if.then ], [ %call, %if.then7 ], [ -34, %land.end32 ], [ 0, %if.then130 ], [ 0, %if.else133 ], [ 0, %land.lhs.true126 ], [ -42, %if.then51 ], [ %err.1, %if.end117 ], [ -42, %if.else98 ], [ %call103, %if.then100 ], [ %call93, %if.then85 ], [ %call75, %if.then74 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind
define weak i32 @halide_buffer_copy(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #15
  %tobool.not = icmp eq %struct.halide_device_interface_t* %dst_device_interface, null
  br i1 %tobool.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i64 0, i32 15
  %0 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %0, i64 0, i32 0
  %1 = load void ()*, void ()** %use_module, align 8, !tbaa !319
  tail call void %1() #15
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %2 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !306
  %tobool11.not = icmp eq %struct.halide_device_interface_t* %2, null
  br i1 %tobool11.not, label %if.end16, label %if.then12

if.then12:                                        ; preds = %if.end
  %impl14 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %2, i64 0, i32 15
  %3 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl14, align 8, !tbaa !313
  %use_module15 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %3, i64 0, i32 0
  %4 = load void ()*, void ()** %use_module15, align 8, !tbaa !319
  tail call void %4() #15
  br label %if.end16

if.end16:                                         ; preds = %if.then12, %if.end
  %call = tail call i32 @halide_buffer_copy_already_locked(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) #16
  br i1 %tobool.not, label %if.end20, label %if.then18

if.then18:                                        ; preds = %if.end16
  %impl19 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl19, align 8, !tbaa !313
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 1
  %6 = load void ()*, void ()** %release_module, align 8, !tbaa !321
  tail call void %6() #15
  br label %if.end20

if.end20:                                         ; preds = %if.then18, %if.end16
  %7 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !306
  %tobool22.not = icmp eq %struct.halide_device_interface_t* %7, null
  br i1 %tobool22.not, label %if.end27, label %if.then23

if.then23:                                        ; preds = %if.end20
  %impl25 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %7, i64 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl25, align 8, !tbaa !313
  %release_module26 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i64 0, i32 1
  %9 = load void ()*, void ()** %release_module26, align 8, !tbaa !321
  tail call void %9() #15
  br label %if.end27

if.end27:                                         ; preds = %if.then23, %if.end20
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #15
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_crop(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_buffer_t* %dst) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.58, i64 0, i64 0)) #15
  ret i32 -40
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_slice(i8* %user_context, %struct.halide_buffer_t* %src, i32 %slice_dim, i32 %slice_pos, %struct.halide_buffer_t* %dst) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.59, i64 0, i64 0)) #15
  ret i32 -40
}

; Function Attrs: nounwind
define weak i32 @halide_device_crop(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_buffer_t* %dst) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #15
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !182
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %device1 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 0
  %1 = load i64, i64* %device1, align 8, !tbaa !182
  %tobool2.not = icmp eq i64 %1, 0
  br i1 %tobool2.not, label %if.end4, label %if.then3

if.then3:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.60, i64 0, i64 0)) #15
  br label %cleanup

if.end4:                                          ; preds = %if.end
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 5
  %2 = load i32, i32* %dimensions, align 4, !tbaa !183
  %dimensions5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 5
  %3 = load i32, i32* %dimensions5, align 4, !tbaa !183
  %cmp.not = icmp eq i32 %2, %3
  br i1 %cmp.not, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end4
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.61, i64 0, i64 0)) #15
  br label %cleanup

if.end7:                                          ; preds = %if.end4
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %4 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !306
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !319
  tail call void %6() #15
  %7 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !306
  %impl9 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %7, i64 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl9, align 8, !tbaa !313
  %device_crop = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i64 0, i32 11
  %9 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)** %device_crop, align 8, !tbaa !333
  %call = tail call i32 %9(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_buffer_t* nonnull %dst) #15
  br label %cleanup

cleanup:                                          ; preds = %if.end7, %if.then6, %if.then3, %entry
  %retval.0 = phi i32 [ -41, %if.then3 ], [ -41, %if.then6 ], [ %call, %if.end7 ], [ 0, %entry ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #15
  ret i32 %retval.0
}

; Function Attrs: nounwind
define weak i32 @halide_device_slice(i8* %user_context, %struct.halide_buffer_t* %src, i32 %slice_dim, i32 %slice_pos, %struct.halide_buffer_t* %dst) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #15
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !182
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %device1 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 0
  %1 = load i64, i64* %device1, align 8, !tbaa !182
  %tobool2.not = icmp eq i64 %1, 0
  br i1 %tobool2.not, label %if.end4, label %if.then3

if.then3:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.60, i64 0, i64 0)) #15
  br label %cleanup

if.end4:                                          ; preds = %if.end
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 5
  %2 = load i32, i32* %dimensions, align 4, !tbaa !183
  %dimensions5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 5
  %3 = load i32, i32* %dimensions5, align 4, !tbaa !183
  %add = add nsw i32 %3, 1
  %cmp.not = icmp eq i32 %2, %add
  br i1 %cmp.not, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end4
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.64, i64 0, i64 0)) #15
  br label %cleanup

if.end7:                                          ; preds = %if.end4
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %4 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !306
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !319
  tail call void %6() #15
  %7 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !306
  %impl9 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %7, i64 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl9, align 8, !tbaa !313
  %device_slice = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i64 0, i32 12
  %9 = load i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)** %device_slice, align 8, !tbaa !334
  %call = tail call i32 %9(i8* %user_context, %struct.halide_buffer_t* nonnull %src, i32 %slice_dim, i32 %slice_pos, %struct.halide_buffer_t* nonnull %dst) #15
  br label %cleanup

cleanup:                                          ; preds = %if.end7, %if.then6, %if.then3, %entry
  %retval.0 = phi i32 [ -41, %if.then3 ], [ -41, %if.then6 ], [ %call, %if.end7 ], [ 0, %entry ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #15
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_release_crop(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !182
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %return, label %if.end

if.end:                                           ; preds = %entry
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.58, i64 0, i64 0)) #15
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i32 [ -40, %if.end ], [ 0, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind
define weak i32 @halide_device_release_crop(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #4 {
entry:
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !182
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %return, label %if.then

if.then:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #15
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %1 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !306
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %1, i64 0, i32 15
  %2 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %device_release_crop = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %2, i64 0, i32 13
  %3 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_release_crop, align 8, !tbaa !335
  %call = tail call i32 %3(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #15
  store i64 0, i64* %device, align 8, !tbaa !182
  %4 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !313
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %4, i64 0, i32 1
  %5 = load void ()*, void ()** %release_module, align 8, !tbaa !321
  tail call void %5() #15
  store %struct.halide_device_interface_t* null, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !306
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #15
  br label %return

return:                                           ; preds = %if.then, %entry
  %retval.0 = phi i32 [ %call, %if.then ], [ 0, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind willreturn mustprogress
define weak float @halide_float16_bits_to_float(i16 zeroext %bits) local_unnamed_addr #2 {
entry:
  %conv = zext i16 %bits to i32
  %and2 = and i32 %conv, 1023
  %and4 = lshr i32 %conv, 10
  %0 = and i32 %and4, 31
  %cmp = icmp eq i32 %0, 0
  %cmp5 = icmp ne i32 %and2, 0
  %or.cond = and i1 %cmp5, %cmp
  br i1 %or.cond, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = tail call i32 @llvm.ctlz.i32(i32 %and2, i1 true), !range !336
  %sub6 = xor i32 %1, 31
  %shl7 = shl nuw i32 1, %sub6
  %neg = xor i32 %shl7, -1
  %and8 = and i32 %and2, %neg
  %sub9 = sub nsw i32 23, %sub6
  %shl10 = shl i32 %and8, %sub9
  %add11.neg = mul nsw i32 %1, -8388608
  %shl12 = add i32 %add11.neg, 1124073472
  br label %if.end28

if.else:                                          ; preds = %entry
  %shl14 = shl nuw nsw i32 %and2, 13
  br i1 %cmp, label %if.end28, label %if.else18

if.else18:                                        ; preds = %if.else
  %cmp19 = icmp eq i32 %0, 31
  br i1 %cmp19, label %if.end28, label %if.else21

if.else21:                                        ; preds = %if.else18
  %add22 = shl nuw nsw i32 %0, 23
  %phi.bo = add nuw nsw i32 %add22, 939524096
  br label %if.end28

if.end28:                                         ; preds = %if.else21, %if.else18, %if.else, %if.then
  %shl14.sink = phi i32 [ %shl12, %if.then ], [ %shl14, %if.else18 ], [ %shl14, %if.else ], [ %shl14, %if.else21 ]
  %reEncodedExponent15.0.sink = phi i32 [ %shl10, %if.then ], [ 2139095040, %if.else18 ], [ 0, %if.else ], [ %phi.bo, %if.else21 ]
  %bits.signext = sext i16 %bits to i32
  %shl = and i32 %bits.signext, -2147483648
  %or25 = or i32 %shl14.sink, %shl
  %or26 = or i32 %or25, %reEncodedExponent15.0.sink
  %result.sroa.0.0 = bitcast i32 %or26 to float
  ret float %result.sroa.0.0
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #7

; Function Attrs: nounwind willreturn mustprogress
define weak double @halide_float16_bits_to_double(i16 zeroext %bits) local_unnamed_addr #2 {
entry:
  %call = tail call float @halide_float16_bits_to_float(i16 zeroext %bits) #16
  %conv = fpext float %call to double
  ret double %conv
}

; Function Attrs: nounwind
define weak i32 @halide_error_bounds_inference_call_failed(i8* %user_context, i8* %extern_stage_name, i32 %result) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i71 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.111, i64 0, i64 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i72 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.111, i64 0, i64 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i71, %entry.split ], [ %call.i72, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i10 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %extern_stage_name) #15
  %call.i13 = tail call i8* @halide_string_to_string(i8* %call.i10, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1.112, i64 0, i64 0)) #15
  %conv.i = sext i32 %result to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %call.i13, i8* %ref.tmp.sroa.16.0, i64 %conv.i, i32 1) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i16 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 %result
}

; Function Attrs: nounwind
define weak i32 @halide_error_extern_stage_failed(i8* %user_context, i8* %extern_stage_name, i32 %result) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i71 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2.113, i64 0, i64 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i72 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2.113, i64 0, i64 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i71, %entry.split ], [ %call.i72, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i10 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %extern_stage_name) #15
  %call.i13 = tail call i8* @halide_string_to_string(i8* %call.i10, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1.112, i64 0, i64 0)) #15
  %conv.i = sext i32 %result to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %call.i13, i8* %ref.tmp.sroa.16.0, i64 %conv.i, i32 1) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i16 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 %result
}

; Function Attrs: nounwind
define weak i32 @halide_error_explicit_bounds_too_small(i8* %user_context, i8* %func_name, i8* %var_name, i32 %min_bound, i32 %max_bound, i32 %min_required, i32 %max_required) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i151 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3.114, i64 0, i64 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i152 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3.114, i64 0, i64 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i151, %entry.split ], [ %call.i152, %if.then6.i ]
  %ref.tmp.sroa.34.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i18 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.34.0, i8* %var_name) #15
  %call.i21 = tail call i8* @halide_string_to_string(i8* %call.i18, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4.115, i64 0, i64 0)) #15
  %call.i24 = tail call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.34.0, i8* %func_name) #15
  %call.i27 = tail call i8* @halide_string_to_string(i8* %call.i24, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5.116, i64 0, i64 0)) #15
  %conv.i = sext i32 %min_bound to i64
  %call.i30 = tail call i8* @halide_int64_to_string(i8* %call.i27, i8* %ref.tmp.sroa.34.0, i64 %conv.i, i32 1) #15
  %call.i33 = tail call i8* @halide_string_to_string(i8* %call.i30, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.117, i64 0, i64 0)) #15
  %conv.i36 = sext i32 %max_bound to i64
  %call.i37 = tail call i8* @halide_int64_to_string(i8* %call.i33, i8* %ref.tmp.sroa.34.0, i64 %conv.i36, i32 1) #15
  %call.i40 = tail call i8* @halide_string_to_string(i8* %call.i37, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.7.118, i64 0, i64 0)) #15
  %conv.i43 = sext i32 %min_required to i64
  %call.i44 = tail call i8* @halide_int64_to_string(i8* %call.i40, i8* %ref.tmp.sroa.34.0, i64 %conv.i43, i32 1) #15
  %call.i47 = tail call i8* @halide_string_to_string(i8* %call.i44, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.117, i64 0, i64 0)) #15
  %conv.i50 = sext i32 %max_required to i64
  %call.i51 = tail call i8* @halide_int64_to_string(i8* %call.i47, i8* %ref.tmp.sroa.34.0, i64 %conv.i50, i32 1) #15
  %call.i54 = tail call i8* @halide_string_to_string(i8* %call.i51, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.119, i64 0, i64 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i54 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -2
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_type(i8* %user_context, i8* %func_name, i32 %type_given_bits, i32 %correct_type_bits) local_unnamed_addr #4 {
entry:
  %type_given_bits.addr = alloca i32, align 4
  %correct_type_bits.addr = alloca i32, align 4
  %correct_type = alloca %struct.halide_type_t, align 2
  %type_given = alloca %struct.halide_type_t, align 2
  store i32 %type_given_bits, i32* %type_given_bits.addr, align 4, !tbaa !41
  store i32 %correct_type_bits, i32* %correct_type_bits.addr, align 4, !tbaa !41
  %0 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %correct_type, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0) #12
  store i8 0, i8* %0, align 2, !tbaa !304
  %bits.i = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %correct_type, i64 0, i32 1
  store i8 0, i8* %bits.i, align 1, !tbaa !144
  %lanes.i = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %correct_type, i64 0, i32 2
  store i16 0, i16* %lanes.i, align 2, !tbaa !305
  %1 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %type_given, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1) #12
  store i8 0, i8* %1, align 2, !tbaa !304
  %bits.i8 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %type_given, i64 0, i32 1
  store i8 0, i8* %bits.i8, align 1, !tbaa !144
  %lanes.i9 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %type_given, i64 0, i32 2
  store i16 0, i16* %lanes.i9, align 2, !tbaa !305
  %2 = bitcast i32* %correct_type_bits.addr to i8*
  %call = call i8* @memcpy(i8* nonnull %0, i8* nonnull %2, i64 4) #15
  %3 = bitcast i32* %type_given_bits.addr to i8*
  %call1 = call i8* @memcpy(i8* nonnull %1, i8* nonnull %3, i64 4) #15
  %call.i = call i8* @malloc(i64 1024) #15
  %tobool.not.i12 = icmp eq i8* %call.i, null
  br i1 %tobool.not.i12, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i151 = call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i152 = call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* %func_name) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i151, %entry.split ], [ %call.i152, %if.then6.i ]
  %ref.tmp.sroa.18.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i18 = call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.9.120, i64 0, i64 0)) #15
  %call.i21 = call i8* @halide_type_to_string(i8* %call.i18, i8* %ref.tmp.sroa.18.0, %struct.halide_type_t* nonnull %correct_type) #15
  %call.i24 = call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.10.121, i64 0, i64 0)) #15
  %call.i27 = call i8* @halide_type_to_string(i8* %call.i24, i8* %ref.tmp.sroa.18.0, %struct.halide_type_t* nonnull %type_given) #15
  br i1 %tobool.not.i12, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i27 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #15
  call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  call void @free(i8* %call.i) #15
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0) #12
  ret i32 -3
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_dimensions(i8* %user_context, i8* %func_name, i32 %dimensions_given, i32 %correct_dimensions) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* %func_name) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.11.122, i64 0, i64 0)) #15
  %conv.i = sext i32 %correct_dimensions to i64
  %call.i14 = tail call i8* @halide_int64_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i64 %conv.i, i32 1) #15
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.12.123, i64 0, i64 0)) #15
  %conv.i20 = sext i32 %dimensions_given to i64
  %call.i21 = tail call i8* @halide_int64_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i64 %conv.i20, i32 1) #15
  %call.i24 = tail call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.13.124, i64 0, i64 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i24 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -43
}

; Function Attrs: nounwind
define weak i32 @halide_error_access_out_of_bounds(i8* %user_context, i8* %func_name, i32 %dimension, i32 %min_touched, i32 %max_touched, i32 %min_valid, i32 %max_valid) local_unnamed_addr #4 {
entry:
  %cmp = icmp slt i32 %min_touched, %min_valid
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call.i = tail call i8* @malloc(i64 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.split, label %if.then6.i

if.then.split:                                    ; preds = %if.then
  %call.i271 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %if.then
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i272 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* %func_name) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %if.then.split, %if.then6.i
  %phi.call = phi i8* [ %call.i271, %if.then.split ], [ %call.i272, %if.then6.i ]
  %ref.tmp.sroa.22.0 = phi i8* [ null, %if.then.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i30 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.14.125, i64 0, i64 0)) #15
  %conv.i = sext i32 %min_touched to i64
  %call.i33 = tail call i8* @halide_int64_to_string(i8* %call.i30, i8* %ref.tmp.sroa.22.0, i64 %conv.i, i32 1) #15
  %call.i36 = tail call i8* @halide_string_to_string(i8* %call.i33, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.15.126, i64 0, i64 0)) #15
  %conv.i39 = sext i32 %min_valid to i64
  %call.i40 = tail call i8* @halide_int64_to_string(i8* %call.i36, i8* %ref.tmp.sroa.22.0, i64 %conv.i39, i32 1) #15
  %call.i43 = tail call i8* @halide_string_to_string(i8* %call.i40, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.16.127, i64 0, i64 0)) #15
  %conv.i46 = sext i32 %dimension to i64
  %call.i47 = tail call i8* @halide_int64_to_string(i8* %call.i43, i8* %ref.tmp.sroa.22.0, i64 %conv.i46, i32 1) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #15
  br label %if.end17.sink.split

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i47 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %if.end17.sink.split

if.else:                                          ; preds = %entry
  %cmp7 = icmp sgt i32 %max_touched, %max_valid
  br i1 %cmp7, label %if.then8, label %if.end17

if.then8:                                         ; preds = %if.else
  %call.i53 = tail call i8* @malloc(i64 1024) #15
  %tobool.not.i56 = icmp eq i8* %call.i53, null
  br i1 %tobool.not.i56, label %if.then8.split, label %if.then6.i59

if.then8.split:                                   ; preds = %if.then8
  %call.i653 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62

if.then6.i59:                                     ; preds = %if.then8
  %add.ptr.i57 = getelementptr inbounds i8, i8* %call.i53, i64 1023
  store i8 0, i8* %add.ptr.i57, align 1, !tbaa !18
  %call.i654 = tail call i8* @halide_string_to_string(i8* nonnull %call.i53, i8* nonnull %add.ptr.i57, i8* %func_name) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62: ; preds = %if.then8.split, %if.then6.i59
  %phi.call5 = phi i8* [ %call.i653, %if.then8.split ], [ %call.i654, %if.then6.i59 ]
  %ref.tmp9.sroa.22.0 = phi i8* [ null, %if.then8.split ], [ %add.ptr.i57, %if.then6.i59 ]
  %call.i68 = tail call i8* @halide_string_to_string(i8* %phi.call5, i8* %ref.tmp9.sroa.22.0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.14.125, i64 0, i64 0)) #15
  %conv.i71 = sext i32 %max_touched to i64
  %call.i72 = tail call i8* @halide_int64_to_string(i8* %call.i68, i8* %ref.tmp9.sroa.22.0, i64 %conv.i71, i32 1) #15
  %call.i75 = tail call i8* @halide_string_to_string(i8* %call.i72, i8* %ref.tmp9.sroa.22.0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.17.128, i64 0, i64 0)) #15
  %conv.i78 = sext i32 %max_valid to i64
  %call.i79 = tail call i8* @halide_int64_to_string(i8* %call.i75, i8* %ref.tmp9.sroa.22.0, i64 %conv.i78, i32 1) #15
  %call.i82 = tail call i8* @halide_string_to_string(i8* %call.i79, i8* %ref.tmp9.sroa.22.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.16.127, i64 0, i64 0)) #15
  %conv.i85 = sext i32 %dimension to i64
  %call.i86 = tail call i8* @halide_int64_to_string(i8* %call.i82, i8* %ref.tmp9.sroa.22.0, i64 %conv.i85, i32 1) #15
  br i1 %tobool.not.i56, label %if.then.i90, label %if.else.i100

if.then.i90:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #15
  br label %if.end17.sink.split

if.else.i100:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62
  %sub.ptr.lhs.cast.i.i95 = ptrtoint i8* %call.i86 to i64
  %sub.ptr.rhs.cast.i.i96 = ptrtoint i8* %call.i53 to i64
  %sub.ptr.sub.i.i97 = sub i64 1, %sub.ptr.rhs.cast.i.i96
  %add.i.i98 = add i64 %sub.ptr.sub.i.i97, %sub.ptr.lhs.cast.i.i95
  %call.i.i99 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i53, i64 %add.i.i98) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i53) #15
  br label %if.end17.sink.split

if.end17.sink.split:                              ; preds = %if.else.i100, %if.then.i90, %if.else.i, %if.then.i
  %call.i53.sink = phi i8* [ %call.i, %if.else.i ], [ null, %if.then.i ], [ %call.i53, %if.else.i100 ], [ null, %if.then.i90 ]
  tail call void @free(i8* %call.i53.sink) #15
  br label %if.end17

if.end17:                                         ; preds = %if.end17.sink.split, %if.else
  ret i32 -4
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_allocation_too_large(i8* %user_context, i8* %buffer_name, i64 %allocation_size, i64 %max_size) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.18.129, i64 0, i64 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.18.129, i64 0, i64 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %buffer_name) #15
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #15
  %call.i17 = tail call i8* @halide_uint64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %allocation_size, i32 1) #15
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.20.131, i64 0, i64 0)) #15
  %call.i23 = tail call i8* @halide_uint64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_size, i32 1) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -5
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_extents_negative(i8* %user_context, i8* %buffer_name, i32 %dimension, i32 %extent) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i91 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.21.132, i64 0, i64 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i92 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.21.132, i64 0, i64 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i91, %entry.split ], [ %call.i92, %if.then6.i ]
  %ref.tmp.sroa.22.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i12 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.22.0, i8* %buffer_name) #15
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.22.133, i64 0, i64 0)) #15
  %conv.i = sext i32 %dimension to i64
  %call.i18 = tail call i8* @halide_int64_to_string(i8* %call.i15, i8* %ref.tmp.sroa.22.0, i64 %conv.i, i32 1) #15
  %call.i21 = tail call i8* @halide_string_to_string(i8* %call.i18, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.23.134, i64 0, i64 0)) #15
  %conv.i24 = sext i32 %extent to i64
  %call.i25 = tail call i8* @halide_int64_to_string(i8* %call.i21, i8* %ref.tmp.sroa.22.0, i64 %conv.i24, i32 1) #15
  %call.i28 = tail call i8* @halide_string_to_string(i8* %call.i25, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.119, i64 0, i64 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i28 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -28
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_extents_too_large(i8* %user_context, i8* %buffer_name, i64 %actual_size, i64 %max_size) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.24.135, i64 0, i64 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.24.135, i64 0, i64 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %buffer_name) #15
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #15
  %call.i17 = tail call i8* @halide_int64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %actual_size, i32 1) #15
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.20.131, i64 0, i64 0)) #15
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_size, i32 1) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -6
}

; Function Attrs: nounwind
define weak i32 @halide_error_constraints_make_required_region_smaller(i8* %user_context, i8* %buffer_name, i32 %dimension, i32 %constrained_min, i32 %constrained_extent, i32 %required_min, i32 %required_extent) local_unnamed_addr #4 {
entry:
  %add = add i32 %required_min, -1
  %sub = add i32 %add, %required_extent
  %add1 = add i32 %constrained_min, -1
  %sub2 = add i32 %add1, %constrained_extent
  %call.i = tail call i8* @malloc(i64 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i231 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.25.136, i64 0, i64 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i232 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.25.136, i64 0, i64 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i231, %entry.split ], [ %call.i232, %if.then6.i ]
  %ref.tmp.sroa.38.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i26 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.38.0, i8* %buffer_name) #15
  %call.i29 = tail call i8* @halide_string_to_string(i8* %call.i26, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.26.137, i64 0, i64 0)) #15
  %conv.i = sext i32 %dimension to i64
  %call.i32 = tail call i8* @halide_int64_to_string(i8* %call.i29, i8* %ref.tmp.sroa.38.0, i64 %conv.i, i32 1) #15
  %call.i35 = tail call i8* @halide_string_to_string(i8* %call.i32, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.27.138, i64 0, i64 0)) #15
  %call.i38 = tail call i8* @halide_string_to_string(i8* %call.i35, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.28.139, i64 0, i64 0)) #15
  %conv.i41 = sext i32 %required_min to i64
  %call.i42 = tail call i8* @halide_int64_to_string(i8* %call.i38, i8* %ref.tmp.sroa.38.0, i64 %conv.i41, i32 1) #15
  %call.i45 = tail call i8* @halide_string_to_string(i8* %call.i42, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.117, i64 0, i64 0)) #15
  %conv.i48 = sext i32 %sub to i64
  %call.i49 = tail call i8* @halide_int64_to_string(i8* %call.i45, i8* %ref.tmp.sroa.38.0, i64 %conv.i48, i32 1) #15
  %call.i52 = tail call i8* @halide_string_to_string(i8* %call.i49, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.27.138, i64 0, i64 0)) #15
  %call.i55 = tail call i8* @halide_string_to_string(i8* %call.i52, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.29.140, i64 0, i64 0)) #15
  %conv.i58 = sext i32 %constrained_min to i64
  %call.i59 = tail call i8* @halide_int64_to_string(i8* %call.i55, i8* %ref.tmp.sroa.38.0, i64 %conv.i58, i32 1) #15
  %call.i62 = tail call i8* @halide_string_to_string(i8* %call.i59, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.117, i64 0, i64 0)) #15
  %conv.i65 = sext i32 %sub2 to i64
  %call.i66 = tail call i8* @halide_int64_to_string(i8* %call.i62, i8* %ref.tmp.sroa.38.0, i64 %conv.i65, i32 1) #15
  %call.i69 = tail call i8* @halide_string_to_string(i8* %call.i66, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i69 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -7
}

; Function Attrs: nounwind
define weak i32 @halide_error_constraint_violated(i8* %user_context, i8* %var, i32 %val, i8* %constrained_var, i32 %constrained_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i111 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.31.142, i64 0, i64 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i112 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.31.142, i64 0, i64 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i111, %entry.split ], [ %call.i112, %if.then6.i ]
  %ref.tmp.sroa.26.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i14 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.26.0, i8* %var) #15
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32.143, i64 0, i64 0)) #15
  %conv.i = sext i32 %val to i64
  %call.i20 = tail call i8* @halide_int64_to_string(i8* %call.i17, i8* %ref.tmp.sroa.26.0, i64 %conv.i, i32 1) #15
  %call.i23 = tail call i8* @halide_string_to_string(i8* %call.i20, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.33.144, i64 0, i64 0)) #15
  %call.i26 = tail call i8* @halide_string_to_string(i8* %call.i23, i8* %ref.tmp.sroa.26.0, i8* %constrained_var) #15
  %call.i29 = tail call i8* @halide_string_to_string(i8* %call.i26, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32.143, i64 0, i64 0)) #15
  %conv.i32 = sext i32 %constrained_val to i64
  %call.i33 = tail call i8* @halide_int64_to_string(i8* %call.i29, i8* %ref.tmp.sroa.26.0, i64 %conv.i32, i32 1) #15
  %call.i36 = tail call i8* @halide_string_to_string(i8* %call.i33, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.119, i64 0, i64 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i36 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -8
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_small_i64(i8* %user_context, i8* %param_name, i64 %val, i64 %min_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #15
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #15
  %call.i17 = tail call i8* @halide_int64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #15
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.35.146, i64 0, i64 0)) #15
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %min_val, i32 1) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -9
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_small_u64(i8* %user_context, i8* %param_name, i64 %val, i64 %min_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #15
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #15
  %call.i17 = tail call i8* @halide_uint64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #15
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.35.146, i64 0, i64 0)) #15
  %call.i23 = tail call i8* @halide_uint64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %min_val, i32 1) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -9
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_small_f64(i8* %user_context, i8* %param_name, double %val, double %min_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #15
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #15
  %call.i17 = tail call i8* @halide_double_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, double %val, i32 1) #15
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.35.146, i64 0, i64 0)) #15
  %call.i23 = tail call i8* @halide_double_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, double %min_val, i32 1) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -9
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_large_i64(i8* %user_context, i8* %param_name, i64 %val, i64 %max_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #15
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #15
  %call.i17 = tail call i8* @halide_int64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #15
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.36, i64 0, i64 0)) #15
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_val, i32 1) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -10
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_large_u64(i8* %user_context, i8* %param_name, i64 %val, i64 %max_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #15
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #15
  %call.i17 = tail call i8* @halide_uint64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #15
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.36, i64 0, i64 0)) #15
  %call.i23 = tail call i8* @halide_uint64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_val, i32 1) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -10
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_large_f64(i8* %user_context, i8* %param_name, double %val, double %max_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #15
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #15
  %call.i17 = tail call i8* @halide_double_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, double %val, i32 1) #15
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.36, i64 0, i64 0)) #15
  %call.i23 = tail call i8* @halide_double_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, double %max_val, i32 1) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -10
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_error_out_of_memory(i8* %user_context) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.37, i64 0, i64 0)) #15
  ret i32 -11
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_argument_is_null(i8* %user_context, i8* %buffer_name) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i51 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.38, i64 0, i64 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i52 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.38, i64 0, i64 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i51, %entry.split ], [ %call.i52, %if.then6.i ]
  %ref.tmp.sroa.14.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i8 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.14.0, i8* %buffer_name) #15
  %call.i11 = tail call i8* @halide_string_to_string(i8* %call.i8, i8* %ref.tmp.sroa.14.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.39, i64 0, i64 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i11 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -12
}

; Function Attrs: nounwind
define weak i32 @halide_error_debug_to_file_failed(i8* %user_context, i8* %func, i8* %filename, i32 %error_code) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.40, i64 0, i64 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.40, i64 0, i64 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %func) #15
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.41.147, i64 0, i64 0)) #15
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i8* %filename) #15
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.42, i64 0, i64 0)) #15
  %conv.i = sext i32 %error_code to i64
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %conv.i, i32 1) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -13
}

; Function Attrs: nounwind
define weak i32 @halide_error_unaligned_host_ptr(i8* %user_context, i8* %func, i32 %alignment) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i71 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i64 0, i64 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i72 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i64 0, i64 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i71, %entry.split ], [ %call.i72, %if.then6.i ]
  %ref.tmp.sroa.18.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i10 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.18.0, i8* %func) #15
  %call.i13 = tail call i8* @halide_string_to_string(i8* %call.i10, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.44, i64 0, i64 0)) #15
  %conv.i = sext i32 %alignment to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %call.i13, i8* %ref.tmp.sroa.18.0, i64 %conv.i, i32 1) #15
  %call.i19 = tail call i8* @halide_string_to_string(i8* %call.i16, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.45, i64 0, i64 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i19 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -24
}

; Function Attrs: nounwind
define weak i32 @halide_error_device_dirty_with_no_device_support(i8* %user_context, i8* %func) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i61 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.46, i64 0, i64 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i62 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.46, i64 0, i64 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i61, %entry.split ], [ %call.i62, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i9 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %func) #15
  %call.i12 = tail call i8* @halide_string_to_string(i8* %call.i9, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.47, i64 0, i64 0)) #15
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.48, i64 0, i64 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i15 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -44
}

; Function Attrs: nounwind
define weak i32 @halide_error_host_is_null(i8* %user_context, i8* %func) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i51 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i64 0, i64 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i52 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i64 0, i64 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i51, %entry.split ], [ %call.i52, %if.then6.i ]
  %ref.tmp.sroa.14.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i8 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.14.0, i8* %func) #15
  %call.i11 = tail call i8* @halide_string_to_string(i8* %call.i8, i8* %ref.tmp.sroa.14.0, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.49, i64 0, i64 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i11 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -34
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_fold(i8* %user_context, i8* %func_name, i8* %var_name, i8* %loop_name) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i91 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.50.148, i64 0, i64 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i92 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.50.148, i64 0, i64 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i91, %entry.split ], [ %call.i92, %if.then6.i ]
  %ref.tmp.sroa.22.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i12 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.22.0, i8* %var_name) #15
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i64 0, i64 0)) #15
  %call.i18 = tail call i8* @halide_string_to_string(i8* %call.i15, i8* %ref.tmp.sroa.22.0, i8* %func_name) #15
  %call.i21 = tail call i8* @halide_string_to_string(i8* %call.i18, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.52, i64 0, i64 0)) #15
  %call.i24 = tail call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.22.0, i8* %loop_name) #15
  %call.i27 = tail call i8* @halide_string_to_string(i8* %call.i24, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i27 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -25
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_extern_fold(i8* %user_context, i8* %func_name, i32 %dim, i32 %min, i32 %extent, i32 %valid_min, i32 %fold_factor) local_unnamed_addr #4 {
entry:
  %cmp = icmp slt i32 %min, %valid_min
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %add = add nsw i32 %extent, %min
  %add1 = add nsw i32 %fold_factor, %valid_min
  %cmp2 = icmp sgt i32 %add, %add1
  br i1 %cmp2, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false, %entry
  %call.i = tail call i8* @malloc(i64 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.split, label %if.then6.i

if.then.split:                                    ; preds = %if.then
  %call.i521 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i64 0, i64 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %if.then
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i522 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i64 0, i64 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %if.then.split, %if.then6.i
  %phi.call = phi i8* [ %call.i521, %if.then.split ], [ %call.i522, %if.then6.i ]
  %ref.tmp.sroa.36.0 = phi i8* [ null, %if.then.split ], [ %add.ptr.i, %if.then6.i ]
  %conv.i = sext i32 %dim to i64
  %call.i55 = tail call i8* @halide_int64_to_string(i8* %phi.call, i8* %ref.tmp.sroa.36.0, i64 %conv.i, i32 1) #15
  %call.i58 = tail call i8* @halide_string_to_string(i8* %call.i55, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i64 0, i64 0)) #15
  %call.i61 = tail call i8* @halide_string_to_string(i8* %call.i58, i8* %ref.tmp.sroa.36.0, i8* %func_name) #15
  %call.i64 = tail call i8* @halide_string_to_string(i8* %call.i61, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.54, i64 0, i64 0)) #15
  %conv.i67 = sext i32 %min to i64
  %call.i68 = tail call i8* @halide_int64_to_string(i8* %call.i64, i8* %ref.tmp.sroa.36.0, i64 %conv.i67, i32 1) #15
  %call.i71 = tail call i8* @halide_string_to_string(i8* %call.i68, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #15
  %add9 = add nsw i32 %extent, %min
  %sub = add nsw i32 %add9, -1
  %conv.i74 = sext i32 %sub to i64
  %call.i75 = tail call i8* @halide_int64_to_string(i8* %call.i71, i8* %ref.tmp.sroa.36.0, i64 %conv.i74, i32 1) #15
  %call.i78 = tail call i8* @halide_string_to_string(i8* %call.i75, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.56, i64 0, i64 0)) #15
  %call.i81 = tail call i8* @halide_string_to_string(i8* %call.i78, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.57, i64 0, i64 0)) #15
  %conv.i84 = sext i32 %valid_min to i64
  %call.i85 = tail call i8* @halide_int64_to_string(i8* %call.i81, i8* %ref.tmp.sroa.36.0, i64 %conv.i84, i32 1) #15
  %call.i88 = tail call i8* @halide_string_to_string(i8* %call.i85, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #15
  %add15 = add nsw i32 %fold_factor, %valid_min
  %sub16 = add nsw i32 %add15, -1
  %conv.i91 = sext i32 %sub16 to i64
  %call.i92 = tail call i8* @halide_int64_to_string(i8* %call.i88, i8* %ref.tmp.sroa.36.0, i64 %conv.i91, i32 1) #15
  %call.i95 = tail call i8* @halide_string_to_string(i8* %call.i92, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.58.149, i64 0, i64 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #15
  br label %if.end

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i95 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %if.end

if.else:                                          ; preds = %lor.lhs.false
  %call.i101 = tail call i8* @malloc(i64 1024) #15
  %tobool.not.i104 = icmp eq i8* %call.i101, null
  br i1 %tobool.not.i104, label %if.else.split, label %if.then6.i107

if.else.split:                                    ; preds = %if.else
  %call.i1133 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i64 0, i64 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110

if.then6.i107:                                    ; preds = %if.else
  %add.ptr.i105 = getelementptr inbounds i8, i8* %call.i101, i64 1023
  store i8 0, i8* %add.ptr.i105, align 1, !tbaa !18
  %call.i1134 = tail call i8* @halide_string_to_string(i8* nonnull %call.i101, i8* nonnull %add.ptr.i105, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i64 0, i64 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110: ; preds = %if.else.split, %if.then6.i107
  %phi.call5 = phi i8* [ %call.i1133, %if.else.split ], [ %call.i1134, %if.then6.i107 ]
  %ref.tmp19.sroa.34.0 = phi i8* [ null, %if.else.split ], [ %add.ptr.i105, %if.then6.i107 ]
  %conv.i116 = sext i32 %dim to i64
  %call.i117 = tail call i8* @halide_int64_to_string(i8* %phi.call5, i8* %ref.tmp19.sroa.34.0, i64 %conv.i116, i32 1) #15
  %call.i120 = tail call i8* @halide_string_to_string(i8* %call.i117, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i64 0, i64 0)) #15
  %call.i123 = tail call i8* @halide_string_to_string(i8* %call.i120, i8* %ref.tmp19.sroa.34.0, i8* %func_name) #15
  %call.i126 = tail call i8* @halide_string_to_string(i8* %call.i123, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.54, i64 0, i64 0)) #15
  %conv.i129 = sext i32 %min to i64
  %call.i130 = tail call i8* @halide_int64_to_string(i8* %call.i126, i8* %ref.tmp19.sroa.34.0, i64 %conv.i129, i32 1) #15
  %call.i133 = tail call i8* @halide_string_to_string(i8* %call.i130, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #15
  %sub28 = add nsw i32 %add, -1
  %conv.i136 = sext i32 %sub28 to i64
  %call.i137 = tail call i8* @halide_int64_to_string(i8* %call.i133, i8* %ref.tmp19.sroa.34.0, i64 %conv.i136, i32 1) #15
  %call.i140 = tail call i8* @halide_string_to_string(i8* %call.i137, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.56, i64 0, i64 0)) #15
  %call.i143 = tail call i8* @halide_string_to_string(i8* %call.i140, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.59.150, i64 0, i64 0)) #15
  %call.i146 = tail call i8* @halide_string_to_string(i8* %call.i143, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.60.151, i64 0, i64 0)) #15
  %conv.i149 = sext i32 %fold_factor to i64
  %call.i150 = tail call i8* @halide_int64_to_string(i8* %call.i146, i8* %ref.tmp19.sroa.34.0, i64 %conv.i149, i32 1) #15
  %call.i153 = tail call i8* @halide_string_to_string(i8* %call.i150, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #15
  br i1 %tobool.not.i104, label %if.then.i157, label %if.else.i167

if.then.i157:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #15
  br label %if.end

if.else.i167:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110
  %sub.ptr.lhs.cast.i.i162 = ptrtoint i8* %call.i153 to i64
  %sub.ptr.rhs.cast.i.i163 = ptrtoint i8* %call.i101 to i64
  %sub.ptr.sub.i.i164 = sub i64 1, %sub.ptr.rhs.cast.i.i163
  %add.i.i165 = add i64 %sub.ptr.sub.i.i164, %sub.ptr.lhs.cast.i.i162
  %call.i.i166 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i101, i64 %add.i.i165) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i101) #15
  br label %if.end

if.end:                                           ; preds = %if.else.i167, %if.then.i157, %if.else.i, %if.then.i
  %call.i101.sink = phi i8* [ %call.i, %if.else.i ], [ null, %if.then.i ], [ %call.i101, %if.else.i167 ], [ null, %if.then.i157 ]
  tail call void @free(i8* %call.i101.sink) #15
  ret i32 -35
}

; Function Attrs: nounwind
define weak i32 @halide_error_fold_factor_too_small(i8* %user_context, i8* %func_name, i8* %var_name, i32 %fold_factor, i8* %loop_name, i32 %required_extent) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i131 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.61.152, i64 0, i64 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i132 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.61.152, i64 0, i64 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i131, %entry.split ], [ %call.i132, %if.then6.i ]
  %ref.tmp.sroa.30.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %conv.i = sext i32 %fold_factor to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %phi.call, i8* %ref.tmp.sroa.30.0, i64 %conv.i, i32 1) #15
  %call.i19 = tail call i8* @halide_string_to_string(i8* %call.i16, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.62, i64 0, i64 0)) #15
  %call.i22 = tail call i8* @halide_string_to_string(i8* %call.i19, i8* %ref.tmp.sroa.30.0, i8* %var_name) #15
  %call.i25 = tail call i8* @halide_string_to_string(i8* %call.i22, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i64 0, i64 0)) #15
  %call.i28 = tail call i8* @halide_string_to_string(i8* %call.i25, i8* %ref.tmp.sroa.30.0, i8* %func_name) #15
  %call.i31 = tail call i8* @halide_string_to_string(i8* %call.i28, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.63, i64 0, i64 0)) #15
  %call.i34 = tail call i8* @halide_string_to_string(i8* %call.i31, i8* %ref.tmp.sroa.30.0, i8* %loop_name) #15
  %call.i37 = tail call i8* @halide_string_to_string(i8* %call.i34, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32.143, i64 0, i64 0)) #15
  %conv.i40 = sext i32 %required_extent to i64
  %call.i41 = tail call i8* @halide_int64_to_string(i8* %call.i37, i8* %ref.tmp.sroa.30.0, i64 %conv.i40, i32 1) #15
  %call.i44 = tail call i8* @halide_string_to_string(i8* %call.i41, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.64.153, i64 0, i64 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i44 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -26
}

; Function Attrs: nounwind
define weak i32 @halide_error_requirement_failed(i8* %user_context, i8* %condition, i8* %message) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i61 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.65, i64 0, i64 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i62 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.65, i64 0, i64 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i61, %entry.split ], [ %call.i62, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i9 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %condition) #15
  %call.i12 = tail call i8* @halide_string_to_string(i8* %call.i9, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.66, i64 0, i64 0)) #15
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.16.0, i8* %message) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i15 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -27
}

; Function Attrs: nounwind
define weak i32 @halide_error_specialize_fail(i8* %user_context, i8* %message) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i41 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.67, i64 0, i64 0)) #15
  %call.i75 = tail call i8* @halide_string_to_string(i8* %call.i41, i8* null, i8* %message) #15
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i42 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.67, i64 0, i64 0)) #15
  %call.i7 = tail call i8* @halide_string_to_string(i8* %call.i42, i8* nonnull %add.ptr.i, i8* %message) #15
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i7 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -31
}

; Function Attrs: nounwind
define weak i32 @halide_error_no_device_interface(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.68, i64 0, i64 0)) #15
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.68, i64 0, i64 0)) #15
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -19
}

; Function Attrs: nounwind
define weak i32 @halide_error_device_interface_no_device(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.69, i64 0, i64 0)) #15
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.69, i64 0, i64 0)) #15
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -36
}

; Function Attrs: nounwind
define weak i32 @halide_error_host_and_device_dirty(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.70, i64 0, i64 0)) #15
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.70, i64 0, i64 0)) #15
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -37
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_is_null(i8* %user_context, i8* %routine) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i51 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.71, i64 0, i64 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i52 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.71, i64 0, i64 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i51, %entry.split ], [ %call.i52, %if.then6.i ]
  %ref.tmp.sroa.14.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i8 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.14.0, i8* %routine) #15
  %call.i11 = tail call i8* @halide_string_to_string(i8* %call.i8, i8* %ref.tmp.sroa.14.0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.72, i64 0, i64 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i11 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -38
}

; Function Attrs: nounwind
define weak i32 @halide_error_storage_bound_too_small(i8* %user_context, i8* %func_name, i8* %var_name, i32 %provided_size, i32 %required_size) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i111 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.73, i64 0, i64 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i112 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.73, i64 0, i64 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i111, %entry.split ], [ %call.i112, %if.then6.i ]
  %ref.tmp.sroa.26.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %conv.i = sext i32 %provided_size to i64
  %call.i14 = tail call i8* @halide_int64_to_string(i8* %phi.call, i8* %ref.tmp.sroa.26.0, i64 %conv.i, i32 1) #15
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.62, i64 0, i64 0)) #15
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.26.0, i8* %var_name) #15
  %call.i23 = tail call i8* @halide_string_to_string(i8* %call.i20, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i64 0, i64 0)) #15
  %call.i26 = tail call i8* @halide_string_to_string(i8* %call.i23, i8* %ref.tmp.sroa.26.0, i8* %func_name) #15
  %call.i29 = tail call i8* @halide_string_to_string(i8* %call.i26, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.74, i64 0, i64 0)) #15
  %conv.i32 = sext i32 %required_size to i64
  %call.i33 = tail call i8* @halide_int64_to_string(i8* %call.i29, i8* %ref.tmp.sroa.26.0, i64 %conv.i32, i32 1) #15
  %call.i36 = tail call i8* @halide_string_to_string(i8* %call.i33, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.64.153, i64 0, i64 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i36 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -45
}

; Function Attrs: nounwind
define weak i32 @halide_error_device_crop_failed(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.75, i64 0, i64 0)) #15
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.75, i64 0, i64 0)) #15
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -41
}

; Function Attrs: nounwind mustprogress
define weak void @halide_profiler_shutdown() #0 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #16
  %sampling_thread = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 7
  %0 = load %struct.halide_thread*, %struct.halide_thread** %sampling_thread, align 8, !tbaa !337
  %tobool.not = icmp eq %struct.halide_thread* %0, null
  br i1 %tobool.not, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %current_func = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 3
  store i32 -2, i32* %current_func, align 8, !tbaa !339
  tail call void @halide_join_thread(%struct.halide_thread* nonnull %0) #15
  store %struct.halide_thread* null, %struct.halide_thread** %sampling_thread, align 8, !tbaa !337
  store i32 -1, i32* %current_func, align 8, !tbaa !339
  tail call void @halide_profiler_report_unlocked(i8* null, %struct.halide_profiler_state* nonnull %call) #16
  tail call void @halide_profiler_reset_unlocked(%struct.halide_profiler_state* nonnull %call) #16
  br label %cleanup

cleanup:                                          ; preds = %if.end, %entry
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak %struct.halide_profiler_state* @halide_profiler_get_state() local_unnamed_addr #2 {
entry:
  ret %struct.halide_profiler_state* @_ZZ25halide_profiler_get_stateE1s
}

; Function Attrs: nounwind
define weak void @halide_profiler_report_unlocked(i8* %user_context, %struct.halide_profiler_state* %s) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit, label %if.then6.i

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit: ; preds = %if.then6.i, %entry
  %sstr.sroa.125.0 = phi i8* [ %add.ptr.i, %if.then6.i ], [ null, %entry ]
  %pipelines = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 5
  %p.0624 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !14
  %tobool.not625 = icmp eq %struct.halide_profiler_pipeline_stats* %p.0624, null
  br i1 %tobool.not625, label %for.cond.cleanup, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit
  %sub.ptr.rhs.cast.i.i348 = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i349 = sub i64 1, %sub.ptr.rhs.cast.i.i348
  br label %for.body

for.cond.cleanup:                                 ; preds = %cleanup181, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit
  %sstr.sroa.19.0.lcssa = phi i8* [ %call.i, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit ], [ %sstr.sroa.19.15, %cleanup181 ]
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %for.cond.cleanup
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %for.cond.cleanup
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %sstr.sroa.19.0.lcssa to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret void

for.body:                                         ; preds = %cleanup181, %for.body.lr.ph
  %p.0627 = phi %struct.halide_profiler_pipeline_stats* [ %p.0624, %for.body.lr.ph ], [ %p.0, %cleanup181 ]
  %sstr.sroa.19.0626 = phi i8* [ %call.i, %for.body.lr.ph ], [ %sstr.sroa.19.15, %cleanup181 ]
  %time = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 0
  %0 = load i64, i64* %time, align 8, !tbaa !340
  %conv = uitofp i64 %0 to float
  %div = fdiv float %conv, 1.000000e+06
  %runs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 11
  %1 = load i32, i32* %runs, align 8, !tbaa !342
  %tobool1.not = icmp eq i32 %1, 0
  br i1 %tobool1.not, label %cleanup181, label %if.end

if.end:                                           ; preds = %for.body
  br i1 %tobool.not.i, label %if.end.split, label %if.then.i278

if.end.split:                                     ; preds = %if.end
  %active_threads_numerator1 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 4
  %2 = load i64, i64* %active_threads_numerator1, align 8, !tbaa !343
  %active_threads_denominator2 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 5
  %3 = load i64, i64* %active_threads_denominator2, align 8, !tbaa !344
  %cmp3 = icmp eq i64 %2, %3
  %name4 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 6
  %4 = load i8*, i8** %name4, align 8, !tbaa !345
  %call.i2825 = tail call i8* @halide_string_to_string(i8* null, i8* %sstr.sroa.125.0, i8* %4) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit

if.then.i278:                                     ; preds = %if.end
  store i8 0, i8* %call.i, align 1, !tbaa !18
  %active_threads_numerator6 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 4
  %5 = load i64, i64* %active_threads_numerator6, align 8, !tbaa !343
  %active_threads_denominator7 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 5
  %6 = load i64, i64* %active_threads_denominator7, align 8, !tbaa !344
  %cmp8 = icmp eq i64 %5, %6
  %name9 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 6
  %7 = load i8*, i8** %name9, align 8, !tbaa !345
  %call.i28210 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* %sstr.sroa.125.0, i8* %7) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit: ; preds = %if.end.split, %if.then.i278
  %8 = phi i64 [ %2, %if.end.split ], [ %5, %if.then.i278 ]
  %9 = phi i64 [ %3, %if.end.split ], [ %6, %if.then.i278 ]
  %10 = phi i1 [ %cmp3, %if.end.split ], [ %cmp8, %if.then.i278 ]
  %phi.call = phi i8* [ %call.i2825, %if.end.split ], [ %call.i28210, %if.then.i278 ]
  %call.i285 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #15
  %call.i288 = tail call i8* @halide_string_to_string(i8* %call.i285, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.8.165, i64 0, i64 0)) #15
  %conv.i = fpext float %div to double
  %call.i291 = tail call i8* @halide_double_to_string(i8* %call.i288, i8* %sstr.sroa.125.0, double %conv.i, i32 0) #15
  %call.i294 = tail call i8* @halide_string_to_string(i8* %call.i291, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9.166, i64 0, i64 0)) #15
  %call.i297 = tail call i8* @halide_string_to_string(i8* %call.i294, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.10.167, i64 0, i64 0)) #15
  %samples = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 12
  %11 = load i32, i32* %samples, align 4, !tbaa !346
  %conv.i300 = sext i32 %11 to i64
  %call.i301 = tail call i8* @halide_int64_to_string(i8* %call.i297, i8* %sstr.sroa.125.0, i64 %conv.i300, i32 1) #15
  %call.i304 = tail call i8* @halide_string_to_string(i8* %call.i301, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.11.168, i64 0, i64 0)) #15
  %12 = load i32, i32* %runs, align 8, !tbaa !342
  %conv.i307 = sext i32 %12 to i64
  %call.i308 = tail call i8* @halide_int64_to_string(i8* %call.i304, i8* %sstr.sroa.125.0, i64 %conv.i307, i32 1) #15
  %call.i311 = tail call i8* @halide_string_to_string(i8* %call.i308, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.12.169, i64 0, i64 0)) #15
  %13 = load i32, i32* %runs, align 8, !tbaa !342
  %conv19 = sitofp i32 %13 to float
  %div20 = fdiv float %div, %conv19
  %conv.i314 = fpext float %div20 to double
  %call.i315 = tail call i8* @halide_double_to_string(i8* %call.i311, i8* %sstr.sroa.125.0, double %conv.i314, i32 0) #15
  %call.i318 = tail call i8* @halide_string_to_string(i8* %call.i315, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.13.170, i64 0, i64 0)) #15
  br i1 %10, label %if.end28, label %if.then24

if.then24:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit
  %conv3 = uitofp i64 %8 to double
  %conv5 = uitofp i64 %9 to double
  %add = fadd double %conv5, 1.000000e-10
  %div6 = fdiv double %conv3, %add
  %conv7 = fptrunc double %div6 to float
  %call.i321 = tail call i8* @halide_string_to_string(i8* %call.i318, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.14.171, i64 0, i64 0)) #15
  %conv.i324 = fpext float %conv7 to double
  %call.i325 = tail call i8* @halide_double_to_string(i8* %call.i321, i8* %sstr.sroa.125.0, double %conv.i324, i32 0) #15
  %call.i328 = tail call i8* @halide_string_to_string(i8* %call.i325, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #15
  br label %if.end28

if.end28:                                         ; preds = %if.then24, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit
  %sstr.sroa.19.1 = phi i8* [ %call.i318, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit ], [ %call.i328, %if.then24 ]
  %call.i331 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.1, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.15.172, i64 0, i64 0)) #15
  %num_allocs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 13
  %14 = load i32, i32* %num_allocs, align 8, !tbaa !347
  %conv.i334 = sext i32 %14 to i64
  %call.i335 = tail call i8* @halide_int64_to_string(i8* %call.i331, i8* %sstr.sroa.125.0, i64 %conv.i334, i32 1) #15
  %call.i338 = tail call i8* @halide_string_to_string(i8* %call.i335, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.16.173, i64 0, i64 0)) #15
  %memory_peak = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 2
  %15 = load i64, i64* %memory_peak, align 8, !tbaa !348
  %call.i341 = tail call i8* @halide_uint64_to_string(i8* %call.i338, i8* %sstr.sroa.125.0, i64 %15, i32 1) #15
  %call.i344 = tail call i8* @halide_string_to_string(i8* %call.i341, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.17.174, i64 0, i64 0)) #15
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit, label %if.then.i352

if.then.i352:                                     ; preds = %if.end28
  %sub.ptr.lhs.cast.i.i347 = ptrtoint i8* %call.i344 to i64
  %add.i.i350 = add i64 %sub.ptr.sub.i.i349, %sub.ptr.lhs.cast.i.i347
  %call.i.i351 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i350) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit: ; preds = %if.then.i352, %if.end28
  %retval.0.i = phi i8* [ %call.i, %if.then.i352 ], [ getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0), %if.end28 ]
  tail call void @halide_print(i8* %user_context, i8* nonnull %retval.0.i) #15
  %16 = load i64, i64* %time, align 8, !tbaa !340
  %tobool36.not = icmp eq i64 %16, 0
  br i1 %tobool36.not, label %lor.end, label %for.cond53.preheader

lor.end:                                          ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit
  %memory_total = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 3
  %17 = load i64, i64* %memory_total, align 8, !tbaa !349
  %tobool37.not = icmp eq i64 %17, 0
  br i1 %tobool37.not, label %for.cond41.preheader, label %for.cond53.preheader

for.cond41.preheader:                             ; preds = %lor.end
  %num_funcs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 9
  %18 = load i32, i32* %num_funcs, align 8, !tbaa !350
  %cmp42589 = icmp sgt i32 %18, 0
  br i1 %cmp42589, label %for.body44.lr.ph, label %cleanup181

for.body44.lr.ph:                                 ; preds = %for.cond41.preheader
  %funcs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 7
  %19 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %funcs, align 8, !tbaa !351
  %20 = zext i32 %18 to i64
  br label %for.body44

for.cond41:                                       ; preds = %for.body44
  %exitcond.not = icmp eq i64 %indvars.iv.next, %20
  br i1 %exitcond.not, label %cleanup181, label %for.body44, !llvm.loop !352

for.body44:                                       ; preds = %for.cond41, %for.body44.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body44.lr.ph ], [ %indvars.iv.next, %for.cond41 ]
  %stack_peak = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %19, i64 %indvars.iv, i32 4
  %21 = load i64, i64* %stack_peak, align 8, !tbaa !353
  %tobool45.not = icmp eq i64 %21, 0
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  br i1 %tobool45.not, label %for.cond41, label %for.cond53.preheader

for.cond53.preheader:                             ; preds = %for.body44, %lor.end, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit
  %num_funcs54 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 9
  %22 = load i32, i32* %num_funcs54, align 8, !tbaa !350
  %cmp55621 = icmp sgt i32 %22, 0
  br i1 %cmp55621, label %for.body57.lr.ph, label %cleanup181

for.body57.lr.ph:                                 ; preds = %for.cond53.preheader
  %funcs59 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 7
  br label %for.body57

for.body57:                                       ; preds = %cleanup172, %for.body57.lr.ph
  %indvars.iv630 = phi i64 [ 0, %for.body57.lr.ph ], [ %indvars.iv.next631, %cleanup172 ]
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit358, label %if.then.i356

if.then.i356:                                     ; preds = %for.body57
  store i8 0, i8* %call.i, align 1, !tbaa !18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit358

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit358: ; preds = %if.then.i356, %for.body57
  %23 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %funcs59, align 8, !tbaa !351
  %add.ptr61 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630
  %cmp62 = icmp eq i64 %indvars.iv630, 0
  br i1 %cmp62, label %land.lhs.true, label %if.end66

land.lhs.true:                                    ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit358
  %time63 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %add.ptr61, i64 0, i32 0
  %24 = load i64, i64* %time63, align 8, !tbaa !355
  %cmp64 = icmp eq i64 %24, 0
  br i1 %cmp64, label %cleanup172, label %if.end66

if.end66:                                         ; preds = %land.lhs.true, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit358
  %call.i361 = tail call i8* @halide_string_to_string(i8* %call.i, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.18.175, i64 0, i64 0)) #15
  %name68 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 7
  %25 = load i8*, i8** %name68, align 8, !tbaa !356
  %call.i364 = tail call i8* @halide_string_to_string(i8* %call.i361, i8* %sstr.sroa.125.0, i8* %25) #15
  %call.i367 = tail call i8* @halide_string_to_string(i8* %call.i364, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.19.176, i64 0, i64 0)) #15
  %sub.ptr.lhs.cast.i591 = ptrtoint i8* %call.i367 to i64
  %sub.ptr.sub.i592 = sub i64 %sub.ptr.lhs.cast.i591, %sub.ptr.rhs.cast.i.i348
  %cmp73593 = icmp ult i64 %sub.ptr.sub.i592, 25
  br i1 %cmp73593, label %while.body, label %while.end

while.body:                                       ; preds = %if.end66, %while.body
  %sstr.sroa.19.3594 = phi i8* [ %call.i384, %while.body ], [ %call.i367, %if.end66 ]
  %call.i384 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.3594, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #15
  %sub.ptr.lhs.cast.i = ptrtoint i8* %call.i384 to i64
  %sub.ptr.sub.i = sub i64 %sub.ptr.lhs.cast.i, %sub.ptr.rhs.cast.i.i348
  %cmp73 = icmp ult i64 %sub.ptr.sub.i, 25
  br i1 %cmp73, label %while.body, label %while.end, !llvm.loop !357

while.end:                                        ; preds = %while.body, %if.end66
  %sstr.sroa.19.3.lcssa = phi i8* [ %call.i367, %if.end66 ], [ %call.i384, %while.body ]
  %time75 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %add.ptr61, i64 0, i32 0
  %26 = load i64, i64* %time75, align 8, !tbaa !355
  %conv76 = uitofp i64 %26 to float
  %27 = load i32, i32* %runs, align 8, !tbaa !342
  %conv78 = sitofp i32 %27 to float
  %mul = fmul float %conv78, 1.000000e+06
  %div79 = fdiv float %conv76, %mul
  %conv.i387 = fpext float %div79 to double
  %call.i388 = tail call i8* @halide_double_to_string(i8* %sstr.sroa.19.3.lcssa, i8* %sstr.sroa.125.0, double %conv.i387, i32 0) #15
  %tobool.not.i390 = icmp eq i8* %call.i388, null
  br i1 %tobool.not.i390, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit, label %if.then.i393

if.then.i393:                                     ; preds = %while.end
  %add.ptr.i391 = getelementptr inbounds i8, i8* %call.i388, i64 -3
  %cmp.i = icmp ult i8* %add.ptr.i391, %call.i
  %spec.store.select.i = select i1 %cmp.i, i8* %call.i, i8* %add.ptr.i391
  store i8 0, i8* %spec.store.select.i, align 1, !tbaa !18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit: ; preds = %if.then.i393, %while.end
  %sstr.sroa.19.4 = phi i8* [ null, %while.end ], [ %spec.store.select.i, %if.then.i393 ]
  %call.i399 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.4, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.21.178, i64 0, i64 0)) #15
  %sub.ptr.lhs.cast.i400596 = ptrtoint i8* %call.i399 to i64
  %sub.ptr.sub.i402597 = sub i64 %sub.ptr.lhs.cast.i400596, %sub.ptr.rhs.cast.i.i348
  %cmp85598 = icmp ult i64 %sub.ptr.sub.i402597, 35
  br i1 %cmp85598, label %while.body86, label %while.end88

while.body86:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit, %while.body86
  %sstr.sroa.19.5599 = phi i8* [ %call.i408, %while.body86 ], [ %call.i399, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit ]
  %call.i408 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.5599, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #15
  %sub.ptr.lhs.cast.i400 = ptrtoint i8* %call.i408 to i64
  %sub.ptr.sub.i402 = sub i64 %sub.ptr.lhs.cast.i400, %sub.ptr.rhs.cast.i.i348
  %cmp85 = icmp ult i64 %sub.ptr.sub.i402, 35
  br i1 %cmp85, label %while.body86, label %while.end88, !llvm.loop !358

while.end88:                                      ; preds = %while.body86, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit
  %sstr.sroa.19.5.lcssa = phi i8* [ %call.i399, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit ], [ %call.i408, %while.body86 ]
  %28 = load i64, i64* %time, align 8, !tbaa !340
  %cmp90.not = icmp eq i64 %28, 0
  br i1 %cmp90.not, label %if.end97, label %if.then91

if.then91:                                        ; preds = %while.end88
  %29 = load i64, i64* %time75, align 8, !tbaa !355
  %mul93 = mul i64 %29, 100
  %div95 = udiv i64 %mul93, %28
  br label %if.end97

if.end97:                                         ; preds = %if.then91, %while.end88
  %percent.0 = phi i64 [ %div95, %if.then91 ], [ 0, %while.end88 ]
  %call.i411 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.5.lcssa, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.22.179, i64 0, i64 0)) #15
  %sext = shl i64 %percent.0, 32
  %conv.i414 = ashr exact i64 %sext, 32
  %call.i415 = tail call i8* @halide_int64_to_string(i8* %call.i411, i8* %sstr.sroa.125.0, i64 %conv.i414, i32 1) #15
  %call.i418 = tail call i8* @halide_string_to_string(i8* %call.i415, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.23.180, i64 0, i64 0)) #15
  %sub.ptr.lhs.cast.i419601 = ptrtoint i8* %call.i418 to i64
  %sub.ptr.sub.i421602 = sub i64 %sub.ptr.lhs.cast.i419601, %sub.ptr.rhs.cast.i.i348
  %cmp104603 = icmp ult i64 %sub.ptr.sub.i421602, 43
  br i1 %cmp104603, label %while.body105, label %while.end107

while.body105:                                    ; preds = %if.end97, %while.body105
  %sstr.sroa.19.6604 = phi i8* [ %call.i427, %while.body105 ], [ %call.i418, %if.end97 ]
  %call.i427 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.6604, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #15
  %sub.ptr.lhs.cast.i419 = ptrtoint i8* %call.i427 to i64
  %sub.ptr.sub.i421 = sub i64 %sub.ptr.lhs.cast.i419, %sub.ptr.rhs.cast.i.i348
  %cmp104 = icmp ult i64 %sub.ptr.sub.i421, 43
  br i1 %cmp104, label %while.body105, label %while.end107, !llvm.loop !359

while.end107:                                     ; preds = %while.body105, %if.end97
  %sstr.sroa.19.6.lcssa = phi i8* [ %call.i418, %if.end97 ], [ %call.i427, %while.body105 ]
  br i1 %10, label %if.end127, label %if.then109

if.then109:                                       ; preds = %while.end107
  %active_threads_numerator111 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 5
  %30 = load i64, i64* %active_threads_numerator111, align 8, !tbaa !360
  %conv112 = uitofp i64 %30 to double
  %active_threads_denominator113 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 6
  %31 = load i64, i64* %active_threads_denominator113, align 8, !tbaa !361
  %conv114 = uitofp i64 %31 to double
  %add115 = fadd double %conv114, 1.000000e-10
  %div116 = fdiv double %conv112, %add115
  %conv117 = fptrunc double %div116 to float
  %call.i430 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.6.lcssa, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.24.181, i64 0, i64 0)) #15
  %conv.i433 = fpext float %conv117 to double
  %call.i434 = tail call i8* @halide_double_to_string(i8* %call.i430, i8* %sstr.sroa.125.0, double %conv.i433, i32 0) #15
  %tobool.not.i436 = icmp eq i8* %call.i434, null
  br i1 %tobool.not.i436, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442, label %if.then.i441

if.then.i441:                                     ; preds = %if.then109
  %add.ptr.i437 = getelementptr inbounds i8, i8* %call.i434, i64 -3
  %cmp.i439 = icmp ult i8* %add.ptr.i437, %call.i
  %spec.store.select.i440 = select i1 %cmp.i439, i8* %call.i, i8* %add.ptr.i437
  store i8 0, i8* %spec.store.select.i440, align 1, !tbaa !18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442: ; preds = %if.then.i441, %if.then109
  %sstr.sroa.19.7 = phi i8* [ null, %if.then109 ], [ %spec.store.select.i440, %if.then.i441 ]
  %sub.ptr.lhs.cast.i447606 = ptrtoint i8* %sstr.sroa.19.7 to i64
  %sub.ptr.sub.i449607 = sub i64 %sub.ptr.lhs.cast.i447606, %sub.ptr.rhs.cast.i.i348
  %cmp123608 = icmp ult i64 %sub.ptr.sub.i449607, 58
  br i1 %cmp123608, label %while.body124, label %if.end127

while.body124:                                    ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442, %while.body124
  %sstr.sroa.19.8609 = phi i8* [ %call.i455, %while.body124 ], [ %sstr.sroa.19.7, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442 ]
  %call.i455 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.8609, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #15
  %sub.ptr.lhs.cast.i447 = ptrtoint i8* %call.i455 to i64
  %sub.ptr.sub.i449 = sub i64 %sub.ptr.lhs.cast.i447, %sub.ptr.rhs.cast.i.i348
  %cmp123 = icmp ult i64 %sub.ptr.sub.i449, 58
  br i1 %cmp123, label %while.body124, label %if.end127, !llvm.loop !362

if.end127:                                        ; preds = %while.body124, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442, %while.end107
  %sstr.sroa.19.9 = phi i8* [ %sstr.sroa.19.6.lcssa, %while.end107 ], [ %sstr.sroa.19.7, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442 ], [ %call.i455, %while.body124 ]
  %cursor.0 = phi i64 [ 58, %while.end107 ], [ 73, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442 ], [ 73, %while.body124 ]
  %memory_peak128 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 2
  %32 = load i64, i64* %memory_peak128, align 8, !tbaa !363
  %tobool129.not = icmp eq i64 %32, 0
  br i1 %tobool129.not, label %if.end162, label %if.then130

if.then130:                                       ; preds = %if.end127
  %call.i458 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.9, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.25.182, i64 0, i64 0)) #15
  %33 = load i64, i64* %memory_peak128, align 8, !tbaa !363
  %call.i461 = tail call i8* @halide_uint64_to_string(i8* %call.i458, i8* %sstr.sroa.125.0, i64 %33, i32 1) #15
  %sub.ptr.lhs.cast.i462611 = ptrtoint i8* %call.i461 to i64
  %sub.ptr.sub.i464612 = sub i64 %sub.ptr.lhs.cast.i462611, %sub.ptr.rhs.cast.i.i348
  %cmp137613 = icmp ult i64 %sub.ptr.sub.i464612, %cursor.0
  br i1 %cmp137613, label %while.body138, label %while.end140

while.body138:                                    ; preds = %if.then130, %while.body138
  %sstr.sroa.19.10614 = phi i8* [ %call.i470, %while.body138 ], [ %call.i461, %if.then130 ]
  %call.i470 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.10614, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #15
  %sub.ptr.lhs.cast.i462 = ptrtoint i8* %call.i470 to i64
  %sub.ptr.sub.i464 = sub i64 %sub.ptr.lhs.cast.i462, %sub.ptr.rhs.cast.i.i348
  %cmp137 = icmp ult i64 %sub.ptr.sub.i464, %cursor.0
  br i1 %cmp137, label %while.body138, label %while.end140, !llvm.loop !364

while.end140:                                     ; preds = %while.body138, %if.then130
  %sstr.sroa.19.10.lcssa = phi i8* [ %call.i461, %if.then130 ], [ %call.i470, %while.body138 ]
  %call.i473 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.10.lcssa, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.26.183, i64 0, i64 0)) #15
  %num_allocs142 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 8
  %34 = load i32, i32* %num_allocs142, align 8, !tbaa !365
  %conv.i476 = sext i32 %34 to i64
  %call.i477 = tail call i8* @halide_int64_to_string(i8* %call.i473, i8* %sstr.sroa.125.0, i64 %conv.i476, i32 1) #15
  %add144 = add nuw nsw i64 %cursor.0, 15
  %sub.ptr.lhs.cast.i478616 = ptrtoint i8* %call.i477 to i64
  %sub.ptr.sub.i480617 = sub i64 %sub.ptr.lhs.cast.i478616, %sub.ptr.rhs.cast.i.i348
  %cmp147618 = icmp ult i64 %sub.ptr.sub.i480617, %add144
  br i1 %cmp147618, label %while.body148, label %while.end150

while.body148:                                    ; preds = %while.end140, %while.body148
  %sstr.sroa.19.11619 = phi i8* [ %call.i467, %while.body148 ], [ %call.i477, %while.end140 ]
  %call.i467 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.11619, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #15
  %sub.ptr.lhs.cast.i478 = ptrtoint i8* %call.i467 to i64
  %sub.ptr.sub.i480 = sub i64 %sub.ptr.lhs.cast.i478, %sub.ptr.rhs.cast.i.i348
  %cmp147 = icmp ult i64 %sub.ptr.sub.i480, %add144
  br i1 %cmp147, label %while.body148, label %while.end150, !llvm.loop !366

while.end150:                                     ; preds = %while.body148, %while.end140
  %sstr.sroa.19.11.lcssa = phi i8* [ %call.i477, %while.end140 ], [ %call.i467, %while.body148 ]
  %35 = load i32, i32* %num_allocs142, align 8, !tbaa !365
  %cmp152.not = icmp eq i32 %35, 0
  br i1 %cmp152.not, label %if.end159, label %if.then153

if.then153:                                       ; preds = %while.end150
  %memory_total154 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 3
  %36 = load i64, i64* %memory_total154, align 8, !tbaa !367
  %conv156 = sext i32 %35 to i64
  %div157 = udiv i64 %36, %conv156
  br label %if.end159

if.end159:                                        ; preds = %if.then153, %while.end150
  %alloc_avg.0 = phi i64 [ %div157, %if.then153 ], [ 0, %while.end150 ]
  %call.i452 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.11.lcssa, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.27.184, i64 0, i64 0)) #15
  %sext586 = shl i64 %alloc_avg.0, 32
  %conv.i445 = ashr exact i64 %sext586, 32
  %call.i446 = tail call i8* @halide_int64_to_string(i8* %call.i452, i8* %sstr.sroa.125.0, i64 %conv.i445, i32 1) #15
  br label %if.end162

if.end162:                                        ; preds = %if.end159, %if.end127
  %sstr.sroa.19.12 = phi i8* [ %sstr.sroa.19.9, %if.end127 ], [ %call.i446, %if.end159 ]
  %stack_peak163 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 4
  %37 = load i64, i64* %stack_peak163, align 8, !tbaa !353
  %cmp164.not = icmp eq i64 %37, 0
  br i1 %cmp164.not, label %if.end169, label %if.then165

if.then165:                                       ; preds = %if.end162
  %call.i424 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.12, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.28.185, i64 0, i64 0)) #15
  %38 = load i64, i64* %stack_peak163, align 8, !tbaa !353
  %call.i405 = tail call i8* @halide_uint64_to_string(i8* %call.i424, i8* %sstr.sroa.125.0, i64 %38, i32 1) #15
  br label %if.end169

if.end169:                                        ; preds = %if.then165, %if.end162
  %sstr.sroa.19.13 = phi i8* [ %sstr.sroa.19.12, %if.end162 ], [ %call.i405, %if.then165 ]
  %call.i396 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.13, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #15
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit381, label %if.then.i379

if.then.i379:                                     ; preds = %if.end169
  %sub.ptr.lhs.cast.i.i374 = ptrtoint i8* %call.i396 to i64
  %add.i.i377 = add i64 %sub.ptr.sub.i.i349, %sub.ptr.lhs.cast.i.i374
  %call.i.i378 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i377) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit381

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit381: ; preds = %if.then.i379, %if.end169
  %retval.0.i380 = phi i8* [ %call.i, %if.then.i379 ], [ getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0), %if.end169 ]
  tail call void @halide_print(i8* %user_context, i8* nonnull %retval.0.i380) #15
  br label %cleanup172

cleanup172:                                       ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit381, %land.lhs.true
  %sstr.sroa.19.14 = phi i8* [ %call.i, %land.lhs.true ], [ %call.i396, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit381 ]
  %indvars.iv.next631 = add nuw nsw i64 %indvars.iv630, 1
  %39 = load i32, i32* %num_funcs54, align 8, !tbaa !350
  %40 = sext i32 %39 to i64
  %cmp55 = icmp slt i64 %indvars.iv.next631, %40
  br i1 %cmp55, label %for.body57, label %cleanup181, !llvm.loop !368

cleanup181:                                       ; preds = %for.cond41, %cleanup172, %for.cond53.preheader, %for.cond41.preheader, %for.body
  %sstr.sroa.19.15 = phi i8* [ %sstr.sroa.19.0626, %for.body ], [ %call.i344, %for.cond53.preheader ], [ %call.i344, %for.cond41.preheader ], [ %sstr.sroa.19.14, %cleanup172 ], [ %call.i344, %for.cond41 ]
  %next = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 8
  %41 = bitcast i8** %next to %struct.halide_profiler_pipeline_stats**
  %p.0 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %41, align 8, !tbaa !14
  %tobool.not = icmp eq %struct.halide_profiler_pipeline_stats* %p.0, null
  br i1 %tobool.not, label %for.cond.cleanup, label %for.body, !llvm.loop !369
}

; Function Attrs: nounwind mustprogress
define weak void @halide_profiler_reset_unlocked(%struct.halide_profiler_state* %s) local_unnamed_addr #0 {
entry:
  %pipelines = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 5
  %0 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !370
  %tobool.not9 = icmp eq %struct.halide_profiler_pipeline_stats* %0, null
  br i1 %tobool.not9, label %while.end, label %while.body

while.body:                                       ; preds = %entry, %while.body
  %1 = phi %struct.halide_profiler_pipeline_stats* [ %7, %while.body ], [ %0, %entry ]
  %next = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %1, i64 0, i32 8
  %2 = bitcast i8** %next to %struct.halide_profiler_pipeline_stats**
  %3 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %2, align 8, !tbaa !371
  store %struct.halide_profiler_pipeline_stats* %3, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !370
  %funcs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %1, i64 0, i32 7
  %4 = bitcast %struct.halide_profiler_func_stats** %funcs to i8**
  %5 = load i8*, i8** %4, align 8, !tbaa !351
  tail call void @free(i8* %5) #15
  %6 = bitcast %struct.halide_profiler_pipeline_stats* %1 to i8*
  tail call void @free(i8* nonnull %6) #15
  %7 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !370
  %tobool.not = icmp eq %struct.halide_profiler_pipeline_stats* %7, null
  br i1 %tobool.not, label %while.end, label %while.body, !llvm.loop !372

while.end:                                        ; preds = %while.body, %entry
  %first_free_id = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 2
  store i32 0, i32* %first_free_id, align 4, !tbaa !373
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce %struct.halide_profiler_pipeline_stats* @_ZN6Halide7Runtime8Internal23find_or_create_pipelineEPKciPKy(i8* %pipeline_name, i32 %num_funcs, i64* %func_names) local_unnamed_addr #0 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #16
  %pipelines = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 5
  %p.0121 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !14
  %tobool.not122 = icmp eq %struct.halide_profiler_pipeline_stats* %p.0121, null
  br i1 %tobool.not122, label %for.end, label %for.body

for.body:                                         ; preds = %entry, %for.inc
  %p.0123 = phi %struct.halide_profiler_pipeline_stats* [ %p.0, %for.inc ], [ %p.0121, %entry ]
  %name = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0123, i64 0, i32 6
  %0 = load i8*, i8** %name, align 8, !tbaa !345
  %cmp = icmp eq i8* %0, %pipeline_name
  br i1 %cmp, label %land.lhs.true, label %for.inc

land.lhs.true:                                    ; preds = %for.body
  %num_funcs1 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0123, i64 0, i32 9
  %1 = load i32, i32* %num_funcs1, align 8, !tbaa !350
  %cmp2 = icmp eq i32 %1, %num_funcs
  br i1 %cmp2, label %cleanup62, label %for.inc

for.inc:                                          ; preds = %land.lhs.true, %for.body
  %next = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0123, i64 0, i32 8
  %2 = bitcast i8** %next to %struct.halide_profiler_pipeline_stats**
  %p.0 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %2, align 8, !tbaa !14
  %tobool.not = icmp eq %struct.halide_profiler_pipeline_stats* %p.0, null
  br i1 %tobool.not, label %for.end, label %for.body, !llvm.loop !374

for.end:                                          ; preds = %for.inc, %entry
  %call4 = tail call i8* @malloc(i64 96) #15
  %3 = bitcast i8* %call4 to %struct.halide_profiler_pipeline_stats*
  %tobool5.not = icmp eq i8* %call4, null
  br i1 %tobool5.not, label %cleanup62, label %if.end7

if.end7:                                          ; preds = %for.end
  %4 = bitcast %struct.halide_profiler_pipeline_stats** %pipelines to i8**
  %5 = load i8*, i8** %4, align 8, !tbaa !370
  %next9 = getelementptr inbounds i8, i8* %call4, i64 64
  %6 = bitcast i8* %next9 to i8**
  store i8* %5, i8** %6, align 8, !tbaa !371
  %name10 = getelementptr inbounds i8, i8* %call4, i64 48
  %7 = bitcast i8* %name10 to i8**
  store i8* %pipeline_name, i8** %7, align 8, !tbaa !345
  %first_free_id = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 2
  %8 = load i32, i32* %first_free_id, align 4, !tbaa !373
  %first_func_id = getelementptr inbounds i8, i8* %call4, i64 76
  %9 = bitcast i8* %first_func_id to i32*
  store i32 %8, i32* %9, align 4, !tbaa !375
  %num_funcs11 = getelementptr inbounds i8, i8* %call4, i64 72
  %10 = bitcast i8* %num_funcs11 to i32*
  store i32 %num_funcs, i32* %10, align 8, !tbaa !350
  %runs = getelementptr inbounds i8, i8* %call4, i64 80
  %11 = bitcast i8* %runs to <2 x i32>*
  store <2 x i32> zeroinitializer, <2 x i32>* %11, align 8, !tbaa !41
  %12 = bitcast i8* %call4 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %12, align 8, !tbaa !22
  %memory_peak = getelementptr inbounds i8, i8* %call4, i64 16
  %13 = bitcast i8* %memory_peak to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %13, align 8, !tbaa !22
  %num_allocs = getelementptr inbounds i8, i8* %call4, i64 88
  %14 = bitcast i8* %num_allocs to i32*
  store i32 0, i32* %14, align 8, !tbaa !347
  %active_threads_numerator = getelementptr inbounds i8, i8* %call4, i64 32
  %15 = bitcast i8* %active_threads_numerator to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %15, align 8, !tbaa !22
  %conv = sext i32 %num_funcs to i64
  %mul = mul nsw i64 %conv, 72
  %call12 = tail call i8* @malloc(i64 %mul) #15
  %funcs = getelementptr inbounds i8, i8* %call4, i64 56
  %16 = bitcast i8* %funcs to i8**
  store i8* %call12, i8** %16, align 8, !tbaa !351
  %tobool14.not = icmp eq i8* %call12, null
  %17 = bitcast i8* %call12 to %struct.halide_profiler_func_stats*
  br i1 %tobool14.not, label %if.then15, label %for.cond17.preheader

for.cond17.preheader:                             ; preds = %if.end7
  %cmp18119 = icmp sgt i32 %num_funcs, 0
  br i1 %cmp18119, label %for.body20.lr.ph, label %for.cond.cleanup19

for.body20.lr.ph:                                 ; preds = %for.cond17.preheader
  %wide.trip.count = zext i32 %num_funcs to i64
  br label %for.body20

if.then15:                                        ; preds = %if.end7
  tail call void @free(i8* nonnull %call4) #15
  br label %cleanup62

for.cond.cleanup19:                               ; preds = %for.body20, %for.cond17.preheader
  %18 = load i32, i32* %first_free_id, align 4, !tbaa !373
  %add = add nsw i32 %18, %num_funcs
  store i32 %add, i32* %first_free_id, align 4, !tbaa !373
  store i8* %call4, i8** %4, align 8, !tbaa !370
  br label %cleanup62

for.body20:                                       ; preds = %for.body20, %for.body20.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body20.lr.ph ], [ %indvars.iv.next, %for.body20 ]
  %time22 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv, i32 0
  store i64 0, i64* %time22, align 8, !tbaa !355
  %arrayidx24 = getelementptr inbounds i64, i64* %func_names, i64 %indvars.iv
  %19 = load i64, i64* %arrayidx24, align 8, !tbaa !22
  %20 = inttoptr i64 %19 to i8*
  %name28 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv, i32 7
  store i8* %20, i8** %name28, align 8, !tbaa !356
  %memory_current32 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv, i32 1
  %21 = bitcast i64* %memory_current32 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %21, align 8, !tbaa !22
  %memory_total40 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv, i32 3
  %num_allocs44 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv, i32 8
  store i32 0, i32* %num_allocs44, align 8, !tbaa !365
  %22 = bitcast i64* %memory_total40 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %22, align 8, !tbaa !22
  %active_threads_numerator51 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv, i32 5
  %23 = bitcast i64* %active_threads_numerator51 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %23, align 8, !tbaa !22
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.cleanup19, label %for.body20, !llvm.loop !376

cleanup62:                                        ; preds = %land.lhs.true, %for.cond.cleanup19, %if.then15, %for.end
  %retval.2 = phi %struct.halide_profiler_pipeline_stats* [ %3, %for.cond.cleanup19 ], [ null, %if.then15 ], [ null, %for.end ], [ %p.0123, %land.lhs.true ]
  ret %struct.halide_profiler_pipeline_stats* %retval.2
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal9bill_funcEP21halide_profiler_stateiyi(%struct.halide_profiler_state* %s, i32 %func_id, i64 %time, i32 %active_threads) local_unnamed_addr #0 {
entry:
  %pipelines = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 5
  %p.055 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !14
  %tobool.not56 = icmp eq %struct.halide_profiler_pipeline_stats* %p.055, null
  br i1 %tobool.not56, label %cleanup25, label %for.body

for.body:                                         ; preds = %entry, %if.end23
  %p.058 = phi %struct.halide_profiler_pipeline_stats* [ %p.0, %if.end23 ], [ %p.055, %entry ]
  %p_prev.057 = phi %struct.halide_profiler_pipeline_stats* [ %p.058, %if.end23 ], [ null, %entry ]
  %first_func_id = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 10
  %0 = load i32, i32* %first_func_id, align 4, !tbaa !375
  %cmp.not = icmp sgt i32 %0, %func_id
  br i1 %cmp.not, label %if.end23, label %land.lhs.true

land.lhs.true:                                    ; preds = %for.body
  %num_funcs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 9
  %1 = load i32, i32* %num_funcs, align 8, !tbaa !350
  %add = add nsw i32 %1, %0
  %cmp2 = icmp sgt i32 %add, %func_id
  br i1 %cmp2, label %if.then, label %if.end23

if.then:                                          ; preds = %land.lhs.true
  %tobool3.not = icmp eq %struct.halide_profiler_pipeline_stats* %p_prev.057, null
  br i1 %tobool3.not, label %if.end, label %if.then4

if.then4:                                         ; preds = %if.then
  %next = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 8
  %2 = load i8*, i8** %next, align 8, !tbaa !371
  %next5 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p_prev.057, i64 0, i32 8
  store i8* %2, i8** %next5, align 8, !tbaa !371
  %3 = bitcast i8** %next to %struct.halide_profiler_pipeline_stats**
  store %struct.halide_profiler_pipeline_stats* %p.055, %struct.halide_profiler_pipeline_stats** %3, align 8, !tbaa !371
  store %struct.halide_profiler_pipeline_stats* %p.058, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !370
  br label %if.end

if.end:                                           ; preds = %if.then4, %if.then
  %funcs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 7
  %4 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %funcs, align 8, !tbaa !351
  %idx.ext = sext i32 %func_id to i64
  %add.ptr = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %4, i64 %idx.ext
  %idx.ext10 = sext i32 %0 to i64
  %idx.neg = sub nsw i64 0, %idx.ext10
  %add.ptr11 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %add.ptr, i64 %idx.neg
  %time12 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %add.ptr11, i64 0, i32 0
  %5 = load i64, i64* %time12, align 8, !tbaa !355
  %add13 = add i64 %5, %time
  store i64 %add13, i64* %time12, align 8, !tbaa !355
  %conv = sext i32 %active_threads to i64
  %active_threads_numerator = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %add.ptr11, i64 0, i32 5
  %6 = load i64, i64* %active_threads_numerator, align 8, !tbaa !360
  %add14 = add i64 %6, %conv
  store i64 %add14, i64* %active_threads_numerator, align 8, !tbaa !360
  %active_threads_denominator = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %add.ptr11, i64 0, i32 6
  %7 = load i64, i64* %active_threads_denominator, align 8, !tbaa !361
  %add15 = add i64 %7, 1
  store i64 %add15, i64* %active_threads_denominator, align 8, !tbaa !361
  %time16 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 0
  %8 = load i64, i64* %time16, align 8, !tbaa !340
  %add17 = add i64 %8, %time
  store i64 %add17, i64* %time16, align 8, !tbaa !340
  %samples = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 12
  %9 = load i32, i32* %samples, align 4, !tbaa !346
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %samples, align 4, !tbaa !346
  %active_threads_numerator19 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 4
  %10 = load i64, i64* %active_threads_numerator19, align 8, !tbaa !343
  %add20 = add i64 %10, %conv
  store i64 %add20, i64* %active_threads_numerator19, align 8, !tbaa !343
  %active_threads_denominator21 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 5
  %11 = load i64, i64* %active_threads_denominator21, align 8, !tbaa !344
  %add22 = add i64 %11, 1
  store i64 %add22, i64* %active_threads_denominator21, align 8, !tbaa !344
  ret void

if.end23:                                         ; preds = %land.lhs.true, %for.body
  %next24 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 8
  %12 = bitcast i8** %next24 to %struct.halide_profiler_pipeline_stats**
  %p.0 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %12, align 8, !tbaa !14
  %tobool.not = icmp eq %struct.halide_profiler_pipeline_stats* %p.0, null
  br i1 %tobool.not, label %cleanup25, label %for.body, !llvm.loop !377

cleanup25:                                        ; preds = %if.end23, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_profiler_sample(%struct.halide_profiler_state* %s, i64* %prev_t) local_unnamed_addr #0 {
entry:
  %func = alloca i32, align 4
  %active_threads = alloca i32, align 4
  %0 = bitcast i32* %func to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0) #12
  %1 = bitcast i32* %active_threads to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1) #12
  %get_remote_profiler_state = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 6
  %2 = load void (i32*, i32*)*, void (i32*, i32*)** %get_remote_profiler_state, align 8, !tbaa !378
  %tobool.not = icmp eq void (i32*, i32*)* %2, null
  br i1 %tobool.not, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  call void %2(i32* nonnull %func, i32* nonnull %active_threads) #15
  br label %if.end

if.else:                                          ; preds = %entry
  %current_func = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 3
  %3 = load i32, i32* %current_func, align 8, !tbaa !339
  store i32 %3, i32* %func, align 4, !tbaa !41
  %active_threads2 = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 4
  %4 = load i32, i32* %active_threads2, align 4, !tbaa !379
  store i32 %4, i32* %active_threads, align 4, !tbaa !41
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %call = call i64 @halide_current_time_ns(i8* null) #15
  %5 = load i32, i32* %func, align 4, !tbaa !41
  %cmp = icmp eq i32 %5, -2
  br i1 %cmp, label %cleanup, label %if.else4

if.else4:                                         ; preds = %if.end
  %cmp5 = icmp sgt i32 %5, -1
  br i1 %cmp5, label %if.then6, label %if.end8

if.then6:                                         ; preds = %if.else4
  %6 = load i64, i64* %prev_t, align 8, !tbaa !22
  %sub = sub i64 %call, %6
  %7 = load i32, i32* %active_threads, align 4, !tbaa !41
  call void @_ZN6Halide7Runtime8Internal9bill_funcEP21halide_profiler_stateiyi(%struct.halide_profiler_state* nonnull %s, i32 %5, i64 %sub, i32 %7) #16
  br label %if.end8

if.end8:                                          ; preds = %if.then6, %if.else4
  store i64 %call, i64* %prev_t, align 8, !tbaa !22
  %sleep_time = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 1
  %8 = load i32, i32* %sleep_time, align 8, !tbaa !380
  br label %cleanup

cleanup:                                          ; preds = %if.end8, %if.end
  %retval.0 = phi i32 [ %8, %if.end8 ], [ -1, %if.end ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0) #12
  ret i32 %retval.0
}

; Function Attrs: nounwind
define linkonce void @_ZN6Halide7Runtime8Internal24sampling_profiler_threadEPv(i8* %0) #4 {
entry:
  %t = alloca i64, align 8
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #16
  %lock = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 0
  tail call void @halide_mutex_lock(%struct.halide_mutex* %lock) #15
  %current_func = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 3
  %1 = load i32, i32* %current_func, align 8, !tbaa !339
  %cmp.not23 = icmp eq i32 %1, -2
  br i1 %cmp.not23, label %while.end8, label %while.body.lr.ph

while.body.lr.ph:                                 ; preds = %entry
  %2 = bitcast i64* %t to i8*
  br label %while.body

while.body:                                       ; preds = %while.end, %while.body.lr.ph
  %call1 = call i64 @halide_current_time_ns(i8* null) #15
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %2) #12
  store i64 %call1, i64* %t, align 8, !tbaa !22
  %call420 = call i32 @halide_profiler_sample(%struct.halide_profiler_state* nonnull %call, i64* nonnull %t) #16
  %cmp521 = icmp slt i32 %call420, 0
  br i1 %cmp521, label %while.end, label %if.end

if.end:                                           ; preds = %while.body, %if.end
  %call422 = phi i32 [ %call4, %if.end ], [ %call420, %while.body ]
  call void @halide_mutex_unlock(%struct.halide_mutex* %lock) #15
  call void @halide_sleep_ms(i8* null, i32 %call422) #15
  call void @halide_mutex_lock(%struct.halide_mutex* %lock) #15
  %call4 = call i32 @halide_profiler_sample(%struct.halide_profiler_state* %call, i64* nonnull %t) #16
  %cmp5 = icmp slt i32 %call4, 0
  br i1 %cmp5, label %while.end, label %if.end

while.end:                                        ; preds = %if.end, %while.body
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %2) #12
  %3 = load i32, i32* %current_func, align 8, !tbaa !339
  %cmp.not = icmp eq i32 %3, -2
  br i1 %cmp.not, label %while.end8, label %while.body, !llvm.loop !381

while.end8:                                       ; preds = %while.end, %entry
  call void @halide_mutex_unlock(%struct.halide_mutex* nonnull %lock) #15
  ret void
}

; Function Attrs: nounwind
define weak %struct.halide_profiler_pipeline_stats* @halide_profiler_get_pipeline_state(i8* %pipeline_name) local_unnamed_addr #4 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #16
  %lock.i = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 0
  tail call void @halide_mutex_lock(%struct.halide_mutex* %lock.i) #15
  %pipelines = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 5
  %p.013 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !14
  %tobool.not14 = icmp eq %struct.halide_profiler_pipeline_stats* %p.013, null
  br i1 %tobool.not14, label %cleanup, label %for.body

for.body:                                         ; preds = %entry, %for.inc
  %p.015 = phi %struct.halide_profiler_pipeline_stats* [ %p.0, %for.inc ], [ %p.013, %entry ]
  %name = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.015, i64 0, i32 6
  %0 = load i8*, i8** %name, align 8, !tbaa !345
  %cmp = icmp eq i8* %0, %pipeline_name
  br i1 %cmp, label %cleanup, label %for.inc

for.inc:                                          ; preds = %for.body
  %next = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.015, i64 0, i32 8
  %1 = bitcast i8** %next to %struct.halide_profiler_pipeline_stats**
  %p.0 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %1, align 8, !tbaa !14
  %tobool.not = icmp eq %struct.halide_profiler_pipeline_stats* %p.0, null
  br i1 %tobool.not, label %cleanup, label %for.body, !llvm.loop !382

cleanup:                                          ; preds = %for.inc, %for.body, %entry
  %p.0.lcssa = phi %struct.halide_profiler_pipeline_stats* [ null, %entry ], [ null, %for.inc ], [ %p.015, %for.body ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* %lock.i) #15
  ret %struct.halide_profiler_pipeline_stats* %p.0.lcssa
}

; Function Attrs: nounwind
define weak i32 @halide_profiler_pipeline_start(i8* %user_context, i8* %pipeline_name, i32 %num_funcs, i64* %func_names) local_unnamed_addr #4 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #16
  %lock.i = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 0
  tail call void @halide_mutex_lock(%struct.halide_mutex* %lock.i) #15
  %sampling_thread = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 7
  %0 = load %struct.halide_thread*, %struct.halide_thread** %sampling_thread, align 8, !tbaa !337
  %tobool.not = icmp eq %struct.halide_thread* %0, null
  br i1 %tobool.not, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call1 = tail call i32 @halide_start_clock(i8* %user_context) #15
  %call2 = tail call %struct.halide_thread* @halide_spawn_thread(void (i8*)* nonnull @_ZN6Halide7Runtime8Internal24sampling_profiler_threadEPv, i8* null) #15
  store %struct.halide_thread* %call2, %struct.halide_thread** %sampling_thread, align 8, !tbaa !337
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %call4 = tail call %struct.halide_profiler_pipeline_stats* @_ZN6Halide7Runtime8Internal23find_or_create_pipelineEPKciPKy(i8* %pipeline_name, i32 %num_funcs, i64* %func_names) #16
  %tobool5.not = icmp eq %struct.halide_profiler_pipeline_stats* %call4, null
  br i1 %tobool5.not, label %if.then6, label %if.end8

if.then6:                                         ; preds = %if.end
  %call7 = tail call i32 @halide_error_out_of_memory(i8* %user_context) #15
  br label %cleanup

if.end8:                                          ; preds = %if.end
  %runs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %call4, i64 0, i32 11
  %1 = load i32, i32* %runs, align 8, !tbaa !342
  %inc = add nsw i32 %1, 1
  store i32 %inc, i32* %runs, align 8, !tbaa !342
  %first_func_id = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %call4, i64 0, i32 10
  %2 = load i32, i32* %first_func_id, align 4, !tbaa !375
  br label %cleanup

cleanup:                                          ; preds = %if.end8, %if.then6
  %retval.0 = phi i32 [ %2, %if.end8 ], [ %call7, %if.then6 ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull %lock.i) #15
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak void @halide_profiler_stack_peak_update(i8* %user_context, i8* %pipeline_state, i64* %f_values) local_unnamed_addr #0 {
entry:
  %cmp.not = icmp eq i8* %pipeline_state, null
  br i1 %cmp.not, label %if.then, label %do.end

if.then:                                          ; preds = %entry
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @.str.186, i64 0, i64 0)) #15
  tail call void @abort() #15
  br label %do.end

do.end:                                           ; preds = %if.then, %entry
  %num_funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 72
  %0 = bitcast i8* %num_funcs to i32*
  %1 = load i32, i32* %0, align 8, !tbaa !350
  %cmp118 = icmp sgt i32 %1, 0
  br i1 %cmp118, label %for.body.lr.ph, label %for.cond.cleanup

for.body.lr.ph:                                   ; preds = %do.end
  %funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 56
  %2 = bitcast i8* %funcs to %struct.halide_profiler_func_stats**
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.inc, %do.end
  ret void

for.body:                                         ; preds = %for.inc, %for.body.lr.ph
  %3 = phi i32 [ %1, %for.body.lr.ph ], [ %9, %for.inc ]
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.inc ]
  %arrayidx = getelementptr inbounds i64, i64* %f_values, i64 %indvars.iv
  %4 = load i64, i64* %arrayidx, align 8, !tbaa !22
  %cmp2.not = icmp eq i64 %4, 0
  br i1 %cmp2.not, label %for.inc, label %if.then3

if.then3:                                         ; preds = %for.body
  %5 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %2, align 8, !tbaa !351
  %stack_peak = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %5, i64 %indvars.iv, i32 4
  %6 = load i64, i64* %stack_peak, align 8, !tbaa !22
  br label %while.cond.i

while.cond.i:                                     ; preds = %while.body.i, %if.then3
  %old_val.0.i = phi i64 [ %6, %if.then3 ], [ %8, %while.body.i ]
  %cmp.i = icmp ult i64 %old_val.0.i, %4
  br i1 %cmp.i, label %while.body.i, label %for.inc.loopexit

while.body.i:                                     ; preds = %while.cond.i
  %7 = cmpxchg i64* %stack_peak, i64 %old_val.0.i, i64 %4 seq_cst seq_cst
  %8 = extractvalue { i64, i1 } %7, 0
  %cmp1.i = icmp eq i64 %old_val.0.i, %8
  br i1 %cmp1.i, label %for.inc.loopexit, label %while.cond.i, !llvm.loop !383

for.inc.loopexit:                                 ; preds = %while.body.i, %while.cond.i
  %.pre = load i32, i32* %0, align 8, !tbaa !350
  br label %for.inc

for.inc:                                          ; preds = %for.inc.loopexit, %for.body
  %9 = phi i32 [ %.pre, %for.inc.loopexit ], [ %3, %for.body ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %10 = sext i32 %9 to i64
  %cmp1 = icmp slt i64 %indvars.iv.next, %10
  br i1 %cmp1, label %for.body, label %for.cond.cleanup, !llvm.loop !384
}

; Function Attrs: nounwind mustprogress
define weak void @halide_profiler_memory_allocate(i8* %user_context, i8* %pipeline_state, i32 %func_id, i64 %incr) local_unnamed_addr #0 {
entry:
  %cmp = icmp eq i64 %incr, 0
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %cmp1.not = icmp eq i8* %pipeline_state, null
  br i1 %cmp1.not, label %if.then2, label %do.body4

if.then2:                                         ; preds = %if.end
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @.str.1.187, i64 0, i64 0)) #15
  tail call void @abort() #15
  br label %do.body4

do.body4:                                         ; preds = %if.then2, %if.end
  %cmp5 = icmp sgt i32 %func_id, -1
  br i1 %cmp5, label %do.body10, label %if.then6

if.then6:                                         ; preds = %do.body4
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([122 x i8], [122 x i8]* @.str.2.188, i64 0, i64 0)) #15
  tail call void @abort() #15
  br label %do.body10

do.body10:                                        ; preds = %if.then6, %do.body4
  %num_funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 72
  %0 = bitcast i8* %num_funcs to i32*
  %1 = load i32, i32* %0, align 8, !tbaa !350
  %cmp11 = icmp sgt i32 %1, %func_id
  br i1 %cmp11, label %do.end15, label %if.then12

if.then12:                                        ; preds = %do.body10
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([138 x i8], [138 x i8]* @.str.3.189, i64 0, i64 0)) #15
  tail call void @abort() #15
  br label %do.end15

do.end15:                                         ; preds = %if.then12, %do.body10
  %funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 56
  %2 = bitcast i8* %funcs to %struct.halide_profiler_func_stats**
  %3 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %2, align 8, !tbaa !351
  %idxprom = sext i32 %func_id to i64
  %num_allocs = getelementptr inbounds i8, i8* %pipeline_state, i64 88
  %4 = bitcast i8* %num_allocs to i32*
  %5 = atomicrmw add i32* %4, i32 1 seq_cst
  %memory_total = getelementptr inbounds i8, i8* %pipeline_state, i64 24
  %6 = bitcast i8* %memory_total to i64*
  %7 = atomicrmw add i64* %6, i64 %incr seq_cst
  %memory_current = getelementptr inbounds i8, i8* %pipeline_state, i64 8
  %8 = bitcast i8* %memory_current to i64*
  %9 = atomicrmw add i64* %8, i64 %incr seq_cst
  %10 = add i64 %9, %incr
  %memory_peak = getelementptr inbounds i8, i8* %pipeline_state, i64 16
  %11 = bitcast i8* %memory_peak to i64*
  %12 = load i64, i64* %11, align 8, !tbaa !22
  br label %while.cond.i

while.cond.i:                                     ; preds = %while.body.i, %do.end15
  %old_val.0.i = phi i64 [ %12, %do.end15 ], [ %14, %while.body.i ]
  %cmp.i = icmp ult i64 %old_val.0.i, %10
  br i1 %cmp.i, label %while.body.i, label %_ZN12_GLOBAL__N_125sync_compare_max_and_swapIyEEvPT_S1_.exit

while.body.i:                                     ; preds = %while.cond.i
  %13 = cmpxchg i64* %11, i64 %old_val.0.i, i64 %10 seq_cst seq_cst
  %14 = extractvalue { i64, i1 } %13, 0
  %cmp1.i = icmp eq i64 %old_val.0.i, %14
  br i1 %cmp1.i, label %_ZN12_GLOBAL__N_125sync_compare_max_and_swapIyEEvPT_S1_.exit, label %while.cond.i, !llvm.loop !383

_ZN12_GLOBAL__N_125sync_compare_max_and_swapIyEEvPT_S1_.exit: ; preds = %while.body.i, %while.cond.i
  %num_allocs16 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %3, i64 %idxprom, i32 8
  %15 = atomicrmw add i32* %num_allocs16, i32 1 seq_cst
  %memory_total17 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %3, i64 %idxprom, i32 3
  %16 = atomicrmw add i64* %memory_total17, i64 %incr seq_cst
  %memory_current18 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %3, i64 %idxprom, i32 1
  %17 = atomicrmw add i64* %memory_current18, i64 %incr seq_cst
  %18 = add i64 %17, %incr
  %memory_peak19 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %3, i64 %idxprom, i32 2
  %19 = load i64, i64* %memory_peak19, align 8, !tbaa !22
  br label %while.cond.i43

while.cond.i43:                                   ; preds = %while.body.i45, %_ZN12_GLOBAL__N_125sync_compare_max_and_swapIyEEvPT_S1_.exit
  %old_val.0.i41 = phi i64 [ %19, %_ZN12_GLOBAL__N_125sync_compare_max_and_swapIyEEvPT_S1_.exit ], [ %21, %while.body.i45 ]
  %cmp.i42 = icmp ult i64 %old_val.0.i41, %18
  br i1 %cmp.i42, label %while.body.i45, label %return

while.body.i45:                                   ; preds = %while.cond.i43
  %20 = cmpxchg i64* %memory_peak19, i64 %old_val.0.i41, i64 %18 seq_cst seq_cst
  %21 = extractvalue { i64, i1 } %20, 0
  %cmp1.i44 = icmp eq i64 %old_val.0.i41, %21
  br i1 %cmp1.i44, label %return, label %while.cond.i43, !llvm.loop !383

return:                                           ; preds = %while.body.i45, %while.cond.i43, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define weak void @halide_profiler_memory_free(i8* %user_context, i8* %pipeline_state, i32 %func_id, i64 %decr) local_unnamed_addr #0 {
entry:
  %cmp = icmp eq i64 %decr, 0
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %cmp1.not = icmp eq i8* %pipeline_state, null
  br i1 %cmp1.not, label %if.then2, label %do.body4

if.then2:                                         ; preds = %if.end
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @.str.4.190, i64 0, i64 0)) #15
  tail call void @abort() #15
  br label %do.body4

do.body4:                                         ; preds = %if.then2, %if.end
  %cmp5 = icmp sgt i32 %func_id, -1
  br i1 %cmp5, label %do.body10, label %if.then6

if.then6:                                         ; preds = %do.body4
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([122 x i8], [122 x i8]* @.str.5.191, i64 0, i64 0)) #15
  tail call void @abort() #15
  br label %do.body10

do.body10:                                        ; preds = %if.then6, %do.body4
  %num_funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 72
  %0 = bitcast i8* %num_funcs to i32*
  %1 = load i32, i32* %0, align 8, !tbaa !350
  %cmp11 = icmp sgt i32 %1, %func_id
  br i1 %cmp11, label %do.end15, label %if.then12

if.then12:                                        ; preds = %do.body10
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([138 x i8], [138 x i8]* @.str.6.192, i64 0, i64 0)) #15
  tail call void @abort() #15
  br label %do.end15

do.end15:                                         ; preds = %if.then12, %do.body10
  %funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 56
  %2 = bitcast i8* %funcs to %struct.halide_profiler_func_stats**
  %3 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %2, align 8, !tbaa !351
  %idxprom = sext i32 %func_id to i64
  %memory_current = getelementptr inbounds i8, i8* %pipeline_state, i64 8
  %4 = bitcast i8* %memory_current to i64*
  %5 = atomicrmw sub i64* %4, i64 %decr seq_cst
  %memory_current16 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %3, i64 %idxprom, i32 1
  %6 = atomicrmw sub i64* %memory_current16, i64 %decr seq_cst
  br label %return

return:                                           ; preds = %do.end15, %entry
  ret void
}

; Function Attrs: nounwind
define weak void @halide_profiler_report(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #16
  %lock.i = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 0
  tail call void @halide_mutex_lock(%struct.halide_mutex* %lock.i) #15
  tail call void @halide_profiler_report_unlocked(i8* %user_context, %struct.halide_profiler_state* %call) #16
  tail call void @halide_mutex_unlock(%struct.halide_mutex* %lock.i) #15
  ret void
}

; Function Attrs: nounwind
define weak void @halide_profiler_reset() local_unnamed_addr #4 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #16
  %lock.i = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 0
  tail call void @halide_mutex_lock(%struct.halide_mutex* %lock.i) #15
  tail call void @halide_profiler_reset_unlocked(%struct.halide_profiler_state* %call) #16
  tail call void @halide_mutex_unlock(%struct.halide_mutex* %lock.i) #15
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_profiler_pipeline_end(i8* %user_context, i8* %state) local_unnamed_addr #2 {
entry:
  %current_func = getelementptr inbounds i8, i8* %state, i64 16
  %0 = bitcast i8* %current_func to i32*
  store i32 -1, i32* %0, align 8, !tbaa !339
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* %ptr, i64 %len) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_check_memory_is_initialized(i8* %user_context, i8* %ptr, i64 %len, i8* %name) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_check_buffer_is_initialized(i8* %user_context, %struct.halide_buffer_t* %b, i8* %buf_name) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_annotate_buffer_is_initialized(i8* %user_context, %struct.halide_buffer_t* %b) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_msan_annotate_buffer_is_initialized_as_destructor(i8* %user_context, i8* %b) local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: inaccessiblemem_or_argmemonly nofree nosync nounwind willreturn
declare void @llvm.prefetch.p0i8(i8* nocapture readonly, i32 immarg, i32 immarg, i32) #8

; Function Attrs: nounwind
define weak i32 @halide_default_can_use_target_features(i32 %count, i64* %features) #4 {
entry:
  %tmp = alloca %"struct.Halide::Runtime::Internal::CpuFeatures", align 8
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal36halide_cpu_features_initialized_lockE) #15
  %0 = load i8, i8* @_ZN6Halide7Runtime8Internal31halide_cpu_features_initializedE, align 1, !tbaa !19, !range !21
  %tobool.not = icmp eq i8 %0, 0
  br i1 %tobool.not, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = bitcast %"struct.Halide::Runtime::Internal::CpuFeatures"* %tmp to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1) #12
  call void @_ZN6Halide7Runtime8Internal23halide_get_cpu_featuresEv(%"struct.Halide::Runtime::Internal::CpuFeatures"* nonnull sret(%"struct.Halide::Runtime::Internal::CpuFeatures") align 8 %tmp) #15
  %call = call i8* @memcpy(i8* bitcast ([4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE to i8*), i8* nonnull %1, i64 32) #15
  store i8 1, i8* @_ZN6Halide7Runtime8Internal31halide_cpu_features_initializedE, align 1, !tbaa !19
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1) #12
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal36halide_cpu_features_initialized_lockE) #15
  %cmp.not = icmp eq i32 %count, 2
  br i1 %cmp.not, label %if.end2, label %if.then1

if.then1:                                         ; preds = %if.end
  call void @halide_error(i8* null, i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.197, i64 0, i64 0)) #15
  br label %if.end2

if.end2:                                          ; preds = %if.then1, %if.end
  %2 = load i64, i64* %features, align 8, !tbaa !22
  %3 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i64 0, i64 0), align 8, !tbaa !22
  %and = and i64 %3, %2
  %cmp6.not = icmp eq i64 %and, 0
  br i1 %cmp6.not, label %for.inc.critedge, label %if.then7

if.then7:                                         ; preds = %if.end2
  %4 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i64 0, i64 2), align 8, !tbaa !22
  %and10 = and i64 %4, %and
  %cmp11.not = icmp eq i64 %and10, %and
  br i1 %cmp11.not, label %for.inc.critedge, label %cleanup15

for.inc.critedge:                                 ; preds = %if.then7, %if.end2
  %arrayidx.1 = getelementptr inbounds i64, i64* %features, i64 1
  %5 = load i64, i64* %arrayidx.1, align 8, !tbaa !22
  %6 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i64 0, i64 1), align 8, !tbaa !22
  %and.1 = and i64 %6, %5
  %cmp6.not.1 = icmp eq i64 %and.1, 0
  br i1 %cmp6.not.1, label %for.inc.critedge.1, label %if.then7.1

cleanup15:                                        ; preds = %for.inc.critedge.1, %if.then7.1, %if.then7
  %cmp3.lcssa = phi i32 [ 0, %if.then7 ], [ 0, %if.then7.1 ], [ 1, %for.inc.critedge.1 ]
  ret i32 %cmp3.lcssa

if.then7.1:                                       ; preds = %for.inc.critedge
  %7 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i64 0, i64 3), align 8, !tbaa !22
  %and10.1 = and i64 %7, %and.1
  %cmp11.not.1 = icmp eq i64 %and10.1, %and.1
  br i1 %cmp11.not.1, label %for.inc.critedge.1, label %cleanup15

for.inc.critedge.1:                               ; preds = %if.then7.1, %for.inc.critedge
  br label %cleanup15
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i32, i64*)* @halide_set_custom_can_use_target_features(i32 (i32, i64*)* %fn) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i32, i64*)*, i32 (i32, i64*)** @_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE, align 8, !tbaa !14
  store i32 (i32, i64*)* %fn, i32 (i32, i64*)** @_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE, align 8, !tbaa !14
  ret i32 (i32, i64*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_can_use_target_features(i32 %count, i64* %features) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i32, i64*)*, i32 (i32, i64*)** @_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE, align 8, !tbaa !14
  %call = tail call i32 %0(i32 %count, i64* %features) #15
  ret i32 %call
}

; Function Attrs: nounwind willreturn
define linkonce void @_ZN6Halide7Runtime8Internal23halide_get_cpu_featuresEv(%"struct.Halide::Runtime::Internal::CpuFeatures"* noalias sret(%"struct.Halide::Runtime::Internal::CpuFeatures") align 8 %agg.result) local_unnamed_addr #9 {
entry:
  %arrayidx3.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::CpuFeatures", %"struct.Halide::Runtime::Internal::CpuFeatures"* %agg.result, i64 0, i32 1, i64 0
  %0 = bitcast %"struct.Halide::Runtime::Internal::CpuFeatures"* %agg.result to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %0, align 8, !tbaa !22
  %1 = bitcast i64* %arrayidx3.i to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %1, align 8, !tbaa !22
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_use_jit_module() local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_release_jit_module() local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nofree nosync nounwind readnone willreturn
declare <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16>, <8 x i16>) #10

; Function Attrs: nofree nosync nounwind readnone willreturn
declare <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8>, <8 x i8>) #10

; Function Attrs: nofree nosync nounwind readnone willreturn
declare <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16>, <8 x i16>) #10

; Function Attrs: nofree nosync nounwind readnone willreturn
declare <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32>, <4 x i32>) #10

; Function Attrs: nofree nosync nounwind readnone willreturn
declare <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32>, <4 x i32>) #10

; Function Attrs: nofree nosync nounwind readnone willreturn
declare <8 x i8> @llvm.aarch64.neon.uqxtn.v8i8(<8 x i16>) #10

; Function Attrs: nounwind
define i32 @sobel5x5_par_for_output_s0_y_y_v1(i8* %__user_context, i32 %output.s0.y.y.v1, i8* nocapture readonly %closure_arg) #11 {
entry:
  %0 = bitcast i8* %closure_arg to i8**
  %input = load i8*, i8** %0, align 8
  %1 = getelementptr inbounds i8, i8* %closure_arg, i64 8
  %2 = bitcast i8* %1 to i8**
  %output = load i8*, i8** %2, align 8
  %3 = getelementptr inbounds i8, i8* %closure_arg, i64 16
  %4 = bitcast i8* %3 to i32*
  %input.extent.0 = load i32, i32* %4, align 4
  %5 = getelementptr inbounds i8, i8* %closure_arg, i64 20
  %6 = bitcast i8* %5 to i32*
  %b41 = load i32, i32* %6, align 4
  %7 = getelementptr inbounds i8, i8* %closure_arg, i64 24
  %8 = bitcast i8* %7 to i32*
  %input.stride.1 = load i32, i32* %8, align 4
  %9 = getelementptr inbounds i8, i8* %closure_arg, i64 28
  %10 = bitcast i8* %9 to i32*
  %output.min.0 = load i32, i32* %10, align 4
  %11 = getelementptr inbounds i8, i8* %closure_arg, i64 32
  %12 = bitcast i8* %11 to i32*
  %output.min.1 = load i32, i32* %12, align 4
  %13 = getelementptr inbounds i8, i8* %closure_arg, i64 36
  %14 = bitcast i8* %13 to i32*
  %output.stride.1 = load i32, i32* %14, align 4
  %15 = getelementptr inbounds i8, i8* %closure_arg, i64 40
  %16 = bitcast i8* %15 to i32*
  %b3 = load i32, i32* %16, align 4
  %17 = getelementptr inbounds i8, i8* %closure_arg, i64 44
  %18 = bitcast i8* %17 to i32*
  %t450 = load i32, i32* %18, align 4
  %19 = getelementptr inbounds i8, i8* %closure_arg, i64 48
  %20 = bitcast i8* %19 to i32*
  %t452 = load i32, i32* %20, align 4
  %21 = getelementptr inbounds i8, i8* %closure_arg, i64 52
  %22 = bitcast i8* %21 to i32*
  %t456 = load i32, i32* %22, align 4
  %23 = getelementptr inbounds i8, i8* %closure_arg, i64 56
  %24 = bitcast i8* %23 to i32*
  %t458 = load i32, i32* %24, align 4
  %25 = getelementptr inbounds i8, i8* %closure_arg, i64 60
  %26 = bitcast i8* %25 to i32*
  %t459 = load i32, i32* %26, align 4
  %27 = getelementptr inbounds i8, i8* %closure_arg, i64 64
  %28 = bitcast i8* %27 to i32*
  %t460 = load i32, i32* %28, align 4
  %29 = getelementptr inbounds i8, i8* %closure_arg, i64 68
  %30 = bitcast i8* %29 to i32*
  %t463 = load i32, i32* %30, align 4
  %31 = getelementptr inbounds i8, i8* %closure_arg, i64 72
  %32 = bitcast i8* %31 to i32*
  %t464 = load i32, i32* %32, align 4
  %33 = getelementptr inbounds i8, i8* %closure_arg, i64 76
  %34 = bitcast i8* %33 to i1*
  %t449 = load i1, i1* %34, align 1
  %a0 = shl nsw i32 %output.s0.y.y.v1, 7
  %35 = icmp slt i32 %a0, %b3
  %output.s0.y.y.y.base = select i1 %35, i32 %a0, i32 %b3
  %t481 = shl nsw i32 %output.s0.y.y.y.base, 2
  %36 = add nsw i32 %t452, 191
  %a11 = ashr i32 %36, 7
  %37 = sub i32 2, %output.min.1
  %t467 = sub i32 %37, %t481
  %t465 = add nsw i32 %t481, %output.min.1
  %38 = icmp sgt i32 %t450, 0
  %39 = icmp sgt i32 %a11, 0
  %t542 = select i1 %39, i32 %a11, i32 0
  %40 = shl nuw nsw i32 %t542, 7
  %41 = zext i32 %40 to i64
  %42 = shl nuw nsw i64 %41, 3
  %43 = or i64 %42, 3
  %44 = shl nsw i32 %a11, 1
  %a21 = add nsw i32 %b41, 1
  %45 = icmp sgt i32 %t460, 0
  %46 = add i32 %output.min.0, -3
  %47 = add nsw i32 %input.extent.0, -1
  %48 = insertelement <64 x i32> undef, i32 %47, i32 0
  %49 = shufflevector <64 x i32> %48, <64 x i32> undef, <4 x i32> zeroinitializer
  %t495 = sub nsw i32 %t460, %t456
  %50 = icmp sgt i32 %t464, 0
  %t500 = sub nsw i32 %t456, %t464
  %51 = icmp sgt i32 %t500, 0
  %52 = sext i32 %t464 to i64
  %53 = icmp sgt i32 %t495, 0
  %a37 = add nsw i32 %b41, -1
  %t521 = mul nsw i32 %a11, 14
  %t519 = mul nsw i32 %a11, 12
  %t517 = mul nsw i32 %a11, 10
  %t512 = shl nsw i32 %a11, 3
  %t514 = mul nsw i32 %a11, 6
  %t515 = shl nsw i32 %a11, 2
  %54 = icmp sgt i32 %t459, 0
  %55 = sext i32 %t515 to i64
  %56 = sext i32 %t514 to i64
  %57 = sext i32 %t512 to i64
  %58 = sext i32 %t517 to i64
  %59 = zext i32 %t450 to i64
  %60 = zext i32 %t460 to i64
  %61 = sext i32 %a21 to i64
  %62 = zext i32 %t464 to i64
  %63 = zext i32 %t500 to i64
  %64 = zext i32 %t495 to i64
  %65 = sext i32 %b41 to i64
  %66 = sext i32 %44 to i64
  %67 = sext i32 %t519 to i64
  %68 = sext i32 %t521 to i64
  %69 = zext i32 %t459 to i64
  %70 = sext i32 %t465 to i64
  %71 = getelementptr inbounds i8, i8* %input, i64 -3
  br label %"for output.s0.y.y.y"

"for output.s0.y.y.y":                            ; preds = %entry, %call_destructor.exit
  %indvars.iv287 = phi i64 [ 0, %entry ], [ %indvars.iv.next288, %call_destructor.exit ]
  %72 = trunc i64 %indvars.iv287 to i32
  %73 = add i32 %output.s0.y.y.y.base, %72
  %74 = shl nsw i32 %73, 2
  %75 = add i32 %74, %output.min.1
  %a3 = add nsw i32 %75, 14
  %76 = icmp slt i32 %a3, %b41
  %a2 = select i1 %76, i32 %a3, i32 %b41
  %77 = icmp sgt i32 %a2, 1
  %78 = select i1 %77, i32 %a2, i32 1
  %79 = icmp sle i32 %78, %b41
  %80 = and i1 %t449, %79
  %81 = shl nsw i64 %indvars.iv287, 2
  br i1 %80, label %then_bb, label %after_bb

"end for output.s0.y.y.y":                        ; preds = %call_destructor.exit
  %input17 = load i8*, i8** %0, align 8
  %output18 = load i8*, i8** %2, align 8
  %input.extent.019 = load i32, i32* %4, align 4
  %b123 = load i32, i32* %6, align 4
  %input.stride.120 = load i32, i32* %8, align 4
  %output.min.021 = load i32, i32* %10, align 4
  %output.min.122 = load i32, i32* %12, align 4
  %output.stride.123 = load i32, i32* %14, align 4
  %b130 = load i32, i32* %16, align 4
  %t45024 = load i32, i32* %18, align 4
  %t45225 = load i32, i32* %20, align 4
  %t45626 = load i32, i32* %22, align 4
  %t45827 = load i32, i32* %24, align 4
  %t45928 = load i32, i32* %26, align 4
  %t46029 = load i32, i32* %28, align 4
  %t46330 = load i32, i32* %30, align 4
  %t46431 = load i32, i32* %32, align 4
  %t44932 = load i1, i1* %34, align 1
  %82 = icmp slt i32 %a0, %b130
  %output.s0.y.y.y.base33 = select i1 %82, i32 %a0, i32 %b130
  %83 = add nsw i32 %t45225, 191
  %a62 = ashr i32 %83, 7
  %84 = sub i32 2, %output.min.122
  %85 = shl nsw i32 %output.s0.y.y.y.base33, 2
  %86 = add nsw i32 %85, %output.min.122
  %87 = icmp sgt i32 %t45024, 0
  %88 = icmp sgt i32 %a62, 0
  %t1029 = select i1 %88, i32 %a62, i32 0
  %89 = shl nuw nsw i32 %t1029, 7
  %90 = zext i32 %89 to i64
  %91 = shl nuw nsw i64 %90, 3
  %92 = or i64 %91, 3
  %93 = sub i32 %84, %85
  %94 = shl nsw i32 %a62, 1
  %a76 = add nsw i32 %b123, 1
  %95 = icmp sgt i32 %t46029, 0
  %96 = add i32 %output.min.021, -3
  %97 = add nsw i32 %input.extent.019, -1
  %98 = insertelement <64 x i32> undef, i32 %97, i32 0
  %99 = shufflevector <64 x i32> %98, <64 x i32> undef, <4 x i32> zeroinitializer
  %t49570 = sub nsw i32 %t46029, %t45626
  %100 = icmp sgt i32 %t46431, 0
  %t50080 = sub nsw i32 %t45626, %t46431
  %101 = icmp sgt i32 %t50080, 0
  %102 = sext i32 %t46431 to i64
  %103 = icmp sgt i32 %t49570, 0
  %a114 = add nsw i32 %b123, -1
  %t517106 = mul nsw i32 %a62, 10
  %t512107 = shl nsw i32 %a62, 3
  %t514108 = mul nsw i32 %a62, 6
  %t515109 = shl nsw i32 %a62, 2
  %104 = icmp sgt i32 %t45928, 0
  %105 = sext i32 %t515109 to i64
  %106 = sext i32 %t514108 to i64
  %107 = mul nsw i32 %a62, 12
  %108 = sext i32 %t512107 to i64
  %109 = mul nsw i32 %a62, 14
  %110 = sext i32 %t517106 to i64
  %111 = zext i32 %t45024 to i64
  %112 = zext i32 %t46029 to i64
  %113 = sext i32 %a76 to i64
  %114 = zext i32 %t46431 to i64
  %115 = zext i32 %t50080 to i64
  %116 = zext i32 %t49570 to i64
  %117 = sext i32 %b123 to i64
  %118 = sext i32 %94 to i64
  %119 = sext i32 %107 to i64
  %120 = sext i32 %109 to i64
  %121 = zext i32 %t45928 to i64
  %122 = sext i32 %86 to i64
  %123 = getelementptr inbounds i8, i8* %input17, i64 -3
  br label %"for output.s0.y.y.y38"

after_bb:                                         ; preds = %"end for prefetch_split_input.0.loopexit.us", %"for output.s0.y.y.y", %then_bb
  %bounded_input = tail call i8* @halide_malloc(i8* %__user_context, i64 %43)
  %124 = icmp sgt i32 %75, 2
  %a12 = select i1 %124, i32 %75, i32 2
  %b14 = add nsw i32 %75, 8
  %125 = icmp slt i32 %a12, %b14
  %bounded_input.s0.y.prologue.s = select i1 %125, i32 %a12, i32 %b14
  %a15 = add nsw i32 %75, 6
  %126 = icmp slt i32 %a15, %b41
  %a14 = select i1 %126, i32 %a15, i32 %b41
  %b16 = add i32 %bounded_input.s0.y.prologue.s, -2
  %127 = icmp sgt i32 %a14, %b16
  %bounded_input.s0.y.epilogue = select i1 %127, i32 %a14, i32 %b16
  %128 = trunc i64 %81 to i32
  %a19 = sub i32 %t467, %128
  %129 = icmp sgt i32 %a19, 0
  br i1 %129, label %"for bounded_input.s0.y.rebased.preheader", label %"end for bounded_input.s0.y.rebased", !prof !385

"for bounded_input.s0.y.rebased.preheader":       ; preds = %after_bb
  %130 = icmp slt i32 %a19, 8
  %a18 = select i1 %130, i32 %a19, i32 8
  %131 = sext i32 %75 to i64
  %132 = zext i32 %a18 to i64
  br label %"for bounded_input.s0.y.rebased"

then_bb:                                          ; preds = %"for output.s0.y.y.y"
  %133 = add nsw i64 %81, %70
  %134 = add nsw i64 %133, 14
  %135 = icmp slt i64 %134, %65
  %136 = trunc i64 %134 to i32
  %137 = select i1 %135, i32 %136, i32 %b41
  %138 = add nsw i64 %133, 7
  %139 = icmp slt i64 %138, %65
  %140 = trunc i64 %138 to i32
  %a6 = select i1 %139, i32 %140, i32 %b41
  %141 = icmp sgt i32 %a6, 1
  %142 = select i1 %141, i32 %a6, i32 1
  %a4 = sub nsw i32 %137, %142
  %a9 = add nsw i32 %75, 7
  %143 = icmp slt i32 %a9, %b41
  %a8 = select i1 %143, i32 %a9, i32 %b41
  br i1 %38, label %"for prefetch_reduce_input.1.us.preheader", label %after_bb, !prof !385

"for prefetch_reduce_input.1.us.preheader":       ; preds = %then_bb
  %144 = icmp sgt i32 %a8, 1
  %145 = select i1 %144, i32 %a8, i32 1
  %146 = add nsw i32 %145, -1
  %147 = icmp sgt i32 %a4, 0
  %148 = select i1 %147, i32 %a4, i32 0
  %149 = zext i32 %148 to i64
  br label %"for prefetch_reduce_input.1.us"

"for prefetch_reduce_input.1.us":                 ; preds = %"for prefetch_reduce_input.1.us.preheader", %"end for prefetch_split_input.0.loopexit.us"
  %indvars.iv257 = phi i64 [ 0, %"for prefetch_reduce_input.1.us.preheader" ], [ %indvars.iv.next258, %"end for prefetch_split_input.0.loopexit.us" ]
  %150 = trunc i64 %indvars.iv257 to i32
  %151 = add i32 %146, %150
  %reass.mul.us = mul i32 %151, %input.stride.1
  %t486.us = add i32 %reass.mul.us, %t463
  %152 = sext i32 %t486.us to i64
  br label %"for prefetch_split_input.0.us"

"for prefetch_split_input.0.us":                  ; preds = %"for prefetch_reduce_input.1.us", %"for prefetch_split_input.0.us"
  %indvars.iv = phi i64 [ 0, %"for prefetch_reduce_input.1.us" ], [ %indvars.iv.next, %"for prefetch_split_input.0.us" ]
  %153 = shl nuw nsw i64 %indvars.iv, 5
  %154 = add nsw i64 %153, %152
  %155 = getelementptr inbounds i8, i8* %71, i64 %154
  tail call void @llvm.prefetch.p0i8(i8* nonnull %155, i32 0, i32 0, i32 1) #12
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %.not238.us = icmp eq i64 %indvars.iv.next, %59
  br i1 %.not238.us, label %"end for prefetch_split_input.0.loopexit.us", label %"for prefetch_split_input.0.us"

"end for prefetch_split_input.0.loopexit.us":     ; preds = %"for prefetch_split_input.0.us"
  %indvars.iv.next258 = add nuw nsw i64 %indvars.iv257, 1
  %.not237.us = icmp eq i64 %indvars.iv257, %149
  br i1 %.not237.us, label %after_bb, label %"for prefetch_reduce_input.1.us"

"for bounded_input.s0.y.rebased":                 ; preds = %"for bounded_input.s0.y.rebased.preheader", %"end for bounded_input.s0.x.x"
  %indvars.iv262 = phi i64 [ 0, %"for bounded_input.s0.y.rebased.preheader" ], [ %indvars.iv.next263, %"end for bounded_input.s0.x.x" ]
  %156 = add nsw i64 %indvars.iv262, %131
  %157 = icmp sgt i64 %156, %61
  %158 = trunc i64 %156 to i32
  %a20 = select i1 %157, i32 %a21, i32 %158
  br i1 %45, label %"for bounded_input.s0.x.x.preheader", label %"end for bounded_input.s0.x.x", !prof !385

"for bounded_input.s0.x.x.preheader":             ; preds = %"for bounded_input.s0.y.rebased"
  %159 = icmp sgt i32 %a20, 2
  %160 = select i1 %159, i32 %a20, i32 2
  %161 = add nsw i32 %160, -2
  %t489 = mul nsw i32 %161, %input.stride.1
  %162 = trunc i64 %indvars.iv262 to i32
  %t490 = mul i32 %44, %162
  %163 = insertelement <64 x i32> undef, i32 %t489, i32 0
  %164 = shufflevector <64 x i32> %163, <64 x i32> undef, <64 x i32> zeroinitializer
  %165 = sext i32 %t490 to i64
  br label %"for bounded_input.s0.x.x"

"end for bounded_input.s0.y.rebased":             ; preds = %"end for bounded_input.s0.x.x", %after_bb
  %166 = add nsw i64 %81, %70
  %167 = add nsw i64 %166, 6
  %168 = icmp slt i64 %167, %65
  %169 = trunc i64 %167 to i32
  %170 = select i1 %168, i32 %169, i32 %b41
  %171 = trunc i64 %166 to i32
  %172 = icmp sgt i64 %166, 2
  %a24337 = select i1 %172, i64 %166, i64 2
  %173 = add nsw i64 %166, 8
  %sext = shl i64 %a24337, 32
  %174 = ashr exact i64 %sext, 32
  %175 = icmp slt i64 %174, %173
  %.v = select i1 %175, i64 %a24337, i64 %173
  %176 = trunc i64 %.v to i32
  %a22 = sub nsw i32 %170, %176
  %177 = icmp sgt i32 %a22, -2
  br i1 %177, label %"for bounded_input.s0.y.rebased1.preheader", label %"end for bounded_input.s0.y.rebased2", !prof !385

"for bounded_input.s0.y.rebased1.preheader":      ; preds = %"end for bounded_input.s0.y.rebased"
  %178 = sub i32 %176, %75
  %a22.op = add i32 %a22, 1
  %179 = zext i32 %a22.op to i64
  br label %"for bounded_input.s0.y.rebased1"

"for bounded_input.s0.x.x":                       ; preds = %"for bounded_input.s0.x.x.preheader", %"for bounded_input.s0.x.x"
  %indvars.iv260 = phi i64 [ 0, %"for bounded_input.s0.x.x.preheader" ], [ %indvars.iv.next261, %"for bounded_input.s0.x.x" ]
  %180 = trunc i64 %indvars.iv260 to i32
  %181 = shl nsw i32 %180, 6
  %182 = add i32 %46, %181
  %183 = insertelement <64 x i32> undef, i32 %182, i32 0
  %184 = shufflevector <64 x i32> %183, <64 x i32> undef, <64 x i32> zeroinitializer
  %185 = add nsw <64 x i32> %184, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %186 = shufflevector <64 x i32> %185, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %187 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %186, <4 x i32> %49)
  %188 = shufflevector <64 x i32> %185, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %189 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %188, <4 x i32> %49)
  %190 = shufflevector <64 x i32> %185, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %191 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %190, <4 x i32> %49)
  %192 = shufflevector <64 x i32> %185, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %193 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %192, <4 x i32> %49)
  %194 = shufflevector <64 x i32> %185, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %195 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %194, <4 x i32> %49)
  %196 = shufflevector <64 x i32> %185, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %197 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %196, <4 x i32> %49)
  %198 = shufflevector <64 x i32> %185, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %199 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %198, <4 x i32> %49)
  %200 = shufflevector <64 x i32> %185, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %201 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %200, <4 x i32> %49)
  %202 = shufflevector <64 x i32> %185, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %203 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %202, <4 x i32> %49)
  %204 = shufflevector <64 x i32> %185, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %205 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %204, <4 x i32> %49)
  %206 = shufflevector <64 x i32> %185, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %207 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %206, <4 x i32> %49)
  %208 = shufflevector <64 x i32> %185, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %209 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %208, <4 x i32> %49)
  %210 = shufflevector <64 x i32> %185, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %211 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %210, <4 x i32> %49)
  %212 = shufflevector <64 x i32> %185, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %213 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %212, <4 x i32> %49)
  %214 = shufflevector <64 x i32> %185, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %215 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %214, <4 x i32> %49)
  %216 = shufflevector <64 x i32> %185, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %217 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %216, <4 x i32> %49)
  %218 = shufflevector <4 x i32> %217, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %219 = shufflevector <8 x i32> %218, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %220 = shufflevector <16 x i32> %219, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %221 = shufflevector <32 x i32> %220, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %222 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %187, <4 x i32> zeroinitializer)
  %223 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %189, <4 x i32> zeroinitializer)
  %224 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %191, <4 x i32> zeroinitializer)
  %225 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %193, <4 x i32> zeroinitializer)
  %226 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %195, <4 x i32> zeroinitializer)
  %227 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %197, <4 x i32> zeroinitializer)
  %228 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %199, <4 x i32> zeroinitializer)
  %229 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %201, <4 x i32> zeroinitializer)
  %230 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %203, <4 x i32> zeroinitializer)
  %231 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %205, <4 x i32> zeroinitializer)
  %232 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %207, <4 x i32> zeroinitializer)
  %233 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %209, <4 x i32> zeroinitializer)
  %234 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %211, <4 x i32> zeroinitializer)
  %235 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %213, <4 x i32> zeroinitializer)
  %236 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %215, <4 x i32> zeroinitializer)
  %237 = shufflevector <64 x i32> %221, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %238 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %237, <4 x i32> zeroinitializer)
  %239 = shufflevector <4 x i32> %222, <4 x i32> %223, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %240 = shufflevector <4 x i32> %224, <4 x i32> %225, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %241 = shufflevector <4 x i32> %226, <4 x i32> %227, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %242 = shufflevector <4 x i32> %228, <4 x i32> %229, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %243 = shufflevector <4 x i32> %230, <4 x i32> %231, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %244 = shufflevector <4 x i32> %232, <4 x i32> %233, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %245 = shufflevector <4 x i32> %234, <4 x i32> %235, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %246 = shufflevector <4 x i32> %236, <4 x i32> %238, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %247 = shufflevector <8 x i32> %239, <8 x i32> %240, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %248 = shufflevector <8 x i32> %241, <8 x i32> %242, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %249 = shufflevector <8 x i32> %243, <8 x i32> %244, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %250 = shufflevector <8 x i32> %245, <8 x i32> %246, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %251 = shufflevector <16 x i32> %247, <16 x i32> %248, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %252 = shufflevector <16 x i32> %249, <16 x i32> %250, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %253 = shufflevector <32 x i32> %251, <32 x i32> %252, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %254 = add nsw <64 x i32> %253, %164
  %255 = extractelement <64 x i32> %254, i32 0
  %256 = sext i32 %255 to i64
  %257 = getelementptr inbounds i8, i8* %input, i64 %256
  %258 = load i8, i8* %257, align 1, !tbaa !386
  %259 = insertelement <64 x i8> undef, i8 %258, i32 0
  %260 = extractelement <64 x i32> %254, i32 1
  %261 = sext i32 %260 to i64
  %262 = getelementptr inbounds i8, i8* %input, i64 %261
  %263 = load i8, i8* %262, align 1, !tbaa !386
  %264 = insertelement <64 x i8> %259, i8 %263, i32 1
  %265 = extractelement <64 x i32> %254, i32 2
  %266 = sext i32 %265 to i64
  %267 = getelementptr inbounds i8, i8* %input, i64 %266
  %268 = load i8, i8* %267, align 1, !tbaa !386
  %269 = insertelement <64 x i8> %264, i8 %268, i32 2
  %270 = extractelement <64 x i32> %254, i32 3
  %271 = sext i32 %270 to i64
  %272 = getelementptr inbounds i8, i8* %input, i64 %271
  %273 = load i8, i8* %272, align 1, !tbaa !386
  %274 = insertelement <64 x i8> %269, i8 %273, i32 3
  %275 = extractelement <64 x i32> %254, i32 4
  %276 = sext i32 %275 to i64
  %277 = getelementptr inbounds i8, i8* %input, i64 %276
  %278 = load i8, i8* %277, align 1, !tbaa !386
  %279 = insertelement <64 x i8> %274, i8 %278, i32 4
  %280 = extractelement <64 x i32> %254, i32 5
  %281 = sext i32 %280 to i64
  %282 = getelementptr inbounds i8, i8* %input, i64 %281
  %283 = load i8, i8* %282, align 1, !tbaa !386
  %284 = insertelement <64 x i8> %279, i8 %283, i32 5
  %285 = extractelement <64 x i32> %254, i32 6
  %286 = sext i32 %285 to i64
  %287 = getelementptr inbounds i8, i8* %input, i64 %286
  %288 = load i8, i8* %287, align 1, !tbaa !386
  %289 = insertelement <64 x i8> %284, i8 %288, i32 6
  %290 = extractelement <64 x i32> %254, i32 7
  %291 = sext i32 %290 to i64
  %292 = getelementptr inbounds i8, i8* %input, i64 %291
  %293 = load i8, i8* %292, align 1, !tbaa !386
  %294 = insertelement <64 x i8> %289, i8 %293, i32 7
  %295 = extractelement <64 x i32> %254, i32 8
  %296 = sext i32 %295 to i64
  %297 = getelementptr inbounds i8, i8* %input, i64 %296
  %298 = load i8, i8* %297, align 1, !tbaa !386
  %299 = insertelement <64 x i8> %294, i8 %298, i32 8
  %300 = extractelement <64 x i32> %254, i32 9
  %301 = sext i32 %300 to i64
  %302 = getelementptr inbounds i8, i8* %input, i64 %301
  %303 = load i8, i8* %302, align 1, !tbaa !386
  %304 = insertelement <64 x i8> %299, i8 %303, i32 9
  %305 = extractelement <64 x i32> %254, i32 10
  %306 = sext i32 %305 to i64
  %307 = getelementptr inbounds i8, i8* %input, i64 %306
  %308 = load i8, i8* %307, align 1, !tbaa !386
  %309 = insertelement <64 x i8> %304, i8 %308, i32 10
  %310 = extractelement <64 x i32> %254, i32 11
  %311 = sext i32 %310 to i64
  %312 = getelementptr inbounds i8, i8* %input, i64 %311
  %313 = load i8, i8* %312, align 1, !tbaa !386
  %314 = insertelement <64 x i8> %309, i8 %313, i32 11
  %315 = extractelement <64 x i32> %254, i32 12
  %316 = sext i32 %315 to i64
  %317 = getelementptr inbounds i8, i8* %input, i64 %316
  %318 = load i8, i8* %317, align 1, !tbaa !386
  %319 = insertelement <64 x i8> %314, i8 %318, i32 12
  %320 = extractelement <64 x i32> %254, i32 13
  %321 = sext i32 %320 to i64
  %322 = getelementptr inbounds i8, i8* %input, i64 %321
  %323 = load i8, i8* %322, align 1, !tbaa !386
  %324 = insertelement <64 x i8> %319, i8 %323, i32 13
  %325 = extractelement <64 x i32> %254, i32 14
  %326 = sext i32 %325 to i64
  %327 = getelementptr inbounds i8, i8* %input, i64 %326
  %328 = load i8, i8* %327, align 1, !tbaa !386
  %329 = insertelement <64 x i8> %324, i8 %328, i32 14
  %330 = extractelement <64 x i32> %254, i32 15
  %331 = sext i32 %330 to i64
  %332 = getelementptr inbounds i8, i8* %input, i64 %331
  %333 = load i8, i8* %332, align 1, !tbaa !386
  %334 = insertelement <64 x i8> %329, i8 %333, i32 15
  %335 = extractelement <64 x i32> %254, i32 16
  %336 = sext i32 %335 to i64
  %337 = getelementptr inbounds i8, i8* %input, i64 %336
  %338 = load i8, i8* %337, align 1, !tbaa !386
  %339 = insertelement <64 x i8> %334, i8 %338, i32 16
  %340 = extractelement <64 x i32> %254, i32 17
  %341 = sext i32 %340 to i64
  %342 = getelementptr inbounds i8, i8* %input, i64 %341
  %343 = load i8, i8* %342, align 1, !tbaa !386
  %344 = insertelement <64 x i8> %339, i8 %343, i32 17
  %345 = extractelement <64 x i32> %254, i32 18
  %346 = sext i32 %345 to i64
  %347 = getelementptr inbounds i8, i8* %input, i64 %346
  %348 = load i8, i8* %347, align 1, !tbaa !386
  %349 = insertelement <64 x i8> %344, i8 %348, i32 18
  %350 = extractelement <64 x i32> %254, i32 19
  %351 = sext i32 %350 to i64
  %352 = getelementptr inbounds i8, i8* %input, i64 %351
  %353 = load i8, i8* %352, align 1, !tbaa !386
  %354 = insertelement <64 x i8> %349, i8 %353, i32 19
  %355 = extractelement <64 x i32> %254, i32 20
  %356 = sext i32 %355 to i64
  %357 = getelementptr inbounds i8, i8* %input, i64 %356
  %358 = load i8, i8* %357, align 1, !tbaa !386
  %359 = insertelement <64 x i8> %354, i8 %358, i32 20
  %360 = extractelement <64 x i32> %254, i32 21
  %361 = sext i32 %360 to i64
  %362 = getelementptr inbounds i8, i8* %input, i64 %361
  %363 = load i8, i8* %362, align 1, !tbaa !386
  %364 = insertelement <64 x i8> %359, i8 %363, i32 21
  %365 = extractelement <64 x i32> %254, i32 22
  %366 = sext i32 %365 to i64
  %367 = getelementptr inbounds i8, i8* %input, i64 %366
  %368 = load i8, i8* %367, align 1, !tbaa !386
  %369 = insertelement <64 x i8> %364, i8 %368, i32 22
  %370 = extractelement <64 x i32> %254, i32 23
  %371 = sext i32 %370 to i64
  %372 = getelementptr inbounds i8, i8* %input, i64 %371
  %373 = load i8, i8* %372, align 1, !tbaa !386
  %374 = insertelement <64 x i8> %369, i8 %373, i32 23
  %375 = extractelement <64 x i32> %254, i32 24
  %376 = sext i32 %375 to i64
  %377 = getelementptr inbounds i8, i8* %input, i64 %376
  %378 = load i8, i8* %377, align 1, !tbaa !386
  %379 = insertelement <64 x i8> %374, i8 %378, i32 24
  %380 = extractelement <64 x i32> %254, i32 25
  %381 = sext i32 %380 to i64
  %382 = getelementptr inbounds i8, i8* %input, i64 %381
  %383 = load i8, i8* %382, align 1, !tbaa !386
  %384 = insertelement <64 x i8> %379, i8 %383, i32 25
  %385 = extractelement <64 x i32> %254, i32 26
  %386 = sext i32 %385 to i64
  %387 = getelementptr inbounds i8, i8* %input, i64 %386
  %388 = load i8, i8* %387, align 1, !tbaa !386
  %389 = insertelement <64 x i8> %384, i8 %388, i32 26
  %390 = extractelement <64 x i32> %254, i32 27
  %391 = sext i32 %390 to i64
  %392 = getelementptr inbounds i8, i8* %input, i64 %391
  %393 = load i8, i8* %392, align 1, !tbaa !386
  %394 = insertelement <64 x i8> %389, i8 %393, i32 27
  %395 = extractelement <64 x i32> %254, i32 28
  %396 = sext i32 %395 to i64
  %397 = getelementptr inbounds i8, i8* %input, i64 %396
  %398 = load i8, i8* %397, align 1, !tbaa !386
  %399 = insertelement <64 x i8> %394, i8 %398, i32 28
  %400 = extractelement <64 x i32> %254, i32 29
  %401 = sext i32 %400 to i64
  %402 = getelementptr inbounds i8, i8* %input, i64 %401
  %403 = load i8, i8* %402, align 1, !tbaa !386
  %404 = insertelement <64 x i8> %399, i8 %403, i32 29
  %405 = extractelement <64 x i32> %254, i32 30
  %406 = sext i32 %405 to i64
  %407 = getelementptr inbounds i8, i8* %input, i64 %406
  %408 = load i8, i8* %407, align 1, !tbaa !386
  %409 = insertelement <64 x i8> %404, i8 %408, i32 30
  %410 = extractelement <64 x i32> %254, i32 31
  %411 = sext i32 %410 to i64
  %412 = getelementptr inbounds i8, i8* %input, i64 %411
  %413 = load i8, i8* %412, align 1, !tbaa !386
  %414 = insertelement <64 x i8> %409, i8 %413, i32 31
  %415 = extractelement <64 x i32> %254, i32 32
  %416 = sext i32 %415 to i64
  %417 = getelementptr inbounds i8, i8* %input, i64 %416
  %418 = load i8, i8* %417, align 1, !tbaa !386
  %419 = insertelement <64 x i8> %414, i8 %418, i32 32
  %420 = extractelement <64 x i32> %254, i32 33
  %421 = sext i32 %420 to i64
  %422 = getelementptr inbounds i8, i8* %input, i64 %421
  %423 = load i8, i8* %422, align 1, !tbaa !386
  %424 = insertelement <64 x i8> %419, i8 %423, i32 33
  %425 = extractelement <64 x i32> %254, i32 34
  %426 = sext i32 %425 to i64
  %427 = getelementptr inbounds i8, i8* %input, i64 %426
  %428 = load i8, i8* %427, align 1, !tbaa !386
  %429 = insertelement <64 x i8> %424, i8 %428, i32 34
  %430 = extractelement <64 x i32> %254, i32 35
  %431 = sext i32 %430 to i64
  %432 = getelementptr inbounds i8, i8* %input, i64 %431
  %433 = load i8, i8* %432, align 1, !tbaa !386
  %434 = insertelement <64 x i8> %429, i8 %433, i32 35
  %435 = extractelement <64 x i32> %254, i32 36
  %436 = sext i32 %435 to i64
  %437 = getelementptr inbounds i8, i8* %input, i64 %436
  %438 = load i8, i8* %437, align 1, !tbaa !386
  %439 = insertelement <64 x i8> %434, i8 %438, i32 36
  %440 = extractelement <64 x i32> %254, i32 37
  %441 = sext i32 %440 to i64
  %442 = getelementptr inbounds i8, i8* %input, i64 %441
  %443 = load i8, i8* %442, align 1, !tbaa !386
  %444 = insertelement <64 x i8> %439, i8 %443, i32 37
  %445 = extractelement <64 x i32> %254, i32 38
  %446 = sext i32 %445 to i64
  %447 = getelementptr inbounds i8, i8* %input, i64 %446
  %448 = load i8, i8* %447, align 1, !tbaa !386
  %449 = insertelement <64 x i8> %444, i8 %448, i32 38
  %450 = extractelement <64 x i32> %254, i32 39
  %451 = sext i32 %450 to i64
  %452 = getelementptr inbounds i8, i8* %input, i64 %451
  %453 = load i8, i8* %452, align 1, !tbaa !386
  %454 = insertelement <64 x i8> %449, i8 %453, i32 39
  %455 = extractelement <64 x i32> %254, i32 40
  %456 = sext i32 %455 to i64
  %457 = getelementptr inbounds i8, i8* %input, i64 %456
  %458 = load i8, i8* %457, align 1, !tbaa !386
  %459 = insertelement <64 x i8> %454, i8 %458, i32 40
  %460 = extractelement <64 x i32> %254, i32 41
  %461 = sext i32 %460 to i64
  %462 = getelementptr inbounds i8, i8* %input, i64 %461
  %463 = load i8, i8* %462, align 1, !tbaa !386
  %464 = insertelement <64 x i8> %459, i8 %463, i32 41
  %465 = extractelement <64 x i32> %254, i32 42
  %466 = sext i32 %465 to i64
  %467 = getelementptr inbounds i8, i8* %input, i64 %466
  %468 = load i8, i8* %467, align 1, !tbaa !386
  %469 = insertelement <64 x i8> %464, i8 %468, i32 42
  %470 = extractelement <64 x i32> %254, i32 43
  %471 = sext i32 %470 to i64
  %472 = getelementptr inbounds i8, i8* %input, i64 %471
  %473 = load i8, i8* %472, align 1, !tbaa !386
  %474 = insertelement <64 x i8> %469, i8 %473, i32 43
  %475 = extractelement <64 x i32> %254, i32 44
  %476 = sext i32 %475 to i64
  %477 = getelementptr inbounds i8, i8* %input, i64 %476
  %478 = load i8, i8* %477, align 1, !tbaa !386
  %479 = insertelement <64 x i8> %474, i8 %478, i32 44
  %480 = extractelement <64 x i32> %254, i32 45
  %481 = sext i32 %480 to i64
  %482 = getelementptr inbounds i8, i8* %input, i64 %481
  %483 = load i8, i8* %482, align 1, !tbaa !386
  %484 = insertelement <64 x i8> %479, i8 %483, i32 45
  %485 = extractelement <64 x i32> %254, i32 46
  %486 = sext i32 %485 to i64
  %487 = getelementptr inbounds i8, i8* %input, i64 %486
  %488 = load i8, i8* %487, align 1, !tbaa !386
  %489 = insertelement <64 x i8> %484, i8 %488, i32 46
  %490 = extractelement <64 x i32> %254, i32 47
  %491 = sext i32 %490 to i64
  %492 = getelementptr inbounds i8, i8* %input, i64 %491
  %493 = load i8, i8* %492, align 1, !tbaa !386
  %494 = insertelement <64 x i8> %489, i8 %493, i32 47
  %495 = extractelement <64 x i32> %254, i32 48
  %496 = sext i32 %495 to i64
  %497 = getelementptr inbounds i8, i8* %input, i64 %496
  %498 = load i8, i8* %497, align 1, !tbaa !386
  %499 = insertelement <64 x i8> %494, i8 %498, i32 48
  %500 = extractelement <64 x i32> %254, i32 49
  %501 = sext i32 %500 to i64
  %502 = getelementptr inbounds i8, i8* %input, i64 %501
  %503 = load i8, i8* %502, align 1, !tbaa !386
  %504 = insertelement <64 x i8> %499, i8 %503, i32 49
  %505 = extractelement <64 x i32> %254, i32 50
  %506 = sext i32 %505 to i64
  %507 = getelementptr inbounds i8, i8* %input, i64 %506
  %508 = load i8, i8* %507, align 1, !tbaa !386
  %509 = insertelement <64 x i8> %504, i8 %508, i32 50
  %510 = extractelement <64 x i32> %254, i32 51
  %511 = sext i32 %510 to i64
  %512 = getelementptr inbounds i8, i8* %input, i64 %511
  %513 = load i8, i8* %512, align 1, !tbaa !386
  %514 = insertelement <64 x i8> %509, i8 %513, i32 51
  %515 = extractelement <64 x i32> %254, i32 52
  %516 = sext i32 %515 to i64
  %517 = getelementptr inbounds i8, i8* %input, i64 %516
  %518 = load i8, i8* %517, align 1, !tbaa !386
  %519 = insertelement <64 x i8> %514, i8 %518, i32 52
  %520 = extractelement <64 x i32> %254, i32 53
  %521 = sext i32 %520 to i64
  %522 = getelementptr inbounds i8, i8* %input, i64 %521
  %523 = load i8, i8* %522, align 1, !tbaa !386
  %524 = insertelement <64 x i8> %519, i8 %523, i32 53
  %525 = extractelement <64 x i32> %254, i32 54
  %526 = sext i32 %525 to i64
  %527 = getelementptr inbounds i8, i8* %input, i64 %526
  %528 = load i8, i8* %527, align 1, !tbaa !386
  %529 = insertelement <64 x i8> %524, i8 %528, i32 54
  %530 = extractelement <64 x i32> %254, i32 55
  %531 = sext i32 %530 to i64
  %532 = getelementptr inbounds i8, i8* %input, i64 %531
  %533 = load i8, i8* %532, align 1, !tbaa !386
  %534 = insertelement <64 x i8> %529, i8 %533, i32 55
  %535 = extractelement <64 x i32> %254, i32 56
  %536 = sext i32 %535 to i64
  %537 = getelementptr inbounds i8, i8* %input, i64 %536
  %538 = load i8, i8* %537, align 1, !tbaa !386
  %539 = insertelement <64 x i8> %534, i8 %538, i32 56
  %540 = extractelement <64 x i32> %254, i32 57
  %541 = sext i32 %540 to i64
  %542 = getelementptr inbounds i8, i8* %input, i64 %541
  %543 = load i8, i8* %542, align 1, !tbaa !386
  %544 = insertelement <64 x i8> %539, i8 %543, i32 57
  %545 = extractelement <64 x i32> %254, i32 58
  %546 = sext i32 %545 to i64
  %547 = getelementptr inbounds i8, i8* %input, i64 %546
  %548 = load i8, i8* %547, align 1, !tbaa !386
  %549 = insertelement <64 x i8> %544, i8 %548, i32 58
  %550 = extractelement <64 x i32> %254, i32 59
  %551 = sext i32 %550 to i64
  %552 = getelementptr inbounds i8, i8* %input, i64 %551
  %553 = load i8, i8* %552, align 1, !tbaa !386
  %554 = insertelement <64 x i8> %549, i8 %553, i32 59
  %555 = extractelement <64 x i32> %254, i32 60
  %556 = sext i32 %555 to i64
  %557 = getelementptr inbounds i8, i8* %input, i64 %556
  %558 = load i8, i8* %557, align 1, !tbaa !386
  %559 = insertelement <64 x i8> %554, i8 %558, i32 60
  %560 = extractelement <64 x i32> %254, i32 61
  %561 = sext i32 %560 to i64
  %562 = getelementptr inbounds i8, i8* %input, i64 %561
  %563 = load i8, i8* %562, align 1, !tbaa !386
  %564 = insertelement <64 x i8> %559, i8 %563, i32 61
  %565 = extractelement <64 x i32> %254, i32 62
  %566 = sext i32 %565 to i64
  %567 = getelementptr inbounds i8, i8* %input, i64 %566
  %568 = load i8, i8* %567, align 1, !tbaa !386
  %569 = insertelement <64 x i8> %564, i8 %568, i32 62
  %570 = extractelement <64 x i32> %254, i32 63
  %571 = sext i32 %570 to i64
  %572 = getelementptr inbounds i8, i8* %input, i64 %571
  %573 = load i8, i8* %572, align 1, !tbaa !386
  %574 = insertelement <64 x i8> %569, i8 %573, i32 63
  %575 = shufflevector <64 x i8> %574, <64 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %576 = add nsw i64 %indvars.iv260, %165
  %577 = shl nsw i64 %576, 6
  %578 = getelementptr inbounds i8, i8* %bounded_input, i64 %577
  %579 = bitcast i8* %578 to <16 x i8>*
  store <16 x i8> %575, <16 x i8>* %579, align 16, !tbaa !389
  %580 = shufflevector <64 x i8> %574, <64 x i8> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %581 = getelementptr inbounds i8, i8* %578, i64 16
  %582 = bitcast i8* %581 to <16 x i8>*
  store <16 x i8> %580, <16 x i8>* %582, align 16, !tbaa !389
  %583 = shufflevector <64 x i8> %574, <64 x i8> undef, <16 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %584 = getelementptr inbounds i8, i8* %578, i64 32
  %585 = bitcast i8* %584 to <16 x i8>*
  store <16 x i8> %583, <16 x i8>* %585, align 16, !tbaa !389
  %586 = shufflevector <64 x i8> %574, <64 x i8> undef, <16 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %587 = getelementptr inbounds i8, i8* %578, i64 48
  %588 = bitcast i8* %587 to <16 x i8>*
  store <16 x i8> %586, <16 x i8>* %588, align 16, !tbaa !389
  %indvars.iv.next261 = add nuw nsw i64 %indvars.iv260, 1
  %.not236 = icmp eq i64 %indvars.iv.next261, %60
  br i1 %.not236, label %"end for bounded_input.s0.x.x", label %"for bounded_input.s0.x.x"

"end for bounded_input.s0.x.x":                   ; preds = %"for bounded_input.s0.x.x", %"for bounded_input.s0.y.rebased"
  %indvars.iv.next263 = add nuw nsw i64 %indvars.iv262, 1
  %.not235 = icmp eq i64 %indvars.iv.next263, %132
  br i1 %.not235, label %"end for bounded_input.s0.y.rebased", label %"for bounded_input.s0.y.rebased"

"for bounded_input.s0.y.rebased1":                ; preds = %"for bounded_input.s0.y.rebased1.preheader", %"end for bounded_input.s0.x.x.rebased8"
  %indvars.iv271 = phi i64 [ 0, %"for bounded_input.s0.y.rebased1.preheader" ], [ %indvars.iv.next272, %"end for bounded_input.s0.x.x.rebased8" ]
  %589 = trunc i64 %indvars.iv271 to i32
  %590 = add i32 %178, %589
  %t499 = mul i32 %44, %590
  %591 = add i32 %b16, %589
  %t498 = mul nsw i32 %591, %input.stride.1
  br i1 %50, label %"for bounded_input.s0.x.x4.preheader", label %"end for bounded_input.s0.x.x5", !prof !385

"for bounded_input.s0.x.x4.preheader":            ; preds = %"for bounded_input.s0.y.rebased1"
  %592 = insertelement <64 x i32> undef, i32 %t498, i32 0
  %593 = shufflevector <64 x i32> %592, <64 x i32> undef, <64 x i32> zeroinitializer
  %594 = sext i32 %t499 to i64
  br label %"for bounded_input.s0.x.x4"

"end for bounded_input.s0.y.rebased2":            ; preds = %"end for bounded_input.s0.x.x.rebased8", %"end for bounded_input.s0.y.rebased"
  %b34 = add nsw i32 %176, -2
  %595 = icmp sgt i32 %170, %b34
  %596 = select i1 %595, i32 %170, i32 %b34
  %597 = sub nsw i32 %171, %596
  %598 = icmp sgt i32 %597, -6
  br i1 %598, label %"for bounded_input.s0.y.rebased10.preheader", label %"consume bounded_input", !prof !385

"for bounded_input.s0.y.rebased10.preheader":     ; preds = %"end for bounded_input.s0.y.rebased2"
  %599 = sub i32 %37, %74
  %600 = add i32 %599, %596
  %601 = add nsw i32 %597, 5
  %602 = sext i32 %bounded_input.s0.y.epilogue to i64
  %603 = zext i32 %601 to i64
  br label %"for bounded_input.s0.y.rebased10"

"for bounded_input.s0.x.x4":                      ; preds = %"for bounded_input.s0.x.x4.preheader", %"for bounded_input.s0.x.x4"
  %indvars.iv265 = phi i64 [ 0, %"for bounded_input.s0.x.x4.preheader" ], [ %indvars.iv.next266, %"for bounded_input.s0.x.x4" ]
  %604 = trunc i64 %indvars.iv265 to i32
  %605 = shl nsw i32 %604, 6
  %606 = add i32 %46, %605
  %607 = insertelement <64 x i32> undef, i32 %606, i32 0
  %608 = shufflevector <64 x i32> %607, <64 x i32> undef, <64 x i32> zeroinitializer
  %609 = add nsw <64 x i32> %608, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %610 = shufflevector <64 x i32> %609, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %611 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %610, <4 x i32> %49)
  %612 = shufflevector <64 x i32> %609, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %613 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %612, <4 x i32> %49)
  %614 = shufflevector <64 x i32> %609, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %615 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %614, <4 x i32> %49)
  %616 = shufflevector <64 x i32> %609, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %617 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %616, <4 x i32> %49)
  %618 = shufflevector <64 x i32> %609, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %619 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %618, <4 x i32> %49)
  %620 = shufflevector <64 x i32> %609, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %621 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %620, <4 x i32> %49)
  %622 = shufflevector <64 x i32> %609, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %623 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %622, <4 x i32> %49)
  %624 = shufflevector <64 x i32> %609, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %625 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %624, <4 x i32> %49)
  %626 = shufflevector <64 x i32> %609, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %627 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %626, <4 x i32> %49)
  %628 = shufflevector <64 x i32> %609, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %629 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %628, <4 x i32> %49)
  %630 = shufflevector <64 x i32> %609, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %631 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %630, <4 x i32> %49)
  %632 = shufflevector <64 x i32> %609, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %633 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %632, <4 x i32> %49)
  %634 = shufflevector <64 x i32> %609, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %635 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %634, <4 x i32> %49)
  %636 = shufflevector <64 x i32> %609, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %637 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %636, <4 x i32> %49)
  %638 = shufflevector <64 x i32> %609, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %639 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %638, <4 x i32> %49)
  %640 = shufflevector <64 x i32> %609, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %641 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %640, <4 x i32> %49)
  %642 = shufflevector <4 x i32> %641, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %643 = shufflevector <8 x i32> %642, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %644 = shufflevector <16 x i32> %643, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %645 = shufflevector <32 x i32> %644, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %646 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %611, <4 x i32> zeroinitializer)
  %647 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %613, <4 x i32> zeroinitializer)
  %648 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %615, <4 x i32> zeroinitializer)
  %649 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %617, <4 x i32> zeroinitializer)
  %650 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %619, <4 x i32> zeroinitializer)
  %651 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %621, <4 x i32> zeroinitializer)
  %652 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %623, <4 x i32> zeroinitializer)
  %653 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %625, <4 x i32> zeroinitializer)
  %654 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %627, <4 x i32> zeroinitializer)
  %655 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %629, <4 x i32> zeroinitializer)
  %656 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %631, <4 x i32> zeroinitializer)
  %657 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %633, <4 x i32> zeroinitializer)
  %658 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %635, <4 x i32> zeroinitializer)
  %659 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %637, <4 x i32> zeroinitializer)
  %660 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %639, <4 x i32> zeroinitializer)
  %661 = shufflevector <64 x i32> %645, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %662 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %661, <4 x i32> zeroinitializer)
  %663 = shufflevector <4 x i32> %646, <4 x i32> %647, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %664 = shufflevector <4 x i32> %648, <4 x i32> %649, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %665 = shufflevector <4 x i32> %650, <4 x i32> %651, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %666 = shufflevector <4 x i32> %652, <4 x i32> %653, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %667 = shufflevector <4 x i32> %654, <4 x i32> %655, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %668 = shufflevector <4 x i32> %656, <4 x i32> %657, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %669 = shufflevector <4 x i32> %658, <4 x i32> %659, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %670 = shufflevector <4 x i32> %660, <4 x i32> %662, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %671 = shufflevector <8 x i32> %663, <8 x i32> %664, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %672 = shufflevector <8 x i32> %665, <8 x i32> %666, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %673 = shufflevector <8 x i32> %667, <8 x i32> %668, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %674 = shufflevector <8 x i32> %669, <8 x i32> %670, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %675 = shufflevector <16 x i32> %671, <16 x i32> %672, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %676 = shufflevector <16 x i32> %673, <16 x i32> %674, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %677 = shufflevector <32 x i32> %675, <32 x i32> %676, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %678 = add nsw <64 x i32> %677, %593
  %679 = extractelement <64 x i32> %678, i32 0
  %680 = sext i32 %679 to i64
  %681 = getelementptr inbounds i8, i8* %input, i64 %680
  %682 = load i8, i8* %681, align 1, !tbaa !386
  %683 = insertelement <64 x i8> undef, i8 %682, i32 0
  %684 = extractelement <64 x i32> %678, i32 1
  %685 = sext i32 %684 to i64
  %686 = getelementptr inbounds i8, i8* %input, i64 %685
  %687 = load i8, i8* %686, align 1, !tbaa !386
  %688 = insertelement <64 x i8> %683, i8 %687, i32 1
  %689 = extractelement <64 x i32> %678, i32 2
  %690 = sext i32 %689 to i64
  %691 = getelementptr inbounds i8, i8* %input, i64 %690
  %692 = load i8, i8* %691, align 1, !tbaa !386
  %693 = insertelement <64 x i8> %688, i8 %692, i32 2
  %694 = extractelement <64 x i32> %678, i32 3
  %695 = sext i32 %694 to i64
  %696 = getelementptr inbounds i8, i8* %input, i64 %695
  %697 = load i8, i8* %696, align 1, !tbaa !386
  %698 = insertelement <64 x i8> %693, i8 %697, i32 3
  %699 = extractelement <64 x i32> %678, i32 4
  %700 = sext i32 %699 to i64
  %701 = getelementptr inbounds i8, i8* %input, i64 %700
  %702 = load i8, i8* %701, align 1, !tbaa !386
  %703 = insertelement <64 x i8> %698, i8 %702, i32 4
  %704 = extractelement <64 x i32> %678, i32 5
  %705 = sext i32 %704 to i64
  %706 = getelementptr inbounds i8, i8* %input, i64 %705
  %707 = load i8, i8* %706, align 1, !tbaa !386
  %708 = insertelement <64 x i8> %703, i8 %707, i32 5
  %709 = extractelement <64 x i32> %678, i32 6
  %710 = sext i32 %709 to i64
  %711 = getelementptr inbounds i8, i8* %input, i64 %710
  %712 = load i8, i8* %711, align 1, !tbaa !386
  %713 = insertelement <64 x i8> %708, i8 %712, i32 6
  %714 = extractelement <64 x i32> %678, i32 7
  %715 = sext i32 %714 to i64
  %716 = getelementptr inbounds i8, i8* %input, i64 %715
  %717 = load i8, i8* %716, align 1, !tbaa !386
  %718 = insertelement <64 x i8> %713, i8 %717, i32 7
  %719 = extractelement <64 x i32> %678, i32 8
  %720 = sext i32 %719 to i64
  %721 = getelementptr inbounds i8, i8* %input, i64 %720
  %722 = load i8, i8* %721, align 1, !tbaa !386
  %723 = insertelement <64 x i8> %718, i8 %722, i32 8
  %724 = extractelement <64 x i32> %678, i32 9
  %725 = sext i32 %724 to i64
  %726 = getelementptr inbounds i8, i8* %input, i64 %725
  %727 = load i8, i8* %726, align 1, !tbaa !386
  %728 = insertelement <64 x i8> %723, i8 %727, i32 9
  %729 = extractelement <64 x i32> %678, i32 10
  %730 = sext i32 %729 to i64
  %731 = getelementptr inbounds i8, i8* %input, i64 %730
  %732 = load i8, i8* %731, align 1, !tbaa !386
  %733 = insertelement <64 x i8> %728, i8 %732, i32 10
  %734 = extractelement <64 x i32> %678, i32 11
  %735 = sext i32 %734 to i64
  %736 = getelementptr inbounds i8, i8* %input, i64 %735
  %737 = load i8, i8* %736, align 1, !tbaa !386
  %738 = insertelement <64 x i8> %733, i8 %737, i32 11
  %739 = extractelement <64 x i32> %678, i32 12
  %740 = sext i32 %739 to i64
  %741 = getelementptr inbounds i8, i8* %input, i64 %740
  %742 = load i8, i8* %741, align 1, !tbaa !386
  %743 = insertelement <64 x i8> %738, i8 %742, i32 12
  %744 = extractelement <64 x i32> %678, i32 13
  %745 = sext i32 %744 to i64
  %746 = getelementptr inbounds i8, i8* %input, i64 %745
  %747 = load i8, i8* %746, align 1, !tbaa !386
  %748 = insertelement <64 x i8> %743, i8 %747, i32 13
  %749 = extractelement <64 x i32> %678, i32 14
  %750 = sext i32 %749 to i64
  %751 = getelementptr inbounds i8, i8* %input, i64 %750
  %752 = load i8, i8* %751, align 1, !tbaa !386
  %753 = insertelement <64 x i8> %748, i8 %752, i32 14
  %754 = extractelement <64 x i32> %678, i32 15
  %755 = sext i32 %754 to i64
  %756 = getelementptr inbounds i8, i8* %input, i64 %755
  %757 = load i8, i8* %756, align 1, !tbaa !386
  %758 = insertelement <64 x i8> %753, i8 %757, i32 15
  %759 = extractelement <64 x i32> %678, i32 16
  %760 = sext i32 %759 to i64
  %761 = getelementptr inbounds i8, i8* %input, i64 %760
  %762 = load i8, i8* %761, align 1, !tbaa !386
  %763 = insertelement <64 x i8> %758, i8 %762, i32 16
  %764 = extractelement <64 x i32> %678, i32 17
  %765 = sext i32 %764 to i64
  %766 = getelementptr inbounds i8, i8* %input, i64 %765
  %767 = load i8, i8* %766, align 1, !tbaa !386
  %768 = insertelement <64 x i8> %763, i8 %767, i32 17
  %769 = extractelement <64 x i32> %678, i32 18
  %770 = sext i32 %769 to i64
  %771 = getelementptr inbounds i8, i8* %input, i64 %770
  %772 = load i8, i8* %771, align 1, !tbaa !386
  %773 = insertelement <64 x i8> %768, i8 %772, i32 18
  %774 = extractelement <64 x i32> %678, i32 19
  %775 = sext i32 %774 to i64
  %776 = getelementptr inbounds i8, i8* %input, i64 %775
  %777 = load i8, i8* %776, align 1, !tbaa !386
  %778 = insertelement <64 x i8> %773, i8 %777, i32 19
  %779 = extractelement <64 x i32> %678, i32 20
  %780 = sext i32 %779 to i64
  %781 = getelementptr inbounds i8, i8* %input, i64 %780
  %782 = load i8, i8* %781, align 1, !tbaa !386
  %783 = insertelement <64 x i8> %778, i8 %782, i32 20
  %784 = extractelement <64 x i32> %678, i32 21
  %785 = sext i32 %784 to i64
  %786 = getelementptr inbounds i8, i8* %input, i64 %785
  %787 = load i8, i8* %786, align 1, !tbaa !386
  %788 = insertelement <64 x i8> %783, i8 %787, i32 21
  %789 = extractelement <64 x i32> %678, i32 22
  %790 = sext i32 %789 to i64
  %791 = getelementptr inbounds i8, i8* %input, i64 %790
  %792 = load i8, i8* %791, align 1, !tbaa !386
  %793 = insertelement <64 x i8> %788, i8 %792, i32 22
  %794 = extractelement <64 x i32> %678, i32 23
  %795 = sext i32 %794 to i64
  %796 = getelementptr inbounds i8, i8* %input, i64 %795
  %797 = load i8, i8* %796, align 1, !tbaa !386
  %798 = insertelement <64 x i8> %793, i8 %797, i32 23
  %799 = extractelement <64 x i32> %678, i32 24
  %800 = sext i32 %799 to i64
  %801 = getelementptr inbounds i8, i8* %input, i64 %800
  %802 = load i8, i8* %801, align 1, !tbaa !386
  %803 = insertelement <64 x i8> %798, i8 %802, i32 24
  %804 = extractelement <64 x i32> %678, i32 25
  %805 = sext i32 %804 to i64
  %806 = getelementptr inbounds i8, i8* %input, i64 %805
  %807 = load i8, i8* %806, align 1, !tbaa !386
  %808 = insertelement <64 x i8> %803, i8 %807, i32 25
  %809 = extractelement <64 x i32> %678, i32 26
  %810 = sext i32 %809 to i64
  %811 = getelementptr inbounds i8, i8* %input, i64 %810
  %812 = load i8, i8* %811, align 1, !tbaa !386
  %813 = insertelement <64 x i8> %808, i8 %812, i32 26
  %814 = extractelement <64 x i32> %678, i32 27
  %815 = sext i32 %814 to i64
  %816 = getelementptr inbounds i8, i8* %input, i64 %815
  %817 = load i8, i8* %816, align 1, !tbaa !386
  %818 = insertelement <64 x i8> %813, i8 %817, i32 27
  %819 = extractelement <64 x i32> %678, i32 28
  %820 = sext i32 %819 to i64
  %821 = getelementptr inbounds i8, i8* %input, i64 %820
  %822 = load i8, i8* %821, align 1, !tbaa !386
  %823 = insertelement <64 x i8> %818, i8 %822, i32 28
  %824 = extractelement <64 x i32> %678, i32 29
  %825 = sext i32 %824 to i64
  %826 = getelementptr inbounds i8, i8* %input, i64 %825
  %827 = load i8, i8* %826, align 1, !tbaa !386
  %828 = insertelement <64 x i8> %823, i8 %827, i32 29
  %829 = extractelement <64 x i32> %678, i32 30
  %830 = sext i32 %829 to i64
  %831 = getelementptr inbounds i8, i8* %input, i64 %830
  %832 = load i8, i8* %831, align 1, !tbaa !386
  %833 = insertelement <64 x i8> %828, i8 %832, i32 30
  %834 = extractelement <64 x i32> %678, i32 31
  %835 = sext i32 %834 to i64
  %836 = getelementptr inbounds i8, i8* %input, i64 %835
  %837 = load i8, i8* %836, align 1, !tbaa !386
  %838 = insertelement <64 x i8> %833, i8 %837, i32 31
  %839 = extractelement <64 x i32> %678, i32 32
  %840 = sext i32 %839 to i64
  %841 = getelementptr inbounds i8, i8* %input, i64 %840
  %842 = load i8, i8* %841, align 1, !tbaa !386
  %843 = insertelement <64 x i8> %838, i8 %842, i32 32
  %844 = extractelement <64 x i32> %678, i32 33
  %845 = sext i32 %844 to i64
  %846 = getelementptr inbounds i8, i8* %input, i64 %845
  %847 = load i8, i8* %846, align 1, !tbaa !386
  %848 = insertelement <64 x i8> %843, i8 %847, i32 33
  %849 = extractelement <64 x i32> %678, i32 34
  %850 = sext i32 %849 to i64
  %851 = getelementptr inbounds i8, i8* %input, i64 %850
  %852 = load i8, i8* %851, align 1, !tbaa !386
  %853 = insertelement <64 x i8> %848, i8 %852, i32 34
  %854 = extractelement <64 x i32> %678, i32 35
  %855 = sext i32 %854 to i64
  %856 = getelementptr inbounds i8, i8* %input, i64 %855
  %857 = load i8, i8* %856, align 1, !tbaa !386
  %858 = insertelement <64 x i8> %853, i8 %857, i32 35
  %859 = extractelement <64 x i32> %678, i32 36
  %860 = sext i32 %859 to i64
  %861 = getelementptr inbounds i8, i8* %input, i64 %860
  %862 = load i8, i8* %861, align 1, !tbaa !386
  %863 = insertelement <64 x i8> %858, i8 %862, i32 36
  %864 = extractelement <64 x i32> %678, i32 37
  %865 = sext i32 %864 to i64
  %866 = getelementptr inbounds i8, i8* %input, i64 %865
  %867 = load i8, i8* %866, align 1, !tbaa !386
  %868 = insertelement <64 x i8> %863, i8 %867, i32 37
  %869 = extractelement <64 x i32> %678, i32 38
  %870 = sext i32 %869 to i64
  %871 = getelementptr inbounds i8, i8* %input, i64 %870
  %872 = load i8, i8* %871, align 1, !tbaa !386
  %873 = insertelement <64 x i8> %868, i8 %872, i32 38
  %874 = extractelement <64 x i32> %678, i32 39
  %875 = sext i32 %874 to i64
  %876 = getelementptr inbounds i8, i8* %input, i64 %875
  %877 = load i8, i8* %876, align 1, !tbaa !386
  %878 = insertelement <64 x i8> %873, i8 %877, i32 39
  %879 = extractelement <64 x i32> %678, i32 40
  %880 = sext i32 %879 to i64
  %881 = getelementptr inbounds i8, i8* %input, i64 %880
  %882 = load i8, i8* %881, align 1, !tbaa !386
  %883 = insertelement <64 x i8> %878, i8 %882, i32 40
  %884 = extractelement <64 x i32> %678, i32 41
  %885 = sext i32 %884 to i64
  %886 = getelementptr inbounds i8, i8* %input, i64 %885
  %887 = load i8, i8* %886, align 1, !tbaa !386
  %888 = insertelement <64 x i8> %883, i8 %887, i32 41
  %889 = extractelement <64 x i32> %678, i32 42
  %890 = sext i32 %889 to i64
  %891 = getelementptr inbounds i8, i8* %input, i64 %890
  %892 = load i8, i8* %891, align 1, !tbaa !386
  %893 = insertelement <64 x i8> %888, i8 %892, i32 42
  %894 = extractelement <64 x i32> %678, i32 43
  %895 = sext i32 %894 to i64
  %896 = getelementptr inbounds i8, i8* %input, i64 %895
  %897 = load i8, i8* %896, align 1, !tbaa !386
  %898 = insertelement <64 x i8> %893, i8 %897, i32 43
  %899 = extractelement <64 x i32> %678, i32 44
  %900 = sext i32 %899 to i64
  %901 = getelementptr inbounds i8, i8* %input, i64 %900
  %902 = load i8, i8* %901, align 1, !tbaa !386
  %903 = insertelement <64 x i8> %898, i8 %902, i32 44
  %904 = extractelement <64 x i32> %678, i32 45
  %905 = sext i32 %904 to i64
  %906 = getelementptr inbounds i8, i8* %input, i64 %905
  %907 = load i8, i8* %906, align 1, !tbaa !386
  %908 = insertelement <64 x i8> %903, i8 %907, i32 45
  %909 = extractelement <64 x i32> %678, i32 46
  %910 = sext i32 %909 to i64
  %911 = getelementptr inbounds i8, i8* %input, i64 %910
  %912 = load i8, i8* %911, align 1, !tbaa !386
  %913 = insertelement <64 x i8> %908, i8 %912, i32 46
  %914 = extractelement <64 x i32> %678, i32 47
  %915 = sext i32 %914 to i64
  %916 = getelementptr inbounds i8, i8* %input, i64 %915
  %917 = load i8, i8* %916, align 1, !tbaa !386
  %918 = insertelement <64 x i8> %913, i8 %917, i32 47
  %919 = extractelement <64 x i32> %678, i32 48
  %920 = sext i32 %919 to i64
  %921 = getelementptr inbounds i8, i8* %input, i64 %920
  %922 = load i8, i8* %921, align 1, !tbaa !386
  %923 = insertelement <64 x i8> %918, i8 %922, i32 48
  %924 = extractelement <64 x i32> %678, i32 49
  %925 = sext i32 %924 to i64
  %926 = getelementptr inbounds i8, i8* %input, i64 %925
  %927 = load i8, i8* %926, align 1, !tbaa !386
  %928 = insertelement <64 x i8> %923, i8 %927, i32 49
  %929 = extractelement <64 x i32> %678, i32 50
  %930 = sext i32 %929 to i64
  %931 = getelementptr inbounds i8, i8* %input, i64 %930
  %932 = load i8, i8* %931, align 1, !tbaa !386
  %933 = insertelement <64 x i8> %928, i8 %932, i32 50
  %934 = extractelement <64 x i32> %678, i32 51
  %935 = sext i32 %934 to i64
  %936 = getelementptr inbounds i8, i8* %input, i64 %935
  %937 = load i8, i8* %936, align 1, !tbaa !386
  %938 = insertelement <64 x i8> %933, i8 %937, i32 51
  %939 = extractelement <64 x i32> %678, i32 52
  %940 = sext i32 %939 to i64
  %941 = getelementptr inbounds i8, i8* %input, i64 %940
  %942 = load i8, i8* %941, align 1, !tbaa !386
  %943 = insertelement <64 x i8> %938, i8 %942, i32 52
  %944 = extractelement <64 x i32> %678, i32 53
  %945 = sext i32 %944 to i64
  %946 = getelementptr inbounds i8, i8* %input, i64 %945
  %947 = load i8, i8* %946, align 1, !tbaa !386
  %948 = insertelement <64 x i8> %943, i8 %947, i32 53
  %949 = extractelement <64 x i32> %678, i32 54
  %950 = sext i32 %949 to i64
  %951 = getelementptr inbounds i8, i8* %input, i64 %950
  %952 = load i8, i8* %951, align 1, !tbaa !386
  %953 = insertelement <64 x i8> %948, i8 %952, i32 54
  %954 = extractelement <64 x i32> %678, i32 55
  %955 = sext i32 %954 to i64
  %956 = getelementptr inbounds i8, i8* %input, i64 %955
  %957 = load i8, i8* %956, align 1, !tbaa !386
  %958 = insertelement <64 x i8> %953, i8 %957, i32 55
  %959 = extractelement <64 x i32> %678, i32 56
  %960 = sext i32 %959 to i64
  %961 = getelementptr inbounds i8, i8* %input, i64 %960
  %962 = load i8, i8* %961, align 1, !tbaa !386
  %963 = insertelement <64 x i8> %958, i8 %962, i32 56
  %964 = extractelement <64 x i32> %678, i32 57
  %965 = sext i32 %964 to i64
  %966 = getelementptr inbounds i8, i8* %input, i64 %965
  %967 = load i8, i8* %966, align 1, !tbaa !386
  %968 = insertelement <64 x i8> %963, i8 %967, i32 57
  %969 = extractelement <64 x i32> %678, i32 58
  %970 = sext i32 %969 to i64
  %971 = getelementptr inbounds i8, i8* %input, i64 %970
  %972 = load i8, i8* %971, align 1, !tbaa !386
  %973 = insertelement <64 x i8> %968, i8 %972, i32 58
  %974 = extractelement <64 x i32> %678, i32 59
  %975 = sext i32 %974 to i64
  %976 = getelementptr inbounds i8, i8* %input, i64 %975
  %977 = load i8, i8* %976, align 1, !tbaa !386
  %978 = insertelement <64 x i8> %973, i8 %977, i32 59
  %979 = extractelement <64 x i32> %678, i32 60
  %980 = sext i32 %979 to i64
  %981 = getelementptr inbounds i8, i8* %input, i64 %980
  %982 = load i8, i8* %981, align 1, !tbaa !386
  %983 = insertelement <64 x i8> %978, i8 %982, i32 60
  %984 = extractelement <64 x i32> %678, i32 61
  %985 = sext i32 %984 to i64
  %986 = getelementptr inbounds i8, i8* %input, i64 %985
  %987 = load i8, i8* %986, align 1, !tbaa !386
  %988 = insertelement <64 x i8> %983, i8 %987, i32 61
  %989 = extractelement <64 x i32> %678, i32 62
  %990 = sext i32 %989 to i64
  %991 = getelementptr inbounds i8, i8* %input, i64 %990
  %992 = load i8, i8* %991, align 1, !tbaa !386
  %993 = insertelement <64 x i8> %988, i8 %992, i32 62
  %994 = extractelement <64 x i32> %678, i32 63
  %995 = sext i32 %994 to i64
  %996 = getelementptr inbounds i8, i8* %input, i64 %995
  %997 = load i8, i8* %996, align 1, !tbaa !386
  %998 = insertelement <64 x i8> %993, i8 %997, i32 63
  %999 = shufflevector <64 x i8> %998, <64 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1000 = add nsw i64 %indvars.iv265, %594
  %1001 = shl nsw i64 %1000, 6
  %1002 = getelementptr inbounds i8, i8* %bounded_input, i64 %1001
  %1003 = bitcast i8* %1002 to <16 x i8>*
  store <16 x i8> %999, <16 x i8>* %1003, align 16, !tbaa !389
  %1004 = shufflevector <64 x i8> %998, <64 x i8> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1005 = getelementptr inbounds i8, i8* %1002, i64 16
  %1006 = bitcast i8* %1005 to <16 x i8>*
  store <16 x i8> %1004, <16 x i8>* %1006, align 16, !tbaa !389
  %1007 = shufflevector <64 x i8> %998, <64 x i8> undef, <16 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %1008 = getelementptr inbounds i8, i8* %1002, i64 32
  %1009 = bitcast i8* %1008 to <16 x i8>*
  store <16 x i8> %1007, <16 x i8>* %1009, align 16, !tbaa !389
  %1010 = shufflevector <64 x i8> %998, <64 x i8> undef, <16 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1011 = getelementptr inbounds i8, i8* %1002, i64 48
  %1012 = bitcast i8* %1011 to <16 x i8>*
  store <16 x i8> %1010, <16 x i8>* %1012, align 16, !tbaa !389
  %indvars.iv.next266 = add nuw nsw i64 %indvars.iv265, 1
  %.not234 = icmp eq i64 %indvars.iv.next266, %62
  br i1 %.not234, label %"end for bounded_input.s0.x.x5", label %"for bounded_input.s0.x.x4"

"end for bounded_input.s0.x.x5":                  ; preds = %"for bounded_input.s0.x.x4", %"for bounded_input.s0.y.rebased1"
  br i1 %51, label %"for bounded_input.s0.x.x.rebased.preheader", label %"end for bounded_input.s0.x.x.rebased", !prof !385

"for bounded_input.s0.x.x.rebased.preheader":     ; preds = %"end for bounded_input.s0.x.x5"
  %t501 = add nsw i32 %t498, %output.min.0
  %t502 = add nsw i32 %t499, %t464
  %1013 = sext i32 %t501 to i64
  %1014 = sext i32 %t502 to i64
  br label %"for bounded_input.s0.x.x.rebased"

"for bounded_input.s0.x.x.rebased":               ; preds = %"for bounded_input.s0.x.x.rebased.preheader", %"for bounded_input.s0.x.x.rebased"
  %indvars.iv267 = phi i64 [ 0, %"for bounded_input.s0.x.x.rebased.preheader" ], [ %indvars.iv.next268, %"for bounded_input.s0.x.x.rebased" ]
  %1015 = add nsw i64 %indvars.iv267, %52
  %1016 = shl nsw i64 %1015, 6
  %1017 = add nsw i64 %1016, %1013
  %1018 = getelementptr inbounds i8, i8* %input, i64 %1017
  %1019 = getelementptr inbounds i8, i8* %1018, i64 -3
  %1020 = bitcast i8* %1019 to <16 x i8>*
  %1021 = load <16 x i8>, <16 x i8>* %1020, align 1, !tbaa !386
  %1022 = getelementptr inbounds i8, i8* %1018, i64 13
  %1023 = bitcast i8* %1022 to <16 x i8>*
  %1024 = load <16 x i8>, <16 x i8>* %1023, align 1, !tbaa !386
  %1025 = getelementptr inbounds i8, i8* %1018, i64 29
  %1026 = bitcast i8* %1025 to <16 x i8>*
  %1027 = load <16 x i8>, <16 x i8>* %1026, align 1, !tbaa !386
  %1028 = getelementptr inbounds i8, i8* %1018, i64 45
  %1029 = bitcast i8* %1028 to <16 x i8>*
  %1030 = load <16 x i8>, <16 x i8>* %1029, align 1, !tbaa !386
  %1031 = add nsw i64 %indvars.iv267, %1014
  %1032 = shl nsw i64 %1031, 6
  %1033 = getelementptr inbounds i8, i8* %bounded_input, i64 %1032
  %1034 = bitcast i8* %1033 to <16 x i8>*
  store <16 x i8> %1021, <16 x i8>* %1034, align 16, !tbaa !389
  %1035 = getelementptr inbounds i8, i8* %1033, i64 16
  %1036 = bitcast i8* %1035 to <16 x i8>*
  store <16 x i8> %1024, <16 x i8>* %1036, align 16, !tbaa !389
  %1037 = getelementptr inbounds i8, i8* %1033, i64 32
  %1038 = bitcast i8* %1037 to <16 x i8>*
  store <16 x i8> %1027, <16 x i8>* %1038, align 16, !tbaa !389
  %1039 = getelementptr inbounds i8, i8* %1033, i64 48
  %1040 = bitcast i8* %1039 to <16 x i8>*
  store <16 x i8> %1030, <16 x i8>* %1040, align 16, !tbaa !389
  %indvars.iv.next268 = add nuw nsw i64 %indvars.iv267, 1
  %.not233 = icmp eq i64 %indvars.iv.next268, %63
  br i1 %.not233, label %"end for bounded_input.s0.x.x.rebased", label %"for bounded_input.s0.x.x.rebased"

"end for bounded_input.s0.x.x.rebased":           ; preds = %"for bounded_input.s0.x.x.rebased", %"end for bounded_input.s0.x.x5"
  br i1 %53, label %"for bounded_input.s0.x.x.rebased7.preheader", label %"end for bounded_input.s0.x.x.rebased8", !prof !385

"for bounded_input.s0.x.x.rebased7.preheader":    ; preds = %"end for bounded_input.s0.x.x.rebased"
  %t504 = add nsw i32 %t499, %t456
  %1041 = insertelement <64 x i32> undef, i32 %t498, i32 0
  %1042 = shufflevector <64 x i32> %1041, <64 x i32> undef, <64 x i32> zeroinitializer
  %1043 = sext i32 %t504 to i64
  br label %"for bounded_input.s0.x.x.rebased7"

"for bounded_input.s0.x.x.rebased7":              ; preds = %"for bounded_input.s0.x.x.rebased7.preheader", %"for bounded_input.s0.x.x.rebased7"
  %indvars.iv269 = phi i64 [ 0, %"for bounded_input.s0.x.x.rebased7.preheader" ], [ %indvars.iv.next270, %"for bounded_input.s0.x.x.rebased7" ]
  %1044 = trunc i64 %indvars.iv269 to i32
  %1045 = add nsw i32 %t456, %1044
  %1046 = shl nsw i32 %1045, 6
  %1047 = add i32 %46, %1046
  %1048 = insertelement <64 x i32> undef, i32 %1047, i32 0
  %1049 = shufflevector <64 x i32> %1048, <64 x i32> undef, <64 x i32> zeroinitializer
  %1050 = add nsw <64 x i32> %1049, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1051 = shufflevector <64 x i32> %1050, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1052 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1051, <4 x i32> %49)
  %1053 = shufflevector <64 x i32> %1050, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1054 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1053, <4 x i32> %49)
  %1055 = shufflevector <64 x i32> %1050, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %1056 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1055, <4 x i32> %49)
  %1057 = shufflevector <64 x i32> %1050, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %1058 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1057, <4 x i32> %49)
  %1059 = shufflevector <64 x i32> %1050, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %1060 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1059, <4 x i32> %49)
  %1061 = shufflevector <64 x i32> %1050, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %1062 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1061, <4 x i32> %49)
  %1063 = shufflevector <64 x i32> %1050, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %1064 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1063, <4 x i32> %49)
  %1065 = shufflevector <64 x i32> %1050, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %1066 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1065, <4 x i32> %49)
  %1067 = shufflevector <64 x i32> %1050, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %1068 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1067, <4 x i32> %49)
  %1069 = shufflevector <64 x i32> %1050, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %1070 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1069, <4 x i32> %49)
  %1071 = shufflevector <64 x i32> %1050, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %1072 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1071, <4 x i32> %49)
  %1073 = shufflevector <64 x i32> %1050, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %1074 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1073, <4 x i32> %49)
  %1075 = shufflevector <64 x i32> %1050, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %1076 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1075, <4 x i32> %49)
  %1077 = shufflevector <64 x i32> %1050, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %1078 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1077, <4 x i32> %49)
  %1079 = shufflevector <64 x i32> %1050, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %1080 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1079, <4 x i32> %49)
  %1081 = shufflevector <64 x i32> %1050, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %1082 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1081, <4 x i32> %49)
  %1083 = shufflevector <4 x i32> %1082, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %1084 = shufflevector <8 x i32> %1083, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %1085 = shufflevector <16 x i32> %1084, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %1086 = shufflevector <32 x i32> %1085, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %1087 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1052, <4 x i32> zeroinitializer)
  %1088 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1054, <4 x i32> zeroinitializer)
  %1089 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1056, <4 x i32> zeroinitializer)
  %1090 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1058, <4 x i32> zeroinitializer)
  %1091 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1060, <4 x i32> zeroinitializer)
  %1092 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1062, <4 x i32> zeroinitializer)
  %1093 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1064, <4 x i32> zeroinitializer)
  %1094 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1066, <4 x i32> zeroinitializer)
  %1095 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1068, <4 x i32> zeroinitializer)
  %1096 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1070, <4 x i32> zeroinitializer)
  %1097 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1072, <4 x i32> zeroinitializer)
  %1098 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1074, <4 x i32> zeroinitializer)
  %1099 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1076, <4 x i32> zeroinitializer)
  %1100 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1078, <4 x i32> zeroinitializer)
  %1101 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1080, <4 x i32> zeroinitializer)
  %1102 = shufflevector <64 x i32> %1086, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %1103 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1102, <4 x i32> zeroinitializer)
  %1104 = shufflevector <4 x i32> %1087, <4 x i32> %1088, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1105 = shufflevector <4 x i32> %1089, <4 x i32> %1090, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1106 = shufflevector <4 x i32> %1091, <4 x i32> %1092, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1107 = shufflevector <4 x i32> %1093, <4 x i32> %1094, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1108 = shufflevector <4 x i32> %1095, <4 x i32> %1096, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1109 = shufflevector <4 x i32> %1097, <4 x i32> %1098, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1110 = shufflevector <4 x i32> %1099, <4 x i32> %1100, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1111 = shufflevector <4 x i32> %1101, <4 x i32> %1103, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1112 = shufflevector <8 x i32> %1104, <8 x i32> %1105, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1113 = shufflevector <8 x i32> %1106, <8 x i32> %1107, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1114 = shufflevector <8 x i32> %1108, <8 x i32> %1109, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1115 = shufflevector <8 x i32> %1110, <8 x i32> %1111, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1116 = shufflevector <16 x i32> %1112, <16 x i32> %1113, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1117 = shufflevector <16 x i32> %1114, <16 x i32> %1115, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1118 = shufflevector <32 x i32> %1116, <32 x i32> %1117, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1119 = add nsw <64 x i32> %1118, %1042
  %1120 = extractelement <64 x i32> %1119, i32 0
  %1121 = sext i32 %1120 to i64
  %1122 = getelementptr inbounds i8, i8* %input, i64 %1121
  %1123 = load i8, i8* %1122, align 1, !tbaa !386
  %1124 = insertelement <64 x i8> undef, i8 %1123, i32 0
  %1125 = extractelement <64 x i32> %1119, i32 1
  %1126 = sext i32 %1125 to i64
  %1127 = getelementptr inbounds i8, i8* %input, i64 %1126
  %1128 = load i8, i8* %1127, align 1, !tbaa !386
  %1129 = insertelement <64 x i8> %1124, i8 %1128, i32 1
  %1130 = extractelement <64 x i32> %1119, i32 2
  %1131 = sext i32 %1130 to i64
  %1132 = getelementptr inbounds i8, i8* %input, i64 %1131
  %1133 = load i8, i8* %1132, align 1, !tbaa !386
  %1134 = insertelement <64 x i8> %1129, i8 %1133, i32 2
  %1135 = extractelement <64 x i32> %1119, i32 3
  %1136 = sext i32 %1135 to i64
  %1137 = getelementptr inbounds i8, i8* %input, i64 %1136
  %1138 = load i8, i8* %1137, align 1, !tbaa !386
  %1139 = insertelement <64 x i8> %1134, i8 %1138, i32 3
  %1140 = extractelement <64 x i32> %1119, i32 4
  %1141 = sext i32 %1140 to i64
  %1142 = getelementptr inbounds i8, i8* %input, i64 %1141
  %1143 = load i8, i8* %1142, align 1, !tbaa !386
  %1144 = insertelement <64 x i8> %1139, i8 %1143, i32 4
  %1145 = extractelement <64 x i32> %1119, i32 5
  %1146 = sext i32 %1145 to i64
  %1147 = getelementptr inbounds i8, i8* %input, i64 %1146
  %1148 = load i8, i8* %1147, align 1, !tbaa !386
  %1149 = insertelement <64 x i8> %1144, i8 %1148, i32 5
  %1150 = extractelement <64 x i32> %1119, i32 6
  %1151 = sext i32 %1150 to i64
  %1152 = getelementptr inbounds i8, i8* %input, i64 %1151
  %1153 = load i8, i8* %1152, align 1, !tbaa !386
  %1154 = insertelement <64 x i8> %1149, i8 %1153, i32 6
  %1155 = extractelement <64 x i32> %1119, i32 7
  %1156 = sext i32 %1155 to i64
  %1157 = getelementptr inbounds i8, i8* %input, i64 %1156
  %1158 = load i8, i8* %1157, align 1, !tbaa !386
  %1159 = insertelement <64 x i8> %1154, i8 %1158, i32 7
  %1160 = extractelement <64 x i32> %1119, i32 8
  %1161 = sext i32 %1160 to i64
  %1162 = getelementptr inbounds i8, i8* %input, i64 %1161
  %1163 = load i8, i8* %1162, align 1, !tbaa !386
  %1164 = insertelement <64 x i8> %1159, i8 %1163, i32 8
  %1165 = extractelement <64 x i32> %1119, i32 9
  %1166 = sext i32 %1165 to i64
  %1167 = getelementptr inbounds i8, i8* %input, i64 %1166
  %1168 = load i8, i8* %1167, align 1, !tbaa !386
  %1169 = insertelement <64 x i8> %1164, i8 %1168, i32 9
  %1170 = extractelement <64 x i32> %1119, i32 10
  %1171 = sext i32 %1170 to i64
  %1172 = getelementptr inbounds i8, i8* %input, i64 %1171
  %1173 = load i8, i8* %1172, align 1, !tbaa !386
  %1174 = insertelement <64 x i8> %1169, i8 %1173, i32 10
  %1175 = extractelement <64 x i32> %1119, i32 11
  %1176 = sext i32 %1175 to i64
  %1177 = getelementptr inbounds i8, i8* %input, i64 %1176
  %1178 = load i8, i8* %1177, align 1, !tbaa !386
  %1179 = insertelement <64 x i8> %1174, i8 %1178, i32 11
  %1180 = extractelement <64 x i32> %1119, i32 12
  %1181 = sext i32 %1180 to i64
  %1182 = getelementptr inbounds i8, i8* %input, i64 %1181
  %1183 = load i8, i8* %1182, align 1, !tbaa !386
  %1184 = insertelement <64 x i8> %1179, i8 %1183, i32 12
  %1185 = extractelement <64 x i32> %1119, i32 13
  %1186 = sext i32 %1185 to i64
  %1187 = getelementptr inbounds i8, i8* %input, i64 %1186
  %1188 = load i8, i8* %1187, align 1, !tbaa !386
  %1189 = insertelement <64 x i8> %1184, i8 %1188, i32 13
  %1190 = extractelement <64 x i32> %1119, i32 14
  %1191 = sext i32 %1190 to i64
  %1192 = getelementptr inbounds i8, i8* %input, i64 %1191
  %1193 = load i8, i8* %1192, align 1, !tbaa !386
  %1194 = insertelement <64 x i8> %1189, i8 %1193, i32 14
  %1195 = extractelement <64 x i32> %1119, i32 15
  %1196 = sext i32 %1195 to i64
  %1197 = getelementptr inbounds i8, i8* %input, i64 %1196
  %1198 = load i8, i8* %1197, align 1, !tbaa !386
  %1199 = insertelement <64 x i8> %1194, i8 %1198, i32 15
  %1200 = extractelement <64 x i32> %1119, i32 16
  %1201 = sext i32 %1200 to i64
  %1202 = getelementptr inbounds i8, i8* %input, i64 %1201
  %1203 = load i8, i8* %1202, align 1, !tbaa !386
  %1204 = insertelement <64 x i8> %1199, i8 %1203, i32 16
  %1205 = extractelement <64 x i32> %1119, i32 17
  %1206 = sext i32 %1205 to i64
  %1207 = getelementptr inbounds i8, i8* %input, i64 %1206
  %1208 = load i8, i8* %1207, align 1, !tbaa !386
  %1209 = insertelement <64 x i8> %1204, i8 %1208, i32 17
  %1210 = extractelement <64 x i32> %1119, i32 18
  %1211 = sext i32 %1210 to i64
  %1212 = getelementptr inbounds i8, i8* %input, i64 %1211
  %1213 = load i8, i8* %1212, align 1, !tbaa !386
  %1214 = insertelement <64 x i8> %1209, i8 %1213, i32 18
  %1215 = extractelement <64 x i32> %1119, i32 19
  %1216 = sext i32 %1215 to i64
  %1217 = getelementptr inbounds i8, i8* %input, i64 %1216
  %1218 = load i8, i8* %1217, align 1, !tbaa !386
  %1219 = insertelement <64 x i8> %1214, i8 %1218, i32 19
  %1220 = extractelement <64 x i32> %1119, i32 20
  %1221 = sext i32 %1220 to i64
  %1222 = getelementptr inbounds i8, i8* %input, i64 %1221
  %1223 = load i8, i8* %1222, align 1, !tbaa !386
  %1224 = insertelement <64 x i8> %1219, i8 %1223, i32 20
  %1225 = extractelement <64 x i32> %1119, i32 21
  %1226 = sext i32 %1225 to i64
  %1227 = getelementptr inbounds i8, i8* %input, i64 %1226
  %1228 = load i8, i8* %1227, align 1, !tbaa !386
  %1229 = insertelement <64 x i8> %1224, i8 %1228, i32 21
  %1230 = extractelement <64 x i32> %1119, i32 22
  %1231 = sext i32 %1230 to i64
  %1232 = getelementptr inbounds i8, i8* %input, i64 %1231
  %1233 = load i8, i8* %1232, align 1, !tbaa !386
  %1234 = insertelement <64 x i8> %1229, i8 %1233, i32 22
  %1235 = extractelement <64 x i32> %1119, i32 23
  %1236 = sext i32 %1235 to i64
  %1237 = getelementptr inbounds i8, i8* %input, i64 %1236
  %1238 = load i8, i8* %1237, align 1, !tbaa !386
  %1239 = insertelement <64 x i8> %1234, i8 %1238, i32 23
  %1240 = extractelement <64 x i32> %1119, i32 24
  %1241 = sext i32 %1240 to i64
  %1242 = getelementptr inbounds i8, i8* %input, i64 %1241
  %1243 = load i8, i8* %1242, align 1, !tbaa !386
  %1244 = insertelement <64 x i8> %1239, i8 %1243, i32 24
  %1245 = extractelement <64 x i32> %1119, i32 25
  %1246 = sext i32 %1245 to i64
  %1247 = getelementptr inbounds i8, i8* %input, i64 %1246
  %1248 = load i8, i8* %1247, align 1, !tbaa !386
  %1249 = insertelement <64 x i8> %1244, i8 %1248, i32 25
  %1250 = extractelement <64 x i32> %1119, i32 26
  %1251 = sext i32 %1250 to i64
  %1252 = getelementptr inbounds i8, i8* %input, i64 %1251
  %1253 = load i8, i8* %1252, align 1, !tbaa !386
  %1254 = insertelement <64 x i8> %1249, i8 %1253, i32 26
  %1255 = extractelement <64 x i32> %1119, i32 27
  %1256 = sext i32 %1255 to i64
  %1257 = getelementptr inbounds i8, i8* %input, i64 %1256
  %1258 = load i8, i8* %1257, align 1, !tbaa !386
  %1259 = insertelement <64 x i8> %1254, i8 %1258, i32 27
  %1260 = extractelement <64 x i32> %1119, i32 28
  %1261 = sext i32 %1260 to i64
  %1262 = getelementptr inbounds i8, i8* %input, i64 %1261
  %1263 = load i8, i8* %1262, align 1, !tbaa !386
  %1264 = insertelement <64 x i8> %1259, i8 %1263, i32 28
  %1265 = extractelement <64 x i32> %1119, i32 29
  %1266 = sext i32 %1265 to i64
  %1267 = getelementptr inbounds i8, i8* %input, i64 %1266
  %1268 = load i8, i8* %1267, align 1, !tbaa !386
  %1269 = insertelement <64 x i8> %1264, i8 %1268, i32 29
  %1270 = extractelement <64 x i32> %1119, i32 30
  %1271 = sext i32 %1270 to i64
  %1272 = getelementptr inbounds i8, i8* %input, i64 %1271
  %1273 = load i8, i8* %1272, align 1, !tbaa !386
  %1274 = insertelement <64 x i8> %1269, i8 %1273, i32 30
  %1275 = extractelement <64 x i32> %1119, i32 31
  %1276 = sext i32 %1275 to i64
  %1277 = getelementptr inbounds i8, i8* %input, i64 %1276
  %1278 = load i8, i8* %1277, align 1, !tbaa !386
  %1279 = insertelement <64 x i8> %1274, i8 %1278, i32 31
  %1280 = extractelement <64 x i32> %1119, i32 32
  %1281 = sext i32 %1280 to i64
  %1282 = getelementptr inbounds i8, i8* %input, i64 %1281
  %1283 = load i8, i8* %1282, align 1, !tbaa !386
  %1284 = insertelement <64 x i8> %1279, i8 %1283, i32 32
  %1285 = extractelement <64 x i32> %1119, i32 33
  %1286 = sext i32 %1285 to i64
  %1287 = getelementptr inbounds i8, i8* %input, i64 %1286
  %1288 = load i8, i8* %1287, align 1, !tbaa !386
  %1289 = insertelement <64 x i8> %1284, i8 %1288, i32 33
  %1290 = extractelement <64 x i32> %1119, i32 34
  %1291 = sext i32 %1290 to i64
  %1292 = getelementptr inbounds i8, i8* %input, i64 %1291
  %1293 = load i8, i8* %1292, align 1, !tbaa !386
  %1294 = insertelement <64 x i8> %1289, i8 %1293, i32 34
  %1295 = extractelement <64 x i32> %1119, i32 35
  %1296 = sext i32 %1295 to i64
  %1297 = getelementptr inbounds i8, i8* %input, i64 %1296
  %1298 = load i8, i8* %1297, align 1, !tbaa !386
  %1299 = insertelement <64 x i8> %1294, i8 %1298, i32 35
  %1300 = extractelement <64 x i32> %1119, i32 36
  %1301 = sext i32 %1300 to i64
  %1302 = getelementptr inbounds i8, i8* %input, i64 %1301
  %1303 = load i8, i8* %1302, align 1, !tbaa !386
  %1304 = insertelement <64 x i8> %1299, i8 %1303, i32 36
  %1305 = extractelement <64 x i32> %1119, i32 37
  %1306 = sext i32 %1305 to i64
  %1307 = getelementptr inbounds i8, i8* %input, i64 %1306
  %1308 = load i8, i8* %1307, align 1, !tbaa !386
  %1309 = insertelement <64 x i8> %1304, i8 %1308, i32 37
  %1310 = extractelement <64 x i32> %1119, i32 38
  %1311 = sext i32 %1310 to i64
  %1312 = getelementptr inbounds i8, i8* %input, i64 %1311
  %1313 = load i8, i8* %1312, align 1, !tbaa !386
  %1314 = insertelement <64 x i8> %1309, i8 %1313, i32 38
  %1315 = extractelement <64 x i32> %1119, i32 39
  %1316 = sext i32 %1315 to i64
  %1317 = getelementptr inbounds i8, i8* %input, i64 %1316
  %1318 = load i8, i8* %1317, align 1, !tbaa !386
  %1319 = insertelement <64 x i8> %1314, i8 %1318, i32 39
  %1320 = extractelement <64 x i32> %1119, i32 40
  %1321 = sext i32 %1320 to i64
  %1322 = getelementptr inbounds i8, i8* %input, i64 %1321
  %1323 = load i8, i8* %1322, align 1, !tbaa !386
  %1324 = insertelement <64 x i8> %1319, i8 %1323, i32 40
  %1325 = extractelement <64 x i32> %1119, i32 41
  %1326 = sext i32 %1325 to i64
  %1327 = getelementptr inbounds i8, i8* %input, i64 %1326
  %1328 = load i8, i8* %1327, align 1, !tbaa !386
  %1329 = insertelement <64 x i8> %1324, i8 %1328, i32 41
  %1330 = extractelement <64 x i32> %1119, i32 42
  %1331 = sext i32 %1330 to i64
  %1332 = getelementptr inbounds i8, i8* %input, i64 %1331
  %1333 = load i8, i8* %1332, align 1, !tbaa !386
  %1334 = insertelement <64 x i8> %1329, i8 %1333, i32 42
  %1335 = extractelement <64 x i32> %1119, i32 43
  %1336 = sext i32 %1335 to i64
  %1337 = getelementptr inbounds i8, i8* %input, i64 %1336
  %1338 = load i8, i8* %1337, align 1, !tbaa !386
  %1339 = insertelement <64 x i8> %1334, i8 %1338, i32 43
  %1340 = extractelement <64 x i32> %1119, i32 44
  %1341 = sext i32 %1340 to i64
  %1342 = getelementptr inbounds i8, i8* %input, i64 %1341
  %1343 = load i8, i8* %1342, align 1, !tbaa !386
  %1344 = insertelement <64 x i8> %1339, i8 %1343, i32 44
  %1345 = extractelement <64 x i32> %1119, i32 45
  %1346 = sext i32 %1345 to i64
  %1347 = getelementptr inbounds i8, i8* %input, i64 %1346
  %1348 = load i8, i8* %1347, align 1, !tbaa !386
  %1349 = insertelement <64 x i8> %1344, i8 %1348, i32 45
  %1350 = extractelement <64 x i32> %1119, i32 46
  %1351 = sext i32 %1350 to i64
  %1352 = getelementptr inbounds i8, i8* %input, i64 %1351
  %1353 = load i8, i8* %1352, align 1, !tbaa !386
  %1354 = insertelement <64 x i8> %1349, i8 %1353, i32 46
  %1355 = extractelement <64 x i32> %1119, i32 47
  %1356 = sext i32 %1355 to i64
  %1357 = getelementptr inbounds i8, i8* %input, i64 %1356
  %1358 = load i8, i8* %1357, align 1, !tbaa !386
  %1359 = insertelement <64 x i8> %1354, i8 %1358, i32 47
  %1360 = extractelement <64 x i32> %1119, i32 48
  %1361 = sext i32 %1360 to i64
  %1362 = getelementptr inbounds i8, i8* %input, i64 %1361
  %1363 = load i8, i8* %1362, align 1, !tbaa !386
  %1364 = insertelement <64 x i8> %1359, i8 %1363, i32 48
  %1365 = extractelement <64 x i32> %1119, i32 49
  %1366 = sext i32 %1365 to i64
  %1367 = getelementptr inbounds i8, i8* %input, i64 %1366
  %1368 = load i8, i8* %1367, align 1, !tbaa !386
  %1369 = insertelement <64 x i8> %1364, i8 %1368, i32 49
  %1370 = extractelement <64 x i32> %1119, i32 50
  %1371 = sext i32 %1370 to i64
  %1372 = getelementptr inbounds i8, i8* %input, i64 %1371
  %1373 = load i8, i8* %1372, align 1, !tbaa !386
  %1374 = insertelement <64 x i8> %1369, i8 %1373, i32 50
  %1375 = extractelement <64 x i32> %1119, i32 51
  %1376 = sext i32 %1375 to i64
  %1377 = getelementptr inbounds i8, i8* %input, i64 %1376
  %1378 = load i8, i8* %1377, align 1, !tbaa !386
  %1379 = insertelement <64 x i8> %1374, i8 %1378, i32 51
  %1380 = extractelement <64 x i32> %1119, i32 52
  %1381 = sext i32 %1380 to i64
  %1382 = getelementptr inbounds i8, i8* %input, i64 %1381
  %1383 = load i8, i8* %1382, align 1, !tbaa !386
  %1384 = insertelement <64 x i8> %1379, i8 %1383, i32 52
  %1385 = extractelement <64 x i32> %1119, i32 53
  %1386 = sext i32 %1385 to i64
  %1387 = getelementptr inbounds i8, i8* %input, i64 %1386
  %1388 = load i8, i8* %1387, align 1, !tbaa !386
  %1389 = insertelement <64 x i8> %1384, i8 %1388, i32 53
  %1390 = extractelement <64 x i32> %1119, i32 54
  %1391 = sext i32 %1390 to i64
  %1392 = getelementptr inbounds i8, i8* %input, i64 %1391
  %1393 = load i8, i8* %1392, align 1, !tbaa !386
  %1394 = insertelement <64 x i8> %1389, i8 %1393, i32 54
  %1395 = extractelement <64 x i32> %1119, i32 55
  %1396 = sext i32 %1395 to i64
  %1397 = getelementptr inbounds i8, i8* %input, i64 %1396
  %1398 = load i8, i8* %1397, align 1, !tbaa !386
  %1399 = insertelement <64 x i8> %1394, i8 %1398, i32 55
  %1400 = extractelement <64 x i32> %1119, i32 56
  %1401 = sext i32 %1400 to i64
  %1402 = getelementptr inbounds i8, i8* %input, i64 %1401
  %1403 = load i8, i8* %1402, align 1, !tbaa !386
  %1404 = insertelement <64 x i8> %1399, i8 %1403, i32 56
  %1405 = extractelement <64 x i32> %1119, i32 57
  %1406 = sext i32 %1405 to i64
  %1407 = getelementptr inbounds i8, i8* %input, i64 %1406
  %1408 = load i8, i8* %1407, align 1, !tbaa !386
  %1409 = insertelement <64 x i8> %1404, i8 %1408, i32 57
  %1410 = extractelement <64 x i32> %1119, i32 58
  %1411 = sext i32 %1410 to i64
  %1412 = getelementptr inbounds i8, i8* %input, i64 %1411
  %1413 = load i8, i8* %1412, align 1, !tbaa !386
  %1414 = insertelement <64 x i8> %1409, i8 %1413, i32 58
  %1415 = extractelement <64 x i32> %1119, i32 59
  %1416 = sext i32 %1415 to i64
  %1417 = getelementptr inbounds i8, i8* %input, i64 %1416
  %1418 = load i8, i8* %1417, align 1, !tbaa !386
  %1419 = insertelement <64 x i8> %1414, i8 %1418, i32 59
  %1420 = extractelement <64 x i32> %1119, i32 60
  %1421 = sext i32 %1420 to i64
  %1422 = getelementptr inbounds i8, i8* %input, i64 %1421
  %1423 = load i8, i8* %1422, align 1, !tbaa !386
  %1424 = insertelement <64 x i8> %1419, i8 %1423, i32 60
  %1425 = extractelement <64 x i32> %1119, i32 61
  %1426 = sext i32 %1425 to i64
  %1427 = getelementptr inbounds i8, i8* %input, i64 %1426
  %1428 = load i8, i8* %1427, align 1, !tbaa !386
  %1429 = insertelement <64 x i8> %1424, i8 %1428, i32 61
  %1430 = extractelement <64 x i32> %1119, i32 62
  %1431 = sext i32 %1430 to i64
  %1432 = getelementptr inbounds i8, i8* %input, i64 %1431
  %1433 = load i8, i8* %1432, align 1, !tbaa !386
  %1434 = insertelement <64 x i8> %1429, i8 %1433, i32 62
  %1435 = extractelement <64 x i32> %1119, i32 63
  %1436 = sext i32 %1435 to i64
  %1437 = getelementptr inbounds i8, i8* %input, i64 %1436
  %1438 = load i8, i8* %1437, align 1, !tbaa !386
  %1439 = insertelement <64 x i8> %1434, i8 %1438, i32 63
  %1440 = shufflevector <64 x i8> %1439, <64 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1441 = add nsw i64 %indvars.iv269, %1043
  %1442 = shl nsw i64 %1441, 6
  %1443 = getelementptr inbounds i8, i8* %bounded_input, i64 %1442
  %1444 = bitcast i8* %1443 to <16 x i8>*
  store <16 x i8> %1440, <16 x i8>* %1444, align 16, !tbaa !389
  %1445 = shufflevector <64 x i8> %1439, <64 x i8> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1446 = getelementptr inbounds i8, i8* %1443, i64 16
  %1447 = bitcast i8* %1446 to <16 x i8>*
  store <16 x i8> %1445, <16 x i8>* %1447, align 16, !tbaa !389
  %1448 = shufflevector <64 x i8> %1439, <64 x i8> undef, <16 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %1449 = getelementptr inbounds i8, i8* %1443, i64 32
  %1450 = bitcast i8* %1449 to <16 x i8>*
  store <16 x i8> %1448, <16 x i8>* %1450, align 16, !tbaa !389
  %1451 = shufflevector <64 x i8> %1439, <64 x i8> undef, <16 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1452 = getelementptr inbounds i8, i8* %1443, i64 48
  %1453 = bitcast i8* %1452 to <16 x i8>*
  store <16 x i8> %1451, <16 x i8>* %1453, align 16, !tbaa !389
  %indvars.iv.next270 = add nuw nsw i64 %indvars.iv269, 1
  %.not232 = icmp eq i64 %indvars.iv.next270, %64
  br i1 %.not232, label %"end for bounded_input.s0.x.x.rebased8", label %"for bounded_input.s0.x.x.rebased7"

"end for bounded_input.s0.x.x.rebased8":          ; preds = %"for bounded_input.s0.x.x.rebased7", %"end for bounded_input.s0.x.x.rebased"
  %indvars.iv.next272 = add nuw nsw i64 %indvars.iv271, 1
  %.not231 = icmp eq i64 %indvars.iv271, %179
  br i1 %.not231, label %"end for bounded_input.s0.y.rebased2", label %"for bounded_input.s0.y.rebased1"

"for bounded_input.s0.y.rebased10":               ; preds = %"for bounded_input.s0.y.rebased10.preheader", %"end for bounded_input.s0.x.x14"
  %indvars.iv275 = phi i64 [ 0, %"for bounded_input.s0.y.rebased10.preheader" ], [ %indvars.iv.next276, %"end for bounded_input.s0.x.x14" ]
  %1454 = add nsw i64 %indvars.iv275, %602
  %.not228 = icmp slt i64 %1454, %65
  %1455 = trunc i64 %1454 to i32
  %a36 = select i1 %.not228, i32 %1455, i32 %a37
  br i1 %45, label %"for bounded_input.s0.x.x13.preheader", label %"end for bounded_input.s0.x.x14", !prof !385

"for bounded_input.s0.x.x13.preheader":           ; preds = %"for bounded_input.s0.y.rebased10"
  %1456 = trunc i64 %indvars.iv275 to i32
  %1457 = add i32 %600, %1456
  %t511 = mul i32 %44, %1457
  %1458 = icmp sgt i32 %a36, 0
  %1459 = select i1 %1458, i32 %a36, i32 0
  %t510 = mul nsw i32 %1459, %input.stride.1
  %1460 = insertelement <64 x i32> undef, i32 %t510, i32 0
  %1461 = shufflevector <64 x i32> %1460, <64 x i32> undef, <64 x i32> zeroinitializer
  %1462 = sext i32 %t511 to i64
  br label %"for bounded_input.s0.x.x13"

"for bounded_input.s0.x.x13":                     ; preds = %"for bounded_input.s0.x.x13.preheader", %"for bounded_input.s0.x.x13"
  %indvars.iv273 = phi i64 [ 0, %"for bounded_input.s0.x.x13.preheader" ], [ %indvars.iv.next274, %"for bounded_input.s0.x.x13" ]
  %1463 = trunc i64 %indvars.iv273 to i32
  %1464 = shl nsw i32 %1463, 6
  %1465 = add i32 %46, %1464
  %1466 = insertelement <64 x i32> undef, i32 %1465, i32 0
  %1467 = shufflevector <64 x i32> %1466, <64 x i32> undef, <64 x i32> zeroinitializer
  %1468 = add nsw <64 x i32> %1467, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1469 = shufflevector <64 x i32> %1468, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1470 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1469, <4 x i32> %49)
  %1471 = shufflevector <64 x i32> %1468, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1472 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1471, <4 x i32> %49)
  %1473 = shufflevector <64 x i32> %1468, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %1474 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1473, <4 x i32> %49)
  %1475 = shufflevector <64 x i32> %1468, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %1476 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1475, <4 x i32> %49)
  %1477 = shufflevector <64 x i32> %1468, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %1478 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1477, <4 x i32> %49)
  %1479 = shufflevector <64 x i32> %1468, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %1480 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1479, <4 x i32> %49)
  %1481 = shufflevector <64 x i32> %1468, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %1482 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1481, <4 x i32> %49)
  %1483 = shufflevector <64 x i32> %1468, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %1484 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1483, <4 x i32> %49)
  %1485 = shufflevector <64 x i32> %1468, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %1486 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1485, <4 x i32> %49)
  %1487 = shufflevector <64 x i32> %1468, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %1488 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1487, <4 x i32> %49)
  %1489 = shufflevector <64 x i32> %1468, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %1490 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1489, <4 x i32> %49)
  %1491 = shufflevector <64 x i32> %1468, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %1492 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1491, <4 x i32> %49)
  %1493 = shufflevector <64 x i32> %1468, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %1494 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1493, <4 x i32> %49)
  %1495 = shufflevector <64 x i32> %1468, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %1496 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1495, <4 x i32> %49)
  %1497 = shufflevector <64 x i32> %1468, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %1498 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1497, <4 x i32> %49)
  %1499 = shufflevector <64 x i32> %1468, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %1500 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %1499, <4 x i32> %49)
  %1501 = shufflevector <4 x i32> %1500, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %1502 = shufflevector <8 x i32> %1501, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %1503 = shufflevector <16 x i32> %1502, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %1504 = shufflevector <32 x i32> %1503, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %1505 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1470, <4 x i32> zeroinitializer)
  %1506 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1472, <4 x i32> zeroinitializer)
  %1507 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1474, <4 x i32> zeroinitializer)
  %1508 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1476, <4 x i32> zeroinitializer)
  %1509 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1478, <4 x i32> zeroinitializer)
  %1510 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1480, <4 x i32> zeroinitializer)
  %1511 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1482, <4 x i32> zeroinitializer)
  %1512 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1484, <4 x i32> zeroinitializer)
  %1513 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1486, <4 x i32> zeroinitializer)
  %1514 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1488, <4 x i32> zeroinitializer)
  %1515 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1490, <4 x i32> zeroinitializer)
  %1516 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1492, <4 x i32> zeroinitializer)
  %1517 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1494, <4 x i32> zeroinitializer)
  %1518 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1496, <4 x i32> zeroinitializer)
  %1519 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1498, <4 x i32> zeroinitializer)
  %1520 = shufflevector <64 x i32> %1504, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %1521 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %1520, <4 x i32> zeroinitializer)
  %1522 = shufflevector <4 x i32> %1505, <4 x i32> %1506, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1523 = shufflevector <4 x i32> %1507, <4 x i32> %1508, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1524 = shufflevector <4 x i32> %1509, <4 x i32> %1510, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1525 = shufflevector <4 x i32> %1511, <4 x i32> %1512, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1526 = shufflevector <4 x i32> %1513, <4 x i32> %1514, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1527 = shufflevector <4 x i32> %1515, <4 x i32> %1516, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1528 = shufflevector <4 x i32> %1517, <4 x i32> %1518, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1529 = shufflevector <4 x i32> %1519, <4 x i32> %1521, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1530 = shufflevector <8 x i32> %1522, <8 x i32> %1523, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1531 = shufflevector <8 x i32> %1524, <8 x i32> %1525, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1532 = shufflevector <8 x i32> %1526, <8 x i32> %1527, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1533 = shufflevector <8 x i32> %1528, <8 x i32> %1529, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1534 = shufflevector <16 x i32> %1530, <16 x i32> %1531, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1535 = shufflevector <16 x i32> %1532, <16 x i32> %1533, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1536 = shufflevector <32 x i32> %1534, <32 x i32> %1535, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1537 = add nsw <64 x i32> %1536, %1461
  %1538 = extractelement <64 x i32> %1537, i32 0
  %1539 = sext i32 %1538 to i64
  %1540 = getelementptr inbounds i8, i8* %input, i64 %1539
  %1541 = load i8, i8* %1540, align 1, !tbaa !386
  %1542 = insertelement <64 x i8> undef, i8 %1541, i32 0
  %1543 = extractelement <64 x i32> %1537, i32 1
  %1544 = sext i32 %1543 to i64
  %1545 = getelementptr inbounds i8, i8* %input, i64 %1544
  %1546 = load i8, i8* %1545, align 1, !tbaa !386
  %1547 = insertelement <64 x i8> %1542, i8 %1546, i32 1
  %1548 = extractelement <64 x i32> %1537, i32 2
  %1549 = sext i32 %1548 to i64
  %1550 = getelementptr inbounds i8, i8* %input, i64 %1549
  %1551 = load i8, i8* %1550, align 1, !tbaa !386
  %1552 = insertelement <64 x i8> %1547, i8 %1551, i32 2
  %1553 = extractelement <64 x i32> %1537, i32 3
  %1554 = sext i32 %1553 to i64
  %1555 = getelementptr inbounds i8, i8* %input, i64 %1554
  %1556 = load i8, i8* %1555, align 1, !tbaa !386
  %1557 = insertelement <64 x i8> %1552, i8 %1556, i32 3
  %1558 = extractelement <64 x i32> %1537, i32 4
  %1559 = sext i32 %1558 to i64
  %1560 = getelementptr inbounds i8, i8* %input, i64 %1559
  %1561 = load i8, i8* %1560, align 1, !tbaa !386
  %1562 = insertelement <64 x i8> %1557, i8 %1561, i32 4
  %1563 = extractelement <64 x i32> %1537, i32 5
  %1564 = sext i32 %1563 to i64
  %1565 = getelementptr inbounds i8, i8* %input, i64 %1564
  %1566 = load i8, i8* %1565, align 1, !tbaa !386
  %1567 = insertelement <64 x i8> %1562, i8 %1566, i32 5
  %1568 = extractelement <64 x i32> %1537, i32 6
  %1569 = sext i32 %1568 to i64
  %1570 = getelementptr inbounds i8, i8* %input, i64 %1569
  %1571 = load i8, i8* %1570, align 1, !tbaa !386
  %1572 = insertelement <64 x i8> %1567, i8 %1571, i32 6
  %1573 = extractelement <64 x i32> %1537, i32 7
  %1574 = sext i32 %1573 to i64
  %1575 = getelementptr inbounds i8, i8* %input, i64 %1574
  %1576 = load i8, i8* %1575, align 1, !tbaa !386
  %1577 = insertelement <64 x i8> %1572, i8 %1576, i32 7
  %1578 = extractelement <64 x i32> %1537, i32 8
  %1579 = sext i32 %1578 to i64
  %1580 = getelementptr inbounds i8, i8* %input, i64 %1579
  %1581 = load i8, i8* %1580, align 1, !tbaa !386
  %1582 = insertelement <64 x i8> %1577, i8 %1581, i32 8
  %1583 = extractelement <64 x i32> %1537, i32 9
  %1584 = sext i32 %1583 to i64
  %1585 = getelementptr inbounds i8, i8* %input, i64 %1584
  %1586 = load i8, i8* %1585, align 1, !tbaa !386
  %1587 = insertelement <64 x i8> %1582, i8 %1586, i32 9
  %1588 = extractelement <64 x i32> %1537, i32 10
  %1589 = sext i32 %1588 to i64
  %1590 = getelementptr inbounds i8, i8* %input, i64 %1589
  %1591 = load i8, i8* %1590, align 1, !tbaa !386
  %1592 = insertelement <64 x i8> %1587, i8 %1591, i32 10
  %1593 = extractelement <64 x i32> %1537, i32 11
  %1594 = sext i32 %1593 to i64
  %1595 = getelementptr inbounds i8, i8* %input, i64 %1594
  %1596 = load i8, i8* %1595, align 1, !tbaa !386
  %1597 = insertelement <64 x i8> %1592, i8 %1596, i32 11
  %1598 = extractelement <64 x i32> %1537, i32 12
  %1599 = sext i32 %1598 to i64
  %1600 = getelementptr inbounds i8, i8* %input, i64 %1599
  %1601 = load i8, i8* %1600, align 1, !tbaa !386
  %1602 = insertelement <64 x i8> %1597, i8 %1601, i32 12
  %1603 = extractelement <64 x i32> %1537, i32 13
  %1604 = sext i32 %1603 to i64
  %1605 = getelementptr inbounds i8, i8* %input, i64 %1604
  %1606 = load i8, i8* %1605, align 1, !tbaa !386
  %1607 = insertelement <64 x i8> %1602, i8 %1606, i32 13
  %1608 = extractelement <64 x i32> %1537, i32 14
  %1609 = sext i32 %1608 to i64
  %1610 = getelementptr inbounds i8, i8* %input, i64 %1609
  %1611 = load i8, i8* %1610, align 1, !tbaa !386
  %1612 = insertelement <64 x i8> %1607, i8 %1611, i32 14
  %1613 = extractelement <64 x i32> %1537, i32 15
  %1614 = sext i32 %1613 to i64
  %1615 = getelementptr inbounds i8, i8* %input, i64 %1614
  %1616 = load i8, i8* %1615, align 1, !tbaa !386
  %1617 = insertelement <64 x i8> %1612, i8 %1616, i32 15
  %1618 = extractelement <64 x i32> %1537, i32 16
  %1619 = sext i32 %1618 to i64
  %1620 = getelementptr inbounds i8, i8* %input, i64 %1619
  %1621 = load i8, i8* %1620, align 1, !tbaa !386
  %1622 = insertelement <64 x i8> %1617, i8 %1621, i32 16
  %1623 = extractelement <64 x i32> %1537, i32 17
  %1624 = sext i32 %1623 to i64
  %1625 = getelementptr inbounds i8, i8* %input, i64 %1624
  %1626 = load i8, i8* %1625, align 1, !tbaa !386
  %1627 = insertelement <64 x i8> %1622, i8 %1626, i32 17
  %1628 = extractelement <64 x i32> %1537, i32 18
  %1629 = sext i32 %1628 to i64
  %1630 = getelementptr inbounds i8, i8* %input, i64 %1629
  %1631 = load i8, i8* %1630, align 1, !tbaa !386
  %1632 = insertelement <64 x i8> %1627, i8 %1631, i32 18
  %1633 = extractelement <64 x i32> %1537, i32 19
  %1634 = sext i32 %1633 to i64
  %1635 = getelementptr inbounds i8, i8* %input, i64 %1634
  %1636 = load i8, i8* %1635, align 1, !tbaa !386
  %1637 = insertelement <64 x i8> %1632, i8 %1636, i32 19
  %1638 = extractelement <64 x i32> %1537, i32 20
  %1639 = sext i32 %1638 to i64
  %1640 = getelementptr inbounds i8, i8* %input, i64 %1639
  %1641 = load i8, i8* %1640, align 1, !tbaa !386
  %1642 = insertelement <64 x i8> %1637, i8 %1641, i32 20
  %1643 = extractelement <64 x i32> %1537, i32 21
  %1644 = sext i32 %1643 to i64
  %1645 = getelementptr inbounds i8, i8* %input, i64 %1644
  %1646 = load i8, i8* %1645, align 1, !tbaa !386
  %1647 = insertelement <64 x i8> %1642, i8 %1646, i32 21
  %1648 = extractelement <64 x i32> %1537, i32 22
  %1649 = sext i32 %1648 to i64
  %1650 = getelementptr inbounds i8, i8* %input, i64 %1649
  %1651 = load i8, i8* %1650, align 1, !tbaa !386
  %1652 = insertelement <64 x i8> %1647, i8 %1651, i32 22
  %1653 = extractelement <64 x i32> %1537, i32 23
  %1654 = sext i32 %1653 to i64
  %1655 = getelementptr inbounds i8, i8* %input, i64 %1654
  %1656 = load i8, i8* %1655, align 1, !tbaa !386
  %1657 = insertelement <64 x i8> %1652, i8 %1656, i32 23
  %1658 = extractelement <64 x i32> %1537, i32 24
  %1659 = sext i32 %1658 to i64
  %1660 = getelementptr inbounds i8, i8* %input, i64 %1659
  %1661 = load i8, i8* %1660, align 1, !tbaa !386
  %1662 = insertelement <64 x i8> %1657, i8 %1661, i32 24
  %1663 = extractelement <64 x i32> %1537, i32 25
  %1664 = sext i32 %1663 to i64
  %1665 = getelementptr inbounds i8, i8* %input, i64 %1664
  %1666 = load i8, i8* %1665, align 1, !tbaa !386
  %1667 = insertelement <64 x i8> %1662, i8 %1666, i32 25
  %1668 = extractelement <64 x i32> %1537, i32 26
  %1669 = sext i32 %1668 to i64
  %1670 = getelementptr inbounds i8, i8* %input, i64 %1669
  %1671 = load i8, i8* %1670, align 1, !tbaa !386
  %1672 = insertelement <64 x i8> %1667, i8 %1671, i32 26
  %1673 = extractelement <64 x i32> %1537, i32 27
  %1674 = sext i32 %1673 to i64
  %1675 = getelementptr inbounds i8, i8* %input, i64 %1674
  %1676 = load i8, i8* %1675, align 1, !tbaa !386
  %1677 = insertelement <64 x i8> %1672, i8 %1676, i32 27
  %1678 = extractelement <64 x i32> %1537, i32 28
  %1679 = sext i32 %1678 to i64
  %1680 = getelementptr inbounds i8, i8* %input, i64 %1679
  %1681 = load i8, i8* %1680, align 1, !tbaa !386
  %1682 = insertelement <64 x i8> %1677, i8 %1681, i32 28
  %1683 = extractelement <64 x i32> %1537, i32 29
  %1684 = sext i32 %1683 to i64
  %1685 = getelementptr inbounds i8, i8* %input, i64 %1684
  %1686 = load i8, i8* %1685, align 1, !tbaa !386
  %1687 = insertelement <64 x i8> %1682, i8 %1686, i32 29
  %1688 = extractelement <64 x i32> %1537, i32 30
  %1689 = sext i32 %1688 to i64
  %1690 = getelementptr inbounds i8, i8* %input, i64 %1689
  %1691 = load i8, i8* %1690, align 1, !tbaa !386
  %1692 = insertelement <64 x i8> %1687, i8 %1691, i32 30
  %1693 = extractelement <64 x i32> %1537, i32 31
  %1694 = sext i32 %1693 to i64
  %1695 = getelementptr inbounds i8, i8* %input, i64 %1694
  %1696 = load i8, i8* %1695, align 1, !tbaa !386
  %1697 = insertelement <64 x i8> %1692, i8 %1696, i32 31
  %1698 = extractelement <64 x i32> %1537, i32 32
  %1699 = sext i32 %1698 to i64
  %1700 = getelementptr inbounds i8, i8* %input, i64 %1699
  %1701 = load i8, i8* %1700, align 1, !tbaa !386
  %1702 = insertelement <64 x i8> %1697, i8 %1701, i32 32
  %1703 = extractelement <64 x i32> %1537, i32 33
  %1704 = sext i32 %1703 to i64
  %1705 = getelementptr inbounds i8, i8* %input, i64 %1704
  %1706 = load i8, i8* %1705, align 1, !tbaa !386
  %1707 = insertelement <64 x i8> %1702, i8 %1706, i32 33
  %1708 = extractelement <64 x i32> %1537, i32 34
  %1709 = sext i32 %1708 to i64
  %1710 = getelementptr inbounds i8, i8* %input, i64 %1709
  %1711 = load i8, i8* %1710, align 1, !tbaa !386
  %1712 = insertelement <64 x i8> %1707, i8 %1711, i32 34
  %1713 = extractelement <64 x i32> %1537, i32 35
  %1714 = sext i32 %1713 to i64
  %1715 = getelementptr inbounds i8, i8* %input, i64 %1714
  %1716 = load i8, i8* %1715, align 1, !tbaa !386
  %1717 = insertelement <64 x i8> %1712, i8 %1716, i32 35
  %1718 = extractelement <64 x i32> %1537, i32 36
  %1719 = sext i32 %1718 to i64
  %1720 = getelementptr inbounds i8, i8* %input, i64 %1719
  %1721 = load i8, i8* %1720, align 1, !tbaa !386
  %1722 = insertelement <64 x i8> %1717, i8 %1721, i32 36
  %1723 = extractelement <64 x i32> %1537, i32 37
  %1724 = sext i32 %1723 to i64
  %1725 = getelementptr inbounds i8, i8* %input, i64 %1724
  %1726 = load i8, i8* %1725, align 1, !tbaa !386
  %1727 = insertelement <64 x i8> %1722, i8 %1726, i32 37
  %1728 = extractelement <64 x i32> %1537, i32 38
  %1729 = sext i32 %1728 to i64
  %1730 = getelementptr inbounds i8, i8* %input, i64 %1729
  %1731 = load i8, i8* %1730, align 1, !tbaa !386
  %1732 = insertelement <64 x i8> %1727, i8 %1731, i32 38
  %1733 = extractelement <64 x i32> %1537, i32 39
  %1734 = sext i32 %1733 to i64
  %1735 = getelementptr inbounds i8, i8* %input, i64 %1734
  %1736 = load i8, i8* %1735, align 1, !tbaa !386
  %1737 = insertelement <64 x i8> %1732, i8 %1736, i32 39
  %1738 = extractelement <64 x i32> %1537, i32 40
  %1739 = sext i32 %1738 to i64
  %1740 = getelementptr inbounds i8, i8* %input, i64 %1739
  %1741 = load i8, i8* %1740, align 1, !tbaa !386
  %1742 = insertelement <64 x i8> %1737, i8 %1741, i32 40
  %1743 = extractelement <64 x i32> %1537, i32 41
  %1744 = sext i32 %1743 to i64
  %1745 = getelementptr inbounds i8, i8* %input, i64 %1744
  %1746 = load i8, i8* %1745, align 1, !tbaa !386
  %1747 = insertelement <64 x i8> %1742, i8 %1746, i32 41
  %1748 = extractelement <64 x i32> %1537, i32 42
  %1749 = sext i32 %1748 to i64
  %1750 = getelementptr inbounds i8, i8* %input, i64 %1749
  %1751 = load i8, i8* %1750, align 1, !tbaa !386
  %1752 = insertelement <64 x i8> %1747, i8 %1751, i32 42
  %1753 = extractelement <64 x i32> %1537, i32 43
  %1754 = sext i32 %1753 to i64
  %1755 = getelementptr inbounds i8, i8* %input, i64 %1754
  %1756 = load i8, i8* %1755, align 1, !tbaa !386
  %1757 = insertelement <64 x i8> %1752, i8 %1756, i32 43
  %1758 = extractelement <64 x i32> %1537, i32 44
  %1759 = sext i32 %1758 to i64
  %1760 = getelementptr inbounds i8, i8* %input, i64 %1759
  %1761 = load i8, i8* %1760, align 1, !tbaa !386
  %1762 = insertelement <64 x i8> %1757, i8 %1761, i32 44
  %1763 = extractelement <64 x i32> %1537, i32 45
  %1764 = sext i32 %1763 to i64
  %1765 = getelementptr inbounds i8, i8* %input, i64 %1764
  %1766 = load i8, i8* %1765, align 1, !tbaa !386
  %1767 = insertelement <64 x i8> %1762, i8 %1766, i32 45
  %1768 = extractelement <64 x i32> %1537, i32 46
  %1769 = sext i32 %1768 to i64
  %1770 = getelementptr inbounds i8, i8* %input, i64 %1769
  %1771 = load i8, i8* %1770, align 1, !tbaa !386
  %1772 = insertelement <64 x i8> %1767, i8 %1771, i32 46
  %1773 = extractelement <64 x i32> %1537, i32 47
  %1774 = sext i32 %1773 to i64
  %1775 = getelementptr inbounds i8, i8* %input, i64 %1774
  %1776 = load i8, i8* %1775, align 1, !tbaa !386
  %1777 = insertelement <64 x i8> %1772, i8 %1776, i32 47
  %1778 = extractelement <64 x i32> %1537, i32 48
  %1779 = sext i32 %1778 to i64
  %1780 = getelementptr inbounds i8, i8* %input, i64 %1779
  %1781 = load i8, i8* %1780, align 1, !tbaa !386
  %1782 = insertelement <64 x i8> %1777, i8 %1781, i32 48
  %1783 = extractelement <64 x i32> %1537, i32 49
  %1784 = sext i32 %1783 to i64
  %1785 = getelementptr inbounds i8, i8* %input, i64 %1784
  %1786 = load i8, i8* %1785, align 1, !tbaa !386
  %1787 = insertelement <64 x i8> %1782, i8 %1786, i32 49
  %1788 = extractelement <64 x i32> %1537, i32 50
  %1789 = sext i32 %1788 to i64
  %1790 = getelementptr inbounds i8, i8* %input, i64 %1789
  %1791 = load i8, i8* %1790, align 1, !tbaa !386
  %1792 = insertelement <64 x i8> %1787, i8 %1791, i32 50
  %1793 = extractelement <64 x i32> %1537, i32 51
  %1794 = sext i32 %1793 to i64
  %1795 = getelementptr inbounds i8, i8* %input, i64 %1794
  %1796 = load i8, i8* %1795, align 1, !tbaa !386
  %1797 = insertelement <64 x i8> %1792, i8 %1796, i32 51
  %1798 = extractelement <64 x i32> %1537, i32 52
  %1799 = sext i32 %1798 to i64
  %1800 = getelementptr inbounds i8, i8* %input, i64 %1799
  %1801 = load i8, i8* %1800, align 1, !tbaa !386
  %1802 = insertelement <64 x i8> %1797, i8 %1801, i32 52
  %1803 = extractelement <64 x i32> %1537, i32 53
  %1804 = sext i32 %1803 to i64
  %1805 = getelementptr inbounds i8, i8* %input, i64 %1804
  %1806 = load i8, i8* %1805, align 1, !tbaa !386
  %1807 = insertelement <64 x i8> %1802, i8 %1806, i32 53
  %1808 = extractelement <64 x i32> %1537, i32 54
  %1809 = sext i32 %1808 to i64
  %1810 = getelementptr inbounds i8, i8* %input, i64 %1809
  %1811 = load i8, i8* %1810, align 1, !tbaa !386
  %1812 = insertelement <64 x i8> %1807, i8 %1811, i32 54
  %1813 = extractelement <64 x i32> %1537, i32 55
  %1814 = sext i32 %1813 to i64
  %1815 = getelementptr inbounds i8, i8* %input, i64 %1814
  %1816 = load i8, i8* %1815, align 1, !tbaa !386
  %1817 = insertelement <64 x i8> %1812, i8 %1816, i32 55
  %1818 = extractelement <64 x i32> %1537, i32 56
  %1819 = sext i32 %1818 to i64
  %1820 = getelementptr inbounds i8, i8* %input, i64 %1819
  %1821 = load i8, i8* %1820, align 1, !tbaa !386
  %1822 = insertelement <64 x i8> %1817, i8 %1821, i32 56
  %1823 = extractelement <64 x i32> %1537, i32 57
  %1824 = sext i32 %1823 to i64
  %1825 = getelementptr inbounds i8, i8* %input, i64 %1824
  %1826 = load i8, i8* %1825, align 1, !tbaa !386
  %1827 = insertelement <64 x i8> %1822, i8 %1826, i32 57
  %1828 = extractelement <64 x i32> %1537, i32 58
  %1829 = sext i32 %1828 to i64
  %1830 = getelementptr inbounds i8, i8* %input, i64 %1829
  %1831 = load i8, i8* %1830, align 1, !tbaa !386
  %1832 = insertelement <64 x i8> %1827, i8 %1831, i32 58
  %1833 = extractelement <64 x i32> %1537, i32 59
  %1834 = sext i32 %1833 to i64
  %1835 = getelementptr inbounds i8, i8* %input, i64 %1834
  %1836 = load i8, i8* %1835, align 1, !tbaa !386
  %1837 = insertelement <64 x i8> %1832, i8 %1836, i32 59
  %1838 = extractelement <64 x i32> %1537, i32 60
  %1839 = sext i32 %1838 to i64
  %1840 = getelementptr inbounds i8, i8* %input, i64 %1839
  %1841 = load i8, i8* %1840, align 1, !tbaa !386
  %1842 = insertelement <64 x i8> %1837, i8 %1841, i32 60
  %1843 = extractelement <64 x i32> %1537, i32 61
  %1844 = sext i32 %1843 to i64
  %1845 = getelementptr inbounds i8, i8* %input, i64 %1844
  %1846 = load i8, i8* %1845, align 1, !tbaa !386
  %1847 = insertelement <64 x i8> %1842, i8 %1846, i32 61
  %1848 = extractelement <64 x i32> %1537, i32 62
  %1849 = sext i32 %1848 to i64
  %1850 = getelementptr inbounds i8, i8* %input, i64 %1849
  %1851 = load i8, i8* %1850, align 1, !tbaa !386
  %1852 = insertelement <64 x i8> %1847, i8 %1851, i32 62
  %1853 = extractelement <64 x i32> %1537, i32 63
  %1854 = sext i32 %1853 to i64
  %1855 = getelementptr inbounds i8, i8* %input, i64 %1854
  %1856 = load i8, i8* %1855, align 1, !tbaa !386
  %1857 = insertelement <64 x i8> %1852, i8 %1856, i32 63
  %1858 = shufflevector <64 x i8> %1857, <64 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1859 = add nsw i64 %indvars.iv273, %1462
  %1860 = shl nsw i64 %1859, 6
  %1861 = getelementptr inbounds i8, i8* %bounded_input, i64 %1860
  %1862 = bitcast i8* %1861 to <16 x i8>*
  store <16 x i8> %1858, <16 x i8>* %1862, align 16, !tbaa !389
  %1863 = shufflevector <64 x i8> %1857, <64 x i8> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1864 = getelementptr inbounds i8, i8* %1861, i64 16
  %1865 = bitcast i8* %1864 to <16 x i8>*
  store <16 x i8> %1863, <16 x i8>* %1865, align 16, !tbaa !389
  %1866 = shufflevector <64 x i8> %1857, <64 x i8> undef, <16 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %1867 = getelementptr inbounds i8, i8* %1861, i64 32
  %1868 = bitcast i8* %1867 to <16 x i8>*
  store <16 x i8> %1866, <16 x i8>* %1868, align 16, !tbaa !389
  %1869 = shufflevector <64 x i8> %1857, <64 x i8> undef, <16 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1870 = getelementptr inbounds i8, i8* %1861, i64 48
  %1871 = bitcast i8* %1870 to <16 x i8>*
  store <16 x i8> %1869, <16 x i8>* %1871, align 16, !tbaa !389
  %indvars.iv.next274 = add nuw nsw i64 %indvars.iv273, 1
  %.not230 = icmp eq i64 %indvars.iv.next274, %60
  br i1 %.not230, label %"end for bounded_input.s0.x.x14", label %"for bounded_input.s0.x.x13"

"end for bounded_input.s0.x.x14":                 ; preds = %"for bounded_input.s0.x.x13", %"for bounded_input.s0.y.rebased10"
  %indvars.iv.next276 = add nuw nsw i64 %indvars.iv275, 1
  %.not229 = icmp eq i64 %indvars.iv275, %603
  br i1 %.not229, label %"consume bounded_input", label %"for bounded_input.s0.y.rebased10"

"consume bounded_input":                          ; preds = %"end for bounded_input.s0.x.x14", %"end for bounded_input.s0.y.rebased2"
  br i1 %54, label %"for output.s0.x.x.preheader", label %"end for output.s0.x.x", !prof !385

"for output.s0.x.x.preheader":                    ; preds = %"consume bounded_input"
  %1872 = add nsw i32 %75, 1
  %1873 = mul nsw i32 %1872, %output.stride.1
  %t518 = add nsw i32 %1873, %t458
  %1874 = add nsw i32 %75, 2
  %1875 = mul nsw i32 %1874, %output.stride.1
  %t520 = add nsw i32 %1875, %t458
  %1876 = add nsw i32 %75, 3
  %1877 = mul nsw i32 %1876, %output.stride.1
  %t522 = add nsw i32 %1877, %t458
  %1878 = mul nsw i32 %75, %output.stride.1
  %t516 = add nsw i32 %1878, %t458
  %1879 = sext i32 %t516 to i64
  %1880 = sext i32 %t518 to i64
  %1881 = sext i32 %t520 to i64
  %1882 = sext i32 %t522 to i64
  br label %"for output.s0.x.x"

"for output.s0.x.x":                              ; preds = %"for output.s0.x.x.preheader", %"for output.s0.x.x"
  %indvars.iv278 = phi i64 [ 0, %"for output.s0.x.x.preheader" ], [ %indvars.iv.next279, %"for output.s0.x.x" ]
  %1883 = shl nuw nsw i64 %indvars.iv278, 6
  %1884 = getelementptr inbounds i8, i8* %bounded_input, i64 %1883
  %1885 = getelementptr inbounds i8, i8* %1884, i64 1
  %1886 = bitcast i8* %1885 to <16 x i8>*
  %1887 = load <16 x i8>, <16 x i8>* %1886, align 1, !tbaa !389
  %1888 = getelementptr inbounds i8, i8* %1884, i64 17
  %1889 = bitcast i8* %1888 to <16 x i8>*
  %1890 = load <16 x i8>, <16 x i8>* %1889, align 1, !tbaa !389
  %1891 = getelementptr inbounds i8, i8* %1884, i64 33
  %1892 = bitcast i8* %1891 to <16 x i8>*
  %1893 = load <16 x i8>, <16 x i8>* %1892, align 1, !tbaa !389
  %1894 = getelementptr inbounds i8, i8* %1884, i64 49
  %1895 = bitcast i8* %1894 to <16 x i8>*
  %1896 = load <16 x i8>, <16 x i8>* %1895, align 1, !tbaa !389
  %1897 = shufflevector <16 x i8> %1887, <16 x i8> %1890, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1898 = shufflevector <16 x i8> %1893, <16 x i8> %1896, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %t348.s = shufflevector <32 x i8> %1897, <32 x i8> %1898, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1899 = getelementptr inbounds i8, i8* %1884, i64 5
  %1900 = bitcast i8* %1899 to <16 x i8>*
  %1901 = load <16 x i8>, <16 x i8>* %1900, align 1, !tbaa !389
  %1902 = getelementptr inbounds i8, i8* %1884, i64 21
  %1903 = bitcast i8* %1902 to <16 x i8>*
  %1904 = load <16 x i8>, <16 x i8>* %1903, align 1, !tbaa !389
  %1905 = getelementptr inbounds i8, i8* %1884, i64 37
  %1906 = bitcast i8* %1905 to <16 x i8>*
  %1907 = load <16 x i8>, <16 x i8>* %1906, align 1, !tbaa !389
  %1908 = getelementptr inbounds i8, i8* %1884, i64 53
  %1909 = bitcast i8* %1908 to <16 x i8>*
  %1910 = load <16 x i8>, <16 x i8>* %1909, align 1, !tbaa !389
  %1911 = shufflevector <16 x i8> %1901, <16 x i8> %1904, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1912 = shufflevector <16 x i8> %1907, <16 x i8> %1910, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %t349.s = shufflevector <32 x i8> %1911, <32 x i8> %1912, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1913 = add nsw i64 %indvars.iv278, %57
  %1914 = shl nsw i64 %1913, 6
  %1915 = getelementptr inbounds i8, i8* %bounded_input, i64 %1914
  %1916 = getelementptr inbounds i8, i8* %1915, i64 1
  %1917 = bitcast i8* %1916 to <16 x i8>*
  %1918 = load <16 x i8>, <16 x i8>* %1917, align 1, !tbaa !389
  %1919 = getelementptr inbounds i8, i8* %1915, i64 17
  %1920 = bitcast i8* %1919 to <16 x i8>*
  %1921 = load <16 x i8>, <16 x i8>* %1920, align 1, !tbaa !389
  %1922 = getelementptr inbounds i8, i8* %1915, i64 33
  %1923 = bitcast i8* %1922 to <16 x i8>*
  %1924 = load <16 x i8>, <16 x i8>* %1923, align 1, !tbaa !389
  %1925 = getelementptr inbounds i8, i8* %1915, i64 49
  %1926 = bitcast i8* %1925 to <16 x i8>*
  %1927 = load <16 x i8>, <16 x i8>* %1926, align 1, !tbaa !389
  %1928 = shufflevector <16 x i8> %1918, <16 x i8> %1921, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1929 = shufflevector <16 x i8> %1924, <16 x i8> %1927, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %t351.s = shufflevector <32 x i8> %1928, <32 x i8> %1929, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1930 = getelementptr inbounds i8, i8* %1915, i64 5
  %1931 = bitcast i8* %1930 to <16 x i8>*
  %1932 = load <16 x i8>, <16 x i8>* %1931, align 1, !tbaa !389
  %1933 = getelementptr inbounds i8, i8* %1915, i64 21
  %1934 = bitcast i8* %1933 to <16 x i8>*
  %1935 = load <16 x i8>, <16 x i8>* %1934, align 1, !tbaa !389
  %1936 = getelementptr inbounds i8, i8* %1915, i64 37
  %1937 = bitcast i8* %1936 to <16 x i8>*
  %1938 = load <16 x i8>, <16 x i8>* %1937, align 1, !tbaa !389
  %1939 = getelementptr inbounds i8, i8* %1915, i64 53
  %1940 = bitcast i8* %1939 to <16 x i8>*
  %1941 = load <16 x i8>, <16 x i8>* %1940, align 1, !tbaa !389
  %1942 = shufflevector <16 x i8> %1932, <16 x i8> %1935, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1943 = shufflevector <16 x i8> %1938, <16 x i8> %1941, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %t352.s = shufflevector <32 x i8> %1942, <32 x i8> %1943, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1944 = add nsw i64 %indvars.iv278, %66
  %1945 = shl nsw i64 %1944, 6
  %1946 = getelementptr inbounds i8, i8* %bounded_input, i64 %1945
  %1947 = getelementptr inbounds i8, i8* %1946, i64 1
  %1948 = bitcast i8* %1947 to <16 x i8>*
  %1949 = load <16 x i8>, <16 x i8>* %1948, align 1, !tbaa !389
  %1950 = getelementptr inbounds i8, i8* %1946, i64 17
  %1951 = bitcast i8* %1950 to <16 x i8>*
  %1952 = load <16 x i8>, <16 x i8>* %1951, align 1, !tbaa !389
  %1953 = getelementptr inbounds i8, i8* %1946, i64 33
  %1954 = bitcast i8* %1953 to <16 x i8>*
  %1955 = load <16 x i8>, <16 x i8>* %1954, align 1, !tbaa !389
  %1956 = getelementptr inbounds i8, i8* %1946, i64 49
  %1957 = bitcast i8* %1956 to <16 x i8>*
  %1958 = load <16 x i8>, <16 x i8>* %1957, align 1, !tbaa !389
  %1959 = shufflevector <16 x i8> %1949, <16 x i8> %1952, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1960 = shufflevector <16 x i8> %1955, <16 x i8> %1958, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %t354.s = shufflevector <32 x i8> %1959, <32 x i8> %1960, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1961 = getelementptr inbounds i8, i8* %1946, i64 5
  %1962 = bitcast i8* %1961 to <16 x i8>*
  %1963 = load <16 x i8>, <16 x i8>* %1962, align 1, !tbaa !389
  %1964 = getelementptr inbounds i8, i8* %1946, i64 21
  %1965 = bitcast i8* %1964 to <16 x i8>*
  %1966 = load <16 x i8>, <16 x i8>* %1965, align 1, !tbaa !389
  %1967 = getelementptr inbounds i8, i8* %1946, i64 37
  %1968 = bitcast i8* %1967 to <16 x i8>*
  %1969 = load <16 x i8>, <16 x i8>* %1968, align 1, !tbaa !389
  %1970 = getelementptr inbounds i8, i8* %1946, i64 53
  %1971 = bitcast i8* %1970 to <16 x i8>*
  %1972 = load <16 x i8>, <16 x i8>* %1971, align 1, !tbaa !389
  %1973 = shufflevector <16 x i8> %1963, <16 x i8> %1966, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1974 = shufflevector <16 x i8> %1969, <16 x i8> %1972, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %t355.s = shufflevector <32 x i8> %1973, <32 x i8> %1974, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1975 = add nsw i64 %indvars.iv278, %56
  %1976 = shl nsw i64 %1975, 6
  %1977 = getelementptr inbounds i8, i8* %bounded_input, i64 %1976
  %1978 = getelementptr inbounds i8, i8* %1977, i64 1
  %1979 = bitcast i8* %1978 to <16 x i8>*
  %1980 = load <16 x i8>, <16 x i8>* %1979, align 1, !tbaa !389
  %1981 = getelementptr inbounds i8, i8* %1977, i64 17
  %1982 = bitcast i8* %1981 to <16 x i8>*
  %1983 = load <16 x i8>, <16 x i8>* %1982, align 1, !tbaa !389
  %1984 = getelementptr inbounds i8, i8* %1977, i64 33
  %1985 = bitcast i8* %1984 to <16 x i8>*
  %1986 = load <16 x i8>, <16 x i8>* %1985, align 1, !tbaa !389
  %1987 = getelementptr inbounds i8, i8* %1977, i64 49
  %1988 = bitcast i8* %1987 to <16 x i8>*
  %1989 = load <16 x i8>, <16 x i8>* %1988, align 1, !tbaa !389
  %1990 = shufflevector <16 x i8> %1980, <16 x i8> %1983, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1991 = shufflevector <16 x i8> %1986, <16 x i8> %1989, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %t357.s = shufflevector <32 x i8> %1990, <32 x i8> %1991, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1992 = getelementptr inbounds i8, i8* %1977, i64 5
  %1993 = bitcast i8* %1992 to <16 x i8>*
  %1994 = load <16 x i8>, <16 x i8>* %1993, align 1, !tbaa !389
  %1995 = getelementptr inbounds i8, i8* %1977, i64 21
  %1996 = bitcast i8* %1995 to <16 x i8>*
  %1997 = load <16 x i8>, <16 x i8>* %1996, align 1, !tbaa !389
  %1998 = getelementptr inbounds i8, i8* %1977, i64 37
  %1999 = bitcast i8* %1998 to <16 x i8>*
  %2000 = load <16 x i8>, <16 x i8>* %1999, align 1, !tbaa !389
  %2001 = getelementptr inbounds i8, i8* %1977, i64 53
  %2002 = bitcast i8* %2001 to <16 x i8>*
  %2003 = load <16 x i8>, <16 x i8>* %2002, align 1, !tbaa !389
  %2004 = shufflevector <16 x i8> %1994, <16 x i8> %1997, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2005 = shufflevector <16 x i8> %2000, <16 x i8> %2003, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %t358.s = shufflevector <32 x i8> %2004, <32 x i8> %2005, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2006 = add nsw i64 %indvars.iv278, %55
  %2007 = shl nsw i64 %2006, 6
  %2008 = getelementptr inbounds i8, i8* %bounded_input, i64 %2007
  %2009 = getelementptr inbounds i8, i8* %2008, i64 1
  %2010 = bitcast i8* %2009 to <16 x i8>*
  %2011 = load <16 x i8>, <16 x i8>* %2010, align 1, !tbaa !389
  %2012 = getelementptr inbounds i8, i8* %2008, i64 17
  %2013 = bitcast i8* %2012 to <16 x i8>*
  %2014 = load <16 x i8>, <16 x i8>* %2013, align 1, !tbaa !389
  %2015 = getelementptr inbounds i8, i8* %2008, i64 33
  %2016 = bitcast i8* %2015 to <16 x i8>*
  %2017 = load <16 x i8>, <16 x i8>* %2016, align 1, !tbaa !389
  %2018 = getelementptr inbounds i8, i8* %2008, i64 49
  %2019 = bitcast i8* %2018 to <16 x i8>*
  %2020 = load <16 x i8>, <16 x i8>* %2019, align 1, !tbaa !389
  %2021 = shufflevector <16 x i8> %2011, <16 x i8> %2014, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2022 = shufflevector <16 x i8> %2017, <16 x i8> %2020, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %t359.s = shufflevector <32 x i8> %2021, <32 x i8> %2022, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2023 = getelementptr inbounds i8, i8* %2008, i64 5
  %2024 = bitcast i8* %2023 to <16 x i8>*
  %2025 = load <16 x i8>, <16 x i8>* %2024, align 1, !tbaa !389
  %2026 = getelementptr inbounds i8, i8* %2008, i64 21
  %2027 = bitcast i8* %2026 to <16 x i8>*
  %2028 = load <16 x i8>, <16 x i8>* %2027, align 1, !tbaa !389
  %2029 = getelementptr inbounds i8, i8* %2008, i64 37
  %2030 = bitcast i8* %2029 to <16 x i8>*
  %2031 = load <16 x i8>, <16 x i8>* %2030, align 1, !tbaa !389
  %2032 = getelementptr inbounds i8, i8* %2008, i64 53
  %2033 = bitcast i8* %2032 to <16 x i8>*
  %2034 = load <16 x i8>, <16 x i8>* %2033, align 1, !tbaa !389
  %2035 = shufflevector <16 x i8> %2025, <16 x i8> %2028, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2036 = shufflevector <16 x i8> %2031, <16 x i8> %2034, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %t360.s = shufflevector <32 x i8> %2035, <32 x i8> %2036, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2037 = getelementptr inbounds i8, i8* %2008, i64 2
  %2038 = bitcast i8* %2037 to <16 x i8>*
  %2039 = load <16 x i8>, <16 x i8>* %2038, align 2, !tbaa !389
  %2040 = getelementptr inbounds i8, i8* %2008, i64 18
  %2041 = bitcast i8* %2040 to <16 x i8>*
  %2042 = load <16 x i8>, <16 x i8>* %2041, align 2, !tbaa !389
  %2043 = getelementptr inbounds i8, i8* %2008, i64 34
  %2044 = bitcast i8* %2043 to <16 x i8>*
  %2045 = load <16 x i8>, <16 x i8>* %2044, align 2, !tbaa !389
  %2046 = getelementptr inbounds i8, i8* %2008, i64 50
  %2047 = bitcast i8* %2046 to <16 x i8>*
  %2048 = load <16 x i8>, <16 x i8>* %2047, align 2, !tbaa !389
  %2049 = shufflevector <16 x i8> %2039, <16 x i8> %2042, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2050 = shufflevector <16 x i8> %2045, <16 x i8> %2048, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %t361.s = shufflevector <32 x i8> %2049, <32 x i8> %2050, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2051 = getelementptr inbounds i8, i8* %2008, i64 3
  %2052 = bitcast i8* %2051 to <16 x i8>*
  %2053 = load <16 x i8>, <16 x i8>* %2052, align 1, !tbaa !389
  %2054 = getelementptr inbounds i8, i8* %2008, i64 19
  %2055 = bitcast i8* %2054 to <16 x i8>*
  %2056 = load <16 x i8>, <16 x i8>* %2055, align 1, !tbaa !389
  %2057 = getelementptr inbounds i8, i8* %2008, i64 35
  %2058 = bitcast i8* %2057 to <16 x i8>*
  %2059 = load <16 x i8>, <16 x i8>* %2058, align 1, !tbaa !389
  %2060 = getelementptr inbounds i8, i8* %2008, i64 51
  %2061 = bitcast i8* %2060 to <16 x i8>*
  %2062 = load <16 x i8>, <16 x i8>* %2061, align 1, !tbaa !389
  %2063 = shufflevector <16 x i8> %2053, <16 x i8> %2056, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2064 = shufflevector <16 x i8> %2059, <16 x i8> %2062, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %t362.s = shufflevector <32 x i8> %2063, <32 x i8> %2064, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2065 = getelementptr inbounds i8, i8* %2008, i64 4
  %2066 = bitcast i8* %2065 to <16 x i8>*
  %2067 = load <16 x i8>, <16 x i8>* %2066, align 4, !tbaa !389
  %2068 = getelementptr inbounds i8, i8* %2008, i64 20
  %2069 = bitcast i8* %2068 to <16 x i8>*
  %2070 = load <16 x i8>, <16 x i8>* %2069, align 4, !tbaa !389
  %2071 = getelementptr inbounds i8, i8* %2008, i64 36
  %2072 = bitcast i8* %2071 to <16 x i8>*
  %2073 = load <16 x i8>, <16 x i8>* %2072, align 4, !tbaa !389
  %2074 = getelementptr inbounds i8, i8* %2008, i64 52
  %2075 = bitcast i8* %2074 to <16 x i8>*
  %2076 = load <16 x i8>, <16 x i8>* %2075, align 4, !tbaa !389
  %2077 = shufflevector <16 x i8> %2067, <16 x i8> %2070, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2078 = shufflevector <16 x i8> %2073, <16 x i8> %2076, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %t363.s = shufflevector <32 x i8> %2077, <32 x i8> %2078, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2079 = zext <64 x i8> %t348.s to <64 x i16>
  %t526 = shl nuw nsw <64 x i16> %2079, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2080 = zext <64 x i8> %t349.s to <64 x i16>
  %t527 = shl nuw nsw <64 x i16> %2080, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2081 = zext <64 x i8> %t351.s to <64 x i16>
  %t528 = shl nuw nsw <64 x i16> %2081, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2082 = zext <64 x i8> %t352.s to <64 x i16>
  %t529 = shl nuw nsw <64 x i16> %2082, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2083 = getelementptr inbounds i8, i8* %1884, i64 3
  %2084 = bitcast i8* %2083 to <16 x i8>*
  %2085 = load <16 x i8>, <16 x i8>* %2084, align 1, !tbaa !389
  %2086 = getelementptr inbounds i8, i8* %1884, i64 19
  %2087 = bitcast i8* %2086 to <16 x i8>*
  %2088 = load <16 x i8>, <16 x i8>* %2087, align 1, !tbaa !389
  %2089 = getelementptr inbounds i8, i8* %1884, i64 35
  %2090 = bitcast i8* %2089 to <16 x i8>*
  %2091 = load <16 x i8>, <16 x i8>* %2090, align 1, !tbaa !389
  %2092 = getelementptr inbounds i8, i8* %1884, i64 51
  %2093 = bitcast i8* %2092 to <16 x i8>*
  %2094 = load <16 x i8>, <16 x i8>* %2093, align 1, !tbaa !389
  %2095 = shufflevector <16 x i8> %2085, <16 x i8> %2088, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2096 = shufflevector <16 x i8> %2091, <16 x i8> %2094, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2097 = shufflevector <32 x i8> %2095, <32 x i8> %2096, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2098 = zext <64 x i8> %2097 to <64 x i16>
  %2099 = shl nuw nsw <64 x i16> %2098, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %2100 = getelementptr inbounds i8, i8* %1884, i64 2
  %2101 = bitcast i8* %2100 to <16 x i8>*
  %2102 = load <16 x i8>, <16 x i8>* %2101, align 2, !tbaa !389
  %2103 = getelementptr inbounds i8, i8* %1884, i64 18
  %2104 = bitcast i8* %2103 to <16 x i8>*
  %2105 = load <16 x i8>, <16 x i8>* %2104, align 2, !tbaa !389
  %2106 = getelementptr inbounds i8, i8* %1884, i64 34
  %2107 = bitcast i8* %2106 to <16 x i8>*
  %2108 = load <16 x i8>, <16 x i8>* %2107, align 2, !tbaa !389
  %2109 = getelementptr inbounds i8, i8* %1884, i64 50
  %2110 = bitcast i8* %2109 to <16 x i8>*
  %2111 = load <16 x i8>, <16 x i8>* %2110, align 2, !tbaa !389
  %2112 = shufflevector <16 x i8> %2102, <16 x i8> %2105, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2113 = shufflevector <16 x i8> %2108, <16 x i8> %2111, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2114 = shufflevector <32 x i8> %2112, <32 x i8> %2113, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2115 = zext <64 x i8> %2114 to <64 x i16>
  %2116 = shl nuw nsw <64 x i16> %2115, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2117 = getelementptr inbounds i8, i8* %1884, i64 4
  %2118 = bitcast i8* %2117 to <16 x i8>*
  %2119 = load <16 x i8>, <16 x i8>* %2118, align 4, !tbaa !389
  %2120 = getelementptr inbounds i8, i8* %1884, i64 20
  %2121 = bitcast i8* %2120 to <16 x i8>*
  %2122 = load <16 x i8>, <16 x i8>* %2121, align 4, !tbaa !389
  %2123 = getelementptr inbounds i8, i8* %1884, i64 36
  %2124 = bitcast i8* %2123 to <16 x i8>*
  %2125 = load <16 x i8>, <16 x i8>* %2124, align 4, !tbaa !389
  %2126 = getelementptr inbounds i8, i8* %1884, i64 52
  %2127 = bitcast i8* %2126 to <16 x i8>*
  %2128 = load <16 x i8>, <16 x i8>* %2127, align 4, !tbaa !389
  %2129 = shufflevector <16 x i8> %2119, <16 x i8> %2122, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2130 = shufflevector <16 x i8> %2125, <16 x i8> %2128, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2131 = shufflevector <32 x i8> %2129, <32 x i8> %2130, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2132 = zext <64 x i8> %2131 to <64 x i16>
  %2133 = shl nuw nsw <64 x i16> %2132, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2134 = add nuw nsw <64 x i16> %t527, %t526
  %2135 = add nuw nsw <64 x i16> %2134, %2099
  %2136 = add nuw nsw <64 x i16> %2135, %2116
  %2137 = add nuw nsw <64 x i16> %2136, %2133
  %2138 = getelementptr inbounds i8, i8* %1915, i64 3
  %2139 = bitcast i8* %2138 to <16 x i8>*
  %2140 = load <16 x i8>, <16 x i8>* %2139, align 1, !tbaa !389
  %2141 = getelementptr inbounds i8, i8* %1915, i64 19
  %2142 = bitcast i8* %2141 to <16 x i8>*
  %2143 = load <16 x i8>, <16 x i8>* %2142, align 1, !tbaa !389
  %2144 = getelementptr inbounds i8, i8* %1915, i64 35
  %2145 = bitcast i8* %2144 to <16 x i8>*
  %2146 = load <16 x i8>, <16 x i8>* %2145, align 1, !tbaa !389
  %2147 = getelementptr inbounds i8, i8* %1915, i64 51
  %2148 = bitcast i8* %2147 to <16 x i8>*
  %2149 = load <16 x i8>, <16 x i8>* %2148, align 1, !tbaa !389
  %2150 = shufflevector <16 x i8> %2140, <16 x i8> %2143, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2151 = shufflevector <16 x i8> %2146, <16 x i8> %2149, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2152 = shufflevector <32 x i8> %2150, <32 x i8> %2151, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2153 = zext <64 x i8> %2152 to <64 x i16>
  %2154 = shl nuw nsw <64 x i16> %2153, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %2155 = getelementptr inbounds i8, i8* %1915, i64 2
  %2156 = bitcast i8* %2155 to <16 x i8>*
  %2157 = load <16 x i8>, <16 x i8>* %2156, align 2, !tbaa !389
  %2158 = getelementptr inbounds i8, i8* %1915, i64 18
  %2159 = bitcast i8* %2158 to <16 x i8>*
  %2160 = load <16 x i8>, <16 x i8>* %2159, align 2, !tbaa !389
  %2161 = getelementptr inbounds i8, i8* %1915, i64 34
  %2162 = bitcast i8* %2161 to <16 x i8>*
  %2163 = load <16 x i8>, <16 x i8>* %2162, align 2, !tbaa !389
  %2164 = getelementptr inbounds i8, i8* %1915, i64 50
  %2165 = bitcast i8* %2164 to <16 x i8>*
  %2166 = load <16 x i8>, <16 x i8>* %2165, align 2, !tbaa !389
  %2167 = shufflevector <16 x i8> %2157, <16 x i8> %2160, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2168 = shufflevector <16 x i8> %2163, <16 x i8> %2166, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2169 = shufflevector <32 x i8> %2167, <32 x i8> %2168, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2170 = zext <64 x i8> %2169 to <64 x i16>
  %2171 = shl nuw nsw <64 x i16> %2170, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2172 = getelementptr inbounds i8, i8* %1915, i64 4
  %2173 = bitcast i8* %2172 to <16 x i8>*
  %2174 = load <16 x i8>, <16 x i8>* %2173, align 4, !tbaa !389
  %2175 = getelementptr inbounds i8, i8* %1915, i64 20
  %2176 = bitcast i8* %2175 to <16 x i8>*
  %2177 = load <16 x i8>, <16 x i8>* %2176, align 4, !tbaa !389
  %2178 = getelementptr inbounds i8, i8* %1915, i64 36
  %2179 = bitcast i8* %2178 to <16 x i8>*
  %2180 = load <16 x i8>, <16 x i8>* %2179, align 4, !tbaa !389
  %2181 = getelementptr inbounds i8, i8* %1915, i64 52
  %2182 = bitcast i8* %2181 to <16 x i8>*
  %2183 = load <16 x i8>, <16 x i8>* %2182, align 4, !tbaa !389
  %2184 = shufflevector <16 x i8> %2174, <16 x i8> %2177, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2185 = shufflevector <16 x i8> %2180, <16 x i8> %2183, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2186 = shufflevector <32 x i8> %2184, <32 x i8> %2185, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2187 = zext <64 x i8> %2186 to <64 x i16>
  %2188 = shl nuw nsw <64 x i16> %2187, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2189 = add nuw nsw <64 x i16> %t529, %t528
  %2190 = add nuw nsw <64 x i16> %2189, %2154
  %2191 = add nuw nsw <64 x i16> %2190, %2171
  %2192 = add nuw nsw <64 x i16> %2191, %2188
  %2193 = shufflevector <64 x i16> %2137, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2194 = shufflevector <64 x i16> %2192, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2195 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %2193, <8 x i16> %2194)
  %2196 = shufflevector <64 x i16> %2137, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2197 = shufflevector <64 x i16> %2192, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2198 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %2196, <8 x i16> %2197)
  %2199 = shufflevector <64 x i16> %2137, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %2200 = shufflevector <64 x i16> %2192, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %2201 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %2199, <8 x i16> %2200)
  %2202 = shufflevector <64 x i16> %2137, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2203 = shufflevector <64 x i16> %2192, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2204 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %2202, <8 x i16> %2203)
  %2205 = shufflevector <64 x i16> %2137, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %2206 = shufflevector <64 x i16> %2192, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %2207 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %2205, <8 x i16> %2206)
  %2208 = shufflevector <64 x i16> %2137, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %2209 = shufflevector <64 x i16> %2192, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %2210 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %2208, <8 x i16> %2209)
  %2211 = shufflevector <64 x i16> %2137, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %2212 = shufflevector <64 x i16> %2192, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %2213 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %2211, <8 x i16> %2212)
  %2214 = shufflevector <64 x i16> %2137, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2215 = shufflevector <64 x i16> %2192, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2216 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %2214, <8 x i16> %2215)
  %2217 = getelementptr inbounds i8, i8* %1946, i64 3
  %2218 = bitcast i8* %2217 to <16 x i8>*
  %2219 = load <16 x i8>, <16 x i8>* %2218, align 1, !tbaa !389
  %2220 = getelementptr inbounds i8, i8* %1946, i64 19
  %2221 = bitcast i8* %2220 to <16 x i8>*
  %2222 = load <16 x i8>, <16 x i8>* %2221, align 1, !tbaa !389
  %2223 = getelementptr inbounds i8, i8* %1946, i64 35
  %2224 = bitcast i8* %2223 to <16 x i8>*
  %2225 = load <16 x i8>, <16 x i8>* %2224, align 1, !tbaa !389
  %2226 = getelementptr inbounds i8, i8* %1946, i64 51
  %2227 = bitcast i8* %2226 to <16 x i8>*
  %2228 = load <16 x i8>, <16 x i8>* %2227, align 1, !tbaa !389
  %2229 = shufflevector <16 x i8> %2219, <16 x i8> %2222, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2230 = shufflevector <16 x i8> %2225, <16 x i8> %2228, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2231 = shufflevector <32 x i8> %2229, <32 x i8> %2230, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2232 = zext <64 x i8> %2231 to <64 x i16>
  %2233 = shl nuw nsw <64 x i16> %2232, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2234 = zext <64 x i8> %t354.s to <64 x i16>
  %2235 = getelementptr inbounds i8, i8* %1946, i64 2
  %2236 = bitcast i8* %2235 to <16 x i8>*
  %2237 = load <16 x i8>, <16 x i8>* %2236, align 2, !tbaa !389
  %2238 = getelementptr inbounds i8, i8* %1946, i64 18
  %2239 = bitcast i8* %2238 to <16 x i8>*
  %2240 = load <16 x i8>, <16 x i8>* %2239, align 2, !tbaa !389
  %2241 = getelementptr inbounds i8, i8* %1946, i64 34
  %2242 = bitcast i8* %2241 to <16 x i8>*
  %2243 = load <16 x i8>, <16 x i8>* %2242, align 2, !tbaa !389
  %2244 = getelementptr inbounds i8, i8* %1946, i64 50
  %2245 = bitcast i8* %2244 to <16 x i8>*
  %2246 = load <16 x i8>, <16 x i8>* %2245, align 2, !tbaa !389
  %2247 = shufflevector <16 x i8> %2237, <16 x i8> %2240, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2248 = shufflevector <16 x i8> %2243, <16 x i8> %2246, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2249 = shufflevector <32 x i8> %2247, <32 x i8> %2248, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2250 = zext <64 x i8> %2249 to <64 x i16>
  %2251 = getelementptr inbounds i8, i8* %1946, i64 4
  %2252 = bitcast i8* %2251 to <16 x i8>*
  %2253 = load <16 x i8>, <16 x i8>* %2252, align 4, !tbaa !389
  %2254 = getelementptr inbounds i8, i8* %1946, i64 20
  %2255 = bitcast i8* %2254 to <16 x i8>*
  %2256 = load <16 x i8>, <16 x i8>* %2255, align 4, !tbaa !389
  %2257 = getelementptr inbounds i8, i8* %1946, i64 36
  %2258 = bitcast i8* %2257 to <16 x i8>*
  %2259 = load <16 x i8>, <16 x i8>* %2258, align 4, !tbaa !389
  %2260 = getelementptr inbounds i8, i8* %1946, i64 52
  %2261 = bitcast i8* %2260 to <16 x i8>*
  %2262 = load <16 x i8>, <16 x i8>* %2261, align 4, !tbaa !389
  %2263 = shufflevector <16 x i8> %2253, <16 x i8> %2256, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2264 = shufflevector <16 x i8> %2259, <16 x i8> %2262, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2265 = shufflevector <32 x i8> %2263, <32 x i8> %2264, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2266 = zext <64 x i8> %2265 to <64 x i16>
  %2267 = zext <64 x i8> %t355.s to <64 x i16>
  %2268 = add nuw nsw <64 x i16> %2267, %2234
  %2269 = add nuw nsw <64 x i16> %2268, %2233
  %2270 = add nuw nsw <64 x i16> %2269, %2250
  %2271 = add nuw nsw <64 x i16> %2270, %2266
  %2272 = getelementptr inbounds i8, i8* %1977, i64 3
  %2273 = bitcast i8* %2272 to <16 x i8>*
  %2274 = load <16 x i8>, <16 x i8>* %2273, align 1, !tbaa !389
  %2275 = getelementptr inbounds i8, i8* %1977, i64 19
  %2276 = bitcast i8* %2275 to <16 x i8>*
  %2277 = load <16 x i8>, <16 x i8>* %2276, align 1, !tbaa !389
  %2278 = getelementptr inbounds i8, i8* %1977, i64 35
  %2279 = bitcast i8* %2278 to <16 x i8>*
  %2280 = load <16 x i8>, <16 x i8>* %2279, align 1, !tbaa !389
  %2281 = getelementptr inbounds i8, i8* %1977, i64 51
  %2282 = bitcast i8* %2281 to <16 x i8>*
  %2283 = load <16 x i8>, <16 x i8>* %2282, align 1, !tbaa !389
  %2284 = shufflevector <16 x i8> %2274, <16 x i8> %2277, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2285 = shufflevector <16 x i8> %2280, <16 x i8> %2283, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2286 = shufflevector <32 x i8> %2284, <32 x i8> %2285, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2287 = zext <64 x i8> %2286 to <64 x i16>
  %2288 = shl nuw nsw <64 x i16> %2287, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2289 = zext <64 x i8> %t357.s to <64 x i16>
  %2290 = getelementptr inbounds i8, i8* %1977, i64 2
  %2291 = bitcast i8* %2290 to <16 x i8>*
  %2292 = load <16 x i8>, <16 x i8>* %2291, align 2, !tbaa !389
  %2293 = getelementptr inbounds i8, i8* %1977, i64 18
  %2294 = bitcast i8* %2293 to <16 x i8>*
  %2295 = load <16 x i8>, <16 x i8>* %2294, align 2, !tbaa !389
  %2296 = getelementptr inbounds i8, i8* %1977, i64 34
  %2297 = bitcast i8* %2296 to <16 x i8>*
  %2298 = load <16 x i8>, <16 x i8>* %2297, align 2, !tbaa !389
  %2299 = getelementptr inbounds i8, i8* %1977, i64 50
  %2300 = bitcast i8* %2299 to <16 x i8>*
  %2301 = load <16 x i8>, <16 x i8>* %2300, align 2, !tbaa !389
  %2302 = shufflevector <16 x i8> %2292, <16 x i8> %2295, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2303 = shufflevector <16 x i8> %2298, <16 x i8> %2301, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2304 = shufflevector <32 x i8> %2302, <32 x i8> %2303, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2305 = zext <64 x i8> %2304 to <64 x i16>
  %2306 = getelementptr inbounds i8, i8* %1977, i64 4
  %2307 = bitcast i8* %2306 to <16 x i8>*
  %2308 = load <16 x i8>, <16 x i8>* %2307, align 4, !tbaa !389
  %2309 = getelementptr inbounds i8, i8* %1977, i64 20
  %2310 = bitcast i8* %2309 to <16 x i8>*
  %2311 = load <16 x i8>, <16 x i8>* %2310, align 4, !tbaa !389
  %2312 = getelementptr inbounds i8, i8* %1977, i64 36
  %2313 = bitcast i8* %2312 to <16 x i8>*
  %2314 = load <16 x i8>, <16 x i8>* %2313, align 4, !tbaa !389
  %2315 = getelementptr inbounds i8, i8* %1977, i64 52
  %2316 = bitcast i8* %2315 to <16 x i8>*
  %2317 = load <16 x i8>, <16 x i8>* %2316, align 4, !tbaa !389
  %2318 = shufflevector <16 x i8> %2308, <16 x i8> %2311, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2319 = shufflevector <16 x i8> %2314, <16 x i8> %2317, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2320 = shufflevector <32 x i8> %2318, <32 x i8> %2319, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2321 = zext <64 x i8> %2320 to <64 x i16>
  %2322 = zext <64 x i8> %t358.s to <64 x i16>
  %2323 = add nuw nsw <64 x i16> %2322, %2289
  %2324 = add nuw nsw <64 x i16> %2323, %2288
  %2325 = add nuw nsw <64 x i16> %2324, %2305
  %2326 = add nuw nsw <64 x i16> %2325, %2321
  %2327 = shufflevector <64 x i16> %2271, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2328 = shufflevector <64 x i16> %2326, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2329 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %2327, <8 x i16> %2328)
  %2330 = shufflevector <64 x i16> %2271, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2331 = shufflevector <64 x i16> %2326, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2332 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %2330, <8 x i16> %2331)
  %2333 = shufflevector <64 x i16> %2271, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %2334 = shufflevector <64 x i16> %2326, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %2335 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %2333, <8 x i16> %2334)
  %2336 = shufflevector <64 x i16> %2271, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2337 = shufflevector <64 x i16> %2326, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2338 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %2336, <8 x i16> %2337)
  %2339 = shufflevector <64 x i16> %2271, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %2340 = shufflevector <64 x i16> %2326, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %2341 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %2339, <8 x i16> %2340)
  %2342 = shufflevector <64 x i16> %2271, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %2343 = shufflevector <64 x i16> %2326, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %2344 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %2342, <8 x i16> %2343)
  %2345 = shufflevector <64 x i16> %2271, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %2346 = shufflevector <64 x i16> %2326, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %2347 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %2345, <8 x i16> %2346)
  %2348 = shufflevector <64 x i16> %2271, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2349 = shufflevector <64 x i16> %2326, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2350 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %2348, <8 x i16> %2349)
  %2351 = add <8 x i16> %2329, %2195
  %2352 = add <8 x i16> %2332, %2198
  %2353 = add <8 x i16> %2335, %2201
  %2354 = add <8 x i16> %2338, %2204
  %2355 = add <8 x i16> %2341, %2207
  %2356 = add <8 x i16> %2344, %2210
  %2357 = add <8 x i16> %2347, %2213
  %2358 = add <8 x i16> %2350, %2216
  %2359 = shufflevector <8 x i16> %2358, <8 x i16> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2360 = shufflevector <16 x i16> %2359, <16 x i16> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2361 = shufflevector <32 x i16> %2360, <32 x i16> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2362 = tail call <8 x i8> @llvm.aarch64.neon.uqxtn.v8i8(<8 x i16> %2351)
  %2363 = tail call <8 x i8> @llvm.aarch64.neon.uqxtn.v8i8(<8 x i16> %2352)
  %2364 = tail call <8 x i8> @llvm.aarch64.neon.uqxtn.v8i8(<8 x i16> %2353)
  %2365 = tail call <8 x i8> @llvm.aarch64.neon.uqxtn.v8i8(<8 x i16> %2354)
  %2366 = tail call <8 x i8> @llvm.aarch64.neon.uqxtn.v8i8(<8 x i16> %2355)
  %2367 = tail call <8 x i8> @llvm.aarch64.neon.uqxtn.v8i8(<8 x i16> %2356)
  %2368 = tail call <8 x i8> @llvm.aarch64.neon.uqxtn.v8i8(<8 x i16> %2357)
  %2369 = shufflevector <64 x i16> %2361, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2370 = tail call <8 x i8> @llvm.aarch64.neon.uqxtn.v8i8(<8 x i16> %2369)
  %2371 = zext <64 x i8> %t359.s to <64 x i16>
  %2372 = shl nuw nsw <64 x i16> %2371, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %2373 = shl nuw nsw <64 x i16> %2234, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2374 = shl nuw nsw <64 x i16> %2289, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2375 = add nuw nsw <64 x i16> %2373, %t528
  %2376 = add nuw nsw <64 x i16> %2375, %t526
  %2377 = add nuw nsw <64 x i16> %2376, %2374
  %2378 = add nuw nsw <64 x i16> %2377, %2372
  %2379 = zext <64 x i8> %t360.s to <64 x i16>
  %2380 = shl nuw nsw <64 x i16> %2379, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %2381 = shl nuw nsw <64 x i16> %2267, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2382 = shl nuw nsw <64 x i16> %2322, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2383 = add nuw nsw <64 x i16> %2381, %t529
  %2384 = add nuw nsw <64 x i16> %2383, %t527
  %2385 = add nuw nsw <64 x i16> %2384, %2382
  %2386 = add nuw nsw <64 x i16> %2385, %2380
  %2387 = shufflevector <64 x i16> %2378, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2388 = shufflevector <64 x i16> %2386, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2389 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %2387, <8 x i16> %2388)
  %2390 = shufflevector <64 x i16> %2378, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2391 = shufflevector <64 x i16> %2386, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2392 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %2390, <8 x i16> %2391)
  %2393 = shufflevector <64 x i16> %2378, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %2394 = shufflevector <64 x i16> %2386, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %2395 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %2393, <8 x i16> %2394)
  %2396 = shufflevector <64 x i16> %2378, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2397 = shufflevector <64 x i16> %2386, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2398 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %2396, <8 x i16> %2397)
  %2399 = shufflevector <64 x i16> %2378, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %2400 = shufflevector <64 x i16> %2386, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %2401 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %2399, <8 x i16> %2400)
  %2402 = shufflevector <64 x i16> %2378, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %2403 = shufflevector <64 x i16> %2386, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %2404 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %2402, <8 x i16> %2403)
  %2405 = shufflevector <64 x i16> %2378, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %2406 = shufflevector <64 x i16> %2386, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %2407 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %2405, <8 x i16> %2406)
  %2408 = shufflevector <64 x i16> %2378, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2409 = shufflevector <64 x i16> %2386, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2410 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %2408, <8 x i16> %2409)
  %2411 = zext <64 x i8> %t361.s to <64 x i16>
  %2412 = shl nuw nsw <64 x i16> %2411, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2413 = bitcast i8* %2008 to <16 x i8>*
  %2414 = load <16 x i8>, <16 x i8>* %2413, align 16, !tbaa !389
  %2415 = getelementptr inbounds i8, i8* %2008, i64 16
  %2416 = bitcast i8* %2415 to <16 x i8>*
  %2417 = load <16 x i8>, <16 x i8>* %2416, align 16, !tbaa !389
  %2418 = getelementptr inbounds i8, i8* %2008, i64 32
  %2419 = bitcast i8* %2418 to <16 x i8>*
  %2420 = load <16 x i8>, <16 x i8>* %2419, align 16, !tbaa !389
  %2421 = getelementptr inbounds i8, i8* %2008, i64 48
  %2422 = bitcast i8* %2421 to <16 x i8>*
  %2423 = load <16 x i8>, <16 x i8>* %2422, align 16, !tbaa !389
  %2424 = shufflevector <16 x i8> %2414, <16 x i8> %2417, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2425 = shufflevector <16 x i8> %2420, <16 x i8> %2423, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2426 = shufflevector <32 x i8> %2424, <32 x i8> %2425, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2427 = zext <64 x i8> %2426 to <64 x i16>
  %2428 = zext <64 x i8> %t362.s to <64 x i16>
  %2429 = zext <64 x i8> %t363.s to <64 x i16>
  %2430 = add nuw nsw <64 x i16> %2412, %2371
  %2431 = add nuw nsw <64 x i16> %2430, %2428
  %2432 = add nuw nsw <64 x i16> %2431, %2429
  %2433 = add nuw nsw <64 x i16> %2432, %2427
  %2434 = shl nuw nsw <64 x i16> %2429, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2435 = getelementptr inbounds i8, i8* %2008, i64 6
  %2436 = bitcast i8* %2435 to <16 x i8>*
  %2437 = load <16 x i8>, <16 x i8>* %2436, align 2, !tbaa !389
  %2438 = getelementptr inbounds i8, i8* %2008, i64 22
  %2439 = bitcast i8* %2438 to <16 x i8>*
  %2440 = load <16 x i8>, <16 x i8>* %2439, align 2, !tbaa !389
  %2441 = getelementptr inbounds i8, i8* %2008, i64 38
  %2442 = bitcast i8* %2441 to <16 x i8>*
  %2443 = load <16 x i8>, <16 x i8>* %2442, align 2, !tbaa !389
  %2444 = getelementptr inbounds i8, i8* %2008, i64 54
  %2445 = bitcast i8* %2444 to <16 x i8>*
  %2446 = load <16 x i8>, <16 x i8>* %2445, align 2, !tbaa !389
  %2447 = shufflevector <16 x i8> %2437, <16 x i8> %2440, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2448 = shufflevector <16 x i8> %2443, <16 x i8> %2446, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2449 = shufflevector <32 x i8> %2447, <32 x i8> %2448, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2450 = zext <64 x i8> %2449 to <64 x i16>
  %2451 = add nuw nsw <64 x i16> %2411, %2379
  %2452 = add nuw nsw <64 x i16> %2451, %2428
  %2453 = add nuw nsw <64 x i16> %2452, %2434
  %2454 = add nuw nsw <64 x i16> %2453, %2450
  %2455 = shufflevector <64 x i16> %2433, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2456 = shufflevector <64 x i16> %2454, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2457 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %2455, <8 x i16> %2456)
  %2458 = shufflevector <64 x i16> %2433, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2459 = shufflevector <64 x i16> %2454, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2460 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %2458, <8 x i16> %2459)
  %2461 = shufflevector <64 x i16> %2433, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %2462 = shufflevector <64 x i16> %2454, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %2463 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %2461, <8 x i16> %2462)
  %2464 = shufflevector <64 x i16> %2433, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2465 = shufflevector <64 x i16> %2454, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2466 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %2464, <8 x i16> %2465)
  %2467 = shufflevector <64 x i16> %2433, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %2468 = shufflevector <64 x i16> %2454, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %2469 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %2467, <8 x i16> %2468)
  %2470 = shufflevector <64 x i16> %2433, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %2471 = shufflevector <64 x i16> %2454, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %2472 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %2470, <8 x i16> %2471)
  %2473 = shufflevector <64 x i16> %2433, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %2474 = shufflevector <64 x i16> %2454, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %2475 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %2473, <8 x i16> %2474)
  %2476 = shufflevector <64 x i16> %2433, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2477 = shufflevector <64 x i16> %2454, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2478 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %2476, <8 x i16> %2477)
  %2479 = add <8 x i16> %2457, %2389
  %2480 = add <8 x i16> %2460, %2392
  %2481 = add <8 x i16> %2463, %2395
  %2482 = add <8 x i16> %2466, %2398
  %2483 = add <8 x i16> %2469, %2401
  %2484 = add <8 x i16> %2472, %2404
  %2485 = add <8 x i16> %2475, %2407
  %2486 = add <8 x i16> %2478, %2410
  %2487 = shufflevector <8 x i16> %2486, <8 x i16> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2488 = shufflevector <16 x i16> %2487, <16 x i16> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2489 = shufflevector <32 x i16> %2488, <32 x i16> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2490 = tail call <8 x i8> @llvm.aarch64.neon.uqxtn.v8i8(<8 x i16> %2479)
  %2491 = tail call <8 x i8> @llvm.aarch64.neon.uqxtn.v8i8(<8 x i16> %2480)
  %2492 = tail call <8 x i8> @llvm.aarch64.neon.uqxtn.v8i8(<8 x i16> %2481)
  %2493 = tail call <8 x i8> @llvm.aarch64.neon.uqxtn.v8i8(<8 x i16> %2482)
  %2494 = tail call <8 x i8> @llvm.aarch64.neon.uqxtn.v8i8(<8 x i16> %2483)
  %2495 = tail call <8 x i8> @llvm.aarch64.neon.uqxtn.v8i8(<8 x i16> %2484)
  %2496 = tail call <8 x i8> @llvm.aarch64.neon.uqxtn.v8i8(<8 x i16> %2485)
  %2497 = shufflevector <64 x i16> %2489, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2498 = tail call <8 x i8> @llvm.aarch64.neon.uqxtn.v8i8(<8 x i16> %2497)
  %2499 = add <8 x i8> %2490, %2362
  %2500 = add <8 x i8> %2491, %2363
  %2501 = shufflevector <8 x i8> %2499, <8 x i8> %2500, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2502 = add <8 x i8> %2492, %2364
  %2503 = add <8 x i8> %2493, %2365
  %2504 = shufflevector <8 x i8> %2502, <8 x i8> %2503, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2505 = add <8 x i8> %2494, %2366
  %2506 = add <8 x i8> %2495, %2367
  %2507 = shufflevector <8 x i8> %2505, <8 x i8> %2506, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2508 = add <8 x i8> %2496, %2368
  %2509 = add <8 x i8> %2498, %2370
  %2510 = shufflevector <8 x i8> %2508, <8 x i8> %2509, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2511 = shufflevector <32 x i8> %2510, <32 x i8> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2512 = add nsw i64 %1883, %1879
  %2513 = getelementptr inbounds i8, i8* %output, i64 %2512
  %2514 = bitcast i8* %2513 to <16 x i8>*
  store <16 x i8> %2501, <16 x i8>* %2514, align 1, !tbaa !391
  %2515 = getelementptr inbounds i8, i8* %2513, i64 16
  %2516 = bitcast i8* %2515 to <16 x i8>*
  store <16 x i8> %2504, <16 x i8>* %2516, align 1, !tbaa !391
  %2517 = getelementptr inbounds i8, i8* %2513, i64 32
  %2518 = bitcast i8* %2517 to <16 x i8>*
  store <16 x i8> %2507, <16 x i8>* %2518, align 1, !tbaa !391
  %2519 = shufflevector <64 x i8> %2511, <64 x i8> undef, <16 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2520 = getelementptr inbounds i8, i8* %2513, i64 48
  %2521 = bitcast i8* %2520 to <16 x i8>*
  store <16 x i8> %2519, <16 x i8>* %2521, align 1, !tbaa !391
  %2522 = add nsw i64 %indvars.iv278, %58
  %2523 = shl nsw i64 %2522, 6
  %2524 = getelementptr inbounds i8, i8* %bounded_input, i64 %2523
  %2525 = getelementptr inbounds i8, i8* %2524, i64 1
  %2526 = bitcast i8* %2525 to <16 x i8>*
  %2527 = load <16 x i8>, <16 x i8>* %2526, align 1, !tbaa !389
  %2528 = getelementptr inbounds i8, i8* %2524, i64 17
  %2529 = bitcast i8* %2528 to <16 x i8>*
  %2530 = load <16 x i8>, <16 x i8>* %2529, align 1, !tbaa !389
  %2531 = getelementptr inbounds i8, i8* %2524, i64 33
  %2532 = bitcast i8* %2531 to <16 x i8>*
  %2533 = load <16 x i8>, <16 x i8>* %2532, align 1, !tbaa !389
  %2534 = getelementptr inbounds i8, i8* %2524, i64 49
  %2535 = bitcast i8* %2534 to <16 x i8>*
  %2536 = load <16 x i8>, <16 x i8>* %2535, align 1, !tbaa !389
  %2537 = shufflevector <16 x i8> %2527, <16 x i8> %2530, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2538 = shufflevector <16 x i8> %2533, <16 x i8> %2536, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %t369.s = shufflevector <32 x i8> %2537, <32 x i8> %2538, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2539 = getelementptr inbounds i8, i8* %2524, i64 5
  %2540 = bitcast i8* %2539 to <16 x i8>*
  %2541 = load <16 x i8>, <16 x i8>* %2540, align 1, !tbaa !389
  %2542 = getelementptr inbounds i8, i8* %2524, i64 21
  %2543 = bitcast i8* %2542 to <16 x i8>*
  %2544 = load <16 x i8>, <16 x i8>* %2543, align 1, !tbaa !389
  %2545 = getelementptr inbounds i8, i8* %2524, i64 37
  %2546 = bitcast i8* %2545 to <16 x i8>*
  %2547 = load <16 x i8>, <16 x i8>* %2546, align 1, !tbaa !389
  %2548 = getelementptr inbounds i8, i8* %2524, i64 53
  %2549 = bitcast i8* %2548 to <16 x i8>*
  %2550 = load <16 x i8>, <16 x i8>* %2549, align 1, !tbaa !389
  %2551 = shufflevector <16 x i8> %2541, <16 x i8> %2544, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2552 = shufflevector <16 x i8> %2547, <16 x i8> %2550, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %t370.s = shufflevector <32 x i8> %2551, <32 x i8> %2552, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2553 = load <16 x i8>, <16 x i8>* %2010, align 1, !tbaa !389
  %2554 = load <16 x i8>, <16 x i8>* %2013, align 1, !tbaa !389
  %2555 = load <16 x i8>, <16 x i8>* %2016, align 1, !tbaa !389
  %2556 = load <16 x i8>, <16 x i8>* %2019, align 1, !tbaa !389
  %2557 = shufflevector <16 x i8> %2553, <16 x i8> %2554, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2558 = shufflevector <16 x i8> %2555, <16 x i8> %2556, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %t372.s = shufflevector <32 x i8> %2557, <32 x i8> %2558, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2559 = load <16 x i8>, <16 x i8>* %2024, align 1, !tbaa !389
  %2560 = load <16 x i8>, <16 x i8>* %2027, align 1, !tbaa !389
  %2561 = load <16 x i8>, <16 x i8>* %2030, align 1, !tbaa !389
  %2562 = load <16 x i8>, <16 x i8>* %2033, align 1, !tbaa !389
  %2563 = shufflevector <16 x i8> %2559, <16 x i8> %2560, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2564 = shufflevector <16 x i8> %2561, <16 x i8> %2562, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %t373.s = shufflevector <32 x i8> %2563, <32 x i8> %2564, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2565 = load <16 x i8>, <16 x i8>* %1979, align 1, !tbaa !389
  %2566 = load <16 x i8>, <16 x i8>* %1982, align 1, !tbaa !389
  %2567 = load <16 x i8>, <16 x i8>* %1985, align 1, !tbaa !389
  %2568 = load <16 x i8>, <16 x i8>* %1988, align 1, !tbaa !389
  %2569 = shufflevector <16 x i8> %2565, <16 x i8> %2566, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2570 = shufflevector <16 x i8> %2567, <16 x i8> %2568, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %t377.s = shufflevector <32 x i8> %2569, <32 x i8> %2570, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2571 = load <16 x i8>, <16 x i8>* %1993, align 1, !tbaa !389
  %2572 = load <16 x i8>, <16 x i8>* %1996, align 1, !tbaa !389
  %2573 = load <16 x i8>, <16 x i8>* %1999, align 1, !tbaa !389
  %2574 = load <16 x i8>, <16 x i8>* %2002, align 1, !tbaa !389
  %2575 = shufflevector <16 x i8> %2571, <16 x i8> %2572, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2576 = shufflevector <16 x i8> %2573, <16 x i8> %2574, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %t378.s = shufflevector <32 x i8> %2575, <32 x i8> %2576, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2577 = load <16 x i8>, <16 x i8>* %2291, align 2, !tbaa !389
  %2578 = load <16 x i8>, <16 x i8>* %2294, align 2, !tbaa !389
  %2579 = load <16 x i8>, <16 x i8>* %2297, align 2, !tbaa !389
  %2580 = load <16 x i8>, <16 x i8>* %2300, align 2, !tbaa !389
  %2581 = shufflevector <16 x i8> %2577, <16 x i8> %2578, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2582 = shufflevector <16 x i8> %2579, <16 x i8> %2580, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %t379.s = shufflevector <32 x i8> %2581, <32 x i8> %2582, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2583 = load <16 x i8>, <16 x i8>* %2273, align 1, !tbaa !389
  %2584 = load <16 x i8>, <16 x i8>* %2276, align 1, !tbaa !389
  %2585 = load <16 x i8>, <16 x i8>* %2279, align 1, !tbaa !389
  %2586 = load <16 x i8>, <16 x i8>* %2282, align 1, !tbaa !389
  %2587 = shufflevector <16 x i8> %2583, <16 x i8> %2584, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2588 = shufflevector <16 x i8> %2585, <16 x i8> %2586, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %t380.s = shufflevector <32 x i8> %2587, <32 x i8> %2588, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2589 = load <16 x i8>, <16 x i8>* %2307, align 4, !tbaa !389
  %2590 = load <16 x i8>, <16 x i8>* %2310, align 4, !tbaa !389
  %2591 = load <16 x i8>, <16 x i8>* %2313, align 4, !tbaa !389
  %2592 = load <16 x i8>, <16 x i8>* %2316, align 4, !tbaa !389
  %2593 = shufflevector <16 x i8> %2589, <16 x i8> %2590, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2594 = shufflevector <16 x i8> %2591, <16 x i8> %2592, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %t381.s = shufflevector <32 x i8> %2593, <32 x i8> %2594, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2595 = zext <64 x i8> %t369.s to <64 x i16>
  %t532 = shl nuw nsw <64 x i16> %2595, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2596 = zext <64 x i8> %t370.s to <64 x i16>
  %t533 = shl nuw nsw <64 x i16> %2596, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2597 = shl nuw nsw <64 x i16> %2232, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %2598 = shl nuw nsw <64 x i16> %2250, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2599 = shl nuw nsw <64 x i16> %2266, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2600 = add nuw nsw <64 x i16> %2381, %2373
  %2601 = add nuw nsw <64 x i16> %2600, %2597
  %2602 = add nuw nsw <64 x i16> %2601, %2598
  %2603 = add nuw nsw <64 x i16> %2602, %2599
  %2604 = getelementptr inbounds i8, i8* %2524, i64 3
  %2605 = bitcast i8* %2604 to <16 x i8>*
  %2606 = load <16 x i8>, <16 x i8>* %2605, align 1, !tbaa !389
  %2607 = getelementptr inbounds i8, i8* %2524, i64 19
  %2608 = bitcast i8* %2607 to <16 x i8>*
  %2609 = load <16 x i8>, <16 x i8>* %2608, align 1, !tbaa !389
  %2610 = getelementptr inbounds i8, i8* %2524, i64 35
  %2611 = bitcast i8* %2610 to <16 x i8>*
  %2612 = load <16 x i8>, <16 x i8>* %2611, align 1, !tbaa !389
  %2613 = getelementptr inbounds i8, i8* %2524, i64 51
  %2614 = bitcast i8* %2613 to <16 x i8>*
  %2615 = load <16 x i8>, <16 x i8>* %2614, align 1, !tbaa !389
  %2616 = shufflevector <16 x i8> %2606, <16 x i8> %2609, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2617 = shufflevector <16 x i8> %2612, <16 x i8> %2615, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2618 = shufflevector <32 x i8> %2616, <32 x i8> %2617, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2619 = zext <64 x i8> %2618 to <64 x i16>
  %2620 = shl nuw nsw <64 x i16> %2619, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %2621 = getelementptr inbounds i8, i8* %2524, i64 2
  %2622 = bitcast i8* %2621 to <16 x i8>*
  %2623 = load <16 x i8>, <16 x i8>* %2622, align 2, !tbaa !389
  %2624 = getelementptr inbounds i8, i8* %2524, i64 18
  %2625 = bitcast i8* %2624 to <16 x i8>*
  %2626 = load <16 x i8>, <16 x i8>* %2625, align 2, !tbaa !389
  %2627 = getelementptr inbounds i8, i8* %2524, i64 34
  %2628 = bitcast i8* %2627 to <16 x i8>*
  %2629 = load <16 x i8>, <16 x i8>* %2628, align 2, !tbaa !389
  %2630 = getelementptr inbounds i8, i8* %2524, i64 50
  %2631 = bitcast i8* %2630 to <16 x i8>*
  %2632 = load <16 x i8>, <16 x i8>* %2631, align 2, !tbaa !389
  %2633 = shufflevector <16 x i8> %2623, <16 x i8> %2626, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2634 = shufflevector <16 x i8> %2629, <16 x i8> %2632, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2635 = shufflevector <32 x i8> %2633, <32 x i8> %2634, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2636 = zext <64 x i8> %2635 to <64 x i16>
  %2637 = shl nuw nsw <64 x i16> %2636, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2638 = getelementptr inbounds i8, i8* %2524, i64 4
  %2639 = bitcast i8* %2638 to <16 x i8>*
  %2640 = load <16 x i8>, <16 x i8>* %2639, align 4, !tbaa !389
  %2641 = getelementptr inbounds i8, i8* %2524, i64 20
  %2642 = bitcast i8* %2641 to <16 x i8>*
  %2643 = load <16 x i8>, <16 x i8>* %2642, align 4, !tbaa !389
  %2644 = getelementptr inbounds i8, i8* %2524, i64 36
  %2645 = bitcast i8* %2644 to <16 x i8>*
  %2646 = load <16 x i8>, <16 x i8>* %2645, align 4, !tbaa !389
  %2647 = getelementptr inbounds i8, i8* %2524, i64 52
  %2648 = bitcast i8* %2647 to <16 x i8>*
  %2649 = load <16 x i8>, <16 x i8>* %2648, align 4, !tbaa !389
  %2650 = shufflevector <16 x i8> %2640, <16 x i8> %2643, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2651 = shufflevector <16 x i8> %2646, <16 x i8> %2649, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2652 = shufflevector <32 x i8> %2650, <32 x i8> %2651, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2653 = zext <64 x i8> %2652 to <64 x i16>
  %2654 = shl nuw nsw <64 x i16> %2653, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2655 = add nuw nsw <64 x i16> %t533, %t532
  %2656 = add nuw nsw <64 x i16> %2655, %2620
  %2657 = add nuw nsw <64 x i16> %2656, %2637
  %2658 = add nuw nsw <64 x i16> %2657, %2654
  %2659 = shufflevector <64 x i16> %2603, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2660 = shufflevector <64 x i16> %2658, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2661 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %2659, <8 x i16> %2660)
  %2662 = shufflevector <64 x i16> %2603, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2663 = shufflevector <64 x i16> %2658, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2664 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %2662, <8 x i16> %2663)
  %2665 = shufflevector <64 x i16> %2603, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %2666 = shufflevector <64 x i16> %2658, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %2667 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %2665, <8 x i16> %2666)
  %2668 = shufflevector <64 x i16> %2603, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2669 = shufflevector <64 x i16> %2658, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2670 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %2668, <8 x i16> %2669)
  %2671 = shufflevector <64 x i16> %2603, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %2672 = shufflevector <64 x i16> %2658, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %2673 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %2671, <8 x i16> %2672)
  %2674 = shufflevector <64 x i16> %2603, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %2675 = shufflevector <64 x i16> %2658, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %2676 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %2674, <8 x i16> %2675)
  %2677 = shufflevector <64 x i16> %2603, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %2678 = shufflevector <64 x i16> %2658, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %2679 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %2677, <8 x i16> %2678)
  %2680 = shufflevector <64 x i16> %2603, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2681 = shufflevector <64 x i16> %2658, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2682 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %2680, <8 x i16> %2681)
  %2683 = load <16 x i8>, <16 x i8>* %2052, align 1, !tbaa !389
  %2684 = load <16 x i8>, <16 x i8>* %2055, align 1, !tbaa !389
  %2685 = load <16 x i8>, <16 x i8>* %2058, align 1, !tbaa !389
  %2686 = load <16 x i8>, <16 x i8>* %2061, align 1, !tbaa !389
  %2687 = shufflevector <16 x i8> %2683, <16 x i8> %2684, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2688 = shufflevector <16 x i8> %2685, <16 x i8> %2686, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2689 = shufflevector <32 x i8> %2687, <32 x i8> %2688, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2690 = zext <64 x i8> %2689 to <64 x i16>
  %2691 = shl nuw nsw <64 x i16> %2690, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2692 = zext <64 x i8> %t372.s to <64 x i16>
  %2693 = load <16 x i8>, <16 x i8>* %2038, align 2, !tbaa !389
  %2694 = load <16 x i8>, <16 x i8>* %2041, align 2, !tbaa !389
  %2695 = load <16 x i8>, <16 x i8>* %2044, align 2, !tbaa !389
  %2696 = load <16 x i8>, <16 x i8>* %2047, align 2, !tbaa !389
  %2697 = shufflevector <16 x i8> %2693, <16 x i8> %2694, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2698 = shufflevector <16 x i8> %2695, <16 x i8> %2696, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2699 = shufflevector <32 x i8> %2697, <32 x i8> %2698, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2700 = zext <64 x i8> %2699 to <64 x i16>
  %2701 = load <16 x i8>, <16 x i8>* %2066, align 4, !tbaa !389
  %2702 = load <16 x i8>, <16 x i8>* %2069, align 4, !tbaa !389
  %2703 = load <16 x i8>, <16 x i8>* %2072, align 4, !tbaa !389
  %2704 = load <16 x i8>, <16 x i8>* %2075, align 4, !tbaa !389
  %2705 = shufflevector <16 x i8> %2701, <16 x i8> %2702, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2706 = shufflevector <16 x i8> %2703, <16 x i8> %2704, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2707 = shufflevector <32 x i8> %2705, <32 x i8> %2706, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2708 = zext <64 x i8> %2707 to <64 x i16>
  %2709 = zext <64 x i8> %t373.s to <64 x i16>
  %2710 = add nuw nsw <64 x i16> %2709, %2692
  %2711 = add nuw nsw <64 x i16> %2710, %2691
  %2712 = add nuw nsw <64 x i16> %2711, %2700
  %2713 = add nuw nsw <64 x i16> %2712, %2708
  %2714 = shl nuw nsw <64 x i16> %2153, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2715 = add nuw nsw <64 x i16> %2082, %2081
  %2716 = add nuw nsw <64 x i16> %2715, %2714
  %2717 = add nuw nsw <64 x i16> %2716, %2170
  %2718 = add nuw nsw <64 x i16> %2717, %2187
  %2719 = shufflevector <64 x i16> %2713, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2720 = shufflevector <64 x i16> %2718, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2721 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %2719, <8 x i16> %2720)
  %2722 = shufflevector <64 x i16> %2713, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2723 = shufflevector <64 x i16> %2718, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2724 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %2722, <8 x i16> %2723)
  %2725 = shufflevector <64 x i16> %2713, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %2726 = shufflevector <64 x i16> %2718, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %2727 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %2725, <8 x i16> %2726)
  %2728 = shufflevector <64 x i16> %2713, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2729 = shufflevector <64 x i16> %2718, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2730 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %2728, <8 x i16> %2729)
  %2731 = shufflevector <64 x i16> %2713, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %2732 = shufflevector <64 x i16> %2718, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %2733 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %2731, <8 x i16> %2732)
  %2734 = shufflevector <64 x i16> %2713, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %2735 = shufflevector <64 x i16> %2718, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %2736 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %2734, <8 x i16> %2735)
  %2737 = shufflevector <64 x i16> %2713, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %2738 = shufflevector <64 x i16> %2718, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %2739 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %2737, <8 x i16> %2738)
  %2740 = shufflevector <64 x i16> %2713, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2741 = shufflevector <64 x i16> %2718, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2742 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %2740, <8 x i16> %2741)
  %2743 = add <8 x i16> %2721, %2661
  %2744 = add <8 x i16> %2724, %2664
  %2745 = add <8 x i16> %2727, %2667
  %2746 = add <8 x i16> %2730, %2670
  %2747 = add <8 x i16> %2733, %2673
  %2748 = add <8 x i16> %2736, %2676
  %2749 = add <8 x i16> %2739, %2679
  %2750 = add <8 x i16> %2742, %2682
  %2751 = shufflevector <8 x i16> %2750, <8 x i16> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2752 = shufflevector <16 x i16> %2751, <16 x i16> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2753 = shufflevector <32 x i16> %2752, <32 x i16> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2754 = tail call <8 x i8> @llvm.aarch64.neon.uqxtn.v8i8(<8 x i16> %2743)
  %2755 = tail call <8 x i8> @llvm.aarch64.neon.uqxtn.v8i8(<8 x i16> %2744)
  %2756 = tail call <8 x i8> @llvm.aarch64.neon.uqxtn.v8i8(<8 x i16> %2745)
  %2757 = tail call <8 x i8> @llvm.aarch64.neon.uqxtn.v8i8(<8 x i16> %2746)
  %2758 = tail call <8 x i8> @llvm.aarch64.neon.uqxtn.v8i8(<8 x i16> %2747)
  %2759 = tail call <8 x i8> @llvm.aarch64.neon.uqxtn.v8i8(<8 x i16> %2748)
  %2760 = tail call <8 x i8> @llvm.aarch64.neon.uqxtn.v8i8(<8 x i16> %2749)
  %2761 = shufflevector <64 x i16> %2753, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2762 = tail call <8 x i8> @llvm.aarch64.neon.uqxtn.v8i8(<8 x i16> %2761)
  %2763 = zext <64 x i8> %t377.s to <64 x i16>
  %2764 = shl nuw nsw <64 x i16> %2763, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %2765 = shl nuw nsw <64 x i16> %2692, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2766 = add nuw nsw <64 x i16> %2375, %t532
  %2767 = add nuw nsw <64 x i16> %2766, %2765
  %2768 = add nuw nsw <64 x i16> %2767, %2764
  %2769 = zext <64 x i8> %t378.s to <64 x i16>
  %2770 = shl nuw nsw <64 x i16> %2769, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %2771 = shl nuw nsw <64 x i16> %2709, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2772 = add nuw nsw <64 x i16> %2383, %t533
  %2773 = add nuw nsw <64 x i16> %2772, %2771
  %2774 = add nuw nsw <64 x i16> %2773, %2770
  %2775 = shufflevector <64 x i16> %2768, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2776 = shufflevector <64 x i16> %2774, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2777 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %2775, <8 x i16> %2776)
  %2778 = shufflevector <64 x i16> %2768, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2779 = shufflevector <64 x i16> %2774, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2780 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %2778, <8 x i16> %2779)
  %2781 = shufflevector <64 x i16> %2768, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %2782 = shufflevector <64 x i16> %2774, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %2783 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %2781, <8 x i16> %2782)
  %2784 = shufflevector <64 x i16> %2768, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2785 = shufflevector <64 x i16> %2774, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2786 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %2784, <8 x i16> %2785)
  %2787 = shufflevector <64 x i16> %2768, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %2788 = shufflevector <64 x i16> %2774, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %2789 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %2787, <8 x i16> %2788)
  %2790 = shufflevector <64 x i16> %2768, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %2791 = shufflevector <64 x i16> %2774, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %2792 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %2790, <8 x i16> %2791)
  %2793 = shufflevector <64 x i16> %2768, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %2794 = shufflevector <64 x i16> %2774, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %2795 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %2793, <8 x i16> %2794)
  %2796 = shufflevector <64 x i16> %2768, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2797 = shufflevector <64 x i16> %2774, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2798 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %2796, <8 x i16> %2797)
  %2799 = zext <64 x i8> %t379.s to <64 x i16>
  %2800 = shl nuw nsw <64 x i16> %2799, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2801 = bitcast i8* %1977 to <16 x i8>*
  %2802 = load <16 x i8>, <16 x i8>* %2801, align 16, !tbaa !389
  %2803 = getelementptr inbounds i8, i8* %1977, i64 16
  %2804 = bitcast i8* %2803 to <16 x i8>*
  %2805 = load <16 x i8>, <16 x i8>* %2804, align 16, !tbaa !389
  %2806 = getelementptr inbounds i8, i8* %1977, i64 32
  %2807 = bitcast i8* %2806 to <16 x i8>*
  %2808 = load <16 x i8>, <16 x i8>* %2807, align 16, !tbaa !389
  %2809 = getelementptr inbounds i8, i8* %1977, i64 48
  %2810 = bitcast i8* %2809 to <16 x i8>*
  %2811 = load <16 x i8>, <16 x i8>* %2810, align 16, !tbaa !389
  %2812 = shufflevector <16 x i8> %2802, <16 x i8> %2805, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2813 = shufflevector <16 x i8> %2808, <16 x i8> %2811, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2814 = shufflevector <32 x i8> %2812, <32 x i8> %2813, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2815 = zext <64 x i8> %2814 to <64 x i16>
  %2816 = zext <64 x i8> %t380.s to <64 x i16>
  %2817 = zext <64 x i8> %t381.s to <64 x i16>
  %2818 = add nuw nsw <64 x i16> %2800, %2763
  %2819 = add nuw nsw <64 x i16> %2818, %2816
  %2820 = add nuw nsw <64 x i16> %2819, %2817
  %2821 = add nuw nsw <64 x i16> %2820, %2815
  %2822 = shl nuw nsw <64 x i16> %2817, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2823 = getelementptr inbounds i8, i8* %1977, i64 6
  %2824 = bitcast i8* %2823 to <16 x i8>*
  %2825 = load <16 x i8>, <16 x i8>* %2824, align 2, !tbaa !389
  %2826 = getelementptr inbounds i8, i8* %1977, i64 22
  %2827 = bitcast i8* %2826 to <16 x i8>*
  %2828 = load <16 x i8>, <16 x i8>* %2827, align 2, !tbaa !389
  %2829 = getelementptr inbounds i8, i8* %1977, i64 38
  %2830 = bitcast i8* %2829 to <16 x i8>*
  %2831 = load <16 x i8>, <16 x i8>* %2830, align 2, !tbaa !389
  %2832 = getelementptr inbounds i8, i8* %1977, i64 54
  %2833 = bitcast i8* %2832 to <16 x i8>*
  %2834 = load <16 x i8>, <16 x i8>* %2833, align 2, !tbaa !389
  %2835 = shufflevector <16 x i8> %2825, <16 x i8> %2828, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2836 = shufflevector <16 x i8> %2831, <16 x i8> %2834, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2837 = shufflevector <32 x i8> %2835, <32 x i8> %2836, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2838 = zext <64 x i8> %2837 to <64 x i16>
  %2839 = add nuw nsw <64 x i16> %2799, %2769
  %2840 = add nuw nsw <64 x i16> %2839, %2816
  %2841 = add nuw nsw <64 x i16> %2840, %2822
  %2842 = add nuw nsw <64 x i16> %2841, %2838
  %2843 = shufflevector <64 x i16> %2821, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2844 = shufflevector <64 x i16> %2842, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2845 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %2843, <8 x i16> %2844)
  %2846 = shufflevector <64 x i16> %2821, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2847 = shufflevector <64 x i16> %2842, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2848 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %2846, <8 x i16> %2847)
  %2849 = shufflevector <64 x i16> %2821, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %2850 = shufflevector <64 x i16> %2842, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %2851 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %2849, <8 x i16> %2850)
  %2852 = shufflevector <64 x i16> %2821, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2853 = shufflevector <64 x i16> %2842, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2854 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %2852, <8 x i16> %2853)
  %2855 = shufflevector <64 x i16> %2821, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %2856 = shufflevector <64 x i16> %2842, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %2857 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %2855, <8 x i16> %2856)
  %2858 = shufflevector <64 x i16> %2821, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %2859 = shufflevector <64 x i16> %2842, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %2860 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %2858, <8 x i16> %2859)
  %2861 = shufflevector <64 x i16> %2821, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %2862 = shufflevector <64 x i16> %2842, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %2863 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %2861, <8 x i16> %2862)
  %2864 = shufflevector <64 x i16> %2821, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2865 = shufflevector <64 x i16> %2842, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2866 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %2864, <8 x i16> %2865)
  %2867 = add <8 x i16> %2845, %2777
  %2868 = add <8 x i16> %2848, %2780
  %2869 = add <8 x i16> %2851, %2783
  %2870 = add <8 x i16> %2854, %2786
  %2871 = add <8 x i16> %2857, %2789
  %2872 = add <8 x i16> %2860, %2792
  %2873 = add <8 x i16> %2863, %2795
  %2874 = add <8 x i16> %2866, %2798
  %2875 = shufflevector <8 x i16> %2874, <8 x i16> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2876 = shufflevector <16 x i16> %2875, <16 x i16> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2877 = shufflevector <32 x i16> %2876, <32 x i16> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2878 = tail call <8 x i8> @llvm.aarch64.neon.uqxtn.v8i8(<8 x i16> %2867)
  %2879 = tail call <8 x i8> @llvm.aarch64.neon.uqxtn.v8i8(<8 x i16> %2868)
  %2880 = tail call <8 x i8> @llvm.aarch64.neon.uqxtn.v8i8(<8 x i16> %2869)
  %2881 = tail call <8 x i8> @llvm.aarch64.neon.uqxtn.v8i8(<8 x i16> %2870)
  %2882 = tail call <8 x i8> @llvm.aarch64.neon.uqxtn.v8i8(<8 x i16> %2871)
  %2883 = tail call <8 x i8> @llvm.aarch64.neon.uqxtn.v8i8(<8 x i16> %2872)
  %2884 = tail call <8 x i8> @llvm.aarch64.neon.uqxtn.v8i8(<8 x i16> %2873)
  %2885 = shufflevector <64 x i16> %2877, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2886 = tail call <8 x i8> @llvm.aarch64.neon.uqxtn.v8i8(<8 x i16> %2885)
  %2887 = add <8 x i8> %2878, %2754
  %2888 = add <8 x i8> %2879, %2755
  %2889 = shufflevector <8 x i8> %2887, <8 x i8> %2888, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2890 = add <8 x i8> %2880, %2756
  %2891 = add <8 x i8> %2881, %2757
  %2892 = shufflevector <8 x i8> %2890, <8 x i8> %2891, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2893 = add <8 x i8> %2882, %2758
  %2894 = add <8 x i8> %2883, %2759
  %2895 = shufflevector <8 x i8> %2893, <8 x i8> %2894, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2896 = add <8 x i8> %2884, %2760
  %2897 = add <8 x i8> %2886, %2762
  %2898 = shufflevector <8 x i8> %2896, <8 x i8> %2897, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2899 = shufflevector <32 x i8> %2898, <32 x i8> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2900 = add nsw i64 %1883, %1880
  %2901 = getelementptr inbounds i8, i8* %output, i64 %2900
  %2902 = bitcast i8* %2901 to <16 x i8>*
  store <16 x i8> %2889, <16 x i8>* %2902, align 1, !tbaa !391
  %2903 = getelementptr inbounds i8, i8* %2901, i64 16
  %2904 = bitcast i8* %2903 to <16 x i8>*
  store <16 x i8> %2892, <16 x i8>* %2904, align 1, !tbaa !391
  %2905 = getelementptr inbounds i8, i8* %2901, i64 32
  %2906 = bitcast i8* %2905 to <16 x i8>*
  store <16 x i8> %2895, <16 x i8>* %2906, align 1, !tbaa !391
  %2907 = shufflevector <64 x i8> %2899, <64 x i8> undef, <16 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2908 = getelementptr inbounds i8, i8* %2901, i64 48
  %2909 = bitcast i8* %2908 to <16 x i8>*
  store <16 x i8> %2907, <16 x i8>* %2909, align 1, !tbaa !391
  %2910 = add nsw i64 %indvars.iv278, %67
  %2911 = shl nsw i64 %2910, 6
  %2912 = getelementptr inbounds i8, i8* %bounded_input, i64 %2911
  %2913 = getelementptr inbounds i8, i8* %2912, i64 1
  %2914 = bitcast i8* %2913 to <16 x i8>*
  %2915 = load <16 x i8>, <16 x i8>* %2914, align 1, !tbaa !389
  %2916 = getelementptr inbounds i8, i8* %2912, i64 17
  %2917 = bitcast i8* %2916 to <16 x i8>*
  %2918 = load <16 x i8>, <16 x i8>* %2917, align 1, !tbaa !389
  %2919 = getelementptr inbounds i8, i8* %2912, i64 33
  %2920 = bitcast i8* %2919 to <16 x i8>*
  %2921 = load <16 x i8>, <16 x i8>* %2920, align 1, !tbaa !389
  %2922 = getelementptr inbounds i8, i8* %2912, i64 49
  %2923 = bitcast i8* %2922 to <16 x i8>*
  %2924 = load <16 x i8>, <16 x i8>* %2923, align 1, !tbaa !389
  %2925 = shufflevector <16 x i8> %2915, <16 x i8> %2918, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2926 = shufflevector <16 x i8> %2921, <16 x i8> %2924, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %t387.s = shufflevector <32 x i8> %2925, <32 x i8> %2926, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2927 = getelementptr inbounds i8, i8* %2912, i64 5
  %2928 = bitcast i8* %2927 to <16 x i8>*
  %2929 = load <16 x i8>, <16 x i8>* %2928, align 1, !tbaa !389
  %2930 = getelementptr inbounds i8, i8* %2912, i64 21
  %2931 = bitcast i8* %2930 to <16 x i8>*
  %2932 = load <16 x i8>, <16 x i8>* %2931, align 1, !tbaa !389
  %2933 = getelementptr inbounds i8, i8* %2912, i64 37
  %2934 = bitcast i8* %2933 to <16 x i8>*
  %2935 = load <16 x i8>, <16 x i8>* %2934, align 1, !tbaa !389
  %2936 = getelementptr inbounds i8, i8* %2912, i64 53
  %2937 = bitcast i8* %2936 to <16 x i8>*
  %2938 = load <16 x i8>, <16 x i8>* %2937, align 1, !tbaa !389
  %2939 = shufflevector <16 x i8> %2929, <16 x i8> %2932, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2940 = shufflevector <16 x i8> %2935, <16 x i8> %2938, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %t388.s = shufflevector <32 x i8> %2939, <32 x i8> %2940, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2941 = load <16 x i8>, <16 x i8>* %1917, align 1, !tbaa !389
  %2942 = load <16 x i8>, <16 x i8>* %1920, align 1, !tbaa !389
  %2943 = load <16 x i8>, <16 x i8>* %1923, align 1, !tbaa !389
  %2944 = load <16 x i8>, <16 x i8>* %1926, align 1, !tbaa !389
  %2945 = shufflevector <16 x i8> %2941, <16 x i8> %2942, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2946 = shufflevector <16 x i8> %2943, <16 x i8> %2944, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %t395.s = shufflevector <32 x i8> %2945, <32 x i8> %2946, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2947 = load <16 x i8>, <16 x i8>* %1931, align 1, !tbaa !389
  %2948 = load <16 x i8>, <16 x i8>* %1934, align 1, !tbaa !389
  %2949 = load <16 x i8>, <16 x i8>* %1937, align 1, !tbaa !389
  %2950 = load <16 x i8>, <16 x i8>* %1940, align 1, !tbaa !389
  %2951 = shufflevector <16 x i8> %2947, <16 x i8> %2948, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2952 = shufflevector <16 x i8> %2949, <16 x i8> %2950, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %t396.s = shufflevector <32 x i8> %2951, <32 x i8> %2952, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2953 = load <16 x i8>, <16 x i8>* %2156, align 2, !tbaa !389
  %2954 = load <16 x i8>, <16 x i8>* %2159, align 2, !tbaa !389
  %2955 = load <16 x i8>, <16 x i8>* %2162, align 2, !tbaa !389
  %2956 = load <16 x i8>, <16 x i8>* %2165, align 2, !tbaa !389
  %2957 = shufflevector <16 x i8> %2953, <16 x i8> %2954, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2958 = shufflevector <16 x i8> %2955, <16 x i8> %2956, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %t397.s = shufflevector <32 x i8> %2957, <32 x i8> %2958, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2959 = load <16 x i8>, <16 x i8>* %2139, align 1, !tbaa !389
  %2960 = load <16 x i8>, <16 x i8>* %2142, align 1, !tbaa !389
  %2961 = load <16 x i8>, <16 x i8>* %2145, align 1, !tbaa !389
  %2962 = load <16 x i8>, <16 x i8>* %2148, align 1, !tbaa !389
  %2963 = shufflevector <16 x i8> %2959, <16 x i8> %2960, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2964 = shufflevector <16 x i8> %2961, <16 x i8> %2962, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %t398.s = shufflevector <32 x i8> %2963, <32 x i8> %2964, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2965 = load <16 x i8>, <16 x i8>* %2173, align 4, !tbaa !389
  %2966 = load <16 x i8>, <16 x i8>* %2176, align 4, !tbaa !389
  %2967 = load <16 x i8>, <16 x i8>* %2179, align 4, !tbaa !389
  %2968 = load <16 x i8>, <16 x i8>* %2182, align 4, !tbaa !389
  %2969 = shufflevector <16 x i8> %2965, <16 x i8> %2966, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2970 = shufflevector <16 x i8> %2967, <16 x i8> %2968, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %t399.s = shufflevector <32 x i8> %2969, <32 x i8> %2970, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2971 = zext <64 x i8> %t387.s to <64 x i16>
  %t536 = shl nuw nsw <64 x i16> %2971, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2972 = zext <64 x i8> %t388.s to <64 x i16>
  %t537 = shl nuw nsw <64 x i16> %2972, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2973 = shl nuw nsw <64 x i16> %2690, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %2974 = shl nuw nsw <64 x i16> %2700, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2975 = shl nuw nsw <64 x i16> %2708, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2976 = add nuw nsw <64 x i16> %2771, %2765
  %2977 = add nuw nsw <64 x i16> %2976, %2973
  %2978 = add nuw nsw <64 x i16> %2977, %2974
  %2979 = add nuw nsw <64 x i16> %2978, %2975
  %2980 = getelementptr inbounds i8, i8* %2912, i64 3
  %2981 = bitcast i8* %2980 to <16 x i8>*
  %2982 = load <16 x i8>, <16 x i8>* %2981, align 1, !tbaa !389
  %2983 = getelementptr inbounds i8, i8* %2912, i64 19
  %2984 = bitcast i8* %2983 to <16 x i8>*
  %2985 = load <16 x i8>, <16 x i8>* %2984, align 1, !tbaa !389
  %2986 = getelementptr inbounds i8, i8* %2912, i64 35
  %2987 = bitcast i8* %2986 to <16 x i8>*
  %2988 = load <16 x i8>, <16 x i8>* %2987, align 1, !tbaa !389
  %2989 = getelementptr inbounds i8, i8* %2912, i64 51
  %2990 = bitcast i8* %2989 to <16 x i8>*
  %2991 = load <16 x i8>, <16 x i8>* %2990, align 1, !tbaa !389
  %2992 = shufflevector <16 x i8> %2982, <16 x i8> %2985, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2993 = shufflevector <16 x i8> %2988, <16 x i8> %2991, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2994 = shufflevector <32 x i8> %2992, <32 x i8> %2993, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2995 = zext <64 x i8> %2994 to <64 x i16>
  %2996 = shl nuw nsw <64 x i16> %2995, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %2997 = getelementptr inbounds i8, i8* %2912, i64 2
  %2998 = bitcast i8* %2997 to <16 x i8>*
  %2999 = load <16 x i8>, <16 x i8>* %2998, align 2, !tbaa !389
  %3000 = getelementptr inbounds i8, i8* %2912, i64 18
  %3001 = bitcast i8* %3000 to <16 x i8>*
  %3002 = load <16 x i8>, <16 x i8>* %3001, align 2, !tbaa !389
  %3003 = getelementptr inbounds i8, i8* %2912, i64 34
  %3004 = bitcast i8* %3003 to <16 x i8>*
  %3005 = load <16 x i8>, <16 x i8>* %3004, align 2, !tbaa !389
  %3006 = getelementptr inbounds i8, i8* %2912, i64 50
  %3007 = bitcast i8* %3006 to <16 x i8>*
  %3008 = load <16 x i8>, <16 x i8>* %3007, align 2, !tbaa !389
  %3009 = shufflevector <16 x i8> %2999, <16 x i8> %3002, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3010 = shufflevector <16 x i8> %3005, <16 x i8> %3008, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3011 = shufflevector <32 x i8> %3009, <32 x i8> %3010, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3012 = zext <64 x i8> %3011 to <64 x i16>
  %3013 = shl nuw nsw <64 x i16> %3012, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3014 = getelementptr inbounds i8, i8* %2912, i64 4
  %3015 = bitcast i8* %3014 to <16 x i8>*
  %3016 = load <16 x i8>, <16 x i8>* %3015, align 4, !tbaa !389
  %3017 = getelementptr inbounds i8, i8* %2912, i64 20
  %3018 = bitcast i8* %3017 to <16 x i8>*
  %3019 = load <16 x i8>, <16 x i8>* %3018, align 4, !tbaa !389
  %3020 = getelementptr inbounds i8, i8* %2912, i64 36
  %3021 = bitcast i8* %3020 to <16 x i8>*
  %3022 = load <16 x i8>, <16 x i8>* %3021, align 4, !tbaa !389
  %3023 = getelementptr inbounds i8, i8* %2912, i64 52
  %3024 = bitcast i8* %3023 to <16 x i8>*
  %3025 = load <16 x i8>, <16 x i8>* %3024, align 4, !tbaa !389
  %3026 = shufflevector <16 x i8> %3016, <16 x i8> %3019, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3027 = shufflevector <16 x i8> %3022, <16 x i8> %3025, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3028 = shufflevector <32 x i8> %3026, <32 x i8> %3027, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3029 = zext <64 x i8> %3028 to <64 x i16>
  %3030 = shl nuw nsw <64 x i16> %3029, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3031 = add nuw nsw <64 x i16> %t537, %t536
  %3032 = add nuw nsw <64 x i16> %3031, %2996
  %3033 = add nuw nsw <64 x i16> %3032, %3013
  %3034 = add nuw nsw <64 x i16> %3033, %3030
  %3035 = shufflevector <64 x i16> %2979, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3036 = shufflevector <64 x i16> %3034, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3037 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %3035, <8 x i16> %3036)
  %3038 = shufflevector <64 x i16> %2979, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3039 = shufflevector <64 x i16> %3034, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3040 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %3038, <8 x i16> %3039)
  %3041 = shufflevector <64 x i16> %2979, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %3042 = shufflevector <64 x i16> %3034, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %3043 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %3041, <8 x i16> %3042)
  %3044 = shufflevector <64 x i16> %2979, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3045 = shufflevector <64 x i16> %3034, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3046 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %3044, <8 x i16> %3045)
  %3047 = shufflevector <64 x i16> %2979, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %3048 = shufflevector <64 x i16> %3034, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %3049 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %3047, <8 x i16> %3048)
  %3050 = shufflevector <64 x i16> %2979, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %3051 = shufflevector <64 x i16> %3034, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %3052 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %3050, <8 x i16> %3051)
  %3053 = shufflevector <64 x i16> %2979, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %3054 = shufflevector <64 x i16> %3034, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %3055 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %3053, <8 x i16> %3054)
  %3056 = shufflevector <64 x i16> %2979, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3057 = shufflevector <64 x i16> %3034, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3058 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %3056, <8 x i16> %3057)
  %3059 = shl nuw nsw <64 x i16> %2619, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3060 = add nuw nsw <64 x i16> %2596, %2595
  %3061 = add nuw nsw <64 x i16> %3060, %3059
  %3062 = add nuw nsw <64 x i16> %3061, %2636
  %3063 = add nuw nsw <64 x i16> %3062, %2653
  %3064 = shufflevector <64 x i16> %3063, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3065 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %2328, <8 x i16> %3064)
  %3066 = shufflevector <64 x i16> %3063, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3067 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %2331, <8 x i16> %3066)
  %3068 = shufflevector <64 x i16> %3063, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %3069 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %2334, <8 x i16> %3068)
  %3070 = shufflevector <64 x i16> %3063, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3071 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %2337, <8 x i16> %3070)
  %3072 = shufflevector <64 x i16> %3063, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %3073 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %2340, <8 x i16> %3072)
  %3074 = shufflevector <64 x i16> %3063, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %3075 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %2343, <8 x i16> %3074)
  %3076 = shufflevector <64 x i16> %3063, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %3077 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %2346, <8 x i16> %3076)
  %3078 = shufflevector <64 x i16> %3063, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3079 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %2349, <8 x i16> %3078)
  %3080 = add <8 x i16> %3065, %3037
  %3081 = add <8 x i16> %3067, %3040
  %3082 = add <8 x i16> %3069, %3043
  %3083 = add <8 x i16> %3071, %3046
  %3084 = add <8 x i16> %3073, %3049
  %3085 = add <8 x i16> %3075, %3052
  %3086 = add <8 x i16> %3077, %3055
  %3087 = add <8 x i16> %3079, %3058
  %3088 = shufflevector <8 x i16> %3087, <8 x i16> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3089 = shufflevector <16 x i16> %3088, <16 x i16> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3090 = shufflevector <32 x i16> %3089, <32 x i16> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3091 = tail call <8 x i8> @llvm.aarch64.neon.uqxtn.v8i8(<8 x i16> %3080)
  %3092 = tail call <8 x i8> @llvm.aarch64.neon.uqxtn.v8i8(<8 x i16> %3081)
  %3093 = tail call <8 x i8> @llvm.aarch64.neon.uqxtn.v8i8(<8 x i16> %3082)
  %3094 = tail call <8 x i8> @llvm.aarch64.neon.uqxtn.v8i8(<8 x i16> %3083)
  %3095 = tail call <8 x i8> @llvm.aarch64.neon.uqxtn.v8i8(<8 x i16> %3084)
  %3096 = tail call <8 x i8> @llvm.aarch64.neon.uqxtn.v8i8(<8 x i16> %3085)
  %3097 = tail call <8 x i8> @llvm.aarch64.neon.uqxtn.v8i8(<8 x i16> %3086)
  %3098 = shufflevector <64 x i16> %3090, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3099 = tail call <8 x i8> @llvm.aarch64.neon.uqxtn.v8i8(<8 x i16> %3098)
  %3100 = zext <64 x i8> %t395.s to <64 x i16>
  %3101 = shl nuw nsw <64 x i16> %3100, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %3102 = add nuw nsw <64 x i16> %2765, %t532
  %3103 = add nuw nsw <64 x i16> %3102, %2374
  %3104 = add nuw nsw <64 x i16> %3103, %t536
  %3105 = add nuw nsw <64 x i16> %3104, %3101
  %3106 = zext <64 x i8> %t396.s to <64 x i16>
  %3107 = shl nuw nsw <64 x i16> %3106, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %3108 = add nuw nsw <64 x i16> %2771, %t533
  %3109 = add nuw nsw <64 x i16> %3108, %2382
  %3110 = add nuw nsw <64 x i16> %3109, %t537
  %3111 = add nuw nsw <64 x i16> %3110, %3107
  %3112 = shufflevector <64 x i16> %3105, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3113 = shufflevector <64 x i16> %3111, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3114 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %3112, <8 x i16> %3113)
  %3115 = shufflevector <64 x i16> %3105, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3116 = shufflevector <64 x i16> %3111, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3117 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %3115, <8 x i16> %3116)
  %3118 = shufflevector <64 x i16> %3105, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %3119 = shufflevector <64 x i16> %3111, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %3120 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %3118, <8 x i16> %3119)
  %3121 = shufflevector <64 x i16> %3105, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3122 = shufflevector <64 x i16> %3111, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3123 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %3121, <8 x i16> %3122)
  %3124 = shufflevector <64 x i16> %3105, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %3125 = shufflevector <64 x i16> %3111, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %3126 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %3124, <8 x i16> %3125)
  %3127 = shufflevector <64 x i16> %3105, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %3128 = shufflevector <64 x i16> %3111, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %3129 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %3127, <8 x i16> %3128)
  %3130 = shufflevector <64 x i16> %3105, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %3131 = shufflevector <64 x i16> %3111, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %3132 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %3130, <8 x i16> %3131)
  %3133 = shufflevector <64 x i16> %3105, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3134 = shufflevector <64 x i16> %3111, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3135 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %3133, <8 x i16> %3134)
  %3136 = zext <64 x i8> %t397.s to <64 x i16>
  %3137 = shl nuw nsw <64 x i16> %3136, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3138 = bitcast i8* %1915 to <16 x i8>*
  %3139 = load <16 x i8>, <16 x i8>* %3138, align 16, !tbaa !389
  %3140 = getelementptr inbounds i8, i8* %1915, i64 16
  %3141 = bitcast i8* %3140 to <16 x i8>*
  %3142 = load <16 x i8>, <16 x i8>* %3141, align 16, !tbaa !389
  %3143 = getelementptr inbounds i8, i8* %1915, i64 32
  %3144 = bitcast i8* %3143 to <16 x i8>*
  %3145 = load <16 x i8>, <16 x i8>* %3144, align 16, !tbaa !389
  %3146 = getelementptr inbounds i8, i8* %1915, i64 48
  %3147 = bitcast i8* %3146 to <16 x i8>*
  %3148 = load <16 x i8>, <16 x i8>* %3147, align 16, !tbaa !389
  %3149 = shufflevector <16 x i8> %3139, <16 x i8> %3142, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3150 = shufflevector <16 x i8> %3145, <16 x i8> %3148, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3151 = shufflevector <32 x i8> %3149, <32 x i8> %3150, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3152 = zext <64 x i8> %3151 to <64 x i16>
  %3153 = zext <64 x i8> %t398.s to <64 x i16>
  %3154 = zext <64 x i8> %t399.s to <64 x i16>
  %3155 = add nuw nsw <64 x i16> %3137, %3100
  %3156 = add nuw nsw <64 x i16> %3155, %3153
  %3157 = add nuw nsw <64 x i16> %3156, %3154
  %3158 = add nuw nsw <64 x i16> %3157, %3152
  %3159 = shl nuw nsw <64 x i16> %3154, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3160 = getelementptr inbounds i8, i8* %1915, i64 6
  %3161 = bitcast i8* %3160 to <16 x i8>*
  %3162 = load <16 x i8>, <16 x i8>* %3161, align 2, !tbaa !389
  %3163 = getelementptr inbounds i8, i8* %1915, i64 22
  %3164 = bitcast i8* %3163 to <16 x i8>*
  %3165 = load <16 x i8>, <16 x i8>* %3164, align 2, !tbaa !389
  %3166 = getelementptr inbounds i8, i8* %1915, i64 38
  %3167 = bitcast i8* %3166 to <16 x i8>*
  %3168 = load <16 x i8>, <16 x i8>* %3167, align 2, !tbaa !389
  %3169 = getelementptr inbounds i8, i8* %1915, i64 54
  %3170 = bitcast i8* %3169 to <16 x i8>*
  %3171 = load <16 x i8>, <16 x i8>* %3170, align 2, !tbaa !389
  %3172 = shufflevector <16 x i8> %3162, <16 x i8> %3165, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3173 = shufflevector <16 x i8> %3168, <16 x i8> %3171, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3174 = shufflevector <32 x i8> %3172, <32 x i8> %3173, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3175 = zext <64 x i8> %3174 to <64 x i16>
  %3176 = add nuw nsw <64 x i16> %3136, %3106
  %3177 = add nuw nsw <64 x i16> %3176, %3153
  %3178 = add nuw nsw <64 x i16> %3177, %3159
  %3179 = add nuw nsw <64 x i16> %3178, %3175
  %3180 = shufflevector <64 x i16> %3158, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3181 = shufflevector <64 x i16> %3179, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3182 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %3180, <8 x i16> %3181)
  %3183 = shufflevector <64 x i16> %3158, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3184 = shufflevector <64 x i16> %3179, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3185 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %3183, <8 x i16> %3184)
  %3186 = shufflevector <64 x i16> %3158, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %3187 = shufflevector <64 x i16> %3179, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %3188 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %3186, <8 x i16> %3187)
  %3189 = shufflevector <64 x i16> %3158, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3190 = shufflevector <64 x i16> %3179, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3191 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %3189, <8 x i16> %3190)
  %3192 = shufflevector <64 x i16> %3158, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %3193 = shufflevector <64 x i16> %3179, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %3194 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %3192, <8 x i16> %3193)
  %3195 = shufflevector <64 x i16> %3158, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %3196 = shufflevector <64 x i16> %3179, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %3197 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %3195, <8 x i16> %3196)
  %3198 = shufflevector <64 x i16> %3158, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %3199 = shufflevector <64 x i16> %3179, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %3200 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %3198, <8 x i16> %3199)
  %3201 = shufflevector <64 x i16> %3158, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3202 = shufflevector <64 x i16> %3179, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3203 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %3201, <8 x i16> %3202)
  %3204 = add <8 x i16> %3182, %3114
  %3205 = add <8 x i16> %3185, %3117
  %3206 = add <8 x i16> %3188, %3120
  %3207 = add <8 x i16> %3191, %3123
  %3208 = add <8 x i16> %3194, %3126
  %3209 = add <8 x i16> %3197, %3129
  %3210 = add <8 x i16> %3200, %3132
  %3211 = add <8 x i16> %3203, %3135
  %3212 = shufflevector <8 x i16> %3211, <8 x i16> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3213 = shufflevector <16 x i16> %3212, <16 x i16> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3214 = shufflevector <32 x i16> %3213, <32 x i16> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3215 = tail call <8 x i8> @llvm.aarch64.neon.uqxtn.v8i8(<8 x i16> %3204)
  %3216 = tail call <8 x i8> @llvm.aarch64.neon.uqxtn.v8i8(<8 x i16> %3205)
  %3217 = tail call <8 x i8> @llvm.aarch64.neon.uqxtn.v8i8(<8 x i16> %3206)
  %3218 = tail call <8 x i8> @llvm.aarch64.neon.uqxtn.v8i8(<8 x i16> %3207)
  %3219 = tail call <8 x i8> @llvm.aarch64.neon.uqxtn.v8i8(<8 x i16> %3208)
  %3220 = tail call <8 x i8> @llvm.aarch64.neon.uqxtn.v8i8(<8 x i16> %3209)
  %3221 = tail call <8 x i8> @llvm.aarch64.neon.uqxtn.v8i8(<8 x i16> %3210)
  %3222 = shufflevector <64 x i16> %3214, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3223 = tail call <8 x i8> @llvm.aarch64.neon.uqxtn.v8i8(<8 x i16> %3222)
  %3224 = add <8 x i8> %3215, %3091
  %3225 = add <8 x i8> %3216, %3092
  %3226 = shufflevector <8 x i8> %3224, <8 x i8> %3225, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3227 = add <8 x i8> %3217, %3093
  %3228 = add <8 x i8> %3218, %3094
  %3229 = shufflevector <8 x i8> %3227, <8 x i8> %3228, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3230 = add <8 x i8> %3219, %3095
  %3231 = add <8 x i8> %3220, %3096
  %3232 = shufflevector <8 x i8> %3230, <8 x i8> %3231, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3233 = add <8 x i8> %3221, %3097
  %3234 = add <8 x i8> %3223, %3099
  %3235 = shufflevector <8 x i8> %3233, <8 x i8> %3234, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3236 = shufflevector <32 x i8> %3235, <32 x i8> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3237 = add nsw i64 %1883, %1881
  %3238 = getelementptr inbounds i8, i8* %output, i64 %3237
  %3239 = bitcast i8* %3238 to <16 x i8>*
  store <16 x i8> %3226, <16 x i8>* %3239, align 1, !tbaa !391
  %3240 = getelementptr inbounds i8, i8* %3238, i64 16
  %3241 = bitcast i8* %3240 to <16 x i8>*
  store <16 x i8> %3229, <16 x i8>* %3241, align 1, !tbaa !391
  %3242 = getelementptr inbounds i8, i8* %3238, i64 32
  %3243 = bitcast i8* %3242 to <16 x i8>*
  store <16 x i8> %3232, <16 x i8>* %3243, align 1, !tbaa !391
  %3244 = shufflevector <64 x i8> %3236, <64 x i8> undef, <16 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3245 = getelementptr inbounds i8, i8* %3238, i64 48
  %3246 = bitcast i8* %3245 to <16 x i8>*
  store <16 x i8> %3244, <16 x i8>* %3246, align 1, !tbaa !391
  %3247 = add nsw i64 %indvars.iv278, %68
  %3248 = shl nsw i64 %3247, 6
  %3249 = getelementptr inbounds i8, i8* %bounded_input, i64 %3248
  %3250 = getelementptr inbounds i8, i8* %3249, i64 1
  %3251 = bitcast i8* %3250 to <16 x i8>*
  %3252 = load <16 x i8>, <16 x i8>* %3251, align 1, !tbaa !389
  %3253 = getelementptr inbounds i8, i8* %3249, i64 17
  %3254 = bitcast i8* %3253 to <16 x i8>*
  %3255 = load <16 x i8>, <16 x i8>* %3254, align 1, !tbaa !389
  %3256 = getelementptr inbounds i8, i8* %3249, i64 33
  %3257 = bitcast i8* %3256 to <16 x i8>*
  %3258 = load <16 x i8>, <16 x i8>* %3257, align 1, !tbaa !389
  %3259 = getelementptr inbounds i8, i8* %3249, i64 49
  %3260 = bitcast i8* %3259 to <16 x i8>*
  %3261 = load <16 x i8>, <16 x i8>* %3260, align 1, !tbaa !389
  %3262 = shufflevector <16 x i8> %3252, <16 x i8> %3255, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3263 = shufflevector <16 x i8> %3258, <16 x i8> %3261, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %t405.s = shufflevector <32 x i8> %3262, <32 x i8> %3263, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3264 = getelementptr inbounds i8, i8* %3249, i64 5
  %3265 = bitcast i8* %3264 to <16 x i8>*
  %3266 = load <16 x i8>, <16 x i8>* %3265, align 1, !tbaa !389
  %3267 = getelementptr inbounds i8, i8* %3249, i64 21
  %3268 = bitcast i8* %3267 to <16 x i8>*
  %3269 = load <16 x i8>, <16 x i8>* %3268, align 1, !tbaa !389
  %3270 = getelementptr inbounds i8, i8* %3249, i64 37
  %3271 = bitcast i8* %3270 to <16 x i8>*
  %3272 = load <16 x i8>, <16 x i8>* %3271, align 1, !tbaa !389
  %3273 = getelementptr inbounds i8, i8* %3249, i64 53
  %3274 = bitcast i8* %3273 to <16 x i8>*
  %3275 = load <16 x i8>, <16 x i8>* %3274, align 1, !tbaa !389
  %3276 = shufflevector <16 x i8> %3266, <16 x i8> %3269, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3277 = shufflevector <16 x i8> %3272, <16 x i8> %3275, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %t406.s = shufflevector <32 x i8> %3276, <32 x i8> %3277, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3278 = load <16 x i8>, <16 x i8>* %2526, align 1, !tbaa !389
  %3279 = load <16 x i8>, <16 x i8>* %2529, align 1, !tbaa !389
  %3280 = load <16 x i8>, <16 x i8>* %2532, align 1, !tbaa !389
  %3281 = load <16 x i8>, <16 x i8>* %2535, align 1, !tbaa !389
  %3282 = shufflevector <16 x i8> %3278, <16 x i8> %3279, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3283 = shufflevector <16 x i8> %3280, <16 x i8> %3281, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %t413.s = shufflevector <32 x i8> %3282, <32 x i8> %3283, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3284 = load <16 x i8>, <16 x i8>* %2540, align 1, !tbaa !389
  %3285 = load <16 x i8>, <16 x i8>* %2543, align 1, !tbaa !389
  %3286 = load <16 x i8>, <16 x i8>* %2546, align 1, !tbaa !389
  %3287 = load <16 x i8>, <16 x i8>* %2549, align 1, !tbaa !389
  %3288 = shufflevector <16 x i8> %3284, <16 x i8> %3285, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3289 = shufflevector <16 x i8> %3286, <16 x i8> %3287, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %t414.s = shufflevector <32 x i8> %3288, <32 x i8> %3289, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3290 = load <16 x i8>, <16 x i8>* %2622, align 2, !tbaa !389
  %3291 = load <16 x i8>, <16 x i8>* %2625, align 2, !tbaa !389
  %3292 = load <16 x i8>, <16 x i8>* %2628, align 2, !tbaa !389
  %3293 = load <16 x i8>, <16 x i8>* %2631, align 2, !tbaa !389
  %3294 = shufflevector <16 x i8> %3290, <16 x i8> %3291, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3295 = shufflevector <16 x i8> %3292, <16 x i8> %3293, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %t415.s = shufflevector <32 x i8> %3294, <32 x i8> %3295, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3296 = load <16 x i8>, <16 x i8>* %2605, align 1, !tbaa !389
  %3297 = load <16 x i8>, <16 x i8>* %2608, align 1, !tbaa !389
  %3298 = load <16 x i8>, <16 x i8>* %2611, align 1, !tbaa !389
  %3299 = load <16 x i8>, <16 x i8>* %2614, align 1, !tbaa !389
  %3300 = shufflevector <16 x i8> %3296, <16 x i8> %3297, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3301 = shufflevector <16 x i8> %3298, <16 x i8> %3299, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %t416.s = shufflevector <32 x i8> %3300, <32 x i8> %3301, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3302 = load <16 x i8>, <16 x i8>* %2639, align 4, !tbaa !389
  %3303 = load <16 x i8>, <16 x i8>* %2642, align 4, !tbaa !389
  %3304 = load <16 x i8>, <16 x i8>* %2645, align 4, !tbaa !389
  %3305 = load <16 x i8>, <16 x i8>* %2648, align 4, !tbaa !389
  %3306 = shufflevector <16 x i8> %3302, <16 x i8> %3303, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3307 = shufflevector <16 x i8> %3304, <16 x i8> %3305, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %t417.s = shufflevector <32 x i8> %3306, <32 x i8> %3307, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3308 = zext <64 x i8> %t405.s to <64 x i16>
  %t540 = shl nuw nsw <64 x i16> %3308, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3309 = zext <64 x i8> %t406.s to <64 x i16>
  %t541 = shl nuw nsw <64 x i16> %3309, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3310 = shl nuw nsw <64 x i16> %2287, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %3311 = shl nuw nsw <64 x i16> %2305, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3312 = shl nuw nsw <64 x i16> %2321, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3313 = add nuw nsw <64 x i16> %2382, %2374
  %3314 = add nuw nsw <64 x i16> %3313, %3310
  %3315 = add nuw nsw <64 x i16> %3314, %3311
  %3316 = add nuw nsw <64 x i16> %3315, %3312
  %3317 = getelementptr inbounds i8, i8* %3249, i64 3
  %3318 = bitcast i8* %3317 to <16 x i8>*
  %3319 = load <16 x i8>, <16 x i8>* %3318, align 1, !tbaa !389
  %3320 = getelementptr inbounds i8, i8* %3249, i64 19
  %3321 = bitcast i8* %3320 to <16 x i8>*
  %3322 = load <16 x i8>, <16 x i8>* %3321, align 1, !tbaa !389
  %3323 = getelementptr inbounds i8, i8* %3249, i64 35
  %3324 = bitcast i8* %3323 to <16 x i8>*
  %3325 = load <16 x i8>, <16 x i8>* %3324, align 1, !tbaa !389
  %3326 = getelementptr inbounds i8, i8* %3249, i64 51
  %3327 = bitcast i8* %3326 to <16 x i8>*
  %3328 = load <16 x i8>, <16 x i8>* %3327, align 1, !tbaa !389
  %3329 = shufflevector <16 x i8> %3319, <16 x i8> %3322, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3330 = shufflevector <16 x i8> %3325, <16 x i8> %3328, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3331 = shufflevector <32 x i8> %3329, <32 x i8> %3330, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3332 = zext <64 x i8> %3331 to <64 x i16>
  %3333 = shl nuw nsw <64 x i16> %3332, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %3334 = getelementptr inbounds i8, i8* %3249, i64 2
  %3335 = bitcast i8* %3334 to <16 x i8>*
  %3336 = load <16 x i8>, <16 x i8>* %3335, align 2, !tbaa !389
  %3337 = getelementptr inbounds i8, i8* %3249, i64 18
  %3338 = bitcast i8* %3337 to <16 x i8>*
  %3339 = load <16 x i8>, <16 x i8>* %3338, align 2, !tbaa !389
  %3340 = getelementptr inbounds i8, i8* %3249, i64 34
  %3341 = bitcast i8* %3340 to <16 x i8>*
  %3342 = load <16 x i8>, <16 x i8>* %3341, align 2, !tbaa !389
  %3343 = getelementptr inbounds i8, i8* %3249, i64 50
  %3344 = bitcast i8* %3343 to <16 x i8>*
  %3345 = load <16 x i8>, <16 x i8>* %3344, align 2, !tbaa !389
  %3346 = shufflevector <16 x i8> %3336, <16 x i8> %3339, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3347 = shufflevector <16 x i8> %3342, <16 x i8> %3345, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3348 = shufflevector <32 x i8> %3346, <32 x i8> %3347, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3349 = zext <64 x i8> %3348 to <64 x i16>
  %3350 = shl nuw nsw <64 x i16> %3349, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3351 = getelementptr inbounds i8, i8* %3249, i64 4
  %3352 = bitcast i8* %3351 to <16 x i8>*
  %3353 = load <16 x i8>, <16 x i8>* %3352, align 4, !tbaa !389
  %3354 = getelementptr inbounds i8, i8* %3249, i64 20
  %3355 = bitcast i8* %3354 to <16 x i8>*
  %3356 = load <16 x i8>, <16 x i8>* %3355, align 4, !tbaa !389
  %3357 = getelementptr inbounds i8, i8* %3249, i64 36
  %3358 = bitcast i8* %3357 to <16 x i8>*
  %3359 = load <16 x i8>, <16 x i8>* %3358, align 4, !tbaa !389
  %3360 = getelementptr inbounds i8, i8* %3249, i64 52
  %3361 = bitcast i8* %3360 to <16 x i8>*
  %3362 = load <16 x i8>, <16 x i8>* %3361, align 4, !tbaa !389
  %3363 = shufflevector <16 x i8> %3353, <16 x i8> %3356, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3364 = shufflevector <16 x i8> %3359, <16 x i8> %3362, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3365 = shufflevector <32 x i8> %3363, <32 x i8> %3364, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3366 = zext <64 x i8> %3365 to <64 x i16>
  %3367 = shl nuw nsw <64 x i16> %3366, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3368 = add nuw nsw <64 x i16> %t541, %t540
  %3369 = add nuw nsw <64 x i16> %3368, %3333
  %3370 = add nuw nsw <64 x i16> %3369, %3350
  %3371 = add nuw nsw <64 x i16> %3370, %3367
  %3372 = shufflevector <64 x i16> %3316, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3373 = shufflevector <64 x i16> %3371, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3374 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %3372, <8 x i16> %3373)
  %3375 = shufflevector <64 x i16> %3316, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3376 = shufflevector <64 x i16> %3371, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3377 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %3375, <8 x i16> %3376)
  %3378 = shufflevector <64 x i16> %3316, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %3379 = shufflevector <64 x i16> %3371, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %3380 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %3378, <8 x i16> %3379)
  %3381 = shufflevector <64 x i16> %3316, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3382 = shufflevector <64 x i16> %3371, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3383 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %3381, <8 x i16> %3382)
  %3384 = shufflevector <64 x i16> %3316, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %3385 = shufflevector <64 x i16> %3371, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %3386 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %3384, <8 x i16> %3385)
  %3387 = shufflevector <64 x i16> %3316, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %3388 = shufflevector <64 x i16> %3371, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %3389 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %3387, <8 x i16> %3388)
  %3390 = shufflevector <64 x i16> %3316, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %3391 = shufflevector <64 x i16> %3371, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %3392 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %3390, <8 x i16> %3391)
  %3393 = shufflevector <64 x i16> %3316, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3394 = shufflevector <64 x i16> %3371, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3395 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %3393, <8 x i16> %3394)
  %3396 = shl nuw nsw <64 x i16> %2995, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3397 = add nuw nsw <64 x i16> %2972, %2971
  %3398 = add nuw nsw <64 x i16> %3397, %3396
  %3399 = add nuw nsw <64 x i16> %3398, %3012
  %3400 = add nuw nsw <64 x i16> %3399, %3029
  %3401 = shufflevector <64 x i16> %3400, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3402 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %2720, <8 x i16> %3401)
  %3403 = shufflevector <64 x i16> %3400, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3404 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %2723, <8 x i16> %3403)
  %3405 = shufflevector <64 x i16> %3400, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %3406 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %2726, <8 x i16> %3405)
  %3407 = shufflevector <64 x i16> %3400, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3408 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %2729, <8 x i16> %3407)
  %3409 = shufflevector <64 x i16> %3400, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %3410 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %2732, <8 x i16> %3409)
  %3411 = shufflevector <64 x i16> %3400, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %3412 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %2735, <8 x i16> %3411)
  %3413 = shufflevector <64 x i16> %3400, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %3414 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %2738, <8 x i16> %3413)
  %3415 = shufflevector <64 x i16> %3400, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3416 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %2741, <8 x i16> %3415)
  %3417 = add <8 x i16> %3402, %3374
  %3418 = add <8 x i16> %3404, %3377
  %3419 = add <8 x i16> %3406, %3380
  %3420 = add <8 x i16> %3408, %3383
  %3421 = add <8 x i16> %3410, %3386
  %3422 = add <8 x i16> %3412, %3389
  %3423 = add <8 x i16> %3414, %3392
  %3424 = add <8 x i16> %3416, %3395
  %3425 = shufflevector <8 x i16> %3424, <8 x i16> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3426 = shufflevector <16 x i16> %3425, <16 x i16> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3427 = shufflevector <32 x i16> %3426, <32 x i16> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3428 = tail call <8 x i8> @llvm.aarch64.neon.uqxtn.v8i8(<8 x i16> %3417)
  %3429 = tail call <8 x i8> @llvm.aarch64.neon.uqxtn.v8i8(<8 x i16> %3418)
  %3430 = tail call <8 x i8> @llvm.aarch64.neon.uqxtn.v8i8(<8 x i16> %3419)
  %3431 = tail call <8 x i8> @llvm.aarch64.neon.uqxtn.v8i8(<8 x i16> %3420)
  %3432 = tail call <8 x i8> @llvm.aarch64.neon.uqxtn.v8i8(<8 x i16> %3421)
  %3433 = tail call <8 x i8> @llvm.aarch64.neon.uqxtn.v8i8(<8 x i16> %3422)
  %3434 = tail call <8 x i8> @llvm.aarch64.neon.uqxtn.v8i8(<8 x i16> %3423)
  %3435 = shufflevector <64 x i16> %3427, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3436 = tail call <8 x i8> @llvm.aarch64.neon.uqxtn.v8i8(<8 x i16> %3435)
  %3437 = zext <64 x i8> %t413.s to <64 x i16>
  %3438 = shl nuw nsw <64 x i16> %3437, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %3439 = add nuw nsw <64 x i16> %2374, %t528
  %3440 = add nuw nsw <64 x i16> %3439, %t536
  %3441 = add nuw nsw <64 x i16> %3440, %t540
  %3442 = add nuw nsw <64 x i16> %3441, %3438
  %3443 = zext <64 x i8> %t414.s to <64 x i16>
  %3444 = shl nuw nsw <64 x i16> %3443, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %3445 = add nuw nsw <64 x i16> %2382, %t529
  %3446 = add nuw nsw <64 x i16> %3445, %t537
  %3447 = add nuw nsw <64 x i16> %3446, %t541
  %3448 = add nuw nsw <64 x i16> %3447, %3444
  %3449 = shufflevector <64 x i16> %3442, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3450 = shufflevector <64 x i16> %3448, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3451 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %3449, <8 x i16> %3450)
  %3452 = shufflevector <64 x i16> %3442, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3453 = shufflevector <64 x i16> %3448, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3454 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %3452, <8 x i16> %3453)
  %3455 = shufflevector <64 x i16> %3442, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %3456 = shufflevector <64 x i16> %3448, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %3457 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %3455, <8 x i16> %3456)
  %3458 = shufflevector <64 x i16> %3442, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3459 = shufflevector <64 x i16> %3448, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3460 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %3458, <8 x i16> %3459)
  %3461 = shufflevector <64 x i16> %3442, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %3462 = shufflevector <64 x i16> %3448, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %3463 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %3461, <8 x i16> %3462)
  %3464 = shufflevector <64 x i16> %3442, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %3465 = shufflevector <64 x i16> %3448, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %3466 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %3464, <8 x i16> %3465)
  %3467 = shufflevector <64 x i16> %3442, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %3468 = shufflevector <64 x i16> %3448, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %3469 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %3467, <8 x i16> %3468)
  %3470 = shufflevector <64 x i16> %3442, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3471 = shufflevector <64 x i16> %3448, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3472 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %3470, <8 x i16> %3471)
  %3473 = zext <64 x i8> %t415.s to <64 x i16>
  %3474 = shl nuw nsw <64 x i16> %3473, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3475 = bitcast i8* %2524 to <16 x i8>*
  %3476 = load <16 x i8>, <16 x i8>* %3475, align 16, !tbaa !389
  %3477 = getelementptr inbounds i8, i8* %2524, i64 16
  %3478 = bitcast i8* %3477 to <16 x i8>*
  %3479 = load <16 x i8>, <16 x i8>* %3478, align 16, !tbaa !389
  %3480 = getelementptr inbounds i8, i8* %2524, i64 32
  %3481 = bitcast i8* %3480 to <16 x i8>*
  %3482 = load <16 x i8>, <16 x i8>* %3481, align 16, !tbaa !389
  %3483 = getelementptr inbounds i8, i8* %2524, i64 48
  %3484 = bitcast i8* %3483 to <16 x i8>*
  %3485 = load <16 x i8>, <16 x i8>* %3484, align 16, !tbaa !389
  %3486 = shufflevector <16 x i8> %3476, <16 x i8> %3479, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3487 = shufflevector <16 x i8> %3482, <16 x i8> %3485, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3488 = shufflevector <32 x i8> %3486, <32 x i8> %3487, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3489 = zext <64 x i8> %3488 to <64 x i16>
  %3490 = zext <64 x i8> %t416.s to <64 x i16>
  %3491 = zext <64 x i8> %t417.s to <64 x i16>
  %3492 = add nuw nsw <64 x i16> %3474, %3437
  %3493 = add nuw nsw <64 x i16> %3492, %3490
  %3494 = add nuw nsw <64 x i16> %3493, %3491
  %3495 = add nuw nsw <64 x i16> %3494, %3489
  %3496 = shl nuw nsw <64 x i16> %3491, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3497 = getelementptr inbounds i8, i8* %2524, i64 6
  %3498 = bitcast i8* %3497 to <16 x i8>*
  %3499 = load <16 x i8>, <16 x i8>* %3498, align 2, !tbaa !389
  %3500 = getelementptr inbounds i8, i8* %2524, i64 22
  %3501 = bitcast i8* %3500 to <16 x i8>*
  %3502 = load <16 x i8>, <16 x i8>* %3501, align 2, !tbaa !389
  %3503 = getelementptr inbounds i8, i8* %2524, i64 38
  %3504 = bitcast i8* %3503 to <16 x i8>*
  %3505 = load <16 x i8>, <16 x i8>* %3504, align 2, !tbaa !389
  %3506 = getelementptr inbounds i8, i8* %2524, i64 54
  %3507 = bitcast i8* %3506 to <16 x i8>*
  %3508 = load <16 x i8>, <16 x i8>* %3507, align 2, !tbaa !389
  %3509 = shufflevector <16 x i8> %3499, <16 x i8> %3502, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3510 = shufflevector <16 x i8> %3505, <16 x i8> %3508, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3511 = shufflevector <32 x i8> %3509, <32 x i8> %3510, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3512 = zext <64 x i8> %3511 to <64 x i16>
  %3513 = add nuw nsw <64 x i16> %3473, %3443
  %3514 = add nuw nsw <64 x i16> %3513, %3490
  %3515 = add nuw nsw <64 x i16> %3514, %3496
  %3516 = add nuw nsw <64 x i16> %3515, %3512
  %3517 = shufflevector <64 x i16> %3495, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3518 = shufflevector <64 x i16> %3516, <64 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3519 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %3517, <8 x i16> %3518)
  %3520 = shufflevector <64 x i16> %3495, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3521 = shufflevector <64 x i16> %3516, <64 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3522 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %3520, <8 x i16> %3521)
  %3523 = shufflevector <64 x i16> %3495, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %3524 = shufflevector <64 x i16> %3516, <64 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %3525 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %3523, <8 x i16> %3524)
  %3526 = shufflevector <64 x i16> %3495, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3527 = shufflevector <64 x i16> %3516, <64 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3528 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %3526, <8 x i16> %3527)
  %3529 = shufflevector <64 x i16> %3495, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %3530 = shufflevector <64 x i16> %3516, <64 x i16> undef, <8 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %3531 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %3529, <8 x i16> %3530)
  %3532 = shufflevector <64 x i16> %3495, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %3533 = shufflevector <64 x i16> %3516, <64 x i16> undef, <8 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %3534 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %3532, <8 x i16> %3533)
  %3535 = shufflevector <64 x i16> %3495, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %3536 = shufflevector <64 x i16> %3516, <64 x i16> undef, <8 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %3537 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %3535, <8 x i16> %3536)
  %3538 = shufflevector <64 x i16> %3495, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3539 = shufflevector <64 x i16> %3516, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3540 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %3538, <8 x i16> %3539)
  %3541 = add <8 x i16> %3519, %3451
  %3542 = add <8 x i16> %3522, %3454
  %3543 = add <8 x i16> %3525, %3457
  %3544 = add <8 x i16> %3528, %3460
  %3545 = add <8 x i16> %3531, %3463
  %3546 = add <8 x i16> %3534, %3466
  %3547 = add <8 x i16> %3537, %3469
  %3548 = add <8 x i16> %3540, %3472
  %3549 = shufflevector <8 x i16> %3548, <8 x i16> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3550 = shufflevector <16 x i16> %3549, <16 x i16> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3551 = shufflevector <32 x i16> %3550, <32 x i16> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3552 = tail call <8 x i8> @llvm.aarch64.neon.uqxtn.v8i8(<8 x i16> %3541)
  %3553 = tail call <8 x i8> @llvm.aarch64.neon.uqxtn.v8i8(<8 x i16> %3542)
  %3554 = tail call <8 x i8> @llvm.aarch64.neon.uqxtn.v8i8(<8 x i16> %3543)
  %3555 = tail call <8 x i8> @llvm.aarch64.neon.uqxtn.v8i8(<8 x i16> %3544)
  %3556 = tail call <8 x i8> @llvm.aarch64.neon.uqxtn.v8i8(<8 x i16> %3545)
  %3557 = tail call <8 x i8> @llvm.aarch64.neon.uqxtn.v8i8(<8 x i16> %3546)
  %3558 = tail call <8 x i8> @llvm.aarch64.neon.uqxtn.v8i8(<8 x i16> %3547)
  %3559 = shufflevector <64 x i16> %3551, <64 x i16> undef, <8 x i32> <i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3560 = tail call <8 x i8> @llvm.aarch64.neon.uqxtn.v8i8(<8 x i16> %3559)
  %3561 = add <8 x i8> %3552, %3428
  %3562 = add <8 x i8> %3553, %3429
  %3563 = shufflevector <8 x i8> %3561, <8 x i8> %3562, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3564 = add <8 x i8> %3554, %3430
  %3565 = add <8 x i8> %3555, %3431
  %3566 = shufflevector <8 x i8> %3564, <8 x i8> %3565, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3567 = add <8 x i8> %3556, %3432
  %3568 = add <8 x i8> %3557, %3433
  %3569 = shufflevector <8 x i8> %3567, <8 x i8> %3568, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3570 = add <8 x i8> %3558, %3434
  %3571 = add <8 x i8> %3560, %3436
  %3572 = shufflevector <8 x i8> %3570, <8 x i8> %3571, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3573 = shufflevector <32 x i8> %3572, <32 x i8> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3574 = add nsw i64 %1883, %1882
  %3575 = getelementptr inbounds i8, i8* %output, i64 %3574
  %3576 = bitcast i8* %3575 to <16 x i8>*
  store <16 x i8> %3563, <16 x i8>* %3576, align 1, !tbaa !391
  %3577 = getelementptr inbounds i8, i8* %3575, i64 16
  %3578 = bitcast i8* %3577 to <16 x i8>*
  store <16 x i8> %3566, <16 x i8>* %3578, align 1, !tbaa !391
  %3579 = getelementptr inbounds i8, i8* %3575, i64 32
  %3580 = bitcast i8* %3579 to <16 x i8>*
  store <16 x i8> %3569, <16 x i8>* %3580, align 1, !tbaa !391
  %3581 = shufflevector <64 x i8> %3573, <64 x i8> undef, <16 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3582 = getelementptr inbounds i8, i8* %3575, i64 48
  %3583 = bitcast i8* %3582 to <16 x i8>*
  store <16 x i8> %3581, <16 x i8>* %3583, align 1, !tbaa !391
  %indvars.iv.next279 = add nuw nsw i64 %indvars.iv278, 1
  %.not227 = icmp eq i64 %indvars.iv.next279, %69
  br i1 %.not227, label %if.then.i, label %"for output.s0.x.x"

"end for output.s0.x.x":                          ; preds = %"consume bounded_input"
  %tobool.not.i.not = icmp eq i8* %bounded_input, null
  br i1 %tobool.not.i.not, label %call_destructor.exit, label %if.then.i

if.then.i:                                        ; preds = %"for output.s0.x.x", %"end for output.s0.x.x"
  tail call void @halide_free(i8* %__user_context, i8* nonnull %bounded_input) #15
  br label %call_destructor.exit

call_destructor.exit:                             ; preds = %"end for output.s0.x.x", %if.then.i
  %indvars.iv.next288 = add nuw nsw i64 %indvars.iv287, 1
  %.not = icmp eq i64 %indvars.iv.next288, 128
  br i1 %.not, label %"end for output.s0.y.y.y", label %"for output.s0.y.y.y"

"for output.s0.y.y.y38":                          ; preds = %"end for output.s0.y.y.y", %call_destructor.exit243
  %indvars.iv327 = phi i64 [ 0, %"end for output.s0.y.y.y" ], [ %indvars.iv.next328, %call_destructor.exit243 ]
  %3584 = trunc i64 %indvars.iv327 to i32
  %3585 = add i32 %output.s0.y.y.y.base33, %3584
  %3586 = shl nsw i32 %3585, 2
  %3587 = add i32 %3586, %output.min.122
  %a48 = add nsw i32 %3587, 14
  %3588 = icmp slt i32 %a48, %b123
  %a47 = select i1 %3588, i32 %a48, i32 %b123
  %3589 = icmp sgt i32 %a47, 1
  %3590 = select i1 %3589, i32 %a47, i32 1
  %3591 = icmp sle i32 %3590, %b123
  %3592 = and i1 %t44932, %3591
  %3593 = shl nsw i64 %indvars.iv327, 2
  br i1 %3592, label %then_bb42, label %after_bb41

"end for output.s0.y.y.y39":                      ; preds = %call_destructor.exit243
  ret i32 0

after_bb41:                                       ; preds = %"end for prefetch_split_input.052.loopexit.us", %"for output.s0.y.y.y38", %then_bb42
  %bounded_input54 = tail call i8* @halide_malloc(i8* %__user_context, i64 %92)
  %3594 = icmp sgt i32 %3587, 2
  %a64 = select i1 %3594, i32 %3587, i32 2
  %b66 = add nsw i32 %3587, 8
  %3595 = icmp slt i32 %a64, %b66
  %a68 = add nsw i32 %3587, 6
  %3596 = icmp slt i32 %a68, %b123
  %a67 = select i1 %3596, i32 %a68, i32 %b123
  %3597 = select i1 %3595, i32 %a64, i32 %b66
  %b69 = add i32 %3597, -2
  %3598 = icmp sgt i32 %a67, %b69
  %3599 = trunc i64 %3593 to i32
  %a72 = sub i32 %93, %3599
  %3600 = icmp sgt i32 %a72, 0
  br i1 %3600, label %"for bounded_input.s0.y.rebased60.preheader", label %"end for bounded_input.s0.y.rebased61", !prof !385

"for bounded_input.s0.y.rebased60.preheader":     ; preds = %after_bb41
  %3601 = icmp slt i32 %a72, 8
  %a71 = select i1 %3601, i32 %a72, i32 8
  %3602 = sext i32 %3587 to i64
  %3603 = zext i32 %a71 to i64
  br label %"for bounded_input.s0.y.rebased60"

then_bb42:                                        ; preds = %"for output.s0.y.y.y38"
  %3604 = add nsw i64 %3593, %122
  %3605 = add nsw i64 %3604, 14
  %3606 = icmp slt i64 %3605, %117
  %3607 = trunc i64 %3605 to i32
  %3608 = select i1 %3606, i32 %3607, i32 %b123
  %3609 = add nsw i64 %3604, 7
  %3610 = icmp slt i64 %3609, %117
  %3611 = trunc i64 %3609 to i32
  %a53 = select i1 %3610, i32 %3611, i32 %b123
  %3612 = icmp sgt i32 %a53, 1
  %3613 = select i1 %3612, i32 %a53, i32 1
  %a51 = sub nsw i32 %3608, %3613
  %a56 = add nsw i32 %3587, 7
  %3614 = icmp slt i32 %a56, %b123
  %a55 = select i1 %3614, i32 %a56, i32 %b123
  br i1 %87, label %"for prefetch_reduce_input.147.us.preheader", label %after_bb41, !prof !385

"for prefetch_reduce_input.147.us.preheader":     ; preds = %then_bb42
  %3615 = icmp sgt i32 %a55, 1
  %3616 = select i1 %3615, i32 %a55, i32 1
  %3617 = add nsw i32 %3616, -1
  %3618 = icmp sgt i32 %a51, 0
  %3619 = select i1 %3618, i32 %a51, i32 0
  %3620 = zext i32 %3619 to i64
  br label %"for prefetch_reduce_input.147.us"

"for prefetch_reduce_input.147.us":               ; preds = %"for prefetch_reduce_input.147.us.preheader", %"end for prefetch_split_input.052.loopexit.us"
  %indvars.iv297 = phi i64 [ 0, %"for prefetch_reduce_input.147.us.preheader" ], [ %indvars.iv.next298, %"end for prefetch_split_input.052.loopexit.us" ]
  %3621 = trunc i64 %indvars.iv297 to i32
  %3622 = add i32 %3617, %3621
  %reass.mul251.us = mul i32 %3622, %input.stride.120
  %t48650.us = add i32 %reass.mul251.us, %t46330
  %3623 = sext i32 %t48650.us to i64
  br label %"for prefetch_split_input.051.us"

"for prefetch_split_input.051.us":                ; preds = %"for prefetch_reduce_input.147.us", %"for prefetch_split_input.051.us"
  %indvars.iv295 = phi i64 [ 0, %"for prefetch_reduce_input.147.us" ], [ %indvars.iv.next296, %"for prefetch_split_input.051.us" ]
  %3624 = shl nuw nsw i64 %indvars.iv295, 5
  %3625 = add nsw i64 %3624, %3623
  %3626 = getelementptr inbounds i8, i8* %123, i64 %3625
  tail call void @llvm.prefetch.p0i8(i8* nonnull %3626, i32 0, i32 0, i32 1) #12
  %indvars.iv.next296 = add nuw nsw i64 %indvars.iv295, 1
  %.not226.us = icmp eq i64 %indvars.iv.next296, %111
  br i1 %.not226.us, label %"end for prefetch_split_input.052.loopexit.us", label %"for prefetch_split_input.051.us"

"end for prefetch_split_input.052.loopexit.us":   ; preds = %"for prefetch_split_input.051.us"
  %indvars.iv.next298 = add nuw nsw i64 %indvars.iv297, 1
  %.not225.us = icmp eq i64 %indvars.iv297, %3620
  br i1 %.not225.us, label %after_bb41, label %"for prefetch_reduce_input.147.us"

"for bounded_input.s0.y.rebased60":               ; preds = %"for bounded_input.s0.y.rebased60.preheader", %"end for bounded_input.s0.x.x66"
  %indvars.iv302 = phi i64 [ 0, %"for bounded_input.s0.y.rebased60.preheader" ], [ %indvars.iv.next303, %"end for bounded_input.s0.x.x66" ]
  %3627 = add nsw i64 %indvars.iv302, %3602
  %3628 = icmp sgt i64 %3627, %113
  %3629 = trunc i64 %3627 to i32
  %a75 = select i1 %3628, i32 %a76, i32 %3629
  br i1 %95, label %"for bounded_input.s0.x.x65.preheader", label %"end for bounded_input.s0.x.x66", !prof !385

"for bounded_input.s0.x.x65.preheader":           ; preds = %"for bounded_input.s0.y.rebased60"
  %3630 = icmp sgt i32 %a75, 2
  %3631 = select i1 %3630, i32 %a75, i32 2
  %3632 = add nsw i32 %3631, -2
  %t48964 = mul nsw i32 %3632, %input.stride.120
  %3633 = trunc i64 %indvars.iv302 to i32
  %t49063 = mul i32 %94, %3633
  %3634 = insertelement <64 x i32> undef, i32 %t48964, i32 0
  %3635 = shufflevector <64 x i32> %3634, <64 x i32> undef, <64 x i32> zeroinitializer
  %3636 = sext i32 %t49063 to i64
  br label %"for bounded_input.s0.x.x65"

"end for bounded_input.s0.y.rebased61":           ; preds = %"end for bounded_input.s0.x.x66", %after_bb41
  %3637 = add nsw i64 %3593, %122
  %3638 = add nsw i64 %3637, 6
  %3639 = icmp slt i64 %3638, %117
  %3640 = trunc i64 %3638 to i32
  %3641 = select i1 %3639, i32 %3640, i32 %b123
  %3642 = trunc i64 %3637 to i32
  %3643 = icmp sgt i64 %3637, 2
  %a83338 = select i1 %3643, i64 %3637, i64 2
  %3644 = add nsw i64 %3637, 8
  %sext339 = shl i64 %a83338, 32
  %3645 = ashr exact i64 %sext339, 32
  %3646 = icmp slt i64 %3645, %3644
  %.v340 = select i1 %3646, i64 %a83338, i64 %3644
  %3647 = trunc i64 %.v340 to i32
  %a81 = sub nsw i32 %3641, %3647
  %3648 = icmp sgt i32 %a81, -2
  br i1 %3648, label %"for bounded_input.s0.y.rebased72.preheader", label %"end for bounded_input.s0.y.rebased73", !prof !385

"for bounded_input.s0.y.rebased72.preheader":     ; preds = %"end for bounded_input.s0.y.rebased61"
  %3649 = sub i32 %3647, %3587
  %a81.op = add i32 %a81, 1
  %3650 = zext i32 %a81.op to i64
  br label %"for bounded_input.s0.y.rebased72"

"for bounded_input.s0.x.x65":                     ; preds = %"for bounded_input.s0.x.x65.preheader", %"for bounded_input.s0.x.x65"
  %indvars.iv300 = phi i64 [ 0, %"for bounded_input.s0.x.x65.preheader" ], [ %indvars.iv.next301, %"for bounded_input.s0.x.x65" ]
  %3651 = trunc i64 %indvars.iv300 to i32
  %3652 = shl nsw i32 %3651, 6
  %3653 = add i32 %96, %3652
  %3654 = insertelement <64 x i32> undef, i32 %3653, i32 0
  %3655 = shufflevector <64 x i32> %3654, <64 x i32> undef, <64 x i32> zeroinitializer
  %3656 = add nsw <64 x i32> %3655, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3657 = shufflevector <64 x i32> %3656, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3658 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3657, <4 x i32> %99)
  %3659 = shufflevector <64 x i32> %3656, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3660 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3659, <4 x i32> %99)
  %3661 = shufflevector <64 x i32> %3656, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %3662 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3661, <4 x i32> %99)
  %3663 = shufflevector <64 x i32> %3656, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %3664 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3663, <4 x i32> %99)
  %3665 = shufflevector <64 x i32> %3656, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %3666 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3665, <4 x i32> %99)
  %3667 = shufflevector <64 x i32> %3656, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %3668 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3667, <4 x i32> %99)
  %3669 = shufflevector <64 x i32> %3656, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %3670 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3669, <4 x i32> %99)
  %3671 = shufflevector <64 x i32> %3656, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %3672 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3671, <4 x i32> %99)
  %3673 = shufflevector <64 x i32> %3656, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %3674 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3673, <4 x i32> %99)
  %3675 = shufflevector <64 x i32> %3656, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %3676 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3675, <4 x i32> %99)
  %3677 = shufflevector <64 x i32> %3656, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %3678 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3677, <4 x i32> %99)
  %3679 = shufflevector <64 x i32> %3656, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %3680 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3679, <4 x i32> %99)
  %3681 = shufflevector <64 x i32> %3656, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %3682 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3681, <4 x i32> %99)
  %3683 = shufflevector <64 x i32> %3656, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %3684 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3683, <4 x i32> %99)
  %3685 = shufflevector <64 x i32> %3656, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %3686 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3685, <4 x i32> %99)
  %3687 = shufflevector <64 x i32> %3656, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %3688 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %3687, <4 x i32> %99)
  %3689 = shufflevector <4 x i32> %3688, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %3690 = shufflevector <8 x i32> %3689, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %3691 = shufflevector <16 x i32> %3690, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %3692 = shufflevector <32 x i32> %3691, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %3693 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3658, <4 x i32> zeroinitializer)
  %3694 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3660, <4 x i32> zeroinitializer)
  %3695 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3662, <4 x i32> zeroinitializer)
  %3696 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3664, <4 x i32> zeroinitializer)
  %3697 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3666, <4 x i32> zeroinitializer)
  %3698 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3668, <4 x i32> zeroinitializer)
  %3699 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3670, <4 x i32> zeroinitializer)
  %3700 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3672, <4 x i32> zeroinitializer)
  %3701 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3674, <4 x i32> zeroinitializer)
  %3702 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3676, <4 x i32> zeroinitializer)
  %3703 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3678, <4 x i32> zeroinitializer)
  %3704 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3680, <4 x i32> zeroinitializer)
  %3705 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3682, <4 x i32> zeroinitializer)
  %3706 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3684, <4 x i32> zeroinitializer)
  %3707 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3686, <4 x i32> zeroinitializer)
  %3708 = shufflevector <64 x i32> %3692, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %3709 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %3708, <4 x i32> zeroinitializer)
  %3710 = shufflevector <4 x i32> %3693, <4 x i32> %3694, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3711 = shufflevector <4 x i32> %3695, <4 x i32> %3696, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3712 = shufflevector <4 x i32> %3697, <4 x i32> %3698, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3713 = shufflevector <4 x i32> %3699, <4 x i32> %3700, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3714 = shufflevector <4 x i32> %3701, <4 x i32> %3702, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3715 = shufflevector <4 x i32> %3703, <4 x i32> %3704, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3716 = shufflevector <4 x i32> %3705, <4 x i32> %3706, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3717 = shufflevector <4 x i32> %3707, <4 x i32> %3709, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3718 = shufflevector <8 x i32> %3710, <8 x i32> %3711, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3719 = shufflevector <8 x i32> %3712, <8 x i32> %3713, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3720 = shufflevector <8 x i32> %3714, <8 x i32> %3715, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3721 = shufflevector <8 x i32> %3716, <8 x i32> %3717, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3722 = shufflevector <16 x i32> %3718, <16 x i32> %3719, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3723 = shufflevector <16 x i32> %3720, <16 x i32> %3721, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3724 = shufflevector <32 x i32> %3722, <32 x i32> %3723, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3725 = add nsw <64 x i32> %3724, %3635
  %3726 = extractelement <64 x i32> %3725, i32 0
  %3727 = sext i32 %3726 to i64
  %3728 = getelementptr inbounds i8, i8* %input17, i64 %3727
  %3729 = load i8, i8* %3728, align 1, !tbaa !386
  %3730 = insertelement <64 x i8> undef, i8 %3729, i32 0
  %3731 = extractelement <64 x i32> %3725, i32 1
  %3732 = sext i32 %3731 to i64
  %3733 = getelementptr inbounds i8, i8* %input17, i64 %3732
  %3734 = load i8, i8* %3733, align 1, !tbaa !386
  %3735 = insertelement <64 x i8> %3730, i8 %3734, i32 1
  %3736 = extractelement <64 x i32> %3725, i32 2
  %3737 = sext i32 %3736 to i64
  %3738 = getelementptr inbounds i8, i8* %input17, i64 %3737
  %3739 = load i8, i8* %3738, align 1, !tbaa !386
  %3740 = insertelement <64 x i8> %3735, i8 %3739, i32 2
  %3741 = extractelement <64 x i32> %3725, i32 3
  %3742 = sext i32 %3741 to i64
  %3743 = getelementptr inbounds i8, i8* %input17, i64 %3742
  %3744 = load i8, i8* %3743, align 1, !tbaa !386
  %3745 = insertelement <64 x i8> %3740, i8 %3744, i32 3
  %3746 = extractelement <64 x i32> %3725, i32 4
  %3747 = sext i32 %3746 to i64
  %3748 = getelementptr inbounds i8, i8* %input17, i64 %3747
  %3749 = load i8, i8* %3748, align 1, !tbaa !386
  %3750 = insertelement <64 x i8> %3745, i8 %3749, i32 4
  %3751 = extractelement <64 x i32> %3725, i32 5
  %3752 = sext i32 %3751 to i64
  %3753 = getelementptr inbounds i8, i8* %input17, i64 %3752
  %3754 = load i8, i8* %3753, align 1, !tbaa !386
  %3755 = insertelement <64 x i8> %3750, i8 %3754, i32 5
  %3756 = extractelement <64 x i32> %3725, i32 6
  %3757 = sext i32 %3756 to i64
  %3758 = getelementptr inbounds i8, i8* %input17, i64 %3757
  %3759 = load i8, i8* %3758, align 1, !tbaa !386
  %3760 = insertelement <64 x i8> %3755, i8 %3759, i32 6
  %3761 = extractelement <64 x i32> %3725, i32 7
  %3762 = sext i32 %3761 to i64
  %3763 = getelementptr inbounds i8, i8* %input17, i64 %3762
  %3764 = load i8, i8* %3763, align 1, !tbaa !386
  %3765 = insertelement <64 x i8> %3760, i8 %3764, i32 7
  %3766 = extractelement <64 x i32> %3725, i32 8
  %3767 = sext i32 %3766 to i64
  %3768 = getelementptr inbounds i8, i8* %input17, i64 %3767
  %3769 = load i8, i8* %3768, align 1, !tbaa !386
  %3770 = insertelement <64 x i8> %3765, i8 %3769, i32 8
  %3771 = extractelement <64 x i32> %3725, i32 9
  %3772 = sext i32 %3771 to i64
  %3773 = getelementptr inbounds i8, i8* %input17, i64 %3772
  %3774 = load i8, i8* %3773, align 1, !tbaa !386
  %3775 = insertelement <64 x i8> %3770, i8 %3774, i32 9
  %3776 = extractelement <64 x i32> %3725, i32 10
  %3777 = sext i32 %3776 to i64
  %3778 = getelementptr inbounds i8, i8* %input17, i64 %3777
  %3779 = load i8, i8* %3778, align 1, !tbaa !386
  %3780 = insertelement <64 x i8> %3775, i8 %3779, i32 10
  %3781 = extractelement <64 x i32> %3725, i32 11
  %3782 = sext i32 %3781 to i64
  %3783 = getelementptr inbounds i8, i8* %input17, i64 %3782
  %3784 = load i8, i8* %3783, align 1, !tbaa !386
  %3785 = insertelement <64 x i8> %3780, i8 %3784, i32 11
  %3786 = extractelement <64 x i32> %3725, i32 12
  %3787 = sext i32 %3786 to i64
  %3788 = getelementptr inbounds i8, i8* %input17, i64 %3787
  %3789 = load i8, i8* %3788, align 1, !tbaa !386
  %3790 = insertelement <64 x i8> %3785, i8 %3789, i32 12
  %3791 = extractelement <64 x i32> %3725, i32 13
  %3792 = sext i32 %3791 to i64
  %3793 = getelementptr inbounds i8, i8* %input17, i64 %3792
  %3794 = load i8, i8* %3793, align 1, !tbaa !386
  %3795 = insertelement <64 x i8> %3790, i8 %3794, i32 13
  %3796 = extractelement <64 x i32> %3725, i32 14
  %3797 = sext i32 %3796 to i64
  %3798 = getelementptr inbounds i8, i8* %input17, i64 %3797
  %3799 = load i8, i8* %3798, align 1, !tbaa !386
  %3800 = insertelement <64 x i8> %3795, i8 %3799, i32 14
  %3801 = extractelement <64 x i32> %3725, i32 15
  %3802 = sext i32 %3801 to i64
  %3803 = getelementptr inbounds i8, i8* %input17, i64 %3802
  %3804 = load i8, i8* %3803, align 1, !tbaa !386
  %3805 = insertelement <64 x i8> %3800, i8 %3804, i32 15
  %3806 = extractelement <64 x i32> %3725, i32 16
  %3807 = sext i32 %3806 to i64
  %3808 = getelementptr inbounds i8, i8* %input17, i64 %3807
  %3809 = load i8, i8* %3808, align 1, !tbaa !386
  %3810 = insertelement <64 x i8> %3805, i8 %3809, i32 16
  %3811 = extractelement <64 x i32> %3725, i32 17
  %3812 = sext i32 %3811 to i64
  %3813 = getelementptr inbounds i8, i8* %input17, i64 %3812
  %3814 = load i8, i8* %3813, align 1, !tbaa !386
  %3815 = insertelement <64 x i8> %3810, i8 %3814, i32 17
  %3816 = extractelement <64 x i32> %3725, i32 18
  %3817 = sext i32 %3816 to i64
  %3818 = getelementptr inbounds i8, i8* %input17, i64 %3817
  %3819 = load i8, i8* %3818, align 1, !tbaa !386
  %3820 = insertelement <64 x i8> %3815, i8 %3819, i32 18
  %3821 = extractelement <64 x i32> %3725, i32 19
  %3822 = sext i32 %3821 to i64
  %3823 = getelementptr inbounds i8, i8* %input17, i64 %3822
  %3824 = load i8, i8* %3823, align 1, !tbaa !386
  %3825 = insertelement <64 x i8> %3820, i8 %3824, i32 19
  %3826 = extractelement <64 x i32> %3725, i32 20
  %3827 = sext i32 %3826 to i64
  %3828 = getelementptr inbounds i8, i8* %input17, i64 %3827
  %3829 = load i8, i8* %3828, align 1, !tbaa !386
  %3830 = insertelement <64 x i8> %3825, i8 %3829, i32 20
  %3831 = extractelement <64 x i32> %3725, i32 21
  %3832 = sext i32 %3831 to i64
  %3833 = getelementptr inbounds i8, i8* %input17, i64 %3832
  %3834 = load i8, i8* %3833, align 1, !tbaa !386
  %3835 = insertelement <64 x i8> %3830, i8 %3834, i32 21
  %3836 = extractelement <64 x i32> %3725, i32 22
  %3837 = sext i32 %3836 to i64
  %3838 = getelementptr inbounds i8, i8* %input17, i64 %3837
  %3839 = load i8, i8* %3838, align 1, !tbaa !386
  %3840 = insertelement <64 x i8> %3835, i8 %3839, i32 22
  %3841 = extractelement <64 x i32> %3725, i32 23
  %3842 = sext i32 %3841 to i64
  %3843 = getelementptr inbounds i8, i8* %input17, i64 %3842
  %3844 = load i8, i8* %3843, align 1, !tbaa !386
  %3845 = insertelement <64 x i8> %3840, i8 %3844, i32 23
  %3846 = extractelement <64 x i32> %3725, i32 24
  %3847 = sext i32 %3846 to i64
  %3848 = getelementptr inbounds i8, i8* %input17, i64 %3847
  %3849 = load i8, i8* %3848, align 1, !tbaa !386
  %3850 = insertelement <64 x i8> %3845, i8 %3849, i32 24
  %3851 = extractelement <64 x i32> %3725, i32 25
  %3852 = sext i32 %3851 to i64
  %3853 = getelementptr inbounds i8, i8* %input17, i64 %3852
  %3854 = load i8, i8* %3853, align 1, !tbaa !386
  %3855 = insertelement <64 x i8> %3850, i8 %3854, i32 25
  %3856 = extractelement <64 x i32> %3725, i32 26
  %3857 = sext i32 %3856 to i64
  %3858 = getelementptr inbounds i8, i8* %input17, i64 %3857
  %3859 = load i8, i8* %3858, align 1, !tbaa !386
  %3860 = insertelement <64 x i8> %3855, i8 %3859, i32 26
  %3861 = extractelement <64 x i32> %3725, i32 27
  %3862 = sext i32 %3861 to i64
  %3863 = getelementptr inbounds i8, i8* %input17, i64 %3862
  %3864 = load i8, i8* %3863, align 1, !tbaa !386
  %3865 = insertelement <64 x i8> %3860, i8 %3864, i32 27
  %3866 = extractelement <64 x i32> %3725, i32 28
  %3867 = sext i32 %3866 to i64
  %3868 = getelementptr inbounds i8, i8* %input17, i64 %3867
  %3869 = load i8, i8* %3868, align 1, !tbaa !386
  %3870 = insertelement <64 x i8> %3865, i8 %3869, i32 28
  %3871 = extractelement <64 x i32> %3725, i32 29
  %3872 = sext i32 %3871 to i64
  %3873 = getelementptr inbounds i8, i8* %input17, i64 %3872
  %3874 = load i8, i8* %3873, align 1, !tbaa !386
  %3875 = insertelement <64 x i8> %3870, i8 %3874, i32 29
  %3876 = extractelement <64 x i32> %3725, i32 30
  %3877 = sext i32 %3876 to i64
  %3878 = getelementptr inbounds i8, i8* %input17, i64 %3877
  %3879 = load i8, i8* %3878, align 1, !tbaa !386
  %3880 = insertelement <64 x i8> %3875, i8 %3879, i32 30
  %3881 = extractelement <64 x i32> %3725, i32 31
  %3882 = sext i32 %3881 to i64
  %3883 = getelementptr inbounds i8, i8* %input17, i64 %3882
  %3884 = load i8, i8* %3883, align 1, !tbaa !386
  %3885 = insertelement <64 x i8> %3880, i8 %3884, i32 31
  %3886 = extractelement <64 x i32> %3725, i32 32
  %3887 = sext i32 %3886 to i64
  %3888 = getelementptr inbounds i8, i8* %input17, i64 %3887
  %3889 = load i8, i8* %3888, align 1, !tbaa !386
  %3890 = insertelement <64 x i8> %3885, i8 %3889, i32 32
  %3891 = extractelement <64 x i32> %3725, i32 33
  %3892 = sext i32 %3891 to i64
  %3893 = getelementptr inbounds i8, i8* %input17, i64 %3892
  %3894 = load i8, i8* %3893, align 1, !tbaa !386
  %3895 = insertelement <64 x i8> %3890, i8 %3894, i32 33
  %3896 = extractelement <64 x i32> %3725, i32 34
  %3897 = sext i32 %3896 to i64
  %3898 = getelementptr inbounds i8, i8* %input17, i64 %3897
  %3899 = load i8, i8* %3898, align 1, !tbaa !386
  %3900 = insertelement <64 x i8> %3895, i8 %3899, i32 34
  %3901 = extractelement <64 x i32> %3725, i32 35
  %3902 = sext i32 %3901 to i64
  %3903 = getelementptr inbounds i8, i8* %input17, i64 %3902
  %3904 = load i8, i8* %3903, align 1, !tbaa !386
  %3905 = insertelement <64 x i8> %3900, i8 %3904, i32 35
  %3906 = extractelement <64 x i32> %3725, i32 36
  %3907 = sext i32 %3906 to i64
  %3908 = getelementptr inbounds i8, i8* %input17, i64 %3907
  %3909 = load i8, i8* %3908, align 1, !tbaa !386
  %3910 = insertelement <64 x i8> %3905, i8 %3909, i32 36
  %3911 = extractelement <64 x i32> %3725, i32 37
  %3912 = sext i32 %3911 to i64
  %3913 = getelementptr inbounds i8, i8* %input17, i64 %3912
  %3914 = load i8, i8* %3913, align 1, !tbaa !386
  %3915 = insertelement <64 x i8> %3910, i8 %3914, i32 37
  %3916 = extractelement <64 x i32> %3725, i32 38
  %3917 = sext i32 %3916 to i64
  %3918 = getelementptr inbounds i8, i8* %input17, i64 %3917
  %3919 = load i8, i8* %3918, align 1, !tbaa !386
  %3920 = insertelement <64 x i8> %3915, i8 %3919, i32 38
  %3921 = extractelement <64 x i32> %3725, i32 39
  %3922 = sext i32 %3921 to i64
  %3923 = getelementptr inbounds i8, i8* %input17, i64 %3922
  %3924 = load i8, i8* %3923, align 1, !tbaa !386
  %3925 = insertelement <64 x i8> %3920, i8 %3924, i32 39
  %3926 = extractelement <64 x i32> %3725, i32 40
  %3927 = sext i32 %3926 to i64
  %3928 = getelementptr inbounds i8, i8* %input17, i64 %3927
  %3929 = load i8, i8* %3928, align 1, !tbaa !386
  %3930 = insertelement <64 x i8> %3925, i8 %3929, i32 40
  %3931 = extractelement <64 x i32> %3725, i32 41
  %3932 = sext i32 %3931 to i64
  %3933 = getelementptr inbounds i8, i8* %input17, i64 %3932
  %3934 = load i8, i8* %3933, align 1, !tbaa !386
  %3935 = insertelement <64 x i8> %3930, i8 %3934, i32 41
  %3936 = extractelement <64 x i32> %3725, i32 42
  %3937 = sext i32 %3936 to i64
  %3938 = getelementptr inbounds i8, i8* %input17, i64 %3937
  %3939 = load i8, i8* %3938, align 1, !tbaa !386
  %3940 = insertelement <64 x i8> %3935, i8 %3939, i32 42
  %3941 = extractelement <64 x i32> %3725, i32 43
  %3942 = sext i32 %3941 to i64
  %3943 = getelementptr inbounds i8, i8* %input17, i64 %3942
  %3944 = load i8, i8* %3943, align 1, !tbaa !386
  %3945 = insertelement <64 x i8> %3940, i8 %3944, i32 43
  %3946 = extractelement <64 x i32> %3725, i32 44
  %3947 = sext i32 %3946 to i64
  %3948 = getelementptr inbounds i8, i8* %input17, i64 %3947
  %3949 = load i8, i8* %3948, align 1, !tbaa !386
  %3950 = insertelement <64 x i8> %3945, i8 %3949, i32 44
  %3951 = extractelement <64 x i32> %3725, i32 45
  %3952 = sext i32 %3951 to i64
  %3953 = getelementptr inbounds i8, i8* %input17, i64 %3952
  %3954 = load i8, i8* %3953, align 1, !tbaa !386
  %3955 = insertelement <64 x i8> %3950, i8 %3954, i32 45
  %3956 = extractelement <64 x i32> %3725, i32 46
  %3957 = sext i32 %3956 to i64
  %3958 = getelementptr inbounds i8, i8* %input17, i64 %3957
  %3959 = load i8, i8* %3958, align 1, !tbaa !386
  %3960 = insertelement <64 x i8> %3955, i8 %3959, i32 46
  %3961 = extractelement <64 x i32> %3725, i32 47
  %3962 = sext i32 %3961 to i64
  %3963 = getelementptr inbounds i8, i8* %input17, i64 %3962
  %3964 = load i8, i8* %3963, align 1, !tbaa !386
  %3965 = insertelement <64 x i8> %3960, i8 %3964, i32 47
  %3966 = extractelement <64 x i32> %3725, i32 48
  %3967 = sext i32 %3966 to i64
  %3968 = getelementptr inbounds i8, i8* %input17, i64 %3967
  %3969 = load i8, i8* %3968, align 1, !tbaa !386
  %3970 = insertelement <64 x i8> %3965, i8 %3969, i32 48
  %3971 = extractelement <64 x i32> %3725, i32 49
  %3972 = sext i32 %3971 to i64
  %3973 = getelementptr inbounds i8, i8* %input17, i64 %3972
  %3974 = load i8, i8* %3973, align 1, !tbaa !386
  %3975 = insertelement <64 x i8> %3970, i8 %3974, i32 49
  %3976 = extractelement <64 x i32> %3725, i32 50
  %3977 = sext i32 %3976 to i64
  %3978 = getelementptr inbounds i8, i8* %input17, i64 %3977
  %3979 = load i8, i8* %3978, align 1, !tbaa !386
  %3980 = insertelement <64 x i8> %3975, i8 %3979, i32 50
  %3981 = extractelement <64 x i32> %3725, i32 51
  %3982 = sext i32 %3981 to i64
  %3983 = getelementptr inbounds i8, i8* %input17, i64 %3982
  %3984 = load i8, i8* %3983, align 1, !tbaa !386
  %3985 = insertelement <64 x i8> %3980, i8 %3984, i32 51
  %3986 = extractelement <64 x i32> %3725, i32 52
  %3987 = sext i32 %3986 to i64
  %3988 = getelementptr inbounds i8, i8* %input17, i64 %3987
  %3989 = load i8, i8* %3988, align 1, !tbaa !386
  %3990 = insertelement <64 x i8> %3985, i8 %3989, i32 52
  %3991 = extractelement <64 x i32> %3725, i32 53
  %3992 = sext i32 %3991 to i64
  %3993 = getelementptr inbounds i8, i8* %input17, i64 %3992
  %3994 = load i8, i8* %3993, align 1, !tbaa !386
  %3995 = insertelement <64 x i8> %3990, i8 %3994, i32 53
  %3996 = extractelement <64 x i32> %3725, i32 54
  %3997 = sext i32 %3996 to i64
  %3998 = getelementptr inbounds i8, i8* %input17, i64 %3997
  %3999 = load i8, i8* %3998, align 1, !tbaa !386
  %4000 = insertelement <64 x i8> %3995, i8 %3999, i32 54
  %4001 = extractelement <64 x i32> %3725, i32 55
  %4002 = sext i32 %4001 to i64
  %4003 = getelementptr inbounds i8, i8* %input17, i64 %4002
  %4004 = load i8, i8* %4003, align 1, !tbaa !386
  %4005 = insertelement <64 x i8> %4000, i8 %4004, i32 55
  %4006 = extractelement <64 x i32> %3725, i32 56
  %4007 = sext i32 %4006 to i64
  %4008 = getelementptr inbounds i8, i8* %input17, i64 %4007
  %4009 = load i8, i8* %4008, align 1, !tbaa !386
  %4010 = insertelement <64 x i8> %4005, i8 %4009, i32 56
  %4011 = extractelement <64 x i32> %3725, i32 57
  %4012 = sext i32 %4011 to i64
  %4013 = getelementptr inbounds i8, i8* %input17, i64 %4012
  %4014 = load i8, i8* %4013, align 1, !tbaa !386
  %4015 = insertelement <64 x i8> %4010, i8 %4014, i32 57
  %4016 = extractelement <64 x i32> %3725, i32 58
  %4017 = sext i32 %4016 to i64
  %4018 = getelementptr inbounds i8, i8* %input17, i64 %4017
  %4019 = load i8, i8* %4018, align 1, !tbaa !386
  %4020 = insertelement <64 x i8> %4015, i8 %4019, i32 58
  %4021 = extractelement <64 x i32> %3725, i32 59
  %4022 = sext i32 %4021 to i64
  %4023 = getelementptr inbounds i8, i8* %input17, i64 %4022
  %4024 = load i8, i8* %4023, align 1, !tbaa !386
  %4025 = insertelement <64 x i8> %4020, i8 %4024, i32 59
  %4026 = extractelement <64 x i32> %3725, i32 60
  %4027 = sext i32 %4026 to i64
  %4028 = getelementptr inbounds i8, i8* %input17, i64 %4027
  %4029 = load i8, i8* %4028, align 1, !tbaa !386
  %4030 = insertelement <64 x i8> %4025, i8 %4029, i32 60
  %4031 = extractelement <64 x i32> %3725, i32 61
  %4032 = sext i32 %4031 to i64
  %4033 = getelementptr inbounds i8, i8* %input17, i64 %4032
  %4034 = load i8, i8* %4033, align 1, !tbaa !386
  %4035 = insertelement <64 x i8> %4030, i8 %4034, i32 61
  %4036 = extractelement <64 x i32> %3725, i32 62
  %4037 = sext i32 %4036 to i64
  %4038 = getelementptr inbounds i8, i8* %input17, i64 %4037
  %4039 = load i8, i8* %4038, align 1, !tbaa !386
  %4040 = insertelement <64 x i8> %4035, i8 %4039, i32 62
  %4041 = extractelement <64 x i32> %3725, i32 63
  %4042 = sext i32 %4041 to i64
  %4043 = getelementptr inbounds i8, i8* %input17, i64 %4042
  %4044 = load i8, i8* %4043, align 1, !tbaa !386
  %4045 = insertelement <64 x i8> %4040, i8 %4044, i32 63
  %4046 = shufflevector <64 x i8> %4045, <64 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4047 = add nsw i64 %indvars.iv300, %3636
  %4048 = shl nsw i64 %4047, 6
  %4049 = getelementptr inbounds i8, i8* %bounded_input54, i64 %4048
  %4050 = bitcast i8* %4049 to <16 x i8>*
  store <16 x i8> %4046, <16 x i8>* %4050, align 16, !tbaa !389
  %4051 = shufflevector <64 x i8> %4045, <64 x i8> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4052 = getelementptr inbounds i8, i8* %4049, i64 16
  %4053 = bitcast i8* %4052 to <16 x i8>*
  store <16 x i8> %4051, <16 x i8>* %4053, align 16, !tbaa !389
  %4054 = shufflevector <64 x i8> %4045, <64 x i8> undef, <16 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %4055 = getelementptr inbounds i8, i8* %4049, i64 32
  %4056 = bitcast i8* %4055 to <16 x i8>*
  store <16 x i8> %4054, <16 x i8>* %4056, align 16, !tbaa !389
  %4057 = shufflevector <64 x i8> %4045, <64 x i8> undef, <16 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %4058 = getelementptr inbounds i8, i8* %4049, i64 48
  %4059 = bitcast i8* %4058 to <16 x i8>*
  store <16 x i8> %4057, <16 x i8>* %4059, align 16, !tbaa !389
  %indvars.iv.next301 = add nuw nsw i64 %indvars.iv300, 1
  %.not224 = icmp eq i64 %indvars.iv.next301, %112
  br i1 %.not224, label %"end for bounded_input.s0.x.x66", label %"for bounded_input.s0.x.x65"

"end for bounded_input.s0.x.x66":                 ; preds = %"for bounded_input.s0.x.x65", %"for bounded_input.s0.y.rebased60"
  %indvars.iv.next303 = add nuw nsw i64 %indvars.iv302, 1
  %.not223 = icmp eq i64 %indvars.iv.next303, %3603
  br i1 %.not223, label %"end for bounded_input.s0.y.rebased61", label %"for bounded_input.s0.y.rebased60"

"for bounded_input.s0.y.rebased72":               ; preds = %"for bounded_input.s0.y.rebased72.preheader", %"end for bounded_input.s0.x.x.rebased89"
  %indvars.iv311 = phi i64 [ 0, %"for bounded_input.s0.y.rebased72.preheader" ], [ %indvars.iv.next312, %"end for bounded_input.s0.x.x.rebased89" ]
  %4060 = trunc i64 %indvars.iv311 to i32
  %4061 = add i32 %3649, %4060
  %t49975 = mul i32 %94, %4061
  %4062 = add i32 %b69, %4060
  %t49876 = mul nsw i32 %4062, %input.stride.120
  br i1 %100, label %"for bounded_input.s0.x.x77.preheader", label %"end for bounded_input.s0.x.x78", !prof !385

"for bounded_input.s0.x.x77.preheader":           ; preds = %"for bounded_input.s0.y.rebased72"
  %4063 = insertelement <64 x i32> undef, i32 %t49876, i32 0
  %4064 = shufflevector <64 x i32> %4063, <64 x i32> undef, <64 x i32> zeroinitializer
  %4065 = sext i32 %t49975 to i64
  br label %"for bounded_input.s0.x.x77"

"end for bounded_input.s0.y.rebased73":           ; preds = %"end for bounded_input.s0.x.x.rebased89", %"end for bounded_input.s0.y.rebased61"
  %b110 = add nsw i32 %3647, -2
  %4066 = icmp sgt i32 %3641, %b110
  %4067 = select i1 %4066, i32 %3641, i32 %b110
  %4068 = sub nsw i32 %3642, %4067
  %4069 = icmp sgt i32 %4068, -6
  br i1 %4069, label %"for bounded_input.s0.y.rebased94.preheader", label %"consume bounded_input102", !prof !385

"for bounded_input.s0.y.rebased94.preheader":     ; preds = %"end for bounded_input.s0.y.rebased73"
  %4070 = select i1 %3598, i32 %a67, i32 %b69
  %4071 = sub i32 %84, %3586
  %4072 = add i32 %4071, %4067
  %4073 = add nsw i32 %4068, 5
  %4074 = sext i32 %4070 to i64
  %4075 = zext i32 %4073 to i64
  br label %"for bounded_input.s0.y.rebased94"

"for bounded_input.s0.x.x77":                     ; preds = %"for bounded_input.s0.x.x77.preheader", %"for bounded_input.s0.x.x77"
  %indvars.iv305 = phi i64 [ 0, %"for bounded_input.s0.x.x77.preheader" ], [ %indvars.iv.next306, %"for bounded_input.s0.x.x77" ]
  %4076 = trunc i64 %indvars.iv305 to i32
  %4077 = shl nsw i32 %4076, 6
  %4078 = add i32 %96, %4077
  %4079 = insertelement <64 x i32> undef, i32 %4078, i32 0
  %4080 = shufflevector <64 x i32> %4079, <64 x i32> undef, <64 x i32> zeroinitializer
  %4081 = add nsw <64 x i32> %4080, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %4082 = shufflevector <64 x i32> %4081, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4083 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4082, <4 x i32> %99)
  %4084 = shufflevector <64 x i32> %4081, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4085 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4084, <4 x i32> %99)
  %4086 = shufflevector <64 x i32> %4081, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %4087 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4086, <4 x i32> %99)
  %4088 = shufflevector <64 x i32> %4081, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %4089 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4088, <4 x i32> %99)
  %4090 = shufflevector <64 x i32> %4081, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %4091 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4090, <4 x i32> %99)
  %4092 = shufflevector <64 x i32> %4081, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %4093 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4092, <4 x i32> %99)
  %4094 = shufflevector <64 x i32> %4081, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %4095 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4094, <4 x i32> %99)
  %4096 = shufflevector <64 x i32> %4081, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %4097 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4096, <4 x i32> %99)
  %4098 = shufflevector <64 x i32> %4081, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %4099 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4098, <4 x i32> %99)
  %4100 = shufflevector <64 x i32> %4081, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %4101 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4100, <4 x i32> %99)
  %4102 = shufflevector <64 x i32> %4081, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %4103 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4102, <4 x i32> %99)
  %4104 = shufflevector <64 x i32> %4081, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %4105 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4104, <4 x i32> %99)
  %4106 = shufflevector <64 x i32> %4081, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %4107 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4106, <4 x i32> %99)
  %4108 = shufflevector <64 x i32> %4081, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %4109 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4108, <4 x i32> %99)
  %4110 = shufflevector <64 x i32> %4081, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %4111 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4110, <4 x i32> %99)
  %4112 = shufflevector <64 x i32> %4081, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %4113 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4112, <4 x i32> %99)
  %4114 = shufflevector <4 x i32> %4113, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %4115 = shufflevector <8 x i32> %4114, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %4116 = shufflevector <16 x i32> %4115, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %4117 = shufflevector <32 x i32> %4116, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %4118 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4083, <4 x i32> zeroinitializer)
  %4119 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4085, <4 x i32> zeroinitializer)
  %4120 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4087, <4 x i32> zeroinitializer)
  %4121 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4089, <4 x i32> zeroinitializer)
  %4122 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4091, <4 x i32> zeroinitializer)
  %4123 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4093, <4 x i32> zeroinitializer)
  %4124 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4095, <4 x i32> zeroinitializer)
  %4125 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4097, <4 x i32> zeroinitializer)
  %4126 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4099, <4 x i32> zeroinitializer)
  %4127 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4101, <4 x i32> zeroinitializer)
  %4128 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4103, <4 x i32> zeroinitializer)
  %4129 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4105, <4 x i32> zeroinitializer)
  %4130 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4107, <4 x i32> zeroinitializer)
  %4131 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4109, <4 x i32> zeroinitializer)
  %4132 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4111, <4 x i32> zeroinitializer)
  %4133 = shufflevector <64 x i32> %4117, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %4134 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4133, <4 x i32> zeroinitializer)
  %4135 = shufflevector <4 x i32> %4118, <4 x i32> %4119, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4136 = shufflevector <4 x i32> %4120, <4 x i32> %4121, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4137 = shufflevector <4 x i32> %4122, <4 x i32> %4123, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4138 = shufflevector <4 x i32> %4124, <4 x i32> %4125, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4139 = shufflevector <4 x i32> %4126, <4 x i32> %4127, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4140 = shufflevector <4 x i32> %4128, <4 x i32> %4129, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4141 = shufflevector <4 x i32> %4130, <4 x i32> %4131, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4142 = shufflevector <4 x i32> %4132, <4 x i32> %4134, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4143 = shufflevector <8 x i32> %4135, <8 x i32> %4136, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4144 = shufflevector <8 x i32> %4137, <8 x i32> %4138, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4145 = shufflevector <8 x i32> %4139, <8 x i32> %4140, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4146 = shufflevector <8 x i32> %4141, <8 x i32> %4142, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4147 = shufflevector <16 x i32> %4143, <16 x i32> %4144, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4148 = shufflevector <16 x i32> %4145, <16 x i32> %4146, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4149 = shufflevector <32 x i32> %4147, <32 x i32> %4148, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %4150 = add nsw <64 x i32> %4149, %4064
  %4151 = extractelement <64 x i32> %4150, i32 0
  %4152 = sext i32 %4151 to i64
  %4153 = getelementptr inbounds i8, i8* %input17, i64 %4152
  %4154 = load i8, i8* %4153, align 1, !tbaa !386
  %4155 = insertelement <64 x i8> undef, i8 %4154, i32 0
  %4156 = extractelement <64 x i32> %4150, i32 1
  %4157 = sext i32 %4156 to i64
  %4158 = getelementptr inbounds i8, i8* %input17, i64 %4157
  %4159 = load i8, i8* %4158, align 1, !tbaa !386
  %4160 = insertelement <64 x i8> %4155, i8 %4159, i32 1
  %4161 = extractelement <64 x i32> %4150, i32 2
  %4162 = sext i32 %4161 to i64
  %4163 = getelementptr inbounds i8, i8* %input17, i64 %4162
  %4164 = load i8, i8* %4163, align 1, !tbaa !386
  %4165 = insertelement <64 x i8> %4160, i8 %4164, i32 2
  %4166 = extractelement <64 x i32> %4150, i32 3
  %4167 = sext i32 %4166 to i64
  %4168 = getelementptr inbounds i8, i8* %input17, i64 %4167
  %4169 = load i8, i8* %4168, align 1, !tbaa !386
  %4170 = insertelement <64 x i8> %4165, i8 %4169, i32 3
  %4171 = extractelement <64 x i32> %4150, i32 4
  %4172 = sext i32 %4171 to i64
  %4173 = getelementptr inbounds i8, i8* %input17, i64 %4172
  %4174 = load i8, i8* %4173, align 1, !tbaa !386
  %4175 = insertelement <64 x i8> %4170, i8 %4174, i32 4
  %4176 = extractelement <64 x i32> %4150, i32 5
  %4177 = sext i32 %4176 to i64
  %4178 = getelementptr inbounds i8, i8* %input17, i64 %4177
  %4179 = load i8, i8* %4178, align 1, !tbaa !386
  %4180 = insertelement <64 x i8> %4175, i8 %4179, i32 5
  %4181 = extractelement <64 x i32> %4150, i32 6
  %4182 = sext i32 %4181 to i64
  %4183 = getelementptr inbounds i8, i8* %input17, i64 %4182
  %4184 = load i8, i8* %4183, align 1, !tbaa !386
  %4185 = insertelement <64 x i8> %4180, i8 %4184, i32 6
  %4186 = extractelement <64 x i32> %4150, i32 7
  %4187 = sext i32 %4186 to i64
  %4188 = getelementptr inbounds i8, i8* %input17, i64 %4187
  %4189 = load i8, i8* %4188, align 1, !tbaa !386
  %4190 = insertelement <64 x i8> %4185, i8 %4189, i32 7
  %4191 = extractelement <64 x i32> %4150, i32 8
  %4192 = sext i32 %4191 to i64
  %4193 = getelementptr inbounds i8, i8* %input17, i64 %4192
  %4194 = load i8, i8* %4193, align 1, !tbaa !386
  %4195 = insertelement <64 x i8> %4190, i8 %4194, i32 8
  %4196 = extractelement <64 x i32> %4150, i32 9
  %4197 = sext i32 %4196 to i64
  %4198 = getelementptr inbounds i8, i8* %input17, i64 %4197
  %4199 = load i8, i8* %4198, align 1, !tbaa !386
  %4200 = insertelement <64 x i8> %4195, i8 %4199, i32 9
  %4201 = extractelement <64 x i32> %4150, i32 10
  %4202 = sext i32 %4201 to i64
  %4203 = getelementptr inbounds i8, i8* %input17, i64 %4202
  %4204 = load i8, i8* %4203, align 1, !tbaa !386
  %4205 = insertelement <64 x i8> %4200, i8 %4204, i32 10
  %4206 = extractelement <64 x i32> %4150, i32 11
  %4207 = sext i32 %4206 to i64
  %4208 = getelementptr inbounds i8, i8* %input17, i64 %4207
  %4209 = load i8, i8* %4208, align 1, !tbaa !386
  %4210 = insertelement <64 x i8> %4205, i8 %4209, i32 11
  %4211 = extractelement <64 x i32> %4150, i32 12
  %4212 = sext i32 %4211 to i64
  %4213 = getelementptr inbounds i8, i8* %input17, i64 %4212
  %4214 = load i8, i8* %4213, align 1, !tbaa !386
  %4215 = insertelement <64 x i8> %4210, i8 %4214, i32 12
  %4216 = extractelement <64 x i32> %4150, i32 13
  %4217 = sext i32 %4216 to i64
  %4218 = getelementptr inbounds i8, i8* %input17, i64 %4217
  %4219 = load i8, i8* %4218, align 1, !tbaa !386
  %4220 = insertelement <64 x i8> %4215, i8 %4219, i32 13
  %4221 = extractelement <64 x i32> %4150, i32 14
  %4222 = sext i32 %4221 to i64
  %4223 = getelementptr inbounds i8, i8* %input17, i64 %4222
  %4224 = load i8, i8* %4223, align 1, !tbaa !386
  %4225 = insertelement <64 x i8> %4220, i8 %4224, i32 14
  %4226 = extractelement <64 x i32> %4150, i32 15
  %4227 = sext i32 %4226 to i64
  %4228 = getelementptr inbounds i8, i8* %input17, i64 %4227
  %4229 = load i8, i8* %4228, align 1, !tbaa !386
  %4230 = insertelement <64 x i8> %4225, i8 %4229, i32 15
  %4231 = extractelement <64 x i32> %4150, i32 16
  %4232 = sext i32 %4231 to i64
  %4233 = getelementptr inbounds i8, i8* %input17, i64 %4232
  %4234 = load i8, i8* %4233, align 1, !tbaa !386
  %4235 = insertelement <64 x i8> %4230, i8 %4234, i32 16
  %4236 = extractelement <64 x i32> %4150, i32 17
  %4237 = sext i32 %4236 to i64
  %4238 = getelementptr inbounds i8, i8* %input17, i64 %4237
  %4239 = load i8, i8* %4238, align 1, !tbaa !386
  %4240 = insertelement <64 x i8> %4235, i8 %4239, i32 17
  %4241 = extractelement <64 x i32> %4150, i32 18
  %4242 = sext i32 %4241 to i64
  %4243 = getelementptr inbounds i8, i8* %input17, i64 %4242
  %4244 = load i8, i8* %4243, align 1, !tbaa !386
  %4245 = insertelement <64 x i8> %4240, i8 %4244, i32 18
  %4246 = extractelement <64 x i32> %4150, i32 19
  %4247 = sext i32 %4246 to i64
  %4248 = getelementptr inbounds i8, i8* %input17, i64 %4247
  %4249 = load i8, i8* %4248, align 1, !tbaa !386
  %4250 = insertelement <64 x i8> %4245, i8 %4249, i32 19
  %4251 = extractelement <64 x i32> %4150, i32 20
  %4252 = sext i32 %4251 to i64
  %4253 = getelementptr inbounds i8, i8* %input17, i64 %4252
  %4254 = load i8, i8* %4253, align 1, !tbaa !386
  %4255 = insertelement <64 x i8> %4250, i8 %4254, i32 20
  %4256 = extractelement <64 x i32> %4150, i32 21
  %4257 = sext i32 %4256 to i64
  %4258 = getelementptr inbounds i8, i8* %input17, i64 %4257
  %4259 = load i8, i8* %4258, align 1, !tbaa !386
  %4260 = insertelement <64 x i8> %4255, i8 %4259, i32 21
  %4261 = extractelement <64 x i32> %4150, i32 22
  %4262 = sext i32 %4261 to i64
  %4263 = getelementptr inbounds i8, i8* %input17, i64 %4262
  %4264 = load i8, i8* %4263, align 1, !tbaa !386
  %4265 = insertelement <64 x i8> %4260, i8 %4264, i32 22
  %4266 = extractelement <64 x i32> %4150, i32 23
  %4267 = sext i32 %4266 to i64
  %4268 = getelementptr inbounds i8, i8* %input17, i64 %4267
  %4269 = load i8, i8* %4268, align 1, !tbaa !386
  %4270 = insertelement <64 x i8> %4265, i8 %4269, i32 23
  %4271 = extractelement <64 x i32> %4150, i32 24
  %4272 = sext i32 %4271 to i64
  %4273 = getelementptr inbounds i8, i8* %input17, i64 %4272
  %4274 = load i8, i8* %4273, align 1, !tbaa !386
  %4275 = insertelement <64 x i8> %4270, i8 %4274, i32 24
  %4276 = extractelement <64 x i32> %4150, i32 25
  %4277 = sext i32 %4276 to i64
  %4278 = getelementptr inbounds i8, i8* %input17, i64 %4277
  %4279 = load i8, i8* %4278, align 1, !tbaa !386
  %4280 = insertelement <64 x i8> %4275, i8 %4279, i32 25
  %4281 = extractelement <64 x i32> %4150, i32 26
  %4282 = sext i32 %4281 to i64
  %4283 = getelementptr inbounds i8, i8* %input17, i64 %4282
  %4284 = load i8, i8* %4283, align 1, !tbaa !386
  %4285 = insertelement <64 x i8> %4280, i8 %4284, i32 26
  %4286 = extractelement <64 x i32> %4150, i32 27
  %4287 = sext i32 %4286 to i64
  %4288 = getelementptr inbounds i8, i8* %input17, i64 %4287
  %4289 = load i8, i8* %4288, align 1, !tbaa !386
  %4290 = insertelement <64 x i8> %4285, i8 %4289, i32 27
  %4291 = extractelement <64 x i32> %4150, i32 28
  %4292 = sext i32 %4291 to i64
  %4293 = getelementptr inbounds i8, i8* %input17, i64 %4292
  %4294 = load i8, i8* %4293, align 1, !tbaa !386
  %4295 = insertelement <64 x i8> %4290, i8 %4294, i32 28
  %4296 = extractelement <64 x i32> %4150, i32 29
  %4297 = sext i32 %4296 to i64
  %4298 = getelementptr inbounds i8, i8* %input17, i64 %4297
  %4299 = load i8, i8* %4298, align 1, !tbaa !386
  %4300 = insertelement <64 x i8> %4295, i8 %4299, i32 29
  %4301 = extractelement <64 x i32> %4150, i32 30
  %4302 = sext i32 %4301 to i64
  %4303 = getelementptr inbounds i8, i8* %input17, i64 %4302
  %4304 = load i8, i8* %4303, align 1, !tbaa !386
  %4305 = insertelement <64 x i8> %4300, i8 %4304, i32 30
  %4306 = extractelement <64 x i32> %4150, i32 31
  %4307 = sext i32 %4306 to i64
  %4308 = getelementptr inbounds i8, i8* %input17, i64 %4307
  %4309 = load i8, i8* %4308, align 1, !tbaa !386
  %4310 = insertelement <64 x i8> %4305, i8 %4309, i32 31
  %4311 = extractelement <64 x i32> %4150, i32 32
  %4312 = sext i32 %4311 to i64
  %4313 = getelementptr inbounds i8, i8* %input17, i64 %4312
  %4314 = load i8, i8* %4313, align 1, !tbaa !386
  %4315 = insertelement <64 x i8> %4310, i8 %4314, i32 32
  %4316 = extractelement <64 x i32> %4150, i32 33
  %4317 = sext i32 %4316 to i64
  %4318 = getelementptr inbounds i8, i8* %input17, i64 %4317
  %4319 = load i8, i8* %4318, align 1, !tbaa !386
  %4320 = insertelement <64 x i8> %4315, i8 %4319, i32 33
  %4321 = extractelement <64 x i32> %4150, i32 34
  %4322 = sext i32 %4321 to i64
  %4323 = getelementptr inbounds i8, i8* %input17, i64 %4322
  %4324 = load i8, i8* %4323, align 1, !tbaa !386
  %4325 = insertelement <64 x i8> %4320, i8 %4324, i32 34
  %4326 = extractelement <64 x i32> %4150, i32 35
  %4327 = sext i32 %4326 to i64
  %4328 = getelementptr inbounds i8, i8* %input17, i64 %4327
  %4329 = load i8, i8* %4328, align 1, !tbaa !386
  %4330 = insertelement <64 x i8> %4325, i8 %4329, i32 35
  %4331 = extractelement <64 x i32> %4150, i32 36
  %4332 = sext i32 %4331 to i64
  %4333 = getelementptr inbounds i8, i8* %input17, i64 %4332
  %4334 = load i8, i8* %4333, align 1, !tbaa !386
  %4335 = insertelement <64 x i8> %4330, i8 %4334, i32 36
  %4336 = extractelement <64 x i32> %4150, i32 37
  %4337 = sext i32 %4336 to i64
  %4338 = getelementptr inbounds i8, i8* %input17, i64 %4337
  %4339 = load i8, i8* %4338, align 1, !tbaa !386
  %4340 = insertelement <64 x i8> %4335, i8 %4339, i32 37
  %4341 = extractelement <64 x i32> %4150, i32 38
  %4342 = sext i32 %4341 to i64
  %4343 = getelementptr inbounds i8, i8* %input17, i64 %4342
  %4344 = load i8, i8* %4343, align 1, !tbaa !386
  %4345 = insertelement <64 x i8> %4340, i8 %4344, i32 38
  %4346 = extractelement <64 x i32> %4150, i32 39
  %4347 = sext i32 %4346 to i64
  %4348 = getelementptr inbounds i8, i8* %input17, i64 %4347
  %4349 = load i8, i8* %4348, align 1, !tbaa !386
  %4350 = insertelement <64 x i8> %4345, i8 %4349, i32 39
  %4351 = extractelement <64 x i32> %4150, i32 40
  %4352 = sext i32 %4351 to i64
  %4353 = getelementptr inbounds i8, i8* %input17, i64 %4352
  %4354 = load i8, i8* %4353, align 1, !tbaa !386
  %4355 = insertelement <64 x i8> %4350, i8 %4354, i32 40
  %4356 = extractelement <64 x i32> %4150, i32 41
  %4357 = sext i32 %4356 to i64
  %4358 = getelementptr inbounds i8, i8* %input17, i64 %4357
  %4359 = load i8, i8* %4358, align 1, !tbaa !386
  %4360 = insertelement <64 x i8> %4355, i8 %4359, i32 41
  %4361 = extractelement <64 x i32> %4150, i32 42
  %4362 = sext i32 %4361 to i64
  %4363 = getelementptr inbounds i8, i8* %input17, i64 %4362
  %4364 = load i8, i8* %4363, align 1, !tbaa !386
  %4365 = insertelement <64 x i8> %4360, i8 %4364, i32 42
  %4366 = extractelement <64 x i32> %4150, i32 43
  %4367 = sext i32 %4366 to i64
  %4368 = getelementptr inbounds i8, i8* %input17, i64 %4367
  %4369 = load i8, i8* %4368, align 1, !tbaa !386
  %4370 = insertelement <64 x i8> %4365, i8 %4369, i32 43
  %4371 = extractelement <64 x i32> %4150, i32 44
  %4372 = sext i32 %4371 to i64
  %4373 = getelementptr inbounds i8, i8* %input17, i64 %4372
  %4374 = load i8, i8* %4373, align 1, !tbaa !386
  %4375 = insertelement <64 x i8> %4370, i8 %4374, i32 44
  %4376 = extractelement <64 x i32> %4150, i32 45
  %4377 = sext i32 %4376 to i64
  %4378 = getelementptr inbounds i8, i8* %input17, i64 %4377
  %4379 = load i8, i8* %4378, align 1, !tbaa !386
  %4380 = insertelement <64 x i8> %4375, i8 %4379, i32 45
  %4381 = extractelement <64 x i32> %4150, i32 46
  %4382 = sext i32 %4381 to i64
  %4383 = getelementptr inbounds i8, i8* %input17, i64 %4382
  %4384 = load i8, i8* %4383, align 1, !tbaa !386
  %4385 = insertelement <64 x i8> %4380, i8 %4384, i32 46
  %4386 = extractelement <64 x i32> %4150, i32 47
  %4387 = sext i32 %4386 to i64
  %4388 = getelementptr inbounds i8, i8* %input17, i64 %4387
  %4389 = load i8, i8* %4388, align 1, !tbaa !386
  %4390 = insertelement <64 x i8> %4385, i8 %4389, i32 47
  %4391 = extractelement <64 x i32> %4150, i32 48
  %4392 = sext i32 %4391 to i64
  %4393 = getelementptr inbounds i8, i8* %input17, i64 %4392
  %4394 = load i8, i8* %4393, align 1, !tbaa !386
  %4395 = insertelement <64 x i8> %4390, i8 %4394, i32 48
  %4396 = extractelement <64 x i32> %4150, i32 49
  %4397 = sext i32 %4396 to i64
  %4398 = getelementptr inbounds i8, i8* %input17, i64 %4397
  %4399 = load i8, i8* %4398, align 1, !tbaa !386
  %4400 = insertelement <64 x i8> %4395, i8 %4399, i32 49
  %4401 = extractelement <64 x i32> %4150, i32 50
  %4402 = sext i32 %4401 to i64
  %4403 = getelementptr inbounds i8, i8* %input17, i64 %4402
  %4404 = load i8, i8* %4403, align 1, !tbaa !386
  %4405 = insertelement <64 x i8> %4400, i8 %4404, i32 50
  %4406 = extractelement <64 x i32> %4150, i32 51
  %4407 = sext i32 %4406 to i64
  %4408 = getelementptr inbounds i8, i8* %input17, i64 %4407
  %4409 = load i8, i8* %4408, align 1, !tbaa !386
  %4410 = insertelement <64 x i8> %4405, i8 %4409, i32 51
  %4411 = extractelement <64 x i32> %4150, i32 52
  %4412 = sext i32 %4411 to i64
  %4413 = getelementptr inbounds i8, i8* %input17, i64 %4412
  %4414 = load i8, i8* %4413, align 1, !tbaa !386
  %4415 = insertelement <64 x i8> %4410, i8 %4414, i32 52
  %4416 = extractelement <64 x i32> %4150, i32 53
  %4417 = sext i32 %4416 to i64
  %4418 = getelementptr inbounds i8, i8* %input17, i64 %4417
  %4419 = load i8, i8* %4418, align 1, !tbaa !386
  %4420 = insertelement <64 x i8> %4415, i8 %4419, i32 53
  %4421 = extractelement <64 x i32> %4150, i32 54
  %4422 = sext i32 %4421 to i64
  %4423 = getelementptr inbounds i8, i8* %input17, i64 %4422
  %4424 = load i8, i8* %4423, align 1, !tbaa !386
  %4425 = insertelement <64 x i8> %4420, i8 %4424, i32 54
  %4426 = extractelement <64 x i32> %4150, i32 55
  %4427 = sext i32 %4426 to i64
  %4428 = getelementptr inbounds i8, i8* %input17, i64 %4427
  %4429 = load i8, i8* %4428, align 1, !tbaa !386
  %4430 = insertelement <64 x i8> %4425, i8 %4429, i32 55
  %4431 = extractelement <64 x i32> %4150, i32 56
  %4432 = sext i32 %4431 to i64
  %4433 = getelementptr inbounds i8, i8* %input17, i64 %4432
  %4434 = load i8, i8* %4433, align 1, !tbaa !386
  %4435 = insertelement <64 x i8> %4430, i8 %4434, i32 56
  %4436 = extractelement <64 x i32> %4150, i32 57
  %4437 = sext i32 %4436 to i64
  %4438 = getelementptr inbounds i8, i8* %input17, i64 %4437
  %4439 = load i8, i8* %4438, align 1, !tbaa !386
  %4440 = insertelement <64 x i8> %4435, i8 %4439, i32 57
  %4441 = extractelement <64 x i32> %4150, i32 58
  %4442 = sext i32 %4441 to i64
  %4443 = getelementptr inbounds i8, i8* %input17, i64 %4442
  %4444 = load i8, i8* %4443, align 1, !tbaa !386
  %4445 = insertelement <64 x i8> %4440, i8 %4444, i32 58
  %4446 = extractelement <64 x i32> %4150, i32 59
  %4447 = sext i32 %4446 to i64
  %4448 = getelementptr inbounds i8, i8* %input17, i64 %4447
  %4449 = load i8, i8* %4448, align 1, !tbaa !386
  %4450 = insertelement <64 x i8> %4445, i8 %4449, i32 59
  %4451 = extractelement <64 x i32> %4150, i32 60
  %4452 = sext i32 %4451 to i64
  %4453 = getelementptr inbounds i8, i8* %input17, i64 %4452
  %4454 = load i8, i8* %4453, align 1, !tbaa !386
  %4455 = insertelement <64 x i8> %4450, i8 %4454, i32 60
  %4456 = extractelement <64 x i32> %4150, i32 61
  %4457 = sext i32 %4456 to i64
  %4458 = getelementptr inbounds i8, i8* %input17, i64 %4457
  %4459 = load i8, i8* %4458, align 1, !tbaa !386
  %4460 = insertelement <64 x i8> %4455, i8 %4459, i32 61
  %4461 = extractelement <64 x i32> %4150, i32 62
  %4462 = sext i32 %4461 to i64
  %4463 = getelementptr inbounds i8, i8* %input17, i64 %4462
  %4464 = load i8, i8* %4463, align 1, !tbaa !386
  %4465 = insertelement <64 x i8> %4460, i8 %4464, i32 62
  %4466 = extractelement <64 x i32> %4150, i32 63
  %4467 = sext i32 %4466 to i64
  %4468 = getelementptr inbounds i8, i8* %input17, i64 %4467
  %4469 = load i8, i8* %4468, align 1, !tbaa !386
  %4470 = insertelement <64 x i8> %4465, i8 %4469, i32 63
  %4471 = shufflevector <64 x i8> %4470, <64 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4472 = add nsw i64 %indvars.iv305, %4065
  %4473 = shl nsw i64 %4472, 6
  %4474 = getelementptr inbounds i8, i8* %bounded_input54, i64 %4473
  %4475 = bitcast i8* %4474 to <16 x i8>*
  store <16 x i8> %4471, <16 x i8>* %4475, align 16, !tbaa !389
  %4476 = shufflevector <64 x i8> %4470, <64 x i8> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4477 = getelementptr inbounds i8, i8* %4474, i64 16
  %4478 = bitcast i8* %4477 to <16 x i8>*
  store <16 x i8> %4476, <16 x i8>* %4478, align 16, !tbaa !389
  %4479 = shufflevector <64 x i8> %4470, <64 x i8> undef, <16 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %4480 = getelementptr inbounds i8, i8* %4474, i64 32
  %4481 = bitcast i8* %4480 to <16 x i8>*
  store <16 x i8> %4479, <16 x i8>* %4481, align 16, !tbaa !389
  %4482 = shufflevector <64 x i8> %4470, <64 x i8> undef, <16 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %4483 = getelementptr inbounds i8, i8* %4474, i64 48
  %4484 = bitcast i8* %4483 to <16 x i8>*
  store <16 x i8> %4482, <16 x i8>* %4484, align 16, !tbaa !389
  %indvars.iv.next306 = add nuw nsw i64 %indvars.iv305, 1
  %.not222 = icmp eq i64 %indvars.iv.next306, %114
  br i1 %.not222, label %"end for bounded_input.s0.x.x78", label %"for bounded_input.s0.x.x77"

"end for bounded_input.s0.x.x78":                 ; preds = %"for bounded_input.s0.x.x77", %"for bounded_input.s0.y.rebased72"
  br i1 %101, label %"for bounded_input.s0.x.x.rebased83.preheader", label %"end for bounded_input.s0.x.x.rebased84", !prof !385

"for bounded_input.s0.x.x.rebased83.preheader":   ; preds = %"end for bounded_input.s0.x.x78"
  %t50182 = add nsw i32 %t49876, %output.min.021
  %t50281 = add nsw i32 %t49975, %t46431
  %4485 = sext i32 %t50182 to i64
  %4486 = sext i32 %t50281 to i64
  br label %"for bounded_input.s0.x.x.rebased83"

"for bounded_input.s0.x.x.rebased83":             ; preds = %"for bounded_input.s0.x.x.rebased83.preheader", %"for bounded_input.s0.x.x.rebased83"
  %indvars.iv307 = phi i64 [ 0, %"for bounded_input.s0.x.x.rebased83.preheader" ], [ %indvars.iv.next308, %"for bounded_input.s0.x.x.rebased83" ]
  %4487 = add nsw i64 %indvars.iv307, %102
  %4488 = shl nsw i64 %4487, 6
  %4489 = add nsw i64 %4488, %4485
  %4490 = getelementptr inbounds i8, i8* %input17, i64 %4489
  %4491 = getelementptr inbounds i8, i8* %4490, i64 -3
  %4492 = bitcast i8* %4491 to <16 x i8>*
  %4493 = load <16 x i8>, <16 x i8>* %4492, align 1, !tbaa !386
  %4494 = getelementptr inbounds i8, i8* %4490, i64 13
  %4495 = bitcast i8* %4494 to <16 x i8>*
  %4496 = load <16 x i8>, <16 x i8>* %4495, align 1, !tbaa !386
  %4497 = getelementptr inbounds i8, i8* %4490, i64 29
  %4498 = bitcast i8* %4497 to <16 x i8>*
  %4499 = load <16 x i8>, <16 x i8>* %4498, align 1, !tbaa !386
  %4500 = getelementptr inbounds i8, i8* %4490, i64 45
  %4501 = bitcast i8* %4500 to <16 x i8>*
  %4502 = load <16 x i8>, <16 x i8>* %4501, align 1, !tbaa !386
  %4503 = add nsw i64 %indvars.iv307, %4486
  %4504 = shl nsw i64 %4503, 6
  %4505 = getelementptr inbounds i8, i8* %bounded_input54, i64 %4504
  %4506 = bitcast i8* %4505 to <16 x i8>*
  store <16 x i8> %4493, <16 x i8>* %4506, align 16, !tbaa !389
  %4507 = getelementptr inbounds i8, i8* %4505, i64 16
  %4508 = bitcast i8* %4507 to <16 x i8>*
  store <16 x i8> %4496, <16 x i8>* %4508, align 16, !tbaa !389
  %4509 = getelementptr inbounds i8, i8* %4505, i64 32
  %4510 = bitcast i8* %4509 to <16 x i8>*
  store <16 x i8> %4499, <16 x i8>* %4510, align 16, !tbaa !389
  %4511 = getelementptr inbounds i8, i8* %4505, i64 48
  %4512 = bitcast i8* %4511 to <16 x i8>*
  store <16 x i8> %4502, <16 x i8>* %4512, align 16, !tbaa !389
  %indvars.iv.next308 = add nuw nsw i64 %indvars.iv307, 1
  %.not221 = icmp eq i64 %indvars.iv.next308, %115
  br i1 %.not221, label %"end for bounded_input.s0.x.x.rebased84", label %"for bounded_input.s0.x.x.rebased83"

"end for bounded_input.s0.x.x.rebased84":         ; preds = %"for bounded_input.s0.x.x.rebased83", %"end for bounded_input.s0.x.x78"
  br i1 %103, label %"for bounded_input.s0.x.x.rebased88.preheader", label %"end for bounded_input.s0.x.x.rebased89", !prof !385

"for bounded_input.s0.x.x.rebased88.preheader":   ; preds = %"end for bounded_input.s0.x.x.rebased84"
  %t50487 = add nsw i32 %t49975, %t45626
  %4513 = insertelement <64 x i32> undef, i32 %t49876, i32 0
  %4514 = shufflevector <64 x i32> %4513, <64 x i32> undef, <64 x i32> zeroinitializer
  %4515 = sext i32 %t50487 to i64
  br label %"for bounded_input.s0.x.x.rebased88"

"for bounded_input.s0.x.x.rebased88":             ; preds = %"for bounded_input.s0.x.x.rebased88.preheader", %"for bounded_input.s0.x.x.rebased88"
  %indvars.iv309 = phi i64 [ 0, %"for bounded_input.s0.x.x.rebased88.preheader" ], [ %indvars.iv.next310, %"for bounded_input.s0.x.x.rebased88" ]
  %4516 = trunc i64 %indvars.iv309 to i32
  %4517 = add nsw i32 %t45626, %4516
  %4518 = shl nsw i32 %4517, 6
  %4519 = add i32 %96, %4518
  %4520 = insertelement <64 x i32> undef, i32 %4519, i32 0
  %4521 = shufflevector <64 x i32> %4520, <64 x i32> undef, <64 x i32> zeroinitializer
  %4522 = add nsw <64 x i32> %4521, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %4523 = shufflevector <64 x i32> %4522, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4524 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4523, <4 x i32> %99)
  %4525 = shufflevector <64 x i32> %4522, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4526 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4525, <4 x i32> %99)
  %4527 = shufflevector <64 x i32> %4522, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %4528 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4527, <4 x i32> %99)
  %4529 = shufflevector <64 x i32> %4522, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %4530 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4529, <4 x i32> %99)
  %4531 = shufflevector <64 x i32> %4522, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %4532 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4531, <4 x i32> %99)
  %4533 = shufflevector <64 x i32> %4522, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %4534 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4533, <4 x i32> %99)
  %4535 = shufflevector <64 x i32> %4522, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %4536 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4535, <4 x i32> %99)
  %4537 = shufflevector <64 x i32> %4522, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %4538 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4537, <4 x i32> %99)
  %4539 = shufflevector <64 x i32> %4522, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %4540 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4539, <4 x i32> %99)
  %4541 = shufflevector <64 x i32> %4522, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %4542 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4541, <4 x i32> %99)
  %4543 = shufflevector <64 x i32> %4522, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %4544 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4543, <4 x i32> %99)
  %4545 = shufflevector <64 x i32> %4522, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %4546 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4545, <4 x i32> %99)
  %4547 = shufflevector <64 x i32> %4522, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %4548 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4547, <4 x i32> %99)
  %4549 = shufflevector <64 x i32> %4522, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %4550 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4549, <4 x i32> %99)
  %4551 = shufflevector <64 x i32> %4522, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %4552 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4551, <4 x i32> %99)
  %4553 = shufflevector <64 x i32> %4522, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %4554 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4553, <4 x i32> %99)
  %4555 = shufflevector <4 x i32> %4554, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %4556 = shufflevector <8 x i32> %4555, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %4557 = shufflevector <16 x i32> %4556, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %4558 = shufflevector <32 x i32> %4557, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %4559 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4524, <4 x i32> zeroinitializer)
  %4560 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4526, <4 x i32> zeroinitializer)
  %4561 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4528, <4 x i32> zeroinitializer)
  %4562 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4530, <4 x i32> zeroinitializer)
  %4563 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4532, <4 x i32> zeroinitializer)
  %4564 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4534, <4 x i32> zeroinitializer)
  %4565 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4536, <4 x i32> zeroinitializer)
  %4566 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4538, <4 x i32> zeroinitializer)
  %4567 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4540, <4 x i32> zeroinitializer)
  %4568 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4542, <4 x i32> zeroinitializer)
  %4569 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4544, <4 x i32> zeroinitializer)
  %4570 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4546, <4 x i32> zeroinitializer)
  %4571 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4548, <4 x i32> zeroinitializer)
  %4572 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4550, <4 x i32> zeroinitializer)
  %4573 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4552, <4 x i32> zeroinitializer)
  %4574 = shufflevector <64 x i32> %4558, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %4575 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4574, <4 x i32> zeroinitializer)
  %4576 = shufflevector <4 x i32> %4559, <4 x i32> %4560, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4577 = shufflevector <4 x i32> %4561, <4 x i32> %4562, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4578 = shufflevector <4 x i32> %4563, <4 x i32> %4564, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4579 = shufflevector <4 x i32> %4565, <4 x i32> %4566, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4580 = shufflevector <4 x i32> %4567, <4 x i32> %4568, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4581 = shufflevector <4 x i32> %4569, <4 x i32> %4570, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4582 = shufflevector <4 x i32> %4571, <4 x i32> %4572, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4583 = shufflevector <4 x i32> %4573, <4 x i32> %4575, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4584 = shufflevector <8 x i32> %4576, <8 x i32> %4577, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4585 = shufflevector <8 x i32> %4578, <8 x i32> %4579, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4586 = shufflevector <8 x i32> %4580, <8 x i32> %4581, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4587 = shufflevector <8 x i32> %4582, <8 x i32> %4583, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4588 = shufflevector <16 x i32> %4584, <16 x i32> %4585, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4589 = shufflevector <16 x i32> %4586, <16 x i32> %4587, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4590 = shufflevector <32 x i32> %4588, <32 x i32> %4589, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %4591 = add nsw <64 x i32> %4590, %4514
  %4592 = extractelement <64 x i32> %4591, i32 0
  %4593 = sext i32 %4592 to i64
  %4594 = getelementptr inbounds i8, i8* %input17, i64 %4593
  %4595 = load i8, i8* %4594, align 1, !tbaa !386
  %4596 = insertelement <64 x i8> undef, i8 %4595, i32 0
  %4597 = extractelement <64 x i32> %4591, i32 1
  %4598 = sext i32 %4597 to i64
  %4599 = getelementptr inbounds i8, i8* %input17, i64 %4598
  %4600 = load i8, i8* %4599, align 1, !tbaa !386
  %4601 = insertelement <64 x i8> %4596, i8 %4600, i32 1
  %4602 = extractelement <64 x i32> %4591, i32 2
  %4603 = sext i32 %4602 to i64
  %4604 = getelementptr inbounds i8, i8* %input17, i64 %4603
  %4605 = load i8, i8* %4604, align 1, !tbaa !386
  %4606 = insertelement <64 x i8> %4601, i8 %4605, i32 2
  %4607 = extractelement <64 x i32> %4591, i32 3
  %4608 = sext i32 %4607 to i64
  %4609 = getelementptr inbounds i8, i8* %input17, i64 %4608
  %4610 = load i8, i8* %4609, align 1, !tbaa !386
  %4611 = insertelement <64 x i8> %4606, i8 %4610, i32 3
  %4612 = extractelement <64 x i32> %4591, i32 4
  %4613 = sext i32 %4612 to i64
  %4614 = getelementptr inbounds i8, i8* %input17, i64 %4613
  %4615 = load i8, i8* %4614, align 1, !tbaa !386
  %4616 = insertelement <64 x i8> %4611, i8 %4615, i32 4
  %4617 = extractelement <64 x i32> %4591, i32 5
  %4618 = sext i32 %4617 to i64
  %4619 = getelementptr inbounds i8, i8* %input17, i64 %4618
  %4620 = load i8, i8* %4619, align 1, !tbaa !386
  %4621 = insertelement <64 x i8> %4616, i8 %4620, i32 5
  %4622 = extractelement <64 x i32> %4591, i32 6
  %4623 = sext i32 %4622 to i64
  %4624 = getelementptr inbounds i8, i8* %input17, i64 %4623
  %4625 = load i8, i8* %4624, align 1, !tbaa !386
  %4626 = insertelement <64 x i8> %4621, i8 %4625, i32 6
  %4627 = extractelement <64 x i32> %4591, i32 7
  %4628 = sext i32 %4627 to i64
  %4629 = getelementptr inbounds i8, i8* %input17, i64 %4628
  %4630 = load i8, i8* %4629, align 1, !tbaa !386
  %4631 = insertelement <64 x i8> %4626, i8 %4630, i32 7
  %4632 = extractelement <64 x i32> %4591, i32 8
  %4633 = sext i32 %4632 to i64
  %4634 = getelementptr inbounds i8, i8* %input17, i64 %4633
  %4635 = load i8, i8* %4634, align 1, !tbaa !386
  %4636 = insertelement <64 x i8> %4631, i8 %4635, i32 8
  %4637 = extractelement <64 x i32> %4591, i32 9
  %4638 = sext i32 %4637 to i64
  %4639 = getelementptr inbounds i8, i8* %input17, i64 %4638
  %4640 = load i8, i8* %4639, align 1, !tbaa !386
  %4641 = insertelement <64 x i8> %4636, i8 %4640, i32 9
  %4642 = extractelement <64 x i32> %4591, i32 10
  %4643 = sext i32 %4642 to i64
  %4644 = getelementptr inbounds i8, i8* %input17, i64 %4643
  %4645 = load i8, i8* %4644, align 1, !tbaa !386
  %4646 = insertelement <64 x i8> %4641, i8 %4645, i32 10
  %4647 = extractelement <64 x i32> %4591, i32 11
  %4648 = sext i32 %4647 to i64
  %4649 = getelementptr inbounds i8, i8* %input17, i64 %4648
  %4650 = load i8, i8* %4649, align 1, !tbaa !386
  %4651 = insertelement <64 x i8> %4646, i8 %4650, i32 11
  %4652 = extractelement <64 x i32> %4591, i32 12
  %4653 = sext i32 %4652 to i64
  %4654 = getelementptr inbounds i8, i8* %input17, i64 %4653
  %4655 = load i8, i8* %4654, align 1, !tbaa !386
  %4656 = insertelement <64 x i8> %4651, i8 %4655, i32 12
  %4657 = extractelement <64 x i32> %4591, i32 13
  %4658 = sext i32 %4657 to i64
  %4659 = getelementptr inbounds i8, i8* %input17, i64 %4658
  %4660 = load i8, i8* %4659, align 1, !tbaa !386
  %4661 = insertelement <64 x i8> %4656, i8 %4660, i32 13
  %4662 = extractelement <64 x i32> %4591, i32 14
  %4663 = sext i32 %4662 to i64
  %4664 = getelementptr inbounds i8, i8* %input17, i64 %4663
  %4665 = load i8, i8* %4664, align 1, !tbaa !386
  %4666 = insertelement <64 x i8> %4661, i8 %4665, i32 14
  %4667 = extractelement <64 x i32> %4591, i32 15
  %4668 = sext i32 %4667 to i64
  %4669 = getelementptr inbounds i8, i8* %input17, i64 %4668
  %4670 = load i8, i8* %4669, align 1, !tbaa !386
  %4671 = insertelement <64 x i8> %4666, i8 %4670, i32 15
  %4672 = extractelement <64 x i32> %4591, i32 16
  %4673 = sext i32 %4672 to i64
  %4674 = getelementptr inbounds i8, i8* %input17, i64 %4673
  %4675 = load i8, i8* %4674, align 1, !tbaa !386
  %4676 = insertelement <64 x i8> %4671, i8 %4675, i32 16
  %4677 = extractelement <64 x i32> %4591, i32 17
  %4678 = sext i32 %4677 to i64
  %4679 = getelementptr inbounds i8, i8* %input17, i64 %4678
  %4680 = load i8, i8* %4679, align 1, !tbaa !386
  %4681 = insertelement <64 x i8> %4676, i8 %4680, i32 17
  %4682 = extractelement <64 x i32> %4591, i32 18
  %4683 = sext i32 %4682 to i64
  %4684 = getelementptr inbounds i8, i8* %input17, i64 %4683
  %4685 = load i8, i8* %4684, align 1, !tbaa !386
  %4686 = insertelement <64 x i8> %4681, i8 %4685, i32 18
  %4687 = extractelement <64 x i32> %4591, i32 19
  %4688 = sext i32 %4687 to i64
  %4689 = getelementptr inbounds i8, i8* %input17, i64 %4688
  %4690 = load i8, i8* %4689, align 1, !tbaa !386
  %4691 = insertelement <64 x i8> %4686, i8 %4690, i32 19
  %4692 = extractelement <64 x i32> %4591, i32 20
  %4693 = sext i32 %4692 to i64
  %4694 = getelementptr inbounds i8, i8* %input17, i64 %4693
  %4695 = load i8, i8* %4694, align 1, !tbaa !386
  %4696 = insertelement <64 x i8> %4691, i8 %4695, i32 20
  %4697 = extractelement <64 x i32> %4591, i32 21
  %4698 = sext i32 %4697 to i64
  %4699 = getelementptr inbounds i8, i8* %input17, i64 %4698
  %4700 = load i8, i8* %4699, align 1, !tbaa !386
  %4701 = insertelement <64 x i8> %4696, i8 %4700, i32 21
  %4702 = extractelement <64 x i32> %4591, i32 22
  %4703 = sext i32 %4702 to i64
  %4704 = getelementptr inbounds i8, i8* %input17, i64 %4703
  %4705 = load i8, i8* %4704, align 1, !tbaa !386
  %4706 = insertelement <64 x i8> %4701, i8 %4705, i32 22
  %4707 = extractelement <64 x i32> %4591, i32 23
  %4708 = sext i32 %4707 to i64
  %4709 = getelementptr inbounds i8, i8* %input17, i64 %4708
  %4710 = load i8, i8* %4709, align 1, !tbaa !386
  %4711 = insertelement <64 x i8> %4706, i8 %4710, i32 23
  %4712 = extractelement <64 x i32> %4591, i32 24
  %4713 = sext i32 %4712 to i64
  %4714 = getelementptr inbounds i8, i8* %input17, i64 %4713
  %4715 = load i8, i8* %4714, align 1, !tbaa !386
  %4716 = insertelement <64 x i8> %4711, i8 %4715, i32 24
  %4717 = extractelement <64 x i32> %4591, i32 25
  %4718 = sext i32 %4717 to i64
  %4719 = getelementptr inbounds i8, i8* %input17, i64 %4718
  %4720 = load i8, i8* %4719, align 1, !tbaa !386
  %4721 = insertelement <64 x i8> %4716, i8 %4720, i32 25
  %4722 = extractelement <64 x i32> %4591, i32 26
  %4723 = sext i32 %4722 to i64
  %4724 = getelementptr inbounds i8, i8* %input17, i64 %4723
  %4725 = load i8, i8* %4724, align 1, !tbaa !386
  %4726 = insertelement <64 x i8> %4721, i8 %4725, i32 26
  %4727 = extractelement <64 x i32> %4591, i32 27
  %4728 = sext i32 %4727 to i64
  %4729 = getelementptr inbounds i8, i8* %input17, i64 %4728
  %4730 = load i8, i8* %4729, align 1, !tbaa !386
  %4731 = insertelement <64 x i8> %4726, i8 %4730, i32 27
  %4732 = extractelement <64 x i32> %4591, i32 28
  %4733 = sext i32 %4732 to i64
  %4734 = getelementptr inbounds i8, i8* %input17, i64 %4733
  %4735 = load i8, i8* %4734, align 1, !tbaa !386
  %4736 = insertelement <64 x i8> %4731, i8 %4735, i32 28
  %4737 = extractelement <64 x i32> %4591, i32 29
  %4738 = sext i32 %4737 to i64
  %4739 = getelementptr inbounds i8, i8* %input17, i64 %4738
  %4740 = load i8, i8* %4739, align 1, !tbaa !386
  %4741 = insertelement <64 x i8> %4736, i8 %4740, i32 29
  %4742 = extractelement <64 x i32> %4591, i32 30
  %4743 = sext i32 %4742 to i64
  %4744 = getelementptr inbounds i8, i8* %input17, i64 %4743
  %4745 = load i8, i8* %4744, align 1, !tbaa !386
  %4746 = insertelement <64 x i8> %4741, i8 %4745, i32 30
  %4747 = extractelement <64 x i32> %4591, i32 31
  %4748 = sext i32 %4747 to i64
  %4749 = getelementptr inbounds i8, i8* %input17, i64 %4748
  %4750 = load i8, i8* %4749, align 1, !tbaa !386
  %4751 = insertelement <64 x i8> %4746, i8 %4750, i32 31
  %4752 = extractelement <64 x i32> %4591, i32 32
  %4753 = sext i32 %4752 to i64
  %4754 = getelementptr inbounds i8, i8* %input17, i64 %4753
  %4755 = load i8, i8* %4754, align 1, !tbaa !386
  %4756 = insertelement <64 x i8> %4751, i8 %4755, i32 32
  %4757 = extractelement <64 x i32> %4591, i32 33
  %4758 = sext i32 %4757 to i64
  %4759 = getelementptr inbounds i8, i8* %input17, i64 %4758
  %4760 = load i8, i8* %4759, align 1, !tbaa !386
  %4761 = insertelement <64 x i8> %4756, i8 %4760, i32 33
  %4762 = extractelement <64 x i32> %4591, i32 34
  %4763 = sext i32 %4762 to i64
  %4764 = getelementptr inbounds i8, i8* %input17, i64 %4763
  %4765 = load i8, i8* %4764, align 1, !tbaa !386
  %4766 = insertelement <64 x i8> %4761, i8 %4765, i32 34
  %4767 = extractelement <64 x i32> %4591, i32 35
  %4768 = sext i32 %4767 to i64
  %4769 = getelementptr inbounds i8, i8* %input17, i64 %4768
  %4770 = load i8, i8* %4769, align 1, !tbaa !386
  %4771 = insertelement <64 x i8> %4766, i8 %4770, i32 35
  %4772 = extractelement <64 x i32> %4591, i32 36
  %4773 = sext i32 %4772 to i64
  %4774 = getelementptr inbounds i8, i8* %input17, i64 %4773
  %4775 = load i8, i8* %4774, align 1, !tbaa !386
  %4776 = insertelement <64 x i8> %4771, i8 %4775, i32 36
  %4777 = extractelement <64 x i32> %4591, i32 37
  %4778 = sext i32 %4777 to i64
  %4779 = getelementptr inbounds i8, i8* %input17, i64 %4778
  %4780 = load i8, i8* %4779, align 1, !tbaa !386
  %4781 = insertelement <64 x i8> %4776, i8 %4780, i32 37
  %4782 = extractelement <64 x i32> %4591, i32 38
  %4783 = sext i32 %4782 to i64
  %4784 = getelementptr inbounds i8, i8* %input17, i64 %4783
  %4785 = load i8, i8* %4784, align 1, !tbaa !386
  %4786 = insertelement <64 x i8> %4781, i8 %4785, i32 38
  %4787 = extractelement <64 x i32> %4591, i32 39
  %4788 = sext i32 %4787 to i64
  %4789 = getelementptr inbounds i8, i8* %input17, i64 %4788
  %4790 = load i8, i8* %4789, align 1, !tbaa !386
  %4791 = insertelement <64 x i8> %4786, i8 %4790, i32 39
  %4792 = extractelement <64 x i32> %4591, i32 40
  %4793 = sext i32 %4792 to i64
  %4794 = getelementptr inbounds i8, i8* %input17, i64 %4793
  %4795 = load i8, i8* %4794, align 1, !tbaa !386
  %4796 = insertelement <64 x i8> %4791, i8 %4795, i32 40
  %4797 = extractelement <64 x i32> %4591, i32 41
  %4798 = sext i32 %4797 to i64
  %4799 = getelementptr inbounds i8, i8* %input17, i64 %4798
  %4800 = load i8, i8* %4799, align 1, !tbaa !386
  %4801 = insertelement <64 x i8> %4796, i8 %4800, i32 41
  %4802 = extractelement <64 x i32> %4591, i32 42
  %4803 = sext i32 %4802 to i64
  %4804 = getelementptr inbounds i8, i8* %input17, i64 %4803
  %4805 = load i8, i8* %4804, align 1, !tbaa !386
  %4806 = insertelement <64 x i8> %4801, i8 %4805, i32 42
  %4807 = extractelement <64 x i32> %4591, i32 43
  %4808 = sext i32 %4807 to i64
  %4809 = getelementptr inbounds i8, i8* %input17, i64 %4808
  %4810 = load i8, i8* %4809, align 1, !tbaa !386
  %4811 = insertelement <64 x i8> %4806, i8 %4810, i32 43
  %4812 = extractelement <64 x i32> %4591, i32 44
  %4813 = sext i32 %4812 to i64
  %4814 = getelementptr inbounds i8, i8* %input17, i64 %4813
  %4815 = load i8, i8* %4814, align 1, !tbaa !386
  %4816 = insertelement <64 x i8> %4811, i8 %4815, i32 44
  %4817 = extractelement <64 x i32> %4591, i32 45
  %4818 = sext i32 %4817 to i64
  %4819 = getelementptr inbounds i8, i8* %input17, i64 %4818
  %4820 = load i8, i8* %4819, align 1, !tbaa !386
  %4821 = insertelement <64 x i8> %4816, i8 %4820, i32 45
  %4822 = extractelement <64 x i32> %4591, i32 46
  %4823 = sext i32 %4822 to i64
  %4824 = getelementptr inbounds i8, i8* %input17, i64 %4823
  %4825 = load i8, i8* %4824, align 1, !tbaa !386
  %4826 = insertelement <64 x i8> %4821, i8 %4825, i32 46
  %4827 = extractelement <64 x i32> %4591, i32 47
  %4828 = sext i32 %4827 to i64
  %4829 = getelementptr inbounds i8, i8* %input17, i64 %4828
  %4830 = load i8, i8* %4829, align 1, !tbaa !386
  %4831 = insertelement <64 x i8> %4826, i8 %4830, i32 47
  %4832 = extractelement <64 x i32> %4591, i32 48
  %4833 = sext i32 %4832 to i64
  %4834 = getelementptr inbounds i8, i8* %input17, i64 %4833
  %4835 = load i8, i8* %4834, align 1, !tbaa !386
  %4836 = insertelement <64 x i8> %4831, i8 %4835, i32 48
  %4837 = extractelement <64 x i32> %4591, i32 49
  %4838 = sext i32 %4837 to i64
  %4839 = getelementptr inbounds i8, i8* %input17, i64 %4838
  %4840 = load i8, i8* %4839, align 1, !tbaa !386
  %4841 = insertelement <64 x i8> %4836, i8 %4840, i32 49
  %4842 = extractelement <64 x i32> %4591, i32 50
  %4843 = sext i32 %4842 to i64
  %4844 = getelementptr inbounds i8, i8* %input17, i64 %4843
  %4845 = load i8, i8* %4844, align 1, !tbaa !386
  %4846 = insertelement <64 x i8> %4841, i8 %4845, i32 50
  %4847 = extractelement <64 x i32> %4591, i32 51
  %4848 = sext i32 %4847 to i64
  %4849 = getelementptr inbounds i8, i8* %input17, i64 %4848
  %4850 = load i8, i8* %4849, align 1, !tbaa !386
  %4851 = insertelement <64 x i8> %4846, i8 %4850, i32 51
  %4852 = extractelement <64 x i32> %4591, i32 52
  %4853 = sext i32 %4852 to i64
  %4854 = getelementptr inbounds i8, i8* %input17, i64 %4853
  %4855 = load i8, i8* %4854, align 1, !tbaa !386
  %4856 = insertelement <64 x i8> %4851, i8 %4855, i32 52
  %4857 = extractelement <64 x i32> %4591, i32 53
  %4858 = sext i32 %4857 to i64
  %4859 = getelementptr inbounds i8, i8* %input17, i64 %4858
  %4860 = load i8, i8* %4859, align 1, !tbaa !386
  %4861 = insertelement <64 x i8> %4856, i8 %4860, i32 53
  %4862 = extractelement <64 x i32> %4591, i32 54
  %4863 = sext i32 %4862 to i64
  %4864 = getelementptr inbounds i8, i8* %input17, i64 %4863
  %4865 = load i8, i8* %4864, align 1, !tbaa !386
  %4866 = insertelement <64 x i8> %4861, i8 %4865, i32 54
  %4867 = extractelement <64 x i32> %4591, i32 55
  %4868 = sext i32 %4867 to i64
  %4869 = getelementptr inbounds i8, i8* %input17, i64 %4868
  %4870 = load i8, i8* %4869, align 1, !tbaa !386
  %4871 = insertelement <64 x i8> %4866, i8 %4870, i32 55
  %4872 = extractelement <64 x i32> %4591, i32 56
  %4873 = sext i32 %4872 to i64
  %4874 = getelementptr inbounds i8, i8* %input17, i64 %4873
  %4875 = load i8, i8* %4874, align 1, !tbaa !386
  %4876 = insertelement <64 x i8> %4871, i8 %4875, i32 56
  %4877 = extractelement <64 x i32> %4591, i32 57
  %4878 = sext i32 %4877 to i64
  %4879 = getelementptr inbounds i8, i8* %input17, i64 %4878
  %4880 = load i8, i8* %4879, align 1, !tbaa !386
  %4881 = insertelement <64 x i8> %4876, i8 %4880, i32 57
  %4882 = extractelement <64 x i32> %4591, i32 58
  %4883 = sext i32 %4882 to i64
  %4884 = getelementptr inbounds i8, i8* %input17, i64 %4883
  %4885 = load i8, i8* %4884, align 1, !tbaa !386
  %4886 = insertelement <64 x i8> %4881, i8 %4885, i32 58
  %4887 = extractelement <64 x i32> %4591, i32 59
  %4888 = sext i32 %4887 to i64
  %4889 = getelementptr inbounds i8, i8* %input17, i64 %4888
  %4890 = load i8, i8* %4889, align 1, !tbaa !386
  %4891 = insertelement <64 x i8> %4886, i8 %4890, i32 59
  %4892 = extractelement <64 x i32> %4591, i32 60
  %4893 = sext i32 %4892 to i64
  %4894 = getelementptr inbounds i8, i8* %input17, i64 %4893
  %4895 = load i8, i8* %4894, align 1, !tbaa !386
  %4896 = insertelement <64 x i8> %4891, i8 %4895, i32 60
  %4897 = extractelement <64 x i32> %4591, i32 61
  %4898 = sext i32 %4897 to i64
  %4899 = getelementptr inbounds i8, i8* %input17, i64 %4898
  %4900 = load i8, i8* %4899, align 1, !tbaa !386
  %4901 = insertelement <64 x i8> %4896, i8 %4900, i32 61
  %4902 = extractelement <64 x i32> %4591, i32 62
  %4903 = sext i32 %4902 to i64
  %4904 = getelementptr inbounds i8, i8* %input17, i64 %4903
  %4905 = load i8, i8* %4904, align 1, !tbaa !386
  %4906 = insertelement <64 x i8> %4901, i8 %4905, i32 62
  %4907 = extractelement <64 x i32> %4591, i32 63
  %4908 = sext i32 %4907 to i64
  %4909 = getelementptr inbounds i8, i8* %input17, i64 %4908
  %4910 = load i8, i8* %4909, align 1, !tbaa !386
  %4911 = insertelement <64 x i8> %4906, i8 %4910, i32 63
  %4912 = shufflevector <64 x i8> %4911, <64 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4913 = add nsw i64 %indvars.iv309, %4515
  %4914 = shl nsw i64 %4913, 6
  %4915 = getelementptr inbounds i8, i8* %bounded_input54, i64 %4914
  %4916 = bitcast i8* %4915 to <16 x i8>*
  store <16 x i8> %4912, <16 x i8>* %4916, align 16, !tbaa !389
  %4917 = shufflevector <64 x i8> %4911, <64 x i8> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4918 = getelementptr inbounds i8, i8* %4915, i64 16
  %4919 = bitcast i8* %4918 to <16 x i8>*
  store <16 x i8> %4917, <16 x i8>* %4919, align 16, !tbaa !389
  %4920 = shufflevector <64 x i8> %4911, <64 x i8> undef, <16 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %4921 = getelementptr inbounds i8, i8* %4915, i64 32
  %4922 = bitcast i8* %4921 to <16 x i8>*
  store <16 x i8> %4920, <16 x i8>* %4922, align 16, !tbaa !389
  %4923 = shufflevector <64 x i8> %4911, <64 x i8> undef, <16 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %4924 = getelementptr inbounds i8, i8* %4915, i64 48
  %4925 = bitcast i8* %4924 to <16 x i8>*
  store <16 x i8> %4923, <16 x i8>* %4925, align 16, !tbaa !389
  %indvars.iv.next310 = add nuw nsw i64 %indvars.iv309, 1
  %.not220 = icmp eq i64 %indvars.iv.next310, %116
  br i1 %.not220, label %"end for bounded_input.s0.x.x.rebased89", label %"for bounded_input.s0.x.x.rebased88"

"end for bounded_input.s0.x.x.rebased89":         ; preds = %"for bounded_input.s0.x.x.rebased88", %"end for bounded_input.s0.x.x.rebased84"
  %indvars.iv.next312 = add nuw nsw i64 %indvars.iv311, 1
  %.not219 = icmp eq i64 %indvars.iv311, %3650
  br i1 %.not219, label %"end for bounded_input.s0.y.rebased73", label %"for bounded_input.s0.y.rebased72"

"for bounded_input.s0.y.rebased94":               ; preds = %"for bounded_input.s0.y.rebased94.preheader", %"end for bounded_input.s0.x.x100"
  %indvars.iv315 = phi i64 [ 0, %"for bounded_input.s0.y.rebased94.preheader" ], [ %indvars.iv.next316, %"end for bounded_input.s0.x.x100" ]
  %4926 = add nsw i64 %indvars.iv315, %4074
  %.not216 = icmp slt i64 %4926, %117
  %4927 = trunc i64 %4926 to i32
  %a113 = select i1 %.not216, i32 %4927, i32 %a114
  br i1 %95, label %"for bounded_input.s0.x.x99.preheader", label %"end for bounded_input.s0.x.x100", !prof !385

"for bounded_input.s0.x.x99.preheader":           ; preds = %"for bounded_input.s0.y.rebased94"
  %4928 = trunc i64 %indvars.iv315 to i32
  %4929 = add i32 %4072, %4928
  %t51198 = mul i32 %94, %4929
  %4930 = icmp sgt i32 %a113, 0
  %4931 = select i1 %4930, i32 %a113, i32 0
  %t51097 = mul nsw i32 %4931, %input.stride.120
  %4932 = insertelement <64 x i32> undef, i32 %t51097, i32 0
  %4933 = shufflevector <64 x i32> %4932, <64 x i32> undef, <64 x i32> zeroinitializer
  %4934 = sext i32 %t51198 to i64
  br label %"for bounded_input.s0.x.x99"

"for bounded_input.s0.x.x99":                     ; preds = %"for bounded_input.s0.x.x99.preheader", %"for bounded_input.s0.x.x99"
  %indvars.iv313 = phi i64 [ 0, %"for bounded_input.s0.x.x99.preheader" ], [ %indvars.iv.next314, %"for bounded_input.s0.x.x99" ]
  %4935 = trunc i64 %indvars.iv313 to i32
  %4936 = shl nsw i32 %4935, 6
  %4937 = add i32 %96, %4936
  %4938 = insertelement <64 x i32> undef, i32 %4937, i32 0
  %4939 = shufflevector <64 x i32> %4938, <64 x i32> undef, <64 x i32> zeroinitializer
  %4940 = add nsw <64 x i32> %4939, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %4941 = shufflevector <64 x i32> %4940, <64 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4942 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4941, <4 x i32> %99)
  %4943 = shufflevector <64 x i32> %4940, <64 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4944 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4943, <4 x i32> %99)
  %4945 = shufflevector <64 x i32> %4940, <64 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %4946 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4945, <4 x i32> %99)
  %4947 = shufflevector <64 x i32> %4940, <64 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %4948 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4947, <4 x i32> %99)
  %4949 = shufflevector <64 x i32> %4940, <64 x i32> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %4950 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4949, <4 x i32> %99)
  %4951 = shufflevector <64 x i32> %4940, <64 x i32> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %4952 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4951, <4 x i32> %99)
  %4953 = shufflevector <64 x i32> %4940, <64 x i32> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %4954 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4953, <4 x i32> %99)
  %4955 = shufflevector <64 x i32> %4940, <64 x i32> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %4956 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4955, <4 x i32> %99)
  %4957 = shufflevector <64 x i32> %4940, <64 x i32> undef, <4 x i32> <i32 32, i32 33, i32 34, i32 35>
  %4958 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4957, <4 x i32> %99)
  %4959 = shufflevector <64 x i32> %4940, <64 x i32> undef, <4 x i32> <i32 36, i32 37, i32 38, i32 39>
  %4960 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4959, <4 x i32> %99)
  %4961 = shufflevector <64 x i32> %4940, <64 x i32> undef, <4 x i32> <i32 40, i32 41, i32 42, i32 43>
  %4962 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4961, <4 x i32> %99)
  %4963 = shufflevector <64 x i32> %4940, <64 x i32> undef, <4 x i32> <i32 44, i32 45, i32 46, i32 47>
  %4964 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4963, <4 x i32> %99)
  %4965 = shufflevector <64 x i32> %4940, <64 x i32> undef, <4 x i32> <i32 48, i32 49, i32 50, i32 51>
  %4966 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4965, <4 x i32> %99)
  %4967 = shufflevector <64 x i32> %4940, <64 x i32> undef, <4 x i32> <i32 52, i32 53, i32 54, i32 55>
  %4968 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4967, <4 x i32> %99)
  %4969 = shufflevector <64 x i32> %4940, <64 x i32> undef, <4 x i32> <i32 56, i32 57, i32 58, i32 59>
  %4970 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4969, <4 x i32> %99)
  %4971 = shufflevector <64 x i32> %4940, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %4972 = tail call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %4971, <4 x i32> %99)
  %4973 = shufflevector <4 x i32> %4972, <4 x i32> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %4974 = shufflevector <8 x i32> %4973, <8 x i32> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %4975 = shufflevector <16 x i32> %4974, <16 x i32> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %4976 = shufflevector <32 x i32> %4975, <32 x i32> poison, <64 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 28, i32 29, i32 30, i32 31>
  %4977 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4942, <4 x i32> zeroinitializer)
  %4978 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4944, <4 x i32> zeroinitializer)
  %4979 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4946, <4 x i32> zeroinitializer)
  %4980 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4948, <4 x i32> zeroinitializer)
  %4981 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4950, <4 x i32> zeroinitializer)
  %4982 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4952, <4 x i32> zeroinitializer)
  %4983 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4954, <4 x i32> zeroinitializer)
  %4984 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4956, <4 x i32> zeroinitializer)
  %4985 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4958, <4 x i32> zeroinitializer)
  %4986 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4960, <4 x i32> zeroinitializer)
  %4987 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4962, <4 x i32> zeroinitializer)
  %4988 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4964, <4 x i32> zeroinitializer)
  %4989 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4966, <4 x i32> zeroinitializer)
  %4990 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4968, <4 x i32> zeroinitializer)
  %4991 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4970, <4 x i32> zeroinitializer)
  %4992 = shufflevector <64 x i32> %4976, <64 x i32> undef, <4 x i32> <i32 60, i32 61, i32 62, i32 63>
  %4993 = tail call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %4992, <4 x i32> zeroinitializer)
  %4994 = shufflevector <4 x i32> %4977, <4 x i32> %4978, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4995 = shufflevector <4 x i32> %4979, <4 x i32> %4980, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4996 = shufflevector <4 x i32> %4981, <4 x i32> %4982, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4997 = shufflevector <4 x i32> %4983, <4 x i32> %4984, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4998 = shufflevector <4 x i32> %4985, <4 x i32> %4986, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4999 = shufflevector <4 x i32> %4987, <4 x i32> %4988, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %5000 = shufflevector <4 x i32> %4989, <4 x i32> %4990, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %5001 = shufflevector <4 x i32> %4991, <4 x i32> %4993, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %5002 = shufflevector <8 x i32> %4994, <8 x i32> %4995, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5003 = shufflevector <8 x i32> %4996, <8 x i32> %4997, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5004 = shufflevector <8 x i32> %4998, <8 x i32> %4999, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5005 = shufflevector <8 x i32> %5000, <8 x i32> %5001, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5006 = shufflevector <16 x i32> %5002, <16 x i32> %5003, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5007 = shufflevector <16 x i32> %5004, <16 x i32> %5005, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5008 = shufflevector <32 x i32> %5006, <32 x i32> %5007, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %5009 = add nsw <64 x i32> %5008, %4933
  %5010 = extractelement <64 x i32> %5009, i32 0
  %5011 = sext i32 %5010 to i64
  %5012 = getelementptr inbounds i8, i8* %input17, i64 %5011
  %5013 = load i8, i8* %5012, align 1, !tbaa !386
  %5014 = insertelement <64 x i8> undef, i8 %5013, i32 0
  %5015 = extractelement <64 x i32> %5009, i32 1
  %5016 = sext i32 %5015 to i64
  %5017 = getelementptr inbounds i8, i8* %input17, i64 %5016
  %5018 = load i8, i8* %5017, align 1, !tbaa !386
  %5019 = insertelement <64 x i8> %5014, i8 %5018, i32 1
  %5020 = extractelement <64 x i32> %5009, i32 2
  %5021 = sext i32 %5020 to i64
  %5022 = getelementptr inbounds i8, i8* %input17, i64 %5021
  %5023 = load i8, i8* %5022, align 1, !tbaa !386
  %5024 = insertelement <64 x i8> %5019, i8 %5023, i32 2
  %5025 = extractelement <64 x i32> %5009, i32 3
  %5026 = sext i32 %5025 to i64
  %5027 = getelementptr inbounds i8, i8* %input17, i64 %5026
  %5028 = load i8, i8* %5027, align 1, !tbaa !386
  %5029 = insertelement <64 x i8> %5024, i8 %5028, i32 3
  %5030 = extractelement <64 x i32> %5009, i32 4
  %5031 = sext i32 %5030 to i64
  %5032 = getelementptr inbounds i8, i8* %input17, i64 %5031
  %5033 = load i8, i8* %5032, align 1, !tbaa !386
  %5034 = insertelement <64 x i8> %5029, i8 %5033, i32 4
  %5035 = extractelement <64 x i32> %5009, i32 5
  %5036 = sext i32 %5035 to i64
  %5037 = getelementptr inbounds i8, i8* %input17, i64 %5036
  %5038 = load i8, i8* %5037, align 1, !tbaa !386
  %5039 = insertelement <64 x i8> %5034, i8 %5038, i32 5
  %5040 = extractelement <64 x i32> %5009, i32 6
  %5041 = sext i32 %5040 to i64
  %5042 = getelementptr inbounds i8, i8* %input17, i64 %5041
  %5043 = load i8, i8* %5042, align 1, !tbaa !386
  %5044 = insertelement <64 x i8> %5039, i8 %5043, i32 6
  %5045 = extractelement <64 x i32> %5009, i32 7
  %5046 = sext i32 %5045 to i64
  %5047 = getelementptr inbounds i8, i8* %input17, i64 %5046
  %5048 = load i8, i8* %5047, align 1, !tbaa !386
  %5049 = insertelement <64 x i8> %5044, i8 %5048, i32 7
  %5050 = extractelement <64 x i32> %5009, i32 8
  %5051 = sext i32 %5050 to i64
  %5052 = getelementptr inbounds i8, i8* %input17, i64 %5051
  %5053 = load i8, i8* %5052, align 1, !tbaa !386
  %5054 = insertelement <64 x i8> %5049, i8 %5053, i32 8
  %5055 = extractelement <64 x i32> %5009, i32 9
  %5056 = sext i32 %5055 to i64
  %5057 = getelementptr inbounds i8, i8* %input17, i64 %5056
  %5058 = load i8, i8* %5057, align 1, !tbaa !386
  %5059 = insertelement <64 x i8> %5054, i8 %5058, i32 9
  %5060 = extractelement <64 x i32> %5009, i32 10
  %5061 = sext i32 %5060 to i64
  %5062 = getelementptr inbounds i8, i8* %input17, i64 %5061
  %5063 = load i8, i8* %5062, align 1, !tbaa !386
  %5064 = insertelement <64 x i8> %5059, i8 %5063, i32 10
  %5065 = extractelement <64 x i32> %5009, i32 11
  %5066 = sext i32 %5065 to i64
  %5067 = getelementptr inbounds i8, i8* %input17, i64 %5066
  %5068 = load i8, i8* %5067, align 1, !tbaa !386
  %5069 = insertelement <64 x i8> %5064, i8 %5068, i32 11
  %5070 = extractelement <64 x i32> %5009, i32 12
  %5071 = sext i32 %5070 to i64
  %5072 = getelementptr inbounds i8, i8* %input17, i64 %5071
  %5073 = load i8, i8* %5072, align 1, !tbaa !386
  %5074 = insertelement <64 x i8> %5069, i8 %5073, i32 12
  %5075 = extractelement <64 x i32> %5009, i32 13
  %5076 = sext i32 %5075 to i64
  %5077 = getelementptr inbounds i8, i8* %input17, i64 %5076
  %5078 = load i8, i8* %5077, align 1, !tbaa !386
  %5079 = insertelement <64 x i8> %5074, i8 %5078, i32 13
  %5080 = extractelement <64 x i32> %5009, i32 14
  %5081 = sext i32 %5080 to i64
  %5082 = getelementptr inbounds i8, i8* %input17, i64 %5081
  %5083 = load i8, i8* %5082, align 1, !tbaa !386
  %5084 = insertelement <64 x i8> %5079, i8 %5083, i32 14
  %5085 = extractelement <64 x i32> %5009, i32 15
  %5086 = sext i32 %5085 to i64
  %5087 = getelementptr inbounds i8, i8* %input17, i64 %5086
  %5088 = load i8, i8* %5087, align 1, !tbaa !386
  %5089 = insertelement <64 x i8> %5084, i8 %5088, i32 15
  %5090 = extractelement <64 x i32> %5009, i32 16
  %5091 = sext i32 %5090 to i64
  %5092 = getelementptr inbounds i8, i8* %input17, i64 %5091
  %5093 = load i8, i8* %5092, align 1, !tbaa !386
  %5094 = insertelement <64 x i8> %5089, i8 %5093, i32 16
  %5095 = extractelement <64 x i32> %5009, i32 17
  %5096 = sext i32 %5095 to i64
  %5097 = getelementptr inbounds i8, i8* %input17, i64 %5096
  %5098 = load i8, i8* %5097, align 1, !tbaa !386
  %5099 = insertelement <64 x i8> %5094, i8 %5098, i32 17
  %5100 = extractelement <64 x i32> %5009, i32 18
  %5101 = sext i32 %5100 to i64
  %5102 = getelementptr inbounds i8, i8* %input17, i64 %5101
  %5103 = load i8, i8* %5102, align 1, !tbaa !386
  %5104 = insertelement <64 x i8> %5099, i8 %5103, i32 18
  %5105 = extractelement <64 x i32> %5009, i32 19
  %5106 = sext i32 %5105 to i64
  %5107 = getelementptr inbounds i8, i8* %input17, i64 %5106
  %5108 = load i8, i8* %5107, align 1, !tbaa !386
  %5109 = insertelement <64 x i8> %5104, i8 %5108, i32 19
  %5110 = extractelement <64 x i32> %5009, i32 20
  %5111 = sext i32 %5110 to i64
  %5112 = getelementptr inbounds i8, i8* %input17, i64 %5111
  %5113 = load i8, i8* %5112, align 1, !tbaa !386
  %5114 = insertelement <64 x i8> %5109, i8 %5113, i32 20
  %5115 = extractelement <64 x i32> %5009, i32 21
  %5116 = sext i32 %5115 to i64
  %5117 = getelementptr inbounds i8, i8* %input17, i64 %5116
  %5118 = load i8, i8* %5117, align 1, !tbaa !386
  %5119 = insertelement <64 x i8> %5114, i8 %5118, i32 21
  %5120 = extractelement <64 x i32> %5009, i32 22
  %5121 = sext i32 %5120 to i64
  %5122 = getelementptr inbounds i8, i8* %input17, i64 %5121
  %5123 = load i8, i8* %5122, align 1, !tbaa !386
  %5124 = insertelement <64 x i8> %5119, i8 %5123, i32 22
  %5125 = extractelement <64 x i32> %5009, i32 23
  %5126 = sext i32 %5125 to i64
  %5127 = getelementptr inbounds i8, i8* %input17, i64 %5126
  %5128 = load i8, i8* %5127, align 1, !tbaa !386
  %5129 = insertelement <64 x i8> %5124, i8 %5128, i32 23
  %5130 = extractelement <64 x i32> %5009, i32 24
  %5131 = sext i32 %5130 to i64
  %5132 = getelementptr inbounds i8, i8* %input17, i64 %5131
  %5133 = load i8, i8* %5132, align 1, !tbaa !386
  %5134 = insertelement <64 x i8> %5129, i8 %5133, i32 24
  %5135 = extractelement <64 x i32> %5009, i32 25
  %5136 = sext i32 %5135 to i64
  %5137 = getelementptr inbounds i8, i8* %input17, i64 %5136
  %5138 = load i8, i8* %5137, align 1, !tbaa !386
  %5139 = insertelement <64 x i8> %5134, i8 %5138, i32 25
  %5140 = extractelement <64 x i32> %5009, i32 26
  %5141 = sext i32 %5140 to i64
  %5142 = getelementptr inbounds i8, i8* %input17, i64 %5141
  %5143 = load i8, i8* %5142, align 1, !tbaa !386
  %5144 = insertelement <64 x i8> %5139, i8 %5143, i32 26
  %5145 = extractelement <64 x i32> %5009, i32 27
  %5146 = sext i32 %5145 to i64
  %5147 = getelementptr inbounds i8, i8* %input17, i64 %5146
  %5148 = load i8, i8* %5147, align 1, !tbaa !386
  %5149 = insertelement <64 x i8> %5144, i8 %5148, i32 27
  %5150 = extractelement <64 x i32> %5009, i32 28
  %5151 = sext i32 %5150 to i64
  %5152 = getelementptr inbounds i8, i8* %input17, i64 %5151
  %5153 = load i8, i8* %5152, align 1, !tbaa !386
  %5154 = insertelement <64 x i8> %5149, i8 %5153, i32 28
  %5155 = extractelement <64 x i32> %5009, i32 29
  %5156 = sext i32 %5155 to i64
  %5157 = getelementptr inbounds i8, i8* %input17, i64 %5156
  %5158 = load i8, i8* %5157, align 1, !tbaa !386
  %5159 = insertelement <64 x i8> %5154, i8 %5158, i32 29
  %5160 = extractelement <64 x i32> %5009, i32 30
  %5161 = sext i32 %5160 to i64
  %5162 = getelementptr inbounds i8, i8* %input17, i64 %5161
  %5163 = load i8, i8* %5162, align 1, !tbaa !386
  %5164 = insertelement <64 x i8> %5159, i8 %5163, i32 30
  %5165 = extractelement <64 x i32> %5009, i32 31
  %5166 = sext i32 %5165 to i64
  %5167 = getelementptr inbounds i8, i8* %input17, i64 %5166
  %5168 = load i8, i8* %5167, align 1, !tbaa !386
  %5169 = insertelement <64 x i8> %5164, i8 %5168, i32 31
  %5170 = extractelement <64 x i32> %5009, i32 32
  %5171 = sext i32 %5170 to i64
  %5172 = getelementptr inbounds i8, i8* %input17, i64 %5171
  %5173 = load i8, i8* %5172, align 1, !tbaa !386
  %5174 = insertelement <64 x i8> %5169, i8 %5173, i32 32
  %5175 = extractelement <64 x i32> %5009, i32 33
  %5176 = sext i32 %5175 to i64
  %5177 = getelementptr inbounds i8, i8* %input17, i64 %5176
  %5178 = load i8, i8* %5177, align 1, !tbaa !386
  %5179 = insertelement <64 x i8> %5174, i8 %5178, i32 33
  %5180 = extractelement <64 x i32> %5009, i32 34
  %5181 = sext i32 %5180 to i64
  %5182 = getelementptr inbounds i8, i8* %input17, i64 %5181
  %5183 = load i8, i8* %5182, align 1, !tbaa !386
  %5184 = insertelement <64 x i8> %5179, i8 %5183, i32 34
  %5185 = extractelement <64 x i32> %5009, i32 35
  %5186 = sext i32 %5185 to i64
  %5187 = getelementptr inbounds i8, i8* %input17, i64 %5186
  %5188 = load i8, i8* %5187, align 1, !tbaa !386
  %5189 = insertelement <64 x i8> %5184, i8 %5188, i32 35
  %5190 = extractelement <64 x i32> %5009, i32 36
  %5191 = sext i32 %5190 to i64
  %5192 = getelementptr inbounds i8, i8* %input17, i64 %5191
  %5193 = load i8, i8* %5192, align 1, !tbaa !386
  %5194 = insertelement <64 x i8> %5189, i8 %5193, i32 36
  %5195 = extractelement <64 x i32> %5009, i32 37
  %5196 = sext i32 %5195 to i64
  %5197 = getelementptr inbounds i8, i8* %input17, i64 %5196
  %5198 = load i8, i8* %5197, align 1, !tbaa !386
  %5199 = insertelement <64 x i8> %5194, i8 %5198, i32 37
  %5200 = extractelement <64 x i32> %5009, i32 38
  %5201 = sext i32 %5200 to i64
  %5202 = getelementptr inbounds i8, i8* %input17, i64 %5201
  %5203 = load i8, i8* %5202, align 1, !tbaa !386
  %5204 = insertelement <64 x i8> %5199, i8 %5203, i32 38
  %5205 = extractelement <64 x i32> %5009, i32 39
  %5206 = sext i32 %5205 to i64
  %5207 = getelementptr inbounds i8, i8* %input17, i64 %5206
  %5208 = load i8, i8* %5207, align 1, !tbaa !386
  %5209 = insertelement <64 x i8> %5204, i8 %5208, i32 39
  %5210 = extractelement <64 x i32> %5009, i32 40
  %5211 = sext i32 %5210 to i64
  %5212 = getelementptr inbounds i8, i8* %input17, i64 %5211
  %5213 = load i8, i8* %5212, align 1, !tbaa !386
  %5214 = insertelement <64 x i8> %5209, i8 %5213, i32 40
  %5215 = extractelement <64 x i32> %5009, i32 41
  %5216 = sext i32 %5215 to i64
  %5217 = getelementptr inbounds i8, i8* %input17, i64 %5216
  %5218 = load i8, i8* %5217, align 1, !tbaa !386
  %5219 = insertelement <64 x i8> %5214, i8 %5218, i32 41
  %5220 = extractelement <64 x i32> %5009, i32 42
  %5221 = sext i32 %5220 to i64
  %5222 = getelementptr inbounds i8, i8* %input17, i64 %5221
  %5223 = load i8, i8* %5222, align 1, !tbaa !386
  %5224 = insertelement <64 x i8> %5219, i8 %5223, i32 42
  %5225 = extractelement <64 x i32> %5009, i32 43
  %5226 = sext i32 %5225 to i64
  %5227 = getelementptr inbounds i8, i8* %input17, i64 %5226
  %5228 = load i8, i8* %5227, align 1, !tbaa !386
  %5229 = insertelement <64 x i8> %5224, i8 %5228, i32 43
  %5230 = extractelement <64 x i32> %5009, i32 44
  %5231 = sext i32 %5230 to i64
  %5232 = getelementptr inbounds i8, i8* %input17, i64 %5231
  %5233 = load i8, i8* %5232, align 1, !tbaa !386
  %5234 = insertelement <64 x i8> %5229, i8 %5233, i32 44
  %5235 = extractelement <64 x i32> %5009, i32 45
  %5236 = sext i32 %5235 to i64
  %5237 = getelementptr inbounds i8, i8* %input17, i64 %5236
  %5238 = load i8, i8* %5237, align 1, !tbaa !386
  %5239 = insertelement <64 x i8> %5234, i8 %5238, i32 45
  %5240 = extractelement <64 x i32> %5009, i32 46
  %5241 = sext i32 %5240 to i64
  %5242 = getelementptr inbounds i8, i8* %input17, i64 %5241
  %5243 = load i8, i8* %5242, align 1, !tbaa !386
  %5244 = insertelement <64 x i8> %5239, i8 %5243, i32 46
  %5245 = extractelement <64 x i32> %5009, i32 47
  %5246 = sext i32 %5245 to i64
  %5247 = getelementptr inbounds i8, i8* %input17, i64 %5246
  %5248 = load i8, i8* %5247, align 1, !tbaa !386
  %5249 = insertelement <64 x i8> %5244, i8 %5248, i32 47
  %5250 = extractelement <64 x i32> %5009, i32 48
  %5251 = sext i32 %5250 to i64
  %5252 = getelementptr inbounds i8, i8* %input17, i64 %5251
  %5253 = load i8, i8* %5252, align 1, !tbaa !386
  %5254 = insertelement <64 x i8> %5249, i8 %5253, i32 48
  %5255 = extractelement <64 x i32> %5009, i32 49
  %5256 = sext i32 %5255 to i64
  %5257 = getelementptr inbounds i8, i8* %input17, i64 %5256
  %5258 = load i8, i8* %5257, align 1, !tbaa !386
  %5259 = insertelement <64 x i8> %5254, i8 %5258, i32 49
  %5260 = extractelement <64 x i32> %5009, i32 50
  %5261 = sext i32 %5260 to i64
  %5262 = getelementptr inbounds i8, i8* %input17, i64 %5261
  %5263 = load i8, i8* %5262, align 1, !tbaa !386
  %5264 = insertelement <64 x i8> %5259, i8 %5263, i32 50
  %5265 = extractelement <64 x i32> %5009, i32 51
  %5266 = sext i32 %5265 to i64
  %5267 = getelementptr inbounds i8, i8* %input17, i64 %5266
  %5268 = load i8, i8* %5267, align 1, !tbaa !386
  %5269 = insertelement <64 x i8> %5264, i8 %5268, i32 51
  %5270 = extractelement <64 x i32> %5009, i32 52
  %5271 = sext i32 %5270 to i64
  %5272 = getelementptr inbounds i8, i8* %input17, i64 %5271
  %5273 = load i8, i8* %5272, align 1, !tbaa !386
  %5274 = insertelement <64 x i8> %5269, i8 %5273, i32 52
  %5275 = extractelement <64 x i32> %5009, i32 53
  %5276 = sext i32 %5275 to i64
  %5277 = getelementptr inbounds i8, i8* %input17, i64 %5276
  %5278 = load i8, i8* %5277, align 1, !tbaa !386
  %5279 = insertelement <64 x i8> %5274, i8 %5278, i32 53
  %5280 = extractelement <64 x i32> %5009, i32 54
  %5281 = sext i32 %5280 to i64
  %5282 = getelementptr inbounds i8, i8* %input17, i64 %5281
  %5283 = load i8, i8* %5282, align 1, !tbaa !386
  %5284 = insertelement <64 x i8> %5279, i8 %5283, i32 54
  %5285 = extractelement <64 x i32> %5009, i32 55
  %5286 = sext i32 %5285 to i64
  %5287 = getelementptr inbounds i8, i8* %input17, i64 %5286
  %5288 = load i8, i8* %5287, align 1, !tbaa !386
  %5289 = insertelement <64 x i8> %5284, i8 %5288, i32 55
  %5290 = extractelement <64 x i32> %5009, i32 56
  %5291 = sext i32 %5290 to i64
  %5292 = getelementptr inbounds i8, i8* %input17, i64 %5291
  %5293 = load i8, i8* %5292, align 1, !tbaa !386
  %5294 = insertelement <64 x i8> %5289, i8 %5293, i32 56
  %5295 = extractelement <64 x i32> %5009, i32 57
  %5296 = sext i32 %5295 to i64
  %5297 = getelementptr inbounds i8, i8* %input17, i64 %5296
  %5298 = load i8, i8* %5297, align 1, !tbaa !386
  %5299 = insertelement <64 x i8> %5294, i8 %5298, i32 57
  %5300 = extractelement <64 x i32> %5009, i32 58
  %5301 = sext i32 %5300 to i64
  %5302 = getelementptr inbounds i8, i8* %input17, i64 %5301
  %5303 = load i8, i8* %5302, align 1, !tbaa !386
  %5304 = insertelement <64 x i8> %5299, i8 %5303, i32 58
  %5305 = extractelement <64 x i32> %5009, i32 59
  %5306 = sext i32 %5305 to i64
  %5307 = getelementptr inbounds i8, i8* %input17, i64 %5306
  %5308 = load i8, i8* %5307, align 1, !tbaa !386
  %5309 = insertelement <64 x i8> %5304, i8 %5308, i32 59
  %5310 = extractelement <64 x i32> %5009, i32 60
  %5311 = sext i32 %5310 to i64
  %5312 = getelementptr inbounds i8, i8* %input17, i64 %5311
  %5313 = load i8, i8* %5312, align 1, !tbaa !386
  %5314 = insertelement <64 x i8> %5309, i8 %5313, i32 60
  %5315 = extractelement <64 x i32> %5009, i32 61
  %5316 = sext i32 %5315 to i64
  %5317 = getelementptr inbounds i8, i8* %input17, i64 %5316
  %5318 = load i8, i8* %5317, align 1, !tbaa !386
  %5319 = insertelement <64 x i8> %5314, i8 %5318, i32 61
  %5320 = extractelement <64 x i32> %5009, i32 62
  %5321 = sext i32 %5320 to i64
  %5322 = getelementptr inbounds i8, i8* %input17, i64 %5321
  %5323 = load i8, i8* %5322, align 1, !tbaa !386
  %5324 = insertelement <64 x i8> %5319, i8 %5323, i32 62
  %5325 = extractelement <64 x i32> %5009, i32 63
  %5326 = sext i32 %5325 to i64
  %5327 = getelementptr inbounds i8, i8* %input17, i64 %5326
  %5328 = load i8, i8* %5327, align 1, !tbaa !386
  %5329 = insertelement <64 x i8> %5324, i8 %5328, i32 63
  %5330 = shufflevector <64 x i8> %5329, <64 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5331 = add nsw i64 %indvars.iv313, %4934
  %5332 = shl nsw i64 %5331, 6
  %5333 = getelementptr inbounds i8, i8* %bounded_input54, i64 %5332
  %5334 = bitcast i8* %5333 to <16 x i8>*
  store <16 x i8> %5330, <16 x i8>* %5334, align 16, !tbaa !389
  %5335 = shufflevector <64 x i8> %5329, <64 x i8> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5336 = getelementptr inbounds i8, i8* %5333, i64 16
  %5337 = bitcast i8* %5336 to <16 x i8>*
  store <16 x i8> %5335, <16 x i8>* %5337, align 16, !tbaa !389
  %5338 = shufflevector <64 x i8> %5329, <64 x i8> undef, <16 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %5339 = getelementptr inbounds i8, i8* %5333, i64 32
  %5340 = bitcast i8* %5339 to <16 x i8>*
  store <16 x i8> %5338, <16 x i8>* %5340, align 16, !tbaa !389
  %5341 = shufflevector <64 x i8> %5329, <64 x i8> undef, <16 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %5342 = getelementptr inbounds i8, i8* %5333, i64 48
  %5343 = bitcast i8* %5342 to <16 x i8>*
  store <16 x i8> %5341, <16 x i8>* %5343, align 16, !tbaa !389
  %indvars.iv.next314 = add nuw nsw i64 %indvars.iv313, 1
  %.not218 = icmp eq i64 %indvars.iv.next314, %112
  br i1 %.not218, label %"end for bounded_input.s0.x.x100", label %"for bounded_input.s0.x.x99"

"end for bounded_input.s0.x.x100":                ; preds = %"for bounded_input.s0.x.x99", %"for bounded_input.s0.y.rebased94"
  %indvars.iv.next316 = add nuw nsw i64 %indvars.iv315, 1
  %.not217 = icmp eq i64 %indvars.iv315, %4075
  br i1 %.not217, label %"consume bounded_input102", label %"for bounded_input.s0.y.rebased94"

"consume bounded_input102":                       ; preds = %"end for bounded_input.s0.x.x100", %"end for bounded_input.s0.y.rebased73"
  br i1 %104, label %"for output.s0.x.x115.preheader", label %"end for output.s0.x.x116", !prof !385

"for output.s0.x.x115.preheader":                 ; preds = %"consume bounded_input102"
  %5344 = add nsw i32 %3587, 1
  %5345 = mul nsw i32 %5344, %output.stride.123
  %t518114 = add nsw i32 %5345, %t45827
  %5346 = add nsw i32 %3587, 2
  %5347 = mul nsw i32 %5346, %output.stride.123
  %t520113 = add nsw i32 %5347, %t45827
  %5348 = add nsw i32 %3587, 3
  %5349 = mul nsw i32 %5348, %output.stride.123
  %t522112 = add nsw i32 %5349, %t45827
  %5350 = mul nsw i32 %3587, %output.stride.123
  %t516111 = add nsw i32 %5350, %t45827
  %5351 = sext i32 %t516111 to i64
  %5352 = sext i32 %t518114 to i64
  %5353 = sext i32 %t520113 to i64
  %5354 = sext i32 %t522112 to i64
  br label %"for output.s0.x.x115"

"for output.s0.x.x115":                           ; preds = %"for output.s0.x.x115.preheader", %"for output.s0.x.x115"
  %indvars.iv318 = phi i64 [ 0, %"for output.s0.x.x115.preheader" ], [ %indvars.iv.next319, %"for output.s0.x.x115" ]
  %5355 = shl nuw nsw i64 %indvars.iv318, 6
  %5356 = getelementptr inbounds i8, i8* %bounded_input54, i64 %5355
  %5357 = getelementptr inbounds i8, i8* %5356, i64 1
  %5358 = bitcast i8* %5357 to <16 x i8>*
  %5359 = load <16 x i8>, <16 x i8>* %5358, align 1, !tbaa !389
  %5360 = getelementptr inbounds i8, i8* %5356, i64 17
  %5361 = bitcast i8* %5360 to <16 x i8>*
  %5362 = load <16 x i8>, <16 x i8>* %5361, align 1, !tbaa !389
  %5363 = getelementptr inbounds i8, i8* %5356, i64 33
  %5364 = bitcast i8* %5363 to <16 x i8>*
  %5365 = load <16 x i8>, <16 x i8>* %5364, align 1, !tbaa !389
  %5366 = getelementptr inbounds i8, i8* %5356, i64 49
  %5367 = bitcast i8* %5366 to <16 x i8>*
  %5368 = load <16 x i8>, <16 x i8>* %5367, align 1, !tbaa !389
  %5369 = shufflevector <16 x i8> %5359, <16 x i8> %5362, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5370 = shufflevector <16 x i8> %5365, <16 x i8> %5368, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %t348.s118 = shufflevector <32 x i8> %5369, <32 x i8> %5370, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %5371 = getelementptr inbounds i8, i8* %5356, i64 5
  %5372 = bitcast i8* %5371 to <16 x i8>*
  %5373 = load <16 x i8>, <16 x i8>* %5372, align 1, !tbaa !389
  %5374 = getelementptr inbounds i8, i8* %5356, i64 21
  %5375 = bitcast i8* %5374 to <16 x i8>*
  %5376 = load <16 x i8>, <16 x i8>* %5375, align 1, !tbaa !389
  %5377 = getelementptr inbounds i8, i8* %5356, i64 37
  %5378 = bitcast i8* %5377 to <16 x i8>*
  %5379 = load <16 x i8>, <16 x i8>* %5378, align 1, !tbaa !389
  %5380 = getelementptr inbounds i8, i8* %5356, i64 53
  %5381 = bitcast i8* %5380 to <16 x i8>*
  %5382 = load <16 x i8>, <16 x i8>* %5381, align 1, !tbaa !389
  %5383 = shufflevector <16 x i8> %5373, <16 x i8> %5376, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5384 = shufflevector <16 x i8> %5379, <16 x i8> %5382, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %t349.s119 = shufflevector <32 x i8> %5383, <32 x i8> %5384, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %5385 = add nsw i64 %indvars.iv318, %108
  %5386 = shl nsw i64 %5385, 6
  %5387 = getelementptr inbounds i8, i8* %bounded_input54, i64 %5386
  %5388 = getelementptr inbounds i8, i8* %5387, i64 1
  %5389 = bitcast i8* %5388 to <16 x i8>*
  %5390 = load <16 x i8>, <16 x i8>* %5389, align 1, !tbaa !389
  %5391 = getelementptr inbounds i8, i8* %5387, i64 17
  %5392 = bitcast i8* %5391 to <16 x i8>*
  %5393 = load <16 x i8>, <16 x i8>* %5392, align 1, !tbaa !389
  %5394 = getelementptr inbounds i8, i8* %5387, i64 33
  %5395 = bitcast i8* %5394 to <16 x i8>*
  %5396 = load <16 x i8>, <16 x i8>* %5395, align 1, !tbaa !389
  %5397 = getelementptr inbounds i8, i8* %5387, i64 49
  %5398 = bitcast i8* %5397 to <16 x i8>*
  %5399 = load <16 x i8>, <16 x i8>* %5398, align 1, !tbaa !389
  %5400 = shufflevector <16 x i8> %5390, <16 x i8> %5393, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5401 = shufflevector <16 x i8> %5396, <16 x i8> %5399, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %t351.s121 = shufflevector <32 x i8> %5400, <32 x i8> %5401, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %5402 = getelementptr inbounds i8, i8* %5387, i64 5
  %5403 = bitcast i8* %5402 to <16 x i8>*
  %5404 = load <16 x i8>, <16 x i8>* %5403, align 1, !tbaa !389
  %5405 = getelementptr inbounds i8, i8* %5387, i64 21
  %5406 = bitcast i8* %5405 to <16 x i8>*
  %5407 = load <16 x i8>, <16 x i8>* %5406, align 1, !tbaa !389
  %5408 = getelementptr inbounds i8, i8* %5387, i64 37
  %5409 = bitcast i8* %5408 to <16 x i8>*
  %5410 = load <16 x i8>, <16 x i8>* %5409, align 1, !tbaa !389
  %5411 = getelementptr inbounds i8, i8* %5387, i64 53
  %5412 = bitcast i8* %5411 to <16 x i8>*
  %5413 = load <16 x i8>, <16 x i8>* %5412, align 1, !tbaa !389
  %5414 = shufflevector <16 x i8> %5404, <16 x i8> %5407, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5415 = shufflevector <16 x i8> %5410, <16 x i8> %5413, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %t352.s122 = shufflevector <32 x i8> %5414, <32 x i8> %5415, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %5416 = add nsw i64 %indvars.iv318, %118
  %5417 = shl nsw i64 %5416, 6
  %5418 = getelementptr inbounds i8, i8* %bounded_input54, i64 %5417
  %5419 = getelementptr inbounds i8, i8* %5418, i64 1
  %5420 = bitcast i8* %5419 to <16 x i8>*
  %5421 = load <16 x i8>, <16 x i8>* %5420, align 1, !tbaa !389
  %5422 = getelementptr inbounds i8, i8* %5418, i64 17
  %5423 = bitcast i8* %5422 to <16 x i8>*
  %5424 = load <16 x i8>, <16 x i8>* %5423, align 1, !tbaa !389
  %5425 = getelementptr inbounds i8, i8* %5418, i64 33
  %5426 = bitcast i8* %5425 to <16 x i8>*
  %5427 = load <16 x i8>, <16 x i8>* %5426, align 1, !tbaa !389
  %5428 = getelementptr inbounds i8, i8* %5418, i64 49
  %5429 = bitcast i8* %5428 to <16 x i8>*
  %5430 = load <16 x i8>, <16 x i8>* %5429, align 1, !tbaa !389
  %5431 = shufflevector <16 x i8> %5421, <16 x i8> %5424, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5432 = shufflevector <16 x i8> %5427, <16 x i8> %5430, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %t354.s124 = shufflevector <32 x i8> %5431, <32 x i8> %5432, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %5433 = getelementptr inbounds i8, i8* %5418, i64 5
  %5434 = bitcast i8* %5433 to <16 x i8>*
  %5435 = load <16 x i8>, <16 x i8>* %5434, align 1, !tbaa !389
  %5436 = getelementptr inbounds i8, i8* %5418, i64 21
  %5437 = bitcast i8* %5436 to <16 x i8>*
  %5438 = load <16 x i8>, <16 x i8>* %5437, align 1, !tbaa !389
  %5439 = getelementptr inbounds i8, i8* %5418, i64 37
  %5440 = bitcast i8* %5439 to <16 x i8>*
  %5441 = load <16 x i8>, <16 x i8>* %5440, align 1, !tbaa !389
  %5442 = getelementptr inbounds i8, i8* %5418, i64 53
  %5443 = bitcast i8* %5442 to <16 x i8>*
  %5444 = load <16 x i8>, <16 x i8>* %5443, align 1, !tbaa !389
  %5445 = shufflevector <16 x i8> %5435, <16 x i8> %5438, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5446 = shufflevector <16 x i8> %5441, <16 x i8> %5444, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %t355.s125 = shufflevector <32 x i8> %5445, <32 x i8> %5446, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %5447 = add nsw i64 %indvars.iv318, %106
  %5448 = shl nsw i64 %5447, 6
  %5449 = getelementptr inbounds i8, i8* %bounded_input54, i64 %5448
  %5450 = getelementptr inbounds i8, i8* %5449, i64 1
  %5451 = bitcast i8* %5450 to <16 x i8>*
  %5452 = load <16 x i8>, <16 x i8>* %5451, align 1, !tbaa !389
  %5453 = getelementptr inbounds i8, i8* %5449, i64 17
  %5454 = bitcast i8* %5453 to <16 x i8>*
  %5455 = load <16 x i8>, <16 x i8>* %5454, align 1, !tbaa !389
  %5456 = getelementptr inbounds i8, i8* %5449, i64 33
  %5457 = bitcast i8* %5456 to <16 x i8>*
  %5458 = load <16 x i8>, <16 x i8>* %5457, align 1, !tbaa !389
  %5459 = getelementptr inbounds i8, i8* %5449, i64 49
  %5460 = bitcast i8* %5459 to <16 x i8>*
  %5461 = load <16 x i8>, <16 x i8>* %5460, align 1, !tbaa !389
  %5462 = shufflevector <16 x i8> %5452, <16 x i8> %5455, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5463 = shufflevector <16 x i8> %5458, <16 x i8> %5461, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %t357.s127 = shufflevector <32 x i8> %5462, <32 x i8> %5463, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %5464 = getelementptr inbounds i8, i8* %5449, i64 5
  %5465 = bitcast i8* %5464 to <16 x i8>*
  %5466 = load <16 x i8>, <16 x i8>* %5465, align 1, !tbaa !389
  %5467 = getelementptr inbounds i8, i8* %5449, i64 21
  %5468 = bitcast i8* %5467 to <16 x i8>*
  %5469 = load <16 x i8>, <16 x i8>* %5468, align 1, !tbaa !389
  %5470 = getelementptr inbounds i8, i8* %5449, i64 37
  %5471 = bitcast i8* %5470 to <16 x i8>*
  %5472 = load <16 x i8>, <16 x i8>* %5471, align 1, !tbaa !389
  %5473 = getelementptr inbounds i8, i8* %5449, i64 53
  %5474 = bitcast i8* %5473 to <16 x i8>*
  %5475 = load <16 x i8>, <16 x i8>* %5474, align 1, !tbaa !389
  %5476 = shufflevector <16 x i8> %5466, <16 x i8> %5469, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5477 = shufflevector <16 x i8> %5472, <16 x i8> %5475, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %t358.s128 = shufflevector <32 x i8> %5476, <32 x i8> %5477, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %5478 = add nsw i64 %indvars.iv318, %105
  %5479 = shl nsw i64 %5478, 6
  %5480 = getelementptr inbounds i8, i8* %bounded_input54, i64 %5479
  %5481 = getelementptr inbounds i8, i8* %5480, i64 1
  %5482 = bitcast i8* %5481 to <16 x i8>*
  %5483 = load <16 x i8>, <16 x i8>* %5482, align 1, !tbaa !389
  %5484 = getelementptr inbounds i8, i8* %5480, i64 17
  %5485 = bitcast i8* %5484 to <16 x i8>*
  %5486 = load <16 x i8>, <16 x i8>* %5485, align 1, !tbaa !389
  %5487 = getelementptr inbounds i8, i8* %5480, i64 33
  %5488 = bitcast i8* %5487 to <16 x i8>*
  %5489 = load <16 x i8>, <16 x i8>* %5488, align 1, !tbaa !389
  %5490 = getelementptr inbounds i8, i8* %5480, i64 49
  %5491 = bitcast i8* %5490 to <16 x i8>*
  %5492 = load <16 x i8>, <16 x i8>* %5491, align 1, !tbaa !389
  %5493 = shufflevector <16 x i8> %5483, <16 x i8> %5486, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5494 = shufflevector <16 x i8> %5489, <16 x i8> %5492, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %t359.s129 = shufflevector <32 x i8> %5493, <32 x i8> %5494, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %5495 = getelementptr inbounds i8, i8* %5480, i64 5
  %5496 = bitcast i8* %5495 to <16 x i8>*
  %5497 = load <16 x i8>, <16 x i8>* %5496, align 1, !tbaa !389
  %5498 = getelementptr inbounds i8, i8* %5480, i64 21
  %5499 = bitcast i8* %5498 to <16 x i8>*
  %5500 = load <16 x i8>, <16 x i8>* %5499, align 1, !tbaa !389
  %5501 = getelementptr inbounds i8, i8* %5480, i64 37
  %5502 = bitcast i8* %5501 to <16 x i8>*
  %5503 = load <16 x i8>, <16 x i8>* %5502, align 1, !tbaa !389
  %5504 = getelementptr inbounds i8, i8* %5480, i64 53
  %5505 = bitcast i8* %5504 to <16 x i8>*
  %5506 = load <16 x i8>, <16 x i8>* %5505, align 1, !tbaa !389
  %5507 = shufflevector <16 x i8> %5497, <16 x i8> %5500, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5508 = shufflevector <16 x i8> %5503, <16 x i8> %5506, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %t360.s130 = shufflevector <32 x i8> %5507, <32 x i8> %5508, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %5509 = getelementptr inbounds i8, i8* %5480, i64 2
  %5510 = bitcast i8* %5509 to <16 x i8>*
  %5511 = load <16 x i8>, <16 x i8>* %5510, align 2, !tbaa !389
  %5512 = getelementptr inbounds i8, i8* %5480, i64 18
  %5513 = bitcast i8* %5512 to <16 x i8>*
  %5514 = load <16 x i8>, <16 x i8>* %5513, align 2, !tbaa !389
  %5515 = getelementptr inbounds i8, i8* %5480, i64 34
  %5516 = bitcast i8* %5515 to <16 x i8>*
  %5517 = load <16 x i8>, <16 x i8>* %5516, align 2, !tbaa !389
  %5518 = getelementptr inbounds i8, i8* %5480, i64 50
  %5519 = bitcast i8* %5518 to <16 x i8>*
  %5520 = load <16 x i8>, <16 x i8>* %5519, align 2, !tbaa !389
  %5521 = shufflevector <16 x i8> %5511, <16 x i8> %5514, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5522 = shufflevector <16 x i8> %5517, <16 x i8> %5520, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %t361.s131 = shufflevector <32 x i8> %5521, <32 x i8> %5522, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %5523 = getelementptr inbounds i8, i8* %5480, i64 3
  %5524 = bitcast i8* %5523 to <16 x i8>*
  %5525 = load <16 x i8>, <16 x i8>* %5524, align 1, !tbaa !389
  %5526 = getelementptr inbounds i8, i8* %5480, i64 19
  %5527 = bitcast i8* %5526 to <16 x i8>*
  %5528 = load <16 x i8>, <16 x i8>* %5527, align 1, !tbaa !389
  %5529 = getelementptr inbounds i8, i8* %5480, i64 35
  %5530 = bitcast i8* %5529 to <16 x i8>*
  %5531 = load <16 x i8>, <16 x i8>* %5530, align 1, !tbaa !389
  %5532 = getelementptr inbounds i8, i8* %5480, i64 51
  %5533 = bitcast i8* %5532 to <16 x i8>*
  %5534 = load <16 x i8>, <16 x i8>* %5533, align 1, !tbaa !389
  %5535 = shufflevector <16 x i8> %5525, <16 x i8> %5528, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5536 = shufflevector <16 x i8> %5531, <16 x i8> %5534, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %t362.s132 = shufflevector <32 x i8> %5535, <32 x i8> %5536, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %5537 = getelementptr inbounds i8, i8* %5480, i64 4
  %5538 = bitcast i8* %5537 to <16 x i8>*
  %5539 = load <16 x i8>, <16 x i8>* %5538, align 4, !tbaa !389
  %5540 = getelementptr inbounds i8, i8* %5480, i64 20
  %5541 = bitcast i8* %5540 to <16 x i8>*
  %5542 = load <16 x i8>, <16 x i8>* %5541, align 4, !tbaa !389
  %5543 = getelementptr inbounds i8, i8* %5480, i64 36
  %5544 = bitcast i8* %5543 to <16 x i8>*
  %5545 = load <16 x i8>, <16 x i8>* %5544, align 4, !tbaa !389
  %5546 = getelementptr inbounds i8, i8* %5480, i64 52
  %5547 = bitcast i8* %5546 to <16 x i8>*
  %5548 = load <16 x i8>, <16 x i8>* %5547, align 4, !tbaa !389
  %5549 = shufflevector <16 x i8> %5539, <16 x i8> %5542, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5550 = shufflevector <16 x i8> %5545, <16 x i8> %5548, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %t363.s133 = shufflevector <32 x i8> %5549, <32 x i8> %5550, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %5551 = bitcast <64 x i8> %t348.s118 to <8 x i64>
  %5552 = shufflevector <8 x i64> %5551, <8 x i64> undef, <1 x i32> zeroinitializer
  %5553 = bitcast <1 x i64> %5552 to <8 x i8>
  %5554 = shufflevector <8 x i64> %5551, <8 x i64> undef, <1 x i32> <i32 1>
  %5555 = bitcast <1 x i64> %5554 to <8 x i8>
  %5556 = shufflevector <8 x i64> %5551, <8 x i64> undef, <1 x i32> <i32 2>
  %5557 = bitcast <1 x i64> %5556 to <8 x i8>
  %5558 = shufflevector <8 x i64> %5551, <8 x i64> undef, <1 x i32> <i32 3>
  %5559 = bitcast <1 x i64> %5558 to <8 x i8>
  %5560 = shufflevector <8 x i64> %5551, <8 x i64> undef, <1 x i32> <i32 4>
  %5561 = bitcast <1 x i64> %5560 to <8 x i8>
  %5562 = shufflevector <8 x i64> %5551, <8 x i64> undef, <1 x i32> <i32 5>
  %5563 = bitcast <1 x i64> %5562 to <8 x i8>
  %5564 = shufflevector <8 x i64> %5551, <8 x i64> undef, <1 x i32> <i32 6>
  %5565 = bitcast <1 x i64> %5564 to <8 x i8>
  %5566 = shufflevector <8 x i64> %5551, <8 x i64> undef, <1 x i32> <i32 7>
  %5567 = bitcast <1 x i64> %5566 to <8 x i8>
  %5568 = bitcast <64 x i8> %t349.s119 to <8 x i64>
  %5569 = shufflevector <8 x i64> %5568, <8 x i64> undef, <1 x i32> zeroinitializer
  %5570 = bitcast <1 x i64> %5569 to <8 x i8>
  %5571 = shufflevector <8 x i64> %5568, <8 x i64> undef, <1 x i32> <i32 1>
  %5572 = bitcast <1 x i64> %5571 to <8 x i8>
  %5573 = shufflevector <8 x i64> %5568, <8 x i64> undef, <1 x i32> <i32 2>
  %5574 = bitcast <1 x i64> %5573 to <8 x i8>
  %5575 = shufflevector <8 x i64> %5568, <8 x i64> undef, <1 x i32> <i32 3>
  %5576 = bitcast <1 x i64> %5575 to <8 x i8>
  %5577 = shufflevector <8 x i64> %5568, <8 x i64> undef, <1 x i32> <i32 4>
  %5578 = bitcast <1 x i64> %5577 to <8 x i8>
  %5579 = shufflevector <8 x i64> %5568, <8 x i64> undef, <1 x i32> <i32 5>
  %5580 = bitcast <1 x i64> %5579 to <8 x i8>
  %5581 = shufflevector <8 x i64> %5568, <8 x i64> undef, <1 x i32> <i32 6>
  %5582 = bitcast <1 x i64> %5581 to <8 x i8>
  %5583 = shufflevector <8 x i64> %5568, <8 x i64> undef, <1 x i32> <i32 7>
  %5584 = bitcast <1 x i64> %5583 to <8 x i8>
  %5585 = bitcast <64 x i8> %t351.s121 to <8 x i64>
  %5586 = shufflevector <8 x i64> %5585, <8 x i64> undef, <1 x i32> zeroinitializer
  %5587 = bitcast <1 x i64> %5586 to <8 x i8>
  %5588 = shufflevector <8 x i64> %5585, <8 x i64> undef, <1 x i32> <i32 1>
  %5589 = bitcast <1 x i64> %5588 to <8 x i8>
  %5590 = shufflevector <8 x i64> %5585, <8 x i64> undef, <1 x i32> <i32 2>
  %5591 = bitcast <1 x i64> %5590 to <8 x i8>
  %5592 = shufflevector <8 x i64> %5585, <8 x i64> undef, <1 x i32> <i32 3>
  %5593 = bitcast <1 x i64> %5592 to <8 x i8>
  %5594 = shufflevector <8 x i64> %5585, <8 x i64> undef, <1 x i32> <i32 4>
  %5595 = bitcast <1 x i64> %5594 to <8 x i8>
  %5596 = shufflevector <8 x i64> %5585, <8 x i64> undef, <1 x i32> <i32 5>
  %5597 = bitcast <1 x i64> %5596 to <8 x i8>
  %5598 = shufflevector <8 x i64> %5585, <8 x i64> undef, <1 x i32> <i32 6>
  %5599 = bitcast <1 x i64> %5598 to <8 x i8>
  %5600 = shufflevector <8 x i64> %5585, <8 x i64> undef, <1 x i32> <i32 7>
  %5601 = bitcast <1 x i64> %5600 to <8 x i8>
  %5602 = bitcast <64 x i8> %t352.s122 to <8 x i64>
  %5603 = shufflevector <8 x i64> %5602, <8 x i64> undef, <1 x i32> zeroinitializer
  %5604 = bitcast <1 x i64> %5603 to <8 x i8>
  %5605 = shufflevector <8 x i64> %5602, <8 x i64> undef, <1 x i32> <i32 1>
  %5606 = bitcast <1 x i64> %5605 to <8 x i8>
  %5607 = shufflevector <8 x i64> %5602, <8 x i64> undef, <1 x i32> <i32 2>
  %5608 = bitcast <1 x i64> %5607 to <8 x i8>
  %5609 = shufflevector <8 x i64> %5602, <8 x i64> undef, <1 x i32> <i32 3>
  %5610 = bitcast <1 x i64> %5609 to <8 x i8>
  %5611 = shufflevector <8 x i64> %5602, <8 x i64> undef, <1 x i32> <i32 4>
  %5612 = bitcast <1 x i64> %5611 to <8 x i8>
  %5613 = shufflevector <8 x i64> %5602, <8 x i64> undef, <1 x i32> <i32 5>
  %5614 = bitcast <1 x i64> %5613 to <8 x i8>
  %5615 = shufflevector <8 x i64> %5602, <8 x i64> undef, <1 x i32> <i32 6>
  %5616 = bitcast <1 x i64> %5615 to <8 x i8>
  %5617 = shufflevector <8 x i64> %5602, <8 x i64> undef, <1 x i32> <i32 7>
  %5618 = bitcast <1 x i64> %5617 to <8 x i8>
  %5619 = bitcast <64 x i8> %t354.s124 to <8 x i64>
  %5620 = shufflevector <8 x i64> %5619, <8 x i64> undef, <1 x i32> zeroinitializer
  %t617 = bitcast <1 x i64> %5620 to <8 x i8>
  %5621 = bitcast <64 x i8> %t355.s125 to <8 x i64>
  %5622 = shufflevector <8 x i64> %5621, <8 x i64> undef, <1 x i32> zeroinitializer
  %t618 = bitcast <1 x i64> %5622 to <8 x i8>
  %5623 = bitcast <64 x i8> %t357.s127 to <8 x i64>
  %5624 = shufflevector <8 x i64> %5623, <8 x i64> undef, <1 x i32> zeroinitializer
  %t619 = bitcast <1 x i64> %5624 to <8 x i8>
  %5625 = bitcast <64 x i8> %t358.s128 to <8 x i64>
  %5626 = shufflevector <8 x i64> %5625, <8 x i64> undef, <1 x i32> zeroinitializer
  %t620 = bitcast <1 x i64> %5626 to <8 x i8>
  %5627 = shufflevector <8 x i64> %5619, <8 x i64> undef, <1 x i32> <i32 1>
  %t625 = bitcast <1 x i64> %5627 to <8 x i8>
  %5628 = shufflevector <8 x i64> %5621, <8 x i64> undef, <1 x i32> <i32 1>
  %t626 = bitcast <1 x i64> %5628 to <8 x i8>
  %5629 = shufflevector <8 x i64> %5623, <8 x i64> undef, <1 x i32> <i32 1>
  %t627 = bitcast <1 x i64> %5629 to <8 x i8>
  %5630 = shufflevector <8 x i64> %5625, <8 x i64> undef, <1 x i32> <i32 1>
  %t628 = bitcast <1 x i64> %5630 to <8 x i8>
  %5631 = bitcast <64 x i8> %t359.s129 to <8 x i64>
  %5632 = shufflevector <8 x i64> %5631, <8 x i64> undef, <1 x i32> zeroinitializer
  %t629 = bitcast <1 x i64> %5632 to <8 x i8>
  %5633 = bitcast <64 x i8> %t360.s130 to <8 x i64>
  %5634 = shufflevector <8 x i64> %5633, <8 x i64> undef, <1 x i32> zeroinitializer
  %t630 = bitcast <1 x i64> %5634 to <8 x i8>
  %5635 = bitcast <64 x i8> %t361.s131 to <8 x i64>
  %5636 = shufflevector <8 x i64> %5635, <8 x i64> undef, <1 x i32> zeroinitializer
  %t631 = bitcast <1 x i64> %5636 to <8 x i8>
  %5637 = bitcast <64 x i8> %t362.s132 to <8 x i64>
  %5638 = shufflevector <8 x i64> %5637, <8 x i64> undef, <1 x i32> zeroinitializer
  %t632 = bitcast <1 x i64> %5638 to <8 x i8>
  %5639 = bitcast <64 x i8> %t363.s133 to <8 x i64>
  %5640 = shufflevector <8 x i64> %5639, <8 x i64> undef, <1 x i32> zeroinitializer
  %t633 = bitcast <1 x i64> %5640 to <8 x i8>
  %5641 = shufflevector <8 x i64> %5631, <8 x i64> undef, <1 x i32> <i32 1>
  %t634 = bitcast <1 x i64> %5641 to <8 x i8>
  %5642 = shufflevector <8 x i64> %5633, <8 x i64> undef, <1 x i32> <i32 1>
  %t635 = bitcast <1 x i64> %5642 to <8 x i8>
  %5643 = shufflevector <8 x i64> %5635, <8 x i64> undef, <1 x i32> <i32 1>
  %t636 = bitcast <1 x i64> %5643 to <8 x i8>
  %5644 = shufflevector <8 x i64> %5637, <8 x i64> undef, <1 x i32> <i32 1>
  %t637 = bitcast <1 x i64> %5644 to <8 x i8>
  %5645 = shufflevector <8 x i64> %5639, <8 x i64> undef, <1 x i32> <i32 1>
  %t638 = bitcast <1 x i64> %5645 to <8 x i8>
  %5646 = shufflevector <8 x i64> %5619, <8 x i64> undef, <1 x i32> <i32 2>
  %t643 = bitcast <1 x i64> %5646 to <8 x i8>
  %5647 = shufflevector <8 x i64> %5621, <8 x i64> undef, <1 x i32> <i32 2>
  %t644 = bitcast <1 x i64> %5647 to <8 x i8>
  %5648 = shufflevector <8 x i64> %5623, <8 x i64> undef, <1 x i32> <i32 2>
  %t645 = bitcast <1 x i64> %5648 to <8 x i8>
  %5649 = shufflevector <8 x i64> %5625, <8 x i64> undef, <1 x i32> <i32 2>
  %t646 = bitcast <1 x i64> %5649 to <8 x i8>
  %5650 = shufflevector <8 x i64> %5619, <8 x i64> undef, <1 x i32> <i32 3>
  %t651 = bitcast <1 x i64> %5650 to <8 x i8>
  %5651 = shufflevector <8 x i64> %5621, <8 x i64> undef, <1 x i32> <i32 3>
  %t652 = bitcast <1 x i64> %5651 to <8 x i8>
  %5652 = shufflevector <8 x i64> %5623, <8 x i64> undef, <1 x i32> <i32 3>
  %t653 = bitcast <1 x i64> %5652 to <8 x i8>
  %5653 = shufflevector <8 x i64> %5625, <8 x i64> undef, <1 x i32> <i32 3>
  %t654 = bitcast <1 x i64> %5653 to <8 x i8>
  %5654 = shufflevector <8 x i64> %5631, <8 x i64> undef, <1 x i32> <i32 2>
  %t655 = bitcast <1 x i64> %5654 to <8 x i8>
  %5655 = shufflevector <8 x i64> %5633, <8 x i64> undef, <1 x i32> <i32 2>
  %t656 = bitcast <1 x i64> %5655 to <8 x i8>
  %5656 = shufflevector <8 x i64> %5635, <8 x i64> undef, <1 x i32> <i32 2>
  %t657 = bitcast <1 x i64> %5656 to <8 x i8>
  %5657 = shufflevector <8 x i64> %5637, <8 x i64> undef, <1 x i32> <i32 2>
  %t658 = bitcast <1 x i64> %5657 to <8 x i8>
  %5658 = shufflevector <8 x i64> %5639, <8 x i64> undef, <1 x i32> <i32 2>
  %t659 = bitcast <1 x i64> %5658 to <8 x i8>
  %5659 = shufflevector <8 x i64> %5631, <8 x i64> undef, <1 x i32> <i32 3>
  %t660 = bitcast <1 x i64> %5659 to <8 x i8>
  %5660 = shufflevector <8 x i64> %5633, <8 x i64> undef, <1 x i32> <i32 3>
  %t661 = bitcast <1 x i64> %5660 to <8 x i8>
  %5661 = shufflevector <8 x i64> %5635, <8 x i64> undef, <1 x i32> <i32 3>
  %t662 = bitcast <1 x i64> %5661 to <8 x i8>
  %5662 = shufflevector <8 x i64> %5637, <8 x i64> undef, <1 x i32> <i32 3>
  %t663 = bitcast <1 x i64> %5662 to <8 x i8>
  %5663 = shufflevector <8 x i64> %5639, <8 x i64> undef, <1 x i32> <i32 3>
  %t664 = bitcast <1 x i64> %5663 to <8 x i8>
  %5664 = shufflevector <8 x i64> %5619, <8 x i64> undef, <1 x i32> <i32 4>
  %t669 = bitcast <1 x i64> %5664 to <8 x i8>
  %5665 = shufflevector <8 x i64> %5621, <8 x i64> undef, <1 x i32> <i32 4>
  %t670 = bitcast <1 x i64> %5665 to <8 x i8>
  %5666 = shufflevector <8 x i64> %5623, <8 x i64> undef, <1 x i32> <i32 4>
  %t671 = bitcast <1 x i64> %5666 to <8 x i8>
  %5667 = shufflevector <8 x i64> %5625, <8 x i64> undef, <1 x i32> <i32 4>
  %t672 = bitcast <1 x i64> %5667 to <8 x i8>
  %5668 = shufflevector <8 x i64> %5619, <8 x i64> undef, <1 x i32> <i32 5>
  %t677 = bitcast <1 x i64> %5668 to <8 x i8>
  %5669 = shufflevector <8 x i64> %5621, <8 x i64> undef, <1 x i32> <i32 5>
  %t678 = bitcast <1 x i64> %5669 to <8 x i8>
  %5670 = shufflevector <8 x i64> %5623, <8 x i64> undef, <1 x i32> <i32 5>
  %t679 = bitcast <1 x i64> %5670 to <8 x i8>
  %5671 = shufflevector <8 x i64> %5625, <8 x i64> undef, <1 x i32> <i32 5>
  %t680 = bitcast <1 x i64> %5671 to <8 x i8>
  %5672 = shufflevector <8 x i64> %5631, <8 x i64> undef, <1 x i32> <i32 4>
  %t681 = bitcast <1 x i64> %5672 to <8 x i8>
  %5673 = shufflevector <8 x i64> %5633, <8 x i64> undef, <1 x i32> <i32 4>
  %t682 = bitcast <1 x i64> %5673 to <8 x i8>
  %5674 = shufflevector <8 x i64> %5635, <8 x i64> undef, <1 x i32> <i32 4>
  %t683 = bitcast <1 x i64> %5674 to <8 x i8>
  %5675 = shufflevector <8 x i64> %5637, <8 x i64> undef, <1 x i32> <i32 4>
  %t684 = bitcast <1 x i64> %5675 to <8 x i8>
  %5676 = shufflevector <8 x i64> %5639, <8 x i64> undef, <1 x i32> <i32 4>
  %t685 = bitcast <1 x i64> %5676 to <8 x i8>
  %5677 = shufflevector <8 x i64> %5631, <8 x i64> undef, <1 x i32> <i32 5>
  %t686 = bitcast <1 x i64> %5677 to <8 x i8>
  %5678 = shufflevector <8 x i64> %5633, <8 x i64> undef, <1 x i32> <i32 5>
  %t687 = bitcast <1 x i64> %5678 to <8 x i8>
  %5679 = shufflevector <8 x i64> %5635, <8 x i64> undef, <1 x i32> <i32 5>
  %t688 = bitcast <1 x i64> %5679 to <8 x i8>
  %5680 = shufflevector <8 x i64> %5637, <8 x i64> undef, <1 x i32> <i32 5>
  %t689 = bitcast <1 x i64> %5680 to <8 x i8>
  %5681 = shufflevector <8 x i64> %5639, <8 x i64> undef, <1 x i32> <i32 5>
  %t690 = bitcast <1 x i64> %5681 to <8 x i8>
  %5682 = shufflevector <8 x i64> %5619, <8 x i64> undef, <1 x i32> <i32 6>
  %t695 = bitcast <1 x i64> %5682 to <8 x i8>
  %5683 = shufflevector <8 x i64> %5621, <8 x i64> undef, <1 x i32> <i32 6>
  %t696 = bitcast <1 x i64> %5683 to <8 x i8>
  %5684 = shufflevector <8 x i64> %5623, <8 x i64> undef, <1 x i32> <i32 6>
  %t697 = bitcast <1 x i64> %5684 to <8 x i8>
  %5685 = shufflevector <8 x i64> %5625, <8 x i64> undef, <1 x i32> <i32 6>
  %t698 = bitcast <1 x i64> %5685 to <8 x i8>
  %5686 = shufflevector <8 x i64> %5619, <8 x i64> undef, <1 x i32> <i32 7>
  %t703 = bitcast <1 x i64> %5686 to <8 x i8>
  %5687 = shufflevector <8 x i64> %5621, <8 x i64> undef, <1 x i32> <i32 7>
  %t704 = bitcast <1 x i64> %5687 to <8 x i8>
  %5688 = shufflevector <8 x i64> %5623, <8 x i64> undef, <1 x i32> <i32 7>
  %t705 = bitcast <1 x i64> %5688 to <8 x i8>
  %5689 = shufflevector <8 x i64> %5625, <8 x i64> undef, <1 x i32> <i32 7>
  %t706 = bitcast <1 x i64> %5689 to <8 x i8>
  %5690 = shufflevector <8 x i64> %5631, <8 x i64> undef, <1 x i32> <i32 6>
  %t707 = bitcast <1 x i64> %5690 to <8 x i8>
  %5691 = shufflevector <8 x i64> %5633, <8 x i64> undef, <1 x i32> <i32 6>
  %t708 = bitcast <1 x i64> %5691 to <8 x i8>
  %5692 = shufflevector <8 x i64> %5635, <8 x i64> undef, <1 x i32> <i32 6>
  %t709 = bitcast <1 x i64> %5692 to <8 x i8>
  %5693 = shufflevector <8 x i64> %5637, <8 x i64> undef, <1 x i32> <i32 6>
  %t710 = bitcast <1 x i64> %5693 to <8 x i8>
  %5694 = shufflevector <8 x i64> %5639, <8 x i64> undef, <1 x i32> <i32 6>
  %t711 = bitcast <1 x i64> %5694 to <8 x i8>
  %5695 = shufflevector <8 x i64> %5631, <8 x i64> undef, <1 x i32> <i32 7>
  %t712 = bitcast <1 x i64> %5695 to <8 x i8>
  %5696 = shufflevector <8 x i64> %5633, <8 x i64> undef, <1 x i32> <i32 7>
  %t713 = bitcast <1 x i64> %5696 to <8 x i8>
  %5697 = shufflevector <8 x i64> %5635, <8 x i64> undef, <1 x i32> <i32 7>
  %t714 = bitcast <1 x i64> %5697 to <8 x i8>
  %5698 = shufflevector <8 x i64> %5637, <8 x i64> undef, <1 x i32> <i32 7>
  %t715 = bitcast <1 x i64> %5698 to <8 x i8>
  %5699 = shufflevector <8 x i64> %5639, <8 x i64> undef, <1 x i32> <i32 7>
  %t716 = bitcast <1 x i64> %5699 to <8 x i8>
  %5700 = getelementptr inbounds i8, i8* %5356, i64 3
  %5701 = bitcast i8* %5700 to <8 x i8>*
  %5702 = load <8 x i8>, <8 x i8>* %5701, align 1, !tbaa !389
  %5703 = getelementptr inbounds i8, i8* %5356, i64 2
  %5704 = bitcast i8* %5703 to <8 x i8>*
  %5705 = load <8 x i8>, <8 x i8>* %5704, align 2, !tbaa !389
  %5706 = getelementptr inbounds i8, i8* %5356, i64 4
  %5707 = bitcast i8* %5706 to <8 x i8>*
  %5708 = load <8 x i8>, <8 x i8>* %5707, align 4, !tbaa !389
  %5709 = getelementptr inbounds i8, i8* %5387, i64 3
  %5710 = bitcast i8* %5709 to <8 x i8>*
  %5711 = load <8 x i8>, <8 x i8>* %5710, align 1, !tbaa !389
  %5712 = getelementptr inbounds i8, i8* %5387, i64 2
  %5713 = bitcast i8* %5712 to <8 x i8>*
  %5714 = load <8 x i8>, <8 x i8>* %5713, align 2, !tbaa !389
  %5715 = getelementptr inbounds i8, i8* %5387, i64 4
  %5716 = bitcast i8* %5715 to <8 x i8>*
  %5717 = load <8 x i8>, <8 x i8>* %5716, align 4, !tbaa !389
  %5718 = getelementptr inbounds i8, i8* %5418, i64 3
  %5719 = bitcast i8* %5718 to <8 x i8>*
  %5720 = load <8 x i8>, <8 x i8>* %5719, align 1, !tbaa !389
  %5721 = getelementptr inbounds i8, i8* %5418, i64 2
  %5722 = bitcast i8* %5721 to <8 x i8>*
  %5723 = load <8 x i8>, <8 x i8>* %5722, align 2, !tbaa !389
  %5724 = getelementptr inbounds i8, i8* %5418, i64 4
  %5725 = bitcast i8* %5724 to <8 x i8>*
  %5726 = load <8 x i8>, <8 x i8>* %5725, align 4, !tbaa !389
  %5727 = getelementptr inbounds i8, i8* %5449, i64 3
  %5728 = bitcast i8* %5727 to <8 x i8>*
  %5729 = load <8 x i8>, <8 x i8>* %5728, align 1, !tbaa !389
  %5730 = getelementptr inbounds i8, i8* %5449, i64 2
  %5731 = bitcast i8* %5730 to <8 x i8>*
  %5732 = load <8 x i8>, <8 x i8>* %5731, align 2, !tbaa !389
  %5733 = getelementptr inbounds i8, i8* %5449, i64 4
  %5734 = bitcast i8* %5733 to <8 x i8>*
  %5735 = load <8 x i8>, <8 x i8>* %5734, align 4, !tbaa !389
  %5736 = zext <8 x i8> %t620 to <8 x i16>
  %5737 = zext <8 x i8> %5735 to <8 x i16>
  %5738 = zext <8 x i8> %5732 to <8 x i16>
  %5739 = zext <8 x i8> %t619 to <8 x i16>
  %5740 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %5729) #12
  %5741 = add nuw nsw <8 x i16> %5736, %5739
  %5742 = add nuw nsw <8 x i16> %5741, %5738
  %5743 = add <8 x i16> %5742, %5740
  %5744 = add <8 x i16> %5743, %5737
  %5745 = zext <8 x i8> %t618 to <8 x i16>
  %5746 = zext <8 x i8> %5726 to <8 x i16>
  %5747 = zext <8 x i8> %5723 to <8 x i16>
  %5748 = zext <8 x i8> %t617 to <8 x i16>
  %5749 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %5720) #12
  %5750 = add nuw nsw <8 x i16> %5745, %5748
  %5751 = add nuw nsw <8 x i16> %5750, %5747
  %5752 = add nuw nsw <8 x i16> %5751, %5746
  %5753 = add <8 x i16> %5752, %5749
  %5754 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %5744, <8 x i16> %5753) #12
  %5755 = zext <8 x i8> %5604 to <8 x i16>
  %5756 = zext <8 x i8> %5717 to <8 x i16>
  %5757 = zext <8 x i8> %5714 to <8 x i16>
  %5758 = zext <8 x i8> %5587 to <8 x i16>
  %5759 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %5711) #12
  %5760 = add nuw nsw <8 x i16> %5755, %5758
  %5761 = add nuw nsw <8 x i16> %5760, %5757
  %5762 = add nuw nsw <8 x i16> %5761, %5756
  %5763 = add <8 x i16> %5762, %5759
  %5764 = shl <8 x i16> %5763, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %5765 = zext <8 x i8> %5570 to <8 x i16>
  %5766 = zext <8 x i8> %5708 to <8 x i16>
  %5767 = zext <8 x i8> %5705 to <8 x i16>
  %5768 = zext <8 x i8> %5553 to <8 x i16>
  %5769 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %5702) #12
  %5770 = add nuw nsw <8 x i16> %5765, %5768
  %5771 = add nuw nsw <8 x i16> %5770, %5767
  %5772 = add nuw nsw <8 x i16> %5771, %5766
  %5773 = add <8 x i16> %5772, %5769
  %5774 = shl <8 x i16> %5773, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %5775 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %5764, <8 x i16> %5774) #12
  %5776 = add <8 x i16> %5775, %5754
  %5777 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %5776, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %5778 = trunc <8 x i16> %5777 to <8 x i8>
  %5779 = getelementptr inbounds i8, i8* %5356, i64 11
  %5780 = bitcast i8* %5779 to <8 x i8>*
  %5781 = load <8 x i8>, <8 x i8>* %5780, align 1, !tbaa !389
  %5782 = getelementptr inbounds i8, i8* %5356, i64 10
  %5783 = bitcast i8* %5782 to <8 x i8>*
  %5784 = load <8 x i8>, <8 x i8>* %5783, align 2, !tbaa !389
  %5785 = getelementptr inbounds i8, i8* %5356, i64 12
  %5786 = bitcast i8* %5785 to <8 x i8>*
  %5787 = load <8 x i8>, <8 x i8>* %5786, align 4, !tbaa !389
  %5788 = getelementptr inbounds i8, i8* %5387, i64 11
  %5789 = bitcast i8* %5788 to <8 x i8>*
  %5790 = load <8 x i8>, <8 x i8>* %5789, align 1, !tbaa !389
  %5791 = getelementptr inbounds i8, i8* %5387, i64 10
  %5792 = bitcast i8* %5791 to <8 x i8>*
  %5793 = load <8 x i8>, <8 x i8>* %5792, align 2, !tbaa !389
  %5794 = getelementptr inbounds i8, i8* %5387, i64 12
  %5795 = bitcast i8* %5794 to <8 x i8>*
  %5796 = load <8 x i8>, <8 x i8>* %5795, align 4, !tbaa !389
  %5797 = getelementptr inbounds i8, i8* %5418, i64 11
  %5798 = bitcast i8* %5797 to <8 x i8>*
  %5799 = load <8 x i8>, <8 x i8>* %5798, align 1, !tbaa !389
  %5800 = getelementptr inbounds i8, i8* %5418, i64 10
  %5801 = bitcast i8* %5800 to <8 x i8>*
  %5802 = load <8 x i8>, <8 x i8>* %5801, align 2, !tbaa !389
  %5803 = getelementptr inbounds i8, i8* %5418, i64 12
  %5804 = bitcast i8* %5803 to <8 x i8>*
  %5805 = load <8 x i8>, <8 x i8>* %5804, align 4, !tbaa !389
  %5806 = getelementptr inbounds i8, i8* %5449, i64 11
  %5807 = bitcast i8* %5806 to <8 x i8>*
  %5808 = load <8 x i8>, <8 x i8>* %5807, align 1, !tbaa !389
  %5809 = getelementptr inbounds i8, i8* %5449, i64 10
  %5810 = bitcast i8* %5809 to <8 x i8>*
  %5811 = load <8 x i8>, <8 x i8>* %5810, align 2, !tbaa !389
  %5812 = getelementptr inbounds i8, i8* %5449, i64 12
  %5813 = bitcast i8* %5812 to <8 x i8>*
  %5814 = load <8 x i8>, <8 x i8>* %5813, align 4, !tbaa !389
  %5815 = zext <8 x i8> %t628 to <8 x i16>
  %5816 = zext <8 x i8> %5814 to <8 x i16>
  %5817 = zext <8 x i8> %5811 to <8 x i16>
  %5818 = zext <8 x i8> %t627 to <8 x i16>
  %5819 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %5808) #12
  %5820 = add nuw nsw <8 x i16> %5815, %5818
  %5821 = add nuw nsw <8 x i16> %5820, %5817
  %5822 = add <8 x i16> %5821, %5819
  %5823 = add <8 x i16> %5822, %5816
  %5824 = zext <8 x i8> %t626 to <8 x i16>
  %5825 = zext <8 x i8> %5805 to <8 x i16>
  %5826 = zext <8 x i8> %5802 to <8 x i16>
  %5827 = zext <8 x i8> %t625 to <8 x i16>
  %5828 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %5799) #12
  %5829 = add nuw nsw <8 x i16> %5824, %5827
  %5830 = add nuw nsw <8 x i16> %5829, %5826
  %5831 = add nuw nsw <8 x i16> %5830, %5825
  %5832 = add <8 x i16> %5831, %5828
  %5833 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %5823, <8 x i16> %5832) #12
  %5834 = zext <8 x i8> %5606 to <8 x i16>
  %5835 = zext <8 x i8> %5796 to <8 x i16>
  %5836 = zext <8 x i8> %5793 to <8 x i16>
  %5837 = zext <8 x i8> %5589 to <8 x i16>
  %5838 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %5790) #12
  %5839 = add nuw nsw <8 x i16> %5834, %5837
  %5840 = add nuw nsw <8 x i16> %5839, %5836
  %5841 = add nuw nsw <8 x i16> %5840, %5835
  %5842 = add <8 x i16> %5841, %5838
  %5843 = shl <8 x i16> %5842, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %5844 = zext <8 x i8> %5572 to <8 x i16>
  %5845 = zext <8 x i8> %5787 to <8 x i16>
  %5846 = zext <8 x i8> %5784 to <8 x i16>
  %5847 = zext <8 x i8> %5555 to <8 x i16>
  %5848 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %5781) #12
  %5849 = add nuw nsw <8 x i16> %5844, %5847
  %5850 = add nuw nsw <8 x i16> %5849, %5846
  %5851 = add nuw nsw <8 x i16> %5850, %5845
  %5852 = add <8 x i16> %5851, %5848
  %5853 = shl <8 x i16> %5852, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %5854 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %5843, <8 x i16> %5853) #12
  %5855 = add <8 x i16> %5854, %5833
  %5856 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %5855, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %5857 = trunc <8 x i16> %5856 to <8 x i8>
  %5858 = bitcast i8* %5480 to <8 x i8>*
  %5859 = load <8 x i8>, <8 x i8>* %5858, align 16, !tbaa !389
  %5860 = getelementptr inbounds i8, i8* %5480, i64 6
  %5861 = bitcast i8* %5860 to <8 x i8>*
  %5862 = load <8 x i8>, <8 x i8>* %5861, align 2, !tbaa !389
  %5863 = zext <8 x i8> %5862 to <8 x i16>
  %5864 = zext <8 x i8> %t630 to <8 x i16>
  %5865 = zext <8 x i8> %t632 to <8 x i16>
  %5866 = zext <8 x i8> %t631 to <8 x i16>
  %5867 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t633) #12
  %5868 = add nuw nsw <8 x i16> %5866, %5864
  %5869 = add nuw nsw <8 x i16> %5868, %5865
  %5870 = add <8 x i16> %5869, %5867
  %5871 = add <8 x i16> %5870, %5863
  %5872 = zext <8 x i8> %t633 to <8 x i16>
  %5873 = zext <8 x i8> %t629 to <8 x i16>
  %5874 = zext <8 x i8> %5859 to <8 x i16>
  %5875 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t631) #12
  %5876 = add nuw nsw <8 x i16> %5865, %5873
  %5877 = add nuw nsw <8 x i16> %5876, %5872
  %5878 = add nuw nsw <8 x i16> %5877, %5874
  %5879 = add <8 x i16> %5878, %5875
  %5880 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %5871, <8 x i16> %5879) #12
  %5881 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t630) #12
  %5882 = add nuw nsw <8 x i16> %5745, %5755
  %5883 = add nuw nsw <8 x i16> %5882, %5765
  %5884 = add nuw nsw <8 x i16> %5883, %5736
  %5885 = add <8 x i16> %5884, %5881
  %5886 = shl <8 x i16> %5885, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %5887 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t629) #12
  %5888 = add nuw nsw <8 x i16> %5748, %5758
  %5889 = add nuw nsw <8 x i16> %5888, %5768
  %5890 = add nuw nsw <8 x i16> %5889, %5739
  %5891 = add <8 x i16> %5890, %5887
  %5892 = shl <8 x i16> %5891, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %5893 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %5886, <8 x i16> %5892) #12
  %5894 = add <8 x i16> %5893, %5880
  %5895 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %5894, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %5896 = trunc <8 x i16> %5895 to <8 x i8>
  %5897 = getelementptr inbounds i8, i8* %5480, i64 8
  %5898 = bitcast i8* %5897 to <8 x i8>*
  %5899 = load <8 x i8>, <8 x i8>* %5898, align 8, !tbaa !389
  %5900 = getelementptr inbounds i8, i8* %5480, i64 14
  %5901 = bitcast i8* %5900 to <8 x i8>*
  %5902 = load <8 x i8>, <8 x i8>* %5901, align 2, !tbaa !389
  %5903 = zext <8 x i8> %5902 to <8 x i16>
  %5904 = zext <8 x i8> %t635 to <8 x i16>
  %5905 = zext <8 x i8> %t637 to <8 x i16>
  %5906 = zext <8 x i8> %t636 to <8 x i16>
  %5907 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t638) #12
  %5908 = add nuw nsw <8 x i16> %5906, %5904
  %5909 = add nuw nsw <8 x i16> %5908, %5905
  %5910 = add <8 x i16> %5909, %5907
  %5911 = add <8 x i16> %5910, %5903
  %5912 = zext <8 x i8> %t638 to <8 x i16>
  %5913 = zext <8 x i8> %t634 to <8 x i16>
  %5914 = zext <8 x i8> %5899 to <8 x i16>
  %5915 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t636) #12
  %5916 = add nuw nsw <8 x i16> %5905, %5913
  %5917 = add nuw nsw <8 x i16> %5916, %5912
  %5918 = add nuw nsw <8 x i16> %5917, %5914
  %5919 = add <8 x i16> %5918, %5915
  %5920 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %5911, <8 x i16> %5919) #12
  %5921 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t635) #12
  %5922 = add nuw nsw <8 x i16> %5824, %5834
  %5923 = add nuw nsw <8 x i16> %5922, %5844
  %5924 = add nuw nsw <8 x i16> %5923, %5815
  %5925 = add <8 x i16> %5924, %5921
  %5926 = shl <8 x i16> %5925, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %5927 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t634) #12
  %5928 = add nuw nsw <8 x i16> %5827, %5837
  %5929 = add nuw nsw <8 x i16> %5928, %5847
  %5930 = add nuw nsw <8 x i16> %5929, %5818
  %5931 = add <8 x i16> %5930, %5927
  %5932 = shl <8 x i16> %5931, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %5933 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %5926, <8 x i16> %5932) #12
  %5934 = add <8 x i16> %5933, %5920
  %5935 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %5934, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %5936 = trunc <8 x i16> %5935 to <8 x i8>
  %5937 = add <8 x i8> %5896, %5778
  %5938 = add <8 x i8> %5936, %5857
  %5939 = shufflevector <8 x i8> %5937, <8 x i8> %5938, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5940 = getelementptr inbounds i8, i8* %5356, i64 19
  %5941 = bitcast i8* %5940 to <8 x i8>*
  %5942 = load <8 x i8>, <8 x i8>* %5941, align 1, !tbaa !389
  %5943 = getelementptr inbounds i8, i8* %5356, i64 18
  %5944 = bitcast i8* %5943 to <8 x i8>*
  %5945 = load <8 x i8>, <8 x i8>* %5944, align 2, !tbaa !389
  %5946 = getelementptr inbounds i8, i8* %5356, i64 20
  %5947 = bitcast i8* %5946 to <8 x i8>*
  %5948 = load <8 x i8>, <8 x i8>* %5947, align 4, !tbaa !389
  %5949 = getelementptr inbounds i8, i8* %5387, i64 19
  %5950 = bitcast i8* %5949 to <8 x i8>*
  %5951 = load <8 x i8>, <8 x i8>* %5950, align 1, !tbaa !389
  %5952 = getelementptr inbounds i8, i8* %5387, i64 18
  %5953 = bitcast i8* %5952 to <8 x i8>*
  %5954 = load <8 x i8>, <8 x i8>* %5953, align 2, !tbaa !389
  %5955 = getelementptr inbounds i8, i8* %5387, i64 20
  %5956 = bitcast i8* %5955 to <8 x i8>*
  %5957 = load <8 x i8>, <8 x i8>* %5956, align 4, !tbaa !389
  %5958 = getelementptr inbounds i8, i8* %5418, i64 19
  %5959 = bitcast i8* %5958 to <8 x i8>*
  %5960 = load <8 x i8>, <8 x i8>* %5959, align 1, !tbaa !389
  %5961 = getelementptr inbounds i8, i8* %5418, i64 18
  %5962 = bitcast i8* %5961 to <8 x i8>*
  %5963 = load <8 x i8>, <8 x i8>* %5962, align 2, !tbaa !389
  %5964 = getelementptr inbounds i8, i8* %5418, i64 20
  %5965 = bitcast i8* %5964 to <8 x i8>*
  %5966 = load <8 x i8>, <8 x i8>* %5965, align 4, !tbaa !389
  %5967 = getelementptr inbounds i8, i8* %5449, i64 19
  %5968 = bitcast i8* %5967 to <8 x i8>*
  %5969 = load <8 x i8>, <8 x i8>* %5968, align 1, !tbaa !389
  %5970 = getelementptr inbounds i8, i8* %5449, i64 18
  %5971 = bitcast i8* %5970 to <8 x i8>*
  %5972 = load <8 x i8>, <8 x i8>* %5971, align 2, !tbaa !389
  %5973 = getelementptr inbounds i8, i8* %5449, i64 20
  %5974 = bitcast i8* %5973 to <8 x i8>*
  %5975 = load <8 x i8>, <8 x i8>* %5974, align 4, !tbaa !389
  %5976 = zext <8 x i8> %t646 to <8 x i16>
  %5977 = zext <8 x i8> %5975 to <8 x i16>
  %5978 = zext <8 x i8> %5972 to <8 x i16>
  %5979 = zext <8 x i8> %t645 to <8 x i16>
  %5980 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %5969) #12
  %5981 = add nuw nsw <8 x i16> %5976, %5979
  %5982 = add nuw nsw <8 x i16> %5981, %5978
  %5983 = add <8 x i16> %5982, %5980
  %5984 = add <8 x i16> %5983, %5977
  %5985 = zext <8 x i8> %t644 to <8 x i16>
  %5986 = zext <8 x i8> %5966 to <8 x i16>
  %5987 = zext <8 x i8> %5963 to <8 x i16>
  %5988 = zext <8 x i8> %t643 to <8 x i16>
  %5989 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %5960) #12
  %5990 = add nuw nsw <8 x i16> %5985, %5988
  %5991 = add nuw nsw <8 x i16> %5990, %5987
  %5992 = add nuw nsw <8 x i16> %5991, %5986
  %5993 = add <8 x i16> %5992, %5989
  %5994 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %5984, <8 x i16> %5993) #12
  %5995 = zext <8 x i8> %5608 to <8 x i16>
  %5996 = zext <8 x i8> %5957 to <8 x i16>
  %5997 = zext <8 x i8> %5954 to <8 x i16>
  %5998 = zext <8 x i8> %5591 to <8 x i16>
  %5999 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %5951) #12
  %6000 = add nuw nsw <8 x i16> %5995, %5998
  %6001 = add nuw nsw <8 x i16> %6000, %5997
  %6002 = add nuw nsw <8 x i16> %6001, %5996
  %6003 = add <8 x i16> %6002, %5999
  %6004 = shl <8 x i16> %6003, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6005 = zext <8 x i8> %5574 to <8 x i16>
  %6006 = zext <8 x i8> %5948 to <8 x i16>
  %6007 = zext <8 x i8> %5945 to <8 x i16>
  %6008 = zext <8 x i8> %5557 to <8 x i16>
  %6009 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %5942) #12
  %6010 = add nuw nsw <8 x i16> %6005, %6008
  %6011 = add nuw nsw <8 x i16> %6010, %6007
  %6012 = add nuw nsw <8 x i16> %6011, %6006
  %6013 = add <8 x i16> %6012, %6009
  %6014 = shl <8 x i16> %6013, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6015 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %6004, <8 x i16> %6014) #12
  %6016 = add <8 x i16> %6015, %5994
  %6017 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %6016, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %6018 = trunc <8 x i16> %6017 to <8 x i8>
  %6019 = getelementptr inbounds i8, i8* %5356, i64 27
  %6020 = bitcast i8* %6019 to <8 x i8>*
  %6021 = load <8 x i8>, <8 x i8>* %6020, align 1, !tbaa !389
  %6022 = getelementptr inbounds i8, i8* %5356, i64 26
  %6023 = bitcast i8* %6022 to <8 x i8>*
  %6024 = load <8 x i8>, <8 x i8>* %6023, align 2, !tbaa !389
  %6025 = getelementptr inbounds i8, i8* %5356, i64 28
  %6026 = bitcast i8* %6025 to <8 x i8>*
  %6027 = load <8 x i8>, <8 x i8>* %6026, align 4, !tbaa !389
  %6028 = getelementptr inbounds i8, i8* %5387, i64 27
  %6029 = bitcast i8* %6028 to <8 x i8>*
  %6030 = load <8 x i8>, <8 x i8>* %6029, align 1, !tbaa !389
  %6031 = getelementptr inbounds i8, i8* %5387, i64 26
  %6032 = bitcast i8* %6031 to <8 x i8>*
  %6033 = load <8 x i8>, <8 x i8>* %6032, align 2, !tbaa !389
  %6034 = getelementptr inbounds i8, i8* %5387, i64 28
  %6035 = bitcast i8* %6034 to <8 x i8>*
  %6036 = load <8 x i8>, <8 x i8>* %6035, align 4, !tbaa !389
  %6037 = getelementptr inbounds i8, i8* %5418, i64 27
  %6038 = bitcast i8* %6037 to <8 x i8>*
  %6039 = load <8 x i8>, <8 x i8>* %6038, align 1, !tbaa !389
  %6040 = getelementptr inbounds i8, i8* %5418, i64 26
  %6041 = bitcast i8* %6040 to <8 x i8>*
  %6042 = load <8 x i8>, <8 x i8>* %6041, align 2, !tbaa !389
  %6043 = getelementptr inbounds i8, i8* %5418, i64 28
  %6044 = bitcast i8* %6043 to <8 x i8>*
  %6045 = load <8 x i8>, <8 x i8>* %6044, align 4, !tbaa !389
  %6046 = getelementptr inbounds i8, i8* %5449, i64 27
  %6047 = bitcast i8* %6046 to <8 x i8>*
  %6048 = load <8 x i8>, <8 x i8>* %6047, align 1, !tbaa !389
  %6049 = getelementptr inbounds i8, i8* %5449, i64 26
  %6050 = bitcast i8* %6049 to <8 x i8>*
  %6051 = load <8 x i8>, <8 x i8>* %6050, align 2, !tbaa !389
  %6052 = getelementptr inbounds i8, i8* %5449, i64 28
  %6053 = bitcast i8* %6052 to <8 x i8>*
  %6054 = load <8 x i8>, <8 x i8>* %6053, align 4, !tbaa !389
  %6055 = zext <8 x i8> %t654 to <8 x i16>
  %6056 = zext <8 x i8> %6054 to <8 x i16>
  %6057 = zext <8 x i8> %6051 to <8 x i16>
  %6058 = zext <8 x i8> %t653 to <8 x i16>
  %6059 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %6048) #12
  %6060 = add nuw nsw <8 x i16> %6055, %6058
  %6061 = add nuw nsw <8 x i16> %6060, %6057
  %6062 = add <8 x i16> %6061, %6059
  %6063 = add <8 x i16> %6062, %6056
  %6064 = zext <8 x i8> %t652 to <8 x i16>
  %6065 = zext <8 x i8> %6045 to <8 x i16>
  %6066 = zext <8 x i8> %6042 to <8 x i16>
  %6067 = zext <8 x i8> %t651 to <8 x i16>
  %6068 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %6039) #12
  %6069 = add nuw nsw <8 x i16> %6064, %6067
  %6070 = add nuw nsw <8 x i16> %6069, %6066
  %6071 = add nuw nsw <8 x i16> %6070, %6065
  %6072 = add <8 x i16> %6071, %6068
  %6073 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %6063, <8 x i16> %6072) #12
  %6074 = zext <8 x i8> %5610 to <8 x i16>
  %6075 = zext <8 x i8> %6036 to <8 x i16>
  %6076 = zext <8 x i8> %6033 to <8 x i16>
  %6077 = zext <8 x i8> %5593 to <8 x i16>
  %6078 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %6030) #12
  %6079 = add nuw nsw <8 x i16> %6074, %6077
  %6080 = add nuw nsw <8 x i16> %6079, %6076
  %6081 = add nuw nsw <8 x i16> %6080, %6075
  %6082 = add <8 x i16> %6081, %6078
  %6083 = shl <8 x i16> %6082, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6084 = zext <8 x i8> %5576 to <8 x i16>
  %6085 = zext <8 x i8> %6027 to <8 x i16>
  %6086 = zext <8 x i8> %6024 to <8 x i16>
  %6087 = zext <8 x i8> %5559 to <8 x i16>
  %6088 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %6021) #12
  %6089 = add nuw nsw <8 x i16> %6084, %6087
  %6090 = add nuw nsw <8 x i16> %6089, %6086
  %6091 = add nuw nsw <8 x i16> %6090, %6085
  %6092 = add <8 x i16> %6091, %6088
  %6093 = shl <8 x i16> %6092, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6094 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %6083, <8 x i16> %6093) #12
  %6095 = add <8 x i16> %6094, %6073
  %6096 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %6095, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %6097 = trunc <8 x i16> %6096 to <8 x i8>
  %6098 = getelementptr inbounds i8, i8* %5480, i64 16
  %6099 = bitcast i8* %6098 to <8 x i8>*
  %6100 = load <8 x i8>, <8 x i8>* %6099, align 16, !tbaa !389
  %6101 = getelementptr inbounds i8, i8* %5480, i64 22
  %6102 = bitcast i8* %6101 to <8 x i8>*
  %6103 = load <8 x i8>, <8 x i8>* %6102, align 2, !tbaa !389
  %6104 = zext <8 x i8> %6103 to <8 x i16>
  %6105 = zext <8 x i8> %t656 to <8 x i16>
  %6106 = zext <8 x i8> %t658 to <8 x i16>
  %6107 = zext <8 x i8> %t657 to <8 x i16>
  %6108 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t659) #12
  %6109 = add nuw nsw <8 x i16> %6107, %6105
  %6110 = add nuw nsw <8 x i16> %6109, %6106
  %6111 = add <8 x i16> %6110, %6108
  %6112 = add <8 x i16> %6111, %6104
  %6113 = zext <8 x i8> %t659 to <8 x i16>
  %6114 = zext <8 x i8> %t655 to <8 x i16>
  %6115 = zext <8 x i8> %6100 to <8 x i16>
  %6116 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t657) #12
  %6117 = add nuw nsw <8 x i16> %6106, %6114
  %6118 = add nuw nsw <8 x i16> %6117, %6113
  %6119 = add nuw nsw <8 x i16> %6118, %6115
  %6120 = add <8 x i16> %6119, %6116
  %6121 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %6112, <8 x i16> %6120) #12
  %6122 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t656) #12
  %6123 = add nuw nsw <8 x i16> %5985, %5995
  %6124 = add nuw nsw <8 x i16> %6123, %6005
  %6125 = add nuw nsw <8 x i16> %6124, %5976
  %6126 = add <8 x i16> %6125, %6122
  %6127 = shl <8 x i16> %6126, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6128 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t655) #12
  %6129 = add nuw nsw <8 x i16> %5988, %5998
  %6130 = add nuw nsw <8 x i16> %6129, %6008
  %6131 = add nuw nsw <8 x i16> %6130, %5979
  %6132 = add <8 x i16> %6131, %6128
  %6133 = shl <8 x i16> %6132, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6134 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %6127, <8 x i16> %6133) #12
  %6135 = add <8 x i16> %6134, %6121
  %6136 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %6135, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %6137 = trunc <8 x i16> %6136 to <8 x i8>
  %6138 = getelementptr inbounds i8, i8* %5480, i64 24
  %6139 = bitcast i8* %6138 to <8 x i8>*
  %6140 = load <8 x i8>, <8 x i8>* %6139, align 8, !tbaa !389
  %6141 = getelementptr inbounds i8, i8* %5480, i64 30
  %6142 = bitcast i8* %6141 to <8 x i8>*
  %6143 = load <8 x i8>, <8 x i8>* %6142, align 2, !tbaa !389
  %6144 = zext <8 x i8> %6143 to <8 x i16>
  %6145 = zext <8 x i8> %t661 to <8 x i16>
  %6146 = zext <8 x i8> %t663 to <8 x i16>
  %6147 = zext <8 x i8> %t662 to <8 x i16>
  %6148 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t664) #12
  %6149 = add nuw nsw <8 x i16> %6147, %6145
  %6150 = add nuw nsw <8 x i16> %6149, %6146
  %6151 = add <8 x i16> %6150, %6148
  %6152 = add <8 x i16> %6151, %6144
  %6153 = zext <8 x i8> %t664 to <8 x i16>
  %6154 = zext <8 x i8> %t660 to <8 x i16>
  %6155 = zext <8 x i8> %6140 to <8 x i16>
  %6156 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t662) #12
  %6157 = add nuw nsw <8 x i16> %6146, %6154
  %6158 = add nuw nsw <8 x i16> %6157, %6153
  %6159 = add nuw nsw <8 x i16> %6158, %6155
  %6160 = add <8 x i16> %6159, %6156
  %6161 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %6152, <8 x i16> %6160) #12
  %6162 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t661) #12
  %6163 = add nuw nsw <8 x i16> %6064, %6074
  %6164 = add nuw nsw <8 x i16> %6163, %6084
  %6165 = add nuw nsw <8 x i16> %6164, %6055
  %6166 = add <8 x i16> %6165, %6162
  %6167 = shl <8 x i16> %6166, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6168 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t660) #12
  %6169 = add nuw nsw <8 x i16> %6067, %6077
  %6170 = add nuw nsw <8 x i16> %6169, %6087
  %6171 = add nuw nsw <8 x i16> %6170, %6058
  %6172 = add <8 x i16> %6171, %6168
  %6173 = shl <8 x i16> %6172, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6174 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %6167, <8 x i16> %6173) #12
  %6175 = add <8 x i16> %6174, %6161
  %6176 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %6175, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %6177 = trunc <8 x i16> %6176 to <8 x i8>
  %6178 = add <8 x i8> %6137, %6018
  %6179 = add <8 x i8> %6177, %6097
  %6180 = shufflevector <8 x i8> %6178, <8 x i8> %6179, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6181 = getelementptr inbounds i8, i8* %5356, i64 35
  %6182 = bitcast i8* %6181 to <8 x i8>*
  %6183 = load <8 x i8>, <8 x i8>* %6182, align 1, !tbaa !389
  %6184 = getelementptr inbounds i8, i8* %5356, i64 34
  %6185 = bitcast i8* %6184 to <8 x i8>*
  %6186 = load <8 x i8>, <8 x i8>* %6185, align 2, !tbaa !389
  %6187 = getelementptr inbounds i8, i8* %5356, i64 36
  %6188 = bitcast i8* %6187 to <8 x i8>*
  %6189 = load <8 x i8>, <8 x i8>* %6188, align 4, !tbaa !389
  %6190 = getelementptr inbounds i8, i8* %5387, i64 35
  %6191 = bitcast i8* %6190 to <8 x i8>*
  %6192 = load <8 x i8>, <8 x i8>* %6191, align 1, !tbaa !389
  %6193 = getelementptr inbounds i8, i8* %5387, i64 34
  %6194 = bitcast i8* %6193 to <8 x i8>*
  %6195 = load <8 x i8>, <8 x i8>* %6194, align 2, !tbaa !389
  %6196 = getelementptr inbounds i8, i8* %5387, i64 36
  %6197 = bitcast i8* %6196 to <8 x i8>*
  %6198 = load <8 x i8>, <8 x i8>* %6197, align 4, !tbaa !389
  %6199 = getelementptr inbounds i8, i8* %5418, i64 35
  %6200 = bitcast i8* %6199 to <8 x i8>*
  %6201 = load <8 x i8>, <8 x i8>* %6200, align 1, !tbaa !389
  %6202 = getelementptr inbounds i8, i8* %5418, i64 34
  %6203 = bitcast i8* %6202 to <8 x i8>*
  %6204 = load <8 x i8>, <8 x i8>* %6203, align 2, !tbaa !389
  %6205 = getelementptr inbounds i8, i8* %5418, i64 36
  %6206 = bitcast i8* %6205 to <8 x i8>*
  %6207 = load <8 x i8>, <8 x i8>* %6206, align 4, !tbaa !389
  %6208 = getelementptr inbounds i8, i8* %5449, i64 35
  %6209 = bitcast i8* %6208 to <8 x i8>*
  %6210 = load <8 x i8>, <8 x i8>* %6209, align 1, !tbaa !389
  %6211 = getelementptr inbounds i8, i8* %5449, i64 34
  %6212 = bitcast i8* %6211 to <8 x i8>*
  %6213 = load <8 x i8>, <8 x i8>* %6212, align 2, !tbaa !389
  %6214 = getelementptr inbounds i8, i8* %5449, i64 36
  %6215 = bitcast i8* %6214 to <8 x i8>*
  %6216 = load <8 x i8>, <8 x i8>* %6215, align 4, !tbaa !389
  %6217 = zext <8 x i8> %t672 to <8 x i16>
  %6218 = zext <8 x i8> %6216 to <8 x i16>
  %6219 = zext <8 x i8> %6213 to <8 x i16>
  %6220 = zext <8 x i8> %t671 to <8 x i16>
  %6221 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %6210) #12
  %6222 = add nuw nsw <8 x i16> %6217, %6220
  %6223 = add nuw nsw <8 x i16> %6222, %6219
  %6224 = add <8 x i16> %6223, %6221
  %6225 = add <8 x i16> %6224, %6218
  %6226 = zext <8 x i8> %t670 to <8 x i16>
  %6227 = zext <8 x i8> %6207 to <8 x i16>
  %6228 = zext <8 x i8> %6204 to <8 x i16>
  %6229 = zext <8 x i8> %t669 to <8 x i16>
  %6230 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %6201) #12
  %6231 = add nuw nsw <8 x i16> %6226, %6229
  %6232 = add nuw nsw <8 x i16> %6231, %6228
  %6233 = add nuw nsw <8 x i16> %6232, %6227
  %6234 = add <8 x i16> %6233, %6230
  %6235 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %6225, <8 x i16> %6234) #12
  %6236 = zext <8 x i8> %5612 to <8 x i16>
  %6237 = zext <8 x i8> %6198 to <8 x i16>
  %6238 = zext <8 x i8> %6195 to <8 x i16>
  %6239 = zext <8 x i8> %5595 to <8 x i16>
  %6240 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %6192) #12
  %6241 = add nuw nsw <8 x i16> %6236, %6239
  %6242 = add nuw nsw <8 x i16> %6241, %6238
  %6243 = add nuw nsw <8 x i16> %6242, %6237
  %6244 = add <8 x i16> %6243, %6240
  %6245 = shl <8 x i16> %6244, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6246 = zext <8 x i8> %5578 to <8 x i16>
  %6247 = zext <8 x i8> %6189 to <8 x i16>
  %6248 = zext <8 x i8> %6186 to <8 x i16>
  %6249 = zext <8 x i8> %5561 to <8 x i16>
  %6250 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %6183) #12
  %6251 = add nuw nsw <8 x i16> %6246, %6249
  %6252 = add nuw nsw <8 x i16> %6251, %6248
  %6253 = add nuw nsw <8 x i16> %6252, %6247
  %6254 = add <8 x i16> %6253, %6250
  %6255 = shl <8 x i16> %6254, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6256 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %6245, <8 x i16> %6255) #12
  %6257 = add <8 x i16> %6256, %6235
  %6258 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %6257, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %6259 = trunc <8 x i16> %6258 to <8 x i8>
  %6260 = getelementptr inbounds i8, i8* %5356, i64 43
  %6261 = bitcast i8* %6260 to <8 x i8>*
  %6262 = load <8 x i8>, <8 x i8>* %6261, align 1, !tbaa !389
  %6263 = getelementptr inbounds i8, i8* %5356, i64 42
  %6264 = bitcast i8* %6263 to <8 x i8>*
  %6265 = load <8 x i8>, <8 x i8>* %6264, align 2, !tbaa !389
  %6266 = getelementptr inbounds i8, i8* %5356, i64 44
  %6267 = bitcast i8* %6266 to <8 x i8>*
  %6268 = load <8 x i8>, <8 x i8>* %6267, align 4, !tbaa !389
  %6269 = getelementptr inbounds i8, i8* %5387, i64 43
  %6270 = bitcast i8* %6269 to <8 x i8>*
  %6271 = load <8 x i8>, <8 x i8>* %6270, align 1, !tbaa !389
  %6272 = getelementptr inbounds i8, i8* %5387, i64 42
  %6273 = bitcast i8* %6272 to <8 x i8>*
  %6274 = load <8 x i8>, <8 x i8>* %6273, align 2, !tbaa !389
  %6275 = getelementptr inbounds i8, i8* %5387, i64 44
  %6276 = bitcast i8* %6275 to <8 x i8>*
  %6277 = load <8 x i8>, <8 x i8>* %6276, align 4, !tbaa !389
  %6278 = getelementptr inbounds i8, i8* %5418, i64 43
  %6279 = bitcast i8* %6278 to <8 x i8>*
  %6280 = load <8 x i8>, <8 x i8>* %6279, align 1, !tbaa !389
  %6281 = getelementptr inbounds i8, i8* %5418, i64 42
  %6282 = bitcast i8* %6281 to <8 x i8>*
  %6283 = load <8 x i8>, <8 x i8>* %6282, align 2, !tbaa !389
  %6284 = getelementptr inbounds i8, i8* %5418, i64 44
  %6285 = bitcast i8* %6284 to <8 x i8>*
  %6286 = load <8 x i8>, <8 x i8>* %6285, align 4, !tbaa !389
  %6287 = getelementptr inbounds i8, i8* %5449, i64 43
  %6288 = bitcast i8* %6287 to <8 x i8>*
  %6289 = load <8 x i8>, <8 x i8>* %6288, align 1, !tbaa !389
  %6290 = getelementptr inbounds i8, i8* %5449, i64 42
  %6291 = bitcast i8* %6290 to <8 x i8>*
  %6292 = load <8 x i8>, <8 x i8>* %6291, align 2, !tbaa !389
  %6293 = getelementptr inbounds i8, i8* %5449, i64 44
  %6294 = bitcast i8* %6293 to <8 x i8>*
  %6295 = load <8 x i8>, <8 x i8>* %6294, align 4, !tbaa !389
  %6296 = zext <8 x i8> %t680 to <8 x i16>
  %6297 = zext <8 x i8> %6295 to <8 x i16>
  %6298 = zext <8 x i8> %6292 to <8 x i16>
  %6299 = zext <8 x i8> %t679 to <8 x i16>
  %6300 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %6289) #12
  %6301 = add nuw nsw <8 x i16> %6296, %6299
  %6302 = add nuw nsw <8 x i16> %6301, %6298
  %6303 = add <8 x i16> %6302, %6300
  %6304 = add <8 x i16> %6303, %6297
  %6305 = zext <8 x i8> %t678 to <8 x i16>
  %6306 = zext <8 x i8> %6286 to <8 x i16>
  %6307 = zext <8 x i8> %6283 to <8 x i16>
  %6308 = zext <8 x i8> %t677 to <8 x i16>
  %6309 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %6280) #12
  %6310 = add nuw nsw <8 x i16> %6305, %6308
  %6311 = add nuw nsw <8 x i16> %6310, %6307
  %6312 = add nuw nsw <8 x i16> %6311, %6306
  %6313 = add <8 x i16> %6312, %6309
  %6314 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %6304, <8 x i16> %6313) #12
  %6315 = zext <8 x i8> %5614 to <8 x i16>
  %6316 = zext <8 x i8> %6277 to <8 x i16>
  %6317 = zext <8 x i8> %6274 to <8 x i16>
  %6318 = zext <8 x i8> %5597 to <8 x i16>
  %6319 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %6271) #12
  %6320 = add nuw nsw <8 x i16> %6315, %6318
  %6321 = add nuw nsw <8 x i16> %6320, %6317
  %6322 = add nuw nsw <8 x i16> %6321, %6316
  %6323 = add <8 x i16> %6322, %6319
  %6324 = shl <8 x i16> %6323, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6325 = zext <8 x i8> %5580 to <8 x i16>
  %6326 = zext <8 x i8> %6268 to <8 x i16>
  %6327 = zext <8 x i8> %6265 to <8 x i16>
  %6328 = zext <8 x i8> %5563 to <8 x i16>
  %6329 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %6262) #12
  %6330 = add nuw nsw <8 x i16> %6325, %6328
  %6331 = add nuw nsw <8 x i16> %6330, %6327
  %6332 = add nuw nsw <8 x i16> %6331, %6326
  %6333 = add <8 x i16> %6332, %6329
  %6334 = shl <8 x i16> %6333, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6335 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %6324, <8 x i16> %6334) #12
  %6336 = add <8 x i16> %6335, %6314
  %6337 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %6336, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %6338 = trunc <8 x i16> %6337 to <8 x i8>
  %6339 = getelementptr inbounds i8, i8* %5480, i64 32
  %6340 = bitcast i8* %6339 to <8 x i8>*
  %6341 = load <8 x i8>, <8 x i8>* %6340, align 16, !tbaa !389
  %6342 = getelementptr inbounds i8, i8* %5480, i64 38
  %6343 = bitcast i8* %6342 to <8 x i8>*
  %6344 = load <8 x i8>, <8 x i8>* %6343, align 2, !tbaa !389
  %6345 = zext <8 x i8> %6344 to <8 x i16>
  %6346 = zext <8 x i8> %t682 to <8 x i16>
  %6347 = zext <8 x i8> %t684 to <8 x i16>
  %6348 = zext <8 x i8> %t683 to <8 x i16>
  %6349 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t685) #12
  %6350 = add nuw nsw <8 x i16> %6348, %6346
  %6351 = add nuw nsw <8 x i16> %6350, %6347
  %6352 = add <8 x i16> %6351, %6349
  %6353 = add <8 x i16> %6352, %6345
  %6354 = zext <8 x i8> %t685 to <8 x i16>
  %6355 = zext <8 x i8> %t681 to <8 x i16>
  %6356 = zext <8 x i8> %6341 to <8 x i16>
  %6357 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t683) #12
  %6358 = add nuw nsw <8 x i16> %6347, %6355
  %6359 = add nuw nsw <8 x i16> %6358, %6354
  %6360 = add nuw nsw <8 x i16> %6359, %6356
  %6361 = add <8 x i16> %6360, %6357
  %6362 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %6353, <8 x i16> %6361) #12
  %6363 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t682) #12
  %6364 = add nuw nsw <8 x i16> %6226, %6236
  %6365 = add nuw nsw <8 x i16> %6364, %6246
  %6366 = add nuw nsw <8 x i16> %6365, %6217
  %6367 = add <8 x i16> %6366, %6363
  %6368 = shl <8 x i16> %6367, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6369 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t681) #12
  %6370 = add nuw nsw <8 x i16> %6229, %6239
  %6371 = add nuw nsw <8 x i16> %6370, %6249
  %6372 = add nuw nsw <8 x i16> %6371, %6220
  %6373 = add <8 x i16> %6372, %6369
  %6374 = shl <8 x i16> %6373, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6375 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %6368, <8 x i16> %6374) #12
  %6376 = add <8 x i16> %6375, %6362
  %6377 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %6376, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %6378 = trunc <8 x i16> %6377 to <8 x i8>
  %6379 = getelementptr inbounds i8, i8* %5480, i64 40
  %6380 = bitcast i8* %6379 to <8 x i8>*
  %6381 = load <8 x i8>, <8 x i8>* %6380, align 8, !tbaa !389
  %6382 = getelementptr inbounds i8, i8* %5480, i64 46
  %6383 = bitcast i8* %6382 to <8 x i8>*
  %6384 = load <8 x i8>, <8 x i8>* %6383, align 2, !tbaa !389
  %6385 = zext <8 x i8> %6384 to <8 x i16>
  %6386 = zext <8 x i8> %t687 to <8 x i16>
  %6387 = zext <8 x i8> %t689 to <8 x i16>
  %6388 = zext <8 x i8> %t688 to <8 x i16>
  %6389 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t690) #12
  %6390 = add nuw nsw <8 x i16> %6388, %6386
  %6391 = add nuw nsw <8 x i16> %6390, %6387
  %6392 = add <8 x i16> %6391, %6389
  %6393 = add <8 x i16> %6392, %6385
  %6394 = zext <8 x i8> %t690 to <8 x i16>
  %6395 = zext <8 x i8> %t686 to <8 x i16>
  %6396 = zext <8 x i8> %6381 to <8 x i16>
  %6397 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t688) #12
  %6398 = add nuw nsw <8 x i16> %6387, %6395
  %6399 = add nuw nsw <8 x i16> %6398, %6394
  %6400 = add nuw nsw <8 x i16> %6399, %6396
  %6401 = add <8 x i16> %6400, %6397
  %6402 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %6393, <8 x i16> %6401) #12
  %6403 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t687) #12
  %6404 = add nuw nsw <8 x i16> %6305, %6315
  %6405 = add nuw nsw <8 x i16> %6404, %6325
  %6406 = add nuw nsw <8 x i16> %6405, %6296
  %6407 = add <8 x i16> %6406, %6403
  %6408 = shl <8 x i16> %6407, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6409 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t686) #12
  %6410 = add nuw nsw <8 x i16> %6308, %6318
  %6411 = add nuw nsw <8 x i16> %6410, %6328
  %6412 = add nuw nsw <8 x i16> %6411, %6299
  %6413 = add <8 x i16> %6412, %6409
  %6414 = shl <8 x i16> %6413, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6415 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %6408, <8 x i16> %6414) #12
  %6416 = add <8 x i16> %6415, %6402
  %6417 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %6416, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %6418 = trunc <8 x i16> %6417 to <8 x i8>
  %6419 = add <8 x i8> %6378, %6259
  %6420 = add <8 x i8> %6418, %6338
  %6421 = shufflevector <8 x i8> %6419, <8 x i8> %6420, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6422 = getelementptr inbounds i8, i8* %5356, i64 51
  %6423 = bitcast i8* %6422 to <8 x i8>*
  %6424 = load <8 x i8>, <8 x i8>* %6423, align 1, !tbaa !389
  %6425 = getelementptr inbounds i8, i8* %5356, i64 50
  %6426 = bitcast i8* %6425 to <8 x i8>*
  %6427 = load <8 x i8>, <8 x i8>* %6426, align 2, !tbaa !389
  %6428 = getelementptr inbounds i8, i8* %5356, i64 52
  %6429 = bitcast i8* %6428 to <8 x i8>*
  %6430 = load <8 x i8>, <8 x i8>* %6429, align 4, !tbaa !389
  %6431 = getelementptr inbounds i8, i8* %5387, i64 51
  %6432 = bitcast i8* %6431 to <8 x i8>*
  %6433 = load <8 x i8>, <8 x i8>* %6432, align 1, !tbaa !389
  %6434 = getelementptr inbounds i8, i8* %5387, i64 50
  %6435 = bitcast i8* %6434 to <8 x i8>*
  %6436 = load <8 x i8>, <8 x i8>* %6435, align 2, !tbaa !389
  %6437 = getelementptr inbounds i8, i8* %5387, i64 52
  %6438 = bitcast i8* %6437 to <8 x i8>*
  %6439 = load <8 x i8>, <8 x i8>* %6438, align 4, !tbaa !389
  %6440 = getelementptr inbounds i8, i8* %5418, i64 51
  %6441 = bitcast i8* %6440 to <8 x i8>*
  %6442 = load <8 x i8>, <8 x i8>* %6441, align 1, !tbaa !389
  %6443 = getelementptr inbounds i8, i8* %5418, i64 50
  %6444 = bitcast i8* %6443 to <8 x i8>*
  %6445 = load <8 x i8>, <8 x i8>* %6444, align 2, !tbaa !389
  %6446 = getelementptr inbounds i8, i8* %5418, i64 52
  %6447 = bitcast i8* %6446 to <8 x i8>*
  %6448 = load <8 x i8>, <8 x i8>* %6447, align 4, !tbaa !389
  %6449 = getelementptr inbounds i8, i8* %5449, i64 51
  %6450 = bitcast i8* %6449 to <8 x i8>*
  %6451 = load <8 x i8>, <8 x i8>* %6450, align 1, !tbaa !389
  %6452 = getelementptr inbounds i8, i8* %5449, i64 50
  %6453 = bitcast i8* %6452 to <8 x i8>*
  %6454 = load <8 x i8>, <8 x i8>* %6453, align 2, !tbaa !389
  %6455 = getelementptr inbounds i8, i8* %5449, i64 52
  %6456 = bitcast i8* %6455 to <8 x i8>*
  %6457 = load <8 x i8>, <8 x i8>* %6456, align 4, !tbaa !389
  %6458 = zext <8 x i8> %t698 to <8 x i16>
  %6459 = zext <8 x i8> %6457 to <8 x i16>
  %6460 = zext <8 x i8> %6454 to <8 x i16>
  %6461 = zext <8 x i8> %t697 to <8 x i16>
  %6462 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %6451) #12
  %6463 = add nuw nsw <8 x i16> %6458, %6461
  %6464 = add nuw nsw <8 x i16> %6463, %6460
  %6465 = add <8 x i16> %6464, %6462
  %6466 = add <8 x i16> %6465, %6459
  %6467 = zext <8 x i8> %t696 to <8 x i16>
  %6468 = zext <8 x i8> %6448 to <8 x i16>
  %6469 = zext <8 x i8> %6445 to <8 x i16>
  %6470 = zext <8 x i8> %t695 to <8 x i16>
  %6471 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %6442) #12
  %6472 = add nuw nsw <8 x i16> %6467, %6470
  %6473 = add nuw nsw <8 x i16> %6472, %6469
  %6474 = add nuw nsw <8 x i16> %6473, %6468
  %6475 = add <8 x i16> %6474, %6471
  %6476 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %6466, <8 x i16> %6475) #12
  %6477 = zext <8 x i8> %5616 to <8 x i16>
  %6478 = zext <8 x i8> %6439 to <8 x i16>
  %6479 = zext <8 x i8> %6436 to <8 x i16>
  %6480 = zext <8 x i8> %5599 to <8 x i16>
  %6481 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %6433) #12
  %6482 = add nuw nsw <8 x i16> %6477, %6480
  %6483 = add nuw nsw <8 x i16> %6482, %6479
  %6484 = add nuw nsw <8 x i16> %6483, %6478
  %6485 = add <8 x i16> %6484, %6481
  %6486 = shl <8 x i16> %6485, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6487 = zext <8 x i8> %5582 to <8 x i16>
  %6488 = zext <8 x i8> %6430 to <8 x i16>
  %6489 = zext <8 x i8> %6427 to <8 x i16>
  %6490 = zext <8 x i8> %5565 to <8 x i16>
  %6491 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %6424) #12
  %6492 = add nuw nsw <8 x i16> %6487, %6490
  %6493 = add nuw nsw <8 x i16> %6492, %6489
  %6494 = add nuw nsw <8 x i16> %6493, %6488
  %6495 = add <8 x i16> %6494, %6491
  %6496 = shl <8 x i16> %6495, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6497 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %6486, <8 x i16> %6496) #12
  %6498 = add <8 x i16> %6497, %6476
  %6499 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %6498, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %6500 = trunc <8 x i16> %6499 to <8 x i8>
  %6501 = getelementptr inbounds i8, i8* %5356, i64 59
  %6502 = bitcast i8* %6501 to <8 x i8>*
  %6503 = load <8 x i8>, <8 x i8>* %6502, align 1, !tbaa !389
  %6504 = getelementptr inbounds i8, i8* %5356, i64 58
  %6505 = bitcast i8* %6504 to <8 x i8>*
  %6506 = load <8 x i8>, <8 x i8>* %6505, align 2, !tbaa !389
  %6507 = getelementptr inbounds i8, i8* %5356, i64 60
  %6508 = bitcast i8* %6507 to <8 x i8>*
  %6509 = load <8 x i8>, <8 x i8>* %6508, align 4, !tbaa !389
  %6510 = getelementptr inbounds i8, i8* %5387, i64 59
  %6511 = bitcast i8* %6510 to <8 x i8>*
  %6512 = load <8 x i8>, <8 x i8>* %6511, align 1, !tbaa !389
  %6513 = getelementptr inbounds i8, i8* %5387, i64 58
  %6514 = bitcast i8* %6513 to <8 x i8>*
  %6515 = load <8 x i8>, <8 x i8>* %6514, align 2, !tbaa !389
  %6516 = getelementptr inbounds i8, i8* %5387, i64 60
  %6517 = bitcast i8* %6516 to <8 x i8>*
  %6518 = load <8 x i8>, <8 x i8>* %6517, align 4, !tbaa !389
  %6519 = getelementptr inbounds i8, i8* %5418, i64 59
  %6520 = bitcast i8* %6519 to <8 x i8>*
  %6521 = load <8 x i8>, <8 x i8>* %6520, align 1, !tbaa !389
  %6522 = getelementptr inbounds i8, i8* %5418, i64 58
  %6523 = bitcast i8* %6522 to <8 x i8>*
  %6524 = load <8 x i8>, <8 x i8>* %6523, align 2, !tbaa !389
  %6525 = getelementptr inbounds i8, i8* %5418, i64 60
  %6526 = bitcast i8* %6525 to <8 x i8>*
  %6527 = load <8 x i8>, <8 x i8>* %6526, align 4, !tbaa !389
  %6528 = getelementptr inbounds i8, i8* %5449, i64 59
  %6529 = bitcast i8* %6528 to <8 x i8>*
  %6530 = load <8 x i8>, <8 x i8>* %6529, align 1, !tbaa !389
  %6531 = getelementptr inbounds i8, i8* %5449, i64 58
  %6532 = bitcast i8* %6531 to <8 x i8>*
  %6533 = load <8 x i8>, <8 x i8>* %6532, align 2, !tbaa !389
  %6534 = getelementptr inbounds i8, i8* %5449, i64 60
  %6535 = bitcast i8* %6534 to <8 x i8>*
  %6536 = load <8 x i8>, <8 x i8>* %6535, align 4, !tbaa !389
  %6537 = zext <8 x i8> %t706 to <8 x i16>
  %6538 = zext <8 x i8> %6536 to <8 x i16>
  %6539 = zext <8 x i8> %6533 to <8 x i16>
  %6540 = zext <8 x i8> %t705 to <8 x i16>
  %6541 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %6530) #12
  %6542 = add nuw nsw <8 x i16> %6537, %6540
  %6543 = add nuw nsw <8 x i16> %6542, %6539
  %6544 = add <8 x i16> %6543, %6541
  %6545 = add <8 x i16> %6544, %6538
  %6546 = zext <8 x i8> %t704 to <8 x i16>
  %6547 = zext <8 x i8> %6527 to <8 x i16>
  %6548 = zext <8 x i8> %6524 to <8 x i16>
  %6549 = zext <8 x i8> %t703 to <8 x i16>
  %6550 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %6521) #12
  %6551 = add nuw nsw <8 x i16> %6546, %6549
  %6552 = add nuw nsw <8 x i16> %6551, %6548
  %6553 = add nuw nsw <8 x i16> %6552, %6547
  %6554 = add <8 x i16> %6553, %6550
  %6555 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %6545, <8 x i16> %6554) #12
  %6556 = zext <8 x i8> %5618 to <8 x i16>
  %6557 = zext <8 x i8> %6518 to <8 x i16>
  %6558 = zext <8 x i8> %6515 to <8 x i16>
  %6559 = zext <8 x i8> %5601 to <8 x i16>
  %6560 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %6512) #12
  %6561 = add nuw nsw <8 x i16> %6556, %6559
  %6562 = add nuw nsw <8 x i16> %6561, %6558
  %6563 = add nuw nsw <8 x i16> %6562, %6557
  %6564 = add <8 x i16> %6563, %6560
  %6565 = shl <8 x i16> %6564, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6566 = zext <8 x i8> %5584 to <8 x i16>
  %6567 = zext <8 x i8> %6509 to <8 x i16>
  %6568 = zext <8 x i8> %6506 to <8 x i16>
  %6569 = zext <8 x i8> %5567 to <8 x i16>
  %6570 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %6503) #12
  %6571 = add nuw nsw <8 x i16> %6566, %6569
  %6572 = add nuw nsw <8 x i16> %6571, %6568
  %6573 = add nuw nsw <8 x i16> %6572, %6567
  %6574 = add <8 x i16> %6573, %6570
  %6575 = shl <8 x i16> %6574, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6576 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %6565, <8 x i16> %6575) #12
  %6577 = add <8 x i16> %6576, %6555
  %6578 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %6577, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %6579 = trunc <8 x i16> %6578 to <8 x i8>
  %6580 = getelementptr inbounds i8, i8* %5480, i64 48
  %6581 = bitcast i8* %6580 to <8 x i8>*
  %6582 = load <8 x i8>, <8 x i8>* %6581, align 16, !tbaa !389
  %6583 = getelementptr inbounds i8, i8* %5480, i64 54
  %6584 = bitcast i8* %6583 to <8 x i8>*
  %6585 = load <8 x i8>, <8 x i8>* %6584, align 2, !tbaa !389
  %6586 = zext <8 x i8> %6585 to <8 x i16>
  %6587 = zext <8 x i8> %t708 to <8 x i16>
  %6588 = zext <8 x i8> %t710 to <8 x i16>
  %6589 = zext <8 x i8> %t709 to <8 x i16>
  %6590 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t711) #12
  %6591 = add nuw nsw <8 x i16> %6589, %6587
  %6592 = add nuw nsw <8 x i16> %6591, %6588
  %6593 = add <8 x i16> %6592, %6590
  %6594 = add <8 x i16> %6593, %6586
  %6595 = zext <8 x i8> %t711 to <8 x i16>
  %6596 = zext <8 x i8> %t707 to <8 x i16>
  %6597 = zext <8 x i8> %6582 to <8 x i16>
  %6598 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t709) #12
  %6599 = add nuw nsw <8 x i16> %6588, %6596
  %6600 = add nuw nsw <8 x i16> %6599, %6595
  %6601 = add nuw nsw <8 x i16> %6600, %6597
  %6602 = add <8 x i16> %6601, %6598
  %6603 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %6594, <8 x i16> %6602) #12
  %6604 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t708) #12
  %6605 = add nuw nsw <8 x i16> %6467, %6477
  %6606 = add nuw nsw <8 x i16> %6605, %6487
  %6607 = add nuw nsw <8 x i16> %6606, %6458
  %6608 = add <8 x i16> %6607, %6604
  %6609 = shl <8 x i16> %6608, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6610 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t707) #12
  %6611 = add nuw nsw <8 x i16> %6470, %6480
  %6612 = add nuw nsw <8 x i16> %6611, %6490
  %6613 = add nuw nsw <8 x i16> %6612, %6461
  %6614 = add <8 x i16> %6613, %6610
  %6615 = shl <8 x i16> %6614, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6616 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %6609, <8 x i16> %6615) #12
  %6617 = add <8 x i16> %6616, %6603
  %6618 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %6617, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %6619 = trunc <8 x i16> %6618 to <8 x i8>
  %6620 = getelementptr inbounds i8, i8* %5480, i64 56
  %6621 = bitcast i8* %6620 to <8 x i8>*
  %6622 = load <8 x i8>, <8 x i8>* %6621, align 8, !tbaa !389
  %6623 = getelementptr inbounds i8, i8* %5480, i64 62
  %6624 = bitcast i8* %6623 to <8 x i8>*
  %6625 = load <8 x i8>, <8 x i8>* %6624, align 2, !tbaa !389
  %6626 = zext <8 x i8> %6625 to <8 x i16>
  %6627 = zext <8 x i8> %t713 to <8 x i16>
  %6628 = zext <8 x i8> %t715 to <8 x i16>
  %6629 = zext <8 x i8> %t714 to <8 x i16>
  %6630 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t716) #12
  %6631 = add nuw nsw <8 x i16> %6629, %6627
  %6632 = add nuw nsw <8 x i16> %6631, %6628
  %6633 = add <8 x i16> %6632, %6630
  %6634 = add <8 x i16> %6633, %6626
  %6635 = zext <8 x i8> %t716 to <8 x i16>
  %6636 = zext <8 x i8> %t712 to <8 x i16>
  %6637 = zext <8 x i8> %6622 to <8 x i16>
  %6638 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t714) #12
  %6639 = add nuw nsw <8 x i16> %6628, %6636
  %6640 = add nuw nsw <8 x i16> %6639, %6635
  %6641 = add nuw nsw <8 x i16> %6640, %6637
  %6642 = add <8 x i16> %6641, %6638
  %6643 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %6634, <8 x i16> %6642) #12
  %6644 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t713) #12
  %6645 = add nuw nsw <8 x i16> %6546, %6556
  %6646 = add nuw nsw <8 x i16> %6645, %6566
  %6647 = add nuw nsw <8 x i16> %6646, %6537
  %6648 = add <8 x i16> %6647, %6644
  %6649 = shl <8 x i16> %6648, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6650 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t712) #12
  %6651 = add nuw nsw <8 x i16> %6549, %6559
  %6652 = add nuw nsw <8 x i16> %6651, %6569
  %6653 = add nuw nsw <8 x i16> %6652, %6540
  %6654 = add <8 x i16> %6653, %6650
  %6655 = shl <8 x i16> %6654, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6656 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %6649, <8 x i16> %6655) #12
  %6657 = add <8 x i16> %6656, %6643
  %6658 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %6657, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %6659 = trunc <8 x i16> %6658 to <8 x i8>
  %6660 = add <8 x i8> %6619, %6500
  %6661 = add <8 x i8> %6659, %6579
  %6662 = shufflevector <8 x i8> %6660, <8 x i8> %6661, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6663 = add nsw i64 %5355, %5351
  %6664 = getelementptr inbounds i8, i8* %output18, i64 %6663
  %6665 = bitcast i8* %6664 to <16 x i8>*
  store <16 x i8> %5939, <16 x i8>* %6665, align 1, !tbaa !391
  %6666 = getelementptr inbounds i8, i8* %6664, i64 16
  %6667 = bitcast i8* %6666 to <16 x i8>*
  store <16 x i8> %6180, <16 x i8>* %6667, align 1, !tbaa !391
  %6668 = getelementptr inbounds i8, i8* %6664, i64 32
  %6669 = bitcast i8* %6668 to <16 x i8>*
  store <16 x i8> %6421, <16 x i8>* %6669, align 1, !tbaa !391
  %6670 = getelementptr inbounds i8, i8* %6664, i64 48
  %6671 = bitcast i8* %6670 to <16 x i8>*
  store <16 x i8> %6662, <16 x i8>* %6671, align 1, !tbaa !391
  %6672 = add nsw i64 %indvars.iv318, %110
  %6673 = shl nsw i64 %6672, 6
  %6674 = getelementptr inbounds i8, i8* %bounded_input54, i64 %6673
  %6675 = getelementptr inbounds i8, i8* %6674, i64 1
  %6676 = bitcast i8* %6675 to <16 x i8>*
  %6677 = load <16 x i8>, <16 x i8>* %6676, align 1, !tbaa !389
  %6678 = getelementptr inbounds i8, i8* %6674, i64 17
  %6679 = bitcast i8* %6678 to <16 x i8>*
  %6680 = load <16 x i8>, <16 x i8>* %6679, align 1, !tbaa !389
  %6681 = getelementptr inbounds i8, i8* %6674, i64 33
  %6682 = bitcast i8* %6681 to <16 x i8>*
  %6683 = load <16 x i8>, <16 x i8>* %6682, align 1, !tbaa !389
  %6684 = getelementptr inbounds i8, i8* %6674, i64 49
  %6685 = bitcast i8* %6684 to <16 x i8>*
  %6686 = load <16 x i8>, <16 x i8>* %6685, align 1, !tbaa !389
  %6687 = shufflevector <16 x i8> %6677, <16 x i8> %6680, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6688 = shufflevector <16 x i8> %6683, <16 x i8> %6686, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %t369.s143 = shufflevector <32 x i8> %6687, <32 x i8> %6688, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %6689 = getelementptr inbounds i8, i8* %6674, i64 5
  %6690 = bitcast i8* %6689 to <16 x i8>*
  %6691 = load <16 x i8>, <16 x i8>* %6690, align 1, !tbaa !389
  %6692 = getelementptr inbounds i8, i8* %6674, i64 21
  %6693 = bitcast i8* %6692 to <16 x i8>*
  %6694 = load <16 x i8>, <16 x i8>* %6693, align 1, !tbaa !389
  %6695 = getelementptr inbounds i8, i8* %6674, i64 37
  %6696 = bitcast i8* %6695 to <16 x i8>*
  %6697 = load <16 x i8>, <16 x i8>* %6696, align 1, !tbaa !389
  %6698 = getelementptr inbounds i8, i8* %6674, i64 53
  %6699 = bitcast i8* %6698 to <16 x i8>*
  %6700 = load <16 x i8>, <16 x i8>* %6699, align 1, !tbaa !389
  %6701 = shufflevector <16 x i8> %6691, <16 x i8> %6694, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6702 = shufflevector <16 x i8> %6697, <16 x i8> %6700, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %t370.s144 = shufflevector <32 x i8> %6701, <32 x i8> %6702, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %6703 = load <16 x i8>, <16 x i8>* %5482, align 1, !tbaa !389
  %6704 = load <16 x i8>, <16 x i8>* %5485, align 1, !tbaa !389
  %6705 = load <16 x i8>, <16 x i8>* %5488, align 1, !tbaa !389
  %6706 = load <16 x i8>, <16 x i8>* %5491, align 1, !tbaa !389
  %6707 = shufflevector <16 x i8> %6703, <16 x i8> %6704, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6708 = shufflevector <16 x i8> %6705, <16 x i8> %6706, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %t372.s146 = shufflevector <32 x i8> %6707, <32 x i8> %6708, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %6709 = load <16 x i8>, <16 x i8>* %5496, align 1, !tbaa !389
  %6710 = load <16 x i8>, <16 x i8>* %5499, align 1, !tbaa !389
  %6711 = load <16 x i8>, <16 x i8>* %5502, align 1, !tbaa !389
  %6712 = load <16 x i8>, <16 x i8>* %5505, align 1, !tbaa !389
  %6713 = shufflevector <16 x i8> %6709, <16 x i8> %6710, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6714 = shufflevector <16 x i8> %6711, <16 x i8> %6712, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %t373.s147 = shufflevector <32 x i8> %6713, <32 x i8> %6714, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %6715 = load <16 x i8>, <16 x i8>* %5451, align 1, !tbaa !389
  %6716 = load <16 x i8>, <16 x i8>* %5454, align 1, !tbaa !389
  %6717 = load <16 x i8>, <16 x i8>* %5457, align 1, !tbaa !389
  %6718 = load <16 x i8>, <16 x i8>* %5460, align 1, !tbaa !389
  %6719 = shufflevector <16 x i8> %6715, <16 x i8> %6716, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6720 = shufflevector <16 x i8> %6717, <16 x i8> %6718, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %t377.s151 = shufflevector <32 x i8> %6719, <32 x i8> %6720, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %6721 = load <16 x i8>, <16 x i8>* %5465, align 1, !tbaa !389
  %6722 = load <16 x i8>, <16 x i8>* %5468, align 1, !tbaa !389
  %6723 = load <16 x i8>, <16 x i8>* %5471, align 1, !tbaa !389
  %6724 = load <16 x i8>, <16 x i8>* %5474, align 1, !tbaa !389
  %6725 = shufflevector <16 x i8> %6721, <16 x i8> %6722, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6726 = shufflevector <16 x i8> %6723, <16 x i8> %6724, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %t378.s152 = shufflevector <32 x i8> %6725, <32 x i8> %6726, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %6727 = bitcast i8* %5730 to <16 x i8>*
  %6728 = load <16 x i8>, <16 x i8>* %6727, align 2, !tbaa !389
  %6729 = bitcast i8* %5970 to <16 x i8>*
  %6730 = load <16 x i8>, <16 x i8>* %6729, align 2, !tbaa !389
  %6731 = bitcast i8* %6211 to <16 x i8>*
  %6732 = load <16 x i8>, <16 x i8>* %6731, align 2, !tbaa !389
  %6733 = bitcast i8* %6452 to <16 x i8>*
  %6734 = load <16 x i8>, <16 x i8>* %6733, align 2, !tbaa !389
  %6735 = shufflevector <16 x i8> %6728, <16 x i8> %6730, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6736 = shufflevector <16 x i8> %6732, <16 x i8> %6734, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %t379.s153 = shufflevector <32 x i8> %6735, <32 x i8> %6736, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %6737 = bitcast i8* %5727 to <16 x i8>*
  %6738 = load <16 x i8>, <16 x i8>* %6737, align 1, !tbaa !389
  %6739 = bitcast i8* %5967 to <16 x i8>*
  %6740 = load <16 x i8>, <16 x i8>* %6739, align 1, !tbaa !389
  %6741 = bitcast i8* %6208 to <16 x i8>*
  %6742 = load <16 x i8>, <16 x i8>* %6741, align 1, !tbaa !389
  %6743 = bitcast i8* %6449 to <16 x i8>*
  %6744 = load <16 x i8>, <16 x i8>* %6743, align 1, !tbaa !389
  %6745 = shufflevector <16 x i8> %6738, <16 x i8> %6740, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6746 = shufflevector <16 x i8> %6742, <16 x i8> %6744, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %t380.s154 = shufflevector <32 x i8> %6745, <32 x i8> %6746, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %6747 = bitcast i8* %5733 to <16 x i8>*
  %6748 = load <16 x i8>, <16 x i8>* %6747, align 4, !tbaa !389
  %6749 = bitcast i8* %5973 to <16 x i8>*
  %6750 = load <16 x i8>, <16 x i8>* %6749, align 4, !tbaa !389
  %6751 = bitcast i8* %6214 to <16 x i8>*
  %6752 = load <16 x i8>, <16 x i8>* %6751, align 4, !tbaa !389
  %6753 = bitcast i8* %6455 to <16 x i8>*
  %6754 = load <16 x i8>, <16 x i8>* %6753, align 4, !tbaa !389
  %6755 = shufflevector <16 x i8> %6748, <16 x i8> %6750, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6756 = shufflevector <16 x i8> %6752, <16 x i8> %6754, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %t381.s155 = shufflevector <32 x i8> %6755, <32 x i8> %6756, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %6757 = bitcast <64 x i8> %t369.s143 to <8 x i64>
  %6758 = shufflevector <8 x i64> %6757, <8 x i64> undef, <1 x i32> zeroinitializer
  %6759 = bitcast <1 x i64> %6758 to <8 x i8>
  %6760 = shufflevector <8 x i64> %6757, <8 x i64> undef, <1 x i32> <i32 1>
  %6761 = bitcast <1 x i64> %6760 to <8 x i8>
  %6762 = shufflevector <8 x i64> %6757, <8 x i64> undef, <1 x i32> <i32 2>
  %6763 = bitcast <1 x i64> %6762 to <8 x i8>
  %6764 = shufflevector <8 x i64> %6757, <8 x i64> undef, <1 x i32> <i32 3>
  %6765 = bitcast <1 x i64> %6764 to <8 x i8>
  %6766 = shufflevector <8 x i64> %6757, <8 x i64> undef, <1 x i32> <i32 4>
  %6767 = bitcast <1 x i64> %6766 to <8 x i8>
  %6768 = shufflevector <8 x i64> %6757, <8 x i64> undef, <1 x i32> <i32 5>
  %6769 = bitcast <1 x i64> %6768 to <8 x i8>
  %6770 = shufflevector <8 x i64> %6757, <8 x i64> undef, <1 x i32> <i32 6>
  %6771 = bitcast <1 x i64> %6770 to <8 x i8>
  %6772 = shufflevector <8 x i64> %6757, <8 x i64> undef, <1 x i32> <i32 7>
  %6773 = bitcast <1 x i64> %6772 to <8 x i8>
  %6774 = bitcast <64 x i8> %t370.s144 to <8 x i64>
  %6775 = shufflevector <8 x i64> %6774, <8 x i64> undef, <1 x i32> zeroinitializer
  %6776 = bitcast <1 x i64> %6775 to <8 x i8>
  %6777 = shufflevector <8 x i64> %6774, <8 x i64> undef, <1 x i32> <i32 1>
  %6778 = bitcast <1 x i64> %6777 to <8 x i8>
  %6779 = shufflevector <8 x i64> %6774, <8 x i64> undef, <1 x i32> <i32 2>
  %6780 = bitcast <1 x i64> %6779 to <8 x i8>
  %6781 = shufflevector <8 x i64> %6774, <8 x i64> undef, <1 x i32> <i32 3>
  %6782 = bitcast <1 x i64> %6781 to <8 x i8>
  %6783 = shufflevector <8 x i64> %6774, <8 x i64> undef, <1 x i32> <i32 4>
  %6784 = bitcast <1 x i64> %6783 to <8 x i8>
  %6785 = shufflevector <8 x i64> %6774, <8 x i64> undef, <1 x i32> <i32 5>
  %6786 = bitcast <1 x i64> %6785 to <8 x i8>
  %6787 = shufflevector <8 x i64> %6774, <8 x i64> undef, <1 x i32> <i32 6>
  %6788 = bitcast <1 x i64> %6787 to <8 x i8>
  %6789 = shufflevector <8 x i64> %6774, <8 x i64> undef, <1 x i32> <i32 7>
  %6790 = bitcast <1 x i64> %6789 to <8 x i8>
  %6791 = bitcast <64 x i8> %t372.s146 to <8 x i64>
  %6792 = shufflevector <8 x i64> %6791, <8 x i64> undef, <1 x i32> zeroinitializer
  %t721 = bitcast <1 x i64> %6792 to <8 x i8>
  %6793 = bitcast <64 x i8> %t373.s147 to <8 x i64>
  %6794 = shufflevector <8 x i64> %6793, <8 x i64> undef, <1 x i32> zeroinitializer
  %t722 = bitcast <1 x i64> %6794 to <8 x i8>
  %6795 = shufflevector <8 x i64> %6791, <8 x i64> undef, <1 x i32> <i32 1>
  %t729 = bitcast <1 x i64> %6795 to <8 x i8>
  %6796 = shufflevector <8 x i64> %6793, <8 x i64> undef, <1 x i32> <i32 1>
  %t730 = bitcast <1 x i64> %6796 to <8 x i8>
  %6797 = bitcast <64 x i8> %t377.s151 to <8 x i64>
  %6798 = shufflevector <8 x i64> %6797, <8 x i64> undef, <1 x i32> zeroinitializer
  %t733 = bitcast <1 x i64> %6798 to <8 x i8>
  %6799 = bitcast <64 x i8> %t378.s152 to <8 x i64>
  %6800 = shufflevector <8 x i64> %6799, <8 x i64> undef, <1 x i32> zeroinitializer
  %t734 = bitcast <1 x i64> %6800 to <8 x i8>
  %6801 = bitcast <64 x i8> %t379.s153 to <8 x i64>
  %6802 = shufflevector <8 x i64> %6801, <8 x i64> undef, <1 x i32> zeroinitializer
  %t735 = bitcast <1 x i64> %6802 to <8 x i8>
  %6803 = bitcast <64 x i8> %t380.s154 to <8 x i64>
  %6804 = shufflevector <8 x i64> %6803, <8 x i64> undef, <1 x i32> zeroinitializer
  %t736 = bitcast <1 x i64> %6804 to <8 x i8>
  %6805 = bitcast <64 x i8> %t381.s155 to <8 x i64>
  %6806 = shufflevector <8 x i64> %6805, <8 x i64> undef, <1 x i32> zeroinitializer
  %t737 = bitcast <1 x i64> %6806 to <8 x i8>
  %6807 = shufflevector <8 x i64> %6797, <8 x i64> undef, <1 x i32> <i32 1>
  %t738 = bitcast <1 x i64> %6807 to <8 x i8>
  %6808 = shufflevector <8 x i64> %6799, <8 x i64> undef, <1 x i32> <i32 1>
  %t739 = bitcast <1 x i64> %6808 to <8 x i8>
  %6809 = shufflevector <8 x i64> %6801, <8 x i64> undef, <1 x i32> <i32 1>
  %t740 = bitcast <1 x i64> %6809 to <8 x i8>
  %6810 = shufflevector <8 x i64> %6803, <8 x i64> undef, <1 x i32> <i32 1>
  %t741 = bitcast <1 x i64> %6810 to <8 x i8>
  %6811 = shufflevector <8 x i64> %6805, <8 x i64> undef, <1 x i32> <i32 1>
  %t742 = bitcast <1 x i64> %6811 to <8 x i8>
  %6812 = shufflevector <8 x i64> %6791, <8 x i64> undef, <1 x i32> <i32 2>
  %t747 = bitcast <1 x i64> %6812 to <8 x i8>
  %6813 = shufflevector <8 x i64> %6793, <8 x i64> undef, <1 x i32> <i32 2>
  %t748 = bitcast <1 x i64> %6813 to <8 x i8>
  %6814 = shufflevector <8 x i64> %6791, <8 x i64> undef, <1 x i32> <i32 3>
  %t755 = bitcast <1 x i64> %6814 to <8 x i8>
  %6815 = shufflevector <8 x i64> %6793, <8 x i64> undef, <1 x i32> <i32 3>
  %t756 = bitcast <1 x i64> %6815 to <8 x i8>
  %6816 = shufflevector <8 x i64> %6797, <8 x i64> undef, <1 x i32> <i32 2>
  %t759 = bitcast <1 x i64> %6816 to <8 x i8>
  %6817 = shufflevector <8 x i64> %6799, <8 x i64> undef, <1 x i32> <i32 2>
  %t760 = bitcast <1 x i64> %6817 to <8 x i8>
  %6818 = shufflevector <8 x i64> %6801, <8 x i64> undef, <1 x i32> <i32 2>
  %t761 = bitcast <1 x i64> %6818 to <8 x i8>
  %6819 = shufflevector <8 x i64> %6803, <8 x i64> undef, <1 x i32> <i32 2>
  %t762 = bitcast <1 x i64> %6819 to <8 x i8>
  %6820 = shufflevector <8 x i64> %6805, <8 x i64> undef, <1 x i32> <i32 2>
  %t763 = bitcast <1 x i64> %6820 to <8 x i8>
  %6821 = shufflevector <8 x i64> %6797, <8 x i64> undef, <1 x i32> <i32 3>
  %t764 = bitcast <1 x i64> %6821 to <8 x i8>
  %6822 = shufflevector <8 x i64> %6799, <8 x i64> undef, <1 x i32> <i32 3>
  %t765 = bitcast <1 x i64> %6822 to <8 x i8>
  %6823 = shufflevector <8 x i64> %6801, <8 x i64> undef, <1 x i32> <i32 3>
  %t766 = bitcast <1 x i64> %6823 to <8 x i8>
  %6824 = shufflevector <8 x i64> %6803, <8 x i64> undef, <1 x i32> <i32 3>
  %t767 = bitcast <1 x i64> %6824 to <8 x i8>
  %6825 = shufflevector <8 x i64> %6805, <8 x i64> undef, <1 x i32> <i32 3>
  %t768 = bitcast <1 x i64> %6825 to <8 x i8>
  %6826 = shufflevector <8 x i64> %6791, <8 x i64> undef, <1 x i32> <i32 4>
  %t773 = bitcast <1 x i64> %6826 to <8 x i8>
  %6827 = shufflevector <8 x i64> %6793, <8 x i64> undef, <1 x i32> <i32 4>
  %t774 = bitcast <1 x i64> %6827 to <8 x i8>
  %6828 = shufflevector <8 x i64> %6791, <8 x i64> undef, <1 x i32> <i32 5>
  %t781 = bitcast <1 x i64> %6828 to <8 x i8>
  %6829 = shufflevector <8 x i64> %6793, <8 x i64> undef, <1 x i32> <i32 5>
  %t782 = bitcast <1 x i64> %6829 to <8 x i8>
  %6830 = shufflevector <8 x i64> %6797, <8 x i64> undef, <1 x i32> <i32 4>
  %t785 = bitcast <1 x i64> %6830 to <8 x i8>
  %6831 = shufflevector <8 x i64> %6799, <8 x i64> undef, <1 x i32> <i32 4>
  %t786 = bitcast <1 x i64> %6831 to <8 x i8>
  %6832 = shufflevector <8 x i64> %6801, <8 x i64> undef, <1 x i32> <i32 4>
  %t787 = bitcast <1 x i64> %6832 to <8 x i8>
  %6833 = shufflevector <8 x i64> %6803, <8 x i64> undef, <1 x i32> <i32 4>
  %t788 = bitcast <1 x i64> %6833 to <8 x i8>
  %6834 = shufflevector <8 x i64> %6805, <8 x i64> undef, <1 x i32> <i32 4>
  %t789 = bitcast <1 x i64> %6834 to <8 x i8>
  %6835 = shufflevector <8 x i64> %6797, <8 x i64> undef, <1 x i32> <i32 5>
  %t790 = bitcast <1 x i64> %6835 to <8 x i8>
  %6836 = shufflevector <8 x i64> %6799, <8 x i64> undef, <1 x i32> <i32 5>
  %t791 = bitcast <1 x i64> %6836 to <8 x i8>
  %6837 = shufflevector <8 x i64> %6801, <8 x i64> undef, <1 x i32> <i32 5>
  %t792 = bitcast <1 x i64> %6837 to <8 x i8>
  %6838 = shufflevector <8 x i64> %6803, <8 x i64> undef, <1 x i32> <i32 5>
  %t793 = bitcast <1 x i64> %6838 to <8 x i8>
  %6839 = shufflevector <8 x i64> %6805, <8 x i64> undef, <1 x i32> <i32 5>
  %t794 = bitcast <1 x i64> %6839 to <8 x i8>
  %6840 = shufflevector <8 x i64> %6791, <8 x i64> undef, <1 x i32> <i32 6>
  %t799 = bitcast <1 x i64> %6840 to <8 x i8>
  %6841 = shufflevector <8 x i64> %6793, <8 x i64> undef, <1 x i32> <i32 6>
  %t800 = bitcast <1 x i64> %6841 to <8 x i8>
  %6842 = shufflevector <8 x i64> %6791, <8 x i64> undef, <1 x i32> <i32 7>
  %t807 = bitcast <1 x i64> %6842 to <8 x i8>
  %6843 = shufflevector <8 x i64> %6793, <8 x i64> undef, <1 x i32> <i32 7>
  %t808 = bitcast <1 x i64> %6843 to <8 x i8>
  %6844 = shufflevector <8 x i64> %6797, <8 x i64> undef, <1 x i32> <i32 6>
  %t811 = bitcast <1 x i64> %6844 to <8 x i8>
  %6845 = shufflevector <8 x i64> %6799, <8 x i64> undef, <1 x i32> <i32 6>
  %t812 = bitcast <1 x i64> %6845 to <8 x i8>
  %6846 = shufflevector <8 x i64> %6801, <8 x i64> undef, <1 x i32> <i32 6>
  %t813 = bitcast <1 x i64> %6846 to <8 x i8>
  %6847 = shufflevector <8 x i64> %6803, <8 x i64> undef, <1 x i32> <i32 6>
  %t814 = bitcast <1 x i64> %6847 to <8 x i8>
  %6848 = shufflevector <8 x i64> %6805, <8 x i64> undef, <1 x i32> <i32 6>
  %t815 = bitcast <1 x i64> %6848 to <8 x i8>
  %6849 = shufflevector <8 x i64> %6797, <8 x i64> undef, <1 x i32> <i32 7>
  %t816 = bitcast <1 x i64> %6849 to <8 x i8>
  %6850 = shufflevector <8 x i64> %6799, <8 x i64> undef, <1 x i32> <i32 7>
  %t817 = bitcast <1 x i64> %6850 to <8 x i8>
  %6851 = shufflevector <8 x i64> %6801, <8 x i64> undef, <1 x i32> <i32 7>
  %t818 = bitcast <1 x i64> %6851 to <8 x i8>
  %6852 = shufflevector <8 x i64> %6803, <8 x i64> undef, <1 x i32> <i32 7>
  %t819 = bitcast <1 x i64> %6852 to <8 x i8>
  %6853 = shufflevector <8 x i64> %6805, <8 x i64> undef, <1 x i32> <i32 7>
  %t820 = bitcast <1 x i64> %6853 to <8 x i8>
  %6854 = getelementptr inbounds i8, i8* %6674, i64 3
  %6855 = bitcast i8* %6854 to <8 x i8>*
  %6856 = load <8 x i8>, <8 x i8>* %6855, align 1, !tbaa !389
  %6857 = getelementptr inbounds i8, i8* %6674, i64 2
  %6858 = bitcast i8* %6857 to <8 x i8>*
  %6859 = load <8 x i8>, <8 x i8>* %6858, align 2, !tbaa !389
  %6860 = getelementptr inbounds i8, i8* %6674, i64 4
  %6861 = bitcast i8* %6860 to <8 x i8>*
  %6862 = load <8 x i8>, <8 x i8>* %6861, align 4, !tbaa !389
  %6863 = bitcast i8* %5523 to <8 x i8>*
  %6864 = load <8 x i8>, <8 x i8>* %6863, align 1, !tbaa !389
  %6865 = bitcast i8* %5509 to <8 x i8>*
  %6866 = load <8 x i8>, <8 x i8>* %6865, align 2, !tbaa !389
  %6867 = bitcast i8* %5537 to <8 x i8>*
  %6868 = load <8 x i8>, <8 x i8>* %6867, align 4, !tbaa !389
  %6869 = zext <8 x i8> %t722 to <8 x i16>
  %6870 = zext <8 x i8> %6868 to <8 x i16>
  %6871 = zext <8 x i8> %6866 to <8 x i16>
  %6872 = zext <8 x i8> %t721 to <8 x i16>
  %6873 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %6864) #12
  %6874 = add nuw nsw <8 x i16> %6869, %6872
  %6875 = add nuw nsw <8 x i16> %6874, %6871
  %6876 = add <8 x i16> %6875, %6873
  %6877 = add <8 x i16> %6876, %6870
  %6878 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %5763, <8 x i16> %6877) #12
  %6879 = zext <8 x i8> %6776 to <8 x i16>
  %6880 = zext <8 x i8> %6862 to <8 x i16>
  %6881 = zext <8 x i8> %6859 to <8 x i16>
  %6882 = zext <8 x i8> %6759 to <8 x i16>
  %6883 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %6856) #12
  %6884 = add nuw nsw <8 x i16> %6879, %6882
  %6885 = add nuw nsw <8 x i16> %6884, %6881
  %6886 = add nuw nsw <8 x i16> %6885, %6880
  %6887 = add <8 x i16> %6886, %6883
  %6888 = shl <8 x i16> %6887, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6889 = shl <8 x i16> %5753, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6890 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %6888, <8 x i16> %6889) #12
  %6891 = add <8 x i16> %6890, %6878
  %6892 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %6891, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %6893 = trunc <8 x i16> %6892 to <8 x i8>
  %6894 = getelementptr inbounds i8, i8* %6674, i64 11
  %6895 = bitcast i8* %6894 to <8 x i8>*
  %6896 = load <8 x i8>, <8 x i8>* %6895, align 1, !tbaa !389
  %6897 = getelementptr inbounds i8, i8* %6674, i64 10
  %6898 = bitcast i8* %6897 to <8 x i8>*
  %6899 = load <8 x i8>, <8 x i8>* %6898, align 2, !tbaa !389
  %6900 = getelementptr inbounds i8, i8* %6674, i64 12
  %6901 = bitcast i8* %6900 to <8 x i8>*
  %6902 = load <8 x i8>, <8 x i8>* %6901, align 4, !tbaa !389
  %6903 = getelementptr inbounds i8, i8* %5480, i64 11
  %6904 = bitcast i8* %6903 to <8 x i8>*
  %6905 = load <8 x i8>, <8 x i8>* %6904, align 1, !tbaa !389
  %6906 = getelementptr inbounds i8, i8* %5480, i64 10
  %6907 = bitcast i8* %6906 to <8 x i8>*
  %6908 = load <8 x i8>, <8 x i8>* %6907, align 2, !tbaa !389
  %6909 = getelementptr inbounds i8, i8* %5480, i64 12
  %6910 = bitcast i8* %6909 to <8 x i8>*
  %6911 = load <8 x i8>, <8 x i8>* %6910, align 4, !tbaa !389
  %6912 = zext <8 x i8> %t730 to <8 x i16>
  %6913 = zext <8 x i8> %6911 to <8 x i16>
  %6914 = zext <8 x i8> %6908 to <8 x i16>
  %6915 = zext <8 x i8> %t729 to <8 x i16>
  %6916 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %6905) #12
  %6917 = add nuw nsw <8 x i16> %6912, %6915
  %6918 = add nuw nsw <8 x i16> %6917, %6914
  %6919 = add <8 x i16> %6918, %6916
  %6920 = add <8 x i16> %6919, %6913
  %6921 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %5842, <8 x i16> %6920) #12
  %6922 = zext <8 x i8> %6778 to <8 x i16>
  %6923 = zext <8 x i8> %6902 to <8 x i16>
  %6924 = zext <8 x i8> %6899 to <8 x i16>
  %6925 = zext <8 x i8> %6761 to <8 x i16>
  %6926 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %6896) #12
  %6927 = add nuw nsw <8 x i16> %6922, %6925
  %6928 = add nuw nsw <8 x i16> %6927, %6924
  %6929 = add nuw nsw <8 x i16> %6928, %6923
  %6930 = add <8 x i16> %6929, %6926
  %6931 = shl <8 x i16> %6930, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6932 = shl <8 x i16> %5832, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6933 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %6931, <8 x i16> %6932) #12
  %6934 = add <8 x i16> %6933, %6921
  %6935 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %6934, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %6936 = trunc <8 x i16> %6935 to <8 x i8>
  %6937 = bitcast i8* %5449 to <8 x i8>*
  %6938 = load <8 x i8>, <8 x i8>* %6937, align 16, !tbaa !389
  %6939 = getelementptr inbounds i8, i8* %5449, i64 6
  %6940 = bitcast i8* %6939 to <8 x i8>*
  %6941 = load <8 x i8>, <8 x i8>* %6940, align 2, !tbaa !389
  %6942 = zext <8 x i8> %6941 to <8 x i16>
  %6943 = zext <8 x i8> %t734 to <8 x i16>
  %6944 = zext <8 x i8> %t736 to <8 x i16>
  %6945 = zext <8 x i8> %t735 to <8 x i16>
  %6946 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t737) #12
  %6947 = add nuw nsw <8 x i16> %6945, %6943
  %6948 = add nuw nsw <8 x i16> %6947, %6944
  %6949 = add <8 x i16> %6948, %6946
  %6950 = add <8 x i16> %6949, %6942
  %6951 = zext <8 x i8> %t737 to <8 x i16>
  %6952 = zext <8 x i8> %t733 to <8 x i16>
  %6953 = zext <8 x i8> %6938 to <8 x i16>
  %6954 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t735) #12
  %6955 = add nuw nsw <8 x i16> %6944, %6952
  %6956 = add nuw nsw <8 x i16> %6955, %6951
  %6957 = add nuw nsw <8 x i16> %6956, %6953
  %6958 = add <8 x i16> %6957, %6954
  %6959 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %6950, <8 x i16> %6958) #12
  %6960 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t734) #12
  %6961 = add nuw nsw <8 x i16> %5882, %6879
  %6962 = add nuw nsw <8 x i16> %6961, %6869
  %6963 = add <8 x i16> %6962, %6960
  %6964 = shl <8 x i16> %6963, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6965 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t733) #12
  %6966 = add nuw nsw <8 x i16> %5888, %6882
  %6967 = add nuw nsw <8 x i16> %6966, %6872
  %6968 = add <8 x i16> %6967, %6965
  %6969 = shl <8 x i16> %6968, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6970 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %6964, <8 x i16> %6969) #12
  %6971 = add <8 x i16> %6970, %6959
  %6972 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %6971, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %6973 = trunc <8 x i16> %6972 to <8 x i8>
  %6974 = getelementptr inbounds i8, i8* %5449, i64 8
  %6975 = bitcast i8* %6974 to <8 x i8>*
  %6976 = load <8 x i8>, <8 x i8>* %6975, align 8, !tbaa !389
  %6977 = getelementptr inbounds i8, i8* %5449, i64 14
  %6978 = bitcast i8* %6977 to <8 x i8>*
  %6979 = load <8 x i8>, <8 x i8>* %6978, align 2, !tbaa !389
  %6980 = zext <8 x i8> %6979 to <8 x i16>
  %6981 = zext <8 x i8> %t739 to <8 x i16>
  %6982 = zext <8 x i8> %t741 to <8 x i16>
  %6983 = zext <8 x i8> %t740 to <8 x i16>
  %6984 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t742) #12
  %6985 = add nuw nsw <8 x i16> %6983, %6981
  %6986 = add nuw nsw <8 x i16> %6985, %6982
  %6987 = add <8 x i16> %6986, %6984
  %6988 = add <8 x i16> %6987, %6980
  %6989 = zext <8 x i8> %t742 to <8 x i16>
  %6990 = zext <8 x i8> %t738 to <8 x i16>
  %6991 = zext <8 x i8> %6976 to <8 x i16>
  %6992 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t740) #12
  %6993 = add nuw nsw <8 x i16> %6982, %6990
  %6994 = add nuw nsw <8 x i16> %6993, %6989
  %6995 = add nuw nsw <8 x i16> %6994, %6991
  %6996 = add <8 x i16> %6995, %6992
  %6997 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %6988, <8 x i16> %6996) #12
  %6998 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t739) #12
  %6999 = add nuw nsw <8 x i16> %5922, %6922
  %7000 = add nuw nsw <8 x i16> %6999, %6912
  %7001 = add <8 x i16> %7000, %6998
  %7002 = shl <8 x i16> %7001, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7003 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t738) #12
  %7004 = add nuw nsw <8 x i16> %5928, %6925
  %7005 = add nuw nsw <8 x i16> %7004, %6915
  %7006 = add <8 x i16> %7005, %7003
  %7007 = shl <8 x i16> %7006, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7008 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %7002, <8 x i16> %7007) #12
  %7009 = add <8 x i16> %7008, %6997
  %7010 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %7009, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %7011 = trunc <8 x i16> %7010 to <8 x i8>
  %7012 = add <8 x i8> %6973, %6893
  %7013 = add <8 x i8> %7011, %6936
  %7014 = shufflevector <8 x i8> %7012, <8 x i8> %7013, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7015 = getelementptr inbounds i8, i8* %6674, i64 19
  %7016 = bitcast i8* %7015 to <8 x i8>*
  %7017 = load <8 x i8>, <8 x i8>* %7016, align 1, !tbaa !389
  %7018 = getelementptr inbounds i8, i8* %6674, i64 18
  %7019 = bitcast i8* %7018 to <8 x i8>*
  %7020 = load <8 x i8>, <8 x i8>* %7019, align 2, !tbaa !389
  %7021 = getelementptr inbounds i8, i8* %6674, i64 20
  %7022 = bitcast i8* %7021 to <8 x i8>*
  %7023 = load <8 x i8>, <8 x i8>* %7022, align 4, !tbaa !389
  %7024 = bitcast i8* %5526 to <8 x i8>*
  %7025 = load <8 x i8>, <8 x i8>* %7024, align 1, !tbaa !389
  %7026 = bitcast i8* %5512 to <8 x i8>*
  %7027 = load <8 x i8>, <8 x i8>* %7026, align 2, !tbaa !389
  %7028 = bitcast i8* %5540 to <8 x i8>*
  %7029 = load <8 x i8>, <8 x i8>* %7028, align 4, !tbaa !389
  %7030 = zext <8 x i8> %t748 to <8 x i16>
  %7031 = zext <8 x i8> %7029 to <8 x i16>
  %7032 = zext <8 x i8> %7027 to <8 x i16>
  %7033 = zext <8 x i8> %t747 to <8 x i16>
  %7034 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %7025) #12
  %7035 = add nuw nsw <8 x i16> %7030, %7033
  %7036 = add nuw nsw <8 x i16> %7035, %7032
  %7037 = add <8 x i16> %7036, %7034
  %7038 = add <8 x i16> %7037, %7031
  %7039 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %6003, <8 x i16> %7038) #12
  %7040 = zext <8 x i8> %6780 to <8 x i16>
  %7041 = zext <8 x i8> %7023 to <8 x i16>
  %7042 = zext <8 x i8> %7020 to <8 x i16>
  %7043 = zext <8 x i8> %6763 to <8 x i16>
  %7044 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %7017) #12
  %7045 = add nuw nsw <8 x i16> %7040, %7043
  %7046 = add nuw nsw <8 x i16> %7045, %7042
  %7047 = add nuw nsw <8 x i16> %7046, %7041
  %7048 = add <8 x i16> %7047, %7044
  %7049 = shl <8 x i16> %7048, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7050 = shl <8 x i16> %5993, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7051 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %7049, <8 x i16> %7050) #12
  %7052 = add <8 x i16> %7051, %7039
  %7053 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %7052, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %7054 = trunc <8 x i16> %7053 to <8 x i8>
  %7055 = getelementptr inbounds i8, i8* %6674, i64 27
  %7056 = bitcast i8* %7055 to <8 x i8>*
  %7057 = load <8 x i8>, <8 x i8>* %7056, align 1, !tbaa !389
  %7058 = getelementptr inbounds i8, i8* %6674, i64 26
  %7059 = bitcast i8* %7058 to <8 x i8>*
  %7060 = load <8 x i8>, <8 x i8>* %7059, align 2, !tbaa !389
  %7061 = getelementptr inbounds i8, i8* %6674, i64 28
  %7062 = bitcast i8* %7061 to <8 x i8>*
  %7063 = load <8 x i8>, <8 x i8>* %7062, align 4, !tbaa !389
  %7064 = getelementptr inbounds i8, i8* %5480, i64 27
  %7065 = bitcast i8* %7064 to <8 x i8>*
  %7066 = load <8 x i8>, <8 x i8>* %7065, align 1, !tbaa !389
  %7067 = getelementptr inbounds i8, i8* %5480, i64 26
  %7068 = bitcast i8* %7067 to <8 x i8>*
  %7069 = load <8 x i8>, <8 x i8>* %7068, align 2, !tbaa !389
  %7070 = getelementptr inbounds i8, i8* %5480, i64 28
  %7071 = bitcast i8* %7070 to <8 x i8>*
  %7072 = load <8 x i8>, <8 x i8>* %7071, align 4, !tbaa !389
  %7073 = zext <8 x i8> %t756 to <8 x i16>
  %7074 = zext <8 x i8> %7072 to <8 x i16>
  %7075 = zext <8 x i8> %7069 to <8 x i16>
  %7076 = zext <8 x i8> %t755 to <8 x i16>
  %7077 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %7066) #12
  %7078 = add nuw nsw <8 x i16> %7073, %7076
  %7079 = add nuw nsw <8 x i16> %7078, %7075
  %7080 = add <8 x i16> %7079, %7077
  %7081 = add <8 x i16> %7080, %7074
  %7082 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %6082, <8 x i16> %7081) #12
  %7083 = zext <8 x i8> %6782 to <8 x i16>
  %7084 = zext <8 x i8> %7063 to <8 x i16>
  %7085 = zext <8 x i8> %7060 to <8 x i16>
  %7086 = zext <8 x i8> %6765 to <8 x i16>
  %7087 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %7057) #12
  %7088 = add nuw nsw <8 x i16> %7083, %7086
  %7089 = add nuw nsw <8 x i16> %7088, %7085
  %7090 = add nuw nsw <8 x i16> %7089, %7084
  %7091 = add <8 x i16> %7090, %7087
  %7092 = shl <8 x i16> %7091, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7093 = shl <8 x i16> %6072, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7094 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %7092, <8 x i16> %7093) #12
  %7095 = add <8 x i16> %7094, %7082
  %7096 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %7095, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %7097 = trunc <8 x i16> %7096 to <8 x i8>
  %7098 = getelementptr inbounds i8, i8* %5449, i64 16
  %7099 = bitcast i8* %7098 to <8 x i8>*
  %7100 = load <8 x i8>, <8 x i8>* %7099, align 16, !tbaa !389
  %7101 = getelementptr inbounds i8, i8* %5449, i64 22
  %7102 = bitcast i8* %7101 to <8 x i8>*
  %7103 = load <8 x i8>, <8 x i8>* %7102, align 2, !tbaa !389
  %7104 = zext <8 x i8> %7103 to <8 x i16>
  %7105 = zext <8 x i8> %t760 to <8 x i16>
  %7106 = zext <8 x i8> %t762 to <8 x i16>
  %7107 = zext <8 x i8> %t761 to <8 x i16>
  %7108 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t763) #12
  %7109 = add nuw nsw <8 x i16> %7107, %7105
  %7110 = add nuw nsw <8 x i16> %7109, %7106
  %7111 = add <8 x i16> %7110, %7108
  %7112 = add <8 x i16> %7111, %7104
  %7113 = zext <8 x i8> %t763 to <8 x i16>
  %7114 = zext <8 x i8> %t759 to <8 x i16>
  %7115 = zext <8 x i8> %7100 to <8 x i16>
  %7116 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t761) #12
  %7117 = add nuw nsw <8 x i16> %7106, %7114
  %7118 = add nuw nsw <8 x i16> %7117, %7113
  %7119 = add nuw nsw <8 x i16> %7118, %7115
  %7120 = add <8 x i16> %7119, %7116
  %7121 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %7112, <8 x i16> %7120) #12
  %7122 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t760) #12
  %7123 = add nuw nsw <8 x i16> %6123, %7040
  %7124 = add nuw nsw <8 x i16> %7123, %7030
  %7125 = add <8 x i16> %7124, %7122
  %7126 = shl <8 x i16> %7125, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7127 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t759) #12
  %7128 = add nuw nsw <8 x i16> %6129, %7043
  %7129 = add nuw nsw <8 x i16> %7128, %7033
  %7130 = add <8 x i16> %7129, %7127
  %7131 = shl <8 x i16> %7130, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7132 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %7126, <8 x i16> %7131) #12
  %7133 = add <8 x i16> %7132, %7121
  %7134 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %7133, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %7135 = trunc <8 x i16> %7134 to <8 x i8>
  %7136 = getelementptr inbounds i8, i8* %5449, i64 24
  %7137 = bitcast i8* %7136 to <8 x i8>*
  %7138 = load <8 x i8>, <8 x i8>* %7137, align 8, !tbaa !389
  %7139 = getelementptr inbounds i8, i8* %5449, i64 30
  %7140 = bitcast i8* %7139 to <8 x i8>*
  %7141 = load <8 x i8>, <8 x i8>* %7140, align 2, !tbaa !389
  %7142 = zext <8 x i8> %7141 to <8 x i16>
  %7143 = zext <8 x i8> %t765 to <8 x i16>
  %7144 = zext <8 x i8> %t767 to <8 x i16>
  %7145 = zext <8 x i8> %t766 to <8 x i16>
  %7146 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t768) #12
  %7147 = add nuw nsw <8 x i16> %7145, %7143
  %7148 = add nuw nsw <8 x i16> %7147, %7144
  %7149 = add <8 x i16> %7148, %7146
  %7150 = add <8 x i16> %7149, %7142
  %7151 = zext <8 x i8> %t768 to <8 x i16>
  %7152 = zext <8 x i8> %t764 to <8 x i16>
  %7153 = zext <8 x i8> %7138 to <8 x i16>
  %7154 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t766) #12
  %7155 = add nuw nsw <8 x i16> %7144, %7152
  %7156 = add nuw nsw <8 x i16> %7155, %7151
  %7157 = add nuw nsw <8 x i16> %7156, %7153
  %7158 = add <8 x i16> %7157, %7154
  %7159 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %7150, <8 x i16> %7158) #12
  %7160 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t765) #12
  %7161 = add nuw nsw <8 x i16> %6163, %7083
  %7162 = add nuw nsw <8 x i16> %7161, %7073
  %7163 = add <8 x i16> %7162, %7160
  %7164 = shl <8 x i16> %7163, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7165 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t764) #12
  %7166 = add nuw nsw <8 x i16> %6169, %7086
  %7167 = add nuw nsw <8 x i16> %7166, %7076
  %7168 = add <8 x i16> %7167, %7165
  %7169 = shl <8 x i16> %7168, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7170 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %7164, <8 x i16> %7169) #12
  %7171 = add <8 x i16> %7170, %7159
  %7172 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %7171, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %7173 = trunc <8 x i16> %7172 to <8 x i8>
  %7174 = add <8 x i8> %7135, %7054
  %7175 = add <8 x i8> %7173, %7097
  %7176 = shufflevector <8 x i8> %7174, <8 x i8> %7175, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7177 = getelementptr inbounds i8, i8* %6674, i64 35
  %7178 = bitcast i8* %7177 to <8 x i8>*
  %7179 = load <8 x i8>, <8 x i8>* %7178, align 1, !tbaa !389
  %7180 = getelementptr inbounds i8, i8* %6674, i64 34
  %7181 = bitcast i8* %7180 to <8 x i8>*
  %7182 = load <8 x i8>, <8 x i8>* %7181, align 2, !tbaa !389
  %7183 = getelementptr inbounds i8, i8* %6674, i64 36
  %7184 = bitcast i8* %7183 to <8 x i8>*
  %7185 = load <8 x i8>, <8 x i8>* %7184, align 4, !tbaa !389
  %7186 = bitcast i8* %5529 to <8 x i8>*
  %7187 = load <8 x i8>, <8 x i8>* %7186, align 1, !tbaa !389
  %7188 = bitcast i8* %5515 to <8 x i8>*
  %7189 = load <8 x i8>, <8 x i8>* %7188, align 2, !tbaa !389
  %7190 = bitcast i8* %5543 to <8 x i8>*
  %7191 = load <8 x i8>, <8 x i8>* %7190, align 4, !tbaa !389
  %7192 = zext <8 x i8> %t774 to <8 x i16>
  %7193 = zext <8 x i8> %7191 to <8 x i16>
  %7194 = zext <8 x i8> %7189 to <8 x i16>
  %7195 = zext <8 x i8> %t773 to <8 x i16>
  %7196 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %7187) #12
  %7197 = add nuw nsw <8 x i16> %7192, %7195
  %7198 = add nuw nsw <8 x i16> %7197, %7194
  %7199 = add <8 x i16> %7198, %7196
  %7200 = add <8 x i16> %7199, %7193
  %7201 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %6244, <8 x i16> %7200) #12
  %7202 = zext <8 x i8> %6784 to <8 x i16>
  %7203 = zext <8 x i8> %7185 to <8 x i16>
  %7204 = zext <8 x i8> %7182 to <8 x i16>
  %7205 = zext <8 x i8> %6767 to <8 x i16>
  %7206 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %7179) #12
  %7207 = add nuw nsw <8 x i16> %7202, %7205
  %7208 = add nuw nsw <8 x i16> %7207, %7204
  %7209 = add nuw nsw <8 x i16> %7208, %7203
  %7210 = add <8 x i16> %7209, %7206
  %7211 = shl <8 x i16> %7210, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7212 = shl <8 x i16> %6234, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7213 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %7211, <8 x i16> %7212) #12
  %7214 = add <8 x i16> %7213, %7201
  %7215 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %7214, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %7216 = trunc <8 x i16> %7215 to <8 x i8>
  %7217 = getelementptr inbounds i8, i8* %6674, i64 43
  %7218 = bitcast i8* %7217 to <8 x i8>*
  %7219 = load <8 x i8>, <8 x i8>* %7218, align 1, !tbaa !389
  %7220 = getelementptr inbounds i8, i8* %6674, i64 42
  %7221 = bitcast i8* %7220 to <8 x i8>*
  %7222 = load <8 x i8>, <8 x i8>* %7221, align 2, !tbaa !389
  %7223 = getelementptr inbounds i8, i8* %6674, i64 44
  %7224 = bitcast i8* %7223 to <8 x i8>*
  %7225 = load <8 x i8>, <8 x i8>* %7224, align 4, !tbaa !389
  %7226 = getelementptr inbounds i8, i8* %5480, i64 43
  %7227 = bitcast i8* %7226 to <8 x i8>*
  %7228 = load <8 x i8>, <8 x i8>* %7227, align 1, !tbaa !389
  %7229 = getelementptr inbounds i8, i8* %5480, i64 42
  %7230 = bitcast i8* %7229 to <8 x i8>*
  %7231 = load <8 x i8>, <8 x i8>* %7230, align 2, !tbaa !389
  %7232 = getelementptr inbounds i8, i8* %5480, i64 44
  %7233 = bitcast i8* %7232 to <8 x i8>*
  %7234 = load <8 x i8>, <8 x i8>* %7233, align 4, !tbaa !389
  %7235 = zext <8 x i8> %t782 to <8 x i16>
  %7236 = zext <8 x i8> %7234 to <8 x i16>
  %7237 = zext <8 x i8> %7231 to <8 x i16>
  %7238 = zext <8 x i8> %t781 to <8 x i16>
  %7239 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %7228) #12
  %7240 = add nuw nsw <8 x i16> %7235, %7238
  %7241 = add nuw nsw <8 x i16> %7240, %7237
  %7242 = add <8 x i16> %7241, %7239
  %7243 = add <8 x i16> %7242, %7236
  %7244 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %6323, <8 x i16> %7243) #12
  %7245 = zext <8 x i8> %6786 to <8 x i16>
  %7246 = zext <8 x i8> %7225 to <8 x i16>
  %7247 = zext <8 x i8> %7222 to <8 x i16>
  %7248 = zext <8 x i8> %6769 to <8 x i16>
  %7249 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %7219) #12
  %7250 = add nuw nsw <8 x i16> %7245, %7248
  %7251 = add nuw nsw <8 x i16> %7250, %7247
  %7252 = add nuw nsw <8 x i16> %7251, %7246
  %7253 = add <8 x i16> %7252, %7249
  %7254 = shl <8 x i16> %7253, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7255 = shl <8 x i16> %6313, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7256 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %7254, <8 x i16> %7255) #12
  %7257 = add <8 x i16> %7256, %7244
  %7258 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %7257, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %7259 = trunc <8 x i16> %7258 to <8 x i8>
  %7260 = getelementptr inbounds i8, i8* %5449, i64 32
  %7261 = bitcast i8* %7260 to <8 x i8>*
  %7262 = load <8 x i8>, <8 x i8>* %7261, align 16, !tbaa !389
  %7263 = getelementptr inbounds i8, i8* %5449, i64 38
  %7264 = bitcast i8* %7263 to <8 x i8>*
  %7265 = load <8 x i8>, <8 x i8>* %7264, align 2, !tbaa !389
  %7266 = zext <8 x i8> %7265 to <8 x i16>
  %7267 = zext <8 x i8> %t786 to <8 x i16>
  %7268 = zext <8 x i8> %t788 to <8 x i16>
  %7269 = zext <8 x i8> %t787 to <8 x i16>
  %7270 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t789) #12
  %7271 = add nuw nsw <8 x i16> %7269, %7267
  %7272 = add nuw nsw <8 x i16> %7271, %7268
  %7273 = add <8 x i16> %7272, %7270
  %7274 = add <8 x i16> %7273, %7266
  %7275 = zext <8 x i8> %t789 to <8 x i16>
  %7276 = zext <8 x i8> %t785 to <8 x i16>
  %7277 = zext <8 x i8> %7262 to <8 x i16>
  %7278 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t787) #12
  %7279 = add nuw nsw <8 x i16> %7268, %7276
  %7280 = add nuw nsw <8 x i16> %7279, %7275
  %7281 = add nuw nsw <8 x i16> %7280, %7277
  %7282 = add <8 x i16> %7281, %7278
  %7283 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %7274, <8 x i16> %7282) #12
  %7284 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t786) #12
  %7285 = add nuw nsw <8 x i16> %6364, %7202
  %7286 = add nuw nsw <8 x i16> %7285, %7192
  %7287 = add <8 x i16> %7286, %7284
  %7288 = shl <8 x i16> %7287, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7289 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t785) #12
  %7290 = add nuw nsw <8 x i16> %6370, %7205
  %7291 = add nuw nsw <8 x i16> %7290, %7195
  %7292 = add <8 x i16> %7291, %7289
  %7293 = shl <8 x i16> %7292, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7294 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %7288, <8 x i16> %7293) #12
  %7295 = add <8 x i16> %7294, %7283
  %7296 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %7295, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %7297 = trunc <8 x i16> %7296 to <8 x i8>
  %7298 = getelementptr inbounds i8, i8* %5449, i64 40
  %7299 = bitcast i8* %7298 to <8 x i8>*
  %7300 = load <8 x i8>, <8 x i8>* %7299, align 8, !tbaa !389
  %7301 = getelementptr inbounds i8, i8* %5449, i64 46
  %7302 = bitcast i8* %7301 to <8 x i8>*
  %7303 = load <8 x i8>, <8 x i8>* %7302, align 2, !tbaa !389
  %7304 = zext <8 x i8> %7303 to <8 x i16>
  %7305 = zext <8 x i8> %t791 to <8 x i16>
  %7306 = zext <8 x i8> %t793 to <8 x i16>
  %7307 = zext <8 x i8> %t792 to <8 x i16>
  %7308 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t794) #12
  %7309 = add nuw nsw <8 x i16> %7307, %7305
  %7310 = add nuw nsw <8 x i16> %7309, %7306
  %7311 = add <8 x i16> %7310, %7308
  %7312 = add <8 x i16> %7311, %7304
  %7313 = zext <8 x i8> %t794 to <8 x i16>
  %7314 = zext <8 x i8> %t790 to <8 x i16>
  %7315 = zext <8 x i8> %7300 to <8 x i16>
  %7316 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t792) #12
  %7317 = add nuw nsw <8 x i16> %7306, %7314
  %7318 = add nuw nsw <8 x i16> %7317, %7313
  %7319 = add nuw nsw <8 x i16> %7318, %7315
  %7320 = add <8 x i16> %7319, %7316
  %7321 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %7312, <8 x i16> %7320) #12
  %7322 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t791) #12
  %7323 = add nuw nsw <8 x i16> %6404, %7245
  %7324 = add nuw nsw <8 x i16> %7323, %7235
  %7325 = add <8 x i16> %7324, %7322
  %7326 = shl <8 x i16> %7325, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7327 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t790) #12
  %7328 = add nuw nsw <8 x i16> %6410, %7248
  %7329 = add nuw nsw <8 x i16> %7328, %7238
  %7330 = add <8 x i16> %7329, %7327
  %7331 = shl <8 x i16> %7330, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7332 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %7326, <8 x i16> %7331) #12
  %7333 = add <8 x i16> %7332, %7321
  %7334 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %7333, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %7335 = trunc <8 x i16> %7334 to <8 x i8>
  %7336 = add <8 x i8> %7297, %7216
  %7337 = add <8 x i8> %7335, %7259
  %7338 = shufflevector <8 x i8> %7336, <8 x i8> %7337, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7339 = getelementptr inbounds i8, i8* %6674, i64 51
  %7340 = bitcast i8* %7339 to <8 x i8>*
  %7341 = load <8 x i8>, <8 x i8>* %7340, align 1, !tbaa !389
  %7342 = getelementptr inbounds i8, i8* %6674, i64 50
  %7343 = bitcast i8* %7342 to <8 x i8>*
  %7344 = load <8 x i8>, <8 x i8>* %7343, align 2, !tbaa !389
  %7345 = getelementptr inbounds i8, i8* %6674, i64 52
  %7346 = bitcast i8* %7345 to <8 x i8>*
  %7347 = load <8 x i8>, <8 x i8>* %7346, align 4, !tbaa !389
  %7348 = bitcast i8* %5532 to <8 x i8>*
  %7349 = load <8 x i8>, <8 x i8>* %7348, align 1, !tbaa !389
  %7350 = bitcast i8* %5518 to <8 x i8>*
  %7351 = load <8 x i8>, <8 x i8>* %7350, align 2, !tbaa !389
  %7352 = bitcast i8* %5546 to <8 x i8>*
  %7353 = load <8 x i8>, <8 x i8>* %7352, align 4, !tbaa !389
  %7354 = zext <8 x i8> %t800 to <8 x i16>
  %7355 = zext <8 x i8> %7353 to <8 x i16>
  %7356 = zext <8 x i8> %7351 to <8 x i16>
  %7357 = zext <8 x i8> %t799 to <8 x i16>
  %7358 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %7349) #12
  %7359 = add nuw nsw <8 x i16> %7354, %7357
  %7360 = add nuw nsw <8 x i16> %7359, %7356
  %7361 = add <8 x i16> %7360, %7358
  %7362 = add <8 x i16> %7361, %7355
  %7363 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %6485, <8 x i16> %7362) #12
  %7364 = zext <8 x i8> %6788 to <8 x i16>
  %7365 = zext <8 x i8> %7347 to <8 x i16>
  %7366 = zext <8 x i8> %7344 to <8 x i16>
  %7367 = zext <8 x i8> %6771 to <8 x i16>
  %7368 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %7341) #12
  %7369 = add nuw nsw <8 x i16> %7364, %7367
  %7370 = add nuw nsw <8 x i16> %7369, %7366
  %7371 = add nuw nsw <8 x i16> %7370, %7365
  %7372 = add <8 x i16> %7371, %7368
  %7373 = shl <8 x i16> %7372, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7374 = shl <8 x i16> %6475, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7375 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %7373, <8 x i16> %7374) #12
  %7376 = add <8 x i16> %7375, %7363
  %7377 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %7376, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %7378 = trunc <8 x i16> %7377 to <8 x i8>
  %7379 = getelementptr inbounds i8, i8* %6674, i64 59
  %7380 = bitcast i8* %7379 to <8 x i8>*
  %7381 = load <8 x i8>, <8 x i8>* %7380, align 1, !tbaa !389
  %7382 = getelementptr inbounds i8, i8* %6674, i64 58
  %7383 = bitcast i8* %7382 to <8 x i8>*
  %7384 = load <8 x i8>, <8 x i8>* %7383, align 2, !tbaa !389
  %7385 = getelementptr inbounds i8, i8* %6674, i64 60
  %7386 = bitcast i8* %7385 to <8 x i8>*
  %7387 = load <8 x i8>, <8 x i8>* %7386, align 4, !tbaa !389
  %7388 = getelementptr inbounds i8, i8* %5480, i64 59
  %7389 = bitcast i8* %7388 to <8 x i8>*
  %7390 = load <8 x i8>, <8 x i8>* %7389, align 1, !tbaa !389
  %7391 = getelementptr inbounds i8, i8* %5480, i64 58
  %7392 = bitcast i8* %7391 to <8 x i8>*
  %7393 = load <8 x i8>, <8 x i8>* %7392, align 2, !tbaa !389
  %7394 = getelementptr inbounds i8, i8* %5480, i64 60
  %7395 = bitcast i8* %7394 to <8 x i8>*
  %7396 = load <8 x i8>, <8 x i8>* %7395, align 4, !tbaa !389
  %7397 = zext <8 x i8> %t808 to <8 x i16>
  %7398 = zext <8 x i8> %7396 to <8 x i16>
  %7399 = zext <8 x i8> %7393 to <8 x i16>
  %7400 = zext <8 x i8> %t807 to <8 x i16>
  %7401 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %7390) #12
  %7402 = add nuw nsw <8 x i16> %7397, %7400
  %7403 = add nuw nsw <8 x i16> %7402, %7399
  %7404 = add <8 x i16> %7403, %7401
  %7405 = add <8 x i16> %7404, %7398
  %7406 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %6564, <8 x i16> %7405) #12
  %7407 = zext <8 x i8> %6790 to <8 x i16>
  %7408 = zext <8 x i8> %7387 to <8 x i16>
  %7409 = zext <8 x i8> %7384 to <8 x i16>
  %7410 = zext <8 x i8> %6773 to <8 x i16>
  %7411 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %7381) #12
  %7412 = add nuw nsw <8 x i16> %7407, %7410
  %7413 = add nuw nsw <8 x i16> %7412, %7409
  %7414 = add nuw nsw <8 x i16> %7413, %7408
  %7415 = add <8 x i16> %7414, %7411
  %7416 = shl <8 x i16> %7415, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7417 = shl <8 x i16> %6554, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7418 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %7416, <8 x i16> %7417) #12
  %7419 = add <8 x i16> %7418, %7406
  %7420 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %7419, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %7421 = trunc <8 x i16> %7420 to <8 x i8>
  %7422 = getelementptr inbounds i8, i8* %5449, i64 48
  %7423 = bitcast i8* %7422 to <8 x i8>*
  %7424 = load <8 x i8>, <8 x i8>* %7423, align 16, !tbaa !389
  %7425 = getelementptr inbounds i8, i8* %5449, i64 54
  %7426 = bitcast i8* %7425 to <8 x i8>*
  %7427 = load <8 x i8>, <8 x i8>* %7426, align 2, !tbaa !389
  %7428 = zext <8 x i8> %7427 to <8 x i16>
  %7429 = zext <8 x i8> %t812 to <8 x i16>
  %7430 = zext <8 x i8> %t814 to <8 x i16>
  %7431 = zext <8 x i8> %t813 to <8 x i16>
  %7432 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t815) #12
  %7433 = add nuw nsw <8 x i16> %7431, %7429
  %7434 = add nuw nsw <8 x i16> %7433, %7430
  %7435 = add <8 x i16> %7434, %7432
  %7436 = add <8 x i16> %7435, %7428
  %7437 = zext <8 x i8> %t815 to <8 x i16>
  %7438 = zext <8 x i8> %t811 to <8 x i16>
  %7439 = zext <8 x i8> %7424 to <8 x i16>
  %7440 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t813) #12
  %7441 = add nuw nsw <8 x i16> %7430, %7438
  %7442 = add nuw nsw <8 x i16> %7441, %7437
  %7443 = add nuw nsw <8 x i16> %7442, %7439
  %7444 = add <8 x i16> %7443, %7440
  %7445 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %7436, <8 x i16> %7444) #12
  %7446 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t812) #12
  %7447 = add nuw nsw <8 x i16> %6605, %7364
  %7448 = add nuw nsw <8 x i16> %7447, %7354
  %7449 = add <8 x i16> %7448, %7446
  %7450 = shl <8 x i16> %7449, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7451 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t811) #12
  %7452 = add nuw nsw <8 x i16> %6611, %7367
  %7453 = add nuw nsw <8 x i16> %7452, %7357
  %7454 = add <8 x i16> %7453, %7451
  %7455 = shl <8 x i16> %7454, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7456 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %7450, <8 x i16> %7455) #12
  %7457 = add <8 x i16> %7456, %7445
  %7458 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %7457, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %7459 = trunc <8 x i16> %7458 to <8 x i8>
  %7460 = getelementptr inbounds i8, i8* %5449, i64 56
  %7461 = bitcast i8* %7460 to <8 x i8>*
  %7462 = load <8 x i8>, <8 x i8>* %7461, align 8, !tbaa !389
  %7463 = getelementptr inbounds i8, i8* %5449, i64 62
  %7464 = bitcast i8* %7463 to <8 x i8>*
  %7465 = load <8 x i8>, <8 x i8>* %7464, align 2, !tbaa !389
  %7466 = zext <8 x i8> %7465 to <8 x i16>
  %7467 = zext <8 x i8> %t817 to <8 x i16>
  %7468 = zext <8 x i8> %t819 to <8 x i16>
  %7469 = zext <8 x i8> %t818 to <8 x i16>
  %7470 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t820) #12
  %7471 = add nuw nsw <8 x i16> %7469, %7467
  %7472 = add nuw nsw <8 x i16> %7471, %7468
  %7473 = add <8 x i16> %7472, %7470
  %7474 = add <8 x i16> %7473, %7466
  %7475 = zext <8 x i8> %t820 to <8 x i16>
  %7476 = zext <8 x i8> %t816 to <8 x i16>
  %7477 = zext <8 x i8> %7462 to <8 x i16>
  %7478 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t818) #12
  %7479 = add nuw nsw <8 x i16> %7468, %7476
  %7480 = add nuw nsw <8 x i16> %7479, %7475
  %7481 = add nuw nsw <8 x i16> %7480, %7477
  %7482 = add <8 x i16> %7481, %7478
  %7483 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %7474, <8 x i16> %7482) #12
  %7484 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t817) #12
  %7485 = add nuw nsw <8 x i16> %6645, %7407
  %7486 = add nuw nsw <8 x i16> %7485, %7397
  %7487 = add <8 x i16> %7486, %7484
  %7488 = shl <8 x i16> %7487, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7489 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t816) #12
  %7490 = add nuw nsw <8 x i16> %6651, %7410
  %7491 = add nuw nsw <8 x i16> %7490, %7400
  %7492 = add <8 x i16> %7491, %7489
  %7493 = shl <8 x i16> %7492, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7494 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %7488, <8 x i16> %7493) #12
  %7495 = add <8 x i16> %7494, %7483
  %7496 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %7495, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %7497 = trunc <8 x i16> %7496 to <8 x i8>
  %7498 = add <8 x i8> %7459, %7378
  %7499 = add <8 x i8> %7497, %7421
  %7500 = shufflevector <8 x i8> %7498, <8 x i8> %7499, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7501 = add nsw i64 %5355, %5352
  %7502 = getelementptr inbounds i8, i8* %output18, i64 %7501
  %7503 = bitcast i8* %7502 to <16 x i8>*
  store <16 x i8> %7014, <16 x i8>* %7503, align 1, !tbaa !391
  %7504 = getelementptr inbounds i8, i8* %7502, i64 16
  %7505 = bitcast i8* %7504 to <16 x i8>*
  store <16 x i8> %7176, <16 x i8>* %7505, align 1, !tbaa !391
  %7506 = getelementptr inbounds i8, i8* %7502, i64 32
  %7507 = bitcast i8* %7506 to <16 x i8>*
  store <16 x i8> %7338, <16 x i8>* %7507, align 1, !tbaa !391
  %7508 = getelementptr inbounds i8, i8* %7502, i64 48
  %7509 = bitcast i8* %7508 to <16 x i8>*
  store <16 x i8> %7500, <16 x i8>* %7509, align 1, !tbaa !391
  %7510 = add nsw i64 %indvars.iv318, %119
  %7511 = shl nsw i64 %7510, 6
  %7512 = getelementptr inbounds i8, i8* %bounded_input54, i64 %7511
  %7513 = getelementptr inbounds i8, i8* %7512, i64 1
  %7514 = bitcast i8* %7513 to <16 x i8>*
  %7515 = load <16 x i8>, <16 x i8>* %7514, align 1, !tbaa !389
  %7516 = getelementptr inbounds i8, i8* %7512, i64 17
  %7517 = bitcast i8* %7516 to <16 x i8>*
  %7518 = load <16 x i8>, <16 x i8>* %7517, align 1, !tbaa !389
  %7519 = getelementptr inbounds i8, i8* %7512, i64 33
  %7520 = bitcast i8* %7519 to <16 x i8>*
  %7521 = load <16 x i8>, <16 x i8>* %7520, align 1, !tbaa !389
  %7522 = getelementptr inbounds i8, i8* %7512, i64 49
  %7523 = bitcast i8* %7522 to <16 x i8>*
  %7524 = load <16 x i8>, <16 x i8>* %7523, align 1, !tbaa !389
  %7525 = shufflevector <16 x i8> %7515, <16 x i8> %7518, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7526 = shufflevector <16 x i8> %7521, <16 x i8> %7524, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %t387.s165 = shufflevector <32 x i8> %7525, <32 x i8> %7526, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %7527 = getelementptr inbounds i8, i8* %7512, i64 5
  %7528 = bitcast i8* %7527 to <16 x i8>*
  %7529 = load <16 x i8>, <16 x i8>* %7528, align 1, !tbaa !389
  %7530 = getelementptr inbounds i8, i8* %7512, i64 21
  %7531 = bitcast i8* %7530 to <16 x i8>*
  %7532 = load <16 x i8>, <16 x i8>* %7531, align 1, !tbaa !389
  %7533 = getelementptr inbounds i8, i8* %7512, i64 37
  %7534 = bitcast i8* %7533 to <16 x i8>*
  %7535 = load <16 x i8>, <16 x i8>* %7534, align 1, !tbaa !389
  %7536 = getelementptr inbounds i8, i8* %7512, i64 53
  %7537 = bitcast i8* %7536 to <16 x i8>*
  %7538 = load <16 x i8>, <16 x i8>* %7537, align 1, !tbaa !389
  %7539 = shufflevector <16 x i8> %7529, <16 x i8> %7532, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7540 = shufflevector <16 x i8> %7535, <16 x i8> %7538, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %t388.s166 = shufflevector <32 x i8> %7539, <32 x i8> %7540, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %7541 = load <16 x i8>, <16 x i8>* %5389, align 1, !tbaa !389
  %7542 = load <16 x i8>, <16 x i8>* %5392, align 1, !tbaa !389
  %7543 = load <16 x i8>, <16 x i8>* %5395, align 1, !tbaa !389
  %7544 = load <16 x i8>, <16 x i8>* %5398, align 1, !tbaa !389
  %7545 = shufflevector <16 x i8> %7541, <16 x i8> %7542, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7546 = shufflevector <16 x i8> %7543, <16 x i8> %7544, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %t395.s173 = shufflevector <32 x i8> %7545, <32 x i8> %7546, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %7547 = load <16 x i8>, <16 x i8>* %5403, align 1, !tbaa !389
  %7548 = load <16 x i8>, <16 x i8>* %5406, align 1, !tbaa !389
  %7549 = load <16 x i8>, <16 x i8>* %5409, align 1, !tbaa !389
  %7550 = load <16 x i8>, <16 x i8>* %5412, align 1, !tbaa !389
  %7551 = shufflevector <16 x i8> %7547, <16 x i8> %7548, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7552 = shufflevector <16 x i8> %7549, <16 x i8> %7550, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %t396.s174 = shufflevector <32 x i8> %7551, <32 x i8> %7552, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %7553 = bitcast i8* %5712 to <16 x i8>*
  %7554 = load <16 x i8>, <16 x i8>* %7553, align 2, !tbaa !389
  %7555 = bitcast i8* %5952 to <16 x i8>*
  %7556 = load <16 x i8>, <16 x i8>* %7555, align 2, !tbaa !389
  %7557 = bitcast i8* %6193 to <16 x i8>*
  %7558 = load <16 x i8>, <16 x i8>* %7557, align 2, !tbaa !389
  %7559 = bitcast i8* %6434 to <16 x i8>*
  %7560 = load <16 x i8>, <16 x i8>* %7559, align 2, !tbaa !389
  %7561 = shufflevector <16 x i8> %7554, <16 x i8> %7556, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7562 = shufflevector <16 x i8> %7558, <16 x i8> %7560, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %t397.s175 = shufflevector <32 x i8> %7561, <32 x i8> %7562, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %7563 = bitcast i8* %5709 to <16 x i8>*
  %7564 = load <16 x i8>, <16 x i8>* %7563, align 1, !tbaa !389
  %7565 = bitcast i8* %5949 to <16 x i8>*
  %7566 = load <16 x i8>, <16 x i8>* %7565, align 1, !tbaa !389
  %7567 = bitcast i8* %6190 to <16 x i8>*
  %7568 = load <16 x i8>, <16 x i8>* %7567, align 1, !tbaa !389
  %7569 = bitcast i8* %6431 to <16 x i8>*
  %7570 = load <16 x i8>, <16 x i8>* %7569, align 1, !tbaa !389
  %7571 = shufflevector <16 x i8> %7564, <16 x i8> %7566, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7572 = shufflevector <16 x i8> %7568, <16 x i8> %7570, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %t398.s176 = shufflevector <32 x i8> %7571, <32 x i8> %7572, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %7573 = bitcast i8* %5715 to <16 x i8>*
  %7574 = load <16 x i8>, <16 x i8>* %7573, align 4, !tbaa !389
  %7575 = bitcast i8* %5955 to <16 x i8>*
  %7576 = load <16 x i8>, <16 x i8>* %7575, align 4, !tbaa !389
  %7577 = bitcast i8* %6196 to <16 x i8>*
  %7578 = load <16 x i8>, <16 x i8>* %7577, align 4, !tbaa !389
  %7579 = bitcast i8* %6437 to <16 x i8>*
  %7580 = load <16 x i8>, <16 x i8>* %7579, align 4, !tbaa !389
  %7581 = shufflevector <16 x i8> %7574, <16 x i8> %7576, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7582 = shufflevector <16 x i8> %7578, <16 x i8> %7580, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %t399.s177 = shufflevector <32 x i8> %7581, <32 x i8> %7582, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %7583 = bitcast <64 x i8> %t387.s165 to <8 x i64>
  %7584 = shufflevector <8 x i64> %7583, <8 x i64> undef, <1 x i32> zeroinitializer
  %7585 = bitcast <1 x i64> %7584 to <8 x i8>
  %7586 = shufflevector <8 x i64> %7583, <8 x i64> undef, <1 x i32> <i32 1>
  %7587 = bitcast <1 x i64> %7586 to <8 x i8>
  %7588 = shufflevector <8 x i64> %7583, <8 x i64> undef, <1 x i32> <i32 2>
  %7589 = bitcast <1 x i64> %7588 to <8 x i8>
  %7590 = shufflevector <8 x i64> %7583, <8 x i64> undef, <1 x i32> <i32 3>
  %7591 = bitcast <1 x i64> %7590 to <8 x i8>
  %7592 = shufflevector <8 x i64> %7583, <8 x i64> undef, <1 x i32> <i32 4>
  %7593 = bitcast <1 x i64> %7592 to <8 x i8>
  %7594 = shufflevector <8 x i64> %7583, <8 x i64> undef, <1 x i32> <i32 5>
  %7595 = bitcast <1 x i64> %7594 to <8 x i8>
  %7596 = shufflevector <8 x i64> %7583, <8 x i64> undef, <1 x i32> <i32 6>
  %7597 = bitcast <1 x i64> %7596 to <8 x i8>
  %7598 = shufflevector <8 x i64> %7583, <8 x i64> undef, <1 x i32> <i32 7>
  %7599 = bitcast <1 x i64> %7598 to <8 x i8>
  %7600 = bitcast <64 x i8> %t388.s166 to <8 x i64>
  %7601 = shufflevector <8 x i64> %7600, <8 x i64> undef, <1 x i32> zeroinitializer
  %7602 = bitcast <1 x i64> %7601 to <8 x i8>
  %7603 = shufflevector <8 x i64> %7600, <8 x i64> undef, <1 x i32> <i32 1>
  %7604 = bitcast <1 x i64> %7603 to <8 x i8>
  %7605 = shufflevector <8 x i64> %7600, <8 x i64> undef, <1 x i32> <i32 2>
  %7606 = bitcast <1 x i64> %7605 to <8 x i8>
  %7607 = shufflevector <8 x i64> %7600, <8 x i64> undef, <1 x i32> <i32 3>
  %7608 = bitcast <1 x i64> %7607 to <8 x i8>
  %7609 = shufflevector <8 x i64> %7600, <8 x i64> undef, <1 x i32> <i32 4>
  %7610 = bitcast <1 x i64> %7609 to <8 x i8>
  %7611 = shufflevector <8 x i64> %7600, <8 x i64> undef, <1 x i32> <i32 5>
  %7612 = bitcast <1 x i64> %7611 to <8 x i8>
  %7613 = shufflevector <8 x i64> %7600, <8 x i64> undef, <1 x i32> <i32 6>
  %7614 = bitcast <1 x i64> %7613 to <8 x i8>
  %7615 = shufflevector <8 x i64> %7600, <8 x i64> undef, <1 x i32> <i32 7>
  %7616 = bitcast <1 x i64> %7615 to <8 x i8>
  %7617 = bitcast <64 x i8> %t395.s173 to <8 x i64>
  %7618 = shufflevector <8 x i64> %7617, <8 x i64> undef, <1 x i32> zeroinitializer
  %t837 = bitcast <1 x i64> %7618 to <8 x i8>
  %7619 = bitcast <64 x i8> %t396.s174 to <8 x i64>
  %7620 = shufflevector <8 x i64> %7619, <8 x i64> undef, <1 x i32> zeroinitializer
  %t838 = bitcast <1 x i64> %7620 to <8 x i8>
  %7621 = bitcast <64 x i8> %t397.s175 to <8 x i64>
  %7622 = shufflevector <8 x i64> %7621, <8 x i64> undef, <1 x i32> zeroinitializer
  %t839 = bitcast <1 x i64> %7622 to <8 x i8>
  %7623 = bitcast <64 x i8> %t398.s176 to <8 x i64>
  %7624 = shufflevector <8 x i64> %7623, <8 x i64> undef, <1 x i32> zeroinitializer
  %t840 = bitcast <1 x i64> %7624 to <8 x i8>
  %7625 = bitcast <64 x i8> %t399.s177 to <8 x i64>
  %7626 = shufflevector <8 x i64> %7625, <8 x i64> undef, <1 x i32> zeroinitializer
  %t841 = bitcast <1 x i64> %7626 to <8 x i8>
  %7627 = shufflevector <8 x i64> %7617, <8 x i64> undef, <1 x i32> <i32 1>
  %t842 = bitcast <1 x i64> %7627 to <8 x i8>
  %7628 = shufflevector <8 x i64> %7619, <8 x i64> undef, <1 x i32> <i32 1>
  %t843 = bitcast <1 x i64> %7628 to <8 x i8>
  %7629 = shufflevector <8 x i64> %7621, <8 x i64> undef, <1 x i32> <i32 1>
  %t844 = bitcast <1 x i64> %7629 to <8 x i8>
  %7630 = shufflevector <8 x i64> %7623, <8 x i64> undef, <1 x i32> <i32 1>
  %t845 = bitcast <1 x i64> %7630 to <8 x i8>
  %7631 = shufflevector <8 x i64> %7625, <8 x i64> undef, <1 x i32> <i32 1>
  %t846 = bitcast <1 x i64> %7631 to <8 x i8>
  %7632 = shufflevector <8 x i64> %7617, <8 x i64> undef, <1 x i32> <i32 2>
  %t863 = bitcast <1 x i64> %7632 to <8 x i8>
  %7633 = shufflevector <8 x i64> %7619, <8 x i64> undef, <1 x i32> <i32 2>
  %t864 = bitcast <1 x i64> %7633 to <8 x i8>
  %7634 = shufflevector <8 x i64> %7621, <8 x i64> undef, <1 x i32> <i32 2>
  %t865 = bitcast <1 x i64> %7634 to <8 x i8>
  %7635 = shufflevector <8 x i64> %7623, <8 x i64> undef, <1 x i32> <i32 2>
  %t866 = bitcast <1 x i64> %7635 to <8 x i8>
  %7636 = shufflevector <8 x i64> %7625, <8 x i64> undef, <1 x i32> <i32 2>
  %t867 = bitcast <1 x i64> %7636 to <8 x i8>
  %7637 = shufflevector <8 x i64> %7617, <8 x i64> undef, <1 x i32> <i32 3>
  %t868 = bitcast <1 x i64> %7637 to <8 x i8>
  %7638 = shufflevector <8 x i64> %7619, <8 x i64> undef, <1 x i32> <i32 3>
  %t869 = bitcast <1 x i64> %7638 to <8 x i8>
  %7639 = shufflevector <8 x i64> %7621, <8 x i64> undef, <1 x i32> <i32 3>
  %t870 = bitcast <1 x i64> %7639 to <8 x i8>
  %7640 = shufflevector <8 x i64> %7623, <8 x i64> undef, <1 x i32> <i32 3>
  %t871 = bitcast <1 x i64> %7640 to <8 x i8>
  %7641 = shufflevector <8 x i64> %7625, <8 x i64> undef, <1 x i32> <i32 3>
  %t872 = bitcast <1 x i64> %7641 to <8 x i8>
  %7642 = shufflevector <8 x i64> %7617, <8 x i64> undef, <1 x i32> <i32 4>
  %t889 = bitcast <1 x i64> %7642 to <8 x i8>
  %7643 = shufflevector <8 x i64> %7619, <8 x i64> undef, <1 x i32> <i32 4>
  %t890 = bitcast <1 x i64> %7643 to <8 x i8>
  %7644 = shufflevector <8 x i64> %7621, <8 x i64> undef, <1 x i32> <i32 4>
  %t891 = bitcast <1 x i64> %7644 to <8 x i8>
  %7645 = shufflevector <8 x i64> %7623, <8 x i64> undef, <1 x i32> <i32 4>
  %t892 = bitcast <1 x i64> %7645 to <8 x i8>
  %7646 = shufflevector <8 x i64> %7625, <8 x i64> undef, <1 x i32> <i32 4>
  %t893 = bitcast <1 x i64> %7646 to <8 x i8>
  %7647 = shufflevector <8 x i64> %7617, <8 x i64> undef, <1 x i32> <i32 5>
  %t894 = bitcast <1 x i64> %7647 to <8 x i8>
  %7648 = shufflevector <8 x i64> %7619, <8 x i64> undef, <1 x i32> <i32 5>
  %t895 = bitcast <1 x i64> %7648 to <8 x i8>
  %7649 = shufflevector <8 x i64> %7621, <8 x i64> undef, <1 x i32> <i32 5>
  %t896 = bitcast <1 x i64> %7649 to <8 x i8>
  %7650 = shufflevector <8 x i64> %7623, <8 x i64> undef, <1 x i32> <i32 5>
  %t897 = bitcast <1 x i64> %7650 to <8 x i8>
  %7651 = shufflevector <8 x i64> %7625, <8 x i64> undef, <1 x i32> <i32 5>
  %t898 = bitcast <1 x i64> %7651 to <8 x i8>
  %7652 = shufflevector <8 x i64> %7617, <8 x i64> undef, <1 x i32> <i32 6>
  %t915 = bitcast <1 x i64> %7652 to <8 x i8>
  %7653 = shufflevector <8 x i64> %7619, <8 x i64> undef, <1 x i32> <i32 6>
  %t916 = bitcast <1 x i64> %7653 to <8 x i8>
  %7654 = shufflevector <8 x i64> %7621, <8 x i64> undef, <1 x i32> <i32 6>
  %t917 = bitcast <1 x i64> %7654 to <8 x i8>
  %7655 = shufflevector <8 x i64> %7623, <8 x i64> undef, <1 x i32> <i32 6>
  %t918 = bitcast <1 x i64> %7655 to <8 x i8>
  %7656 = shufflevector <8 x i64> %7625, <8 x i64> undef, <1 x i32> <i32 6>
  %t919 = bitcast <1 x i64> %7656 to <8 x i8>
  %7657 = shufflevector <8 x i64> %7617, <8 x i64> undef, <1 x i32> <i32 7>
  %t920 = bitcast <1 x i64> %7657 to <8 x i8>
  %7658 = shufflevector <8 x i64> %7619, <8 x i64> undef, <1 x i32> <i32 7>
  %t921 = bitcast <1 x i64> %7658 to <8 x i8>
  %7659 = shufflevector <8 x i64> %7621, <8 x i64> undef, <1 x i32> <i32 7>
  %t922 = bitcast <1 x i64> %7659 to <8 x i8>
  %7660 = shufflevector <8 x i64> %7623, <8 x i64> undef, <1 x i32> <i32 7>
  %t923 = bitcast <1 x i64> %7660 to <8 x i8>
  %7661 = shufflevector <8 x i64> %7625, <8 x i64> undef, <1 x i32> <i32 7>
  %t924 = bitcast <1 x i64> %7661 to <8 x i8>
  %7662 = getelementptr inbounds i8, i8* %7512, i64 3
  %7663 = bitcast i8* %7662 to <8 x i8>*
  %7664 = load <8 x i8>, <8 x i8>* %7663, align 1, !tbaa !389
  %7665 = getelementptr inbounds i8, i8* %7512, i64 2
  %7666 = bitcast i8* %7665 to <8 x i8>*
  %7667 = load <8 x i8>, <8 x i8>* %7666, align 2, !tbaa !389
  %7668 = getelementptr inbounds i8, i8* %7512, i64 4
  %7669 = bitcast i8* %7668 to <8 x i8>*
  %7670 = load <8 x i8>, <8 x i8>* %7669, align 4, !tbaa !389
  %7671 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %6887, <8 x i16> %5744) #12
  %7672 = zext <8 x i8> %7602 to <8 x i16>
  %7673 = zext <8 x i8> %7670 to <8 x i16>
  %7674 = zext <8 x i8> %7667 to <8 x i16>
  %7675 = zext <8 x i8> %7585 to <8 x i16>
  %7676 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %7664) #12
  %7677 = add nuw nsw <8 x i16> %7672, %7675
  %7678 = add nuw nsw <8 x i16> %7677, %7674
  %7679 = add nuw nsw <8 x i16> %7678, %7673
  %7680 = add <8 x i16> %7679, %7676
  %7681 = shl <8 x i16> %7680, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7682 = shl <8 x i16> %6877, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7683 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %7681, <8 x i16> %7682) #12
  %7684 = add <8 x i16> %7683, %7671
  %7685 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %7684, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %7686 = trunc <8 x i16> %7685 to <8 x i8>
  %7687 = getelementptr inbounds i8, i8* %7512, i64 11
  %7688 = bitcast i8* %7687 to <8 x i8>*
  %7689 = load <8 x i8>, <8 x i8>* %7688, align 1, !tbaa !389
  %7690 = getelementptr inbounds i8, i8* %7512, i64 10
  %7691 = bitcast i8* %7690 to <8 x i8>*
  %7692 = load <8 x i8>, <8 x i8>* %7691, align 2, !tbaa !389
  %7693 = getelementptr inbounds i8, i8* %7512, i64 12
  %7694 = bitcast i8* %7693 to <8 x i8>*
  %7695 = load <8 x i8>, <8 x i8>* %7694, align 4, !tbaa !389
  %7696 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %6930, <8 x i16> %5823) #12
  %7697 = zext <8 x i8> %7604 to <8 x i16>
  %7698 = zext <8 x i8> %7695 to <8 x i16>
  %7699 = zext <8 x i8> %7692 to <8 x i16>
  %7700 = zext <8 x i8> %7587 to <8 x i16>
  %7701 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %7689) #12
  %7702 = add nuw nsw <8 x i16> %7697, %7700
  %7703 = add nuw nsw <8 x i16> %7702, %7699
  %7704 = add nuw nsw <8 x i16> %7703, %7698
  %7705 = add <8 x i16> %7704, %7701
  %7706 = shl <8 x i16> %7705, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7707 = shl <8 x i16> %6920, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7708 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %7706, <8 x i16> %7707) #12
  %7709 = add <8 x i16> %7708, %7696
  %7710 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %7709, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %7711 = trunc <8 x i16> %7710 to <8 x i8>
  %7712 = bitcast i8* %5387 to <8 x i8>*
  %7713 = load <8 x i8>, <8 x i8>* %7712, align 16, !tbaa !389
  %7714 = getelementptr inbounds i8, i8* %5387, i64 6
  %7715 = bitcast i8* %7714 to <8 x i8>*
  %7716 = load <8 x i8>, <8 x i8>* %7715, align 2, !tbaa !389
  %7717 = zext <8 x i8> %7716 to <8 x i16>
  %7718 = zext <8 x i8> %t838 to <8 x i16>
  %7719 = zext <8 x i8> %t840 to <8 x i16>
  %7720 = zext <8 x i8> %t839 to <8 x i16>
  %7721 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t841) #12
  %7722 = add nuw nsw <8 x i16> %7720, %7718
  %7723 = add nuw nsw <8 x i16> %7722, %7719
  %7724 = add <8 x i16> %7723, %7721
  %7725 = add <8 x i16> %7724, %7717
  %7726 = zext <8 x i8> %t841 to <8 x i16>
  %7727 = zext <8 x i8> %t837 to <8 x i16>
  %7728 = zext <8 x i8> %7713 to <8 x i16>
  %7729 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t839) #12
  %7730 = add nuw nsw <8 x i16> %7719, %7727
  %7731 = add nuw nsw <8 x i16> %7730, %7726
  %7732 = add nuw nsw <8 x i16> %7731, %7728
  %7733 = add <8 x i16> %7732, %7729
  %7734 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %7725, <8 x i16> %7733) #12
  %7735 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t838) #12
  %7736 = add nuw nsw <8 x i16> %6869, %6879
  %7737 = add nuw nsw <8 x i16> %7736, %5736
  %7738 = add nuw nsw <8 x i16> %7737, %7672
  %7739 = add <8 x i16> %7738, %7735
  %7740 = shl <8 x i16> %7739, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7741 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t837) #12
  %7742 = add nuw nsw <8 x i16> %6872, %6882
  %7743 = add nuw nsw <8 x i16> %7742, %5739
  %7744 = add nuw nsw <8 x i16> %7743, %7675
  %7745 = add <8 x i16> %7744, %7741
  %7746 = shl <8 x i16> %7745, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7747 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %7740, <8 x i16> %7746) #12
  %7748 = add <8 x i16> %7747, %7734
  %7749 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %7748, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %7750 = trunc <8 x i16> %7749 to <8 x i8>
  %7751 = getelementptr inbounds i8, i8* %5387, i64 8
  %7752 = bitcast i8* %7751 to <8 x i8>*
  %7753 = load <8 x i8>, <8 x i8>* %7752, align 8, !tbaa !389
  %7754 = getelementptr inbounds i8, i8* %5387, i64 14
  %7755 = bitcast i8* %7754 to <8 x i8>*
  %7756 = load <8 x i8>, <8 x i8>* %7755, align 2, !tbaa !389
  %7757 = zext <8 x i8> %7756 to <8 x i16>
  %7758 = zext <8 x i8> %t843 to <8 x i16>
  %7759 = zext <8 x i8> %t845 to <8 x i16>
  %7760 = zext <8 x i8> %t844 to <8 x i16>
  %7761 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t846) #12
  %7762 = add nuw nsw <8 x i16> %7760, %7758
  %7763 = add nuw nsw <8 x i16> %7762, %7759
  %7764 = add <8 x i16> %7763, %7761
  %7765 = add <8 x i16> %7764, %7757
  %7766 = zext <8 x i8> %t846 to <8 x i16>
  %7767 = zext <8 x i8> %t842 to <8 x i16>
  %7768 = zext <8 x i8> %7753 to <8 x i16>
  %7769 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t844) #12
  %7770 = add nuw nsw <8 x i16> %7759, %7767
  %7771 = add nuw nsw <8 x i16> %7770, %7766
  %7772 = add nuw nsw <8 x i16> %7771, %7768
  %7773 = add <8 x i16> %7772, %7769
  %7774 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %7765, <8 x i16> %7773) #12
  %7775 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t843) #12
  %7776 = add nuw nsw <8 x i16> %6912, %6922
  %7777 = add nuw nsw <8 x i16> %7776, %5815
  %7778 = add nuw nsw <8 x i16> %7777, %7697
  %7779 = add <8 x i16> %7778, %7775
  %7780 = shl <8 x i16> %7779, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7781 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t842) #12
  %7782 = add nuw nsw <8 x i16> %6915, %6925
  %7783 = add nuw nsw <8 x i16> %7782, %5818
  %7784 = add nuw nsw <8 x i16> %7783, %7700
  %7785 = add <8 x i16> %7784, %7781
  %7786 = shl <8 x i16> %7785, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7787 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %7780, <8 x i16> %7786) #12
  %7788 = add <8 x i16> %7787, %7774
  %7789 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %7788, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %7790 = trunc <8 x i16> %7789 to <8 x i8>
  %7791 = add <8 x i8> %7750, %7686
  %7792 = add <8 x i8> %7790, %7711
  %7793 = shufflevector <8 x i8> %7791, <8 x i8> %7792, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7794 = getelementptr inbounds i8, i8* %7512, i64 19
  %7795 = bitcast i8* %7794 to <8 x i8>*
  %7796 = load <8 x i8>, <8 x i8>* %7795, align 1, !tbaa !389
  %7797 = getelementptr inbounds i8, i8* %7512, i64 18
  %7798 = bitcast i8* %7797 to <8 x i8>*
  %7799 = load <8 x i8>, <8 x i8>* %7798, align 2, !tbaa !389
  %7800 = getelementptr inbounds i8, i8* %7512, i64 20
  %7801 = bitcast i8* %7800 to <8 x i8>*
  %7802 = load <8 x i8>, <8 x i8>* %7801, align 4, !tbaa !389
  %7803 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %7048, <8 x i16> %5984) #12
  %7804 = zext <8 x i8> %7606 to <8 x i16>
  %7805 = zext <8 x i8> %7802 to <8 x i16>
  %7806 = zext <8 x i8> %7799 to <8 x i16>
  %7807 = zext <8 x i8> %7589 to <8 x i16>
  %7808 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %7796) #12
  %7809 = add nuw nsw <8 x i16> %7804, %7807
  %7810 = add nuw nsw <8 x i16> %7809, %7806
  %7811 = add nuw nsw <8 x i16> %7810, %7805
  %7812 = add <8 x i16> %7811, %7808
  %7813 = shl <8 x i16> %7812, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7814 = shl <8 x i16> %7038, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7815 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %7813, <8 x i16> %7814) #12
  %7816 = add <8 x i16> %7815, %7803
  %7817 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %7816, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %7818 = trunc <8 x i16> %7817 to <8 x i8>
  %7819 = getelementptr inbounds i8, i8* %7512, i64 27
  %7820 = bitcast i8* %7819 to <8 x i8>*
  %7821 = load <8 x i8>, <8 x i8>* %7820, align 1, !tbaa !389
  %7822 = getelementptr inbounds i8, i8* %7512, i64 26
  %7823 = bitcast i8* %7822 to <8 x i8>*
  %7824 = load <8 x i8>, <8 x i8>* %7823, align 2, !tbaa !389
  %7825 = getelementptr inbounds i8, i8* %7512, i64 28
  %7826 = bitcast i8* %7825 to <8 x i8>*
  %7827 = load <8 x i8>, <8 x i8>* %7826, align 4, !tbaa !389
  %7828 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %7091, <8 x i16> %6063) #12
  %7829 = zext <8 x i8> %7608 to <8 x i16>
  %7830 = zext <8 x i8> %7827 to <8 x i16>
  %7831 = zext <8 x i8> %7824 to <8 x i16>
  %7832 = zext <8 x i8> %7591 to <8 x i16>
  %7833 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %7821) #12
  %7834 = add nuw nsw <8 x i16> %7829, %7832
  %7835 = add nuw nsw <8 x i16> %7834, %7831
  %7836 = add nuw nsw <8 x i16> %7835, %7830
  %7837 = add <8 x i16> %7836, %7833
  %7838 = shl <8 x i16> %7837, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7839 = shl <8 x i16> %7081, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7840 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %7838, <8 x i16> %7839) #12
  %7841 = add <8 x i16> %7840, %7828
  %7842 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %7841, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %7843 = trunc <8 x i16> %7842 to <8 x i8>
  %7844 = getelementptr inbounds i8, i8* %5387, i64 16
  %7845 = bitcast i8* %7844 to <8 x i8>*
  %7846 = load <8 x i8>, <8 x i8>* %7845, align 16, !tbaa !389
  %7847 = getelementptr inbounds i8, i8* %5387, i64 22
  %7848 = bitcast i8* %7847 to <8 x i8>*
  %7849 = load <8 x i8>, <8 x i8>* %7848, align 2, !tbaa !389
  %7850 = zext <8 x i8> %7849 to <8 x i16>
  %7851 = zext <8 x i8> %t864 to <8 x i16>
  %7852 = zext <8 x i8> %t866 to <8 x i16>
  %7853 = zext <8 x i8> %t865 to <8 x i16>
  %7854 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t867) #12
  %7855 = add nuw nsw <8 x i16> %7853, %7851
  %7856 = add nuw nsw <8 x i16> %7855, %7852
  %7857 = add <8 x i16> %7856, %7854
  %7858 = add <8 x i16> %7857, %7850
  %7859 = zext <8 x i8> %t867 to <8 x i16>
  %7860 = zext <8 x i8> %t863 to <8 x i16>
  %7861 = zext <8 x i8> %7846 to <8 x i16>
  %7862 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t865) #12
  %7863 = add nuw nsw <8 x i16> %7852, %7860
  %7864 = add nuw nsw <8 x i16> %7863, %7859
  %7865 = add nuw nsw <8 x i16> %7864, %7861
  %7866 = add <8 x i16> %7865, %7862
  %7867 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %7858, <8 x i16> %7866) #12
  %7868 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t864) #12
  %7869 = add nuw nsw <8 x i16> %7030, %7040
  %7870 = add nuw nsw <8 x i16> %7869, %5976
  %7871 = add nuw nsw <8 x i16> %7870, %7804
  %7872 = add <8 x i16> %7871, %7868
  %7873 = shl <8 x i16> %7872, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7874 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t863) #12
  %7875 = add nuw nsw <8 x i16> %7033, %7043
  %7876 = add nuw nsw <8 x i16> %7875, %5979
  %7877 = add nuw nsw <8 x i16> %7876, %7807
  %7878 = add <8 x i16> %7877, %7874
  %7879 = shl <8 x i16> %7878, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7880 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %7873, <8 x i16> %7879) #12
  %7881 = add <8 x i16> %7880, %7867
  %7882 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %7881, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %7883 = trunc <8 x i16> %7882 to <8 x i8>
  %7884 = getelementptr inbounds i8, i8* %5387, i64 24
  %7885 = bitcast i8* %7884 to <8 x i8>*
  %7886 = load <8 x i8>, <8 x i8>* %7885, align 8, !tbaa !389
  %7887 = getelementptr inbounds i8, i8* %5387, i64 30
  %7888 = bitcast i8* %7887 to <8 x i8>*
  %7889 = load <8 x i8>, <8 x i8>* %7888, align 2, !tbaa !389
  %7890 = zext <8 x i8> %7889 to <8 x i16>
  %7891 = zext <8 x i8> %t869 to <8 x i16>
  %7892 = zext <8 x i8> %t871 to <8 x i16>
  %7893 = zext <8 x i8> %t870 to <8 x i16>
  %7894 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t872) #12
  %7895 = add nuw nsw <8 x i16> %7893, %7891
  %7896 = add nuw nsw <8 x i16> %7895, %7892
  %7897 = add <8 x i16> %7896, %7894
  %7898 = add <8 x i16> %7897, %7890
  %7899 = zext <8 x i8> %t872 to <8 x i16>
  %7900 = zext <8 x i8> %t868 to <8 x i16>
  %7901 = zext <8 x i8> %7886 to <8 x i16>
  %7902 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t870) #12
  %7903 = add nuw nsw <8 x i16> %7892, %7900
  %7904 = add nuw nsw <8 x i16> %7903, %7899
  %7905 = add nuw nsw <8 x i16> %7904, %7901
  %7906 = add <8 x i16> %7905, %7902
  %7907 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %7898, <8 x i16> %7906) #12
  %7908 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t869) #12
  %7909 = add nuw nsw <8 x i16> %7073, %7083
  %7910 = add nuw nsw <8 x i16> %7909, %6055
  %7911 = add nuw nsw <8 x i16> %7910, %7829
  %7912 = add <8 x i16> %7911, %7908
  %7913 = shl <8 x i16> %7912, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7914 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t868) #12
  %7915 = add nuw nsw <8 x i16> %7076, %7086
  %7916 = add nuw nsw <8 x i16> %7915, %6058
  %7917 = add nuw nsw <8 x i16> %7916, %7832
  %7918 = add <8 x i16> %7917, %7914
  %7919 = shl <8 x i16> %7918, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7920 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %7913, <8 x i16> %7919) #12
  %7921 = add <8 x i16> %7920, %7907
  %7922 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %7921, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %7923 = trunc <8 x i16> %7922 to <8 x i8>
  %7924 = add <8 x i8> %7883, %7818
  %7925 = add <8 x i8> %7923, %7843
  %7926 = shufflevector <8 x i8> %7924, <8 x i8> %7925, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7927 = getelementptr inbounds i8, i8* %7512, i64 35
  %7928 = bitcast i8* %7927 to <8 x i8>*
  %7929 = load <8 x i8>, <8 x i8>* %7928, align 1, !tbaa !389
  %7930 = getelementptr inbounds i8, i8* %7512, i64 34
  %7931 = bitcast i8* %7930 to <8 x i8>*
  %7932 = load <8 x i8>, <8 x i8>* %7931, align 2, !tbaa !389
  %7933 = getelementptr inbounds i8, i8* %7512, i64 36
  %7934 = bitcast i8* %7933 to <8 x i8>*
  %7935 = load <8 x i8>, <8 x i8>* %7934, align 4, !tbaa !389
  %7936 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %7210, <8 x i16> %6225) #12
  %7937 = zext <8 x i8> %7610 to <8 x i16>
  %7938 = zext <8 x i8> %7935 to <8 x i16>
  %7939 = zext <8 x i8> %7932 to <8 x i16>
  %7940 = zext <8 x i8> %7593 to <8 x i16>
  %7941 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %7929) #12
  %7942 = add nuw nsw <8 x i16> %7937, %7940
  %7943 = add nuw nsw <8 x i16> %7942, %7939
  %7944 = add nuw nsw <8 x i16> %7943, %7938
  %7945 = add <8 x i16> %7944, %7941
  %7946 = shl <8 x i16> %7945, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7947 = shl <8 x i16> %7200, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7948 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %7946, <8 x i16> %7947) #12
  %7949 = add <8 x i16> %7948, %7936
  %7950 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %7949, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %7951 = trunc <8 x i16> %7950 to <8 x i8>
  %7952 = getelementptr inbounds i8, i8* %7512, i64 43
  %7953 = bitcast i8* %7952 to <8 x i8>*
  %7954 = load <8 x i8>, <8 x i8>* %7953, align 1, !tbaa !389
  %7955 = getelementptr inbounds i8, i8* %7512, i64 42
  %7956 = bitcast i8* %7955 to <8 x i8>*
  %7957 = load <8 x i8>, <8 x i8>* %7956, align 2, !tbaa !389
  %7958 = getelementptr inbounds i8, i8* %7512, i64 44
  %7959 = bitcast i8* %7958 to <8 x i8>*
  %7960 = load <8 x i8>, <8 x i8>* %7959, align 4, !tbaa !389
  %7961 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %7253, <8 x i16> %6304) #12
  %7962 = zext <8 x i8> %7612 to <8 x i16>
  %7963 = zext <8 x i8> %7960 to <8 x i16>
  %7964 = zext <8 x i8> %7957 to <8 x i16>
  %7965 = zext <8 x i8> %7595 to <8 x i16>
  %7966 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %7954) #12
  %7967 = add nuw nsw <8 x i16> %7962, %7965
  %7968 = add nuw nsw <8 x i16> %7967, %7964
  %7969 = add nuw nsw <8 x i16> %7968, %7963
  %7970 = add <8 x i16> %7969, %7966
  %7971 = shl <8 x i16> %7970, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7972 = shl <8 x i16> %7243, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7973 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %7971, <8 x i16> %7972) #12
  %7974 = add <8 x i16> %7973, %7961
  %7975 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %7974, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %7976 = trunc <8 x i16> %7975 to <8 x i8>
  %7977 = getelementptr inbounds i8, i8* %5387, i64 32
  %7978 = bitcast i8* %7977 to <8 x i8>*
  %7979 = load <8 x i8>, <8 x i8>* %7978, align 16, !tbaa !389
  %7980 = getelementptr inbounds i8, i8* %5387, i64 38
  %7981 = bitcast i8* %7980 to <8 x i8>*
  %7982 = load <8 x i8>, <8 x i8>* %7981, align 2, !tbaa !389
  %7983 = zext <8 x i8> %7982 to <8 x i16>
  %7984 = zext <8 x i8> %t890 to <8 x i16>
  %7985 = zext <8 x i8> %t892 to <8 x i16>
  %7986 = zext <8 x i8> %t891 to <8 x i16>
  %7987 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t893) #12
  %7988 = add nuw nsw <8 x i16> %7986, %7984
  %7989 = add nuw nsw <8 x i16> %7988, %7985
  %7990 = add <8 x i16> %7989, %7987
  %7991 = add <8 x i16> %7990, %7983
  %7992 = zext <8 x i8> %t893 to <8 x i16>
  %7993 = zext <8 x i8> %t889 to <8 x i16>
  %7994 = zext <8 x i8> %7979 to <8 x i16>
  %7995 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t891) #12
  %7996 = add nuw nsw <8 x i16> %7985, %7993
  %7997 = add nuw nsw <8 x i16> %7996, %7992
  %7998 = add nuw nsw <8 x i16> %7997, %7994
  %7999 = add <8 x i16> %7998, %7995
  %8000 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %7991, <8 x i16> %7999) #12
  %8001 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t890) #12
  %8002 = add nuw nsw <8 x i16> %7192, %7202
  %8003 = add nuw nsw <8 x i16> %8002, %6217
  %8004 = add nuw nsw <8 x i16> %8003, %7937
  %8005 = add <8 x i16> %8004, %8001
  %8006 = shl <8 x i16> %8005, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8007 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t889) #12
  %8008 = add nuw nsw <8 x i16> %7195, %7205
  %8009 = add nuw nsw <8 x i16> %8008, %6220
  %8010 = add nuw nsw <8 x i16> %8009, %7940
  %8011 = add <8 x i16> %8010, %8007
  %8012 = shl <8 x i16> %8011, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8013 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %8006, <8 x i16> %8012) #12
  %8014 = add <8 x i16> %8013, %8000
  %8015 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %8014, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %8016 = trunc <8 x i16> %8015 to <8 x i8>
  %8017 = getelementptr inbounds i8, i8* %5387, i64 40
  %8018 = bitcast i8* %8017 to <8 x i8>*
  %8019 = load <8 x i8>, <8 x i8>* %8018, align 8, !tbaa !389
  %8020 = getelementptr inbounds i8, i8* %5387, i64 46
  %8021 = bitcast i8* %8020 to <8 x i8>*
  %8022 = load <8 x i8>, <8 x i8>* %8021, align 2, !tbaa !389
  %8023 = zext <8 x i8> %8022 to <8 x i16>
  %8024 = zext <8 x i8> %t895 to <8 x i16>
  %8025 = zext <8 x i8> %t897 to <8 x i16>
  %8026 = zext <8 x i8> %t896 to <8 x i16>
  %8027 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t898) #12
  %8028 = add nuw nsw <8 x i16> %8026, %8024
  %8029 = add nuw nsw <8 x i16> %8028, %8025
  %8030 = add <8 x i16> %8029, %8027
  %8031 = add <8 x i16> %8030, %8023
  %8032 = zext <8 x i8> %t898 to <8 x i16>
  %8033 = zext <8 x i8> %t894 to <8 x i16>
  %8034 = zext <8 x i8> %8019 to <8 x i16>
  %8035 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t896) #12
  %8036 = add nuw nsw <8 x i16> %8025, %8033
  %8037 = add nuw nsw <8 x i16> %8036, %8032
  %8038 = add nuw nsw <8 x i16> %8037, %8034
  %8039 = add <8 x i16> %8038, %8035
  %8040 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %8031, <8 x i16> %8039) #12
  %8041 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t895) #12
  %8042 = add nuw nsw <8 x i16> %7235, %7245
  %8043 = add nuw nsw <8 x i16> %8042, %6296
  %8044 = add nuw nsw <8 x i16> %8043, %7962
  %8045 = add <8 x i16> %8044, %8041
  %8046 = shl <8 x i16> %8045, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8047 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t894) #12
  %8048 = add nuw nsw <8 x i16> %7238, %7248
  %8049 = add nuw nsw <8 x i16> %8048, %6299
  %8050 = add nuw nsw <8 x i16> %8049, %7965
  %8051 = add <8 x i16> %8050, %8047
  %8052 = shl <8 x i16> %8051, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8053 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %8046, <8 x i16> %8052) #12
  %8054 = add <8 x i16> %8053, %8040
  %8055 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %8054, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %8056 = trunc <8 x i16> %8055 to <8 x i8>
  %8057 = add <8 x i8> %8016, %7951
  %8058 = add <8 x i8> %8056, %7976
  %8059 = shufflevector <8 x i8> %8057, <8 x i8> %8058, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8060 = getelementptr inbounds i8, i8* %7512, i64 51
  %8061 = bitcast i8* %8060 to <8 x i8>*
  %8062 = load <8 x i8>, <8 x i8>* %8061, align 1, !tbaa !389
  %8063 = getelementptr inbounds i8, i8* %7512, i64 50
  %8064 = bitcast i8* %8063 to <8 x i8>*
  %8065 = load <8 x i8>, <8 x i8>* %8064, align 2, !tbaa !389
  %8066 = getelementptr inbounds i8, i8* %7512, i64 52
  %8067 = bitcast i8* %8066 to <8 x i8>*
  %8068 = load <8 x i8>, <8 x i8>* %8067, align 4, !tbaa !389
  %8069 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %7372, <8 x i16> %6466) #12
  %8070 = zext <8 x i8> %7614 to <8 x i16>
  %8071 = zext <8 x i8> %8068 to <8 x i16>
  %8072 = zext <8 x i8> %8065 to <8 x i16>
  %8073 = zext <8 x i8> %7597 to <8 x i16>
  %8074 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %8062) #12
  %8075 = add nuw nsw <8 x i16> %8070, %8073
  %8076 = add nuw nsw <8 x i16> %8075, %8072
  %8077 = add nuw nsw <8 x i16> %8076, %8071
  %8078 = add <8 x i16> %8077, %8074
  %8079 = shl <8 x i16> %8078, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8080 = shl <8 x i16> %7362, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8081 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %8079, <8 x i16> %8080) #12
  %8082 = add <8 x i16> %8081, %8069
  %8083 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %8082, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %8084 = trunc <8 x i16> %8083 to <8 x i8>
  %8085 = getelementptr inbounds i8, i8* %7512, i64 59
  %8086 = bitcast i8* %8085 to <8 x i8>*
  %8087 = load <8 x i8>, <8 x i8>* %8086, align 1, !tbaa !389
  %8088 = getelementptr inbounds i8, i8* %7512, i64 58
  %8089 = bitcast i8* %8088 to <8 x i8>*
  %8090 = load <8 x i8>, <8 x i8>* %8089, align 2, !tbaa !389
  %8091 = getelementptr inbounds i8, i8* %7512, i64 60
  %8092 = bitcast i8* %8091 to <8 x i8>*
  %8093 = load <8 x i8>, <8 x i8>* %8092, align 4, !tbaa !389
  %8094 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %7415, <8 x i16> %6545) #12
  %8095 = zext <8 x i8> %7616 to <8 x i16>
  %8096 = zext <8 x i8> %8093 to <8 x i16>
  %8097 = zext <8 x i8> %8090 to <8 x i16>
  %8098 = zext <8 x i8> %7599 to <8 x i16>
  %8099 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %8087) #12
  %8100 = add nuw nsw <8 x i16> %8095, %8098
  %8101 = add nuw nsw <8 x i16> %8100, %8097
  %8102 = add nuw nsw <8 x i16> %8101, %8096
  %8103 = add <8 x i16> %8102, %8099
  %8104 = shl <8 x i16> %8103, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8105 = shl <8 x i16> %7405, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8106 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %8104, <8 x i16> %8105) #12
  %8107 = add <8 x i16> %8106, %8094
  %8108 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %8107, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %8109 = trunc <8 x i16> %8108 to <8 x i8>
  %8110 = getelementptr inbounds i8, i8* %5387, i64 48
  %8111 = bitcast i8* %8110 to <8 x i8>*
  %8112 = load <8 x i8>, <8 x i8>* %8111, align 16, !tbaa !389
  %8113 = getelementptr inbounds i8, i8* %5387, i64 54
  %8114 = bitcast i8* %8113 to <8 x i8>*
  %8115 = load <8 x i8>, <8 x i8>* %8114, align 2, !tbaa !389
  %8116 = zext <8 x i8> %8115 to <8 x i16>
  %8117 = zext <8 x i8> %t916 to <8 x i16>
  %8118 = zext <8 x i8> %t918 to <8 x i16>
  %8119 = zext <8 x i8> %t917 to <8 x i16>
  %8120 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t919) #12
  %8121 = add nuw nsw <8 x i16> %8119, %8117
  %8122 = add nuw nsw <8 x i16> %8121, %8118
  %8123 = add <8 x i16> %8122, %8120
  %8124 = add <8 x i16> %8123, %8116
  %8125 = zext <8 x i8> %t919 to <8 x i16>
  %8126 = zext <8 x i8> %t915 to <8 x i16>
  %8127 = zext <8 x i8> %8112 to <8 x i16>
  %8128 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t917) #12
  %8129 = add nuw nsw <8 x i16> %8118, %8126
  %8130 = add nuw nsw <8 x i16> %8129, %8125
  %8131 = add nuw nsw <8 x i16> %8130, %8127
  %8132 = add <8 x i16> %8131, %8128
  %8133 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %8124, <8 x i16> %8132) #12
  %8134 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t916) #12
  %8135 = add nuw nsw <8 x i16> %7354, %7364
  %8136 = add nuw nsw <8 x i16> %8135, %6458
  %8137 = add nuw nsw <8 x i16> %8136, %8070
  %8138 = add <8 x i16> %8137, %8134
  %8139 = shl <8 x i16> %8138, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8140 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t915) #12
  %8141 = add nuw nsw <8 x i16> %7357, %7367
  %8142 = add nuw nsw <8 x i16> %8141, %6461
  %8143 = add nuw nsw <8 x i16> %8142, %8073
  %8144 = add <8 x i16> %8143, %8140
  %8145 = shl <8 x i16> %8144, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8146 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %8139, <8 x i16> %8145) #12
  %8147 = add <8 x i16> %8146, %8133
  %8148 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %8147, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %8149 = trunc <8 x i16> %8148 to <8 x i8>
  %8150 = getelementptr inbounds i8, i8* %5387, i64 56
  %8151 = bitcast i8* %8150 to <8 x i8>*
  %8152 = load <8 x i8>, <8 x i8>* %8151, align 8, !tbaa !389
  %8153 = getelementptr inbounds i8, i8* %5387, i64 62
  %8154 = bitcast i8* %8153 to <8 x i8>*
  %8155 = load <8 x i8>, <8 x i8>* %8154, align 2, !tbaa !389
  %8156 = zext <8 x i8> %8155 to <8 x i16>
  %8157 = zext <8 x i8> %t921 to <8 x i16>
  %8158 = zext <8 x i8> %t923 to <8 x i16>
  %8159 = zext <8 x i8> %t922 to <8 x i16>
  %8160 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t924) #12
  %8161 = add nuw nsw <8 x i16> %8159, %8157
  %8162 = add nuw nsw <8 x i16> %8161, %8158
  %8163 = add <8 x i16> %8162, %8160
  %8164 = add <8 x i16> %8163, %8156
  %8165 = zext <8 x i8> %t924 to <8 x i16>
  %8166 = zext <8 x i8> %t920 to <8 x i16>
  %8167 = zext <8 x i8> %8152 to <8 x i16>
  %8168 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t922) #12
  %8169 = add nuw nsw <8 x i16> %8158, %8166
  %8170 = add nuw nsw <8 x i16> %8169, %8165
  %8171 = add nuw nsw <8 x i16> %8170, %8167
  %8172 = add <8 x i16> %8171, %8168
  %8173 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %8164, <8 x i16> %8172) #12
  %8174 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t921) #12
  %8175 = add nuw nsw <8 x i16> %7397, %7407
  %8176 = add nuw nsw <8 x i16> %8175, %6537
  %8177 = add nuw nsw <8 x i16> %8176, %8095
  %8178 = add <8 x i16> %8177, %8174
  %8179 = shl <8 x i16> %8178, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8180 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t920) #12
  %8181 = add nuw nsw <8 x i16> %7400, %7410
  %8182 = add nuw nsw <8 x i16> %8181, %6540
  %8183 = add nuw nsw <8 x i16> %8182, %8098
  %8184 = add <8 x i16> %8183, %8180
  %8185 = shl <8 x i16> %8184, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8186 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %8179, <8 x i16> %8185) #12
  %8187 = add <8 x i16> %8186, %8173
  %8188 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %8187, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %8189 = trunc <8 x i16> %8188 to <8 x i8>
  %8190 = add <8 x i8> %8149, %8084
  %8191 = add <8 x i8> %8189, %8109
  %8192 = shufflevector <8 x i8> %8190, <8 x i8> %8191, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8193 = add nsw i64 %5355, %5353
  %8194 = getelementptr inbounds i8, i8* %output18, i64 %8193
  %8195 = bitcast i8* %8194 to <16 x i8>*
  store <16 x i8> %7793, <16 x i8>* %8195, align 1, !tbaa !391
  %8196 = getelementptr inbounds i8, i8* %8194, i64 16
  %8197 = bitcast i8* %8196 to <16 x i8>*
  store <16 x i8> %7926, <16 x i8>* %8197, align 1, !tbaa !391
  %8198 = getelementptr inbounds i8, i8* %8194, i64 32
  %8199 = bitcast i8* %8198 to <16 x i8>*
  store <16 x i8> %8059, <16 x i8>* %8199, align 1, !tbaa !391
  %8200 = getelementptr inbounds i8, i8* %8194, i64 48
  %8201 = bitcast i8* %8200 to <16 x i8>*
  store <16 x i8> %8192, <16 x i8>* %8201, align 1, !tbaa !391
  %8202 = add nsw i64 %indvars.iv318, %120
  %8203 = shl nsw i64 %8202, 6
  %8204 = getelementptr inbounds i8, i8* %bounded_input54, i64 %8203
  %8205 = getelementptr inbounds i8, i8* %8204, i64 1
  %8206 = bitcast i8* %8205 to <16 x i8>*
  %8207 = load <16 x i8>, <16 x i8>* %8206, align 1, !tbaa !389
  %8208 = getelementptr inbounds i8, i8* %8204, i64 17
  %8209 = bitcast i8* %8208 to <16 x i8>*
  %8210 = load <16 x i8>, <16 x i8>* %8209, align 1, !tbaa !389
  %8211 = getelementptr inbounds i8, i8* %8204, i64 33
  %8212 = bitcast i8* %8211 to <16 x i8>*
  %8213 = load <16 x i8>, <16 x i8>* %8212, align 1, !tbaa !389
  %8214 = getelementptr inbounds i8, i8* %8204, i64 49
  %8215 = bitcast i8* %8214 to <16 x i8>*
  %8216 = load <16 x i8>, <16 x i8>* %8215, align 1, !tbaa !389
  %8217 = shufflevector <16 x i8> %8207, <16 x i8> %8210, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8218 = shufflevector <16 x i8> %8213, <16 x i8> %8216, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %t405.s187 = shufflevector <32 x i8> %8217, <32 x i8> %8218, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %8219 = getelementptr inbounds i8, i8* %8204, i64 5
  %8220 = bitcast i8* %8219 to <16 x i8>*
  %8221 = load <16 x i8>, <16 x i8>* %8220, align 1, !tbaa !389
  %8222 = getelementptr inbounds i8, i8* %8204, i64 21
  %8223 = bitcast i8* %8222 to <16 x i8>*
  %8224 = load <16 x i8>, <16 x i8>* %8223, align 1, !tbaa !389
  %8225 = getelementptr inbounds i8, i8* %8204, i64 37
  %8226 = bitcast i8* %8225 to <16 x i8>*
  %8227 = load <16 x i8>, <16 x i8>* %8226, align 1, !tbaa !389
  %8228 = getelementptr inbounds i8, i8* %8204, i64 53
  %8229 = bitcast i8* %8228 to <16 x i8>*
  %8230 = load <16 x i8>, <16 x i8>* %8229, align 1, !tbaa !389
  %8231 = shufflevector <16 x i8> %8221, <16 x i8> %8224, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8232 = shufflevector <16 x i8> %8227, <16 x i8> %8230, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %t406.s188 = shufflevector <32 x i8> %8231, <32 x i8> %8232, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %8233 = load <16 x i8>, <16 x i8>* %6676, align 1, !tbaa !389
  %8234 = load <16 x i8>, <16 x i8>* %6679, align 1, !tbaa !389
  %8235 = load <16 x i8>, <16 x i8>* %6682, align 1, !tbaa !389
  %8236 = load <16 x i8>, <16 x i8>* %6685, align 1, !tbaa !389
  %8237 = shufflevector <16 x i8> %8233, <16 x i8> %8234, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8238 = shufflevector <16 x i8> %8235, <16 x i8> %8236, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %t413.s195 = shufflevector <32 x i8> %8237, <32 x i8> %8238, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %8239 = load <16 x i8>, <16 x i8>* %6690, align 1, !tbaa !389
  %8240 = load <16 x i8>, <16 x i8>* %6693, align 1, !tbaa !389
  %8241 = load <16 x i8>, <16 x i8>* %6696, align 1, !tbaa !389
  %8242 = load <16 x i8>, <16 x i8>* %6699, align 1, !tbaa !389
  %8243 = shufflevector <16 x i8> %8239, <16 x i8> %8240, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8244 = shufflevector <16 x i8> %8241, <16 x i8> %8242, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %t414.s196 = shufflevector <32 x i8> %8243, <32 x i8> %8244, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %8245 = bitcast i8* %6857 to <16 x i8>*
  %8246 = load <16 x i8>, <16 x i8>* %8245, align 2, !tbaa !389
  %8247 = bitcast i8* %7018 to <16 x i8>*
  %8248 = load <16 x i8>, <16 x i8>* %8247, align 2, !tbaa !389
  %8249 = bitcast i8* %7180 to <16 x i8>*
  %8250 = load <16 x i8>, <16 x i8>* %8249, align 2, !tbaa !389
  %8251 = bitcast i8* %7342 to <16 x i8>*
  %8252 = load <16 x i8>, <16 x i8>* %8251, align 2, !tbaa !389
  %8253 = shufflevector <16 x i8> %8246, <16 x i8> %8248, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8254 = shufflevector <16 x i8> %8250, <16 x i8> %8252, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %t415.s197 = shufflevector <32 x i8> %8253, <32 x i8> %8254, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %8255 = bitcast i8* %6854 to <16 x i8>*
  %8256 = load <16 x i8>, <16 x i8>* %8255, align 1, !tbaa !389
  %8257 = bitcast i8* %7015 to <16 x i8>*
  %8258 = load <16 x i8>, <16 x i8>* %8257, align 1, !tbaa !389
  %8259 = bitcast i8* %7177 to <16 x i8>*
  %8260 = load <16 x i8>, <16 x i8>* %8259, align 1, !tbaa !389
  %8261 = bitcast i8* %7339 to <16 x i8>*
  %8262 = load <16 x i8>, <16 x i8>* %8261, align 1, !tbaa !389
  %8263 = shufflevector <16 x i8> %8256, <16 x i8> %8258, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8264 = shufflevector <16 x i8> %8260, <16 x i8> %8262, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %t416.s198 = shufflevector <32 x i8> %8263, <32 x i8> %8264, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %8265 = bitcast i8* %6860 to <16 x i8>*
  %8266 = load <16 x i8>, <16 x i8>* %8265, align 4, !tbaa !389
  %8267 = bitcast i8* %7021 to <16 x i8>*
  %8268 = load <16 x i8>, <16 x i8>* %8267, align 4, !tbaa !389
  %8269 = bitcast i8* %7183 to <16 x i8>*
  %8270 = load <16 x i8>, <16 x i8>* %8269, align 4, !tbaa !389
  %8271 = bitcast i8* %7345 to <16 x i8>*
  %8272 = load <16 x i8>, <16 x i8>* %8271, align 4, !tbaa !389
  %8273 = shufflevector <16 x i8> %8266, <16 x i8> %8268, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8274 = shufflevector <16 x i8> %8270, <16 x i8> %8272, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %t417.s199 = shufflevector <32 x i8> %8273, <32 x i8> %8274, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %8275 = bitcast <64 x i8> %t405.s187 to <8 x i64>
  %8276 = shufflevector <8 x i64> %8275, <8 x i64> undef, <1 x i32> zeroinitializer
  %8277 = bitcast <1 x i64> %8276 to <8 x i8>
  %8278 = shufflevector <8 x i64> %8275, <8 x i64> undef, <1 x i32> <i32 1>
  %8279 = bitcast <1 x i64> %8278 to <8 x i8>
  %8280 = shufflevector <8 x i64> %8275, <8 x i64> undef, <1 x i32> <i32 2>
  %8281 = bitcast <1 x i64> %8280 to <8 x i8>
  %8282 = shufflevector <8 x i64> %8275, <8 x i64> undef, <1 x i32> <i32 3>
  %8283 = bitcast <1 x i64> %8282 to <8 x i8>
  %8284 = shufflevector <8 x i64> %8275, <8 x i64> undef, <1 x i32> <i32 4>
  %8285 = bitcast <1 x i64> %8284 to <8 x i8>
  %8286 = shufflevector <8 x i64> %8275, <8 x i64> undef, <1 x i32> <i32 5>
  %8287 = bitcast <1 x i64> %8286 to <8 x i8>
  %8288 = shufflevector <8 x i64> %8275, <8 x i64> undef, <1 x i32> <i32 6>
  %8289 = bitcast <1 x i64> %8288 to <8 x i8>
  %8290 = shufflevector <8 x i64> %8275, <8 x i64> undef, <1 x i32> <i32 7>
  %8291 = bitcast <1 x i64> %8290 to <8 x i8>
  %8292 = bitcast <64 x i8> %t406.s188 to <8 x i64>
  %8293 = shufflevector <8 x i64> %8292, <8 x i64> undef, <1 x i32> zeroinitializer
  %8294 = bitcast <1 x i64> %8293 to <8 x i8>
  %8295 = shufflevector <8 x i64> %8292, <8 x i64> undef, <1 x i32> <i32 1>
  %8296 = bitcast <1 x i64> %8295 to <8 x i8>
  %8297 = shufflevector <8 x i64> %8292, <8 x i64> undef, <1 x i32> <i32 2>
  %8298 = bitcast <1 x i64> %8297 to <8 x i8>
  %8299 = shufflevector <8 x i64> %8292, <8 x i64> undef, <1 x i32> <i32 3>
  %8300 = bitcast <1 x i64> %8299 to <8 x i8>
  %8301 = shufflevector <8 x i64> %8292, <8 x i64> undef, <1 x i32> <i32 4>
  %8302 = bitcast <1 x i64> %8301 to <8 x i8>
  %8303 = shufflevector <8 x i64> %8292, <8 x i64> undef, <1 x i32> <i32 5>
  %8304 = bitcast <1 x i64> %8303 to <8 x i8>
  %8305 = shufflevector <8 x i64> %8292, <8 x i64> undef, <1 x i32> <i32 6>
  %8306 = bitcast <1 x i64> %8305 to <8 x i8>
  %8307 = shufflevector <8 x i64> %8292, <8 x i64> undef, <1 x i32> <i32 7>
  %8308 = bitcast <1 x i64> %8307 to <8 x i8>
  %8309 = bitcast <64 x i8> %t413.s195 to <8 x i64>
  %8310 = shufflevector <8 x i64> %8309, <8 x i64> undef, <1 x i32> zeroinitializer
  %t941 = bitcast <1 x i64> %8310 to <8 x i8>
  %8311 = bitcast <64 x i8> %t414.s196 to <8 x i64>
  %8312 = shufflevector <8 x i64> %8311, <8 x i64> undef, <1 x i32> zeroinitializer
  %t942 = bitcast <1 x i64> %8312 to <8 x i8>
  %8313 = bitcast <64 x i8> %t415.s197 to <8 x i64>
  %8314 = shufflevector <8 x i64> %8313, <8 x i64> undef, <1 x i32> zeroinitializer
  %t943 = bitcast <1 x i64> %8314 to <8 x i8>
  %8315 = bitcast <64 x i8> %t416.s198 to <8 x i64>
  %8316 = shufflevector <8 x i64> %8315, <8 x i64> undef, <1 x i32> zeroinitializer
  %t944 = bitcast <1 x i64> %8316 to <8 x i8>
  %8317 = bitcast <64 x i8> %t417.s199 to <8 x i64>
  %8318 = shufflevector <8 x i64> %8317, <8 x i64> undef, <1 x i32> zeroinitializer
  %t945 = bitcast <1 x i64> %8318 to <8 x i8>
  %8319 = shufflevector <8 x i64> %8309, <8 x i64> undef, <1 x i32> <i32 1>
  %t946 = bitcast <1 x i64> %8319 to <8 x i8>
  %8320 = shufflevector <8 x i64> %8311, <8 x i64> undef, <1 x i32> <i32 1>
  %t947 = bitcast <1 x i64> %8320 to <8 x i8>
  %8321 = shufflevector <8 x i64> %8313, <8 x i64> undef, <1 x i32> <i32 1>
  %t948 = bitcast <1 x i64> %8321 to <8 x i8>
  %8322 = shufflevector <8 x i64> %8315, <8 x i64> undef, <1 x i32> <i32 1>
  %t949 = bitcast <1 x i64> %8322 to <8 x i8>
  %8323 = shufflevector <8 x i64> %8317, <8 x i64> undef, <1 x i32> <i32 1>
  %t950 = bitcast <1 x i64> %8323 to <8 x i8>
  %8324 = shufflevector <8 x i64> %8309, <8 x i64> undef, <1 x i32> <i32 2>
  %t967 = bitcast <1 x i64> %8324 to <8 x i8>
  %8325 = shufflevector <8 x i64> %8311, <8 x i64> undef, <1 x i32> <i32 2>
  %t968 = bitcast <1 x i64> %8325 to <8 x i8>
  %8326 = shufflevector <8 x i64> %8313, <8 x i64> undef, <1 x i32> <i32 2>
  %t969 = bitcast <1 x i64> %8326 to <8 x i8>
  %8327 = shufflevector <8 x i64> %8315, <8 x i64> undef, <1 x i32> <i32 2>
  %t970 = bitcast <1 x i64> %8327 to <8 x i8>
  %8328 = shufflevector <8 x i64> %8317, <8 x i64> undef, <1 x i32> <i32 2>
  %t971 = bitcast <1 x i64> %8328 to <8 x i8>
  %8329 = shufflevector <8 x i64> %8309, <8 x i64> undef, <1 x i32> <i32 3>
  %t972 = bitcast <1 x i64> %8329 to <8 x i8>
  %8330 = shufflevector <8 x i64> %8311, <8 x i64> undef, <1 x i32> <i32 3>
  %t973 = bitcast <1 x i64> %8330 to <8 x i8>
  %8331 = shufflevector <8 x i64> %8313, <8 x i64> undef, <1 x i32> <i32 3>
  %t974 = bitcast <1 x i64> %8331 to <8 x i8>
  %8332 = shufflevector <8 x i64> %8315, <8 x i64> undef, <1 x i32> <i32 3>
  %t975 = bitcast <1 x i64> %8332 to <8 x i8>
  %8333 = shufflevector <8 x i64> %8317, <8 x i64> undef, <1 x i32> <i32 3>
  %t976 = bitcast <1 x i64> %8333 to <8 x i8>
  %8334 = shufflevector <8 x i64> %8309, <8 x i64> undef, <1 x i32> <i32 4>
  %t993 = bitcast <1 x i64> %8334 to <8 x i8>
  %8335 = shufflevector <8 x i64> %8311, <8 x i64> undef, <1 x i32> <i32 4>
  %t994 = bitcast <1 x i64> %8335 to <8 x i8>
  %8336 = shufflevector <8 x i64> %8313, <8 x i64> undef, <1 x i32> <i32 4>
  %t995 = bitcast <1 x i64> %8336 to <8 x i8>
  %8337 = shufflevector <8 x i64> %8315, <8 x i64> undef, <1 x i32> <i32 4>
  %t996 = bitcast <1 x i64> %8337 to <8 x i8>
  %8338 = shufflevector <8 x i64> %8317, <8 x i64> undef, <1 x i32> <i32 4>
  %t997 = bitcast <1 x i64> %8338 to <8 x i8>
  %8339 = shufflevector <8 x i64> %8309, <8 x i64> undef, <1 x i32> <i32 5>
  %t998 = bitcast <1 x i64> %8339 to <8 x i8>
  %8340 = shufflevector <8 x i64> %8311, <8 x i64> undef, <1 x i32> <i32 5>
  %t999 = bitcast <1 x i64> %8340 to <8 x i8>
  %8341 = shufflevector <8 x i64> %8313, <8 x i64> undef, <1 x i32> <i32 5>
  %t1000 = bitcast <1 x i64> %8341 to <8 x i8>
  %8342 = shufflevector <8 x i64> %8315, <8 x i64> undef, <1 x i32> <i32 5>
  %t1001 = bitcast <1 x i64> %8342 to <8 x i8>
  %8343 = shufflevector <8 x i64> %8317, <8 x i64> undef, <1 x i32> <i32 5>
  %t1002 = bitcast <1 x i64> %8343 to <8 x i8>
  %8344 = shufflevector <8 x i64> %8309, <8 x i64> undef, <1 x i32> <i32 6>
  %t1019 = bitcast <1 x i64> %8344 to <8 x i8>
  %8345 = shufflevector <8 x i64> %8311, <8 x i64> undef, <1 x i32> <i32 6>
  %t1020 = bitcast <1 x i64> %8345 to <8 x i8>
  %8346 = shufflevector <8 x i64> %8313, <8 x i64> undef, <1 x i32> <i32 6>
  %t1021 = bitcast <1 x i64> %8346 to <8 x i8>
  %8347 = shufflevector <8 x i64> %8315, <8 x i64> undef, <1 x i32> <i32 6>
  %t1022 = bitcast <1 x i64> %8347 to <8 x i8>
  %8348 = shufflevector <8 x i64> %8317, <8 x i64> undef, <1 x i32> <i32 6>
  %t1023 = bitcast <1 x i64> %8348 to <8 x i8>
  %8349 = shufflevector <8 x i64> %8309, <8 x i64> undef, <1 x i32> <i32 7>
  %t1024 = bitcast <1 x i64> %8349 to <8 x i8>
  %8350 = shufflevector <8 x i64> %8311, <8 x i64> undef, <1 x i32> <i32 7>
  %t1025 = bitcast <1 x i64> %8350 to <8 x i8>
  %8351 = shufflevector <8 x i64> %8313, <8 x i64> undef, <1 x i32> <i32 7>
  %t1026 = bitcast <1 x i64> %8351 to <8 x i8>
  %8352 = shufflevector <8 x i64> %8315, <8 x i64> undef, <1 x i32> <i32 7>
  %t1027 = bitcast <1 x i64> %8352 to <8 x i8>
  %8353 = shufflevector <8 x i64> %8317, <8 x i64> undef, <1 x i32> <i32 7>
  %t1028 = bitcast <1 x i64> %8353 to <8 x i8>
  %8354 = getelementptr inbounds i8, i8* %8204, i64 3
  %8355 = bitcast i8* %8354 to <8 x i8>*
  %8356 = load <8 x i8>, <8 x i8>* %8355, align 1, !tbaa !389
  %8357 = getelementptr inbounds i8, i8* %8204, i64 2
  %8358 = bitcast i8* %8357 to <8 x i8>*
  %8359 = load <8 x i8>, <8 x i8>* %8358, align 2, !tbaa !389
  %8360 = getelementptr inbounds i8, i8* %8204, i64 4
  %8361 = bitcast i8* %8360 to <8 x i8>*
  %8362 = load <8 x i8>, <8 x i8>* %8361, align 4, !tbaa !389
  %8363 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %7680, <8 x i16> %5763) #12
  %8364 = zext <8 x i8> %8294 to <8 x i16>
  %8365 = zext <8 x i8> %8362 to <8 x i16>
  %8366 = zext <8 x i8> %8359 to <8 x i16>
  %8367 = zext <8 x i8> %8277 to <8 x i16>
  %8368 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %8356) #12
  %8369 = add nuw nsw <8 x i16> %8364, %8367
  %8370 = add nuw nsw <8 x i16> %8369, %8366
  %8371 = add nuw nsw <8 x i16> %8370, %8365
  %8372 = add <8 x i16> %8371, %8368
  %8373 = shl <8 x i16> %8372, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8374 = shl <8 x i16> %5744, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8375 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %8373, <8 x i16> %8374) #12
  %8376 = add <8 x i16> %8375, %8363
  %8377 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %8376, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %8378 = trunc <8 x i16> %8377 to <8 x i8>
  %8379 = getelementptr inbounds i8, i8* %8204, i64 11
  %8380 = bitcast i8* %8379 to <8 x i8>*
  %8381 = load <8 x i8>, <8 x i8>* %8380, align 1, !tbaa !389
  %8382 = getelementptr inbounds i8, i8* %8204, i64 10
  %8383 = bitcast i8* %8382 to <8 x i8>*
  %8384 = load <8 x i8>, <8 x i8>* %8383, align 2, !tbaa !389
  %8385 = getelementptr inbounds i8, i8* %8204, i64 12
  %8386 = bitcast i8* %8385 to <8 x i8>*
  %8387 = load <8 x i8>, <8 x i8>* %8386, align 4, !tbaa !389
  %8388 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %7705, <8 x i16> %5842) #12
  %8389 = zext <8 x i8> %8296 to <8 x i16>
  %8390 = zext <8 x i8> %8387 to <8 x i16>
  %8391 = zext <8 x i8> %8384 to <8 x i16>
  %8392 = zext <8 x i8> %8279 to <8 x i16>
  %8393 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %8381) #12
  %8394 = add nuw nsw <8 x i16> %8389, %8392
  %8395 = add nuw nsw <8 x i16> %8394, %8391
  %8396 = add nuw nsw <8 x i16> %8395, %8390
  %8397 = add <8 x i16> %8396, %8393
  %8398 = shl <8 x i16> %8397, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8399 = shl <8 x i16> %5823, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8400 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %8398, <8 x i16> %8399) #12
  %8401 = add <8 x i16> %8400, %8388
  %8402 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %8401, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %8403 = trunc <8 x i16> %8402 to <8 x i8>
  %8404 = bitcast i8* %6674 to <8 x i8>*
  %8405 = load <8 x i8>, <8 x i8>* %8404, align 16, !tbaa !389
  %8406 = getelementptr inbounds i8, i8* %6674, i64 6
  %8407 = bitcast i8* %8406 to <8 x i8>*
  %8408 = load <8 x i8>, <8 x i8>* %8407, align 2, !tbaa !389
  %8409 = zext <8 x i8> %8408 to <8 x i16>
  %8410 = zext <8 x i8> %t942 to <8 x i16>
  %8411 = zext <8 x i8> %t944 to <8 x i16>
  %8412 = zext <8 x i8> %t943 to <8 x i16>
  %8413 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t945) #12
  %8414 = add nuw nsw <8 x i16> %8412, %8410
  %8415 = add nuw nsw <8 x i16> %8414, %8411
  %8416 = add <8 x i16> %8415, %8413
  %8417 = add <8 x i16> %8416, %8409
  %8418 = zext <8 x i8> %t945 to <8 x i16>
  %8419 = zext <8 x i8> %t941 to <8 x i16>
  %8420 = zext <8 x i8> %8405 to <8 x i16>
  %8421 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t943) #12
  %8422 = add nuw nsw <8 x i16> %8411, %8419
  %8423 = add nuw nsw <8 x i16> %8422, %8418
  %8424 = add nuw nsw <8 x i16> %8423, %8420
  %8425 = add <8 x i16> %8424, %8421
  %8426 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %8417, <8 x i16> %8425) #12
  %8427 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t942) #12
  %8428 = add nuw nsw <8 x i16> %5736, %5755
  %8429 = add nuw nsw <8 x i16> %8428, %7672
  %8430 = add nuw nsw <8 x i16> %8429, %8364
  %8431 = add <8 x i16> %8430, %8427
  %8432 = shl <8 x i16> %8431, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8433 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t941) #12
  %8434 = add nuw nsw <8 x i16> %5739, %5758
  %8435 = add nuw nsw <8 x i16> %8434, %7675
  %8436 = add nuw nsw <8 x i16> %8435, %8367
  %8437 = add <8 x i16> %8436, %8433
  %8438 = shl <8 x i16> %8437, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8439 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %8432, <8 x i16> %8438) #12
  %8440 = add <8 x i16> %8439, %8426
  %8441 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %8440, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %8442 = trunc <8 x i16> %8441 to <8 x i8>
  %8443 = getelementptr inbounds i8, i8* %6674, i64 8
  %8444 = bitcast i8* %8443 to <8 x i8>*
  %8445 = load <8 x i8>, <8 x i8>* %8444, align 8, !tbaa !389
  %8446 = getelementptr inbounds i8, i8* %6674, i64 14
  %8447 = bitcast i8* %8446 to <8 x i8>*
  %8448 = load <8 x i8>, <8 x i8>* %8447, align 2, !tbaa !389
  %8449 = zext <8 x i8> %8448 to <8 x i16>
  %8450 = zext <8 x i8> %t947 to <8 x i16>
  %8451 = zext <8 x i8> %t949 to <8 x i16>
  %8452 = zext <8 x i8> %t948 to <8 x i16>
  %8453 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t950) #12
  %8454 = add nuw nsw <8 x i16> %8452, %8450
  %8455 = add nuw nsw <8 x i16> %8454, %8451
  %8456 = add <8 x i16> %8455, %8453
  %8457 = add <8 x i16> %8456, %8449
  %8458 = zext <8 x i8> %t950 to <8 x i16>
  %8459 = zext <8 x i8> %t946 to <8 x i16>
  %8460 = zext <8 x i8> %8445 to <8 x i16>
  %8461 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t948) #12
  %8462 = add nuw nsw <8 x i16> %8451, %8459
  %8463 = add nuw nsw <8 x i16> %8462, %8458
  %8464 = add nuw nsw <8 x i16> %8463, %8460
  %8465 = add <8 x i16> %8464, %8461
  %8466 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %8457, <8 x i16> %8465) #12
  %8467 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t947) #12
  %8468 = add nuw nsw <8 x i16> %5815, %5834
  %8469 = add nuw nsw <8 x i16> %8468, %7697
  %8470 = add nuw nsw <8 x i16> %8469, %8389
  %8471 = add <8 x i16> %8470, %8467
  %8472 = shl <8 x i16> %8471, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8473 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t946) #12
  %8474 = add nuw nsw <8 x i16> %5818, %5837
  %8475 = add nuw nsw <8 x i16> %8474, %7700
  %8476 = add nuw nsw <8 x i16> %8475, %8392
  %8477 = add <8 x i16> %8476, %8473
  %8478 = shl <8 x i16> %8477, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8479 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %8472, <8 x i16> %8478) #12
  %8480 = add <8 x i16> %8479, %8466
  %8481 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %8480, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %8482 = trunc <8 x i16> %8481 to <8 x i8>
  %8483 = add <8 x i8> %8442, %8378
  %8484 = add <8 x i8> %8482, %8403
  %8485 = shufflevector <8 x i8> %8483, <8 x i8> %8484, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8486 = getelementptr inbounds i8, i8* %8204, i64 19
  %8487 = bitcast i8* %8486 to <8 x i8>*
  %8488 = load <8 x i8>, <8 x i8>* %8487, align 1, !tbaa !389
  %8489 = getelementptr inbounds i8, i8* %8204, i64 18
  %8490 = bitcast i8* %8489 to <8 x i8>*
  %8491 = load <8 x i8>, <8 x i8>* %8490, align 2, !tbaa !389
  %8492 = getelementptr inbounds i8, i8* %8204, i64 20
  %8493 = bitcast i8* %8492 to <8 x i8>*
  %8494 = load <8 x i8>, <8 x i8>* %8493, align 4, !tbaa !389
  %8495 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %7812, <8 x i16> %6003) #12
  %8496 = zext <8 x i8> %8298 to <8 x i16>
  %8497 = zext <8 x i8> %8494 to <8 x i16>
  %8498 = zext <8 x i8> %8491 to <8 x i16>
  %8499 = zext <8 x i8> %8281 to <8 x i16>
  %8500 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %8488) #12
  %8501 = add nuw nsw <8 x i16> %8496, %8499
  %8502 = add nuw nsw <8 x i16> %8501, %8498
  %8503 = add nuw nsw <8 x i16> %8502, %8497
  %8504 = add <8 x i16> %8503, %8500
  %8505 = shl <8 x i16> %8504, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8506 = shl <8 x i16> %5984, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8507 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %8505, <8 x i16> %8506) #12
  %8508 = add <8 x i16> %8507, %8495
  %8509 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %8508, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %8510 = trunc <8 x i16> %8509 to <8 x i8>
  %8511 = getelementptr inbounds i8, i8* %8204, i64 27
  %8512 = bitcast i8* %8511 to <8 x i8>*
  %8513 = load <8 x i8>, <8 x i8>* %8512, align 1, !tbaa !389
  %8514 = getelementptr inbounds i8, i8* %8204, i64 26
  %8515 = bitcast i8* %8514 to <8 x i8>*
  %8516 = load <8 x i8>, <8 x i8>* %8515, align 2, !tbaa !389
  %8517 = getelementptr inbounds i8, i8* %8204, i64 28
  %8518 = bitcast i8* %8517 to <8 x i8>*
  %8519 = load <8 x i8>, <8 x i8>* %8518, align 4, !tbaa !389
  %8520 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %7837, <8 x i16> %6082) #12
  %8521 = zext <8 x i8> %8300 to <8 x i16>
  %8522 = zext <8 x i8> %8519 to <8 x i16>
  %8523 = zext <8 x i8> %8516 to <8 x i16>
  %8524 = zext <8 x i8> %8283 to <8 x i16>
  %8525 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %8513) #12
  %8526 = add nuw nsw <8 x i16> %8521, %8524
  %8527 = add nuw nsw <8 x i16> %8526, %8523
  %8528 = add nuw nsw <8 x i16> %8527, %8522
  %8529 = add <8 x i16> %8528, %8525
  %8530 = shl <8 x i16> %8529, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8531 = shl <8 x i16> %6063, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8532 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %8530, <8 x i16> %8531) #12
  %8533 = add <8 x i16> %8532, %8520
  %8534 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %8533, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %8535 = trunc <8 x i16> %8534 to <8 x i8>
  %8536 = getelementptr inbounds i8, i8* %6674, i64 16
  %8537 = bitcast i8* %8536 to <8 x i8>*
  %8538 = load <8 x i8>, <8 x i8>* %8537, align 16, !tbaa !389
  %8539 = getelementptr inbounds i8, i8* %6674, i64 22
  %8540 = bitcast i8* %8539 to <8 x i8>*
  %8541 = load <8 x i8>, <8 x i8>* %8540, align 2, !tbaa !389
  %8542 = zext <8 x i8> %8541 to <8 x i16>
  %8543 = zext <8 x i8> %t968 to <8 x i16>
  %8544 = zext <8 x i8> %t970 to <8 x i16>
  %8545 = zext <8 x i8> %t969 to <8 x i16>
  %8546 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t971) #12
  %8547 = add nuw nsw <8 x i16> %8545, %8543
  %8548 = add nuw nsw <8 x i16> %8547, %8544
  %8549 = add <8 x i16> %8548, %8546
  %8550 = add <8 x i16> %8549, %8542
  %8551 = zext <8 x i8> %t971 to <8 x i16>
  %8552 = zext <8 x i8> %t967 to <8 x i16>
  %8553 = zext <8 x i8> %8538 to <8 x i16>
  %8554 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t969) #12
  %8555 = add nuw nsw <8 x i16> %8544, %8552
  %8556 = add nuw nsw <8 x i16> %8555, %8551
  %8557 = add nuw nsw <8 x i16> %8556, %8553
  %8558 = add <8 x i16> %8557, %8554
  %8559 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %8550, <8 x i16> %8558) #12
  %8560 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t968) #12
  %8561 = add nuw nsw <8 x i16> %5976, %5995
  %8562 = add nuw nsw <8 x i16> %8561, %7804
  %8563 = add nuw nsw <8 x i16> %8562, %8496
  %8564 = add <8 x i16> %8563, %8560
  %8565 = shl <8 x i16> %8564, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8566 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t967) #12
  %8567 = add nuw nsw <8 x i16> %5979, %5998
  %8568 = add nuw nsw <8 x i16> %8567, %7807
  %8569 = add nuw nsw <8 x i16> %8568, %8499
  %8570 = add <8 x i16> %8569, %8566
  %8571 = shl <8 x i16> %8570, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8572 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %8565, <8 x i16> %8571) #12
  %8573 = add <8 x i16> %8572, %8559
  %8574 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %8573, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %8575 = trunc <8 x i16> %8574 to <8 x i8>
  %8576 = getelementptr inbounds i8, i8* %6674, i64 24
  %8577 = bitcast i8* %8576 to <8 x i8>*
  %8578 = load <8 x i8>, <8 x i8>* %8577, align 8, !tbaa !389
  %8579 = getelementptr inbounds i8, i8* %6674, i64 30
  %8580 = bitcast i8* %8579 to <8 x i8>*
  %8581 = load <8 x i8>, <8 x i8>* %8580, align 2, !tbaa !389
  %8582 = zext <8 x i8> %8581 to <8 x i16>
  %8583 = zext <8 x i8> %t973 to <8 x i16>
  %8584 = zext <8 x i8> %t975 to <8 x i16>
  %8585 = zext <8 x i8> %t974 to <8 x i16>
  %8586 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t976) #12
  %8587 = add nuw nsw <8 x i16> %8585, %8583
  %8588 = add nuw nsw <8 x i16> %8587, %8584
  %8589 = add <8 x i16> %8588, %8586
  %8590 = add <8 x i16> %8589, %8582
  %8591 = zext <8 x i8> %t976 to <8 x i16>
  %8592 = zext <8 x i8> %t972 to <8 x i16>
  %8593 = zext <8 x i8> %8578 to <8 x i16>
  %8594 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t974) #12
  %8595 = add nuw nsw <8 x i16> %8584, %8592
  %8596 = add nuw nsw <8 x i16> %8595, %8591
  %8597 = add nuw nsw <8 x i16> %8596, %8593
  %8598 = add <8 x i16> %8597, %8594
  %8599 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %8590, <8 x i16> %8598) #12
  %8600 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t973) #12
  %8601 = add nuw nsw <8 x i16> %6055, %6074
  %8602 = add nuw nsw <8 x i16> %8601, %7829
  %8603 = add nuw nsw <8 x i16> %8602, %8521
  %8604 = add <8 x i16> %8603, %8600
  %8605 = shl <8 x i16> %8604, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8606 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t972) #12
  %8607 = add nuw nsw <8 x i16> %6058, %6077
  %8608 = add nuw nsw <8 x i16> %8607, %7832
  %8609 = add nuw nsw <8 x i16> %8608, %8524
  %8610 = add <8 x i16> %8609, %8606
  %8611 = shl <8 x i16> %8610, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8612 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %8605, <8 x i16> %8611) #12
  %8613 = add <8 x i16> %8612, %8599
  %8614 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %8613, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %8615 = trunc <8 x i16> %8614 to <8 x i8>
  %8616 = add <8 x i8> %8575, %8510
  %8617 = add <8 x i8> %8615, %8535
  %8618 = shufflevector <8 x i8> %8616, <8 x i8> %8617, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8619 = getelementptr inbounds i8, i8* %8204, i64 35
  %8620 = bitcast i8* %8619 to <8 x i8>*
  %8621 = load <8 x i8>, <8 x i8>* %8620, align 1, !tbaa !389
  %8622 = getelementptr inbounds i8, i8* %8204, i64 34
  %8623 = bitcast i8* %8622 to <8 x i8>*
  %8624 = load <8 x i8>, <8 x i8>* %8623, align 2, !tbaa !389
  %8625 = getelementptr inbounds i8, i8* %8204, i64 36
  %8626 = bitcast i8* %8625 to <8 x i8>*
  %8627 = load <8 x i8>, <8 x i8>* %8626, align 4, !tbaa !389
  %8628 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %7945, <8 x i16> %6244) #12
  %8629 = zext <8 x i8> %8302 to <8 x i16>
  %8630 = zext <8 x i8> %8627 to <8 x i16>
  %8631 = zext <8 x i8> %8624 to <8 x i16>
  %8632 = zext <8 x i8> %8285 to <8 x i16>
  %8633 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %8621) #12
  %8634 = add nuw nsw <8 x i16> %8629, %8632
  %8635 = add nuw nsw <8 x i16> %8634, %8631
  %8636 = add nuw nsw <8 x i16> %8635, %8630
  %8637 = add <8 x i16> %8636, %8633
  %8638 = shl <8 x i16> %8637, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8639 = shl <8 x i16> %6225, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8640 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %8638, <8 x i16> %8639) #12
  %8641 = add <8 x i16> %8640, %8628
  %8642 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %8641, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %8643 = trunc <8 x i16> %8642 to <8 x i8>
  %8644 = getelementptr inbounds i8, i8* %8204, i64 43
  %8645 = bitcast i8* %8644 to <8 x i8>*
  %8646 = load <8 x i8>, <8 x i8>* %8645, align 1, !tbaa !389
  %8647 = getelementptr inbounds i8, i8* %8204, i64 42
  %8648 = bitcast i8* %8647 to <8 x i8>*
  %8649 = load <8 x i8>, <8 x i8>* %8648, align 2, !tbaa !389
  %8650 = getelementptr inbounds i8, i8* %8204, i64 44
  %8651 = bitcast i8* %8650 to <8 x i8>*
  %8652 = load <8 x i8>, <8 x i8>* %8651, align 4, !tbaa !389
  %8653 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %7970, <8 x i16> %6323) #12
  %8654 = zext <8 x i8> %8304 to <8 x i16>
  %8655 = zext <8 x i8> %8652 to <8 x i16>
  %8656 = zext <8 x i8> %8649 to <8 x i16>
  %8657 = zext <8 x i8> %8287 to <8 x i16>
  %8658 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %8646) #12
  %8659 = add nuw nsw <8 x i16> %8654, %8657
  %8660 = add nuw nsw <8 x i16> %8659, %8656
  %8661 = add nuw nsw <8 x i16> %8660, %8655
  %8662 = add <8 x i16> %8661, %8658
  %8663 = shl <8 x i16> %8662, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8664 = shl <8 x i16> %6304, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8665 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %8663, <8 x i16> %8664) #12
  %8666 = add <8 x i16> %8665, %8653
  %8667 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %8666, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %8668 = trunc <8 x i16> %8667 to <8 x i8>
  %8669 = getelementptr inbounds i8, i8* %6674, i64 32
  %8670 = bitcast i8* %8669 to <8 x i8>*
  %8671 = load <8 x i8>, <8 x i8>* %8670, align 16, !tbaa !389
  %8672 = getelementptr inbounds i8, i8* %6674, i64 38
  %8673 = bitcast i8* %8672 to <8 x i8>*
  %8674 = load <8 x i8>, <8 x i8>* %8673, align 2, !tbaa !389
  %8675 = zext <8 x i8> %8674 to <8 x i16>
  %8676 = zext <8 x i8> %t994 to <8 x i16>
  %8677 = zext <8 x i8> %t996 to <8 x i16>
  %8678 = zext <8 x i8> %t995 to <8 x i16>
  %8679 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t997) #12
  %8680 = add nuw nsw <8 x i16> %8678, %8676
  %8681 = add nuw nsw <8 x i16> %8680, %8677
  %8682 = add <8 x i16> %8681, %8679
  %8683 = add <8 x i16> %8682, %8675
  %8684 = zext <8 x i8> %t997 to <8 x i16>
  %8685 = zext <8 x i8> %t993 to <8 x i16>
  %8686 = zext <8 x i8> %8671 to <8 x i16>
  %8687 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t995) #12
  %8688 = add nuw nsw <8 x i16> %8677, %8685
  %8689 = add nuw nsw <8 x i16> %8688, %8684
  %8690 = add nuw nsw <8 x i16> %8689, %8686
  %8691 = add <8 x i16> %8690, %8687
  %8692 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %8683, <8 x i16> %8691) #12
  %8693 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t994) #12
  %8694 = add nuw nsw <8 x i16> %6217, %6236
  %8695 = add nuw nsw <8 x i16> %8694, %7937
  %8696 = add nuw nsw <8 x i16> %8695, %8629
  %8697 = add <8 x i16> %8696, %8693
  %8698 = shl <8 x i16> %8697, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8699 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t993) #12
  %8700 = add nuw nsw <8 x i16> %6220, %6239
  %8701 = add nuw nsw <8 x i16> %8700, %7940
  %8702 = add nuw nsw <8 x i16> %8701, %8632
  %8703 = add <8 x i16> %8702, %8699
  %8704 = shl <8 x i16> %8703, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8705 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %8698, <8 x i16> %8704) #12
  %8706 = add <8 x i16> %8705, %8692
  %8707 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %8706, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %8708 = trunc <8 x i16> %8707 to <8 x i8>
  %8709 = getelementptr inbounds i8, i8* %6674, i64 40
  %8710 = bitcast i8* %8709 to <8 x i8>*
  %8711 = load <8 x i8>, <8 x i8>* %8710, align 8, !tbaa !389
  %8712 = getelementptr inbounds i8, i8* %6674, i64 46
  %8713 = bitcast i8* %8712 to <8 x i8>*
  %8714 = load <8 x i8>, <8 x i8>* %8713, align 2, !tbaa !389
  %8715 = zext <8 x i8> %8714 to <8 x i16>
  %8716 = zext <8 x i8> %t999 to <8 x i16>
  %8717 = zext <8 x i8> %t1001 to <8 x i16>
  %8718 = zext <8 x i8> %t1000 to <8 x i16>
  %8719 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t1002) #12
  %8720 = add nuw nsw <8 x i16> %8718, %8716
  %8721 = add nuw nsw <8 x i16> %8720, %8717
  %8722 = add <8 x i16> %8721, %8719
  %8723 = add <8 x i16> %8722, %8715
  %8724 = zext <8 x i8> %t1002 to <8 x i16>
  %8725 = zext <8 x i8> %t998 to <8 x i16>
  %8726 = zext <8 x i8> %8711 to <8 x i16>
  %8727 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t1000) #12
  %8728 = add nuw nsw <8 x i16> %8717, %8725
  %8729 = add nuw nsw <8 x i16> %8728, %8724
  %8730 = add nuw nsw <8 x i16> %8729, %8726
  %8731 = add <8 x i16> %8730, %8727
  %8732 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %8723, <8 x i16> %8731) #12
  %8733 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t999) #12
  %8734 = add nuw nsw <8 x i16> %6296, %6315
  %8735 = add nuw nsw <8 x i16> %8734, %7962
  %8736 = add nuw nsw <8 x i16> %8735, %8654
  %8737 = add <8 x i16> %8736, %8733
  %8738 = shl <8 x i16> %8737, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8739 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t998) #12
  %8740 = add nuw nsw <8 x i16> %6299, %6318
  %8741 = add nuw nsw <8 x i16> %8740, %7965
  %8742 = add nuw nsw <8 x i16> %8741, %8657
  %8743 = add <8 x i16> %8742, %8739
  %8744 = shl <8 x i16> %8743, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8745 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %8738, <8 x i16> %8744) #12
  %8746 = add <8 x i16> %8745, %8732
  %8747 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %8746, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %8748 = trunc <8 x i16> %8747 to <8 x i8>
  %8749 = add <8 x i8> %8708, %8643
  %8750 = add <8 x i8> %8748, %8668
  %8751 = shufflevector <8 x i8> %8749, <8 x i8> %8750, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8752 = getelementptr inbounds i8, i8* %8204, i64 51
  %8753 = bitcast i8* %8752 to <8 x i8>*
  %8754 = load <8 x i8>, <8 x i8>* %8753, align 1, !tbaa !389
  %8755 = getelementptr inbounds i8, i8* %8204, i64 50
  %8756 = bitcast i8* %8755 to <8 x i8>*
  %8757 = load <8 x i8>, <8 x i8>* %8756, align 2, !tbaa !389
  %8758 = getelementptr inbounds i8, i8* %8204, i64 52
  %8759 = bitcast i8* %8758 to <8 x i8>*
  %8760 = load <8 x i8>, <8 x i8>* %8759, align 4, !tbaa !389
  %8761 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %8078, <8 x i16> %6485) #12
  %8762 = zext <8 x i8> %8306 to <8 x i16>
  %8763 = zext <8 x i8> %8760 to <8 x i16>
  %8764 = zext <8 x i8> %8757 to <8 x i16>
  %8765 = zext <8 x i8> %8289 to <8 x i16>
  %8766 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %8754) #12
  %8767 = add nuw nsw <8 x i16> %8762, %8765
  %8768 = add nuw nsw <8 x i16> %8767, %8764
  %8769 = add nuw nsw <8 x i16> %8768, %8763
  %8770 = add <8 x i16> %8769, %8766
  %8771 = shl <8 x i16> %8770, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8772 = shl <8 x i16> %6466, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8773 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %8771, <8 x i16> %8772) #12
  %8774 = add <8 x i16> %8773, %8761
  %8775 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %8774, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %8776 = trunc <8 x i16> %8775 to <8 x i8>
  %8777 = getelementptr inbounds i8, i8* %8204, i64 59
  %8778 = bitcast i8* %8777 to <8 x i8>*
  %8779 = load <8 x i8>, <8 x i8>* %8778, align 1, !tbaa !389
  %8780 = getelementptr inbounds i8, i8* %8204, i64 58
  %8781 = bitcast i8* %8780 to <8 x i8>*
  %8782 = load <8 x i8>, <8 x i8>* %8781, align 2, !tbaa !389
  %8783 = getelementptr inbounds i8, i8* %8204, i64 60
  %8784 = bitcast i8* %8783 to <8 x i8>*
  %8785 = load <8 x i8>, <8 x i8>* %8784, align 4, !tbaa !389
  %8786 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %8103, <8 x i16> %6564) #12
  %8787 = zext <8 x i8> %8308 to <8 x i16>
  %8788 = zext <8 x i8> %8785 to <8 x i16>
  %8789 = zext <8 x i8> %8782 to <8 x i16>
  %8790 = zext <8 x i8> %8291 to <8 x i16>
  %8791 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %8779) #12
  %8792 = add nuw nsw <8 x i16> %8787, %8790
  %8793 = add nuw nsw <8 x i16> %8792, %8789
  %8794 = add nuw nsw <8 x i16> %8793, %8788
  %8795 = add <8 x i16> %8794, %8791
  %8796 = shl <8 x i16> %8795, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8797 = shl <8 x i16> %6545, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8798 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %8796, <8 x i16> %8797) #12
  %8799 = add <8 x i16> %8798, %8786
  %8800 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %8799, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %8801 = trunc <8 x i16> %8800 to <8 x i8>
  %8802 = getelementptr inbounds i8, i8* %6674, i64 48
  %8803 = bitcast i8* %8802 to <8 x i8>*
  %8804 = load <8 x i8>, <8 x i8>* %8803, align 16, !tbaa !389
  %8805 = getelementptr inbounds i8, i8* %6674, i64 54
  %8806 = bitcast i8* %8805 to <8 x i8>*
  %8807 = load <8 x i8>, <8 x i8>* %8806, align 2, !tbaa !389
  %8808 = zext <8 x i8> %8807 to <8 x i16>
  %8809 = zext <8 x i8> %t1020 to <8 x i16>
  %8810 = zext <8 x i8> %t1022 to <8 x i16>
  %8811 = zext <8 x i8> %t1021 to <8 x i16>
  %8812 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t1023) #12
  %8813 = add nuw nsw <8 x i16> %8811, %8809
  %8814 = add nuw nsw <8 x i16> %8813, %8810
  %8815 = add <8 x i16> %8814, %8812
  %8816 = add <8 x i16> %8815, %8808
  %8817 = zext <8 x i8> %t1023 to <8 x i16>
  %8818 = zext <8 x i8> %t1019 to <8 x i16>
  %8819 = zext <8 x i8> %8804 to <8 x i16>
  %8820 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t1021) #12
  %8821 = add nuw nsw <8 x i16> %8810, %8818
  %8822 = add nuw nsw <8 x i16> %8821, %8817
  %8823 = add nuw nsw <8 x i16> %8822, %8819
  %8824 = add <8 x i16> %8823, %8820
  %8825 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %8816, <8 x i16> %8824) #12
  %8826 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t1020) #12
  %8827 = add nuw nsw <8 x i16> %6458, %6477
  %8828 = add nuw nsw <8 x i16> %8827, %8070
  %8829 = add nuw nsw <8 x i16> %8828, %8762
  %8830 = add <8 x i16> %8829, %8826
  %8831 = shl <8 x i16> %8830, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8832 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t1019) #12
  %8833 = add nuw nsw <8 x i16> %6461, %6480
  %8834 = add nuw nsw <8 x i16> %8833, %8073
  %8835 = add nuw nsw <8 x i16> %8834, %8765
  %8836 = add <8 x i16> %8835, %8832
  %8837 = shl <8 x i16> %8836, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8838 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %8831, <8 x i16> %8837) #12
  %8839 = add <8 x i16> %8838, %8825
  %8840 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %8839, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %8841 = trunc <8 x i16> %8840 to <8 x i8>
  %8842 = getelementptr inbounds i8, i8* %6674, i64 56
  %8843 = bitcast i8* %8842 to <8 x i8>*
  %8844 = load <8 x i8>, <8 x i8>* %8843, align 8, !tbaa !389
  %8845 = getelementptr inbounds i8, i8* %6674, i64 62
  %8846 = bitcast i8* %8845 to <8 x i8>*
  %8847 = load <8 x i8>, <8 x i8>* %8846, align 2, !tbaa !389
  %8848 = zext <8 x i8> %8847 to <8 x i16>
  %8849 = zext <8 x i8> %t1025 to <8 x i16>
  %8850 = zext <8 x i8> %t1027 to <8 x i16>
  %8851 = zext <8 x i8> %t1026 to <8 x i16>
  %8852 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t1028) #12
  %8853 = add nuw nsw <8 x i16> %8851, %8849
  %8854 = add nuw nsw <8 x i16> %8853, %8850
  %8855 = add <8 x i16> %8854, %8852
  %8856 = add <8 x i16> %8855, %8848
  %8857 = zext <8 x i8> %t1028 to <8 x i16>
  %8858 = zext <8 x i8> %t1024 to <8 x i16>
  %8859 = zext <8 x i8> %8844 to <8 x i16>
  %8860 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t1026) #12
  %8861 = add nuw nsw <8 x i16> %8850, %8858
  %8862 = add nuw nsw <8 x i16> %8861, %8857
  %8863 = add nuw nsw <8 x i16> %8862, %8859
  %8864 = add <8 x i16> %8863, %8860
  %8865 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %8856, <8 x i16> %8864) #12
  %8866 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t1025) #12
  %8867 = add nuw nsw <8 x i16> %6537, %6556
  %8868 = add nuw nsw <8 x i16> %8867, %8095
  %8869 = add nuw nsw <8 x i16> %8868, %8787
  %8870 = add <8 x i16> %8869, %8866
  %8871 = shl <8 x i16> %8870, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8872 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %t1024) #12
  %8873 = add nuw nsw <8 x i16> %6540, %6559
  %8874 = add nuw nsw <8 x i16> %8873, %8098
  %8875 = add nuw nsw <8 x i16> %8874, %8790
  %8876 = add <8 x i16> %8875, %8872
  %8877 = shl <8 x i16> %8876, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8878 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %8871, <8 x i16> %8877) #12
  %8879 = add <8 x i16> %8878, %8865
  %8880 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %8879, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %8881 = trunc <8 x i16> %8880 to <8 x i8>
  %8882 = add <8 x i8> %8841, %8776
  %8883 = add <8 x i8> %8881, %8801
  %8884 = shufflevector <8 x i8> %8882, <8 x i8> %8883, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8885 = add nsw i64 %5355, %5354
  %8886 = getelementptr inbounds i8, i8* %output18, i64 %8885
  %8887 = bitcast i8* %8886 to <16 x i8>*
  store <16 x i8> %8485, <16 x i8>* %8887, align 1, !tbaa !391
  %8888 = getelementptr inbounds i8, i8* %8886, i64 16
  %8889 = bitcast i8* %8888 to <16 x i8>*
  store <16 x i8> %8618, <16 x i8>* %8889, align 1, !tbaa !391
  %8890 = getelementptr inbounds i8, i8* %8886, i64 32
  %8891 = bitcast i8* %8890 to <16 x i8>*
  store <16 x i8> %8751, <16 x i8>* %8891, align 1, !tbaa !391
  %8892 = getelementptr inbounds i8, i8* %8886, i64 48
  %8893 = bitcast i8* %8892 to <16 x i8>*
  store <16 x i8> %8884, <16 x i8>* %8893, align 1, !tbaa !391
  %indvars.iv.next319 = add nuw nsw i64 %indvars.iv318, 1
  %.not215 = icmp eq i64 %indvars.iv.next319, %121
  br i1 %.not215, label %if.then.i242, label %"for output.s0.x.x115"

"end for output.s0.x.x116":                       ; preds = %"consume bounded_input102"
  %tobool.not.i241.not = icmp eq i8* %bounded_input54, null
  br i1 %tobool.not.i241.not, label %call_destructor.exit243, label %if.then.i242

if.then.i242:                                     ; preds = %"for output.s0.x.x115", %"end for output.s0.x.x116"
  tail call void @halide_free(i8* %__user_context, i8* nonnull %bounded_input54) #15
  br label %call_destructor.exit243

call_destructor.exit243:                          ; preds = %"end for output.s0.x.x116", %if.then.i242
  %indvars.iv.next328 = add nuw nsw i64 %indvars.iv327, 1
  %.not214 = icmp eq i64 %indvars.iv.next328, 128
  br i1 %.not214, label %"end for output.s0.y.y.y39", label %"for output.s0.y.y.y38"
}

; Function Attrs: nounwind
define i32 @sobel5x5(%struct.halide_buffer_t* noalias nocapture readonly %input.buffer, %struct.halide_buffer_t* noalias nocapture readonly %output.buffer) local_unnamed_addr #11 {
entry:
  %parallel_closure24 = alloca { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i1 }, align 8
  %parallel_closure = alloca { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i1 }, align 8
  %host.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %input.buffer, i64 0, i32 2
  %0 = load i8*, i8** %host.i, align 8, !tbaa !180
  %dim.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %input.buffer, i64 0, i32 6
  %1 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i, align 8, !tbaa !184
  %extent.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %1, i64 0, i32 1
  %2 = load i32, i32* %extent.i, align 4, !tbaa !189
  %extent.i31 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %1, i64 1, i32 1
  %3 = bitcast i32* %extent.i31 to <2 x i32>*
  %4 = load <2 x i32>, <2 x i32>* %3, align 4, !tbaa !41
  %host.i34 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %output.buffer, i64 0, i32 2
  %5 = load i8*, i8** %host.i34, align 8, !tbaa !180
  %dim.i35 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %output.buffer, i64 0, i32 6
  %6 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i35, align 8, !tbaa !184
  %min.i36 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %6, i64 0, i32 0
  %7 = load i32, i32* %min.i36, align 4, !tbaa !221
  %extent.i38 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %6, i64 0, i32 1
  %8 = load i32, i32* %extent.i38, align 4, !tbaa !189
  %min.i42 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %6, i64 1, i32 0
  %9 = load i32, i32* %min.i42, align 4, !tbaa !221
  %extent.i44 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %6, i64 1, i32 1
  %10 = load i32, i32* %extent.i44, align 4, !tbaa !189
  %stride.i46 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %6, i64 1, i32 2
  %11 = load i32, i32* %stride.i46, align 4, !tbaa !185
  %12 = add nsw i32 %8, 63
  %t459 = ashr i32 %12, 6
  %13 = add nsw i32 %8, 127
  %b135 = ashr i32 %13, 6
  %b139 = and i32 %12, -64
  %14 = add i32 %7, 61
  %a130 = add i32 %14, %b139
  %15 = icmp slt i32 %a130, %2
  %a129 = select i1 %15, i32 %a130, i32 %2
  %16 = icmp sgt i32 %a129, 1
  %t462 = select i1 %16, i32 %a129, i32 1
  %a132 = add nsw i32 %2, 2
  %17 = icmp slt i32 %a132, %7
  %a131 = select i1 %17, i32 %a132, i32 %7
  %18 = icmp sgt i32 %a131, 3
  %t463 = select i1 %18, i32 %a131, i32 3
  %19 = sub nsw i32 66, %7
  %a134 = ashr i32 %19, 6
  %20 = icmp sgt i32 %a134, 0
  %a133 = select i1 %20, i32 %a134, i32 0
  %21 = icmp slt i32 %a133, %b135
  %b137 = select i1 %21, i32 %a133, i32 %b135
  %t449 = icmp sle i32 %t462, %2
  %a136 = sub nsw i32 %2, %7
  %b138 = add nsw i32 %8, 124
  %22 = icmp slt i32 %a136, %b138
  %23 = select i1 %22, i32 %a136, i32 %b138
  %24 = add nsw i32 %23, 3
  %a135 = ashr i32 %24, 6
  %25 = icmp sgt i32 %a135, %b137
  %t456 = select i1 %25, i32 %a135, i32 %b137
  %26 = add nsw i32 %8, -1
  %27 = and i32 %26, -64
  %a137 = or i32 %27, 6
  %28 = icmp sgt i32 %a137, %b139
  %t452 = select i1 %28, i32 %a137, i32 %b139
  %29 = sub nsw i32 34, %t463
  %30 = add i32 %29, %t462
  %t450 = ashr i32 %30, 5
  %31 = add nsw i32 %10, 511
  %t447 = ashr i32 %31, 9
  %32 = add nsw i32 %10, -509
  %t448 = ashr i32 %32, 2
  %33 = mul i32 %9, %11
  %t458 = sub i32 0, %33
  %34 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i1 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i1 }* %parallel_closure, i64 0, i32 0
  store i8* %0, i8** %34, align 8
  %35 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i1 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i1 }* %parallel_closure, i64 0, i32 1
  store i8* %5, i8** %35, align 8
  %36 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i1 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i1 }* %parallel_closure, i64 0, i32 2
  store i32 %2, i32* %36, align 8
  %37 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i1 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i1 }* %parallel_closure, i64 0, i32 3
  %38 = bitcast i32* %37 to <2 x i32>*
  store <2 x i32> %4, <2 x i32>* %38, align 4
  %39 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i1 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i1 }* %parallel_closure, i64 0, i32 5
  store i32 %7, i32* %39, align 4
  %40 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i1 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i1 }* %parallel_closure, i64 0, i32 6
  store i32 %9, i32* %40, align 8
  %41 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i1 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i1 }* %parallel_closure, i64 0, i32 7
  store i32 %11, i32* %41, align 4
  %42 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i1 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i1 }* %parallel_closure, i64 0, i32 8
  store i32 %t448, i32* %42, align 8
  %43 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i1 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i1 }* %parallel_closure, i64 0, i32 9
  store i32 %t450, i32* %43, align 4
  %44 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i1 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i1 }* %parallel_closure, i64 0, i32 10
  store i32 %t452, i32* %44, align 8
  %45 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i1 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i1 }* %parallel_closure, i64 0, i32 11
  store i32 %t456, i32* %45, align 4
  %46 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i1 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i1 }* %parallel_closure, i64 0, i32 12
  store i32 %t458, i32* %46, align 8
  %47 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i1 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i1 }* %parallel_closure, i64 0, i32 13
  store i32 %t459, i32* %47, align 4
  %48 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i1 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i1 }* %parallel_closure, i64 0, i32 14
  store i32 %b135, i32* %48, align 8
  %49 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i1 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i1 }* %parallel_closure, i64 0, i32 15
  store i32 %t463, i32* %49, align 4
  %50 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i1 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i1 }* %parallel_closure, i64 0, i32 16
  store i32 %b137, i32* %50, align 8
  %51 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i1 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i1 }* %parallel_closure, i64 0, i32 17
  store i1 %t449, i1* %51, align 4
  %52 = bitcast { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i1 }* %parallel_closure to i8*
  %closure_result = call i32 @halide_do_par_for(i8* null, i32 (i8*, i32, i8*)* nonnull @sobel5x5_par_for_output_s0_y_y_v1, i32 0, i32 %t447, i8* nonnull %52) #12
  %53 = load i32, i32* %extent.i, align 4, !tbaa !189
  %54 = bitcast i32* %extent.i31 to <2 x i32>*
  %55 = load <2 x i32>, <2 x i32>* %54, align 4, !tbaa !41
  %56 = load i32, i32* %min.i36, align 4, !tbaa !221
  %57 = load i32, i32* %extent.i38, align 4, !tbaa !189
  %58 = load i32, i32* %min.i42, align 4, !tbaa !221
  %59 = load i32, i32* %extent.i44, align 4, !tbaa !189
  %60 = load i32, i32* %stride.i46, align 4, !tbaa !185
  %61 = add nsw i32 %57, 63
  %t45914 = ashr i32 %61, 6
  %62 = add nsw i32 %57, 127
  %t460 = ashr i32 %62, 6
  %63 = and i32 %61, -64
  %64 = add i32 %56, 61
  %a139 = add i32 %64, %63
  %65 = icmp slt i32 %a139, %53
  %a138 = select i1 %65, i32 %a139, i32 %53
  %66 = icmp sgt i32 %a138, 1
  %a141 = add nsw i32 %53, 2
  %67 = icmp slt i32 %a141, %56
  %a140 = select i1 %67, i32 %a141, i32 %56
  %68 = icmp sgt i32 %a140, 3
  %t46316 = select i1 %68, i32 %a140, i32 3
  %69 = sub nsw i32 66, %56
  %a143 = ashr i32 %69, 6
  %70 = icmp sgt i32 %a143, 0
  %a142 = select i1 %70, i32 %a143, i32 0
  %71 = icmp slt i32 %a142, %t460
  %t464 = select i1 %71, i32 %a142, i32 %t460
  %72 = select i1 %66, i32 %a138, i32 1
  %t44917 = icmp sle i32 %72, %53
  %a147 = sub nsw i32 %53, %56
  %b149 = add nsw i32 %57, 124
  %73 = icmp slt i32 %a147, %b149
  %74 = select i1 %73, i32 %a147, i32 %b149
  %75 = add nsw i32 %74, 3
  %a146 = ashr i32 %75, 6
  %76 = icmp sgt i32 %a146, %t464
  %t45618 = select i1 %76, i32 %a146, i32 %t464
  %77 = add nsw i32 %57, -1
  %78 = and i32 %77, -64
  %a150 = or i32 %78, 6
  %79 = icmp sgt i32 %a150, %63
  %t45219 = select i1 %79, i32 %a150, i32 %63
  %80 = sub nsw i32 34, %t46316
  %81 = add i32 %80, %72
  %t45020 = ashr i32 %81, 5
  %82 = add nsw i32 %59, 511
  %t44721 = ashr i32 %82, 9
  %83 = add nsw i32 %59, -509
  %t44822 = ashr i32 %83, 2
  %84 = mul i32 %58, %60
  %t45823 = sub i32 0, %84
  %85 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i1 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i1 }* %parallel_closure24, i64 0, i32 0
  store i8* %0, i8** %85, align 8
  %86 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i1 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i1 }* %parallel_closure24, i64 0, i32 1
  store i8* %5, i8** %86, align 8
  %87 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i1 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i1 }* %parallel_closure24, i64 0, i32 2
  store i32 %53, i32* %87, align 8
  %88 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i1 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i1 }* %parallel_closure24, i64 0, i32 3
  %89 = bitcast i32* %88 to <2 x i32>*
  store <2 x i32> %55, <2 x i32>* %89, align 4
  %90 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i1 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i1 }* %parallel_closure24, i64 0, i32 5
  store i32 %56, i32* %90, align 4
  %91 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i1 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i1 }* %parallel_closure24, i64 0, i32 6
  store i32 %58, i32* %91, align 8
  %92 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i1 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i1 }* %parallel_closure24, i64 0, i32 7
  store i32 %60, i32* %92, align 4
  %93 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i1 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i1 }* %parallel_closure24, i64 0, i32 8
  store i32 %t44822, i32* %93, align 8
  %94 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i1 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i1 }* %parallel_closure24, i64 0, i32 9
  store i32 %t45020, i32* %94, align 4
  %95 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i1 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i1 }* %parallel_closure24, i64 0, i32 10
  store i32 %t45219, i32* %95, align 8
  %96 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i1 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i1 }* %parallel_closure24, i64 0, i32 11
  store i32 %t45618, i32* %96, align 4
  %97 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i1 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i1 }* %parallel_closure24, i64 0, i32 12
  store i32 %t45823, i32* %97, align 8
  %98 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i1 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i1 }* %parallel_closure24, i64 0, i32 13
  store i32 %t45914, i32* %98, align 4
  %99 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i1 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i1 }* %parallel_closure24, i64 0, i32 14
  store i32 %t460, i32* %99, align 8
  %100 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i1 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i1 }* %parallel_closure24, i64 0, i32 15
  store i32 %t46316, i32* %100, align 4
  %101 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i1 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i1 }* %parallel_closure24, i64 0, i32 16
  store i32 %t464, i32* %101, align 8
  %102 = getelementptr inbounds { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i1 }, { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i1 }* %parallel_closure24, i64 0, i32 17
  store i1 %t44917, i1* %102, align 4
  %103 = bitcast { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i1 }* %parallel_closure24 to i8*
  %closure_result25 = call i32 @halide_do_par_for(i8* null, i32 (i8*, i32, i8*)* nonnull @sobel5x5_par_for_output_s0_y_y_v1, i32 0, i32 %t44721, i8* nonnull %103) #12
  ret i32 0
}

; Function Attrs: nounwind
define i32 @sobel5x5_argv(i8** nocapture readonly %0) local_unnamed_addr #12 {
entry:
  %1 = bitcast i8** %0 to %struct.halide_buffer_t**
  %2 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %1, align 8
  %3 = getelementptr i8*, i8** %0, i64 1
  %4 = bitcast i8** %3 to %struct.halide_buffer_t**
  %5 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %4, align 8
  %6 = tail call i32 @sobel5x5(%struct.halide_buffer_t* %2, %struct.halide_buffer_t* %5) #17
  ret i32 0
}

; Function Attrs: norecurse nounwind readnone willreturn
define nonnull %struct.halide_filter_metadata_t* @sobel5x5_metadata() local_unnamed_addr #13 {
entry:
  ret %struct.halide_filter_metadata_t* @sobel5x5_metadata_storage
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.0(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.1(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.2(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.3(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.4(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.5(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.6(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.7(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.8(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.9(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.10(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.11(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.12(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.13(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.14(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.15(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.16(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.17(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.18(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.19(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.20(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.21(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.22(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.23(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.24(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.25(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.26(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.27(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.28(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.29(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.30(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.31(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: norecurse nounwind readnone willreturn
define <16 x i8> @hydride.node.sobel5x5_arm_depth1.32(<16 x i8> %arg, <16 x i8> %arg.1) local_unnamed_addr #13 {
entry:
  %0 = add <16 x i8> %arg.1, %arg
  ret <16 x i8> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i8> @hydride.node.sobel5x5_arm_depth1.33(<8 x i8> %arg, <8 x i8> %arg.1, <8 x i8> %arg.2, <8 x i8> %arg.3, <8 x i8> %arg.4, <8 x i8> %arg.5, <8 x i8> %arg.6, <8 x i8> %arg.7, <8 x i8> %arg.8, <8 x i8> %arg.9, <8 x i8> %arg.10, <8 x i8> %arg.11, <8 x i8> %arg.12, <8 x i8> %arg.13, <8 x i8> %arg.14, <8 x i8> %arg.15, <8 x i8> %arg.16, <8 x i8> %arg.17, <8 x i8> %arg.18, <8 x i8> %arg.19) local_unnamed_addr #14 {
entry:
  %0 = zext <8 x i8> %arg.19 to <8 x i16>
  %1 = zext <8 x i8> %arg.18 to <8 x i16>
  %2 = zext <8 x i8> %arg.17 to <8 x i16>
  %3 = zext <8 x i8> %arg.16 to <8 x i16>
  %4 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.15) #12
  %5 = add nuw nsw <8 x i16> %2, %3
  %6 = add nuw nsw <8 x i16> %5, %1
  %7 = add nuw nsw <8 x i16> %6, %0
  %8 = add <8 x i16> %7, %4
  %9 = zext <8 x i8> %arg.14 to <8 x i16>
  %10 = zext <8 x i8> %arg.13 to <8 x i16>
  %11 = zext <8 x i8> %arg.12 to <8 x i16>
  %12 = zext <8 x i8> %arg.11 to <8 x i16>
  %13 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.10) #12
  %14 = add nuw nsw <8 x i16> %11, %12
  %15 = add nuw nsw <8 x i16> %14, %10
  %16 = add nuw nsw <8 x i16> %15, %9
  %17 = add <8 x i16> %16, %13
  %18 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %8, <8 x i16> %17) #12
  %19 = zext <8 x i8> %arg.9 to <8 x i16>
  %20 = zext <8 x i8> %arg.8 to <8 x i16>
  %21 = zext <8 x i8> %arg.7 to <8 x i16>
  %22 = zext <8 x i8> %arg.6 to <8 x i16>
  %23 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.5) #12
  %24 = add nuw nsw <8 x i16> %21, %22
  %25 = add nuw nsw <8 x i16> %24, %20
  %26 = add nuw nsw <8 x i16> %25, %19
  %27 = add <8 x i16> %26, %23
  %28 = shl <8 x i16> %27, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %29 = zext <8 x i8> %arg.4 to <8 x i16>
  %30 = zext <8 x i8> %arg.3 to <8 x i16>
  %31 = zext <8 x i8> %arg.2 to <8 x i16>
  %32 = zext <8 x i8> %arg.1 to <8 x i16>
  %33 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  %34 = add nuw nsw <8 x i16> %31, %32
  %35 = add nuw nsw <8 x i16> %34, %30
  %36 = add nuw nsw <8 x i16> %35, %29
  %37 = add <8 x i16> %36, %33
  %38 = shl <8 x i16> %37, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %39 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %28, <8 x i16> %38) #12
  %40 = add <8 x i16> %39, %18
  %41 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %40, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %42 = trunc <8 x i16> %41 to <8 x i8>
  ret <8 x i8> %42
}

; Function Attrs: nounwind readnone willreturn
define <8 x i8> @hydride.node.sobel5x5_arm_depth1.34(<8 x i8> %arg, <8 x i8> %arg.1, <8 x i8> %arg.2, <8 x i8> %arg.3, <8 x i8> %arg.4, <8 x i8> %arg.5, <8 x i8> %arg.6, <8 x i8> %arg.7, <8 x i8> %arg.8, <8 x i8> %arg.9, <8 x i8> %arg.10, <8 x i8> %arg.11, <8 x i8> %arg.12, <8 x i8> %arg.13, <8 x i8> %arg.14, <8 x i8> %arg.15, <8 x i8> %arg.16, <8 x i8> %arg.17, <8 x i8> %arg.18, <8 x i8> %arg.19) local_unnamed_addr #14 {
entry:
  %0 = zext <8 x i8> %arg.19 to <8 x i16>
  %1 = zext <8 x i8> %arg.18 to <8 x i16>
  %2 = zext <8 x i8> %arg.17 to <8 x i16>
  %3 = zext <8 x i8> %arg.16 to <8 x i16>
  %4 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.15) #12
  %5 = add nuw nsw <8 x i16> %2, %3
  %6 = add nuw nsw <8 x i16> %5, %1
  %7 = add nuw nsw <8 x i16> %6, %0
  %8 = add <8 x i16> %7, %4
  %9 = zext <8 x i8> %arg.14 to <8 x i16>
  %10 = zext <8 x i8> %arg.13 to <8 x i16>
  %11 = zext <8 x i8> %arg.12 to <8 x i16>
  %12 = zext <8 x i8> %arg.11 to <8 x i16>
  %13 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.10) #12
  %14 = add nuw nsw <8 x i16> %11, %12
  %15 = add nuw nsw <8 x i16> %14, %10
  %16 = add nuw nsw <8 x i16> %15, %9
  %17 = add <8 x i16> %16, %13
  %18 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %8, <8 x i16> %17) #12
  %19 = zext <8 x i8> %arg.9 to <8 x i16>
  %20 = zext <8 x i8> %arg.8 to <8 x i16>
  %21 = zext <8 x i8> %arg.7 to <8 x i16>
  %22 = zext <8 x i8> %arg.6 to <8 x i16>
  %23 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.5) #12
  %24 = add nuw nsw <8 x i16> %21, %22
  %25 = add nuw nsw <8 x i16> %24, %20
  %26 = add nuw nsw <8 x i16> %25, %19
  %27 = add <8 x i16> %26, %23
  %28 = shl <8 x i16> %27, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %29 = zext <8 x i8> %arg.4 to <8 x i16>
  %30 = zext <8 x i8> %arg.3 to <8 x i16>
  %31 = zext <8 x i8> %arg.2 to <8 x i16>
  %32 = zext <8 x i8> %arg.1 to <8 x i16>
  %33 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  %34 = add nuw nsw <8 x i16> %31, %32
  %35 = add nuw nsw <8 x i16> %34, %30
  %36 = add nuw nsw <8 x i16> %35, %29
  %37 = add <8 x i16> %36, %33
  %38 = shl <8 x i16> %37, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %39 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %28, <8 x i16> %38) #12
  %40 = add <8 x i16> %39, %18
  %41 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %40, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %42 = trunc <8 x i16> %41 to <8 x i8>
  ret <8 x i8> %42
}

; Function Attrs: nounwind readnone willreturn
define <8 x i8> @hydride.node.sobel5x5_arm_depth1.35(<8 x i8> %arg, <8 x i8> %arg.1, <8 x i8> %arg.2, <8 x i8> %arg.3, <8 x i8> %arg.4, <8 x i8> %arg.5, <8 x i8> %arg.6, <8 x i8> %arg.7, <8 x i8> %arg.8, <8 x i8> %arg.9, <8 x i8> %arg.10, <8 x i8> %arg.11, <8 x i8> %arg.12, <8 x i8> %arg.13, <8 x i8> %arg.14, <8 x i8> %arg.15, <8 x i8> %arg.16, <8 x i8> %arg.17, <8 x i8> %arg.18, <8 x i8> %arg.19) local_unnamed_addr #14 {
entry:
  %0 = zext <8 x i8> %arg.19 to <8 x i16>
  %1 = zext <8 x i8> %arg.18 to <8 x i16>
  %2 = zext <8 x i8> %arg.17 to <8 x i16>
  %3 = zext <8 x i8> %arg.16 to <8 x i16>
  %4 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.15) #12
  %5 = add nuw nsw <8 x i16> %2, %3
  %6 = add nuw nsw <8 x i16> %5, %1
  %7 = add nuw nsw <8 x i16> %6, %0
  %8 = add <8 x i16> %7, %4
  %9 = zext <8 x i8> %arg.14 to <8 x i16>
  %10 = zext <8 x i8> %arg.13 to <8 x i16>
  %11 = zext <8 x i8> %arg.12 to <8 x i16>
  %12 = zext <8 x i8> %arg.11 to <8 x i16>
  %13 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.10) #12
  %14 = add nuw nsw <8 x i16> %11, %12
  %15 = add nuw nsw <8 x i16> %14, %10
  %16 = add nuw nsw <8 x i16> %15, %9
  %17 = add <8 x i16> %16, %13
  %18 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %8, <8 x i16> %17) #12
  %19 = zext <8 x i8> %arg.9 to <8 x i16>
  %20 = zext <8 x i8> %arg.8 to <8 x i16>
  %21 = zext <8 x i8> %arg.7 to <8 x i16>
  %22 = zext <8 x i8> %arg.6 to <8 x i16>
  %23 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.5) #12
  %24 = add nuw nsw <8 x i16> %21, %22
  %25 = add nuw nsw <8 x i16> %24, %20
  %26 = add nuw nsw <8 x i16> %25, %19
  %27 = add <8 x i16> %26, %23
  %28 = shl <8 x i16> %27, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %29 = zext <8 x i8> %arg.4 to <8 x i16>
  %30 = zext <8 x i8> %arg.3 to <8 x i16>
  %31 = zext <8 x i8> %arg.2 to <8 x i16>
  %32 = zext <8 x i8> %arg.1 to <8 x i16>
  %33 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  %34 = add nuw nsw <8 x i16> %31, %32
  %35 = add nuw nsw <8 x i16> %34, %30
  %36 = add nuw nsw <8 x i16> %35, %29
  %37 = add <8 x i16> %36, %33
  %38 = shl <8 x i16> %37, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %39 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %28, <8 x i16> %38) #12
  %40 = add <8 x i16> %39, %18
  %41 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %40, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %42 = trunc <8 x i16> %41 to <8 x i8>
  ret <8 x i8> %42
}

; Function Attrs: nounwind readnone willreturn
define <8 x i8> @hydride.node.sobel5x5_arm_depth1.36(<8 x i8> %arg, <8 x i8> %arg.1, <8 x i8> %arg.2, <8 x i8> %arg.3, <8 x i8> %arg.4, <8 x i8> %arg.5, <8 x i8> %arg.6, <8 x i8> %arg.7, <8 x i8> %arg.8, <8 x i8> %arg.9, <8 x i8> %arg.10, <8 x i8> %arg.11, <8 x i8> %arg.12, <8 x i8> %arg.13, <8 x i8> %arg.14, <8 x i8> %arg.15, <8 x i8> %arg.16, <8 x i8> %arg.17, <8 x i8> %arg.18, <8 x i8> %arg.19) local_unnamed_addr #14 {
entry:
  %0 = zext <8 x i8> %arg.19 to <8 x i16>
  %1 = zext <8 x i8> %arg.18 to <8 x i16>
  %2 = zext <8 x i8> %arg.17 to <8 x i16>
  %3 = zext <8 x i8> %arg.16 to <8 x i16>
  %4 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.15) #12
  %5 = add nuw nsw <8 x i16> %2, %3
  %6 = add nuw nsw <8 x i16> %5, %1
  %7 = add nuw nsw <8 x i16> %6, %0
  %8 = add <8 x i16> %7, %4
  %9 = zext <8 x i8> %arg.14 to <8 x i16>
  %10 = zext <8 x i8> %arg.13 to <8 x i16>
  %11 = zext <8 x i8> %arg.12 to <8 x i16>
  %12 = zext <8 x i8> %arg.11 to <8 x i16>
  %13 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.10) #12
  %14 = add nuw nsw <8 x i16> %11, %12
  %15 = add nuw nsw <8 x i16> %14, %10
  %16 = add nuw nsw <8 x i16> %15, %9
  %17 = add <8 x i16> %16, %13
  %18 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %8, <8 x i16> %17) #12
  %19 = zext <8 x i8> %arg.9 to <8 x i16>
  %20 = zext <8 x i8> %arg.8 to <8 x i16>
  %21 = zext <8 x i8> %arg.7 to <8 x i16>
  %22 = zext <8 x i8> %arg.6 to <8 x i16>
  %23 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.5) #12
  %24 = add nuw nsw <8 x i16> %21, %22
  %25 = add nuw nsw <8 x i16> %24, %20
  %26 = add nuw nsw <8 x i16> %25, %19
  %27 = add <8 x i16> %26, %23
  %28 = shl <8 x i16> %27, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %29 = zext <8 x i8> %arg.4 to <8 x i16>
  %30 = zext <8 x i8> %arg.3 to <8 x i16>
  %31 = zext <8 x i8> %arg.2 to <8 x i16>
  %32 = zext <8 x i8> %arg.1 to <8 x i16>
  %33 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  %34 = add nuw nsw <8 x i16> %31, %32
  %35 = add nuw nsw <8 x i16> %34, %30
  %36 = add nuw nsw <8 x i16> %35, %29
  %37 = add <8 x i16> %36, %33
  %38 = shl <8 x i16> %37, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %39 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %28, <8 x i16> %38) #12
  %40 = add <8 x i16> %39, %18
  %41 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %40, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %42 = trunc <8 x i16> %41 to <8 x i8>
  ret <8 x i8> %42
}

; Function Attrs: norecurse nounwind readnone willreturn
define <16 x i8> @hydride.node.sobel5x5_arm_depth1.37(<16 x i8> %arg, <16 x i8> %arg.1) local_unnamed_addr #13 {
entry:
  %0 = add <16 x i8> %arg.1, %arg
  ret <16 x i8> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i8> @hydride.node.sobel5x5_arm_depth1.38(<8 x i8> %arg, <8 x i8> %arg.1, <8 x i8> %arg.2, <8 x i8> %arg.3, <8 x i8> %arg.4, <8 x i8> %arg.5, <8 x i8> %arg.6, <8 x i8> %arg.7, <8 x i8> %arg.8, <8 x i8> %arg.9, <8 x i8> %arg.10, <8 x i8> %arg.11, <8 x i8> %arg.12, <8 x i8> %arg.13, <8 x i8> %arg.14, <8 x i8> %arg.15, <8 x i8> %arg.16, <8 x i8> %arg.17, <8 x i8> %arg.18, <8 x i8> %arg.19) local_unnamed_addr #14 {
entry:
  %0 = zext <8 x i8> %arg.19 to <8 x i16>
  %1 = zext <8 x i8> %arg.18 to <8 x i16>
  %2 = zext <8 x i8> %arg.17 to <8 x i16>
  %3 = zext <8 x i8> %arg.16 to <8 x i16>
  %4 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.15) #12
  %5 = add nuw nsw <8 x i16> %2, %3
  %6 = add nuw nsw <8 x i16> %5, %1
  %7 = add nuw nsw <8 x i16> %6, %0
  %8 = add <8 x i16> %7, %4
  %9 = zext <8 x i8> %arg.14 to <8 x i16>
  %10 = zext <8 x i8> %arg.13 to <8 x i16>
  %11 = zext <8 x i8> %arg.12 to <8 x i16>
  %12 = zext <8 x i8> %arg.11 to <8 x i16>
  %13 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.10) #12
  %14 = add nuw nsw <8 x i16> %11, %12
  %15 = add nuw nsw <8 x i16> %14, %10
  %16 = add nuw nsw <8 x i16> %15, %9
  %17 = add <8 x i16> %16, %13
  %18 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %8, <8 x i16> %17) #12
  %19 = zext <8 x i8> %arg.9 to <8 x i16>
  %20 = zext <8 x i8> %arg.8 to <8 x i16>
  %21 = zext <8 x i8> %arg.7 to <8 x i16>
  %22 = zext <8 x i8> %arg.6 to <8 x i16>
  %23 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.5) #12
  %24 = add nuw nsw <8 x i16> %21, %22
  %25 = add nuw nsw <8 x i16> %24, %20
  %26 = add nuw nsw <8 x i16> %25, %19
  %27 = add <8 x i16> %26, %23
  %28 = shl <8 x i16> %27, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %29 = zext <8 x i8> %arg.4 to <8 x i16>
  %30 = zext <8 x i8> %arg.3 to <8 x i16>
  %31 = zext <8 x i8> %arg.2 to <8 x i16>
  %32 = zext <8 x i8> %arg.1 to <8 x i16>
  %33 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  %34 = add nuw nsw <8 x i16> %31, %32
  %35 = add nuw nsw <8 x i16> %34, %30
  %36 = add nuw nsw <8 x i16> %35, %29
  %37 = add <8 x i16> %36, %33
  %38 = shl <8 x i16> %37, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %39 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %28, <8 x i16> %38) #12
  %40 = add <8 x i16> %39, %18
  %41 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %40, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %42 = trunc <8 x i16> %41 to <8 x i8>
  ret <8 x i8> %42
}

; Function Attrs: nounwind readnone willreturn
define <8 x i8> @hydride.node.sobel5x5_arm_depth1.39(<8 x i8> %arg, <8 x i8> %arg.1, <8 x i8> %arg.2, <8 x i8> %arg.3, <8 x i8> %arg.4, <8 x i8> %arg.5, <8 x i8> %arg.6, <8 x i8> %arg.7, <8 x i8> %arg.8, <8 x i8> %arg.9, <8 x i8> %arg.10, <8 x i8> %arg.11, <8 x i8> %arg.12, <8 x i8> %arg.13, <8 x i8> %arg.14, <8 x i8> %arg.15, <8 x i8> %arg.16, <8 x i8> %arg.17, <8 x i8> %arg.18, <8 x i8> %arg.19) local_unnamed_addr #14 {
entry:
  %0 = zext <8 x i8> %arg.19 to <8 x i16>
  %1 = zext <8 x i8> %arg.18 to <8 x i16>
  %2 = zext <8 x i8> %arg.17 to <8 x i16>
  %3 = zext <8 x i8> %arg.16 to <8 x i16>
  %4 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.15) #12
  %5 = add nuw nsw <8 x i16> %2, %3
  %6 = add nuw nsw <8 x i16> %5, %1
  %7 = add nuw nsw <8 x i16> %6, %0
  %8 = add <8 x i16> %7, %4
  %9 = zext <8 x i8> %arg.14 to <8 x i16>
  %10 = zext <8 x i8> %arg.13 to <8 x i16>
  %11 = zext <8 x i8> %arg.12 to <8 x i16>
  %12 = zext <8 x i8> %arg.11 to <8 x i16>
  %13 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.10) #12
  %14 = add nuw nsw <8 x i16> %11, %12
  %15 = add nuw nsw <8 x i16> %14, %10
  %16 = add nuw nsw <8 x i16> %15, %9
  %17 = add <8 x i16> %16, %13
  %18 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %8, <8 x i16> %17) #12
  %19 = zext <8 x i8> %arg.9 to <8 x i16>
  %20 = zext <8 x i8> %arg.8 to <8 x i16>
  %21 = zext <8 x i8> %arg.7 to <8 x i16>
  %22 = zext <8 x i8> %arg.6 to <8 x i16>
  %23 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.5) #12
  %24 = add nuw nsw <8 x i16> %21, %22
  %25 = add nuw nsw <8 x i16> %24, %20
  %26 = add nuw nsw <8 x i16> %25, %19
  %27 = add <8 x i16> %26, %23
  %28 = shl <8 x i16> %27, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %29 = zext <8 x i8> %arg.4 to <8 x i16>
  %30 = zext <8 x i8> %arg.3 to <8 x i16>
  %31 = zext <8 x i8> %arg.2 to <8 x i16>
  %32 = zext <8 x i8> %arg.1 to <8 x i16>
  %33 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  %34 = add nuw nsw <8 x i16> %31, %32
  %35 = add nuw nsw <8 x i16> %34, %30
  %36 = add nuw nsw <8 x i16> %35, %29
  %37 = add <8 x i16> %36, %33
  %38 = shl <8 x i16> %37, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %39 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %28, <8 x i16> %38) #12
  %40 = add <8 x i16> %39, %18
  %41 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %40, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %42 = trunc <8 x i16> %41 to <8 x i8>
  ret <8 x i8> %42
}

; Function Attrs: nounwind readnone willreturn
define <8 x i8> @hydride.node.sobel5x5_arm_depth1.40(<8 x i8> %arg, <8 x i8> %arg.1, <8 x i8> %arg.2, <8 x i8> %arg.3, <8 x i8> %arg.4, <8 x i8> %arg.5, <8 x i8> %arg.6, <8 x i8> %arg.7, <8 x i8> %arg.8, <8 x i8> %arg.9, <8 x i8> %arg.10, <8 x i8> %arg.11, <8 x i8> %arg.12, <8 x i8> %arg.13, <8 x i8> %arg.14, <8 x i8> %arg.15, <8 x i8> %arg.16, <8 x i8> %arg.17, <8 x i8> %arg.18, <8 x i8> %arg.19) local_unnamed_addr #14 {
entry:
  %0 = zext <8 x i8> %arg.19 to <8 x i16>
  %1 = zext <8 x i8> %arg.18 to <8 x i16>
  %2 = zext <8 x i8> %arg.17 to <8 x i16>
  %3 = zext <8 x i8> %arg.16 to <8 x i16>
  %4 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.15) #12
  %5 = add nuw nsw <8 x i16> %2, %3
  %6 = add nuw nsw <8 x i16> %5, %1
  %7 = add nuw nsw <8 x i16> %6, %0
  %8 = add <8 x i16> %7, %4
  %9 = zext <8 x i8> %arg.14 to <8 x i16>
  %10 = zext <8 x i8> %arg.13 to <8 x i16>
  %11 = zext <8 x i8> %arg.12 to <8 x i16>
  %12 = zext <8 x i8> %arg.11 to <8 x i16>
  %13 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.10) #12
  %14 = add nuw nsw <8 x i16> %11, %12
  %15 = add nuw nsw <8 x i16> %14, %10
  %16 = add nuw nsw <8 x i16> %15, %9
  %17 = add <8 x i16> %16, %13
  %18 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %8, <8 x i16> %17) #12
  %19 = zext <8 x i8> %arg.9 to <8 x i16>
  %20 = zext <8 x i8> %arg.8 to <8 x i16>
  %21 = zext <8 x i8> %arg.7 to <8 x i16>
  %22 = zext <8 x i8> %arg.6 to <8 x i16>
  %23 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.5) #12
  %24 = add nuw nsw <8 x i16> %21, %22
  %25 = add nuw nsw <8 x i16> %24, %20
  %26 = add nuw nsw <8 x i16> %25, %19
  %27 = add <8 x i16> %26, %23
  %28 = shl <8 x i16> %27, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %29 = zext <8 x i8> %arg.4 to <8 x i16>
  %30 = zext <8 x i8> %arg.3 to <8 x i16>
  %31 = zext <8 x i8> %arg.2 to <8 x i16>
  %32 = zext <8 x i8> %arg.1 to <8 x i16>
  %33 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  %34 = add nuw nsw <8 x i16> %31, %32
  %35 = add nuw nsw <8 x i16> %34, %30
  %36 = add nuw nsw <8 x i16> %35, %29
  %37 = add <8 x i16> %36, %33
  %38 = shl <8 x i16> %37, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %39 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %28, <8 x i16> %38) #12
  %40 = add <8 x i16> %39, %18
  %41 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %40, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %42 = trunc <8 x i16> %41 to <8 x i8>
  ret <8 x i8> %42
}

; Function Attrs: nounwind readnone willreturn
define <8 x i8> @hydride.node.sobel5x5_arm_depth1.41(<8 x i8> %arg, <8 x i8> %arg.1, <8 x i8> %arg.2, <8 x i8> %arg.3, <8 x i8> %arg.4, <8 x i8> %arg.5, <8 x i8> %arg.6, <8 x i8> %arg.7, <8 x i8> %arg.8, <8 x i8> %arg.9, <8 x i8> %arg.10, <8 x i8> %arg.11, <8 x i8> %arg.12, <8 x i8> %arg.13, <8 x i8> %arg.14, <8 x i8> %arg.15, <8 x i8> %arg.16, <8 x i8> %arg.17, <8 x i8> %arg.18, <8 x i8> %arg.19) local_unnamed_addr #14 {
entry:
  %0 = zext <8 x i8> %arg.19 to <8 x i16>
  %1 = zext <8 x i8> %arg.18 to <8 x i16>
  %2 = zext <8 x i8> %arg.17 to <8 x i16>
  %3 = zext <8 x i8> %arg.16 to <8 x i16>
  %4 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.15) #12
  %5 = add nuw nsw <8 x i16> %2, %3
  %6 = add nuw nsw <8 x i16> %5, %1
  %7 = add nuw nsw <8 x i16> %6, %0
  %8 = add <8 x i16> %7, %4
  %9 = zext <8 x i8> %arg.14 to <8 x i16>
  %10 = zext <8 x i8> %arg.13 to <8 x i16>
  %11 = zext <8 x i8> %arg.12 to <8 x i16>
  %12 = zext <8 x i8> %arg.11 to <8 x i16>
  %13 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.10) #12
  %14 = add nuw nsw <8 x i16> %11, %12
  %15 = add nuw nsw <8 x i16> %14, %10
  %16 = add nuw nsw <8 x i16> %15, %9
  %17 = add <8 x i16> %16, %13
  %18 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %8, <8 x i16> %17) #12
  %19 = zext <8 x i8> %arg.9 to <8 x i16>
  %20 = zext <8 x i8> %arg.8 to <8 x i16>
  %21 = zext <8 x i8> %arg.7 to <8 x i16>
  %22 = zext <8 x i8> %arg.6 to <8 x i16>
  %23 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.5) #12
  %24 = add nuw nsw <8 x i16> %21, %22
  %25 = add nuw nsw <8 x i16> %24, %20
  %26 = add nuw nsw <8 x i16> %25, %19
  %27 = add <8 x i16> %26, %23
  %28 = shl <8 x i16> %27, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %29 = zext <8 x i8> %arg.4 to <8 x i16>
  %30 = zext <8 x i8> %arg.3 to <8 x i16>
  %31 = zext <8 x i8> %arg.2 to <8 x i16>
  %32 = zext <8 x i8> %arg.1 to <8 x i16>
  %33 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  %34 = add nuw nsw <8 x i16> %31, %32
  %35 = add nuw nsw <8 x i16> %34, %30
  %36 = add nuw nsw <8 x i16> %35, %29
  %37 = add <8 x i16> %36, %33
  %38 = shl <8 x i16> %37, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %39 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %28, <8 x i16> %38) #12
  %40 = add <8 x i16> %39, %18
  %41 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %40, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %42 = trunc <8 x i16> %41 to <8 x i8>
  ret <8 x i8> %42
}

; Function Attrs: norecurse nounwind readnone willreturn
define <16 x i8> @hydride.node.sobel5x5_arm_depth1.42(<16 x i8> %arg, <16 x i8> %arg.1) local_unnamed_addr #13 {
entry:
  %0 = add <16 x i8> %arg.1, %arg
  ret <16 x i8> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i8> @hydride.node.sobel5x5_arm_depth1.43(<8 x i8> %arg, <8 x i8> %arg.1, <8 x i8> %arg.2, <8 x i8> %arg.3, <8 x i8> %arg.4, <8 x i8> %arg.5, <8 x i8> %arg.6, <8 x i8> %arg.7, <8 x i8> %arg.8, <8 x i8> %arg.9, <8 x i8> %arg.10, <8 x i8> %arg.11, <8 x i8> %arg.12, <8 x i8> %arg.13, <8 x i8> %arg.14, <8 x i8> %arg.15, <8 x i8> %arg.16, <8 x i8> %arg.17, <8 x i8> %arg.18, <8 x i8> %arg.19) local_unnamed_addr #14 {
entry:
  %0 = zext <8 x i8> %arg.19 to <8 x i16>
  %1 = zext <8 x i8> %arg.18 to <8 x i16>
  %2 = zext <8 x i8> %arg.17 to <8 x i16>
  %3 = zext <8 x i8> %arg.16 to <8 x i16>
  %4 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.15) #12
  %5 = add nuw nsw <8 x i16> %2, %3
  %6 = add nuw nsw <8 x i16> %5, %1
  %7 = add nuw nsw <8 x i16> %6, %0
  %8 = add <8 x i16> %7, %4
  %9 = zext <8 x i8> %arg.14 to <8 x i16>
  %10 = zext <8 x i8> %arg.13 to <8 x i16>
  %11 = zext <8 x i8> %arg.12 to <8 x i16>
  %12 = zext <8 x i8> %arg.11 to <8 x i16>
  %13 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.10) #12
  %14 = add nuw nsw <8 x i16> %11, %12
  %15 = add nuw nsw <8 x i16> %14, %10
  %16 = add nuw nsw <8 x i16> %15, %9
  %17 = add <8 x i16> %16, %13
  %18 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %8, <8 x i16> %17) #12
  %19 = zext <8 x i8> %arg.9 to <8 x i16>
  %20 = zext <8 x i8> %arg.8 to <8 x i16>
  %21 = zext <8 x i8> %arg.7 to <8 x i16>
  %22 = zext <8 x i8> %arg.6 to <8 x i16>
  %23 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.5) #12
  %24 = add nuw nsw <8 x i16> %21, %22
  %25 = add nuw nsw <8 x i16> %24, %20
  %26 = add nuw nsw <8 x i16> %25, %19
  %27 = add <8 x i16> %26, %23
  %28 = shl <8 x i16> %27, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %29 = zext <8 x i8> %arg.4 to <8 x i16>
  %30 = zext <8 x i8> %arg.3 to <8 x i16>
  %31 = zext <8 x i8> %arg.2 to <8 x i16>
  %32 = zext <8 x i8> %arg.1 to <8 x i16>
  %33 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  %34 = add nuw nsw <8 x i16> %31, %32
  %35 = add nuw nsw <8 x i16> %34, %30
  %36 = add nuw nsw <8 x i16> %35, %29
  %37 = add <8 x i16> %36, %33
  %38 = shl <8 x i16> %37, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %39 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %28, <8 x i16> %38) #12
  %40 = add <8 x i16> %39, %18
  %41 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %40, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %42 = trunc <8 x i16> %41 to <8 x i8>
  ret <8 x i8> %42
}

; Function Attrs: nounwind readnone willreturn
define <8 x i8> @hydride.node.sobel5x5_arm_depth1.44(<8 x i8> %arg, <8 x i8> %arg.1, <8 x i8> %arg.2, <8 x i8> %arg.3, <8 x i8> %arg.4, <8 x i8> %arg.5, <8 x i8> %arg.6, <8 x i8> %arg.7, <8 x i8> %arg.8, <8 x i8> %arg.9, <8 x i8> %arg.10, <8 x i8> %arg.11, <8 x i8> %arg.12, <8 x i8> %arg.13, <8 x i8> %arg.14, <8 x i8> %arg.15, <8 x i8> %arg.16, <8 x i8> %arg.17, <8 x i8> %arg.18, <8 x i8> %arg.19) local_unnamed_addr #14 {
entry:
  %0 = zext <8 x i8> %arg.19 to <8 x i16>
  %1 = zext <8 x i8> %arg.18 to <8 x i16>
  %2 = zext <8 x i8> %arg.17 to <8 x i16>
  %3 = zext <8 x i8> %arg.16 to <8 x i16>
  %4 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.15) #12
  %5 = add nuw nsw <8 x i16> %2, %3
  %6 = add nuw nsw <8 x i16> %5, %1
  %7 = add nuw nsw <8 x i16> %6, %0
  %8 = add <8 x i16> %7, %4
  %9 = zext <8 x i8> %arg.14 to <8 x i16>
  %10 = zext <8 x i8> %arg.13 to <8 x i16>
  %11 = zext <8 x i8> %arg.12 to <8 x i16>
  %12 = zext <8 x i8> %arg.11 to <8 x i16>
  %13 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.10) #12
  %14 = add nuw nsw <8 x i16> %11, %12
  %15 = add nuw nsw <8 x i16> %14, %10
  %16 = add nuw nsw <8 x i16> %15, %9
  %17 = add <8 x i16> %16, %13
  %18 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %8, <8 x i16> %17) #12
  %19 = zext <8 x i8> %arg.9 to <8 x i16>
  %20 = zext <8 x i8> %arg.8 to <8 x i16>
  %21 = zext <8 x i8> %arg.7 to <8 x i16>
  %22 = zext <8 x i8> %arg.6 to <8 x i16>
  %23 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.5) #12
  %24 = add nuw nsw <8 x i16> %21, %22
  %25 = add nuw nsw <8 x i16> %24, %20
  %26 = add nuw nsw <8 x i16> %25, %19
  %27 = add <8 x i16> %26, %23
  %28 = shl <8 x i16> %27, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %29 = zext <8 x i8> %arg.4 to <8 x i16>
  %30 = zext <8 x i8> %arg.3 to <8 x i16>
  %31 = zext <8 x i8> %arg.2 to <8 x i16>
  %32 = zext <8 x i8> %arg.1 to <8 x i16>
  %33 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  %34 = add nuw nsw <8 x i16> %31, %32
  %35 = add nuw nsw <8 x i16> %34, %30
  %36 = add nuw nsw <8 x i16> %35, %29
  %37 = add <8 x i16> %36, %33
  %38 = shl <8 x i16> %37, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %39 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %28, <8 x i16> %38) #12
  %40 = add <8 x i16> %39, %18
  %41 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %40, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %42 = trunc <8 x i16> %41 to <8 x i8>
  ret <8 x i8> %42
}

; Function Attrs: nounwind readnone willreturn
define <8 x i8> @hydride.node.sobel5x5_arm_depth1.45(<8 x i8> %arg, <8 x i8> %arg.1, <8 x i8> %arg.2, <8 x i8> %arg.3, <8 x i8> %arg.4, <8 x i8> %arg.5, <8 x i8> %arg.6, <8 x i8> %arg.7, <8 x i8> %arg.8, <8 x i8> %arg.9, <8 x i8> %arg.10, <8 x i8> %arg.11, <8 x i8> %arg.12, <8 x i8> %arg.13, <8 x i8> %arg.14, <8 x i8> %arg.15, <8 x i8> %arg.16, <8 x i8> %arg.17, <8 x i8> %arg.18, <8 x i8> %arg.19) local_unnamed_addr #14 {
entry:
  %0 = zext <8 x i8> %arg.19 to <8 x i16>
  %1 = zext <8 x i8> %arg.18 to <8 x i16>
  %2 = zext <8 x i8> %arg.17 to <8 x i16>
  %3 = zext <8 x i8> %arg.16 to <8 x i16>
  %4 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.15) #12
  %5 = add nuw nsw <8 x i16> %2, %3
  %6 = add nuw nsw <8 x i16> %5, %1
  %7 = add nuw nsw <8 x i16> %6, %0
  %8 = add <8 x i16> %7, %4
  %9 = zext <8 x i8> %arg.14 to <8 x i16>
  %10 = zext <8 x i8> %arg.13 to <8 x i16>
  %11 = zext <8 x i8> %arg.12 to <8 x i16>
  %12 = zext <8 x i8> %arg.11 to <8 x i16>
  %13 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.10) #12
  %14 = add nuw nsw <8 x i16> %11, %12
  %15 = add nuw nsw <8 x i16> %14, %10
  %16 = add nuw nsw <8 x i16> %15, %9
  %17 = add <8 x i16> %16, %13
  %18 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %8, <8 x i16> %17) #12
  %19 = zext <8 x i8> %arg.9 to <8 x i16>
  %20 = zext <8 x i8> %arg.8 to <8 x i16>
  %21 = zext <8 x i8> %arg.7 to <8 x i16>
  %22 = zext <8 x i8> %arg.6 to <8 x i16>
  %23 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.5) #12
  %24 = add nuw nsw <8 x i16> %21, %22
  %25 = add nuw nsw <8 x i16> %24, %20
  %26 = add nuw nsw <8 x i16> %25, %19
  %27 = add <8 x i16> %26, %23
  %28 = shl <8 x i16> %27, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %29 = zext <8 x i8> %arg.4 to <8 x i16>
  %30 = zext <8 x i8> %arg.3 to <8 x i16>
  %31 = zext <8 x i8> %arg.2 to <8 x i16>
  %32 = zext <8 x i8> %arg.1 to <8 x i16>
  %33 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  %34 = add nuw nsw <8 x i16> %31, %32
  %35 = add nuw nsw <8 x i16> %34, %30
  %36 = add nuw nsw <8 x i16> %35, %29
  %37 = add <8 x i16> %36, %33
  %38 = shl <8 x i16> %37, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %39 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %28, <8 x i16> %38) #12
  %40 = add <8 x i16> %39, %18
  %41 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %40, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %42 = trunc <8 x i16> %41 to <8 x i8>
  ret <8 x i8> %42
}

; Function Attrs: nounwind readnone willreturn
define <8 x i8> @hydride.node.sobel5x5_arm_depth1.46(<8 x i8> %arg, <8 x i8> %arg.1, <8 x i8> %arg.2, <8 x i8> %arg.3, <8 x i8> %arg.4, <8 x i8> %arg.5, <8 x i8> %arg.6, <8 x i8> %arg.7, <8 x i8> %arg.8, <8 x i8> %arg.9, <8 x i8> %arg.10, <8 x i8> %arg.11, <8 x i8> %arg.12, <8 x i8> %arg.13, <8 x i8> %arg.14, <8 x i8> %arg.15, <8 x i8> %arg.16, <8 x i8> %arg.17, <8 x i8> %arg.18, <8 x i8> %arg.19) local_unnamed_addr #14 {
entry:
  %0 = zext <8 x i8> %arg.19 to <8 x i16>
  %1 = zext <8 x i8> %arg.18 to <8 x i16>
  %2 = zext <8 x i8> %arg.17 to <8 x i16>
  %3 = zext <8 x i8> %arg.16 to <8 x i16>
  %4 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.15) #12
  %5 = add nuw nsw <8 x i16> %2, %3
  %6 = add nuw nsw <8 x i16> %5, %1
  %7 = add nuw nsw <8 x i16> %6, %0
  %8 = add <8 x i16> %7, %4
  %9 = zext <8 x i8> %arg.14 to <8 x i16>
  %10 = zext <8 x i8> %arg.13 to <8 x i16>
  %11 = zext <8 x i8> %arg.12 to <8 x i16>
  %12 = zext <8 x i8> %arg.11 to <8 x i16>
  %13 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.10) #12
  %14 = add nuw nsw <8 x i16> %11, %12
  %15 = add nuw nsw <8 x i16> %14, %10
  %16 = add nuw nsw <8 x i16> %15, %9
  %17 = add <8 x i16> %16, %13
  %18 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %8, <8 x i16> %17) #12
  %19 = zext <8 x i8> %arg.9 to <8 x i16>
  %20 = zext <8 x i8> %arg.8 to <8 x i16>
  %21 = zext <8 x i8> %arg.7 to <8 x i16>
  %22 = zext <8 x i8> %arg.6 to <8 x i16>
  %23 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.5) #12
  %24 = add nuw nsw <8 x i16> %21, %22
  %25 = add nuw nsw <8 x i16> %24, %20
  %26 = add nuw nsw <8 x i16> %25, %19
  %27 = add <8 x i16> %26, %23
  %28 = shl <8 x i16> %27, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %29 = zext <8 x i8> %arg.4 to <8 x i16>
  %30 = zext <8 x i8> %arg.3 to <8 x i16>
  %31 = zext <8 x i8> %arg.2 to <8 x i16>
  %32 = zext <8 x i8> %arg.1 to <8 x i16>
  %33 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  %34 = add nuw nsw <8 x i16> %31, %32
  %35 = add nuw nsw <8 x i16> %34, %30
  %36 = add nuw nsw <8 x i16> %35, %29
  %37 = add <8 x i16> %36, %33
  %38 = shl <8 x i16> %37, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %39 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %28, <8 x i16> %38) #12
  %40 = add <8 x i16> %39, %18
  %41 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %40, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %42 = trunc <8 x i16> %41 to <8 x i8>
  ret <8 x i8> %42
}

; Function Attrs: norecurse nounwind readnone willreturn
define <16 x i8> @hydride.node.sobel5x5_arm_depth1.47(<16 x i8> %arg, <16 x i8> %arg.1) local_unnamed_addr #13 {
entry:
  %0 = add <16 x i8> %arg.1, %arg
  ret <16 x i8> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i8> @hydride.node.sobel5x5_arm_depth1.48(<8 x i8> %arg, <8 x i8> %arg.1, <8 x i8> %arg.2, <8 x i8> %arg.3, <8 x i8> %arg.4, <8 x i8> %arg.5, <8 x i8> %arg.6, <8 x i8> %arg.7, <8 x i8> %arg.8, <8 x i8> %arg.9, <8 x i8> %arg.10, <8 x i8> %arg.11, <8 x i8> %arg.12, <8 x i8> %arg.13, <8 x i8> %arg.14, <8 x i8> %arg.15, <8 x i8> %arg.16, <8 x i8> %arg.17, <8 x i8> %arg.18, <8 x i8> %arg.19) local_unnamed_addr #14 {
entry:
  %0 = zext <8 x i8> %arg.19 to <8 x i16>
  %1 = zext <8 x i8> %arg.18 to <8 x i16>
  %2 = zext <8 x i8> %arg.17 to <8 x i16>
  %3 = zext <8 x i8> %arg.16 to <8 x i16>
  %4 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.15) #12
  %5 = add nuw nsw <8 x i16> %2, %3
  %6 = add nuw nsw <8 x i16> %5, %1
  %7 = add nuw nsw <8 x i16> %6, %0
  %8 = add <8 x i16> %7, %4
  %9 = zext <8 x i8> %arg.14 to <8 x i16>
  %10 = zext <8 x i8> %arg.13 to <8 x i16>
  %11 = zext <8 x i8> %arg.12 to <8 x i16>
  %12 = zext <8 x i8> %arg.11 to <8 x i16>
  %13 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.10) #12
  %14 = add nuw nsw <8 x i16> %11, %12
  %15 = add nuw nsw <8 x i16> %14, %10
  %16 = add nuw nsw <8 x i16> %15, %9
  %17 = add <8 x i16> %16, %13
  %18 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %8, <8 x i16> %17) #12
  %19 = zext <8 x i8> %arg.9 to <8 x i16>
  %20 = zext <8 x i8> %arg.8 to <8 x i16>
  %21 = zext <8 x i8> %arg.7 to <8 x i16>
  %22 = zext <8 x i8> %arg.6 to <8 x i16>
  %23 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.5) #12
  %24 = add nuw nsw <8 x i16> %21, %22
  %25 = add nuw nsw <8 x i16> %24, %20
  %26 = add nuw nsw <8 x i16> %25, %19
  %27 = add <8 x i16> %26, %23
  %28 = shl <8 x i16> %27, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %29 = zext <8 x i8> %arg.4 to <8 x i16>
  %30 = zext <8 x i8> %arg.3 to <8 x i16>
  %31 = zext <8 x i8> %arg.2 to <8 x i16>
  %32 = zext <8 x i8> %arg.1 to <8 x i16>
  %33 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  %34 = add nuw nsw <8 x i16> %31, %32
  %35 = add nuw nsw <8 x i16> %34, %30
  %36 = add nuw nsw <8 x i16> %35, %29
  %37 = add <8 x i16> %36, %33
  %38 = shl <8 x i16> %37, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %39 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %28, <8 x i16> %38) #12
  %40 = add <8 x i16> %39, %18
  %41 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %40, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %42 = trunc <8 x i16> %41 to <8 x i8>
  ret <8 x i8> %42
}

; Function Attrs: nounwind readnone willreturn
define <8 x i8> @hydride.node.sobel5x5_arm_depth1.49(<8 x i8> %arg, <8 x i8> %arg.1, <8 x i8> %arg.2, <8 x i8> %arg.3, <8 x i8> %arg.4, <8 x i8> %arg.5, <8 x i8> %arg.6, <8 x i8> %arg.7, <8 x i8> %arg.8, <8 x i8> %arg.9, <8 x i8> %arg.10, <8 x i8> %arg.11, <8 x i8> %arg.12, <8 x i8> %arg.13, <8 x i8> %arg.14, <8 x i8> %arg.15, <8 x i8> %arg.16, <8 x i8> %arg.17, <8 x i8> %arg.18, <8 x i8> %arg.19) local_unnamed_addr #14 {
entry:
  %0 = zext <8 x i8> %arg.19 to <8 x i16>
  %1 = zext <8 x i8> %arg.18 to <8 x i16>
  %2 = zext <8 x i8> %arg.17 to <8 x i16>
  %3 = zext <8 x i8> %arg.16 to <8 x i16>
  %4 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.15) #12
  %5 = add nuw nsw <8 x i16> %2, %3
  %6 = add nuw nsw <8 x i16> %5, %1
  %7 = add nuw nsw <8 x i16> %6, %0
  %8 = add <8 x i16> %7, %4
  %9 = zext <8 x i8> %arg.14 to <8 x i16>
  %10 = zext <8 x i8> %arg.13 to <8 x i16>
  %11 = zext <8 x i8> %arg.12 to <8 x i16>
  %12 = zext <8 x i8> %arg.11 to <8 x i16>
  %13 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.10) #12
  %14 = add nuw nsw <8 x i16> %11, %12
  %15 = add nuw nsw <8 x i16> %14, %10
  %16 = add nuw nsw <8 x i16> %15, %9
  %17 = add <8 x i16> %16, %13
  %18 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %8, <8 x i16> %17) #12
  %19 = zext <8 x i8> %arg.9 to <8 x i16>
  %20 = zext <8 x i8> %arg.8 to <8 x i16>
  %21 = zext <8 x i8> %arg.7 to <8 x i16>
  %22 = zext <8 x i8> %arg.6 to <8 x i16>
  %23 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.5) #12
  %24 = add nuw nsw <8 x i16> %21, %22
  %25 = add nuw nsw <8 x i16> %24, %20
  %26 = add nuw nsw <8 x i16> %25, %19
  %27 = add <8 x i16> %26, %23
  %28 = shl <8 x i16> %27, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %29 = zext <8 x i8> %arg.4 to <8 x i16>
  %30 = zext <8 x i8> %arg.3 to <8 x i16>
  %31 = zext <8 x i8> %arg.2 to <8 x i16>
  %32 = zext <8 x i8> %arg.1 to <8 x i16>
  %33 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  %34 = add nuw nsw <8 x i16> %31, %32
  %35 = add nuw nsw <8 x i16> %34, %30
  %36 = add nuw nsw <8 x i16> %35, %29
  %37 = add <8 x i16> %36, %33
  %38 = shl <8 x i16> %37, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %39 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %28, <8 x i16> %38) #12
  %40 = add <8 x i16> %39, %18
  %41 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %40, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %42 = trunc <8 x i16> %41 to <8 x i8>
  ret <8 x i8> %42
}

; Function Attrs: nounwind readnone willreturn
define <8 x i8> @hydride.node.sobel5x5_arm_depth1.50(<8 x i8> %arg, <8 x i8> %arg.1, <8 x i8> %arg.2, <8 x i8> %arg.3, <8 x i8> %arg.4, <8 x i8> %arg.5, <8 x i8> %arg.6, <8 x i8> %arg.7, <8 x i8> %arg.8, <8 x i8> %arg.9, <8 x i8> %arg.10, <8 x i8> %arg.11, <8 x i8> %arg.12, <8 x i8> %arg.13, <8 x i8> %arg.14, <8 x i8> %arg.15, <8 x i8> %arg.16, <8 x i8> %arg.17, <8 x i8> %arg.18, <8 x i8> %arg.19) local_unnamed_addr #14 {
entry:
  %0 = zext <8 x i8> %arg.19 to <8 x i16>
  %1 = zext <8 x i8> %arg.18 to <8 x i16>
  %2 = zext <8 x i8> %arg.17 to <8 x i16>
  %3 = zext <8 x i8> %arg.16 to <8 x i16>
  %4 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.15) #12
  %5 = add nuw nsw <8 x i16> %2, %3
  %6 = add nuw nsw <8 x i16> %5, %1
  %7 = add nuw nsw <8 x i16> %6, %0
  %8 = add <8 x i16> %7, %4
  %9 = zext <8 x i8> %arg.14 to <8 x i16>
  %10 = zext <8 x i8> %arg.13 to <8 x i16>
  %11 = zext <8 x i8> %arg.12 to <8 x i16>
  %12 = zext <8 x i8> %arg.11 to <8 x i16>
  %13 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.10) #12
  %14 = add nuw nsw <8 x i16> %11, %12
  %15 = add nuw nsw <8 x i16> %14, %10
  %16 = add nuw nsw <8 x i16> %15, %9
  %17 = add <8 x i16> %16, %13
  %18 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %8, <8 x i16> %17) #12
  %19 = zext <8 x i8> %arg.9 to <8 x i16>
  %20 = zext <8 x i8> %arg.8 to <8 x i16>
  %21 = zext <8 x i8> %arg.7 to <8 x i16>
  %22 = zext <8 x i8> %arg.6 to <8 x i16>
  %23 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.5) #12
  %24 = add nuw nsw <8 x i16> %21, %22
  %25 = add nuw nsw <8 x i16> %24, %20
  %26 = add nuw nsw <8 x i16> %25, %19
  %27 = add <8 x i16> %26, %23
  %28 = shl <8 x i16> %27, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %29 = zext <8 x i8> %arg.4 to <8 x i16>
  %30 = zext <8 x i8> %arg.3 to <8 x i16>
  %31 = zext <8 x i8> %arg.2 to <8 x i16>
  %32 = zext <8 x i8> %arg.1 to <8 x i16>
  %33 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  %34 = add nuw nsw <8 x i16> %31, %32
  %35 = add nuw nsw <8 x i16> %34, %30
  %36 = add nuw nsw <8 x i16> %35, %29
  %37 = add <8 x i16> %36, %33
  %38 = shl <8 x i16> %37, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %39 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %28, <8 x i16> %38) #12
  %40 = add <8 x i16> %39, %18
  %41 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %40, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %42 = trunc <8 x i16> %41 to <8 x i8>
  ret <8 x i8> %42
}

; Function Attrs: nounwind readnone willreturn
define <8 x i8> @hydride.node.sobel5x5_arm_depth1.51(<8 x i8> %arg, <8 x i8> %arg.1, <8 x i8> %arg.2, <8 x i8> %arg.3, <8 x i8> %arg.4, <8 x i8> %arg.5, <8 x i8> %arg.6, <8 x i8> %arg.7, <8 x i8> %arg.8, <8 x i8> %arg.9, <8 x i8> %arg.10, <8 x i8> %arg.11, <8 x i8> %arg.12, <8 x i8> %arg.13, <8 x i8> %arg.14, <8 x i8> %arg.15, <8 x i8> %arg.16, <8 x i8> %arg.17, <8 x i8> %arg.18, <8 x i8> %arg.19) local_unnamed_addr #14 {
entry:
  %0 = zext <8 x i8> %arg.19 to <8 x i16>
  %1 = zext <8 x i8> %arg.18 to <8 x i16>
  %2 = zext <8 x i8> %arg.17 to <8 x i16>
  %3 = zext <8 x i8> %arg.16 to <8 x i16>
  %4 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.15) #12
  %5 = add nuw nsw <8 x i16> %2, %3
  %6 = add nuw nsw <8 x i16> %5, %1
  %7 = add nuw nsw <8 x i16> %6, %0
  %8 = add <8 x i16> %7, %4
  %9 = zext <8 x i8> %arg.14 to <8 x i16>
  %10 = zext <8 x i8> %arg.13 to <8 x i16>
  %11 = zext <8 x i8> %arg.12 to <8 x i16>
  %12 = zext <8 x i8> %arg.11 to <8 x i16>
  %13 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.10) #12
  %14 = add nuw nsw <8 x i16> %11, %12
  %15 = add nuw nsw <8 x i16> %14, %10
  %16 = add nuw nsw <8 x i16> %15, %9
  %17 = add <8 x i16> %16, %13
  %18 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %8, <8 x i16> %17) #12
  %19 = zext <8 x i8> %arg.9 to <8 x i16>
  %20 = zext <8 x i8> %arg.8 to <8 x i16>
  %21 = zext <8 x i8> %arg.7 to <8 x i16>
  %22 = zext <8 x i8> %arg.6 to <8 x i16>
  %23 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.5) #12
  %24 = add nuw nsw <8 x i16> %21, %22
  %25 = add nuw nsw <8 x i16> %24, %20
  %26 = add nuw nsw <8 x i16> %25, %19
  %27 = add <8 x i16> %26, %23
  %28 = shl <8 x i16> %27, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %29 = zext <8 x i8> %arg.4 to <8 x i16>
  %30 = zext <8 x i8> %arg.3 to <8 x i16>
  %31 = zext <8 x i8> %arg.2 to <8 x i16>
  %32 = zext <8 x i8> %arg.1 to <8 x i16>
  %33 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  %34 = add nuw nsw <8 x i16> %31, %32
  %35 = add nuw nsw <8 x i16> %34, %30
  %36 = add nuw nsw <8 x i16> %35, %29
  %37 = add <8 x i16> %36, %33
  %38 = shl <8 x i16> %37, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %39 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %28, <8 x i16> %38) #12
  %40 = add <8 x i16> %39, %18
  %41 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %40, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %42 = trunc <8 x i16> %41 to <8 x i8>
  ret <8 x i8> %42
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.52(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.53(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.54(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.55(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.56(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.57(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.58(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.59(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.60(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.61(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.62(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.63(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.64(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.65(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.66(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.67(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.68(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.69(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.70(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.71(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.72(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.73(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.74(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.75(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.76(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.77(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.78(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.79(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.80(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.81(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.82(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.83(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: norecurse nounwind readnone willreturn
define <16 x i8> @hydride.node.sobel5x5_arm_depth1.84(<16 x i8> %arg, <16 x i8> %arg.1) local_unnamed_addr #13 {
entry:
  %0 = add <16 x i8> %arg.1, %arg
  ret <16 x i8> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i8> @hydride.node.sobel5x5_arm_depth1.85(<8 x i8> %arg, <8 x i8> %arg.1, <8 x i8> %arg.2, <8 x i8> %arg.3, <8 x i8> %arg.4, <8 x i8> %arg.5, <8 x i8> %arg.6, <8 x i8> %arg.7, <8 x i8> %arg.8, <8 x i8> %arg.9, <8 x i8> %arg.10, <8 x i8> %arg.11, <8 x i8> %arg.12, <8 x i8> %arg.13, <8 x i8> %arg.14, <8 x i8> %arg.15, <8 x i8> %arg.16, <8 x i8> %arg.17, <8 x i8> %arg.18, <8 x i8> %arg.19) local_unnamed_addr #14 {
entry:
  %0 = zext <8 x i8> %arg.19 to <8 x i16>
  %1 = zext <8 x i8> %arg.18 to <8 x i16>
  %2 = zext <8 x i8> %arg.17 to <8 x i16>
  %3 = zext <8 x i8> %arg.16 to <8 x i16>
  %4 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.15) #12
  %5 = add nuw nsw <8 x i16> %2, %3
  %6 = add nuw nsw <8 x i16> %5, %1
  %7 = add nuw nsw <8 x i16> %6, %0
  %8 = add <8 x i16> %7, %4
  %9 = zext <8 x i8> %arg.14 to <8 x i16>
  %10 = zext <8 x i8> %arg.13 to <8 x i16>
  %11 = zext <8 x i8> %arg.12 to <8 x i16>
  %12 = zext <8 x i8> %arg.11 to <8 x i16>
  %13 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.10) #12
  %14 = add nuw nsw <8 x i16> %11, %12
  %15 = add nuw nsw <8 x i16> %14, %10
  %16 = add nuw nsw <8 x i16> %15, %9
  %17 = add <8 x i16> %16, %13
  %18 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %8, <8 x i16> %17) #12
  %19 = zext <8 x i8> %arg.9 to <8 x i16>
  %20 = zext <8 x i8> %arg.8 to <8 x i16>
  %21 = zext <8 x i8> %arg.7 to <8 x i16>
  %22 = zext <8 x i8> %arg.6 to <8 x i16>
  %23 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.5) #12
  %24 = add nuw nsw <8 x i16> %21, %22
  %25 = add nuw nsw <8 x i16> %24, %20
  %26 = add nuw nsw <8 x i16> %25, %19
  %27 = add <8 x i16> %26, %23
  %28 = shl <8 x i16> %27, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %29 = zext <8 x i8> %arg.4 to <8 x i16>
  %30 = zext <8 x i8> %arg.3 to <8 x i16>
  %31 = zext <8 x i8> %arg.2 to <8 x i16>
  %32 = zext <8 x i8> %arg.1 to <8 x i16>
  %33 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  %34 = add nuw nsw <8 x i16> %31, %32
  %35 = add nuw nsw <8 x i16> %34, %30
  %36 = add nuw nsw <8 x i16> %35, %29
  %37 = add <8 x i16> %36, %33
  %38 = shl <8 x i16> %37, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %39 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %28, <8 x i16> %38) #12
  %40 = add <8 x i16> %39, %18
  %41 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %40, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %42 = trunc <8 x i16> %41 to <8 x i8>
  ret <8 x i8> %42
}

; Function Attrs: nounwind readnone willreturn
define <8 x i8> @hydride.node.sobel5x5_arm_depth1.86(<8 x i8> %arg, <8 x i8> %arg.1, <8 x i8> %arg.2, <8 x i8> %arg.3, <8 x i8> %arg.4, <8 x i8> %arg.5, <8 x i8> %arg.6, <8 x i8> %arg.7, <8 x i8> %arg.8, <8 x i8> %arg.9, <8 x i8> %arg.10, <8 x i8> %arg.11, <8 x i8> %arg.12, <8 x i8> %arg.13, <8 x i8> %arg.14, <8 x i8> %arg.15, <8 x i8> %arg.16, <8 x i8> %arg.17, <8 x i8> %arg.18, <8 x i8> %arg.19) local_unnamed_addr #14 {
entry:
  %0 = zext <8 x i8> %arg.19 to <8 x i16>
  %1 = zext <8 x i8> %arg.18 to <8 x i16>
  %2 = zext <8 x i8> %arg.17 to <8 x i16>
  %3 = zext <8 x i8> %arg.16 to <8 x i16>
  %4 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.15) #12
  %5 = add nuw nsw <8 x i16> %2, %3
  %6 = add nuw nsw <8 x i16> %5, %1
  %7 = add nuw nsw <8 x i16> %6, %0
  %8 = add <8 x i16> %7, %4
  %9 = zext <8 x i8> %arg.14 to <8 x i16>
  %10 = zext <8 x i8> %arg.13 to <8 x i16>
  %11 = zext <8 x i8> %arg.12 to <8 x i16>
  %12 = zext <8 x i8> %arg.11 to <8 x i16>
  %13 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.10) #12
  %14 = add nuw nsw <8 x i16> %11, %12
  %15 = add nuw nsw <8 x i16> %14, %10
  %16 = add nuw nsw <8 x i16> %15, %9
  %17 = add <8 x i16> %16, %13
  %18 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %8, <8 x i16> %17) #12
  %19 = zext <8 x i8> %arg.9 to <8 x i16>
  %20 = zext <8 x i8> %arg.8 to <8 x i16>
  %21 = zext <8 x i8> %arg.7 to <8 x i16>
  %22 = zext <8 x i8> %arg.6 to <8 x i16>
  %23 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.5) #12
  %24 = add nuw nsw <8 x i16> %21, %22
  %25 = add nuw nsw <8 x i16> %24, %20
  %26 = add nuw nsw <8 x i16> %25, %19
  %27 = add <8 x i16> %26, %23
  %28 = shl <8 x i16> %27, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %29 = zext <8 x i8> %arg.4 to <8 x i16>
  %30 = zext <8 x i8> %arg.3 to <8 x i16>
  %31 = zext <8 x i8> %arg.2 to <8 x i16>
  %32 = zext <8 x i8> %arg.1 to <8 x i16>
  %33 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  %34 = add nuw nsw <8 x i16> %31, %32
  %35 = add nuw nsw <8 x i16> %34, %30
  %36 = add nuw nsw <8 x i16> %35, %29
  %37 = add <8 x i16> %36, %33
  %38 = shl <8 x i16> %37, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %39 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %28, <8 x i16> %38) #12
  %40 = add <8 x i16> %39, %18
  %41 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %40, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %42 = trunc <8 x i16> %41 to <8 x i8>
  ret <8 x i8> %42
}

; Function Attrs: nounwind readnone willreturn
define <8 x i8> @hydride.node.sobel5x5_arm_depth1.87(<8 x i8> %arg, <8 x i8> %arg.1, <8 x i8> %arg.2, <8 x i8> %arg.3, <8 x i8> %arg.4, <8 x i8> %arg.5, <8 x i8> %arg.6, <8 x i8> %arg.7, <8 x i8> %arg.8, <8 x i8> %arg.9, <8 x i8> %arg.10, <8 x i8> %arg.11, <8 x i8> %arg.12, <8 x i8> %arg.13, <8 x i8> %arg.14, <8 x i8> %arg.15, <8 x i8> %arg.16, <8 x i8> %arg.17, <8 x i8> %arg.18, <8 x i8> %arg.19) local_unnamed_addr #14 {
entry:
  %0 = zext <8 x i8> %arg.19 to <8 x i16>
  %1 = zext <8 x i8> %arg.18 to <8 x i16>
  %2 = zext <8 x i8> %arg.17 to <8 x i16>
  %3 = zext <8 x i8> %arg.16 to <8 x i16>
  %4 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.15) #12
  %5 = add nuw nsw <8 x i16> %2, %3
  %6 = add nuw nsw <8 x i16> %5, %1
  %7 = add nuw nsw <8 x i16> %6, %0
  %8 = add <8 x i16> %7, %4
  %9 = zext <8 x i8> %arg.14 to <8 x i16>
  %10 = zext <8 x i8> %arg.13 to <8 x i16>
  %11 = zext <8 x i8> %arg.12 to <8 x i16>
  %12 = zext <8 x i8> %arg.11 to <8 x i16>
  %13 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.10) #12
  %14 = add nuw nsw <8 x i16> %11, %12
  %15 = add nuw nsw <8 x i16> %14, %10
  %16 = add nuw nsw <8 x i16> %15, %9
  %17 = add <8 x i16> %16, %13
  %18 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %8, <8 x i16> %17) #12
  %19 = zext <8 x i8> %arg.9 to <8 x i16>
  %20 = zext <8 x i8> %arg.8 to <8 x i16>
  %21 = zext <8 x i8> %arg.7 to <8 x i16>
  %22 = zext <8 x i8> %arg.6 to <8 x i16>
  %23 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.5) #12
  %24 = add nuw nsw <8 x i16> %21, %22
  %25 = add nuw nsw <8 x i16> %24, %20
  %26 = add nuw nsw <8 x i16> %25, %19
  %27 = add <8 x i16> %26, %23
  %28 = shl <8 x i16> %27, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %29 = zext <8 x i8> %arg.4 to <8 x i16>
  %30 = zext <8 x i8> %arg.3 to <8 x i16>
  %31 = zext <8 x i8> %arg.2 to <8 x i16>
  %32 = zext <8 x i8> %arg.1 to <8 x i16>
  %33 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  %34 = add nuw nsw <8 x i16> %31, %32
  %35 = add nuw nsw <8 x i16> %34, %30
  %36 = add nuw nsw <8 x i16> %35, %29
  %37 = add <8 x i16> %36, %33
  %38 = shl <8 x i16> %37, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %39 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %28, <8 x i16> %38) #12
  %40 = add <8 x i16> %39, %18
  %41 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %40, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %42 = trunc <8 x i16> %41 to <8 x i8>
  ret <8 x i8> %42
}

; Function Attrs: nounwind readnone willreturn
define <8 x i8> @hydride.node.sobel5x5_arm_depth1.88(<8 x i8> %arg, <8 x i8> %arg.1, <8 x i8> %arg.2, <8 x i8> %arg.3, <8 x i8> %arg.4, <8 x i8> %arg.5, <8 x i8> %arg.6, <8 x i8> %arg.7, <8 x i8> %arg.8, <8 x i8> %arg.9, <8 x i8> %arg.10, <8 x i8> %arg.11, <8 x i8> %arg.12, <8 x i8> %arg.13, <8 x i8> %arg.14, <8 x i8> %arg.15, <8 x i8> %arg.16, <8 x i8> %arg.17, <8 x i8> %arg.18, <8 x i8> %arg.19) local_unnamed_addr #14 {
entry:
  %0 = zext <8 x i8> %arg.19 to <8 x i16>
  %1 = zext <8 x i8> %arg.18 to <8 x i16>
  %2 = zext <8 x i8> %arg.17 to <8 x i16>
  %3 = zext <8 x i8> %arg.16 to <8 x i16>
  %4 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.15) #12
  %5 = add nuw nsw <8 x i16> %2, %3
  %6 = add nuw nsw <8 x i16> %5, %1
  %7 = add nuw nsw <8 x i16> %6, %0
  %8 = add <8 x i16> %7, %4
  %9 = zext <8 x i8> %arg.14 to <8 x i16>
  %10 = zext <8 x i8> %arg.13 to <8 x i16>
  %11 = zext <8 x i8> %arg.12 to <8 x i16>
  %12 = zext <8 x i8> %arg.11 to <8 x i16>
  %13 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.10) #12
  %14 = add nuw nsw <8 x i16> %11, %12
  %15 = add nuw nsw <8 x i16> %14, %10
  %16 = add nuw nsw <8 x i16> %15, %9
  %17 = add <8 x i16> %16, %13
  %18 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %8, <8 x i16> %17) #12
  %19 = zext <8 x i8> %arg.9 to <8 x i16>
  %20 = zext <8 x i8> %arg.8 to <8 x i16>
  %21 = zext <8 x i8> %arg.7 to <8 x i16>
  %22 = zext <8 x i8> %arg.6 to <8 x i16>
  %23 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.5) #12
  %24 = add nuw nsw <8 x i16> %21, %22
  %25 = add nuw nsw <8 x i16> %24, %20
  %26 = add nuw nsw <8 x i16> %25, %19
  %27 = add <8 x i16> %26, %23
  %28 = shl <8 x i16> %27, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %29 = zext <8 x i8> %arg.4 to <8 x i16>
  %30 = zext <8 x i8> %arg.3 to <8 x i16>
  %31 = zext <8 x i8> %arg.2 to <8 x i16>
  %32 = zext <8 x i8> %arg.1 to <8 x i16>
  %33 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  %34 = add nuw nsw <8 x i16> %31, %32
  %35 = add nuw nsw <8 x i16> %34, %30
  %36 = add nuw nsw <8 x i16> %35, %29
  %37 = add <8 x i16> %36, %33
  %38 = shl <8 x i16> %37, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %39 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %28, <8 x i16> %38) #12
  %40 = add <8 x i16> %39, %18
  %41 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %40, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %42 = trunc <8 x i16> %41 to <8 x i8>
  ret <8 x i8> %42
}

; Function Attrs: norecurse nounwind readnone willreturn
define <16 x i8> @hydride.node.sobel5x5_arm_depth1.89(<16 x i8> %arg, <16 x i8> %arg.1) local_unnamed_addr #13 {
entry:
  %0 = add <16 x i8> %arg.1, %arg
  ret <16 x i8> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i8> @hydride.node.sobel5x5_arm_depth1.90(<8 x i8> %arg, <8 x i8> %arg.1, <8 x i8> %arg.2, <8 x i8> %arg.3, <8 x i8> %arg.4, <8 x i8> %arg.5, <8 x i8> %arg.6, <8 x i8> %arg.7, <8 x i8> %arg.8, <8 x i8> %arg.9, <8 x i8> %arg.10, <8 x i8> %arg.11, <8 x i8> %arg.12, <8 x i8> %arg.13, <8 x i8> %arg.14, <8 x i8> %arg.15, <8 x i8> %arg.16, <8 x i8> %arg.17, <8 x i8> %arg.18, <8 x i8> %arg.19) local_unnamed_addr #14 {
entry:
  %0 = zext <8 x i8> %arg.19 to <8 x i16>
  %1 = zext <8 x i8> %arg.18 to <8 x i16>
  %2 = zext <8 x i8> %arg.17 to <8 x i16>
  %3 = zext <8 x i8> %arg.16 to <8 x i16>
  %4 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.15) #12
  %5 = add nuw nsw <8 x i16> %2, %3
  %6 = add nuw nsw <8 x i16> %5, %1
  %7 = add nuw nsw <8 x i16> %6, %0
  %8 = add <8 x i16> %7, %4
  %9 = zext <8 x i8> %arg.14 to <8 x i16>
  %10 = zext <8 x i8> %arg.13 to <8 x i16>
  %11 = zext <8 x i8> %arg.12 to <8 x i16>
  %12 = zext <8 x i8> %arg.11 to <8 x i16>
  %13 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.10) #12
  %14 = add nuw nsw <8 x i16> %11, %12
  %15 = add nuw nsw <8 x i16> %14, %10
  %16 = add nuw nsw <8 x i16> %15, %9
  %17 = add <8 x i16> %16, %13
  %18 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %8, <8 x i16> %17) #12
  %19 = zext <8 x i8> %arg.9 to <8 x i16>
  %20 = zext <8 x i8> %arg.8 to <8 x i16>
  %21 = zext <8 x i8> %arg.7 to <8 x i16>
  %22 = zext <8 x i8> %arg.6 to <8 x i16>
  %23 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.5) #12
  %24 = add nuw nsw <8 x i16> %21, %22
  %25 = add nuw nsw <8 x i16> %24, %20
  %26 = add nuw nsw <8 x i16> %25, %19
  %27 = add <8 x i16> %26, %23
  %28 = shl <8 x i16> %27, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %29 = zext <8 x i8> %arg.4 to <8 x i16>
  %30 = zext <8 x i8> %arg.3 to <8 x i16>
  %31 = zext <8 x i8> %arg.2 to <8 x i16>
  %32 = zext <8 x i8> %arg.1 to <8 x i16>
  %33 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  %34 = add nuw nsw <8 x i16> %31, %32
  %35 = add nuw nsw <8 x i16> %34, %30
  %36 = add nuw nsw <8 x i16> %35, %29
  %37 = add <8 x i16> %36, %33
  %38 = shl <8 x i16> %37, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %39 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %28, <8 x i16> %38) #12
  %40 = add <8 x i16> %39, %18
  %41 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %40, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %42 = trunc <8 x i16> %41 to <8 x i8>
  ret <8 x i8> %42
}

; Function Attrs: nounwind readnone willreturn
define <8 x i8> @hydride.node.sobel5x5_arm_depth1.91(<8 x i8> %arg, <8 x i8> %arg.1, <8 x i8> %arg.2, <8 x i8> %arg.3, <8 x i8> %arg.4, <8 x i8> %arg.5, <8 x i8> %arg.6, <8 x i8> %arg.7, <8 x i8> %arg.8, <8 x i8> %arg.9, <8 x i8> %arg.10, <8 x i8> %arg.11, <8 x i8> %arg.12, <8 x i8> %arg.13, <8 x i8> %arg.14, <8 x i8> %arg.15, <8 x i8> %arg.16, <8 x i8> %arg.17, <8 x i8> %arg.18, <8 x i8> %arg.19) local_unnamed_addr #14 {
entry:
  %0 = zext <8 x i8> %arg.19 to <8 x i16>
  %1 = zext <8 x i8> %arg.18 to <8 x i16>
  %2 = zext <8 x i8> %arg.17 to <8 x i16>
  %3 = zext <8 x i8> %arg.16 to <8 x i16>
  %4 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.15) #12
  %5 = add nuw nsw <8 x i16> %2, %3
  %6 = add nuw nsw <8 x i16> %5, %1
  %7 = add nuw nsw <8 x i16> %6, %0
  %8 = add <8 x i16> %7, %4
  %9 = zext <8 x i8> %arg.14 to <8 x i16>
  %10 = zext <8 x i8> %arg.13 to <8 x i16>
  %11 = zext <8 x i8> %arg.12 to <8 x i16>
  %12 = zext <8 x i8> %arg.11 to <8 x i16>
  %13 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.10) #12
  %14 = add nuw nsw <8 x i16> %11, %12
  %15 = add nuw nsw <8 x i16> %14, %10
  %16 = add nuw nsw <8 x i16> %15, %9
  %17 = add <8 x i16> %16, %13
  %18 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %8, <8 x i16> %17) #12
  %19 = zext <8 x i8> %arg.9 to <8 x i16>
  %20 = zext <8 x i8> %arg.8 to <8 x i16>
  %21 = zext <8 x i8> %arg.7 to <8 x i16>
  %22 = zext <8 x i8> %arg.6 to <8 x i16>
  %23 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.5) #12
  %24 = add nuw nsw <8 x i16> %21, %22
  %25 = add nuw nsw <8 x i16> %24, %20
  %26 = add nuw nsw <8 x i16> %25, %19
  %27 = add <8 x i16> %26, %23
  %28 = shl <8 x i16> %27, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %29 = zext <8 x i8> %arg.4 to <8 x i16>
  %30 = zext <8 x i8> %arg.3 to <8 x i16>
  %31 = zext <8 x i8> %arg.2 to <8 x i16>
  %32 = zext <8 x i8> %arg.1 to <8 x i16>
  %33 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  %34 = add nuw nsw <8 x i16> %31, %32
  %35 = add nuw nsw <8 x i16> %34, %30
  %36 = add nuw nsw <8 x i16> %35, %29
  %37 = add <8 x i16> %36, %33
  %38 = shl <8 x i16> %37, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %39 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %28, <8 x i16> %38) #12
  %40 = add <8 x i16> %39, %18
  %41 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %40, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %42 = trunc <8 x i16> %41 to <8 x i8>
  ret <8 x i8> %42
}

; Function Attrs: nounwind readnone willreturn
define <8 x i8> @hydride.node.sobel5x5_arm_depth1.92(<8 x i8> %arg, <8 x i8> %arg.1, <8 x i8> %arg.2, <8 x i8> %arg.3, <8 x i8> %arg.4, <8 x i8> %arg.5, <8 x i8> %arg.6, <8 x i8> %arg.7, <8 x i8> %arg.8, <8 x i8> %arg.9, <8 x i8> %arg.10, <8 x i8> %arg.11, <8 x i8> %arg.12, <8 x i8> %arg.13, <8 x i8> %arg.14, <8 x i8> %arg.15, <8 x i8> %arg.16, <8 x i8> %arg.17, <8 x i8> %arg.18, <8 x i8> %arg.19) local_unnamed_addr #14 {
entry:
  %0 = zext <8 x i8> %arg.19 to <8 x i16>
  %1 = zext <8 x i8> %arg.18 to <8 x i16>
  %2 = zext <8 x i8> %arg.17 to <8 x i16>
  %3 = zext <8 x i8> %arg.16 to <8 x i16>
  %4 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.15) #12
  %5 = add nuw nsw <8 x i16> %2, %3
  %6 = add nuw nsw <8 x i16> %5, %1
  %7 = add nuw nsw <8 x i16> %6, %0
  %8 = add <8 x i16> %7, %4
  %9 = zext <8 x i8> %arg.14 to <8 x i16>
  %10 = zext <8 x i8> %arg.13 to <8 x i16>
  %11 = zext <8 x i8> %arg.12 to <8 x i16>
  %12 = zext <8 x i8> %arg.11 to <8 x i16>
  %13 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.10) #12
  %14 = add nuw nsw <8 x i16> %11, %12
  %15 = add nuw nsw <8 x i16> %14, %10
  %16 = add nuw nsw <8 x i16> %15, %9
  %17 = add <8 x i16> %16, %13
  %18 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %8, <8 x i16> %17) #12
  %19 = zext <8 x i8> %arg.9 to <8 x i16>
  %20 = zext <8 x i8> %arg.8 to <8 x i16>
  %21 = zext <8 x i8> %arg.7 to <8 x i16>
  %22 = zext <8 x i8> %arg.6 to <8 x i16>
  %23 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.5) #12
  %24 = add nuw nsw <8 x i16> %21, %22
  %25 = add nuw nsw <8 x i16> %24, %20
  %26 = add nuw nsw <8 x i16> %25, %19
  %27 = add <8 x i16> %26, %23
  %28 = shl <8 x i16> %27, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %29 = zext <8 x i8> %arg.4 to <8 x i16>
  %30 = zext <8 x i8> %arg.3 to <8 x i16>
  %31 = zext <8 x i8> %arg.2 to <8 x i16>
  %32 = zext <8 x i8> %arg.1 to <8 x i16>
  %33 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  %34 = add nuw nsw <8 x i16> %31, %32
  %35 = add nuw nsw <8 x i16> %34, %30
  %36 = add nuw nsw <8 x i16> %35, %29
  %37 = add <8 x i16> %36, %33
  %38 = shl <8 x i16> %37, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %39 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %28, <8 x i16> %38) #12
  %40 = add <8 x i16> %39, %18
  %41 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %40, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %42 = trunc <8 x i16> %41 to <8 x i8>
  ret <8 x i8> %42
}

; Function Attrs: nounwind readnone willreturn
define <8 x i8> @hydride.node.sobel5x5_arm_depth1.93(<8 x i8> %arg, <8 x i8> %arg.1, <8 x i8> %arg.2, <8 x i8> %arg.3, <8 x i8> %arg.4, <8 x i8> %arg.5, <8 x i8> %arg.6, <8 x i8> %arg.7, <8 x i8> %arg.8, <8 x i8> %arg.9, <8 x i8> %arg.10, <8 x i8> %arg.11, <8 x i8> %arg.12, <8 x i8> %arg.13, <8 x i8> %arg.14, <8 x i8> %arg.15, <8 x i8> %arg.16, <8 x i8> %arg.17, <8 x i8> %arg.18, <8 x i8> %arg.19) local_unnamed_addr #14 {
entry:
  %0 = zext <8 x i8> %arg.19 to <8 x i16>
  %1 = zext <8 x i8> %arg.18 to <8 x i16>
  %2 = zext <8 x i8> %arg.17 to <8 x i16>
  %3 = zext <8 x i8> %arg.16 to <8 x i16>
  %4 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.15) #12
  %5 = add nuw nsw <8 x i16> %2, %3
  %6 = add nuw nsw <8 x i16> %5, %1
  %7 = add nuw nsw <8 x i16> %6, %0
  %8 = add <8 x i16> %7, %4
  %9 = zext <8 x i8> %arg.14 to <8 x i16>
  %10 = zext <8 x i8> %arg.13 to <8 x i16>
  %11 = zext <8 x i8> %arg.12 to <8 x i16>
  %12 = zext <8 x i8> %arg.11 to <8 x i16>
  %13 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.10) #12
  %14 = add nuw nsw <8 x i16> %11, %12
  %15 = add nuw nsw <8 x i16> %14, %10
  %16 = add nuw nsw <8 x i16> %15, %9
  %17 = add <8 x i16> %16, %13
  %18 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %8, <8 x i16> %17) #12
  %19 = zext <8 x i8> %arg.9 to <8 x i16>
  %20 = zext <8 x i8> %arg.8 to <8 x i16>
  %21 = zext <8 x i8> %arg.7 to <8 x i16>
  %22 = zext <8 x i8> %arg.6 to <8 x i16>
  %23 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.5) #12
  %24 = add nuw nsw <8 x i16> %21, %22
  %25 = add nuw nsw <8 x i16> %24, %20
  %26 = add nuw nsw <8 x i16> %25, %19
  %27 = add <8 x i16> %26, %23
  %28 = shl <8 x i16> %27, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %29 = zext <8 x i8> %arg.4 to <8 x i16>
  %30 = zext <8 x i8> %arg.3 to <8 x i16>
  %31 = zext <8 x i8> %arg.2 to <8 x i16>
  %32 = zext <8 x i8> %arg.1 to <8 x i16>
  %33 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  %34 = add nuw nsw <8 x i16> %31, %32
  %35 = add nuw nsw <8 x i16> %34, %30
  %36 = add nuw nsw <8 x i16> %35, %29
  %37 = add <8 x i16> %36, %33
  %38 = shl <8 x i16> %37, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %39 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %28, <8 x i16> %38) #12
  %40 = add <8 x i16> %39, %18
  %41 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %40, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %42 = trunc <8 x i16> %41 to <8 x i8>
  ret <8 x i8> %42
}

; Function Attrs: norecurse nounwind readnone willreturn
define <16 x i8> @hydride.node.sobel5x5_arm_depth1.94(<16 x i8> %arg, <16 x i8> %arg.1) local_unnamed_addr #13 {
entry:
  %0 = add <16 x i8> %arg.1, %arg
  ret <16 x i8> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i8> @hydride.node.sobel5x5_arm_depth1.95(<8 x i8> %arg, <8 x i8> %arg.1, <8 x i8> %arg.2, <8 x i8> %arg.3, <8 x i8> %arg.4, <8 x i8> %arg.5, <8 x i8> %arg.6, <8 x i8> %arg.7, <8 x i8> %arg.8, <8 x i8> %arg.9, <8 x i8> %arg.10, <8 x i8> %arg.11, <8 x i8> %arg.12, <8 x i8> %arg.13, <8 x i8> %arg.14, <8 x i8> %arg.15, <8 x i8> %arg.16, <8 x i8> %arg.17, <8 x i8> %arg.18, <8 x i8> %arg.19) local_unnamed_addr #14 {
entry:
  %0 = zext <8 x i8> %arg.19 to <8 x i16>
  %1 = zext <8 x i8> %arg.18 to <8 x i16>
  %2 = zext <8 x i8> %arg.17 to <8 x i16>
  %3 = zext <8 x i8> %arg.16 to <8 x i16>
  %4 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.15) #12
  %5 = add nuw nsw <8 x i16> %2, %3
  %6 = add nuw nsw <8 x i16> %5, %1
  %7 = add nuw nsw <8 x i16> %6, %0
  %8 = add <8 x i16> %7, %4
  %9 = zext <8 x i8> %arg.14 to <8 x i16>
  %10 = zext <8 x i8> %arg.13 to <8 x i16>
  %11 = zext <8 x i8> %arg.12 to <8 x i16>
  %12 = zext <8 x i8> %arg.11 to <8 x i16>
  %13 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.10) #12
  %14 = add nuw nsw <8 x i16> %11, %12
  %15 = add nuw nsw <8 x i16> %14, %10
  %16 = add nuw nsw <8 x i16> %15, %9
  %17 = add <8 x i16> %16, %13
  %18 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %8, <8 x i16> %17) #12
  %19 = zext <8 x i8> %arg.9 to <8 x i16>
  %20 = zext <8 x i8> %arg.8 to <8 x i16>
  %21 = zext <8 x i8> %arg.7 to <8 x i16>
  %22 = zext <8 x i8> %arg.6 to <8 x i16>
  %23 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.5) #12
  %24 = add nuw nsw <8 x i16> %21, %22
  %25 = add nuw nsw <8 x i16> %24, %20
  %26 = add nuw nsw <8 x i16> %25, %19
  %27 = add <8 x i16> %26, %23
  %28 = shl <8 x i16> %27, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %29 = zext <8 x i8> %arg.4 to <8 x i16>
  %30 = zext <8 x i8> %arg.3 to <8 x i16>
  %31 = zext <8 x i8> %arg.2 to <8 x i16>
  %32 = zext <8 x i8> %arg.1 to <8 x i16>
  %33 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  %34 = add nuw nsw <8 x i16> %31, %32
  %35 = add nuw nsw <8 x i16> %34, %30
  %36 = add nuw nsw <8 x i16> %35, %29
  %37 = add <8 x i16> %36, %33
  %38 = shl <8 x i16> %37, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %39 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %28, <8 x i16> %38) #12
  %40 = add <8 x i16> %39, %18
  %41 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %40, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %42 = trunc <8 x i16> %41 to <8 x i8>
  ret <8 x i8> %42
}

; Function Attrs: nounwind readnone willreturn
define <8 x i8> @hydride.node.sobel5x5_arm_depth1.96(<8 x i8> %arg, <8 x i8> %arg.1, <8 x i8> %arg.2, <8 x i8> %arg.3, <8 x i8> %arg.4, <8 x i8> %arg.5, <8 x i8> %arg.6, <8 x i8> %arg.7, <8 x i8> %arg.8, <8 x i8> %arg.9, <8 x i8> %arg.10, <8 x i8> %arg.11, <8 x i8> %arg.12, <8 x i8> %arg.13, <8 x i8> %arg.14, <8 x i8> %arg.15, <8 x i8> %arg.16, <8 x i8> %arg.17, <8 x i8> %arg.18, <8 x i8> %arg.19) local_unnamed_addr #14 {
entry:
  %0 = zext <8 x i8> %arg.19 to <8 x i16>
  %1 = zext <8 x i8> %arg.18 to <8 x i16>
  %2 = zext <8 x i8> %arg.17 to <8 x i16>
  %3 = zext <8 x i8> %arg.16 to <8 x i16>
  %4 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.15) #12
  %5 = add nuw nsw <8 x i16> %2, %3
  %6 = add nuw nsw <8 x i16> %5, %1
  %7 = add nuw nsw <8 x i16> %6, %0
  %8 = add <8 x i16> %7, %4
  %9 = zext <8 x i8> %arg.14 to <8 x i16>
  %10 = zext <8 x i8> %arg.13 to <8 x i16>
  %11 = zext <8 x i8> %arg.12 to <8 x i16>
  %12 = zext <8 x i8> %arg.11 to <8 x i16>
  %13 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.10) #12
  %14 = add nuw nsw <8 x i16> %11, %12
  %15 = add nuw nsw <8 x i16> %14, %10
  %16 = add nuw nsw <8 x i16> %15, %9
  %17 = add <8 x i16> %16, %13
  %18 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %8, <8 x i16> %17) #12
  %19 = zext <8 x i8> %arg.9 to <8 x i16>
  %20 = zext <8 x i8> %arg.8 to <8 x i16>
  %21 = zext <8 x i8> %arg.7 to <8 x i16>
  %22 = zext <8 x i8> %arg.6 to <8 x i16>
  %23 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.5) #12
  %24 = add nuw nsw <8 x i16> %21, %22
  %25 = add nuw nsw <8 x i16> %24, %20
  %26 = add nuw nsw <8 x i16> %25, %19
  %27 = add <8 x i16> %26, %23
  %28 = shl <8 x i16> %27, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %29 = zext <8 x i8> %arg.4 to <8 x i16>
  %30 = zext <8 x i8> %arg.3 to <8 x i16>
  %31 = zext <8 x i8> %arg.2 to <8 x i16>
  %32 = zext <8 x i8> %arg.1 to <8 x i16>
  %33 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  %34 = add nuw nsw <8 x i16> %31, %32
  %35 = add nuw nsw <8 x i16> %34, %30
  %36 = add nuw nsw <8 x i16> %35, %29
  %37 = add <8 x i16> %36, %33
  %38 = shl <8 x i16> %37, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %39 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %28, <8 x i16> %38) #12
  %40 = add <8 x i16> %39, %18
  %41 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %40, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %42 = trunc <8 x i16> %41 to <8 x i8>
  ret <8 x i8> %42
}

; Function Attrs: nounwind readnone willreturn
define <8 x i8> @hydride.node.sobel5x5_arm_depth1.97(<8 x i8> %arg, <8 x i8> %arg.1, <8 x i8> %arg.2, <8 x i8> %arg.3, <8 x i8> %arg.4, <8 x i8> %arg.5, <8 x i8> %arg.6, <8 x i8> %arg.7, <8 x i8> %arg.8, <8 x i8> %arg.9, <8 x i8> %arg.10, <8 x i8> %arg.11, <8 x i8> %arg.12, <8 x i8> %arg.13, <8 x i8> %arg.14, <8 x i8> %arg.15, <8 x i8> %arg.16, <8 x i8> %arg.17, <8 x i8> %arg.18, <8 x i8> %arg.19) local_unnamed_addr #14 {
entry:
  %0 = zext <8 x i8> %arg.19 to <8 x i16>
  %1 = zext <8 x i8> %arg.18 to <8 x i16>
  %2 = zext <8 x i8> %arg.17 to <8 x i16>
  %3 = zext <8 x i8> %arg.16 to <8 x i16>
  %4 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.15) #12
  %5 = add nuw nsw <8 x i16> %2, %3
  %6 = add nuw nsw <8 x i16> %5, %1
  %7 = add nuw nsw <8 x i16> %6, %0
  %8 = add <8 x i16> %7, %4
  %9 = zext <8 x i8> %arg.14 to <8 x i16>
  %10 = zext <8 x i8> %arg.13 to <8 x i16>
  %11 = zext <8 x i8> %arg.12 to <8 x i16>
  %12 = zext <8 x i8> %arg.11 to <8 x i16>
  %13 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.10) #12
  %14 = add nuw nsw <8 x i16> %11, %12
  %15 = add nuw nsw <8 x i16> %14, %10
  %16 = add nuw nsw <8 x i16> %15, %9
  %17 = add <8 x i16> %16, %13
  %18 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %8, <8 x i16> %17) #12
  %19 = zext <8 x i8> %arg.9 to <8 x i16>
  %20 = zext <8 x i8> %arg.8 to <8 x i16>
  %21 = zext <8 x i8> %arg.7 to <8 x i16>
  %22 = zext <8 x i8> %arg.6 to <8 x i16>
  %23 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.5) #12
  %24 = add nuw nsw <8 x i16> %21, %22
  %25 = add nuw nsw <8 x i16> %24, %20
  %26 = add nuw nsw <8 x i16> %25, %19
  %27 = add <8 x i16> %26, %23
  %28 = shl <8 x i16> %27, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %29 = zext <8 x i8> %arg.4 to <8 x i16>
  %30 = zext <8 x i8> %arg.3 to <8 x i16>
  %31 = zext <8 x i8> %arg.2 to <8 x i16>
  %32 = zext <8 x i8> %arg.1 to <8 x i16>
  %33 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  %34 = add nuw nsw <8 x i16> %31, %32
  %35 = add nuw nsw <8 x i16> %34, %30
  %36 = add nuw nsw <8 x i16> %35, %29
  %37 = add <8 x i16> %36, %33
  %38 = shl <8 x i16> %37, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %39 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %28, <8 x i16> %38) #12
  %40 = add <8 x i16> %39, %18
  %41 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %40, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %42 = trunc <8 x i16> %41 to <8 x i8>
  ret <8 x i8> %42
}

; Function Attrs: nounwind readnone willreturn
define <8 x i8> @hydride.node.sobel5x5_arm_depth1.98(<8 x i8> %arg, <8 x i8> %arg.1, <8 x i8> %arg.2, <8 x i8> %arg.3, <8 x i8> %arg.4, <8 x i8> %arg.5, <8 x i8> %arg.6, <8 x i8> %arg.7, <8 x i8> %arg.8, <8 x i8> %arg.9, <8 x i8> %arg.10, <8 x i8> %arg.11, <8 x i8> %arg.12, <8 x i8> %arg.13, <8 x i8> %arg.14, <8 x i8> %arg.15, <8 x i8> %arg.16, <8 x i8> %arg.17, <8 x i8> %arg.18, <8 x i8> %arg.19) local_unnamed_addr #14 {
entry:
  %0 = zext <8 x i8> %arg.19 to <8 x i16>
  %1 = zext <8 x i8> %arg.18 to <8 x i16>
  %2 = zext <8 x i8> %arg.17 to <8 x i16>
  %3 = zext <8 x i8> %arg.16 to <8 x i16>
  %4 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.15) #12
  %5 = add nuw nsw <8 x i16> %2, %3
  %6 = add nuw nsw <8 x i16> %5, %1
  %7 = add nuw nsw <8 x i16> %6, %0
  %8 = add <8 x i16> %7, %4
  %9 = zext <8 x i8> %arg.14 to <8 x i16>
  %10 = zext <8 x i8> %arg.13 to <8 x i16>
  %11 = zext <8 x i8> %arg.12 to <8 x i16>
  %12 = zext <8 x i8> %arg.11 to <8 x i16>
  %13 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.10) #12
  %14 = add nuw nsw <8 x i16> %11, %12
  %15 = add nuw nsw <8 x i16> %14, %10
  %16 = add nuw nsw <8 x i16> %15, %9
  %17 = add <8 x i16> %16, %13
  %18 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %8, <8 x i16> %17) #12
  %19 = zext <8 x i8> %arg.9 to <8 x i16>
  %20 = zext <8 x i8> %arg.8 to <8 x i16>
  %21 = zext <8 x i8> %arg.7 to <8 x i16>
  %22 = zext <8 x i8> %arg.6 to <8 x i16>
  %23 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.5) #12
  %24 = add nuw nsw <8 x i16> %21, %22
  %25 = add nuw nsw <8 x i16> %24, %20
  %26 = add nuw nsw <8 x i16> %25, %19
  %27 = add <8 x i16> %26, %23
  %28 = shl <8 x i16> %27, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %29 = zext <8 x i8> %arg.4 to <8 x i16>
  %30 = zext <8 x i8> %arg.3 to <8 x i16>
  %31 = zext <8 x i8> %arg.2 to <8 x i16>
  %32 = zext <8 x i8> %arg.1 to <8 x i16>
  %33 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  %34 = add nuw nsw <8 x i16> %31, %32
  %35 = add nuw nsw <8 x i16> %34, %30
  %36 = add nuw nsw <8 x i16> %35, %29
  %37 = add <8 x i16> %36, %33
  %38 = shl <8 x i16> %37, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %39 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %28, <8 x i16> %38) #12
  %40 = add <8 x i16> %39, %18
  %41 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %40, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %42 = trunc <8 x i16> %41 to <8 x i8>
  ret <8 x i8> %42
}

; Function Attrs: norecurse nounwind readnone willreturn
define <16 x i8> @hydride.node.sobel5x5_arm_depth1.99(<16 x i8> %arg, <16 x i8> %arg.1) local_unnamed_addr #13 {
entry:
  %0 = add <16 x i8> %arg.1, %arg
  ret <16 x i8> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i8> @hydride.node.sobel5x5_arm_depth1.100(<8 x i8> %arg, <8 x i8> %arg.1, <8 x i8> %arg.2, <8 x i8> %arg.3, <8 x i8> %arg.4, <8 x i8> %arg.5, <8 x i8> %arg.6, <8 x i8> %arg.7, <8 x i8> %arg.8, <8 x i8> %arg.9, <8 x i8> %arg.10, <8 x i8> %arg.11, <8 x i8> %arg.12, <8 x i8> %arg.13, <8 x i8> %arg.14, <8 x i8> %arg.15, <8 x i8> %arg.16, <8 x i8> %arg.17, <8 x i8> %arg.18, <8 x i8> %arg.19) local_unnamed_addr #14 {
entry:
  %0 = zext <8 x i8> %arg.19 to <8 x i16>
  %1 = zext <8 x i8> %arg.18 to <8 x i16>
  %2 = zext <8 x i8> %arg.17 to <8 x i16>
  %3 = zext <8 x i8> %arg.16 to <8 x i16>
  %4 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.15) #12
  %5 = add nuw nsw <8 x i16> %2, %3
  %6 = add nuw nsw <8 x i16> %5, %1
  %7 = add nuw nsw <8 x i16> %6, %0
  %8 = add <8 x i16> %7, %4
  %9 = zext <8 x i8> %arg.14 to <8 x i16>
  %10 = zext <8 x i8> %arg.13 to <8 x i16>
  %11 = zext <8 x i8> %arg.12 to <8 x i16>
  %12 = zext <8 x i8> %arg.11 to <8 x i16>
  %13 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.10) #12
  %14 = add nuw nsw <8 x i16> %11, %12
  %15 = add nuw nsw <8 x i16> %14, %10
  %16 = add nuw nsw <8 x i16> %15, %9
  %17 = add <8 x i16> %16, %13
  %18 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %8, <8 x i16> %17) #12
  %19 = zext <8 x i8> %arg.9 to <8 x i16>
  %20 = zext <8 x i8> %arg.8 to <8 x i16>
  %21 = zext <8 x i8> %arg.7 to <8 x i16>
  %22 = zext <8 x i8> %arg.6 to <8 x i16>
  %23 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.5) #12
  %24 = add nuw nsw <8 x i16> %21, %22
  %25 = add nuw nsw <8 x i16> %24, %20
  %26 = add nuw nsw <8 x i16> %25, %19
  %27 = add <8 x i16> %26, %23
  %28 = shl <8 x i16> %27, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %29 = zext <8 x i8> %arg.4 to <8 x i16>
  %30 = zext <8 x i8> %arg.3 to <8 x i16>
  %31 = zext <8 x i8> %arg.2 to <8 x i16>
  %32 = zext <8 x i8> %arg.1 to <8 x i16>
  %33 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  %34 = add nuw nsw <8 x i16> %31, %32
  %35 = add nuw nsw <8 x i16> %34, %30
  %36 = add nuw nsw <8 x i16> %35, %29
  %37 = add <8 x i16> %36, %33
  %38 = shl <8 x i16> %37, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %39 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %28, <8 x i16> %38) #12
  %40 = add <8 x i16> %39, %18
  %41 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %40, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %42 = trunc <8 x i16> %41 to <8 x i8>
  ret <8 x i8> %42
}

; Function Attrs: nounwind readnone willreturn
define <8 x i8> @hydride.node.sobel5x5_arm_depth1.101(<8 x i8> %arg, <8 x i8> %arg.1, <8 x i8> %arg.2, <8 x i8> %arg.3, <8 x i8> %arg.4, <8 x i8> %arg.5, <8 x i8> %arg.6, <8 x i8> %arg.7, <8 x i8> %arg.8, <8 x i8> %arg.9, <8 x i8> %arg.10, <8 x i8> %arg.11, <8 x i8> %arg.12, <8 x i8> %arg.13, <8 x i8> %arg.14, <8 x i8> %arg.15, <8 x i8> %arg.16, <8 x i8> %arg.17, <8 x i8> %arg.18, <8 x i8> %arg.19) local_unnamed_addr #14 {
entry:
  %0 = zext <8 x i8> %arg.19 to <8 x i16>
  %1 = zext <8 x i8> %arg.18 to <8 x i16>
  %2 = zext <8 x i8> %arg.17 to <8 x i16>
  %3 = zext <8 x i8> %arg.16 to <8 x i16>
  %4 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.15) #12
  %5 = add nuw nsw <8 x i16> %2, %3
  %6 = add nuw nsw <8 x i16> %5, %1
  %7 = add nuw nsw <8 x i16> %6, %0
  %8 = add <8 x i16> %7, %4
  %9 = zext <8 x i8> %arg.14 to <8 x i16>
  %10 = zext <8 x i8> %arg.13 to <8 x i16>
  %11 = zext <8 x i8> %arg.12 to <8 x i16>
  %12 = zext <8 x i8> %arg.11 to <8 x i16>
  %13 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.10) #12
  %14 = add nuw nsw <8 x i16> %11, %12
  %15 = add nuw nsw <8 x i16> %14, %10
  %16 = add nuw nsw <8 x i16> %15, %9
  %17 = add <8 x i16> %16, %13
  %18 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %8, <8 x i16> %17) #12
  %19 = zext <8 x i8> %arg.9 to <8 x i16>
  %20 = zext <8 x i8> %arg.8 to <8 x i16>
  %21 = zext <8 x i8> %arg.7 to <8 x i16>
  %22 = zext <8 x i8> %arg.6 to <8 x i16>
  %23 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.5) #12
  %24 = add nuw nsw <8 x i16> %21, %22
  %25 = add nuw nsw <8 x i16> %24, %20
  %26 = add nuw nsw <8 x i16> %25, %19
  %27 = add <8 x i16> %26, %23
  %28 = shl <8 x i16> %27, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %29 = zext <8 x i8> %arg.4 to <8 x i16>
  %30 = zext <8 x i8> %arg.3 to <8 x i16>
  %31 = zext <8 x i8> %arg.2 to <8 x i16>
  %32 = zext <8 x i8> %arg.1 to <8 x i16>
  %33 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  %34 = add nuw nsw <8 x i16> %31, %32
  %35 = add nuw nsw <8 x i16> %34, %30
  %36 = add nuw nsw <8 x i16> %35, %29
  %37 = add <8 x i16> %36, %33
  %38 = shl <8 x i16> %37, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %39 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %28, <8 x i16> %38) #12
  %40 = add <8 x i16> %39, %18
  %41 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %40, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %42 = trunc <8 x i16> %41 to <8 x i8>
  ret <8 x i8> %42
}

; Function Attrs: nounwind readnone willreturn
define <8 x i8> @hydride.node.sobel5x5_arm_depth1.102(<8 x i8> %arg, <8 x i8> %arg.1, <8 x i8> %arg.2, <8 x i8> %arg.3, <8 x i8> %arg.4, <8 x i8> %arg.5, <8 x i8> %arg.6, <8 x i8> %arg.7, <8 x i8> %arg.8, <8 x i8> %arg.9, <8 x i8> %arg.10, <8 x i8> %arg.11, <8 x i8> %arg.12, <8 x i8> %arg.13, <8 x i8> %arg.14, <8 x i8> %arg.15, <8 x i8> %arg.16, <8 x i8> %arg.17, <8 x i8> %arg.18, <8 x i8> %arg.19) local_unnamed_addr #14 {
entry:
  %0 = zext <8 x i8> %arg.19 to <8 x i16>
  %1 = zext <8 x i8> %arg.18 to <8 x i16>
  %2 = zext <8 x i8> %arg.17 to <8 x i16>
  %3 = zext <8 x i8> %arg.16 to <8 x i16>
  %4 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.15) #12
  %5 = add nuw nsw <8 x i16> %2, %3
  %6 = add nuw nsw <8 x i16> %5, %1
  %7 = add nuw nsw <8 x i16> %6, %0
  %8 = add <8 x i16> %7, %4
  %9 = zext <8 x i8> %arg.14 to <8 x i16>
  %10 = zext <8 x i8> %arg.13 to <8 x i16>
  %11 = zext <8 x i8> %arg.12 to <8 x i16>
  %12 = zext <8 x i8> %arg.11 to <8 x i16>
  %13 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.10) #12
  %14 = add nuw nsw <8 x i16> %11, %12
  %15 = add nuw nsw <8 x i16> %14, %10
  %16 = add nuw nsw <8 x i16> %15, %9
  %17 = add <8 x i16> %16, %13
  %18 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %8, <8 x i16> %17) #12
  %19 = zext <8 x i8> %arg.9 to <8 x i16>
  %20 = zext <8 x i8> %arg.8 to <8 x i16>
  %21 = zext <8 x i8> %arg.7 to <8 x i16>
  %22 = zext <8 x i8> %arg.6 to <8 x i16>
  %23 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.5) #12
  %24 = add nuw nsw <8 x i16> %21, %22
  %25 = add nuw nsw <8 x i16> %24, %20
  %26 = add nuw nsw <8 x i16> %25, %19
  %27 = add <8 x i16> %26, %23
  %28 = shl <8 x i16> %27, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %29 = zext <8 x i8> %arg.4 to <8 x i16>
  %30 = zext <8 x i8> %arg.3 to <8 x i16>
  %31 = zext <8 x i8> %arg.2 to <8 x i16>
  %32 = zext <8 x i8> %arg.1 to <8 x i16>
  %33 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  %34 = add nuw nsw <8 x i16> %31, %32
  %35 = add nuw nsw <8 x i16> %34, %30
  %36 = add nuw nsw <8 x i16> %35, %29
  %37 = add <8 x i16> %36, %33
  %38 = shl <8 x i16> %37, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %39 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %28, <8 x i16> %38) #12
  %40 = add <8 x i16> %39, %18
  %41 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %40, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %42 = trunc <8 x i16> %41 to <8 x i8>
  ret <8 x i8> %42
}

; Function Attrs: nounwind readnone willreturn
define <8 x i8> @hydride.node.sobel5x5_arm_depth1.103(<8 x i8> %arg, <8 x i8> %arg.1, <8 x i8> %arg.2, <8 x i8> %arg.3, <8 x i8> %arg.4, <8 x i8> %arg.5, <8 x i8> %arg.6, <8 x i8> %arg.7, <8 x i8> %arg.8, <8 x i8> %arg.9, <8 x i8> %arg.10, <8 x i8> %arg.11, <8 x i8> %arg.12, <8 x i8> %arg.13, <8 x i8> %arg.14, <8 x i8> %arg.15, <8 x i8> %arg.16, <8 x i8> %arg.17, <8 x i8> %arg.18, <8 x i8> %arg.19) local_unnamed_addr #14 {
entry:
  %0 = zext <8 x i8> %arg.19 to <8 x i16>
  %1 = zext <8 x i8> %arg.18 to <8 x i16>
  %2 = zext <8 x i8> %arg.17 to <8 x i16>
  %3 = zext <8 x i8> %arg.16 to <8 x i16>
  %4 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.15) #12
  %5 = add nuw nsw <8 x i16> %2, %3
  %6 = add nuw nsw <8 x i16> %5, %1
  %7 = add nuw nsw <8 x i16> %6, %0
  %8 = add <8 x i16> %7, %4
  %9 = zext <8 x i8> %arg.14 to <8 x i16>
  %10 = zext <8 x i8> %arg.13 to <8 x i16>
  %11 = zext <8 x i8> %arg.12 to <8 x i16>
  %12 = zext <8 x i8> %arg.11 to <8 x i16>
  %13 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.10) #12
  %14 = add nuw nsw <8 x i16> %11, %12
  %15 = add nuw nsw <8 x i16> %14, %10
  %16 = add nuw nsw <8 x i16> %15, %9
  %17 = add <8 x i16> %16, %13
  %18 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %8, <8 x i16> %17) #12
  %19 = zext <8 x i8> %arg.9 to <8 x i16>
  %20 = zext <8 x i8> %arg.8 to <8 x i16>
  %21 = zext <8 x i8> %arg.7 to <8 x i16>
  %22 = zext <8 x i8> %arg.6 to <8 x i16>
  %23 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.5) #12
  %24 = add nuw nsw <8 x i16> %21, %22
  %25 = add nuw nsw <8 x i16> %24, %20
  %26 = add nuw nsw <8 x i16> %25, %19
  %27 = add <8 x i16> %26, %23
  %28 = shl <8 x i16> %27, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %29 = zext <8 x i8> %arg.4 to <8 x i16>
  %30 = zext <8 x i8> %arg.3 to <8 x i16>
  %31 = zext <8 x i8> %arg.2 to <8 x i16>
  %32 = zext <8 x i8> %arg.1 to <8 x i16>
  %33 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  %34 = add nuw nsw <8 x i16> %31, %32
  %35 = add nuw nsw <8 x i16> %34, %30
  %36 = add nuw nsw <8 x i16> %35, %29
  %37 = add <8 x i16> %36, %33
  %38 = shl <8 x i16> %37, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %39 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %28, <8 x i16> %38) #12
  %40 = add <8 x i16> %39, %18
  %41 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %40, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %42 = trunc <8 x i16> %41 to <8 x i8>
  ret <8 x i8> %42
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.104(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.105(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.106(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.107(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.108(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.109(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.110(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.111(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.112(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.113(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.114(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.115(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.116(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.117(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.118(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.119(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.120(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.121(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.122(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.123(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.124(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.125(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.126(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.127(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.128(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.129(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.130(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.131(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.132(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.133(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.134(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.135(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: norecurse nounwind readnone willreturn
define <16 x i8> @hydride.node.sobel5x5_arm_depth1.136(<16 x i8> %arg, <16 x i8> %arg.1) local_unnamed_addr #13 {
entry:
  %0 = add <16 x i8> %arg.1, %arg
  ret <16 x i8> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i8> @hydride.node.sobel5x5_arm_depth1.137(<8 x i8> %arg, <8 x i8> %arg.1, <8 x i8> %arg.2, <8 x i8> %arg.3, <8 x i8> %arg.4, <8 x i8> %arg.5, <8 x i8> %arg.6, <8 x i8> %arg.7, <8 x i8> %arg.8, <8 x i8> %arg.9, <8 x i8> %arg.10, <8 x i8> %arg.11, <8 x i8> %arg.12, <8 x i8> %arg.13, <8 x i8> %arg.14, <8 x i8> %arg.15, <8 x i8> %arg.16, <8 x i8> %arg.17, <8 x i8> %arg.18, <8 x i8> %arg.19) local_unnamed_addr #14 {
entry:
  %0 = zext <8 x i8> %arg.19 to <8 x i16>
  %1 = zext <8 x i8> %arg.18 to <8 x i16>
  %2 = zext <8 x i8> %arg.17 to <8 x i16>
  %3 = zext <8 x i8> %arg.16 to <8 x i16>
  %4 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.15) #12
  %5 = add nuw nsw <8 x i16> %2, %3
  %6 = add nuw nsw <8 x i16> %5, %1
  %7 = add nuw nsw <8 x i16> %6, %0
  %8 = add <8 x i16> %7, %4
  %9 = zext <8 x i8> %arg.14 to <8 x i16>
  %10 = zext <8 x i8> %arg.13 to <8 x i16>
  %11 = zext <8 x i8> %arg.12 to <8 x i16>
  %12 = zext <8 x i8> %arg.11 to <8 x i16>
  %13 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.10) #12
  %14 = add nuw nsw <8 x i16> %11, %12
  %15 = add nuw nsw <8 x i16> %14, %10
  %16 = add nuw nsw <8 x i16> %15, %9
  %17 = add <8 x i16> %16, %13
  %18 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %8, <8 x i16> %17) #12
  %19 = zext <8 x i8> %arg.9 to <8 x i16>
  %20 = zext <8 x i8> %arg.8 to <8 x i16>
  %21 = zext <8 x i8> %arg.7 to <8 x i16>
  %22 = zext <8 x i8> %arg.6 to <8 x i16>
  %23 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.5) #12
  %24 = add nuw nsw <8 x i16> %21, %22
  %25 = add nuw nsw <8 x i16> %24, %20
  %26 = add nuw nsw <8 x i16> %25, %19
  %27 = add <8 x i16> %26, %23
  %28 = shl <8 x i16> %27, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %29 = zext <8 x i8> %arg.4 to <8 x i16>
  %30 = zext <8 x i8> %arg.3 to <8 x i16>
  %31 = zext <8 x i8> %arg.2 to <8 x i16>
  %32 = zext <8 x i8> %arg.1 to <8 x i16>
  %33 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  %34 = add nuw nsw <8 x i16> %31, %32
  %35 = add nuw nsw <8 x i16> %34, %30
  %36 = add nuw nsw <8 x i16> %35, %29
  %37 = add <8 x i16> %36, %33
  %38 = shl <8 x i16> %37, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %39 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %28, <8 x i16> %38) #12
  %40 = add <8 x i16> %39, %18
  %41 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %40, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %42 = trunc <8 x i16> %41 to <8 x i8>
  ret <8 x i8> %42
}

; Function Attrs: nounwind readnone willreturn
define <8 x i8> @hydride.node.sobel5x5_arm_depth1.138(<8 x i8> %arg, <8 x i8> %arg.1, <8 x i8> %arg.2, <8 x i8> %arg.3, <8 x i8> %arg.4, <8 x i8> %arg.5, <8 x i8> %arg.6, <8 x i8> %arg.7, <8 x i8> %arg.8, <8 x i8> %arg.9, <8 x i8> %arg.10, <8 x i8> %arg.11, <8 x i8> %arg.12, <8 x i8> %arg.13, <8 x i8> %arg.14, <8 x i8> %arg.15, <8 x i8> %arg.16, <8 x i8> %arg.17, <8 x i8> %arg.18, <8 x i8> %arg.19) local_unnamed_addr #14 {
entry:
  %0 = zext <8 x i8> %arg.19 to <8 x i16>
  %1 = zext <8 x i8> %arg.18 to <8 x i16>
  %2 = zext <8 x i8> %arg.17 to <8 x i16>
  %3 = zext <8 x i8> %arg.16 to <8 x i16>
  %4 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.15) #12
  %5 = add nuw nsw <8 x i16> %2, %3
  %6 = add nuw nsw <8 x i16> %5, %1
  %7 = add nuw nsw <8 x i16> %6, %0
  %8 = add <8 x i16> %7, %4
  %9 = zext <8 x i8> %arg.14 to <8 x i16>
  %10 = zext <8 x i8> %arg.13 to <8 x i16>
  %11 = zext <8 x i8> %arg.12 to <8 x i16>
  %12 = zext <8 x i8> %arg.11 to <8 x i16>
  %13 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.10) #12
  %14 = add nuw nsw <8 x i16> %11, %12
  %15 = add nuw nsw <8 x i16> %14, %10
  %16 = add nuw nsw <8 x i16> %15, %9
  %17 = add <8 x i16> %16, %13
  %18 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %8, <8 x i16> %17) #12
  %19 = zext <8 x i8> %arg.9 to <8 x i16>
  %20 = zext <8 x i8> %arg.8 to <8 x i16>
  %21 = zext <8 x i8> %arg.7 to <8 x i16>
  %22 = zext <8 x i8> %arg.6 to <8 x i16>
  %23 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.5) #12
  %24 = add nuw nsw <8 x i16> %21, %22
  %25 = add nuw nsw <8 x i16> %24, %20
  %26 = add nuw nsw <8 x i16> %25, %19
  %27 = add <8 x i16> %26, %23
  %28 = shl <8 x i16> %27, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %29 = zext <8 x i8> %arg.4 to <8 x i16>
  %30 = zext <8 x i8> %arg.3 to <8 x i16>
  %31 = zext <8 x i8> %arg.2 to <8 x i16>
  %32 = zext <8 x i8> %arg.1 to <8 x i16>
  %33 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  %34 = add nuw nsw <8 x i16> %31, %32
  %35 = add nuw nsw <8 x i16> %34, %30
  %36 = add nuw nsw <8 x i16> %35, %29
  %37 = add <8 x i16> %36, %33
  %38 = shl <8 x i16> %37, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %39 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %28, <8 x i16> %38) #12
  %40 = add <8 x i16> %39, %18
  %41 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %40, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %42 = trunc <8 x i16> %41 to <8 x i8>
  ret <8 x i8> %42
}

; Function Attrs: nounwind readnone willreturn
define <8 x i8> @hydride.node.sobel5x5_arm_depth1.139(<8 x i8> %arg, <8 x i8> %arg.1, <8 x i8> %arg.2, <8 x i8> %arg.3, <8 x i8> %arg.4, <8 x i8> %arg.5, <8 x i8> %arg.6, <8 x i8> %arg.7, <8 x i8> %arg.8, <8 x i8> %arg.9, <8 x i8> %arg.10, <8 x i8> %arg.11, <8 x i8> %arg.12, <8 x i8> %arg.13, <8 x i8> %arg.14, <8 x i8> %arg.15, <8 x i8> %arg.16, <8 x i8> %arg.17, <8 x i8> %arg.18, <8 x i8> %arg.19) local_unnamed_addr #14 {
entry:
  %0 = zext <8 x i8> %arg.19 to <8 x i16>
  %1 = zext <8 x i8> %arg.18 to <8 x i16>
  %2 = zext <8 x i8> %arg.17 to <8 x i16>
  %3 = zext <8 x i8> %arg.16 to <8 x i16>
  %4 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.15) #12
  %5 = add nuw nsw <8 x i16> %2, %3
  %6 = add nuw nsw <8 x i16> %5, %1
  %7 = add nuw nsw <8 x i16> %6, %0
  %8 = add <8 x i16> %7, %4
  %9 = zext <8 x i8> %arg.14 to <8 x i16>
  %10 = zext <8 x i8> %arg.13 to <8 x i16>
  %11 = zext <8 x i8> %arg.12 to <8 x i16>
  %12 = zext <8 x i8> %arg.11 to <8 x i16>
  %13 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.10) #12
  %14 = add nuw nsw <8 x i16> %11, %12
  %15 = add nuw nsw <8 x i16> %14, %10
  %16 = add nuw nsw <8 x i16> %15, %9
  %17 = add <8 x i16> %16, %13
  %18 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %8, <8 x i16> %17) #12
  %19 = zext <8 x i8> %arg.9 to <8 x i16>
  %20 = zext <8 x i8> %arg.8 to <8 x i16>
  %21 = zext <8 x i8> %arg.7 to <8 x i16>
  %22 = zext <8 x i8> %arg.6 to <8 x i16>
  %23 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.5) #12
  %24 = add nuw nsw <8 x i16> %21, %22
  %25 = add nuw nsw <8 x i16> %24, %20
  %26 = add nuw nsw <8 x i16> %25, %19
  %27 = add <8 x i16> %26, %23
  %28 = shl <8 x i16> %27, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %29 = zext <8 x i8> %arg.4 to <8 x i16>
  %30 = zext <8 x i8> %arg.3 to <8 x i16>
  %31 = zext <8 x i8> %arg.2 to <8 x i16>
  %32 = zext <8 x i8> %arg.1 to <8 x i16>
  %33 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  %34 = add nuw nsw <8 x i16> %31, %32
  %35 = add nuw nsw <8 x i16> %34, %30
  %36 = add nuw nsw <8 x i16> %35, %29
  %37 = add <8 x i16> %36, %33
  %38 = shl <8 x i16> %37, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %39 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %28, <8 x i16> %38) #12
  %40 = add <8 x i16> %39, %18
  %41 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %40, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %42 = trunc <8 x i16> %41 to <8 x i8>
  ret <8 x i8> %42
}

; Function Attrs: nounwind readnone willreturn
define <8 x i8> @hydride.node.sobel5x5_arm_depth1.140(<8 x i8> %arg, <8 x i8> %arg.1, <8 x i8> %arg.2, <8 x i8> %arg.3, <8 x i8> %arg.4, <8 x i8> %arg.5, <8 x i8> %arg.6, <8 x i8> %arg.7, <8 x i8> %arg.8, <8 x i8> %arg.9, <8 x i8> %arg.10, <8 x i8> %arg.11, <8 x i8> %arg.12, <8 x i8> %arg.13, <8 x i8> %arg.14, <8 x i8> %arg.15, <8 x i8> %arg.16, <8 x i8> %arg.17, <8 x i8> %arg.18, <8 x i8> %arg.19) local_unnamed_addr #14 {
entry:
  %0 = zext <8 x i8> %arg.19 to <8 x i16>
  %1 = zext <8 x i8> %arg.18 to <8 x i16>
  %2 = zext <8 x i8> %arg.17 to <8 x i16>
  %3 = zext <8 x i8> %arg.16 to <8 x i16>
  %4 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.15) #12
  %5 = add nuw nsw <8 x i16> %2, %3
  %6 = add nuw nsw <8 x i16> %5, %1
  %7 = add nuw nsw <8 x i16> %6, %0
  %8 = add <8 x i16> %7, %4
  %9 = zext <8 x i8> %arg.14 to <8 x i16>
  %10 = zext <8 x i8> %arg.13 to <8 x i16>
  %11 = zext <8 x i8> %arg.12 to <8 x i16>
  %12 = zext <8 x i8> %arg.11 to <8 x i16>
  %13 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.10) #12
  %14 = add nuw nsw <8 x i16> %11, %12
  %15 = add nuw nsw <8 x i16> %14, %10
  %16 = add nuw nsw <8 x i16> %15, %9
  %17 = add <8 x i16> %16, %13
  %18 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %8, <8 x i16> %17) #12
  %19 = zext <8 x i8> %arg.9 to <8 x i16>
  %20 = zext <8 x i8> %arg.8 to <8 x i16>
  %21 = zext <8 x i8> %arg.7 to <8 x i16>
  %22 = zext <8 x i8> %arg.6 to <8 x i16>
  %23 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.5) #12
  %24 = add nuw nsw <8 x i16> %21, %22
  %25 = add nuw nsw <8 x i16> %24, %20
  %26 = add nuw nsw <8 x i16> %25, %19
  %27 = add <8 x i16> %26, %23
  %28 = shl <8 x i16> %27, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %29 = zext <8 x i8> %arg.4 to <8 x i16>
  %30 = zext <8 x i8> %arg.3 to <8 x i16>
  %31 = zext <8 x i8> %arg.2 to <8 x i16>
  %32 = zext <8 x i8> %arg.1 to <8 x i16>
  %33 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  %34 = add nuw nsw <8 x i16> %31, %32
  %35 = add nuw nsw <8 x i16> %34, %30
  %36 = add nuw nsw <8 x i16> %35, %29
  %37 = add <8 x i16> %36, %33
  %38 = shl <8 x i16> %37, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %39 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %28, <8 x i16> %38) #12
  %40 = add <8 x i16> %39, %18
  %41 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %40, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %42 = trunc <8 x i16> %41 to <8 x i8>
  ret <8 x i8> %42
}

; Function Attrs: norecurse nounwind readnone willreturn
define <16 x i8> @hydride.node.sobel5x5_arm_depth1.141(<16 x i8> %arg, <16 x i8> %arg.1) local_unnamed_addr #13 {
entry:
  %0 = add <16 x i8> %arg.1, %arg
  ret <16 x i8> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i8> @hydride.node.sobel5x5_arm_depth1.142(<8 x i8> %arg, <8 x i8> %arg.1, <8 x i8> %arg.2, <8 x i8> %arg.3, <8 x i8> %arg.4, <8 x i8> %arg.5, <8 x i8> %arg.6, <8 x i8> %arg.7, <8 x i8> %arg.8, <8 x i8> %arg.9, <8 x i8> %arg.10, <8 x i8> %arg.11, <8 x i8> %arg.12, <8 x i8> %arg.13, <8 x i8> %arg.14, <8 x i8> %arg.15, <8 x i8> %arg.16, <8 x i8> %arg.17, <8 x i8> %arg.18, <8 x i8> %arg.19) local_unnamed_addr #14 {
entry:
  %0 = zext <8 x i8> %arg.19 to <8 x i16>
  %1 = zext <8 x i8> %arg.18 to <8 x i16>
  %2 = zext <8 x i8> %arg.17 to <8 x i16>
  %3 = zext <8 x i8> %arg.16 to <8 x i16>
  %4 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.15) #12
  %5 = add nuw nsw <8 x i16> %2, %3
  %6 = add nuw nsw <8 x i16> %5, %1
  %7 = add nuw nsw <8 x i16> %6, %0
  %8 = add <8 x i16> %7, %4
  %9 = zext <8 x i8> %arg.14 to <8 x i16>
  %10 = zext <8 x i8> %arg.13 to <8 x i16>
  %11 = zext <8 x i8> %arg.12 to <8 x i16>
  %12 = zext <8 x i8> %arg.11 to <8 x i16>
  %13 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.10) #12
  %14 = add nuw nsw <8 x i16> %11, %12
  %15 = add nuw nsw <8 x i16> %14, %10
  %16 = add nuw nsw <8 x i16> %15, %9
  %17 = add <8 x i16> %16, %13
  %18 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %8, <8 x i16> %17) #12
  %19 = zext <8 x i8> %arg.9 to <8 x i16>
  %20 = zext <8 x i8> %arg.8 to <8 x i16>
  %21 = zext <8 x i8> %arg.7 to <8 x i16>
  %22 = zext <8 x i8> %arg.6 to <8 x i16>
  %23 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.5) #12
  %24 = add nuw nsw <8 x i16> %21, %22
  %25 = add nuw nsw <8 x i16> %24, %20
  %26 = add nuw nsw <8 x i16> %25, %19
  %27 = add <8 x i16> %26, %23
  %28 = shl <8 x i16> %27, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %29 = zext <8 x i8> %arg.4 to <8 x i16>
  %30 = zext <8 x i8> %arg.3 to <8 x i16>
  %31 = zext <8 x i8> %arg.2 to <8 x i16>
  %32 = zext <8 x i8> %arg.1 to <8 x i16>
  %33 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  %34 = add nuw nsw <8 x i16> %31, %32
  %35 = add nuw nsw <8 x i16> %34, %30
  %36 = add nuw nsw <8 x i16> %35, %29
  %37 = add <8 x i16> %36, %33
  %38 = shl <8 x i16> %37, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %39 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %28, <8 x i16> %38) #12
  %40 = add <8 x i16> %39, %18
  %41 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %40, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %42 = trunc <8 x i16> %41 to <8 x i8>
  ret <8 x i8> %42
}

; Function Attrs: nounwind readnone willreturn
define <8 x i8> @hydride.node.sobel5x5_arm_depth1.143(<8 x i8> %arg, <8 x i8> %arg.1, <8 x i8> %arg.2, <8 x i8> %arg.3, <8 x i8> %arg.4, <8 x i8> %arg.5, <8 x i8> %arg.6, <8 x i8> %arg.7, <8 x i8> %arg.8, <8 x i8> %arg.9, <8 x i8> %arg.10, <8 x i8> %arg.11, <8 x i8> %arg.12, <8 x i8> %arg.13, <8 x i8> %arg.14, <8 x i8> %arg.15, <8 x i8> %arg.16, <8 x i8> %arg.17, <8 x i8> %arg.18, <8 x i8> %arg.19) local_unnamed_addr #14 {
entry:
  %0 = zext <8 x i8> %arg.19 to <8 x i16>
  %1 = zext <8 x i8> %arg.18 to <8 x i16>
  %2 = zext <8 x i8> %arg.17 to <8 x i16>
  %3 = zext <8 x i8> %arg.16 to <8 x i16>
  %4 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.15) #12
  %5 = add nuw nsw <8 x i16> %2, %3
  %6 = add nuw nsw <8 x i16> %5, %1
  %7 = add nuw nsw <8 x i16> %6, %0
  %8 = add <8 x i16> %7, %4
  %9 = zext <8 x i8> %arg.14 to <8 x i16>
  %10 = zext <8 x i8> %arg.13 to <8 x i16>
  %11 = zext <8 x i8> %arg.12 to <8 x i16>
  %12 = zext <8 x i8> %arg.11 to <8 x i16>
  %13 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.10) #12
  %14 = add nuw nsw <8 x i16> %11, %12
  %15 = add nuw nsw <8 x i16> %14, %10
  %16 = add nuw nsw <8 x i16> %15, %9
  %17 = add <8 x i16> %16, %13
  %18 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %8, <8 x i16> %17) #12
  %19 = zext <8 x i8> %arg.9 to <8 x i16>
  %20 = zext <8 x i8> %arg.8 to <8 x i16>
  %21 = zext <8 x i8> %arg.7 to <8 x i16>
  %22 = zext <8 x i8> %arg.6 to <8 x i16>
  %23 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.5) #12
  %24 = add nuw nsw <8 x i16> %21, %22
  %25 = add nuw nsw <8 x i16> %24, %20
  %26 = add nuw nsw <8 x i16> %25, %19
  %27 = add <8 x i16> %26, %23
  %28 = shl <8 x i16> %27, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %29 = zext <8 x i8> %arg.4 to <8 x i16>
  %30 = zext <8 x i8> %arg.3 to <8 x i16>
  %31 = zext <8 x i8> %arg.2 to <8 x i16>
  %32 = zext <8 x i8> %arg.1 to <8 x i16>
  %33 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  %34 = add nuw nsw <8 x i16> %31, %32
  %35 = add nuw nsw <8 x i16> %34, %30
  %36 = add nuw nsw <8 x i16> %35, %29
  %37 = add <8 x i16> %36, %33
  %38 = shl <8 x i16> %37, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %39 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %28, <8 x i16> %38) #12
  %40 = add <8 x i16> %39, %18
  %41 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %40, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %42 = trunc <8 x i16> %41 to <8 x i8>
  ret <8 x i8> %42
}

; Function Attrs: nounwind readnone willreturn
define <8 x i8> @hydride.node.sobel5x5_arm_depth1.144(<8 x i8> %arg, <8 x i8> %arg.1, <8 x i8> %arg.2, <8 x i8> %arg.3, <8 x i8> %arg.4, <8 x i8> %arg.5, <8 x i8> %arg.6, <8 x i8> %arg.7, <8 x i8> %arg.8, <8 x i8> %arg.9, <8 x i8> %arg.10, <8 x i8> %arg.11, <8 x i8> %arg.12, <8 x i8> %arg.13, <8 x i8> %arg.14, <8 x i8> %arg.15, <8 x i8> %arg.16, <8 x i8> %arg.17, <8 x i8> %arg.18, <8 x i8> %arg.19) local_unnamed_addr #14 {
entry:
  %0 = zext <8 x i8> %arg.19 to <8 x i16>
  %1 = zext <8 x i8> %arg.18 to <8 x i16>
  %2 = zext <8 x i8> %arg.17 to <8 x i16>
  %3 = zext <8 x i8> %arg.16 to <8 x i16>
  %4 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.15) #12
  %5 = add nuw nsw <8 x i16> %2, %3
  %6 = add nuw nsw <8 x i16> %5, %1
  %7 = add nuw nsw <8 x i16> %6, %0
  %8 = add <8 x i16> %7, %4
  %9 = zext <8 x i8> %arg.14 to <8 x i16>
  %10 = zext <8 x i8> %arg.13 to <8 x i16>
  %11 = zext <8 x i8> %arg.12 to <8 x i16>
  %12 = zext <8 x i8> %arg.11 to <8 x i16>
  %13 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.10) #12
  %14 = add nuw nsw <8 x i16> %11, %12
  %15 = add nuw nsw <8 x i16> %14, %10
  %16 = add nuw nsw <8 x i16> %15, %9
  %17 = add <8 x i16> %16, %13
  %18 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %8, <8 x i16> %17) #12
  %19 = zext <8 x i8> %arg.9 to <8 x i16>
  %20 = zext <8 x i8> %arg.8 to <8 x i16>
  %21 = zext <8 x i8> %arg.7 to <8 x i16>
  %22 = zext <8 x i8> %arg.6 to <8 x i16>
  %23 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.5) #12
  %24 = add nuw nsw <8 x i16> %21, %22
  %25 = add nuw nsw <8 x i16> %24, %20
  %26 = add nuw nsw <8 x i16> %25, %19
  %27 = add <8 x i16> %26, %23
  %28 = shl <8 x i16> %27, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %29 = zext <8 x i8> %arg.4 to <8 x i16>
  %30 = zext <8 x i8> %arg.3 to <8 x i16>
  %31 = zext <8 x i8> %arg.2 to <8 x i16>
  %32 = zext <8 x i8> %arg.1 to <8 x i16>
  %33 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  %34 = add nuw nsw <8 x i16> %31, %32
  %35 = add nuw nsw <8 x i16> %34, %30
  %36 = add nuw nsw <8 x i16> %35, %29
  %37 = add <8 x i16> %36, %33
  %38 = shl <8 x i16> %37, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %39 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %28, <8 x i16> %38) #12
  %40 = add <8 x i16> %39, %18
  %41 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %40, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %42 = trunc <8 x i16> %41 to <8 x i8>
  ret <8 x i8> %42
}

; Function Attrs: nounwind readnone willreturn
define <8 x i8> @hydride.node.sobel5x5_arm_depth1.145(<8 x i8> %arg, <8 x i8> %arg.1, <8 x i8> %arg.2, <8 x i8> %arg.3, <8 x i8> %arg.4, <8 x i8> %arg.5, <8 x i8> %arg.6, <8 x i8> %arg.7, <8 x i8> %arg.8, <8 x i8> %arg.9, <8 x i8> %arg.10, <8 x i8> %arg.11, <8 x i8> %arg.12, <8 x i8> %arg.13, <8 x i8> %arg.14, <8 x i8> %arg.15, <8 x i8> %arg.16, <8 x i8> %arg.17, <8 x i8> %arg.18, <8 x i8> %arg.19) local_unnamed_addr #14 {
entry:
  %0 = zext <8 x i8> %arg.19 to <8 x i16>
  %1 = zext <8 x i8> %arg.18 to <8 x i16>
  %2 = zext <8 x i8> %arg.17 to <8 x i16>
  %3 = zext <8 x i8> %arg.16 to <8 x i16>
  %4 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.15) #12
  %5 = add nuw nsw <8 x i16> %2, %3
  %6 = add nuw nsw <8 x i16> %5, %1
  %7 = add nuw nsw <8 x i16> %6, %0
  %8 = add <8 x i16> %7, %4
  %9 = zext <8 x i8> %arg.14 to <8 x i16>
  %10 = zext <8 x i8> %arg.13 to <8 x i16>
  %11 = zext <8 x i8> %arg.12 to <8 x i16>
  %12 = zext <8 x i8> %arg.11 to <8 x i16>
  %13 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.10) #12
  %14 = add nuw nsw <8 x i16> %11, %12
  %15 = add nuw nsw <8 x i16> %14, %10
  %16 = add nuw nsw <8 x i16> %15, %9
  %17 = add <8 x i16> %16, %13
  %18 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %8, <8 x i16> %17) #12
  %19 = zext <8 x i8> %arg.9 to <8 x i16>
  %20 = zext <8 x i8> %arg.8 to <8 x i16>
  %21 = zext <8 x i8> %arg.7 to <8 x i16>
  %22 = zext <8 x i8> %arg.6 to <8 x i16>
  %23 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.5) #12
  %24 = add nuw nsw <8 x i16> %21, %22
  %25 = add nuw nsw <8 x i16> %24, %20
  %26 = add nuw nsw <8 x i16> %25, %19
  %27 = add <8 x i16> %26, %23
  %28 = shl <8 x i16> %27, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %29 = zext <8 x i8> %arg.4 to <8 x i16>
  %30 = zext <8 x i8> %arg.3 to <8 x i16>
  %31 = zext <8 x i8> %arg.2 to <8 x i16>
  %32 = zext <8 x i8> %arg.1 to <8 x i16>
  %33 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  %34 = add nuw nsw <8 x i16> %31, %32
  %35 = add nuw nsw <8 x i16> %34, %30
  %36 = add nuw nsw <8 x i16> %35, %29
  %37 = add <8 x i16> %36, %33
  %38 = shl <8 x i16> %37, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %39 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %28, <8 x i16> %38) #12
  %40 = add <8 x i16> %39, %18
  %41 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %40, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %42 = trunc <8 x i16> %41 to <8 x i8>
  ret <8 x i8> %42
}

; Function Attrs: norecurse nounwind readnone willreturn
define <16 x i8> @hydride.node.sobel5x5_arm_depth1.146(<16 x i8> %arg, <16 x i8> %arg.1) local_unnamed_addr #13 {
entry:
  %0 = add <16 x i8> %arg.1, %arg
  ret <16 x i8> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i8> @hydride.node.sobel5x5_arm_depth1.147(<8 x i8> %arg, <8 x i8> %arg.1, <8 x i8> %arg.2, <8 x i8> %arg.3, <8 x i8> %arg.4, <8 x i8> %arg.5, <8 x i8> %arg.6, <8 x i8> %arg.7, <8 x i8> %arg.8, <8 x i8> %arg.9, <8 x i8> %arg.10, <8 x i8> %arg.11, <8 x i8> %arg.12, <8 x i8> %arg.13, <8 x i8> %arg.14, <8 x i8> %arg.15, <8 x i8> %arg.16, <8 x i8> %arg.17, <8 x i8> %arg.18, <8 x i8> %arg.19) local_unnamed_addr #14 {
entry:
  %0 = zext <8 x i8> %arg.19 to <8 x i16>
  %1 = zext <8 x i8> %arg.18 to <8 x i16>
  %2 = zext <8 x i8> %arg.17 to <8 x i16>
  %3 = zext <8 x i8> %arg.16 to <8 x i16>
  %4 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.15) #12
  %5 = add nuw nsw <8 x i16> %2, %3
  %6 = add nuw nsw <8 x i16> %5, %1
  %7 = add nuw nsw <8 x i16> %6, %0
  %8 = add <8 x i16> %7, %4
  %9 = zext <8 x i8> %arg.14 to <8 x i16>
  %10 = zext <8 x i8> %arg.13 to <8 x i16>
  %11 = zext <8 x i8> %arg.12 to <8 x i16>
  %12 = zext <8 x i8> %arg.11 to <8 x i16>
  %13 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.10) #12
  %14 = add nuw nsw <8 x i16> %11, %12
  %15 = add nuw nsw <8 x i16> %14, %10
  %16 = add nuw nsw <8 x i16> %15, %9
  %17 = add <8 x i16> %16, %13
  %18 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %8, <8 x i16> %17) #12
  %19 = zext <8 x i8> %arg.9 to <8 x i16>
  %20 = zext <8 x i8> %arg.8 to <8 x i16>
  %21 = zext <8 x i8> %arg.7 to <8 x i16>
  %22 = zext <8 x i8> %arg.6 to <8 x i16>
  %23 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.5) #12
  %24 = add nuw nsw <8 x i16> %21, %22
  %25 = add nuw nsw <8 x i16> %24, %20
  %26 = add nuw nsw <8 x i16> %25, %19
  %27 = add <8 x i16> %26, %23
  %28 = shl <8 x i16> %27, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %29 = zext <8 x i8> %arg.4 to <8 x i16>
  %30 = zext <8 x i8> %arg.3 to <8 x i16>
  %31 = zext <8 x i8> %arg.2 to <8 x i16>
  %32 = zext <8 x i8> %arg.1 to <8 x i16>
  %33 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  %34 = add nuw nsw <8 x i16> %31, %32
  %35 = add nuw nsw <8 x i16> %34, %30
  %36 = add nuw nsw <8 x i16> %35, %29
  %37 = add <8 x i16> %36, %33
  %38 = shl <8 x i16> %37, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %39 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %28, <8 x i16> %38) #12
  %40 = add <8 x i16> %39, %18
  %41 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %40, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %42 = trunc <8 x i16> %41 to <8 x i8>
  ret <8 x i8> %42
}

; Function Attrs: nounwind readnone willreturn
define <8 x i8> @hydride.node.sobel5x5_arm_depth1.148(<8 x i8> %arg, <8 x i8> %arg.1, <8 x i8> %arg.2, <8 x i8> %arg.3, <8 x i8> %arg.4, <8 x i8> %arg.5, <8 x i8> %arg.6, <8 x i8> %arg.7, <8 x i8> %arg.8, <8 x i8> %arg.9, <8 x i8> %arg.10, <8 x i8> %arg.11, <8 x i8> %arg.12, <8 x i8> %arg.13, <8 x i8> %arg.14, <8 x i8> %arg.15, <8 x i8> %arg.16, <8 x i8> %arg.17, <8 x i8> %arg.18, <8 x i8> %arg.19) local_unnamed_addr #14 {
entry:
  %0 = zext <8 x i8> %arg.19 to <8 x i16>
  %1 = zext <8 x i8> %arg.18 to <8 x i16>
  %2 = zext <8 x i8> %arg.17 to <8 x i16>
  %3 = zext <8 x i8> %arg.16 to <8 x i16>
  %4 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.15) #12
  %5 = add nuw nsw <8 x i16> %2, %3
  %6 = add nuw nsw <8 x i16> %5, %1
  %7 = add nuw nsw <8 x i16> %6, %0
  %8 = add <8 x i16> %7, %4
  %9 = zext <8 x i8> %arg.14 to <8 x i16>
  %10 = zext <8 x i8> %arg.13 to <8 x i16>
  %11 = zext <8 x i8> %arg.12 to <8 x i16>
  %12 = zext <8 x i8> %arg.11 to <8 x i16>
  %13 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.10) #12
  %14 = add nuw nsw <8 x i16> %11, %12
  %15 = add nuw nsw <8 x i16> %14, %10
  %16 = add nuw nsw <8 x i16> %15, %9
  %17 = add <8 x i16> %16, %13
  %18 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %8, <8 x i16> %17) #12
  %19 = zext <8 x i8> %arg.9 to <8 x i16>
  %20 = zext <8 x i8> %arg.8 to <8 x i16>
  %21 = zext <8 x i8> %arg.7 to <8 x i16>
  %22 = zext <8 x i8> %arg.6 to <8 x i16>
  %23 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.5) #12
  %24 = add nuw nsw <8 x i16> %21, %22
  %25 = add nuw nsw <8 x i16> %24, %20
  %26 = add nuw nsw <8 x i16> %25, %19
  %27 = add <8 x i16> %26, %23
  %28 = shl <8 x i16> %27, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %29 = zext <8 x i8> %arg.4 to <8 x i16>
  %30 = zext <8 x i8> %arg.3 to <8 x i16>
  %31 = zext <8 x i8> %arg.2 to <8 x i16>
  %32 = zext <8 x i8> %arg.1 to <8 x i16>
  %33 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  %34 = add nuw nsw <8 x i16> %31, %32
  %35 = add nuw nsw <8 x i16> %34, %30
  %36 = add nuw nsw <8 x i16> %35, %29
  %37 = add <8 x i16> %36, %33
  %38 = shl <8 x i16> %37, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %39 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %28, <8 x i16> %38) #12
  %40 = add <8 x i16> %39, %18
  %41 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %40, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %42 = trunc <8 x i16> %41 to <8 x i8>
  ret <8 x i8> %42
}

; Function Attrs: nounwind readnone willreturn
define <8 x i8> @hydride.node.sobel5x5_arm_depth1.149(<8 x i8> %arg, <8 x i8> %arg.1, <8 x i8> %arg.2, <8 x i8> %arg.3, <8 x i8> %arg.4, <8 x i8> %arg.5, <8 x i8> %arg.6, <8 x i8> %arg.7, <8 x i8> %arg.8, <8 x i8> %arg.9, <8 x i8> %arg.10, <8 x i8> %arg.11, <8 x i8> %arg.12, <8 x i8> %arg.13, <8 x i8> %arg.14, <8 x i8> %arg.15, <8 x i8> %arg.16, <8 x i8> %arg.17, <8 x i8> %arg.18, <8 x i8> %arg.19) local_unnamed_addr #14 {
entry:
  %0 = zext <8 x i8> %arg.19 to <8 x i16>
  %1 = zext <8 x i8> %arg.18 to <8 x i16>
  %2 = zext <8 x i8> %arg.17 to <8 x i16>
  %3 = zext <8 x i8> %arg.16 to <8 x i16>
  %4 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.15) #12
  %5 = add nuw nsw <8 x i16> %2, %3
  %6 = add nuw nsw <8 x i16> %5, %1
  %7 = add nuw nsw <8 x i16> %6, %0
  %8 = add <8 x i16> %7, %4
  %9 = zext <8 x i8> %arg.14 to <8 x i16>
  %10 = zext <8 x i8> %arg.13 to <8 x i16>
  %11 = zext <8 x i8> %arg.12 to <8 x i16>
  %12 = zext <8 x i8> %arg.11 to <8 x i16>
  %13 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.10) #12
  %14 = add nuw nsw <8 x i16> %11, %12
  %15 = add nuw nsw <8 x i16> %14, %10
  %16 = add nuw nsw <8 x i16> %15, %9
  %17 = add <8 x i16> %16, %13
  %18 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %8, <8 x i16> %17) #12
  %19 = zext <8 x i8> %arg.9 to <8 x i16>
  %20 = zext <8 x i8> %arg.8 to <8 x i16>
  %21 = zext <8 x i8> %arg.7 to <8 x i16>
  %22 = zext <8 x i8> %arg.6 to <8 x i16>
  %23 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.5) #12
  %24 = add nuw nsw <8 x i16> %21, %22
  %25 = add nuw nsw <8 x i16> %24, %20
  %26 = add nuw nsw <8 x i16> %25, %19
  %27 = add <8 x i16> %26, %23
  %28 = shl <8 x i16> %27, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %29 = zext <8 x i8> %arg.4 to <8 x i16>
  %30 = zext <8 x i8> %arg.3 to <8 x i16>
  %31 = zext <8 x i8> %arg.2 to <8 x i16>
  %32 = zext <8 x i8> %arg.1 to <8 x i16>
  %33 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  %34 = add nuw nsw <8 x i16> %31, %32
  %35 = add nuw nsw <8 x i16> %34, %30
  %36 = add nuw nsw <8 x i16> %35, %29
  %37 = add <8 x i16> %36, %33
  %38 = shl <8 x i16> %37, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %39 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %28, <8 x i16> %38) #12
  %40 = add <8 x i16> %39, %18
  %41 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %40, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %42 = trunc <8 x i16> %41 to <8 x i8>
  ret <8 x i8> %42
}

; Function Attrs: nounwind readnone willreturn
define <8 x i8> @hydride.node.sobel5x5_arm_depth1.150(<8 x i8> %arg, <8 x i8> %arg.1, <8 x i8> %arg.2, <8 x i8> %arg.3, <8 x i8> %arg.4, <8 x i8> %arg.5, <8 x i8> %arg.6, <8 x i8> %arg.7, <8 x i8> %arg.8, <8 x i8> %arg.9, <8 x i8> %arg.10, <8 x i8> %arg.11, <8 x i8> %arg.12, <8 x i8> %arg.13, <8 x i8> %arg.14, <8 x i8> %arg.15, <8 x i8> %arg.16, <8 x i8> %arg.17, <8 x i8> %arg.18, <8 x i8> %arg.19) local_unnamed_addr #14 {
entry:
  %0 = zext <8 x i8> %arg.19 to <8 x i16>
  %1 = zext <8 x i8> %arg.18 to <8 x i16>
  %2 = zext <8 x i8> %arg.17 to <8 x i16>
  %3 = zext <8 x i8> %arg.16 to <8 x i16>
  %4 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.15) #12
  %5 = add nuw nsw <8 x i16> %2, %3
  %6 = add nuw nsw <8 x i16> %5, %1
  %7 = add nuw nsw <8 x i16> %6, %0
  %8 = add <8 x i16> %7, %4
  %9 = zext <8 x i8> %arg.14 to <8 x i16>
  %10 = zext <8 x i8> %arg.13 to <8 x i16>
  %11 = zext <8 x i8> %arg.12 to <8 x i16>
  %12 = zext <8 x i8> %arg.11 to <8 x i16>
  %13 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.10) #12
  %14 = add nuw nsw <8 x i16> %11, %12
  %15 = add nuw nsw <8 x i16> %14, %10
  %16 = add nuw nsw <8 x i16> %15, %9
  %17 = add <8 x i16> %16, %13
  %18 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %8, <8 x i16> %17) #12
  %19 = zext <8 x i8> %arg.9 to <8 x i16>
  %20 = zext <8 x i8> %arg.8 to <8 x i16>
  %21 = zext <8 x i8> %arg.7 to <8 x i16>
  %22 = zext <8 x i8> %arg.6 to <8 x i16>
  %23 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.5) #12
  %24 = add nuw nsw <8 x i16> %21, %22
  %25 = add nuw nsw <8 x i16> %24, %20
  %26 = add nuw nsw <8 x i16> %25, %19
  %27 = add <8 x i16> %26, %23
  %28 = shl <8 x i16> %27, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %29 = zext <8 x i8> %arg.4 to <8 x i16>
  %30 = zext <8 x i8> %arg.3 to <8 x i16>
  %31 = zext <8 x i8> %arg.2 to <8 x i16>
  %32 = zext <8 x i8> %arg.1 to <8 x i16>
  %33 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  %34 = add nuw nsw <8 x i16> %31, %32
  %35 = add nuw nsw <8 x i16> %34, %30
  %36 = add nuw nsw <8 x i16> %35, %29
  %37 = add <8 x i16> %36, %33
  %38 = shl <8 x i16> %37, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %39 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %28, <8 x i16> %38) #12
  %40 = add <8 x i16> %39, %18
  %41 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %40, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %42 = trunc <8 x i16> %41 to <8 x i8>
  ret <8 x i8> %42
}

; Function Attrs: norecurse nounwind readnone willreturn
define <16 x i8> @hydride.node.sobel5x5_arm_depth1.151(<16 x i8> %arg, <16 x i8> %arg.1) local_unnamed_addr #13 {
entry:
  %0 = add <16 x i8> %arg.1, %arg
  ret <16 x i8> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i8> @hydride.node.sobel5x5_arm_depth1.152(<8 x i8> %arg, <8 x i8> %arg.1, <8 x i8> %arg.2, <8 x i8> %arg.3, <8 x i8> %arg.4, <8 x i8> %arg.5, <8 x i8> %arg.6, <8 x i8> %arg.7, <8 x i8> %arg.8, <8 x i8> %arg.9, <8 x i8> %arg.10, <8 x i8> %arg.11, <8 x i8> %arg.12, <8 x i8> %arg.13, <8 x i8> %arg.14, <8 x i8> %arg.15, <8 x i8> %arg.16, <8 x i8> %arg.17, <8 x i8> %arg.18, <8 x i8> %arg.19) local_unnamed_addr #14 {
entry:
  %0 = zext <8 x i8> %arg.19 to <8 x i16>
  %1 = zext <8 x i8> %arg.18 to <8 x i16>
  %2 = zext <8 x i8> %arg.17 to <8 x i16>
  %3 = zext <8 x i8> %arg.16 to <8 x i16>
  %4 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.15) #12
  %5 = add nuw nsw <8 x i16> %2, %3
  %6 = add nuw nsw <8 x i16> %5, %1
  %7 = add nuw nsw <8 x i16> %6, %0
  %8 = add <8 x i16> %7, %4
  %9 = zext <8 x i8> %arg.14 to <8 x i16>
  %10 = zext <8 x i8> %arg.13 to <8 x i16>
  %11 = zext <8 x i8> %arg.12 to <8 x i16>
  %12 = zext <8 x i8> %arg.11 to <8 x i16>
  %13 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.10) #12
  %14 = add nuw nsw <8 x i16> %11, %12
  %15 = add nuw nsw <8 x i16> %14, %10
  %16 = add nuw nsw <8 x i16> %15, %9
  %17 = add <8 x i16> %16, %13
  %18 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %8, <8 x i16> %17) #12
  %19 = zext <8 x i8> %arg.9 to <8 x i16>
  %20 = zext <8 x i8> %arg.8 to <8 x i16>
  %21 = zext <8 x i8> %arg.7 to <8 x i16>
  %22 = zext <8 x i8> %arg.6 to <8 x i16>
  %23 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.5) #12
  %24 = add nuw nsw <8 x i16> %21, %22
  %25 = add nuw nsw <8 x i16> %24, %20
  %26 = add nuw nsw <8 x i16> %25, %19
  %27 = add <8 x i16> %26, %23
  %28 = shl <8 x i16> %27, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %29 = zext <8 x i8> %arg.4 to <8 x i16>
  %30 = zext <8 x i8> %arg.3 to <8 x i16>
  %31 = zext <8 x i8> %arg.2 to <8 x i16>
  %32 = zext <8 x i8> %arg.1 to <8 x i16>
  %33 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  %34 = add nuw nsw <8 x i16> %31, %32
  %35 = add nuw nsw <8 x i16> %34, %30
  %36 = add nuw nsw <8 x i16> %35, %29
  %37 = add <8 x i16> %36, %33
  %38 = shl <8 x i16> %37, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %39 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %28, <8 x i16> %38) #12
  %40 = add <8 x i16> %39, %18
  %41 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %40, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %42 = trunc <8 x i16> %41 to <8 x i8>
  ret <8 x i8> %42
}

; Function Attrs: nounwind readnone willreturn
define <8 x i8> @hydride.node.sobel5x5_arm_depth1.153(<8 x i8> %arg, <8 x i8> %arg.1, <8 x i8> %arg.2, <8 x i8> %arg.3, <8 x i8> %arg.4, <8 x i8> %arg.5, <8 x i8> %arg.6, <8 x i8> %arg.7, <8 x i8> %arg.8, <8 x i8> %arg.9, <8 x i8> %arg.10, <8 x i8> %arg.11, <8 x i8> %arg.12, <8 x i8> %arg.13, <8 x i8> %arg.14, <8 x i8> %arg.15, <8 x i8> %arg.16, <8 x i8> %arg.17, <8 x i8> %arg.18, <8 x i8> %arg.19) local_unnamed_addr #14 {
entry:
  %0 = zext <8 x i8> %arg.19 to <8 x i16>
  %1 = zext <8 x i8> %arg.18 to <8 x i16>
  %2 = zext <8 x i8> %arg.17 to <8 x i16>
  %3 = zext <8 x i8> %arg.16 to <8 x i16>
  %4 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.15) #12
  %5 = add nuw nsw <8 x i16> %2, %3
  %6 = add nuw nsw <8 x i16> %5, %1
  %7 = add nuw nsw <8 x i16> %6, %0
  %8 = add <8 x i16> %7, %4
  %9 = zext <8 x i8> %arg.14 to <8 x i16>
  %10 = zext <8 x i8> %arg.13 to <8 x i16>
  %11 = zext <8 x i8> %arg.12 to <8 x i16>
  %12 = zext <8 x i8> %arg.11 to <8 x i16>
  %13 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.10) #12
  %14 = add nuw nsw <8 x i16> %11, %12
  %15 = add nuw nsw <8 x i16> %14, %10
  %16 = add nuw nsw <8 x i16> %15, %9
  %17 = add <8 x i16> %16, %13
  %18 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %8, <8 x i16> %17) #12
  %19 = zext <8 x i8> %arg.9 to <8 x i16>
  %20 = zext <8 x i8> %arg.8 to <8 x i16>
  %21 = zext <8 x i8> %arg.7 to <8 x i16>
  %22 = zext <8 x i8> %arg.6 to <8 x i16>
  %23 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.5) #12
  %24 = add nuw nsw <8 x i16> %21, %22
  %25 = add nuw nsw <8 x i16> %24, %20
  %26 = add nuw nsw <8 x i16> %25, %19
  %27 = add <8 x i16> %26, %23
  %28 = shl <8 x i16> %27, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %29 = zext <8 x i8> %arg.4 to <8 x i16>
  %30 = zext <8 x i8> %arg.3 to <8 x i16>
  %31 = zext <8 x i8> %arg.2 to <8 x i16>
  %32 = zext <8 x i8> %arg.1 to <8 x i16>
  %33 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  %34 = add nuw nsw <8 x i16> %31, %32
  %35 = add nuw nsw <8 x i16> %34, %30
  %36 = add nuw nsw <8 x i16> %35, %29
  %37 = add <8 x i16> %36, %33
  %38 = shl <8 x i16> %37, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %39 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %28, <8 x i16> %38) #12
  %40 = add <8 x i16> %39, %18
  %41 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %40, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %42 = trunc <8 x i16> %41 to <8 x i8>
  ret <8 x i8> %42
}

; Function Attrs: nounwind readnone willreturn
define <8 x i8> @hydride.node.sobel5x5_arm_depth1.154(<8 x i8> %arg, <8 x i8> %arg.1, <8 x i8> %arg.2, <8 x i8> %arg.3, <8 x i8> %arg.4, <8 x i8> %arg.5, <8 x i8> %arg.6, <8 x i8> %arg.7, <8 x i8> %arg.8, <8 x i8> %arg.9, <8 x i8> %arg.10, <8 x i8> %arg.11, <8 x i8> %arg.12, <8 x i8> %arg.13, <8 x i8> %arg.14, <8 x i8> %arg.15, <8 x i8> %arg.16, <8 x i8> %arg.17, <8 x i8> %arg.18, <8 x i8> %arg.19) local_unnamed_addr #14 {
entry:
  %0 = zext <8 x i8> %arg.19 to <8 x i16>
  %1 = zext <8 x i8> %arg.18 to <8 x i16>
  %2 = zext <8 x i8> %arg.17 to <8 x i16>
  %3 = zext <8 x i8> %arg.16 to <8 x i16>
  %4 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.15) #12
  %5 = add nuw nsw <8 x i16> %2, %3
  %6 = add nuw nsw <8 x i16> %5, %1
  %7 = add nuw nsw <8 x i16> %6, %0
  %8 = add <8 x i16> %7, %4
  %9 = zext <8 x i8> %arg.14 to <8 x i16>
  %10 = zext <8 x i8> %arg.13 to <8 x i16>
  %11 = zext <8 x i8> %arg.12 to <8 x i16>
  %12 = zext <8 x i8> %arg.11 to <8 x i16>
  %13 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.10) #12
  %14 = add nuw nsw <8 x i16> %11, %12
  %15 = add nuw nsw <8 x i16> %14, %10
  %16 = add nuw nsw <8 x i16> %15, %9
  %17 = add <8 x i16> %16, %13
  %18 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %8, <8 x i16> %17) #12
  %19 = zext <8 x i8> %arg.9 to <8 x i16>
  %20 = zext <8 x i8> %arg.8 to <8 x i16>
  %21 = zext <8 x i8> %arg.7 to <8 x i16>
  %22 = zext <8 x i8> %arg.6 to <8 x i16>
  %23 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.5) #12
  %24 = add nuw nsw <8 x i16> %21, %22
  %25 = add nuw nsw <8 x i16> %24, %20
  %26 = add nuw nsw <8 x i16> %25, %19
  %27 = add <8 x i16> %26, %23
  %28 = shl <8 x i16> %27, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %29 = zext <8 x i8> %arg.4 to <8 x i16>
  %30 = zext <8 x i8> %arg.3 to <8 x i16>
  %31 = zext <8 x i8> %arg.2 to <8 x i16>
  %32 = zext <8 x i8> %arg.1 to <8 x i16>
  %33 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  %34 = add nuw nsw <8 x i16> %31, %32
  %35 = add nuw nsw <8 x i16> %34, %30
  %36 = add nuw nsw <8 x i16> %35, %29
  %37 = add <8 x i16> %36, %33
  %38 = shl <8 x i16> %37, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %39 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %28, <8 x i16> %38) #12
  %40 = add <8 x i16> %39, %18
  %41 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %40, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %42 = trunc <8 x i16> %41 to <8 x i8>
  ret <8 x i8> %42
}

; Function Attrs: nounwind readnone willreturn
define <8 x i8> @hydride.node.sobel5x5_arm_depth1.155(<8 x i8> %arg, <8 x i8> %arg.1, <8 x i8> %arg.2, <8 x i8> %arg.3, <8 x i8> %arg.4, <8 x i8> %arg.5, <8 x i8> %arg.6, <8 x i8> %arg.7, <8 x i8> %arg.8, <8 x i8> %arg.9, <8 x i8> %arg.10, <8 x i8> %arg.11, <8 x i8> %arg.12, <8 x i8> %arg.13, <8 x i8> %arg.14, <8 x i8> %arg.15, <8 x i8> %arg.16, <8 x i8> %arg.17, <8 x i8> %arg.18, <8 x i8> %arg.19) local_unnamed_addr #14 {
entry:
  %0 = zext <8 x i8> %arg.19 to <8 x i16>
  %1 = zext <8 x i8> %arg.18 to <8 x i16>
  %2 = zext <8 x i8> %arg.17 to <8 x i16>
  %3 = zext <8 x i8> %arg.16 to <8 x i16>
  %4 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.15) #12
  %5 = add nuw nsw <8 x i16> %2, %3
  %6 = add nuw nsw <8 x i16> %5, %1
  %7 = add nuw nsw <8 x i16> %6, %0
  %8 = add <8 x i16> %7, %4
  %9 = zext <8 x i8> %arg.14 to <8 x i16>
  %10 = zext <8 x i8> %arg.13 to <8 x i16>
  %11 = zext <8 x i8> %arg.12 to <8 x i16>
  %12 = zext <8 x i8> %arg.11 to <8 x i16>
  %13 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.10) #12
  %14 = add nuw nsw <8 x i16> %11, %12
  %15 = add nuw nsw <8 x i16> %14, %10
  %16 = add nuw nsw <8 x i16> %15, %9
  %17 = add <8 x i16> %16, %13
  %18 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %8, <8 x i16> %17) #12
  %19 = zext <8 x i8> %arg.9 to <8 x i16>
  %20 = zext <8 x i8> %arg.8 to <8 x i16>
  %21 = zext <8 x i8> %arg.7 to <8 x i16>
  %22 = zext <8 x i8> %arg.6 to <8 x i16>
  %23 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.5) #12
  %24 = add nuw nsw <8 x i16> %21, %22
  %25 = add nuw nsw <8 x i16> %24, %20
  %26 = add nuw nsw <8 x i16> %25, %19
  %27 = add <8 x i16> %26, %23
  %28 = shl <8 x i16> %27, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %29 = zext <8 x i8> %arg.4 to <8 x i16>
  %30 = zext <8 x i8> %arg.3 to <8 x i16>
  %31 = zext <8 x i8> %arg.2 to <8 x i16>
  %32 = zext <8 x i8> %arg.1 to <8 x i16>
  %33 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  %34 = add nuw nsw <8 x i16> %31, %32
  %35 = add nuw nsw <8 x i16> %34, %30
  %36 = add nuw nsw <8 x i16> %35, %29
  %37 = add <8 x i16> %36, %33
  %38 = shl <8 x i16> %37, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %39 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %28, <8 x i16> %38) #12
  %40 = add <8 x i16> %39, %18
  %41 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %40, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %42 = trunc <8 x i16> %41 to <8 x i8>
  ret <8 x i8> %42
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.156(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.157(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.158(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.159(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.160(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.161(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.162(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.163(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.164(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.165(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.166(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.167(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.168(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.169(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.170(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.171(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.172(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.173(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.174(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.175(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.176(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.177(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.178(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.179(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.180(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.181(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.182(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.183(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.184(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.185(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.186(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i16> @hydride.node.sobel5x5_arm_depth1.187(<8 x i8> %arg) local_unnamed_addr #14 {
entry:
  %0 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  ret <8 x i16> %0
}

; Function Attrs: norecurse nounwind readnone willreturn
define <16 x i8> @hydride.node.sobel5x5_arm_depth1.188(<16 x i8> %arg, <16 x i8> %arg.1) local_unnamed_addr #13 {
entry:
  %0 = add <16 x i8> %arg.1, %arg
  ret <16 x i8> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i8> @hydride.node.sobel5x5_arm_depth1.189(<8 x i8> %arg, <8 x i8> %arg.1, <8 x i8> %arg.2, <8 x i8> %arg.3, <8 x i8> %arg.4, <8 x i8> %arg.5, <8 x i8> %arg.6, <8 x i8> %arg.7, <8 x i8> %arg.8, <8 x i8> %arg.9, <8 x i8> %arg.10, <8 x i8> %arg.11, <8 x i8> %arg.12, <8 x i8> %arg.13, <8 x i8> %arg.14, <8 x i8> %arg.15, <8 x i8> %arg.16, <8 x i8> %arg.17, <8 x i8> %arg.18, <8 x i8> %arg.19) local_unnamed_addr #14 {
entry:
  %0 = zext <8 x i8> %arg.19 to <8 x i16>
  %1 = zext <8 x i8> %arg.18 to <8 x i16>
  %2 = zext <8 x i8> %arg.17 to <8 x i16>
  %3 = zext <8 x i8> %arg.16 to <8 x i16>
  %4 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.15) #12
  %5 = add nuw nsw <8 x i16> %2, %3
  %6 = add nuw nsw <8 x i16> %5, %1
  %7 = add nuw nsw <8 x i16> %6, %0
  %8 = add <8 x i16> %7, %4
  %9 = zext <8 x i8> %arg.14 to <8 x i16>
  %10 = zext <8 x i8> %arg.13 to <8 x i16>
  %11 = zext <8 x i8> %arg.12 to <8 x i16>
  %12 = zext <8 x i8> %arg.11 to <8 x i16>
  %13 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.10) #12
  %14 = add nuw nsw <8 x i16> %11, %12
  %15 = add nuw nsw <8 x i16> %14, %10
  %16 = add nuw nsw <8 x i16> %15, %9
  %17 = add <8 x i16> %16, %13
  %18 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %8, <8 x i16> %17) #12
  %19 = zext <8 x i8> %arg.9 to <8 x i16>
  %20 = zext <8 x i8> %arg.8 to <8 x i16>
  %21 = zext <8 x i8> %arg.7 to <8 x i16>
  %22 = zext <8 x i8> %arg.6 to <8 x i16>
  %23 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.5) #12
  %24 = add nuw nsw <8 x i16> %21, %22
  %25 = add nuw nsw <8 x i16> %24, %20
  %26 = add nuw nsw <8 x i16> %25, %19
  %27 = add <8 x i16> %26, %23
  %28 = shl <8 x i16> %27, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %29 = zext <8 x i8> %arg.4 to <8 x i16>
  %30 = zext <8 x i8> %arg.3 to <8 x i16>
  %31 = zext <8 x i8> %arg.2 to <8 x i16>
  %32 = zext <8 x i8> %arg.1 to <8 x i16>
  %33 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  %34 = add nuw nsw <8 x i16> %31, %32
  %35 = add nuw nsw <8 x i16> %34, %30
  %36 = add nuw nsw <8 x i16> %35, %29
  %37 = add <8 x i16> %36, %33
  %38 = shl <8 x i16> %37, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %39 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %28, <8 x i16> %38) #12
  %40 = add <8 x i16> %39, %18
  %41 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %40, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %42 = trunc <8 x i16> %41 to <8 x i8>
  ret <8 x i8> %42
}

; Function Attrs: nounwind readnone willreturn
define <8 x i8> @hydride.node.sobel5x5_arm_depth1.190(<8 x i8> %arg, <8 x i8> %arg.1, <8 x i8> %arg.2, <8 x i8> %arg.3, <8 x i8> %arg.4, <8 x i8> %arg.5, <8 x i8> %arg.6, <8 x i8> %arg.7, <8 x i8> %arg.8, <8 x i8> %arg.9, <8 x i8> %arg.10, <8 x i8> %arg.11, <8 x i8> %arg.12, <8 x i8> %arg.13, <8 x i8> %arg.14, <8 x i8> %arg.15, <8 x i8> %arg.16, <8 x i8> %arg.17, <8 x i8> %arg.18, <8 x i8> %arg.19) local_unnamed_addr #14 {
entry:
  %0 = zext <8 x i8> %arg.19 to <8 x i16>
  %1 = zext <8 x i8> %arg.18 to <8 x i16>
  %2 = zext <8 x i8> %arg.17 to <8 x i16>
  %3 = zext <8 x i8> %arg.16 to <8 x i16>
  %4 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.15) #12
  %5 = add nuw nsw <8 x i16> %2, %3
  %6 = add nuw nsw <8 x i16> %5, %1
  %7 = add nuw nsw <8 x i16> %6, %0
  %8 = add <8 x i16> %7, %4
  %9 = zext <8 x i8> %arg.14 to <8 x i16>
  %10 = zext <8 x i8> %arg.13 to <8 x i16>
  %11 = zext <8 x i8> %arg.12 to <8 x i16>
  %12 = zext <8 x i8> %arg.11 to <8 x i16>
  %13 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.10) #12
  %14 = add nuw nsw <8 x i16> %11, %12
  %15 = add nuw nsw <8 x i16> %14, %10
  %16 = add nuw nsw <8 x i16> %15, %9
  %17 = add <8 x i16> %16, %13
  %18 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %8, <8 x i16> %17) #12
  %19 = zext <8 x i8> %arg.9 to <8 x i16>
  %20 = zext <8 x i8> %arg.8 to <8 x i16>
  %21 = zext <8 x i8> %arg.7 to <8 x i16>
  %22 = zext <8 x i8> %arg.6 to <8 x i16>
  %23 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.5) #12
  %24 = add nuw nsw <8 x i16> %21, %22
  %25 = add nuw nsw <8 x i16> %24, %20
  %26 = add nuw nsw <8 x i16> %25, %19
  %27 = add <8 x i16> %26, %23
  %28 = shl <8 x i16> %27, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %29 = zext <8 x i8> %arg.4 to <8 x i16>
  %30 = zext <8 x i8> %arg.3 to <8 x i16>
  %31 = zext <8 x i8> %arg.2 to <8 x i16>
  %32 = zext <8 x i8> %arg.1 to <8 x i16>
  %33 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  %34 = add nuw nsw <8 x i16> %31, %32
  %35 = add nuw nsw <8 x i16> %34, %30
  %36 = add nuw nsw <8 x i16> %35, %29
  %37 = add <8 x i16> %36, %33
  %38 = shl <8 x i16> %37, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %39 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %28, <8 x i16> %38) #12
  %40 = add <8 x i16> %39, %18
  %41 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %40, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %42 = trunc <8 x i16> %41 to <8 x i8>
  ret <8 x i8> %42
}

; Function Attrs: nounwind readnone willreturn
define <8 x i8> @hydride.node.sobel5x5_arm_depth1.191(<8 x i8> %arg, <8 x i8> %arg.1, <8 x i8> %arg.2, <8 x i8> %arg.3, <8 x i8> %arg.4, <8 x i8> %arg.5, <8 x i8> %arg.6, <8 x i8> %arg.7, <8 x i8> %arg.8, <8 x i8> %arg.9, <8 x i8> %arg.10, <8 x i8> %arg.11, <8 x i8> %arg.12, <8 x i8> %arg.13, <8 x i8> %arg.14, <8 x i8> %arg.15, <8 x i8> %arg.16, <8 x i8> %arg.17, <8 x i8> %arg.18, <8 x i8> %arg.19) local_unnamed_addr #14 {
entry:
  %0 = zext <8 x i8> %arg.19 to <8 x i16>
  %1 = zext <8 x i8> %arg.18 to <8 x i16>
  %2 = zext <8 x i8> %arg.17 to <8 x i16>
  %3 = zext <8 x i8> %arg.16 to <8 x i16>
  %4 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.15) #12
  %5 = add nuw nsw <8 x i16> %2, %3
  %6 = add nuw nsw <8 x i16> %5, %1
  %7 = add nuw nsw <8 x i16> %6, %0
  %8 = add <8 x i16> %7, %4
  %9 = zext <8 x i8> %arg.14 to <8 x i16>
  %10 = zext <8 x i8> %arg.13 to <8 x i16>
  %11 = zext <8 x i8> %arg.12 to <8 x i16>
  %12 = zext <8 x i8> %arg.11 to <8 x i16>
  %13 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.10) #12
  %14 = add nuw nsw <8 x i16> %11, %12
  %15 = add nuw nsw <8 x i16> %14, %10
  %16 = add nuw nsw <8 x i16> %15, %9
  %17 = add <8 x i16> %16, %13
  %18 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %8, <8 x i16> %17) #12
  %19 = zext <8 x i8> %arg.9 to <8 x i16>
  %20 = zext <8 x i8> %arg.8 to <8 x i16>
  %21 = zext <8 x i8> %arg.7 to <8 x i16>
  %22 = zext <8 x i8> %arg.6 to <8 x i16>
  %23 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.5) #12
  %24 = add nuw nsw <8 x i16> %21, %22
  %25 = add nuw nsw <8 x i16> %24, %20
  %26 = add nuw nsw <8 x i16> %25, %19
  %27 = add <8 x i16> %26, %23
  %28 = shl <8 x i16> %27, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %29 = zext <8 x i8> %arg.4 to <8 x i16>
  %30 = zext <8 x i8> %arg.3 to <8 x i16>
  %31 = zext <8 x i8> %arg.2 to <8 x i16>
  %32 = zext <8 x i8> %arg.1 to <8 x i16>
  %33 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  %34 = add nuw nsw <8 x i16> %31, %32
  %35 = add nuw nsw <8 x i16> %34, %30
  %36 = add nuw nsw <8 x i16> %35, %29
  %37 = add <8 x i16> %36, %33
  %38 = shl <8 x i16> %37, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %39 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %28, <8 x i16> %38) #12
  %40 = add <8 x i16> %39, %18
  %41 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %40, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %42 = trunc <8 x i16> %41 to <8 x i8>
  ret <8 x i8> %42
}

; Function Attrs: nounwind readnone willreturn
define <8 x i8> @hydride.node.sobel5x5_arm_depth1.192(<8 x i8> %arg, <8 x i8> %arg.1, <8 x i8> %arg.2, <8 x i8> %arg.3, <8 x i8> %arg.4, <8 x i8> %arg.5, <8 x i8> %arg.6, <8 x i8> %arg.7, <8 x i8> %arg.8, <8 x i8> %arg.9, <8 x i8> %arg.10, <8 x i8> %arg.11, <8 x i8> %arg.12, <8 x i8> %arg.13, <8 x i8> %arg.14, <8 x i8> %arg.15, <8 x i8> %arg.16, <8 x i8> %arg.17, <8 x i8> %arg.18, <8 x i8> %arg.19) local_unnamed_addr #14 {
entry:
  %0 = zext <8 x i8> %arg.19 to <8 x i16>
  %1 = zext <8 x i8> %arg.18 to <8 x i16>
  %2 = zext <8 x i8> %arg.17 to <8 x i16>
  %3 = zext <8 x i8> %arg.16 to <8 x i16>
  %4 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.15) #12
  %5 = add nuw nsw <8 x i16> %2, %3
  %6 = add nuw nsw <8 x i16> %5, %1
  %7 = add nuw nsw <8 x i16> %6, %0
  %8 = add <8 x i16> %7, %4
  %9 = zext <8 x i8> %arg.14 to <8 x i16>
  %10 = zext <8 x i8> %arg.13 to <8 x i16>
  %11 = zext <8 x i8> %arg.12 to <8 x i16>
  %12 = zext <8 x i8> %arg.11 to <8 x i16>
  %13 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.10) #12
  %14 = add nuw nsw <8 x i16> %11, %12
  %15 = add nuw nsw <8 x i16> %14, %10
  %16 = add nuw nsw <8 x i16> %15, %9
  %17 = add <8 x i16> %16, %13
  %18 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %8, <8 x i16> %17) #12
  %19 = zext <8 x i8> %arg.9 to <8 x i16>
  %20 = zext <8 x i8> %arg.8 to <8 x i16>
  %21 = zext <8 x i8> %arg.7 to <8 x i16>
  %22 = zext <8 x i8> %arg.6 to <8 x i16>
  %23 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.5) #12
  %24 = add nuw nsw <8 x i16> %21, %22
  %25 = add nuw nsw <8 x i16> %24, %20
  %26 = add nuw nsw <8 x i16> %25, %19
  %27 = add <8 x i16> %26, %23
  %28 = shl <8 x i16> %27, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %29 = zext <8 x i8> %arg.4 to <8 x i16>
  %30 = zext <8 x i8> %arg.3 to <8 x i16>
  %31 = zext <8 x i8> %arg.2 to <8 x i16>
  %32 = zext <8 x i8> %arg.1 to <8 x i16>
  %33 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  %34 = add nuw nsw <8 x i16> %31, %32
  %35 = add nuw nsw <8 x i16> %34, %30
  %36 = add nuw nsw <8 x i16> %35, %29
  %37 = add <8 x i16> %36, %33
  %38 = shl <8 x i16> %37, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %39 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %28, <8 x i16> %38) #12
  %40 = add <8 x i16> %39, %18
  %41 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %40, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %42 = trunc <8 x i16> %41 to <8 x i8>
  ret <8 x i8> %42
}

; Function Attrs: norecurse nounwind readnone willreturn
define <16 x i8> @hydride.node.sobel5x5_arm_depth1.193(<16 x i8> %arg, <16 x i8> %arg.1) local_unnamed_addr #13 {
entry:
  %0 = add <16 x i8> %arg.1, %arg
  ret <16 x i8> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i8> @hydride.node.sobel5x5_arm_depth1.194(<8 x i8> %arg, <8 x i8> %arg.1, <8 x i8> %arg.2, <8 x i8> %arg.3, <8 x i8> %arg.4, <8 x i8> %arg.5, <8 x i8> %arg.6, <8 x i8> %arg.7, <8 x i8> %arg.8, <8 x i8> %arg.9, <8 x i8> %arg.10, <8 x i8> %arg.11, <8 x i8> %arg.12, <8 x i8> %arg.13, <8 x i8> %arg.14, <8 x i8> %arg.15, <8 x i8> %arg.16, <8 x i8> %arg.17, <8 x i8> %arg.18, <8 x i8> %arg.19) local_unnamed_addr #14 {
entry:
  %0 = zext <8 x i8> %arg.19 to <8 x i16>
  %1 = zext <8 x i8> %arg.18 to <8 x i16>
  %2 = zext <8 x i8> %arg.17 to <8 x i16>
  %3 = zext <8 x i8> %arg.16 to <8 x i16>
  %4 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.15) #12
  %5 = add nuw nsw <8 x i16> %2, %3
  %6 = add nuw nsw <8 x i16> %5, %1
  %7 = add nuw nsw <8 x i16> %6, %0
  %8 = add <8 x i16> %7, %4
  %9 = zext <8 x i8> %arg.14 to <8 x i16>
  %10 = zext <8 x i8> %arg.13 to <8 x i16>
  %11 = zext <8 x i8> %arg.12 to <8 x i16>
  %12 = zext <8 x i8> %arg.11 to <8 x i16>
  %13 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.10) #12
  %14 = add nuw nsw <8 x i16> %11, %12
  %15 = add nuw nsw <8 x i16> %14, %10
  %16 = add nuw nsw <8 x i16> %15, %9
  %17 = add <8 x i16> %16, %13
  %18 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %8, <8 x i16> %17) #12
  %19 = zext <8 x i8> %arg.9 to <8 x i16>
  %20 = zext <8 x i8> %arg.8 to <8 x i16>
  %21 = zext <8 x i8> %arg.7 to <8 x i16>
  %22 = zext <8 x i8> %arg.6 to <8 x i16>
  %23 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.5) #12
  %24 = add nuw nsw <8 x i16> %21, %22
  %25 = add nuw nsw <8 x i16> %24, %20
  %26 = add nuw nsw <8 x i16> %25, %19
  %27 = add <8 x i16> %26, %23
  %28 = shl <8 x i16> %27, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %29 = zext <8 x i8> %arg.4 to <8 x i16>
  %30 = zext <8 x i8> %arg.3 to <8 x i16>
  %31 = zext <8 x i8> %arg.2 to <8 x i16>
  %32 = zext <8 x i8> %arg.1 to <8 x i16>
  %33 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  %34 = add nuw nsw <8 x i16> %31, %32
  %35 = add nuw nsw <8 x i16> %34, %30
  %36 = add nuw nsw <8 x i16> %35, %29
  %37 = add <8 x i16> %36, %33
  %38 = shl <8 x i16> %37, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %39 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %28, <8 x i16> %38) #12
  %40 = add <8 x i16> %39, %18
  %41 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %40, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %42 = trunc <8 x i16> %41 to <8 x i8>
  ret <8 x i8> %42
}

; Function Attrs: nounwind readnone willreturn
define <8 x i8> @hydride.node.sobel5x5_arm_depth1.195(<8 x i8> %arg, <8 x i8> %arg.1, <8 x i8> %arg.2, <8 x i8> %arg.3, <8 x i8> %arg.4, <8 x i8> %arg.5, <8 x i8> %arg.6, <8 x i8> %arg.7, <8 x i8> %arg.8, <8 x i8> %arg.9, <8 x i8> %arg.10, <8 x i8> %arg.11, <8 x i8> %arg.12, <8 x i8> %arg.13, <8 x i8> %arg.14, <8 x i8> %arg.15, <8 x i8> %arg.16, <8 x i8> %arg.17, <8 x i8> %arg.18, <8 x i8> %arg.19) local_unnamed_addr #14 {
entry:
  %0 = zext <8 x i8> %arg.19 to <8 x i16>
  %1 = zext <8 x i8> %arg.18 to <8 x i16>
  %2 = zext <8 x i8> %arg.17 to <8 x i16>
  %3 = zext <8 x i8> %arg.16 to <8 x i16>
  %4 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.15) #12
  %5 = add nuw nsw <8 x i16> %2, %3
  %6 = add nuw nsw <8 x i16> %5, %1
  %7 = add nuw nsw <8 x i16> %6, %0
  %8 = add <8 x i16> %7, %4
  %9 = zext <8 x i8> %arg.14 to <8 x i16>
  %10 = zext <8 x i8> %arg.13 to <8 x i16>
  %11 = zext <8 x i8> %arg.12 to <8 x i16>
  %12 = zext <8 x i8> %arg.11 to <8 x i16>
  %13 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.10) #12
  %14 = add nuw nsw <8 x i16> %11, %12
  %15 = add nuw nsw <8 x i16> %14, %10
  %16 = add nuw nsw <8 x i16> %15, %9
  %17 = add <8 x i16> %16, %13
  %18 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %8, <8 x i16> %17) #12
  %19 = zext <8 x i8> %arg.9 to <8 x i16>
  %20 = zext <8 x i8> %arg.8 to <8 x i16>
  %21 = zext <8 x i8> %arg.7 to <8 x i16>
  %22 = zext <8 x i8> %arg.6 to <8 x i16>
  %23 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.5) #12
  %24 = add nuw nsw <8 x i16> %21, %22
  %25 = add nuw nsw <8 x i16> %24, %20
  %26 = add nuw nsw <8 x i16> %25, %19
  %27 = add <8 x i16> %26, %23
  %28 = shl <8 x i16> %27, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %29 = zext <8 x i8> %arg.4 to <8 x i16>
  %30 = zext <8 x i8> %arg.3 to <8 x i16>
  %31 = zext <8 x i8> %arg.2 to <8 x i16>
  %32 = zext <8 x i8> %arg.1 to <8 x i16>
  %33 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  %34 = add nuw nsw <8 x i16> %31, %32
  %35 = add nuw nsw <8 x i16> %34, %30
  %36 = add nuw nsw <8 x i16> %35, %29
  %37 = add <8 x i16> %36, %33
  %38 = shl <8 x i16> %37, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %39 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %28, <8 x i16> %38) #12
  %40 = add <8 x i16> %39, %18
  %41 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %40, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %42 = trunc <8 x i16> %41 to <8 x i8>
  ret <8 x i8> %42
}

; Function Attrs: nounwind readnone willreturn
define <8 x i8> @hydride.node.sobel5x5_arm_depth1.196(<8 x i8> %arg, <8 x i8> %arg.1, <8 x i8> %arg.2, <8 x i8> %arg.3, <8 x i8> %arg.4, <8 x i8> %arg.5, <8 x i8> %arg.6, <8 x i8> %arg.7, <8 x i8> %arg.8, <8 x i8> %arg.9, <8 x i8> %arg.10, <8 x i8> %arg.11, <8 x i8> %arg.12, <8 x i8> %arg.13, <8 x i8> %arg.14, <8 x i8> %arg.15, <8 x i8> %arg.16, <8 x i8> %arg.17, <8 x i8> %arg.18, <8 x i8> %arg.19) local_unnamed_addr #14 {
entry:
  %0 = zext <8 x i8> %arg.19 to <8 x i16>
  %1 = zext <8 x i8> %arg.18 to <8 x i16>
  %2 = zext <8 x i8> %arg.17 to <8 x i16>
  %3 = zext <8 x i8> %arg.16 to <8 x i16>
  %4 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.15) #12
  %5 = add nuw nsw <8 x i16> %2, %3
  %6 = add nuw nsw <8 x i16> %5, %1
  %7 = add nuw nsw <8 x i16> %6, %0
  %8 = add <8 x i16> %7, %4
  %9 = zext <8 x i8> %arg.14 to <8 x i16>
  %10 = zext <8 x i8> %arg.13 to <8 x i16>
  %11 = zext <8 x i8> %arg.12 to <8 x i16>
  %12 = zext <8 x i8> %arg.11 to <8 x i16>
  %13 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.10) #12
  %14 = add nuw nsw <8 x i16> %11, %12
  %15 = add nuw nsw <8 x i16> %14, %10
  %16 = add nuw nsw <8 x i16> %15, %9
  %17 = add <8 x i16> %16, %13
  %18 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %8, <8 x i16> %17) #12
  %19 = zext <8 x i8> %arg.9 to <8 x i16>
  %20 = zext <8 x i8> %arg.8 to <8 x i16>
  %21 = zext <8 x i8> %arg.7 to <8 x i16>
  %22 = zext <8 x i8> %arg.6 to <8 x i16>
  %23 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.5) #12
  %24 = add nuw nsw <8 x i16> %21, %22
  %25 = add nuw nsw <8 x i16> %24, %20
  %26 = add nuw nsw <8 x i16> %25, %19
  %27 = add <8 x i16> %26, %23
  %28 = shl <8 x i16> %27, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %29 = zext <8 x i8> %arg.4 to <8 x i16>
  %30 = zext <8 x i8> %arg.3 to <8 x i16>
  %31 = zext <8 x i8> %arg.2 to <8 x i16>
  %32 = zext <8 x i8> %arg.1 to <8 x i16>
  %33 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  %34 = add nuw nsw <8 x i16> %31, %32
  %35 = add nuw nsw <8 x i16> %34, %30
  %36 = add nuw nsw <8 x i16> %35, %29
  %37 = add <8 x i16> %36, %33
  %38 = shl <8 x i16> %37, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %39 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %28, <8 x i16> %38) #12
  %40 = add <8 x i16> %39, %18
  %41 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %40, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %42 = trunc <8 x i16> %41 to <8 x i8>
  ret <8 x i8> %42
}

; Function Attrs: nounwind readnone willreturn
define <8 x i8> @hydride.node.sobel5x5_arm_depth1.197(<8 x i8> %arg, <8 x i8> %arg.1, <8 x i8> %arg.2, <8 x i8> %arg.3, <8 x i8> %arg.4, <8 x i8> %arg.5, <8 x i8> %arg.6, <8 x i8> %arg.7, <8 x i8> %arg.8, <8 x i8> %arg.9, <8 x i8> %arg.10, <8 x i8> %arg.11, <8 x i8> %arg.12, <8 x i8> %arg.13, <8 x i8> %arg.14, <8 x i8> %arg.15, <8 x i8> %arg.16, <8 x i8> %arg.17, <8 x i8> %arg.18, <8 x i8> %arg.19) local_unnamed_addr #14 {
entry:
  %0 = zext <8 x i8> %arg.19 to <8 x i16>
  %1 = zext <8 x i8> %arg.18 to <8 x i16>
  %2 = zext <8 x i8> %arg.17 to <8 x i16>
  %3 = zext <8 x i8> %arg.16 to <8 x i16>
  %4 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.15) #12
  %5 = add nuw nsw <8 x i16> %2, %3
  %6 = add nuw nsw <8 x i16> %5, %1
  %7 = add nuw nsw <8 x i16> %6, %0
  %8 = add <8 x i16> %7, %4
  %9 = zext <8 x i8> %arg.14 to <8 x i16>
  %10 = zext <8 x i8> %arg.13 to <8 x i16>
  %11 = zext <8 x i8> %arg.12 to <8 x i16>
  %12 = zext <8 x i8> %arg.11 to <8 x i16>
  %13 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.10) #12
  %14 = add nuw nsw <8 x i16> %11, %12
  %15 = add nuw nsw <8 x i16> %14, %10
  %16 = add nuw nsw <8 x i16> %15, %9
  %17 = add <8 x i16> %16, %13
  %18 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %8, <8 x i16> %17) #12
  %19 = zext <8 x i8> %arg.9 to <8 x i16>
  %20 = zext <8 x i8> %arg.8 to <8 x i16>
  %21 = zext <8 x i8> %arg.7 to <8 x i16>
  %22 = zext <8 x i8> %arg.6 to <8 x i16>
  %23 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.5) #12
  %24 = add nuw nsw <8 x i16> %21, %22
  %25 = add nuw nsw <8 x i16> %24, %20
  %26 = add nuw nsw <8 x i16> %25, %19
  %27 = add <8 x i16> %26, %23
  %28 = shl <8 x i16> %27, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %29 = zext <8 x i8> %arg.4 to <8 x i16>
  %30 = zext <8 x i8> %arg.3 to <8 x i16>
  %31 = zext <8 x i8> %arg.2 to <8 x i16>
  %32 = zext <8 x i8> %arg.1 to <8 x i16>
  %33 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  %34 = add nuw nsw <8 x i16> %31, %32
  %35 = add nuw nsw <8 x i16> %34, %30
  %36 = add nuw nsw <8 x i16> %35, %29
  %37 = add <8 x i16> %36, %33
  %38 = shl <8 x i16> %37, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %39 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %28, <8 x i16> %38) #12
  %40 = add <8 x i16> %39, %18
  %41 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %40, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %42 = trunc <8 x i16> %41 to <8 x i8>
  ret <8 x i8> %42
}

; Function Attrs: norecurse nounwind readnone willreturn
define <16 x i8> @hydride.node.sobel5x5_arm_depth1.198(<16 x i8> %arg, <16 x i8> %arg.1) local_unnamed_addr #13 {
entry:
  %0 = add <16 x i8> %arg.1, %arg
  ret <16 x i8> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i8> @hydride.node.sobel5x5_arm_depth1.199(<8 x i8> %arg, <8 x i8> %arg.1, <8 x i8> %arg.2, <8 x i8> %arg.3, <8 x i8> %arg.4, <8 x i8> %arg.5, <8 x i8> %arg.6, <8 x i8> %arg.7, <8 x i8> %arg.8, <8 x i8> %arg.9, <8 x i8> %arg.10, <8 x i8> %arg.11, <8 x i8> %arg.12, <8 x i8> %arg.13, <8 x i8> %arg.14, <8 x i8> %arg.15, <8 x i8> %arg.16, <8 x i8> %arg.17, <8 x i8> %arg.18, <8 x i8> %arg.19) local_unnamed_addr #14 {
entry:
  %0 = zext <8 x i8> %arg.19 to <8 x i16>
  %1 = zext <8 x i8> %arg.18 to <8 x i16>
  %2 = zext <8 x i8> %arg.17 to <8 x i16>
  %3 = zext <8 x i8> %arg.16 to <8 x i16>
  %4 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.15) #12
  %5 = add nuw nsw <8 x i16> %2, %3
  %6 = add nuw nsw <8 x i16> %5, %1
  %7 = add nuw nsw <8 x i16> %6, %0
  %8 = add <8 x i16> %7, %4
  %9 = zext <8 x i8> %arg.14 to <8 x i16>
  %10 = zext <8 x i8> %arg.13 to <8 x i16>
  %11 = zext <8 x i8> %arg.12 to <8 x i16>
  %12 = zext <8 x i8> %arg.11 to <8 x i16>
  %13 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.10) #12
  %14 = add nuw nsw <8 x i16> %11, %12
  %15 = add nuw nsw <8 x i16> %14, %10
  %16 = add nuw nsw <8 x i16> %15, %9
  %17 = add <8 x i16> %16, %13
  %18 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %8, <8 x i16> %17) #12
  %19 = zext <8 x i8> %arg.9 to <8 x i16>
  %20 = zext <8 x i8> %arg.8 to <8 x i16>
  %21 = zext <8 x i8> %arg.7 to <8 x i16>
  %22 = zext <8 x i8> %arg.6 to <8 x i16>
  %23 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.5) #12
  %24 = add nuw nsw <8 x i16> %21, %22
  %25 = add nuw nsw <8 x i16> %24, %20
  %26 = add nuw nsw <8 x i16> %25, %19
  %27 = add <8 x i16> %26, %23
  %28 = shl <8 x i16> %27, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %29 = zext <8 x i8> %arg.4 to <8 x i16>
  %30 = zext <8 x i8> %arg.3 to <8 x i16>
  %31 = zext <8 x i8> %arg.2 to <8 x i16>
  %32 = zext <8 x i8> %arg.1 to <8 x i16>
  %33 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  %34 = add nuw nsw <8 x i16> %31, %32
  %35 = add nuw nsw <8 x i16> %34, %30
  %36 = add nuw nsw <8 x i16> %35, %29
  %37 = add <8 x i16> %36, %33
  %38 = shl <8 x i16> %37, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %39 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %28, <8 x i16> %38) #12
  %40 = add <8 x i16> %39, %18
  %41 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %40, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %42 = trunc <8 x i16> %41 to <8 x i8>
  ret <8 x i8> %42
}

; Function Attrs: nounwind readnone willreturn
define <8 x i8> @hydride.node.sobel5x5_arm_depth1.200(<8 x i8> %arg, <8 x i8> %arg.1, <8 x i8> %arg.2, <8 x i8> %arg.3, <8 x i8> %arg.4, <8 x i8> %arg.5, <8 x i8> %arg.6, <8 x i8> %arg.7, <8 x i8> %arg.8, <8 x i8> %arg.9, <8 x i8> %arg.10, <8 x i8> %arg.11, <8 x i8> %arg.12, <8 x i8> %arg.13, <8 x i8> %arg.14, <8 x i8> %arg.15, <8 x i8> %arg.16, <8 x i8> %arg.17, <8 x i8> %arg.18, <8 x i8> %arg.19) local_unnamed_addr #14 {
entry:
  %0 = zext <8 x i8> %arg.19 to <8 x i16>
  %1 = zext <8 x i8> %arg.18 to <8 x i16>
  %2 = zext <8 x i8> %arg.17 to <8 x i16>
  %3 = zext <8 x i8> %arg.16 to <8 x i16>
  %4 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.15) #12
  %5 = add nuw nsw <8 x i16> %2, %3
  %6 = add nuw nsw <8 x i16> %5, %1
  %7 = add nuw nsw <8 x i16> %6, %0
  %8 = add <8 x i16> %7, %4
  %9 = zext <8 x i8> %arg.14 to <8 x i16>
  %10 = zext <8 x i8> %arg.13 to <8 x i16>
  %11 = zext <8 x i8> %arg.12 to <8 x i16>
  %12 = zext <8 x i8> %arg.11 to <8 x i16>
  %13 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.10) #12
  %14 = add nuw nsw <8 x i16> %11, %12
  %15 = add nuw nsw <8 x i16> %14, %10
  %16 = add nuw nsw <8 x i16> %15, %9
  %17 = add <8 x i16> %16, %13
  %18 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %8, <8 x i16> %17) #12
  %19 = zext <8 x i8> %arg.9 to <8 x i16>
  %20 = zext <8 x i8> %arg.8 to <8 x i16>
  %21 = zext <8 x i8> %arg.7 to <8 x i16>
  %22 = zext <8 x i8> %arg.6 to <8 x i16>
  %23 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.5) #12
  %24 = add nuw nsw <8 x i16> %21, %22
  %25 = add nuw nsw <8 x i16> %24, %20
  %26 = add nuw nsw <8 x i16> %25, %19
  %27 = add <8 x i16> %26, %23
  %28 = shl <8 x i16> %27, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %29 = zext <8 x i8> %arg.4 to <8 x i16>
  %30 = zext <8 x i8> %arg.3 to <8 x i16>
  %31 = zext <8 x i8> %arg.2 to <8 x i16>
  %32 = zext <8 x i8> %arg.1 to <8 x i16>
  %33 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  %34 = add nuw nsw <8 x i16> %31, %32
  %35 = add nuw nsw <8 x i16> %34, %30
  %36 = add nuw nsw <8 x i16> %35, %29
  %37 = add <8 x i16> %36, %33
  %38 = shl <8 x i16> %37, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %39 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %28, <8 x i16> %38) #12
  %40 = add <8 x i16> %39, %18
  %41 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %40, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %42 = trunc <8 x i16> %41 to <8 x i8>
  ret <8 x i8> %42
}

; Function Attrs: nounwind readnone willreturn
define <8 x i8> @hydride.node.sobel5x5_arm_depth1.201(<8 x i8> %arg, <8 x i8> %arg.1, <8 x i8> %arg.2, <8 x i8> %arg.3, <8 x i8> %arg.4, <8 x i8> %arg.5, <8 x i8> %arg.6, <8 x i8> %arg.7, <8 x i8> %arg.8, <8 x i8> %arg.9, <8 x i8> %arg.10, <8 x i8> %arg.11, <8 x i8> %arg.12, <8 x i8> %arg.13, <8 x i8> %arg.14, <8 x i8> %arg.15, <8 x i8> %arg.16, <8 x i8> %arg.17, <8 x i8> %arg.18, <8 x i8> %arg.19) local_unnamed_addr #14 {
entry:
  %0 = zext <8 x i8> %arg.19 to <8 x i16>
  %1 = zext <8 x i8> %arg.18 to <8 x i16>
  %2 = zext <8 x i8> %arg.17 to <8 x i16>
  %3 = zext <8 x i8> %arg.16 to <8 x i16>
  %4 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.15) #12
  %5 = add nuw nsw <8 x i16> %2, %3
  %6 = add nuw nsw <8 x i16> %5, %1
  %7 = add nuw nsw <8 x i16> %6, %0
  %8 = add <8 x i16> %7, %4
  %9 = zext <8 x i8> %arg.14 to <8 x i16>
  %10 = zext <8 x i8> %arg.13 to <8 x i16>
  %11 = zext <8 x i8> %arg.12 to <8 x i16>
  %12 = zext <8 x i8> %arg.11 to <8 x i16>
  %13 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.10) #12
  %14 = add nuw nsw <8 x i16> %11, %12
  %15 = add nuw nsw <8 x i16> %14, %10
  %16 = add nuw nsw <8 x i16> %15, %9
  %17 = add <8 x i16> %16, %13
  %18 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %8, <8 x i16> %17) #12
  %19 = zext <8 x i8> %arg.9 to <8 x i16>
  %20 = zext <8 x i8> %arg.8 to <8 x i16>
  %21 = zext <8 x i8> %arg.7 to <8 x i16>
  %22 = zext <8 x i8> %arg.6 to <8 x i16>
  %23 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.5) #12
  %24 = add nuw nsw <8 x i16> %21, %22
  %25 = add nuw nsw <8 x i16> %24, %20
  %26 = add nuw nsw <8 x i16> %25, %19
  %27 = add <8 x i16> %26, %23
  %28 = shl <8 x i16> %27, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %29 = zext <8 x i8> %arg.4 to <8 x i16>
  %30 = zext <8 x i8> %arg.3 to <8 x i16>
  %31 = zext <8 x i8> %arg.2 to <8 x i16>
  %32 = zext <8 x i8> %arg.1 to <8 x i16>
  %33 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  %34 = add nuw nsw <8 x i16> %31, %32
  %35 = add nuw nsw <8 x i16> %34, %30
  %36 = add nuw nsw <8 x i16> %35, %29
  %37 = add <8 x i16> %36, %33
  %38 = shl <8 x i16> %37, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %39 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %28, <8 x i16> %38) #12
  %40 = add <8 x i16> %39, %18
  %41 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %40, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %42 = trunc <8 x i16> %41 to <8 x i8>
  ret <8 x i8> %42
}

; Function Attrs: nounwind readnone willreturn
define <8 x i8> @hydride.node.sobel5x5_arm_depth1.202(<8 x i8> %arg, <8 x i8> %arg.1, <8 x i8> %arg.2, <8 x i8> %arg.3, <8 x i8> %arg.4, <8 x i8> %arg.5, <8 x i8> %arg.6, <8 x i8> %arg.7, <8 x i8> %arg.8, <8 x i8> %arg.9, <8 x i8> %arg.10, <8 x i8> %arg.11, <8 x i8> %arg.12, <8 x i8> %arg.13, <8 x i8> %arg.14, <8 x i8> %arg.15, <8 x i8> %arg.16, <8 x i8> %arg.17, <8 x i8> %arg.18, <8 x i8> %arg.19) local_unnamed_addr #14 {
entry:
  %0 = zext <8 x i8> %arg.19 to <8 x i16>
  %1 = zext <8 x i8> %arg.18 to <8 x i16>
  %2 = zext <8 x i8> %arg.17 to <8 x i16>
  %3 = zext <8 x i8> %arg.16 to <8 x i16>
  %4 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.15) #12
  %5 = add nuw nsw <8 x i16> %2, %3
  %6 = add nuw nsw <8 x i16> %5, %1
  %7 = add nuw nsw <8 x i16> %6, %0
  %8 = add <8 x i16> %7, %4
  %9 = zext <8 x i8> %arg.14 to <8 x i16>
  %10 = zext <8 x i8> %arg.13 to <8 x i16>
  %11 = zext <8 x i8> %arg.12 to <8 x i16>
  %12 = zext <8 x i8> %arg.11 to <8 x i16>
  %13 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.10) #12
  %14 = add nuw nsw <8 x i16> %11, %12
  %15 = add nuw nsw <8 x i16> %14, %10
  %16 = add nuw nsw <8 x i16> %15, %9
  %17 = add <8 x i16> %16, %13
  %18 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %8, <8 x i16> %17) #12
  %19 = zext <8 x i8> %arg.9 to <8 x i16>
  %20 = zext <8 x i8> %arg.8 to <8 x i16>
  %21 = zext <8 x i8> %arg.7 to <8 x i16>
  %22 = zext <8 x i8> %arg.6 to <8 x i16>
  %23 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.5) #12
  %24 = add nuw nsw <8 x i16> %21, %22
  %25 = add nuw nsw <8 x i16> %24, %20
  %26 = add nuw nsw <8 x i16> %25, %19
  %27 = add <8 x i16> %26, %23
  %28 = shl <8 x i16> %27, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %29 = zext <8 x i8> %arg.4 to <8 x i16>
  %30 = zext <8 x i8> %arg.3 to <8 x i16>
  %31 = zext <8 x i8> %arg.2 to <8 x i16>
  %32 = zext <8 x i8> %arg.1 to <8 x i16>
  %33 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  %34 = add nuw nsw <8 x i16> %31, %32
  %35 = add nuw nsw <8 x i16> %34, %30
  %36 = add nuw nsw <8 x i16> %35, %29
  %37 = add <8 x i16> %36, %33
  %38 = shl <8 x i16> %37, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %39 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %28, <8 x i16> %38) #12
  %40 = add <8 x i16> %39, %18
  %41 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %40, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %42 = trunc <8 x i16> %41 to <8 x i8>
  ret <8 x i8> %42
}

; Function Attrs: norecurse nounwind readnone willreturn
define <16 x i8> @hydride.node.sobel5x5_arm_depth1.203(<16 x i8> %arg, <16 x i8> %arg.1) local_unnamed_addr #13 {
entry:
  %0 = add <16 x i8> %arg.1, %arg
  ret <16 x i8> %0
}

; Function Attrs: nounwind readnone willreturn
define <8 x i8> @hydride.node.sobel5x5_arm_depth1.204(<8 x i8> %arg, <8 x i8> %arg.1, <8 x i8> %arg.2, <8 x i8> %arg.3, <8 x i8> %arg.4, <8 x i8> %arg.5, <8 x i8> %arg.6, <8 x i8> %arg.7, <8 x i8> %arg.8, <8 x i8> %arg.9, <8 x i8> %arg.10, <8 x i8> %arg.11, <8 x i8> %arg.12, <8 x i8> %arg.13, <8 x i8> %arg.14, <8 x i8> %arg.15, <8 x i8> %arg.16, <8 x i8> %arg.17, <8 x i8> %arg.18, <8 x i8> %arg.19) local_unnamed_addr #14 {
entry:
  %0 = zext <8 x i8> %arg.19 to <8 x i16>
  %1 = zext <8 x i8> %arg.18 to <8 x i16>
  %2 = zext <8 x i8> %arg.17 to <8 x i16>
  %3 = zext <8 x i8> %arg.16 to <8 x i16>
  %4 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.15) #12
  %5 = add nuw nsw <8 x i16> %2, %3
  %6 = add nuw nsw <8 x i16> %5, %1
  %7 = add nuw nsw <8 x i16> %6, %0
  %8 = add <8 x i16> %7, %4
  %9 = zext <8 x i8> %arg.14 to <8 x i16>
  %10 = zext <8 x i8> %arg.13 to <8 x i16>
  %11 = zext <8 x i8> %arg.12 to <8 x i16>
  %12 = zext <8 x i8> %arg.11 to <8 x i16>
  %13 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.10) #12
  %14 = add nuw nsw <8 x i16> %11, %12
  %15 = add nuw nsw <8 x i16> %14, %10
  %16 = add nuw nsw <8 x i16> %15, %9
  %17 = add <8 x i16> %16, %13
  %18 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %8, <8 x i16> %17) #12
  %19 = zext <8 x i8> %arg.9 to <8 x i16>
  %20 = zext <8 x i8> %arg.8 to <8 x i16>
  %21 = zext <8 x i8> %arg.7 to <8 x i16>
  %22 = zext <8 x i8> %arg.6 to <8 x i16>
  %23 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.5) #12
  %24 = add nuw nsw <8 x i16> %21, %22
  %25 = add nuw nsw <8 x i16> %24, %20
  %26 = add nuw nsw <8 x i16> %25, %19
  %27 = add <8 x i16> %26, %23
  %28 = shl <8 x i16> %27, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %29 = zext <8 x i8> %arg.4 to <8 x i16>
  %30 = zext <8 x i8> %arg.3 to <8 x i16>
  %31 = zext <8 x i8> %arg.2 to <8 x i16>
  %32 = zext <8 x i8> %arg.1 to <8 x i16>
  %33 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  %34 = add nuw nsw <8 x i16> %31, %32
  %35 = add nuw nsw <8 x i16> %34, %30
  %36 = add nuw nsw <8 x i16> %35, %29
  %37 = add <8 x i16> %36, %33
  %38 = shl <8 x i16> %37, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %39 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %28, <8 x i16> %38) #12
  %40 = add <8 x i16> %39, %18
  %41 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %40, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %42 = trunc <8 x i16> %41 to <8 x i8>
  ret <8 x i8> %42
}

; Function Attrs: nounwind readnone willreturn
define <8 x i8> @hydride.node.sobel5x5_arm_depth1.205(<8 x i8> %arg, <8 x i8> %arg.1, <8 x i8> %arg.2, <8 x i8> %arg.3, <8 x i8> %arg.4, <8 x i8> %arg.5, <8 x i8> %arg.6, <8 x i8> %arg.7, <8 x i8> %arg.8, <8 x i8> %arg.9, <8 x i8> %arg.10, <8 x i8> %arg.11, <8 x i8> %arg.12, <8 x i8> %arg.13, <8 x i8> %arg.14, <8 x i8> %arg.15, <8 x i8> %arg.16, <8 x i8> %arg.17, <8 x i8> %arg.18, <8 x i8> %arg.19) local_unnamed_addr #14 {
entry:
  %0 = zext <8 x i8> %arg.19 to <8 x i16>
  %1 = zext <8 x i8> %arg.18 to <8 x i16>
  %2 = zext <8 x i8> %arg.17 to <8 x i16>
  %3 = zext <8 x i8> %arg.16 to <8 x i16>
  %4 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.15) #12
  %5 = add nuw nsw <8 x i16> %2, %3
  %6 = add nuw nsw <8 x i16> %5, %1
  %7 = add nuw nsw <8 x i16> %6, %0
  %8 = add <8 x i16> %7, %4
  %9 = zext <8 x i8> %arg.14 to <8 x i16>
  %10 = zext <8 x i8> %arg.13 to <8 x i16>
  %11 = zext <8 x i8> %arg.12 to <8 x i16>
  %12 = zext <8 x i8> %arg.11 to <8 x i16>
  %13 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.10) #12
  %14 = add nuw nsw <8 x i16> %11, %12
  %15 = add nuw nsw <8 x i16> %14, %10
  %16 = add nuw nsw <8 x i16> %15, %9
  %17 = add <8 x i16> %16, %13
  %18 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %8, <8 x i16> %17) #12
  %19 = zext <8 x i8> %arg.9 to <8 x i16>
  %20 = zext <8 x i8> %arg.8 to <8 x i16>
  %21 = zext <8 x i8> %arg.7 to <8 x i16>
  %22 = zext <8 x i8> %arg.6 to <8 x i16>
  %23 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.5) #12
  %24 = add nuw nsw <8 x i16> %21, %22
  %25 = add nuw nsw <8 x i16> %24, %20
  %26 = add nuw nsw <8 x i16> %25, %19
  %27 = add <8 x i16> %26, %23
  %28 = shl <8 x i16> %27, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %29 = zext <8 x i8> %arg.4 to <8 x i16>
  %30 = zext <8 x i8> %arg.3 to <8 x i16>
  %31 = zext <8 x i8> %arg.2 to <8 x i16>
  %32 = zext <8 x i8> %arg.1 to <8 x i16>
  %33 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  %34 = add nuw nsw <8 x i16> %31, %32
  %35 = add nuw nsw <8 x i16> %34, %30
  %36 = add nuw nsw <8 x i16> %35, %29
  %37 = add <8 x i16> %36, %33
  %38 = shl <8 x i16> %37, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %39 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %28, <8 x i16> %38) #12
  %40 = add <8 x i16> %39, %18
  %41 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %40, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %42 = trunc <8 x i16> %41 to <8 x i8>
  ret <8 x i8> %42
}

; Function Attrs: nounwind readnone willreturn
define <8 x i8> @hydride.node.sobel5x5_arm_depth1.206(<8 x i8> %arg, <8 x i8> %arg.1, <8 x i8> %arg.2, <8 x i8> %arg.3, <8 x i8> %arg.4, <8 x i8> %arg.5, <8 x i8> %arg.6, <8 x i8> %arg.7, <8 x i8> %arg.8, <8 x i8> %arg.9, <8 x i8> %arg.10, <8 x i8> %arg.11, <8 x i8> %arg.12, <8 x i8> %arg.13, <8 x i8> %arg.14, <8 x i8> %arg.15, <8 x i8> %arg.16, <8 x i8> %arg.17, <8 x i8> %arg.18, <8 x i8> %arg.19) local_unnamed_addr #14 {
entry:
  %0 = zext <8 x i8> %arg.19 to <8 x i16>
  %1 = zext <8 x i8> %arg.18 to <8 x i16>
  %2 = zext <8 x i8> %arg.17 to <8 x i16>
  %3 = zext <8 x i8> %arg.16 to <8 x i16>
  %4 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.15) #12
  %5 = add nuw nsw <8 x i16> %2, %3
  %6 = add nuw nsw <8 x i16> %5, %1
  %7 = add nuw nsw <8 x i16> %6, %0
  %8 = add <8 x i16> %7, %4
  %9 = zext <8 x i8> %arg.14 to <8 x i16>
  %10 = zext <8 x i8> %arg.13 to <8 x i16>
  %11 = zext <8 x i8> %arg.12 to <8 x i16>
  %12 = zext <8 x i8> %arg.11 to <8 x i16>
  %13 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.10) #12
  %14 = add nuw nsw <8 x i16> %11, %12
  %15 = add nuw nsw <8 x i16> %14, %10
  %16 = add nuw nsw <8 x i16> %15, %9
  %17 = add <8 x i16> %16, %13
  %18 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %8, <8 x i16> %17) #12
  %19 = zext <8 x i8> %arg.9 to <8 x i16>
  %20 = zext <8 x i8> %arg.8 to <8 x i16>
  %21 = zext <8 x i8> %arg.7 to <8 x i16>
  %22 = zext <8 x i8> %arg.6 to <8 x i16>
  %23 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.5) #12
  %24 = add nuw nsw <8 x i16> %21, %22
  %25 = add nuw nsw <8 x i16> %24, %20
  %26 = add nuw nsw <8 x i16> %25, %19
  %27 = add <8 x i16> %26, %23
  %28 = shl <8 x i16> %27, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %29 = zext <8 x i8> %arg.4 to <8 x i16>
  %30 = zext <8 x i8> %arg.3 to <8 x i16>
  %31 = zext <8 x i8> %arg.2 to <8 x i16>
  %32 = zext <8 x i8> %arg.1 to <8 x i16>
  %33 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  %34 = add nuw nsw <8 x i16> %31, %32
  %35 = add nuw nsw <8 x i16> %34, %30
  %36 = add nuw nsw <8 x i16> %35, %29
  %37 = add <8 x i16> %36, %33
  %38 = shl <8 x i16> %37, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %39 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %28, <8 x i16> %38) #12
  %40 = add <8 x i16> %39, %18
  %41 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %40, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %42 = trunc <8 x i16> %41 to <8 x i8>
  ret <8 x i8> %42
}

; Function Attrs: nounwind readnone willreturn
define <8 x i8> @hydride.node.sobel5x5_arm_depth1.207(<8 x i8> %arg, <8 x i8> %arg.1, <8 x i8> %arg.2, <8 x i8> %arg.3, <8 x i8> %arg.4, <8 x i8> %arg.5, <8 x i8> %arg.6, <8 x i8> %arg.7, <8 x i8> %arg.8, <8 x i8> %arg.9, <8 x i8> %arg.10, <8 x i8> %arg.11, <8 x i8> %arg.12, <8 x i8> %arg.13, <8 x i8> %arg.14, <8 x i8> %arg.15, <8 x i8> %arg.16, <8 x i8> %arg.17, <8 x i8> %arg.18, <8 x i8> %arg.19) local_unnamed_addr #14 {
entry:
  %0 = zext <8 x i8> %arg.19 to <8 x i16>
  %1 = zext <8 x i8> %arg.18 to <8 x i16>
  %2 = zext <8 x i8> %arg.17 to <8 x i16>
  %3 = zext <8 x i8> %arg.16 to <8 x i16>
  %4 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.15) #12
  %5 = add nuw nsw <8 x i16> %2, %3
  %6 = add nuw nsw <8 x i16> %5, %1
  %7 = add nuw nsw <8 x i16> %6, %0
  %8 = add <8 x i16> %7, %4
  %9 = zext <8 x i8> %arg.14 to <8 x i16>
  %10 = zext <8 x i8> %arg.13 to <8 x i16>
  %11 = zext <8 x i8> %arg.12 to <8 x i16>
  %12 = zext <8 x i8> %arg.11 to <8 x i16>
  %13 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.10) #12
  %14 = add nuw nsw <8 x i16> %11, %12
  %15 = add nuw nsw <8 x i16> %14, %10
  %16 = add nuw nsw <8 x i16> %15, %9
  %17 = add <8 x i16> %16, %13
  %18 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %8, <8 x i16> %17) #12
  %19 = zext <8 x i8> %arg.9 to <8 x i16>
  %20 = zext <8 x i8> %arg.8 to <8 x i16>
  %21 = zext <8 x i8> %arg.7 to <8 x i16>
  %22 = zext <8 x i8> %arg.6 to <8 x i16>
  %23 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg.5) #12
  %24 = add nuw nsw <8 x i16> %21, %22
  %25 = add nuw nsw <8 x i16> %24, %20
  %26 = add nuw nsw <8 x i16> %25, %19
  %27 = add <8 x i16> %26, %23
  %28 = shl <8 x i16> %27, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %29 = zext <8 x i8> %arg.4 to <8 x i16>
  %30 = zext <8 x i8> %arg.3 to <8 x i16>
  %31 = zext <8 x i8> %arg.2 to <8 x i16>
  %32 = zext <8 x i8> %arg.1 to <8 x i16>
  %33 = tail call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <8 x i8> %arg) #12
  %34 = add nuw nsw <8 x i16> %31, %32
  %35 = add nuw nsw <8 x i16> %34, %30
  %36 = add nuw nsw <8 x i16> %35, %29
  %37 = add <8 x i16> %36, %33
  %38 = shl <8 x i16> %37, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %39 = tail call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %28, <8 x i16> %38) #12
  %40 = add <8 x i16> %39, %18
  %41 = tail call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %40, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #12
  %42 = trunc <8 x i16> %41 to <8 x i8>
  ret <8 x i8> %42
}

; Function Attrs: nofree nosync nounwind readnone willreturn
declare i64 @llvm.vector.reduce.add.v2i64(<2 x i64>) #10

attributes #0 = { nounwind mustprogress "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-builtins" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind willreturn mustprogress "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nofree nosync nounwind willreturn }
attributes #4 = { nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nofree nosync nounwind willreturn writeonly }
attributes #6 = { alwaysinline nounwind willreturn mustprogress "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #8 = { inaccessiblemem_or_argmemonly nofree nosync nounwind willreturn }
attributes #9 = { nounwind willreturn "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nofree nosync nounwind readnone willreturn }
attributes #11 = { nounwind "reciprocal-estimates"="none" }
attributes #12 = { nounwind }
attributes #13 = { norecurse nounwind readnone willreturn }
attributes #14 = { nounwind readnone willreturn }
attributes #15 = { nobuiltin nounwind "no-builtins" }
attributes #16 = { nobuiltin "no-builtins" }
attributes #17 = { noinline }

!llvm.module.flags = !{!0, !1, !2, !3, !4, !5, !6, !7, !8, !9, !10, !11, !12}
!llvm.ident = !{!13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 2, !"halide_use_soft_float_abi", i32 0}
!3 = !{i32 2, !"halide_mcpu", !"apple-a12"}
!4 = !{i32 2, !"halide_mattrs", !"+reserve-x18"}
!5 = !{i32 2, !"halide_mabi", !""}
!6 = !{i32 2, !"halide_use_pic", i32 1}
!7 = !{i32 2, !"halide_use_large_code_model", i32 0}
!8 = !{i32 2, !"halide_per_instruction_fast_math_flags", i32 0}
!9 = !{i32 1, !"branch-target-enforcement", i32 0}
!10 = !{i32 1, !"sign-return-address", i32 0}
!11 = !{i32 1, !"sign-return-address-all", i32 0}
!12 = !{i32 1, !"sign-return-address-with-bkey", i32 0}
!13 = !{!"clang version 12.0.1 (https://github.com/llvm/llvm-project.git fed41342a82f5a3a9201819a82bf7a48313e296b)"}
!14 = !{!15, !15, i64 0}
!15 = !{!"any pointer", !16, i64 0}
!16 = !{!"omnipotent char", !17, i64 0}
!17 = !{!"Simple C++ TBAA"}
!18 = !{!16, !16, i64 0}
!19 = !{!20, !20, i64 0}
!20 = !{!"bool", !16, i64 0}
!21 = !{i8 0, i8 2}
!22 = !{!23, !23, i64 0}
!23 = !{!"long long", !16, i64 0}
!24 = !{!25, !26, i64 0}
!25 = !{!"_ZTS18mach_timebase_info", !26, i64 0, !26, i64 4}
!26 = !{!"int", !16, i64 0}
!27 = !{!25, !26, i64 4}
!28 = !{!29, !15, i64 0}
!29 = !{!"_ZTSN6Halide7Runtime8Internal4workE", !30, i64 0, !15, i64 56, !15, i64 64, !15, i64 72, !26, i64 80, !15, i64 88, !26, i64 96, !15, i64 104, !26, i64 112, !26, i64 116, !26, i64 120, !20, i64 124}
!30 = !{!"_ZTS22halide_parallel_task_t", !15, i64 0, !15, i64 8, !15, i64 16, !15, i64 24, !26, i64 32, !26, i64 36, !26, i64 40, !26, i64 44, !20, i64 48}
!31 = !{!29, !26, i64 36}
!32 = !{!29, !26, i64 40}
!33 = !{!29, !20, i64 48}
!34 = !{!29, !15, i64 24}
!35 = !{!29, !26, i64 32}
!36 = !{!29, !15, i64 8}
!37 = !{!29, !26, i64 44}
!38 = !{!29, !15, i64 16}
!39 = !{!29, !15, i64 56}
!40 = !{!29, !15, i64 104}
!41 = !{!26, !26, i64 0}
!42 = !{!29, !26, i64 120}
!43 = !{!29, !20, i64 124}
!44 = !{!29, !15, i64 72}
!45 = !{!29, !26, i64 80}
!46 = !{!29, !15, i64 88}
!47 = !{!29, !26, i64 116}
!48 = !{!49, !49, i64 0}
!49 = !{!"vtable pointer", !17, i64 0}
!50 = !{!51, !15, i64 8}
!51 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE", !15, i64 8}
!52 = !{!53, !20, i64 2121}
!53 = !{!"_ZTSN6Halide7Runtime8Internal12work_queue_tE", !54, i64 0, !26, i64 8, !26, i64 12, !15, i64 16, !26, i64 24, !26, i64 28, !26, i64 32, !55, i64 40, !55, i64 48, !55, i64 56, !26, i64 64, !26, i64 68, !16, i64 72, !20, i64 2120, !20, i64 2121, !26, i64 2124}
!54 = !{!"_ZTS12halide_mutex", !16, i64 0}
!55 = !{!"_ZTS11halide_cond", !16, i64 0}
!56 = distinct !{!56, !57}
!57 = !{!"llvm.loop.mustprogress"}
!58 = !{!53, !26, i64 8}
!59 = distinct !{!59, !57}
!60 = !{!53, !26, i64 24}
!61 = !{!53, !26, i64 2124}
!62 = !{!53, !26, i64 28}
!63 = distinct !{!63, !57}
!64 = !{!29, !26, i64 112}
!65 = !{!29, !26, i64 96}
!66 = !{!53, !15, i64 16}
!67 = !{!29, !15, i64 64}
!68 = distinct !{!68, !57, !69}
!69 = !{!"llvm.loop.isvectorized", i32 1}
!70 = !{!53, !26, i64 68}
!71 = !{!53, !26, i64 32}
!72 = distinct !{!72, !57, !69}
!73 = !{!53, !20, i64 2120}
!74 = distinct !{!74, !57}
!75 = !{!76, !15, i64 0}
!76 = !{!"_ZTS26halide_semaphore_acquire_t", !15, i64 0, !26, i64 8}
!77 = !{!76, !26, i64 8}
!78 = distinct !{!78, !57}
!79 = !{!53, !26, i64 64}
!80 = distinct !{!80, !57}
!81 = distinct !{!81, !57}
!82 = !{i64 0, i64 8, !14, i64 8, i64 8, !14, i64 16, i64 8, !14, i64 24, i64 8, !14, i64 32, i64 4, !41, i64 36, i64 4, !41, i64 40, i64 4, !41, i64 44, i64 4, !41, i64 48, i64 1, !19, i64 56, i64 8, !14, i64 64, i64 8, !14, i64 72, i64 8, !14, i64 80, i64 4, !41, i64 88, i64 8, !14, i64 96, i64 4, !41, i64 104, i64 8, !14, i64 112, i64 4, !41, i64 116, i64 4, !41, i64 120, i64 4, !41, i64 124, i64 1, !19}
!83 = !{i64 0, i64 8, !14, i64 8, i64 8, !14, i64 16, i64 8, !14, i64 24, i64 4, !41, i64 28, i64 4, !41, i64 32, i64 4, !41, i64 36, i64 4, !41, i64 40, i64 1, !19, i64 48, i64 8, !14, i64 56, i64 8, !14, i64 64, i64 8, !14, i64 72, i64 4, !41, i64 80, i64 8, !14, i64 88, i64 4, !41, i64 96, i64 8, !14, i64 104, i64 4, !41, i64 108, i64 4, !41, i64 112, i64 4, !41, i64 116, i64 1, !19}
!84 = !{i64 0, i64 8, !14, i64 8, i64 8, !14, i64 16, i64 8, !14, i64 24, i64 4, !41, i64 32, i64 8, !14, i64 40, i64 4, !41, i64 48, i64 8, !14, i64 56, i64 4, !41, i64 60, i64 4, !41, i64 64, i64 4, !41, i64 68, i64 1, !19}
!85 = !{i64 0, i64 8, !14, i64 8, i64 4, !41, i64 12, i64 4, !41, i64 16, i64 4, !41, i64 20, i64 1, !19}
!86 = distinct !{!86, !57}
!87 = distinct !{!87, !57}
!88 = !{!89, !15, i64 144}
!89 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization10queue_dataE", !90, i64 0, !23, i64 136, !15, i64 144, !23, i64 152}
!90 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization13thread_parkerE", !91, i64 0, !92, i64 64, !20, i64 128}
!91 = !{!"_ZTS15pthread_mutex_t", !16, i64 0}
!92 = !{!"_ZTS14pthread_cond_t", !16, i64 0}
!93 = !{!94, !15, i64 16}
!94 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization11hash_bucketE", !95, i64 0, !15, i64 8, !15, i64 16}
!95 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization9word_lockE", !23, i64 0}
!96 = distinct !{!96, !57}
!97 = !{!89, !23, i64 152}
!98 = !{!90, !20, i64 128}
!99 = distinct !{!99, !57}
!100 = !{!101, !15, i64 152}
!101 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization20word_lock_queue_dataE", !90, i64 0, !15, i64 136, !15, i64 144, !15, i64 152}
!102 = !{!101, !15, i64 136}
!103 = !{!101, !15, i64 144}
!104 = distinct !{!104, !57}
!105 = distinct !{!105, !57}
!106 = distinct !{!106, !57}
!107 = !{!108, !15, i64 8}
!108 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization25broadcast_parking_controlE", !15, i64 8, !15, i64 16}
!109 = !{!108, !15, i64 16}
!110 = !{!111, !15, i64 8}
!111 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization20wait_parking_controlE", !15, i64 8, !15, i64 16}
!112 = !{!111, !15, i64 16}
!113 = !{!89, !23, i64 136}
!114 = !{!115, !20, i64 0}
!115 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization15validate_actionE", !20, i64 0, !23, i64 8}
!116 = !{!115, !23, i64 8}
!117 = !{!94, !15, i64 8}
!118 = !{!119, !15, i64 0}
!119 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization11bucket_pairE", !15, i64 0, !15, i64 8}
!120 = distinct !{!120, !57}
!121 = !{!119, !15, i64 8}
!122 = !{!123, !15, i64 0}
!123 = !{!"_ZTSN6Halide7Runtime8Internal14spawned_threadE", !15, i64 0, !15, i64 8, !124, i64 16}
!124 = !{!"long", !16, i64 0}
!125 = !{!123, !15, i64 8}
!126 = !{!123, !124, i64 16}
!127 = !{!30, !26, i64 40}
!128 = !{i64 0, i64 8, !14, i64 8, i64 8, !14, i64 16, i64 8, !14, i64 24, i64 8, !14, i64 32, i64 4, !41, i64 36, i64 4, !41, i64 40, i64 4, !41, i64 44, i64 4, !41, i64 48, i64 1, !19}
!129 = distinct !{!129, !57}
!130 = distinct !{!130, !57}
!131 = distinct !{!131, !57}
!132 = !{!133, !15, i64 8}
!133 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization22signal_parking_controlE", !15, i64 8, !15, i64 16}
!134 = !{!133, !15, i64 16}
!135 = !{!136, !15, i64 0}
!136 = !{!"_ZTS18halide_mutex_array", !15, i64 0}
!137 = distinct !{!137, !57}
!138 = !{!139, !142, i64 34}
!139 = !{!"_ZTS20halide_trace_event_t", !15, i64 0, !15, i64 8, !15, i64 16, !15, i64 24, !140, i64 32, !143, i64 36, !26, i64 40, !26, i64 44, !26, i64 48}
!140 = !{!"_ZTS13halide_type_t", !141, i64 0, !16, i64 1, !142, i64 2}
!141 = !{!"_ZTS18halide_type_code_t", !16, i64 0}
!142 = !{!"short", !16, i64 0}
!143 = !{!"_ZTS25halide_trace_event_code_t", !16, i64 0}
!144 = !{!140, !16, i64 1}
!145 = !{!139, !26, i64 48}
!146 = !{!139, !15, i64 0}
!147 = !{!139, !15, i64 24}
!148 = !{!149, !26, i64 0}
!149 = !{!"_ZTSN6Halide7Runtime8Internal23SharedExclusiveSpinLockE", !26, i64 0}
!150 = !{!151, !26, i64 4}
!151 = !{!"_ZTSN6Halide7Runtime8Internal11TraceBufferE", !149, i64 0, !26, i64 4, !26, i64 8, !16, i64 12}
!152 = !{!151, !26, i64 8}
!153 = distinct !{!153, !57}
!154 = !{!155, !26, i64 0}
!155 = !{!"_ZTS21halide_trace_packet_t", !26, i64 0, !26, i64 4, !140, i64 8, !143, i64 12, !26, i64 16, !26, i64 20, !26, i64 24}
!156 = !{!155, !26, i64 4}
!157 = !{!139, !15, i64 16}
!158 = !{!139, !15, i64 8}
!159 = !{!155, !26, i64 24}
!160 = !{!155, !142, i64 10}
!161 = distinct !{!161, !57}
!162 = !{!139, !143, i64 36}
!163 = !{!139, !16, i64 33}
!164 = distinct !{!164, !57}
!165 = !{!139, !26, i64 44}
!166 = distinct !{!166, !57, !167}
!167 = !{!"llvm.loop.peeled.count", i32 1}
!168 = !{!139, !141, i64 32}
!169 = !{!142, !142, i64 0}
!170 = !{!171, !171, i64 0}
!171 = !{!"float", !16, i64 0}
!172 = !{!173, !173, i64 0}
!173 = !{!"double", !16, i64 0}
!174 = distinct !{!174, !57, !167}
!175 = distinct !{!175, !57}
!176 = !{!139, !26, i64 40}
!177 = distinct !{!177, !57}
!178 = distinct !{!178, !57}
!179 = distinct !{!179, !57}
!180 = !{!181, !15, i64 16}
!181 = !{!"_ZTS15halide_buffer_t", !23, i64 0, !15, i64 8, !15, i64 16, !23, i64 24, !140, i64 32, !26, i64 36, !15, i64 40, !15, i64 48}
!182 = !{!181, !23, i64 0}
!183 = !{!181, !26, i64 36}
!184 = !{!181, !15, i64 40}
!185 = !{!186, !26, i64 8}
!186 = !{!"_ZTS18halide_dimension_t", !26, i64 0, !26, i64 4, !26, i64 8, !26, i64 12}
!187 = distinct !{!187, !57, !69}
!188 = !{i64 0, i64 4, !41, i64 4, i64 4, !41, i64 8, i64 4, !41, i64 12, i64 4, !41}
!189 = !{!186, !26, i64 4}
!190 = distinct !{!190, !57}
!191 = distinct !{!191, !57, !69}
!192 = !{!193, !142, i64 0}
!193 = !{!"_ZTSN6Halide7Runtime8Internal18halide_tiff_headerE", !142, i64 0, !142, i64 2, !26, i64 4, !142, i64 8, !16, i64 10, !26, i64 190, !16, i64 194, !16, i64 202}
!194 = !{!193, !142, i64 2}
!195 = !{!193, !26, i64 4}
!196 = !{!193, !142, i64 8}
!197 = !{!198, !142, i64 0}
!198 = !{!"_ZTSN6Halide7Runtime8Internal8tiff_tagE", !142, i64 0, !142, i64 2, !26, i64 4, !16, i64 8}
!199 = !{!198, !142, i64 2}
!200 = !{!198, !26, i64 4}
!201 = distinct !{!201, !57}
!202 = distinct !{!202, !57}
!203 = distinct !{!203, !57}
!204 = distinct !{!204, !57}
!205 = distinct !{!205, !57}
!206 = !{!207}
!207 = distinct !{!207, !208}
!208 = distinct !{!208, !"LVerDomain"}
!209 = !{!210}
!210 = distinct !{!210, !208}
!211 = distinct !{!211, !57, !69}
!212 = distinct !{!212, !57, !69}
!213 = distinct !{!213, !57, !69}
!214 = distinct !{!214, !57, !69}
!215 = distinct !{!215, !57, !216, !69}
!216 = !{!"llvm.loop.unroll.runtime.disable"}
!217 = distinct !{!217, !57, !69}
!218 = distinct !{!218, !57, !69}
!219 = distinct !{!219, !57, !69}
!220 = distinct !{!220, !57, !69}
!221 = !{!186, !26, i64 0}
!222 = distinct !{!222, !57}
!223 = distinct !{!223, !57, !69}
!224 = distinct !{!224, !57, !216, !69}
!225 = distinct !{!225, !57}
!226 = distinct !{!226, !57}
!227 = distinct !{!227, !57}
!228 = distinct !{!228, !57}
!229 = !{!230, !15, i64 0}
!230 = !{!"_ZTSN6Halide7Runtime8Internal10CacheEntryE", !15, i64 0, !15, i64 8, !15, i64 16, !15, i64 24, !124, i64 32, !15, i64 40, !26, i64 48, !26, i64 52, !26, i64 56, !26, i64 60, !15, i64 64, !15, i64 72, !23, i64 80, !20, i64 88}
!231 = distinct !{!231, !57}
!232 = !{!230, !26, i64 56}
!233 = !{!230, !15, i64 24}
!234 = !{!230, !15, i64 72}
!235 = distinct !{!235, !57}
!236 = distinct !{!236, !57}
!237 = !{!238, !23, i64 0}
!238 = !{!"_ZTSN6Halide7Runtime8Internal11device_copyE", !23, i64 0, !23, i64 8, !23, i64 16, !16, i64 24, !16, i64 152, !16, i64 280, !23, i64 408}
!239 = !{!238, !23, i64 8}
!240 = !{!238, !23, i64 408}
!241 = distinct !{!241, !57}
!242 = !{!238, !23, i64 16}
!243 = distinct !{!243, !57, !69}
!244 = distinct !{!244, !57, !216, !69}
!245 = distinct !{!245, !57}
!246 = distinct !{!246, !57}
!247 = distinct !{!247, !57}
!248 = distinct !{!248, !57}
!249 = !{i64 0, i64 8, !22, i64 8, i64 8, !22, i64 16, i64 8, !22, i64 24, i64 128, !18, i64 152, i64 128, !18, i64 280, i64 128, !18, i64 408, i64 8, !22}
!250 = distinct !{!250, !57}
!251 = !{!186, !26, i64 12}
!252 = !{!230, !15, i64 16}
!253 = !{!230, !124, i64 32}
!254 = !{!230, !26, i64 48}
!255 = !{!230, !26, i64 52}
!256 = !{!230, !26, i64 60}
!257 = !{!230, !15, i64 64}
!258 = !{!230, !15, i64 40}
!259 = distinct !{!259, !57}
!260 = distinct !{!260, !57}
!261 = distinct !{!261, !57}
!262 = !{!230, !20, i64 88}
!263 = !{!230, !23, i64 80}
!264 = !{i64 0, i64 8, !22, i64 8, i64 8, !14, i64 16, i64 8, !14, i64 24, i64 8, !22, i64 32, i64 1, !265, i64 33, i64 1, !18, i64 34, i64 2, !169, i64 36, i64 4, !41, i64 40, i64 8, !14, i64 48, i64 8, !14}
!265 = !{!141, !141, i64 0}
!266 = distinct !{!266, !57}
!267 = distinct !{!267, !57}
!268 = !{!230, !15, i64 8}
!269 = distinct !{!269, !57}
!270 = distinct !{!270, !57, !69}
!271 = distinct !{!271, !57, !69}
!272 = distinct !{!272, !57, !69}
!273 = distinct !{!273, !57, !69}
!274 = distinct !{!274, !57}
!275 = distinct !{!275, !57}
!276 = distinct !{!276, !57}
!277 = distinct !{!277, !57}
!278 = distinct !{!278, !57}
!279 = distinct !{!279, !57, !69}
!280 = distinct !{!280, !57, !69}
!281 = distinct !{!281, !57, !69}
!282 = distinct !{!282, !57, !69}
!283 = distinct !{!283, !57}
!284 = !{!285, !26, i64 8}
!285 = !{!"_ZTSN6Halide7Runtime8Internal16CacheBlockHeaderE", !15, i64 0, !26, i64 8}
!286 = !{!285, !15, i64 0}
!287 = distinct !{!287, !57}
!288 = distinct !{!288, !57}
!289 = distinct !{!289, !57}
!290 = distinct !{!290, !57}
!291 = distinct !{!291, !57, !69}
!292 = distinct !{!292, !57, !69}
!293 = distinct !{!293, !57, !69}
!294 = distinct !{!294, !57, !69}
!295 = distinct !{!295, !57}
!296 = distinct !{!296, !57}
!297 = distinct !{!297, !57}
!298 = distinct !{!298, !57}
!299 = distinct !{!299, !57}
!300 = distinct !{!300, !57}
!301 = distinct !{!301, !57}
!302 = distinct !{!302, !57}
!303 = distinct !{!303, !57}
!304 = !{!140, !141, i64 0}
!305 = !{!140, !142, i64 2}
!306 = !{!181, !15, i64 8}
!307 = !{!181, !23, i64 24}
!308 = distinct !{!308, !57}
!309 = !{!310, !15, i64 0}
!310 = !{!"_ZTS29halide_device_allocation_pool", !15, i64 0, !15, i64 8}
!311 = distinct !{!311, !57}
!312 = !{!310, !15, i64 8}
!313 = !{!314, !15, i64 120}
!314 = !{!"_ZTS25halide_device_interface_t", !15, i64 0, !15, i64 8, !15, i64 16, !15, i64 24, !15, i64 32, !15, i64 40, !15, i64 48, !15, i64 56, !15, i64 64, !15, i64 72, !15, i64 80, !15, i64 88, !15, i64 96, !15, i64 104, !15, i64 112, !15, i64 120}
!315 = !{!316, !15, i64 48}
!316 = !{!"_ZTS30halide_device_interface_impl_t", !15, i64 0, !15, i64 8, !15, i64 16, !15, i64 24, !15, i64 32, !15, i64 40, !15, i64 48, !15, i64 56, !15, i64 64, !15, i64 72, !15, i64 80, !15, i64 88, !15, i64 96, !15, i64 104, !15, i64 112, !15, i64 120}
!317 = !{!316, !15, i64 40}
!318 = !{!316, !15, i64 56}
!319 = !{!316, !15, i64 0}
!320 = !{!316, !15, i64 16}
!321 = !{!316, !15, i64 8}
!322 = !{!316, !15, i64 32}
!323 = !{!316, !15, i64 24}
!324 = !{!316, !15, i64 64}
!325 = !{!316, !15, i64 72}
!326 = distinct !{!326, !57, !69}
!327 = distinct !{!327, !57, !69}
!328 = distinct !{!328, !57, !69}
!329 = distinct !{!329, !57, !69}
!330 = !{!316, !15, i64 112}
!331 = !{!316, !15, i64 120}
!332 = !{!316, !15, i64 80}
!333 = !{!316, !15, i64 88}
!334 = !{!316, !15, i64 96}
!335 = !{!316, !15, i64 104}
!336 = !{i32 22, i32 33}
!337 = !{!338, !15, i64 40}
!338 = !{!"_ZTS21halide_profiler_state", !54, i64 0, !26, i64 8, !26, i64 12, !26, i64 16, !26, i64 20, !15, i64 24, !15, i64 32, !15, i64 40}
!339 = !{!338, !26, i64 16}
!340 = !{!341, !23, i64 0}
!341 = !{!"_ZTS30halide_profiler_pipeline_stats", !23, i64 0, !23, i64 8, !23, i64 16, !23, i64 24, !23, i64 32, !23, i64 40, !15, i64 48, !15, i64 56, !15, i64 64, !26, i64 72, !26, i64 76, !26, i64 80, !26, i64 84, !26, i64 88}
!342 = !{!341, !26, i64 80}
!343 = !{!341, !23, i64 32}
!344 = !{!341, !23, i64 40}
!345 = !{!341, !15, i64 48}
!346 = !{!341, !26, i64 84}
!347 = !{!341, !26, i64 88}
!348 = !{!341, !23, i64 16}
!349 = !{!341, !23, i64 24}
!350 = !{!341, !26, i64 72}
!351 = !{!341, !15, i64 56}
!352 = distinct !{!352, !57}
!353 = !{!354, !23, i64 32}
!354 = !{!"_ZTS26halide_profiler_func_stats", !23, i64 0, !23, i64 8, !23, i64 16, !23, i64 24, !23, i64 32, !23, i64 40, !23, i64 48, !15, i64 56, !26, i64 64}
!355 = !{!354, !23, i64 0}
!356 = !{!354, !15, i64 56}
!357 = distinct !{!357, !57}
!358 = distinct !{!358, !57}
!359 = distinct !{!359, !57}
!360 = !{!354, !23, i64 40}
!361 = !{!354, !23, i64 48}
!362 = distinct !{!362, !57}
!363 = !{!354, !23, i64 16}
!364 = distinct !{!364, !57}
!365 = !{!354, !26, i64 64}
!366 = distinct !{!366, !57}
!367 = !{!354, !23, i64 24}
!368 = distinct !{!368, !57}
!369 = distinct !{!369, !57}
!370 = !{!338, !15, i64 24}
!371 = !{!341, !15, i64 64}
!372 = distinct !{!372, !57}
!373 = !{!338, !26, i64 12}
!374 = distinct !{!374, !57}
!375 = !{!341, !26, i64 76}
!376 = distinct !{!376, !57}
!377 = distinct !{!377, !57}
!378 = !{!338, !15, i64 32}
!379 = !{!338, !26, i64 20}
!380 = !{!338, !26, i64 8}
!381 = distinct !{!381, !57}
!382 = distinct !{!382, !57}
!383 = distinct !{!383, !57}
!384 = distinct !{!384, !57}
!385 = !{!"branch_weights", i32 1073741824, i32 0}
!386 = !{!387, !387, i64 0}
!387 = !{!"input", !388, i64 0}
!388 = !{!"Halide buffer"}
!389 = !{!390, !390, i64 0}
!390 = !{!"bounded_input", !388, i64 0}
!391 = !{!392, !392, i64 0}
!392 = !{!"output", !388, i64 0}
