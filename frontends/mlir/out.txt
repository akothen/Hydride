    ADD OP
    retvalue is <block argument> of type 'i64' at index: 0
    2 operands:
     - '<block argument> of type 'i64' at index: 0'
     - '<block argument> of type 'i64' at index: 1'
    ADD OP
    retvalue is <block argument> of type 'tensor<8x8xi64>' at index: 0
    2 operands:
     - '<block argument> of type 'tensor<8x8xi64>' at index: 0'
     - '<block argument> of type 'tensor<8x8xi64>' at index: 1'
    ADD OP
    retvalue is <block argument> of type 'vector<8xi64>' at index: 0
    2 operands:
     - '<block argument> of type 'vector<8xi64>' at index: 0'
     - '<block argument> of type 'vector<8xi64>' at index: 1'
    ADD OP
    retvalue is <block argument> of type 'vector<[8]xi64>' at index: 0
    2 operands:
     - '<block argument> of type 'vector<[8]xi64>' at index: 0'
     - '<block argument> of type 'vector<[8]xi64>' at index: 1'
    2 operands:
     - '<block argument> of type 'i64' at index: 0'
     - '<block argument> of type 'i64' at index: 1'
    2 operands:
     - '<block argument> of type 'tensor<8x8xi64>' at index: 0'
     - '<block argument> of type 'tensor<8x8xi64>' at index: 1'
    2 operands:
     - '<block argument> of type 'vector<8xi64>' at index: 0'
     - '<block argument> of type 'vector<8xi64>' at index: 1'
    2 operands:
     - '<block argument> of type 'vector<[8]xi64>' at index: 0'
     - '<block argument> of type 'vector<[8]xi64>' at index: 1'
    2 operands:
     - '<block argument> of type 'i64' at index: 0'
     - '<block argument> of type 'i64' at index: 1'
    2 operands:
     - '<block argument> of type 'tensor<8x8xi64>' at index: 0'
     - '<block argument> of type 'tensor<8x8xi64>' at index: 1'
    2 operands:
     - '<block argument> of type 'vector<8xi64>' at index: 0'
     - '<block argument> of type 'vector<8xi64>' at index: 1'
    2 operands:
     - '<block argument> of type 'vector<[8]xi64>' at index: 0'
     - '<block argument> of type 'vector<[8]xi64>' at index: 1'
    2 operands:
     - '<block argument> of type 'i64' at index: 0'
     - '<block argument> of type 'i64' at index: 1'
    2 operands:
     - '<block argument> of type 'tensor<8x8xi64>' at index: 0'
     - '<block argument> of type 'tensor<8x8xi64>' at index: 1'
    2 operands:
     - '<block argument> of type 'vector<8xi64>' at index: 0'
     - '<block argument> of type 'vector<8xi64>' at index: 1'
    2 operands:
     - '<block argument> of type 'vector<[8]xi64>' at index: 0'
     - '<block argument> of type 'vector<[8]xi64>' at index: 1'
    2 operands:
     - '<block argument> of type 'i64' at index: 0'
     - '<block argument> of type 'i64' at index: 1'
    2 operands:
     - '<block argument> of type 'tensor<8x8xi64>' at index: 0'
     - '<block argument> of type 'tensor<8x8xi64>' at index: 1'
    2 operands:
     - '<block argument> of type 'vector<8xi64>' at index: 0'
     - '<block argument> of type 'vector<8xi64>' at index: 1'
    2 operands:
     - '<block argument> of type 'vector<[8]xi64>' at index: 0'
     - '<block argument> of type 'vector<[8]xi64>' at index: 1'
    2 operands:
     - '<block argument> of type 'i64' at index: 0'
     - '<block argument> of type 'i64' at index: 1'
    2 operands:
     - '<block argument> of type 'tensor<8x8xi64>' at index: 0'
     - '<block argument> of type 'tensor<8x8xi64>' at index: 1'
    2 operands:
     - '<block argument> of type 'vector<8xi64>' at index: 0'
     - '<block argument> of type 'vector<8xi64>' at index: 1'
    2 operands:
     - '<block argument> of type 'vector<[8]xi64>' at index: 0'
     - '<block argument> of type 'vector<[8]xi64>' at index: 1'
    2 operands:
     - '<block argument> of type 'i64' at index: 0'
     - '<block argument> of type 'i64' at index: 1'
    2 operands:
     - '<block argument> of type 'tensor<8x8xi64>' at index: 0'
     - '<block argument> of type 'tensor<8x8xi64>' at index: 1'
    2 operands:
     - '<block argument> of type 'vector<8xi64>' at index: 0'
     - '<block argument> of type 'vector<8xi64>' at index: 1'
    2 operands:
     - '<block argument> of type 'vector<[8]xi64>' at index: 0'
     - '<block argument> of type 'vector<[8]xi64>' at index: 1'
    2 operands:
     - '<block argument> of type 'i64' at index: 0'
     - '<block argument> of type 'i64' at index: 1'
    2 operands:
     - '<block argument> of type 'tensor<8x8xi64>' at index: 0'
     - '<block argument> of type 'tensor<8x8xi64>' at index: 1'
    2 operands:
     - '<block argument> of type 'vector<8xi64>' at index: 0'
     - '<block argument> of type 'vector<8xi64>' at index: 1'
    2 operands:
     - '<block argument> of type 'vector<[8]xi64>' at index: 0'
     - '<block argument> of type 'vector<[8]xi64>' at index: 1'
    2 operands:
     - '<block argument> of type 'i64' at index: 0'
     - '<block argument> of type 'i64' at index: 1'
    2 operands:
     - '<block argument> of type 'tensor<8x8xi64>' at index: 0'
     - '<block argument> of type 'tensor<8x8xi64>' at index: 1'
    2 operands:
     - '<block argument> of type 'vector<8xi64>' at index: 0'
     - '<block argument> of type 'vector<8xi64>' at index: 1'
    2 operands:
     - '<block argument> of type 'vector<[8]xi64>' at index: 0'
     - '<block argument> of type 'vector<[8]xi64>' at index: 1'
    2 operands:
     - '<block argument> of type 'i64' at index: 0'
     - '<block argument> of type 'i64' at index: 1'
    2 operands:
     - '<block argument> of type 'tensor<8x8xi64>' at index: 0'
     - '<block argument> of type 'tensor<8x8xi64>' at index: 1'
    2 operands:
     - '<block argument> of type 'vector<8xi64>' at index: 0'
     - '<block argument> of type 'vector<8xi64>' at index: 1'
    2 operands:
     - '<block argument> of type 'vector<[8]xi64>' at index: 0'
     - '<block argument> of type 'vector<[8]xi64>' at index: 1'
    2 operands:
     - '<block argument> of type 'i64' at index: 0'
     - '<block argument> of type 'i64' at index: 1'
    2 operands:
     - '<block argument> of type 'tensor<8x8xi64>' at index: 0'
     - '<block argument> of type 'tensor<8x8xi64>' at index: 1'
    2 operands:
     - '<block argument> of type 'vector<8xi64>' at index: 0'
     - '<block argument> of type 'vector<8xi64>' at index: 1'
    2 operands:
     - '<block argument> of type 'vector<[8]xi64>' at index: 0'
     - '<block argument> of type 'vector<[8]xi64>' at index: 1'
    2 operands:
     - '<block argument> of type 'i64' at index: 0'
     - '<block argument> of type 'i64' at index: 1'
    2 operands:
     - '<block argument> of type 'tensor<8x8xi64>' at index: 0'
     - '<block argument> of type 'tensor<8x8xi64>' at index: 1'
    2 operands:
     - '<block argument> of type 'vector<8xi64>' at index: 0'
     - '<block argument> of type 'vector<8xi64>' at index: 1'
    2 operands:
     - '<block argument> of type 'vector<[8]xi64>' at index: 0'
     - '<block argument> of type 'vector<[8]xi64>' at index: 1'
    2 operands:
     - '<block argument> of type 'i64' at index: 0'
     - '<block argument> of type 'i64' at index: 1'
    2 operands:
     - '<block argument> of type 'tensor<8x8xi64>' at index: 0'
     - '<block argument> of type 'tensor<8x8xi64>' at index: 1'
    2 operands:
     - '<block argument> of type 'vector<8xi64>' at index: 0'
     - '<block argument> of type 'vector<8xi64>' at index: 1'
    2 operands:
     - '<block argument> of type 'vector<[8]xi64>' at index: 0'
     - '<block argument> of type 'vector<[8]xi64>' at index: 1'
    2 operands:
     - '<block argument> of type 'i64' at index: 0'
     - '<block argument> of type 'i64' at index: 1'
    2 operands:
     - '<block argument> of type 'tensor<8x8xi64>' at index: 0'
     - '<block argument> of type 'tensor<8x8xi64>' at index: 1'
    2 operands:
     - '<block argument> of type 'vector<8xi64>' at index: 0'
     - '<block argument> of type 'vector<8xi64>' at index: 1'
    2 operands:
     - '<block argument> of type 'vector<[8]xi64>' at index: 0'
     - '<block argument> of type 'vector<[8]xi64>' at index: 1'
    2 operands:
     - '<block argument> of type 'i64' at index: 0'
     - '<block argument> of type 'i64' at index: 1'
    2 operands:
     - '<block argument> of type 'tensor<8x8xi64>' at index: 0'
     - '<block argument> of type 'tensor<8x8xi64>' at index: 1'
    2 operands:
     - '<block argument> of type 'vector<8xi64>' at index: 0'
     - '<block argument> of type 'vector<8xi64>' at index: 1'
    2 operands:
     - '<block argument> of type 'vector<[8]xi64>' at index: 0'
     - '<block argument> of type 'vector<[8]xi64>' at index: 1'
    1 operands:
     - '<block argument> of type 'f64' at index: 0'
    1 operands:
     - '<block argument> of type 'tensor<8x8xf64>' at index: 0'
    1 operands:
     - '<block argument> of type 'vector<8xf64>' at index: 0'
    1 operands:
     - '<block argument> of type 'vector<[8]xf64>' at index: 0'
    2 operands:
     - '<block argument> of type 'f64' at index: 0'
     - '<block argument> of type 'f64' at index: 1'
    2 operands:
     - '<block argument> of type 'tensor<8x8xf64>' at index: 0'
     - '<block argument> of type 'tensor<8x8xf64>' at index: 1'
    2 operands:
     - '<block argument> of type 'vector<8xf64>' at index: 0'
     - '<block argument> of type 'vector<8xf64>' at index: 1'
    2 operands:
     - '<block argument> of type 'vector<[8]xf64>' at index: 0'
     - '<block argument> of type 'vector<[8]xf64>' at index: 1'
    2 operands:
     - '<block argument> of type 'f64' at index: 0'
     - '<block argument> of type 'f64' at index: 1'
    2 operands:
     - '<block argument> of type 'tensor<8x8xf64>' at index: 0'
     - '<block argument> of type 'tensor<8x8xf64>' at index: 1'
    2 operands:
     - '<block argument> of type 'vector<8xf64>' at index: 0'
     - '<block argument> of type 'vector<8xf64>' at index: 1'
    2 operands:
     - '<block argument> of type 'vector<[8]xf64>' at index: 0'
     - '<block argument> of type 'vector<[8]xf64>' at index: 1'
    2 operands:
     - '<block argument> of type 'f64' at index: 0'
     - '<block argument> of type 'f64' at index: 1'
    2 operands:
     - '<block argument> of type 'tensor<8x8xf64>' at index: 0'
     - '<block argument> of type 'tensor<8x8xf64>' at index: 1'
    2 operands:
     - '<block argument> of type 'vector<8xf64>' at index: 0'
     - '<block argument> of type 'vector<8xf64>' at index: 1'
    2 operands:
     - '<block argument> of type 'vector<[8]xf64>' at index: 0'
     - '<block argument> of type 'vector<[8]xf64>' at index: 1'
    2 operands:
     - '<block argument> of type 'f64' at index: 0'
     - '<block argument> of type 'f64' at index: 1'
    2 operands:
     - '<block argument> of type 'tensor<8x8xf64>' at index: 0'
     - '<block argument> of type 'tensor<8x8xf64>' at index: 1'
    2 operands:
     - '<block argument> of type 'vector<8xf64>' at index: 0'
     - '<block argument> of type 'vector<8xf64>' at index: 1'
    2 operands:
     - '<block argument> of type 'vector<[8]xf64>' at index: 0'
     - '<block argument> of type 'vector<[8]xf64>' at index: 1'
    2 operands:
     - '<block argument> of type 'f64' at index: 0'
     - '<block argument> of type 'f64' at index: 1'
    2 operands:
     - '<block argument> of type 'tensor<8x8xf64>' at index: 0'
     - '<block argument> of type 'tensor<8x8xf64>' at index: 1'
    2 operands:
     - '<block argument> of type 'vector<8xf64>' at index: 0'
     - '<block argument> of type 'vector<8xf64>' at index: 1'
    2 operands:
     - '<block argument> of type 'vector<[8]xf64>' at index: 0'
     - '<block argument> of type 'vector<[8]xf64>' at index: 1'
    1 operands:
     - '<block argument> of type 'i32' at index: 0'
    1 operands:
     - '<block argument> of type 'tensor<8x8xi32>' at index: 0'
    1 operands:
     - '<block argument> of type 'vector<8xi32>' at index: 0'
    1 operands:
     - '<block argument> of type 'vector<[8]xi32>' at index: 0'
    1 operands:
     - '<block argument> of type 'i32' at index: 0'
    1 operands:
     - '<block argument> of type 'tensor<8x8xi32>' at index: 0'
    1 operands:
     - '<block argument> of type 'vector<8xi32>' at index: 0'
    1 operands:
     - '<block argument> of type 'vector<[8]xi32>' at index: 0'
    1 operands:
     - '<block argument> of type 'f32' at index: 0'
    1 operands:
     - '<block argument> of type 'tensor<8x8xf32>' at index: 0'
    1 operands:
     - '<block argument> of type 'vector<8xf32>' at index: 0'
    1 operands:
     - '<block argument> of type 'vector<[8]xf32>' at index: 0'
    1 operands:
     - '<block argument> of type 'i32' at index: 0'
    1 operands:
     - '<block argument> of type 'tensor<8x8xi32>' at index: 0'
    1 operands:
     - '<block argument> of type 'vector<8xi32>' at index: 0'
    1 operands:
     - '<block argument> of type 'vector<[8]xi32>' at index: 0'
    1 operands:
     - '<block argument> of type 'f32' at index: 0'
    1 operands:
     - '<block argument> of type 'tensor<8x8xf32>' at index: 0'
    1 operands:
     - '<block argument> of type 'vector<8xf32>' at index: 0'
    1 operands:
     - '<block argument> of type 'vector<[8]xf32>' at index: 0'
    1 operands:
     - '<block argument> of type 'i32' at index: 0'
    1 operands:
     - '<block argument> of type 'tensor<8x8xi32>' at index: 0'
    1 operands:
     - '<block argument> of type 'vector<8xi32>' at index: 0'
    1 operands:
     - '<block argument> of type 'vector<[8]xi32>' at index: 0'
    1 operands:
     - '<block argument> of type 'i16' at index: 0'
    1 operands:
     - '<block argument> of type 'tensor<8x8xi16>' at index: 0'
    1 operands:
     - '<block argument> of type 'vector<8xi16>' at index: 0'
    1 operands:
     - '<block argument> of type 'vector<[8]xi16>' at index: 0'
    1 operands:
     - '<block argument> of type 'bf16' at index: 0'
    1 operands:
     - '<block argument> of type 'tensor<8x8xbf16>' at index: 0'
    1 operands:
     - '<block argument> of type 'vector<8xbf16>' at index: 0'
    1 operands:
     - '<block argument> of type 'vector<[8]xbf16>' at index: 0'
    1 operands:
     - '<block argument> of type 'f64' at index: 0'
    1 operands:
     - '<block argument> of type 'tensor<8x8xf64>' at index: 0'
    1 operands:
     - '<block argument> of type 'vector<8xf64>' at index: 0'
    1 operands:
     - '<block argument> of type 'vector<[8]xf64>' at index: 0'
    1 operands:
     - '<block argument> of type 'i32' at index: 0'
    1 operands:
     - '<block argument> of type 'tensor<8x8xi32>' at index: 0'
    1 operands:
     - '<block argument> of type 'vector<8xi32>' at index: 0'
    1 operands:
     - '<block argument> of type 'vector<[8]xi32>' at index: 0'
    1 operands:
     - '<block argument> of type 'index' at index: 0'
    1 operands:
     - '<block argument> of type 'tensor<8x8xindex>' at index: 0'
    1 operands:
     - '<block argument> of type 'vector<8xindex>' at index: 0'
    1 operands:
     - '<block argument> of type 'vector<[8]xindex>' at index: 0'
    1 operands:
     - '<block argument> of type 'i64' at index: 0'
    1 operands:
     - '<block argument> of type 'tensor<8x8xi64>' at index: 0'
    1 operands:
     - '<block argument> of type 'vector<8xi64>' at index: 0'
    1 operands:
     - '<block argument> of type 'vector<[8]xi64>' at index: 0'
    1 operands:
     - '<block argument> of type 'f32' at index: 0'
    1 operands:
     - '<block argument> of type 'tensor<8x8xf32>' at index: 0'
    1 operands:
     - '<block argument> of type 'vector<8xf32>' at index: 0'
    1 operands:
     - '<block argument> of type 'vector<[8]xf32>' at index: 0'
    1 attributes:
     - 'predicate' : '1 : i64'
    2 operands:
     - '<block argument> of type 'i64' at index: 0'
     - '<block argument> of type 'i64' at index: 1'
    1 attributes:
     - 'predicate' : '2 : i64'
    2 operands:
     - '<block argument> of type 'tensor<8x8xi64>' at index: 0'
     - '<block argument> of type 'tensor<8x8xi64>' at index: 1'
    1 attributes:
     - 'predicate' : '6 : i64'
    2 operands:
     - '<block argument> of type 'vector<8xi64>' at index: 0'
     - '<block argument> of type 'vector<8xi64>' at index: 1'
    1 attributes:
     - 'predicate' : '6 : i64'
    2 operands:
     - '<block argument> of type 'vector<[8]xi64>' at index: 0'
     - '<block argument> of type 'vector<[8]xi64>' at index: 1'
    1 attributes:
     - 'predicate' : '6 : i64'
    2 operands:
     - '<block argument> of type 'vector<i64>' at index: 0'
     - '<block argument> of type 'vector<i64>' at index: 1'
    1 attributes:
     - 'predicate' : '1 : i64'
    2 operands:
     - '<block argument> of type 'f64' at index: 0'
     - '<block argument> of type 'f64' at index: 1'
    1 attributes:
     - 'predicate' : '4 : i64'
    2 operands:
     - '<block argument> of type 'tensor<8x8xf64>' at index: 0'
     - '<block argument> of type 'tensor<8x8xf64>' at index: 1'
    1 attributes:
     - 'predicate' : '11 : i64'
    2 operands:
     - '<block argument> of type 'vector<8xf64>' at index: 0'
     - '<block argument> of type 'vector<8xf64>' at index: 1'
    1 attributes:
     - 'predicate' : '11 : i64'
    2 operands:
     - '<block argument> of type 'vector<[8]xf64>' at index: 0'
     - '<block argument> of type 'vector<[8]xf64>' at index: 1'
    1 operands:
     - '<block argument> of type 'index' at index: 0'
    1 operands:
     - '<block argument> of type 'tensor<index>' at index: 0'
    1 operands:
     - '<block argument> of type 'tensor<i64>' at index: 0'
    1 operands:
     - '<block argument> of type 'f32' at index: 0'
    1 attributes:
     - 'value' : '42 : i32'
    1 attributes:
     - 'value' : '42 : i32'
    2 attributes:
     - 'crazy' : '"func.foo"'
     - 'value' : '43 : index'
    1 attributes:
     - 'value' : '4.300000e+01 : bf16'
    1 attributes:
     - 'value' : 'dense<0> : vector<4xi32>'
    1 attributes:
     - 'value' : 'dense<0> : tensor<42xi32>'
    1 attributes:
     - 'value' : 'dense<0> : vector<42xi32>'
    1 attributes:
     - 'value' : 'true'
    1 attributes:
     - 'value' : 'false'
    1 attributes:
     - 'value' : '-1 : i128'
    1 attributes:
     - 'value' : '85070591730234615865843651857942052864 : i128'
    2 operands:
     - '<block argument> of type 'vector<4xf32>' at index: 0'
     - '<block argument> of type 'vector<4xf32>' at index: 1'
    2 operands:
     - '<block argument> of type 'vector<[4]xf32>' at index: 2'
     - '<block argument> of type 'vector<[4]xf32>' at index: 3'
    2 operands:
     - '<block argument> of type 'f32' at index: 4'
     - '<block argument> of type 'f32' at index: 5'
    2 operands:
     - '<block argument> of type 'i32' at index: 6'
     - '<block argument> of type 'i32' at index: 7'
    2 operands:
     - '<block argument> of type 'i32' at index: 6'
     - '<block argument> of type 'i32' at index: 7'
    2 operands:
     - '<block argument> of type 'vector<4xf32>' at index: 0'
     - '<block argument> of type 'vector<4xf32>' at index: 1'
    2 operands:
     - '<block argument> of type 'vector<[4]xf32>' at index: 2'
     - '<block argument> of type 'vector<[4]xf32>' at index: 3'
    2 operands:
     - '<block argument> of type 'f32' at index: 4'
     - '<block argument> of type 'f32' at index: 5'
    2 operands:
     - '<block argument> of type 'i32' at index: 6'
     - '<block argument> of type 'i32' at index: 7'
    2 operands:
     - '<block argument> of type 'i32' at index: 6'
     - '<block argument> of type 'i32' at index: 7'
module {
  func.func @test_addi(%arg0: i64, %arg1: i64) -> i64 {
    %0 = arith.addi %arg0, %arg1 : i64
    return %0 : i64
  }
  func.func @test_addi_tensor(%arg0: tensor<8x8xi64>, %arg1: tensor<8x8xi64>) -> tensor<8x8xi64> {
    %0 = arith.addi %arg0, %arg1 : tensor<8x8xi64>
    return %0 : tensor<8x8xi64>
  }
  func.func @test_addi_vector(%arg0: vector<8xi64>, %arg1: vector<8xi64>) -> vector<8xi64> {
    %0 = arith.addi %arg0, %arg1 : vector<8xi64>
    return %0 : vector<8xi64>
  }
  func.func @test_addi_scalable_vector(%arg0: vector<[8]xi64>, %arg1: vector<[8]xi64>) -> vector<[8]xi64> {
    %0 = arith.addi %arg0, %arg1 : vector<[8]xi64>
    return %0 : vector<[8]xi64>
  }
  func.func @test_subi(%arg0: i64, %arg1: i64) -> i64 {
    %0 = arith.subi %arg0, %arg1 : i64
    return %0 : i64
  }
  func.func @test_subi_tensor(%arg0: tensor<8x8xi64>, %arg1: tensor<8x8xi64>) -> tensor<8x8xi64> {
    %0 = arith.subi %arg0, %arg1 : tensor<8x8xi64>
    return %0 : tensor<8x8xi64>
  }
  func.func @test_subi_vector(%arg0: vector<8xi64>, %arg1: vector<8xi64>) -> vector<8xi64> {
    %0 = arith.subi %arg0, %arg1 : vector<8xi64>
    return %0 : vector<8xi64>
  }
  func.func @test_subi_scalable_vector(%arg0: vector<[8]xi64>, %arg1: vector<[8]xi64>) -> vector<[8]xi64> {
    %0 = arith.subi %arg0, %arg1 : vector<[8]xi64>
    return %0 : vector<[8]xi64>
  }
  func.func @test_muli(%arg0: i64, %arg1: i64) -> i64 {
    %0 = arith.muli %arg0, %arg1 : i64
    return %0 : i64
  }
  func.func @test_muli_tensor(%arg0: tensor<8x8xi64>, %arg1: tensor<8x8xi64>) -> tensor<8x8xi64> {
    %0 = arith.muli %arg0, %arg1 : tensor<8x8xi64>
    return %0 : tensor<8x8xi64>
  }
  func.func @test_muli_vector(%arg0: vector<8xi64>, %arg1: vector<8xi64>) -> vector<8xi64> {
    %0 = arith.muli %arg0, %arg1 : vector<8xi64>
    return %0 : vector<8xi64>
  }
  func.func @test_muli_scalable_vector(%arg0: vector<[8]xi64>, %arg1: vector<[8]xi64>) -> vector<[8]xi64> {
    %0 = arith.muli %arg0, %arg1 : vector<[8]xi64>
    return %0 : vector<[8]xi64>
  }
  func.func @test_divui(%arg0: i64, %arg1: i64) -> i64 {
    %0 = arith.divui %arg0, %arg1 : i64
    return %0 : i64
  }
  func.func @test_divui_tensor(%arg0: tensor<8x8xi64>, %arg1: tensor<8x8xi64>) -> tensor<8x8xi64> {
    %0 = arith.divui %arg0, %arg1 : tensor<8x8xi64>
    return %0 : tensor<8x8xi64>
  }
  func.func @test_divui_vector(%arg0: vector<8xi64>, %arg1: vector<8xi64>) -> vector<8xi64> {
    %0 = arith.divui %arg0, %arg1 : vector<8xi64>
    return %0 : vector<8xi64>
  }
  func.func @test_divui_scalable_vector(%arg0: vector<[8]xi64>, %arg1: vector<[8]xi64>) -> vector<[8]xi64> {
    %0 = arith.divui %arg0, %arg1 : vector<[8]xi64>
    return %0 : vector<[8]xi64>
  }
  func.func @test_divsi(%arg0: i64, %arg1: i64) -> i64 {
    %0 = arith.divsi %arg0, %arg1 : i64
    return %0 : i64
  }
  func.func @test_divsi_tensor(%arg0: tensor<8x8xi64>, %arg1: tensor<8x8xi64>) -> tensor<8x8xi64> {
    %0 = arith.divsi %arg0, %arg1 : tensor<8x8xi64>
    return %0 : tensor<8x8xi64>
  }
  func.func @test_divsi_vector(%arg0: vector<8xi64>, %arg1: vector<8xi64>) -> vector<8xi64> {
    %0 = arith.divsi %arg0, %arg1 : vector<8xi64>
    return %0 : vector<8xi64>
  }
  func.func @test_divsi_scalable_vector(%arg0: vector<[8]xi64>, %arg1: vector<[8]xi64>) -> vector<[8]xi64> {
    %0 = arith.divsi %arg0, %arg1 : vector<[8]xi64>
    return %0 : vector<[8]xi64>
  }
  func.func @test_remui(%arg0: i64, %arg1: i64) -> i64 {
    %0 = arith.remui %arg0, %arg1 : i64
    return %0 : i64
  }
  func.func @test_remui_tensor(%arg0: tensor<8x8xi64>, %arg1: tensor<8x8xi64>) -> tensor<8x8xi64> {
    %0 = arith.remui %arg0, %arg1 : tensor<8x8xi64>
    return %0 : tensor<8x8xi64>
  }
  func.func @test_remui_vector(%arg0: vector<8xi64>, %arg1: vector<8xi64>) -> vector<8xi64> {
    %0 = arith.remui %arg0, %arg1 : vector<8xi64>
    return %0 : vector<8xi64>
  }
  func.func @test_remui_scalable_vector(%arg0: vector<[8]xi64>, %arg1: vector<[8]xi64>) -> vector<[8]xi64> {
    %0 = arith.remui %arg0, %arg1 : vector<[8]xi64>
    return %0 : vector<[8]xi64>
  }
  func.func @test_remsi(%arg0: i64, %arg1: i64) -> i64 {
    %0 = arith.remsi %arg0, %arg1 : i64
    return %0 : i64
  }
  func.func @test_remsi_tensor(%arg0: tensor<8x8xi64>, %arg1: tensor<8x8xi64>) -> tensor<8x8xi64> {
    %0 = arith.remsi %arg0, %arg1 : tensor<8x8xi64>
    return %0 : tensor<8x8xi64>
  }
  func.func @test_remsi_vector(%arg0: vector<8xi64>, %arg1: vector<8xi64>) -> vector<8xi64> {
    %0 = arith.remsi %arg0, %arg1 : vector<8xi64>
    return %0 : vector<8xi64>
  }
  func.func @test_remsi_scalable_vector(%arg0: vector<[8]xi64>, %arg1: vector<[8]xi64>) -> vector<[8]xi64> {
    %0 = arith.remsi %arg0, %arg1 : vector<[8]xi64>
    return %0 : vector<[8]xi64>
  }
  func.func @test_andi(%arg0: i64, %arg1: i64) -> i64 {
    %0 = arith.andi %arg0, %arg1 : i64
    return %0 : i64
  }
  func.func @test_andi_tensor(%arg0: tensor<8x8xi64>, %arg1: tensor<8x8xi64>) -> tensor<8x8xi64> {
    %0 = arith.andi %arg0, %arg1 : tensor<8x8xi64>
    return %0 : tensor<8x8xi64>
  }
  func.func @test_andi_vector(%arg0: vector<8xi64>, %arg1: vector<8xi64>) -> vector<8xi64> {
    %0 = arith.andi %arg0, %arg1 : vector<8xi64>
    return %0 : vector<8xi64>
  }
  func.func @test_andi_scalable_vector(%arg0: vector<[8]xi64>, %arg1: vector<[8]xi64>) -> vector<[8]xi64> {
    %0 = arith.andi %arg0, %arg1 : vector<[8]xi64>
    return %0 : vector<[8]xi64>
  }
  func.func @test_ori(%arg0: i64, %arg1: i64) -> i64 {
    %0 = arith.ori %arg0, %arg1 : i64
    return %0 : i64
  }
  func.func @test_ori_tensor(%arg0: tensor<8x8xi64>, %arg1: tensor<8x8xi64>) -> tensor<8x8xi64> {
    %0 = arith.ori %arg0, %arg1 : tensor<8x8xi64>
    return %0 : tensor<8x8xi64>
  }
  func.func @test_ori_vector(%arg0: vector<8xi64>, %arg1: vector<8xi64>) -> vector<8xi64> {
    %0 = arith.ori %arg0, %arg1 : vector<8xi64>
    return %0 : vector<8xi64>
  }
  func.func @test_ori_scalable_vector(%arg0: vector<[8]xi64>, %arg1: vector<[8]xi64>) -> vector<[8]xi64> {
    %0 = arith.ori %arg0, %arg1 : vector<[8]xi64>
    return %0 : vector<[8]xi64>
  }
  func.func @test_xori(%arg0: i64, %arg1: i64) -> i64 {
    %0 = arith.xori %arg0, %arg1 : i64
    return %0 : i64
  }
  func.func @test_xori_tensor(%arg0: tensor<8x8xi64>, %arg1: tensor<8x8xi64>) -> tensor<8x8xi64> {
    %0 = arith.xori %arg0, %arg1 : tensor<8x8xi64>
    return %0 : tensor<8x8xi64>
  }
  func.func @test_xori_vector(%arg0: vector<8xi64>, %arg1: vector<8xi64>) -> vector<8xi64> {
    %0 = arith.xori %arg0, %arg1 : vector<8xi64>
    return %0 : vector<8xi64>
  }
  func.func @test_xori_scalable_vector(%arg0: vector<[8]xi64>, %arg1: vector<[8]xi64>) -> vector<[8]xi64> {
    %0 = arith.xori %arg0, %arg1 : vector<[8]xi64>
    return %0 : vector<[8]xi64>
  }
  func.func @test_ceildivsi(%arg0: i64, %arg1: i64) -> i64 {
    %0 = arith.ceildivsi %arg0, %arg1 : i64
    return %0 : i64
  }
  func.func @test_ceildivsi_tensor(%arg0: tensor<8x8xi64>, %arg1: tensor<8x8xi64>) -> tensor<8x8xi64> {
    %0 = arith.ceildivsi %arg0, %arg1 : tensor<8x8xi64>
    return %0 : tensor<8x8xi64>
  }
  func.func @test_ceildivsi_vector(%arg0: vector<8xi64>, %arg1: vector<8xi64>) -> vector<8xi64> {
    %0 = arith.ceildivsi %arg0, %arg1 : vector<8xi64>
    return %0 : vector<8xi64>
  }
  func.func @test_ceildivsi_scalable_vector(%arg0: vector<[8]xi64>, %arg1: vector<[8]xi64>) -> vector<[8]xi64> {
    %0 = arith.ceildivsi %arg0, %arg1 : vector<[8]xi64>
    return %0 : vector<[8]xi64>
  }
  func.func @test_floordivsi(%arg0: i64, %arg1: i64) -> i64 {
    %0 = arith.floordivsi %arg0, %arg1 : i64
    return %0 : i64
  }
  func.func @test_floordivsi_tensor(%arg0: tensor<8x8xi64>, %arg1: tensor<8x8xi64>) -> tensor<8x8xi64> {
    %0 = arith.floordivsi %arg0, %arg1 : tensor<8x8xi64>
    return %0 : tensor<8x8xi64>
  }
  func.func @test_floordivsi_vector(%arg0: vector<8xi64>, %arg1: vector<8xi64>) -> vector<8xi64> {
    %0 = arith.floordivsi %arg0, %arg1 : vector<8xi64>
    return %0 : vector<8xi64>
  }
  func.func @test_floordivsi_scalable_vector(%arg0: vector<[8]xi64>, %arg1: vector<[8]xi64>) -> vector<[8]xi64> {
    %0 = arith.floordivsi %arg0, %arg1 : vector<[8]xi64>
    return %0 : vector<[8]xi64>
  }
  func.func @test_shli(%arg0: i64, %arg1: i64) -> i64 {
    %0 = arith.shli %arg0, %arg1 : i64
    return %0 : i64
  }
  func.func @test_shli_tensor(%arg0: tensor<8x8xi64>, %arg1: tensor<8x8xi64>) -> tensor<8x8xi64> {
    %0 = arith.shli %arg0, %arg1 : tensor<8x8xi64>
    return %0 : tensor<8x8xi64>
  }
  func.func @test_shli_vector(%arg0: vector<8xi64>, %arg1: vector<8xi64>) -> vector<8xi64> {
    %0 = arith.shli %arg0, %arg1 : vector<8xi64>
    return %0 : vector<8xi64>
  }
  func.func @test_shli_scalable_vector(%arg0: vector<[8]xi64>, %arg1: vector<[8]xi64>) -> vector<[8]xi64> {
    %0 = arith.shli %arg0, %arg1 : vector<[8]xi64>
    return %0 : vector<[8]xi64>
  }
  func.func @test_shrui(%arg0: i64, %arg1: i64) -> i64 {
    %0 = arith.shrui %arg0, %arg1 : i64
    return %0 : i64
  }
  func.func @test_shrui_tensor(%arg0: tensor<8x8xi64>, %arg1: tensor<8x8xi64>) -> tensor<8x8xi64> {
    %0 = arith.shrui %arg0, %arg1 : tensor<8x8xi64>
    return %0 : tensor<8x8xi64>
  }
  func.func @test_shrui_vector(%arg0: vector<8xi64>, %arg1: vector<8xi64>) -> vector<8xi64> {
    %0 = arith.shrui %arg0, %arg1 : vector<8xi64>
    return %0 : vector<8xi64>
  }
  func.func @test_shrui_scalable_vector(%arg0: vector<[8]xi64>, %arg1: vector<[8]xi64>) -> vector<[8]xi64> {
    %0 = arith.shrui %arg0, %arg1 : vector<[8]xi64>
    return %0 : vector<[8]xi64>
  }
  func.func @test_shrsi(%arg0: i64, %arg1: i64) -> i64 {
    %0 = arith.shrsi %arg0, %arg1 : i64
    return %0 : i64
  }
  func.func @test_shrsi_tensor(%arg0: tensor<8x8xi64>, %arg1: tensor<8x8xi64>) -> tensor<8x8xi64> {
    %0 = arith.shrsi %arg0, %arg1 : tensor<8x8xi64>
    return %0 : tensor<8x8xi64>
  }
  func.func @test_shrsi_vector(%arg0: vector<8xi64>, %arg1: vector<8xi64>) -> vector<8xi64> {
    %0 = arith.shrsi %arg0, %arg1 : vector<8xi64>
    return %0 : vector<8xi64>
  }
  func.func @test_shrsi_scalable_vector(%arg0: vector<[8]xi64>, %arg1: vector<[8]xi64>) -> vector<[8]xi64> {
    %0 = arith.shrsi %arg0, %arg1 : vector<[8]xi64>
    return %0 : vector<[8]xi64>
  }
  func.func @test_negf(%arg0: f64) -> f64 {
    %0 = arith.negf %arg0 : f64
    return %0 : f64
  }
  func.func @test_negf_tensor(%arg0: tensor<8x8xf64>) -> tensor<8x8xf64> {
    %0 = arith.negf %arg0 : tensor<8x8xf64>
    return %0 : tensor<8x8xf64>
  }
  func.func @test_negf_vector(%arg0: vector<8xf64>) -> vector<8xf64> {
    %0 = arith.negf %arg0 : vector<8xf64>
    return %0 : vector<8xf64>
  }
  func.func @test_negf_scalable_vector(%arg0: vector<[8]xf64>) -> vector<[8]xf64> {
    %0 = arith.negf %arg0 : vector<[8]xf64>
    return %0 : vector<[8]xf64>
  }
  func.func @test_addf(%arg0: f64, %arg1: f64) -> f64 {
    %0 = arith.addf %arg0, %arg1 : f64
    return %0 : f64
  }
  func.func @test_addf_tensor(%arg0: tensor<8x8xf64>, %arg1: tensor<8x8xf64>) -> tensor<8x8xf64> {
    %0 = arith.addf %arg0, %arg1 : tensor<8x8xf64>
    return %0 : tensor<8x8xf64>
  }
  func.func @test_addf_vector(%arg0: vector<8xf64>, %arg1: vector<8xf64>) -> vector<8xf64> {
    %0 = arith.addf %arg0, %arg1 : vector<8xf64>
    return %0 : vector<8xf64>
  }
  func.func @test_addf_scalable_vector(%arg0: vector<[8]xf64>, %arg1: vector<[8]xf64>) -> vector<[8]xf64> {
    %0 = arith.addf %arg0, %arg1 : vector<[8]xf64>
    return %0 : vector<[8]xf64>
  }
  func.func @test_subf(%arg0: f64, %arg1: f64) -> f64 {
    %0 = arith.subf %arg0, %arg1 : f64
    return %0 : f64
  }
  func.func @test_subf_tensor(%arg0: tensor<8x8xf64>, %arg1: tensor<8x8xf64>) -> tensor<8x8xf64> {
    %0 = arith.subf %arg0, %arg1 : tensor<8x8xf64>
    return %0 : tensor<8x8xf64>
  }
  func.func @test_subf_vector(%arg0: vector<8xf64>, %arg1: vector<8xf64>) -> vector<8xf64> {
    %0 = arith.subf %arg0, %arg1 : vector<8xf64>
    return %0 : vector<8xf64>
  }
  func.func @test_subf_scalable_vector(%arg0: vector<[8]xf64>, %arg1: vector<[8]xf64>) -> vector<[8]xf64> {
    %0 = arith.subf %arg0, %arg1 : vector<[8]xf64>
    return %0 : vector<[8]xf64>
  }
  func.func @test_mulf(%arg0: f64, %arg1: f64) -> f64 {
    %0 = arith.mulf %arg0, %arg1 : f64
    return %0 : f64
  }
  func.func @test_mulf_tensor(%arg0: tensor<8x8xf64>, %arg1: tensor<8x8xf64>) -> tensor<8x8xf64> {
    %0 = arith.mulf %arg0, %arg1 : tensor<8x8xf64>
    return %0 : tensor<8x8xf64>
  }
  func.func @test_mulf_vector(%arg0: vector<8xf64>, %arg1: vector<8xf64>) -> vector<8xf64> {
    %0 = arith.mulf %arg0, %arg1 : vector<8xf64>
    return %0 : vector<8xf64>
  }
  func.func @test_mulf_scalable_vector(%arg0: vector<[8]xf64>, %arg1: vector<[8]xf64>) -> vector<[8]xf64> {
    %0 = arith.mulf %arg0, %arg1 : vector<[8]xf64>
    return %0 : vector<[8]xf64>
  }
  func.func @test_divf(%arg0: f64, %arg1: f64) -> f64 {
    %0 = arith.divf %arg0, %arg1 : f64
    return %0 : f64
  }
  func.func @test_divf_tensor(%arg0: tensor<8x8xf64>, %arg1: tensor<8x8xf64>) -> tensor<8x8xf64> {
    %0 = arith.divf %arg0, %arg1 : tensor<8x8xf64>
    return %0 : tensor<8x8xf64>
  }
  func.func @test_divf_vector(%arg0: vector<8xf64>, %arg1: vector<8xf64>) -> vector<8xf64> {
    %0 = arith.divf %arg0, %arg1 : vector<8xf64>
    return %0 : vector<8xf64>
  }
  func.func @test_divf_scalable_vector(%arg0: vector<[8]xf64>, %arg1: vector<[8]xf64>) -> vector<[8]xf64> {
    %0 = arith.divf %arg0, %arg1 : vector<[8]xf64>
    return %0 : vector<[8]xf64>
  }
  func.func @test_remf(%arg0: f64, %arg1: f64) -> f64 {
    %0 = arith.remf %arg0, %arg1 : f64
    return %0 : f64
  }
  func.func @test_remf_tensor(%arg0: tensor<8x8xf64>, %arg1: tensor<8x8xf64>) -> tensor<8x8xf64> {
    %0 = arith.remf %arg0, %arg1 : tensor<8x8xf64>
    return %0 : tensor<8x8xf64>
  }
  func.func @test_remf_vector(%arg0: vector<8xf64>, %arg1: vector<8xf64>) -> vector<8xf64> {
    %0 = arith.remf %arg0, %arg1 : vector<8xf64>
    return %0 : vector<8xf64>
  }
  func.func @test_remf_scalable_vector(%arg0: vector<[8]xf64>, %arg1: vector<[8]xf64>) -> vector<[8]xf64> {
    %0 = arith.remf %arg0, %arg1 : vector<[8]xf64>
    return %0 : vector<[8]xf64>
  }
  func.func @test_extui(%arg0: i32) -> i64 {
    %0 = arith.extui %arg0 : i32 to i64
    return %0 : i64
  }
  func.func @test_extui_tensor(%arg0: tensor<8x8xi32>) -> tensor<8x8xi64> {
    %0 = arith.extui %arg0 : tensor<8x8xi32> to tensor<8x8xi64>
    return %0 : tensor<8x8xi64>
  }
  func.func @test_extui_vector(%arg0: vector<8xi32>) -> vector<8xi64> {
    %0 = arith.extui %arg0 : vector<8xi32> to vector<8xi64>
    return %0 : vector<8xi64>
  }
  func.func @test_extui_scalable_vector(%arg0: vector<[8]xi32>) -> vector<[8]xi64> {
    %0 = arith.extui %arg0 : vector<[8]xi32> to vector<[8]xi64>
    return %0 : vector<[8]xi64>
  }
  func.func @test_extsi(%arg0: i32) -> i64 {
    %0 = arith.extsi %arg0 : i32 to i64
    return %0 : i64
  }
  func.func @test_extsi_tensor(%arg0: tensor<8x8xi32>) -> tensor<8x8xi64> {
    %0 = arith.extsi %arg0 : tensor<8x8xi32> to tensor<8x8xi64>
    return %0 : tensor<8x8xi64>
  }
  func.func @test_extsi_vector(%arg0: vector<8xi32>) -> vector<8xi64> {
    %0 = arith.extsi %arg0 : vector<8xi32> to vector<8xi64>
    return %0 : vector<8xi64>
  }
  func.func @test_extsi_scalable_vector(%arg0: vector<[8]xi32>) -> vector<[8]xi64> {
    %0 = arith.extsi %arg0 : vector<[8]xi32> to vector<[8]xi64>
    return %0 : vector<[8]xi64>
  }
  func.func @test_extf(%arg0: f32) -> f64 {
    %0 = arith.extf %arg0 : f32 to f64
    return %0 : f64
  }
  func.func @test_extf_tensor(%arg0: tensor<8x8xf32>) -> tensor<8x8xf64> {
    %0 = arith.extf %arg0 : tensor<8x8xf32> to tensor<8x8xf64>
    return %0 : tensor<8x8xf64>
  }
  func.func @test_extf_vector(%arg0: vector<8xf32>) -> vector<8xf64> {
    %0 = arith.extf %arg0 : vector<8xf32> to vector<8xf64>
    return %0 : vector<8xf64>
  }
  func.func @test_extf_scalable_vector(%arg0: vector<[8]xf32>) -> vector<[8]xf64> {
    %0 = arith.extf %arg0 : vector<[8]xf32> to vector<[8]xf64>
    return %0 : vector<[8]xf64>
  }
  func.func @test_trunci(%arg0: i32) -> i16 {
    %0 = arith.trunci %arg0 : i32 to i16
    return %0 : i16
  }
  func.func @test_trunci_tensor(%arg0: tensor<8x8xi32>) -> tensor<8x8xi16> {
    %0 = arith.trunci %arg0 : tensor<8x8xi32> to tensor<8x8xi16>
    return %0 : tensor<8x8xi16>
  }
  func.func @test_trunci_vector(%arg0: vector<8xi32>) -> vector<8xi16> {
    %0 = arith.trunci %arg0 : vector<8xi32> to vector<8xi16>
    return %0 : vector<8xi16>
  }
  func.func @test_trunci_scalable_vector(%arg0: vector<[8]xi32>) -> vector<[8]xi16> {
    %0 = arith.trunci %arg0 : vector<[8]xi32> to vector<[8]xi16>
    return %0 : vector<[8]xi16>
  }
  func.func @test_truncf(%arg0: f32) -> bf16 {
    %0 = arith.truncf %arg0 : f32 to bf16
    return %0 : bf16
  }
  func.func @test_truncf_tensor(%arg0: tensor<8x8xf32>) -> tensor<8x8xbf16> {
    %0 = arith.truncf %arg0 : tensor<8x8xf32> to tensor<8x8xbf16>
    return %0 : tensor<8x8xbf16>
  }
  func.func @test_truncf_vector(%arg0: vector<8xf32>) -> vector<8xbf16> {
    %0 = arith.truncf %arg0 : vector<8xf32> to vector<8xbf16>
    return %0 : vector<8xbf16>
  }
  func.func @test_truncf_scalable_vector(%arg0: vector<[8]xf32>) -> vector<[8]xbf16> {
    %0 = arith.truncf %arg0 : vector<[8]xf32> to vector<[8]xbf16>
    return %0 : vector<[8]xbf16>
  }
  func.func @test_uitofp(%arg0: i32) -> f32 {
    %0 = arith.uitofp %arg0 : i32 to f32
    return %0 : f32
  }
  func.func @test_uitofp_tensor(%arg0: tensor<8x8xi32>) -> tensor<8x8xf32> {
    %0 = arith.uitofp %arg0 : tensor<8x8xi32> to tensor<8x8xf32>
    return %0 : tensor<8x8xf32>
  }
  func.func @test_uitofp_vector(%arg0: vector<8xi32>) -> vector<8xf32> {
    %0 = arith.uitofp %arg0 : vector<8xi32> to vector<8xf32>
    return %0 : vector<8xf32>
  }
  func.func @test_uitofp_scalable_vector(%arg0: vector<[8]xi32>) -> vector<[8]xf32> {
    %0 = arith.uitofp %arg0 : vector<[8]xi32> to vector<[8]xf32>
    return %0 : vector<[8]xf32>
  }
  func.func @test_sitofp(%arg0: i16) -> f64 {
    %0 = arith.sitofp %arg0 : i16 to f64
    return %0 : f64
  }
  func.func @test_sitofp_tensor(%arg0: tensor<8x8xi16>) -> tensor<8x8xf64> {
    %0 = arith.sitofp %arg0 : tensor<8x8xi16> to tensor<8x8xf64>
    return %0 : tensor<8x8xf64>
  }
  func.func @test_sitofp_vector(%arg0: vector<8xi16>) -> vector<8xf64> {
    %0 = arith.sitofp %arg0 : vector<8xi16> to vector<8xf64>
    return %0 : vector<8xf64>
  }
  func.func @test_sitofp_scalable_vector(%arg0: vector<[8]xi16>) -> vector<[8]xf64> {
    %0 = arith.sitofp %arg0 : vector<[8]xi16> to vector<[8]xf64>
    return %0 : vector<[8]xf64>
  }
  func.func @test_fptoui(%arg0: bf16) -> i8 {
    %0 = arith.fptoui %arg0 : bf16 to i8
    return %0 : i8
  }
  func.func @test_fptoui_tensor(%arg0: tensor<8x8xbf16>) -> tensor<8x8xi8> {
    %0 = arith.fptoui %arg0 : tensor<8x8xbf16> to tensor<8x8xi8>
    return %0 : tensor<8x8xi8>
  }
  func.func @test_fptoui_vector(%arg0: vector<8xbf16>) -> vector<8xi8> {
    %0 = arith.fptoui %arg0 : vector<8xbf16> to vector<8xi8>
    return %0 : vector<8xi8>
  }
  func.func @test_fptoui_scalable_vector(%arg0: vector<[8]xbf16>) -> vector<[8]xi8> {
    %0 = arith.fptoui %arg0 : vector<[8]xbf16> to vector<[8]xi8>
    return %0 : vector<[8]xi8>
  }
  func.func @test_fptosi(%arg0: f64) -> i64 {
    %0 = arith.fptosi %arg0 : f64 to i64
    return %0 : i64
  }
  func.func @test_fptosi_tensor(%arg0: tensor<8x8xf64>) -> tensor<8x8xi64> {
    %0 = arith.fptosi %arg0 : tensor<8x8xf64> to tensor<8x8xi64>
    return %0 : tensor<8x8xi64>
  }
  func.func @test_fptosi_vector(%arg0: vector<8xf64>) -> vector<8xi64> {
    %0 = arith.fptosi %arg0 : vector<8xf64> to vector<8xi64>
    return %0 : vector<8xi64>
  }
  func.func @test_fptosi_scalable_vector(%arg0: vector<[8]xf64>) -> vector<[8]xi64> {
    %0 = arith.fptosi %arg0 : vector<[8]xf64> to vector<[8]xi64>
    return %0 : vector<[8]xi64>
  }
  func.func @test_index_cast0(%arg0: i32) -> index {
    %0 = arith.index_cast %arg0 : i32 to index
    return %0 : index
  }
  func.func @test_index_cast_tensor0(%arg0: tensor<8x8xi32>) -> tensor<8x8xindex> {
    %0 = arith.index_cast %arg0 : tensor<8x8xi32> to tensor<8x8xindex>
    return %0 : tensor<8x8xindex>
  }
  func.func @test_index_cast_vector0(%arg0: vector<8xi32>) -> vector<8xindex> {
    %0 = arith.index_cast %arg0 : vector<8xi32> to vector<8xindex>
    return %0 : vector<8xindex>
  }
  func.func @test_index_cast_scalable_vector0(%arg0: vector<[8]xi32>) -> vector<[8]xindex> {
    %0 = arith.index_cast %arg0 : vector<[8]xi32> to vector<[8]xindex>
    return %0 : vector<[8]xindex>
  }
  func.func @test_index_cast1(%arg0: index) -> i64 {
    %0 = arith.index_cast %arg0 : index to i64
    return %0 : i64
  }
  func.func @test_index_cast_tensor1(%arg0: tensor<8x8xindex>) -> tensor<8x8xi64> {
    %0 = arith.index_cast %arg0 : tensor<8x8xindex> to tensor<8x8xi64>
    return %0 : tensor<8x8xi64>
  }
  func.func @test_index_cast_vector1(%arg0: vector<8xindex>) -> vector<8xi64> {
    %0 = arith.index_cast %arg0 : vector<8xindex> to vector<8xi64>
    return %0 : vector<8xi64>
  }
  func.func @test_index_cast_scalable_vector1(%arg0: vector<[8]xindex>) -> vector<[8]xi64> {
    %0 = arith.index_cast %arg0 : vector<[8]xindex> to vector<[8]xi64>
    return %0 : vector<[8]xi64>
  }
  func.func @test_bitcast0(%arg0: i64) -> f64 {
    %0 = arith.bitcast %arg0 : i64 to f64
    return %0 : f64
  }
  func.func @test_bitcast_tensor0(%arg0: tensor<8x8xi64>) -> tensor<8x8xf64> {
    %0 = arith.bitcast %arg0 : tensor<8x8xi64> to tensor<8x8xf64>
    return %0 : tensor<8x8xf64>
  }
  func.func @test_bitcast_vector0(%arg0: vector<8xi64>) -> vector<8xf64> {
    %0 = arith.bitcast %arg0 : vector<8xi64> to vector<8xf64>
    return %0 : vector<8xf64>
  }
  func.func @test_bitcast_scalable_vector0(%arg0: vector<[8]xi64>) -> vector<[8]xf64> {
    %0 = arith.bitcast %arg0 : vector<[8]xi64> to vector<[8]xf64>
    return %0 : vector<[8]xf64>
  }
  func.func @test_bitcast1(%arg0: f32) -> i32 {
    %0 = arith.bitcast %arg0 : f32 to i32
    return %0 : i32
  }
  func.func @test_bitcast_tensor1(%arg0: tensor<8x8xf32>) -> tensor<8x8xi32> {
    %0 = arith.bitcast %arg0 : tensor<8x8xf32> to tensor<8x8xi32>
    return %0 : tensor<8x8xi32>
  }
  func.func @test_bitcast_vector1(%arg0: vector<8xf32>) -> vector<8xi32> {
    %0 = arith.bitcast %arg0 : vector<8xf32> to vector<8xi32>
    return %0 : vector<8xi32>
  }
  func.func @test_bitcast_scalable_vector1(%arg0: vector<[8]xf32>) -> vector<[8]xi32> {
    %0 = arith.bitcast %arg0 : vector<[8]xf32> to vector<[8]xi32>
    return %0 : vector<[8]xi32>
  }
  func.func @test_cmpi(%arg0: i64, %arg1: i64) -> i1 {
    %0 = arith.cmpi ne, %arg0, %arg1 : i64
    return %0 : i1
  }
  func.func @test_cmpi_tensor(%arg0: tensor<8x8xi64>, %arg1: tensor<8x8xi64>) -> tensor<8x8xi1> {
    %0 = arith.cmpi slt, %arg0, %arg1 : tensor<8x8xi64>
    return %0 : tensor<8x8xi1>
  }
  func.func @test_cmpi_vector(%arg0: vector<8xi64>, %arg1: vector<8xi64>) -> vector<8xi1> {
    %0 = arith.cmpi ult, %arg0, %arg1 : vector<8xi64>
    return %0 : vector<8xi1>
  }
  func.func @test_cmpi_scalable_vector(%arg0: vector<[8]xi64>, %arg1: vector<[8]xi64>) -> vector<[8]xi1> {
    %0 = arith.cmpi ult, %arg0, %arg1 : vector<[8]xi64>
    return %0 : vector<[8]xi1>
  }
  func.func @test_cmpi_vector_0d(%arg0: vector<i64>, %arg1: vector<i64>) -> vector<i1> {
    %0 = arith.cmpi ult, %arg0, %arg1 : vector<i64>
    return %0 : vector<i1>
  }
  func.func @test_cmpf(%arg0: f64, %arg1: f64) -> i1 {
    %0 = arith.cmpf oeq, %arg0, %arg1 : f64
    return %0 : i1
  }
  func.func @test_cmpf_tensor(%arg0: tensor<8x8xf64>, %arg1: tensor<8x8xf64>) -> tensor<8x8xi1> {
    %0 = arith.cmpf olt, %arg0, %arg1 : tensor<8x8xf64>
    return %0 : tensor<8x8xi1>
  }
  func.func @test_cmpf_vector(%arg0: vector<8xf64>, %arg1: vector<8xf64>) -> vector<8xi1> {
    %0 = arith.cmpf ult, %arg0, %arg1 : vector<8xf64>
    return %0 : vector<8xi1>
  }
  func.func @test_cmpf_scalable_vector(%arg0: vector<[8]xf64>, %arg1: vector<[8]xf64>) -> vector<[8]xi1> {
    %0 = arith.cmpf ult, %arg0, %arg1 : vector<[8]xf64>
    return %0 : vector<[8]xi1>
  }
  func.func @test_index_cast(%arg0: index) -> i64 {
    %0 = arith.index_cast %arg0 : index to i64
    return %0 : i64
  }
  func.func @test_index_cast_tensor(%arg0: tensor<index>) -> tensor<i64> {
    %0 = arith.index_cast %arg0 : tensor<index> to tensor<i64>
    return %0 : tensor<i64>
  }
  func.func @test_index_cast_tensor_reverse(%arg0: tensor<i64>) -> tensor<index> {
    %0 = arith.index_cast %arg0 : tensor<i64> to tensor<index>
    return %0 : tensor<index>
  }
  func.func @bitcast(%arg0: f32) -> i32 {
    %0 = arith.bitcast %arg0 : f32 to i32
    return %0 : i32
  }
  func.func @test_constant() {
    %c42_i32 = arith.constant 42 : i32
    %c42_i32_0 = arith.constant 42 : i32
    %c43 = arith.constant {crazy = "func.foo"} 43 : index
    %cst = arith.constant 4.300000e+01 : bf16
    %cst_1 = arith.constant dense<0> : vector<4xi32>
    %cst_2 = arith.constant dense<0> : tensor<42xi32>
    %cst_3 = arith.constant dense<0> : vector<42xi32>
    %true = arith.constant true
    %false = arith.constant false
    %c-1_i128 = arith.constant -1 : i128
    %c85070591730234615865843651857942052864_i128 = arith.constant 85070591730234615865843651857942052864 : i128
    return
  }
  func.func @maximum(%arg0: vector<4xf32>, %arg1: vector<4xf32>, %arg2: vector<[4]xf32>, %arg3: vector<[4]xf32>, %arg4: f32, %arg5: f32, %arg6: i32, %arg7: i32) {
    %0 = arith.maxf %arg0, %arg1 : vector<4xf32>
    %1 = arith.maxf %arg2, %arg3 : vector<[4]xf32>
    %2 = arith.maxf %arg4, %arg5 : f32
    %3 = arith.maxsi %arg6, %arg7 : i32
    %4 = arith.maxui %arg6, %arg7 : i32
    return
  }
  func.func @minimum(%arg0: vector<4xf32>, %arg1: vector<4xf32>, %arg2: vector<[4]xf32>, %arg3: vector<[4]xf32>, %arg4: f32, %arg5: f32, %arg6: i32, %arg7: i32) {
    %0 = arith.minf %arg0, %arg1 : vector<4xf32>
    %1 = arith.minf %arg2, %arg3 : vector<[4]xf32>
    %2 = arith.minf %arg4, %arg5 : f32
    %3 = arith.minsi %arg6, %arg7 : i32
    %4 = arith.minui %arg6, %arg7 : i32
    return
  }
}

