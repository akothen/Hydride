module {
  func.func @vecdim_reduction(%arg0: memref<256x512xi32>, %arg1: memref<256xi32>) {
    %c16 = arith.constant 16 : index
    %c32 = arith.constant 32 : index
    %c48 = arith.constant 48 : index
    %c64 = arith.constant 64 : index
    %c80 = arith.constant 80 : index
    %c96 = arith.constant 96 : index
    %c112 = arith.constant 112 : index
    %c128 = arith.constant 128 : index
    %c144 = arith.constant 144 : index
    %c160 = arith.constant 160 : index
    %c176 = arith.constant 176 : index
    %c192 = arith.constant 192 : index
    %c208 = arith.constant 208 : index
    %c224 = arith.constant 224 : index
    %c240 = arith.constant 240 : index
    %c256 = arith.constant 256 : index
    %c272 = arith.constant 272 : index
    %c288 = arith.constant 288 : index
    %c304 = arith.constant 304 : index
    %c320 = arith.constant 320 : index
    %c336 = arith.constant 336 : index
    %c352 = arith.constant 352 : index
    %c368 = arith.constant 368 : index
    %c384 = arith.constant 384 : index
    %c400 = arith.constant 400 : index
    %c416 = arith.constant 416 : index
    %c432 = arith.constant 432 : index
    %c448 = arith.constant 448 : index
    %c464 = arith.constant 464 : index
    %c480 = arith.constant 480 : index
    %c496 = arith.constant 496 : index
    %c0 = arith.constant 0 : index
    affine.for %arg2 = 0 to 256 {
      %0 = vector.load %arg0[%arg2, %c0] : memref<256x512xi32>, vector<16xi32>
      %1 = vector.load %arg0[%arg2, %c16] : memref<256x512xi32>, vector<16xi32>
      %2 = arith.addi %0, %1 : vector<16xi32>
      %3 = vector.load %arg0[%arg2, %c32] : memref<256x512xi32>, vector<16xi32>
      %4 = arith.addi %2, %3 : vector<16xi32>
      %5 = vector.load %arg0[%arg2, %c48] : memref<256x512xi32>, vector<16xi32>
      %6 = arith.addi %4, %5 : vector<16xi32>
      %7 = vector.load %arg0[%arg2, %c64] : memref<256x512xi32>, vector<16xi32>
      %8 = arith.addi %6, %7 : vector<16xi32>
      %9 = vector.load %arg0[%arg2, %c80] : memref<256x512xi32>, vector<16xi32>
      %10 = arith.addi %8, %9 : vector<16xi32>
      %11 = vector.load %arg0[%arg2, %c96] : memref<256x512xi32>, vector<16xi32>
      %12 = arith.addi %10, %11 : vector<16xi32>
      %13 = vector.load %arg0[%arg2, %c112] : memref<256x512xi32>, vector<16xi32>
      %14 = arith.addi %12, %13 : vector<16xi32>
      %15 = vector.load %arg0[%arg2, %c128] : memref<256x512xi32>, vector<16xi32>
      %16 = arith.addi %14, %15 : vector<16xi32>
      %17 = vector.load %arg0[%arg2, %c144] : memref<256x512xi32>, vector<16xi32>
      %18 = arith.addi %16, %17 : vector<16xi32>
      %19 = vector.load %arg0[%arg2, %c160] : memref<256x512xi32>, vector<16xi32>
      %20 = arith.addi %18, %19 : vector<16xi32>
      %21 = vector.load %arg0[%arg2, %c176] : memref<256x512xi32>, vector<16xi32>
      %22 = arith.addi %20, %21 : vector<16xi32>
      %23 = vector.load %arg0[%arg2, %c192] : memref<256x512xi32>, vector<16xi32>
      %24 = arith.addi %22, %23 : vector<16xi32>
      %25 = vector.load %arg0[%arg2, %c208] : memref<256x512xi32>, vector<16xi32>
      %26 = arith.addi %24, %25 : vector<16xi32>
      %27 = vector.load %arg0[%arg2, %c224] : memref<256x512xi32>, vector<16xi32>
      %28 = arith.addi %26, %27 : vector<16xi32>
      %29 = vector.load %arg0[%arg2, %c240] : memref<256x512xi32>, vector<16xi32>
      %30 = arith.addi %28, %29 : vector<16xi32>
      %31 = vector.load %arg0[%arg2, %c256] : memref<256x512xi32>, vector<16xi32>
      %32 = arith.addi %30, %31 : vector<16xi32>
      %33 = vector.load %arg0[%arg2, %c272] : memref<256x512xi32>, vector<16xi32>
      %34 = arith.addi %32, %33 : vector<16xi32>
      %35 = vector.load %arg0[%arg2, %c288] : memref<256x512xi32>, vector<16xi32>
      %36 = arith.addi %34, %35 : vector<16xi32>
      %37 = vector.load %arg0[%arg2, %c304] : memref<256x512xi32>, vector<16xi32>
      %38 = arith.addi %36, %37 : vector<16xi32>
      %39 = vector.load %arg0[%arg2, %c320] : memref<256x512xi32>, vector<16xi32>
      %40 = arith.addi %38, %39 : vector<16xi32>
      %41 = vector.load %arg0[%arg2, %c336] : memref<256x512xi32>, vector<16xi32>
      %42 = arith.addi %40, %41 : vector<16xi32>
      %43 = vector.load %arg0[%arg2, %c352] : memref<256x512xi32>, vector<16xi32>
      %44 = arith.addi %42, %43 : vector<16xi32>
      %45 = vector.load %arg0[%arg2, %c368] : memref<256x512xi32>, vector<16xi32>
      %46 = arith.addi %44, %45 : vector<16xi32>
      %47 = vector.load %arg0[%arg2, %c384] : memref<256x512xi32>, vector<16xi32>
      %48 = arith.addi %46, %47 : vector<16xi32>
      %49 = vector.load %arg0[%arg2, %c400] : memref<256x512xi32>, vector<16xi32>
      %50 = arith.addi %48, %49 : vector<16xi32>
      %51 = vector.load %arg0[%arg2, %c416] : memref<256x512xi32>, vector<16xi32>
      %52 = arith.addi %50, %51 : vector<16xi32>
      %53 = vector.load %arg0[%arg2, %c432] : memref<256x512xi32>, vector<16xi32>
      %54 = arith.addi %52, %53 : vector<16xi32>
      %55 = vector.load %arg0[%arg2, %c448] : memref<256x512xi32>, vector<16xi32>
      %56 = arith.addi %54, %55 : vector<16xi32>
      %57 = vector.load %arg0[%arg2, %c464] : memref<256x512xi32>, vector<16xi32>
      %58 = arith.addi %56, %57 : vector<16xi32>
      %59 = vector.load %arg0[%arg2, %c480] : memref<256x512xi32>, vector<16xi32>
      %60 = arith.addi %58, %59 : vector<16xi32>
      %61 = vector.load %arg0[%arg2, %c496] : memref<256x512xi32>, vector<16xi32>
      %62 = arith.addi %60, %61 : vector<16xi32>
      %63 = vector.reduction <add>, %62 : vector<16xi32> into i32
      affine.store %63, %arg1[%arg2] : memref<256xi32>
    }
    return
  }
}

